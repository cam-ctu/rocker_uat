
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:05:13.190] plan(): Setting new future strategy stack:
[18:05:13.191] List of future strategies:
[18:05:13.191] 1. sequential:
[18:05:13.191]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:13.191]    - tweaked: FALSE
[18:05:13.191]    - call: future::plan("sequential")
[18:05:13.214] plan(): nbrOfWorkers() = 1
> 
> message("*** multicore() - terminating workers ...")
*** multicore() - terminating workers ...
> 
> if (supportsMulticore() && availableCores("multicore") >= 2L) {
+   plan(multicore, workers = 2L)
+ 
+   all <- nbrOfWorkers()
+   free <- nbrOfFreeWorkers()
+   stopifnot(
+     nbrOfWorkers() == 2L,
+     nbrOfFreeWorkers() == 2L
+   )
+   
+   ## Force R worker to quit
+   f <- future({ tools::pskill(pid = Sys.getpid()) })
+   res <- tryCatch(value(f), error = identity)
+   print(res)
+   print(conditionMessage(res))
+   stopifnot(inherits(res, "FutureError"))
+ 
+   stopifnot(nbrOfWorkers() == all)
+   ## Assert that the worker slot was released? Not always possible
+   str(f$job)
+   cat(sprintf("nbrOfFreeWorkers(): %d\n", nbrOfFreeWorkers()))
+   if (!is.na(f$job$alive) && !f$job$alive) {
+     stopifnot(nbrOfFreeWorkers() == free)
+   } else {
+     stopifnot(nbrOfFreeWorkers() <= free)
+   }
+ }
[18:05:13.242] plan(): Setting new future strategy stack:
[18:05:13.243] List of future strategies:
[18:05:13.243] 1. multicore:
[18:05:13.243]    - args: function (..., workers = 2L, envir = parent.frame())
[18:05:13.243]    - tweaked: TRUE
[18:05:13.243]    - call: plan(multicore, workers = 2L)
[18:05:13.266] plan(): nbrOfWorkers() = 2
[18:05:13.269] getGlobalsAndPackages() ...
[18:05:13.269] Searching for globals...
[18:05:13.281] - globals found: [3] ‘{’, ‘::’, ‘Sys.getpid’
[18:05:13.281] Searching for globals ... DONE
[18:05:13.282] Resolving globals: FALSE
[18:05:13.283] 
[18:05:13.283] 
[18:05:13.283] getGlobalsAndPackages() ... DONE
[18:05:13.284] run() for ‘Future’ ...
[18:05:13.284] - state: ‘created’
[18:05:13.285] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:05:13.286] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:13.286] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:05:13.286]   - Field: ‘label’
[18:05:13.286]   - Field: ‘local’
[18:05:13.287]   - Field: ‘owner’
[18:05:13.287]   - Field: ‘envir’
[18:05:13.287]   - Field: ‘workers’
[18:05:13.287]   - Field: ‘packages’
[18:05:13.287]   - Field: ‘gc’
[18:05:13.288]   - Field: ‘job’
[18:05:13.288]   - Field: ‘conditions’
[18:05:13.288]   - Field: ‘expr’
[18:05:13.288]   - Field: ‘uuid’
[18:05:13.288]   - Field: ‘seed’
[18:05:13.289]   - Field: ‘version’
[18:05:13.289]   - Field: ‘result’
[18:05:13.289]   - Field: ‘asynchronous’
[18:05:13.289]   - Field: ‘calls’
[18:05:13.289]   - Field: ‘globals’
[18:05:13.290]   - Field: ‘stdout’
[18:05:13.290]   - Field: ‘earlySignal’
[18:05:13.290]   - Field: ‘lazy’
[18:05:13.290]   - Field: ‘state’
[18:05:13.290] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:05:13.291] - Launch lazy future ...
[18:05:13.293] Packages needed by the future expression (n = 0): <none>
[18:05:13.293] Packages needed by future strategies (n = 0): <none>
[18:05:13.294] {
[18:05:13.294]     {
[18:05:13.294]         {
[18:05:13.294]             ...future.startTime <- base::Sys.time()
[18:05:13.294]             {
[18:05:13.294]                 {
[18:05:13.294]                   {
[18:05:13.294]                     {
[18:05:13.294]                       base::local({
[18:05:13.294]                         has_future <- base::requireNamespace("future", 
[18:05:13.294]                           quietly = TRUE)
[18:05:13.294]                         if (has_future) {
[18:05:13.294]                           ns <- base::getNamespace("future")
[18:05:13.294]                           version <- ns[[".package"]][["version"]]
[18:05:13.294]                           if (is.null(version)) 
[18:05:13.294]                             version <- utils::packageVersion("future")
[18:05:13.294]                         }
[18:05:13.294]                         else {
[18:05:13.294]                           version <- NULL
[18:05:13.294]                         }
[18:05:13.294]                         if (!has_future || version < "1.8.0") {
[18:05:13.294]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:13.294]                             "", base::R.version$version.string), 
[18:05:13.294]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:13.294]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:13.294]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:13.294]                               "release", "version")], collapse = " "), 
[18:05:13.294]                             hostname = base::Sys.info()[["nodename"]])
[18:05:13.294]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:13.294]                             info)
[18:05:13.294]                           info <- base::paste(info, collapse = "; ")
[18:05:13.294]                           if (!has_future) {
[18:05:13.294]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:13.294]                               info)
[18:05:13.294]                           }
[18:05:13.294]                           else {
[18:05:13.294]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:13.294]                               info, version)
[18:05:13.294]                           }
[18:05:13.294]                           base::stop(msg)
[18:05:13.294]                         }
[18:05:13.294]                       })
[18:05:13.294]                     }
[18:05:13.294]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:13.294]                     base::options(mc.cores = 1L)
[18:05:13.294]                   }
[18:05:13.294]                   ...future.strategy.old <- future::plan("list")
[18:05:13.294]                   options(future.plan = NULL)
[18:05:13.294]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:13.294]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:13.294]                 }
[18:05:13.294]                 ...future.workdir <- getwd()
[18:05:13.294]             }
[18:05:13.294]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:13.294]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:13.294]         }
[18:05:13.294]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:13.294]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:13.294]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:13.294]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:13.294]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:13.294]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:13.294]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:13.294]             base::names(...future.oldOptions))
[18:05:13.294]     }
[18:05:13.294]     if (FALSE) {
[18:05:13.294]     }
[18:05:13.294]     else {
[18:05:13.294]         if (TRUE) {
[18:05:13.294]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:13.294]                 open = "w")
[18:05:13.294]         }
[18:05:13.294]         else {
[18:05:13.294]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:13.294]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:13.294]         }
[18:05:13.294]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:13.294]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:13.294]             base::sink(type = "output", split = FALSE)
[18:05:13.294]             base::close(...future.stdout)
[18:05:13.294]         }, add = TRUE)
[18:05:13.294]     }
[18:05:13.294]     ...future.frame <- base::sys.nframe()
[18:05:13.294]     ...future.conditions <- base::list()
[18:05:13.294]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:13.294]     if (FALSE) {
[18:05:13.294]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:13.294]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:13.294]     }
[18:05:13.294]     ...future.result <- base::tryCatch({
[18:05:13.294]         base::withCallingHandlers({
[18:05:13.294]             ...future.value <- base::withVisible(base::local({
[18:05:13.294]                 withCallingHandlers({
[18:05:13.294]                   {
[18:05:13.294]                     tools::pskill(pid = Sys.getpid())
[18:05:13.294]                   }
[18:05:13.294]                 }, immediateCondition = function(cond) {
[18:05:13.294]                   save_rds <- function (object, pathname, ...) 
[18:05:13.294]                   {
[18:05:13.294]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:13.294]                     if (file_test("-f", pathname_tmp)) {
[18:05:13.294]                       fi_tmp <- file.info(pathname_tmp)
[18:05:13.294]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:13.294]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:13.294]                         fi_tmp[["mtime"]])
[18:05:13.294]                     }
[18:05:13.294]                     tryCatch({
[18:05:13.294]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:13.294]                     }, error = function(ex) {
[18:05:13.294]                       msg <- conditionMessage(ex)
[18:05:13.294]                       fi_tmp <- file.info(pathname_tmp)
[18:05:13.294]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:13.294]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:13.294]                         fi_tmp[["mtime"]], msg)
[18:05:13.294]                       ex$message <- msg
[18:05:13.294]                       stop(ex)
[18:05:13.294]                     })
[18:05:13.294]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:13.294]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:13.294]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:13.294]                       fi_tmp <- file.info(pathname_tmp)
[18:05:13.294]                       fi <- file.info(pathname)
[18:05:13.294]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:13.294]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:13.294]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:13.294]                         fi[["size"]], fi[["mtime"]])
[18:05:13.294]                       stop(msg)
[18:05:13.294]                     }
[18:05:13.294]                     invisible(pathname)
[18:05:13.294]                   }
[18:05:13.294]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:13.294]                     rootPath = tempdir()) 
[18:05:13.294]                   {
[18:05:13.294]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:13.294]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:13.294]                       tmpdir = path, fileext = ".rds")
[18:05:13.294]                     save_rds(obj, file)
[18:05:13.294]                   }
[18:05:13.294]                   saveImmediateCondition(cond, path = "/tmp/Rtmpz5xOZS/.future/immediateConditions")
[18:05:13.294]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:13.294]                   {
[18:05:13.294]                     inherits <- base::inherits
[18:05:13.294]                     invokeRestart <- base::invokeRestart
[18:05:13.294]                     is.null <- base::is.null
[18:05:13.294]                     muffled <- FALSE
[18:05:13.294]                     if (inherits(cond, "message")) {
[18:05:13.294]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:13.294]                       if (muffled) 
[18:05:13.294]                         invokeRestart("muffleMessage")
[18:05:13.294]                     }
[18:05:13.294]                     else if (inherits(cond, "warning")) {
[18:05:13.294]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:13.294]                       if (muffled) 
[18:05:13.294]                         invokeRestart("muffleWarning")
[18:05:13.294]                     }
[18:05:13.294]                     else if (inherits(cond, "condition")) {
[18:05:13.294]                       if (!is.null(pattern)) {
[18:05:13.294]                         computeRestarts <- base::computeRestarts
[18:05:13.294]                         grepl <- base::grepl
[18:05:13.294]                         restarts <- computeRestarts(cond)
[18:05:13.294]                         for (restart in restarts) {
[18:05:13.294]                           name <- restart$name
[18:05:13.294]                           if (is.null(name)) 
[18:05:13.294]                             next
[18:05:13.294]                           if (!grepl(pattern, name)) 
[18:05:13.294]                             next
[18:05:13.294]                           invokeRestart(restart)
[18:05:13.294]                           muffled <- TRUE
[18:05:13.294]                           break
[18:05:13.294]                         }
[18:05:13.294]                       }
[18:05:13.294]                     }
[18:05:13.294]                     invisible(muffled)
[18:05:13.294]                   }
[18:05:13.294]                   muffleCondition(cond)
[18:05:13.294]                 })
[18:05:13.294]             }))
[18:05:13.294]             future::FutureResult(value = ...future.value$value, 
[18:05:13.294]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:13.294]                   ...future.rng), globalenv = if (FALSE) 
[18:05:13.294]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:13.294]                     ...future.globalenv.names))
[18:05:13.294]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:13.294]         }, condition = base::local({
[18:05:13.294]             c <- base::c
[18:05:13.294]             inherits <- base::inherits
[18:05:13.294]             invokeRestart <- base::invokeRestart
[18:05:13.294]             length <- base::length
[18:05:13.294]             list <- base::list
[18:05:13.294]             seq.int <- base::seq.int
[18:05:13.294]             signalCondition <- base::signalCondition
[18:05:13.294]             sys.calls <- base::sys.calls
[18:05:13.294]             `[[` <- base::`[[`
[18:05:13.294]             `+` <- base::`+`
[18:05:13.294]             `<<-` <- base::`<<-`
[18:05:13.294]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:13.294]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:13.294]                   3L)]
[18:05:13.294]             }
[18:05:13.294]             function(cond) {
[18:05:13.294]                 is_error <- inherits(cond, "error")
[18:05:13.294]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:13.294]                   NULL)
[18:05:13.294]                 if (is_error) {
[18:05:13.294]                   sessionInformation <- function() {
[18:05:13.294]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:13.294]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:13.294]                       search = base::search(), system = base::Sys.info())
[18:05:13.294]                   }
[18:05:13.294]                   ...future.conditions[[length(...future.conditions) + 
[18:05:13.294]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:13.294]                     cond$call), session = sessionInformation(), 
[18:05:13.294]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:13.294]                   signalCondition(cond)
[18:05:13.294]                 }
[18:05:13.294]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:13.294]                 "immediateCondition"))) {
[18:05:13.294]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:13.294]                   ...future.conditions[[length(...future.conditions) + 
[18:05:13.294]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:13.294]                   if (TRUE && !signal) {
[18:05:13.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:13.294]                     {
[18:05:13.294]                       inherits <- base::inherits
[18:05:13.294]                       invokeRestart <- base::invokeRestart
[18:05:13.294]                       is.null <- base::is.null
[18:05:13.294]                       muffled <- FALSE
[18:05:13.294]                       if (inherits(cond, "message")) {
[18:05:13.294]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:13.294]                         if (muffled) 
[18:05:13.294]                           invokeRestart("muffleMessage")
[18:05:13.294]                       }
[18:05:13.294]                       else if (inherits(cond, "warning")) {
[18:05:13.294]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:13.294]                         if (muffled) 
[18:05:13.294]                           invokeRestart("muffleWarning")
[18:05:13.294]                       }
[18:05:13.294]                       else if (inherits(cond, "condition")) {
[18:05:13.294]                         if (!is.null(pattern)) {
[18:05:13.294]                           computeRestarts <- base::computeRestarts
[18:05:13.294]                           grepl <- base::grepl
[18:05:13.294]                           restarts <- computeRestarts(cond)
[18:05:13.294]                           for (restart in restarts) {
[18:05:13.294]                             name <- restart$name
[18:05:13.294]                             if (is.null(name)) 
[18:05:13.294]                               next
[18:05:13.294]                             if (!grepl(pattern, name)) 
[18:05:13.294]                               next
[18:05:13.294]                             invokeRestart(restart)
[18:05:13.294]                             muffled <- TRUE
[18:05:13.294]                             break
[18:05:13.294]                           }
[18:05:13.294]                         }
[18:05:13.294]                       }
[18:05:13.294]                       invisible(muffled)
[18:05:13.294]                     }
[18:05:13.294]                     muffleCondition(cond, pattern = "^muffle")
[18:05:13.294]                   }
[18:05:13.294]                 }
[18:05:13.294]                 else {
[18:05:13.294]                   if (TRUE) {
[18:05:13.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:13.294]                     {
[18:05:13.294]                       inherits <- base::inherits
[18:05:13.294]                       invokeRestart <- base::invokeRestart
[18:05:13.294]                       is.null <- base::is.null
[18:05:13.294]                       muffled <- FALSE
[18:05:13.294]                       if (inherits(cond, "message")) {
[18:05:13.294]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:13.294]                         if (muffled) 
[18:05:13.294]                           invokeRestart("muffleMessage")
[18:05:13.294]                       }
[18:05:13.294]                       else if (inherits(cond, "warning")) {
[18:05:13.294]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:13.294]                         if (muffled) 
[18:05:13.294]                           invokeRestart("muffleWarning")
[18:05:13.294]                       }
[18:05:13.294]                       else if (inherits(cond, "condition")) {
[18:05:13.294]                         if (!is.null(pattern)) {
[18:05:13.294]                           computeRestarts <- base::computeRestarts
[18:05:13.294]                           grepl <- base::grepl
[18:05:13.294]                           restarts <- computeRestarts(cond)
[18:05:13.294]                           for (restart in restarts) {
[18:05:13.294]                             name <- restart$name
[18:05:13.294]                             if (is.null(name)) 
[18:05:13.294]                               next
[18:05:13.294]                             if (!grepl(pattern, name)) 
[18:05:13.294]                               next
[18:05:13.294]                             invokeRestart(restart)
[18:05:13.294]                             muffled <- TRUE
[18:05:13.294]                             break
[18:05:13.294]                           }
[18:05:13.294]                         }
[18:05:13.294]                       }
[18:05:13.294]                       invisible(muffled)
[18:05:13.294]                     }
[18:05:13.294]                     muffleCondition(cond, pattern = "^muffle")
[18:05:13.294]                   }
[18:05:13.294]                 }
[18:05:13.294]             }
[18:05:13.294]         }))
[18:05:13.294]     }, error = function(ex) {
[18:05:13.294]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:13.294]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:13.294]                 ...future.rng), started = ...future.startTime, 
[18:05:13.294]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:13.294]             version = "1.8"), class = "FutureResult")
[18:05:13.294]     }, finally = {
[18:05:13.294]         if (!identical(...future.workdir, getwd())) 
[18:05:13.294]             setwd(...future.workdir)
[18:05:13.294]         {
[18:05:13.294]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:13.294]                 ...future.oldOptions$nwarnings <- NULL
[18:05:13.294]             }
[18:05:13.294]             base::options(...future.oldOptions)
[18:05:13.294]             if (.Platform$OS.type == "windows") {
[18:05:13.294]                 old_names <- names(...future.oldEnvVars)
[18:05:13.294]                 envs <- base::Sys.getenv()
[18:05:13.294]                 names <- names(envs)
[18:05:13.294]                 common <- intersect(names, old_names)
[18:05:13.294]                 added <- setdiff(names, old_names)
[18:05:13.294]                 removed <- setdiff(old_names, names)
[18:05:13.294]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:13.294]                   envs[common]]
[18:05:13.294]                 NAMES <- toupper(changed)
[18:05:13.294]                 args <- list()
[18:05:13.294]                 for (kk in seq_along(NAMES)) {
[18:05:13.294]                   name <- changed[[kk]]
[18:05:13.294]                   NAME <- NAMES[[kk]]
[18:05:13.294]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.294]                     next
[18:05:13.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:13.294]                 }
[18:05:13.294]                 NAMES <- toupper(added)
[18:05:13.294]                 for (kk in seq_along(NAMES)) {
[18:05:13.294]                   name <- added[[kk]]
[18:05:13.294]                   NAME <- NAMES[[kk]]
[18:05:13.294]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.294]                     next
[18:05:13.294]                   args[[name]] <- ""
[18:05:13.294]                 }
[18:05:13.294]                 NAMES <- toupper(removed)
[18:05:13.294]                 for (kk in seq_along(NAMES)) {
[18:05:13.294]                   name <- removed[[kk]]
[18:05:13.294]                   NAME <- NAMES[[kk]]
[18:05:13.294]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.294]                     next
[18:05:13.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:13.294]                 }
[18:05:13.294]                 if (length(args) > 0) 
[18:05:13.294]                   base::do.call(base::Sys.setenv, args = args)
[18:05:13.294]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:13.294]             }
[18:05:13.294]             else {
[18:05:13.294]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:13.294]             }
[18:05:13.294]             {
[18:05:13.294]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:13.294]                   0L) {
[18:05:13.294]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:13.294]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:13.294]                   base::options(opts)
[18:05:13.294]                 }
[18:05:13.294]                 {
[18:05:13.294]                   {
[18:05:13.294]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:13.294]                     NULL
[18:05:13.294]                   }
[18:05:13.294]                   options(future.plan = NULL)
[18:05:13.294]                   if (is.na(NA_character_)) 
[18:05:13.294]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:13.294]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:13.294]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:13.294]                     .init = FALSE)
[18:05:13.294]                 }
[18:05:13.294]             }
[18:05:13.294]         }
[18:05:13.294]     })
[18:05:13.294]     if (TRUE) {
[18:05:13.294]         base::sink(type = "output", split = FALSE)
[18:05:13.294]         if (TRUE) {
[18:05:13.294]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:13.294]         }
[18:05:13.294]         else {
[18:05:13.294]             ...future.result["stdout"] <- base::list(NULL)
[18:05:13.294]         }
[18:05:13.294]         base::close(...future.stdout)
[18:05:13.294]         ...future.stdout <- NULL
[18:05:13.294]     }
[18:05:13.294]     ...future.result$conditions <- ...future.conditions
[18:05:13.294]     ...future.result$finished <- base::Sys.time()
[18:05:13.294]     ...future.result
[18:05:13.294] }
[18:05:13.299] requestCore(): workers = 2
[18:05:13.303] MulticoreFuture started
[18:05:13.304] - Launch lazy future ... done
[18:05:13.304] run() for ‘MulticoreFuture’ ... done
[18:05:13.306] plan(): Setting new future strategy stack:
[18:05:13.307] result() for MulticoreFuture ...
[18:05:13.306] List of future strategies:
[18:05:13.306] 1. sequential:
[18:05:13.306]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:13.306]    - tweaked: FALSE
[18:05:13.306]    - call: NULL
[18:05:13.308] plan(): nbrOfWorkers() = 1
Warning in mccollect(jobs = jobs, wait = TRUE) :
  1 parallel job did not deliver a result
[18:05:13.313] Detected non-FutureResult result ...
[18:05:13.322] Attempting to find a working pid_exists_*() function ...
Call: tools::pskill(325927, signal = 0L)
[1] TRUE
Call: tools::pskill(325927, signal = 0L)
[1] TRUE
[18:05:13.323] - success
[18:05:13.323] Attempting to find a working pid_exists_*() function ... done
[18:05:13.331] Removing MulticoreFuture from FutureRegistry (multicore-fcc26eae-8200-cb51-0110-51358c461aca)
[18:05:13.331] Detected non-FutureResult result ... done
[18:05:13.331] result() for MulticoreFuture ... done
<FutureError: Failed to retrieve the result of MulticoreFuture (<none>) from the forked worker (on localhost; PID 325949). Post-mortem diagnostic: No process exists with this PID, i.e. the forked localhost worker is no longer alive>


Future UUID: 064bf541-429c-e018-0fc9-f59042eeb34f


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    tools::pskill(pid = Sys.getpid())
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: fcc26eae-8200-cb51-0110-51358c461aca
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
[1] "Failed to retrieve the result of MulticoreFuture (<none>) from the forked worker (on localhost; PID 325949). Post-mortem diagnostic: No process exists with this PID, i.e. the forked localhost worker is no longer alive"
List of 3
 $ pid  : int 325949
 $ fd   : int [1:2] 5 8
 $ alive: logi FALSE
 - attr(*, "class")= chr [1:3] "parallelJob" "childProcess" "process"
nbrOfFreeWorkers(): 2
> 
> message("*** multicore() - terminating workers ... DONE")
*** multicore() - terminating workers ... DONE
> 
> source("incl/end.R")
[18:05:13.349] plan(): Setting new future strategy stack:
[18:05:13.349] List of future strategies:
[18:05:13.349] 1. FutureStrategy:
[18:05:13.349]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:13.349]    - tweaked: FALSE
[18:05:13.349]    - call: future::plan(oplan)
[18:05:13.350] plan(): nbrOfWorkers() = 1
> 
