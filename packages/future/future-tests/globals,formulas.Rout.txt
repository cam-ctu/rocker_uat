
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:35.384] plan(): Setting new future strategy stack:
[17:02:35.384] List of future strategies:
[17:02:35.384] 1. sequential:
[17:02:35.384]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.384]    - tweaked: FALSE
[17:02:35.384]    - call: future::plan("sequential")
[17:02:35.396] plan(): nbrOfWorkers() = 1
> 
> library("datasets") ## cars data set
> library("stats")    ## lm(), poly(), xtabs()
> 
> message("*** Globals - formulas ...")
*** Globals - formulas ...
> 
> ## (i) lm(<formula>):
> ## From example("lm", package = "stats")
> ctl <- c(4.17, 5.58, 5.18, 6.11, 4.50, 4.61, 5.17, 4.53, 5.33, 5.14)
> trt <- c(4.81, 4.17, 4.41, 3.59, 5.87, 3.83, 6.03, 4.89, 4.32, 4.69)
> group <- gl(2, 10, 20, labels = c("Ctl", "Trt"))
> weight <- c(ctl, trt)
> ctl <- trt <- NULL
> ## Truth:
> fit_i <- lm(weight ~ group - 1)
> print(fit_i)

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

> 
> ## (ii) xtabs(~ x):
> x <- c(1, 1, 2, 2, 2)
> ## Truth:
> tbl_ii <- xtabs(~ x)
> print(tbl_ii)
x
1 2 
2 3 
> 
> ## (iii) lm(<formula>, data = cars):
> exprs <- list(
+   # "remove-intercept-term" form of no-intercept
+   a = substitute({ lm(dist ~ . -1, data = cars) }),
+   # "make-intercept-zero" form of no-intercept
+   b = substitute({ lm(dist ~ . +0, data = cars) }),
+   # doesn't do what we want here
+   c = substitute({ lm(dist ~ speed + speed ^ 2, data = cars) }),
+   # gets us a quadratic term
+   d = substitute({ lm(dist ~ speed + I(speed ^ 2), data = cars) }),
+   # avoid potential multicollinearity
+   e = substitute({ lm(dist ~ poly(speed, 2), data = cars) })
+ )
> 
> ## (iv) Globals - map(x, ~ expr):
> ## A fake purrr::map() function with limited functionality
> map <- function(.x, .f, ...) {
+   if (inherits(.f, "formula")) {
+     expr <- .f[[-1]]
+     .f <- eval(bquote(function(...) {
+       .(expr)
+     }))
+   }
+   eval(lapply(.x, FUN = .f, ...))
+ }
> 
> inner_function <- function(x) { x + 1 }
> 
> outer_function <- function(x) {
+   map(1:2, ~ inner_function(.x))
+ }
> 
> y_iv <- outer_function(1L)
> str(y_iv)
List of 2
 $ : num [1:2] 2 3
 $ : num [1:2] 2 3
> 
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("availableCores(): ", availableCores())
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy)
+ 
+     message("- lm(<formula>) ...")
+     
+     ## Explicit future
+     f <- future({ lm(weight ~ group - 1) })
+     fit <- value(f)
+     print(fit)
+     stopifnot(all.equal(fit, fit_i))
+ 
+     ## Explicit future (lazy)
+     f <- future({ lm(weight ~ group - 1) }, lazy = TRUE)
+     fit <- value(f)
+     print(fit)
+     stopifnot(all.equal(fit, fit_i))
+ 
+     ## Future assignment
+     fit %<-% { lm(weight ~ group - 1) }
+     print(fit)
+     stopifnot(all.equal(fit, fit_i))
+ 
+     ## Future assignment (non-lazy)
+     fit %<-% { lm(weight ~ group - 1) } %lazy% FALSE
+     print(fit)
+     stopifnot(all.equal(fit, fit_i))
+ 
+     ## Future assignment (lazy)
+     fit %<-% { lm(weight ~ group - 1) } %lazy% TRUE
+     print(fit)
+     stopifnot(all.equal(fit, fit_i))
+ 
+     message("- Globals - one-side formulas, e.g. xtabs(~ x) ...")
+     ## Explicit future
+     f <- future({ xtabs(~ x) })
+     tbl <- value(f)
+     print(tbl)
+     stopifnot(all.equal(tbl, tbl_ii))
+ 
+     ## Future assignment
+     tbl %<-% { xtabs(~ x) }
+     print(tbl)
+     stopifnot(all.equal(tbl, tbl_ii))
+ 
+     message("- Globals - lm(<formula>, data = cars) ...")
+     for (kk in seq_along(exprs)) {
+       expr <- exprs[[kk]]
+       name <- names(exprs)[kk]
+       message(sprintf("- Globals - lm(<formula #%d (%s)>, data = cars) ...",
+                       kk, sQuote(name)))
+     
+       fit_iii <- eval(expr)
+       print(fit_iii)
+     
+       f <- future(expr, substitute = FALSE)
+       fit <- value(f)
+       print(fit)
+     
+       stopifnot(all.equal(fit, fit_iii))
+     } ## for (kk ...)
+ 
+     message("- Globals - map(x, ~ expr) ...")
+     f <- future({ outer_function(1L) })
+     y <- value(f)
+     str(y)
+     stopifnot(all.equal(y, y_iv))
+ 
+     y %<-% { outer_function(1L) }
+     str(y)
+     stopifnot(all.equal(y, y_iv))
+   } ## for (strategy ...)
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
availableCores(): 1
- plan('sequential') ...
[17:02:35.458] plan(): Setting new future strategy stack:
[17:02:35.458] List of future strategies:
[17:02:35.458] 1. sequential:
[17:02:35.458]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.458]    - tweaked: FALSE
[17:02:35.458]    - call: plan(strategy)
[17:02:35.472] plan(): nbrOfWorkers() = 1
- lm(<formula>) ...
[17:02:35.473] getGlobalsAndPackages() ...
[17:02:35.473] Searching for globals...
[17:02:35.480] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.480] Searching for globals ... DONE
[17:02:35.480] Resolving globals: FALSE
[17:02:35.481] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.482] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.482] - globals: [2] ‘weight’, ‘group’
[17:02:35.482] - packages: [1] ‘stats’
[17:02:35.482] getGlobalsAndPackages() ... DONE
[17:02:35.483] run() for ‘Future’ ...
[17:02:35.483] - state: ‘created’
[17:02:35.483] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.484] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.484] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.484]   - Field: ‘label’
[17:02:35.484]   - Field: ‘local’
[17:02:35.484]   - Field: ‘owner’
[17:02:35.484]   - Field: ‘envir’
[17:02:35.484]   - Field: ‘packages’
[17:02:35.484]   - Field: ‘gc’
[17:02:35.484]   - Field: ‘conditions’
[17:02:35.484]   - Field: ‘expr’
[17:02:35.485]   - Field: ‘uuid’
[17:02:35.485]   - Field: ‘seed’
[17:02:35.485]   - Field: ‘version’
[17:02:35.485]   - Field: ‘result’
[17:02:35.485]   - Field: ‘asynchronous’
[17:02:35.485]   - Field: ‘calls’
[17:02:35.485]   - Field: ‘globals’
[17:02:35.485]   - Field: ‘stdout’
[17:02:35.485]   - Field: ‘earlySignal’
[17:02:35.485]   - Field: ‘lazy’
[17:02:35.485]   - Field: ‘state’
[17:02:35.486] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.486] - Launch lazy future ...
[17:02:35.486] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.487] Packages needed by future strategies (n = 0): <none>
[17:02:35.487] {
[17:02:35.487]     {
[17:02:35.487]         {
[17:02:35.487]             ...future.startTime <- base::Sys.time()
[17:02:35.487]             {
[17:02:35.487]                 {
[17:02:35.487]                   {
[17:02:35.487]                     {
[17:02:35.487]                       base::local({
[17:02:35.487]                         has_future <- base::requireNamespace("future", 
[17:02:35.487]                           quietly = TRUE)
[17:02:35.487]                         if (has_future) {
[17:02:35.487]                           ns <- base::getNamespace("future")
[17:02:35.487]                           version <- ns[[".package"]][["version"]]
[17:02:35.487]                           if (is.null(version)) 
[17:02:35.487]                             version <- utils::packageVersion("future")
[17:02:35.487]                         }
[17:02:35.487]                         else {
[17:02:35.487]                           version <- NULL
[17:02:35.487]                         }
[17:02:35.487]                         if (!has_future || version < "1.8.0") {
[17:02:35.487]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.487]                             "", base::R.version$version.string), 
[17:02:35.487]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.487]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.487]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.487]                               "release", "version")], collapse = " "), 
[17:02:35.487]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.487]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.487]                             info)
[17:02:35.487]                           info <- base::paste(info, collapse = "; ")
[17:02:35.487]                           if (!has_future) {
[17:02:35.487]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.487]                               info)
[17:02:35.487]                           }
[17:02:35.487]                           else {
[17:02:35.487]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.487]                               info, version)
[17:02:35.487]                           }
[17:02:35.487]                           base::stop(msg)
[17:02:35.487]                         }
[17:02:35.487]                       })
[17:02:35.487]                     }
[17:02:35.487]                     base::local({
[17:02:35.487]                       for (pkg in "stats") {
[17:02:35.487]                         base::loadNamespace(pkg)
[17:02:35.487]                         base::library(pkg, character.only = TRUE)
[17:02:35.487]                       }
[17:02:35.487]                     })
[17:02:35.487]                   }
[17:02:35.487]                   ...future.strategy.old <- future::plan("list")
[17:02:35.487]                   options(future.plan = NULL)
[17:02:35.487]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.487]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.487]                 }
[17:02:35.487]                 ...future.workdir <- getwd()
[17:02:35.487]             }
[17:02:35.487]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.487]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.487]         }
[17:02:35.487]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.487]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.487]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.487]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.487]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.487]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.487]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.487]             base::names(...future.oldOptions))
[17:02:35.487]     }
[17:02:35.487]     if (FALSE) {
[17:02:35.487]     }
[17:02:35.487]     else {
[17:02:35.487]         if (TRUE) {
[17:02:35.487]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.487]                 open = "w")
[17:02:35.487]         }
[17:02:35.487]         else {
[17:02:35.487]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.487]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.487]         }
[17:02:35.487]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.487]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.487]             base::sink(type = "output", split = FALSE)
[17:02:35.487]             base::close(...future.stdout)
[17:02:35.487]         }, add = TRUE)
[17:02:35.487]     }
[17:02:35.487]     ...future.frame <- base::sys.nframe()
[17:02:35.487]     ...future.conditions <- base::list()
[17:02:35.487]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.487]     if (FALSE) {
[17:02:35.487]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.487]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.487]     }
[17:02:35.487]     ...future.result <- base::tryCatch({
[17:02:35.487]         base::withCallingHandlers({
[17:02:35.487]             ...future.value <- base::withVisible(base::local({
[17:02:35.487]                 lm(weight ~ group - 1)
[17:02:35.487]             }))
[17:02:35.487]             future::FutureResult(value = ...future.value$value, 
[17:02:35.487]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.487]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.487]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.487]                     ...future.globalenv.names))
[17:02:35.487]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.487]         }, condition = base::local({
[17:02:35.487]             c <- base::c
[17:02:35.487]             inherits <- base::inherits
[17:02:35.487]             invokeRestart <- base::invokeRestart
[17:02:35.487]             length <- base::length
[17:02:35.487]             list <- base::list
[17:02:35.487]             seq.int <- base::seq.int
[17:02:35.487]             signalCondition <- base::signalCondition
[17:02:35.487]             sys.calls <- base::sys.calls
[17:02:35.487]             `[[` <- base::`[[`
[17:02:35.487]             `+` <- base::`+`
[17:02:35.487]             `<<-` <- base::`<<-`
[17:02:35.487]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.487]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.487]                   3L)]
[17:02:35.487]             }
[17:02:35.487]             function(cond) {
[17:02:35.487]                 is_error <- inherits(cond, "error")
[17:02:35.487]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.487]                   NULL)
[17:02:35.487]                 if (is_error) {
[17:02:35.487]                   sessionInformation <- function() {
[17:02:35.487]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.487]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.487]                       search = base::search(), system = base::Sys.info())
[17:02:35.487]                   }
[17:02:35.487]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.487]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.487]                     cond$call), session = sessionInformation(), 
[17:02:35.487]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.487]                   signalCondition(cond)
[17:02:35.487]                 }
[17:02:35.487]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.487]                 "immediateCondition"))) {
[17:02:35.487]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.487]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.487]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.487]                   if (TRUE && !signal) {
[17:02:35.487]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.487]                     {
[17:02:35.487]                       inherits <- base::inherits
[17:02:35.487]                       invokeRestart <- base::invokeRestart
[17:02:35.487]                       is.null <- base::is.null
[17:02:35.487]                       muffled <- FALSE
[17:02:35.487]                       if (inherits(cond, "message")) {
[17:02:35.487]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.487]                         if (muffled) 
[17:02:35.487]                           invokeRestart("muffleMessage")
[17:02:35.487]                       }
[17:02:35.487]                       else if (inherits(cond, "warning")) {
[17:02:35.487]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.487]                         if (muffled) 
[17:02:35.487]                           invokeRestart("muffleWarning")
[17:02:35.487]                       }
[17:02:35.487]                       else if (inherits(cond, "condition")) {
[17:02:35.487]                         if (!is.null(pattern)) {
[17:02:35.487]                           computeRestarts <- base::computeRestarts
[17:02:35.487]                           grepl <- base::grepl
[17:02:35.487]                           restarts <- computeRestarts(cond)
[17:02:35.487]                           for (restart in restarts) {
[17:02:35.487]                             name <- restart$name
[17:02:35.487]                             if (is.null(name)) 
[17:02:35.487]                               next
[17:02:35.487]                             if (!grepl(pattern, name)) 
[17:02:35.487]                               next
[17:02:35.487]                             invokeRestart(restart)
[17:02:35.487]                             muffled <- TRUE
[17:02:35.487]                             break
[17:02:35.487]                           }
[17:02:35.487]                         }
[17:02:35.487]                       }
[17:02:35.487]                       invisible(muffled)
[17:02:35.487]                     }
[17:02:35.487]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.487]                   }
[17:02:35.487]                 }
[17:02:35.487]                 else {
[17:02:35.487]                   if (TRUE) {
[17:02:35.487]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.487]                     {
[17:02:35.487]                       inherits <- base::inherits
[17:02:35.487]                       invokeRestart <- base::invokeRestart
[17:02:35.487]                       is.null <- base::is.null
[17:02:35.487]                       muffled <- FALSE
[17:02:35.487]                       if (inherits(cond, "message")) {
[17:02:35.487]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.487]                         if (muffled) 
[17:02:35.487]                           invokeRestart("muffleMessage")
[17:02:35.487]                       }
[17:02:35.487]                       else if (inherits(cond, "warning")) {
[17:02:35.487]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.487]                         if (muffled) 
[17:02:35.487]                           invokeRestart("muffleWarning")
[17:02:35.487]                       }
[17:02:35.487]                       else if (inherits(cond, "condition")) {
[17:02:35.487]                         if (!is.null(pattern)) {
[17:02:35.487]                           computeRestarts <- base::computeRestarts
[17:02:35.487]                           grepl <- base::grepl
[17:02:35.487]                           restarts <- computeRestarts(cond)
[17:02:35.487]                           for (restart in restarts) {
[17:02:35.487]                             name <- restart$name
[17:02:35.487]                             if (is.null(name)) 
[17:02:35.487]                               next
[17:02:35.487]                             if (!grepl(pattern, name)) 
[17:02:35.487]                               next
[17:02:35.487]                             invokeRestart(restart)
[17:02:35.487]                             muffled <- TRUE
[17:02:35.487]                             break
[17:02:35.487]                           }
[17:02:35.487]                         }
[17:02:35.487]                       }
[17:02:35.487]                       invisible(muffled)
[17:02:35.487]                     }
[17:02:35.487]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.487]                   }
[17:02:35.487]                 }
[17:02:35.487]             }
[17:02:35.487]         }))
[17:02:35.487]     }, error = function(ex) {
[17:02:35.487]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.487]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.487]                 ...future.rng), started = ...future.startTime, 
[17:02:35.487]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.487]             version = "1.8"), class = "FutureResult")
[17:02:35.487]     }, finally = {
[17:02:35.487]         if (!identical(...future.workdir, getwd())) 
[17:02:35.487]             setwd(...future.workdir)
[17:02:35.487]         {
[17:02:35.487]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.487]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.487]             }
[17:02:35.487]             base::options(...future.oldOptions)
[17:02:35.487]             if (.Platform$OS.type == "windows") {
[17:02:35.487]                 old_names <- names(...future.oldEnvVars)
[17:02:35.487]                 envs <- base::Sys.getenv()
[17:02:35.487]                 names <- names(envs)
[17:02:35.487]                 common <- intersect(names, old_names)
[17:02:35.487]                 added <- setdiff(names, old_names)
[17:02:35.487]                 removed <- setdiff(old_names, names)
[17:02:35.487]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.487]                   envs[common]]
[17:02:35.487]                 NAMES <- toupper(changed)
[17:02:35.487]                 args <- list()
[17:02:35.487]                 for (kk in seq_along(NAMES)) {
[17:02:35.487]                   name <- changed[[kk]]
[17:02:35.487]                   NAME <- NAMES[[kk]]
[17:02:35.487]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.487]                     next
[17:02:35.487]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.487]                 }
[17:02:35.487]                 NAMES <- toupper(added)
[17:02:35.487]                 for (kk in seq_along(NAMES)) {
[17:02:35.487]                   name <- added[[kk]]
[17:02:35.487]                   NAME <- NAMES[[kk]]
[17:02:35.487]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.487]                     next
[17:02:35.487]                   args[[name]] <- ""
[17:02:35.487]                 }
[17:02:35.487]                 NAMES <- toupper(removed)
[17:02:35.487]                 for (kk in seq_along(NAMES)) {
[17:02:35.487]                   name <- removed[[kk]]
[17:02:35.487]                   NAME <- NAMES[[kk]]
[17:02:35.487]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.487]                     next
[17:02:35.487]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.487]                 }
[17:02:35.487]                 if (length(args) > 0) 
[17:02:35.487]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.487]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.487]             }
[17:02:35.487]             else {
[17:02:35.487]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.487]             }
[17:02:35.487]             {
[17:02:35.487]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.487]                   0L) {
[17:02:35.487]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.487]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.487]                   base::options(opts)
[17:02:35.487]                 }
[17:02:35.487]                 {
[17:02:35.487]                   {
[17:02:35.487]                     NULL
[17:02:35.487]                     RNGkind("Mersenne-Twister")
[17:02:35.487]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.487]                       inherits = FALSE)
[17:02:35.487]                   }
[17:02:35.487]                   options(future.plan = NULL)
[17:02:35.487]                   if (is.na(NA_character_)) 
[17:02:35.487]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.487]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.487]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.487]                     .init = FALSE)
[17:02:35.487]                 }
[17:02:35.487]             }
[17:02:35.487]         }
[17:02:35.487]     })
[17:02:35.487]     if (TRUE) {
[17:02:35.487]         base::sink(type = "output", split = FALSE)
[17:02:35.487]         if (TRUE) {
[17:02:35.487]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.487]         }
[17:02:35.487]         else {
[17:02:35.487]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.487]         }
[17:02:35.487]         base::close(...future.stdout)
[17:02:35.487]         ...future.stdout <- NULL
[17:02:35.487]     }
[17:02:35.487]     ...future.result$conditions <- ...future.conditions
[17:02:35.487]     ...future.result$finished <- base::Sys.time()
[17:02:35.487]     ...future.result
[17:02:35.487] }
[17:02:35.489] assign_globals() ...
[17:02:35.489] List of 2
[17:02:35.489]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.489]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.489]  - attr(*, "where")=List of 2
[17:02:35.489]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.489]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.489]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.489]  - attr(*, "resolved")= logi FALSE
[17:02:35.489]  - attr(*, "total_size")= num 896
[17:02:35.489]  - attr(*, "already-done")= logi TRUE
[17:02:35.493] - copied ‘weight’ to environment
[17:02:35.493] - copied ‘group’ to environment
[17:02:35.493] assign_globals() ... done
[17:02:35.494] plan(): Setting new future strategy stack:
[17:02:35.494] List of future strategies:
[17:02:35.494] 1. sequential:
[17:02:35.494]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.494]    - tweaked: FALSE
[17:02:35.494]    - call: NULL
[17:02:35.494] plan(): nbrOfWorkers() = 1
[17:02:35.496] plan(): Setting new future strategy stack:
[17:02:35.496] List of future strategies:
[17:02:35.496] 1. sequential:
[17:02:35.496]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.496]    - tweaked: FALSE
[17:02:35.496]    - call: plan(strategy)
[17:02:35.497] plan(): nbrOfWorkers() = 1
[17:02:35.497] SequentialFuture started (and completed)
[17:02:35.498] - Launch lazy future ... done
[17:02:35.498] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:35.500] getGlobalsAndPackages() ...
[17:02:35.500] Searching for globals...
[17:02:35.502] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.502] Searching for globals ... DONE
[17:02:35.502] Resolving globals: FALSE
[17:02:35.503] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.503] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.503] - globals: [2] ‘weight’, ‘group’
[17:02:35.504] - packages: [1] ‘stats’
[17:02:35.504] getGlobalsAndPackages() ... DONE
[17:02:35.504] run() for ‘Future’ ...
[17:02:35.504] - state: ‘created’
[17:02:35.504] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.505] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.505] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.505]   - Field: ‘label’
[17:02:35.505]   - Field: ‘local’
[17:02:35.505]   - Field: ‘owner’
[17:02:35.505]   - Field: ‘envir’
[17:02:35.505]   - Field: ‘packages’
[17:02:35.505]   - Field: ‘gc’
[17:02:35.505]   - Field: ‘conditions’
[17:02:35.505]   - Field: ‘expr’
[17:02:35.505]   - Field: ‘uuid’
[17:02:35.506]   - Field: ‘seed’
[17:02:35.506]   - Field: ‘version’
[17:02:35.506]   - Field: ‘result’
[17:02:35.506]   - Field: ‘asynchronous’
[17:02:35.509]   - Field: ‘calls’
[17:02:35.509]   - Field: ‘globals’
[17:02:35.509]   - Field: ‘stdout’
[17:02:35.509]   - Field: ‘earlySignal’
[17:02:35.509]   - Field: ‘lazy’
[17:02:35.509]   - Field: ‘state’
[17:02:35.509] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.510] - Launch lazy future ...
[17:02:35.510] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.510] Packages needed by future strategies (n = 0): <none>
[17:02:35.510] {
[17:02:35.510]     {
[17:02:35.510]         {
[17:02:35.510]             ...future.startTime <- base::Sys.time()
[17:02:35.510]             {
[17:02:35.510]                 {
[17:02:35.510]                   {
[17:02:35.510]                     {
[17:02:35.510]                       base::local({
[17:02:35.510]                         has_future <- base::requireNamespace("future", 
[17:02:35.510]                           quietly = TRUE)
[17:02:35.510]                         if (has_future) {
[17:02:35.510]                           ns <- base::getNamespace("future")
[17:02:35.510]                           version <- ns[[".package"]][["version"]]
[17:02:35.510]                           if (is.null(version)) 
[17:02:35.510]                             version <- utils::packageVersion("future")
[17:02:35.510]                         }
[17:02:35.510]                         else {
[17:02:35.510]                           version <- NULL
[17:02:35.510]                         }
[17:02:35.510]                         if (!has_future || version < "1.8.0") {
[17:02:35.510]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.510]                             "", base::R.version$version.string), 
[17:02:35.510]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.510]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.510]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.510]                               "release", "version")], collapse = " "), 
[17:02:35.510]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.510]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.510]                             info)
[17:02:35.510]                           info <- base::paste(info, collapse = "; ")
[17:02:35.510]                           if (!has_future) {
[17:02:35.510]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.510]                               info)
[17:02:35.510]                           }
[17:02:35.510]                           else {
[17:02:35.510]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.510]                               info, version)
[17:02:35.510]                           }
[17:02:35.510]                           base::stop(msg)
[17:02:35.510]                         }
[17:02:35.510]                       })
[17:02:35.510]                     }
[17:02:35.510]                     base::local({
[17:02:35.510]                       for (pkg in "stats") {
[17:02:35.510]                         base::loadNamespace(pkg)
[17:02:35.510]                         base::library(pkg, character.only = TRUE)
[17:02:35.510]                       }
[17:02:35.510]                     })
[17:02:35.510]                   }
[17:02:35.510]                   ...future.strategy.old <- future::plan("list")
[17:02:35.510]                   options(future.plan = NULL)
[17:02:35.510]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.510]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.510]                 }
[17:02:35.510]                 ...future.workdir <- getwd()
[17:02:35.510]             }
[17:02:35.510]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.510]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.510]         }
[17:02:35.510]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.510]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.510]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.510]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.510]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.510]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.510]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.510]             base::names(...future.oldOptions))
[17:02:35.510]     }
[17:02:35.510]     if (FALSE) {
[17:02:35.510]     }
[17:02:35.510]     else {
[17:02:35.510]         if (TRUE) {
[17:02:35.510]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.510]                 open = "w")
[17:02:35.510]         }
[17:02:35.510]         else {
[17:02:35.510]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.510]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.510]         }
[17:02:35.510]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.510]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.510]             base::sink(type = "output", split = FALSE)
[17:02:35.510]             base::close(...future.stdout)
[17:02:35.510]         }, add = TRUE)
[17:02:35.510]     }
[17:02:35.510]     ...future.frame <- base::sys.nframe()
[17:02:35.510]     ...future.conditions <- base::list()
[17:02:35.510]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.510]     if (FALSE) {
[17:02:35.510]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.510]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.510]     }
[17:02:35.510]     ...future.result <- base::tryCatch({
[17:02:35.510]         base::withCallingHandlers({
[17:02:35.510]             ...future.value <- base::withVisible(base::local({
[17:02:35.510]                 lm(weight ~ group - 1)
[17:02:35.510]             }))
[17:02:35.510]             future::FutureResult(value = ...future.value$value, 
[17:02:35.510]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.510]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.510]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.510]                     ...future.globalenv.names))
[17:02:35.510]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.510]         }, condition = base::local({
[17:02:35.510]             c <- base::c
[17:02:35.510]             inherits <- base::inherits
[17:02:35.510]             invokeRestart <- base::invokeRestart
[17:02:35.510]             length <- base::length
[17:02:35.510]             list <- base::list
[17:02:35.510]             seq.int <- base::seq.int
[17:02:35.510]             signalCondition <- base::signalCondition
[17:02:35.510]             sys.calls <- base::sys.calls
[17:02:35.510]             `[[` <- base::`[[`
[17:02:35.510]             `+` <- base::`+`
[17:02:35.510]             `<<-` <- base::`<<-`
[17:02:35.510]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.510]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.510]                   3L)]
[17:02:35.510]             }
[17:02:35.510]             function(cond) {
[17:02:35.510]                 is_error <- inherits(cond, "error")
[17:02:35.510]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.510]                   NULL)
[17:02:35.510]                 if (is_error) {
[17:02:35.510]                   sessionInformation <- function() {
[17:02:35.510]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.510]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.510]                       search = base::search(), system = base::Sys.info())
[17:02:35.510]                   }
[17:02:35.510]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.510]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.510]                     cond$call), session = sessionInformation(), 
[17:02:35.510]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.510]                   signalCondition(cond)
[17:02:35.510]                 }
[17:02:35.510]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.510]                 "immediateCondition"))) {
[17:02:35.510]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.510]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.510]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.510]                   if (TRUE && !signal) {
[17:02:35.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.510]                     {
[17:02:35.510]                       inherits <- base::inherits
[17:02:35.510]                       invokeRestart <- base::invokeRestart
[17:02:35.510]                       is.null <- base::is.null
[17:02:35.510]                       muffled <- FALSE
[17:02:35.510]                       if (inherits(cond, "message")) {
[17:02:35.510]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.510]                         if (muffled) 
[17:02:35.510]                           invokeRestart("muffleMessage")
[17:02:35.510]                       }
[17:02:35.510]                       else if (inherits(cond, "warning")) {
[17:02:35.510]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.510]                         if (muffled) 
[17:02:35.510]                           invokeRestart("muffleWarning")
[17:02:35.510]                       }
[17:02:35.510]                       else if (inherits(cond, "condition")) {
[17:02:35.510]                         if (!is.null(pattern)) {
[17:02:35.510]                           computeRestarts <- base::computeRestarts
[17:02:35.510]                           grepl <- base::grepl
[17:02:35.510]                           restarts <- computeRestarts(cond)
[17:02:35.510]                           for (restart in restarts) {
[17:02:35.510]                             name <- restart$name
[17:02:35.510]                             if (is.null(name)) 
[17:02:35.510]                               next
[17:02:35.510]                             if (!grepl(pattern, name)) 
[17:02:35.510]                               next
[17:02:35.510]                             invokeRestart(restart)
[17:02:35.510]                             muffled <- TRUE
[17:02:35.510]                             break
[17:02:35.510]                           }
[17:02:35.510]                         }
[17:02:35.510]                       }
[17:02:35.510]                       invisible(muffled)
[17:02:35.510]                     }
[17:02:35.510]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.510]                   }
[17:02:35.510]                 }
[17:02:35.510]                 else {
[17:02:35.510]                   if (TRUE) {
[17:02:35.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.510]                     {
[17:02:35.510]                       inherits <- base::inherits
[17:02:35.510]                       invokeRestart <- base::invokeRestart
[17:02:35.510]                       is.null <- base::is.null
[17:02:35.510]                       muffled <- FALSE
[17:02:35.510]                       if (inherits(cond, "message")) {
[17:02:35.510]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.510]                         if (muffled) 
[17:02:35.510]                           invokeRestart("muffleMessage")
[17:02:35.510]                       }
[17:02:35.510]                       else if (inherits(cond, "warning")) {
[17:02:35.510]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.510]                         if (muffled) 
[17:02:35.510]                           invokeRestart("muffleWarning")
[17:02:35.510]                       }
[17:02:35.510]                       else if (inherits(cond, "condition")) {
[17:02:35.510]                         if (!is.null(pattern)) {
[17:02:35.510]                           computeRestarts <- base::computeRestarts
[17:02:35.510]                           grepl <- base::grepl
[17:02:35.510]                           restarts <- computeRestarts(cond)
[17:02:35.510]                           for (restart in restarts) {
[17:02:35.510]                             name <- restart$name
[17:02:35.510]                             if (is.null(name)) 
[17:02:35.510]                               next
[17:02:35.510]                             if (!grepl(pattern, name)) 
[17:02:35.510]                               next
[17:02:35.510]                             invokeRestart(restart)
[17:02:35.510]                             muffled <- TRUE
[17:02:35.510]                             break
[17:02:35.510]                           }
[17:02:35.510]                         }
[17:02:35.510]                       }
[17:02:35.510]                       invisible(muffled)
[17:02:35.510]                     }
[17:02:35.510]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.510]                   }
[17:02:35.510]                 }
[17:02:35.510]             }
[17:02:35.510]         }))
[17:02:35.510]     }, error = function(ex) {
[17:02:35.510]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.510]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.510]                 ...future.rng), started = ...future.startTime, 
[17:02:35.510]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.510]             version = "1.8"), class = "FutureResult")
[17:02:35.510]     }, finally = {
[17:02:35.510]         if (!identical(...future.workdir, getwd())) 
[17:02:35.510]             setwd(...future.workdir)
[17:02:35.510]         {
[17:02:35.510]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.510]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.510]             }
[17:02:35.510]             base::options(...future.oldOptions)
[17:02:35.510]             if (.Platform$OS.type == "windows") {
[17:02:35.510]                 old_names <- names(...future.oldEnvVars)
[17:02:35.510]                 envs <- base::Sys.getenv()
[17:02:35.510]                 names <- names(envs)
[17:02:35.510]                 common <- intersect(names, old_names)
[17:02:35.510]                 added <- setdiff(names, old_names)
[17:02:35.510]                 removed <- setdiff(old_names, names)
[17:02:35.510]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.510]                   envs[common]]
[17:02:35.510]                 NAMES <- toupper(changed)
[17:02:35.510]                 args <- list()
[17:02:35.510]                 for (kk in seq_along(NAMES)) {
[17:02:35.510]                   name <- changed[[kk]]
[17:02:35.510]                   NAME <- NAMES[[kk]]
[17:02:35.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.510]                     next
[17:02:35.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.510]                 }
[17:02:35.510]                 NAMES <- toupper(added)
[17:02:35.510]                 for (kk in seq_along(NAMES)) {
[17:02:35.510]                   name <- added[[kk]]
[17:02:35.510]                   NAME <- NAMES[[kk]]
[17:02:35.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.510]                     next
[17:02:35.510]                   args[[name]] <- ""
[17:02:35.510]                 }
[17:02:35.510]                 NAMES <- toupper(removed)
[17:02:35.510]                 for (kk in seq_along(NAMES)) {
[17:02:35.510]                   name <- removed[[kk]]
[17:02:35.510]                   NAME <- NAMES[[kk]]
[17:02:35.510]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.510]                     next
[17:02:35.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.510]                 }
[17:02:35.510]                 if (length(args) > 0) 
[17:02:35.510]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.510]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.510]             }
[17:02:35.510]             else {
[17:02:35.510]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.510]             }
[17:02:35.510]             {
[17:02:35.510]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.510]                   0L) {
[17:02:35.510]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.510]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.510]                   base::options(opts)
[17:02:35.510]                 }
[17:02:35.510]                 {
[17:02:35.510]                   {
[17:02:35.510]                     NULL
[17:02:35.510]                     RNGkind("Mersenne-Twister")
[17:02:35.510]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.510]                       inherits = FALSE)
[17:02:35.510]                   }
[17:02:35.510]                   options(future.plan = NULL)
[17:02:35.510]                   if (is.na(NA_character_)) 
[17:02:35.510]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.510]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.510]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.510]                     .init = FALSE)
[17:02:35.510]                 }
[17:02:35.510]             }
[17:02:35.510]         }
[17:02:35.510]     })
[17:02:35.510]     if (TRUE) {
[17:02:35.510]         base::sink(type = "output", split = FALSE)
[17:02:35.510]         if (TRUE) {
[17:02:35.510]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.510]         }
[17:02:35.510]         else {
[17:02:35.510]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.510]         }
[17:02:35.510]         base::close(...future.stdout)
[17:02:35.510]         ...future.stdout <- NULL
[17:02:35.510]     }
[17:02:35.510]     ...future.result$conditions <- ...future.conditions
[17:02:35.510]     ...future.result$finished <- base::Sys.time()
[17:02:35.510]     ...future.result
[17:02:35.510] }
[17:02:35.512] assign_globals() ...
[17:02:35.512] List of 2
[17:02:35.512]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.512]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.512]  - attr(*, "where")=List of 2
[17:02:35.512]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.512]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.512]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.512]  - attr(*, "resolved")= logi FALSE
[17:02:35.512]  - attr(*, "total_size")= num 896
[17:02:35.512]  - attr(*, "already-done")= logi TRUE
[17:02:35.516] - copied ‘weight’ to environment
[17:02:35.516] - copied ‘group’ to environment
[17:02:35.516] assign_globals() ... done
[17:02:35.516] plan(): Setting new future strategy stack:
[17:02:35.516] List of future strategies:
[17:02:35.516] 1. sequential:
[17:02:35.516]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.516]    - tweaked: FALSE
[17:02:35.516]    - call: NULL
[17:02:35.517] plan(): nbrOfWorkers() = 1
[17:02:35.518] plan(): Setting new future strategy stack:
[17:02:35.519] List of future strategies:
[17:02:35.519] 1. sequential:
[17:02:35.519]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.519]    - tweaked: FALSE
[17:02:35.519]    - call: plan(strategy)
[17:02:35.519] plan(): nbrOfWorkers() = 1
[17:02:35.519] SequentialFuture started (and completed)
[17:02:35.519] - Launch lazy future ... done
[17:02:35.519] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:35.522] getGlobalsAndPackages() ...
[17:02:35.522] Searching for globals...
[17:02:35.524] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.524] Searching for globals ... DONE
[17:02:35.524] Resolving globals: FALSE
[17:02:35.524] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.525] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.525] - globals: [2] ‘weight’, ‘group’
[17:02:35.525] - packages: [1] ‘stats’
[17:02:35.525] getGlobalsAndPackages() ... DONE
[17:02:35.525] run() for ‘Future’ ...
[17:02:35.525] - state: ‘created’
[17:02:35.525] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.526] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.526] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.526]   - Field: ‘label’
[17:02:35.526]   - Field: ‘local’
[17:02:35.526]   - Field: ‘owner’
[17:02:35.526]   - Field: ‘envir’
[17:02:35.526]   - Field: ‘packages’
[17:02:35.526]   - Field: ‘gc’
[17:02:35.527]   - Field: ‘conditions’
[17:02:35.527]   - Field: ‘expr’
[17:02:35.527]   - Field: ‘uuid’
[17:02:35.527]   - Field: ‘seed’
[17:02:35.527]   - Field: ‘version’
[17:02:35.527]   - Field: ‘result’
[17:02:35.527]   - Field: ‘asynchronous’
[17:02:35.527]   - Field: ‘calls’
[17:02:35.527]   - Field: ‘globals’
[17:02:35.527]   - Field: ‘stdout’
[17:02:35.527]   - Field: ‘earlySignal’
[17:02:35.528]   - Field: ‘lazy’
[17:02:35.528]   - Field: ‘state’
[17:02:35.528] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.528] - Launch lazy future ...
[17:02:35.528] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.528] Packages needed by future strategies (n = 0): <none>
[17:02:35.529] {
[17:02:35.529]     {
[17:02:35.529]         {
[17:02:35.529]             ...future.startTime <- base::Sys.time()
[17:02:35.529]             {
[17:02:35.529]                 {
[17:02:35.529]                   {
[17:02:35.529]                     {
[17:02:35.529]                       base::local({
[17:02:35.529]                         has_future <- base::requireNamespace("future", 
[17:02:35.529]                           quietly = TRUE)
[17:02:35.529]                         if (has_future) {
[17:02:35.529]                           ns <- base::getNamespace("future")
[17:02:35.529]                           version <- ns[[".package"]][["version"]]
[17:02:35.529]                           if (is.null(version)) 
[17:02:35.529]                             version <- utils::packageVersion("future")
[17:02:35.529]                         }
[17:02:35.529]                         else {
[17:02:35.529]                           version <- NULL
[17:02:35.529]                         }
[17:02:35.529]                         if (!has_future || version < "1.8.0") {
[17:02:35.529]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.529]                             "", base::R.version$version.string), 
[17:02:35.529]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.529]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.529]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.529]                               "release", "version")], collapse = " "), 
[17:02:35.529]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.529]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.529]                             info)
[17:02:35.529]                           info <- base::paste(info, collapse = "; ")
[17:02:35.529]                           if (!has_future) {
[17:02:35.529]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.529]                               info)
[17:02:35.529]                           }
[17:02:35.529]                           else {
[17:02:35.529]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.529]                               info, version)
[17:02:35.529]                           }
[17:02:35.529]                           base::stop(msg)
[17:02:35.529]                         }
[17:02:35.529]                       })
[17:02:35.529]                     }
[17:02:35.529]                     base::local({
[17:02:35.529]                       for (pkg in "stats") {
[17:02:35.529]                         base::loadNamespace(pkg)
[17:02:35.529]                         base::library(pkg, character.only = TRUE)
[17:02:35.529]                       }
[17:02:35.529]                     })
[17:02:35.529]                   }
[17:02:35.529]                   ...future.strategy.old <- future::plan("list")
[17:02:35.529]                   options(future.plan = NULL)
[17:02:35.529]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.529]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.529]                 }
[17:02:35.529]                 ...future.workdir <- getwd()
[17:02:35.529]             }
[17:02:35.529]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.529]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.529]         }
[17:02:35.529]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.529]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.529]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.529]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.529]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.529]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.529]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.529]             base::names(...future.oldOptions))
[17:02:35.529]     }
[17:02:35.529]     if (FALSE) {
[17:02:35.529]     }
[17:02:35.529]     else {
[17:02:35.529]         if (TRUE) {
[17:02:35.529]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.529]                 open = "w")
[17:02:35.529]         }
[17:02:35.529]         else {
[17:02:35.529]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.529]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.529]         }
[17:02:35.529]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.529]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.529]             base::sink(type = "output", split = FALSE)
[17:02:35.529]             base::close(...future.stdout)
[17:02:35.529]         }, add = TRUE)
[17:02:35.529]     }
[17:02:35.529]     ...future.frame <- base::sys.nframe()
[17:02:35.529]     ...future.conditions <- base::list()
[17:02:35.529]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.529]     if (FALSE) {
[17:02:35.529]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.529]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.529]     }
[17:02:35.529]     ...future.result <- base::tryCatch({
[17:02:35.529]         base::withCallingHandlers({
[17:02:35.529]             ...future.value <- base::withVisible(base::local({
[17:02:35.529]                 lm(weight ~ group - 1)
[17:02:35.529]             }))
[17:02:35.529]             future::FutureResult(value = ...future.value$value, 
[17:02:35.529]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.529]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.529]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.529]                     ...future.globalenv.names))
[17:02:35.529]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.529]         }, condition = base::local({
[17:02:35.529]             c <- base::c
[17:02:35.529]             inherits <- base::inherits
[17:02:35.529]             invokeRestart <- base::invokeRestart
[17:02:35.529]             length <- base::length
[17:02:35.529]             list <- base::list
[17:02:35.529]             seq.int <- base::seq.int
[17:02:35.529]             signalCondition <- base::signalCondition
[17:02:35.529]             sys.calls <- base::sys.calls
[17:02:35.529]             `[[` <- base::`[[`
[17:02:35.529]             `+` <- base::`+`
[17:02:35.529]             `<<-` <- base::`<<-`
[17:02:35.529]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.529]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.529]                   3L)]
[17:02:35.529]             }
[17:02:35.529]             function(cond) {
[17:02:35.529]                 is_error <- inherits(cond, "error")
[17:02:35.529]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.529]                   NULL)
[17:02:35.529]                 if (is_error) {
[17:02:35.529]                   sessionInformation <- function() {
[17:02:35.529]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.529]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.529]                       search = base::search(), system = base::Sys.info())
[17:02:35.529]                   }
[17:02:35.529]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.529]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.529]                     cond$call), session = sessionInformation(), 
[17:02:35.529]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.529]                   signalCondition(cond)
[17:02:35.529]                 }
[17:02:35.529]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.529]                 "immediateCondition"))) {
[17:02:35.529]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.529]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.529]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.529]                   if (TRUE && !signal) {
[17:02:35.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.529]                     {
[17:02:35.529]                       inherits <- base::inherits
[17:02:35.529]                       invokeRestart <- base::invokeRestart
[17:02:35.529]                       is.null <- base::is.null
[17:02:35.529]                       muffled <- FALSE
[17:02:35.529]                       if (inherits(cond, "message")) {
[17:02:35.529]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.529]                         if (muffled) 
[17:02:35.529]                           invokeRestart("muffleMessage")
[17:02:35.529]                       }
[17:02:35.529]                       else if (inherits(cond, "warning")) {
[17:02:35.529]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.529]                         if (muffled) 
[17:02:35.529]                           invokeRestart("muffleWarning")
[17:02:35.529]                       }
[17:02:35.529]                       else if (inherits(cond, "condition")) {
[17:02:35.529]                         if (!is.null(pattern)) {
[17:02:35.529]                           computeRestarts <- base::computeRestarts
[17:02:35.529]                           grepl <- base::grepl
[17:02:35.529]                           restarts <- computeRestarts(cond)
[17:02:35.529]                           for (restart in restarts) {
[17:02:35.529]                             name <- restart$name
[17:02:35.529]                             if (is.null(name)) 
[17:02:35.529]                               next
[17:02:35.529]                             if (!grepl(pattern, name)) 
[17:02:35.529]                               next
[17:02:35.529]                             invokeRestart(restart)
[17:02:35.529]                             muffled <- TRUE
[17:02:35.529]                             break
[17:02:35.529]                           }
[17:02:35.529]                         }
[17:02:35.529]                       }
[17:02:35.529]                       invisible(muffled)
[17:02:35.529]                     }
[17:02:35.529]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.529]                   }
[17:02:35.529]                 }
[17:02:35.529]                 else {
[17:02:35.529]                   if (TRUE) {
[17:02:35.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.529]                     {
[17:02:35.529]                       inherits <- base::inherits
[17:02:35.529]                       invokeRestart <- base::invokeRestart
[17:02:35.529]                       is.null <- base::is.null
[17:02:35.529]                       muffled <- FALSE
[17:02:35.529]                       if (inherits(cond, "message")) {
[17:02:35.529]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.529]                         if (muffled) 
[17:02:35.529]                           invokeRestart("muffleMessage")
[17:02:35.529]                       }
[17:02:35.529]                       else if (inherits(cond, "warning")) {
[17:02:35.529]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.529]                         if (muffled) 
[17:02:35.529]                           invokeRestart("muffleWarning")
[17:02:35.529]                       }
[17:02:35.529]                       else if (inherits(cond, "condition")) {
[17:02:35.529]                         if (!is.null(pattern)) {
[17:02:35.529]                           computeRestarts <- base::computeRestarts
[17:02:35.529]                           grepl <- base::grepl
[17:02:35.529]                           restarts <- computeRestarts(cond)
[17:02:35.529]                           for (restart in restarts) {
[17:02:35.529]                             name <- restart$name
[17:02:35.529]                             if (is.null(name)) 
[17:02:35.529]                               next
[17:02:35.529]                             if (!grepl(pattern, name)) 
[17:02:35.529]                               next
[17:02:35.529]                             invokeRestart(restart)
[17:02:35.529]                             muffled <- TRUE
[17:02:35.529]                             break
[17:02:35.529]                           }
[17:02:35.529]                         }
[17:02:35.529]                       }
[17:02:35.529]                       invisible(muffled)
[17:02:35.529]                     }
[17:02:35.529]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.529]                   }
[17:02:35.529]                 }
[17:02:35.529]             }
[17:02:35.529]         }))
[17:02:35.529]     }, error = function(ex) {
[17:02:35.529]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.529]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.529]                 ...future.rng), started = ...future.startTime, 
[17:02:35.529]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.529]             version = "1.8"), class = "FutureResult")
[17:02:35.529]     }, finally = {
[17:02:35.529]         if (!identical(...future.workdir, getwd())) 
[17:02:35.529]             setwd(...future.workdir)
[17:02:35.529]         {
[17:02:35.529]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.529]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.529]             }
[17:02:35.529]             base::options(...future.oldOptions)
[17:02:35.529]             if (.Platform$OS.type == "windows") {
[17:02:35.529]                 old_names <- names(...future.oldEnvVars)
[17:02:35.529]                 envs <- base::Sys.getenv()
[17:02:35.529]                 names <- names(envs)
[17:02:35.529]                 common <- intersect(names, old_names)
[17:02:35.529]                 added <- setdiff(names, old_names)
[17:02:35.529]                 removed <- setdiff(old_names, names)
[17:02:35.529]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.529]                   envs[common]]
[17:02:35.529]                 NAMES <- toupper(changed)
[17:02:35.529]                 args <- list()
[17:02:35.529]                 for (kk in seq_along(NAMES)) {
[17:02:35.529]                   name <- changed[[kk]]
[17:02:35.529]                   NAME <- NAMES[[kk]]
[17:02:35.529]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.529]                     next
[17:02:35.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.529]                 }
[17:02:35.529]                 NAMES <- toupper(added)
[17:02:35.529]                 for (kk in seq_along(NAMES)) {
[17:02:35.529]                   name <- added[[kk]]
[17:02:35.529]                   NAME <- NAMES[[kk]]
[17:02:35.529]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.529]                     next
[17:02:35.529]                   args[[name]] <- ""
[17:02:35.529]                 }
[17:02:35.529]                 NAMES <- toupper(removed)
[17:02:35.529]                 for (kk in seq_along(NAMES)) {
[17:02:35.529]                   name <- removed[[kk]]
[17:02:35.529]                   NAME <- NAMES[[kk]]
[17:02:35.529]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.529]                     next
[17:02:35.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.529]                 }
[17:02:35.529]                 if (length(args) > 0) 
[17:02:35.529]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.529]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.529]             }
[17:02:35.529]             else {
[17:02:35.529]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.529]             }
[17:02:35.529]             {
[17:02:35.529]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.529]                   0L) {
[17:02:35.529]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.529]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.529]                   base::options(opts)
[17:02:35.529]                 }
[17:02:35.529]                 {
[17:02:35.529]                   {
[17:02:35.529]                     NULL
[17:02:35.529]                     RNGkind("Mersenne-Twister")
[17:02:35.529]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.529]                       inherits = FALSE)
[17:02:35.529]                   }
[17:02:35.529]                   options(future.plan = NULL)
[17:02:35.529]                   if (is.na(NA_character_)) 
[17:02:35.529]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.529]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.529]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.529]                     .init = FALSE)
[17:02:35.529]                 }
[17:02:35.529]             }
[17:02:35.529]         }
[17:02:35.529]     })
[17:02:35.529]     if (TRUE) {
[17:02:35.529]         base::sink(type = "output", split = FALSE)
[17:02:35.529]         if (TRUE) {
[17:02:35.529]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.529]         }
[17:02:35.529]         else {
[17:02:35.529]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.529]         }
[17:02:35.529]         base::close(...future.stdout)
[17:02:35.529]         ...future.stdout <- NULL
[17:02:35.529]     }
[17:02:35.529]     ...future.result$conditions <- ...future.conditions
[17:02:35.529]     ...future.result$finished <- base::Sys.time()
[17:02:35.529]     ...future.result
[17:02:35.529] }
[17:02:35.530] assign_globals() ...
[17:02:35.530] List of 2
[17:02:35.530]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.530]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.530]  - attr(*, "where")=List of 2
[17:02:35.530]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.530]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.530]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.530]  - attr(*, "resolved")= logi FALSE
[17:02:35.530]  - attr(*, "total_size")= num 896
[17:02:35.530]  - attr(*, "already-done")= logi TRUE
[17:02:35.533] - copied ‘weight’ to environment
[17:02:35.534] - copied ‘group’ to environment
[17:02:35.534] assign_globals() ... done
[17:02:35.534] plan(): Setting new future strategy stack:
[17:02:35.534] List of future strategies:
[17:02:35.534] 1. sequential:
[17:02:35.534]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.534]    - tweaked: FALSE
[17:02:35.534]    - call: NULL
[17:02:35.535] plan(): nbrOfWorkers() = 1
[17:02:35.536] plan(): Setting new future strategy stack:
[17:02:35.536] List of future strategies:
[17:02:35.536] 1. sequential:
[17:02:35.536]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.536]    - tweaked: FALSE
[17:02:35.536]    - call: plan(strategy)
[17:02:35.537] plan(): nbrOfWorkers() = 1
[17:02:35.537] SequentialFuture started (and completed)
[17:02:35.537] - Launch lazy future ... done
[17:02:35.537] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:35.541] getGlobalsAndPackages() ...
[17:02:35.541] Searching for globals...
[17:02:35.542] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.542] Searching for globals ... DONE
[17:02:35.543] Resolving globals: FALSE
[17:02:35.543] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.543] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.544] - globals: [2] ‘weight’, ‘group’
[17:02:35.544] - packages: [1] ‘stats’
[17:02:35.544] getGlobalsAndPackages() ... DONE
[17:02:35.544] run() for ‘Future’ ...
[17:02:35.544] - state: ‘created’
[17:02:35.544] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.545] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.545] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.545]   - Field: ‘label’
[17:02:35.545]   - Field: ‘local’
[17:02:35.545]   - Field: ‘owner’
[17:02:35.545]   - Field: ‘envir’
[17:02:35.545]   - Field: ‘packages’
[17:02:35.545]   - Field: ‘gc’
[17:02:35.545]   - Field: ‘conditions’
[17:02:35.545]   - Field: ‘expr’
[17:02:35.546]   - Field: ‘uuid’
[17:02:35.546]   - Field: ‘seed’
[17:02:35.546]   - Field: ‘version’
[17:02:35.546]   - Field: ‘result’
[17:02:35.546]   - Field: ‘asynchronous’
[17:02:35.546]   - Field: ‘calls’
[17:02:35.546]   - Field: ‘globals’
[17:02:35.546]   - Field: ‘stdout’
[17:02:35.546]   - Field: ‘earlySignal’
[17:02:35.546]   - Field: ‘lazy’
[17:02:35.546]   - Field: ‘state’
[17:02:35.547] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.547] - Launch lazy future ...
[17:02:35.547] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.547] Packages needed by future strategies (n = 0): <none>
[17:02:35.548] {
[17:02:35.548]     {
[17:02:35.548]         {
[17:02:35.548]             ...future.startTime <- base::Sys.time()
[17:02:35.548]             {
[17:02:35.548]                 {
[17:02:35.548]                   {
[17:02:35.548]                     {
[17:02:35.548]                       base::local({
[17:02:35.548]                         has_future <- base::requireNamespace("future", 
[17:02:35.548]                           quietly = TRUE)
[17:02:35.548]                         if (has_future) {
[17:02:35.548]                           ns <- base::getNamespace("future")
[17:02:35.548]                           version <- ns[[".package"]][["version"]]
[17:02:35.548]                           if (is.null(version)) 
[17:02:35.548]                             version <- utils::packageVersion("future")
[17:02:35.548]                         }
[17:02:35.548]                         else {
[17:02:35.548]                           version <- NULL
[17:02:35.548]                         }
[17:02:35.548]                         if (!has_future || version < "1.8.0") {
[17:02:35.548]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.548]                             "", base::R.version$version.string), 
[17:02:35.548]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.548]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.548]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.548]                               "release", "version")], collapse = " "), 
[17:02:35.548]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.548]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.548]                             info)
[17:02:35.548]                           info <- base::paste(info, collapse = "; ")
[17:02:35.548]                           if (!has_future) {
[17:02:35.548]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.548]                               info)
[17:02:35.548]                           }
[17:02:35.548]                           else {
[17:02:35.548]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.548]                               info, version)
[17:02:35.548]                           }
[17:02:35.548]                           base::stop(msg)
[17:02:35.548]                         }
[17:02:35.548]                       })
[17:02:35.548]                     }
[17:02:35.548]                     base::local({
[17:02:35.548]                       for (pkg in "stats") {
[17:02:35.548]                         base::loadNamespace(pkg)
[17:02:35.548]                         base::library(pkg, character.only = TRUE)
[17:02:35.548]                       }
[17:02:35.548]                     })
[17:02:35.548]                   }
[17:02:35.548]                   ...future.strategy.old <- future::plan("list")
[17:02:35.548]                   options(future.plan = NULL)
[17:02:35.548]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.548]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.548]                 }
[17:02:35.548]                 ...future.workdir <- getwd()
[17:02:35.548]             }
[17:02:35.548]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.548]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.548]         }
[17:02:35.548]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.548]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.548]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.548]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.548]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.548]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.548]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.548]             base::names(...future.oldOptions))
[17:02:35.548]     }
[17:02:35.548]     if (FALSE) {
[17:02:35.548]     }
[17:02:35.548]     else {
[17:02:35.548]         if (TRUE) {
[17:02:35.548]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.548]                 open = "w")
[17:02:35.548]         }
[17:02:35.548]         else {
[17:02:35.548]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.548]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.548]         }
[17:02:35.548]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.548]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.548]             base::sink(type = "output", split = FALSE)
[17:02:35.548]             base::close(...future.stdout)
[17:02:35.548]         }, add = TRUE)
[17:02:35.548]     }
[17:02:35.548]     ...future.frame <- base::sys.nframe()
[17:02:35.548]     ...future.conditions <- base::list()
[17:02:35.548]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.548]     if (FALSE) {
[17:02:35.548]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.548]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.548]     }
[17:02:35.548]     ...future.result <- base::tryCatch({
[17:02:35.548]         base::withCallingHandlers({
[17:02:35.548]             ...future.value <- base::withVisible(base::local({
[17:02:35.548]                 lm(weight ~ group - 1)
[17:02:35.548]             }))
[17:02:35.548]             future::FutureResult(value = ...future.value$value, 
[17:02:35.548]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.548]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.548]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.548]                     ...future.globalenv.names))
[17:02:35.548]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.548]         }, condition = base::local({
[17:02:35.548]             c <- base::c
[17:02:35.548]             inherits <- base::inherits
[17:02:35.548]             invokeRestart <- base::invokeRestart
[17:02:35.548]             length <- base::length
[17:02:35.548]             list <- base::list
[17:02:35.548]             seq.int <- base::seq.int
[17:02:35.548]             signalCondition <- base::signalCondition
[17:02:35.548]             sys.calls <- base::sys.calls
[17:02:35.548]             `[[` <- base::`[[`
[17:02:35.548]             `+` <- base::`+`
[17:02:35.548]             `<<-` <- base::`<<-`
[17:02:35.548]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.548]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.548]                   3L)]
[17:02:35.548]             }
[17:02:35.548]             function(cond) {
[17:02:35.548]                 is_error <- inherits(cond, "error")
[17:02:35.548]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.548]                   NULL)
[17:02:35.548]                 if (is_error) {
[17:02:35.548]                   sessionInformation <- function() {
[17:02:35.548]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.548]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.548]                       search = base::search(), system = base::Sys.info())
[17:02:35.548]                   }
[17:02:35.548]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.548]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.548]                     cond$call), session = sessionInformation(), 
[17:02:35.548]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.548]                   signalCondition(cond)
[17:02:35.548]                 }
[17:02:35.548]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.548]                 "immediateCondition"))) {
[17:02:35.548]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.548]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.548]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.548]                   if (TRUE && !signal) {
[17:02:35.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.548]                     {
[17:02:35.548]                       inherits <- base::inherits
[17:02:35.548]                       invokeRestart <- base::invokeRestart
[17:02:35.548]                       is.null <- base::is.null
[17:02:35.548]                       muffled <- FALSE
[17:02:35.548]                       if (inherits(cond, "message")) {
[17:02:35.548]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.548]                         if (muffled) 
[17:02:35.548]                           invokeRestart("muffleMessage")
[17:02:35.548]                       }
[17:02:35.548]                       else if (inherits(cond, "warning")) {
[17:02:35.548]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.548]                         if (muffled) 
[17:02:35.548]                           invokeRestart("muffleWarning")
[17:02:35.548]                       }
[17:02:35.548]                       else if (inherits(cond, "condition")) {
[17:02:35.548]                         if (!is.null(pattern)) {
[17:02:35.548]                           computeRestarts <- base::computeRestarts
[17:02:35.548]                           grepl <- base::grepl
[17:02:35.548]                           restarts <- computeRestarts(cond)
[17:02:35.548]                           for (restart in restarts) {
[17:02:35.548]                             name <- restart$name
[17:02:35.548]                             if (is.null(name)) 
[17:02:35.548]                               next
[17:02:35.548]                             if (!grepl(pattern, name)) 
[17:02:35.548]                               next
[17:02:35.548]                             invokeRestart(restart)
[17:02:35.548]                             muffled <- TRUE
[17:02:35.548]                             break
[17:02:35.548]                           }
[17:02:35.548]                         }
[17:02:35.548]                       }
[17:02:35.548]                       invisible(muffled)
[17:02:35.548]                     }
[17:02:35.548]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.548]                   }
[17:02:35.548]                 }
[17:02:35.548]                 else {
[17:02:35.548]                   if (TRUE) {
[17:02:35.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.548]                     {
[17:02:35.548]                       inherits <- base::inherits
[17:02:35.548]                       invokeRestart <- base::invokeRestart
[17:02:35.548]                       is.null <- base::is.null
[17:02:35.548]                       muffled <- FALSE
[17:02:35.548]                       if (inherits(cond, "message")) {
[17:02:35.548]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.548]                         if (muffled) 
[17:02:35.548]                           invokeRestart("muffleMessage")
[17:02:35.548]                       }
[17:02:35.548]                       else if (inherits(cond, "warning")) {
[17:02:35.548]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.548]                         if (muffled) 
[17:02:35.548]                           invokeRestart("muffleWarning")
[17:02:35.548]                       }
[17:02:35.548]                       else if (inherits(cond, "condition")) {
[17:02:35.548]                         if (!is.null(pattern)) {
[17:02:35.548]                           computeRestarts <- base::computeRestarts
[17:02:35.548]                           grepl <- base::grepl
[17:02:35.548]                           restarts <- computeRestarts(cond)
[17:02:35.548]                           for (restart in restarts) {
[17:02:35.548]                             name <- restart$name
[17:02:35.548]                             if (is.null(name)) 
[17:02:35.548]                               next
[17:02:35.548]                             if (!grepl(pattern, name)) 
[17:02:35.548]                               next
[17:02:35.548]                             invokeRestart(restart)
[17:02:35.548]                             muffled <- TRUE
[17:02:35.548]                             break
[17:02:35.548]                           }
[17:02:35.548]                         }
[17:02:35.548]                       }
[17:02:35.548]                       invisible(muffled)
[17:02:35.548]                     }
[17:02:35.548]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.548]                   }
[17:02:35.548]                 }
[17:02:35.548]             }
[17:02:35.548]         }))
[17:02:35.548]     }, error = function(ex) {
[17:02:35.548]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.548]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.548]                 ...future.rng), started = ...future.startTime, 
[17:02:35.548]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.548]             version = "1.8"), class = "FutureResult")
[17:02:35.548]     }, finally = {
[17:02:35.548]         if (!identical(...future.workdir, getwd())) 
[17:02:35.548]             setwd(...future.workdir)
[17:02:35.548]         {
[17:02:35.548]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.548]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.548]             }
[17:02:35.548]             base::options(...future.oldOptions)
[17:02:35.548]             if (.Platform$OS.type == "windows") {
[17:02:35.548]                 old_names <- names(...future.oldEnvVars)
[17:02:35.548]                 envs <- base::Sys.getenv()
[17:02:35.548]                 names <- names(envs)
[17:02:35.548]                 common <- intersect(names, old_names)
[17:02:35.548]                 added <- setdiff(names, old_names)
[17:02:35.548]                 removed <- setdiff(old_names, names)
[17:02:35.548]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.548]                   envs[common]]
[17:02:35.548]                 NAMES <- toupper(changed)
[17:02:35.548]                 args <- list()
[17:02:35.548]                 for (kk in seq_along(NAMES)) {
[17:02:35.548]                   name <- changed[[kk]]
[17:02:35.548]                   NAME <- NAMES[[kk]]
[17:02:35.548]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.548]                     next
[17:02:35.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.548]                 }
[17:02:35.548]                 NAMES <- toupper(added)
[17:02:35.548]                 for (kk in seq_along(NAMES)) {
[17:02:35.548]                   name <- added[[kk]]
[17:02:35.548]                   NAME <- NAMES[[kk]]
[17:02:35.548]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.548]                     next
[17:02:35.548]                   args[[name]] <- ""
[17:02:35.548]                 }
[17:02:35.548]                 NAMES <- toupper(removed)
[17:02:35.548]                 for (kk in seq_along(NAMES)) {
[17:02:35.548]                   name <- removed[[kk]]
[17:02:35.548]                   NAME <- NAMES[[kk]]
[17:02:35.548]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.548]                     next
[17:02:35.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.548]                 }
[17:02:35.548]                 if (length(args) > 0) 
[17:02:35.548]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.548]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.548]             }
[17:02:35.548]             else {
[17:02:35.548]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.548]             }
[17:02:35.548]             {
[17:02:35.548]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.548]                   0L) {
[17:02:35.548]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.548]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.548]                   base::options(opts)
[17:02:35.548]                 }
[17:02:35.548]                 {
[17:02:35.548]                   {
[17:02:35.548]                     NULL
[17:02:35.548]                     RNGkind("Mersenne-Twister")
[17:02:35.548]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.548]                       inherits = FALSE)
[17:02:35.548]                   }
[17:02:35.548]                   options(future.plan = NULL)
[17:02:35.548]                   if (is.na(NA_character_)) 
[17:02:35.548]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.548]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.548]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.548]                     .init = FALSE)
[17:02:35.548]                 }
[17:02:35.548]             }
[17:02:35.548]         }
[17:02:35.548]     })
[17:02:35.548]     if (TRUE) {
[17:02:35.548]         base::sink(type = "output", split = FALSE)
[17:02:35.548]         if (TRUE) {
[17:02:35.548]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.548]         }
[17:02:35.548]         else {
[17:02:35.548]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.548]         }
[17:02:35.548]         base::close(...future.stdout)
[17:02:35.548]         ...future.stdout <- NULL
[17:02:35.548]     }
[17:02:35.548]     ...future.result$conditions <- ...future.conditions
[17:02:35.548]     ...future.result$finished <- base::Sys.time()
[17:02:35.548]     ...future.result
[17:02:35.548] }
[17:02:35.549] assign_globals() ...
[17:02:35.549] List of 2
[17:02:35.549]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.549]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.549]  - attr(*, "where")=List of 2
[17:02:35.549]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.549]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.549]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.549]  - attr(*, "resolved")= logi FALSE
[17:02:35.549]  - attr(*, "total_size")= num 896
[17:02:35.549]  - attr(*, "already-done")= logi TRUE
[17:02:35.553] - copied ‘weight’ to environment
[17:02:35.553] - copied ‘group’ to environment
[17:02:35.553] assign_globals() ... done
[17:02:35.553] plan(): Setting new future strategy stack:
[17:02:35.553] List of future strategies:
[17:02:35.553] 1. sequential:
[17:02:35.553]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.553]    - tweaked: FALSE
[17:02:35.553]    - call: NULL
[17:02:35.554] plan(): nbrOfWorkers() = 1
[17:02:35.555] plan(): Setting new future strategy stack:
[17:02:35.555] List of future strategies:
[17:02:35.555] 1. sequential:
[17:02:35.555]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.555]    - tweaked: FALSE
[17:02:35.555]    - call: plan(strategy)
[17:02:35.556] plan(): nbrOfWorkers() = 1
[17:02:35.556] SequentialFuture started (and completed)
[17:02:35.556] - Launch lazy future ... done
[17:02:35.556] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:35.558] getGlobalsAndPackages() ...
[17:02:35.558] Searching for globals...
[17:02:35.560] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.560] Searching for globals ... DONE
[17:02:35.560] Resolving globals: FALSE
[17:02:35.560] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.561] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.561] - globals: [2] ‘weight’, ‘group’
[17:02:35.561] - packages: [1] ‘stats’
[17:02:35.561] getGlobalsAndPackages() ... DONE
[17:02:35.561] run() for ‘Future’ ...
[17:02:35.561] - state: ‘created’
[17:02:35.562] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.562] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.562] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.562]   - Field: ‘label’
[17:02:35.562]   - Field: ‘local’
[17:02:35.562]   - Field: ‘owner’
[17:02:35.562]   - Field: ‘envir’
[17:02:35.562]   - Field: ‘packages’
[17:02:35.563]   - Field: ‘gc’
[17:02:35.563]   - Field: ‘conditions’
[17:02:35.563]   - Field: ‘expr’
[17:02:35.563]   - Field: ‘uuid’
[17:02:35.563]   - Field: ‘seed’
[17:02:35.563]   - Field: ‘version’
[17:02:35.563]   - Field: ‘result’
[17:02:35.563]   - Field: ‘asynchronous’
[17:02:35.563]   - Field: ‘calls’
[17:02:35.563]   - Field: ‘globals’
[17:02:35.564]   - Field: ‘stdout’
[17:02:35.564]   - Field: ‘earlySignal’
[17:02:35.564]   - Field: ‘lazy’
[17:02:35.564]   - Field: ‘state’
[17:02:35.564] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.564] - Launch lazy future ...
[17:02:35.564] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.564] Packages needed by future strategies (n = 0): <none>
[17:02:35.567] {
[17:02:35.567]     {
[17:02:35.567]         {
[17:02:35.567]             ...future.startTime <- base::Sys.time()
[17:02:35.567]             {
[17:02:35.567]                 {
[17:02:35.567]                   {
[17:02:35.567]                     {
[17:02:35.567]                       base::local({
[17:02:35.567]                         has_future <- base::requireNamespace("future", 
[17:02:35.567]                           quietly = TRUE)
[17:02:35.567]                         if (has_future) {
[17:02:35.567]                           ns <- base::getNamespace("future")
[17:02:35.567]                           version <- ns[[".package"]][["version"]]
[17:02:35.567]                           if (is.null(version)) 
[17:02:35.567]                             version <- utils::packageVersion("future")
[17:02:35.567]                         }
[17:02:35.567]                         else {
[17:02:35.567]                           version <- NULL
[17:02:35.567]                         }
[17:02:35.567]                         if (!has_future || version < "1.8.0") {
[17:02:35.567]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.567]                             "", base::R.version$version.string), 
[17:02:35.567]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.567]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.567]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.567]                               "release", "version")], collapse = " "), 
[17:02:35.567]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.567]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.567]                             info)
[17:02:35.567]                           info <- base::paste(info, collapse = "; ")
[17:02:35.567]                           if (!has_future) {
[17:02:35.567]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.567]                               info)
[17:02:35.567]                           }
[17:02:35.567]                           else {
[17:02:35.567]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.567]                               info, version)
[17:02:35.567]                           }
[17:02:35.567]                           base::stop(msg)
[17:02:35.567]                         }
[17:02:35.567]                       })
[17:02:35.567]                     }
[17:02:35.567]                     base::local({
[17:02:35.567]                       for (pkg in "stats") {
[17:02:35.567]                         base::loadNamespace(pkg)
[17:02:35.567]                         base::library(pkg, character.only = TRUE)
[17:02:35.567]                       }
[17:02:35.567]                     })
[17:02:35.567]                   }
[17:02:35.567]                   ...future.strategy.old <- future::plan("list")
[17:02:35.567]                   options(future.plan = NULL)
[17:02:35.567]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.567]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.567]                 }
[17:02:35.567]                 ...future.workdir <- getwd()
[17:02:35.567]             }
[17:02:35.567]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.567]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.567]         }
[17:02:35.567]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.567]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.567]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.567]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.567]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.567]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.567]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.567]             base::names(...future.oldOptions))
[17:02:35.567]     }
[17:02:35.567]     if (FALSE) {
[17:02:35.567]     }
[17:02:35.567]     else {
[17:02:35.567]         if (TRUE) {
[17:02:35.567]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.567]                 open = "w")
[17:02:35.567]         }
[17:02:35.567]         else {
[17:02:35.567]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.567]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.567]         }
[17:02:35.567]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.567]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.567]             base::sink(type = "output", split = FALSE)
[17:02:35.567]             base::close(...future.stdout)
[17:02:35.567]         }, add = TRUE)
[17:02:35.567]     }
[17:02:35.567]     ...future.frame <- base::sys.nframe()
[17:02:35.567]     ...future.conditions <- base::list()
[17:02:35.567]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.567]     if (FALSE) {
[17:02:35.567]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.567]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.567]     }
[17:02:35.567]     ...future.result <- base::tryCatch({
[17:02:35.567]         base::withCallingHandlers({
[17:02:35.567]             ...future.value <- base::withVisible(base::local({
[17:02:35.567]                 lm(weight ~ group - 1)
[17:02:35.567]             }))
[17:02:35.567]             future::FutureResult(value = ...future.value$value, 
[17:02:35.567]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.567]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.567]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.567]                     ...future.globalenv.names))
[17:02:35.567]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.567]         }, condition = base::local({
[17:02:35.567]             c <- base::c
[17:02:35.567]             inherits <- base::inherits
[17:02:35.567]             invokeRestart <- base::invokeRestart
[17:02:35.567]             length <- base::length
[17:02:35.567]             list <- base::list
[17:02:35.567]             seq.int <- base::seq.int
[17:02:35.567]             signalCondition <- base::signalCondition
[17:02:35.567]             sys.calls <- base::sys.calls
[17:02:35.567]             `[[` <- base::`[[`
[17:02:35.567]             `+` <- base::`+`
[17:02:35.567]             `<<-` <- base::`<<-`
[17:02:35.567]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.567]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.567]                   3L)]
[17:02:35.567]             }
[17:02:35.567]             function(cond) {
[17:02:35.567]                 is_error <- inherits(cond, "error")
[17:02:35.567]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.567]                   NULL)
[17:02:35.567]                 if (is_error) {
[17:02:35.567]                   sessionInformation <- function() {
[17:02:35.567]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.567]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.567]                       search = base::search(), system = base::Sys.info())
[17:02:35.567]                   }
[17:02:35.567]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.567]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.567]                     cond$call), session = sessionInformation(), 
[17:02:35.567]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.567]                   signalCondition(cond)
[17:02:35.567]                 }
[17:02:35.567]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.567]                 "immediateCondition"))) {
[17:02:35.567]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.567]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.567]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.567]                   if (TRUE && !signal) {
[17:02:35.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.567]                     {
[17:02:35.567]                       inherits <- base::inherits
[17:02:35.567]                       invokeRestart <- base::invokeRestart
[17:02:35.567]                       is.null <- base::is.null
[17:02:35.567]                       muffled <- FALSE
[17:02:35.567]                       if (inherits(cond, "message")) {
[17:02:35.567]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.567]                         if (muffled) 
[17:02:35.567]                           invokeRestart("muffleMessage")
[17:02:35.567]                       }
[17:02:35.567]                       else if (inherits(cond, "warning")) {
[17:02:35.567]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.567]                         if (muffled) 
[17:02:35.567]                           invokeRestart("muffleWarning")
[17:02:35.567]                       }
[17:02:35.567]                       else if (inherits(cond, "condition")) {
[17:02:35.567]                         if (!is.null(pattern)) {
[17:02:35.567]                           computeRestarts <- base::computeRestarts
[17:02:35.567]                           grepl <- base::grepl
[17:02:35.567]                           restarts <- computeRestarts(cond)
[17:02:35.567]                           for (restart in restarts) {
[17:02:35.567]                             name <- restart$name
[17:02:35.567]                             if (is.null(name)) 
[17:02:35.567]                               next
[17:02:35.567]                             if (!grepl(pattern, name)) 
[17:02:35.567]                               next
[17:02:35.567]                             invokeRestart(restart)
[17:02:35.567]                             muffled <- TRUE
[17:02:35.567]                             break
[17:02:35.567]                           }
[17:02:35.567]                         }
[17:02:35.567]                       }
[17:02:35.567]                       invisible(muffled)
[17:02:35.567]                     }
[17:02:35.567]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.567]                   }
[17:02:35.567]                 }
[17:02:35.567]                 else {
[17:02:35.567]                   if (TRUE) {
[17:02:35.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.567]                     {
[17:02:35.567]                       inherits <- base::inherits
[17:02:35.567]                       invokeRestart <- base::invokeRestart
[17:02:35.567]                       is.null <- base::is.null
[17:02:35.567]                       muffled <- FALSE
[17:02:35.567]                       if (inherits(cond, "message")) {
[17:02:35.567]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.567]                         if (muffled) 
[17:02:35.567]                           invokeRestart("muffleMessage")
[17:02:35.567]                       }
[17:02:35.567]                       else if (inherits(cond, "warning")) {
[17:02:35.567]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.567]                         if (muffled) 
[17:02:35.567]                           invokeRestart("muffleWarning")
[17:02:35.567]                       }
[17:02:35.567]                       else if (inherits(cond, "condition")) {
[17:02:35.567]                         if (!is.null(pattern)) {
[17:02:35.567]                           computeRestarts <- base::computeRestarts
[17:02:35.567]                           grepl <- base::grepl
[17:02:35.567]                           restarts <- computeRestarts(cond)
[17:02:35.567]                           for (restart in restarts) {
[17:02:35.567]                             name <- restart$name
[17:02:35.567]                             if (is.null(name)) 
[17:02:35.567]                               next
[17:02:35.567]                             if (!grepl(pattern, name)) 
[17:02:35.567]                               next
[17:02:35.567]                             invokeRestart(restart)
[17:02:35.567]                             muffled <- TRUE
[17:02:35.567]                             break
[17:02:35.567]                           }
[17:02:35.567]                         }
[17:02:35.567]                       }
[17:02:35.567]                       invisible(muffled)
[17:02:35.567]                     }
[17:02:35.567]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.567]                   }
[17:02:35.567]                 }
[17:02:35.567]             }
[17:02:35.567]         }))
[17:02:35.567]     }, error = function(ex) {
[17:02:35.567]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.567]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.567]                 ...future.rng), started = ...future.startTime, 
[17:02:35.567]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.567]             version = "1.8"), class = "FutureResult")
[17:02:35.567]     }, finally = {
[17:02:35.567]         if (!identical(...future.workdir, getwd())) 
[17:02:35.567]             setwd(...future.workdir)
[17:02:35.567]         {
[17:02:35.567]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.567]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.567]             }
[17:02:35.567]             base::options(...future.oldOptions)
[17:02:35.567]             if (.Platform$OS.type == "windows") {
[17:02:35.567]                 old_names <- names(...future.oldEnvVars)
[17:02:35.567]                 envs <- base::Sys.getenv()
[17:02:35.567]                 names <- names(envs)
[17:02:35.567]                 common <- intersect(names, old_names)
[17:02:35.567]                 added <- setdiff(names, old_names)
[17:02:35.567]                 removed <- setdiff(old_names, names)
[17:02:35.567]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.567]                   envs[common]]
[17:02:35.567]                 NAMES <- toupper(changed)
[17:02:35.567]                 args <- list()
[17:02:35.567]                 for (kk in seq_along(NAMES)) {
[17:02:35.567]                   name <- changed[[kk]]
[17:02:35.567]                   NAME <- NAMES[[kk]]
[17:02:35.567]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.567]                     next
[17:02:35.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.567]                 }
[17:02:35.567]                 NAMES <- toupper(added)
[17:02:35.567]                 for (kk in seq_along(NAMES)) {
[17:02:35.567]                   name <- added[[kk]]
[17:02:35.567]                   NAME <- NAMES[[kk]]
[17:02:35.567]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.567]                     next
[17:02:35.567]                   args[[name]] <- ""
[17:02:35.567]                 }
[17:02:35.567]                 NAMES <- toupper(removed)
[17:02:35.567]                 for (kk in seq_along(NAMES)) {
[17:02:35.567]                   name <- removed[[kk]]
[17:02:35.567]                   NAME <- NAMES[[kk]]
[17:02:35.567]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.567]                     next
[17:02:35.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.567]                 }
[17:02:35.567]                 if (length(args) > 0) 
[17:02:35.567]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.567]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.567]             }
[17:02:35.567]             else {
[17:02:35.567]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.567]             }
[17:02:35.567]             {
[17:02:35.567]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.567]                   0L) {
[17:02:35.567]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.567]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.567]                   base::options(opts)
[17:02:35.567]                 }
[17:02:35.567]                 {
[17:02:35.567]                   {
[17:02:35.567]                     NULL
[17:02:35.567]                     RNGkind("Mersenne-Twister")
[17:02:35.567]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.567]                       inherits = FALSE)
[17:02:35.567]                   }
[17:02:35.567]                   options(future.plan = NULL)
[17:02:35.567]                   if (is.na(NA_character_)) 
[17:02:35.567]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.567]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.567]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.567]                     .init = FALSE)
[17:02:35.567]                 }
[17:02:35.567]             }
[17:02:35.567]         }
[17:02:35.567]     })
[17:02:35.567]     if (TRUE) {
[17:02:35.567]         base::sink(type = "output", split = FALSE)
[17:02:35.567]         if (TRUE) {
[17:02:35.567]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.567]         }
[17:02:35.567]         else {
[17:02:35.567]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.567]         }
[17:02:35.567]         base::close(...future.stdout)
[17:02:35.567]         ...future.stdout <- NULL
[17:02:35.567]     }
[17:02:35.567]     ...future.result$conditions <- ...future.conditions
[17:02:35.567]     ...future.result$finished <- base::Sys.time()
[17:02:35.567]     ...future.result
[17:02:35.567] }
[17:02:35.568] assign_globals() ...
[17:02:35.568] List of 2
[17:02:35.568]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.568]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.568]  - attr(*, "where")=List of 2
[17:02:35.568]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.568]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.568]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.568]  - attr(*, "resolved")= logi FALSE
[17:02:35.568]  - attr(*, "total_size")= num 896
[17:02:35.568]  - attr(*, "already-done")= logi TRUE
[17:02:35.572] - copied ‘weight’ to environment
[17:02:35.572] - copied ‘group’ to environment
[17:02:35.572] assign_globals() ... done
[17:02:35.572] plan(): Setting new future strategy stack:
[17:02:35.572] List of future strategies:
[17:02:35.572] 1. sequential:
[17:02:35.572]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.572]    - tweaked: FALSE
[17:02:35.572]    - call: NULL
[17:02:35.573] plan(): nbrOfWorkers() = 1
[17:02:35.574] plan(): Setting new future strategy stack:
[17:02:35.574] List of future strategies:
[17:02:35.574] 1. sequential:
[17:02:35.574]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.574]    - tweaked: FALSE
[17:02:35.574]    - call: plan(strategy)
[17:02:35.575] plan(): nbrOfWorkers() = 1
[17:02:35.575] SequentialFuture started (and completed)
[17:02:35.575] - Launch lazy future ... done
[17:02:35.575] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

- Globals - one-side formulas, e.g. xtabs(~ x) ...
[17:02:35.577] getGlobalsAndPackages() ...
[17:02:35.577] Searching for globals...
[17:02:35.578] - globals found: [4] ‘{’, ‘xtabs’, ‘x’, ‘~’
[17:02:35.578] Searching for globals ... DONE
[17:02:35.578] Resolving globals: FALSE
[17:02:35.579] The total size of the 1 globals is 96 bytes (96 bytes)
[17:02:35.579] The total size of the 1 globals exported for future expression (‘{; xtabs(~x); }’) is 96 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (96 bytes of class ‘numeric’)
[17:02:35.579] - globals: [1] ‘x’
[17:02:35.579] - packages: [1] ‘stats’
[17:02:35.580] getGlobalsAndPackages() ... DONE
[17:02:35.580] run() for ‘Future’ ...
[17:02:35.580] - state: ‘created’
[17:02:35.580] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.580] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.580] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.581]   - Field: ‘label’
[17:02:35.581]   - Field: ‘local’
[17:02:35.581]   - Field: ‘owner’
[17:02:35.581]   - Field: ‘envir’
[17:02:35.581]   - Field: ‘packages’
[17:02:35.581]   - Field: ‘gc’
[17:02:35.581]   - Field: ‘conditions’
[17:02:35.581]   - Field: ‘expr’
[17:02:35.581]   - Field: ‘uuid’
[17:02:35.581]   - Field: ‘seed’
[17:02:35.581]   - Field: ‘version’
[17:02:35.582]   - Field: ‘result’
[17:02:35.582]   - Field: ‘asynchronous’
[17:02:35.582]   - Field: ‘calls’
[17:02:35.582]   - Field: ‘globals’
[17:02:35.582]   - Field: ‘stdout’
[17:02:35.582]   - Field: ‘earlySignal’
[17:02:35.582]   - Field: ‘lazy’
[17:02:35.582]   - Field: ‘state’
[17:02:35.582] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.582] - Launch lazy future ...
[17:02:35.583] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.583] Packages needed by future strategies (n = 0): <none>
[17:02:35.583] {
[17:02:35.583]     {
[17:02:35.583]         {
[17:02:35.583]             ...future.startTime <- base::Sys.time()
[17:02:35.583]             {
[17:02:35.583]                 {
[17:02:35.583]                   {
[17:02:35.583]                     {
[17:02:35.583]                       base::local({
[17:02:35.583]                         has_future <- base::requireNamespace("future", 
[17:02:35.583]                           quietly = TRUE)
[17:02:35.583]                         if (has_future) {
[17:02:35.583]                           ns <- base::getNamespace("future")
[17:02:35.583]                           version <- ns[[".package"]][["version"]]
[17:02:35.583]                           if (is.null(version)) 
[17:02:35.583]                             version <- utils::packageVersion("future")
[17:02:35.583]                         }
[17:02:35.583]                         else {
[17:02:35.583]                           version <- NULL
[17:02:35.583]                         }
[17:02:35.583]                         if (!has_future || version < "1.8.0") {
[17:02:35.583]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.583]                             "", base::R.version$version.string), 
[17:02:35.583]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.583]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.583]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.583]                               "release", "version")], collapse = " "), 
[17:02:35.583]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.583]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.583]                             info)
[17:02:35.583]                           info <- base::paste(info, collapse = "; ")
[17:02:35.583]                           if (!has_future) {
[17:02:35.583]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.583]                               info)
[17:02:35.583]                           }
[17:02:35.583]                           else {
[17:02:35.583]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.583]                               info, version)
[17:02:35.583]                           }
[17:02:35.583]                           base::stop(msg)
[17:02:35.583]                         }
[17:02:35.583]                       })
[17:02:35.583]                     }
[17:02:35.583]                     base::local({
[17:02:35.583]                       for (pkg in "stats") {
[17:02:35.583]                         base::loadNamespace(pkg)
[17:02:35.583]                         base::library(pkg, character.only = TRUE)
[17:02:35.583]                       }
[17:02:35.583]                     })
[17:02:35.583]                   }
[17:02:35.583]                   ...future.strategy.old <- future::plan("list")
[17:02:35.583]                   options(future.plan = NULL)
[17:02:35.583]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.583]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.583]                 }
[17:02:35.583]                 ...future.workdir <- getwd()
[17:02:35.583]             }
[17:02:35.583]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.583]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.583]         }
[17:02:35.583]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.583]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.583]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.583]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.583]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.583]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.583]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.583]             base::names(...future.oldOptions))
[17:02:35.583]     }
[17:02:35.583]     if (FALSE) {
[17:02:35.583]     }
[17:02:35.583]     else {
[17:02:35.583]         if (TRUE) {
[17:02:35.583]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.583]                 open = "w")
[17:02:35.583]         }
[17:02:35.583]         else {
[17:02:35.583]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.583]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.583]         }
[17:02:35.583]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.583]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.583]             base::sink(type = "output", split = FALSE)
[17:02:35.583]             base::close(...future.stdout)
[17:02:35.583]         }, add = TRUE)
[17:02:35.583]     }
[17:02:35.583]     ...future.frame <- base::sys.nframe()
[17:02:35.583]     ...future.conditions <- base::list()
[17:02:35.583]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.583]     if (FALSE) {
[17:02:35.583]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.583]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.583]     }
[17:02:35.583]     ...future.result <- base::tryCatch({
[17:02:35.583]         base::withCallingHandlers({
[17:02:35.583]             ...future.value <- base::withVisible(base::local({
[17:02:35.583]                 xtabs(~x)
[17:02:35.583]             }))
[17:02:35.583]             future::FutureResult(value = ...future.value$value, 
[17:02:35.583]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.583]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.583]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.583]                     ...future.globalenv.names))
[17:02:35.583]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.583]         }, condition = base::local({
[17:02:35.583]             c <- base::c
[17:02:35.583]             inherits <- base::inherits
[17:02:35.583]             invokeRestart <- base::invokeRestart
[17:02:35.583]             length <- base::length
[17:02:35.583]             list <- base::list
[17:02:35.583]             seq.int <- base::seq.int
[17:02:35.583]             signalCondition <- base::signalCondition
[17:02:35.583]             sys.calls <- base::sys.calls
[17:02:35.583]             `[[` <- base::`[[`
[17:02:35.583]             `+` <- base::`+`
[17:02:35.583]             `<<-` <- base::`<<-`
[17:02:35.583]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.583]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.583]                   3L)]
[17:02:35.583]             }
[17:02:35.583]             function(cond) {
[17:02:35.583]                 is_error <- inherits(cond, "error")
[17:02:35.583]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.583]                   NULL)
[17:02:35.583]                 if (is_error) {
[17:02:35.583]                   sessionInformation <- function() {
[17:02:35.583]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.583]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.583]                       search = base::search(), system = base::Sys.info())
[17:02:35.583]                   }
[17:02:35.583]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.583]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.583]                     cond$call), session = sessionInformation(), 
[17:02:35.583]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.583]                   signalCondition(cond)
[17:02:35.583]                 }
[17:02:35.583]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.583]                 "immediateCondition"))) {
[17:02:35.583]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.583]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.583]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.583]                   if (TRUE && !signal) {
[17:02:35.583]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.583]                     {
[17:02:35.583]                       inherits <- base::inherits
[17:02:35.583]                       invokeRestart <- base::invokeRestart
[17:02:35.583]                       is.null <- base::is.null
[17:02:35.583]                       muffled <- FALSE
[17:02:35.583]                       if (inherits(cond, "message")) {
[17:02:35.583]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.583]                         if (muffled) 
[17:02:35.583]                           invokeRestart("muffleMessage")
[17:02:35.583]                       }
[17:02:35.583]                       else if (inherits(cond, "warning")) {
[17:02:35.583]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.583]                         if (muffled) 
[17:02:35.583]                           invokeRestart("muffleWarning")
[17:02:35.583]                       }
[17:02:35.583]                       else if (inherits(cond, "condition")) {
[17:02:35.583]                         if (!is.null(pattern)) {
[17:02:35.583]                           computeRestarts <- base::computeRestarts
[17:02:35.583]                           grepl <- base::grepl
[17:02:35.583]                           restarts <- computeRestarts(cond)
[17:02:35.583]                           for (restart in restarts) {
[17:02:35.583]                             name <- restart$name
[17:02:35.583]                             if (is.null(name)) 
[17:02:35.583]                               next
[17:02:35.583]                             if (!grepl(pattern, name)) 
[17:02:35.583]                               next
[17:02:35.583]                             invokeRestart(restart)
[17:02:35.583]                             muffled <- TRUE
[17:02:35.583]                             break
[17:02:35.583]                           }
[17:02:35.583]                         }
[17:02:35.583]                       }
[17:02:35.583]                       invisible(muffled)
[17:02:35.583]                     }
[17:02:35.583]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.583]                   }
[17:02:35.583]                 }
[17:02:35.583]                 else {
[17:02:35.583]                   if (TRUE) {
[17:02:35.583]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.583]                     {
[17:02:35.583]                       inherits <- base::inherits
[17:02:35.583]                       invokeRestart <- base::invokeRestart
[17:02:35.583]                       is.null <- base::is.null
[17:02:35.583]                       muffled <- FALSE
[17:02:35.583]                       if (inherits(cond, "message")) {
[17:02:35.583]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.583]                         if (muffled) 
[17:02:35.583]                           invokeRestart("muffleMessage")
[17:02:35.583]                       }
[17:02:35.583]                       else if (inherits(cond, "warning")) {
[17:02:35.583]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.583]                         if (muffled) 
[17:02:35.583]                           invokeRestart("muffleWarning")
[17:02:35.583]                       }
[17:02:35.583]                       else if (inherits(cond, "condition")) {
[17:02:35.583]                         if (!is.null(pattern)) {
[17:02:35.583]                           computeRestarts <- base::computeRestarts
[17:02:35.583]                           grepl <- base::grepl
[17:02:35.583]                           restarts <- computeRestarts(cond)
[17:02:35.583]                           for (restart in restarts) {
[17:02:35.583]                             name <- restart$name
[17:02:35.583]                             if (is.null(name)) 
[17:02:35.583]                               next
[17:02:35.583]                             if (!grepl(pattern, name)) 
[17:02:35.583]                               next
[17:02:35.583]                             invokeRestart(restart)
[17:02:35.583]                             muffled <- TRUE
[17:02:35.583]                             break
[17:02:35.583]                           }
[17:02:35.583]                         }
[17:02:35.583]                       }
[17:02:35.583]                       invisible(muffled)
[17:02:35.583]                     }
[17:02:35.583]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.583]                   }
[17:02:35.583]                 }
[17:02:35.583]             }
[17:02:35.583]         }))
[17:02:35.583]     }, error = function(ex) {
[17:02:35.583]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.583]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.583]                 ...future.rng), started = ...future.startTime, 
[17:02:35.583]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.583]             version = "1.8"), class = "FutureResult")
[17:02:35.583]     }, finally = {
[17:02:35.583]         if (!identical(...future.workdir, getwd())) 
[17:02:35.583]             setwd(...future.workdir)
[17:02:35.583]         {
[17:02:35.583]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.583]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.583]             }
[17:02:35.583]             base::options(...future.oldOptions)
[17:02:35.583]             if (.Platform$OS.type == "windows") {
[17:02:35.583]                 old_names <- names(...future.oldEnvVars)
[17:02:35.583]                 envs <- base::Sys.getenv()
[17:02:35.583]                 names <- names(envs)
[17:02:35.583]                 common <- intersect(names, old_names)
[17:02:35.583]                 added <- setdiff(names, old_names)
[17:02:35.583]                 removed <- setdiff(old_names, names)
[17:02:35.583]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.583]                   envs[common]]
[17:02:35.583]                 NAMES <- toupper(changed)
[17:02:35.583]                 args <- list()
[17:02:35.583]                 for (kk in seq_along(NAMES)) {
[17:02:35.583]                   name <- changed[[kk]]
[17:02:35.583]                   NAME <- NAMES[[kk]]
[17:02:35.583]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.583]                     next
[17:02:35.583]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.583]                 }
[17:02:35.583]                 NAMES <- toupper(added)
[17:02:35.583]                 for (kk in seq_along(NAMES)) {
[17:02:35.583]                   name <- added[[kk]]
[17:02:35.583]                   NAME <- NAMES[[kk]]
[17:02:35.583]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.583]                     next
[17:02:35.583]                   args[[name]] <- ""
[17:02:35.583]                 }
[17:02:35.583]                 NAMES <- toupper(removed)
[17:02:35.583]                 for (kk in seq_along(NAMES)) {
[17:02:35.583]                   name <- removed[[kk]]
[17:02:35.583]                   NAME <- NAMES[[kk]]
[17:02:35.583]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.583]                     next
[17:02:35.583]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.583]                 }
[17:02:35.583]                 if (length(args) > 0) 
[17:02:35.583]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.583]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.583]             }
[17:02:35.583]             else {
[17:02:35.583]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.583]             }
[17:02:35.583]             {
[17:02:35.583]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.583]                   0L) {
[17:02:35.583]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.583]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.583]                   base::options(opts)
[17:02:35.583]                 }
[17:02:35.583]                 {
[17:02:35.583]                   {
[17:02:35.583]                     NULL
[17:02:35.583]                     RNGkind("Mersenne-Twister")
[17:02:35.583]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.583]                       inherits = FALSE)
[17:02:35.583]                   }
[17:02:35.583]                   options(future.plan = NULL)
[17:02:35.583]                   if (is.na(NA_character_)) 
[17:02:35.583]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.583]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.583]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.583]                     .init = FALSE)
[17:02:35.583]                 }
[17:02:35.583]             }
[17:02:35.583]         }
[17:02:35.583]     })
[17:02:35.583]     if (TRUE) {
[17:02:35.583]         base::sink(type = "output", split = FALSE)
[17:02:35.583]         if (TRUE) {
[17:02:35.583]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.583]         }
[17:02:35.583]         else {
[17:02:35.583]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.583]         }
[17:02:35.583]         base::close(...future.stdout)
[17:02:35.583]         ...future.stdout <- NULL
[17:02:35.583]     }
[17:02:35.583]     ...future.result$conditions <- ...future.conditions
[17:02:35.583]     ...future.result$finished <- base::Sys.time()
[17:02:35.583]     ...future.result
[17:02:35.583] }
[17:02:35.585] assign_globals() ...
[17:02:35.585] List of 1
[17:02:35.585]  $ x: num [1:5] 1 1 2 2 2
[17:02:35.585]  - attr(*, "where")=List of 1
[17:02:35.585]   ..$ x:<environment: R_EmptyEnv> 
[17:02:35.585]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.585]  - attr(*, "resolved")= logi FALSE
[17:02:35.585]  - attr(*, "total_size")= num 96
[17:02:35.585]  - attr(*, "already-done")= logi TRUE
[17:02:35.587] - copied ‘x’ to environment
[17:02:35.587] assign_globals() ... done
[17:02:35.588] plan(): Setting new future strategy stack:
[17:02:35.588] List of future strategies:
[17:02:35.588] 1. sequential:
[17:02:35.588]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.588]    - tweaked: FALSE
[17:02:35.588]    - call: NULL
[17:02:35.588] plan(): nbrOfWorkers() = 1
[17:02:35.589] plan(): Setting new future strategy stack:
[17:02:35.589] List of future strategies:
[17:02:35.589] 1. sequential:
[17:02:35.589]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.589]    - tweaked: FALSE
[17:02:35.589]    - call: plan(strategy)
[17:02:35.590] plan(): nbrOfWorkers() = 1
[17:02:35.590] SequentialFuture started (and completed)
[17:02:35.590] - Launch lazy future ... done
[17:02:35.590] run() for ‘SequentialFuture’ ... done
x
1 2 
2 3 
[17:02:35.591] getGlobalsAndPackages() ...
[17:02:35.591] Searching for globals...
[17:02:35.592] - globals found: [4] ‘{’, ‘xtabs’, ‘x’, ‘~’
[17:02:35.592] Searching for globals ... DONE
[17:02:35.592] Resolving globals: FALSE
[17:02:35.593] The total size of the 1 globals is 96 bytes (96 bytes)
[17:02:35.593] The total size of the 1 globals exported for future expression (‘{; xtabs(~x); }’) is 96 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (96 bytes of class ‘numeric’)
[17:02:35.595] - globals: [1] ‘x’
[17:02:35.595] - packages: [1] ‘stats’
[17:02:35.595] getGlobalsAndPackages() ... DONE
[17:02:35.596] run() for ‘Future’ ...
[17:02:35.596] - state: ‘created’
[17:02:35.596] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.596] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.596] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.596]   - Field: ‘label’
[17:02:35.596]   - Field: ‘local’
[17:02:35.596]   - Field: ‘owner’
[17:02:35.597]   - Field: ‘envir’
[17:02:35.597]   - Field: ‘packages’
[17:02:35.597]   - Field: ‘gc’
[17:02:35.597]   - Field: ‘conditions’
[17:02:35.597]   - Field: ‘expr’
[17:02:35.597]   - Field: ‘uuid’
[17:02:35.597]   - Field: ‘seed’
[17:02:35.597]   - Field: ‘version’
[17:02:35.597]   - Field: ‘result’
[17:02:35.597]   - Field: ‘asynchronous’
[17:02:35.598]   - Field: ‘calls’
[17:02:35.598]   - Field: ‘globals’
[17:02:35.598]   - Field: ‘stdout’
[17:02:35.598]   - Field: ‘earlySignal’
[17:02:35.598]   - Field: ‘lazy’
[17:02:35.598]   - Field: ‘state’
[17:02:35.598] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.598] - Launch lazy future ...
[17:02:35.598] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.599] Packages needed by future strategies (n = 0): <none>
[17:02:35.599] {
[17:02:35.599]     {
[17:02:35.599]         {
[17:02:35.599]             ...future.startTime <- base::Sys.time()
[17:02:35.599]             {
[17:02:35.599]                 {
[17:02:35.599]                   {
[17:02:35.599]                     {
[17:02:35.599]                       base::local({
[17:02:35.599]                         has_future <- base::requireNamespace("future", 
[17:02:35.599]                           quietly = TRUE)
[17:02:35.599]                         if (has_future) {
[17:02:35.599]                           ns <- base::getNamespace("future")
[17:02:35.599]                           version <- ns[[".package"]][["version"]]
[17:02:35.599]                           if (is.null(version)) 
[17:02:35.599]                             version <- utils::packageVersion("future")
[17:02:35.599]                         }
[17:02:35.599]                         else {
[17:02:35.599]                           version <- NULL
[17:02:35.599]                         }
[17:02:35.599]                         if (!has_future || version < "1.8.0") {
[17:02:35.599]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.599]                             "", base::R.version$version.string), 
[17:02:35.599]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.599]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.599]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.599]                               "release", "version")], collapse = " "), 
[17:02:35.599]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.599]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.599]                             info)
[17:02:35.599]                           info <- base::paste(info, collapse = "; ")
[17:02:35.599]                           if (!has_future) {
[17:02:35.599]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.599]                               info)
[17:02:35.599]                           }
[17:02:35.599]                           else {
[17:02:35.599]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.599]                               info, version)
[17:02:35.599]                           }
[17:02:35.599]                           base::stop(msg)
[17:02:35.599]                         }
[17:02:35.599]                       })
[17:02:35.599]                     }
[17:02:35.599]                     base::local({
[17:02:35.599]                       for (pkg in "stats") {
[17:02:35.599]                         base::loadNamespace(pkg)
[17:02:35.599]                         base::library(pkg, character.only = TRUE)
[17:02:35.599]                       }
[17:02:35.599]                     })
[17:02:35.599]                   }
[17:02:35.599]                   ...future.strategy.old <- future::plan("list")
[17:02:35.599]                   options(future.plan = NULL)
[17:02:35.599]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.599]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.599]                 }
[17:02:35.599]                 ...future.workdir <- getwd()
[17:02:35.599]             }
[17:02:35.599]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.599]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.599]         }
[17:02:35.599]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.599]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.599]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.599]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.599]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.599]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.599]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.599]             base::names(...future.oldOptions))
[17:02:35.599]     }
[17:02:35.599]     if (FALSE) {
[17:02:35.599]     }
[17:02:35.599]     else {
[17:02:35.599]         if (TRUE) {
[17:02:35.599]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.599]                 open = "w")
[17:02:35.599]         }
[17:02:35.599]         else {
[17:02:35.599]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.599]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.599]         }
[17:02:35.599]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.599]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.599]             base::sink(type = "output", split = FALSE)
[17:02:35.599]             base::close(...future.stdout)
[17:02:35.599]         }, add = TRUE)
[17:02:35.599]     }
[17:02:35.599]     ...future.frame <- base::sys.nframe()
[17:02:35.599]     ...future.conditions <- base::list()
[17:02:35.599]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.599]     if (FALSE) {
[17:02:35.599]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.599]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.599]     }
[17:02:35.599]     ...future.result <- base::tryCatch({
[17:02:35.599]         base::withCallingHandlers({
[17:02:35.599]             ...future.value <- base::withVisible(base::local({
[17:02:35.599]                 xtabs(~x)
[17:02:35.599]             }))
[17:02:35.599]             future::FutureResult(value = ...future.value$value, 
[17:02:35.599]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.599]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.599]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.599]                     ...future.globalenv.names))
[17:02:35.599]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.599]         }, condition = base::local({
[17:02:35.599]             c <- base::c
[17:02:35.599]             inherits <- base::inherits
[17:02:35.599]             invokeRestart <- base::invokeRestart
[17:02:35.599]             length <- base::length
[17:02:35.599]             list <- base::list
[17:02:35.599]             seq.int <- base::seq.int
[17:02:35.599]             signalCondition <- base::signalCondition
[17:02:35.599]             sys.calls <- base::sys.calls
[17:02:35.599]             `[[` <- base::`[[`
[17:02:35.599]             `+` <- base::`+`
[17:02:35.599]             `<<-` <- base::`<<-`
[17:02:35.599]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.599]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.599]                   3L)]
[17:02:35.599]             }
[17:02:35.599]             function(cond) {
[17:02:35.599]                 is_error <- inherits(cond, "error")
[17:02:35.599]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.599]                   NULL)
[17:02:35.599]                 if (is_error) {
[17:02:35.599]                   sessionInformation <- function() {
[17:02:35.599]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.599]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.599]                       search = base::search(), system = base::Sys.info())
[17:02:35.599]                   }
[17:02:35.599]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.599]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.599]                     cond$call), session = sessionInformation(), 
[17:02:35.599]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.599]                   signalCondition(cond)
[17:02:35.599]                 }
[17:02:35.599]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.599]                 "immediateCondition"))) {
[17:02:35.599]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.599]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.599]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.599]                   if (TRUE && !signal) {
[17:02:35.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.599]                     {
[17:02:35.599]                       inherits <- base::inherits
[17:02:35.599]                       invokeRestart <- base::invokeRestart
[17:02:35.599]                       is.null <- base::is.null
[17:02:35.599]                       muffled <- FALSE
[17:02:35.599]                       if (inherits(cond, "message")) {
[17:02:35.599]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.599]                         if (muffled) 
[17:02:35.599]                           invokeRestart("muffleMessage")
[17:02:35.599]                       }
[17:02:35.599]                       else if (inherits(cond, "warning")) {
[17:02:35.599]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.599]                         if (muffled) 
[17:02:35.599]                           invokeRestart("muffleWarning")
[17:02:35.599]                       }
[17:02:35.599]                       else if (inherits(cond, "condition")) {
[17:02:35.599]                         if (!is.null(pattern)) {
[17:02:35.599]                           computeRestarts <- base::computeRestarts
[17:02:35.599]                           grepl <- base::grepl
[17:02:35.599]                           restarts <- computeRestarts(cond)
[17:02:35.599]                           for (restart in restarts) {
[17:02:35.599]                             name <- restart$name
[17:02:35.599]                             if (is.null(name)) 
[17:02:35.599]                               next
[17:02:35.599]                             if (!grepl(pattern, name)) 
[17:02:35.599]                               next
[17:02:35.599]                             invokeRestart(restart)
[17:02:35.599]                             muffled <- TRUE
[17:02:35.599]                             break
[17:02:35.599]                           }
[17:02:35.599]                         }
[17:02:35.599]                       }
[17:02:35.599]                       invisible(muffled)
[17:02:35.599]                     }
[17:02:35.599]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.599]                   }
[17:02:35.599]                 }
[17:02:35.599]                 else {
[17:02:35.599]                   if (TRUE) {
[17:02:35.599]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.599]                     {
[17:02:35.599]                       inherits <- base::inherits
[17:02:35.599]                       invokeRestart <- base::invokeRestart
[17:02:35.599]                       is.null <- base::is.null
[17:02:35.599]                       muffled <- FALSE
[17:02:35.599]                       if (inherits(cond, "message")) {
[17:02:35.599]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.599]                         if (muffled) 
[17:02:35.599]                           invokeRestart("muffleMessage")
[17:02:35.599]                       }
[17:02:35.599]                       else if (inherits(cond, "warning")) {
[17:02:35.599]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.599]                         if (muffled) 
[17:02:35.599]                           invokeRestart("muffleWarning")
[17:02:35.599]                       }
[17:02:35.599]                       else if (inherits(cond, "condition")) {
[17:02:35.599]                         if (!is.null(pattern)) {
[17:02:35.599]                           computeRestarts <- base::computeRestarts
[17:02:35.599]                           grepl <- base::grepl
[17:02:35.599]                           restarts <- computeRestarts(cond)
[17:02:35.599]                           for (restart in restarts) {
[17:02:35.599]                             name <- restart$name
[17:02:35.599]                             if (is.null(name)) 
[17:02:35.599]                               next
[17:02:35.599]                             if (!grepl(pattern, name)) 
[17:02:35.599]                               next
[17:02:35.599]                             invokeRestart(restart)
[17:02:35.599]                             muffled <- TRUE
[17:02:35.599]                             break
[17:02:35.599]                           }
[17:02:35.599]                         }
[17:02:35.599]                       }
[17:02:35.599]                       invisible(muffled)
[17:02:35.599]                     }
[17:02:35.599]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.599]                   }
[17:02:35.599]                 }
[17:02:35.599]             }
[17:02:35.599]         }))
[17:02:35.599]     }, error = function(ex) {
[17:02:35.599]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.599]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.599]                 ...future.rng), started = ...future.startTime, 
[17:02:35.599]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.599]             version = "1.8"), class = "FutureResult")
[17:02:35.599]     }, finally = {
[17:02:35.599]         if (!identical(...future.workdir, getwd())) 
[17:02:35.599]             setwd(...future.workdir)
[17:02:35.599]         {
[17:02:35.599]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.599]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.599]             }
[17:02:35.599]             base::options(...future.oldOptions)
[17:02:35.599]             if (.Platform$OS.type == "windows") {
[17:02:35.599]                 old_names <- names(...future.oldEnvVars)
[17:02:35.599]                 envs <- base::Sys.getenv()
[17:02:35.599]                 names <- names(envs)
[17:02:35.599]                 common <- intersect(names, old_names)
[17:02:35.599]                 added <- setdiff(names, old_names)
[17:02:35.599]                 removed <- setdiff(old_names, names)
[17:02:35.599]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.599]                   envs[common]]
[17:02:35.599]                 NAMES <- toupper(changed)
[17:02:35.599]                 args <- list()
[17:02:35.599]                 for (kk in seq_along(NAMES)) {
[17:02:35.599]                   name <- changed[[kk]]
[17:02:35.599]                   NAME <- NAMES[[kk]]
[17:02:35.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.599]                     next
[17:02:35.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.599]                 }
[17:02:35.599]                 NAMES <- toupper(added)
[17:02:35.599]                 for (kk in seq_along(NAMES)) {
[17:02:35.599]                   name <- added[[kk]]
[17:02:35.599]                   NAME <- NAMES[[kk]]
[17:02:35.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.599]                     next
[17:02:35.599]                   args[[name]] <- ""
[17:02:35.599]                 }
[17:02:35.599]                 NAMES <- toupper(removed)
[17:02:35.599]                 for (kk in seq_along(NAMES)) {
[17:02:35.599]                   name <- removed[[kk]]
[17:02:35.599]                   NAME <- NAMES[[kk]]
[17:02:35.599]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.599]                     next
[17:02:35.599]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.599]                 }
[17:02:35.599]                 if (length(args) > 0) 
[17:02:35.599]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.599]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.599]             }
[17:02:35.599]             else {
[17:02:35.599]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.599]             }
[17:02:35.599]             {
[17:02:35.599]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.599]                   0L) {
[17:02:35.599]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.599]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.599]                   base::options(opts)
[17:02:35.599]                 }
[17:02:35.599]                 {
[17:02:35.599]                   {
[17:02:35.599]                     NULL
[17:02:35.599]                     RNGkind("Mersenne-Twister")
[17:02:35.599]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.599]                       inherits = FALSE)
[17:02:35.599]                   }
[17:02:35.599]                   options(future.plan = NULL)
[17:02:35.599]                   if (is.na(NA_character_)) 
[17:02:35.599]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.599]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.599]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.599]                     .init = FALSE)
[17:02:35.599]                 }
[17:02:35.599]             }
[17:02:35.599]         }
[17:02:35.599]     })
[17:02:35.599]     if (TRUE) {
[17:02:35.599]         base::sink(type = "output", split = FALSE)
[17:02:35.599]         if (TRUE) {
[17:02:35.599]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.599]         }
[17:02:35.599]         else {
[17:02:35.599]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.599]         }
[17:02:35.599]         base::close(...future.stdout)
[17:02:35.599]         ...future.stdout <- NULL
[17:02:35.599]     }
[17:02:35.599]     ...future.result$conditions <- ...future.conditions
[17:02:35.599]     ...future.result$finished <- base::Sys.time()
[17:02:35.599]     ...future.result
[17:02:35.599] }
[17:02:35.601] assign_globals() ...
[17:02:35.601] List of 1
[17:02:35.601]  $ x: num [1:5] 1 1 2 2 2
[17:02:35.601]  - attr(*, "where")=List of 1
[17:02:35.601]   ..$ x:<environment: R_EmptyEnv> 
[17:02:35.601]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.601]  - attr(*, "resolved")= logi FALSE
[17:02:35.601]  - attr(*, "total_size")= num 96
[17:02:35.601]  - attr(*, "already-done")= logi TRUE
[17:02:35.603] - copied ‘x’ to environment
[17:02:35.604] assign_globals() ... done
[17:02:35.604] plan(): Setting new future strategy stack:
[17:02:35.604] List of future strategies:
[17:02:35.604] 1. sequential:
[17:02:35.604]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.604]    - tweaked: FALSE
[17:02:35.604]    - call: NULL
[17:02:35.604] plan(): nbrOfWorkers() = 1
[17:02:35.605] plan(): Setting new future strategy stack:
[17:02:35.606] List of future strategies:
[17:02:35.606] 1. sequential:
[17:02:35.606]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.606]    - tweaked: FALSE
[17:02:35.606]    - call: plan(strategy)
[17:02:35.606] plan(): nbrOfWorkers() = 1
[17:02:35.606] SequentialFuture started (and completed)
[17:02:35.606] - Launch lazy future ... done
[17:02:35.606] run() for ‘SequentialFuture’ ... done
x
1 2 
2 3 
- Globals - lm(<formula>, data = cars) ...
- Globals - lm(<formula #1 (‘a’)>, data = cars) ...

Call:
lm(formula = dist ~ . - 1, data = cars)

Coefficients:
speed  
2.909  

[17:02:35.608] getGlobalsAndPackages() ...
[17:02:35.608] Searching for globals...
[17:02:35.610] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘-’, ‘.’, ‘~’, ‘cars’
[17:02:35.610] Searching for globals ... DONE
[17:02:35.610] Resolving globals: FALSE
[17:02:35.611] 
[17:02:35.611] - packages: [2] ‘stats’, ‘datasets’
[17:02:35.611] getGlobalsAndPackages() ... DONE
[17:02:35.611] run() for ‘Future’ ...
[17:02:35.611] - state: ‘created’
[17:02:35.611] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.612] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.612] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.612]   - Field: ‘label’
[17:02:35.612]   - Field: ‘local’
[17:02:35.612]   - Field: ‘owner’
[17:02:35.612]   - Field: ‘envir’
[17:02:35.612]   - Field: ‘packages’
[17:02:35.612]   - Field: ‘gc’
[17:02:35.612]   - Field: ‘conditions’
[17:02:35.612]   - Field: ‘expr’
[17:02:35.613]   - Field: ‘uuid’
[17:02:35.613]   - Field: ‘seed’
[17:02:35.613]   - Field: ‘version’
[17:02:35.613]   - Field: ‘result’
[17:02:35.613]   - Field: ‘asynchronous’
[17:02:35.613]   - Field: ‘calls’
[17:02:35.613]   - Field: ‘globals’
[17:02:35.613]   - Field: ‘stdout’
[17:02:35.613]   - Field: ‘earlySignal’
[17:02:35.613]   - Field: ‘lazy’
[17:02:35.613]   - Field: ‘state’
[17:02:35.614] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.614] - Launch lazy future ...
[17:02:35.614] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:35.614] Packages needed by future strategies (n = 0): <none>
[17:02:35.614] {
[17:02:35.614]     {
[17:02:35.614]         {
[17:02:35.614]             ...future.startTime <- base::Sys.time()
[17:02:35.614]             {
[17:02:35.614]                 {
[17:02:35.614]                   {
[17:02:35.614]                     {
[17:02:35.614]                       base::local({
[17:02:35.614]                         has_future <- base::requireNamespace("future", 
[17:02:35.614]                           quietly = TRUE)
[17:02:35.614]                         if (has_future) {
[17:02:35.614]                           ns <- base::getNamespace("future")
[17:02:35.614]                           version <- ns[[".package"]][["version"]]
[17:02:35.614]                           if (is.null(version)) 
[17:02:35.614]                             version <- utils::packageVersion("future")
[17:02:35.614]                         }
[17:02:35.614]                         else {
[17:02:35.614]                           version <- NULL
[17:02:35.614]                         }
[17:02:35.614]                         if (!has_future || version < "1.8.0") {
[17:02:35.614]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.614]                             "", base::R.version$version.string), 
[17:02:35.614]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.614]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.614]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.614]                               "release", "version")], collapse = " "), 
[17:02:35.614]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.614]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.614]                             info)
[17:02:35.614]                           info <- base::paste(info, collapse = "; ")
[17:02:35.614]                           if (!has_future) {
[17:02:35.614]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.614]                               info)
[17:02:35.614]                           }
[17:02:35.614]                           else {
[17:02:35.614]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.614]                               info, version)
[17:02:35.614]                           }
[17:02:35.614]                           base::stop(msg)
[17:02:35.614]                         }
[17:02:35.614]                       })
[17:02:35.614]                     }
[17:02:35.614]                     base::local({
[17:02:35.614]                       for (pkg in c("stats", "datasets")) {
[17:02:35.614]                         base::loadNamespace(pkg)
[17:02:35.614]                         base::library(pkg, character.only = TRUE)
[17:02:35.614]                       }
[17:02:35.614]                     })
[17:02:35.614]                   }
[17:02:35.614]                   ...future.strategy.old <- future::plan("list")
[17:02:35.614]                   options(future.plan = NULL)
[17:02:35.614]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.614]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.614]                 }
[17:02:35.614]                 ...future.workdir <- getwd()
[17:02:35.614]             }
[17:02:35.614]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.614]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.614]         }
[17:02:35.614]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.614]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.614]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.614]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.614]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.614]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.614]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.614]             base::names(...future.oldOptions))
[17:02:35.614]     }
[17:02:35.614]     if (FALSE) {
[17:02:35.614]     }
[17:02:35.614]     else {
[17:02:35.614]         if (TRUE) {
[17:02:35.614]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.614]                 open = "w")
[17:02:35.614]         }
[17:02:35.614]         else {
[17:02:35.614]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.614]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.614]         }
[17:02:35.614]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.614]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.614]             base::sink(type = "output", split = FALSE)
[17:02:35.614]             base::close(...future.stdout)
[17:02:35.614]         }, add = TRUE)
[17:02:35.614]     }
[17:02:35.614]     ...future.frame <- base::sys.nframe()
[17:02:35.614]     ...future.conditions <- base::list()
[17:02:35.614]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.614]     if (FALSE) {
[17:02:35.614]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.614]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.614]     }
[17:02:35.614]     ...future.result <- base::tryCatch({
[17:02:35.614]         base::withCallingHandlers({
[17:02:35.614]             ...future.value <- base::withVisible(base::local({
[17:02:35.614]                 lm(dist ~ . - 1, data = cars)
[17:02:35.614]             }))
[17:02:35.614]             future::FutureResult(value = ...future.value$value, 
[17:02:35.614]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.614]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.614]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.614]                     ...future.globalenv.names))
[17:02:35.614]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.614]         }, condition = base::local({
[17:02:35.614]             c <- base::c
[17:02:35.614]             inherits <- base::inherits
[17:02:35.614]             invokeRestart <- base::invokeRestart
[17:02:35.614]             length <- base::length
[17:02:35.614]             list <- base::list
[17:02:35.614]             seq.int <- base::seq.int
[17:02:35.614]             signalCondition <- base::signalCondition
[17:02:35.614]             sys.calls <- base::sys.calls
[17:02:35.614]             `[[` <- base::`[[`
[17:02:35.614]             `+` <- base::`+`
[17:02:35.614]             `<<-` <- base::`<<-`
[17:02:35.614]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.614]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.614]                   3L)]
[17:02:35.614]             }
[17:02:35.614]             function(cond) {
[17:02:35.614]                 is_error <- inherits(cond, "error")
[17:02:35.614]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.614]                   NULL)
[17:02:35.614]                 if (is_error) {
[17:02:35.614]                   sessionInformation <- function() {
[17:02:35.614]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.614]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.614]                       search = base::search(), system = base::Sys.info())
[17:02:35.614]                   }
[17:02:35.614]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.614]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.614]                     cond$call), session = sessionInformation(), 
[17:02:35.614]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.614]                   signalCondition(cond)
[17:02:35.614]                 }
[17:02:35.614]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.614]                 "immediateCondition"))) {
[17:02:35.614]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.614]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.614]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.614]                   if (TRUE && !signal) {
[17:02:35.614]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.614]                     {
[17:02:35.614]                       inherits <- base::inherits
[17:02:35.614]                       invokeRestart <- base::invokeRestart
[17:02:35.614]                       is.null <- base::is.null
[17:02:35.614]                       muffled <- FALSE
[17:02:35.614]                       if (inherits(cond, "message")) {
[17:02:35.614]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.614]                         if (muffled) 
[17:02:35.614]                           invokeRestart("muffleMessage")
[17:02:35.614]                       }
[17:02:35.614]                       else if (inherits(cond, "warning")) {
[17:02:35.614]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.614]                         if (muffled) 
[17:02:35.614]                           invokeRestart("muffleWarning")
[17:02:35.614]                       }
[17:02:35.614]                       else if (inherits(cond, "condition")) {
[17:02:35.614]                         if (!is.null(pattern)) {
[17:02:35.614]                           computeRestarts <- base::computeRestarts
[17:02:35.614]                           grepl <- base::grepl
[17:02:35.614]                           restarts <- computeRestarts(cond)
[17:02:35.614]                           for (restart in restarts) {
[17:02:35.614]                             name <- restart$name
[17:02:35.614]                             if (is.null(name)) 
[17:02:35.614]                               next
[17:02:35.614]                             if (!grepl(pattern, name)) 
[17:02:35.614]                               next
[17:02:35.614]                             invokeRestart(restart)
[17:02:35.614]                             muffled <- TRUE
[17:02:35.614]                             break
[17:02:35.614]                           }
[17:02:35.614]                         }
[17:02:35.614]                       }
[17:02:35.614]                       invisible(muffled)
[17:02:35.614]                     }
[17:02:35.614]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.614]                   }
[17:02:35.614]                 }
[17:02:35.614]                 else {
[17:02:35.614]                   if (TRUE) {
[17:02:35.614]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.614]                     {
[17:02:35.614]                       inherits <- base::inherits
[17:02:35.614]                       invokeRestart <- base::invokeRestart
[17:02:35.614]                       is.null <- base::is.null
[17:02:35.614]                       muffled <- FALSE
[17:02:35.614]                       if (inherits(cond, "message")) {
[17:02:35.614]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.614]                         if (muffled) 
[17:02:35.614]                           invokeRestart("muffleMessage")
[17:02:35.614]                       }
[17:02:35.614]                       else if (inherits(cond, "warning")) {
[17:02:35.614]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.614]                         if (muffled) 
[17:02:35.614]                           invokeRestart("muffleWarning")
[17:02:35.614]                       }
[17:02:35.614]                       else if (inherits(cond, "condition")) {
[17:02:35.614]                         if (!is.null(pattern)) {
[17:02:35.614]                           computeRestarts <- base::computeRestarts
[17:02:35.614]                           grepl <- base::grepl
[17:02:35.614]                           restarts <- computeRestarts(cond)
[17:02:35.614]                           for (restart in restarts) {
[17:02:35.614]                             name <- restart$name
[17:02:35.614]                             if (is.null(name)) 
[17:02:35.614]                               next
[17:02:35.614]                             if (!grepl(pattern, name)) 
[17:02:35.614]                               next
[17:02:35.614]                             invokeRestart(restart)
[17:02:35.614]                             muffled <- TRUE
[17:02:35.614]                             break
[17:02:35.614]                           }
[17:02:35.614]                         }
[17:02:35.614]                       }
[17:02:35.614]                       invisible(muffled)
[17:02:35.614]                     }
[17:02:35.614]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.614]                   }
[17:02:35.614]                 }
[17:02:35.614]             }
[17:02:35.614]         }))
[17:02:35.614]     }, error = function(ex) {
[17:02:35.614]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.614]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.614]                 ...future.rng), started = ...future.startTime, 
[17:02:35.614]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.614]             version = "1.8"), class = "FutureResult")
[17:02:35.614]     }, finally = {
[17:02:35.614]         if (!identical(...future.workdir, getwd())) 
[17:02:35.614]             setwd(...future.workdir)
[17:02:35.614]         {
[17:02:35.614]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.614]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.614]             }
[17:02:35.614]             base::options(...future.oldOptions)
[17:02:35.614]             if (.Platform$OS.type == "windows") {
[17:02:35.614]                 old_names <- names(...future.oldEnvVars)
[17:02:35.614]                 envs <- base::Sys.getenv()
[17:02:35.614]                 names <- names(envs)
[17:02:35.614]                 common <- intersect(names, old_names)
[17:02:35.614]                 added <- setdiff(names, old_names)
[17:02:35.614]                 removed <- setdiff(old_names, names)
[17:02:35.614]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.614]                   envs[common]]
[17:02:35.614]                 NAMES <- toupper(changed)
[17:02:35.614]                 args <- list()
[17:02:35.614]                 for (kk in seq_along(NAMES)) {
[17:02:35.614]                   name <- changed[[kk]]
[17:02:35.614]                   NAME <- NAMES[[kk]]
[17:02:35.614]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.614]                     next
[17:02:35.614]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.614]                 }
[17:02:35.614]                 NAMES <- toupper(added)
[17:02:35.614]                 for (kk in seq_along(NAMES)) {
[17:02:35.614]                   name <- added[[kk]]
[17:02:35.614]                   NAME <- NAMES[[kk]]
[17:02:35.614]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.614]                     next
[17:02:35.614]                   args[[name]] <- ""
[17:02:35.614]                 }
[17:02:35.614]                 NAMES <- toupper(removed)
[17:02:35.614]                 for (kk in seq_along(NAMES)) {
[17:02:35.614]                   name <- removed[[kk]]
[17:02:35.614]                   NAME <- NAMES[[kk]]
[17:02:35.614]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.614]                     next
[17:02:35.614]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.614]                 }
[17:02:35.614]                 if (length(args) > 0) 
[17:02:35.614]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.614]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.614]             }
[17:02:35.614]             else {
[17:02:35.614]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.614]             }
[17:02:35.614]             {
[17:02:35.614]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.614]                   0L) {
[17:02:35.614]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.614]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.614]                   base::options(opts)
[17:02:35.614]                 }
[17:02:35.614]                 {
[17:02:35.614]                   {
[17:02:35.614]                     NULL
[17:02:35.614]                     RNGkind("Mersenne-Twister")
[17:02:35.614]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.614]                       inherits = FALSE)
[17:02:35.614]                   }
[17:02:35.614]                   options(future.plan = NULL)
[17:02:35.614]                   if (is.na(NA_character_)) 
[17:02:35.614]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.614]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.614]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.614]                     .init = FALSE)
[17:02:35.614]                 }
[17:02:35.614]             }
[17:02:35.614]         }
[17:02:35.614]     })
[17:02:35.614]     if (TRUE) {
[17:02:35.614]         base::sink(type = "output", split = FALSE)
[17:02:35.614]         if (TRUE) {
[17:02:35.614]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.614]         }
[17:02:35.614]         else {
[17:02:35.614]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.614]         }
[17:02:35.614]         base::close(...future.stdout)
[17:02:35.614]         ...future.stdout <- NULL
[17:02:35.614]     }
[17:02:35.614]     ...future.result$conditions <- ...future.conditions
[17:02:35.614]     ...future.result$finished <- base::Sys.time()
[17:02:35.614]     ...future.result
[17:02:35.614] }
[17:02:35.616] plan(): Setting new future strategy stack:
[17:02:35.617] List of future strategies:
[17:02:35.617] 1. sequential:
[17:02:35.617]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.617]    - tweaked: FALSE
[17:02:35.617]    - call: NULL
[17:02:35.617] plan(): nbrOfWorkers() = 1
[17:02:35.618] plan(): Setting new future strategy stack:
[17:02:35.618] List of future strategies:
[17:02:35.618] 1. sequential:
[17:02:35.618]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.618]    - tweaked: FALSE
[17:02:35.618]    - call: plan(strategy)
[17:02:35.619] plan(): nbrOfWorkers() = 1
[17:02:35.619] SequentialFuture started (and completed)
[17:02:35.619] - Launch lazy future ... done
[17:02:35.619] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = dist ~ . - 1, data = cars)

Coefficients:
speed  
2.909  

- Globals - lm(<formula #2 (‘b’)>, data = cars) ...

Call:
lm(formula = dist ~ . + 0, data = cars)

Coefficients:
speed  
2.909  

[17:02:35.622] getGlobalsAndPackages() ...
[17:02:35.622] Searching for globals...
[17:02:35.625] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘.’, ‘~’, ‘cars’
[17:02:35.625] Searching for globals ... DONE
[17:02:35.625] Resolving globals: FALSE
[17:02:35.626] 
[17:02:35.626] - packages: [2] ‘stats’, ‘datasets’
[17:02:35.626] getGlobalsAndPackages() ... DONE
[17:02:35.626] run() for ‘Future’ ...
[17:02:35.626] - state: ‘created’
[17:02:35.626] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.627] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.627] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.627]   - Field: ‘label’
[17:02:35.627]   - Field: ‘local’
[17:02:35.627]   - Field: ‘owner’
[17:02:35.627]   - Field: ‘envir’
[17:02:35.627]   - Field: ‘packages’
[17:02:35.627]   - Field: ‘gc’
[17:02:35.627]   - Field: ‘conditions’
[17:02:35.628]   - Field: ‘expr’
[17:02:35.628]   - Field: ‘uuid’
[17:02:35.628]   - Field: ‘seed’
[17:02:35.628]   - Field: ‘version’
[17:02:35.628]   - Field: ‘result’
[17:02:35.628]   - Field: ‘asynchronous’
[17:02:35.628]   - Field: ‘calls’
[17:02:35.628]   - Field: ‘globals’
[17:02:35.628]   - Field: ‘stdout’
[17:02:35.628]   - Field: ‘earlySignal’
[17:02:35.628]   - Field: ‘lazy’
[17:02:35.629]   - Field: ‘state’
[17:02:35.629] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.629] - Launch lazy future ...
[17:02:35.629] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:35.629] Packages needed by future strategies (n = 0): <none>
[17:02:35.630] {
[17:02:35.630]     {
[17:02:35.630]         {
[17:02:35.630]             ...future.startTime <- base::Sys.time()
[17:02:35.630]             {
[17:02:35.630]                 {
[17:02:35.630]                   {
[17:02:35.630]                     {
[17:02:35.630]                       base::local({
[17:02:35.630]                         has_future <- base::requireNamespace("future", 
[17:02:35.630]                           quietly = TRUE)
[17:02:35.630]                         if (has_future) {
[17:02:35.630]                           ns <- base::getNamespace("future")
[17:02:35.630]                           version <- ns[[".package"]][["version"]]
[17:02:35.630]                           if (is.null(version)) 
[17:02:35.630]                             version <- utils::packageVersion("future")
[17:02:35.630]                         }
[17:02:35.630]                         else {
[17:02:35.630]                           version <- NULL
[17:02:35.630]                         }
[17:02:35.630]                         if (!has_future || version < "1.8.0") {
[17:02:35.630]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.630]                             "", base::R.version$version.string), 
[17:02:35.630]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.630]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.630]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.630]                               "release", "version")], collapse = " "), 
[17:02:35.630]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.630]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.630]                             info)
[17:02:35.630]                           info <- base::paste(info, collapse = "; ")
[17:02:35.630]                           if (!has_future) {
[17:02:35.630]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.630]                               info)
[17:02:35.630]                           }
[17:02:35.630]                           else {
[17:02:35.630]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.630]                               info, version)
[17:02:35.630]                           }
[17:02:35.630]                           base::stop(msg)
[17:02:35.630]                         }
[17:02:35.630]                       })
[17:02:35.630]                     }
[17:02:35.630]                     base::local({
[17:02:35.630]                       for (pkg in c("stats", "datasets")) {
[17:02:35.630]                         base::loadNamespace(pkg)
[17:02:35.630]                         base::library(pkg, character.only = TRUE)
[17:02:35.630]                       }
[17:02:35.630]                     })
[17:02:35.630]                   }
[17:02:35.630]                   ...future.strategy.old <- future::plan("list")
[17:02:35.630]                   options(future.plan = NULL)
[17:02:35.630]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.630]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.630]                 }
[17:02:35.630]                 ...future.workdir <- getwd()
[17:02:35.630]             }
[17:02:35.630]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.630]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.630]         }
[17:02:35.630]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.630]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.630]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.630]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.630]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.630]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.630]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.630]             base::names(...future.oldOptions))
[17:02:35.630]     }
[17:02:35.630]     if (FALSE) {
[17:02:35.630]     }
[17:02:35.630]     else {
[17:02:35.630]         if (TRUE) {
[17:02:35.630]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.630]                 open = "w")
[17:02:35.630]         }
[17:02:35.630]         else {
[17:02:35.630]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.630]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.630]         }
[17:02:35.630]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.630]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.630]             base::sink(type = "output", split = FALSE)
[17:02:35.630]             base::close(...future.stdout)
[17:02:35.630]         }, add = TRUE)
[17:02:35.630]     }
[17:02:35.630]     ...future.frame <- base::sys.nframe()
[17:02:35.630]     ...future.conditions <- base::list()
[17:02:35.630]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.630]     if (FALSE) {
[17:02:35.630]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.630]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.630]     }
[17:02:35.630]     ...future.result <- base::tryCatch({
[17:02:35.630]         base::withCallingHandlers({
[17:02:35.630]             ...future.value <- base::withVisible(base::local({
[17:02:35.630]                 lm(dist ~ . + 0, data = cars)
[17:02:35.630]             }))
[17:02:35.630]             future::FutureResult(value = ...future.value$value, 
[17:02:35.630]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.630]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.630]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.630]                     ...future.globalenv.names))
[17:02:35.630]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.630]         }, condition = base::local({
[17:02:35.630]             c <- base::c
[17:02:35.630]             inherits <- base::inherits
[17:02:35.630]             invokeRestart <- base::invokeRestart
[17:02:35.630]             length <- base::length
[17:02:35.630]             list <- base::list
[17:02:35.630]             seq.int <- base::seq.int
[17:02:35.630]             signalCondition <- base::signalCondition
[17:02:35.630]             sys.calls <- base::sys.calls
[17:02:35.630]             `[[` <- base::`[[`
[17:02:35.630]             `+` <- base::`+`
[17:02:35.630]             `<<-` <- base::`<<-`
[17:02:35.630]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.630]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.630]                   3L)]
[17:02:35.630]             }
[17:02:35.630]             function(cond) {
[17:02:35.630]                 is_error <- inherits(cond, "error")
[17:02:35.630]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.630]                   NULL)
[17:02:35.630]                 if (is_error) {
[17:02:35.630]                   sessionInformation <- function() {
[17:02:35.630]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.630]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.630]                       search = base::search(), system = base::Sys.info())
[17:02:35.630]                   }
[17:02:35.630]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.630]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.630]                     cond$call), session = sessionInformation(), 
[17:02:35.630]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.630]                   signalCondition(cond)
[17:02:35.630]                 }
[17:02:35.630]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.630]                 "immediateCondition"))) {
[17:02:35.630]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.630]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.630]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.630]                   if (TRUE && !signal) {
[17:02:35.630]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.630]                     {
[17:02:35.630]                       inherits <- base::inherits
[17:02:35.630]                       invokeRestart <- base::invokeRestart
[17:02:35.630]                       is.null <- base::is.null
[17:02:35.630]                       muffled <- FALSE
[17:02:35.630]                       if (inherits(cond, "message")) {
[17:02:35.630]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.630]                         if (muffled) 
[17:02:35.630]                           invokeRestart("muffleMessage")
[17:02:35.630]                       }
[17:02:35.630]                       else if (inherits(cond, "warning")) {
[17:02:35.630]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.630]                         if (muffled) 
[17:02:35.630]                           invokeRestart("muffleWarning")
[17:02:35.630]                       }
[17:02:35.630]                       else if (inherits(cond, "condition")) {
[17:02:35.630]                         if (!is.null(pattern)) {
[17:02:35.630]                           computeRestarts <- base::computeRestarts
[17:02:35.630]                           grepl <- base::grepl
[17:02:35.630]                           restarts <- computeRestarts(cond)
[17:02:35.630]                           for (restart in restarts) {
[17:02:35.630]                             name <- restart$name
[17:02:35.630]                             if (is.null(name)) 
[17:02:35.630]                               next
[17:02:35.630]                             if (!grepl(pattern, name)) 
[17:02:35.630]                               next
[17:02:35.630]                             invokeRestart(restart)
[17:02:35.630]                             muffled <- TRUE
[17:02:35.630]                             break
[17:02:35.630]                           }
[17:02:35.630]                         }
[17:02:35.630]                       }
[17:02:35.630]                       invisible(muffled)
[17:02:35.630]                     }
[17:02:35.630]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.630]                   }
[17:02:35.630]                 }
[17:02:35.630]                 else {
[17:02:35.630]                   if (TRUE) {
[17:02:35.630]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.630]                     {
[17:02:35.630]                       inherits <- base::inherits
[17:02:35.630]                       invokeRestart <- base::invokeRestart
[17:02:35.630]                       is.null <- base::is.null
[17:02:35.630]                       muffled <- FALSE
[17:02:35.630]                       if (inherits(cond, "message")) {
[17:02:35.630]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.630]                         if (muffled) 
[17:02:35.630]                           invokeRestart("muffleMessage")
[17:02:35.630]                       }
[17:02:35.630]                       else if (inherits(cond, "warning")) {
[17:02:35.630]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.630]                         if (muffled) 
[17:02:35.630]                           invokeRestart("muffleWarning")
[17:02:35.630]                       }
[17:02:35.630]                       else if (inherits(cond, "condition")) {
[17:02:35.630]                         if (!is.null(pattern)) {
[17:02:35.630]                           computeRestarts <- base::computeRestarts
[17:02:35.630]                           grepl <- base::grepl
[17:02:35.630]                           restarts <- computeRestarts(cond)
[17:02:35.630]                           for (restart in restarts) {
[17:02:35.630]                             name <- restart$name
[17:02:35.630]                             if (is.null(name)) 
[17:02:35.630]                               next
[17:02:35.630]                             if (!grepl(pattern, name)) 
[17:02:35.630]                               next
[17:02:35.630]                             invokeRestart(restart)
[17:02:35.630]                             muffled <- TRUE
[17:02:35.630]                             break
[17:02:35.630]                           }
[17:02:35.630]                         }
[17:02:35.630]                       }
[17:02:35.630]                       invisible(muffled)
[17:02:35.630]                     }
[17:02:35.630]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.630]                   }
[17:02:35.630]                 }
[17:02:35.630]             }
[17:02:35.630]         }))
[17:02:35.630]     }, error = function(ex) {
[17:02:35.630]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.630]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.630]                 ...future.rng), started = ...future.startTime, 
[17:02:35.630]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.630]             version = "1.8"), class = "FutureResult")
[17:02:35.630]     }, finally = {
[17:02:35.630]         if (!identical(...future.workdir, getwd())) 
[17:02:35.630]             setwd(...future.workdir)
[17:02:35.630]         {
[17:02:35.630]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.630]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.630]             }
[17:02:35.630]             base::options(...future.oldOptions)
[17:02:35.630]             if (.Platform$OS.type == "windows") {
[17:02:35.630]                 old_names <- names(...future.oldEnvVars)
[17:02:35.630]                 envs <- base::Sys.getenv()
[17:02:35.630]                 names <- names(envs)
[17:02:35.630]                 common <- intersect(names, old_names)
[17:02:35.630]                 added <- setdiff(names, old_names)
[17:02:35.630]                 removed <- setdiff(old_names, names)
[17:02:35.630]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.630]                   envs[common]]
[17:02:35.630]                 NAMES <- toupper(changed)
[17:02:35.630]                 args <- list()
[17:02:35.630]                 for (kk in seq_along(NAMES)) {
[17:02:35.630]                   name <- changed[[kk]]
[17:02:35.630]                   NAME <- NAMES[[kk]]
[17:02:35.630]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.630]                     next
[17:02:35.630]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.630]                 }
[17:02:35.630]                 NAMES <- toupper(added)
[17:02:35.630]                 for (kk in seq_along(NAMES)) {
[17:02:35.630]                   name <- added[[kk]]
[17:02:35.630]                   NAME <- NAMES[[kk]]
[17:02:35.630]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.630]                     next
[17:02:35.630]                   args[[name]] <- ""
[17:02:35.630]                 }
[17:02:35.630]                 NAMES <- toupper(removed)
[17:02:35.630]                 for (kk in seq_along(NAMES)) {
[17:02:35.630]                   name <- removed[[kk]]
[17:02:35.630]                   NAME <- NAMES[[kk]]
[17:02:35.630]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.630]                     next
[17:02:35.630]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.630]                 }
[17:02:35.630]                 if (length(args) > 0) 
[17:02:35.630]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.630]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.630]             }
[17:02:35.630]             else {
[17:02:35.630]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.630]             }
[17:02:35.630]             {
[17:02:35.630]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.630]                   0L) {
[17:02:35.630]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.630]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.630]                   base::options(opts)
[17:02:35.630]                 }
[17:02:35.630]                 {
[17:02:35.630]                   {
[17:02:35.630]                     NULL
[17:02:35.630]                     RNGkind("Mersenne-Twister")
[17:02:35.630]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.630]                       inherits = FALSE)
[17:02:35.630]                   }
[17:02:35.630]                   options(future.plan = NULL)
[17:02:35.630]                   if (is.na(NA_character_)) 
[17:02:35.630]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.630]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.630]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.630]                     .init = FALSE)
[17:02:35.630]                 }
[17:02:35.630]             }
[17:02:35.630]         }
[17:02:35.630]     })
[17:02:35.630]     if (TRUE) {
[17:02:35.630]         base::sink(type = "output", split = FALSE)
[17:02:35.630]         if (TRUE) {
[17:02:35.630]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.630]         }
[17:02:35.630]         else {
[17:02:35.630]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.630]         }
[17:02:35.630]         base::close(...future.stdout)
[17:02:35.630]         ...future.stdout <- NULL
[17:02:35.630]     }
[17:02:35.630]     ...future.result$conditions <- ...future.conditions
[17:02:35.630]     ...future.result$finished <- base::Sys.time()
[17:02:35.630]     ...future.result
[17:02:35.630] }
[17:02:35.632] plan(): Setting new future strategy stack:
[17:02:35.632] List of future strategies:
[17:02:35.632] 1. sequential:
[17:02:35.632]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.632]    - tweaked: FALSE
[17:02:35.632]    - call: NULL
[17:02:35.632] plan(): nbrOfWorkers() = 1
[17:02:35.633] plan(): Setting new future strategy stack:
[17:02:35.633] List of future strategies:
[17:02:35.633] 1. sequential:
[17:02:35.633]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.633]    - tweaked: FALSE
[17:02:35.633]    - call: plan(strategy)
[17:02:35.634] plan(): nbrOfWorkers() = 1
[17:02:35.634] SequentialFuture started (and completed)
[17:02:35.634] - Launch lazy future ... done
[17:02:35.634] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = dist ~ . + 0, data = cars)

Coefficients:
speed  
2.909  

- Globals - lm(<formula #3 (‘c’)>, data = cars) ...

Call:
lm(formula = dist ~ speed + speed^2, data = cars)

Coefficients:
(Intercept)        speed  
    -17.579        3.932  

[17:02:35.637] getGlobalsAndPackages() ...
[17:02:35.637] Searching for globals...
[17:02:35.639] - globals found: [8] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘speed’, ‘^’, ‘~’, ‘cars’
[17:02:35.639] Searching for globals ... DONE
[17:02:35.639] Resolving globals: FALSE
[17:02:35.639] 
[17:02:35.639] - packages: [2] ‘stats’, ‘datasets’
[17:02:35.640] getGlobalsAndPackages() ... DONE
[17:02:35.640] run() for ‘Future’ ...
[17:02:35.640] - state: ‘created’
[17:02:35.640] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.640] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.640] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.641]   - Field: ‘label’
[17:02:35.641]   - Field: ‘local’
[17:02:35.641]   - Field: ‘owner’
[17:02:35.641]   - Field: ‘envir’
[17:02:35.641]   - Field: ‘packages’
[17:02:35.641]   - Field: ‘gc’
[17:02:35.641]   - Field: ‘conditions’
[17:02:35.641]   - Field: ‘expr’
[17:02:35.641]   - Field: ‘uuid’
[17:02:35.641]   - Field: ‘seed’
[17:02:35.642]   - Field: ‘version’
[17:02:35.642]   - Field: ‘result’
[17:02:35.642]   - Field: ‘asynchronous’
[17:02:35.642]   - Field: ‘calls’
[17:02:35.642]   - Field: ‘globals’
[17:02:35.642]   - Field: ‘stdout’
[17:02:35.642]   - Field: ‘earlySignal’
[17:02:35.642]   - Field: ‘lazy’
[17:02:35.642]   - Field: ‘state’
[17:02:35.642] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.642] - Launch lazy future ...
[17:02:35.643] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:35.643] Packages needed by future strategies (n = 0): <none>
[17:02:35.643] {
[17:02:35.643]     {
[17:02:35.643]         {
[17:02:35.643]             ...future.startTime <- base::Sys.time()
[17:02:35.643]             {
[17:02:35.643]                 {
[17:02:35.643]                   {
[17:02:35.643]                     {
[17:02:35.643]                       base::local({
[17:02:35.643]                         has_future <- base::requireNamespace("future", 
[17:02:35.643]                           quietly = TRUE)
[17:02:35.643]                         if (has_future) {
[17:02:35.643]                           ns <- base::getNamespace("future")
[17:02:35.643]                           version <- ns[[".package"]][["version"]]
[17:02:35.643]                           if (is.null(version)) 
[17:02:35.643]                             version <- utils::packageVersion("future")
[17:02:35.643]                         }
[17:02:35.643]                         else {
[17:02:35.643]                           version <- NULL
[17:02:35.643]                         }
[17:02:35.643]                         if (!has_future || version < "1.8.0") {
[17:02:35.643]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.643]                             "", base::R.version$version.string), 
[17:02:35.643]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.643]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.643]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.643]                               "release", "version")], collapse = " "), 
[17:02:35.643]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.643]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.643]                             info)
[17:02:35.643]                           info <- base::paste(info, collapse = "; ")
[17:02:35.643]                           if (!has_future) {
[17:02:35.643]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.643]                               info)
[17:02:35.643]                           }
[17:02:35.643]                           else {
[17:02:35.643]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.643]                               info, version)
[17:02:35.643]                           }
[17:02:35.643]                           base::stop(msg)
[17:02:35.643]                         }
[17:02:35.643]                       })
[17:02:35.643]                     }
[17:02:35.643]                     base::local({
[17:02:35.643]                       for (pkg in c("stats", "datasets")) {
[17:02:35.643]                         base::loadNamespace(pkg)
[17:02:35.643]                         base::library(pkg, character.only = TRUE)
[17:02:35.643]                       }
[17:02:35.643]                     })
[17:02:35.643]                   }
[17:02:35.643]                   ...future.strategy.old <- future::plan("list")
[17:02:35.643]                   options(future.plan = NULL)
[17:02:35.643]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.643]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.643]                 }
[17:02:35.643]                 ...future.workdir <- getwd()
[17:02:35.643]             }
[17:02:35.643]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.643]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.643]         }
[17:02:35.643]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.643]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.643]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.643]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.643]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.643]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.643]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.643]             base::names(...future.oldOptions))
[17:02:35.643]     }
[17:02:35.643]     if (FALSE) {
[17:02:35.643]     }
[17:02:35.643]     else {
[17:02:35.643]         if (TRUE) {
[17:02:35.643]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.643]                 open = "w")
[17:02:35.643]         }
[17:02:35.643]         else {
[17:02:35.643]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.643]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.643]         }
[17:02:35.643]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.643]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.643]             base::sink(type = "output", split = FALSE)
[17:02:35.643]             base::close(...future.stdout)
[17:02:35.643]         }, add = TRUE)
[17:02:35.643]     }
[17:02:35.643]     ...future.frame <- base::sys.nframe()
[17:02:35.643]     ...future.conditions <- base::list()
[17:02:35.643]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.643]     if (FALSE) {
[17:02:35.643]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.643]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.643]     }
[17:02:35.643]     ...future.result <- base::tryCatch({
[17:02:35.643]         base::withCallingHandlers({
[17:02:35.643]             ...future.value <- base::withVisible(base::local({
[17:02:35.643]                 lm(dist ~ speed + speed^2, data = cars)
[17:02:35.643]             }))
[17:02:35.643]             future::FutureResult(value = ...future.value$value, 
[17:02:35.643]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.643]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.643]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.643]                     ...future.globalenv.names))
[17:02:35.643]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.643]         }, condition = base::local({
[17:02:35.643]             c <- base::c
[17:02:35.643]             inherits <- base::inherits
[17:02:35.643]             invokeRestart <- base::invokeRestart
[17:02:35.643]             length <- base::length
[17:02:35.643]             list <- base::list
[17:02:35.643]             seq.int <- base::seq.int
[17:02:35.643]             signalCondition <- base::signalCondition
[17:02:35.643]             sys.calls <- base::sys.calls
[17:02:35.643]             `[[` <- base::`[[`
[17:02:35.643]             `+` <- base::`+`
[17:02:35.643]             `<<-` <- base::`<<-`
[17:02:35.643]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.643]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.643]                   3L)]
[17:02:35.643]             }
[17:02:35.643]             function(cond) {
[17:02:35.643]                 is_error <- inherits(cond, "error")
[17:02:35.643]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.643]                   NULL)
[17:02:35.643]                 if (is_error) {
[17:02:35.643]                   sessionInformation <- function() {
[17:02:35.643]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.643]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.643]                       search = base::search(), system = base::Sys.info())
[17:02:35.643]                   }
[17:02:35.643]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.643]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.643]                     cond$call), session = sessionInformation(), 
[17:02:35.643]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.643]                   signalCondition(cond)
[17:02:35.643]                 }
[17:02:35.643]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.643]                 "immediateCondition"))) {
[17:02:35.643]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.643]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.643]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.643]                   if (TRUE && !signal) {
[17:02:35.643]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.643]                     {
[17:02:35.643]                       inherits <- base::inherits
[17:02:35.643]                       invokeRestart <- base::invokeRestart
[17:02:35.643]                       is.null <- base::is.null
[17:02:35.643]                       muffled <- FALSE
[17:02:35.643]                       if (inherits(cond, "message")) {
[17:02:35.643]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.643]                         if (muffled) 
[17:02:35.643]                           invokeRestart("muffleMessage")
[17:02:35.643]                       }
[17:02:35.643]                       else if (inherits(cond, "warning")) {
[17:02:35.643]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.643]                         if (muffled) 
[17:02:35.643]                           invokeRestart("muffleWarning")
[17:02:35.643]                       }
[17:02:35.643]                       else if (inherits(cond, "condition")) {
[17:02:35.643]                         if (!is.null(pattern)) {
[17:02:35.643]                           computeRestarts <- base::computeRestarts
[17:02:35.643]                           grepl <- base::grepl
[17:02:35.643]                           restarts <- computeRestarts(cond)
[17:02:35.643]                           for (restart in restarts) {
[17:02:35.643]                             name <- restart$name
[17:02:35.643]                             if (is.null(name)) 
[17:02:35.643]                               next
[17:02:35.643]                             if (!grepl(pattern, name)) 
[17:02:35.643]                               next
[17:02:35.643]                             invokeRestart(restart)
[17:02:35.643]                             muffled <- TRUE
[17:02:35.643]                             break
[17:02:35.643]                           }
[17:02:35.643]                         }
[17:02:35.643]                       }
[17:02:35.643]                       invisible(muffled)
[17:02:35.643]                     }
[17:02:35.643]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.643]                   }
[17:02:35.643]                 }
[17:02:35.643]                 else {
[17:02:35.643]                   if (TRUE) {
[17:02:35.643]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.643]                     {
[17:02:35.643]                       inherits <- base::inherits
[17:02:35.643]                       invokeRestart <- base::invokeRestart
[17:02:35.643]                       is.null <- base::is.null
[17:02:35.643]                       muffled <- FALSE
[17:02:35.643]                       if (inherits(cond, "message")) {
[17:02:35.643]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.643]                         if (muffled) 
[17:02:35.643]                           invokeRestart("muffleMessage")
[17:02:35.643]                       }
[17:02:35.643]                       else if (inherits(cond, "warning")) {
[17:02:35.643]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.643]                         if (muffled) 
[17:02:35.643]                           invokeRestart("muffleWarning")
[17:02:35.643]                       }
[17:02:35.643]                       else if (inherits(cond, "condition")) {
[17:02:35.643]                         if (!is.null(pattern)) {
[17:02:35.643]                           computeRestarts <- base::computeRestarts
[17:02:35.643]                           grepl <- base::grepl
[17:02:35.643]                           restarts <- computeRestarts(cond)
[17:02:35.643]                           for (restart in restarts) {
[17:02:35.643]                             name <- restart$name
[17:02:35.643]                             if (is.null(name)) 
[17:02:35.643]                               next
[17:02:35.643]                             if (!grepl(pattern, name)) 
[17:02:35.643]                               next
[17:02:35.643]                             invokeRestart(restart)
[17:02:35.643]                             muffled <- TRUE
[17:02:35.643]                             break
[17:02:35.643]                           }
[17:02:35.643]                         }
[17:02:35.643]                       }
[17:02:35.643]                       invisible(muffled)
[17:02:35.643]                     }
[17:02:35.643]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.643]                   }
[17:02:35.643]                 }
[17:02:35.643]             }
[17:02:35.643]         }))
[17:02:35.643]     }, error = function(ex) {
[17:02:35.643]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.643]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.643]                 ...future.rng), started = ...future.startTime, 
[17:02:35.643]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.643]             version = "1.8"), class = "FutureResult")
[17:02:35.643]     }, finally = {
[17:02:35.643]         if (!identical(...future.workdir, getwd())) 
[17:02:35.643]             setwd(...future.workdir)
[17:02:35.643]         {
[17:02:35.643]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.643]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.643]             }
[17:02:35.643]             base::options(...future.oldOptions)
[17:02:35.643]             if (.Platform$OS.type == "windows") {
[17:02:35.643]                 old_names <- names(...future.oldEnvVars)
[17:02:35.643]                 envs <- base::Sys.getenv()
[17:02:35.643]                 names <- names(envs)
[17:02:35.643]                 common <- intersect(names, old_names)
[17:02:35.643]                 added <- setdiff(names, old_names)
[17:02:35.643]                 removed <- setdiff(old_names, names)
[17:02:35.643]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.643]                   envs[common]]
[17:02:35.643]                 NAMES <- toupper(changed)
[17:02:35.643]                 args <- list()
[17:02:35.643]                 for (kk in seq_along(NAMES)) {
[17:02:35.643]                   name <- changed[[kk]]
[17:02:35.643]                   NAME <- NAMES[[kk]]
[17:02:35.643]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.643]                     next
[17:02:35.643]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.643]                 }
[17:02:35.643]                 NAMES <- toupper(added)
[17:02:35.643]                 for (kk in seq_along(NAMES)) {
[17:02:35.643]                   name <- added[[kk]]
[17:02:35.643]                   NAME <- NAMES[[kk]]
[17:02:35.643]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.643]                     next
[17:02:35.643]                   args[[name]] <- ""
[17:02:35.643]                 }
[17:02:35.643]                 NAMES <- toupper(removed)
[17:02:35.643]                 for (kk in seq_along(NAMES)) {
[17:02:35.643]                   name <- removed[[kk]]
[17:02:35.643]                   NAME <- NAMES[[kk]]
[17:02:35.643]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.643]                     next
[17:02:35.643]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.643]                 }
[17:02:35.643]                 if (length(args) > 0) 
[17:02:35.643]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.643]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.643]             }
[17:02:35.643]             else {
[17:02:35.643]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.643]             }
[17:02:35.643]             {
[17:02:35.643]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.643]                   0L) {
[17:02:35.643]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.643]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.643]                   base::options(opts)
[17:02:35.643]                 }
[17:02:35.643]                 {
[17:02:35.643]                   {
[17:02:35.643]                     NULL
[17:02:35.643]                     RNGkind("Mersenne-Twister")
[17:02:35.643]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.643]                       inherits = FALSE)
[17:02:35.643]                   }
[17:02:35.643]                   options(future.plan = NULL)
[17:02:35.643]                   if (is.na(NA_character_)) 
[17:02:35.643]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.643]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.643]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.643]                     .init = FALSE)
[17:02:35.643]                 }
[17:02:35.643]             }
[17:02:35.643]         }
[17:02:35.643]     })
[17:02:35.643]     if (TRUE) {
[17:02:35.643]         base::sink(type = "output", split = FALSE)
[17:02:35.643]         if (TRUE) {
[17:02:35.643]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.643]         }
[17:02:35.643]         else {
[17:02:35.643]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.643]         }
[17:02:35.643]         base::close(...future.stdout)
[17:02:35.643]         ...future.stdout <- NULL
[17:02:35.643]     }
[17:02:35.643]     ...future.result$conditions <- ...future.conditions
[17:02:35.643]     ...future.result$finished <- base::Sys.time()
[17:02:35.643]     ...future.result
[17:02:35.643] }
[17:02:35.645] plan(): Setting new future strategy stack:
[17:02:35.645] List of future strategies:
[17:02:35.645] 1. sequential:
[17:02:35.645]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.645]    - tweaked: FALSE
[17:02:35.645]    - call: NULL
[17:02:35.646] plan(): nbrOfWorkers() = 1
[17:02:35.647] plan(): Setting new future strategy stack:
[17:02:35.647] List of future strategies:
[17:02:35.647] 1. sequential:
[17:02:35.647]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.647]    - tweaked: FALSE
[17:02:35.647]    - call: plan(strategy)
[17:02:35.648] plan(): nbrOfWorkers() = 1
[17:02:35.648] SequentialFuture started (and completed)
[17:02:35.648] - Launch lazy future ... done
[17:02:35.648] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = dist ~ speed + speed^2, data = cars)

Coefficients:
(Intercept)        speed  
    -17.579        3.932  

- Globals - lm(<formula #4 (‘d’)>, data = cars) ...

Call:
lm(formula = dist ~ speed + I(speed^2), data = cars)

Coefficients:
(Intercept)        speed   I(speed^2)  
    2.47014      0.91329      0.09996  

[17:02:35.653] getGlobalsAndPackages() ...
[17:02:35.653] Searching for globals...
[17:02:35.655] - globals found: [9] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘speed’, ‘I’, ‘^’, ‘~’, ‘cars’
[17:02:35.655] Searching for globals ... DONE
[17:02:35.655] Resolving globals: FALSE
[17:02:35.655] 
[17:02:35.656] - packages: [2] ‘stats’, ‘datasets’
[17:02:35.656] getGlobalsAndPackages() ... DONE
[17:02:35.656] run() for ‘Future’ ...
[17:02:35.656] - state: ‘created’
[17:02:35.656] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.656] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.656] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.657]   - Field: ‘label’
[17:02:35.657]   - Field: ‘local’
[17:02:35.657]   - Field: ‘owner’
[17:02:35.657]   - Field: ‘envir’
[17:02:35.657]   - Field: ‘packages’
[17:02:35.657]   - Field: ‘gc’
[17:02:35.657]   - Field: ‘conditions’
[17:02:35.657]   - Field: ‘expr’
[17:02:35.657]   - Field: ‘uuid’
[17:02:35.657]   - Field: ‘seed’
[17:02:35.657]   - Field: ‘version’
[17:02:35.658]   - Field: ‘result’
[17:02:35.658]   - Field: ‘asynchronous’
[17:02:35.658]   - Field: ‘calls’
[17:02:35.658]   - Field: ‘globals’
[17:02:35.658]   - Field: ‘stdout’
[17:02:35.658]   - Field: ‘earlySignal’
[17:02:35.658]   - Field: ‘lazy’
[17:02:35.658]   - Field: ‘state’
[17:02:35.658] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.658] - Launch lazy future ...
[17:02:35.659] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:35.659] Packages needed by future strategies (n = 0): <none>
[17:02:35.659] {
[17:02:35.659]     {
[17:02:35.659]         {
[17:02:35.659]             ...future.startTime <- base::Sys.time()
[17:02:35.659]             {
[17:02:35.659]                 {
[17:02:35.659]                   {
[17:02:35.659]                     {
[17:02:35.659]                       base::local({
[17:02:35.659]                         has_future <- base::requireNamespace("future", 
[17:02:35.659]                           quietly = TRUE)
[17:02:35.659]                         if (has_future) {
[17:02:35.659]                           ns <- base::getNamespace("future")
[17:02:35.659]                           version <- ns[[".package"]][["version"]]
[17:02:35.659]                           if (is.null(version)) 
[17:02:35.659]                             version <- utils::packageVersion("future")
[17:02:35.659]                         }
[17:02:35.659]                         else {
[17:02:35.659]                           version <- NULL
[17:02:35.659]                         }
[17:02:35.659]                         if (!has_future || version < "1.8.0") {
[17:02:35.659]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.659]                             "", base::R.version$version.string), 
[17:02:35.659]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.659]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.659]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.659]                               "release", "version")], collapse = " "), 
[17:02:35.659]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.659]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.659]                             info)
[17:02:35.659]                           info <- base::paste(info, collapse = "; ")
[17:02:35.659]                           if (!has_future) {
[17:02:35.659]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.659]                               info)
[17:02:35.659]                           }
[17:02:35.659]                           else {
[17:02:35.659]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.659]                               info, version)
[17:02:35.659]                           }
[17:02:35.659]                           base::stop(msg)
[17:02:35.659]                         }
[17:02:35.659]                       })
[17:02:35.659]                     }
[17:02:35.659]                     base::local({
[17:02:35.659]                       for (pkg in c("stats", "datasets")) {
[17:02:35.659]                         base::loadNamespace(pkg)
[17:02:35.659]                         base::library(pkg, character.only = TRUE)
[17:02:35.659]                       }
[17:02:35.659]                     })
[17:02:35.659]                   }
[17:02:35.659]                   ...future.strategy.old <- future::plan("list")
[17:02:35.659]                   options(future.plan = NULL)
[17:02:35.659]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.659]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.659]                 }
[17:02:35.659]                 ...future.workdir <- getwd()
[17:02:35.659]             }
[17:02:35.659]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.659]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.659]         }
[17:02:35.659]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.659]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.659]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.659]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.659]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.659]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.659]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.659]             base::names(...future.oldOptions))
[17:02:35.659]     }
[17:02:35.659]     if (FALSE) {
[17:02:35.659]     }
[17:02:35.659]     else {
[17:02:35.659]         if (TRUE) {
[17:02:35.659]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.659]                 open = "w")
[17:02:35.659]         }
[17:02:35.659]         else {
[17:02:35.659]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.659]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.659]         }
[17:02:35.659]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.659]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.659]             base::sink(type = "output", split = FALSE)
[17:02:35.659]             base::close(...future.stdout)
[17:02:35.659]         }, add = TRUE)
[17:02:35.659]     }
[17:02:35.659]     ...future.frame <- base::sys.nframe()
[17:02:35.659]     ...future.conditions <- base::list()
[17:02:35.659]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.659]     if (FALSE) {
[17:02:35.659]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.659]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.659]     }
[17:02:35.659]     ...future.result <- base::tryCatch({
[17:02:35.659]         base::withCallingHandlers({
[17:02:35.659]             ...future.value <- base::withVisible(base::local({
[17:02:35.659]                 lm(dist ~ speed + I(speed^2), data = cars)
[17:02:35.659]             }))
[17:02:35.659]             future::FutureResult(value = ...future.value$value, 
[17:02:35.659]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.659]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.659]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.659]                     ...future.globalenv.names))
[17:02:35.659]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.659]         }, condition = base::local({
[17:02:35.659]             c <- base::c
[17:02:35.659]             inherits <- base::inherits
[17:02:35.659]             invokeRestart <- base::invokeRestart
[17:02:35.659]             length <- base::length
[17:02:35.659]             list <- base::list
[17:02:35.659]             seq.int <- base::seq.int
[17:02:35.659]             signalCondition <- base::signalCondition
[17:02:35.659]             sys.calls <- base::sys.calls
[17:02:35.659]             `[[` <- base::`[[`
[17:02:35.659]             `+` <- base::`+`
[17:02:35.659]             `<<-` <- base::`<<-`
[17:02:35.659]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.659]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.659]                   3L)]
[17:02:35.659]             }
[17:02:35.659]             function(cond) {
[17:02:35.659]                 is_error <- inherits(cond, "error")
[17:02:35.659]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.659]                   NULL)
[17:02:35.659]                 if (is_error) {
[17:02:35.659]                   sessionInformation <- function() {
[17:02:35.659]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.659]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.659]                       search = base::search(), system = base::Sys.info())
[17:02:35.659]                   }
[17:02:35.659]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.659]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.659]                     cond$call), session = sessionInformation(), 
[17:02:35.659]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.659]                   signalCondition(cond)
[17:02:35.659]                 }
[17:02:35.659]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.659]                 "immediateCondition"))) {
[17:02:35.659]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.659]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.659]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.659]                   if (TRUE && !signal) {
[17:02:35.659]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.659]                     {
[17:02:35.659]                       inherits <- base::inherits
[17:02:35.659]                       invokeRestart <- base::invokeRestart
[17:02:35.659]                       is.null <- base::is.null
[17:02:35.659]                       muffled <- FALSE
[17:02:35.659]                       if (inherits(cond, "message")) {
[17:02:35.659]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.659]                         if (muffled) 
[17:02:35.659]                           invokeRestart("muffleMessage")
[17:02:35.659]                       }
[17:02:35.659]                       else if (inherits(cond, "warning")) {
[17:02:35.659]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.659]                         if (muffled) 
[17:02:35.659]                           invokeRestart("muffleWarning")
[17:02:35.659]                       }
[17:02:35.659]                       else if (inherits(cond, "condition")) {
[17:02:35.659]                         if (!is.null(pattern)) {
[17:02:35.659]                           computeRestarts <- base::computeRestarts
[17:02:35.659]                           grepl <- base::grepl
[17:02:35.659]                           restarts <- computeRestarts(cond)
[17:02:35.659]                           for (restart in restarts) {
[17:02:35.659]                             name <- restart$name
[17:02:35.659]                             if (is.null(name)) 
[17:02:35.659]                               next
[17:02:35.659]                             if (!grepl(pattern, name)) 
[17:02:35.659]                               next
[17:02:35.659]                             invokeRestart(restart)
[17:02:35.659]                             muffled <- TRUE
[17:02:35.659]                             break
[17:02:35.659]                           }
[17:02:35.659]                         }
[17:02:35.659]                       }
[17:02:35.659]                       invisible(muffled)
[17:02:35.659]                     }
[17:02:35.659]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.659]                   }
[17:02:35.659]                 }
[17:02:35.659]                 else {
[17:02:35.659]                   if (TRUE) {
[17:02:35.659]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.659]                     {
[17:02:35.659]                       inherits <- base::inherits
[17:02:35.659]                       invokeRestart <- base::invokeRestart
[17:02:35.659]                       is.null <- base::is.null
[17:02:35.659]                       muffled <- FALSE
[17:02:35.659]                       if (inherits(cond, "message")) {
[17:02:35.659]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.659]                         if (muffled) 
[17:02:35.659]                           invokeRestart("muffleMessage")
[17:02:35.659]                       }
[17:02:35.659]                       else if (inherits(cond, "warning")) {
[17:02:35.659]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.659]                         if (muffled) 
[17:02:35.659]                           invokeRestart("muffleWarning")
[17:02:35.659]                       }
[17:02:35.659]                       else if (inherits(cond, "condition")) {
[17:02:35.659]                         if (!is.null(pattern)) {
[17:02:35.659]                           computeRestarts <- base::computeRestarts
[17:02:35.659]                           grepl <- base::grepl
[17:02:35.659]                           restarts <- computeRestarts(cond)
[17:02:35.659]                           for (restart in restarts) {
[17:02:35.659]                             name <- restart$name
[17:02:35.659]                             if (is.null(name)) 
[17:02:35.659]                               next
[17:02:35.659]                             if (!grepl(pattern, name)) 
[17:02:35.659]                               next
[17:02:35.659]                             invokeRestart(restart)
[17:02:35.659]                             muffled <- TRUE
[17:02:35.659]                             break
[17:02:35.659]                           }
[17:02:35.659]                         }
[17:02:35.659]                       }
[17:02:35.659]                       invisible(muffled)
[17:02:35.659]                     }
[17:02:35.659]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.659]                   }
[17:02:35.659]                 }
[17:02:35.659]             }
[17:02:35.659]         }))
[17:02:35.659]     }, error = function(ex) {
[17:02:35.659]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.659]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.659]                 ...future.rng), started = ...future.startTime, 
[17:02:35.659]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.659]             version = "1.8"), class = "FutureResult")
[17:02:35.659]     }, finally = {
[17:02:35.659]         if (!identical(...future.workdir, getwd())) 
[17:02:35.659]             setwd(...future.workdir)
[17:02:35.659]         {
[17:02:35.659]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.659]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.659]             }
[17:02:35.659]             base::options(...future.oldOptions)
[17:02:35.659]             if (.Platform$OS.type == "windows") {
[17:02:35.659]                 old_names <- names(...future.oldEnvVars)
[17:02:35.659]                 envs <- base::Sys.getenv()
[17:02:35.659]                 names <- names(envs)
[17:02:35.659]                 common <- intersect(names, old_names)
[17:02:35.659]                 added <- setdiff(names, old_names)
[17:02:35.659]                 removed <- setdiff(old_names, names)
[17:02:35.659]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.659]                   envs[common]]
[17:02:35.659]                 NAMES <- toupper(changed)
[17:02:35.659]                 args <- list()
[17:02:35.659]                 for (kk in seq_along(NAMES)) {
[17:02:35.659]                   name <- changed[[kk]]
[17:02:35.659]                   NAME <- NAMES[[kk]]
[17:02:35.659]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.659]                     next
[17:02:35.659]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.659]                 }
[17:02:35.659]                 NAMES <- toupper(added)
[17:02:35.659]                 for (kk in seq_along(NAMES)) {
[17:02:35.659]                   name <- added[[kk]]
[17:02:35.659]                   NAME <- NAMES[[kk]]
[17:02:35.659]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.659]                     next
[17:02:35.659]                   args[[name]] <- ""
[17:02:35.659]                 }
[17:02:35.659]                 NAMES <- toupper(removed)
[17:02:35.659]                 for (kk in seq_along(NAMES)) {
[17:02:35.659]                   name <- removed[[kk]]
[17:02:35.659]                   NAME <- NAMES[[kk]]
[17:02:35.659]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.659]                     next
[17:02:35.659]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.659]                 }
[17:02:35.659]                 if (length(args) > 0) 
[17:02:35.659]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.659]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.659]             }
[17:02:35.659]             else {
[17:02:35.659]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.659]             }
[17:02:35.659]             {
[17:02:35.659]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.659]                   0L) {
[17:02:35.659]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.659]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.659]                   base::options(opts)
[17:02:35.659]                 }
[17:02:35.659]                 {
[17:02:35.659]                   {
[17:02:35.659]                     NULL
[17:02:35.659]                     RNGkind("Mersenne-Twister")
[17:02:35.659]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.659]                       inherits = FALSE)
[17:02:35.659]                   }
[17:02:35.659]                   options(future.plan = NULL)
[17:02:35.659]                   if (is.na(NA_character_)) 
[17:02:35.659]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.659]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.659]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.659]                     .init = FALSE)
[17:02:35.659]                 }
[17:02:35.659]             }
[17:02:35.659]         }
[17:02:35.659]     })
[17:02:35.659]     if (TRUE) {
[17:02:35.659]         base::sink(type = "output", split = FALSE)
[17:02:35.659]         if (TRUE) {
[17:02:35.659]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.659]         }
[17:02:35.659]         else {
[17:02:35.659]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.659]         }
[17:02:35.659]         base::close(...future.stdout)
[17:02:35.659]         ...future.stdout <- NULL
[17:02:35.659]     }
[17:02:35.659]     ...future.result$conditions <- ...future.conditions
[17:02:35.659]     ...future.result$finished <- base::Sys.time()
[17:02:35.659]     ...future.result
[17:02:35.659] }
[17:02:35.661] plan(): Setting new future strategy stack:
[17:02:35.661] List of future strategies:
[17:02:35.661] 1. sequential:
[17:02:35.661]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.661]    - tweaked: FALSE
[17:02:35.661]    - call: NULL
[17:02:35.662] plan(): nbrOfWorkers() = 1
[17:02:35.663] plan(): Setting new future strategy stack:
[17:02:35.663] List of future strategies:
[17:02:35.663] 1. sequential:
[17:02:35.663]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.663]    - tweaked: FALSE
[17:02:35.663]    - call: plan(strategy)
[17:02:35.664] plan(): nbrOfWorkers() = 1
[17:02:35.664] SequentialFuture started (and completed)
[17:02:35.664] - Launch lazy future ... done
[17:02:35.664] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = dist ~ speed + I(speed^2), data = cars)

Coefficients:
(Intercept)        speed   I(speed^2)  
    2.47014      0.91329      0.09996  

- Globals - lm(<formula #5 (‘e’)>, data = cars) ...

Call:
lm(formula = dist ~ poly(speed, 2), data = cars)

Coefficients:
    (Intercept)  poly(speed, 2)1  poly(speed, 2)2  
          42.98           145.55            23.00  

[17:02:35.667] getGlobalsAndPackages() ...
[17:02:35.668] Searching for globals...
[17:02:35.669] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘poly’, ‘speed’, ‘~’, ‘cars’
[17:02:35.669] Searching for globals ... DONE
[17:02:35.669] Resolving globals: FALSE
[17:02:35.670] 
[17:02:35.670] - packages: [2] ‘stats’, ‘datasets’
[17:02:35.670] getGlobalsAndPackages() ... DONE
[17:02:35.670] run() for ‘Future’ ...
[17:02:35.670] - state: ‘created’
[17:02:35.670] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.671] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.671] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.671]   - Field: ‘label’
[17:02:35.671]   - Field: ‘local’
[17:02:35.671]   - Field: ‘owner’
[17:02:35.671]   - Field: ‘envir’
[17:02:35.671]   - Field: ‘packages’
[17:02:35.671]   - Field: ‘gc’
[17:02:35.671]   - Field: ‘conditions’
[17:02:35.671]   - Field: ‘expr’
[17:02:35.672]   - Field: ‘uuid’
[17:02:35.672]   - Field: ‘seed’
[17:02:35.672]   - Field: ‘version’
[17:02:35.672]   - Field: ‘result’
[17:02:35.672]   - Field: ‘asynchronous’
[17:02:35.672]   - Field: ‘calls’
[17:02:35.672]   - Field: ‘globals’
[17:02:35.672]   - Field: ‘stdout’
[17:02:35.672]   - Field: ‘earlySignal’
[17:02:35.672]   - Field: ‘lazy’
[17:02:35.672]   - Field: ‘state’
[17:02:35.673] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.673] - Launch lazy future ...
[17:02:35.673] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:35.673] Packages needed by future strategies (n = 0): <none>
[17:02:35.673] {
[17:02:35.673]     {
[17:02:35.673]         {
[17:02:35.673]             ...future.startTime <- base::Sys.time()
[17:02:35.673]             {
[17:02:35.673]                 {
[17:02:35.673]                   {
[17:02:35.673]                     {
[17:02:35.673]                       base::local({
[17:02:35.673]                         has_future <- base::requireNamespace("future", 
[17:02:35.673]                           quietly = TRUE)
[17:02:35.673]                         if (has_future) {
[17:02:35.673]                           ns <- base::getNamespace("future")
[17:02:35.673]                           version <- ns[[".package"]][["version"]]
[17:02:35.673]                           if (is.null(version)) 
[17:02:35.673]                             version <- utils::packageVersion("future")
[17:02:35.673]                         }
[17:02:35.673]                         else {
[17:02:35.673]                           version <- NULL
[17:02:35.673]                         }
[17:02:35.673]                         if (!has_future || version < "1.8.0") {
[17:02:35.673]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.673]                             "", base::R.version$version.string), 
[17:02:35.673]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:35.673]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.673]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.673]                               "release", "version")], collapse = " "), 
[17:02:35.673]                             hostname = base::Sys.info()[["nodename"]])
[17:02:35.673]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.673]                             info)
[17:02:35.673]                           info <- base::paste(info, collapse = "; ")
[17:02:35.673]                           if (!has_future) {
[17:02:35.673]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.673]                               info)
[17:02:35.673]                           }
[17:02:35.673]                           else {
[17:02:35.673]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.673]                               info, version)
[17:02:35.673]                           }
[17:02:35.673]                           base::stop(msg)
[17:02:35.673]                         }
[17:02:35.673]                       })
[17:02:35.673]                     }
[17:02:35.673]                     base::local({
[17:02:35.673]                       for (pkg in c("stats", "datasets")) {
[17:02:35.673]                         base::loadNamespace(pkg)
[17:02:35.673]                         base::library(pkg, character.only = TRUE)
[17:02:35.673]                       }
[17:02:35.673]                     })
[17:02:35.673]                   }
[17:02:35.673]                   ...future.strategy.old <- future::plan("list")
[17:02:35.673]                   options(future.plan = NULL)
[17:02:35.673]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.673]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.673]                 }
[17:02:35.673]                 ...future.workdir <- getwd()
[17:02:35.673]             }
[17:02:35.673]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.673]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.673]         }
[17:02:35.673]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.673]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.673]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.673]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.673]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.673]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.673]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.673]             base::names(...future.oldOptions))
[17:02:35.673]     }
[17:02:35.673]     if (FALSE) {
[17:02:35.673]     }
[17:02:35.673]     else {
[17:02:35.673]         if (TRUE) {
[17:02:35.673]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.673]                 open = "w")
[17:02:35.673]         }
[17:02:35.673]         else {
[17:02:35.673]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.673]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.673]         }
[17:02:35.673]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.673]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.673]             base::sink(type = "output", split = FALSE)
[17:02:35.673]             base::close(...future.stdout)
[17:02:35.673]         }, add = TRUE)
[17:02:35.673]     }
[17:02:35.673]     ...future.frame <- base::sys.nframe()
[17:02:35.673]     ...future.conditions <- base::list()
[17:02:35.673]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.673]     if (FALSE) {
[17:02:35.673]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.673]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.673]     }
[17:02:35.673]     ...future.result <- base::tryCatch({
[17:02:35.673]         base::withCallingHandlers({
[17:02:35.673]             ...future.value <- base::withVisible(base::local({
[17:02:35.673]                 lm(dist ~ poly(speed, 2), data = cars)
[17:02:35.673]             }))
[17:02:35.673]             future::FutureResult(value = ...future.value$value, 
[17:02:35.673]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.673]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.673]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.673]                     ...future.globalenv.names))
[17:02:35.673]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.673]         }, condition = base::local({
[17:02:35.673]             c <- base::c
[17:02:35.673]             inherits <- base::inherits
[17:02:35.673]             invokeRestart <- base::invokeRestart
[17:02:35.673]             length <- base::length
[17:02:35.673]             list <- base::list
[17:02:35.673]             seq.int <- base::seq.int
[17:02:35.673]             signalCondition <- base::signalCondition
[17:02:35.673]             sys.calls <- base::sys.calls
[17:02:35.673]             `[[` <- base::`[[`
[17:02:35.673]             `+` <- base::`+`
[17:02:35.673]             `<<-` <- base::`<<-`
[17:02:35.673]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.673]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.673]                   3L)]
[17:02:35.673]             }
[17:02:35.673]             function(cond) {
[17:02:35.673]                 is_error <- inherits(cond, "error")
[17:02:35.673]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.673]                   NULL)
[17:02:35.673]                 if (is_error) {
[17:02:35.673]                   sessionInformation <- function() {
[17:02:35.673]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.673]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.673]                       search = base::search(), system = base::Sys.info())
[17:02:35.673]                   }
[17:02:35.673]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.673]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.673]                     cond$call), session = sessionInformation(), 
[17:02:35.673]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.673]                   signalCondition(cond)
[17:02:35.673]                 }
[17:02:35.673]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.673]                 "immediateCondition"))) {
[17:02:35.673]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.673]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.673]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.673]                   if (TRUE && !signal) {
[17:02:35.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.673]                     {
[17:02:35.673]                       inherits <- base::inherits
[17:02:35.673]                       invokeRestart <- base::invokeRestart
[17:02:35.673]                       is.null <- base::is.null
[17:02:35.673]                       muffled <- FALSE
[17:02:35.673]                       if (inherits(cond, "message")) {
[17:02:35.673]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.673]                         if (muffled) 
[17:02:35.673]                           invokeRestart("muffleMessage")
[17:02:35.673]                       }
[17:02:35.673]                       else if (inherits(cond, "warning")) {
[17:02:35.673]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.673]                         if (muffled) 
[17:02:35.673]                           invokeRestart("muffleWarning")
[17:02:35.673]                       }
[17:02:35.673]                       else if (inherits(cond, "condition")) {
[17:02:35.673]                         if (!is.null(pattern)) {
[17:02:35.673]                           computeRestarts <- base::computeRestarts
[17:02:35.673]                           grepl <- base::grepl
[17:02:35.673]                           restarts <- computeRestarts(cond)
[17:02:35.673]                           for (restart in restarts) {
[17:02:35.673]                             name <- restart$name
[17:02:35.673]                             if (is.null(name)) 
[17:02:35.673]                               next
[17:02:35.673]                             if (!grepl(pattern, name)) 
[17:02:35.673]                               next
[17:02:35.673]                             invokeRestart(restart)
[17:02:35.673]                             muffled <- TRUE
[17:02:35.673]                             break
[17:02:35.673]                           }
[17:02:35.673]                         }
[17:02:35.673]                       }
[17:02:35.673]                       invisible(muffled)
[17:02:35.673]                     }
[17:02:35.673]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.673]                   }
[17:02:35.673]                 }
[17:02:35.673]                 else {
[17:02:35.673]                   if (TRUE) {
[17:02:35.673]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.673]                     {
[17:02:35.673]                       inherits <- base::inherits
[17:02:35.673]                       invokeRestart <- base::invokeRestart
[17:02:35.673]                       is.null <- base::is.null
[17:02:35.673]                       muffled <- FALSE
[17:02:35.673]                       if (inherits(cond, "message")) {
[17:02:35.673]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.673]                         if (muffled) 
[17:02:35.673]                           invokeRestart("muffleMessage")
[17:02:35.673]                       }
[17:02:35.673]                       else if (inherits(cond, "warning")) {
[17:02:35.673]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.673]                         if (muffled) 
[17:02:35.673]                           invokeRestart("muffleWarning")
[17:02:35.673]                       }
[17:02:35.673]                       else if (inherits(cond, "condition")) {
[17:02:35.673]                         if (!is.null(pattern)) {
[17:02:35.673]                           computeRestarts <- base::computeRestarts
[17:02:35.673]                           grepl <- base::grepl
[17:02:35.673]                           restarts <- computeRestarts(cond)
[17:02:35.673]                           for (restart in restarts) {
[17:02:35.673]                             name <- restart$name
[17:02:35.673]                             if (is.null(name)) 
[17:02:35.673]                               next
[17:02:35.673]                             if (!grepl(pattern, name)) 
[17:02:35.673]                               next
[17:02:35.673]                             invokeRestart(restart)
[17:02:35.673]                             muffled <- TRUE
[17:02:35.673]                             break
[17:02:35.673]                           }
[17:02:35.673]                         }
[17:02:35.673]                       }
[17:02:35.673]                       invisible(muffled)
[17:02:35.673]                     }
[17:02:35.673]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.673]                   }
[17:02:35.673]                 }
[17:02:35.673]             }
[17:02:35.673]         }))
[17:02:35.673]     }, error = function(ex) {
[17:02:35.673]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.673]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.673]                 ...future.rng), started = ...future.startTime, 
[17:02:35.673]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.673]             version = "1.8"), class = "FutureResult")
[17:02:35.673]     }, finally = {
[17:02:35.673]         if (!identical(...future.workdir, getwd())) 
[17:02:35.673]             setwd(...future.workdir)
[17:02:35.673]         {
[17:02:35.673]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.673]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.673]             }
[17:02:35.673]             base::options(...future.oldOptions)
[17:02:35.673]             if (.Platform$OS.type == "windows") {
[17:02:35.673]                 old_names <- names(...future.oldEnvVars)
[17:02:35.673]                 envs <- base::Sys.getenv()
[17:02:35.673]                 names <- names(envs)
[17:02:35.673]                 common <- intersect(names, old_names)
[17:02:35.673]                 added <- setdiff(names, old_names)
[17:02:35.673]                 removed <- setdiff(old_names, names)
[17:02:35.673]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.673]                   envs[common]]
[17:02:35.673]                 NAMES <- toupper(changed)
[17:02:35.673]                 args <- list()
[17:02:35.673]                 for (kk in seq_along(NAMES)) {
[17:02:35.673]                   name <- changed[[kk]]
[17:02:35.673]                   NAME <- NAMES[[kk]]
[17:02:35.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.673]                     next
[17:02:35.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.673]                 }
[17:02:35.673]                 NAMES <- toupper(added)
[17:02:35.673]                 for (kk in seq_along(NAMES)) {
[17:02:35.673]                   name <- added[[kk]]
[17:02:35.673]                   NAME <- NAMES[[kk]]
[17:02:35.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.673]                     next
[17:02:35.673]                   args[[name]] <- ""
[17:02:35.673]                 }
[17:02:35.673]                 NAMES <- toupper(removed)
[17:02:35.673]                 for (kk in seq_along(NAMES)) {
[17:02:35.673]                   name <- removed[[kk]]
[17:02:35.673]                   NAME <- NAMES[[kk]]
[17:02:35.673]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.673]                     next
[17:02:35.673]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.673]                 }
[17:02:35.673]                 if (length(args) > 0) 
[17:02:35.673]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.673]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.673]             }
[17:02:35.673]             else {
[17:02:35.673]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.673]             }
[17:02:35.673]             {
[17:02:35.673]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.673]                   0L) {
[17:02:35.673]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.673]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.673]                   base::options(opts)
[17:02:35.673]                 }
[17:02:35.673]                 {
[17:02:35.673]                   {
[17:02:35.673]                     NULL
[17:02:35.673]                     RNGkind("Mersenne-Twister")
[17:02:35.673]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.673]                       inherits = FALSE)
[17:02:35.673]                   }
[17:02:35.673]                   options(future.plan = NULL)
[17:02:35.673]                   if (is.na(NA_character_)) 
[17:02:35.673]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.673]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.673]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.673]                     .init = FALSE)
[17:02:35.673]                 }
[17:02:35.673]             }
[17:02:35.673]         }
[17:02:35.673]     })
[17:02:35.673]     if (TRUE) {
[17:02:35.673]         base::sink(type = "output", split = FALSE)
[17:02:35.673]         if (TRUE) {
[17:02:35.673]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.673]         }
[17:02:35.673]         else {
[17:02:35.673]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.673]         }
[17:02:35.673]         base::close(...future.stdout)
[17:02:35.673]         ...future.stdout <- NULL
[17:02:35.673]     }
[17:02:35.673]     ...future.result$conditions <- ...future.conditions
[17:02:35.673]     ...future.result$finished <- base::Sys.time()
[17:02:35.673]     ...future.result
[17:02:35.673] }
[17:02:35.675] plan(): Setting new future strategy stack:
[17:02:35.675] List of future strategies:
[17:02:35.675] 1. sequential:
[17:02:35.675]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.675]    - tweaked: FALSE
[17:02:35.675]    - call: NULL
[17:02:35.676] plan(): nbrOfWorkers() = 1
[17:02:35.679] plan(): Setting new future strategy stack:
[17:02:35.680] List of future strategies:
[17:02:35.680] 1. sequential:
[17:02:35.680]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.680]    - tweaked: FALSE
[17:02:35.680]    - call: plan(strategy)
[17:02:35.680] plan(): nbrOfWorkers() = 1
[17:02:35.680] SequentialFuture started (and completed)
[17:02:35.680] - Launch lazy future ... done
[17:02:35.680] run() for ‘SequentialFuture’ ... done

Call:
lm(formula = dist ~ poly(speed, 2), data = cars)

Coefficients:
    (Intercept)  poly(speed, 2)1  poly(speed, 2)2  
          42.98           145.55            23.00  

- Globals - map(x, ~ expr) ...
[17:02:35.682] getGlobalsAndPackages() ...
[17:02:35.682] Searching for globals...
[17:02:35.687] - globals found: [16] ‘{’, ‘outer_function’, ‘map’, ‘:’, ‘~’, ‘inner_function’, ‘.x’, ‘if’, ‘inherits’, ‘<-’, ‘[[’, ‘-’, ‘eval’, ‘bquote’, ‘lapply’, ‘+’
[17:02:35.687] Searching for globals ... DONE
[17:02:35.687] Resolving globals: FALSE
[17:02:35.688] The total size of the 3 globals is 7.52 KiB (7704 bytes)
[17:02:35.689] The total size of the 3 globals exported for future expression (‘{; outer_function(1L); }’) is 7.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘map’ (4.43 KiB of class ‘function’), ‘inner_function’ (1.78 KiB of class ‘function’) and ‘outer_function’ (1.31 KiB of class ‘function’)
[17:02:35.689] - globals: [3] ‘outer_function’, ‘map’, ‘inner_function’
[17:02:35.689] 
[17:02:35.689] getGlobalsAndPackages() ... DONE
[17:02:35.689] run() for ‘Future’ ...
[17:02:35.689] - state: ‘created’
[17:02:35.689] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.690] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.690] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.690]   - Field: ‘label’
[17:02:35.690]   - Field: ‘local’
[17:02:35.690]   - Field: ‘owner’
[17:02:35.690]   - Field: ‘envir’
[17:02:35.690]   - Field: ‘packages’
[17:02:35.690]   - Field: ‘gc’
[17:02:35.690]   - Field: ‘conditions’
[17:02:35.690]   - Field: ‘expr’
[17:02:35.691]   - Field: ‘uuid’
[17:02:35.691]   - Field: ‘seed’
[17:02:35.691]   - Field: ‘version’
[17:02:35.691]   - Field: ‘result’
[17:02:35.691]   - Field: ‘asynchronous’
[17:02:35.691]   - Field: ‘calls’
[17:02:35.691]   - Field: ‘globals’
[17:02:35.691]   - Field: ‘stdout’
[17:02:35.691]   - Field: ‘earlySignal’
[17:02:35.691]   - Field: ‘lazy’
[17:02:35.691]   - Field: ‘state’
[17:02:35.692] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.692] - Launch lazy future ...
[17:02:35.692] Packages needed by the future expression (n = 0): <none>
[17:02:35.692] Packages needed by future strategies (n = 0): <none>
[17:02:35.692] {
[17:02:35.692]     {
[17:02:35.692]         {
[17:02:35.692]             ...future.startTime <- base::Sys.time()
[17:02:35.692]             {
[17:02:35.692]                 {
[17:02:35.692]                   {
[17:02:35.692]                     base::local({
[17:02:35.692]                       has_future <- base::requireNamespace("future", 
[17:02:35.692]                         quietly = TRUE)
[17:02:35.692]                       if (has_future) {
[17:02:35.692]                         ns <- base::getNamespace("future")
[17:02:35.692]                         version <- ns[[".package"]][["version"]]
[17:02:35.692]                         if (is.null(version)) 
[17:02:35.692]                           version <- utils::packageVersion("future")
[17:02:35.692]                       }
[17:02:35.692]                       else {
[17:02:35.692]                         version <- NULL
[17:02:35.692]                       }
[17:02:35.692]                       if (!has_future || version < "1.8.0") {
[17:02:35.692]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.692]                           "", base::R.version$version.string), 
[17:02:35.692]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:35.692]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.692]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.692]                             "release", "version")], collapse = " "), 
[17:02:35.692]                           hostname = base::Sys.info()[["nodename"]])
[17:02:35.692]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.692]                           info)
[17:02:35.692]                         info <- base::paste(info, collapse = "; ")
[17:02:35.692]                         if (!has_future) {
[17:02:35.692]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.692]                             info)
[17:02:35.692]                         }
[17:02:35.692]                         else {
[17:02:35.692]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.692]                             info, version)
[17:02:35.692]                         }
[17:02:35.692]                         base::stop(msg)
[17:02:35.692]                       }
[17:02:35.692]                     })
[17:02:35.692]                   }
[17:02:35.692]                   ...future.strategy.old <- future::plan("list")
[17:02:35.692]                   options(future.plan = NULL)
[17:02:35.692]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.692]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.692]                 }
[17:02:35.692]                 ...future.workdir <- getwd()
[17:02:35.692]             }
[17:02:35.692]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.692]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.692]         }
[17:02:35.692]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.692]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.692]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.692]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.692]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.692]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.692]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.692]             base::names(...future.oldOptions))
[17:02:35.692]     }
[17:02:35.692]     if (FALSE) {
[17:02:35.692]     }
[17:02:35.692]     else {
[17:02:35.692]         if (TRUE) {
[17:02:35.692]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.692]                 open = "w")
[17:02:35.692]         }
[17:02:35.692]         else {
[17:02:35.692]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.692]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.692]         }
[17:02:35.692]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.692]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.692]             base::sink(type = "output", split = FALSE)
[17:02:35.692]             base::close(...future.stdout)
[17:02:35.692]         }, add = TRUE)
[17:02:35.692]     }
[17:02:35.692]     ...future.frame <- base::sys.nframe()
[17:02:35.692]     ...future.conditions <- base::list()
[17:02:35.692]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.692]     if (FALSE) {
[17:02:35.692]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.692]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.692]     }
[17:02:35.692]     ...future.result <- base::tryCatch({
[17:02:35.692]         base::withCallingHandlers({
[17:02:35.692]             ...future.value <- base::withVisible(base::local({
[17:02:35.692]                 outer_function(1L)
[17:02:35.692]             }))
[17:02:35.692]             future::FutureResult(value = ...future.value$value, 
[17:02:35.692]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.692]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.692]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.692]                     ...future.globalenv.names))
[17:02:35.692]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.692]         }, condition = base::local({
[17:02:35.692]             c <- base::c
[17:02:35.692]             inherits <- base::inherits
[17:02:35.692]             invokeRestart <- base::invokeRestart
[17:02:35.692]             length <- base::length
[17:02:35.692]             list <- base::list
[17:02:35.692]             seq.int <- base::seq.int
[17:02:35.692]             signalCondition <- base::signalCondition
[17:02:35.692]             sys.calls <- base::sys.calls
[17:02:35.692]             `[[` <- base::`[[`
[17:02:35.692]             `+` <- base::`+`
[17:02:35.692]             `<<-` <- base::`<<-`
[17:02:35.692]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.692]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.692]                   3L)]
[17:02:35.692]             }
[17:02:35.692]             function(cond) {
[17:02:35.692]                 is_error <- inherits(cond, "error")
[17:02:35.692]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.692]                   NULL)
[17:02:35.692]                 if (is_error) {
[17:02:35.692]                   sessionInformation <- function() {
[17:02:35.692]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.692]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.692]                       search = base::search(), system = base::Sys.info())
[17:02:35.692]                   }
[17:02:35.692]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.692]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.692]                     cond$call), session = sessionInformation(), 
[17:02:35.692]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.692]                   signalCondition(cond)
[17:02:35.692]                 }
[17:02:35.692]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.692]                 "immediateCondition"))) {
[17:02:35.692]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.692]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.692]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.692]                   if (TRUE && !signal) {
[17:02:35.692]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.692]                     {
[17:02:35.692]                       inherits <- base::inherits
[17:02:35.692]                       invokeRestart <- base::invokeRestart
[17:02:35.692]                       is.null <- base::is.null
[17:02:35.692]                       muffled <- FALSE
[17:02:35.692]                       if (inherits(cond, "message")) {
[17:02:35.692]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.692]                         if (muffled) 
[17:02:35.692]                           invokeRestart("muffleMessage")
[17:02:35.692]                       }
[17:02:35.692]                       else if (inherits(cond, "warning")) {
[17:02:35.692]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.692]                         if (muffled) 
[17:02:35.692]                           invokeRestart("muffleWarning")
[17:02:35.692]                       }
[17:02:35.692]                       else if (inherits(cond, "condition")) {
[17:02:35.692]                         if (!is.null(pattern)) {
[17:02:35.692]                           computeRestarts <- base::computeRestarts
[17:02:35.692]                           grepl <- base::grepl
[17:02:35.692]                           restarts <- computeRestarts(cond)
[17:02:35.692]                           for (restart in restarts) {
[17:02:35.692]                             name <- restart$name
[17:02:35.692]                             if (is.null(name)) 
[17:02:35.692]                               next
[17:02:35.692]                             if (!grepl(pattern, name)) 
[17:02:35.692]                               next
[17:02:35.692]                             invokeRestart(restart)
[17:02:35.692]                             muffled <- TRUE
[17:02:35.692]                             break
[17:02:35.692]                           }
[17:02:35.692]                         }
[17:02:35.692]                       }
[17:02:35.692]                       invisible(muffled)
[17:02:35.692]                     }
[17:02:35.692]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.692]                   }
[17:02:35.692]                 }
[17:02:35.692]                 else {
[17:02:35.692]                   if (TRUE) {
[17:02:35.692]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.692]                     {
[17:02:35.692]                       inherits <- base::inherits
[17:02:35.692]                       invokeRestart <- base::invokeRestart
[17:02:35.692]                       is.null <- base::is.null
[17:02:35.692]                       muffled <- FALSE
[17:02:35.692]                       if (inherits(cond, "message")) {
[17:02:35.692]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.692]                         if (muffled) 
[17:02:35.692]                           invokeRestart("muffleMessage")
[17:02:35.692]                       }
[17:02:35.692]                       else if (inherits(cond, "warning")) {
[17:02:35.692]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.692]                         if (muffled) 
[17:02:35.692]                           invokeRestart("muffleWarning")
[17:02:35.692]                       }
[17:02:35.692]                       else if (inherits(cond, "condition")) {
[17:02:35.692]                         if (!is.null(pattern)) {
[17:02:35.692]                           computeRestarts <- base::computeRestarts
[17:02:35.692]                           grepl <- base::grepl
[17:02:35.692]                           restarts <- computeRestarts(cond)
[17:02:35.692]                           for (restart in restarts) {
[17:02:35.692]                             name <- restart$name
[17:02:35.692]                             if (is.null(name)) 
[17:02:35.692]                               next
[17:02:35.692]                             if (!grepl(pattern, name)) 
[17:02:35.692]                               next
[17:02:35.692]                             invokeRestart(restart)
[17:02:35.692]                             muffled <- TRUE
[17:02:35.692]                             break
[17:02:35.692]                           }
[17:02:35.692]                         }
[17:02:35.692]                       }
[17:02:35.692]                       invisible(muffled)
[17:02:35.692]                     }
[17:02:35.692]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.692]                   }
[17:02:35.692]                 }
[17:02:35.692]             }
[17:02:35.692]         }))
[17:02:35.692]     }, error = function(ex) {
[17:02:35.692]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.692]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.692]                 ...future.rng), started = ...future.startTime, 
[17:02:35.692]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.692]             version = "1.8"), class = "FutureResult")
[17:02:35.692]     }, finally = {
[17:02:35.692]         if (!identical(...future.workdir, getwd())) 
[17:02:35.692]             setwd(...future.workdir)
[17:02:35.692]         {
[17:02:35.692]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.692]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.692]             }
[17:02:35.692]             base::options(...future.oldOptions)
[17:02:35.692]             if (.Platform$OS.type == "windows") {
[17:02:35.692]                 old_names <- names(...future.oldEnvVars)
[17:02:35.692]                 envs <- base::Sys.getenv()
[17:02:35.692]                 names <- names(envs)
[17:02:35.692]                 common <- intersect(names, old_names)
[17:02:35.692]                 added <- setdiff(names, old_names)
[17:02:35.692]                 removed <- setdiff(old_names, names)
[17:02:35.692]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.692]                   envs[common]]
[17:02:35.692]                 NAMES <- toupper(changed)
[17:02:35.692]                 args <- list()
[17:02:35.692]                 for (kk in seq_along(NAMES)) {
[17:02:35.692]                   name <- changed[[kk]]
[17:02:35.692]                   NAME <- NAMES[[kk]]
[17:02:35.692]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.692]                     next
[17:02:35.692]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.692]                 }
[17:02:35.692]                 NAMES <- toupper(added)
[17:02:35.692]                 for (kk in seq_along(NAMES)) {
[17:02:35.692]                   name <- added[[kk]]
[17:02:35.692]                   NAME <- NAMES[[kk]]
[17:02:35.692]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.692]                     next
[17:02:35.692]                   args[[name]] <- ""
[17:02:35.692]                 }
[17:02:35.692]                 NAMES <- toupper(removed)
[17:02:35.692]                 for (kk in seq_along(NAMES)) {
[17:02:35.692]                   name <- removed[[kk]]
[17:02:35.692]                   NAME <- NAMES[[kk]]
[17:02:35.692]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.692]                     next
[17:02:35.692]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.692]                 }
[17:02:35.692]                 if (length(args) > 0) 
[17:02:35.692]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.692]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.692]             }
[17:02:35.692]             else {
[17:02:35.692]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.692]             }
[17:02:35.692]             {
[17:02:35.692]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.692]                   0L) {
[17:02:35.692]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.692]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.692]                   base::options(opts)
[17:02:35.692]                 }
[17:02:35.692]                 {
[17:02:35.692]                   {
[17:02:35.692]                     NULL
[17:02:35.692]                     RNGkind("Mersenne-Twister")
[17:02:35.692]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.692]                       inherits = FALSE)
[17:02:35.692]                   }
[17:02:35.692]                   options(future.plan = NULL)
[17:02:35.692]                   if (is.na(NA_character_)) 
[17:02:35.692]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.692]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.692]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.692]                     .init = FALSE)
[17:02:35.692]                 }
[17:02:35.692]             }
[17:02:35.692]         }
[17:02:35.692]     })
[17:02:35.692]     if (TRUE) {
[17:02:35.692]         base::sink(type = "output", split = FALSE)
[17:02:35.692]         if (TRUE) {
[17:02:35.692]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.692]         }
[17:02:35.692]         else {
[17:02:35.692]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.692]         }
[17:02:35.692]         base::close(...future.stdout)
[17:02:35.692]         ...future.stdout <- NULL
[17:02:35.692]     }
[17:02:35.692]     ...future.result$conditions <- ...future.conditions
[17:02:35.692]     ...future.result$finished <- base::Sys.time()
[17:02:35.692]     ...future.result
[17:02:35.692] }
[17:02:35.694] assign_globals() ...
[17:02:35.694] List of 3
[17:02:35.694]  $ outer_function:function (x)  
[17:02:35.694]  $ map           :function (.x, .f, ...)  
[17:02:35.694]  $ inner_function:function (x)  
[17:02:35.694]  - attr(*, "where")=List of 3
[17:02:35.694]   ..$ outer_function:<environment: R_EmptyEnv> 
[17:02:35.694]   ..$ map           :<environment: R_EmptyEnv> 
[17:02:35.694]   ..$ inner_function:<environment: R_EmptyEnv> 
[17:02:35.694]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.694]  - attr(*, "resolved")= logi FALSE
[17:02:35.694]  - attr(*, "total_size")= num 7704
[17:02:35.694]  - attr(*, "already-done")= logi TRUE
[17:02:35.697] - reassign environment for ‘outer_function’
[17:02:35.697] - copied ‘outer_function’ to environment
[17:02:35.698] - reassign environment for ‘map’
[17:02:35.698] - copied ‘map’ to environment
[17:02:35.698] - reassign environment for ‘inner_function’
[17:02:35.698] - copied ‘inner_function’ to environment
[17:02:35.698] assign_globals() ... done
[17:02:35.698] plan(): Setting new future strategy stack:
[17:02:35.698] List of future strategies:
[17:02:35.698] 1. sequential:
[17:02:35.698]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.698]    - tweaked: FALSE
[17:02:35.698]    - call: NULL
[17:02:35.699] plan(): nbrOfWorkers() = 1
[17:02:35.706] plan(): Setting new future strategy stack:
[17:02:35.706] List of future strategies:
[17:02:35.706] 1. sequential:
[17:02:35.706]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.706]    - tweaked: FALSE
[17:02:35.706]    - call: plan(strategy)
[17:02:35.706] plan(): nbrOfWorkers() = 1
[17:02:35.706] SequentialFuture started (and completed)
[17:02:35.707] - Launch lazy future ... done
[17:02:35.707] run() for ‘SequentialFuture’ ... done
List of 2
 $ : num [1:2] 2 3
 $ : num [1:2] 2 3
[17:02:35.708] getGlobalsAndPackages() ...
[17:02:35.708] Searching for globals...
[17:02:35.712] - globals found: [16] ‘{’, ‘outer_function’, ‘map’, ‘:’, ‘~’, ‘inner_function’, ‘.x’, ‘if’, ‘inherits’, ‘<-’, ‘[[’, ‘-’, ‘eval’, ‘bquote’, ‘lapply’, ‘+’
[17:02:35.712] Searching for globals ... DONE
[17:02:35.712] Resolving globals: FALSE
[17:02:35.713] The total size of the 3 globals is 7.52 KiB (7704 bytes)
[17:02:35.713] The total size of the 3 globals exported for future expression (‘{; outer_function(1L); }’) is 7.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘map’ (4.43 KiB of class ‘function’), ‘inner_function’ (1.78 KiB of class ‘function’) and ‘outer_function’ (1.31 KiB of class ‘function’)
[17:02:35.713] - globals: [3] ‘outer_function’, ‘map’, ‘inner_function’
[17:02:35.714] 
[17:02:35.714] getGlobalsAndPackages() ... DONE
[17:02:35.714] run() for ‘Future’ ...
[17:02:35.714] - state: ‘created’
[17:02:35.714] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:35.714] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:35.715] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:35.715]   - Field: ‘label’
[17:02:35.715]   - Field: ‘local’
[17:02:35.715]   - Field: ‘owner’
[17:02:35.715]   - Field: ‘envir’
[17:02:35.715]   - Field: ‘packages’
[17:02:35.715]   - Field: ‘gc’
[17:02:35.715]   - Field: ‘conditions’
[17:02:35.715]   - Field: ‘expr’
[17:02:35.715]   - Field: ‘uuid’
[17:02:35.715]   - Field: ‘seed’
[17:02:35.716]   - Field: ‘version’
[17:02:35.716]   - Field: ‘result’
[17:02:35.716]   - Field: ‘asynchronous’
[17:02:35.716]   - Field: ‘calls’
[17:02:35.716]   - Field: ‘globals’
[17:02:35.716]   - Field: ‘stdout’
[17:02:35.716]   - Field: ‘earlySignal’
[17:02:35.716]   - Field: ‘lazy’
[17:02:35.716]   - Field: ‘state’
[17:02:35.716] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:35.716] - Launch lazy future ...
[17:02:35.717] Packages needed by the future expression (n = 0): <none>
[17:02:35.717] Packages needed by future strategies (n = 0): <none>
[17:02:35.717] {
[17:02:35.717]     {
[17:02:35.717]         {
[17:02:35.717]             ...future.startTime <- base::Sys.time()
[17:02:35.717]             {
[17:02:35.717]                 {
[17:02:35.717]                   {
[17:02:35.717]                     base::local({
[17:02:35.717]                       has_future <- base::requireNamespace("future", 
[17:02:35.717]                         quietly = TRUE)
[17:02:35.717]                       if (has_future) {
[17:02:35.717]                         ns <- base::getNamespace("future")
[17:02:35.717]                         version <- ns[[".package"]][["version"]]
[17:02:35.717]                         if (is.null(version)) 
[17:02:35.717]                           version <- utils::packageVersion("future")
[17:02:35.717]                       }
[17:02:35.717]                       else {
[17:02:35.717]                         version <- NULL
[17:02:35.717]                       }
[17:02:35.717]                       if (!has_future || version < "1.8.0") {
[17:02:35.717]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.717]                           "", base::R.version$version.string), 
[17:02:35.717]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:35.717]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:35.717]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.717]                             "release", "version")], collapse = " "), 
[17:02:35.717]                           hostname = base::Sys.info()[["nodename"]])
[17:02:35.717]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.717]                           info)
[17:02:35.717]                         info <- base::paste(info, collapse = "; ")
[17:02:35.717]                         if (!has_future) {
[17:02:35.717]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.717]                             info)
[17:02:35.717]                         }
[17:02:35.717]                         else {
[17:02:35.717]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.717]                             info, version)
[17:02:35.717]                         }
[17:02:35.717]                         base::stop(msg)
[17:02:35.717]                       }
[17:02:35.717]                     })
[17:02:35.717]                   }
[17:02:35.717]                   ...future.strategy.old <- future::plan("list")
[17:02:35.717]                   options(future.plan = NULL)
[17:02:35.717]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.717]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.717]                 }
[17:02:35.717]                 ...future.workdir <- getwd()
[17:02:35.717]             }
[17:02:35.717]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.717]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.717]         }
[17:02:35.717]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.717]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.717]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.717]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.717]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.717]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.717]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.717]             base::names(...future.oldOptions))
[17:02:35.717]     }
[17:02:35.717]     if (FALSE) {
[17:02:35.717]     }
[17:02:35.717]     else {
[17:02:35.717]         if (TRUE) {
[17:02:35.717]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.717]                 open = "w")
[17:02:35.717]         }
[17:02:35.717]         else {
[17:02:35.717]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.717]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.717]         }
[17:02:35.717]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.717]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.717]             base::sink(type = "output", split = FALSE)
[17:02:35.717]             base::close(...future.stdout)
[17:02:35.717]         }, add = TRUE)
[17:02:35.717]     }
[17:02:35.717]     ...future.frame <- base::sys.nframe()
[17:02:35.717]     ...future.conditions <- base::list()
[17:02:35.717]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.717]     if (FALSE) {
[17:02:35.717]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.717]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.717]     }
[17:02:35.717]     ...future.result <- base::tryCatch({
[17:02:35.717]         base::withCallingHandlers({
[17:02:35.717]             ...future.value <- base::withVisible(base::local({
[17:02:35.717]                 outer_function(1L)
[17:02:35.717]             }))
[17:02:35.717]             future::FutureResult(value = ...future.value$value, 
[17:02:35.717]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.717]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.717]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.717]                     ...future.globalenv.names))
[17:02:35.717]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.717]         }, condition = base::local({
[17:02:35.717]             c <- base::c
[17:02:35.717]             inherits <- base::inherits
[17:02:35.717]             invokeRestart <- base::invokeRestart
[17:02:35.717]             length <- base::length
[17:02:35.717]             list <- base::list
[17:02:35.717]             seq.int <- base::seq.int
[17:02:35.717]             signalCondition <- base::signalCondition
[17:02:35.717]             sys.calls <- base::sys.calls
[17:02:35.717]             `[[` <- base::`[[`
[17:02:35.717]             `+` <- base::`+`
[17:02:35.717]             `<<-` <- base::`<<-`
[17:02:35.717]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.717]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.717]                   3L)]
[17:02:35.717]             }
[17:02:35.717]             function(cond) {
[17:02:35.717]                 is_error <- inherits(cond, "error")
[17:02:35.717]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.717]                   NULL)
[17:02:35.717]                 if (is_error) {
[17:02:35.717]                   sessionInformation <- function() {
[17:02:35.717]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.717]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.717]                       search = base::search(), system = base::Sys.info())
[17:02:35.717]                   }
[17:02:35.717]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.717]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.717]                     cond$call), session = sessionInformation(), 
[17:02:35.717]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.717]                   signalCondition(cond)
[17:02:35.717]                 }
[17:02:35.717]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.717]                 "immediateCondition"))) {
[17:02:35.717]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.717]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.717]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.717]                   if (TRUE && !signal) {
[17:02:35.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.717]                     {
[17:02:35.717]                       inherits <- base::inherits
[17:02:35.717]                       invokeRestart <- base::invokeRestart
[17:02:35.717]                       is.null <- base::is.null
[17:02:35.717]                       muffled <- FALSE
[17:02:35.717]                       if (inherits(cond, "message")) {
[17:02:35.717]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.717]                         if (muffled) 
[17:02:35.717]                           invokeRestart("muffleMessage")
[17:02:35.717]                       }
[17:02:35.717]                       else if (inherits(cond, "warning")) {
[17:02:35.717]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.717]                         if (muffled) 
[17:02:35.717]                           invokeRestart("muffleWarning")
[17:02:35.717]                       }
[17:02:35.717]                       else if (inherits(cond, "condition")) {
[17:02:35.717]                         if (!is.null(pattern)) {
[17:02:35.717]                           computeRestarts <- base::computeRestarts
[17:02:35.717]                           grepl <- base::grepl
[17:02:35.717]                           restarts <- computeRestarts(cond)
[17:02:35.717]                           for (restart in restarts) {
[17:02:35.717]                             name <- restart$name
[17:02:35.717]                             if (is.null(name)) 
[17:02:35.717]                               next
[17:02:35.717]                             if (!grepl(pattern, name)) 
[17:02:35.717]                               next
[17:02:35.717]                             invokeRestart(restart)
[17:02:35.717]                             muffled <- TRUE
[17:02:35.717]                             break
[17:02:35.717]                           }
[17:02:35.717]                         }
[17:02:35.717]                       }
[17:02:35.717]                       invisible(muffled)
[17:02:35.717]                     }
[17:02:35.717]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.717]                   }
[17:02:35.717]                 }
[17:02:35.717]                 else {
[17:02:35.717]                   if (TRUE) {
[17:02:35.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.717]                     {
[17:02:35.717]                       inherits <- base::inherits
[17:02:35.717]                       invokeRestart <- base::invokeRestart
[17:02:35.717]                       is.null <- base::is.null
[17:02:35.717]                       muffled <- FALSE
[17:02:35.717]                       if (inherits(cond, "message")) {
[17:02:35.717]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.717]                         if (muffled) 
[17:02:35.717]                           invokeRestart("muffleMessage")
[17:02:35.717]                       }
[17:02:35.717]                       else if (inherits(cond, "warning")) {
[17:02:35.717]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.717]                         if (muffled) 
[17:02:35.717]                           invokeRestart("muffleWarning")
[17:02:35.717]                       }
[17:02:35.717]                       else if (inherits(cond, "condition")) {
[17:02:35.717]                         if (!is.null(pattern)) {
[17:02:35.717]                           computeRestarts <- base::computeRestarts
[17:02:35.717]                           grepl <- base::grepl
[17:02:35.717]                           restarts <- computeRestarts(cond)
[17:02:35.717]                           for (restart in restarts) {
[17:02:35.717]                             name <- restart$name
[17:02:35.717]                             if (is.null(name)) 
[17:02:35.717]                               next
[17:02:35.717]                             if (!grepl(pattern, name)) 
[17:02:35.717]                               next
[17:02:35.717]                             invokeRestart(restart)
[17:02:35.717]                             muffled <- TRUE
[17:02:35.717]                             break
[17:02:35.717]                           }
[17:02:35.717]                         }
[17:02:35.717]                       }
[17:02:35.717]                       invisible(muffled)
[17:02:35.717]                     }
[17:02:35.717]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.717]                   }
[17:02:35.717]                 }
[17:02:35.717]             }
[17:02:35.717]         }))
[17:02:35.717]     }, error = function(ex) {
[17:02:35.717]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.717]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.717]                 ...future.rng), started = ...future.startTime, 
[17:02:35.717]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.717]             version = "1.8"), class = "FutureResult")
[17:02:35.717]     }, finally = {
[17:02:35.717]         if (!identical(...future.workdir, getwd())) 
[17:02:35.717]             setwd(...future.workdir)
[17:02:35.717]         {
[17:02:35.717]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.717]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.717]             }
[17:02:35.717]             base::options(...future.oldOptions)
[17:02:35.717]             if (.Platform$OS.type == "windows") {
[17:02:35.717]                 old_names <- names(...future.oldEnvVars)
[17:02:35.717]                 envs <- base::Sys.getenv()
[17:02:35.717]                 names <- names(envs)
[17:02:35.717]                 common <- intersect(names, old_names)
[17:02:35.717]                 added <- setdiff(names, old_names)
[17:02:35.717]                 removed <- setdiff(old_names, names)
[17:02:35.717]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.717]                   envs[common]]
[17:02:35.717]                 NAMES <- toupper(changed)
[17:02:35.717]                 args <- list()
[17:02:35.717]                 for (kk in seq_along(NAMES)) {
[17:02:35.717]                   name <- changed[[kk]]
[17:02:35.717]                   NAME <- NAMES[[kk]]
[17:02:35.717]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.717]                     next
[17:02:35.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.717]                 }
[17:02:35.717]                 NAMES <- toupper(added)
[17:02:35.717]                 for (kk in seq_along(NAMES)) {
[17:02:35.717]                   name <- added[[kk]]
[17:02:35.717]                   NAME <- NAMES[[kk]]
[17:02:35.717]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.717]                     next
[17:02:35.717]                   args[[name]] <- ""
[17:02:35.717]                 }
[17:02:35.717]                 NAMES <- toupper(removed)
[17:02:35.717]                 for (kk in seq_along(NAMES)) {
[17:02:35.717]                   name <- removed[[kk]]
[17:02:35.717]                   NAME <- NAMES[[kk]]
[17:02:35.717]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.717]                     next
[17:02:35.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.717]                 }
[17:02:35.717]                 if (length(args) > 0) 
[17:02:35.717]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.717]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.717]             }
[17:02:35.717]             else {
[17:02:35.717]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.717]             }
[17:02:35.717]             {
[17:02:35.717]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.717]                   0L) {
[17:02:35.717]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.717]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.717]                   base::options(opts)
[17:02:35.717]                 }
[17:02:35.717]                 {
[17:02:35.717]                   {
[17:02:35.717]                     NULL
[17:02:35.717]                     RNGkind("Mersenne-Twister")
[17:02:35.717]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:35.717]                       inherits = FALSE)
[17:02:35.717]                   }
[17:02:35.717]                   options(future.plan = NULL)
[17:02:35.717]                   if (is.na(NA_character_)) 
[17:02:35.717]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.717]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.717]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.717]                     .init = FALSE)
[17:02:35.717]                 }
[17:02:35.717]             }
[17:02:35.717]         }
[17:02:35.717]     })
[17:02:35.717]     if (TRUE) {
[17:02:35.717]         base::sink(type = "output", split = FALSE)
[17:02:35.717]         if (TRUE) {
[17:02:35.717]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.717]         }
[17:02:35.717]         else {
[17:02:35.717]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.717]         }
[17:02:35.717]         base::close(...future.stdout)
[17:02:35.717]         ...future.stdout <- NULL
[17:02:35.717]     }
[17:02:35.717]     ...future.result$conditions <- ...future.conditions
[17:02:35.717]     ...future.result$finished <- base::Sys.time()
[17:02:35.717]     ...future.result
[17:02:35.717] }
[17:02:35.719] assign_globals() ...
[17:02:35.719] List of 3
[17:02:35.719]  $ outer_function:function (x)  
[17:02:35.719]  $ map           :function (.x, .f, ...)  
[17:02:35.719]  $ inner_function:function (x)  
[17:02:35.719]  - attr(*, "where")=List of 3
[17:02:35.719]   ..$ outer_function:<environment: R_EmptyEnv> 
[17:02:35.719]   ..$ map           :<environment: R_EmptyEnv> 
[17:02:35.719]   ..$ inner_function:<environment: R_EmptyEnv> 
[17:02:35.719]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.719]  - attr(*, "resolved")= logi FALSE
[17:02:35.719]  - attr(*, "total_size")= num 7704
[17:02:35.719]  - attr(*, "already-done")= logi TRUE
[17:02:35.722] - reassign environment for ‘outer_function’
[17:02:35.722] - copied ‘outer_function’ to environment
[17:02:35.722] - reassign environment for ‘map’
[17:02:35.722] - copied ‘map’ to environment
[17:02:35.723] - reassign environment for ‘inner_function’
[17:02:35.723] - copied ‘inner_function’ to environment
[17:02:35.723] assign_globals() ... done
[17:02:35.723] plan(): Setting new future strategy stack:
[17:02:35.723] List of future strategies:
[17:02:35.723] 1. sequential:
[17:02:35.723]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.723]    - tweaked: FALSE
[17:02:35.723]    - call: NULL
[17:02:35.724] plan(): nbrOfWorkers() = 1
[17:02:35.724] plan(): Setting new future strategy stack:
[17:02:35.724] List of future strategies:
[17:02:35.724] 1. sequential:
[17:02:35.724]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.724]    - tweaked: FALSE
[17:02:35.724]    - call: plan(strategy)
[17:02:35.725] plan(): nbrOfWorkers() = 1
[17:02:35.725] SequentialFuture started (and completed)
[17:02:35.725] - Launch lazy future ... done
[17:02:35.725] run() for ‘SequentialFuture’ ... done
List of 2
 $ : num [1:2] 2 3
 $ : num [1:2] 2 3
Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- plan('multicore') ...
[17:02:35.738] plan(): Setting new future strategy stack:
[17:02:35.738] List of future strategies:
[17:02:35.738] 1. multicore:
[17:02:35.738]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:35.738]    - tweaked: FALSE
[17:02:35.738]    - call: plan(strategy)
[17:02:35.742] plan(): nbrOfWorkers() = 2
- lm(<formula>) ...
[17:02:35.742] getGlobalsAndPackages() ...
[17:02:35.742] Searching for globals...
[17:02:35.743] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.743] Searching for globals ... DONE
[17:02:35.744] Resolving globals: FALSE
[17:02:35.744] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.744] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.745] - globals: [2] ‘weight’, ‘group’
[17:02:35.745] - packages: [1] ‘stats’
[17:02:35.745] getGlobalsAndPackages() ... DONE
[17:02:35.745] run() for ‘Future’ ...
[17:02:35.745] - state: ‘created’
[17:02:35.745] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:35.749] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:35.749] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:35.749]   - Field: ‘label’
[17:02:35.749]   - Field: ‘local’
[17:02:35.749]   - Field: ‘owner’
[17:02:35.749]   - Field: ‘envir’
[17:02:35.750]   - Field: ‘workers’
[17:02:35.750]   - Field: ‘packages’
[17:02:35.750]   - Field: ‘gc’
[17:02:35.750]   - Field: ‘job’
[17:02:35.750]   - Field: ‘conditions’
[17:02:35.750]   - Field: ‘expr’
[17:02:35.750]   - Field: ‘uuid’
[17:02:35.750]   - Field: ‘seed’
[17:02:35.750]   - Field: ‘version’
[17:02:35.750]   - Field: ‘result’
[17:02:35.750]   - Field: ‘asynchronous’
[17:02:35.751]   - Field: ‘calls’
[17:02:35.751]   - Field: ‘globals’
[17:02:35.751]   - Field: ‘stdout’
[17:02:35.751]   - Field: ‘earlySignal’
[17:02:35.751]   - Field: ‘lazy’
[17:02:35.751]   - Field: ‘state’
[17:02:35.751] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:35.751] - Launch lazy future ...
[17:02:35.752] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.752] Packages needed by future strategies (n = 0): <none>
[17:02:35.753] {
[17:02:35.753]     {
[17:02:35.753]         {
[17:02:35.753]             ...future.startTime <- base::Sys.time()
[17:02:35.753]             {
[17:02:35.753]                 {
[17:02:35.753]                   {
[17:02:35.753]                     {
[17:02:35.753]                       {
[17:02:35.753]                         base::local({
[17:02:35.753]                           has_future <- base::requireNamespace("future", 
[17:02:35.753]                             quietly = TRUE)
[17:02:35.753]                           if (has_future) {
[17:02:35.753]                             ns <- base::getNamespace("future")
[17:02:35.753]                             version <- ns[[".package"]][["version"]]
[17:02:35.753]                             if (is.null(version)) 
[17:02:35.753]                               version <- utils::packageVersion("future")
[17:02:35.753]                           }
[17:02:35.753]                           else {
[17:02:35.753]                             version <- NULL
[17:02:35.753]                           }
[17:02:35.753]                           if (!has_future || version < "1.8.0") {
[17:02:35.753]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.753]                               "", base::R.version$version.string), 
[17:02:35.753]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:35.753]                                 base::R.version$platform, 8 * 
[17:02:35.753]                                   base::.Machine$sizeof.pointer), 
[17:02:35.753]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.753]                                 "release", "version")], collapse = " "), 
[17:02:35.753]                               hostname = base::Sys.info()[["nodename"]])
[17:02:35.753]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.753]                               info)
[17:02:35.753]                             info <- base::paste(info, collapse = "; ")
[17:02:35.753]                             if (!has_future) {
[17:02:35.753]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.753]                                 info)
[17:02:35.753]                             }
[17:02:35.753]                             else {
[17:02:35.753]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.753]                                 info, version)
[17:02:35.753]                             }
[17:02:35.753]                             base::stop(msg)
[17:02:35.753]                           }
[17:02:35.753]                         })
[17:02:35.753]                       }
[17:02:35.753]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:35.753]                       base::options(mc.cores = 1L)
[17:02:35.753]                     }
[17:02:35.753]                     base::local({
[17:02:35.753]                       for (pkg in "stats") {
[17:02:35.753]                         base::loadNamespace(pkg)
[17:02:35.753]                         base::library(pkg, character.only = TRUE)
[17:02:35.753]                       }
[17:02:35.753]                     })
[17:02:35.753]                   }
[17:02:35.753]                   ...future.strategy.old <- future::plan("list")
[17:02:35.753]                   options(future.plan = NULL)
[17:02:35.753]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.753]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.753]                 }
[17:02:35.753]                 ...future.workdir <- getwd()
[17:02:35.753]             }
[17:02:35.753]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.753]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.753]         }
[17:02:35.753]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.753]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.753]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.753]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.753]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.753]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.753]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.753]             base::names(...future.oldOptions))
[17:02:35.753]     }
[17:02:35.753]     if (FALSE) {
[17:02:35.753]     }
[17:02:35.753]     else {
[17:02:35.753]         if (TRUE) {
[17:02:35.753]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.753]                 open = "w")
[17:02:35.753]         }
[17:02:35.753]         else {
[17:02:35.753]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.753]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.753]         }
[17:02:35.753]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.753]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.753]             base::sink(type = "output", split = FALSE)
[17:02:35.753]             base::close(...future.stdout)
[17:02:35.753]         }, add = TRUE)
[17:02:35.753]     }
[17:02:35.753]     ...future.frame <- base::sys.nframe()
[17:02:35.753]     ...future.conditions <- base::list()
[17:02:35.753]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.753]     if (FALSE) {
[17:02:35.753]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.753]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.753]     }
[17:02:35.753]     ...future.result <- base::tryCatch({
[17:02:35.753]         base::withCallingHandlers({
[17:02:35.753]             ...future.value <- base::withVisible(base::local({
[17:02:35.753]                 withCallingHandlers({
[17:02:35.753]                   {
[17:02:35.753]                     lm(weight ~ group - 1)
[17:02:35.753]                   }
[17:02:35.753]                 }, immediateCondition = function(cond) {
[17:02:35.753]                   save_rds <- function (object, pathname, ...) 
[17:02:35.753]                   {
[17:02:35.753]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:35.753]                     if (file_test("-f", pathname_tmp)) {
[17:02:35.753]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.753]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:35.753]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.753]                         fi_tmp[["mtime"]])
[17:02:35.753]                     }
[17:02:35.753]                     tryCatch({
[17:02:35.753]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:35.753]                     }, error = function(ex) {
[17:02:35.753]                       msg <- conditionMessage(ex)
[17:02:35.753]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.753]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:35.753]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.753]                         fi_tmp[["mtime"]], msg)
[17:02:35.753]                       ex$message <- msg
[17:02:35.753]                       stop(ex)
[17:02:35.753]                     })
[17:02:35.753]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:35.753]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:35.753]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:35.753]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.753]                       fi <- file.info(pathname)
[17:02:35.753]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:35.753]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.753]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:35.753]                         fi[["size"]], fi[["mtime"]])
[17:02:35.753]                       stop(msg)
[17:02:35.753]                     }
[17:02:35.753]                     invisible(pathname)
[17:02:35.753]                   }
[17:02:35.753]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:35.753]                     rootPath = tempdir()) 
[17:02:35.753]                   {
[17:02:35.753]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:35.753]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:35.753]                       tmpdir = path, fileext = ".rds")
[17:02:35.753]                     save_rds(obj, file)
[17:02:35.753]                   }
[17:02:35.753]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:35.753]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.753]                   {
[17:02:35.753]                     inherits <- base::inherits
[17:02:35.753]                     invokeRestart <- base::invokeRestart
[17:02:35.753]                     is.null <- base::is.null
[17:02:35.753]                     muffled <- FALSE
[17:02:35.753]                     if (inherits(cond, "message")) {
[17:02:35.753]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:35.753]                       if (muffled) 
[17:02:35.753]                         invokeRestart("muffleMessage")
[17:02:35.753]                     }
[17:02:35.753]                     else if (inherits(cond, "warning")) {
[17:02:35.753]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:35.753]                       if (muffled) 
[17:02:35.753]                         invokeRestart("muffleWarning")
[17:02:35.753]                     }
[17:02:35.753]                     else if (inherits(cond, "condition")) {
[17:02:35.753]                       if (!is.null(pattern)) {
[17:02:35.753]                         computeRestarts <- base::computeRestarts
[17:02:35.753]                         grepl <- base::grepl
[17:02:35.753]                         restarts <- computeRestarts(cond)
[17:02:35.753]                         for (restart in restarts) {
[17:02:35.753]                           name <- restart$name
[17:02:35.753]                           if (is.null(name)) 
[17:02:35.753]                             next
[17:02:35.753]                           if (!grepl(pattern, name)) 
[17:02:35.753]                             next
[17:02:35.753]                           invokeRestart(restart)
[17:02:35.753]                           muffled <- TRUE
[17:02:35.753]                           break
[17:02:35.753]                         }
[17:02:35.753]                       }
[17:02:35.753]                     }
[17:02:35.753]                     invisible(muffled)
[17:02:35.753]                   }
[17:02:35.753]                   muffleCondition(cond)
[17:02:35.753]                 })
[17:02:35.753]             }))
[17:02:35.753]             future::FutureResult(value = ...future.value$value, 
[17:02:35.753]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.753]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.753]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.753]                     ...future.globalenv.names))
[17:02:35.753]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.753]         }, condition = base::local({
[17:02:35.753]             c <- base::c
[17:02:35.753]             inherits <- base::inherits
[17:02:35.753]             invokeRestart <- base::invokeRestart
[17:02:35.753]             length <- base::length
[17:02:35.753]             list <- base::list
[17:02:35.753]             seq.int <- base::seq.int
[17:02:35.753]             signalCondition <- base::signalCondition
[17:02:35.753]             sys.calls <- base::sys.calls
[17:02:35.753]             `[[` <- base::`[[`
[17:02:35.753]             `+` <- base::`+`
[17:02:35.753]             `<<-` <- base::`<<-`
[17:02:35.753]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.753]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.753]                   3L)]
[17:02:35.753]             }
[17:02:35.753]             function(cond) {
[17:02:35.753]                 is_error <- inherits(cond, "error")
[17:02:35.753]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.753]                   NULL)
[17:02:35.753]                 if (is_error) {
[17:02:35.753]                   sessionInformation <- function() {
[17:02:35.753]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.753]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.753]                       search = base::search(), system = base::Sys.info())
[17:02:35.753]                   }
[17:02:35.753]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.753]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.753]                     cond$call), session = sessionInformation(), 
[17:02:35.753]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.753]                   signalCondition(cond)
[17:02:35.753]                 }
[17:02:35.753]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.753]                 "immediateCondition"))) {
[17:02:35.753]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.753]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.753]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.753]                   if (TRUE && !signal) {
[17:02:35.753]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.753]                     {
[17:02:35.753]                       inherits <- base::inherits
[17:02:35.753]                       invokeRestart <- base::invokeRestart
[17:02:35.753]                       is.null <- base::is.null
[17:02:35.753]                       muffled <- FALSE
[17:02:35.753]                       if (inherits(cond, "message")) {
[17:02:35.753]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.753]                         if (muffled) 
[17:02:35.753]                           invokeRestart("muffleMessage")
[17:02:35.753]                       }
[17:02:35.753]                       else if (inherits(cond, "warning")) {
[17:02:35.753]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.753]                         if (muffled) 
[17:02:35.753]                           invokeRestart("muffleWarning")
[17:02:35.753]                       }
[17:02:35.753]                       else if (inherits(cond, "condition")) {
[17:02:35.753]                         if (!is.null(pattern)) {
[17:02:35.753]                           computeRestarts <- base::computeRestarts
[17:02:35.753]                           grepl <- base::grepl
[17:02:35.753]                           restarts <- computeRestarts(cond)
[17:02:35.753]                           for (restart in restarts) {
[17:02:35.753]                             name <- restart$name
[17:02:35.753]                             if (is.null(name)) 
[17:02:35.753]                               next
[17:02:35.753]                             if (!grepl(pattern, name)) 
[17:02:35.753]                               next
[17:02:35.753]                             invokeRestart(restart)
[17:02:35.753]                             muffled <- TRUE
[17:02:35.753]                             break
[17:02:35.753]                           }
[17:02:35.753]                         }
[17:02:35.753]                       }
[17:02:35.753]                       invisible(muffled)
[17:02:35.753]                     }
[17:02:35.753]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.753]                   }
[17:02:35.753]                 }
[17:02:35.753]                 else {
[17:02:35.753]                   if (TRUE) {
[17:02:35.753]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.753]                     {
[17:02:35.753]                       inherits <- base::inherits
[17:02:35.753]                       invokeRestart <- base::invokeRestart
[17:02:35.753]                       is.null <- base::is.null
[17:02:35.753]                       muffled <- FALSE
[17:02:35.753]                       if (inherits(cond, "message")) {
[17:02:35.753]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.753]                         if (muffled) 
[17:02:35.753]                           invokeRestart("muffleMessage")
[17:02:35.753]                       }
[17:02:35.753]                       else if (inherits(cond, "warning")) {
[17:02:35.753]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.753]                         if (muffled) 
[17:02:35.753]                           invokeRestart("muffleWarning")
[17:02:35.753]                       }
[17:02:35.753]                       else if (inherits(cond, "condition")) {
[17:02:35.753]                         if (!is.null(pattern)) {
[17:02:35.753]                           computeRestarts <- base::computeRestarts
[17:02:35.753]                           grepl <- base::grepl
[17:02:35.753]                           restarts <- computeRestarts(cond)
[17:02:35.753]                           for (restart in restarts) {
[17:02:35.753]                             name <- restart$name
[17:02:35.753]                             if (is.null(name)) 
[17:02:35.753]                               next
[17:02:35.753]                             if (!grepl(pattern, name)) 
[17:02:35.753]                               next
[17:02:35.753]                             invokeRestart(restart)
[17:02:35.753]                             muffled <- TRUE
[17:02:35.753]                             break
[17:02:35.753]                           }
[17:02:35.753]                         }
[17:02:35.753]                       }
[17:02:35.753]                       invisible(muffled)
[17:02:35.753]                     }
[17:02:35.753]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.753]                   }
[17:02:35.753]                 }
[17:02:35.753]             }
[17:02:35.753]         }))
[17:02:35.753]     }, error = function(ex) {
[17:02:35.753]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.753]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.753]                 ...future.rng), started = ...future.startTime, 
[17:02:35.753]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.753]             version = "1.8"), class = "FutureResult")
[17:02:35.753]     }, finally = {
[17:02:35.753]         if (!identical(...future.workdir, getwd())) 
[17:02:35.753]             setwd(...future.workdir)
[17:02:35.753]         {
[17:02:35.753]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.753]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.753]             }
[17:02:35.753]             base::options(...future.oldOptions)
[17:02:35.753]             if (.Platform$OS.type == "windows") {
[17:02:35.753]                 old_names <- names(...future.oldEnvVars)
[17:02:35.753]                 envs <- base::Sys.getenv()
[17:02:35.753]                 names <- names(envs)
[17:02:35.753]                 common <- intersect(names, old_names)
[17:02:35.753]                 added <- setdiff(names, old_names)
[17:02:35.753]                 removed <- setdiff(old_names, names)
[17:02:35.753]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.753]                   envs[common]]
[17:02:35.753]                 NAMES <- toupper(changed)
[17:02:35.753]                 args <- list()
[17:02:35.753]                 for (kk in seq_along(NAMES)) {
[17:02:35.753]                   name <- changed[[kk]]
[17:02:35.753]                   NAME <- NAMES[[kk]]
[17:02:35.753]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.753]                     next
[17:02:35.753]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.753]                 }
[17:02:35.753]                 NAMES <- toupper(added)
[17:02:35.753]                 for (kk in seq_along(NAMES)) {
[17:02:35.753]                   name <- added[[kk]]
[17:02:35.753]                   NAME <- NAMES[[kk]]
[17:02:35.753]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.753]                     next
[17:02:35.753]                   args[[name]] <- ""
[17:02:35.753]                 }
[17:02:35.753]                 NAMES <- toupper(removed)
[17:02:35.753]                 for (kk in seq_along(NAMES)) {
[17:02:35.753]                   name <- removed[[kk]]
[17:02:35.753]                   NAME <- NAMES[[kk]]
[17:02:35.753]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.753]                     next
[17:02:35.753]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.753]                 }
[17:02:35.753]                 if (length(args) > 0) 
[17:02:35.753]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.753]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.753]             }
[17:02:35.753]             else {
[17:02:35.753]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.753]             }
[17:02:35.753]             {
[17:02:35.753]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.753]                   0L) {
[17:02:35.753]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.753]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.753]                   base::options(opts)
[17:02:35.753]                 }
[17:02:35.753]                 {
[17:02:35.753]                   {
[17:02:35.753]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:35.753]                     NULL
[17:02:35.753]                   }
[17:02:35.753]                   options(future.plan = NULL)
[17:02:35.753]                   if (is.na(NA_character_)) 
[17:02:35.753]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.753]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.753]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.753]                     .init = FALSE)
[17:02:35.753]                 }
[17:02:35.753]             }
[17:02:35.753]         }
[17:02:35.753]     })
[17:02:35.753]     if (TRUE) {
[17:02:35.753]         base::sink(type = "output", split = FALSE)
[17:02:35.753]         if (TRUE) {
[17:02:35.753]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.753]         }
[17:02:35.753]         else {
[17:02:35.753]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.753]         }
[17:02:35.753]         base::close(...future.stdout)
[17:02:35.753]         ...future.stdout <- NULL
[17:02:35.753]     }
[17:02:35.753]     ...future.result$conditions <- ...future.conditions
[17:02:35.753]     ...future.result$finished <- base::Sys.time()
[17:02:35.753]     ...future.result
[17:02:35.753] }
[17:02:35.756] assign_globals() ...
[17:02:35.756] List of 2
[17:02:35.756]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.756]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.756]  - attr(*, "where")=List of 2
[17:02:35.756]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.756]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.756]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.756]  - attr(*, "resolved")= logi FALSE
[17:02:35.756]  - attr(*, "total_size")= num 896
[17:02:35.756]  - attr(*, "already-done")= logi TRUE
[17:02:35.760] - copied ‘weight’ to environment
[17:02:35.760] - copied ‘group’ to environment
[17:02:35.760] assign_globals() ... done
[17:02:35.760] requestCore(): workers = 2
[17:02:35.768] MulticoreFuture started
[17:02:35.768] - Launch lazy future ... done
[17:02:35.768] run() for ‘MulticoreFuture’ ... done
[17:02:35.769] plan(): Setting new future strategy stack:
[17:02:35.770] result() for MulticoreFuture ...
[17:02:35.769] List of future strategies:
[17:02:35.769] 1. sequential:
[17:02:35.769]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.769]    - tweaked: FALSE
[17:02:35.769]    - call: NULL
[17:02:35.770] plan(): nbrOfWorkers() = 1
[17:02:35.774] plan(): Setting new future strategy stack:
[17:02:35.774] List of future strategies:
[17:02:35.774] 1. multicore:
[17:02:35.774]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:35.774]    - tweaked: FALSE
[17:02:35.774]    - call: plan(strategy)
[17:02:35.779] plan(): nbrOfWorkers() = 2
[17:02:35.785] result() for MulticoreFuture ...
[17:02:35.785] result() for MulticoreFuture ... done
[17:02:35.785] result() for MulticoreFuture ... done
[17:02:35.786] result() for MulticoreFuture ...
[17:02:35.786] result() for MulticoreFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:35.788] getGlobalsAndPackages() ...
[17:02:35.788] Searching for globals...
[17:02:35.790] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.790] Searching for globals ... DONE
[17:02:35.790] Resolving globals: FALSE
[17:02:35.791] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.791] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.791] - globals: [2] ‘weight’, ‘group’
[17:02:35.792] - packages: [1] ‘stats’
[17:02:35.792] getGlobalsAndPackages() ... DONE
[17:02:35.792] run() for ‘Future’ ...
[17:02:35.792] - state: ‘created’
[17:02:35.792] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:35.797] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:35.797] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:35.797]   - Field: ‘label’
[17:02:35.797]   - Field: ‘local’
[17:02:35.798]   - Field: ‘owner’
[17:02:35.798]   - Field: ‘envir’
[17:02:35.798]   - Field: ‘workers’
[17:02:35.798]   - Field: ‘packages’
[17:02:35.798]   - Field: ‘gc’
[17:02:35.798]   - Field: ‘job’
[17:02:35.798]   - Field: ‘conditions’
[17:02:35.798]   - Field: ‘expr’
[17:02:35.799]   - Field: ‘uuid’
[17:02:35.799]   - Field: ‘seed’
[17:02:35.799]   - Field: ‘version’
[17:02:35.799]   - Field: ‘result’
[17:02:35.799]   - Field: ‘asynchronous’
[17:02:35.799]   - Field: ‘calls’
[17:02:35.799]   - Field: ‘globals’
[17:02:35.799]   - Field: ‘stdout’
[17:02:35.799]   - Field: ‘earlySignal’
[17:02:35.800]   - Field: ‘lazy’
[17:02:35.800]   - Field: ‘state’
[17:02:35.800] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:35.800] - Launch lazy future ...
[17:02:35.800] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.800] Packages needed by future strategies (n = 0): <none>
[17:02:35.801] {
[17:02:35.801]     {
[17:02:35.801]         {
[17:02:35.801]             ...future.startTime <- base::Sys.time()
[17:02:35.801]             {
[17:02:35.801]                 {
[17:02:35.801]                   {
[17:02:35.801]                     {
[17:02:35.801]                       {
[17:02:35.801]                         base::local({
[17:02:35.801]                           has_future <- base::requireNamespace("future", 
[17:02:35.801]                             quietly = TRUE)
[17:02:35.801]                           if (has_future) {
[17:02:35.801]                             ns <- base::getNamespace("future")
[17:02:35.801]                             version <- ns[[".package"]][["version"]]
[17:02:35.801]                             if (is.null(version)) 
[17:02:35.801]                               version <- utils::packageVersion("future")
[17:02:35.801]                           }
[17:02:35.801]                           else {
[17:02:35.801]                             version <- NULL
[17:02:35.801]                           }
[17:02:35.801]                           if (!has_future || version < "1.8.0") {
[17:02:35.801]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.801]                               "", base::R.version$version.string), 
[17:02:35.801]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:35.801]                                 base::R.version$platform, 8 * 
[17:02:35.801]                                   base::.Machine$sizeof.pointer), 
[17:02:35.801]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.801]                                 "release", "version")], collapse = " "), 
[17:02:35.801]                               hostname = base::Sys.info()[["nodename"]])
[17:02:35.801]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.801]                               info)
[17:02:35.801]                             info <- base::paste(info, collapse = "; ")
[17:02:35.801]                             if (!has_future) {
[17:02:35.801]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.801]                                 info)
[17:02:35.801]                             }
[17:02:35.801]                             else {
[17:02:35.801]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.801]                                 info, version)
[17:02:35.801]                             }
[17:02:35.801]                             base::stop(msg)
[17:02:35.801]                           }
[17:02:35.801]                         })
[17:02:35.801]                       }
[17:02:35.801]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:35.801]                       base::options(mc.cores = 1L)
[17:02:35.801]                     }
[17:02:35.801]                     base::local({
[17:02:35.801]                       for (pkg in "stats") {
[17:02:35.801]                         base::loadNamespace(pkg)
[17:02:35.801]                         base::library(pkg, character.only = TRUE)
[17:02:35.801]                       }
[17:02:35.801]                     })
[17:02:35.801]                   }
[17:02:35.801]                   ...future.strategy.old <- future::plan("list")
[17:02:35.801]                   options(future.plan = NULL)
[17:02:35.801]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.801]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.801]                 }
[17:02:35.801]                 ...future.workdir <- getwd()
[17:02:35.801]             }
[17:02:35.801]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.801]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.801]         }
[17:02:35.801]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.801]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.801]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.801]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.801]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.801]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.801]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.801]             base::names(...future.oldOptions))
[17:02:35.801]     }
[17:02:35.801]     if (FALSE) {
[17:02:35.801]     }
[17:02:35.801]     else {
[17:02:35.801]         if (TRUE) {
[17:02:35.801]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.801]                 open = "w")
[17:02:35.801]         }
[17:02:35.801]         else {
[17:02:35.801]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.801]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.801]         }
[17:02:35.801]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.801]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.801]             base::sink(type = "output", split = FALSE)
[17:02:35.801]             base::close(...future.stdout)
[17:02:35.801]         }, add = TRUE)
[17:02:35.801]     }
[17:02:35.801]     ...future.frame <- base::sys.nframe()
[17:02:35.801]     ...future.conditions <- base::list()
[17:02:35.801]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.801]     if (FALSE) {
[17:02:35.801]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.801]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.801]     }
[17:02:35.801]     ...future.result <- base::tryCatch({
[17:02:35.801]         base::withCallingHandlers({
[17:02:35.801]             ...future.value <- base::withVisible(base::local({
[17:02:35.801]                 withCallingHandlers({
[17:02:35.801]                   {
[17:02:35.801]                     lm(weight ~ group - 1)
[17:02:35.801]                   }
[17:02:35.801]                 }, immediateCondition = function(cond) {
[17:02:35.801]                   save_rds <- function (object, pathname, ...) 
[17:02:35.801]                   {
[17:02:35.801]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:35.801]                     if (file_test("-f", pathname_tmp)) {
[17:02:35.801]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.801]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:35.801]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.801]                         fi_tmp[["mtime"]])
[17:02:35.801]                     }
[17:02:35.801]                     tryCatch({
[17:02:35.801]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:35.801]                     }, error = function(ex) {
[17:02:35.801]                       msg <- conditionMessage(ex)
[17:02:35.801]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.801]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:35.801]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.801]                         fi_tmp[["mtime"]], msg)
[17:02:35.801]                       ex$message <- msg
[17:02:35.801]                       stop(ex)
[17:02:35.801]                     })
[17:02:35.801]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:35.801]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:35.801]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:35.801]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.801]                       fi <- file.info(pathname)
[17:02:35.801]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:35.801]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.801]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:35.801]                         fi[["size"]], fi[["mtime"]])
[17:02:35.801]                       stop(msg)
[17:02:35.801]                     }
[17:02:35.801]                     invisible(pathname)
[17:02:35.801]                   }
[17:02:35.801]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:35.801]                     rootPath = tempdir()) 
[17:02:35.801]                   {
[17:02:35.801]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:35.801]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:35.801]                       tmpdir = path, fileext = ".rds")
[17:02:35.801]                     save_rds(obj, file)
[17:02:35.801]                   }
[17:02:35.801]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:35.801]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.801]                   {
[17:02:35.801]                     inherits <- base::inherits
[17:02:35.801]                     invokeRestart <- base::invokeRestart
[17:02:35.801]                     is.null <- base::is.null
[17:02:35.801]                     muffled <- FALSE
[17:02:35.801]                     if (inherits(cond, "message")) {
[17:02:35.801]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:35.801]                       if (muffled) 
[17:02:35.801]                         invokeRestart("muffleMessage")
[17:02:35.801]                     }
[17:02:35.801]                     else if (inherits(cond, "warning")) {
[17:02:35.801]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:35.801]                       if (muffled) 
[17:02:35.801]                         invokeRestart("muffleWarning")
[17:02:35.801]                     }
[17:02:35.801]                     else if (inherits(cond, "condition")) {
[17:02:35.801]                       if (!is.null(pattern)) {
[17:02:35.801]                         computeRestarts <- base::computeRestarts
[17:02:35.801]                         grepl <- base::grepl
[17:02:35.801]                         restarts <- computeRestarts(cond)
[17:02:35.801]                         for (restart in restarts) {
[17:02:35.801]                           name <- restart$name
[17:02:35.801]                           if (is.null(name)) 
[17:02:35.801]                             next
[17:02:35.801]                           if (!grepl(pattern, name)) 
[17:02:35.801]                             next
[17:02:35.801]                           invokeRestart(restart)
[17:02:35.801]                           muffled <- TRUE
[17:02:35.801]                           break
[17:02:35.801]                         }
[17:02:35.801]                       }
[17:02:35.801]                     }
[17:02:35.801]                     invisible(muffled)
[17:02:35.801]                   }
[17:02:35.801]                   muffleCondition(cond)
[17:02:35.801]                 })
[17:02:35.801]             }))
[17:02:35.801]             future::FutureResult(value = ...future.value$value, 
[17:02:35.801]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.801]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.801]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.801]                     ...future.globalenv.names))
[17:02:35.801]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.801]         }, condition = base::local({
[17:02:35.801]             c <- base::c
[17:02:35.801]             inherits <- base::inherits
[17:02:35.801]             invokeRestart <- base::invokeRestart
[17:02:35.801]             length <- base::length
[17:02:35.801]             list <- base::list
[17:02:35.801]             seq.int <- base::seq.int
[17:02:35.801]             signalCondition <- base::signalCondition
[17:02:35.801]             sys.calls <- base::sys.calls
[17:02:35.801]             `[[` <- base::`[[`
[17:02:35.801]             `+` <- base::`+`
[17:02:35.801]             `<<-` <- base::`<<-`
[17:02:35.801]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.801]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.801]                   3L)]
[17:02:35.801]             }
[17:02:35.801]             function(cond) {
[17:02:35.801]                 is_error <- inherits(cond, "error")
[17:02:35.801]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.801]                   NULL)
[17:02:35.801]                 if (is_error) {
[17:02:35.801]                   sessionInformation <- function() {
[17:02:35.801]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.801]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.801]                       search = base::search(), system = base::Sys.info())
[17:02:35.801]                   }
[17:02:35.801]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.801]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.801]                     cond$call), session = sessionInformation(), 
[17:02:35.801]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.801]                   signalCondition(cond)
[17:02:35.801]                 }
[17:02:35.801]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.801]                 "immediateCondition"))) {
[17:02:35.801]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.801]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.801]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.801]                   if (TRUE && !signal) {
[17:02:35.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.801]                     {
[17:02:35.801]                       inherits <- base::inherits
[17:02:35.801]                       invokeRestart <- base::invokeRestart
[17:02:35.801]                       is.null <- base::is.null
[17:02:35.801]                       muffled <- FALSE
[17:02:35.801]                       if (inherits(cond, "message")) {
[17:02:35.801]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.801]                         if (muffled) 
[17:02:35.801]                           invokeRestart("muffleMessage")
[17:02:35.801]                       }
[17:02:35.801]                       else if (inherits(cond, "warning")) {
[17:02:35.801]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.801]                         if (muffled) 
[17:02:35.801]                           invokeRestart("muffleWarning")
[17:02:35.801]                       }
[17:02:35.801]                       else if (inherits(cond, "condition")) {
[17:02:35.801]                         if (!is.null(pattern)) {
[17:02:35.801]                           computeRestarts <- base::computeRestarts
[17:02:35.801]                           grepl <- base::grepl
[17:02:35.801]                           restarts <- computeRestarts(cond)
[17:02:35.801]                           for (restart in restarts) {
[17:02:35.801]                             name <- restart$name
[17:02:35.801]                             if (is.null(name)) 
[17:02:35.801]                               next
[17:02:35.801]                             if (!grepl(pattern, name)) 
[17:02:35.801]                               next
[17:02:35.801]                             invokeRestart(restart)
[17:02:35.801]                             muffled <- TRUE
[17:02:35.801]                             break
[17:02:35.801]                           }
[17:02:35.801]                         }
[17:02:35.801]                       }
[17:02:35.801]                       invisible(muffled)
[17:02:35.801]                     }
[17:02:35.801]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.801]                   }
[17:02:35.801]                 }
[17:02:35.801]                 else {
[17:02:35.801]                   if (TRUE) {
[17:02:35.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.801]                     {
[17:02:35.801]                       inherits <- base::inherits
[17:02:35.801]                       invokeRestart <- base::invokeRestart
[17:02:35.801]                       is.null <- base::is.null
[17:02:35.801]                       muffled <- FALSE
[17:02:35.801]                       if (inherits(cond, "message")) {
[17:02:35.801]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.801]                         if (muffled) 
[17:02:35.801]                           invokeRestart("muffleMessage")
[17:02:35.801]                       }
[17:02:35.801]                       else if (inherits(cond, "warning")) {
[17:02:35.801]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.801]                         if (muffled) 
[17:02:35.801]                           invokeRestart("muffleWarning")
[17:02:35.801]                       }
[17:02:35.801]                       else if (inherits(cond, "condition")) {
[17:02:35.801]                         if (!is.null(pattern)) {
[17:02:35.801]                           computeRestarts <- base::computeRestarts
[17:02:35.801]                           grepl <- base::grepl
[17:02:35.801]                           restarts <- computeRestarts(cond)
[17:02:35.801]                           for (restart in restarts) {
[17:02:35.801]                             name <- restart$name
[17:02:35.801]                             if (is.null(name)) 
[17:02:35.801]                               next
[17:02:35.801]                             if (!grepl(pattern, name)) 
[17:02:35.801]                               next
[17:02:35.801]                             invokeRestart(restart)
[17:02:35.801]                             muffled <- TRUE
[17:02:35.801]                             break
[17:02:35.801]                           }
[17:02:35.801]                         }
[17:02:35.801]                       }
[17:02:35.801]                       invisible(muffled)
[17:02:35.801]                     }
[17:02:35.801]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.801]                   }
[17:02:35.801]                 }
[17:02:35.801]             }
[17:02:35.801]         }))
[17:02:35.801]     }, error = function(ex) {
[17:02:35.801]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.801]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.801]                 ...future.rng), started = ...future.startTime, 
[17:02:35.801]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.801]             version = "1.8"), class = "FutureResult")
[17:02:35.801]     }, finally = {
[17:02:35.801]         if (!identical(...future.workdir, getwd())) 
[17:02:35.801]             setwd(...future.workdir)
[17:02:35.801]         {
[17:02:35.801]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.801]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.801]             }
[17:02:35.801]             base::options(...future.oldOptions)
[17:02:35.801]             if (.Platform$OS.type == "windows") {
[17:02:35.801]                 old_names <- names(...future.oldEnvVars)
[17:02:35.801]                 envs <- base::Sys.getenv()
[17:02:35.801]                 names <- names(envs)
[17:02:35.801]                 common <- intersect(names, old_names)
[17:02:35.801]                 added <- setdiff(names, old_names)
[17:02:35.801]                 removed <- setdiff(old_names, names)
[17:02:35.801]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.801]                   envs[common]]
[17:02:35.801]                 NAMES <- toupper(changed)
[17:02:35.801]                 args <- list()
[17:02:35.801]                 for (kk in seq_along(NAMES)) {
[17:02:35.801]                   name <- changed[[kk]]
[17:02:35.801]                   NAME <- NAMES[[kk]]
[17:02:35.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.801]                     next
[17:02:35.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.801]                 }
[17:02:35.801]                 NAMES <- toupper(added)
[17:02:35.801]                 for (kk in seq_along(NAMES)) {
[17:02:35.801]                   name <- added[[kk]]
[17:02:35.801]                   NAME <- NAMES[[kk]]
[17:02:35.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.801]                     next
[17:02:35.801]                   args[[name]] <- ""
[17:02:35.801]                 }
[17:02:35.801]                 NAMES <- toupper(removed)
[17:02:35.801]                 for (kk in seq_along(NAMES)) {
[17:02:35.801]                   name <- removed[[kk]]
[17:02:35.801]                   NAME <- NAMES[[kk]]
[17:02:35.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.801]                     next
[17:02:35.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.801]                 }
[17:02:35.801]                 if (length(args) > 0) 
[17:02:35.801]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.801]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.801]             }
[17:02:35.801]             else {
[17:02:35.801]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.801]             }
[17:02:35.801]             {
[17:02:35.801]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.801]                   0L) {
[17:02:35.801]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.801]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.801]                   base::options(opts)
[17:02:35.801]                 }
[17:02:35.801]                 {
[17:02:35.801]                   {
[17:02:35.801]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:35.801]                     NULL
[17:02:35.801]                   }
[17:02:35.801]                   options(future.plan = NULL)
[17:02:35.801]                   if (is.na(NA_character_)) 
[17:02:35.801]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.801]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.801]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.801]                     .init = FALSE)
[17:02:35.801]                 }
[17:02:35.801]             }
[17:02:35.801]         }
[17:02:35.801]     })
[17:02:35.801]     if (TRUE) {
[17:02:35.801]         base::sink(type = "output", split = FALSE)
[17:02:35.801]         if (TRUE) {
[17:02:35.801]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.801]         }
[17:02:35.801]         else {
[17:02:35.801]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.801]         }
[17:02:35.801]         base::close(...future.stdout)
[17:02:35.801]         ...future.stdout <- NULL
[17:02:35.801]     }
[17:02:35.801]     ...future.result$conditions <- ...future.conditions
[17:02:35.801]     ...future.result$finished <- base::Sys.time()
[17:02:35.801]     ...future.result
[17:02:35.801] }
[17:02:35.804] assign_globals() ...
[17:02:35.804] List of 2
[17:02:35.804]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.804]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.804]  - attr(*, "where")=List of 2
[17:02:35.804]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.804]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.804]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.804]  - attr(*, "resolved")= logi FALSE
[17:02:35.804]  - attr(*, "total_size")= num 896
[17:02:35.804]  - attr(*, "already-done")= logi TRUE
[17:02:35.807] - copied ‘weight’ to environment
[17:02:35.808] - copied ‘group’ to environment
[17:02:35.808] assign_globals() ... done
[17:02:35.808] requestCore(): workers = 2
[17:02:35.810] MulticoreFuture started
[17:02:35.810] - Launch lazy future ... done
[17:02:35.811] run() for ‘MulticoreFuture’ ... done
[17:02:35.811] result() for MulticoreFuture ...
[17:02:35.811] plan(): Setting new future strategy stack:
[17:02:35.812] List of future strategies:
[17:02:35.812] 1. sequential:
[17:02:35.812]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.812]    - tweaked: FALSE
[17:02:35.812]    - call: NULL
[17:02:35.813] plan(): nbrOfWorkers() = 1
[17:02:35.816] plan(): Setting new future strategy stack:
[17:02:35.817] List of future strategies:
[17:02:35.817] 1. multicore:
[17:02:35.817]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:35.817]    - tweaked: FALSE
[17:02:35.817]    - call: plan(strategy)
[17:02:35.827] plan(): nbrOfWorkers() = 2
[17:02:35.829] result() for MulticoreFuture ...
[17:02:35.829] result() for MulticoreFuture ... done
[17:02:35.829] result() for MulticoreFuture ... done
[17:02:35.830] result() for MulticoreFuture ...
[17:02:35.830] result() for MulticoreFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:35.836] getGlobalsAndPackages() ...
[17:02:35.836] Searching for globals...
[17:02:35.838] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.838] Searching for globals ... DONE
[17:02:35.838] Resolving globals: FALSE
[17:02:35.839] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.840] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.840] - globals: [2] ‘weight’, ‘group’
[17:02:35.840] - packages: [1] ‘stats’
[17:02:35.840] getGlobalsAndPackages() ... DONE
[17:02:35.840] run() for ‘Future’ ...
[17:02:35.840] - state: ‘created’
[17:02:35.841] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:35.845] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:35.845] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:35.845]   - Field: ‘label’
[17:02:35.845]   - Field: ‘local’
[17:02:35.845]   - Field: ‘owner’
[17:02:35.846]   - Field: ‘envir’
[17:02:35.846]   - Field: ‘workers’
[17:02:35.846]   - Field: ‘packages’
[17:02:35.846]   - Field: ‘gc’
[17:02:35.846]   - Field: ‘job’
[17:02:35.846]   - Field: ‘conditions’
[17:02:35.846]   - Field: ‘expr’
[17:02:35.846]   - Field: ‘uuid’
[17:02:35.846]   - Field: ‘seed’
[17:02:35.847]   - Field: ‘version’
[17:02:35.847]   - Field: ‘result’
[17:02:35.847]   - Field: ‘asynchronous’
[17:02:35.847]   - Field: ‘calls’
[17:02:35.847]   - Field: ‘globals’
[17:02:35.847]   - Field: ‘stdout’
[17:02:35.847]   - Field: ‘earlySignal’
[17:02:35.847]   - Field: ‘lazy’
[17:02:35.848]   - Field: ‘state’
[17:02:35.848] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:35.848] - Launch lazy future ...
[17:02:35.848] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.848] Packages needed by future strategies (n = 0): <none>
[17:02:35.849] {
[17:02:35.849]     {
[17:02:35.849]         {
[17:02:35.849]             ...future.startTime <- base::Sys.time()
[17:02:35.849]             {
[17:02:35.849]                 {
[17:02:35.849]                   {
[17:02:35.849]                     {
[17:02:35.849]                       {
[17:02:35.849]                         base::local({
[17:02:35.849]                           has_future <- base::requireNamespace("future", 
[17:02:35.849]                             quietly = TRUE)
[17:02:35.849]                           if (has_future) {
[17:02:35.849]                             ns <- base::getNamespace("future")
[17:02:35.849]                             version <- ns[[".package"]][["version"]]
[17:02:35.849]                             if (is.null(version)) 
[17:02:35.849]                               version <- utils::packageVersion("future")
[17:02:35.849]                           }
[17:02:35.849]                           else {
[17:02:35.849]                             version <- NULL
[17:02:35.849]                           }
[17:02:35.849]                           if (!has_future || version < "1.8.0") {
[17:02:35.849]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.849]                               "", base::R.version$version.string), 
[17:02:35.849]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:35.849]                                 base::R.version$platform, 8 * 
[17:02:35.849]                                   base::.Machine$sizeof.pointer), 
[17:02:35.849]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.849]                                 "release", "version")], collapse = " "), 
[17:02:35.849]                               hostname = base::Sys.info()[["nodename"]])
[17:02:35.849]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.849]                               info)
[17:02:35.849]                             info <- base::paste(info, collapse = "; ")
[17:02:35.849]                             if (!has_future) {
[17:02:35.849]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.849]                                 info)
[17:02:35.849]                             }
[17:02:35.849]                             else {
[17:02:35.849]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.849]                                 info, version)
[17:02:35.849]                             }
[17:02:35.849]                             base::stop(msg)
[17:02:35.849]                           }
[17:02:35.849]                         })
[17:02:35.849]                       }
[17:02:35.849]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:35.849]                       base::options(mc.cores = 1L)
[17:02:35.849]                     }
[17:02:35.849]                     base::local({
[17:02:35.849]                       for (pkg in "stats") {
[17:02:35.849]                         base::loadNamespace(pkg)
[17:02:35.849]                         base::library(pkg, character.only = TRUE)
[17:02:35.849]                       }
[17:02:35.849]                     })
[17:02:35.849]                   }
[17:02:35.849]                   ...future.strategy.old <- future::plan("list")
[17:02:35.849]                   options(future.plan = NULL)
[17:02:35.849]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.849]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.849]                 }
[17:02:35.849]                 ...future.workdir <- getwd()
[17:02:35.849]             }
[17:02:35.849]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.849]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.849]         }
[17:02:35.849]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.849]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.849]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.849]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.849]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.849]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.849]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.849]             base::names(...future.oldOptions))
[17:02:35.849]     }
[17:02:35.849]     if (FALSE) {
[17:02:35.849]     }
[17:02:35.849]     else {
[17:02:35.849]         if (TRUE) {
[17:02:35.849]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.849]                 open = "w")
[17:02:35.849]         }
[17:02:35.849]         else {
[17:02:35.849]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.849]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.849]         }
[17:02:35.849]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.849]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.849]             base::sink(type = "output", split = FALSE)
[17:02:35.849]             base::close(...future.stdout)
[17:02:35.849]         }, add = TRUE)
[17:02:35.849]     }
[17:02:35.849]     ...future.frame <- base::sys.nframe()
[17:02:35.849]     ...future.conditions <- base::list()
[17:02:35.849]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.849]     if (FALSE) {
[17:02:35.849]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.849]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.849]     }
[17:02:35.849]     ...future.result <- base::tryCatch({
[17:02:35.849]         base::withCallingHandlers({
[17:02:35.849]             ...future.value <- base::withVisible(base::local({
[17:02:35.849]                 withCallingHandlers({
[17:02:35.849]                   {
[17:02:35.849]                     lm(weight ~ group - 1)
[17:02:35.849]                   }
[17:02:35.849]                 }, immediateCondition = function(cond) {
[17:02:35.849]                   save_rds <- function (object, pathname, ...) 
[17:02:35.849]                   {
[17:02:35.849]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:35.849]                     if (file_test("-f", pathname_tmp)) {
[17:02:35.849]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.849]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:35.849]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.849]                         fi_tmp[["mtime"]])
[17:02:35.849]                     }
[17:02:35.849]                     tryCatch({
[17:02:35.849]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:35.849]                     }, error = function(ex) {
[17:02:35.849]                       msg <- conditionMessage(ex)
[17:02:35.849]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.849]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:35.849]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.849]                         fi_tmp[["mtime"]], msg)
[17:02:35.849]                       ex$message <- msg
[17:02:35.849]                       stop(ex)
[17:02:35.849]                     })
[17:02:35.849]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:35.849]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:35.849]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:35.849]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.849]                       fi <- file.info(pathname)
[17:02:35.849]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:35.849]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.849]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:35.849]                         fi[["size"]], fi[["mtime"]])
[17:02:35.849]                       stop(msg)
[17:02:35.849]                     }
[17:02:35.849]                     invisible(pathname)
[17:02:35.849]                   }
[17:02:35.849]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:35.849]                     rootPath = tempdir()) 
[17:02:35.849]                   {
[17:02:35.849]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:35.849]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:35.849]                       tmpdir = path, fileext = ".rds")
[17:02:35.849]                     save_rds(obj, file)
[17:02:35.849]                   }
[17:02:35.849]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:35.849]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.849]                   {
[17:02:35.849]                     inherits <- base::inherits
[17:02:35.849]                     invokeRestart <- base::invokeRestart
[17:02:35.849]                     is.null <- base::is.null
[17:02:35.849]                     muffled <- FALSE
[17:02:35.849]                     if (inherits(cond, "message")) {
[17:02:35.849]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:35.849]                       if (muffled) 
[17:02:35.849]                         invokeRestart("muffleMessage")
[17:02:35.849]                     }
[17:02:35.849]                     else if (inherits(cond, "warning")) {
[17:02:35.849]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:35.849]                       if (muffled) 
[17:02:35.849]                         invokeRestart("muffleWarning")
[17:02:35.849]                     }
[17:02:35.849]                     else if (inherits(cond, "condition")) {
[17:02:35.849]                       if (!is.null(pattern)) {
[17:02:35.849]                         computeRestarts <- base::computeRestarts
[17:02:35.849]                         grepl <- base::grepl
[17:02:35.849]                         restarts <- computeRestarts(cond)
[17:02:35.849]                         for (restart in restarts) {
[17:02:35.849]                           name <- restart$name
[17:02:35.849]                           if (is.null(name)) 
[17:02:35.849]                             next
[17:02:35.849]                           if (!grepl(pattern, name)) 
[17:02:35.849]                             next
[17:02:35.849]                           invokeRestart(restart)
[17:02:35.849]                           muffled <- TRUE
[17:02:35.849]                           break
[17:02:35.849]                         }
[17:02:35.849]                       }
[17:02:35.849]                     }
[17:02:35.849]                     invisible(muffled)
[17:02:35.849]                   }
[17:02:35.849]                   muffleCondition(cond)
[17:02:35.849]                 })
[17:02:35.849]             }))
[17:02:35.849]             future::FutureResult(value = ...future.value$value, 
[17:02:35.849]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.849]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.849]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.849]                     ...future.globalenv.names))
[17:02:35.849]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.849]         }, condition = base::local({
[17:02:35.849]             c <- base::c
[17:02:35.849]             inherits <- base::inherits
[17:02:35.849]             invokeRestart <- base::invokeRestart
[17:02:35.849]             length <- base::length
[17:02:35.849]             list <- base::list
[17:02:35.849]             seq.int <- base::seq.int
[17:02:35.849]             signalCondition <- base::signalCondition
[17:02:35.849]             sys.calls <- base::sys.calls
[17:02:35.849]             `[[` <- base::`[[`
[17:02:35.849]             `+` <- base::`+`
[17:02:35.849]             `<<-` <- base::`<<-`
[17:02:35.849]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.849]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.849]                   3L)]
[17:02:35.849]             }
[17:02:35.849]             function(cond) {
[17:02:35.849]                 is_error <- inherits(cond, "error")
[17:02:35.849]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.849]                   NULL)
[17:02:35.849]                 if (is_error) {
[17:02:35.849]                   sessionInformation <- function() {
[17:02:35.849]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.849]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.849]                       search = base::search(), system = base::Sys.info())
[17:02:35.849]                   }
[17:02:35.849]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.849]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.849]                     cond$call), session = sessionInformation(), 
[17:02:35.849]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.849]                   signalCondition(cond)
[17:02:35.849]                 }
[17:02:35.849]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.849]                 "immediateCondition"))) {
[17:02:35.849]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.849]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.849]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.849]                   if (TRUE && !signal) {
[17:02:35.849]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.849]                     {
[17:02:35.849]                       inherits <- base::inherits
[17:02:35.849]                       invokeRestart <- base::invokeRestart
[17:02:35.849]                       is.null <- base::is.null
[17:02:35.849]                       muffled <- FALSE
[17:02:35.849]                       if (inherits(cond, "message")) {
[17:02:35.849]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.849]                         if (muffled) 
[17:02:35.849]                           invokeRestart("muffleMessage")
[17:02:35.849]                       }
[17:02:35.849]                       else if (inherits(cond, "warning")) {
[17:02:35.849]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.849]                         if (muffled) 
[17:02:35.849]                           invokeRestart("muffleWarning")
[17:02:35.849]                       }
[17:02:35.849]                       else if (inherits(cond, "condition")) {
[17:02:35.849]                         if (!is.null(pattern)) {
[17:02:35.849]                           computeRestarts <- base::computeRestarts
[17:02:35.849]                           grepl <- base::grepl
[17:02:35.849]                           restarts <- computeRestarts(cond)
[17:02:35.849]                           for (restart in restarts) {
[17:02:35.849]                             name <- restart$name
[17:02:35.849]                             if (is.null(name)) 
[17:02:35.849]                               next
[17:02:35.849]                             if (!grepl(pattern, name)) 
[17:02:35.849]                               next
[17:02:35.849]                             invokeRestart(restart)
[17:02:35.849]                             muffled <- TRUE
[17:02:35.849]                             break
[17:02:35.849]                           }
[17:02:35.849]                         }
[17:02:35.849]                       }
[17:02:35.849]                       invisible(muffled)
[17:02:35.849]                     }
[17:02:35.849]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.849]                   }
[17:02:35.849]                 }
[17:02:35.849]                 else {
[17:02:35.849]                   if (TRUE) {
[17:02:35.849]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.849]                     {
[17:02:35.849]                       inherits <- base::inherits
[17:02:35.849]                       invokeRestart <- base::invokeRestart
[17:02:35.849]                       is.null <- base::is.null
[17:02:35.849]                       muffled <- FALSE
[17:02:35.849]                       if (inherits(cond, "message")) {
[17:02:35.849]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.849]                         if (muffled) 
[17:02:35.849]                           invokeRestart("muffleMessage")
[17:02:35.849]                       }
[17:02:35.849]                       else if (inherits(cond, "warning")) {
[17:02:35.849]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.849]                         if (muffled) 
[17:02:35.849]                           invokeRestart("muffleWarning")
[17:02:35.849]                       }
[17:02:35.849]                       else if (inherits(cond, "condition")) {
[17:02:35.849]                         if (!is.null(pattern)) {
[17:02:35.849]                           computeRestarts <- base::computeRestarts
[17:02:35.849]                           grepl <- base::grepl
[17:02:35.849]                           restarts <- computeRestarts(cond)
[17:02:35.849]                           for (restart in restarts) {
[17:02:35.849]                             name <- restart$name
[17:02:35.849]                             if (is.null(name)) 
[17:02:35.849]                               next
[17:02:35.849]                             if (!grepl(pattern, name)) 
[17:02:35.849]                               next
[17:02:35.849]                             invokeRestart(restart)
[17:02:35.849]                             muffled <- TRUE
[17:02:35.849]                             break
[17:02:35.849]                           }
[17:02:35.849]                         }
[17:02:35.849]                       }
[17:02:35.849]                       invisible(muffled)
[17:02:35.849]                     }
[17:02:35.849]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.849]                   }
[17:02:35.849]                 }
[17:02:35.849]             }
[17:02:35.849]         }))
[17:02:35.849]     }, error = function(ex) {
[17:02:35.849]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.849]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.849]                 ...future.rng), started = ...future.startTime, 
[17:02:35.849]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.849]             version = "1.8"), class = "FutureResult")
[17:02:35.849]     }, finally = {
[17:02:35.849]         if (!identical(...future.workdir, getwd())) 
[17:02:35.849]             setwd(...future.workdir)
[17:02:35.849]         {
[17:02:35.849]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.849]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.849]             }
[17:02:35.849]             base::options(...future.oldOptions)
[17:02:35.849]             if (.Platform$OS.type == "windows") {
[17:02:35.849]                 old_names <- names(...future.oldEnvVars)
[17:02:35.849]                 envs <- base::Sys.getenv()
[17:02:35.849]                 names <- names(envs)
[17:02:35.849]                 common <- intersect(names, old_names)
[17:02:35.849]                 added <- setdiff(names, old_names)
[17:02:35.849]                 removed <- setdiff(old_names, names)
[17:02:35.849]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.849]                   envs[common]]
[17:02:35.849]                 NAMES <- toupper(changed)
[17:02:35.849]                 args <- list()
[17:02:35.849]                 for (kk in seq_along(NAMES)) {
[17:02:35.849]                   name <- changed[[kk]]
[17:02:35.849]                   NAME <- NAMES[[kk]]
[17:02:35.849]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.849]                     next
[17:02:35.849]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.849]                 }
[17:02:35.849]                 NAMES <- toupper(added)
[17:02:35.849]                 for (kk in seq_along(NAMES)) {
[17:02:35.849]                   name <- added[[kk]]
[17:02:35.849]                   NAME <- NAMES[[kk]]
[17:02:35.849]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.849]                     next
[17:02:35.849]                   args[[name]] <- ""
[17:02:35.849]                 }
[17:02:35.849]                 NAMES <- toupper(removed)
[17:02:35.849]                 for (kk in seq_along(NAMES)) {
[17:02:35.849]                   name <- removed[[kk]]
[17:02:35.849]                   NAME <- NAMES[[kk]]
[17:02:35.849]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.849]                     next
[17:02:35.849]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.849]                 }
[17:02:35.849]                 if (length(args) > 0) 
[17:02:35.849]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.849]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.849]             }
[17:02:35.849]             else {
[17:02:35.849]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.849]             }
[17:02:35.849]             {
[17:02:35.849]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.849]                   0L) {
[17:02:35.849]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.849]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.849]                   base::options(opts)
[17:02:35.849]                 }
[17:02:35.849]                 {
[17:02:35.849]                   {
[17:02:35.849]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:35.849]                     NULL
[17:02:35.849]                   }
[17:02:35.849]                   options(future.plan = NULL)
[17:02:35.849]                   if (is.na(NA_character_)) 
[17:02:35.849]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.849]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.849]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.849]                     .init = FALSE)
[17:02:35.849]                 }
[17:02:35.849]             }
[17:02:35.849]         }
[17:02:35.849]     })
[17:02:35.849]     if (TRUE) {
[17:02:35.849]         base::sink(type = "output", split = FALSE)
[17:02:35.849]         if (TRUE) {
[17:02:35.849]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.849]         }
[17:02:35.849]         else {
[17:02:35.849]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.849]         }
[17:02:35.849]         base::close(...future.stdout)
[17:02:35.849]         ...future.stdout <- NULL
[17:02:35.849]     }
[17:02:35.849]     ...future.result$conditions <- ...future.conditions
[17:02:35.849]     ...future.result$finished <- base::Sys.time()
[17:02:35.849]     ...future.result
[17:02:35.849] }
[17:02:35.851] assign_globals() ...
[17:02:35.851] List of 2
[17:02:35.851]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.851]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.851]  - attr(*, "where")=List of 2
[17:02:35.851]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.851]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.851]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.851]  - attr(*, "resolved")= logi FALSE
[17:02:35.851]  - attr(*, "total_size")= num 896
[17:02:35.851]  - attr(*, "already-done")= logi TRUE
[17:02:35.855] - copied ‘weight’ to environment
[17:02:35.855] - copied ‘group’ to environment
[17:02:35.855] assign_globals() ... done
[17:02:35.856] requestCore(): workers = 2
[17:02:35.858] MulticoreFuture started
[17:02:35.858] - Launch lazy future ... done
[17:02:35.858] run() for ‘MulticoreFuture’ ... done
[17:02:35.859] result() for MulticoreFuture ...
[17:02:35.859] plan(): Setting new future strategy stack:
[17:02:35.859] List of future strategies:
[17:02:35.859] 1. sequential:
[17:02:35.859]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.859]    - tweaked: FALSE
[17:02:35.859]    - call: NULL
[17:02:35.860] plan(): nbrOfWorkers() = 1
[17:02:35.864] plan(): Setting new future strategy stack:
[17:02:35.864] List of future strategies:
[17:02:35.864] 1. multicore:
[17:02:35.864]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:35.864]    - tweaked: FALSE
[17:02:35.864]    - call: plan(strategy)
[17:02:35.870] plan(): nbrOfWorkers() = 2
[17:02:35.872] result() for MulticoreFuture ...
[17:02:35.872] result() for MulticoreFuture ... done
[17:02:35.872] result() for MulticoreFuture ... done
[17:02:35.872] result() for MulticoreFuture ...
[17:02:35.872] result() for MulticoreFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:35.875] getGlobalsAndPackages() ...
[17:02:35.875] Searching for globals...
[17:02:35.877] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.877] Searching for globals ... DONE
[17:02:35.877] Resolving globals: FALSE
[17:02:35.878] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.879] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.879] - globals: [2] ‘weight’, ‘group’
[17:02:35.879] - packages: [1] ‘stats’
[17:02:35.879] getGlobalsAndPackages() ... DONE
[17:02:35.879] run() for ‘Future’ ...
[17:02:35.880] - state: ‘created’
[17:02:35.880] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:35.886] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:35.886] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:35.886]   - Field: ‘label’
[17:02:35.887]   - Field: ‘local’
[17:02:35.887]   - Field: ‘owner’
[17:02:35.887]   - Field: ‘envir’
[17:02:35.887]   - Field: ‘workers’
[17:02:35.887]   - Field: ‘packages’
[17:02:35.887]   - Field: ‘gc’
[17:02:35.887]   - Field: ‘job’
[17:02:35.888]   - Field: ‘conditions’
[17:02:35.888]   - Field: ‘expr’
[17:02:35.888]   - Field: ‘uuid’
[17:02:35.888]   - Field: ‘seed’
[17:02:35.888]   - Field: ‘version’
[17:02:35.888]   - Field: ‘result’
[17:02:35.888]   - Field: ‘asynchronous’
[17:02:35.888]   - Field: ‘calls’
[17:02:35.889]   - Field: ‘globals’
[17:02:35.889]   - Field: ‘stdout’
[17:02:35.889]   - Field: ‘earlySignal’
[17:02:35.889]   - Field: ‘lazy’
[17:02:35.889]   - Field: ‘state’
[17:02:35.889] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:35.889] - Launch lazy future ...
[17:02:35.890] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.890] Packages needed by future strategies (n = 0): <none>
[17:02:35.890] {
[17:02:35.890]     {
[17:02:35.890]         {
[17:02:35.890]             ...future.startTime <- base::Sys.time()
[17:02:35.890]             {
[17:02:35.890]                 {
[17:02:35.890]                   {
[17:02:35.890]                     {
[17:02:35.890]                       {
[17:02:35.890]                         base::local({
[17:02:35.890]                           has_future <- base::requireNamespace("future", 
[17:02:35.890]                             quietly = TRUE)
[17:02:35.890]                           if (has_future) {
[17:02:35.890]                             ns <- base::getNamespace("future")
[17:02:35.890]                             version <- ns[[".package"]][["version"]]
[17:02:35.890]                             if (is.null(version)) 
[17:02:35.890]                               version <- utils::packageVersion("future")
[17:02:35.890]                           }
[17:02:35.890]                           else {
[17:02:35.890]                             version <- NULL
[17:02:35.890]                           }
[17:02:35.890]                           if (!has_future || version < "1.8.0") {
[17:02:35.890]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.890]                               "", base::R.version$version.string), 
[17:02:35.890]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:35.890]                                 base::R.version$platform, 8 * 
[17:02:35.890]                                   base::.Machine$sizeof.pointer), 
[17:02:35.890]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.890]                                 "release", "version")], collapse = " "), 
[17:02:35.890]                               hostname = base::Sys.info()[["nodename"]])
[17:02:35.890]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.890]                               info)
[17:02:35.890]                             info <- base::paste(info, collapse = "; ")
[17:02:35.890]                             if (!has_future) {
[17:02:35.890]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.890]                                 info)
[17:02:35.890]                             }
[17:02:35.890]                             else {
[17:02:35.890]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.890]                                 info, version)
[17:02:35.890]                             }
[17:02:35.890]                             base::stop(msg)
[17:02:35.890]                           }
[17:02:35.890]                         })
[17:02:35.890]                       }
[17:02:35.890]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:35.890]                       base::options(mc.cores = 1L)
[17:02:35.890]                     }
[17:02:35.890]                     base::local({
[17:02:35.890]                       for (pkg in "stats") {
[17:02:35.890]                         base::loadNamespace(pkg)
[17:02:35.890]                         base::library(pkg, character.only = TRUE)
[17:02:35.890]                       }
[17:02:35.890]                     })
[17:02:35.890]                   }
[17:02:35.890]                   ...future.strategy.old <- future::plan("list")
[17:02:35.890]                   options(future.plan = NULL)
[17:02:35.890]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.890]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.890]                 }
[17:02:35.890]                 ...future.workdir <- getwd()
[17:02:35.890]             }
[17:02:35.890]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.890]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.890]         }
[17:02:35.890]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.890]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.890]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.890]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.890]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.890]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.890]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.890]             base::names(...future.oldOptions))
[17:02:35.890]     }
[17:02:35.890]     if (FALSE) {
[17:02:35.890]     }
[17:02:35.890]     else {
[17:02:35.890]         if (TRUE) {
[17:02:35.890]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.890]                 open = "w")
[17:02:35.890]         }
[17:02:35.890]         else {
[17:02:35.890]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.890]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.890]         }
[17:02:35.890]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.890]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.890]             base::sink(type = "output", split = FALSE)
[17:02:35.890]             base::close(...future.stdout)
[17:02:35.890]         }, add = TRUE)
[17:02:35.890]     }
[17:02:35.890]     ...future.frame <- base::sys.nframe()
[17:02:35.890]     ...future.conditions <- base::list()
[17:02:35.890]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.890]     if (FALSE) {
[17:02:35.890]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.890]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.890]     }
[17:02:35.890]     ...future.result <- base::tryCatch({
[17:02:35.890]         base::withCallingHandlers({
[17:02:35.890]             ...future.value <- base::withVisible(base::local({
[17:02:35.890]                 withCallingHandlers({
[17:02:35.890]                   {
[17:02:35.890]                     lm(weight ~ group - 1)
[17:02:35.890]                   }
[17:02:35.890]                 }, immediateCondition = function(cond) {
[17:02:35.890]                   save_rds <- function (object, pathname, ...) 
[17:02:35.890]                   {
[17:02:35.890]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:35.890]                     if (file_test("-f", pathname_tmp)) {
[17:02:35.890]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.890]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:35.890]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.890]                         fi_tmp[["mtime"]])
[17:02:35.890]                     }
[17:02:35.890]                     tryCatch({
[17:02:35.890]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:35.890]                     }, error = function(ex) {
[17:02:35.890]                       msg <- conditionMessage(ex)
[17:02:35.890]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.890]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:35.890]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.890]                         fi_tmp[["mtime"]], msg)
[17:02:35.890]                       ex$message <- msg
[17:02:35.890]                       stop(ex)
[17:02:35.890]                     })
[17:02:35.890]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:35.890]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:35.890]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:35.890]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.890]                       fi <- file.info(pathname)
[17:02:35.890]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:35.890]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.890]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:35.890]                         fi[["size"]], fi[["mtime"]])
[17:02:35.890]                       stop(msg)
[17:02:35.890]                     }
[17:02:35.890]                     invisible(pathname)
[17:02:35.890]                   }
[17:02:35.890]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:35.890]                     rootPath = tempdir()) 
[17:02:35.890]                   {
[17:02:35.890]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:35.890]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:35.890]                       tmpdir = path, fileext = ".rds")
[17:02:35.890]                     save_rds(obj, file)
[17:02:35.890]                   }
[17:02:35.890]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:35.890]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.890]                   {
[17:02:35.890]                     inherits <- base::inherits
[17:02:35.890]                     invokeRestart <- base::invokeRestart
[17:02:35.890]                     is.null <- base::is.null
[17:02:35.890]                     muffled <- FALSE
[17:02:35.890]                     if (inherits(cond, "message")) {
[17:02:35.890]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:35.890]                       if (muffled) 
[17:02:35.890]                         invokeRestart("muffleMessage")
[17:02:35.890]                     }
[17:02:35.890]                     else if (inherits(cond, "warning")) {
[17:02:35.890]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:35.890]                       if (muffled) 
[17:02:35.890]                         invokeRestart("muffleWarning")
[17:02:35.890]                     }
[17:02:35.890]                     else if (inherits(cond, "condition")) {
[17:02:35.890]                       if (!is.null(pattern)) {
[17:02:35.890]                         computeRestarts <- base::computeRestarts
[17:02:35.890]                         grepl <- base::grepl
[17:02:35.890]                         restarts <- computeRestarts(cond)
[17:02:35.890]                         for (restart in restarts) {
[17:02:35.890]                           name <- restart$name
[17:02:35.890]                           if (is.null(name)) 
[17:02:35.890]                             next
[17:02:35.890]                           if (!grepl(pattern, name)) 
[17:02:35.890]                             next
[17:02:35.890]                           invokeRestart(restart)
[17:02:35.890]                           muffled <- TRUE
[17:02:35.890]                           break
[17:02:35.890]                         }
[17:02:35.890]                       }
[17:02:35.890]                     }
[17:02:35.890]                     invisible(muffled)
[17:02:35.890]                   }
[17:02:35.890]                   muffleCondition(cond)
[17:02:35.890]                 })
[17:02:35.890]             }))
[17:02:35.890]             future::FutureResult(value = ...future.value$value, 
[17:02:35.890]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.890]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.890]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.890]                     ...future.globalenv.names))
[17:02:35.890]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.890]         }, condition = base::local({
[17:02:35.890]             c <- base::c
[17:02:35.890]             inherits <- base::inherits
[17:02:35.890]             invokeRestart <- base::invokeRestart
[17:02:35.890]             length <- base::length
[17:02:35.890]             list <- base::list
[17:02:35.890]             seq.int <- base::seq.int
[17:02:35.890]             signalCondition <- base::signalCondition
[17:02:35.890]             sys.calls <- base::sys.calls
[17:02:35.890]             `[[` <- base::`[[`
[17:02:35.890]             `+` <- base::`+`
[17:02:35.890]             `<<-` <- base::`<<-`
[17:02:35.890]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.890]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.890]                   3L)]
[17:02:35.890]             }
[17:02:35.890]             function(cond) {
[17:02:35.890]                 is_error <- inherits(cond, "error")
[17:02:35.890]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.890]                   NULL)
[17:02:35.890]                 if (is_error) {
[17:02:35.890]                   sessionInformation <- function() {
[17:02:35.890]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.890]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.890]                       search = base::search(), system = base::Sys.info())
[17:02:35.890]                   }
[17:02:35.890]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.890]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.890]                     cond$call), session = sessionInformation(), 
[17:02:35.890]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.890]                   signalCondition(cond)
[17:02:35.890]                 }
[17:02:35.890]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.890]                 "immediateCondition"))) {
[17:02:35.890]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.890]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.890]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.890]                   if (TRUE && !signal) {
[17:02:35.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.890]                     {
[17:02:35.890]                       inherits <- base::inherits
[17:02:35.890]                       invokeRestart <- base::invokeRestart
[17:02:35.890]                       is.null <- base::is.null
[17:02:35.890]                       muffled <- FALSE
[17:02:35.890]                       if (inherits(cond, "message")) {
[17:02:35.890]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.890]                         if (muffled) 
[17:02:35.890]                           invokeRestart("muffleMessage")
[17:02:35.890]                       }
[17:02:35.890]                       else if (inherits(cond, "warning")) {
[17:02:35.890]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.890]                         if (muffled) 
[17:02:35.890]                           invokeRestart("muffleWarning")
[17:02:35.890]                       }
[17:02:35.890]                       else if (inherits(cond, "condition")) {
[17:02:35.890]                         if (!is.null(pattern)) {
[17:02:35.890]                           computeRestarts <- base::computeRestarts
[17:02:35.890]                           grepl <- base::grepl
[17:02:35.890]                           restarts <- computeRestarts(cond)
[17:02:35.890]                           for (restart in restarts) {
[17:02:35.890]                             name <- restart$name
[17:02:35.890]                             if (is.null(name)) 
[17:02:35.890]                               next
[17:02:35.890]                             if (!grepl(pattern, name)) 
[17:02:35.890]                               next
[17:02:35.890]                             invokeRestart(restart)
[17:02:35.890]                             muffled <- TRUE
[17:02:35.890]                             break
[17:02:35.890]                           }
[17:02:35.890]                         }
[17:02:35.890]                       }
[17:02:35.890]                       invisible(muffled)
[17:02:35.890]                     }
[17:02:35.890]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.890]                   }
[17:02:35.890]                 }
[17:02:35.890]                 else {
[17:02:35.890]                   if (TRUE) {
[17:02:35.890]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.890]                     {
[17:02:35.890]                       inherits <- base::inherits
[17:02:35.890]                       invokeRestart <- base::invokeRestart
[17:02:35.890]                       is.null <- base::is.null
[17:02:35.890]                       muffled <- FALSE
[17:02:35.890]                       if (inherits(cond, "message")) {
[17:02:35.890]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.890]                         if (muffled) 
[17:02:35.890]                           invokeRestart("muffleMessage")
[17:02:35.890]                       }
[17:02:35.890]                       else if (inherits(cond, "warning")) {
[17:02:35.890]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.890]                         if (muffled) 
[17:02:35.890]                           invokeRestart("muffleWarning")
[17:02:35.890]                       }
[17:02:35.890]                       else if (inherits(cond, "condition")) {
[17:02:35.890]                         if (!is.null(pattern)) {
[17:02:35.890]                           computeRestarts <- base::computeRestarts
[17:02:35.890]                           grepl <- base::grepl
[17:02:35.890]                           restarts <- computeRestarts(cond)
[17:02:35.890]                           for (restart in restarts) {
[17:02:35.890]                             name <- restart$name
[17:02:35.890]                             if (is.null(name)) 
[17:02:35.890]                               next
[17:02:35.890]                             if (!grepl(pattern, name)) 
[17:02:35.890]                               next
[17:02:35.890]                             invokeRestart(restart)
[17:02:35.890]                             muffled <- TRUE
[17:02:35.890]                             break
[17:02:35.890]                           }
[17:02:35.890]                         }
[17:02:35.890]                       }
[17:02:35.890]                       invisible(muffled)
[17:02:35.890]                     }
[17:02:35.890]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.890]                   }
[17:02:35.890]                 }
[17:02:35.890]             }
[17:02:35.890]         }))
[17:02:35.890]     }, error = function(ex) {
[17:02:35.890]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.890]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.890]                 ...future.rng), started = ...future.startTime, 
[17:02:35.890]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.890]             version = "1.8"), class = "FutureResult")
[17:02:35.890]     }, finally = {
[17:02:35.890]         if (!identical(...future.workdir, getwd())) 
[17:02:35.890]             setwd(...future.workdir)
[17:02:35.890]         {
[17:02:35.890]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.890]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.890]             }
[17:02:35.890]             base::options(...future.oldOptions)
[17:02:35.890]             if (.Platform$OS.type == "windows") {
[17:02:35.890]                 old_names <- names(...future.oldEnvVars)
[17:02:35.890]                 envs <- base::Sys.getenv()
[17:02:35.890]                 names <- names(envs)
[17:02:35.890]                 common <- intersect(names, old_names)
[17:02:35.890]                 added <- setdiff(names, old_names)
[17:02:35.890]                 removed <- setdiff(old_names, names)
[17:02:35.890]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.890]                   envs[common]]
[17:02:35.890]                 NAMES <- toupper(changed)
[17:02:35.890]                 args <- list()
[17:02:35.890]                 for (kk in seq_along(NAMES)) {
[17:02:35.890]                   name <- changed[[kk]]
[17:02:35.890]                   NAME <- NAMES[[kk]]
[17:02:35.890]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.890]                     next
[17:02:35.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.890]                 }
[17:02:35.890]                 NAMES <- toupper(added)
[17:02:35.890]                 for (kk in seq_along(NAMES)) {
[17:02:35.890]                   name <- added[[kk]]
[17:02:35.890]                   NAME <- NAMES[[kk]]
[17:02:35.890]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.890]                     next
[17:02:35.890]                   args[[name]] <- ""
[17:02:35.890]                 }
[17:02:35.890]                 NAMES <- toupper(removed)
[17:02:35.890]                 for (kk in seq_along(NAMES)) {
[17:02:35.890]                   name <- removed[[kk]]
[17:02:35.890]                   NAME <- NAMES[[kk]]
[17:02:35.890]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.890]                     next
[17:02:35.890]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.890]                 }
[17:02:35.890]                 if (length(args) > 0) 
[17:02:35.890]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.890]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.890]             }
[17:02:35.890]             else {
[17:02:35.890]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.890]             }
[17:02:35.890]             {
[17:02:35.890]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.890]                   0L) {
[17:02:35.890]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.890]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.890]                   base::options(opts)
[17:02:35.890]                 }
[17:02:35.890]                 {
[17:02:35.890]                   {
[17:02:35.890]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:35.890]                     NULL
[17:02:35.890]                   }
[17:02:35.890]                   options(future.plan = NULL)
[17:02:35.890]                   if (is.na(NA_character_)) 
[17:02:35.890]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.890]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.890]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.890]                     .init = FALSE)
[17:02:35.890]                 }
[17:02:35.890]             }
[17:02:35.890]         }
[17:02:35.890]     })
[17:02:35.890]     if (TRUE) {
[17:02:35.890]         base::sink(type = "output", split = FALSE)
[17:02:35.890]         if (TRUE) {
[17:02:35.890]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.890]         }
[17:02:35.890]         else {
[17:02:35.890]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.890]         }
[17:02:35.890]         base::close(...future.stdout)
[17:02:35.890]         ...future.stdout <- NULL
[17:02:35.890]     }
[17:02:35.890]     ...future.result$conditions <- ...future.conditions
[17:02:35.890]     ...future.result$finished <- base::Sys.time()
[17:02:35.890]     ...future.result
[17:02:35.890] }
[17:02:35.893] assign_globals() ...
[17:02:35.893] List of 2
[17:02:35.893]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.893]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.893]  - attr(*, "where")=List of 2
[17:02:35.893]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.893]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.893]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.893]  - attr(*, "resolved")= logi FALSE
[17:02:35.893]  - attr(*, "total_size")= num 896
[17:02:35.893]  - attr(*, "already-done")= logi TRUE
[17:02:35.897] - copied ‘weight’ to environment
[17:02:35.897] - copied ‘group’ to environment
[17:02:35.897] assign_globals() ... done
[17:02:35.897] requestCore(): workers = 2
[17:02:35.899] MulticoreFuture started
[17:02:35.900] - Launch lazy future ... done
[17:02:35.900] run() for ‘MulticoreFuture’ ... done
[17:02:35.900] result() for MulticoreFuture ...
[17:02:35.901] plan(): Setting new future strategy stack:
[17:02:35.901] List of future strategies:
[17:02:35.901] 1. sequential:
[17:02:35.901]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.901]    - tweaked: FALSE
[17:02:35.901]    - call: NULL
[17:02:35.902] plan(): nbrOfWorkers() = 1
[17:02:35.906] plan(): Setting new future strategy stack:
[17:02:35.906] List of future strategies:
[17:02:35.906] 1. multicore:
[17:02:35.906]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:35.906]    - tweaked: FALSE
[17:02:35.906]    - call: plan(strategy)
[17:02:35.911] plan(): nbrOfWorkers() = 2
[17:02:35.913] result() for MulticoreFuture ...
[17:02:35.913] result() for MulticoreFuture ... done
[17:02:35.914] result() for MulticoreFuture ... done
[17:02:35.914] result() for MulticoreFuture ...
[17:02:35.914] result() for MulticoreFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:35.917] getGlobalsAndPackages() ...
[17:02:35.917] Searching for globals...
[17:02:35.919] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:35.919] Searching for globals ... DONE
[17:02:35.920] Resolving globals: FALSE
[17:02:35.920] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:35.921] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:35.921] - globals: [2] ‘weight’, ‘group’
[17:02:35.921] - packages: [1] ‘stats’
[17:02:35.921] getGlobalsAndPackages() ... DONE
[17:02:35.922] run() for ‘Future’ ...
[17:02:35.922] - state: ‘created’
[17:02:35.922] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:35.926] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:35.927] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:35.927]   - Field: ‘label’
[17:02:35.927]   - Field: ‘local’
[17:02:35.927]   - Field: ‘owner’
[17:02:35.927]   - Field: ‘envir’
[17:02:35.927]   - Field: ‘workers’
[17:02:35.927]   - Field: ‘packages’
[17:02:35.928]   - Field: ‘gc’
[17:02:35.928]   - Field: ‘job’
[17:02:35.928]   - Field: ‘conditions’
[17:02:35.928]   - Field: ‘expr’
[17:02:35.928]   - Field: ‘uuid’
[17:02:35.928]   - Field: ‘seed’
[17:02:35.928]   - Field: ‘version’
[17:02:35.928]   - Field: ‘result’
[17:02:35.928]   - Field: ‘asynchronous’
[17:02:35.929]   - Field: ‘calls’
[17:02:35.929]   - Field: ‘globals’
[17:02:35.929]   - Field: ‘stdout’
[17:02:35.929]   - Field: ‘earlySignal’
[17:02:35.929]   - Field: ‘lazy’
[17:02:35.929]   - Field: ‘state’
[17:02:35.929] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:35.929] - Launch lazy future ...
[17:02:35.930] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.930] Packages needed by future strategies (n = 0): <none>
[17:02:35.931] {
[17:02:35.931]     {
[17:02:35.931]         {
[17:02:35.931]             ...future.startTime <- base::Sys.time()
[17:02:35.931]             {
[17:02:35.931]                 {
[17:02:35.931]                   {
[17:02:35.931]                     {
[17:02:35.931]                       {
[17:02:35.931]                         base::local({
[17:02:35.931]                           has_future <- base::requireNamespace("future", 
[17:02:35.931]                             quietly = TRUE)
[17:02:35.931]                           if (has_future) {
[17:02:35.931]                             ns <- base::getNamespace("future")
[17:02:35.931]                             version <- ns[[".package"]][["version"]]
[17:02:35.931]                             if (is.null(version)) 
[17:02:35.931]                               version <- utils::packageVersion("future")
[17:02:35.931]                           }
[17:02:35.931]                           else {
[17:02:35.931]                             version <- NULL
[17:02:35.931]                           }
[17:02:35.931]                           if (!has_future || version < "1.8.0") {
[17:02:35.931]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.931]                               "", base::R.version$version.string), 
[17:02:35.931]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:35.931]                                 base::R.version$platform, 8 * 
[17:02:35.931]                                   base::.Machine$sizeof.pointer), 
[17:02:35.931]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.931]                                 "release", "version")], collapse = " "), 
[17:02:35.931]                               hostname = base::Sys.info()[["nodename"]])
[17:02:35.931]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.931]                               info)
[17:02:35.931]                             info <- base::paste(info, collapse = "; ")
[17:02:35.931]                             if (!has_future) {
[17:02:35.931]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.931]                                 info)
[17:02:35.931]                             }
[17:02:35.931]                             else {
[17:02:35.931]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.931]                                 info, version)
[17:02:35.931]                             }
[17:02:35.931]                             base::stop(msg)
[17:02:35.931]                           }
[17:02:35.931]                         })
[17:02:35.931]                       }
[17:02:35.931]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:35.931]                       base::options(mc.cores = 1L)
[17:02:35.931]                     }
[17:02:35.931]                     base::local({
[17:02:35.931]                       for (pkg in "stats") {
[17:02:35.931]                         base::loadNamespace(pkg)
[17:02:35.931]                         base::library(pkg, character.only = TRUE)
[17:02:35.931]                       }
[17:02:35.931]                     })
[17:02:35.931]                   }
[17:02:35.931]                   ...future.strategy.old <- future::plan("list")
[17:02:35.931]                   options(future.plan = NULL)
[17:02:35.931]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.931]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.931]                 }
[17:02:35.931]                 ...future.workdir <- getwd()
[17:02:35.931]             }
[17:02:35.931]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.931]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.931]         }
[17:02:35.931]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.931]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.931]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.931]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.931]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.931]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.931]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.931]             base::names(...future.oldOptions))
[17:02:35.931]     }
[17:02:35.931]     if (FALSE) {
[17:02:35.931]     }
[17:02:35.931]     else {
[17:02:35.931]         if (TRUE) {
[17:02:35.931]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.931]                 open = "w")
[17:02:35.931]         }
[17:02:35.931]         else {
[17:02:35.931]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.931]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.931]         }
[17:02:35.931]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.931]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.931]             base::sink(type = "output", split = FALSE)
[17:02:35.931]             base::close(...future.stdout)
[17:02:35.931]         }, add = TRUE)
[17:02:35.931]     }
[17:02:35.931]     ...future.frame <- base::sys.nframe()
[17:02:35.931]     ...future.conditions <- base::list()
[17:02:35.931]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.931]     if (FALSE) {
[17:02:35.931]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.931]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.931]     }
[17:02:35.931]     ...future.result <- base::tryCatch({
[17:02:35.931]         base::withCallingHandlers({
[17:02:35.931]             ...future.value <- base::withVisible(base::local({
[17:02:35.931]                 withCallingHandlers({
[17:02:35.931]                   {
[17:02:35.931]                     lm(weight ~ group - 1)
[17:02:35.931]                   }
[17:02:35.931]                 }, immediateCondition = function(cond) {
[17:02:35.931]                   save_rds <- function (object, pathname, ...) 
[17:02:35.931]                   {
[17:02:35.931]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:35.931]                     if (file_test("-f", pathname_tmp)) {
[17:02:35.931]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.931]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:35.931]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.931]                         fi_tmp[["mtime"]])
[17:02:35.931]                     }
[17:02:35.931]                     tryCatch({
[17:02:35.931]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:35.931]                     }, error = function(ex) {
[17:02:35.931]                       msg <- conditionMessage(ex)
[17:02:35.931]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.931]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:35.931]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.931]                         fi_tmp[["mtime"]], msg)
[17:02:35.931]                       ex$message <- msg
[17:02:35.931]                       stop(ex)
[17:02:35.931]                     })
[17:02:35.931]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:35.931]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:35.931]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:35.931]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.931]                       fi <- file.info(pathname)
[17:02:35.931]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:35.931]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.931]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:35.931]                         fi[["size"]], fi[["mtime"]])
[17:02:35.931]                       stop(msg)
[17:02:35.931]                     }
[17:02:35.931]                     invisible(pathname)
[17:02:35.931]                   }
[17:02:35.931]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:35.931]                     rootPath = tempdir()) 
[17:02:35.931]                   {
[17:02:35.931]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:35.931]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:35.931]                       tmpdir = path, fileext = ".rds")
[17:02:35.931]                     save_rds(obj, file)
[17:02:35.931]                   }
[17:02:35.931]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:35.931]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.931]                   {
[17:02:35.931]                     inherits <- base::inherits
[17:02:35.931]                     invokeRestart <- base::invokeRestart
[17:02:35.931]                     is.null <- base::is.null
[17:02:35.931]                     muffled <- FALSE
[17:02:35.931]                     if (inherits(cond, "message")) {
[17:02:35.931]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:35.931]                       if (muffled) 
[17:02:35.931]                         invokeRestart("muffleMessage")
[17:02:35.931]                     }
[17:02:35.931]                     else if (inherits(cond, "warning")) {
[17:02:35.931]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:35.931]                       if (muffled) 
[17:02:35.931]                         invokeRestart("muffleWarning")
[17:02:35.931]                     }
[17:02:35.931]                     else if (inherits(cond, "condition")) {
[17:02:35.931]                       if (!is.null(pattern)) {
[17:02:35.931]                         computeRestarts <- base::computeRestarts
[17:02:35.931]                         grepl <- base::grepl
[17:02:35.931]                         restarts <- computeRestarts(cond)
[17:02:35.931]                         for (restart in restarts) {
[17:02:35.931]                           name <- restart$name
[17:02:35.931]                           if (is.null(name)) 
[17:02:35.931]                             next
[17:02:35.931]                           if (!grepl(pattern, name)) 
[17:02:35.931]                             next
[17:02:35.931]                           invokeRestart(restart)
[17:02:35.931]                           muffled <- TRUE
[17:02:35.931]                           break
[17:02:35.931]                         }
[17:02:35.931]                       }
[17:02:35.931]                     }
[17:02:35.931]                     invisible(muffled)
[17:02:35.931]                   }
[17:02:35.931]                   muffleCondition(cond)
[17:02:35.931]                 })
[17:02:35.931]             }))
[17:02:35.931]             future::FutureResult(value = ...future.value$value, 
[17:02:35.931]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.931]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.931]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.931]                     ...future.globalenv.names))
[17:02:35.931]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.931]         }, condition = base::local({
[17:02:35.931]             c <- base::c
[17:02:35.931]             inherits <- base::inherits
[17:02:35.931]             invokeRestart <- base::invokeRestart
[17:02:35.931]             length <- base::length
[17:02:35.931]             list <- base::list
[17:02:35.931]             seq.int <- base::seq.int
[17:02:35.931]             signalCondition <- base::signalCondition
[17:02:35.931]             sys.calls <- base::sys.calls
[17:02:35.931]             `[[` <- base::`[[`
[17:02:35.931]             `+` <- base::`+`
[17:02:35.931]             `<<-` <- base::`<<-`
[17:02:35.931]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.931]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.931]                   3L)]
[17:02:35.931]             }
[17:02:35.931]             function(cond) {
[17:02:35.931]                 is_error <- inherits(cond, "error")
[17:02:35.931]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.931]                   NULL)
[17:02:35.931]                 if (is_error) {
[17:02:35.931]                   sessionInformation <- function() {
[17:02:35.931]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.931]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.931]                       search = base::search(), system = base::Sys.info())
[17:02:35.931]                   }
[17:02:35.931]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.931]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.931]                     cond$call), session = sessionInformation(), 
[17:02:35.931]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.931]                   signalCondition(cond)
[17:02:35.931]                 }
[17:02:35.931]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.931]                 "immediateCondition"))) {
[17:02:35.931]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.931]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.931]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.931]                   if (TRUE && !signal) {
[17:02:35.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.931]                     {
[17:02:35.931]                       inherits <- base::inherits
[17:02:35.931]                       invokeRestart <- base::invokeRestart
[17:02:35.931]                       is.null <- base::is.null
[17:02:35.931]                       muffled <- FALSE
[17:02:35.931]                       if (inherits(cond, "message")) {
[17:02:35.931]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.931]                         if (muffled) 
[17:02:35.931]                           invokeRestart("muffleMessage")
[17:02:35.931]                       }
[17:02:35.931]                       else if (inherits(cond, "warning")) {
[17:02:35.931]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.931]                         if (muffled) 
[17:02:35.931]                           invokeRestart("muffleWarning")
[17:02:35.931]                       }
[17:02:35.931]                       else if (inherits(cond, "condition")) {
[17:02:35.931]                         if (!is.null(pattern)) {
[17:02:35.931]                           computeRestarts <- base::computeRestarts
[17:02:35.931]                           grepl <- base::grepl
[17:02:35.931]                           restarts <- computeRestarts(cond)
[17:02:35.931]                           for (restart in restarts) {
[17:02:35.931]                             name <- restart$name
[17:02:35.931]                             if (is.null(name)) 
[17:02:35.931]                               next
[17:02:35.931]                             if (!grepl(pattern, name)) 
[17:02:35.931]                               next
[17:02:35.931]                             invokeRestart(restart)
[17:02:35.931]                             muffled <- TRUE
[17:02:35.931]                             break
[17:02:35.931]                           }
[17:02:35.931]                         }
[17:02:35.931]                       }
[17:02:35.931]                       invisible(muffled)
[17:02:35.931]                     }
[17:02:35.931]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.931]                   }
[17:02:35.931]                 }
[17:02:35.931]                 else {
[17:02:35.931]                   if (TRUE) {
[17:02:35.931]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.931]                     {
[17:02:35.931]                       inherits <- base::inherits
[17:02:35.931]                       invokeRestart <- base::invokeRestart
[17:02:35.931]                       is.null <- base::is.null
[17:02:35.931]                       muffled <- FALSE
[17:02:35.931]                       if (inherits(cond, "message")) {
[17:02:35.931]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.931]                         if (muffled) 
[17:02:35.931]                           invokeRestart("muffleMessage")
[17:02:35.931]                       }
[17:02:35.931]                       else if (inherits(cond, "warning")) {
[17:02:35.931]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.931]                         if (muffled) 
[17:02:35.931]                           invokeRestart("muffleWarning")
[17:02:35.931]                       }
[17:02:35.931]                       else if (inherits(cond, "condition")) {
[17:02:35.931]                         if (!is.null(pattern)) {
[17:02:35.931]                           computeRestarts <- base::computeRestarts
[17:02:35.931]                           grepl <- base::grepl
[17:02:35.931]                           restarts <- computeRestarts(cond)
[17:02:35.931]                           for (restart in restarts) {
[17:02:35.931]                             name <- restart$name
[17:02:35.931]                             if (is.null(name)) 
[17:02:35.931]                               next
[17:02:35.931]                             if (!grepl(pattern, name)) 
[17:02:35.931]                               next
[17:02:35.931]                             invokeRestart(restart)
[17:02:35.931]                             muffled <- TRUE
[17:02:35.931]                             break
[17:02:35.931]                           }
[17:02:35.931]                         }
[17:02:35.931]                       }
[17:02:35.931]                       invisible(muffled)
[17:02:35.931]                     }
[17:02:35.931]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.931]                   }
[17:02:35.931]                 }
[17:02:35.931]             }
[17:02:35.931]         }))
[17:02:35.931]     }, error = function(ex) {
[17:02:35.931]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.931]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.931]                 ...future.rng), started = ...future.startTime, 
[17:02:35.931]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.931]             version = "1.8"), class = "FutureResult")
[17:02:35.931]     }, finally = {
[17:02:35.931]         if (!identical(...future.workdir, getwd())) 
[17:02:35.931]             setwd(...future.workdir)
[17:02:35.931]         {
[17:02:35.931]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.931]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.931]             }
[17:02:35.931]             base::options(...future.oldOptions)
[17:02:35.931]             if (.Platform$OS.type == "windows") {
[17:02:35.931]                 old_names <- names(...future.oldEnvVars)
[17:02:35.931]                 envs <- base::Sys.getenv()
[17:02:35.931]                 names <- names(envs)
[17:02:35.931]                 common <- intersect(names, old_names)
[17:02:35.931]                 added <- setdiff(names, old_names)
[17:02:35.931]                 removed <- setdiff(old_names, names)
[17:02:35.931]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.931]                   envs[common]]
[17:02:35.931]                 NAMES <- toupper(changed)
[17:02:35.931]                 args <- list()
[17:02:35.931]                 for (kk in seq_along(NAMES)) {
[17:02:35.931]                   name <- changed[[kk]]
[17:02:35.931]                   NAME <- NAMES[[kk]]
[17:02:35.931]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.931]                     next
[17:02:35.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.931]                 }
[17:02:35.931]                 NAMES <- toupper(added)
[17:02:35.931]                 for (kk in seq_along(NAMES)) {
[17:02:35.931]                   name <- added[[kk]]
[17:02:35.931]                   NAME <- NAMES[[kk]]
[17:02:35.931]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.931]                     next
[17:02:35.931]                   args[[name]] <- ""
[17:02:35.931]                 }
[17:02:35.931]                 NAMES <- toupper(removed)
[17:02:35.931]                 for (kk in seq_along(NAMES)) {
[17:02:35.931]                   name <- removed[[kk]]
[17:02:35.931]                   NAME <- NAMES[[kk]]
[17:02:35.931]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.931]                     next
[17:02:35.931]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.931]                 }
[17:02:35.931]                 if (length(args) > 0) 
[17:02:35.931]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.931]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.931]             }
[17:02:35.931]             else {
[17:02:35.931]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.931]             }
[17:02:35.931]             {
[17:02:35.931]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.931]                   0L) {
[17:02:35.931]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.931]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.931]                   base::options(opts)
[17:02:35.931]                 }
[17:02:35.931]                 {
[17:02:35.931]                   {
[17:02:35.931]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:35.931]                     NULL
[17:02:35.931]                   }
[17:02:35.931]                   options(future.plan = NULL)
[17:02:35.931]                   if (is.na(NA_character_)) 
[17:02:35.931]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.931]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.931]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.931]                     .init = FALSE)
[17:02:35.931]                 }
[17:02:35.931]             }
[17:02:35.931]         }
[17:02:35.931]     })
[17:02:35.931]     if (TRUE) {
[17:02:35.931]         base::sink(type = "output", split = FALSE)
[17:02:35.931]         if (TRUE) {
[17:02:35.931]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.931]         }
[17:02:35.931]         else {
[17:02:35.931]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.931]         }
[17:02:35.931]         base::close(...future.stdout)
[17:02:35.931]         ...future.stdout <- NULL
[17:02:35.931]     }
[17:02:35.931]     ...future.result$conditions <- ...future.conditions
[17:02:35.931]     ...future.result$finished <- base::Sys.time()
[17:02:35.931]     ...future.result
[17:02:35.931] }
[17:02:35.933] assign_globals() ...
[17:02:35.933] List of 2
[17:02:35.933]  $ weight: num [1:20] 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ...
[17:02:35.933]  $ group : Factor w/ 2 levels "Ctl","Trt": 1 1 1 1 1 1 1 1 1 1 ...
[17:02:35.933]  - attr(*, "where")=List of 2
[17:02:35.933]   ..$ weight:<environment: R_EmptyEnv> 
[17:02:35.933]   ..$ group :<environment: R_EmptyEnv> 
[17:02:35.933]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.933]  - attr(*, "resolved")= logi FALSE
[17:02:35.933]  - attr(*, "total_size")= num 896
[17:02:35.933]  - attr(*, "already-done")= logi TRUE
[17:02:35.940] - copied ‘weight’ to environment
[17:02:35.940] - copied ‘group’ to environment
[17:02:35.940] assign_globals() ... done
[17:02:35.940] requestCore(): workers = 2
[17:02:35.942] MulticoreFuture started
[17:02:35.943] - Launch lazy future ... done
[17:02:35.943] run() for ‘MulticoreFuture’ ... done
[17:02:35.943] result() for MulticoreFuture ...
[17:02:35.944] plan(): Setting new future strategy stack:
[17:02:35.944] List of future strategies:
[17:02:35.944] 1. sequential:
[17:02:35.944]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.944]    - tweaked: FALSE
[17:02:35.944]    - call: NULL
[17:02:35.945] plan(): nbrOfWorkers() = 1
[17:02:35.949] plan(): Setting new future strategy stack:
[17:02:35.949] List of future strategies:
[17:02:35.949] 1. multicore:
[17:02:35.949]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:35.949]    - tweaked: FALSE
[17:02:35.949]    - call: plan(strategy)
[17:02:35.954] plan(): nbrOfWorkers() = 2
[17:02:35.957] result() for MulticoreFuture ...
[17:02:35.957] result() for MulticoreFuture ... done
[17:02:35.957] result() for MulticoreFuture ... done
[17:02:35.957] result() for MulticoreFuture ...
[17:02:35.958] result() for MulticoreFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

- Globals - one-side formulas, e.g. xtabs(~ x) ...
[17:02:35.960] getGlobalsAndPackages() ...
[17:02:35.960] Searching for globals...
[17:02:35.962] - globals found: [4] ‘{’, ‘xtabs’, ‘x’, ‘~’
[17:02:35.962] Searching for globals ... DONE
[17:02:35.962] Resolving globals: FALSE
[17:02:35.963] The total size of the 1 globals is 96 bytes (96 bytes)
[17:02:35.963] The total size of the 1 globals exported for future expression (‘{; xtabs(~x); }’) is 96 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (96 bytes of class ‘numeric’)
[17:02:35.963] - globals: [1] ‘x’
[17:02:35.964] - packages: [1] ‘stats’
[17:02:35.964] getGlobalsAndPackages() ... DONE
[17:02:35.964] run() for ‘Future’ ...
[17:02:35.964] - state: ‘created’
[17:02:35.964] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:35.969] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:35.969] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:35.969]   - Field: ‘label’
[17:02:35.969]   - Field: ‘local’
[17:02:35.969]   - Field: ‘owner’
[17:02:35.969]   - Field: ‘envir’
[17:02:35.969]   - Field: ‘workers’
[17:02:35.969]   - Field: ‘packages’
[17:02:35.970]   - Field: ‘gc’
[17:02:35.970]   - Field: ‘job’
[17:02:35.970]   - Field: ‘conditions’
[17:02:35.970]   - Field: ‘expr’
[17:02:35.970]   - Field: ‘uuid’
[17:02:35.970]   - Field: ‘seed’
[17:02:35.970]   - Field: ‘version’
[17:02:35.970]   - Field: ‘result’
[17:02:35.970]   - Field: ‘asynchronous’
[17:02:35.971]   - Field: ‘calls’
[17:02:35.971]   - Field: ‘globals’
[17:02:35.971]   - Field: ‘stdout’
[17:02:35.971]   - Field: ‘earlySignal’
[17:02:35.971]   - Field: ‘lazy’
[17:02:35.971]   - Field: ‘state’
[17:02:35.971] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:35.971] - Launch lazy future ...
[17:02:35.972] Packages needed by the future expression (n = 1): ‘stats’
[17:02:35.972] Packages needed by future strategies (n = 0): <none>
[17:02:35.972] {
[17:02:35.972]     {
[17:02:35.972]         {
[17:02:35.972]             ...future.startTime <- base::Sys.time()
[17:02:35.972]             {
[17:02:35.972]                 {
[17:02:35.972]                   {
[17:02:35.972]                     {
[17:02:35.972]                       {
[17:02:35.972]                         base::local({
[17:02:35.972]                           has_future <- base::requireNamespace("future", 
[17:02:35.972]                             quietly = TRUE)
[17:02:35.972]                           if (has_future) {
[17:02:35.972]                             ns <- base::getNamespace("future")
[17:02:35.972]                             version <- ns[[".package"]][["version"]]
[17:02:35.972]                             if (is.null(version)) 
[17:02:35.972]                               version <- utils::packageVersion("future")
[17:02:35.972]                           }
[17:02:35.972]                           else {
[17:02:35.972]                             version <- NULL
[17:02:35.972]                           }
[17:02:35.972]                           if (!has_future || version < "1.8.0") {
[17:02:35.972]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:35.972]                               "", base::R.version$version.string), 
[17:02:35.972]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:35.972]                                 base::R.version$platform, 8 * 
[17:02:35.972]                                   base::.Machine$sizeof.pointer), 
[17:02:35.972]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:35.972]                                 "release", "version")], collapse = " "), 
[17:02:35.972]                               hostname = base::Sys.info()[["nodename"]])
[17:02:35.972]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:35.972]                               info)
[17:02:35.972]                             info <- base::paste(info, collapse = "; ")
[17:02:35.972]                             if (!has_future) {
[17:02:35.972]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:35.972]                                 info)
[17:02:35.972]                             }
[17:02:35.972]                             else {
[17:02:35.972]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:35.972]                                 info, version)
[17:02:35.972]                             }
[17:02:35.972]                             base::stop(msg)
[17:02:35.972]                           }
[17:02:35.972]                         })
[17:02:35.972]                       }
[17:02:35.972]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:35.972]                       base::options(mc.cores = 1L)
[17:02:35.972]                     }
[17:02:35.972]                     base::local({
[17:02:35.972]                       for (pkg in "stats") {
[17:02:35.972]                         base::loadNamespace(pkg)
[17:02:35.972]                         base::library(pkg, character.only = TRUE)
[17:02:35.972]                       }
[17:02:35.972]                     })
[17:02:35.972]                   }
[17:02:35.972]                   ...future.strategy.old <- future::plan("list")
[17:02:35.972]                   options(future.plan = NULL)
[17:02:35.972]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.972]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:35.972]                 }
[17:02:35.972]                 ...future.workdir <- getwd()
[17:02:35.972]             }
[17:02:35.972]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:35.972]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:35.972]         }
[17:02:35.972]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:35.972]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:35.972]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:35.972]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:35.972]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:35.972]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:35.972]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:35.972]             base::names(...future.oldOptions))
[17:02:35.972]     }
[17:02:35.972]     if (FALSE) {
[17:02:35.972]     }
[17:02:35.972]     else {
[17:02:35.972]         if (TRUE) {
[17:02:35.972]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:35.972]                 open = "w")
[17:02:35.972]         }
[17:02:35.972]         else {
[17:02:35.972]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:35.972]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:35.972]         }
[17:02:35.972]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:35.972]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:35.972]             base::sink(type = "output", split = FALSE)
[17:02:35.972]             base::close(...future.stdout)
[17:02:35.972]         }, add = TRUE)
[17:02:35.972]     }
[17:02:35.972]     ...future.frame <- base::sys.nframe()
[17:02:35.972]     ...future.conditions <- base::list()
[17:02:35.972]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:35.972]     if (FALSE) {
[17:02:35.972]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:35.972]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:35.972]     }
[17:02:35.972]     ...future.result <- base::tryCatch({
[17:02:35.972]         base::withCallingHandlers({
[17:02:35.972]             ...future.value <- base::withVisible(base::local({
[17:02:35.972]                 withCallingHandlers({
[17:02:35.972]                   {
[17:02:35.972]                     xtabs(~x)
[17:02:35.972]                   }
[17:02:35.972]                 }, immediateCondition = function(cond) {
[17:02:35.972]                   save_rds <- function (object, pathname, ...) 
[17:02:35.972]                   {
[17:02:35.972]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:35.972]                     if (file_test("-f", pathname_tmp)) {
[17:02:35.972]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.972]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:35.972]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.972]                         fi_tmp[["mtime"]])
[17:02:35.972]                     }
[17:02:35.972]                     tryCatch({
[17:02:35.972]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:35.972]                     }, error = function(ex) {
[17:02:35.972]                       msg <- conditionMessage(ex)
[17:02:35.972]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.972]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:35.972]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.972]                         fi_tmp[["mtime"]], msg)
[17:02:35.972]                       ex$message <- msg
[17:02:35.972]                       stop(ex)
[17:02:35.972]                     })
[17:02:35.972]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:35.972]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:35.972]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:35.972]                       fi_tmp <- file.info(pathname_tmp)
[17:02:35.972]                       fi <- file.info(pathname)
[17:02:35.972]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:35.972]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:35.972]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:35.972]                         fi[["size"]], fi[["mtime"]])
[17:02:35.972]                       stop(msg)
[17:02:35.972]                     }
[17:02:35.972]                     invisible(pathname)
[17:02:35.972]                   }
[17:02:35.972]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:35.972]                     rootPath = tempdir()) 
[17:02:35.972]                   {
[17:02:35.972]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:35.972]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:35.972]                       tmpdir = path, fileext = ".rds")
[17:02:35.972]                     save_rds(obj, file)
[17:02:35.972]                   }
[17:02:35.972]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:35.972]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.972]                   {
[17:02:35.972]                     inherits <- base::inherits
[17:02:35.972]                     invokeRestart <- base::invokeRestart
[17:02:35.972]                     is.null <- base::is.null
[17:02:35.972]                     muffled <- FALSE
[17:02:35.972]                     if (inherits(cond, "message")) {
[17:02:35.972]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:35.972]                       if (muffled) 
[17:02:35.972]                         invokeRestart("muffleMessage")
[17:02:35.972]                     }
[17:02:35.972]                     else if (inherits(cond, "warning")) {
[17:02:35.972]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:35.972]                       if (muffled) 
[17:02:35.972]                         invokeRestart("muffleWarning")
[17:02:35.972]                     }
[17:02:35.972]                     else if (inherits(cond, "condition")) {
[17:02:35.972]                       if (!is.null(pattern)) {
[17:02:35.972]                         computeRestarts <- base::computeRestarts
[17:02:35.972]                         grepl <- base::grepl
[17:02:35.972]                         restarts <- computeRestarts(cond)
[17:02:35.972]                         for (restart in restarts) {
[17:02:35.972]                           name <- restart$name
[17:02:35.972]                           if (is.null(name)) 
[17:02:35.972]                             next
[17:02:35.972]                           if (!grepl(pattern, name)) 
[17:02:35.972]                             next
[17:02:35.972]                           invokeRestart(restart)
[17:02:35.972]                           muffled <- TRUE
[17:02:35.972]                           break
[17:02:35.972]                         }
[17:02:35.972]                       }
[17:02:35.972]                     }
[17:02:35.972]                     invisible(muffled)
[17:02:35.972]                   }
[17:02:35.972]                   muffleCondition(cond)
[17:02:35.972]                 })
[17:02:35.972]             }))
[17:02:35.972]             future::FutureResult(value = ...future.value$value, 
[17:02:35.972]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.972]                   ...future.rng), globalenv = if (FALSE) 
[17:02:35.972]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:35.972]                     ...future.globalenv.names))
[17:02:35.972]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:35.972]         }, condition = base::local({
[17:02:35.972]             c <- base::c
[17:02:35.972]             inherits <- base::inherits
[17:02:35.972]             invokeRestart <- base::invokeRestart
[17:02:35.972]             length <- base::length
[17:02:35.972]             list <- base::list
[17:02:35.972]             seq.int <- base::seq.int
[17:02:35.972]             signalCondition <- base::signalCondition
[17:02:35.972]             sys.calls <- base::sys.calls
[17:02:35.972]             `[[` <- base::`[[`
[17:02:35.972]             `+` <- base::`+`
[17:02:35.972]             `<<-` <- base::`<<-`
[17:02:35.972]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:35.972]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:35.972]                   3L)]
[17:02:35.972]             }
[17:02:35.972]             function(cond) {
[17:02:35.972]                 is_error <- inherits(cond, "error")
[17:02:35.972]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:35.972]                   NULL)
[17:02:35.972]                 if (is_error) {
[17:02:35.972]                   sessionInformation <- function() {
[17:02:35.972]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:35.972]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:35.972]                       search = base::search(), system = base::Sys.info())
[17:02:35.972]                   }
[17:02:35.972]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.972]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:35.972]                     cond$call), session = sessionInformation(), 
[17:02:35.972]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:35.972]                   signalCondition(cond)
[17:02:35.972]                 }
[17:02:35.972]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:35.972]                 "immediateCondition"))) {
[17:02:35.972]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:35.972]                   ...future.conditions[[length(...future.conditions) + 
[17:02:35.972]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:35.972]                   if (TRUE && !signal) {
[17:02:35.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.972]                     {
[17:02:35.972]                       inherits <- base::inherits
[17:02:35.972]                       invokeRestart <- base::invokeRestart
[17:02:35.972]                       is.null <- base::is.null
[17:02:35.972]                       muffled <- FALSE
[17:02:35.972]                       if (inherits(cond, "message")) {
[17:02:35.972]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.972]                         if (muffled) 
[17:02:35.972]                           invokeRestart("muffleMessage")
[17:02:35.972]                       }
[17:02:35.972]                       else if (inherits(cond, "warning")) {
[17:02:35.972]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.972]                         if (muffled) 
[17:02:35.972]                           invokeRestart("muffleWarning")
[17:02:35.972]                       }
[17:02:35.972]                       else if (inherits(cond, "condition")) {
[17:02:35.972]                         if (!is.null(pattern)) {
[17:02:35.972]                           computeRestarts <- base::computeRestarts
[17:02:35.972]                           grepl <- base::grepl
[17:02:35.972]                           restarts <- computeRestarts(cond)
[17:02:35.972]                           for (restart in restarts) {
[17:02:35.972]                             name <- restart$name
[17:02:35.972]                             if (is.null(name)) 
[17:02:35.972]                               next
[17:02:35.972]                             if (!grepl(pattern, name)) 
[17:02:35.972]                               next
[17:02:35.972]                             invokeRestart(restart)
[17:02:35.972]                             muffled <- TRUE
[17:02:35.972]                             break
[17:02:35.972]                           }
[17:02:35.972]                         }
[17:02:35.972]                       }
[17:02:35.972]                       invisible(muffled)
[17:02:35.972]                     }
[17:02:35.972]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.972]                   }
[17:02:35.972]                 }
[17:02:35.972]                 else {
[17:02:35.972]                   if (TRUE) {
[17:02:35.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:35.972]                     {
[17:02:35.972]                       inherits <- base::inherits
[17:02:35.972]                       invokeRestart <- base::invokeRestart
[17:02:35.972]                       is.null <- base::is.null
[17:02:35.972]                       muffled <- FALSE
[17:02:35.972]                       if (inherits(cond, "message")) {
[17:02:35.972]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:35.972]                         if (muffled) 
[17:02:35.972]                           invokeRestart("muffleMessage")
[17:02:35.972]                       }
[17:02:35.972]                       else if (inherits(cond, "warning")) {
[17:02:35.972]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:35.972]                         if (muffled) 
[17:02:35.972]                           invokeRestart("muffleWarning")
[17:02:35.972]                       }
[17:02:35.972]                       else if (inherits(cond, "condition")) {
[17:02:35.972]                         if (!is.null(pattern)) {
[17:02:35.972]                           computeRestarts <- base::computeRestarts
[17:02:35.972]                           grepl <- base::grepl
[17:02:35.972]                           restarts <- computeRestarts(cond)
[17:02:35.972]                           for (restart in restarts) {
[17:02:35.972]                             name <- restart$name
[17:02:35.972]                             if (is.null(name)) 
[17:02:35.972]                               next
[17:02:35.972]                             if (!grepl(pattern, name)) 
[17:02:35.972]                               next
[17:02:35.972]                             invokeRestart(restart)
[17:02:35.972]                             muffled <- TRUE
[17:02:35.972]                             break
[17:02:35.972]                           }
[17:02:35.972]                         }
[17:02:35.972]                       }
[17:02:35.972]                       invisible(muffled)
[17:02:35.972]                     }
[17:02:35.972]                     muffleCondition(cond, pattern = "^muffle")
[17:02:35.972]                   }
[17:02:35.972]                 }
[17:02:35.972]             }
[17:02:35.972]         }))
[17:02:35.972]     }, error = function(ex) {
[17:02:35.972]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:35.972]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:35.972]                 ...future.rng), started = ...future.startTime, 
[17:02:35.972]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:35.972]             version = "1.8"), class = "FutureResult")
[17:02:35.972]     }, finally = {
[17:02:35.972]         if (!identical(...future.workdir, getwd())) 
[17:02:35.972]             setwd(...future.workdir)
[17:02:35.972]         {
[17:02:35.972]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:35.972]                 ...future.oldOptions$nwarnings <- NULL
[17:02:35.972]             }
[17:02:35.972]             base::options(...future.oldOptions)
[17:02:35.972]             if (.Platform$OS.type == "windows") {
[17:02:35.972]                 old_names <- names(...future.oldEnvVars)
[17:02:35.972]                 envs <- base::Sys.getenv()
[17:02:35.972]                 names <- names(envs)
[17:02:35.972]                 common <- intersect(names, old_names)
[17:02:35.972]                 added <- setdiff(names, old_names)
[17:02:35.972]                 removed <- setdiff(old_names, names)
[17:02:35.972]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:35.972]                   envs[common]]
[17:02:35.972]                 NAMES <- toupper(changed)
[17:02:35.972]                 args <- list()
[17:02:35.972]                 for (kk in seq_along(NAMES)) {
[17:02:35.972]                   name <- changed[[kk]]
[17:02:35.972]                   NAME <- NAMES[[kk]]
[17:02:35.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.972]                     next
[17:02:35.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.972]                 }
[17:02:35.972]                 NAMES <- toupper(added)
[17:02:35.972]                 for (kk in seq_along(NAMES)) {
[17:02:35.972]                   name <- added[[kk]]
[17:02:35.972]                   NAME <- NAMES[[kk]]
[17:02:35.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.972]                     next
[17:02:35.972]                   args[[name]] <- ""
[17:02:35.972]                 }
[17:02:35.972]                 NAMES <- toupper(removed)
[17:02:35.972]                 for (kk in seq_along(NAMES)) {
[17:02:35.972]                   name <- removed[[kk]]
[17:02:35.972]                   NAME <- NAMES[[kk]]
[17:02:35.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:35.972]                     next
[17:02:35.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:35.972]                 }
[17:02:35.972]                 if (length(args) > 0) 
[17:02:35.972]                   base::do.call(base::Sys.setenv, args = args)
[17:02:35.972]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:35.972]             }
[17:02:35.972]             else {
[17:02:35.972]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:35.972]             }
[17:02:35.972]             {
[17:02:35.972]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:35.972]                   0L) {
[17:02:35.972]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:35.972]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:35.972]                   base::options(opts)
[17:02:35.972]                 }
[17:02:35.972]                 {
[17:02:35.972]                   {
[17:02:35.972]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:35.972]                     NULL
[17:02:35.972]                   }
[17:02:35.972]                   options(future.plan = NULL)
[17:02:35.972]                   if (is.na(NA_character_)) 
[17:02:35.972]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:35.972]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:35.972]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:35.972]                     .init = FALSE)
[17:02:35.972]                 }
[17:02:35.972]             }
[17:02:35.972]         }
[17:02:35.972]     })
[17:02:35.972]     if (TRUE) {
[17:02:35.972]         base::sink(type = "output", split = FALSE)
[17:02:35.972]         if (TRUE) {
[17:02:35.972]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:35.972]         }
[17:02:35.972]         else {
[17:02:35.972]             ...future.result["stdout"] <- base::list(NULL)
[17:02:35.972]         }
[17:02:35.972]         base::close(...future.stdout)
[17:02:35.972]         ...future.stdout <- NULL
[17:02:35.972]     }
[17:02:35.972]     ...future.result$conditions <- ...future.conditions
[17:02:35.972]     ...future.result$finished <- base::Sys.time()
[17:02:35.972]     ...future.result
[17:02:35.972] }
[17:02:35.975] assign_globals() ...
[17:02:35.975] List of 1
[17:02:35.975]  $ x: num [1:5] 1 1 2 2 2
[17:02:35.975]  - attr(*, "where")=List of 1
[17:02:35.975]   ..$ x:<environment: R_EmptyEnv> 
[17:02:35.975]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:35.975]  - attr(*, "resolved")= logi FALSE
[17:02:35.975]  - attr(*, "total_size")= num 96
[17:02:35.975]  - attr(*, "already-done")= logi TRUE
[17:02:35.978] - copied ‘x’ to environment
[17:02:35.978] assign_globals() ... done
[17:02:35.978] requestCore(): workers = 2
[17:02:35.981] MulticoreFuture started
[17:02:35.981] - Launch lazy future ... done
[17:02:35.981] run() for ‘MulticoreFuture’ ... done
[17:02:35.981] result() for MulticoreFuture ...
[17:02:35.982] plan(): Setting new future strategy stack:
[17:02:35.982] List of future strategies:
[17:02:35.982] 1. sequential:
[17:02:35.982]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:35.982]    - tweaked: FALSE
[17:02:35.982]    - call: NULL
[17:02:35.983] plan(): nbrOfWorkers() = 1
[17:02:35.986] plan(): Setting new future strategy stack:
[17:02:35.986] List of future strategies:
[17:02:35.986] 1. multicore:
[17:02:35.986]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:35.986]    - tweaked: FALSE
[17:02:35.986]    - call: plan(strategy)
[17:02:35.995] plan(): nbrOfWorkers() = 2
[17:02:35.996] result() for MulticoreFuture ...
[17:02:35.997] result() for MulticoreFuture ... done
[17:02:35.997] result() for MulticoreFuture ... done
[17:02:35.997] result() for MulticoreFuture ...
[17:02:35.997] result() for MulticoreFuture ... done
x
1 2 
2 3 
[17:02:35.999] getGlobalsAndPackages() ...
[17:02:35.999] Searching for globals...
[17:02:36.003] - globals found: [4] ‘{’, ‘xtabs’, ‘x’, ‘~’
[17:02:36.003] Searching for globals ... DONE
[17:02:36.003] Resolving globals: FALSE
[17:02:36.004] The total size of the 1 globals is 96 bytes (96 bytes)
[17:02:36.004] The total size of the 1 globals exported for future expression (‘{; xtabs(~x); }’) is 96 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (96 bytes of class ‘numeric’)
[17:02:36.005] - globals: [1] ‘x’
[17:02:36.005] - packages: [1] ‘stats’
[17:02:36.005] getGlobalsAndPackages() ... DONE
[17:02:36.005] run() for ‘Future’ ...
[17:02:36.005] - state: ‘created’
[17:02:36.006] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:36.010] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:36.010] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:36.010]   - Field: ‘label’
[17:02:36.010]   - Field: ‘local’
[17:02:36.010]   - Field: ‘owner’
[17:02:36.011]   - Field: ‘envir’
[17:02:36.011]   - Field: ‘workers’
[17:02:36.011]   - Field: ‘packages’
[17:02:36.011]   - Field: ‘gc’
[17:02:36.011]   - Field: ‘job’
[17:02:36.011]   - Field: ‘conditions’
[17:02:36.011]   - Field: ‘expr’
[17:02:36.011]   - Field: ‘uuid’
[17:02:36.011]   - Field: ‘seed’
[17:02:36.012]   - Field: ‘version’
[17:02:36.012]   - Field: ‘result’
[17:02:36.012]   - Field: ‘asynchronous’
[17:02:36.012]   - Field: ‘calls’
[17:02:36.012]   - Field: ‘globals’
[17:02:36.012]   - Field: ‘stdout’
[17:02:36.012]   - Field: ‘earlySignal’
[17:02:36.012]   - Field: ‘lazy’
[17:02:36.012]   - Field: ‘state’
[17:02:36.013] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:36.013] - Launch lazy future ...
[17:02:36.013] Packages needed by the future expression (n = 1): ‘stats’
[17:02:36.013] Packages needed by future strategies (n = 0): <none>
[17:02:36.014] {
[17:02:36.014]     {
[17:02:36.014]         {
[17:02:36.014]             ...future.startTime <- base::Sys.time()
[17:02:36.014]             {
[17:02:36.014]                 {
[17:02:36.014]                   {
[17:02:36.014]                     {
[17:02:36.014]                       {
[17:02:36.014]                         base::local({
[17:02:36.014]                           has_future <- base::requireNamespace("future", 
[17:02:36.014]                             quietly = TRUE)
[17:02:36.014]                           if (has_future) {
[17:02:36.014]                             ns <- base::getNamespace("future")
[17:02:36.014]                             version <- ns[[".package"]][["version"]]
[17:02:36.014]                             if (is.null(version)) 
[17:02:36.014]                               version <- utils::packageVersion("future")
[17:02:36.014]                           }
[17:02:36.014]                           else {
[17:02:36.014]                             version <- NULL
[17:02:36.014]                           }
[17:02:36.014]                           if (!has_future || version < "1.8.0") {
[17:02:36.014]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.014]                               "", base::R.version$version.string), 
[17:02:36.014]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:36.014]                                 base::R.version$platform, 8 * 
[17:02:36.014]                                   base::.Machine$sizeof.pointer), 
[17:02:36.014]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.014]                                 "release", "version")], collapse = " "), 
[17:02:36.014]                               hostname = base::Sys.info()[["nodename"]])
[17:02:36.014]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.014]                               info)
[17:02:36.014]                             info <- base::paste(info, collapse = "; ")
[17:02:36.014]                             if (!has_future) {
[17:02:36.014]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.014]                                 info)
[17:02:36.014]                             }
[17:02:36.014]                             else {
[17:02:36.014]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.014]                                 info, version)
[17:02:36.014]                             }
[17:02:36.014]                             base::stop(msg)
[17:02:36.014]                           }
[17:02:36.014]                         })
[17:02:36.014]                       }
[17:02:36.014]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.014]                       base::options(mc.cores = 1L)
[17:02:36.014]                     }
[17:02:36.014]                     base::local({
[17:02:36.014]                       for (pkg in "stats") {
[17:02:36.014]                         base::loadNamespace(pkg)
[17:02:36.014]                         base::library(pkg, character.only = TRUE)
[17:02:36.014]                       }
[17:02:36.014]                     })
[17:02:36.014]                   }
[17:02:36.014]                   ...future.strategy.old <- future::plan("list")
[17:02:36.014]                   options(future.plan = NULL)
[17:02:36.014]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.014]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.014]                 }
[17:02:36.014]                 ...future.workdir <- getwd()
[17:02:36.014]             }
[17:02:36.014]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.014]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.014]         }
[17:02:36.014]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.014]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.014]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.014]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.014]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.014]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.014]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.014]             base::names(...future.oldOptions))
[17:02:36.014]     }
[17:02:36.014]     if (FALSE) {
[17:02:36.014]     }
[17:02:36.014]     else {
[17:02:36.014]         if (TRUE) {
[17:02:36.014]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.014]                 open = "w")
[17:02:36.014]         }
[17:02:36.014]         else {
[17:02:36.014]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.014]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.014]         }
[17:02:36.014]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.014]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.014]             base::sink(type = "output", split = FALSE)
[17:02:36.014]             base::close(...future.stdout)
[17:02:36.014]         }, add = TRUE)
[17:02:36.014]     }
[17:02:36.014]     ...future.frame <- base::sys.nframe()
[17:02:36.014]     ...future.conditions <- base::list()
[17:02:36.014]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.014]     if (FALSE) {
[17:02:36.014]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.014]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.014]     }
[17:02:36.014]     ...future.result <- base::tryCatch({
[17:02:36.014]         base::withCallingHandlers({
[17:02:36.014]             ...future.value <- base::withVisible(base::local({
[17:02:36.014]                 withCallingHandlers({
[17:02:36.014]                   {
[17:02:36.014]                     xtabs(~x)
[17:02:36.014]                   }
[17:02:36.014]                 }, immediateCondition = function(cond) {
[17:02:36.014]                   save_rds <- function (object, pathname, ...) 
[17:02:36.014]                   {
[17:02:36.014]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:36.014]                     if (file_test("-f", pathname_tmp)) {
[17:02:36.014]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.014]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:36.014]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.014]                         fi_tmp[["mtime"]])
[17:02:36.014]                     }
[17:02:36.014]                     tryCatch({
[17:02:36.014]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:36.014]                     }, error = function(ex) {
[17:02:36.014]                       msg <- conditionMessage(ex)
[17:02:36.014]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.014]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:36.014]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.014]                         fi_tmp[["mtime"]], msg)
[17:02:36.014]                       ex$message <- msg
[17:02:36.014]                       stop(ex)
[17:02:36.014]                     })
[17:02:36.014]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:36.014]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:36.014]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:36.014]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.014]                       fi <- file.info(pathname)
[17:02:36.014]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:36.014]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.014]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:36.014]                         fi[["size"]], fi[["mtime"]])
[17:02:36.014]                       stop(msg)
[17:02:36.014]                     }
[17:02:36.014]                     invisible(pathname)
[17:02:36.014]                   }
[17:02:36.014]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:36.014]                     rootPath = tempdir()) 
[17:02:36.014]                   {
[17:02:36.014]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:36.014]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:36.014]                       tmpdir = path, fileext = ".rds")
[17:02:36.014]                     save_rds(obj, file)
[17:02:36.014]                   }
[17:02:36.014]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:36.014]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.014]                   {
[17:02:36.014]                     inherits <- base::inherits
[17:02:36.014]                     invokeRestart <- base::invokeRestart
[17:02:36.014]                     is.null <- base::is.null
[17:02:36.014]                     muffled <- FALSE
[17:02:36.014]                     if (inherits(cond, "message")) {
[17:02:36.014]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.014]                       if (muffled) 
[17:02:36.014]                         invokeRestart("muffleMessage")
[17:02:36.014]                     }
[17:02:36.014]                     else if (inherits(cond, "warning")) {
[17:02:36.014]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.014]                       if (muffled) 
[17:02:36.014]                         invokeRestart("muffleWarning")
[17:02:36.014]                     }
[17:02:36.014]                     else if (inherits(cond, "condition")) {
[17:02:36.014]                       if (!is.null(pattern)) {
[17:02:36.014]                         computeRestarts <- base::computeRestarts
[17:02:36.014]                         grepl <- base::grepl
[17:02:36.014]                         restarts <- computeRestarts(cond)
[17:02:36.014]                         for (restart in restarts) {
[17:02:36.014]                           name <- restart$name
[17:02:36.014]                           if (is.null(name)) 
[17:02:36.014]                             next
[17:02:36.014]                           if (!grepl(pattern, name)) 
[17:02:36.014]                             next
[17:02:36.014]                           invokeRestart(restart)
[17:02:36.014]                           muffled <- TRUE
[17:02:36.014]                           break
[17:02:36.014]                         }
[17:02:36.014]                       }
[17:02:36.014]                     }
[17:02:36.014]                     invisible(muffled)
[17:02:36.014]                   }
[17:02:36.014]                   muffleCondition(cond)
[17:02:36.014]                 })
[17:02:36.014]             }))
[17:02:36.014]             future::FutureResult(value = ...future.value$value, 
[17:02:36.014]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.014]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.014]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.014]                     ...future.globalenv.names))
[17:02:36.014]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.014]         }, condition = base::local({
[17:02:36.014]             c <- base::c
[17:02:36.014]             inherits <- base::inherits
[17:02:36.014]             invokeRestart <- base::invokeRestart
[17:02:36.014]             length <- base::length
[17:02:36.014]             list <- base::list
[17:02:36.014]             seq.int <- base::seq.int
[17:02:36.014]             signalCondition <- base::signalCondition
[17:02:36.014]             sys.calls <- base::sys.calls
[17:02:36.014]             `[[` <- base::`[[`
[17:02:36.014]             `+` <- base::`+`
[17:02:36.014]             `<<-` <- base::`<<-`
[17:02:36.014]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.014]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.014]                   3L)]
[17:02:36.014]             }
[17:02:36.014]             function(cond) {
[17:02:36.014]                 is_error <- inherits(cond, "error")
[17:02:36.014]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.014]                   NULL)
[17:02:36.014]                 if (is_error) {
[17:02:36.014]                   sessionInformation <- function() {
[17:02:36.014]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.014]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.014]                       search = base::search(), system = base::Sys.info())
[17:02:36.014]                   }
[17:02:36.014]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.014]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.014]                     cond$call), session = sessionInformation(), 
[17:02:36.014]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.014]                   signalCondition(cond)
[17:02:36.014]                 }
[17:02:36.014]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.014]                 "immediateCondition"))) {
[17:02:36.014]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.014]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.014]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.014]                   if (TRUE && !signal) {
[17:02:36.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.014]                     {
[17:02:36.014]                       inherits <- base::inherits
[17:02:36.014]                       invokeRestart <- base::invokeRestart
[17:02:36.014]                       is.null <- base::is.null
[17:02:36.014]                       muffled <- FALSE
[17:02:36.014]                       if (inherits(cond, "message")) {
[17:02:36.014]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.014]                         if (muffled) 
[17:02:36.014]                           invokeRestart("muffleMessage")
[17:02:36.014]                       }
[17:02:36.014]                       else if (inherits(cond, "warning")) {
[17:02:36.014]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.014]                         if (muffled) 
[17:02:36.014]                           invokeRestart("muffleWarning")
[17:02:36.014]                       }
[17:02:36.014]                       else if (inherits(cond, "condition")) {
[17:02:36.014]                         if (!is.null(pattern)) {
[17:02:36.014]                           computeRestarts <- base::computeRestarts
[17:02:36.014]                           grepl <- base::grepl
[17:02:36.014]                           restarts <- computeRestarts(cond)
[17:02:36.014]                           for (restart in restarts) {
[17:02:36.014]                             name <- restart$name
[17:02:36.014]                             if (is.null(name)) 
[17:02:36.014]                               next
[17:02:36.014]                             if (!grepl(pattern, name)) 
[17:02:36.014]                               next
[17:02:36.014]                             invokeRestart(restart)
[17:02:36.014]                             muffled <- TRUE
[17:02:36.014]                             break
[17:02:36.014]                           }
[17:02:36.014]                         }
[17:02:36.014]                       }
[17:02:36.014]                       invisible(muffled)
[17:02:36.014]                     }
[17:02:36.014]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.014]                   }
[17:02:36.014]                 }
[17:02:36.014]                 else {
[17:02:36.014]                   if (TRUE) {
[17:02:36.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.014]                     {
[17:02:36.014]                       inherits <- base::inherits
[17:02:36.014]                       invokeRestart <- base::invokeRestart
[17:02:36.014]                       is.null <- base::is.null
[17:02:36.014]                       muffled <- FALSE
[17:02:36.014]                       if (inherits(cond, "message")) {
[17:02:36.014]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.014]                         if (muffled) 
[17:02:36.014]                           invokeRestart("muffleMessage")
[17:02:36.014]                       }
[17:02:36.014]                       else if (inherits(cond, "warning")) {
[17:02:36.014]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.014]                         if (muffled) 
[17:02:36.014]                           invokeRestart("muffleWarning")
[17:02:36.014]                       }
[17:02:36.014]                       else if (inherits(cond, "condition")) {
[17:02:36.014]                         if (!is.null(pattern)) {
[17:02:36.014]                           computeRestarts <- base::computeRestarts
[17:02:36.014]                           grepl <- base::grepl
[17:02:36.014]                           restarts <- computeRestarts(cond)
[17:02:36.014]                           for (restart in restarts) {
[17:02:36.014]                             name <- restart$name
[17:02:36.014]                             if (is.null(name)) 
[17:02:36.014]                               next
[17:02:36.014]                             if (!grepl(pattern, name)) 
[17:02:36.014]                               next
[17:02:36.014]                             invokeRestart(restart)
[17:02:36.014]                             muffled <- TRUE
[17:02:36.014]                             break
[17:02:36.014]                           }
[17:02:36.014]                         }
[17:02:36.014]                       }
[17:02:36.014]                       invisible(muffled)
[17:02:36.014]                     }
[17:02:36.014]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.014]                   }
[17:02:36.014]                 }
[17:02:36.014]             }
[17:02:36.014]         }))
[17:02:36.014]     }, error = function(ex) {
[17:02:36.014]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.014]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.014]                 ...future.rng), started = ...future.startTime, 
[17:02:36.014]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.014]             version = "1.8"), class = "FutureResult")
[17:02:36.014]     }, finally = {
[17:02:36.014]         if (!identical(...future.workdir, getwd())) 
[17:02:36.014]             setwd(...future.workdir)
[17:02:36.014]         {
[17:02:36.014]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.014]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.014]             }
[17:02:36.014]             base::options(...future.oldOptions)
[17:02:36.014]             if (.Platform$OS.type == "windows") {
[17:02:36.014]                 old_names <- names(...future.oldEnvVars)
[17:02:36.014]                 envs <- base::Sys.getenv()
[17:02:36.014]                 names <- names(envs)
[17:02:36.014]                 common <- intersect(names, old_names)
[17:02:36.014]                 added <- setdiff(names, old_names)
[17:02:36.014]                 removed <- setdiff(old_names, names)
[17:02:36.014]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.014]                   envs[common]]
[17:02:36.014]                 NAMES <- toupper(changed)
[17:02:36.014]                 args <- list()
[17:02:36.014]                 for (kk in seq_along(NAMES)) {
[17:02:36.014]                   name <- changed[[kk]]
[17:02:36.014]                   NAME <- NAMES[[kk]]
[17:02:36.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.014]                     next
[17:02:36.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.014]                 }
[17:02:36.014]                 NAMES <- toupper(added)
[17:02:36.014]                 for (kk in seq_along(NAMES)) {
[17:02:36.014]                   name <- added[[kk]]
[17:02:36.014]                   NAME <- NAMES[[kk]]
[17:02:36.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.014]                     next
[17:02:36.014]                   args[[name]] <- ""
[17:02:36.014]                 }
[17:02:36.014]                 NAMES <- toupper(removed)
[17:02:36.014]                 for (kk in seq_along(NAMES)) {
[17:02:36.014]                   name <- removed[[kk]]
[17:02:36.014]                   NAME <- NAMES[[kk]]
[17:02:36.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.014]                     next
[17:02:36.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.014]                 }
[17:02:36.014]                 if (length(args) > 0) 
[17:02:36.014]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.014]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.014]             }
[17:02:36.014]             else {
[17:02:36.014]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.014]             }
[17:02:36.014]             {
[17:02:36.014]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.014]                   0L) {
[17:02:36.014]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.014]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.014]                   base::options(opts)
[17:02:36.014]                 }
[17:02:36.014]                 {
[17:02:36.014]                   {
[17:02:36.014]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.014]                     NULL
[17:02:36.014]                   }
[17:02:36.014]                   options(future.plan = NULL)
[17:02:36.014]                   if (is.na(NA_character_)) 
[17:02:36.014]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.014]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.014]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.014]                     .init = FALSE)
[17:02:36.014]                 }
[17:02:36.014]             }
[17:02:36.014]         }
[17:02:36.014]     })
[17:02:36.014]     if (TRUE) {
[17:02:36.014]         base::sink(type = "output", split = FALSE)
[17:02:36.014]         if (TRUE) {
[17:02:36.014]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.014]         }
[17:02:36.014]         else {
[17:02:36.014]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.014]         }
[17:02:36.014]         base::close(...future.stdout)
[17:02:36.014]         ...future.stdout <- NULL
[17:02:36.014]     }
[17:02:36.014]     ...future.result$conditions <- ...future.conditions
[17:02:36.014]     ...future.result$finished <- base::Sys.time()
[17:02:36.014]     ...future.result
[17:02:36.014] }
[17:02:36.016] assign_globals() ...
[17:02:36.016] List of 1
[17:02:36.016]  $ x: num [1:5] 1 1 2 2 2
[17:02:36.016]  - attr(*, "where")=List of 1
[17:02:36.016]   ..$ x:<environment: R_EmptyEnv> 
[17:02:36.016]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:36.016]  - attr(*, "resolved")= logi FALSE
[17:02:36.016]  - attr(*, "total_size")= num 96
[17:02:36.016]  - attr(*, "already-done")= logi TRUE
[17:02:36.019] - copied ‘x’ to environment
[17:02:36.019] assign_globals() ... done
[17:02:36.020] requestCore(): workers = 2
[17:02:36.022] MulticoreFuture started
[17:02:36.022] - Launch lazy future ... done
[17:02:36.022] run() for ‘MulticoreFuture’ ... done
[17:02:36.023] result() for MulticoreFuture ...
[17:02:36.023] plan(): Setting new future strategy stack:
[17:02:36.023] List of future strategies:
[17:02:36.023] 1. sequential:
[17:02:36.023]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:36.023]    - tweaked: FALSE
[17:02:36.023]    - call: NULL
[17:02:36.024] plan(): nbrOfWorkers() = 1
[17:02:36.027] plan(): Setting new future strategy stack:
[17:02:36.027] List of future strategies:
[17:02:36.027] 1. multicore:
[17:02:36.027]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:36.027]    - tweaked: FALSE
[17:02:36.027]    - call: plan(strategy)
[17:02:36.033] plan(): nbrOfWorkers() = 2
[17:02:36.034] result() for MulticoreFuture ...
[17:02:36.034] result() for MulticoreFuture ... done
[17:02:36.034] result() for MulticoreFuture ... done
[17:02:36.034] result() for MulticoreFuture ...
[17:02:36.035] result() for MulticoreFuture ... done
x
1 2 
2 3 
- Globals - lm(<formula>, data = cars) ...
- Globals - lm(<formula #1 (‘a’)>, data = cars) ...

Call:
lm(formula = dist ~ . - 1, data = cars)

Coefficients:
speed  
2.909  

[17:02:36.037] getGlobalsAndPackages() ...
[17:02:36.037] Searching for globals...
[17:02:36.039] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘-’, ‘.’, ‘~’, ‘cars’
[17:02:36.039] Searching for globals ... DONE
[17:02:36.040] Resolving globals: FALSE
[17:02:36.040] 
[17:02:36.040] - packages: [2] ‘stats’, ‘datasets’
[17:02:36.041] getGlobalsAndPackages() ... DONE
[17:02:36.041] run() for ‘Future’ ...
[17:02:36.041] - state: ‘created’
[17:02:36.041] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:36.045] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:36.046] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:36.046]   - Field: ‘label’
[17:02:36.046]   - Field: ‘local’
[17:02:36.046]   - Field: ‘owner’
[17:02:36.046]   - Field: ‘envir’
[17:02:36.046]   - Field: ‘workers’
[17:02:36.046]   - Field: ‘packages’
[17:02:36.047]   - Field: ‘gc’
[17:02:36.047]   - Field: ‘job’
[17:02:36.047]   - Field: ‘conditions’
[17:02:36.047]   - Field: ‘expr’
[17:02:36.047]   - Field: ‘uuid’
[17:02:36.047]   - Field: ‘seed’
[17:02:36.047]   - Field: ‘version’
[17:02:36.047]   - Field: ‘result’
[17:02:36.047]   - Field: ‘asynchronous’
[17:02:36.048]   - Field: ‘calls’
[17:02:36.048]   - Field: ‘globals’
[17:02:36.048]   - Field: ‘stdout’
[17:02:36.048]   - Field: ‘earlySignal’
[17:02:36.048]   - Field: ‘lazy’
[17:02:36.048]   - Field: ‘state’
[17:02:36.048] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:36.048] - Launch lazy future ...
[17:02:36.049] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:36.049] Packages needed by future strategies (n = 0): <none>
[17:02:36.052] {
[17:02:36.052]     {
[17:02:36.052]         {
[17:02:36.052]             ...future.startTime <- base::Sys.time()
[17:02:36.052]             {
[17:02:36.052]                 {
[17:02:36.052]                   {
[17:02:36.052]                     {
[17:02:36.052]                       {
[17:02:36.052]                         base::local({
[17:02:36.052]                           has_future <- base::requireNamespace("future", 
[17:02:36.052]                             quietly = TRUE)
[17:02:36.052]                           if (has_future) {
[17:02:36.052]                             ns <- base::getNamespace("future")
[17:02:36.052]                             version <- ns[[".package"]][["version"]]
[17:02:36.052]                             if (is.null(version)) 
[17:02:36.052]                               version <- utils::packageVersion("future")
[17:02:36.052]                           }
[17:02:36.052]                           else {
[17:02:36.052]                             version <- NULL
[17:02:36.052]                           }
[17:02:36.052]                           if (!has_future || version < "1.8.0") {
[17:02:36.052]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.052]                               "", base::R.version$version.string), 
[17:02:36.052]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:36.052]                                 base::R.version$platform, 8 * 
[17:02:36.052]                                   base::.Machine$sizeof.pointer), 
[17:02:36.052]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.052]                                 "release", "version")], collapse = " "), 
[17:02:36.052]                               hostname = base::Sys.info()[["nodename"]])
[17:02:36.052]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.052]                               info)
[17:02:36.052]                             info <- base::paste(info, collapse = "; ")
[17:02:36.052]                             if (!has_future) {
[17:02:36.052]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.052]                                 info)
[17:02:36.052]                             }
[17:02:36.052]                             else {
[17:02:36.052]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.052]                                 info, version)
[17:02:36.052]                             }
[17:02:36.052]                             base::stop(msg)
[17:02:36.052]                           }
[17:02:36.052]                         })
[17:02:36.052]                       }
[17:02:36.052]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.052]                       base::options(mc.cores = 1L)
[17:02:36.052]                     }
[17:02:36.052]                     base::local({
[17:02:36.052]                       for (pkg in c("stats", "datasets")) {
[17:02:36.052]                         base::loadNamespace(pkg)
[17:02:36.052]                         base::library(pkg, character.only = TRUE)
[17:02:36.052]                       }
[17:02:36.052]                     })
[17:02:36.052]                   }
[17:02:36.052]                   ...future.strategy.old <- future::plan("list")
[17:02:36.052]                   options(future.plan = NULL)
[17:02:36.052]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.052]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.052]                 }
[17:02:36.052]                 ...future.workdir <- getwd()
[17:02:36.052]             }
[17:02:36.052]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.052]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.052]         }
[17:02:36.052]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.052]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.052]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.052]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.052]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.052]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.052]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.052]             base::names(...future.oldOptions))
[17:02:36.052]     }
[17:02:36.052]     if (FALSE) {
[17:02:36.052]     }
[17:02:36.052]     else {
[17:02:36.052]         if (TRUE) {
[17:02:36.052]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.052]                 open = "w")
[17:02:36.052]         }
[17:02:36.052]         else {
[17:02:36.052]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.052]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.052]         }
[17:02:36.052]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.052]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.052]             base::sink(type = "output", split = FALSE)
[17:02:36.052]             base::close(...future.stdout)
[17:02:36.052]         }, add = TRUE)
[17:02:36.052]     }
[17:02:36.052]     ...future.frame <- base::sys.nframe()
[17:02:36.052]     ...future.conditions <- base::list()
[17:02:36.052]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.052]     if (FALSE) {
[17:02:36.052]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.052]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.052]     }
[17:02:36.052]     ...future.result <- base::tryCatch({
[17:02:36.052]         base::withCallingHandlers({
[17:02:36.052]             ...future.value <- base::withVisible(base::local({
[17:02:36.052]                 withCallingHandlers({
[17:02:36.052]                   {
[17:02:36.052]                     lm(dist ~ . - 1, data = cars)
[17:02:36.052]                   }
[17:02:36.052]                 }, immediateCondition = function(cond) {
[17:02:36.052]                   save_rds <- function (object, pathname, ...) 
[17:02:36.052]                   {
[17:02:36.052]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:36.052]                     if (file_test("-f", pathname_tmp)) {
[17:02:36.052]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.052]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:36.052]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.052]                         fi_tmp[["mtime"]])
[17:02:36.052]                     }
[17:02:36.052]                     tryCatch({
[17:02:36.052]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:36.052]                     }, error = function(ex) {
[17:02:36.052]                       msg <- conditionMessage(ex)
[17:02:36.052]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.052]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:36.052]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.052]                         fi_tmp[["mtime"]], msg)
[17:02:36.052]                       ex$message <- msg
[17:02:36.052]                       stop(ex)
[17:02:36.052]                     })
[17:02:36.052]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:36.052]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:36.052]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:36.052]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.052]                       fi <- file.info(pathname)
[17:02:36.052]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:36.052]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.052]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:36.052]                         fi[["size"]], fi[["mtime"]])
[17:02:36.052]                       stop(msg)
[17:02:36.052]                     }
[17:02:36.052]                     invisible(pathname)
[17:02:36.052]                   }
[17:02:36.052]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:36.052]                     rootPath = tempdir()) 
[17:02:36.052]                   {
[17:02:36.052]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:36.052]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:36.052]                       tmpdir = path, fileext = ".rds")
[17:02:36.052]                     save_rds(obj, file)
[17:02:36.052]                   }
[17:02:36.052]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:36.052]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.052]                   {
[17:02:36.052]                     inherits <- base::inherits
[17:02:36.052]                     invokeRestart <- base::invokeRestart
[17:02:36.052]                     is.null <- base::is.null
[17:02:36.052]                     muffled <- FALSE
[17:02:36.052]                     if (inherits(cond, "message")) {
[17:02:36.052]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.052]                       if (muffled) 
[17:02:36.052]                         invokeRestart("muffleMessage")
[17:02:36.052]                     }
[17:02:36.052]                     else if (inherits(cond, "warning")) {
[17:02:36.052]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.052]                       if (muffled) 
[17:02:36.052]                         invokeRestart("muffleWarning")
[17:02:36.052]                     }
[17:02:36.052]                     else if (inherits(cond, "condition")) {
[17:02:36.052]                       if (!is.null(pattern)) {
[17:02:36.052]                         computeRestarts <- base::computeRestarts
[17:02:36.052]                         grepl <- base::grepl
[17:02:36.052]                         restarts <- computeRestarts(cond)
[17:02:36.052]                         for (restart in restarts) {
[17:02:36.052]                           name <- restart$name
[17:02:36.052]                           if (is.null(name)) 
[17:02:36.052]                             next
[17:02:36.052]                           if (!grepl(pattern, name)) 
[17:02:36.052]                             next
[17:02:36.052]                           invokeRestart(restart)
[17:02:36.052]                           muffled <- TRUE
[17:02:36.052]                           break
[17:02:36.052]                         }
[17:02:36.052]                       }
[17:02:36.052]                     }
[17:02:36.052]                     invisible(muffled)
[17:02:36.052]                   }
[17:02:36.052]                   muffleCondition(cond)
[17:02:36.052]                 })
[17:02:36.052]             }))
[17:02:36.052]             future::FutureResult(value = ...future.value$value, 
[17:02:36.052]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.052]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.052]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.052]                     ...future.globalenv.names))
[17:02:36.052]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.052]         }, condition = base::local({
[17:02:36.052]             c <- base::c
[17:02:36.052]             inherits <- base::inherits
[17:02:36.052]             invokeRestart <- base::invokeRestart
[17:02:36.052]             length <- base::length
[17:02:36.052]             list <- base::list
[17:02:36.052]             seq.int <- base::seq.int
[17:02:36.052]             signalCondition <- base::signalCondition
[17:02:36.052]             sys.calls <- base::sys.calls
[17:02:36.052]             `[[` <- base::`[[`
[17:02:36.052]             `+` <- base::`+`
[17:02:36.052]             `<<-` <- base::`<<-`
[17:02:36.052]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.052]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.052]                   3L)]
[17:02:36.052]             }
[17:02:36.052]             function(cond) {
[17:02:36.052]                 is_error <- inherits(cond, "error")
[17:02:36.052]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.052]                   NULL)
[17:02:36.052]                 if (is_error) {
[17:02:36.052]                   sessionInformation <- function() {
[17:02:36.052]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.052]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.052]                       search = base::search(), system = base::Sys.info())
[17:02:36.052]                   }
[17:02:36.052]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.052]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.052]                     cond$call), session = sessionInformation(), 
[17:02:36.052]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.052]                   signalCondition(cond)
[17:02:36.052]                 }
[17:02:36.052]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.052]                 "immediateCondition"))) {
[17:02:36.052]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.052]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.052]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.052]                   if (TRUE && !signal) {
[17:02:36.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.052]                     {
[17:02:36.052]                       inherits <- base::inherits
[17:02:36.052]                       invokeRestart <- base::invokeRestart
[17:02:36.052]                       is.null <- base::is.null
[17:02:36.052]                       muffled <- FALSE
[17:02:36.052]                       if (inherits(cond, "message")) {
[17:02:36.052]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.052]                         if (muffled) 
[17:02:36.052]                           invokeRestart("muffleMessage")
[17:02:36.052]                       }
[17:02:36.052]                       else if (inherits(cond, "warning")) {
[17:02:36.052]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.052]                         if (muffled) 
[17:02:36.052]                           invokeRestart("muffleWarning")
[17:02:36.052]                       }
[17:02:36.052]                       else if (inherits(cond, "condition")) {
[17:02:36.052]                         if (!is.null(pattern)) {
[17:02:36.052]                           computeRestarts <- base::computeRestarts
[17:02:36.052]                           grepl <- base::grepl
[17:02:36.052]                           restarts <- computeRestarts(cond)
[17:02:36.052]                           for (restart in restarts) {
[17:02:36.052]                             name <- restart$name
[17:02:36.052]                             if (is.null(name)) 
[17:02:36.052]                               next
[17:02:36.052]                             if (!grepl(pattern, name)) 
[17:02:36.052]                               next
[17:02:36.052]                             invokeRestart(restart)
[17:02:36.052]                             muffled <- TRUE
[17:02:36.052]                             break
[17:02:36.052]                           }
[17:02:36.052]                         }
[17:02:36.052]                       }
[17:02:36.052]                       invisible(muffled)
[17:02:36.052]                     }
[17:02:36.052]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.052]                   }
[17:02:36.052]                 }
[17:02:36.052]                 else {
[17:02:36.052]                   if (TRUE) {
[17:02:36.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.052]                     {
[17:02:36.052]                       inherits <- base::inherits
[17:02:36.052]                       invokeRestart <- base::invokeRestart
[17:02:36.052]                       is.null <- base::is.null
[17:02:36.052]                       muffled <- FALSE
[17:02:36.052]                       if (inherits(cond, "message")) {
[17:02:36.052]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.052]                         if (muffled) 
[17:02:36.052]                           invokeRestart("muffleMessage")
[17:02:36.052]                       }
[17:02:36.052]                       else if (inherits(cond, "warning")) {
[17:02:36.052]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.052]                         if (muffled) 
[17:02:36.052]                           invokeRestart("muffleWarning")
[17:02:36.052]                       }
[17:02:36.052]                       else if (inherits(cond, "condition")) {
[17:02:36.052]                         if (!is.null(pattern)) {
[17:02:36.052]                           computeRestarts <- base::computeRestarts
[17:02:36.052]                           grepl <- base::grepl
[17:02:36.052]                           restarts <- computeRestarts(cond)
[17:02:36.052]                           for (restart in restarts) {
[17:02:36.052]                             name <- restart$name
[17:02:36.052]                             if (is.null(name)) 
[17:02:36.052]                               next
[17:02:36.052]                             if (!grepl(pattern, name)) 
[17:02:36.052]                               next
[17:02:36.052]                             invokeRestart(restart)
[17:02:36.052]                             muffled <- TRUE
[17:02:36.052]                             break
[17:02:36.052]                           }
[17:02:36.052]                         }
[17:02:36.052]                       }
[17:02:36.052]                       invisible(muffled)
[17:02:36.052]                     }
[17:02:36.052]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.052]                   }
[17:02:36.052]                 }
[17:02:36.052]             }
[17:02:36.052]         }))
[17:02:36.052]     }, error = function(ex) {
[17:02:36.052]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.052]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.052]                 ...future.rng), started = ...future.startTime, 
[17:02:36.052]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.052]             version = "1.8"), class = "FutureResult")
[17:02:36.052]     }, finally = {
[17:02:36.052]         if (!identical(...future.workdir, getwd())) 
[17:02:36.052]             setwd(...future.workdir)
[17:02:36.052]         {
[17:02:36.052]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.052]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.052]             }
[17:02:36.052]             base::options(...future.oldOptions)
[17:02:36.052]             if (.Platform$OS.type == "windows") {
[17:02:36.052]                 old_names <- names(...future.oldEnvVars)
[17:02:36.052]                 envs <- base::Sys.getenv()
[17:02:36.052]                 names <- names(envs)
[17:02:36.052]                 common <- intersect(names, old_names)
[17:02:36.052]                 added <- setdiff(names, old_names)
[17:02:36.052]                 removed <- setdiff(old_names, names)
[17:02:36.052]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.052]                   envs[common]]
[17:02:36.052]                 NAMES <- toupper(changed)
[17:02:36.052]                 args <- list()
[17:02:36.052]                 for (kk in seq_along(NAMES)) {
[17:02:36.052]                   name <- changed[[kk]]
[17:02:36.052]                   NAME <- NAMES[[kk]]
[17:02:36.052]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.052]                     next
[17:02:36.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.052]                 }
[17:02:36.052]                 NAMES <- toupper(added)
[17:02:36.052]                 for (kk in seq_along(NAMES)) {
[17:02:36.052]                   name <- added[[kk]]
[17:02:36.052]                   NAME <- NAMES[[kk]]
[17:02:36.052]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.052]                     next
[17:02:36.052]                   args[[name]] <- ""
[17:02:36.052]                 }
[17:02:36.052]                 NAMES <- toupper(removed)
[17:02:36.052]                 for (kk in seq_along(NAMES)) {
[17:02:36.052]                   name <- removed[[kk]]
[17:02:36.052]                   NAME <- NAMES[[kk]]
[17:02:36.052]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.052]                     next
[17:02:36.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.052]                 }
[17:02:36.052]                 if (length(args) > 0) 
[17:02:36.052]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.052]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.052]             }
[17:02:36.052]             else {
[17:02:36.052]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.052]             }
[17:02:36.052]             {
[17:02:36.052]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.052]                   0L) {
[17:02:36.052]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.052]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.052]                   base::options(opts)
[17:02:36.052]                 }
[17:02:36.052]                 {
[17:02:36.052]                   {
[17:02:36.052]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.052]                     NULL
[17:02:36.052]                   }
[17:02:36.052]                   options(future.plan = NULL)
[17:02:36.052]                   if (is.na(NA_character_)) 
[17:02:36.052]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.052]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.052]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.052]                     .init = FALSE)
[17:02:36.052]                 }
[17:02:36.052]             }
[17:02:36.052]         }
[17:02:36.052]     })
[17:02:36.052]     if (TRUE) {
[17:02:36.052]         base::sink(type = "output", split = FALSE)
[17:02:36.052]         if (TRUE) {
[17:02:36.052]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.052]         }
[17:02:36.052]         else {
[17:02:36.052]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.052]         }
[17:02:36.052]         base::close(...future.stdout)
[17:02:36.052]         ...future.stdout <- NULL
[17:02:36.052]     }
[17:02:36.052]     ...future.result$conditions <- ...future.conditions
[17:02:36.052]     ...future.result$finished <- base::Sys.time()
[17:02:36.052]     ...future.result
[17:02:36.052] }
[17:02:36.054] requestCore(): workers = 2
[17:02:36.056] MulticoreFuture started
[17:02:36.057] - Launch lazy future ... done
[17:02:36.057] run() for ‘MulticoreFuture’ ... done
[17:02:36.058] result() for MulticoreFuture ...
[17:02:36.058] plan(): Setting new future strategy stack:
[17:02:36.058] List of future strategies:
[17:02:36.058] 1. sequential:
[17:02:36.058]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:36.058]    - tweaked: FALSE
[17:02:36.058]    - call: NULL
[17:02:36.059] plan(): nbrOfWorkers() = 1
[17:02:36.063] plan(): Setting new future strategy stack:
[17:02:36.063] List of future strategies:
[17:02:36.063] 1. multicore:
[17:02:36.063]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:36.063]    - tweaked: FALSE
[17:02:36.063]    - call: plan(strategy)
[17:02:36.068] plan(): nbrOfWorkers() = 2
[17:02:36.070] result() for MulticoreFuture ...
[17:02:36.071] result() for MulticoreFuture ... done
[17:02:36.071] result() for MulticoreFuture ... done
[17:02:36.071] result() for MulticoreFuture ...
[17:02:36.071] result() for MulticoreFuture ... done

Call:
lm(formula = dist ~ . - 1, data = cars)

Coefficients:
speed  
2.909  

- Globals - lm(<formula #2 (‘b’)>, data = cars) ...

Call:
lm(formula = dist ~ . + 0, data = cars)

Coefficients:
speed  
2.909  

[17:02:36.075] getGlobalsAndPackages() ...
[17:02:36.075] Searching for globals...
[17:02:36.077] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘.’, ‘~’, ‘cars’
[17:02:36.077] Searching for globals ... DONE
[17:02:36.078] Resolving globals: FALSE
[17:02:36.078] 
[17:02:36.078] - packages: [2] ‘stats’, ‘datasets’
[17:02:36.078] getGlobalsAndPackages() ... DONE
[17:02:36.079] run() for ‘Future’ ...
[17:02:36.079] - state: ‘created’
[17:02:36.079] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:36.083] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:36.083] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:36.084]   - Field: ‘label’
[17:02:36.084]   - Field: ‘local’
[17:02:36.084]   - Field: ‘owner’
[17:02:36.084]   - Field: ‘envir’
[17:02:36.084]   - Field: ‘workers’
[17:02:36.084]   - Field: ‘packages’
[17:02:36.084]   - Field: ‘gc’
[17:02:36.084]   - Field: ‘job’
[17:02:36.085]   - Field: ‘conditions’
[17:02:36.085]   - Field: ‘expr’
[17:02:36.085]   - Field: ‘uuid’
[17:02:36.085]   - Field: ‘seed’
[17:02:36.085]   - Field: ‘version’
[17:02:36.085]   - Field: ‘result’
[17:02:36.085]   - Field: ‘asynchronous’
[17:02:36.085]   - Field: ‘calls’
[17:02:36.085]   - Field: ‘globals’
[17:02:36.086]   - Field: ‘stdout’
[17:02:36.086]   - Field: ‘earlySignal’
[17:02:36.086]   - Field: ‘lazy’
[17:02:36.086]   - Field: ‘state’
[17:02:36.086] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:36.086] - Launch lazy future ...
[17:02:36.086] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:36.087] Packages needed by future strategies (n = 0): <none>
[17:02:36.087] {
[17:02:36.087]     {
[17:02:36.087]         {
[17:02:36.087]             ...future.startTime <- base::Sys.time()
[17:02:36.087]             {
[17:02:36.087]                 {
[17:02:36.087]                   {
[17:02:36.087]                     {
[17:02:36.087]                       {
[17:02:36.087]                         base::local({
[17:02:36.087]                           has_future <- base::requireNamespace("future", 
[17:02:36.087]                             quietly = TRUE)
[17:02:36.087]                           if (has_future) {
[17:02:36.087]                             ns <- base::getNamespace("future")
[17:02:36.087]                             version <- ns[[".package"]][["version"]]
[17:02:36.087]                             if (is.null(version)) 
[17:02:36.087]                               version <- utils::packageVersion("future")
[17:02:36.087]                           }
[17:02:36.087]                           else {
[17:02:36.087]                             version <- NULL
[17:02:36.087]                           }
[17:02:36.087]                           if (!has_future || version < "1.8.0") {
[17:02:36.087]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.087]                               "", base::R.version$version.string), 
[17:02:36.087]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:36.087]                                 base::R.version$platform, 8 * 
[17:02:36.087]                                   base::.Machine$sizeof.pointer), 
[17:02:36.087]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.087]                                 "release", "version")], collapse = " "), 
[17:02:36.087]                               hostname = base::Sys.info()[["nodename"]])
[17:02:36.087]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.087]                               info)
[17:02:36.087]                             info <- base::paste(info, collapse = "; ")
[17:02:36.087]                             if (!has_future) {
[17:02:36.087]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.087]                                 info)
[17:02:36.087]                             }
[17:02:36.087]                             else {
[17:02:36.087]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.087]                                 info, version)
[17:02:36.087]                             }
[17:02:36.087]                             base::stop(msg)
[17:02:36.087]                           }
[17:02:36.087]                         })
[17:02:36.087]                       }
[17:02:36.087]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.087]                       base::options(mc.cores = 1L)
[17:02:36.087]                     }
[17:02:36.087]                     base::local({
[17:02:36.087]                       for (pkg in c("stats", "datasets")) {
[17:02:36.087]                         base::loadNamespace(pkg)
[17:02:36.087]                         base::library(pkg, character.only = TRUE)
[17:02:36.087]                       }
[17:02:36.087]                     })
[17:02:36.087]                   }
[17:02:36.087]                   ...future.strategy.old <- future::plan("list")
[17:02:36.087]                   options(future.plan = NULL)
[17:02:36.087]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.087]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.087]                 }
[17:02:36.087]                 ...future.workdir <- getwd()
[17:02:36.087]             }
[17:02:36.087]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.087]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.087]         }
[17:02:36.087]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.087]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.087]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.087]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.087]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.087]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.087]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.087]             base::names(...future.oldOptions))
[17:02:36.087]     }
[17:02:36.087]     if (FALSE) {
[17:02:36.087]     }
[17:02:36.087]     else {
[17:02:36.087]         if (TRUE) {
[17:02:36.087]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.087]                 open = "w")
[17:02:36.087]         }
[17:02:36.087]         else {
[17:02:36.087]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.087]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.087]         }
[17:02:36.087]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.087]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.087]             base::sink(type = "output", split = FALSE)
[17:02:36.087]             base::close(...future.stdout)
[17:02:36.087]         }, add = TRUE)
[17:02:36.087]     }
[17:02:36.087]     ...future.frame <- base::sys.nframe()
[17:02:36.087]     ...future.conditions <- base::list()
[17:02:36.087]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.087]     if (FALSE) {
[17:02:36.087]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.087]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.087]     }
[17:02:36.087]     ...future.result <- base::tryCatch({
[17:02:36.087]         base::withCallingHandlers({
[17:02:36.087]             ...future.value <- base::withVisible(base::local({
[17:02:36.087]                 withCallingHandlers({
[17:02:36.087]                   {
[17:02:36.087]                     lm(dist ~ . + 0, data = cars)
[17:02:36.087]                   }
[17:02:36.087]                 }, immediateCondition = function(cond) {
[17:02:36.087]                   save_rds <- function (object, pathname, ...) 
[17:02:36.087]                   {
[17:02:36.087]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:36.087]                     if (file_test("-f", pathname_tmp)) {
[17:02:36.087]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.087]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:36.087]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.087]                         fi_tmp[["mtime"]])
[17:02:36.087]                     }
[17:02:36.087]                     tryCatch({
[17:02:36.087]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:36.087]                     }, error = function(ex) {
[17:02:36.087]                       msg <- conditionMessage(ex)
[17:02:36.087]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.087]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:36.087]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.087]                         fi_tmp[["mtime"]], msg)
[17:02:36.087]                       ex$message <- msg
[17:02:36.087]                       stop(ex)
[17:02:36.087]                     })
[17:02:36.087]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:36.087]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:36.087]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:36.087]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.087]                       fi <- file.info(pathname)
[17:02:36.087]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:36.087]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.087]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:36.087]                         fi[["size"]], fi[["mtime"]])
[17:02:36.087]                       stop(msg)
[17:02:36.087]                     }
[17:02:36.087]                     invisible(pathname)
[17:02:36.087]                   }
[17:02:36.087]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:36.087]                     rootPath = tempdir()) 
[17:02:36.087]                   {
[17:02:36.087]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:36.087]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:36.087]                       tmpdir = path, fileext = ".rds")
[17:02:36.087]                     save_rds(obj, file)
[17:02:36.087]                   }
[17:02:36.087]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:36.087]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.087]                   {
[17:02:36.087]                     inherits <- base::inherits
[17:02:36.087]                     invokeRestart <- base::invokeRestart
[17:02:36.087]                     is.null <- base::is.null
[17:02:36.087]                     muffled <- FALSE
[17:02:36.087]                     if (inherits(cond, "message")) {
[17:02:36.087]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.087]                       if (muffled) 
[17:02:36.087]                         invokeRestart("muffleMessage")
[17:02:36.087]                     }
[17:02:36.087]                     else if (inherits(cond, "warning")) {
[17:02:36.087]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.087]                       if (muffled) 
[17:02:36.087]                         invokeRestart("muffleWarning")
[17:02:36.087]                     }
[17:02:36.087]                     else if (inherits(cond, "condition")) {
[17:02:36.087]                       if (!is.null(pattern)) {
[17:02:36.087]                         computeRestarts <- base::computeRestarts
[17:02:36.087]                         grepl <- base::grepl
[17:02:36.087]                         restarts <- computeRestarts(cond)
[17:02:36.087]                         for (restart in restarts) {
[17:02:36.087]                           name <- restart$name
[17:02:36.087]                           if (is.null(name)) 
[17:02:36.087]                             next
[17:02:36.087]                           if (!grepl(pattern, name)) 
[17:02:36.087]                             next
[17:02:36.087]                           invokeRestart(restart)
[17:02:36.087]                           muffled <- TRUE
[17:02:36.087]                           break
[17:02:36.087]                         }
[17:02:36.087]                       }
[17:02:36.087]                     }
[17:02:36.087]                     invisible(muffled)
[17:02:36.087]                   }
[17:02:36.087]                   muffleCondition(cond)
[17:02:36.087]                 })
[17:02:36.087]             }))
[17:02:36.087]             future::FutureResult(value = ...future.value$value, 
[17:02:36.087]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.087]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.087]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.087]                     ...future.globalenv.names))
[17:02:36.087]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.087]         }, condition = base::local({
[17:02:36.087]             c <- base::c
[17:02:36.087]             inherits <- base::inherits
[17:02:36.087]             invokeRestart <- base::invokeRestart
[17:02:36.087]             length <- base::length
[17:02:36.087]             list <- base::list
[17:02:36.087]             seq.int <- base::seq.int
[17:02:36.087]             signalCondition <- base::signalCondition
[17:02:36.087]             sys.calls <- base::sys.calls
[17:02:36.087]             `[[` <- base::`[[`
[17:02:36.087]             `+` <- base::`+`
[17:02:36.087]             `<<-` <- base::`<<-`
[17:02:36.087]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.087]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.087]                   3L)]
[17:02:36.087]             }
[17:02:36.087]             function(cond) {
[17:02:36.087]                 is_error <- inherits(cond, "error")
[17:02:36.087]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.087]                   NULL)
[17:02:36.087]                 if (is_error) {
[17:02:36.087]                   sessionInformation <- function() {
[17:02:36.087]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.087]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.087]                       search = base::search(), system = base::Sys.info())
[17:02:36.087]                   }
[17:02:36.087]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.087]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.087]                     cond$call), session = sessionInformation(), 
[17:02:36.087]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.087]                   signalCondition(cond)
[17:02:36.087]                 }
[17:02:36.087]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.087]                 "immediateCondition"))) {
[17:02:36.087]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.087]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.087]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.087]                   if (TRUE && !signal) {
[17:02:36.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.087]                     {
[17:02:36.087]                       inherits <- base::inherits
[17:02:36.087]                       invokeRestart <- base::invokeRestart
[17:02:36.087]                       is.null <- base::is.null
[17:02:36.087]                       muffled <- FALSE
[17:02:36.087]                       if (inherits(cond, "message")) {
[17:02:36.087]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.087]                         if (muffled) 
[17:02:36.087]                           invokeRestart("muffleMessage")
[17:02:36.087]                       }
[17:02:36.087]                       else if (inherits(cond, "warning")) {
[17:02:36.087]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.087]                         if (muffled) 
[17:02:36.087]                           invokeRestart("muffleWarning")
[17:02:36.087]                       }
[17:02:36.087]                       else if (inherits(cond, "condition")) {
[17:02:36.087]                         if (!is.null(pattern)) {
[17:02:36.087]                           computeRestarts <- base::computeRestarts
[17:02:36.087]                           grepl <- base::grepl
[17:02:36.087]                           restarts <- computeRestarts(cond)
[17:02:36.087]                           for (restart in restarts) {
[17:02:36.087]                             name <- restart$name
[17:02:36.087]                             if (is.null(name)) 
[17:02:36.087]                               next
[17:02:36.087]                             if (!grepl(pattern, name)) 
[17:02:36.087]                               next
[17:02:36.087]                             invokeRestart(restart)
[17:02:36.087]                             muffled <- TRUE
[17:02:36.087]                             break
[17:02:36.087]                           }
[17:02:36.087]                         }
[17:02:36.087]                       }
[17:02:36.087]                       invisible(muffled)
[17:02:36.087]                     }
[17:02:36.087]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.087]                   }
[17:02:36.087]                 }
[17:02:36.087]                 else {
[17:02:36.087]                   if (TRUE) {
[17:02:36.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.087]                     {
[17:02:36.087]                       inherits <- base::inherits
[17:02:36.087]                       invokeRestart <- base::invokeRestart
[17:02:36.087]                       is.null <- base::is.null
[17:02:36.087]                       muffled <- FALSE
[17:02:36.087]                       if (inherits(cond, "message")) {
[17:02:36.087]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.087]                         if (muffled) 
[17:02:36.087]                           invokeRestart("muffleMessage")
[17:02:36.087]                       }
[17:02:36.087]                       else if (inherits(cond, "warning")) {
[17:02:36.087]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.087]                         if (muffled) 
[17:02:36.087]                           invokeRestart("muffleWarning")
[17:02:36.087]                       }
[17:02:36.087]                       else if (inherits(cond, "condition")) {
[17:02:36.087]                         if (!is.null(pattern)) {
[17:02:36.087]                           computeRestarts <- base::computeRestarts
[17:02:36.087]                           grepl <- base::grepl
[17:02:36.087]                           restarts <- computeRestarts(cond)
[17:02:36.087]                           for (restart in restarts) {
[17:02:36.087]                             name <- restart$name
[17:02:36.087]                             if (is.null(name)) 
[17:02:36.087]                               next
[17:02:36.087]                             if (!grepl(pattern, name)) 
[17:02:36.087]                               next
[17:02:36.087]                             invokeRestart(restart)
[17:02:36.087]                             muffled <- TRUE
[17:02:36.087]                             break
[17:02:36.087]                           }
[17:02:36.087]                         }
[17:02:36.087]                       }
[17:02:36.087]                       invisible(muffled)
[17:02:36.087]                     }
[17:02:36.087]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.087]                   }
[17:02:36.087]                 }
[17:02:36.087]             }
[17:02:36.087]         }))
[17:02:36.087]     }, error = function(ex) {
[17:02:36.087]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.087]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.087]                 ...future.rng), started = ...future.startTime, 
[17:02:36.087]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.087]             version = "1.8"), class = "FutureResult")
[17:02:36.087]     }, finally = {
[17:02:36.087]         if (!identical(...future.workdir, getwd())) 
[17:02:36.087]             setwd(...future.workdir)
[17:02:36.087]         {
[17:02:36.087]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.087]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.087]             }
[17:02:36.087]             base::options(...future.oldOptions)
[17:02:36.087]             if (.Platform$OS.type == "windows") {
[17:02:36.087]                 old_names <- names(...future.oldEnvVars)
[17:02:36.087]                 envs <- base::Sys.getenv()
[17:02:36.087]                 names <- names(envs)
[17:02:36.087]                 common <- intersect(names, old_names)
[17:02:36.087]                 added <- setdiff(names, old_names)
[17:02:36.087]                 removed <- setdiff(old_names, names)
[17:02:36.087]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.087]                   envs[common]]
[17:02:36.087]                 NAMES <- toupper(changed)
[17:02:36.087]                 args <- list()
[17:02:36.087]                 for (kk in seq_along(NAMES)) {
[17:02:36.087]                   name <- changed[[kk]]
[17:02:36.087]                   NAME <- NAMES[[kk]]
[17:02:36.087]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.087]                     next
[17:02:36.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.087]                 }
[17:02:36.087]                 NAMES <- toupper(added)
[17:02:36.087]                 for (kk in seq_along(NAMES)) {
[17:02:36.087]                   name <- added[[kk]]
[17:02:36.087]                   NAME <- NAMES[[kk]]
[17:02:36.087]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.087]                     next
[17:02:36.087]                   args[[name]] <- ""
[17:02:36.087]                 }
[17:02:36.087]                 NAMES <- toupper(removed)
[17:02:36.087]                 for (kk in seq_along(NAMES)) {
[17:02:36.087]                   name <- removed[[kk]]
[17:02:36.087]                   NAME <- NAMES[[kk]]
[17:02:36.087]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.087]                     next
[17:02:36.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.087]                 }
[17:02:36.087]                 if (length(args) > 0) 
[17:02:36.087]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.087]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.087]             }
[17:02:36.087]             else {
[17:02:36.087]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.087]             }
[17:02:36.087]             {
[17:02:36.087]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.087]                   0L) {
[17:02:36.087]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.087]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.087]                   base::options(opts)
[17:02:36.087]                 }
[17:02:36.087]                 {
[17:02:36.087]                   {
[17:02:36.087]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.087]                     NULL
[17:02:36.087]                   }
[17:02:36.087]                   options(future.plan = NULL)
[17:02:36.087]                   if (is.na(NA_character_)) 
[17:02:36.087]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.087]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.087]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.087]                     .init = FALSE)
[17:02:36.087]                 }
[17:02:36.087]             }
[17:02:36.087]         }
[17:02:36.087]     })
[17:02:36.087]     if (TRUE) {
[17:02:36.087]         base::sink(type = "output", split = FALSE)
[17:02:36.087]         if (TRUE) {
[17:02:36.087]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.087]         }
[17:02:36.087]         else {
[17:02:36.087]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.087]         }
[17:02:36.087]         base::close(...future.stdout)
[17:02:36.087]         ...future.stdout <- NULL
[17:02:36.087]     }
[17:02:36.087]     ...future.result$conditions <- ...future.conditions
[17:02:36.087]     ...future.result$finished <- base::Sys.time()
[17:02:36.087]     ...future.result
[17:02:36.087] }
[17:02:36.090] requestCore(): workers = 2
[17:02:36.092] MulticoreFuture started
[17:02:36.093] - Launch lazy future ... done
[17:02:36.093] run() for ‘MulticoreFuture’ ... done
[17:02:36.093] result() for MulticoreFuture ...
[17:02:36.094] plan(): Setting new future strategy stack:
[17:02:36.094] List of future strategies:
[17:02:36.094] 1. sequential:
[17:02:36.094]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:36.094]    - tweaked: FALSE
[17:02:36.094]    - call: NULL
[17:02:36.095] plan(): nbrOfWorkers() = 1
[17:02:36.098] plan(): Setting new future strategy stack:
[17:02:36.098] List of future strategies:
[17:02:36.098] 1. multicore:
[17:02:36.098]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:36.098]    - tweaked: FALSE
[17:02:36.098]    - call: plan(strategy)
[17:02:36.104] plan(): nbrOfWorkers() = 2
[17:02:36.106] result() for MulticoreFuture ...
[17:02:36.106] result() for MulticoreFuture ... done
[17:02:36.106] result() for MulticoreFuture ... done
[17:02:36.106] result() for MulticoreFuture ...
[17:02:36.107] result() for MulticoreFuture ... done

Call:
lm(formula = dist ~ . + 0, data = cars)

Coefficients:
speed  
2.909  

- Globals - lm(<formula #3 (‘c’)>, data = cars) ...

Call:
lm(formula = dist ~ speed + speed^2, data = cars)

Coefficients:
(Intercept)        speed  
    -17.579        3.932  

[17:02:36.110] getGlobalsAndPackages() ...
[17:02:36.110] Searching for globals...
[17:02:36.115] - globals found: [8] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘speed’, ‘^’, ‘~’, ‘cars’
[17:02:36.116] Searching for globals ... DONE
[17:02:36.116] Resolving globals: FALSE
[17:02:36.116] 
[17:02:36.117] - packages: [2] ‘stats’, ‘datasets’
[17:02:36.117] getGlobalsAndPackages() ... DONE
[17:02:36.117] run() for ‘Future’ ...
[17:02:36.117] - state: ‘created’
[17:02:36.117] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:36.122] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:36.122] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:36.122]   - Field: ‘label’
[17:02:36.122]   - Field: ‘local’
[17:02:36.123]   - Field: ‘owner’
[17:02:36.123]   - Field: ‘envir’
[17:02:36.123]   - Field: ‘workers’
[17:02:36.123]   - Field: ‘packages’
[17:02:36.123]   - Field: ‘gc’
[17:02:36.123]   - Field: ‘job’
[17:02:36.123]   - Field: ‘conditions’
[17:02:36.124]   - Field: ‘expr’
[17:02:36.124]   - Field: ‘uuid’
[17:02:36.124]   - Field: ‘seed’
[17:02:36.124]   - Field: ‘version’
[17:02:36.124]   - Field: ‘result’
[17:02:36.124]   - Field: ‘asynchronous’
[17:02:36.124]   - Field: ‘calls’
[17:02:36.124]   - Field: ‘globals’
[17:02:36.124]   - Field: ‘stdout’
[17:02:36.125]   - Field: ‘earlySignal’
[17:02:36.125]   - Field: ‘lazy’
[17:02:36.125]   - Field: ‘state’
[17:02:36.125] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:36.125] - Launch lazy future ...
[17:02:36.125] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:36.125] Packages needed by future strategies (n = 0): <none>
[17:02:36.126] {
[17:02:36.126]     {
[17:02:36.126]         {
[17:02:36.126]             ...future.startTime <- base::Sys.time()
[17:02:36.126]             {
[17:02:36.126]                 {
[17:02:36.126]                   {
[17:02:36.126]                     {
[17:02:36.126]                       {
[17:02:36.126]                         base::local({
[17:02:36.126]                           has_future <- base::requireNamespace("future", 
[17:02:36.126]                             quietly = TRUE)
[17:02:36.126]                           if (has_future) {
[17:02:36.126]                             ns <- base::getNamespace("future")
[17:02:36.126]                             version <- ns[[".package"]][["version"]]
[17:02:36.126]                             if (is.null(version)) 
[17:02:36.126]                               version <- utils::packageVersion("future")
[17:02:36.126]                           }
[17:02:36.126]                           else {
[17:02:36.126]                             version <- NULL
[17:02:36.126]                           }
[17:02:36.126]                           if (!has_future || version < "1.8.0") {
[17:02:36.126]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.126]                               "", base::R.version$version.string), 
[17:02:36.126]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:36.126]                                 base::R.version$platform, 8 * 
[17:02:36.126]                                   base::.Machine$sizeof.pointer), 
[17:02:36.126]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.126]                                 "release", "version")], collapse = " "), 
[17:02:36.126]                               hostname = base::Sys.info()[["nodename"]])
[17:02:36.126]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.126]                               info)
[17:02:36.126]                             info <- base::paste(info, collapse = "; ")
[17:02:36.126]                             if (!has_future) {
[17:02:36.126]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.126]                                 info)
[17:02:36.126]                             }
[17:02:36.126]                             else {
[17:02:36.126]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.126]                                 info, version)
[17:02:36.126]                             }
[17:02:36.126]                             base::stop(msg)
[17:02:36.126]                           }
[17:02:36.126]                         })
[17:02:36.126]                       }
[17:02:36.126]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.126]                       base::options(mc.cores = 1L)
[17:02:36.126]                     }
[17:02:36.126]                     base::local({
[17:02:36.126]                       for (pkg in c("stats", "datasets")) {
[17:02:36.126]                         base::loadNamespace(pkg)
[17:02:36.126]                         base::library(pkg, character.only = TRUE)
[17:02:36.126]                       }
[17:02:36.126]                     })
[17:02:36.126]                   }
[17:02:36.126]                   ...future.strategy.old <- future::plan("list")
[17:02:36.126]                   options(future.plan = NULL)
[17:02:36.126]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.126]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.126]                 }
[17:02:36.126]                 ...future.workdir <- getwd()
[17:02:36.126]             }
[17:02:36.126]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.126]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.126]         }
[17:02:36.126]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.126]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.126]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.126]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.126]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.126]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.126]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.126]             base::names(...future.oldOptions))
[17:02:36.126]     }
[17:02:36.126]     if (FALSE) {
[17:02:36.126]     }
[17:02:36.126]     else {
[17:02:36.126]         if (TRUE) {
[17:02:36.126]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.126]                 open = "w")
[17:02:36.126]         }
[17:02:36.126]         else {
[17:02:36.126]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.126]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.126]         }
[17:02:36.126]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.126]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.126]             base::sink(type = "output", split = FALSE)
[17:02:36.126]             base::close(...future.stdout)
[17:02:36.126]         }, add = TRUE)
[17:02:36.126]     }
[17:02:36.126]     ...future.frame <- base::sys.nframe()
[17:02:36.126]     ...future.conditions <- base::list()
[17:02:36.126]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.126]     if (FALSE) {
[17:02:36.126]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.126]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.126]     }
[17:02:36.126]     ...future.result <- base::tryCatch({
[17:02:36.126]         base::withCallingHandlers({
[17:02:36.126]             ...future.value <- base::withVisible(base::local({
[17:02:36.126]                 withCallingHandlers({
[17:02:36.126]                   {
[17:02:36.126]                     lm(dist ~ speed + speed^2, data = cars)
[17:02:36.126]                   }
[17:02:36.126]                 }, immediateCondition = function(cond) {
[17:02:36.126]                   save_rds <- function (object, pathname, ...) 
[17:02:36.126]                   {
[17:02:36.126]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:36.126]                     if (file_test("-f", pathname_tmp)) {
[17:02:36.126]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.126]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:36.126]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.126]                         fi_tmp[["mtime"]])
[17:02:36.126]                     }
[17:02:36.126]                     tryCatch({
[17:02:36.126]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:36.126]                     }, error = function(ex) {
[17:02:36.126]                       msg <- conditionMessage(ex)
[17:02:36.126]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.126]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:36.126]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.126]                         fi_tmp[["mtime"]], msg)
[17:02:36.126]                       ex$message <- msg
[17:02:36.126]                       stop(ex)
[17:02:36.126]                     })
[17:02:36.126]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:36.126]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:36.126]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:36.126]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.126]                       fi <- file.info(pathname)
[17:02:36.126]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:36.126]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.126]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:36.126]                         fi[["size"]], fi[["mtime"]])
[17:02:36.126]                       stop(msg)
[17:02:36.126]                     }
[17:02:36.126]                     invisible(pathname)
[17:02:36.126]                   }
[17:02:36.126]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:36.126]                     rootPath = tempdir()) 
[17:02:36.126]                   {
[17:02:36.126]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:36.126]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:36.126]                       tmpdir = path, fileext = ".rds")
[17:02:36.126]                     save_rds(obj, file)
[17:02:36.126]                   }
[17:02:36.126]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:36.126]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.126]                   {
[17:02:36.126]                     inherits <- base::inherits
[17:02:36.126]                     invokeRestart <- base::invokeRestart
[17:02:36.126]                     is.null <- base::is.null
[17:02:36.126]                     muffled <- FALSE
[17:02:36.126]                     if (inherits(cond, "message")) {
[17:02:36.126]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.126]                       if (muffled) 
[17:02:36.126]                         invokeRestart("muffleMessage")
[17:02:36.126]                     }
[17:02:36.126]                     else if (inherits(cond, "warning")) {
[17:02:36.126]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.126]                       if (muffled) 
[17:02:36.126]                         invokeRestart("muffleWarning")
[17:02:36.126]                     }
[17:02:36.126]                     else if (inherits(cond, "condition")) {
[17:02:36.126]                       if (!is.null(pattern)) {
[17:02:36.126]                         computeRestarts <- base::computeRestarts
[17:02:36.126]                         grepl <- base::grepl
[17:02:36.126]                         restarts <- computeRestarts(cond)
[17:02:36.126]                         for (restart in restarts) {
[17:02:36.126]                           name <- restart$name
[17:02:36.126]                           if (is.null(name)) 
[17:02:36.126]                             next
[17:02:36.126]                           if (!grepl(pattern, name)) 
[17:02:36.126]                             next
[17:02:36.126]                           invokeRestart(restart)
[17:02:36.126]                           muffled <- TRUE
[17:02:36.126]                           break
[17:02:36.126]                         }
[17:02:36.126]                       }
[17:02:36.126]                     }
[17:02:36.126]                     invisible(muffled)
[17:02:36.126]                   }
[17:02:36.126]                   muffleCondition(cond)
[17:02:36.126]                 })
[17:02:36.126]             }))
[17:02:36.126]             future::FutureResult(value = ...future.value$value, 
[17:02:36.126]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.126]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.126]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.126]                     ...future.globalenv.names))
[17:02:36.126]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.126]         }, condition = base::local({
[17:02:36.126]             c <- base::c
[17:02:36.126]             inherits <- base::inherits
[17:02:36.126]             invokeRestart <- base::invokeRestart
[17:02:36.126]             length <- base::length
[17:02:36.126]             list <- base::list
[17:02:36.126]             seq.int <- base::seq.int
[17:02:36.126]             signalCondition <- base::signalCondition
[17:02:36.126]             sys.calls <- base::sys.calls
[17:02:36.126]             `[[` <- base::`[[`
[17:02:36.126]             `+` <- base::`+`
[17:02:36.126]             `<<-` <- base::`<<-`
[17:02:36.126]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.126]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.126]                   3L)]
[17:02:36.126]             }
[17:02:36.126]             function(cond) {
[17:02:36.126]                 is_error <- inherits(cond, "error")
[17:02:36.126]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.126]                   NULL)
[17:02:36.126]                 if (is_error) {
[17:02:36.126]                   sessionInformation <- function() {
[17:02:36.126]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.126]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.126]                       search = base::search(), system = base::Sys.info())
[17:02:36.126]                   }
[17:02:36.126]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.126]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.126]                     cond$call), session = sessionInformation(), 
[17:02:36.126]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.126]                   signalCondition(cond)
[17:02:36.126]                 }
[17:02:36.126]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.126]                 "immediateCondition"))) {
[17:02:36.126]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.126]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.126]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.126]                   if (TRUE && !signal) {
[17:02:36.126]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.126]                     {
[17:02:36.126]                       inherits <- base::inherits
[17:02:36.126]                       invokeRestart <- base::invokeRestart
[17:02:36.126]                       is.null <- base::is.null
[17:02:36.126]                       muffled <- FALSE
[17:02:36.126]                       if (inherits(cond, "message")) {
[17:02:36.126]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.126]                         if (muffled) 
[17:02:36.126]                           invokeRestart("muffleMessage")
[17:02:36.126]                       }
[17:02:36.126]                       else if (inherits(cond, "warning")) {
[17:02:36.126]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.126]                         if (muffled) 
[17:02:36.126]                           invokeRestart("muffleWarning")
[17:02:36.126]                       }
[17:02:36.126]                       else if (inherits(cond, "condition")) {
[17:02:36.126]                         if (!is.null(pattern)) {
[17:02:36.126]                           computeRestarts <- base::computeRestarts
[17:02:36.126]                           grepl <- base::grepl
[17:02:36.126]                           restarts <- computeRestarts(cond)
[17:02:36.126]                           for (restart in restarts) {
[17:02:36.126]                             name <- restart$name
[17:02:36.126]                             if (is.null(name)) 
[17:02:36.126]                               next
[17:02:36.126]                             if (!grepl(pattern, name)) 
[17:02:36.126]                               next
[17:02:36.126]                             invokeRestart(restart)
[17:02:36.126]                             muffled <- TRUE
[17:02:36.126]                             break
[17:02:36.126]                           }
[17:02:36.126]                         }
[17:02:36.126]                       }
[17:02:36.126]                       invisible(muffled)
[17:02:36.126]                     }
[17:02:36.126]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.126]                   }
[17:02:36.126]                 }
[17:02:36.126]                 else {
[17:02:36.126]                   if (TRUE) {
[17:02:36.126]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.126]                     {
[17:02:36.126]                       inherits <- base::inherits
[17:02:36.126]                       invokeRestart <- base::invokeRestart
[17:02:36.126]                       is.null <- base::is.null
[17:02:36.126]                       muffled <- FALSE
[17:02:36.126]                       if (inherits(cond, "message")) {
[17:02:36.126]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.126]                         if (muffled) 
[17:02:36.126]                           invokeRestart("muffleMessage")
[17:02:36.126]                       }
[17:02:36.126]                       else if (inherits(cond, "warning")) {
[17:02:36.126]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.126]                         if (muffled) 
[17:02:36.126]                           invokeRestart("muffleWarning")
[17:02:36.126]                       }
[17:02:36.126]                       else if (inherits(cond, "condition")) {
[17:02:36.126]                         if (!is.null(pattern)) {
[17:02:36.126]                           computeRestarts <- base::computeRestarts
[17:02:36.126]                           grepl <- base::grepl
[17:02:36.126]                           restarts <- computeRestarts(cond)
[17:02:36.126]                           for (restart in restarts) {
[17:02:36.126]                             name <- restart$name
[17:02:36.126]                             if (is.null(name)) 
[17:02:36.126]                               next
[17:02:36.126]                             if (!grepl(pattern, name)) 
[17:02:36.126]                               next
[17:02:36.126]                             invokeRestart(restart)
[17:02:36.126]                             muffled <- TRUE
[17:02:36.126]                             break
[17:02:36.126]                           }
[17:02:36.126]                         }
[17:02:36.126]                       }
[17:02:36.126]                       invisible(muffled)
[17:02:36.126]                     }
[17:02:36.126]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.126]                   }
[17:02:36.126]                 }
[17:02:36.126]             }
[17:02:36.126]         }))
[17:02:36.126]     }, error = function(ex) {
[17:02:36.126]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.126]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.126]                 ...future.rng), started = ...future.startTime, 
[17:02:36.126]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.126]             version = "1.8"), class = "FutureResult")
[17:02:36.126]     }, finally = {
[17:02:36.126]         if (!identical(...future.workdir, getwd())) 
[17:02:36.126]             setwd(...future.workdir)
[17:02:36.126]         {
[17:02:36.126]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.126]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.126]             }
[17:02:36.126]             base::options(...future.oldOptions)
[17:02:36.126]             if (.Platform$OS.type == "windows") {
[17:02:36.126]                 old_names <- names(...future.oldEnvVars)
[17:02:36.126]                 envs <- base::Sys.getenv()
[17:02:36.126]                 names <- names(envs)
[17:02:36.126]                 common <- intersect(names, old_names)
[17:02:36.126]                 added <- setdiff(names, old_names)
[17:02:36.126]                 removed <- setdiff(old_names, names)
[17:02:36.126]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.126]                   envs[common]]
[17:02:36.126]                 NAMES <- toupper(changed)
[17:02:36.126]                 args <- list()
[17:02:36.126]                 for (kk in seq_along(NAMES)) {
[17:02:36.126]                   name <- changed[[kk]]
[17:02:36.126]                   NAME <- NAMES[[kk]]
[17:02:36.126]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.126]                     next
[17:02:36.126]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.126]                 }
[17:02:36.126]                 NAMES <- toupper(added)
[17:02:36.126]                 for (kk in seq_along(NAMES)) {
[17:02:36.126]                   name <- added[[kk]]
[17:02:36.126]                   NAME <- NAMES[[kk]]
[17:02:36.126]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.126]                     next
[17:02:36.126]                   args[[name]] <- ""
[17:02:36.126]                 }
[17:02:36.126]                 NAMES <- toupper(removed)
[17:02:36.126]                 for (kk in seq_along(NAMES)) {
[17:02:36.126]                   name <- removed[[kk]]
[17:02:36.126]                   NAME <- NAMES[[kk]]
[17:02:36.126]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.126]                     next
[17:02:36.126]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.126]                 }
[17:02:36.126]                 if (length(args) > 0) 
[17:02:36.126]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.126]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.126]             }
[17:02:36.126]             else {
[17:02:36.126]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.126]             }
[17:02:36.126]             {
[17:02:36.126]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.126]                   0L) {
[17:02:36.126]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.126]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.126]                   base::options(opts)
[17:02:36.126]                 }
[17:02:36.126]                 {
[17:02:36.126]                   {
[17:02:36.126]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.126]                     NULL
[17:02:36.126]                   }
[17:02:36.126]                   options(future.plan = NULL)
[17:02:36.126]                   if (is.na(NA_character_)) 
[17:02:36.126]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.126]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.126]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.126]                     .init = FALSE)
[17:02:36.126]                 }
[17:02:36.126]             }
[17:02:36.126]         }
[17:02:36.126]     })
[17:02:36.126]     if (TRUE) {
[17:02:36.126]         base::sink(type = "output", split = FALSE)
[17:02:36.126]         if (TRUE) {
[17:02:36.126]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.126]         }
[17:02:36.126]         else {
[17:02:36.126]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.126]         }
[17:02:36.126]         base::close(...future.stdout)
[17:02:36.126]         ...future.stdout <- NULL
[17:02:36.126]     }
[17:02:36.126]     ...future.result$conditions <- ...future.conditions
[17:02:36.126]     ...future.result$finished <- base::Sys.time()
[17:02:36.126]     ...future.result
[17:02:36.126] }
[17:02:36.129] requestCore(): workers = 2
[17:02:36.131] MulticoreFuture started
[17:02:36.131] - Launch lazy future ... done
[17:02:36.131] run() for ‘MulticoreFuture’ ... done
[17:02:36.132] result() for MulticoreFuture ...
[17:02:36.132] plan(): Setting new future strategy stack:
[17:02:36.133] List of future strategies:
[17:02:36.133] 1. sequential:
[17:02:36.133]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:36.133]    - tweaked: FALSE
[17:02:36.133]    - call: NULL
[17:02:36.134] plan(): nbrOfWorkers() = 1
[17:02:36.137] plan(): Setting new future strategy stack:
[17:02:36.137] List of future strategies:
[17:02:36.137] 1. multicore:
[17:02:36.137]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:36.137]    - tweaked: FALSE
[17:02:36.137]    - call: plan(strategy)
[17:02:36.143] plan(): nbrOfWorkers() = 2
[17:02:36.145] result() for MulticoreFuture ...
[17:02:36.145] result() for MulticoreFuture ... done
[17:02:36.145] result() for MulticoreFuture ... done
[17:02:36.146] result() for MulticoreFuture ...
[17:02:36.146] result() for MulticoreFuture ... done

Call:
lm(formula = dist ~ speed + speed^2, data = cars)

Coefficients:
(Intercept)        speed  
    -17.579        3.932  

- Globals - lm(<formula #4 (‘d’)>, data = cars) ...

Call:
lm(formula = dist ~ speed + I(speed^2), data = cars)

Coefficients:
(Intercept)        speed   I(speed^2)  
    2.47014      0.91329      0.09996  

[17:02:36.150] getGlobalsAndPackages() ...
[17:02:36.150] Searching for globals...
[17:02:36.153] - globals found: [9] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘speed’, ‘I’, ‘^’, ‘~’, ‘cars’
[17:02:36.153] Searching for globals ... DONE
[17:02:36.153] Resolving globals: FALSE
[17:02:36.154] 
[17:02:36.154] - packages: [2] ‘stats’, ‘datasets’
[17:02:36.154] getGlobalsAndPackages() ... DONE
[17:02:36.154] run() for ‘Future’ ...
[17:02:36.154] - state: ‘created’
[17:02:36.155] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:36.159] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:36.159] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:36.159]   - Field: ‘label’
[17:02:36.159]   - Field: ‘local’
[17:02:36.159]   - Field: ‘owner’
[17:02:36.159]   - Field: ‘envir’
[17:02:36.159]   - Field: ‘workers’
[17:02:36.159]   - Field: ‘packages’
[17:02:36.160]   - Field: ‘gc’
[17:02:36.160]   - Field: ‘job’
[17:02:36.160]   - Field: ‘conditions’
[17:02:36.160]   - Field: ‘expr’
[17:02:36.160]   - Field: ‘uuid’
[17:02:36.160]   - Field: ‘seed’
[17:02:36.160]   - Field: ‘version’
[17:02:36.160]   - Field: ‘result’
[17:02:36.160]   - Field: ‘asynchronous’
[17:02:36.161]   - Field: ‘calls’
[17:02:36.161]   - Field: ‘globals’
[17:02:36.161]   - Field: ‘stdout’
[17:02:36.161]   - Field: ‘earlySignal’
[17:02:36.161]   - Field: ‘lazy’
[17:02:36.161]   - Field: ‘state’
[17:02:36.161] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:36.161] - Launch lazy future ...
[17:02:36.162] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:36.162] Packages needed by future strategies (n = 0): <none>
[17:02:36.162] {
[17:02:36.162]     {
[17:02:36.162]         {
[17:02:36.162]             ...future.startTime <- base::Sys.time()
[17:02:36.162]             {
[17:02:36.162]                 {
[17:02:36.162]                   {
[17:02:36.162]                     {
[17:02:36.162]                       {
[17:02:36.162]                         base::local({
[17:02:36.162]                           has_future <- base::requireNamespace("future", 
[17:02:36.162]                             quietly = TRUE)
[17:02:36.162]                           if (has_future) {
[17:02:36.162]                             ns <- base::getNamespace("future")
[17:02:36.162]                             version <- ns[[".package"]][["version"]]
[17:02:36.162]                             if (is.null(version)) 
[17:02:36.162]                               version <- utils::packageVersion("future")
[17:02:36.162]                           }
[17:02:36.162]                           else {
[17:02:36.162]                             version <- NULL
[17:02:36.162]                           }
[17:02:36.162]                           if (!has_future || version < "1.8.0") {
[17:02:36.162]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.162]                               "", base::R.version$version.string), 
[17:02:36.162]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:36.162]                                 base::R.version$platform, 8 * 
[17:02:36.162]                                   base::.Machine$sizeof.pointer), 
[17:02:36.162]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.162]                                 "release", "version")], collapse = " "), 
[17:02:36.162]                               hostname = base::Sys.info()[["nodename"]])
[17:02:36.162]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.162]                               info)
[17:02:36.162]                             info <- base::paste(info, collapse = "; ")
[17:02:36.162]                             if (!has_future) {
[17:02:36.162]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.162]                                 info)
[17:02:36.162]                             }
[17:02:36.162]                             else {
[17:02:36.162]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.162]                                 info, version)
[17:02:36.162]                             }
[17:02:36.162]                             base::stop(msg)
[17:02:36.162]                           }
[17:02:36.162]                         })
[17:02:36.162]                       }
[17:02:36.162]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.162]                       base::options(mc.cores = 1L)
[17:02:36.162]                     }
[17:02:36.162]                     base::local({
[17:02:36.162]                       for (pkg in c("stats", "datasets")) {
[17:02:36.162]                         base::loadNamespace(pkg)
[17:02:36.162]                         base::library(pkg, character.only = TRUE)
[17:02:36.162]                       }
[17:02:36.162]                     })
[17:02:36.162]                   }
[17:02:36.162]                   ...future.strategy.old <- future::plan("list")
[17:02:36.162]                   options(future.plan = NULL)
[17:02:36.162]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.162]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.162]                 }
[17:02:36.162]                 ...future.workdir <- getwd()
[17:02:36.162]             }
[17:02:36.162]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.162]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.162]         }
[17:02:36.162]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.162]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.162]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.162]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.162]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.162]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.162]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.162]             base::names(...future.oldOptions))
[17:02:36.162]     }
[17:02:36.162]     if (FALSE) {
[17:02:36.162]     }
[17:02:36.162]     else {
[17:02:36.162]         if (TRUE) {
[17:02:36.162]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.162]                 open = "w")
[17:02:36.162]         }
[17:02:36.162]         else {
[17:02:36.162]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.162]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.162]         }
[17:02:36.162]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.162]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.162]             base::sink(type = "output", split = FALSE)
[17:02:36.162]             base::close(...future.stdout)
[17:02:36.162]         }, add = TRUE)
[17:02:36.162]     }
[17:02:36.162]     ...future.frame <- base::sys.nframe()
[17:02:36.162]     ...future.conditions <- base::list()
[17:02:36.162]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.162]     if (FALSE) {
[17:02:36.162]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.162]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.162]     }
[17:02:36.162]     ...future.result <- base::tryCatch({
[17:02:36.162]         base::withCallingHandlers({
[17:02:36.162]             ...future.value <- base::withVisible(base::local({
[17:02:36.162]                 withCallingHandlers({
[17:02:36.162]                   {
[17:02:36.162]                     lm(dist ~ speed + I(speed^2), data = cars)
[17:02:36.162]                   }
[17:02:36.162]                 }, immediateCondition = function(cond) {
[17:02:36.162]                   save_rds <- function (object, pathname, ...) 
[17:02:36.162]                   {
[17:02:36.162]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:36.162]                     if (file_test("-f", pathname_tmp)) {
[17:02:36.162]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.162]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:36.162]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.162]                         fi_tmp[["mtime"]])
[17:02:36.162]                     }
[17:02:36.162]                     tryCatch({
[17:02:36.162]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:36.162]                     }, error = function(ex) {
[17:02:36.162]                       msg <- conditionMessage(ex)
[17:02:36.162]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.162]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:36.162]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.162]                         fi_tmp[["mtime"]], msg)
[17:02:36.162]                       ex$message <- msg
[17:02:36.162]                       stop(ex)
[17:02:36.162]                     })
[17:02:36.162]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:36.162]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:36.162]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:36.162]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.162]                       fi <- file.info(pathname)
[17:02:36.162]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:36.162]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.162]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:36.162]                         fi[["size"]], fi[["mtime"]])
[17:02:36.162]                       stop(msg)
[17:02:36.162]                     }
[17:02:36.162]                     invisible(pathname)
[17:02:36.162]                   }
[17:02:36.162]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:36.162]                     rootPath = tempdir()) 
[17:02:36.162]                   {
[17:02:36.162]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:36.162]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:36.162]                       tmpdir = path, fileext = ".rds")
[17:02:36.162]                     save_rds(obj, file)
[17:02:36.162]                   }
[17:02:36.162]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:36.162]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.162]                   {
[17:02:36.162]                     inherits <- base::inherits
[17:02:36.162]                     invokeRestart <- base::invokeRestart
[17:02:36.162]                     is.null <- base::is.null
[17:02:36.162]                     muffled <- FALSE
[17:02:36.162]                     if (inherits(cond, "message")) {
[17:02:36.162]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.162]                       if (muffled) 
[17:02:36.162]                         invokeRestart("muffleMessage")
[17:02:36.162]                     }
[17:02:36.162]                     else if (inherits(cond, "warning")) {
[17:02:36.162]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.162]                       if (muffled) 
[17:02:36.162]                         invokeRestart("muffleWarning")
[17:02:36.162]                     }
[17:02:36.162]                     else if (inherits(cond, "condition")) {
[17:02:36.162]                       if (!is.null(pattern)) {
[17:02:36.162]                         computeRestarts <- base::computeRestarts
[17:02:36.162]                         grepl <- base::grepl
[17:02:36.162]                         restarts <- computeRestarts(cond)
[17:02:36.162]                         for (restart in restarts) {
[17:02:36.162]                           name <- restart$name
[17:02:36.162]                           if (is.null(name)) 
[17:02:36.162]                             next
[17:02:36.162]                           if (!grepl(pattern, name)) 
[17:02:36.162]                             next
[17:02:36.162]                           invokeRestart(restart)
[17:02:36.162]                           muffled <- TRUE
[17:02:36.162]                           break
[17:02:36.162]                         }
[17:02:36.162]                       }
[17:02:36.162]                     }
[17:02:36.162]                     invisible(muffled)
[17:02:36.162]                   }
[17:02:36.162]                   muffleCondition(cond)
[17:02:36.162]                 })
[17:02:36.162]             }))
[17:02:36.162]             future::FutureResult(value = ...future.value$value, 
[17:02:36.162]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.162]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.162]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.162]                     ...future.globalenv.names))
[17:02:36.162]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.162]         }, condition = base::local({
[17:02:36.162]             c <- base::c
[17:02:36.162]             inherits <- base::inherits
[17:02:36.162]             invokeRestart <- base::invokeRestart
[17:02:36.162]             length <- base::length
[17:02:36.162]             list <- base::list
[17:02:36.162]             seq.int <- base::seq.int
[17:02:36.162]             signalCondition <- base::signalCondition
[17:02:36.162]             sys.calls <- base::sys.calls
[17:02:36.162]             `[[` <- base::`[[`
[17:02:36.162]             `+` <- base::`+`
[17:02:36.162]             `<<-` <- base::`<<-`
[17:02:36.162]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.162]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.162]                   3L)]
[17:02:36.162]             }
[17:02:36.162]             function(cond) {
[17:02:36.162]                 is_error <- inherits(cond, "error")
[17:02:36.162]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.162]                   NULL)
[17:02:36.162]                 if (is_error) {
[17:02:36.162]                   sessionInformation <- function() {
[17:02:36.162]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.162]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.162]                       search = base::search(), system = base::Sys.info())
[17:02:36.162]                   }
[17:02:36.162]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.162]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.162]                     cond$call), session = sessionInformation(), 
[17:02:36.162]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.162]                   signalCondition(cond)
[17:02:36.162]                 }
[17:02:36.162]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.162]                 "immediateCondition"))) {
[17:02:36.162]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.162]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.162]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.162]                   if (TRUE && !signal) {
[17:02:36.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.162]                     {
[17:02:36.162]                       inherits <- base::inherits
[17:02:36.162]                       invokeRestart <- base::invokeRestart
[17:02:36.162]                       is.null <- base::is.null
[17:02:36.162]                       muffled <- FALSE
[17:02:36.162]                       if (inherits(cond, "message")) {
[17:02:36.162]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.162]                         if (muffled) 
[17:02:36.162]                           invokeRestart("muffleMessage")
[17:02:36.162]                       }
[17:02:36.162]                       else if (inherits(cond, "warning")) {
[17:02:36.162]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.162]                         if (muffled) 
[17:02:36.162]                           invokeRestart("muffleWarning")
[17:02:36.162]                       }
[17:02:36.162]                       else if (inherits(cond, "condition")) {
[17:02:36.162]                         if (!is.null(pattern)) {
[17:02:36.162]                           computeRestarts <- base::computeRestarts
[17:02:36.162]                           grepl <- base::grepl
[17:02:36.162]                           restarts <- computeRestarts(cond)
[17:02:36.162]                           for (restart in restarts) {
[17:02:36.162]                             name <- restart$name
[17:02:36.162]                             if (is.null(name)) 
[17:02:36.162]                               next
[17:02:36.162]                             if (!grepl(pattern, name)) 
[17:02:36.162]                               next
[17:02:36.162]                             invokeRestart(restart)
[17:02:36.162]                             muffled <- TRUE
[17:02:36.162]                             break
[17:02:36.162]                           }
[17:02:36.162]                         }
[17:02:36.162]                       }
[17:02:36.162]                       invisible(muffled)
[17:02:36.162]                     }
[17:02:36.162]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.162]                   }
[17:02:36.162]                 }
[17:02:36.162]                 else {
[17:02:36.162]                   if (TRUE) {
[17:02:36.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.162]                     {
[17:02:36.162]                       inherits <- base::inherits
[17:02:36.162]                       invokeRestart <- base::invokeRestart
[17:02:36.162]                       is.null <- base::is.null
[17:02:36.162]                       muffled <- FALSE
[17:02:36.162]                       if (inherits(cond, "message")) {
[17:02:36.162]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.162]                         if (muffled) 
[17:02:36.162]                           invokeRestart("muffleMessage")
[17:02:36.162]                       }
[17:02:36.162]                       else if (inherits(cond, "warning")) {
[17:02:36.162]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.162]                         if (muffled) 
[17:02:36.162]                           invokeRestart("muffleWarning")
[17:02:36.162]                       }
[17:02:36.162]                       else if (inherits(cond, "condition")) {
[17:02:36.162]                         if (!is.null(pattern)) {
[17:02:36.162]                           computeRestarts <- base::computeRestarts
[17:02:36.162]                           grepl <- base::grepl
[17:02:36.162]                           restarts <- computeRestarts(cond)
[17:02:36.162]                           for (restart in restarts) {
[17:02:36.162]                             name <- restart$name
[17:02:36.162]                             if (is.null(name)) 
[17:02:36.162]                               next
[17:02:36.162]                             if (!grepl(pattern, name)) 
[17:02:36.162]                               next
[17:02:36.162]                             invokeRestart(restart)
[17:02:36.162]                             muffled <- TRUE
[17:02:36.162]                             break
[17:02:36.162]                           }
[17:02:36.162]                         }
[17:02:36.162]                       }
[17:02:36.162]                       invisible(muffled)
[17:02:36.162]                     }
[17:02:36.162]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.162]                   }
[17:02:36.162]                 }
[17:02:36.162]             }
[17:02:36.162]         }))
[17:02:36.162]     }, error = function(ex) {
[17:02:36.162]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.162]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.162]                 ...future.rng), started = ...future.startTime, 
[17:02:36.162]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.162]             version = "1.8"), class = "FutureResult")
[17:02:36.162]     }, finally = {
[17:02:36.162]         if (!identical(...future.workdir, getwd())) 
[17:02:36.162]             setwd(...future.workdir)
[17:02:36.162]         {
[17:02:36.162]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.162]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.162]             }
[17:02:36.162]             base::options(...future.oldOptions)
[17:02:36.162]             if (.Platform$OS.type == "windows") {
[17:02:36.162]                 old_names <- names(...future.oldEnvVars)
[17:02:36.162]                 envs <- base::Sys.getenv()
[17:02:36.162]                 names <- names(envs)
[17:02:36.162]                 common <- intersect(names, old_names)
[17:02:36.162]                 added <- setdiff(names, old_names)
[17:02:36.162]                 removed <- setdiff(old_names, names)
[17:02:36.162]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.162]                   envs[common]]
[17:02:36.162]                 NAMES <- toupper(changed)
[17:02:36.162]                 args <- list()
[17:02:36.162]                 for (kk in seq_along(NAMES)) {
[17:02:36.162]                   name <- changed[[kk]]
[17:02:36.162]                   NAME <- NAMES[[kk]]
[17:02:36.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.162]                     next
[17:02:36.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.162]                 }
[17:02:36.162]                 NAMES <- toupper(added)
[17:02:36.162]                 for (kk in seq_along(NAMES)) {
[17:02:36.162]                   name <- added[[kk]]
[17:02:36.162]                   NAME <- NAMES[[kk]]
[17:02:36.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.162]                     next
[17:02:36.162]                   args[[name]] <- ""
[17:02:36.162]                 }
[17:02:36.162]                 NAMES <- toupper(removed)
[17:02:36.162]                 for (kk in seq_along(NAMES)) {
[17:02:36.162]                   name <- removed[[kk]]
[17:02:36.162]                   NAME <- NAMES[[kk]]
[17:02:36.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.162]                     next
[17:02:36.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.162]                 }
[17:02:36.162]                 if (length(args) > 0) 
[17:02:36.162]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.162]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.162]             }
[17:02:36.162]             else {
[17:02:36.162]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.162]             }
[17:02:36.162]             {
[17:02:36.162]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.162]                   0L) {
[17:02:36.162]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.162]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.162]                   base::options(opts)
[17:02:36.162]                 }
[17:02:36.162]                 {
[17:02:36.162]                   {
[17:02:36.162]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.162]                     NULL
[17:02:36.162]                   }
[17:02:36.162]                   options(future.plan = NULL)
[17:02:36.162]                   if (is.na(NA_character_)) 
[17:02:36.162]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.162]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.162]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.162]                     .init = FALSE)
[17:02:36.162]                 }
[17:02:36.162]             }
[17:02:36.162]         }
[17:02:36.162]     })
[17:02:36.162]     if (TRUE) {
[17:02:36.162]         base::sink(type = "output", split = FALSE)
[17:02:36.162]         if (TRUE) {
[17:02:36.162]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.162]         }
[17:02:36.162]         else {
[17:02:36.162]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.162]         }
[17:02:36.162]         base::close(...future.stdout)
[17:02:36.162]         ...future.stdout <- NULL
[17:02:36.162]     }
[17:02:36.162]     ...future.result$conditions <- ...future.conditions
[17:02:36.162]     ...future.result$finished <- base::Sys.time()
[17:02:36.162]     ...future.result
[17:02:36.162] }
[17:02:36.199] requestCore(): workers = 2
[17:02:36.202] MulticoreFuture started
[17:02:36.202] - Launch lazy future ... done
[17:02:36.203] run() for ‘MulticoreFuture’ ... done
[17:02:36.204] result() for MulticoreFuture ...
[17:02:36.204] plan(): Setting new future strategy stack:
[17:02:36.205] List of future strategies:
[17:02:36.205] 1. sequential:
[17:02:36.205]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:36.205]    - tweaked: FALSE
[17:02:36.205]    - call: NULL
[17:02:36.206] plan(): nbrOfWorkers() = 1
[17:02:36.211] plan(): Setting new future strategy stack:
[17:02:36.211] List of future strategies:
[17:02:36.211] 1. multicore:
[17:02:36.211]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:36.211]    - tweaked: FALSE
[17:02:36.211]    - call: plan(strategy)
[17:02:36.217] plan(): nbrOfWorkers() = 2
[17:02:36.219] result() for MulticoreFuture ...
[17:02:36.220] result() for MulticoreFuture ... done
[17:02:36.220] result() for MulticoreFuture ... done
[17:02:36.220] result() for MulticoreFuture ...
[17:02:36.220] result() for MulticoreFuture ... done

Call:
lm(formula = dist ~ speed + I(speed^2), data = cars)

Coefficients:
(Intercept)        speed   I(speed^2)  
    2.47014      0.91329      0.09996  

- Globals - lm(<formula #5 (‘e’)>, data = cars) ...

Call:
lm(formula = dist ~ poly(speed, 2), data = cars)

Coefficients:
    (Intercept)  poly(speed, 2)1  poly(speed, 2)2  
          42.98           145.55            23.00  

[17:02:36.225] getGlobalsAndPackages() ...
[17:02:36.225] Searching for globals...
[17:02:36.228] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘poly’, ‘speed’, ‘~’, ‘cars’
[17:02:36.228] Searching for globals ... DONE
[17:02:36.228] Resolving globals: FALSE
[17:02:36.229] 
[17:02:36.229] - packages: [2] ‘stats’, ‘datasets’
[17:02:36.229] getGlobalsAndPackages() ... DONE
[17:02:36.229] run() for ‘Future’ ...
[17:02:36.229] - state: ‘created’
[17:02:36.230] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:36.234] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:36.234] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:36.234]   - Field: ‘label’
[17:02:36.234]   - Field: ‘local’
[17:02:36.234]   - Field: ‘owner’
[17:02:36.234]   - Field: ‘envir’
[17:02:36.235]   - Field: ‘workers’
[17:02:36.235]   - Field: ‘packages’
[17:02:36.235]   - Field: ‘gc’
[17:02:36.235]   - Field: ‘job’
[17:02:36.235]   - Field: ‘conditions’
[17:02:36.235]   - Field: ‘expr’
[17:02:36.235]   - Field: ‘uuid’
[17:02:36.235]   - Field: ‘seed’
[17:02:36.236]   - Field: ‘version’
[17:02:36.236]   - Field: ‘result’
[17:02:36.236]   - Field: ‘asynchronous’
[17:02:36.236]   - Field: ‘calls’
[17:02:36.236]   - Field: ‘globals’
[17:02:36.236]   - Field: ‘stdout’
[17:02:36.236]   - Field: ‘earlySignal’
[17:02:36.236]   - Field: ‘lazy’
[17:02:36.236]   - Field: ‘state’
[17:02:36.236] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:36.237] - Launch lazy future ...
[17:02:36.237] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:36.237] Packages needed by future strategies (n = 0): <none>
[17:02:36.238] {
[17:02:36.238]     {
[17:02:36.238]         {
[17:02:36.238]             ...future.startTime <- base::Sys.time()
[17:02:36.238]             {
[17:02:36.238]                 {
[17:02:36.238]                   {
[17:02:36.238]                     {
[17:02:36.238]                       {
[17:02:36.238]                         base::local({
[17:02:36.238]                           has_future <- base::requireNamespace("future", 
[17:02:36.238]                             quietly = TRUE)
[17:02:36.238]                           if (has_future) {
[17:02:36.238]                             ns <- base::getNamespace("future")
[17:02:36.238]                             version <- ns[[".package"]][["version"]]
[17:02:36.238]                             if (is.null(version)) 
[17:02:36.238]                               version <- utils::packageVersion("future")
[17:02:36.238]                           }
[17:02:36.238]                           else {
[17:02:36.238]                             version <- NULL
[17:02:36.238]                           }
[17:02:36.238]                           if (!has_future || version < "1.8.0") {
[17:02:36.238]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.238]                               "", base::R.version$version.string), 
[17:02:36.238]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:36.238]                                 base::R.version$platform, 8 * 
[17:02:36.238]                                   base::.Machine$sizeof.pointer), 
[17:02:36.238]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.238]                                 "release", "version")], collapse = " "), 
[17:02:36.238]                               hostname = base::Sys.info()[["nodename"]])
[17:02:36.238]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.238]                               info)
[17:02:36.238]                             info <- base::paste(info, collapse = "; ")
[17:02:36.238]                             if (!has_future) {
[17:02:36.238]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.238]                                 info)
[17:02:36.238]                             }
[17:02:36.238]                             else {
[17:02:36.238]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.238]                                 info, version)
[17:02:36.238]                             }
[17:02:36.238]                             base::stop(msg)
[17:02:36.238]                           }
[17:02:36.238]                         })
[17:02:36.238]                       }
[17:02:36.238]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.238]                       base::options(mc.cores = 1L)
[17:02:36.238]                     }
[17:02:36.238]                     base::local({
[17:02:36.238]                       for (pkg in c("stats", "datasets")) {
[17:02:36.238]                         base::loadNamespace(pkg)
[17:02:36.238]                         base::library(pkg, character.only = TRUE)
[17:02:36.238]                       }
[17:02:36.238]                     })
[17:02:36.238]                   }
[17:02:36.238]                   ...future.strategy.old <- future::plan("list")
[17:02:36.238]                   options(future.plan = NULL)
[17:02:36.238]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.238]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.238]                 }
[17:02:36.238]                 ...future.workdir <- getwd()
[17:02:36.238]             }
[17:02:36.238]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.238]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.238]         }
[17:02:36.238]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.238]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.238]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.238]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.238]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.238]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.238]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.238]             base::names(...future.oldOptions))
[17:02:36.238]     }
[17:02:36.238]     if (FALSE) {
[17:02:36.238]     }
[17:02:36.238]     else {
[17:02:36.238]         if (TRUE) {
[17:02:36.238]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.238]                 open = "w")
[17:02:36.238]         }
[17:02:36.238]         else {
[17:02:36.238]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.238]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.238]         }
[17:02:36.238]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.238]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.238]             base::sink(type = "output", split = FALSE)
[17:02:36.238]             base::close(...future.stdout)
[17:02:36.238]         }, add = TRUE)
[17:02:36.238]     }
[17:02:36.238]     ...future.frame <- base::sys.nframe()
[17:02:36.238]     ...future.conditions <- base::list()
[17:02:36.238]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.238]     if (FALSE) {
[17:02:36.238]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.238]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.238]     }
[17:02:36.238]     ...future.result <- base::tryCatch({
[17:02:36.238]         base::withCallingHandlers({
[17:02:36.238]             ...future.value <- base::withVisible(base::local({
[17:02:36.238]                 withCallingHandlers({
[17:02:36.238]                   {
[17:02:36.238]                     lm(dist ~ poly(speed, 2), data = cars)
[17:02:36.238]                   }
[17:02:36.238]                 }, immediateCondition = function(cond) {
[17:02:36.238]                   save_rds <- function (object, pathname, ...) 
[17:02:36.238]                   {
[17:02:36.238]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:36.238]                     if (file_test("-f", pathname_tmp)) {
[17:02:36.238]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.238]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:36.238]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.238]                         fi_tmp[["mtime"]])
[17:02:36.238]                     }
[17:02:36.238]                     tryCatch({
[17:02:36.238]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:36.238]                     }, error = function(ex) {
[17:02:36.238]                       msg <- conditionMessage(ex)
[17:02:36.238]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.238]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:36.238]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.238]                         fi_tmp[["mtime"]], msg)
[17:02:36.238]                       ex$message <- msg
[17:02:36.238]                       stop(ex)
[17:02:36.238]                     })
[17:02:36.238]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:36.238]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:36.238]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:36.238]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.238]                       fi <- file.info(pathname)
[17:02:36.238]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:36.238]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.238]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:36.238]                         fi[["size"]], fi[["mtime"]])
[17:02:36.238]                       stop(msg)
[17:02:36.238]                     }
[17:02:36.238]                     invisible(pathname)
[17:02:36.238]                   }
[17:02:36.238]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:36.238]                     rootPath = tempdir()) 
[17:02:36.238]                   {
[17:02:36.238]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:36.238]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:36.238]                       tmpdir = path, fileext = ".rds")
[17:02:36.238]                     save_rds(obj, file)
[17:02:36.238]                   }
[17:02:36.238]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:36.238]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.238]                   {
[17:02:36.238]                     inherits <- base::inherits
[17:02:36.238]                     invokeRestart <- base::invokeRestart
[17:02:36.238]                     is.null <- base::is.null
[17:02:36.238]                     muffled <- FALSE
[17:02:36.238]                     if (inherits(cond, "message")) {
[17:02:36.238]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.238]                       if (muffled) 
[17:02:36.238]                         invokeRestart("muffleMessage")
[17:02:36.238]                     }
[17:02:36.238]                     else if (inherits(cond, "warning")) {
[17:02:36.238]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.238]                       if (muffled) 
[17:02:36.238]                         invokeRestart("muffleWarning")
[17:02:36.238]                     }
[17:02:36.238]                     else if (inherits(cond, "condition")) {
[17:02:36.238]                       if (!is.null(pattern)) {
[17:02:36.238]                         computeRestarts <- base::computeRestarts
[17:02:36.238]                         grepl <- base::grepl
[17:02:36.238]                         restarts <- computeRestarts(cond)
[17:02:36.238]                         for (restart in restarts) {
[17:02:36.238]                           name <- restart$name
[17:02:36.238]                           if (is.null(name)) 
[17:02:36.238]                             next
[17:02:36.238]                           if (!grepl(pattern, name)) 
[17:02:36.238]                             next
[17:02:36.238]                           invokeRestart(restart)
[17:02:36.238]                           muffled <- TRUE
[17:02:36.238]                           break
[17:02:36.238]                         }
[17:02:36.238]                       }
[17:02:36.238]                     }
[17:02:36.238]                     invisible(muffled)
[17:02:36.238]                   }
[17:02:36.238]                   muffleCondition(cond)
[17:02:36.238]                 })
[17:02:36.238]             }))
[17:02:36.238]             future::FutureResult(value = ...future.value$value, 
[17:02:36.238]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.238]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.238]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.238]                     ...future.globalenv.names))
[17:02:36.238]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.238]         }, condition = base::local({
[17:02:36.238]             c <- base::c
[17:02:36.238]             inherits <- base::inherits
[17:02:36.238]             invokeRestart <- base::invokeRestart
[17:02:36.238]             length <- base::length
[17:02:36.238]             list <- base::list
[17:02:36.238]             seq.int <- base::seq.int
[17:02:36.238]             signalCondition <- base::signalCondition
[17:02:36.238]             sys.calls <- base::sys.calls
[17:02:36.238]             `[[` <- base::`[[`
[17:02:36.238]             `+` <- base::`+`
[17:02:36.238]             `<<-` <- base::`<<-`
[17:02:36.238]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.238]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.238]                   3L)]
[17:02:36.238]             }
[17:02:36.238]             function(cond) {
[17:02:36.238]                 is_error <- inherits(cond, "error")
[17:02:36.238]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.238]                   NULL)
[17:02:36.238]                 if (is_error) {
[17:02:36.238]                   sessionInformation <- function() {
[17:02:36.238]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.238]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.238]                       search = base::search(), system = base::Sys.info())
[17:02:36.238]                   }
[17:02:36.238]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.238]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.238]                     cond$call), session = sessionInformation(), 
[17:02:36.238]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.238]                   signalCondition(cond)
[17:02:36.238]                 }
[17:02:36.238]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.238]                 "immediateCondition"))) {
[17:02:36.238]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.238]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.238]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.238]                   if (TRUE && !signal) {
[17:02:36.238]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.238]                     {
[17:02:36.238]                       inherits <- base::inherits
[17:02:36.238]                       invokeRestart <- base::invokeRestart
[17:02:36.238]                       is.null <- base::is.null
[17:02:36.238]                       muffled <- FALSE
[17:02:36.238]                       if (inherits(cond, "message")) {
[17:02:36.238]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.238]                         if (muffled) 
[17:02:36.238]                           invokeRestart("muffleMessage")
[17:02:36.238]                       }
[17:02:36.238]                       else if (inherits(cond, "warning")) {
[17:02:36.238]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.238]                         if (muffled) 
[17:02:36.238]                           invokeRestart("muffleWarning")
[17:02:36.238]                       }
[17:02:36.238]                       else if (inherits(cond, "condition")) {
[17:02:36.238]                         if (!is.null(pattern)) {
[17:02:36.238]                           computeRestarts <- base::computeRestarts
[17:02:36.238]                           grepl <- base::grepl
[17:02:36.238]                           restarts <- computeRestarts(cond)
[17:02:36.238]                           for (restart in restarts) {
[17:02:36.238]                             name <- restart$name
[17:02:36.238]                             if (is.null(name)) 
[17:02:36.238]                               next
[17:02:36.238]                             if (!grepl(pattern, name)) 
[17:02:36.238]                               next
[17:02:36.238]                             invokeRestart(restart)
[17:02:36.238]                             muffled <- TRUE
[17:02:36.238]                             break
[17:02:36.238]                           }
[17:02:36.238]                         }
[17:02:36.238]                       }
[17:02:36.238]                       invisible(muffled)
[17:02:36.238]                     }
[17:02:36.238]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.238]                   }
[17:02:36.238]                 }
[17:02:36.238]                 else {
[17:02:36.238]                   if (TRUE) {
[17:02:36.238]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.238]                     {
[17:02:36.238]                       inherits <- base::inherits
[17:02:36.238]                       invokeRestart <- base::invokeRestart
[17:02:36.238]                       is.null <- base::is.null
[17:02:36.238]                       muffled <- FALSE
[17:02:36.238]                       if (inherits(cond, "message")) {
[17:02:36.238]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.238]                         if (muffled) 
[17:02:36.238]                           invokeRestart("muffleMessage")
[17:02:36.238]                       }
[17:02:36.238]                       else if (inherits(cond, "warning")) {
[17:02:36.238]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.238]                         if (muffled) 
[17:02:36.238]                           invokeRestart("muffleWarning")
[17:02:36.238]                       }
[17:02:36.238]                       else if (inherits(cond, "condition")) {
[17:02:36.238]                         if (!is.null(pattern)) {
[17:02:36.238]                           computeRestarts <- base::computeRestarts
[17:02:36.238]                           grepl <- base::grepl
[17:02:36.238]                           restarts <- computeRestarts(cond)
[17:02:36.238]                           for (restart in restarts) {
[17:02:36.238]                             name <- restart$name
[17:02:36.238]                             if (is.null(name)) 
[17:02:36.238]                               next
[17:02:36.238]                             if (!grepl(pattern, name)) 
[17:02:36.238]                               next
[17:02:36.238]                             invokeRestart(restart)
[17:02:36.238]                             muffled <- TRUE
[17:02:36.238]                             break
[17:02:36.238]                           }
[17:02:36.238]                         }
[17:02:36.238]                       }
[17:02:36.238]                       invisible(muffled)
[17:02:36.238]                     }
[17:02:36.238]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.238]                   }
[17:02:36.238]                 }
[17:02:36.238]             }
[17:02:36.238]         }))
[17:02:36.238]     }, error = function(ex) {
[17:02:36.238]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.238]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.238]                 ...future.rng), started = ...future.startTime, 
[17:02:36.238]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.238]             version = "1.8"), class = "FutureResult")
[17:02:36.238]     }, finally = {
[17:02:36.238]         if (!identical(...future.workdir, getwd())) 
[17:02:36.238]             setwd(...future.workdir)
[17:02:36.238]         {
[17:02:36.238]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.238]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.238]             }
[17:02:36.238]             base::options(...future.oldOptions)
[17:02:36.238]             if (.Platform$OS.type == "windows") {
[17:02:36.238]                 old_names <- names(...future.oldEnvVars)
[17:02:36.238]                 envs <- base::Sys.getenv()
[17:02:36.238]                 names <- names(envs)
[17:02:36.238]                 common <- intersect(names, old_names)
[17:02:36.238]                 added <- setdiff(names, old_names)
[17:02:36.238]                 removed <- setdiff(old_names, names)
[17:02:36.238]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.238]                   envs[common]]
[17:02:36.238]                 NAMES <- toupper(changed)
[17:02:36.238]                 args <- list()
[17:02:36.238]                 for (kk in seq_along(NAMES)) {
[17:02:36.238]                   name <- changed[[kk]]
[17:02:36.238]                   NAME <- NAMES[[kk]]
[17:02:36.238]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.238]                     next
[17:02:36.238]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.238]                 }
[17:02:36.238]                 NAMES <- toupper(added)
[17:02:36.238]                 for (kk in seq_along(NAMES)) {
[17:02:36.238]                   name <- added[[kk]]
[17:02:36.238]                   NAME <- NAMES[[kk]]
[17:02:36.238]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.238]                     next
[17:02:36.238]                   args[[name]] <- ""
[17:02:36.238]                 }
[17:02:36.238]                 NAMES <- toupper(removed)
[17:02:36.238]                 for (kk in seq_along(NAMES)) {
[17:02:36.238]                   name <- removed[[kk]]
[17:02:36.238]                   NAME <- NAMES[[kk]]
[17:02:36.238]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.238]                     next
[17:02:36.238]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.238]                 }
[17:02:36.238]                 if (length(args) > 0) 
[17:02:36.238]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.238]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.238]             }
[17:02:36.238]             else {
[17:02:36.238]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.238]             }
[17:02:36.238]             {
[17:02:36.238]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.238]                   0L) {
[17:02:36.238]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.238]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.238]                   base::options(opts)
[17:02:36.238]                 }
[17:02:36.238]                 {
[17:02:36.238]                   {
[17:02:36.238]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.238]                     NULL
[17:02:36.238]                   }
[17:02:36.238]                   options(future.plan = NULL)
[17:02:36.238]                   if (is.na(NA_character_)) 
[17:02:36.238]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.238]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.238]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.238]                     .init = FALSE)
[17:02:36.238]                 }
[17:02:36.238]             }
[17:02:36.238]         }
[17:02:36.238]     })
[17:02:36.238]     if (TRUE) {
[17:02:36.238]         base::sink(type = "output", split = FALSE)
[17:02:36.238]         if (TRUE) {
[17:02:36.238]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.238]         }
[17:02:36.238]         else {
[17:02:36.238]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.238]         }
[17:02:36.238]         base::close(...future.stdout)
[17:02:36.238]         ...future.stdout <- NULL
[17:02:36.238]     }
[17:02:36.238]     ...future.result$conditions <- ...future.conditions
[17:02:36.238]     ...future.result$finished <- base::Sys.time()
[17:02:36.238]     ...future.result
[17:02:36.238] }
[17:02:36.240] requestCore(): workers = 2
[17:02:36.242] MulticoreFuture started
[17:02:36.243] - Launch lazy future ... done
[17:02:36.243] run() for ‘MulticoreFuture’ ... done
[17:02:36.244] result() for MulticoreFuture ...
[17:02:36.244] plan(): Setting new future strategy stack:
[17:02:36.244] List of future strategies:
[17:02:36.244] 1. sequential:
[17:02:36.244]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:36.244]    - tweaked: FALSE
[17:02:36.244]    - call: NULL
[17:02:36.246] plan(): nbrOfWorkers() = 1
[17:02:36.250] plan(): Setting new future strategy stack:
[17:02:36.250] List of future strategies:
[17:02:36.250] 1. multicore:
[17:02:36.250]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:36.250]    - tweaked: FALSE
[17:02:36.250]    - call: plan(strategy)
[17:02:36.255] plan(): nbrOfWorkers() = 2
[17:02:36.258] result() for MulticoreFuture ...
[17:02:36.258] result() for MulticoreFuture ... done
[17:02:36.258] result() for MulticoreFuture ... done
[17:02:36.258] result() for MulticoreFuture ...
[17:02:36.258] result() for MulticoreFuture ... done

Call:
lm(formula = dist ~ poly(speed, 2), data = cars)

Coefficients:
    (Intercept)  poly(speed, 2)1  poly(speed, 2)2  
          42.98           145.55            23.00  

- Globals - map(x, ~ expr) ...
[17:02:36.261] getGlobalsAndPackages() ...
[17:02:36.261] Searching for globals...
[17:02:36.267] - globals found: [16] ‘{’, ‘outer_function’, ‘map’, ‘:’, ‘~’, ‘inner_function’, ‘.x’, ‘if’, ‘inherits’, ‘<-’, ‘[[’, ‘-’, ‘eval’, ‘bquote’, ‘lapply’, ‘+’
[17:02:36.267] Searching for globals ... DONE
[17:02:36.267] Resolving globals: FALSE
[17:02:36.268] The total size of the 3 globals is 7.52 KiB (7704 bytes)
[17:02:36.271] The total size of the 3 globals exported for future expression (‘{; outer_function(1L); }’) is 7.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘map’ (4.43 KiB of class ‘function’), ‘inner_function’ (1.78 KiB of class ‘function’) and ‘outer_function’ (1.31 KiB of class ‘function’)
[17:02:36.271] - globals: [3] ‘outer_function’, ‘map’, ‘inner_function’
[17:02:36.272] 
[17:02:36.272] getGlobalsAndPackages() ... DONE
[17:02:36.272] run() for ‘Future’ ...
[17:02:36.272] - state: ‘created’
[17:02:36.273] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:36.277] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:36.277] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:36.277]   - Field: ‘label’
[17:02:36.277]   - Field: ‘local’
[17:02:36.278]   - Field: ‘owner’
[17:02:36.278]   - Field: ‘envir’
[17:02:36.278]   - Field: ‘workers’
[17:02:36.278]   - Field: ‘packages’
[17:02:36.278]   - Field: ‘gc’
[17:02:36.278]   - Field: ‘job’
[17:02:36.278]   - Field: ‘conditions’
[17:02:36.278]   - Field: ‘expr’
[17:02:36.279]   - Field: ‘uuid’
[17:02:36.279]   - Field: ‘seed’
[17:02:36.279]   - Field: ‘version’
[17:02:36.279]   - Field: ‘result’
[17:02:36.279]   - Field: ‘asynchronous’
[17:02:36.279]   - Field: ‘calls’
[17:02:36.279]   - Field: ‘globals’
[17:02:36.279]   - Field: ‘stdout’
[17:02:36.280]   - Field: ‘earlySignal’
[17:02:36.280]   - Field: ‘lazy’
[17:02:36.280]   - Field: ‘state’
[17:02:36.280] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:36.280] - Launch lazy future ...
[17:02:36.280] Packages needed by the future expression (n = 0): <none>
[17:02:36.280] Packages needed by future strategies (n = 0): <none>
[17:02:36.281] {
[17:02:36.281]     {
[17:02:36.281]         {
[17:02:36.281]             ...future.startTime <- base::Sys.time()
[17:02:36.281]             {
[17:02:36.281]                 {
[17:02:36.281]                   {
[17:02:36.281]                     {
[17:02:36.281]                       base::local({
[17:02:36.281]                         has_future <- base::requireNamespace("future", 
[17:02:36.281]                           quietly = TRUE)
[17:02:36.281]                         if (has_future) {
[17:02:36.281]                           ns <- base::getNamespace("future")
[17:02:36.281]                           version <- ns[[".package"]][["version"]]
[17:02:36.281]                           if (is.null(version)) 
[17:02:36.281]                             version <- utils::packageVersion("future")
[17:02:36.281]                         }
[17:02:36.281]                         else {
[17:02:36.281]                           version <- NULL
[17:02:36.281]                         }
[17:02:36.281]                         if (!has_future || version < "1.8.0") {
[17:02:36.281]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.281]                             "", base::R.version$version.string), 
[17:02:36.281]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:36.281]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:36.281]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.281]                               "release", "version")], collapse = " "), 
[17:02:36.281]                             hostname = base::Sys.info()[["nodename"]])
[17:02:36.281]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.281]                             info)
[17:02:36.281]                           info <- base::paste(info, collapse = "; ")
[17:02:36.281]                           if (!has_future) {
[17:02:36.281]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.281]                               info)
[17:02:36.281]                           }
[17:02:36.281]                           else {
[17:02:36.281]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.281]                               info, version)
[17:02:36.281]                           }
[17:02:36.281]                           base::stop(msg)
[17:02:36.281]                         }
[17:02:36.281]                       })
[17:02:36.281]                     }
[17:02:36.281]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.281]                     base::options(mc.cores = 1L)
[17:02:36.281]                   }
[17:02:36.281]                   ...future.strategy.old <- future::plan("list")
[17:02:36.281]                   options(future.plan = NULL)
[17:02:36.281]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.281]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.281]                 }
[17:02:36.281]                 ...future.workdir <- getwd()
[17:02:36.281]             }
[17:02:36.281]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.281]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.281]         }
[17:02:36.281]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.281]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.281]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.281]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.281]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.281]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.281]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.281]             base::names(...future.oldOptions))
[17:02:36.281]     }
[17:02:36.281]     if (FALSE) {
[17:02:36.281]     }
[17:02:36.281]     else {
[17:02:36.281]         if (TRUE) {
[17:02:36.281]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.281]                 open = "w")
[17:02:36.281]         }
[17:02:36.281]         else {
[17:02:36.281]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.281]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.281]         }
[17:02:36.281]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.281]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.281]             base::sink(type = "output", split = FALSE)
[17:02:36.281]             base::close(...future.stdout)
[17:02:36.281]         }, add = TRUE)
[17:02:36.281]     }
[17:02:36.281]     ...future.frame <- base::sys.nframe()
[17:02:36.281]     ...future.conditions <- base::list()
[17:02:36.281]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.281]     if (FALSE) {
[17:02:36.281]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.281]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.281]     }
[17:02:36.281]     ...future.result <- base::tryCatch({
[17:02:36.281]         base::withCallingHandlers({
[17:02:36.281]             ...future.value <- base::withVisible(base::local({
[17:02:36.281]                 withCallingHandlers({
[17:02:36.281]                   {
[17:02:36.281]                     outer_function(1L)
[17:02:36.281]                   }
[17:02:36.281]                 }, immediateCondition = function(cond) {
[17:02:36.281]                   save_rds <- function (object, pathname, ...) 
[17:02:36.281]                   {
[17:02:36.281]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:36.281]                     if (file_test("-f", pathname_tmp)) {
[17:02:36.281]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.281]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:36.281]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.281]                         fi_tmp[["mtime"]])
[17:02:36.281]                     }
[17:02:36.281]                     tryCatch({
[17:02:36.281]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:36.281]                     }, error = function(ex) {
[17:02:36.281]                       msg <- conditionMessage(ex)
[17:02:36.281]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.281]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:36.281]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.281]                         fi_tmp[["mtime"]], msg)
[17:02:36.281]                       ex$message <- msg
[17:02:36.281]                       stop(ex)
[17:02:36.281]                     })
[17:02:36.281]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:36.281]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:36.281]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:36.281]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.281]                       fi <- file.info(pathname)
[17:02:36.281]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:36.281]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.281]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:36.281]                         fi[["size"]], fi[["mtime"]])
[17:02:36.281]                       stop(msg)
[17:02:36.281]                     }
[17:02:36.281]                     invisible(pathname)
[17:02:36.281]                   }
[17:02:36.281]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:36.281]                     rootPath = tempdir()) 
[17:02:36.281]                   {
[17:02:36.281]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:36.281]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:36.281]                       tmpdir = path, fileext = ".rds")
[17:02:36.281]                     save_rds(obj, file)
[17:02:36.281]                   }
[17:02:36.281]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:36.281]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.281]                   {
[17:02:36.281]                     inherits <- base::inherits
[17:02:36.281]                     invokeRestart <- base::invokeRestart
[17:02:36.281]                     is.null <- base::is.null
[17:02:36.281]                     muffled <- FALSE
[17:02:36.281]                     if (inherits(cond, "message")) {
[17:02:36.281]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.281]                       if (muffled) 
[17:02:36.281]                         invokeRestart("muffleMessage")
[17:02:36.281]                     }
[17:02:36.281]                     else if (inherits(cond, "warning")) {
[17:02:36.281]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.281]                       if (muffled) 
[17:02:36.281]                         invokeRestart("muffleWarning")
[17:02:36.281]                     }
[17:02:36.281]                     else if (inherits(cond, "condition")) {
[17:02:36.281]                       if (!is.null(pattern)) {
[17:02:36.281]                         computeRestarts <- base::computeRestarts
[17:02:36.281]                         grepl <- base::grepl
[17:02:36.281]                         restarts <- computeRestarts(cond)
[17:02:36.281]                         for (restart in restarts) {
[17:02:36.281]                           name <- restart$name
[17:02:36.281]                           if (is.null(name)) 
[17:02:36.281]                             next
[17:02:36.281]                           if (!grepl(pattern, name)) 
[17:02:36.281]                             next
[17:02:36.281]                           invokeRestart(restart)
[17:02:36.281]                           muffled <- TRUE
[17:02:36.281]                           break
[17:02:36.281]                         }
[17:02:36.281]                       }
[17:02:36.281]                     }
[17:02:36.281]                     invisible(muffled)
[17:02:36.281]                   }
[17:02:36.281]                   muffleCondition(cond)
[17:02:36.281]                 })
[17:02:36.281]             }))
[17:02:36.281]             future::FutureResult(value = ...future.value$value, 
[17:02:36.281]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.281]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.281]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.281]                     ...future.globalenv.names))
[17:02:36.281]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.281]         }, condition = base::local({
[17:02:36.281]             c <- base::c
[17:02:36.281]             inherits <- base::inherits
[17:02:36.281]             invokeRestart <- base::invokeRestart
[17:02:36.281]             length <- base::length
[17:02:36.281]             list <- base::list
[17:02:36.281]             seq.int <- base::seq.int
[17:02:36.281]             signalCondition <- base::signalCondition
[17:02:36.281]             sys.calls <- base::sys.calls
[17:02:36.281]             `[[` <- base::`[[`
[17:02:36.281]             `+` <- base::`+`
[17:02:36.281]             `<<-` <- base::`<<-`
[17:02:36.281]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.281]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.281]                   3L)]
[17:02:36.281]             }
[17:02:36.281]             function(cond) {
[17:02:36.281]                 is_error <- inherits(cond, "error")
[17:02:36.281]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.281]                   NULL)
[17:02:36.281]                 if (is_error) {
[17:02:36.281]                   sessionInformation <- function() {
[17:02:36.281]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.281]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.281]                       search = base::search(), system = base::Sys.info())
[17:02:36.281]                   }
[17:02:36.281]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.281]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.281]                     cond$call), session = sessionInformation(), 
[17:02:36.281]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.281]                   signalCondition(cond)
[17:02:36.281]                 }
[17:02:36.281]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.281]                 "immediateCondition"))) {
[17:02:36.281]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.281]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.281]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.281]                   if (TRUE && !signal) {
[17:02:36.281]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.281]                     {
[17:02:36.281]                       inherits <- base::inherits
[17:02:36.281]                       invokeRestart <- base::invokeRestart
[17:02:36.281]                       is.null <- base::is.null
[17:02:36.281]                       muffled <- FALSE
[17:02:36.281]                       if (inherits(cond, "message")) {
[17:02:36.281]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.281]                         if (muffled) 
[17:02:36.281]                           invokeRestart("muffleMessage")
[17:02:36.281]                       }
[17:02:36.281]                       else if (inherits(cond, "warning")) {
[17:02:36.281]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.281]                         if (muffled) 
[17:02:36.281]                           invokeRestart("muffleWarning")
[17:02:36.281]                       }
[17:02:36.281]                       else if (inherits(cond, "condition")) {
[17:02:36.281]                         if (!is.null(pattern)) {
[17:02:36.281]                           computeRestarts <- base::computeRestarts
[17:02:36.281]                           grepl <- base::grepl
[17:02:36.281]                           restarts <- computeRestarts(cond)
[17:02:36.281]                           for (restart in restarts) {
[17:02:36.281]                             name <- restart$name
[17:02:36.281]                             if (is.null(name)) 
[17:02:36.281]                               next
[17:02:36.281]                             if (!grepl(pattern, name)) 
[17:02:36.281]                               next
[17:02:36.281]                             invokeRestart(restart)
[17:02:36.281]                             muffled <- TRUE
[17:02:36.281]                             break
[17:02:36.281]                           }
[17:02:36.281]                         }
[17:02:36.281]                       }
[17:02:36.281]                       invisible(muffled)
[17:02:36.281]                     }
[17:02:36.281]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.281]                   }
[17:02:36.281]                 }
[17:02:36.281]                 else {
[17:02:36.281]                   if (TRUE) {
[17:02:36.281]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.281]                     {
[17:02:36.281]                       inherits <- base::inherits
[17:02:36.281]                       invokeRestart <- base::invokeRestart
[17:02:36.281]                       is.null <- base::is.null
[17:02:36.281]                       muffled <- FALSE
[17:02:36.281]                       if (inherits(cond, "message")) {
[17:02:36.281]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.281]                         if (muffled) 
[17:02:36.281]                           invokeRestart("muffleMessage")
[17:02:36.281]                       }
[17:02:36.281]                       else if (inherits(cond, "warning")) {
[17:02:36.281]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.281]                         if (muffled) 
[17:02:36.281]                           invokeRestart("muffleWarning")
[17:02:36.281]                       }
[17:02:36.281]                       else if (inherits(cond, "condition")) {
[17:02:36.281]                         if (!is.null(pattern)) {
[17:02:36.281]                           computeRestarts <- base::computeRestarts
[17:02:36.281]                           grepl <- base::grepl
[17:02:36.281]                           restarts <- computeRestarts(cond)
[17:02:36.281]                           for (restart in restarts) {
[17:02:36.281]                             name <- restart$name
[17:02:36.281]                             if (is.null(name)) 
[17:02:36.281]                               next
[17:02:36.281]                             if (!grepl(pattern, name)) 
[17:02:36.281]                               next
[17:02:36.281]                             invokeRestart(restart)
[17:02:36.281]                             muffled <- TRUE
[17:02:36.281]                             break
[17:02:36.281]                           }
[17:02:36.281]                         }
[17:02:36.281]                       }
[17:02:36.281]                       invisible(muffled)
[17:02:36.281]                     }
[17:02:36.281]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.281]                   }
[17:02:36.281]                 }
[17:02:36.281]             }
[17:02:36.281]         }))
[17:02:36.281]     }, error = function(ex) {
[17:02:36.281]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.281]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.281]                 ...future.rng), started = ...future.startTime, 
[17:02:36.281]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.281]             version = "1.8"), class = "FutureResult")
[17:02:36.281]     }, finally = {
[17:02:36.281]         if (!identical(...future.workdir, getwd())) 
[17:02:36.281]             setwd(...future.workdir)
[17:02:36.281]         {
[17:02:36.281]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.281]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.281]             }
[17:02:36.281]             base::options(...future.oldOptions)
[17:02:36.281]             if (.Platform$OS.type == "windows") {
[17:02:36.281]                 old_names <- names(...future.oldEnvVars)
[17:02:36.281]                 envs <- base::Sys.getenv()
[17:02:36.281]                 names <- names(envs)
[17:02:36.281]                 common <- intersect(names, old_names)
[17:02:36.281]                 added <- setdiff(names, old_names)
[17:02:36.281]                 removed <- setdiff(old_names, names)
[17:02:36.281]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.281]                   envs[common]]
[17:02:36.281]                 NAMES <- toupper(changed)
[17:02:36.281]                 args <- list()
[17:02:36.281]                 for (kk in seq_along(NAMES)) {
[17:02:36.281]                   name <- changed[[kk]]
[17:02:36.281]                   NAME <- NAMES[[kk]]
[17:02:36.281]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.281]                     next
[17:02:36.281]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.281]                 }
[17:02:36.281]                 NAMES <- toupper(added)
[17:02:36.281]                 for (kk in seq_along(NAMES)) {
[17:02:36.281]                   name <- added[[kk]]
[17:02:36.281]                   NAME <- NAMES[[kk]]
[17:02:36.281]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.281]                     next
[17:02:36.281]                   args[[name]] <- ""
[17:02:36.281]                 }
[17:02:36.281]                 NAMES <- toupper(removed)
[17:02:36.281]                 for (kk in seq_along(NAMES)) {
[17:02:36.281]                   name <- removed[[kk]]
[17:02:36.281]                   NAME <- NAMES[[kk]]
[17:02:36.281]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.281]                     next
[17:02:36.281]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.281]                 }
[17:02:36.281]                 if (length(args) > 0) 
[17:02:36.281]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.281]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.281]             }
[17:02:36.281]             else {
[17:02:36.281]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.281]             }
[17:02:36.281]             {
[17:02:36.281]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.281]                   0L) {
[17:02:36.281]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.281]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.281]                   base::options(opts)
[17:02:36.281]                 }
[17:02:36.281]                 {
[17:02:36.281]                   {
[17:02:36.281]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.281]                     NULL
[17:02:36.281]                   }
[17:02:36.281]                   options(future.plan = NULL)
[17:02:36.281]                   if (is.na(NA_character_)) 
[17:02:36.281]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.281]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.281]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.281]                     .init = FALSE)
[17:02:36.281]                 }
[17:02:36.281]             }
[17:02:36.281]         }
[17:02:36.281]     })
[17:02:36.281]     if (TRUE) {
[17:02:36.281]         base::sink(type = "output", split = FALSE)
[17:02:36.281]         if (TRUE) {
[17:02:36.281]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.281]         }
[17:02:36.281]         else {
[17:02:36.281]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.281]         }
[17:02:36.281]         base::close(...future.stdout)
[17:02:36.281]         ...future.stdout <- NULL
[17:02:36.281]     }
[17:02:36.281]     ...future.result$conditions <- ...future.conditions
[17:02:36.281]     ...future.result$finished <- base::Sys.time()
[17:02:36.281]     ...future.result
[17:02:36.281] }
[17:02:36.283] assign_globals() ...
[17:02:36.283] List of 3
[17:02:36.283]  $ outer_function:function (x)  
[17:02:36.283]  $ map           :function (.x, .f, ...)  
[17:02:36.283]  $ inner_function:function (x)  
[17:02:36.283]  - attr(*, "where")=List of 3
[17:02:36.283]   ..$ outer_function:<environment: R_EmptyEnv> 
[17:02:36.283]   ..$ map           :<environment: R_EmptyEnv> 
[17:02:36.283]   ..$ inner_function:<environment: R_EmptyEnv> 
[17:02:36.283]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:36.283]  - attr(*, "resolved")= logi FALSE
[17:02:36.283]  - attr(*, "total_size")= num 7704
[17:02:36.283]  - attr(*, "already-done")= logi TRUE
[17:02:36.287] - reassign environment for ‘outer_function’
[17:02:36.287] - copied ‘outer_function’ to environment
[17:02:36.288] - reassign environment for ‘map’
[17:02:36.288] - copied ‘map’ to environment
[17:02:36.288] - reassign environment for ‘inner_function’
[17:02:36.288] - copied ‘inner_function’ to environment
[17:02:36.288] assign_globals() ... done
[17:02:36.288] requestCore(): workers = 2
[17:02:36.290] MulticoreFuture started
[17:02:36.291] - Launch lazy future ... done
[17:02:36.291] run() for ‘MulticoreFuture’ ... done
[17:02:36.291] result() for MulticoreFuture ...
[17:02:36.292] plan(): Setting new future strategy stack:
[17:02:36.292] List of future strategies:
[17:02:36.292] 1. sequential:
[17:02:36.292]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:36.292]    - tweaked: FALSE
[17:02:36.292]    - call: NULL
[17:02:36.293] plan(): nbrOfWorkers() = 1
[17:02:36.295] plan(): Setting new future strategy stack:
[17:02:36.295] List of future strategies:
[17:02:36.295] 1. multicore:
[17:02:36.295]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:36.295]    - tweaked: FALSE
[17:02:36.295]    - call: plan(strategy)
[17:02:36.301] plan(): nbrOfWorkers() = 2
[17:02:36.302] result() for MulticoreFuture ...
[17:02:36.302] result() for MulticoreFuture ... done
[17:02:36.303] result() for MulticoreFuture ... done
[17:02:36.303] result() for MulticoreFuture ...
[17:02:36.303] result() for MulticoreFuture ... done
List of 2
 $ : num [1:2] 2 3
 $ : num [1:2] 2 3
[17:02:36.305] getGlobalsAndPackages() ...
[17:02:36.305] Searching for globals...
[17:02:36.310] - globals found: [16] ‘{’, ‘outer_function’, ‘map’, ‘:’, ‘~’, ‘inner_function’, ‘.x’, ‘if’, ‘inherits’, ‘<-’, ‘[[’, ‘-’, ‘eval’, ‘bquote’, ‘lapply’, ‘+’
[17:02:36.311] Searching for globals ... DONE
[17:02:36.311] Resolving globals: FALSE
[17:02:36.312] The total size of the 3 globals is 7.52 KiB (7704 bytes)
[17:02:36.312] The total size of the 3 globals exported for future expression (‘{; outer_function(1L); }’) is 7.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘map’ (4.43 KiB of class ‘function’), ‘inner_function’ (1.78 KiB of class ‘function’) and ‘outer_function’ (1.31 KiB of class ‘function’)
[17:02:36.313] - globals: [3] ‘outer_function’, ‘map’, ‘inner_function’
[17:02:36.313] 
[17:02:36.313] getGlobalsAndPackages() ... DONE
[17:02:36.313] run() for ‘Future’ ...
[17:02:36.313] - state: ‘created’
[17:02:36.313] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:36.318] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:36.318] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:36.318]   - Field: ‘label’
[17:02:36.318]   - Field: ‘local’
[17:02:36.318]   - Field: ‘owner’
[17:02:36.318]   - Field: ‘envir’
[17:02:36.319]   - Field: ‘workers’
[17:02:36.319]   - Field: ‘packages’
[17:02:36.319]   - Field: ‘gc’
[17:02:36.319]   - Field: ‘job’
[17:02:36.319]   - Field: ‘conditions’
[17:02:36.319]   - Field: ‘expr’
[17:02:36.319]   - Field: ‘uuid’
[17:02:36.319]   - Field: ‘seed’
[17:02:36.320]   - Field: ‘version’
[17:02:36.320]   - Field: ‘result’
[17:02:36.320]   - Field: ‘asynchronous’
[17:02:36.320]   - Field: ‘calls’
[17:02:36.320]   - Field: ‘globals’
[17:02:36.322]   - Field: ‘stdout’
[17:02:36.322]   - Field: ‘earlySignal’
[17:02:36.322]   - Field: ‘lazy’
[17:02:36.323]   - Field: ‘state’
[17:02:36.323] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:36.323] - Launch lazy future ...
[17:02:36.323] Packages needed by the future expression (n = 0): <none>
[17:02:36.324] Packages needed by future strategies (n = 0): <none>
[17:02:36.324] {
[17:02:36.324]     {
[17:02:36.324]         {
[17:02:36.324]             ...future.startTime <- base::Sys.time()
[17:02:36.324]             {
[17:02:36.324]                 {
[17:02:36.324]                   {
[17:02:36.324]                     {
[17:02:36.324]                       base::local({
[17:02:36.324]                         has_future <- base::requireNamespace("future", 
[17:02:36.324]                           quietly = TRUE)
[17:02:36.324]                         if (has_future) {
[17:02:36.324]                           ns <- base::getNamespace("future")
[17:02:36.324]                           version <- ns[[".package"]][["version"]]
[17:02:36.324]                           if (is.null(version)) 
[17:02:36.324]                             version <- utils::packageVersion("future")
[17:02:36.324]                         }
[17:02:36.324]                         else {
[17:02:36.324]                           version <- NULL
[17:02:36.324]                         }
[17:02:36.324]                         if (!has_future || version < "1.8.0") {
[17:02:36.324]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.324]                             "", base::R.version$version.string), 
[17:02:36.324]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:36.324]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:36.324]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.324]                               "release", "version")], collapse = " "), 
[17:02:36.324]                             hostname = base::Sys.info()[["nodename"]])
[17:02:36.324]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.324]                             info)
[17:02:36.324]                           info <- base::paste(info, collapse = "; ")
[17:02:36.324]                           if (!has_future) {
[17:02:36.324]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.324]                               info)
[17:02:36.324]                           }
[17:02:36.324]                           else {
[17:02:36.324]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.324]                               info, version)
[17:02:36.324]                           }
[17:02:36.324]                           base::stop(msg)
[17:02:36.324]                         }
[17:02:36.324]                       })
[17:02:36.324]                     }
[17:02:36.324]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.324]                     base::options(mc.cores = 1L)
[17:02:36.324]                   }
[17:02:36.324]                   ...future.strategy.old <- future::plan("list")
[17:02:36.324]                   options(future.plan = NULL)
[17:02:36.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.324]                 }
[17:02:36.324]                 ...future.workdir <- getwd()
[17:02:36.324]             }
[17:02:36.324]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.324]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.324]         }
[17:02:36.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.324]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.324]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.324]             base::names(...future.oldOptions))
[17:02:36.324]     }
[17:02:36.324]     if (FALSE) {
[17:02:36.324]     }
[17:02:36.324]     else {
[17:02:36.324]         if (TRUE) {
[17:02:36.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.324]                 open = "w")
[17:02:36.324]         }
[17:02:36.324]         else {
[17:02:36.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.324]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.324]         }
[17:02:36.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.324]             base::sink(type = "output", split = FALSE)
[17:02:36.324]             base::close(...future.stdout)
[17:02:36.324]         }, add = TRUE)
[17:02:36.324]     }
[17:02:36.324]     ...future.frame <- base::sys.nframe()
[17:02:36.324]     ...future.conditions <- base::list()
[17:02:36.324]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.324]     if (FALSE) {
[17:02:36.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.324]     }
[17:02:36.324]     ...future.result <- base::tryCatch({
[17:02:36.324]         base::withCallingHandlers({
[17:02:36.324]             ...future.value <- base::withVisible(base::local({
[17:02:36.324]                 withCallingHandlers({
[17:02:36.324]                   {
[17:02:36.324]                     outer_function(1L)
[17:02:36.324]                   }
[17:02:36.324]                 }, immediateCondition = function(cond) {
[17:02:36.324]                   save_rds <- function (object, pathname, ...) 
[17:02:36.324]                   {
[17:02:36.324]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:36.324]                     if (file_test("-f", pathname_tmp)) {
[17:02:36.324]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.324]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:36.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.324]                         fi_tmp[["mtime"]])
[17:02:36.324]                     }
[17:02:36.324]                     tryCatch({
[17:02:36.324]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:36.324]                     }, error = function(ex) {
[17:02:36.324]                       msg <- conditionMessage(ex)
[17:02:36.324]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.324]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:36.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.324]                         fi_tmp[["mtime"]], msg)
[17:02:36.324]                       ex$message <- msg
[17:02:36.324]                       stop(ex)
[17:02:36.324]                     })
[17:02:36.324]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:36.324]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:36.324]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:36.324]                       fi_tmp <- file.info(pathname_tmp)
[17:02:36.324]                       fi <- file.info(pathname)
[17:02:36.324]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:36.324]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:36.324]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:36.324]                         fi[["size"]], fi[["mtime"]])
[17:02:36.324]                       stop(msg)
[17:02:36.324]                     }
[17:02:36.324]                     invisible(pathname)
[17:02:36.324]                   }
[17:02:36.324]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:36.324]                     rootPath = tempdir()) 
[17:02:36.324]                   {
[17:02:36.324]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:36.324]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:36.324]                       tmpdir = path, fileext = ".rds")
[17:02:36.324]                     save_rds(obj, file)
[17:02:36.324]                   }
[17:02:36.324]                   saveImmediateCondition(cond, path = "/tmp/RtmpwWRyEM/.future/immediateConditions")
[17:02:36.324]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.324]                   {
[17:02:36.324]                     inherits <- base::inherits
[17:02:36.324]                     invokeRestart <- base::invokeRestart
[17:02:36.324]                     is.null <- base::is.null
[17:02:36.324]                     muffled <- FALSE
[17:02:36.324]                     if (inherits(cond, "message")) {
[17:02:36.324]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.324]                       if (muffled) 
[17:02:36.324]                         invokeRestart("muffleMessage")
[17:02:36.324]                     }
[17:02:36.324]                     else if (inherits(cond, "warning")) {
[17:02:36.324]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.324]                       if (muffled) 
[17:02:36.324]                         invokeRestart("muffleWarning")
[17:02:36.324]                     }
[17:02:36.324]                     else if (inherits(cond, "condition")) {
[17:02:36.324]                       if (!is.null(pattern)) {
[17:02:36.324]                         computeRestarts <- base::computeRestarts
[17:02:36.324]                         grepl <- base::grepl
[17:02:36.324]                         restarts <- computeRestarts(cond)
[17:02:36.324]                         for (restart in restarts) {
[17:02:36.324]                           name <- restart$name
[17:02:36.324]                           if (is.null(name)) 
[17:02:36.324]                             next
[17:02:36.324]                           if (!grepl(pattern, name)) 
[17:02:36.324]                             next
[17:02:36.324]                           invokeRestart(restart)
[17:02:36.324]                           muffled <- TRUE
[17:02:36.324]                           break
[17:02:36.324]                         }
[17:02:36.324]                       }
[17:02:36.324]                     }
[17:02:36.324]                     invisible(muffled)
[17:02:36.324]                   }
[17:02:36.324]                   muffleCondition(cond)
[17:02:36.324]                 })
[17:02:36.324]             }))
[17:02:36.324]             future::FutureResult(value = ...future.value$value, 
[17:02:36.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.324]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.324]                     ...future.globalenv.names))
[17:02:36.324]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.324]         }, condition = base::local({
[17:02:36.324]             c <- base::c
[17:02:36.324]             inherits <- base::inherits
[17:02:36.324]             invokeRestart <- base::invokeRestart
[17:02:36.324]             length <- base::length
[17:02:36.324]             list <- base::list
[17:02:36.324]             seq.int <- base::seq.int
[17:02:36.324]             signalCondition <- base::signalCondition
[17:02:36.324]             sys.calls <- base::sys.calls
[17:02:36.324]             `[[` <- base::`[[`
[17:02:36.324]             `+` <- base::`+`
[17:02:36.324]             `<<-` <- base::`<<-`
[17:02:36.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.324]                   3L)]
[17:02:36.324]             }
[17:02:36.324]             function(cond) {
[17:02:36.324]                 is_error <- inherits(cond, "error")
[17:02:36.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.324]                   NULL)
[17:02:36.324]                 if (is_error) {
[17:02:36.324]                   sessionInformation <- function() {
[17:02:36.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.324]                       search = base::search(), system = base::Sys.info())
[17:02:36.324]                   }
[17:02:36.324]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.324]                     cond$call), session = sessionInformation(), 
[17:02:36.324]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.324]                   signalCondition(cond)
[17:02:36.324]                 }
[17:02:36.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.324]                 "immediateCondition"))) {
[17:02:36.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.324]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.324]                   if (TRUE && !signal) {
[17:02:36.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.324]                     {
[17:02:36.324]                       inherits <- base::inherits
[17:02:36.324]                       invokeRestart <- base::invokeRestart
[17:02:36.324]                       is.null <- base::is.null
[17:02:36.324]                       muffled <- FALSE
[17:02:36.324]                       if (inherits(cond, "message")) {
[17:02:36.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.324]                         if (muffled) 
[17:02:36.324]                           invokeRestart("muffleMessage")
[17:02:36.324]                       }
[17:02:36.324]                       else if (inherits(cond, "warning")) {
[17:02:36.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.324]                         if (muffled) 
[17:02:36.324]                           invokeRestart("muffleWarning")
[17:02:36.324]                       }
[17:02:36.324]                       else if (inherits(cond, "condition")) {
[17:02:36.324]                         if (!is.null(pattern)) {
[17:02:36.324]                           computeRestarts <- base::computeRestarts
[17:02:36.324]                           grepl <- base::grepl
[17:02:36.324]                           restarts <- computeRestarts(cond)
[17:02:36.324]                           for (restart in restarts) {
[17:02:36.324]                             name <- restart$name
[17:02:36.324]                             if (is.null(name)) 
[17:02:36.324]                               next
[17:02:36.324]                             if (!grepl(pattern, name)) 
[17:02:36.324]                               next
[17:02:36.324]                             invokeRestart(restart)
[17:02:36.324]                             muffled <- TRUE
[17:02:36.324]                             break
[17:02:36.324]                           }
[17:02:36.324]                         }
[17:02:36.324]                       }
[17:02:36.324]                       invisible(muffled)
[17:02:36.324]                     }
[17:02:36.324]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.324]                   }
[17:02:36.324]                 }
[17:02:36.324]                 else {
[17:02:36.324]                   if (TRUE) {
[17:02:36.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.324]                     {
[17:02:36.324]                       inherits <- base::inherits
[17:02:36.324]                       invokeRestart <- base::invokeRestart
[17:02:36.324]                       is.null <- base::is.null
[17:02:36.324]                       muffled <- FALSE
[17:02:36.324]                       if (inherits(cond, "message")) {
[17:02:36.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.324]                         if (muffled) 
[17:02:36.324]                           invokeRestart("muffleMessage")
[17:02:36.324]                       }
[17:02:36.324]                       else if (inherits(cond, "warning")) {
[17:02:36.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.324]                         if (muffled) 
[17:02:36.324]                           invokeRestart("muffleWarning")
[17:02:36.324]                       }
[17:02:36.324]                       else if (inherits(cond, "condition")) {
[17:02:36.324]                         if (!is.null(pattern)) {
[17:02:36.324]                           computeRestarts <- base::computeRestarts
[17:02:36.324]                           grepl <- base::grepl
[17:02:36.324]                           restarts <- computeRestarts(cond)
[17:02:36.324]                           for (restart in restarts) {
[17:02:36.324]                             name <- restart$name
[17:02:36.324]                             if (is.null(name)) 
[17:02:36.324]                               next
[17:02:36.324]                             if (!grepl(pattern, name)) 
[17:02:36.324]                               next
[17:02:36.324]                             invokeRestart(restart)
[17:02:36.324]                             muffled <- TRUE
[17:02:36.324]                             break
[17:02:36.324]                           }
[17:02:36.324]                         }
[17:02:36.324]                       }
[17:02:36.324]                       invisible(muffled)
[17:02:36.324]                     }
[17:02:36.324]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.324]                   }
[17:02:36.324]                 }
[17:02:36.324]             }
[17:02:36.324]         }))
[17:02:36.324]     }, error = function(ex) {
[17:02:36.324]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.324]                 ...future.rng), started = ...future.startTime, 
[17:02:36.324]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.324]             version = "1.8"), class = "FutureResult")
[17:02:36.324]     }, finally = {
[17:02:36.324]         if (!identical(...future.workdir, getwd())) 
[17:02:36.324]             setwd(...future.workdir)
[17:02:36.324]         {
[17:02:36.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.324]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.324]             }
[17:02:36.324]             base::options(...future.oldOptions)
[17:02:36.324]             if (.Platform$OS.type == "windows") {
[17:02:36.324]                 old_names <- names(...future.oldEnvVars)
[17:02:36.324]                 envs <- base::Sys.getenv()
[17:02:36.324]                 names <- names(envs)
[17:02:36.324]                 common <- intersect(names, old_names)
[17:02:36.324]                 added <- setdiff(names, old_names)
[17:02:36.324]                 removed <- setdiff(old_names, names)
[17:02:36.324]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.324]                   envs[common]]
[17:02:36.324]                 NAMES <- toupper(changed)
[17:02:36.324]                 args <- list()
[17:02:36.324]                 for (kk in seq_along(NAMES)) {
[17:02:36.324]                   name <- changed[[kk]]
[17:02:36.324]                   NAME <- NAMES[[kk]]
[17:02:36.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.324]                     next
[17:02:36.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.324]                 }
[17:02:36.324]                 NAMES <- toupper(added)
[17:02:36.324]                 for (kk in seq_along(NAMES)) {
[17:02:36.324]                   name <- added[[kk]]
[17:02:36.324]                   NAME <- NAMES[[kk]]
[17:02:36.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.324]                     next
[17:02:36.324]                   args[[name]] <- ""
[17:02:36.324]                 }
[17:02:36.324]                 NAMES <- toupper(removed)
[17:02:36.324]                 for (kk in seq_along(NAMES)) {
[17:02:36.324]                   name <- removed[[kk]]
[17:02:36.324]                   NAME <- NAMES[[kk]]
[17:02:36.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.324]                     next
[17:02:36.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.324]                 }
[17:02:36.324]                 if (length(args) > 0) 
[17:02:36.324]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.324]             }
[17:02:36.324]             else {
[17:02:36.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.324]             }
[17:02:36.324]             {
[17:02:36.324]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.324]                   0L) {
[17:02:36.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.324]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.324]                   base::options(opts)
[17:02:36.324]                 }
[17:02:36.324]                 {
[17:02:36.324]                   {
[17:02:36.324]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.324]                     NULL
[17:02:36.324]                   }
[17:02:36.324]                   options(future.plan = NULL)
[17:02:36.324]                   if (is.na(NA_character_)) 
[17:02:36.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.324]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.324]                     .init = FALSE)
[17:02:36.324]                 }
[17:02:36.324]             }
[17:02:36.324]         }
[17:02:36.324]     })
[17:02:36.324]     if (TRUE) {
[17:02:36.324]         base::sink(type = "output", split = FALSE)
[17:02:36.324]         if (TRUE) {
[17:02:36.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.324]         }
[17:02:36.324]         else {
[17:02:36.324]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.324]         }
[17:02:36.324]         base::close(...future.stdout)
[17:02:36.324]         ...future.stdout <- NULL
[17:02:36.324]     }
[17:02:36.324]     ...future.result$conditions <- ...future.conditions
[17:02:36.324]     ...future.result$finished <- base::Sys.time()
[17:02:36.324]     ...future.result
[17:02:36.324] }
[17:02:36.327] assign_globals() ...
[17:02:36.327] List of 3
[17:02:36.327]  $ outer_function:function (x)  
[17:02:36.327]  $ map           :function (.x, .f, ...)  
[17:02:36.327]  $ inner_function:function (x)  
[17:02:36.327]  - attr(*, "where")=List of 3
[17:02:36.327]   ..$ outer_function:<environment: R_EmptyEnv> 
[17:02:36.327]   ..$ map           :<environment: R_EmptyEnv> 
[17:02:36.327]   ..$ inner_function:<environment: R_EmptyEnv> 
[17:02:36.327]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:36.327]  - attr(*, "resolved")= logi FALSE
[17:02:36.327]  - attr(*, "total_size")= num 7704
[17:02:36.327]  - attr(*, "already-done")= logi TRUE
[17:02:36.331] - reassign environment for ‘outer_function’
[17:02:36.331] - copied ‘outer_function’ to environment
[17:02:36.331] - reassign environment for ‘map’
[17:02:36.331] - copied ‘map’ to environment
[17:02:36.331] - reassign environment for ‘inner_function’
[17:02:36.331] - copied ‘inner_function’ to environment
[17:02:36.331] assign_globals() ... done
[17:02:36.332] requestCore(): workers = 2
[17:02:36.334] MulticoreFuture started
[17:02:36.334] - Launch lazy future ... done
[17:02:36.334] run() for ‘MulticoreFuture’ ... done
[17:02:36.335] plan(): Setting new future strategy stack:
[17:02:36.335] result() for MulticoreFuture ...
[17:02:36.335] List of future strategies:
[17:02:36.335] 1. sequential:
[17:02:36.335]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:36.335]    - tweaked: FALSE
[17:02:36.335]    - call: NULL
[17:02:36.336] plan(): nbrOfWorkers() = 1
[17:02:36.339] plan(): Setting new future strategy stack:
[17:02:36.339] List of future strategies:
[17:02:36.339] 1. multicore:
[17:02:36.339]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:36.339]    - tweaked: FALSE
[17:02:36.339]    - call: plan(strategy)
[17:02:36.344] plan(): nbrOfWorkers() = 2
[17:02:36.345] result() for MulticoreFuture ...
[17:02:36.345] result() for MulticoreFuture ... done
[17:02:36.346] result() for MulticoreFuture ... done
[17:02:36.346] result() for MulticoreFuture ...
[17:02:36.346] result() for MulticoreFuture ... done
List of 2
 $ : num [1:2] 2 3
 $ : num [1:2] 2 3
- plan('multisession') ...
[17:02:36.348] plan(): Setting new future strategy stack:
[17:02:36.348] List of future strategies:
[17:02:36.348] 1. multisession:
[17:02:36.348]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:36.348]    - tweaked: FALSE
[17:02:36.348]    - call: plan(strategy)
[17:02:36.349] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:02:36.349] multisession:
[17:02:36.349] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:36.349] - tweaked: FALSE
[17:02:36.349] - call: plan(strategy)
[17:02:36.356] getGlobalsAndPackages() ...
[17:02:36.356] Not searching for globals
[17:02:36.356] - globals: [0] <none>
[17:02:36.356] getGlobalsAndPackages() ... DONE
[17:02:36.357] [local output] makeClusterPSOCK() ...
[17:02:36.402] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:36.403] [local output] Base port: 11783
[17:02:36.403] [local output] Getting setup options for 2 cluster nodes ...
[17:02:36.403] [local output]  - Node 1 of 2 ...
[17:02:36.404] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:36.404] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwWRyEM/worker.rank=1.parallelly.parent=42754.a7021eddb43a.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpwWRyEM/worker.rank=1.parallelly.parent=42754.a7021eddb43a.pid")'’
[17:02:36.594] - Possible to infer worker's PID: TRUE
[17:02:36.594] [local output] Rscript port: 11783

[17:02:36.595] [local output]  - Node 2 of 2 ...
[17:02:36.595] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:36.596] [local output] Rscript port: 11783

[17:02:36.596] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:36.596] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:36.597] [local output] Setting up PSOCK nodes in parallel
[17:02:36.597] List of 36
[17:02:36.597]  $ worker          : chr "localhost"
[17:02:36.597]   ..- attr(*, "localhost")= logi TRUE
[17:02:36.597]  $ master          : chr "localhost"
[17:02:36.597]  $ port            : int 11783
[17:02:36.597]  $ connectTimeout  : num 120
[17:02:36.597]  $ timeout         : num 2592000
[17:02:36.597]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:36.597]  $ homogeneous     : logi TRUE
[17:02:36.597]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:36.597]  $ rscript_envs    : NULL
[17:02:36.597]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:36.597]  $ rscript_startup : NULL
[17:02:36.597]  $ rscript_sh      : chr "sh"
[17:02:36.597]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:36.597]  $ methods         : logi TRUE
[17:02:36.597]  $ socketOptions   : chr "no-delay"
[17:02:36.597]  $ useXDR          : logi FALSE
[17:02:36.597]  $ outfile         : chr "/dev/null"
[17:02:36.597]  $ renice          : int NA
[17:02:36.597]  $ rshcmd          : NULL
[17:02:36.597]  $ user            : chr(0) 
[17:02:36.597]  $ revtunnel       : logi FALSE
[17:02:36.597]  $ rshlogfile      : NULL
[17:02:36.597]  $ rshopts         : chr(0) 
[17:02:36.597]  $ rank            : int 1
[17:02:36.597]  $ manual          : logi FALSE
[17:02:36.597]  $ dryrun          : logi FALSE
[17:02:36.597]  $ quiet           : logi FALSE
[17:02:36.597]  $ setup_strategy  : chr "parallel"
[17:02:36.597]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:36.597]  $ pidfile         : chr "/tmp/RtmpwWRyEM/worker.rank=1.parallelly.parent=42754.a7021eddb43a.pid"
[17:02:36.597]  $ rshcmd_label    : NULL
[17:02:36.597]  $ rsh_call        : NULL
[17:02:36.597]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:36.597]  $ localMachine    : logi TRUE
[17:02:36.597]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:36.597]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:36.597]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:36.597]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:36.597]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:36.597]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:36.597]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:36.597]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:36.597]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:36.597]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:36.597]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:36.597]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:36.597]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:36.597]  $ arguments       :List of 28
[17:02:36.597]   ..$ worker          : chr "localhost"
[17:02:36.597]   ..$ master          : NULL
[17:02:36.597]   ..$ port            : int 11783
[17:02:36.597]   ..$ connectTimeout  : num 120
[17:02:36.597]   ..$ timeout         : num 2592000
[17:02:36.597]   ..$ rscript         : NULL
[17:02:36.597]   ..$ homogeneous     : NULL
[17:02:36.597]   ..$ rscript_args    : NULL
[17:02:36.597]   ..$ rscript_envs    : NULL
[17:02:36.597]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:36.597]   ..$ rscript_startup : NULL
[17:02:36.597]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:36.597]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:36.597]   ..$ methods         : logi TRUE
[17:02:36.597]   ..$ socketOptions   : chr "no-delay"
[17:02:36.597]   ..$ useXDR          : logi FALSE
[17:02:36.597]   ..$ outfile         : chr "/dev/null"
[17:02:36.597]   ..$ renice          : int NA
[17:02:36.597]   ..$ rshcmd          : NULL
[17:02:36.597]   ..$ user            : NULL
[17:02:36.597]   ..$ revtunnel       : logi NA
[17:02:36.597]   ..$ rshlogfile      : NULL
[17:02:36.597]   ..$ rshopts         : NULL
[17:02:36.597]   ..$ rank            : int 1
[17:02:36.597]   ..$ manual          : logi FALSE
[17:02:36.597]   ..$ dryrun          : logi FALSE
[17:02:36.597]   ..$ quiet           : logi FALSE
[17:02:36.597]   ..$ setup_strategy  : chr "parallel"
[17:02:36.597]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:36.613] [local output] System call to launch all workers:
[17:02:36.613] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwWRyEM/worker.rank=1.parallelly.parent=42754.a7021eddb43a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11783 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:36.613] [local output] Starting PSOCK main server
[17:02:36.619] [local output] Workers launched
[17:02:36.619] [local output] Waiting for workers to connect back
[17:02:36.619]  - [local output] 0 workers out of 2 ready
[17:02:36.883]  - [local output] 0 workers out of 2 ready
[17:02:36.884]  - [local output] 1 workers out of 2 ready
[17:02:36.894]  - [local output] 1 workers out of 2 ready
[17:02:36.895]  - [local output] 2 workers out of 2 ready
[17:02:36.895] [local output] Launching of workers completed
[17:02:36.895] [local output] Collecting session information from workers
[17:02:36.896] [local output]  - Worker #1 of 2
[17:02:36.897] [local output]  - Worker #2 of 2
[17:02:36.897] [local output] makeClusterPSOCK() ... done
[17:02:36.908] Packages needed by the future expression (n = 0): <none>
[17:02:36.908] Packages needed by future strategies (n = 0): <none>
[17:02:36.909] {
[17:02:36.909]     {
[17:02:36.909]         {
[17:02:36.909]             ...future.startTime <- base::Sys.time()
[17:02:36.909]             {
[17:02:36.909]                 {
[17:02:36.909]                   {
[17:02:36.909]                     {
[17:02:36.909]                       base::local({
[17:02:36.909]                         has_future <- base::requireNamespace("future", 
[17:02:36.909]                           quietly = TRUE)
[17:02:36.909]                         if (has_future) {
[17:02:36.909]                           ns <- base::getNamespace("future")
[17:02:36.909]                           version <- ns[[".package"]][["version"]]
[17:02:36.909]                           if (is.null(version)) 
[17:02:36.909]                             version <- utils::packageVersion("future")
[17:02:36.909]                         }
[17:02:36.909]                         else {
[17:02:36.909]                           version <- NULL
[17:02:36.909]                         }
[17:02:36.909]                         if (!has_future || version < "1.8.0") {
[17:02:36.909]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:36.909]                             "", base::R.version$version.string), 
[17:02:36.909]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:36.909]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:36.909]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:36.909]                               "release", "version")], collapse = " "), 
[17:02:36.909]                             hostname = base::Sys.info()[["nodename"]])
[17:02:36.909]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:36.909]                             info)
[17:02:36.909]                           info <- base::paste(info, collapse = "; ")
[17:02:36.909]                           if (!has_future) {
[17:02:36.909]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:36.909]                               info)
[17:02:36.909]                           }
[17:02:36.909]                           else {
[17:02:36.909]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:36.909]                               info, version)
[17:02:36.909]                           }
[17:02:36.909]                           base::stop(msg)
[17:02:36.909]                         }
[17:02:36.909]                       })
[17:02:36.909]                     }
[17:02:36.909]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:36.909]                     base::options(mc.cores = 1L)
[17:02:36.909]                   }
[17:02:36.909]                   ...future.strategy.old <- future::plan("list")
[17:02:36.909]                   options(future.plan = NULL)
[17:02:36.909]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.909]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:36.909]                 }
[17:02:36.909]                 ...future.workdir <- getwd()
[17:02:36.909]             }
[17:02:36.909]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:36.909]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:36.909]         }
[17:02:36.909]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:36.909]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:36.909]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:36.909]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:36.909]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:36.909]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:36.909]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:36.909]             base::names(...future.oldOptions))
[17:02:36.909]     }
[17:02:36.909]     if (FALSE) {
[17:02:36.909]     }
[17:02:36.909]     else {
[17:02:36.909]         if (TRUE) {
[17:02:36.909]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:36.909]                 open = "w")
[17:02:36.909]         }
[17:02:36.909]         else {
[17:02:36.909]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:36.909]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:36.909]         }
[17:02:36.909]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:36.909]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:36.909]             base::sink(type = "output", split = FALSE)
[17:02:36.909]             base::close(...future.stdout)
[17:02:36.909]         }, add = TRUE)
[17:02:36.909]     }
[17:02:36.909]     ...future.frame <- base::sys.nframe()
[17:02:36.909]     ...future.conditions <- base::list()
[17:02:36.909]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:36.909]     if (FALSE) {
[17:02:36.909]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:36.909]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:36.909]     }
[17:02:36.909]     ...future.result <- base::tryCatch({
[17:02:36.909]         base::withCallingHandlers({
[17:02:36.909]             ...future.value <- base::withVisible(base::local({
[17:02:36.909]                 ...future.makeSendCondition <- base::local({
[17:02:36.909]                   sendCondition <- NULL
[17:02:36.909]                   function(frame = 1L) {
[17:02:36.909]                     if (is.function(sendCondition)) 
[17:02:36.909]                       return(sendCondition)
[17:02:36.909]                     ns <- getNamespace("parallel")
[17:02:36.909]                     if (exists("sendData", mode = "function", 
[17:02:36.909]                       envir = ns)) {
[17:02:36.909]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:36.909]                         envir = ns)
[17:02:36.909]                       envir <- sys.frame(frame)
[17:02:36.909]                       master <- NULL
[17:02:36.909]                       while (!identical(envir, .GlobalEnv) && 
[17:02:36.909]                         !identical(envir, emptyenv())) {
[17:02:36.909]                         if (exists("master", mode = "list", envir = envir, 
[17:02:36.909]                           inherits = FALSE)) {
[17:02:36.909]                           master <- get("master", mode = "list", 
[17:02:36.909]                             envir = envir, inherits = FALSE)
[17:02:36.909]                           if (inherits(master, c("SOCKnode", 
[17:02:36.909]                             "SOCK0node"))) {
[17:02:36.909]                             sendCondition <<- function(cond) {
[17:02:36.909]                               data <- list(type = "VALUE", value = cond, 
[17:02:36.909]                                 success = TRUE)
[17:02:36.909]                               parallel_sendData(master, data)
[17:02:36.909]                             }
[17:02:36.909]                             return(sendCondition)
[17:02:36.909]                           }
[17:02:36.909]                         }
[17:02:36.909]                         frame <- frame + 1L
[17:02:36.909]                         envir <- sys.frame(frame)
[17:02:36.909]                       }
[17:02:36.909]                     }
[17:02:36.909]                     sendCondition <<- function(cond) NULL
[17:02:36.909]                   }
[17:02:36.909]                 })
[17:02:36.909]                 withCallingHandlers({
[17:02:36.909]                   NA
[17:02:36.909]                 }, immediateCondition = function(cond) {
[17:02:36.909]                   sendCondition <- ...future.makeSendCondition()
[17:02:36.909]                   sendCondition(cond)
[17:02:36.909]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.909]                   {
[17:02:36.909]                     inherits <- base::inherits
[17:02:36.909]                     invokeRestart <- base::invokeRestart
[17:02:36.909]                     is.null <- base::is.null
[17:02:36.909]                     muffled <- FALSE
[17:02:36.909]                     if (inherits(cond, "message")) {
[17:02:36.909]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:36.909]                       if (muffled) 
[17:02:36.909]                         invokeRestart("muffleMessage")
[17:02:36.909]                     }
[17:02:36.909]                     else if (inherits(cond, "warning")) {
[17:02:36.909]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:36.909]                       if (muffled) 
[17:02:36.909]                         invokeRestart("muffleWarning")
[17:02:36.909]                     }
[17:02:36.909]                     else if (inherits(cond, "condition")) {
[17:02:36.909]                       if (!is.null(pattern)) {
[17:02:36.909]                         computeRestarts <- base::computeRestarts
[17:02:36.909]                         grepl <- base::grepl
[17:02:36.909]                         restarts <- computeRestarts(cond)
[17:02:36.909]                         for (restart in restarts) {
[17:02:36.909]                           name <- restart$name
[17:02:36.909]                           if (is.null(name)) 
[17:02:36.909]                             next
[17:02:36.909]                           if (!grepl(pattern, name)) 
[17:02:36.909]                             next
[17:02:36.909]                           invokeRestart(restart)
[17:02:36.909]                           muffled <- TRUE
[17:02:36.909]                           break
[17:02:36.909]                         }
[17:02:36.909]                       }
[17:02:36.909]                     }
[17:02:36.909]                     invisible(muffled)
[17:02:36.909]                   }
[17:02:36.909]                   muffleCondition(cond)
[17:02:36.909]                 })
[17:02:36.909]             }))
[17:02:36.909]             future::FutureResult(value = ...future.value$value, 
[17:02:36.909]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.909]                   ...future.rng), globalenv = if (FALSE) 
[17:02:36.909]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:36.909]                     ...future.globalenv.names))
[17:02:36.909]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:36.909]         }, condition = base::local({
[17:02:36.909]             c <- base::c
[17:02:36.909]             inherits <- base::inherits
[17:02:36.909]             invokeRestart <- base::invokeRestart
[17:02:36.909]             length <- base::length
[17:02:36.909]             list <- base::list
[17:02:36.909]             seq.int <- base::seq.int
[17:02:36.909]             signalCondition <- base::signalCondition
[17:02:36.909]             sys.calls <- base::sys.calls
[17:02:36.909]             `[[` <- base::`[[`
[17:02:36.909]             `+` <- base::`+`
[17:02:36.909]             `<<-` <- base::`<<-`
[17:02:36.909]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:36.909]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:36.909]                   3L)]
[17:02:36.909]             }
[17:02:36.909]             function(cond) {
[17:02:36.909]                 is_error <- inherits(cond, "error")
[17:02:36.909]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:36.909]                   NULL)
[17:02:36.909]                 if (is_error) {
[17:02:36.909]                   sessionInformation <- function() {
[17:02:36.909]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:36.909]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:36.909]                       search = base::search(), system = base::Sys.info())
[17:02:36.909]                   }
[17:02:36.909]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.909]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:36.909]                     cond$call), session = sessionInformation(), 
[17:02:36.909]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:36.909]                   signalCondition(cond)
[17:02:36.909]                 }
[17:02:36.909]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:36.909]                 "immediateCondition"))) {
[17:02:36.909]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:36.909]                   ...future.conditions[[length(...future.conditions) + 
[17:02:36.909]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:36.909]                   if (TRUE && !signal) {
[17:02:36.909]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.909]                     {
[17:02:36.909]                       inherits <- base::inherits
[17:02:36.909]                       invokeRestart <- base::invokeRestart
[17:02:36.909]                       is.null <- base::is.null
[17:02:36.909]                       muffled <- FALSE
[17:02:36.909]                       if (inherits(cond, "message")) {
[17:02:36.909]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.909]                         if (muffled) 
[17:02:36.909]                           invokeRestart("muffleMessage")
[17:02:36.909]                       }
[17:02:36.909]                       else if (inherits(cond, "warning")) {
[17:02:36.909]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.909]                         if (muffled) 
[17:02:36.909]                           invokeRestart("muffleWarning")
[17:02:36.909]                       }
[17:02:36.909]                       else if (inherits(cond, "condition")) {
[17:02:36.909]                         if (!is.null(pattern)) {
[17:02:36.909]                           computeRestarts <- base::computeRestarts
[17:02:36.909]                           grepl <- base::grepl
[17:02:36.909]                           restarts <- computeRestarts(cond)
[17:02:36.909]                           for (restart in restarts) {
[17:02:36.909]                             name <- restart$name
[17:02:36.909]                             if (is.null(name)) 
[17:02:36.909]                               next
[17:02:36.909]                             if (!grepl(pattern, name)) 
[17:02:36.909]                               next
[17:02:36.909]                             invokeRestart(restart)
[17:02:36.909]                             muffled <- TRUE
[17:02:36.909]                             break
[17:02:36.909]                           }
[17:02:36.909]                         }
[17:02:36.909]                       }
[17:02:36.909]                       invisible(muffled)
[17:02:36.909]                     }
[17:02:36.909]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.909]                   }
[17:02:36.909]                 }
[17:02:36.909]                 else {
[17:02:36.909]                   if (TRUE) {
[17:02:36.909]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:36.909]                     {
[17:02:36.909]                       inherits <- base::inherits
[17:02:36.909]                       invokeRestart <- base::invokeRestart
[17:02:36.909]                       is.null <- base::is.null
[17:02:36.909]                       muffled <- FALSE
[17:02:36.909]                       if (inherits(cond, "message")) {
[17:02:36.909]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:36.909]                         if (muffled) 
[17:02:36.909]                           invokeRestart("muffleMessage")
[17:02:36.909]                       }
[17:02:36.909]                       else if (inherits(cond, "warning")) {
[17:02:36.909]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:36.909]                         if (muffled) 
[17:02:36.909]                           invokeRestart("muffleWarning")
[17:02:36.909]                       }
[17:02:36.909]                       else if (inherits(cond, "condition")) {
[17:02:36.909]                         if (!is.null(pattern)) {
[17:02:36.909]                           computeRestarts <- base::computeRestarts
[17:02:36.909]                           grepl <- base::grepl
[17:02:36.909]                           restarts <- computeRestarts(cond)
[17:02:36.909]                           for (restart in restarts) {
[17:02:36.909]                             name <- restart$name
[17:02:36.909]                             if (is.null(name)) 
[17:02:36.909]                               next
[17:02:36.909]                             if (!grepl(pattern, name)) 
[17:02:36.909]                               next
[17:02:36.909]                             invokeRestart(restart)
[17:02:36.909]                             muffled <- TRUE
[17:02:36.909]                             break
[17:02:36.909]                           }
[17:02:36.909]                         }
[17:02:36.909]                       }
[17:02:36.909]                       invisible(muffled)
[17:02:36.909]                     }
[17:02:36.909]                     muffleCondition(cond, pattern = "^muffle")
[17:02:36.909]                   }
[17:02:36.909]                 }
[17:02:36.909]             }
[17:02:36.909]         }))
[17:02:36.909]     }, error = function(ex) {
[17:02:36.909]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:36.909]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:36.909]                 ...future.rng), started = ...future.startTime, 
[17:02:36.909]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:36.909]             version = "1.8"), class = "FutureResult")
[17:02:36.909]     }, finally = {
[17:02:36.909]         if (!identical(...future.workdir, getwd())) 
[17:02:36.909]             setwd(...future.workdir)
[17:02:36.909]         {
[17:02:36.909]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:36.909]                 ...future.oldOptions$nwarnings <- NULL
[17:02:36.909]             }
[17:02:36.909]             base::options(...future.oldOptions)
[17:02:36.909]             if (.Platform$OS.type == "windows") {
[17:02:36.909]                 old_names <- names(...future.oldEnvVars)
[17:02:36.909]                 envs <- base::Sys.getenv()
[17:02:36.909]                 names <- names(envs)
[17:02:36.909]                 common <- intersect(names, old_names)
[17:02:36.909]                 added <- setdiff(names, old_names)
[17:02:36.909]                 removed <- setdiff(old_names, names)
[17:02:36.909]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:36.909]                   envs[common]]
[17:02:36.909]                 NAMES <- toupper(changed)
[17:02:36.909]                 args <- list()
[17:02:36.909]                 for (kk in seq_along(NAMES)) {
[17:02:36.909]                   name <- changed[[kk]]
[17:02:36.909]                   NAME <- NAMES[[kk]]
[17:02:36.909]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.909]                     next
[17:02:36.909]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.909]                 }
[17:02:36.909]                 NAMES <- toupper(added)
[17:02:36.909]                 for (kk in seq_along(NAMES)) {
[17:02:36.909]                   name <- added[[kk]]
[17:02:36.909]                   NAME <- NAMES[[kk]]
[17:02:36.909]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.909]                     next
[17:02:36.909]                   args[[name]] <- ""
[17:02:36.909]                 }
[17:02:36.909]                 NAMES <- toupper(removed)
[17:02:36.909]                 for (kk in seq_along(NAMES)) {
[17:02:36.909]                   name <- removed[[kk]]
[17:02:36.909]                   NAME <- NAMES[[kk]]
[17:02:36.909]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:36.909]                     next
[17:02:36.909]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:36.909]                 }
[17:02:36.909]                 if (length(args) > 0) 
[17:02:36.909]                   base::do.call(base::Sys.setenv, args = args)
[17:02:36.909]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:36.909]             }
[17:02:36.909]             else {
[17:02:36.909]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:36.909]             }
[17:02:36.909]             {
[17:02:36.909]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:36.909]                   0L) {
[17:02:36.909]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:36.909]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:36.909]                   base::options(opts)
[17:02:36.909]                 }
[17:02:36.909]                 {
[17:02:36.909]                   {
[17:02:36.909]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:36.909]                     NULL
[17:02:36.909]                   }
[17:02:36.909]                   options(future.plan = NULL)
[17:02:36.909]                   if (is.na(NA_character_)) 
[17:02:36.909]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:36.909]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:36.909]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:36.909]                     .init = FALSE)
[17:02:36.909]                 }
[17:02:36.909]             }
[17:02:36.909]         }
[17:02:36.909]     })
[17:02:36.909]     if (TRUE) {
[17:02:36.909]         base::sink(type = "output", split = FALSE)
[17:02:36.909]         if (TRUE) {
[17:02:36.909]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:36.909]         }
[17:02:36.909]         else {
[17:02:36.909]             ...future.result["stdout"] <- base::list(NULL)
[17:02:36.909]         }
[17:02:36.909]         base::close(...future.stdout)
[17:02:36.909]         ...future.stdout <- NULL
[17:02:36.909]     }
[17:02:36.909]     ...future.result$conditions <- ...future.conditions
[17:02:36.909]     ...future.result$finished <- base::Sys.time()
[17:02:36.909]     ...future.result
[17:02:36.909] }
[17:02:36.963] MultisessionFuture started
[17:02:36.963] result() for ClusterFuture ...
[17:02:36.963] receiveMessageFromWorker() for ClusterFuture ...
[17:02:36.964] - Validating connection of MultisessionFuture
[17:02:36.995] - received message: FutureResult
[17:02:36.996] - Received FutureResult
[17:02:36.996] - Erased future from FutureRegistry
[17:02:36.996] result() for ClusterFuture ...
[17:02:36.996] - result already collected: FutureResult
[17:02:36.996] result() for ClusterFuture ... done
[17:02:36.997] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:36.997] result() for ClusterFuture ... done
[17:02:36.997] result() for ClusterFuture ...
[17:02:36.997] - result already collected: FutureResult
[17:02:36.997] result() for ClusterFuture ... done
[17:02:36.997] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:02:37.001] plan(): nbrOfWorkers() = 2
- lm(<formula>) ...
[17:02:37.001] getGlobalsAndPackages() ...
[17:02:37.002] Searching for globals...
[17:02:37.003] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:37.004] Searching for globals ... DONE
[17:02:37.004] Resolving globals: FALSE
[17:02:37.004] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:37.005] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:37.005] - globals: [2] ‘weight’, ‘group’
[17:02:37.005] - packages: [1] ‘stats’
[17:02:37.005] getGlobalsAndPackages() ... DONE
[17:02:37.006] run() for ‘Future’ ...
[17:02:37.006] - state: ‘created’
[17:02:37.006] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.020] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.020] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.021]   - Field: ‘node’
[17:02:37.021]   - Field: ‘label’
[17:02:37.021]   - Field: ‘local’
[17:02:37.021]   - Field: ‘owner’
[17:02:37.021]   - Field: ‘envir’
[17:02:37.021]   - Field: ‘workers’
[17:02:37.021]   - Field: ‘packages’
[17:02:37.021]   - Field: ‘gc’
[17:02:37.021]   - Field: ‘conditions’
[17:02:37.022]   - Field: ‘persistent’
[17:02:37.022]   - Field: ‘expr’
[17:02:37.022]   - Field: ‘uuid’
[17:02:37.022]   - Field: ‘seed’
[17:02:37.022]   - Field: ‘version’
[17:02:37.022]   - Field: ‘result’
[17:02:37.022]   - Field: ‘asynchronous’
[17:02:37.022]   - Field: ‘calls’
[17:02:37.022]   - Field: ‘globals’
[17:02:37.023]   - Field: ‘stdout’
[17:02:37.023]   - Field: ‘earlySignal’
[17:02:37.023]   - Field: ‘lazy’
[17:02:37.023]   - Field: ‘state’
[17:02:37.023] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.023] - Launch lazy future ...
[17:02:37.024] Packages needed by the future expression (n = 1): ‘stats’
[17:02:37.024] Packages needed by future strategies (n = 0): <none>
[17:02:37.024] {
[17:02:37.024]     {
[17:02:37.024]         {
[17:02:37.024]             ...future.startTime <- base::Sys.time()
[17:02:37.024]             {
[17:02:37.024]                 {
[17:02:37.024]                   {
[17:02:37.024]                     {
[17:02:37.024]                       {
[17:02:37.024]                         base::local({
[17:02:37.024]                           has_future <- base::requireNamespace("future", 
[17:02:37.024]                             quietly = TRUE)
[17:02:37.024]                           if (has_future) {
[17:02:37.024]                             ns <- base::getNamespace("future")
[17:02:37.024]                             version <- ns[[".package"]][["version"]]
[17:02:37.024]                             if (is.null(version)) 
[17:02:37.024]                               version <- utils::packageVersion("future")
[17:02:37.024]                           }
[17:02:37.024]                           else {
[17:02:37.024]                             version <- NULL
[17:02:37.024]                           }
[17:02:37.024]                           if (!has_future || version < "1.8.0") {
[17:02:37.024]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.024]                               "", base::R.version$version.string), 
[17:02:37.024]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.024]                                 base::R.version$platform, 8 * 
[17:02:37.024]                                   base::.Machine$sizeof.pointer), 
[17:02:37.024]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.024]                                 "release", "version")], collapse = " "), 
[17:02:37.024]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.024]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.024]                               info)
[17:02:37.024]                             info <- base::paste(info, collapse = "; ")
[17:02:37.024]                             if (!has_future) {
[17:02:37.024]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.024]                                 info)
[17:02:37.024]                             }
[17:02:37.024]                             else {
[17:02:37.024]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.024]                                 info, version)
[17:02:37.024]                             }
[17:02:37.024]                             base::stop(msg)
[17:02:37.024]                           }
[17:02:37.024]                         })
[17:02:37.024]                       }
[17:02:37.024]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.024]                       base::options(mc.cores = 1L)
[17:02:37.024]                     }
[17:02:37.024]                     base::local({
[17:02:37.024]                       for (pkg in "stats") {
[17:02:37.024]                         base::loadNamespace(pkg)
[17:02:37.024]                         base::library(pkg, character.only = TRUE)
[17:02:37.024]                       }
[17:02:37.024]                     })
[17:02:37.024]                   }
[17:02:37.024]                   ...future.strategy.old <- future::plan("list")
[17:02:37.024]                   options(future.plan = NULL)
[17:02:37.024]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.024]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.024]                 }
[17:02:37.024]                 ...future.workdir <- getwd()
[17:02:37.024]             }
[17:02:37.024]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.024]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.024]         }
[17:02:37.024]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.024]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.024]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.024]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.024]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.024]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.024]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.024]             base::names(...future.oldOptions))
[17:02:37.024]     }
[17:02:37.024]     if (FALSE) {
[17:02:37.024]     }
[17:02:37.024]     else {
[17:02:37.024]         if (TRUE) {
[17:02:37.024]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.024]                 open = "w")
[17:02:37.024]         }
[17:02:37.024]         else {
[17:02:37.024]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.024]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.024]         }
[17:02:37.024]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.024]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.024]             base::sink(type = "output", split = FALSE)
[17:02:37.024]             base::close(...future.stdout)
[17:02:37.024]         }, add = TRUE)
[17:02:37.024]     }
[17:02:37.024]     ...future.frame <- base::sys.nframe()
[17:02:37.024]     ...future.conditions <- base::list()
[17:02:37.024]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.024]     if (FALSE) {
[17:02:37.024]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.024]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.024]     }
[17:02:37.024]     ...future.result <- base::tryCatch({
[17:02:37.024]         base::withCallingHandlers({
[17:02:37.024]             ...future.value <- base::withVisible(base::local({
[17:02:37.024]                 ...future.makeSendCondition <- base::local({
[17:02:37.024]                   sendCondition <- NULL
[17:02:37.024]                   function(frame = 1L) {
[17:02:37.024]                     if (is.function(sendCondition)) 
[17:02:37.024]                       return(sendCondition)
[17:02:37.024]                     ns <- getNamespace("parallel")
[17:02:37.024]                     if (exists("sendData", mode = "function", 
[17:02:37.024]                       envir = ns)) {
[17:02:37.024]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.024]                         envir = ns)
[17:02:37.024]                       envir <- sys.frame(frame)
[17:02:37.024]                       master <- NULL
[17:02:37.024]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.024]                         !identical(envir, emptyenv())) {
[17:02:37.024]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.024]                           inherits = FALSE)) {
[17:02:37.024]                           master <- get("master", mode = "list", 
[17:02:37.024]                             envir = envir, inherits = FALSE)
[17:02:37.024]                           if (inherits(master, c("SOCKnode", 
[17:02:37.024]                             "SOCK0node"))) {
[17:02:37.024]                             sendCondition <<- function(cond) {
[17:02:37.024]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.024]                                 success = TRUE)
[17:02:37.024]                               parallel_sendData(master, data)
[17:02:37.024]                             }
[17:02:37.024]                             return(sendCondition)
[17:02:37.024]                           }
[17:02:37.024]                         }
[17:02:37.024]                         frame <- frame + 1L
[17:02:37.024]                         envir <- sys.frame(frame)
[17:02:37.024]                       }
[17:02:37.024]                     }
[17:02:37.024]                     sendCondition <<- function(cond) NULL
[17:02:37.024]                   }
[17:02:37.024]                 })
[17:02:37.024]                 withCallingHandlers({
[17:02:37.024]                   {
[17:02:37.024]                     lm(weight ~ group - 1)
[17:02:37.024]                   }
[17:02:37.024]                 }, immediateCondition = function(cond) {
[17:02:37.024]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.024]                   sendCondition(cond)
[17:02:37.024]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.024]                   {
[17:02:37.024]                     inherits <- base::inherits
[17:02:37.024]                     invokeRestart <- base::invokeRestart
[17:02:37.024]                     is.null <- base::is.null
[17:02:37.024]                     muffled <- FALSE
[17:02:37.024]                     if (inherits(cond, "message")) {
[17:02:37.024]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.024]                       if (muffled) 
[17:02:37.024]                         invokeRestart("muffleMessage")
[17:02:37.024]                     }
[17:02:37.024]                     else if (inherits(cond, "warning")) {
[17:02:37.024]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.024]                       if (muffled) 
[17:02:37.024]                         invokeRestart("muffleWarning")
[17:02:37.024]                     }
[17:02:37.024]                     else if (inherits(cond, "condition")) {
[17:02:37.024]                       if (!is.null(pattern)) {
[17:02:37.024]                         computeRestarts <- base::computeRestarts
[17:02:37.024]                         grepl <- base::grepl
[17:02:37.024]                         restarts <- computeRestarts(cond)
[17:02:37.024]                         for (restart in restarts) {
[17:02:37.024]                           name <- restart$name
[17:02:37.024]                           if (is.null(name)) 
[17:02:37.024]                             next
[17:02:37.024]                           if (!grepl(pattern, name)) 
[17:02:37.024]                             next
[17:02:37.024]                           invokeRestart(restart)
[17:02:37.024]                           muffled <- TRUE
[17:02:37.024]                           break
[17:02:37.024]                         }
[17:02:37.024]                       }
[17:02:37.024]                     }
[17:02:37.024]                     invisible(muffled)
[17:02:37.024]                   }
[17:02:37.024]                   muffleCondition(cond)
[17:02:37.024]                 })
[17:02:37.024]             }))
[17:02:37.024]             future::FutureResult(value = ...future.value$value, 
[17:02:37.024]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.024]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.024]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.024]                     ...future.globalenv.names))
[17:02:37.024]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.024]         }, condition = base::local({
[17:02:37.024]             c <- base::c
[17:02:37.024]             inherits <- base::inherits
[17:02:37.024]             invokeRestart <- base::invokeRestart
[17:02:37.024]             length <- base::length
[17:02:37.024]             list <- base::list
[17:02:37.024]             seq.int <- base::seq.int
[17:02:37.024]             signalCondition <- base::signalCondition
[17:02:37.024]             sys.calls <- base::sys.calls
[17:02:37.024]             `[[` <- base::`[[`
[17:02:37.024]             `+` <- base::`+`
[17:02:37.024]             `<<-` <- base::`<<-`
[17:02:37.024]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.024]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.024]                   3L)]
[17:02:37.024]             }
[17:02:37.024]             function(cond) {
[17:02:37.024]                 is_error <- inherits(cond, "error")
[17:02:37.024]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.024]                   NULL)
[17:02:37.024]                 if (is_error) {
[17:02:37.024]                   sessionInformation <- function() {
[17:02:37.024]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.024]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.024]                       search = base::search(), system = base::Sys.info())
[17:02:37.024]                   }
[17:02:37.024]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.024]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.024]                     cond$call), session = sessionInformation(), 
[17:02:37.024]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.024]                   signalCondition(cond)
[17:02:37.024]                 }
[17:02:37.024]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.024]                 "immediateCondition"))) {
[17:02:37.024]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.024]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.024]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.024]                   if (TRUE && !signal) {
[17:02:37.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.024]                     {
[17:02:37.024]                       inherits <- base::inherits
[17:02:37.024]                       invokeRestart <- base::invokeRestart
[17:02:37.024]                       is.null <- base::is.null
[17:02:37.024]                       muffled <- FALSE
[17:02:37.024]                       if (inherits(cond, "message")) {
[17:02:37.024]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.024]                         if (muffled) 
[17:02:37.024]                           invokeRestart("muffleMessage")
[17:02:37.024]                       }
[17:02:37.024]                       else if (inherits(cond, "warning")) {
[17:02:37.024]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.024]                         if (muffled) 
[17:02:37.024]                           invokeRestart("muffleWarning")
[17:02:37.024]                       }
[17:02:37.024]                       else if (inherits(cond, "condition")) {
[17:02:37.024]                         if (!is.null(pattern)) {
[17:02:37.024]                           computeRestarts <- base::computeRestarts
[17:02:37.024]                           grepl <- base::grepl
[17:02:37.024]                           restarts <- computeRestarts(cond)
[17:02:37.024]                           for (restart in restarts) {
[17:02:37.024]                             name <- restart$name
[17:02:37.024]                             if (is.null(name)) 
[17:02:37.024]                               next
[17:02:37.024]                             if (!grepl(pattern, name)) 
[17:02:37.024]                               next
[17:02:37.024]                             invokeRestart(restart)
[17:02:37.024]                             muffled <- TRUE
[17:02:37.024]                             break
[17:02:37.024]                           }
[17:02:37.024]                         }
[17:02:37.024]                       }
[17:02:37.024]                       invisible(muffled)
[17:02:37.024]                     }
[17:02:37.024]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.024]                   }
[17:02:37.024]                 }
[17:02:37.024]                 else {
[17:02:37.024]                   if (TRUE) {
[17:02:37.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.024]                     {
[17:02:37.024]                       inherits <- base::inherits
[17:02:37.024]                       invokeRestart <- base::invokeRestart
[17:02:37.024]                       is.null <- base::is.null
[17:02:37.024]                       muffled <- FALSE
[17:02:37.024]                       if (inherits(cond, "message")) {
[17:02:37.024]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.024]                         if (muffled) 
[17:02:37.024]                           invokeRestart("muffleMessage")
[17:02:37.024]                       }
[17:02:37.024]                       else if (inherits(cond, "warning")) {
[17:02:37.024]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.024]                         if (muffled) 
[17:02:37.024]                           invokeRestart("muffleWarning")
[17:02:37.024]                       }
[17:02:37.024]                       else if (inherits(cond, "condition")) {
[17:02:37.024]                         if (!is.null(pattern)) {
[17:02:37.024]                           computeRestarts <- base::computeRestarts
[17:02:37.024]                           grepl <- base::grepl
[17:02:37.024]                           restarts <- computeRestarts(cond)
[17:02:37.024]                           for (restart in restarts) {
[17:02:37.024]                             name <- restart$name
[17:02:37.024]                             if (is.null(name)) 
[17:02:37.024]                               next
[17:02:37.024]                             if (!grepl(pattern, name)) 
[17:02:37.024]                               next
[17:02:37.024]                             invokeRestart(restart)
[17:02:37.024]                             muffled <- TRUE
[17:02:37.024]                             break
[17:02:37.024]                           }
[17:02:37.024]                         }
[17:02:37.024]                       }
[17:02:37.024]                       invisible(muffled)
[17:02:37.024]                     }
[17:02:37.024]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.024]                   }
[17:02:37.024]                 }
[17:02:37.024]             }
[17:02:37.024]         }))
[17:02:37.024]     }, error = function(ex) {
[17:02:37.024]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.024]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.024]                 ...future.rng), started = ...future.startTime, 
[17:02:37.024]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.024]             version = "1.8"), class = "FutureResult")
[17:02:37.024]     }, finally = {
[17:02:37.024]         if (!identical(...future.workdir, getwd())) 
[17:02:37.024]             setwd(...future.workdir)
[17:02:37.024]         {
[17:02:37.024]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.024]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.024]             }
[17:02:37.024]             base::options(...future.oldOptions)
[17:02:37.024]             if (.Platform$OS.type == "windows") {
[17:02:37.024]                 old_names <- names(...future.oldEnvVars)
[17:02:37.024]                 envs <- base::Sys.getenv()
[17:02:37.024]                 names <- names(envs)
[17:02:37.024]                 common <- intersect(names, old_names)
[17:02:37.024]                 added <- setdiff(names, old_names)
[17:02:37.024]                 removed <- setdiff(old_names, names)
[17:02:37.024]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.024]                   envs[common]]
[17:02:37.024]                 NAMES <- toupper(changed)
[17:02:37.024]                 args <- list()
[17:02:37.024]                 for (kk in seq_along(NAMES)) {
[17:02:37.024]                   name <- changed[[kk]]
[17:02:37.024]                   NAME <- NAMES[[kk]]
[17:02:37.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.024]                     next
[17:02:37.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.024]                 }
[17:02:37.024]                 NAMES <- toupper(added)
[17:02:37.024]                 for (kk in seq_along(NAMES)) {
[17:02:37.024]                   name <- added[[kk]]
[17:02:37.024]                   NAME <- NAMES[[kk]]
[17:02:37.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.024]                     next
[17:02:37.024]                   args[[name]] <- ""
[17:02:37.024]                 }
[17:02:37.024]                 NAMES <- toupper(removed)
[17:02:37.024]                 for (kk in seq_along(NAMES)) {
[17:02:37.024]                   name <- removed[[kk]]
[17:02:37.024]                   NAME <- NAMES[[kk]]
[17:02:37.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.024]                     next
[17:02:37.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.024]                 }
[17:02:37.024]                 if (length(args) > 0) 
[17:02:37.024]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.024]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.024]             }
[17:02:37.024]             else {
[17:02:37.024]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.024]             }
[17:02:37.024]             {
[17:02:37.024]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.024]                   0L) {
[17:02:37.024]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.024]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.024]                   base::options(opts)
[17:02:37.024]                 }
[17:02:37.024]                 {
[17:02:37.024]                   {
[17:02:37.024]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.024]                     NULL
[17:02:37.024]                   }
[17:02:37.024]                   options(future.plan = NULL)
[17:02:37.024]                   if (is.na(NA_character_)) 
[17:02:37.024]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.024]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.024]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.024]                     .init = FALSE)
[17:02:37.024]                 }
[17:02:37.024]             }
[17:02:37.024]         }
[17:02:37.024]     })
[17:02:37.024]     if (TRUE) {
[17:02:37.024]         base::sink(type = "output", split = FALSE)
[17:02:37.024]         if (TRUE) {
[17:02:37.024]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.024]         }
[17:02:37.024]         else {
[17:02:37.024]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.024]         }
[17:02:37.024]         base::close(...future.stdout)
[17:02:37.024]         ...future.stdout <- NULL
[17:02:37.024]     }
[17:02:37.024]     ...future.result$conditions <- ...future.conditions
[17:02:37.024]     ...future.result$finished <- base::Sys.time()
[17:02:37.024]     ...future.result
[17:02:37.024] }
[17:02:37.027] Exporting 2 global objects (896 bytes) to cluster node #1 ...
[17:02:37.028] Exporting ‘weight’ (208 bytes) to cluster node #1 ...
[17:02:37.028] Exporting ‘weight’ (208 bytes) to cluster node #1 ... DONE
[17:02:37.028] Exporting ‘group’ (688 bytes) to cluster node #1 ...
[17:02:37.028] Exporting ‘group’ (688 bytes) to cluster node #1 ... DONE
[17:02:37.029] Exporting 2 global objects (896 bytes) to cluster node #1 ... DONE
[17:02:37.029] MultisessionFuture started
[17:02:37.029] - Launch lazy future ... done
[17:02:37.029] run() for ‘MultisessionFuture’ ... done
[17:02:37.030] result() for ClusterFuture ...
[17:02:37.030] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.030] - Validating connection of MultisessionFuture
[17:02:37.080] - received message: FutureResult
[17:02:37.080] - Received FutureResult
[17:02:37.080] - Erased future from FutureRegistry
[17:02:37.081] result() for ClusterFuture ...
[17:02:37.081] - result already collected: FutureResult
[17:02:37.081] result() for ClusterFuture ... done
[17:02:37.081] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.081] result() for ClusterFuture ... done
[17:02:37.081] result() for ClusterFuture ...
[17:02:37.081] - result already collected: FutureResult
[17:02:37.081] result() for ClusterFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:37.084] getGlobalsAndPackages() ...
[17:02:37.084] Searching for globals...
[17:02:37.086] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:37.086] Searching for globals ... DONE
[17:02:37.086] Resolving globals: FALSE
[17:02:37.087] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:37.087] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:37.087] - globals: [2] ‘weight’, ‘group’
[17:02:37.087] - packages: [1] ‘stats’
[17:02:37.088] getGlobalsAndPackages() ... DONE
[17:02:37.088] run() for ‘Future’ ...
[17:02:37.088] - state: ‘created’
[17:02:37.088] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.103] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.103] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.103]   - Field: ‘node’
[17:02:37.104]   - Field: ‘label’
[17:02:37.104]   - Field: ‘local’
[17:02:37.104]   - Field: ‘owner’
[17:02:37.104]   - Field: ‘envir’
[17:02:37.104]   - Field: ‘workers’
[17:02:37.104]   - Field: ‘packages’
[17:02:37.104]   - Field: ‘gc’
[17:02:37.104]   - Field: ‘conditions’
[17:02:37.104]   - Field: ‘persistent’
[17:02:37.104]   - Field: ‘expr’
[17:02:37.105]   - Field: ‘uuid’
[17:02:37.105]   - Field: ‘seed’
[17:02:37.105]   - Field: ‘version’
[17:02:37.105]   - Field: ‘result’
[17:02:37.105]   - Field: ‘asynchronous’
[17:02:37.105]   - Field: ‘calls’
[17:02:37.105]   - Field: ‘globals’
[17:02:37.105]   - Field: ‘stdout’
[17:02:37.106]   - Field: ‘earlySignal’
[17:02:37.106]   - Field: ‘lazy’
[17:02:37.106]   - Field: ‘state’
[17:02:37.106] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.106] - Launch lazy future ...
[17:02:37.106] Packages needed by the future expression (n = 1): ‘stats’
[17:02:37.106] Packages needed by future strategies (n = 0): <none>
[17:02:37.107] {
[17:02:37.107]     {
[17:02:37.107]         {
[17:02:37.107]             ...future.startTime <- base::Sys.time()
[17:02:37.107]             {
[17:02:37.107]                 {
[17:02:37.107]                   {
[17:02:37.107]                     {
[17:02:37.107]                       {
[17:02:37.107]                         base::local({
[17:02:37.107]                           has_future <- base::requireNamespace("future", 
[17:02:37.107]                             quietly = TRUE)
[17:02:37.107]                           if (has_future) {
[17:02:37.107]                             ns <- base::getNamespace("future")
[17:02:37.107]                             version <- ns[[".package"]][["version"]]
[17:02:37.107]                             if (is.null(version)) 
[17:02:37.107]                               version <- utils::packageVersion("future")
[17:02:37.107]                           }
[17:02:37.107]                           else {
[17:02:37.107]                             version <- NULL
[17:02:37.107]                           }
[17:02:37.107]                           if (!has_future || version < "1.8.0") {
[17:02:37.107]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.107]                               "", base::R.version$version.string), 
[17:02:37.107]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.107]                                 base::R.version$platform, 8 * 
[17:02:37.107]                                   base::.Machine$sizeof.pointer), 
[17:02:37.107]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.107]                                 "release", "version")], collapse = " "), 
[17:02:37.107]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.107]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.107]                               info)
[17:02:37.107]                             info <- base::paste(info, collapse = "; ")
[17:02:37.107]                             if (!has_future) {
[17:02:37.107]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.107]                                 info)
[17:02:37.107]                             }
[17:02:37.107]                             else {
[17:02:37.107]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.107]                                 info, version)
[17:02:37.107]                             }
[17:02:37.107]                             base::stop(msg)
[17:02:37.107]                           }
[17:02:37.107]                         })
[17:02:37.107]                       }
[17:02:37.107]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.107]                       base::options(mc.cores = 1L)
[17:02:37.107]                     }
[17:02:37.107]                     base::local({
[17:02:37.107]                       for (pkg in "stats") {
[17:02:37.107]                         base::loadNamespace(pkg)
[17:02:37.107]                         base::library(pkg, character.only = TRUE)
[17:02:37.107]                       }
[17:02:37.107]                     })
[17:02:37.107]                   }
[17:02:37.107]                   ...future.strategy.old <- future::plan("list")
[17:02:37.107]                   options(future.plan = NULL)
[17:02:37.107]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.107]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.107]                 }
[17:02:37.107]                 ...future.workdir <- getwd()
[17:02:37.107]             }
[17:02:37.107]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.107]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.107]         }
[17:02:37.107]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.107]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.107]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.107]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.107]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.107]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.107]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.107]             base::names(...future.oldOptions))
[17:02:37.107]     }
[17:02:37.107]     if (FALSE) {
[17:02:37.107]     }
[17:02:37.107]     else {
[17:02:37.107]         if (TRUE) {
[17:02:37.107]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.107]                 open = "w")
[17:02:37.107]         }
[17:02:37.107]         else {
[17:02:37.107]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.107]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.107]         }
[17:02:37.107]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.107]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.107]             base::sink(type = "output", split = FALSE)
[17:02:37.107]             base::close(...future.stdout)
[17:02:37.107]         }, add = TRUE)
[17:02:37.107]     }
[17:02:37.107]     ...future.frame <- base::sys.nframe()
[17:02:37.107]     ...future.conditions <- base::list()
[17:02:37.107]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.107]     if (FALSE) {
[17:02:37.107]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.107]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.107]     }
[17:02:37.107]     ...future.result <- base::tryCatch({
[17:02:37.107]         base::withCallingHandlers({
[17:02:37.107]             ...future.value <- base::withVisible(base::local({
[17:02:37.107]                 ...future.makeSendCondition <- base::local({
[17:02:37.107]                   sendCondition <- NULL
[17:02:37.107]                   function(frame = 1L) {
[17:02:37.107]                     if (is.function(sendCondition)) 
[17:02:37.107]                       return(sendCondition)
[17:02:37.107]                     ns <- getNamespace("parallel")
[17:02:37.107]                     if (exists("sendData", mode = "function", 
[17:02:37.107]                       envir = ns)) {
[17:02:37.107]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.107]                         envir = ns)
[17:02:37.107]                       envir <- sys.frame(frame)
[17:02:37.107]                       master <- NULL
[17:02:37.107]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.107]                         !identical(envir, emptyenv())) {
[17:02:37.107]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.107]                           inherits = FALSE)) {
[17:02:37.107]                           master <- get("master", mode = "list", 
[17:02:37.107]                             envir = envir, inherits = FALSE)
[17:02:37.107]                           if (inherits(master, c("SOCKnode", 
[17:02:37.107]                             "SOCK0node"))) {
[17:02:37.107]                             sendCondition <<- function(cond) {
[17:02:37.107]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.107]                                 success = TRUE)
[17:02:37.107]                               parallel_sendData(master, data)
[17:02:37.107]                             }
[17:02:37.107]                             return(sendCondition)
[17:02:37.107]                           }
[17:02:37.107]                         }
[17:02:37.107]                         frame <- frame + 1L
[17:02:37.107]                         envir <- sys.frame(frame)
[17:02:37.107]                       }
[17:02:37.107]                     }
[17:02:37.107]                     sendCondition <<- function(cond) NULL
[17:02:37.107]                   }
[17:02:37.107]                 })
[17:02:37.107]                 withCallingHandlers({
[17:02:37.107]                   {
[17:02:37.107]                     lm(weight ~ group - 1)
[17:02:37.107]                   }
[17:02:37.107]                 }, immediateCondition = function(cond) {
[17:02:37.107]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.107]                   sendCondition(cond)
[17:02:37.107]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.107]                   {
[17:02:37.107]                     inherits <- base::inherits
[17:02:37.107]                     invokeRestart <- base::invokeRestart
[17:02:37.107]                     is.null <- base::is.null
[17:02:37.107]                     muffled <- FALSE
[17:02:37.107]                     if (inherits(cond, "message")) {
[17:02:37.107]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.107]                       if (muffled) 
[17:02:37.107]                         invokeRestart("muffleMessage")
[17:02:37.107]                     }
[17:02:37.107]                     else if (inherits(cond, "warning")) {
[17:02:37.107]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.107]                       if (muffled) 
[17:02:37.107]                         invokeRestart("muffleWarning")
[17:02:37.107]                     }
[17:02:37.107]                     else if (inherits(cond, "condition")) {
[17:02:37.107]                       if (!is.null(pattern)) {
[17:02:37.107]                         computeRestarts <- base::computeRestarts
[17:02:37.107]                         grepl <- base::grepl
[17:02:37.107]                         restarts <- computeRestarts(cond)
[17:02:37.107]                         for (restart in restarts) {
[17:02:37.107]                           name <- restart$name
[17:02:37.107]                           if (is.null(name)) 
[17:02:37.107]                             next
[17:02:37.107]                           if (!grepl(pattern, name)) 
[17:02:37.107]                             next
[17:02:37.107]                           invokeRestart(restart)
[17:02:37.107]                           muffled <- TRUE
[17:02:37.107]                           break
[17:02:37.107]                         }
[17:02:37.107]                       }
[17:02:37.107]                     }
[17:02:37.107]                     invisible(muffled)
[17:02:37.107]                   }
[17:02:37.107]                   muffleCondition(cond)
[17:02:37.107]                 })
[17:02:37.107]             }))
[17:02:37.107]             future::FutureResult(value = ...future.value$value, 
[17:02:37.107]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.107]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.107]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.107]                     ...future.globalenv.names))
[17:02:37.107]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.107]         }, condition = base::local({
[17:02:37.107]             c <- base::c
[17:02:37.107]             inherits <- base::inherits
[17:02:37.107]             invokeRestart <- base::invokeRestart
[17:02:37.107]             length <- base::length
[17:02:37.107]             list <- base::list
[17:02:37.107]             seq.int <- base::seq.int
[17:02:37.107]             signalCondition <- base::signalCondition
[17:02:37.107]             sys.calls <- base::sys.calls
[17:02:37.107]             `[[` <- base::`[[`
[17:02:37.107]             `+` <- base::`+`
[17:02:37.107]             `<<-` <- base::`<<-`
[17:02:37.107]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.107]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.107]                   3L)]
[17:02:37.107]             }
[17:02:37.107]             function(cond) {
[17:02:37.107]                 is_error <- inherits(cond, "error")
[17:02:37.107]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.107]                   NULL)
[17:02:37.107]                 if (is_error) {
[17:02:37.107]                   sessionInformation <- function() {
[17:02:37.107]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.107]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.107]                       search = base::search(), system = base::Sys.info())
[17:02:37.107]                   }
[17:02:37.107]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.107]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.107]                     cond$call), session = sessionInformation(), 
[17:02:37.107]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.107]                   signalCondition(cond)
[17:02:37.107]                 }
[17:02:37.107]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.107]                 "immediateCondition"))) {
[17:02:37.107]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.107]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.107]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.107]                   if (TRUE && !signal) {
[17:02:37.107]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.107]                     {
[17:02:37.107]                       inherits <- base::inherits
[17:02:37.107]                       invokeRestart <- base::invokeRestart
[17:02:37.107]                       is.null <- base::is.null
[17:02:37.107]                       muffled <- FALSE
[17:02:37.107]                       if (inherits(cond, "message")) {
[17:02:37.107]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.107]                         if (muffled) 
[17:02:37.107]                           invokeRestart("muffleMessage")
[17:02:37.107]                       }
[17:02:37.107]                       else if (inherits(cond, "warning")) {
[17:02:37.107]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.107]                         if (muffled) 
[17:02:37.107]                           invokeRestart("muffleWarning")
[17:02:37.107]                       }
[17:02:37.107]                       else if (inherits(cond, "condition")) {
[17:02:37.107]                         if (!is.null(pattern)) {
[17:02:37.107]                           computeRestarts <- base::computeRestarts
[17:02:37.107]                           grepl <- base::grepl
[17:02:37.107]                           restarts <- computeRestarts(cond)
[17:02:37.107]                           for (restart in restarts) {
[17:02:37.107]                             name <- restart$name
[17:02:37.107]                             if (is.null(name)) 
[17:02:37.107]                               next
[17:02:37.107]                             if (!grepl(pattern, name)) 
[17:02:37.107]                               next
[17:02:37.107]                             invokeRestart(restart)
[17:02:37.107]                             muffled <- TRUE
[17:02:37.107]                             break
[17:02:37.107]                           }
[17:02:37.107]                         }
[17:02:37.107]                       }
[17:02:37.107]                       invisible(muffled)
[17:02:37.107]                     }
[17:02:37.107]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.107]                   }
[17:02:37.107]                 }
[17:02:37.107]                 else {
[17:02:37.107]                   if (TRUE) {
[17:02:37.107]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.107]                     {
[17:02:37.107]                       inherits <- base::inherits
[17:02:37.107]                       invokeRestart <- base::invokeRestart
[17:02:37.107]                       is.null <- base::is.null
[17:02:37.107]                       muffled <- FALSE
[17:02:37.107]                       if (inherits(cond, "message")) {
[17:02:37.107]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.107]                         if (muffled) 
[17:02:37.107]                           invokeRestart("muffleMessage")
[17:02:37.107]                       }
[17:02:37.107]                       else if (inherits(cond, "warning")) {
[17:02:37.107]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.107]                         if (muffled) 
[17:02:37.107]                           invokeRestart("muffleWarning")
[17:02:37.107]                       }
[17:02:37.107]                       else if (inherits(cond, "condition")) {
[17:02:37.107]                         if (!is.null(pattern)) {
[17:02:37.107]                           computeRestarts <- base::computeRestarts
[17:02:37.107]                           grepl <- base::grepl
[17:02:37.107]                           restarts <- computeRestarts(cond)
[17:02:37.107]                           for (restart in restarts) {
[17:02:37.107]                             name <- restart$name
[17:02:37.107]                             if (is.null(name)) 
[17:02:37.107]                               next
[17:02:37.107]                             if (!grepl(pattern, name)) 
[17:02:37.107]                               next
[17:02:37.107]                             invokeRestart(restart)
[17:02:37.107]                             muffled <- TRUE
[17:02:37.107]                             break
[17:02:37.107]                           }
[17:02:37.107]                         }
[17:02:37.107]                       }
[17:02:37.107]                       invisible(muffled)
[17:02:37.107]                     }
[17:02:37.107]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.107]                   }
[17:02:37.107]                 }
[17:02:37.107]             }
[17:02:37.107]         }))
[17:02:37.107]     }, error = function(ex) {
[17:02:37.107]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.107]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.107]                 ...future.rng), started = ...future.startTime, 
[17:02:37.107]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.107]             version = "1.8"), class = "FutureResult")
[17:02:37.107]     }, finally = {
[17:02:37.107]         if (!identical(...future.workdir, getwd())) 
[17:02:37.107]             setwd(...future.workdir)
[17:02:37.107]         {
[17:02:37.107]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.107]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.107]             }
[17:02:37.107]             base::options(...future.oldOptions)
[17:02:37.107]             if (.Platform$OS.type == "windows") {
[17:02:37.107]                 old_names <- names(...future.oldEnvVars)
[17:02:37.107]                 envs <- base::Sys.getenv()
[17:02:37.107]                 names <- names(envs)
[17:02:37.107]                 common <- intersect(names, old_names)
[17:02:37.107]                 added <- setdiff(names, old_names)
[17:02:37.107]                 removed <- setdiff(old_names, names)
[17:02:37.107]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.107]                   envs[common]]
[17:02:37.107]                 NAMES <- toupper(changed)
[17:02:37.107]                 args <- list()
[17:02:37.107]                 for (kk in seq_along(NAMES)) {
[17:02:37.107]                   name <- changed[[kk]]
[17:02:37.107]                   NAME <- NAMES[[kk]]
[17:02:37.107]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.107]                     next
[17:02:37.107]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.107]                 }
[17:02:37.107]                 NAMES <- toupper(added)
[17:02:37.107]                 for (kk in seq_along(NAMES)) {
[17:02:37.107]                   name <- added[[kk]]
[17:02:37.107]                   NAME <- NAMES[[kk]]
[17:02:37.107]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.107]                     next
[17:02:37.107]                   args[[name]] <- ""
[17:02:37.107]                 }
[17:02:37.107]                 NAMES <- toupper(removed)
[17:02:37.107]                 for (kk in seq_along(NAMES)) {
[17:02:37.107]                   name <- removed[[kk]]
[17:02:37.107]                   NAME <- NAMES[[kk]]
[17:02:37.107]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.107]                     next
[17:02:37.107]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.107]                 }
[17:02:37.107]                 if (length(args) > 0) 
[17:02:37.107]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.107]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.107]             }
[17:02:37.107]             else {
[17:02:37.107]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.107]             }
[17:02:37.107]             {
[17:02:37.107]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.107]                   0L) {
[17:02:37.107]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.107]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.107]                   base::options(opts)
[17:02:37.107]                 }
[17:02:37.107]                 {
[17:02:37.107]                   {
[17:02:37.107]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.107]                     NULL
[17:02:37.107]                   }
[17:02:37.107]                   options(future.plan = NULL)
[17:02:37.107]                   if (is.na(NA_character_)) 
[17:02:37.107]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.107]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.107]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.107]                     .init = FALSE)
[17:02:37.107]                 }
[17:02:37.107]             }
[17:02:37.107]         }
[17:02:37.107]     })
[17:02:37.107]     if (TRUE) {
[17:02:37.107]         base::sink(type = "output", split = FALSE)
[17:02:37.107]         if (TRUE) {
[17:02:37.107]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.107]         }
[17:02:37.107]         else {
[17:02:37.107]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.107]         }
[17:02:37.107]         base::close(...future.stdout)
[17:02:37.107]         ...future.stdout <- NULL
[17:02:37.107]     }
[17:02:37.107]     ...future.result$conditions <- ...future.conditions
[17:02:37.107]     ...future.result$finished <- base::Sys.time()
[17:02:37.107]     ...future.result
[17:02:37.107] }
[17:02:37.110] Exporting 2 global objects (896 bytes) to cluster node #1 ...
[17:02:37.110] Exporting ‘weight’ (208 bytes) to cluster node #1 ...
[17:02:37.111] Exporting ‘weight’ (208 bytes) to cluster node #1 ... DONE
[17:02:37.111] Exporting ‘group’ (688 bytes) to cluster node #1 ...
[17:02:37.111] Exporting ‘group’ (688 bytes) to cluster node #1 ... DONE
[17:02:37.111] Exporting 2 global objects (896 bytes) to cluster node #1 ... DONE
[17:02:37.112] MultisessionFuture started
[17:02:37.112] - Launch lazy future ... done
[17:02:37.112] run() for ‘MultisessionFuture’ ... done
[17:02:37.112] result() for ClusterFuture ...
[17:02:37.113] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.113] - Validating connection of MultisessionFuture
[17:02:37.158] - received message: FutureResult
[17:02:37.159] - Received FutureResult
[17:02:37.159] - Erased future from FutureRegistry
[17:02:37.159] result() for ClusterFuture ...
[17:02:37.159] - result already collected: FutureResult
[17:02:37.159] result() for ClusterFuture ... done
[17:02:37.159] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.159] result() for ClusterFuture ... done
[17:02:37.160] result() for ClusterFuture ...
[17:02:37.160] - result already collected: FutureResult
[17:02:37.160] result() for ClusterFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:37.162] getGlobalsAndPackages() ...
[17:02:37.162] Searching for globals...
[17:02:37.164] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:37.164] Searching for globals ... DONE
[17:02:37.165] Resolving globals: FALSE
[17:02:37.165] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:37.166] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:37.166] - globals: [2] ‘weight’, ‘group’
[17:02:37.166] - packages: [1] ‘stats’
[17:02:37.166] getGlobalsAndPackages() ... DONE
[17:02:37.166] run() for ‘Future’ ...
[17:02:37.167] - state: ‘created’
[17:02:37.167] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.182] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.182] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.182]   - Field: ‘node’
[17:02:37.182]   - Field: ‘label’
[17:02:37.182]   - Field: ‘local’
[17:02:37.182]   - Field: ‘owner’
[17:02:37.183]   - Field: ‘envir’
[17:02:37.183]   - Field: ‘workers’
[17:02:37.183]   - Field: ‘packages’
[17:02:37.183]   - Field: ‘gc’
[17:02:37.183]   - Field: ‘conditions’
[17:02:37.183]   - Field: ‘persistent’
[17:02:37.183]   - Field: ‘expr’
[17:02:37.183]   - Field: ‘uuid’
[17:02:37.183]   - Field: ‘seed’
[17:02:37.184]   - Field: ‘version’
[17:02:37.184]   - Field: ‘result’
[17:02:37.184]   - Field: ‘asynchronous’
[17:02:37.184]   - Field: ‘calls’
[17:02:37.184]   - Field: ‘globals’
[17:02:37.184]   - Field: ‘stdout’
[17:02:37.184]   - Field: ‘earlySignal’
[17:02:37.184]   - Field: ‘lazy’
[17:02:37.184]   - Field: ‘state’
[17:02:37.185] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.185] - Launch lazy future ...
[17:02:37.185] Packages needed by the future expression (n = 1): ‘stats’
[17:02:37.185] Packages needed by future strategies (n = 0): <none>
[17:02:37.186] {
[17:02:37.186]     {
[17:02:37.186]         {
[17:02:37.186]             ...future.startTime <- base::Sys.time()
[17:02:37.186]             {
[17:02:37.186]                 {
[17:02:37.186]                   {
[17:02:37.186]                     {
[17:02:37.186]                       {
[17:02:37.186]                         base::local({
[17:02:37.186]                           has_future <- base::requireNamespace("future", 
[17:02:37.186]                             quietly = TRUE)
[17:02:37.186]                           if (has_future) {
[17:02:37.186]                             ns <- base::getNamespace("future")
[17:02:37.186]                             version <- ns[[".package"]][["version"]]
[17:02:37.186]                             if (is.null(version)) 
[17:02:37.186]                               version <- utils::packageVersion("future")
[17:02:37.186]                           }
[17:02:37.186]                           else {
[17:02:37.186]                             version <- NULL
[17:02:37.186]                           }
[17:02:37.186]                           if (!has_future || version < "1.8.0") {
[17:02:37.186]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.186]                               "", base::R.version$version.string), 
[17:02:37.186]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.186]                                 base::R.version$platform, 8 * 
[17:02:37.186]                                   base::.Machine$sizeof.pointer), 
[17:02:37.186]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.186]                                 "release", "version")], collapse = " "), 
[17:02:37.186]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.186]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.186]                               info)
[17:02:37.186]                             info <- base::paste(info, collapse = "; ")
[17:02:37.186]                             if (!has_future) {
[17:02:37.186]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.186]                                 info)
[17:02:37.186]                             }
[17:02:37.186]                             else {
[17:02:37.186]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.186]                                 info, version)
[17:02:37.186]                             }
[17:02:37.186]                             base::stop(msg)
[17:02:37.186]                           }
[17:02:37.186]                         })
[17:02:37.186]                       }
[17:02:37.186]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.186]                       base::options(mc.cores = 1L)
[17:02:37.186]                     }
[17:02:37.186]                     base::local({
[17:02:37.186]                       for (pkg in "stats") {
[17:02:37.186]                         base::loadNamespace(pkg)
[17:02:37.186]                         base::library(pkg, character.only = TRUE)
[17:02:37.186]                       }
[17:02:37.186]                     })
[17:02:37.186]                   }
[17:02:37.186]                   ...future.strategy.old <- future::plan("list")
[17:02:37.186]                   options(future.plan = NULL)
[17:02:37.186]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.186]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.186]                 }
[17:02:37.186]                 ...future.workdir <- getwd()
[17:02:37.186]             }
[17:02:37.186]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.186]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.186]         }
[17:02:37.186]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.186]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.186]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.186]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.186]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.186]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.186]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.186]             base::names(...future.oldOptions))
[17:02:37.186]     }
[17:02:37.186]     if (FALSE) {
[17:02:37.186]     }
[17:02:37.186]     else {
[17:02:37.186]         if (TRUE) {
[17:02:37.186]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.186]                 open = "w")
[17:02:37.186]         }
[17:02:37.186]         else {
[17:02:37.186]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.186]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.186]         }
[17:02:37.186]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.186]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.186]             base::sink(type = "output", split = FALSE)
[17:02:37.186]             base::close(...future.stdout)
[17:02:37.186]         }, add = TRUE)
[17:02:37.186]     }
[17:02:37.186]     ...future.frame <- base::sys.nframe()
[17:02:37.186]     ...future.conditions <- base::list()
[17:02:37.186]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.186]     if (FALSE) {
[17:02:37.186]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.186]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.186]     }
[17:02:37.186]     ...future.result <- base::tryCatch({
[17:02:37.186]         base::withCallingHandlers({
[17:02:37.186]             ...future.value <- base::withVisible(base::local({
[17:02:37.186]                 ...future.makeSendCondition <- base::local({
[17:02:37.186]                   sendCondition <- NULL
[17:02:37.186]                   function(frame = 1L) {
[17:02:37.186]                     if (is.function(sendCondition)) 
[17:02:37.186]                       return(sendCondition)
[17:02:37.186]                     ns <- getNamespace("parallel")
[17:02:37.186]                     if (exists("sendData", mode = "function", 
[17:02:37.186]                       envir = ns)) {
[17:02:37.186]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.186]                         envir = ns)
[17:02:37.186]                       envir <- sys.frame(frame)
[17:02:37.186]                       master <- NULL
[17:02:37.186]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.186]                         !identical(envir, emptyenv())) {
[17:02:37.186]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.186]                           inherits = FALSE)) {
[17:02:37.186]                           master <- get("master", mode = "list", 
[17:02:37.186]                             envir = envir, inherits = FALSE)
[17:02:37.186]                           if (inherits(master, c("SOCKnode", 
[17:02:37.186]                             "SOCK0node"))) {
[17:02:37.186]                             sendCondition <<- function(cond) {
[17:02:37.186]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.186]                                 success = TRUE)
[17:02:37.186]                               parallel_sendData(master, data)
[17:02:37.186]                             }
[17:02:37.186]                             return(sendCondition)
[17:02:37.186]                           }
[17:02:37.186]                         }
[17:02:37.186]                         frame <- frame + 1L
[17:02:37.186]                         envir <- sys.frame(frame)
[17:02:37.186]                       }
[17:02:37.186]                     }
[17:02:37.186]                     sendCondition <<- function(cond) NULL
[17:02:37.186]                   }
[17:02:37.186]                 })
[17:02:37.186]                 withCallingHandlers({
[17:02:37.186]                   {
[17:02:37.186]                     lm(weight ~ group - 1)
[17:02:37.186]                   }
[17:02:37.186]                 }, immediateCondition = function(cond) {
[17:02:37.186]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.186]                   sendCondition(cond)
[17:02:37.186]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.186]                   {
[17:02:37.186]                     inherits <- base::inherits
[17:02:37.186]                     invokeRestart <- base::invokeRestart
[17:02:37.186]                     is.null <- base::is.null
[17:02:37.186]                     muffled <- FALSE
[17:02:37.186]                     if (inherits(cond, "message")) {
[17:02:37.186]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.186]                       if (muffled) 
[17:02:37.186]                         invokeRestart("muffleMessage")
[17:02:37.186]                     }
[17:02:37.186]                     else if (inherits(cond, "warning")) {
[17:02:37.186]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.186]                       if (muffled) 
[17:02:37.186]                         invokeRestart("muffleWarning")
[17:02:37.186]                     }
[17:02:37.186]                     else if (inherits(cond, "condition")) {
[17:02:37.186]                       if (!is.null(pattern)) {
[17:02:37.186]                         computeRestarts <- base::computeRestarts
[17:02:37.186]                         grepl <- base::grepl
[17:02:37.186]                         restarts <- computeRestarts(cond)
[17:02:37.186]                         for (restart in restarts) {
[17:02:37.186]                           name <- restart$name
[17:02:37.186]                           if (is.null(name)) 
[17:02:37.186]                             next
[17:02:37.186]                           if (!grepl(pattern, name)) 
[17:02:37.186]                             next
[17:02:37.186]                           invokeRestart(restart)
[17:02:37.186]                           muffled <- TRUE
[17:02:37.186]                           break
[17:02:37.186]                         }
[17:02:37.186]                       }
[17:02:37.186]                     }
[17:02:37.186]                     invisible(muffled)
[17:02:37.186]                   }
[17:02:37.186]                   muffleCondition(cond)
[17:02:37.186]                 })
[17:02:37.186]             }))
[17:02:37.186]             future::FutureResult(value = ...future.value$value, 
[17:02:37.186]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.186]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.186]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.186]                     ...future.globalenv.names))
[17:02:37.186]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.186]         }, condition = base::local({
[17:02:37.186]             c <- base::c
[17:02:37.186]             inherits <- base::inherits
[17:02:37.186]             invokeRestart <- base::invokeRestart
[17:02:37.186]             length <- base::length
[17:02:37.186]             list <- base::list
[17:02:37.186]             seq.int <- base::seq.int
[17:02:37.186]             signalCondition <- base::signalCondition
[17:02:37.186]             sys.calls <- base::sys.calls
[17:02:37.186]             `[[` <- base::`[[`
[17:02:37.186]             `+` <- base::`+`
[17:02:37.186]             `<<-` <- base::`<<-`
[17:02:37.186]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.186]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.186]                   3L)]
[17:02:37.186]             }
[17:02:37.186]             function(cond) {
[17:02:37.186]                 is_error <- inherits(cond, "error")
[17:02:37.186]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.186]                   NULL)
[17:02:37.186]                 if (is_error) {
[17:02:37.186]                   sessionInformation <- function() {
[17:02:37.186]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.186]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.186]                       search = base::search(), system = base::Sys.info())
[17:02:37.186]                   }
[17:02:37.186]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.186]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.186]                     cond$call), session = sessionInformation(), 
[17:02:37.186]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.186]                   signalCondition(cond)
[17:02:37.186]                 }
[17:02:37.186]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.186]                 "immediateCondition"))) {
[17:02:37.186]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.186]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.186]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.186]                   if (TRUE && !signal) {
[17:02:37.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.186]                     {
[17:02:37.186]                       inherits <- base::inherits
[17:02:37.186]                       invokeRestart <- base::invokeRestart
[17:02:37.186]                       is.null <- base::is.null
[17:02:37.186]                       muffled <- FALSE
[17:02:37.186]                       if (inherits(cond, "message")) {
[17:02:37.186]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.186]                         if (muffled) 
[17:02:37.186]                           invokeRestart("muffleMessage")
[17:02:37.186]                       }
[17:02:37.186]                       else if (inherits(cond, "warning")) {
[17:02:37.186]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.186]                         if (muffled) 
[17:02:37.186]                           invokeRestart("muffleWarning")
[17:02:37.186]                       }
[17:02:37.186]                       else if (inherits(cond, "condition")) {
[17:02:37.186]                         if (!is.null(pattern)) {
[17:02:37.186]                           computeRestarts <- base::computeRestarts
[17:02:37.186]                           grepl <- base::grepl
[17:02:37.186]                           restarts <- computeRestarts(cond)
[17:02:37.186]                           for (restart in restarts) {
[17:02:37.186]                             name <- restart$name
[17:02:37.186]                             if (is.null(name)) 
[17:02:37.186]                               next
[17:02:37.186]                             if (!grepl(pattern, name)) 
[17:02:37.186]                               next
[17:02:37.186]                             invokeRestart(restart)
[17:02:37.186]                             muffled <- TRUE
[17:02:37.186]                             break
[17:02:37.186]                           }
[17:02:37.186]                         }
[17:02:37.186]                       }
[17:02:37.186]                       invisible(muffled)
[17:02:37.186]                     }
[17:02:37.186]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.186]                   }
[17:02:37.186]                 }
[17:02:37.186]                 else {
[17:02:37.186]                   if (TRUE) {
[17:02:37.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.186]                     {
[17:02:37.186]                       inherits <- base::inherits
[17:02:37.186]                       invokeRestart <- base::invokeRestart
[17:02:37.186]                       is.null <- base::is.null
[17:02:37.186]                       muffled <- FALSE
[17:02:37.186]                       if (inherits(cond, "message")) {
[17:02:37.186]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.186]                         if (muffled) 
[17:02:37.186]                           invokeRestart("muffleMessage")
[17:02:37.186]                       }
[17:02:37.186]                       else if (inherits(cond, "warning")) {
[17:02:37.186]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.186]                         if (muffled) 
[17:02:37.186]                           invokeRestart("muffleWarning")
[17:02:37.186]                       }
[17:02:37.186]                       else if (inherits(cond, "condition")) {
[17:02:37.186]                         if (!is.null(pattern)) {
[17:02:37.186]                           computeRestarts <- base::computeRestarts
[17:02:37.186]                           grepl <- base::grepl
[17:02:37.186]                           restarts <- computeRestarts(cond)
[17:02:37.186]                           for (restart in restarts) {
[17:02:37.186]                             name <- restart$name
[17:02:37.186]                             if (is.null(name)) 
[17:02:37.186]                               next
[17:02:37.186]                             if (!grepl(pattern, name)) 
[17:02:37.186]                               next
[17:02:37.186]                             invokeRestart(restart)
[17:02:37.186]                             muffled <- TRUE
[17:02:37.186]                             break
[17:02:37.186]                           }
[17:02:37.186]                         }
[17:02:37.186]                       }
[17:02:37.186]                       invisible(muffled)
[17:02:37.186]                     }
[17:02:37.186]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.186]                   }
[17:02:37.186]                 }
[17:02:37.186]             }
[17:02:37.186]         }))
[17:02:37.186]     }, error = function(ex) {
[17:02:37.186]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.186]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.186]                 ...future.rng), started = ...future.startTime, 
[17:02:37.186]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.186]             version = "1.8"), class = "FutureResult")
[17:02:37.186]     }, finally = {
[17:02:37.186]         if (!identical(...future.workdir, getwd())) 
[17:02:37.186]             setwd(...future.workdir)
[17:02:37.186]         {
[17:02:37.186]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.186]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.186]             }
[17:02:37.186]             base::options(...future.oldOptions)
[17:02:37.186]             if (.Platform$OS.type == "windows") {
[17:02:37.186]                 old_names <- names(...future.oldEnvVars)
[17:02:37.186]                 envs <- base::Sys.getenv()
[17:02:37.186]                 names <- names(envs)
[17:02:37.186]                 common <- intersect(names, old_names)
[17:02:37.186]                 added <- setdiff(names, old_names)
[17:02:37.186]                 removed <- setdiff(old_names, names)
[17:02:37.186]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.186]                   envs[common]]
[17:02:37.186]                 NAMES <- toupper(changed)
[17:02:37.186]                 args <- list()
[17:02:37.186]                 for (kk in seq_along(NAMES)) {
[17:02:37.186]                   name <- changed[[kk]]
[17:02:37.186]                   NAME <- NAMES[[kk]]
[17:02:37.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.186]                     next
[17:02:37.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.186]                 }
[17:02:37.186]                 NAMES <- toupper(added)
[17:02:37.186]                 for (kk in seq_along(NAMES)) {
[17:02:37.186]                   name <- added[[kk]]
[17:02:37.186]                   NAME <- NAMES[[kk]]
[17:02:37.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.186]                     next
[17:02:37.186]                   args[[name]] <- ""
[17:02:37.186]                 }
[17:02:37.186]                 NAMES <- toupper(removed)
[17:02:37.186]                 for (kk in seq_along(NAMES)) {
[17:02:37.186]                   name <- removed[[kk]]
[17:02:37.186]                   NAME <- NAMES[[kk]]
[17:02:37.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.186]                     next
[17:02:37.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.186]                 }
[17:02:37.186]                 if (length(args) > 0) 
[17:02:37.186]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.186]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.186]             }
[17:02:37.186]             else {
[17:02:37.186]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.186]             }
[17:02:37.186]             {
[17:02:37.186]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.186]                   0L) {
[17:02:37.186]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.186]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.186]                   base::options(opts)
[17:02:37.186]                 }
[17:02:37.186]                 {
[17:02:37.186]                   {
[17:02:37.186]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.186]                     NULL
[17:02:37.186]                   }
[17:02:37.186]                   options(future.plan = NULL)
[17:02:37.186]                   if (is.na(NA_character_)) 
[17:02:37.186]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.186]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.186]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.186]                     .init = FALSE)
[17:02:37.186]                 }
[17:02:37.186]             }
[17:02:37.186]         }
[17:02:37.186]     })
[17:02:37.186]     if (TRUE) {
[17:02:37.186]         base::sink(type = "output", split = FALSE)
[17:02:37.186]         if (TRUE) {
[17:02:37.186]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.186]         }
[17:02:37.186]         else {
[17:02:37.186]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.186]         }
[17:02:37.186]         base::close(...future.stdout)
[17:02:37.186]         ...future.stdout <- NULL
[17:02:37.186]     }
[17:02:37.186]     ...future.result$conditions <- ...future.conditions
[17:02:37.186]     ...future.result$finished <- base::Sys.time()
[17:02:37.186]     ...future.result
[17:02:37.186] }
[17:02:37.189] Exporting 2 global objects (896 bytes) to cluster node #1 ...
[17:02:37.189] Exporting ‘weight’ (208 bytes) to cluster node #1 ...
[17:02:37.190] Exporting ‘weight’ (208 bytes) to cluster node #1 ... DONE
[17:02:37.190] Exporting ‘group’ (688 bytes) to cluster node #1 ...
[17:02:37.190] Exporting ‘group’ (688 bytes) to cluster node #1 ... DONE
[17:02:37.190] Exporting 2 global objects (896 bytes) to cluster node #1 ... DONE
[17:02:37.191] MultisessionFuture started
[17:02:37.191] - Launch lazy future ... done
[17:02:37.191] run() for ‘MultisessionFuture’ ... done
[17:02:37.194] result() for ClusterFuture ...
[17:02:37.194] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.194] - Validating connection of MultisessionFuture
[17:02:37.234] - received message: FutureResult
[17:02:37.234] - Received FutureResult
[17:02:37.235] - Erased future from FutureRegistry
[17:02:37.235] result() for ClusterFuture ...
[17:02:37.235] - result already collected: FutureResult
[17:02:37.235] result() for ClusterFuture ... done
[17:02:37.235] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.235] result() for ClusterFuture ... done
[17:02:37.235] result() for ClusterFuture ...
[17:02:37.235] - result already collected: FutureResult
[17:02:37.235] result() for ClusterFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:37.237] getGlobalsAndPackages() ...
[17:02:37.237] Searching for globals...
[17:02:37.239] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:37.239] Searching for globals ... DONE
[17:02:37.239] Resolving globals: FALSE
[17:02:37.239] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:37.240] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:37.240] - globals: [2] ‘weight’, ‘group’
[17:02:37.240] - packages: [1] ‘stats’
[17:02:37.240] getGlobalsAndPackages() ... DONE
[17:02:37.240] run() for ‘Future’ ...
[17:02:37.241] - state: ‘created’
[17:02:37.241] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.255] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.256] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.256]   - Field: ‘node’
[17:02:37.256]   - Field: ‘label’
[17:02:37.256]   - Field: ‘local’
[17:02:37.256]   - Field: ‘owner’
[17:02:37.256]   - Field: ‘envir’
[17:02:37.256]   - Field: ‘workers’
[17:02:37.256]   - Field: ‘packages’
[17:02:37.256]   - Field: ‘gc’
[17:02:37.256]   - Field: ‘conditions’
[17:02:37.256]   - Field: ‘persistent’
[17:02:37.257]   - Field: ‘expr’
[17:02:37.257]   - Field: ‘uuid’
[17:02:37.257]   - Field: ‘seed’
[17:02:37.257]   - Field: ‘version’
[17:02:37.257]   - Field: ‘result’
[17:02:37.257]   - Field: ‘asynchronous’
[17:02:37.257]   - Field: ‘calls’
[17:02:37.257]   - Field: ‘globals’
[17:02:37.257]   - Field: ‘stdout’
[17:02:37.257]   - Field: ‘earlySignal’
[17:02:37.257]   - Field: ‘lazy’
[17:02:37.258]   - Field: ‘state’
[17:02:37.258] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.258] - Launch lazy future ...
[17:02:37.258] Packages needed by the future expression (n = 1): ‘stats’
[17:02:37.258] Packages needed by future strategies (n = 0): <none>
[17:02:37.259] {
[17:02:37.259]     {
[17:02:37.259]         {
[17:02:37.259]             ...future.startTime <- base::Sys.time()
[17:02:37.259]             {
[17:02:37.259]                 {
[17:02:37.259]                   {
[17:02:37.259]                     {
[17:02:37.259]                       {
[17:02:37.259]                         base::local({
[17:02:37.259]                           has_future <- base::requireNamespace("future", 
[17:02:37.259]                             quietly = TRUE)
[17:02:37.259]                           if (has_future) {
[17:02:37.259]                             ns <- base::getNamespace("future")
[17:02:37.259]                             version <- ns[[".package"]][["version"]]
[17:02:37.259]                             if (is.null(version)) 
[17:02:37.259]                               version <- utils::packageVersion("future")
[17:02:37.259]                           }
[17:02:37.259]                           else {
[17:02:37.259]                             version <- NULL
[17:02:37.259]                           }
[17:02:37.259]                           if (!has_future || version < "1.8.0") {
[17:02:37.259]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.259]                               "", base::R.version$version.string), 
[17:02:37.259]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.259]                                 base::R.version$platform, 8 * 
[17:02:37.259]                                   base::.Machine$sizeof.pointer), 
[17:02:37.259]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.259]                                 "release", "version")], collapse = " "), 
[17:02:37.259]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.259]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.259]                               info)
[17:02:37.259]                             info <- base::paste(info, collapse = "; ")
[17:02:37.259]                             if (!has_future) {
[17:02:37.259]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.259]                                 info)
[17:02:37.259]                             }
[17:02:37.259]                             else {
[17:02:37.259]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.259]                                 info, version)
[17:02:37.259]                             }
[17:02:37.259]                             base::stop(msg)
[17:02:37.259]                           }
[17:02:37.259]                         })
[17:02:37.259]                       }
[17:02:37.259]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.259]                       base::options(mc.cores = 1L)
[17:02:37.259]                     }
[17:02:37.259]                     base::local({
[17:02:37.259]                       for (pkg in "stats") {
[17:02:37.259]                         base::loadNamespace(pkg)
[17:02:37.259]                         base::library(pkg, character.only = TRUE)
[17:02:37.259]                       }
[17:02:37.259]                     })
[17:02:37.259]                   }
[17:02:37.259]                   ...future.strategy.old <- future::plan("list")
[17:02:37.259]                   options(future.plan = NULL)
[17:02:37.259]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.259]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.259]                 }
[17:02:37.259]                 ...future.workdir <- getwd()
[17:02:37.259]             }
[17:02:37.259]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.259]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.259]         }
[17:02:37.259]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.259]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.259]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.259]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.259]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.259]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.259]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.259]             base::names(...future.oldOptions))
[17:02:37.259]     }
[17:02:37.259]     if (FALSE) {
[17:02:37.259]     }
[17:02:37.259]     else {
[17:02:37.259]         if (TRUE) {
[17:02:37.259]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.259]                 open = "w")
[17:02:37.259]         }
[17:02:37.259]         else {
[17:02:37.259]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.259]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.259]         }
[17:02:37.259]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.259]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.259]             base::sink(type = "output", split = FALSE)
[17:02:37.259]             base::close(...future.stdout)
[17:02:37.259]         }, add = TRUE)
[17:02:37.259]     }
[17:02:37.259]     ...future.frame <- base::sys.nframe()
[17:02:37.259]     ...future.conditions <- base::list()
[17:02:37.259]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.259]     if (FALSE) {
[17:02:37.259]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.259]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.259]     }
[17:02:37.259]     ...future.result <- base::tryCatch({
[17:02:37.259]         base::withCallingHandlers({
[17:02:37.259]             ...future.value <- base::withVisible(base::local({
[17:02:37.259]                 ...future.makeSendCondition <- base::local({
[17:02:37.259]                   sendCondition <- NULL
[17:02:37.259]                   function(frame = 1L) {
[17:02:37.259]                     if (is.function(sendCondition)) 
[17:02:37.259]                       return(sendCondition)
[17:02:37.259]                     ns <- getNamespace("parallel")
[17:02:37.259]                     if (exists("sendData", mode = "function", 
[17:02:37.259]                       envir = ns)) {
[17:02:37.259]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.259]                         envir = ns)
[17:02:37.259]                       envir <- sys.frame(frame)
[17:02:37.259]                       master <- NULL
[17:02:37.259]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.259]                         !identical(envir, emptyenv())) {
[17:02:37.259]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.259]                           inherits = FALSE)) {
[17:02:37.259]                           master <- get("master", mode = "list", 
[17:02:37.259]                             envir = envir, inherits = FALSE)
[17:02:37.259]                           if (inherits(master, c("SOCKnode", 
[17:02:37.259]                             "SOCK0node"))) {
[17:02:37.259]                             sendCondition <<- function(cond) {
[17:02:37.259]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.259]                                 success = TRUE)
[17:02:37.259]                               parallel_sendData(master, data)
[17:02:37.259]                             }
[17:02:37.259]                             return(sendCondition)
[17:02:37.259]                           }
[17:02:37.259]                         }
[17:02:37.259]                         frame <- frame + 1L
[17:02:37.259]                         envir <- sys.frame(frame)
[17:02:37.259]                       }
[17:02:37.259]                     }
[17:02:37.259]                     sendCondition <<- function(cond) NULL
[17:02:37.259]                   }
[17:02:37.259]                 })
[17:02:37.259]                 withCallingHandlers({
[17:02:37.259]                   {
[17:02:37.259]                     lm(weight ~ group - 1)
[17:02:37.259]                   }
[17:02:37.259]                 }, immediateCondition = function(cond) {
[17:02:37.259]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.259]                   sendCondition(cond)
[17:02:37.259]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.259]                   {
[17:02:37.259]                     inherits <- base::inherits
[17:02:37.259]                     invokeRestart <- base::invokeRestart
[17:02:37.259]                     is.null <- base::is.null
[17:02:37.259]                     muffled <- FALSE
[17:02:37.259]                     if (inherits(cond, "message")) {
[17:02:37.259]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.259]                       if (muffled) 
[17:02:37.259]                         invokeRestart("muffleMessage")
[17:02:37.259]                     }
[17:02:37.259]                     else if (inherits(cond, "warning")) {
[17:02:37.259]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.259]                       if (muffled) 
[17:02:37.259]                         invokeRestart("muffleWarning")
[17:02:37.259]                     }
[17:02:37.259]                     else if (inherits(cond, "condition")) {
[17:02:37.259]                       if (!is.null(pattern)) {
[17:02:37.259]                         computeRestarts <- base::computeRestarts
[17:02:37.259]                         grepl <- base::grepl
[17:02:37.259]                         restarts <- computeRestarts(cond)
[17:02:37.259]                         for (restart in restarts) {
[17:02:37.259]                           name <- restart$name
[17:02:37.259]                           if (is.null(name)) 
[17:02:37.259]                             next
[17:02:37.259]                           if (!grepl(pattern, name)) 
[17:02:37.259]                             next
[17:02:37.259]                           invokeRestart(restart)
[17:02:37.259]                           muffled <- TRUE
[17:02:37.259]                           break
[17:02:37.259]                         }
[17:02:37.259]                       }
[17:02:37.259]                     }
[17:02:37.259]                     invisible(muffled)
[17:02:37.259]                   }
[17:02:37.259]                   muffleCondition(cond)
[17:02:37.259]                 })
[17:02:37.259]             }))
[17:02:37.259]             future::FutureResult(value = ...future.value$value, 
[17:02:37.259]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.259]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.259]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.259]                     ...future.globalenv.names))
[17:02:37.259]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.259]         }, condition = base::local({
[17:02:37.259]             c <- base::c
[17:02:37.259]             inherits <- base::inherits
[17:02:37.259]             invokeRestart <- base::invokeRestart
[17:02:37.259]             length <- base::length
[17:02:37.259]             list <- base::list
[17:02:37.259]             seq.int <- base::seq.int
[17:02:37.259]             signalCondition <- base::signalCondition
[17:02:37.259]             sys.calls <- base::sys.calls
[17:02:37.259]             `[[` <- base::`[[`
[17:02:37.259]             `+` <- base::`+`
[17:02:37.259]             `<<-` <- base::`<<-`
[17:02:37.259]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.259]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.259]                   3L)]
[17:02:37.259]             }
[17:02:37.259]             function(cond) {
[17:02:37.259]                 is_error <- inherits(cond, "error")
[17:02:37.259]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.259]                   NULL)
[17:02:37.259]                 if (is_error) {
[17:02:37.259]                   sessionInformation <- function() {
[17:02:37.259]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.259]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.259]                       search = base::search(), system = base::Sys.info())
[17:02:37.259]                   }
[17:02:37.259]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.259]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.259]                     cond$call), session = sessionInformation(), 
[17:02:37.259]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.259]                   signalCondition(cond)
[17:02:37.259]                 }
[17:02:37.259]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.259]                 "immediateCondition"))) {
[17:02:37.259]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.259]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.259]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.259]                   if (TRUE && !signal) {
[17:02:37.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.259]                     {
[17:02:37.259]                       inherits <- base::inherits
[17:02:37.259]                       invokeRestart <- base::invokeRestart
[17:02:37.259]                       is.null <- base::is.null
[17:02:37.259]                       muffled <- FALSE
[17:02:37.259]                       if (inherits(cond, "message")) {
[17:02:37.259]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.259]                         if (muffled) 
[17:02:37.259]                           invokeRestart("muffleMessage")
[17:02:37.259]                       }
[17:02:37.259]                       else if (inherits(cond, "warning")) {
[17:02:37.259]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.259]                         if (muffled) 
[17:02:37.259]                           invokeRestart("muffleWarning")
[17:02:37.259]                       }
[17:02:37.259]                       else if (inherits(cond, "condition")) {
[17:02:37.259]                         if (!is.null(pattern)) {
[17:02:37.259]                           computeRestarts <- base::computeRestarts
[17:02:37.259]                           grepl <- base::grepl
[17:02:37.259]                           restarts <- computeRestarts(cond)
[17:02:37.259]                           for (restart in restarts) {
[17:02:37.259]                             name <- restart$name
[17:02:37.259]                             if (is.null(name)) 
[17:02:37.259]                               next
[17:02:37.259]                             if (!grepl(pattern, name)) 
[17:02:37.259]                               next
[17:02:37.259]                             invokeRestart(restart)
[17:02:37.259]                             muffled <- TRUE
[17:02:37.259]                             break
[17:02:37.259]                           }
[17:02:37.259]                         }
[17:02:37.259]                       }
[17:02:37.259]                       invisible(muffled)
[17:02:37.259]                     }
[17:02:37.259]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.259]                   }
[17:02:37.259]                 }
[17:02:37.259]                 else {
[17:02:37.259]                   if (TRUE) {
[17:02:37.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.259]                     {
[17:02:37.259]                       inherits <- base::inherits
[17:02:37.259]                       invokeRestart <- base::invokeRestart
[17:02:37.259]                       is.null <- base::is.null
[17:02:37.259]                       muffled <- FALSE
[17:02:37.259]                       if (inherits(cond, "message")) {
[17:02:37.259]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.259]                         if (muffled) 
[17:02:37.259]                           invokeRestart("muffleMessage")
[17:02:37.259]                       }
[17:02:37.259]                       else if (inherits(cond, "warning")) {
[17:02:37.259]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.259]                         if (muffled) 
[17:02:37.259]                           invokeRestart("muffleWarning")
[17:02:37.259]                       }
[17:02:37.259]                       else if (inherits(cond, "condition")) {
[17:02:37.259]                         if (!is.null(pattern)) {
[17:02:37.259]                           computeRestarts <- base::computeRestarts
[17:02:37.259]                           grepl <- base::grepl
[17:02:37.259]                           restarts <- computeRestarts(cond)
[17:02:37.259]                           for (restart in restarts) {
[17:02:37.259]                             name <- restart$name
[17:02:37.259]                             if (is.null(name)) 
[17:02:37.259]                               next
[17:02:37.259]                             if (!grepl(pattern, name)) 
[17:02:37.259]                               next
[17:02:37.259]                             invokeRestart(restart)
[17:02:37.259]                             muffled <- TRUE
[17:02:37.259]                             break
[17:02:37.259]                           }
[17:02:37.259]                         }
[17:02:37.259]                       }
[17:02:37.259]                       invisible(muffled)
[17:02:37.259]                     }
[17:02:37.259]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.259]                   }
[17:02:37.259]                 }
[17:02:37.259]             }
[17:02:37.259]         }))
[17:02:37.259]     }, error = function(ex) {
[17:02:37.259]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.259]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.259]                 ...future.rng), started = ...future.startTime, 
[17:02:37.259]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.259]             version = "1.8"), class = "FutureResult")
[17:02:37.259]     }, finally = {
[17:02:37.259]         if (!identical(...future.workdir, getwd())) 
[17:02:37.259]             setwd(...future.workdir)
[17:02:37.259]         {
[17:02:37.259]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.259]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.259]             }
[17:02:37.259]             base::options(...future.oldOptions)
[17:02:37.259]             if (.Platform$OS.type == "windows") {
[17:02:37.259]                 old_names <- names(...future.oldEnvVars)
[17:02:37.259]                 envs <- base::Sys.getenv()
[17:02:37.259]                 names <- names(envs)
[17:02:37.259]                 common <- intersect(names, old_names)
[17:02:37.259]                 added <- setdiff(names, old_names)
[17:02:37.259]                 removed <- setdiff(old_names, names)
[17:02:37.259]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.259]                   envs[common]]
[17:02:37.259]                 NAMES <- toupper(changed)
[17:02:37.259]                 args <- list()
[17:02:37.259]                 for (kk in seq_along(NAMES)) {
[17:02:37.259]                   name <- changed[[kk]]
[17:02:37.259]                   NAME <- NAMES[[kk]]
[17:02:37.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.259]                     next
[17:02:37.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.259]                 }
[17:02:37.259]                 NAMES <- toupper(added)
[17:02:37.259]                 for (kk in seq_along(NAMES)) {
[17:02:37.259]                   name <- added[[kk]]
[17:02:37.259]                   NAME <- NAMES[[kk]]
[17:02:37.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.259]                     next
[17:02:37.259]                   args[[name]] <- ""
[17:02:37.259]                 }
[17:02:37.259]                 NAMES <- toupper(removed)
[17:02:37.259]                 for (kk in seq_along(NAMES)) {
[17:02:37.259]                   name <- removed[[kk]]
[17:02:37.259]                   NAME <- NAMES[[kk]]
[17:02:37.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.259]                     next
[17:02:37.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.259]                 }
[17:02:37.259]                 if (length(args) > 0) 
[17:02:37.259]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.259]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.259]             }
[17:02:37.259]             else {
[17:02:37.259]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.259]             }
[17:02:37.259]             {
[17:02:37.259]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.259]                   0L) {
[17:02:37.259]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.259]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.259]                   base::options(opts)
[17:02:37.259]                 }
[17:02:37.259]                 {
[17:02:37.259]                   {
[17:02:37.259]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.259]                     NULL
[17:02:37.259]                   }
[17:02:37.259]                   options(future.plan = NULL)
[17:02:37.259]                   if (is.na(NA_character_)) 
[17:02:37.259]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.259]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.259]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.259]                     .init = FALSE)
[17:02:37.259]                 }
[17:02:37.259]             }
[17:02:37.259]         }
[17:02:37.259]     })
[17:02:37.259]     if (TRUE) {
[17:02:37.259]         base::sink(type = "output", split = FALSE)
[17:02:37.259]         if (TRUE) {
[17:02:37.259]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.259]         }
[17:02:37.259]         else {
[17:02:37.259]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.259]         }
[17:02:37.259]         base::close(...future.stdout)
[17:02:37.259]         ...future.stdout <- NULL
[17:02:37.259]     }
[17:02:37.259]     ...future.result$conditions <- ...future.conditions
[17:02:37.259]     ...future.result$finished <- base::Sys.time()
[17:02:37.259]     ...future.result
[17:02:37.259] }
[17:02:37.261] Exporting 2 global objects (896 bytes) to cluster node #1 ...
[17:02:37.261] Exporting ‘weight’ (208 bytes) to cluster node #1 ...
[17:02:37.262] Exporting ‘weight’ (208 bytes) to cluster node #1 ... DONE
[17:02:37.262] Exporting ‘group’ (688 bytes) to cluster node #1 ...
[17:02:37.262] Exporting ‘group’ (688 bytes) to cluster node #1 ... DONE
[17:02:37.262] Exporting 2 global objects (896 bytes) to cluster node #1 ... DONE
[17:02:37.263] MultisessionFuture started
[17:02:37.263] - Launch lazy future ... done
[17:02:37.263] run() for ‘MultisessionFuture’ ... done
[17:02:37.264] result() for ClusterFuture ...
[17:02:37.264] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.264] - Validating connection of MultisessionFuture
[17:02:37.306] - received message: FutureResult
[17:02:37.306] - Received FutureResult
[17:02:37.306] - Erased future from FutureRegistry
[17:02:37.306] result() for ClusterFuture ...
[17:02:37.306] - result already collected: FutureResult
[17:02:37.307] result() for ClusterFuture ... done
[17:02:37.307] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.307] result() for ClusterFuture ... done
[17:02:37.307] result() for ClusterFuture ...
[17:02:37.307] - result already collected: FutureResult
[17:02:37.307] result() for ClusterFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

[17:02:37.309] getGlobalsAndPackages() ...
[17:02:37.309] Searching for globals...
[17:02:37.310] - globals found: [6] ‘{’, ‘lm’, ‘weight’, ‘-’, ‘group’, ‘~’
[17:02:37.310] Searching for globals ... DONE
[17:02:37.311] Resolving globals: FALSE
[17:02:37.311] The total size of the 2 globals is 896 bytes (896 bytes)
[17:02:37.311] The total size of the 2 globals exported for future expression (‘{; lm(weight ~ group - 1); }’) is 896 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘group’ (688 bytes of class ‘numeric’) and ‘weight’ (208 bytes of class ‘numeric’)
[17:02:37.312] - globals: [2] ‘weight’, ‘group’
[17:02:37.312] - packages: [1] ‘stats’
[17:02:37.312] getGlobalsAndPackages() ... DONE
[17:02:37.312] run() for ‘Future’ ...
[17:02:37.312] - state: ‘created’
[17:02:37.312] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.327] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.327] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.328]   - Field: ‘node’
[17:02:37.328]   - Field: ‘label’
[17:02:37.328]   - Field: ‘local’
[17:02:37.328]   - Field: ‘owner’
[17:02:37.328]   - Field: ‘envir’
[17:02:37.328]   - Field: ‘workers’
[17:02:37.328]   - Field: ‘packages’
[17:02:37.328]   - Field: ‘gc’
[17:02:37.328]   - Field: ‘conditions’
[17:02:37.328]   - Field: ‘persistent’
[17:02:37.329]   - Field: ‘expr’
[17:02:37.329]   - Field: ‘uuid’
[17:02:37.329]   - Field: ‘seed’
[17:02:37.329]   - Field: ‘version’
[17:02:37.329]   - Field: ‘result’
[17:02:37.329]   - Field: ‘asynchronous’
[17:02:37.329]   - Field: ‘calls’
[17:02:37.329]   - Field: ‘globals’
[17:02:37.329]   - Field: ‘stdout’
[17:02:37.329]   - Field: ‘earlySignal’
[17:02:37.329]   - Field: ‘lazy’
[17:02:37.329]   - Field: ‘state’
[17:02:37.330] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.330] - Launch lazy future ...
[17:02:37.330] Packages needed by the future expression (n = 1): ‘stats’
[17:02:37.330] Packages needed by future strategies (n = 0): <none>
[17:02:37.331] {
[17:02:37.331]     {
[17:02:37.331]         {
[17:02:37.331]             ...future.startTime <- base::Sys.time()
[17:02:37.331]             {
[17:02:37.331]                 {
[17:02:37.331]                   {
[17:02:37.331]                     {
[17:02:37.331]                       {
[17:02:37.331]                         base::local({
[17:02:37.331]                           has_future <- base::requireNamespace("future", 
[17:02:37.331]                             quietly = TRUE)
[17:02:37.331]                           if (has_future) {
[17:02:37.331]                             ns <- base::getNamespace("future")
[17:02:37.331]                             version <- ns[[".package"]][["version"]]
[17:02:37.331]                             if (is.null(version)) 
[17:02:37.331]                               version <- utils::packageVersion("future")
[17:02:37.331]                           }
[17:02:37.331]                           else {
[17:02:37.331]                             version <- NULL
[17:02:37.331]                           }
[17:02:37.331]                           if (!has_future || version < "1.8.0") {
[17:02:37.331]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.331]                               "", base::R.version$version.string), 
[17:02:37.331]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.331]                                 base::R.version$platform, 8 * 
[17:02:37.331]                                   base::.Machine$sizeof.pointer), 
[17:02:37.331]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.331]                                 "release", "version")], collapse = " "), 
[17:02:37.331]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.331]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.331]                               info)
[17:02:37.331]                             info <- base::paste(info, collapse = "; ")
[17:02:37.331]                             if (!has_future) {
[17:02:37.331]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.331]                                 info)
[17:02:37.331]                             }
[17:02:37.331]                             else {
[17:02:37.331]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.331]                                 info, version)
[17:02:37.331]                             }
[17:02:37.331]                             base::stop(msg)
[17:02:37.331]                           }
[17:02:37.331]                         })
[17:02:37.331]                       }
[17:02:37.331]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.331]                       base::options(mc.cores = 1L)
[17:02:37.331]                     }
[17:02:37.331]                     base::local({
[17:02:37.331]                       for (pkg in "stats") {
[17:02:37.331]                         base::loadNamespace(pkg)
[17:02:37.331]                         base::library(pkg, character.only = TRUE)
[17:02:37.331]                       }
[17:02:37.331]                     })
[17:02:37.331]                   }
[17:02:37.331]                   ...future.strategy.old <- future::plan("list")
[17:02:37.331]                   options(future.plan = NULL)
[17:02:37.331]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.331]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.331]                 }
[17:02:37.331]                 ...future.workdir <- getwd()
[17:02:37.331]             }
[17:02:37.331]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.331]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.331]         }
[17:02:37.331]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.331]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.331]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.331]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.331]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.331]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.331]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.331]             base::names(...future.oldOptions))
[17:02:37.331]     }
[17:02:37.331]     if (FALSE) {
[17:02:37.331]     }
[17:02:37.331]     else {
[17:02:37.331]         if (TRUE) {
[17:02:37.331]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.331]                 open = "w")
[17:02:37.331]         }
[17:02:37.331]         else {
[17:02:37.331]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.331]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.331]         }
[17:02:37.331]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.331]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.331]             base::sink(type = "output", split = FALSE)
[17:02:37.331]             base::close(...future.stdout)
[17:02:37.331]         }, add = TRUE)
[17:02:37.331]     }
[17:02:37.331]     ...future.frame <- base::sys.nframe()
[17:02:37.331]     ...future.conditions <- base::list()
[17:02:37.331]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.331]     if (FALSE) {
[17:02:37.331]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.331]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.331]     }
[17:02:37.331]     ...future.result <- base::tryCatch({
[17:02:37.331]         base::withCallingHandlers({
[17:02:37.331]             ...future.value <- base::withVisible(base::local({
[17:02:37.331]                 ...future.makeSendCondition <- base::local({
[17:02:37.331]                   sendCondition <- NULL
[17:02:37.331]                   function(frame = 1L) {
[17:02:37.331]                     if (is.function(sendCondition)) 
[17:02:37.331]                       return(sendCondition)
[17:02:37.331]                     ns <- getNamespace("parallel")
[17:02:37.331]                     if (exists("sendData", mode = "function", 
[17:02:37.331]                       envir = ns)) {
[17:02:37.331]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.331]                         envir = ns)
[17:02:37.331]                       envir <- sys.frame(frame)
[17:02:37.331]                       master <- NULL
[17:02:37.331]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.331]                         !identical(envir, emptyenv())) {
[17:02:37.331]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.331]                           inherits = FALSE)) {
[17:02:37.331]                           master <- get("master", mode = "list", 
[17:02:37.331]                             envir = envir, inherits = FALSE)
[17:02:37.331]                           if (inherits(master, c("SOCKnode", 
[17:02:37.331]                             "SOCK0node"))) {
[17:02:37.331]                             sendCondition <<- function(cond) {
[17:02:37.331]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.331]                                 success = TRUE)
[17:02:37.331]                               parallel_sendData(master, data)
[17:02:37.331]                             }
[17:02:37.331]                             return(sendCondition)
[17:02:37.331]                           }
[17:02:37.331]                         }
[17:02:37.331]                         frame <- frame + 1L
[17:02:37.331]                         envir <- sys.frame(frame)
[17:02:37.331]                       }
[17:02:37.331]                     }
[17:02:37.331]                     sendCondition <<- function(cond) NULL
[17:02:37.331]                   }
[17:02:37.331]                 })
[17:02:37.331]                 withCallingHandlers({
[17:02:37.331]                   {
[17:02:37.331]                     lm(weight ~ group - 1)
[17:02:37.331]                   }
[17:02:37.331]                 }, immediateCondition = function(cond) {
[17:02:37.331]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.331]                   sendCondition(cond)
[17:02:37.331]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.331]                   {
[17:02:37.331]                     inherits <- base::inherits
[17:02:37.331]                     invokeRestart <- base::invokeRestart
[17:02:37.331]                     is.null <- base::is.null
[17:02:37.331]                     muffled <- FALSE
[17:02:37.331]                     if (inherits(cond, "message")) {
[17:02:37.331]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.331]                       if (muffled) 
[17:02:37.331]                         invokeRestart("muffleMessage")
[17:02:37.331]                     }
[17:02:37.331]                     else if (inherits(cond, "warning")) {
[17:02:37.331]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.331]                       if (muffled) 
[17:02:37.331]                         invokeRestart("muffleWarning")
[17:02:37.331]                     }
[17:02:37.331]                     else if (inherits(cond, "condition")) {
[17:02:37.331]                       if (!is.null(pattern)) {
[17:02:37.331]                         computeRestarts <- base::computeRestarts
[17:02:37.331]                         grepl <- base::grepl
[17:02:37.331]                         restarts <- computeRestarts(cond)
[17:02:37.331]                         for (restart in restarts) {
[17:02:37.331]                           name <- restart$name
[17:02:37.331]                           if (is.null(name)) 
[17:02:37.331]                             next
[17:02:37.331]                           if (!grepl(pattern, name)) 
[17:02:37.331]                             next
[17:02:37.331]                           invokeRestart(restart)
[17:02:37.331]                           muffled <- TRUE
[17:02:37.331]                           break
[17:02:37.331]                         }
[17:02:37.331]                       }
[17:02:37.331]                     }
[17:02:37.331]                     invisible(muffled)
[17:02:37.331]                   }
[17:02:37.331]                   muffleCondition(cond)
[17:02:37.331]                 })
[17:02:37.331]             }))
[17:02:37.331]             future::FutureResult(value = ...future.value$value, 
[17:02:37.331]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.331]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.331]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.331]                     ...future.globalenv.names))
[17:02:37.331]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.331]         }, condition = base::local({
[17:02:37.331]             c <- base::c
[17:02:37.331]             inherits <- base::inherits
[17:02:37.331]             invokeRestart <- base::invokeRestart
[17:02:37.331]             length <- base::length
[17:02:37.331]             list <- base::list
[17:02:37.331]             seq.int <- base::seq.int
[17:02:37.331]             signalCondition <- base::signalCondition
[17:02:37.331]             sys.calls <- base::sys.calls
[17:02:37.331]             `[[` <- base::`[[`
[17:02:37.331]             `+` <- base::`+`
[17:02:37.331]             `<<-` <- base::`<<-`
[17:02:37.331]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.331]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.331]                   3L)]
[17:02:37.331]             }
[17:02:37.331]             function(cond) {
[17:02:37.331]                 is_error <- inherits(cond, "error")
[17:02:37.331]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.331]                   NULL)
[17:02:37.331]                 if (is_error) {
[17:02:37.331]                   sessionInformation <- function() {
[17:02:37.331]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.331]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.331]                       search = base::search(), system = base::Sys.info())
[17:02:37.331]                   }
[17:02:37.331]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.331]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.331]                     cond$call), session = sessionInformation(), 
[17:02:37.331]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.331]                   signalCondition(cond)
[17:02:37.331]                 }
[17:02:37.331]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.331]                 "immediateCondition"))) {
[17:02:37.331]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.331]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.331]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.331]                   if (TRUE && !signal) {
[17:02:37.331]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.331]                     {
[17:02:37.331]                       inherits <- base::inherits
[17:02:37.331]                       invokeRestart <- base::invokeRestart
[17:02:37.331]                       is.null <- base::is.null
[17:02:37.331]                       muffled <- FALSE
[17:02:37.331]                       if (inherits(cond, "message")) {
[17:02:37.331]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.331]                         if (muffled) 
[17:02:37.331]                           invokeRestart("muffleMessage")
[17:02:37.331]                       }
[17:02:37.331]                       else if (inherits(cond, "warning")) {
[17:02:37.331]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.331]                         if (muffled) 
[17:02:37.331]                           invokeRestart("muffleWarning")
[17:02:37.331]                       }
[17:02:37.331]                       else if (inherits(cond, "condition")) {
[17:02:37.331]                         if (!is.null(pattern)) {
[17:02:37.331]                           computeRestarts <- base::computeRestarts
[17:02:37.331]                           grepl <- base::grepl
[17:02:37.331]                           restarts <- computeRestarts(cond)
[17:02:37.331]                           for (restart in restarts) {
[17:02:37.331]                             name <- restart$name
[17:02:37.331]                             if (is.null(name)) 
[17:02:37.331]                               next
[17:02:37.331]                             if (!grepl(pattern, name)) 
[17:02:37.331]                               next
[17:02:37.331]                             invokeRestart(restart)
[17:02:37.331]                             muffled <- TRUE
[17:02:37.331]                             break
[17:02:37.331]                           }
[17:02:37.331]                         }
[17:02:37.331]                       }
[17:02:37.331]                       invisible(muffled)
[17:02:37.331]                     }
[17:02:37.331]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.331]                   }
[17:02:37.331]                 }
[17:02:37.331]                 else {
[17:02:37.331]                   if (TRUE) {
[17:02:37.331]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.331]                     {
[17:02:37.331]                       inherits <- base::inherits
[17:02:37.331]                       invokeRestart <- base::invokeRestart
[17:02:37.331]                       is.null <- base::is.null
[17:02:37.331]                       muffled <- FALSE
[17:02:37.331]                       if (inherits(cond, "message")) {
[17:02:37.331]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.331]                         if (muffled) 
[17:02:37.331]                           invokeRestart("muffleMessage")
[17:02:37.331]                       }
[17:02:37.331]                       else if (inherits(cond, "warning")) {
[17:02:37.331]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.331]                         if (muffled) 
[17:02:37.331]                           invokeRestart("muffleWarning")
[17:02:37.331]                       }
[17:02:37.331]                       else if (inherits(cond, "condition")) {
[17:02:37.331]                         if (!is.null(pattern)) {
[17:02:37.331]                           computeRestarts <- base::computeRestarts
[17:02:37.331]                           grepl <- base::grepl
[17:02:37.331]                           restarts <- computeRestarts(cond)
[17:02:37.331]                           for (restart in restarts) {
[17:02:37.331]                             name <- restart$name
[17:02:37.331]                             if (is.null(name)) 
[17:02:37.331]                               next
[17:02:37.331]                             if (!grepl(pattern, name)) 
[17:02:37.331]                               next
[17:02:37.331]                             invokeRestart(restart)
[17:02:37.331]                             muffled <- TRUE
[17:02:37.331]                             break
[17:02:37.331]                           }
[17:02:37.331]                         }
[17:02:37.331]                       }
[17:02:37.331]                       invisible(muffled)
[17:02:37.331]                     }
[17:02:37.331]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.331]                   }
[17:02:37.331]                 }
[17:02:37.331]             }
[17:02:37.331]         }))
[17:02:37.331]     }, error = function(ex) {
[17:02:37.331]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.331]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.331]                 ...future.rng), started = ...future.startTime, 
[17:02:37.331]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.331]             version = "1.8"), class = "FutureResult")
[17:02:37.331]     }, finally = {
[17:02:37.331]         if (!identical(...future.workdir, getwd())) 
[17:02:37.331]             setwd(...future.workdir)
[17:02:37.331]         {
[17:02:37.331]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.331]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.331]             }
[17:02:37.331]             base::options(...future.oldOptions)
[17:02:37.331]             if (.Platform$OS.type == "windows") {
[17:02:37.331]                 old_names <- names(...future.oldEnvVars)
[17:02:37.331]                 envs <- base::Sys.getenv()
[17:02:37.331]                 names <- names(envs)
[17:02:37.331]                 common <- intersect(names, old_names)
[17:02:37.331]                 added <- setdiff(names, old_names)
[17:02:37.331]                 removed <- setdiff(old_names, names)
[17:02:37.331]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.331]                   envs[common]]
[17:02:37.331]                 NAMES <- toupper(changed)
[17:02:37.331]                 args <- list()
[17:02:37.331]                 for (kk in seq_along(NAMES)) {
[17:02:37.331]                   name <- changed[[kk]]
[17:02:37.331]                   NAME <- NAMES[[kk]]
[17:02:37.331]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.331]                     next
[17:02:37.331]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.331]                 }
[17:02:37.331]                 NAMES <- toupper(added)
[17:02:37.331]                 for (kk in seq_along(NAMES)) {
[17:02:37.331]                   name <- added[[kk]]
[17:02:37.331]                   NAME <- NAMES[[kk]]
[17:02:37.331]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.331]                     next
[17:02:37.331]                   args[[name]] <- ""
[17:02:37.331]                 }
[17:02:37.331]                 NAMES <- toupper(removed)
[17:02:37.331]                 for (kk in seq_along(NAMES)) {
[17:02:37.331]                   name <- removed[[kk]]
[17:02:37.331]                   NAME <- NAMES[[kk]]
[17:02:37.331]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.331]                     next
[17:02:37.331]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.331]                 }
[17:02:37.331]                 if (length(args) > 0) 
[17:02:37.331]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.331]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.331]             }
[17:02:37.331]             else {
[17:02:37.331]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.331]             }
[17:02:37.331]             {
[17:02:37.331]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.331]                   0L) {
[17:02:37.331]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.331]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.331]                   base::options(opts)
[17:02:37.331]                 }
[17:02:37.331]                 {
[17:02:37.331]                   {
[17:02:37.331]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.331]                     NULL
[17:02:37.331]                   }
[17:02:37.331]                   options(future.plan = NULL)
[17:02:37.331]                   if (is.na(NA_character_)) 
[17:02:37.331]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.331]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.331]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.331]                     .init = FALSE)
[17:02:37.331]                 }
[17:02:37.331]             }
[17:02:37.331]         }
[17:02:37.331]     })
[17:02:37.331]     if (TRUE) {
[17:02:37.331]         base::sink(type = "output", split = FALSE)
[17:02:37.331]         if (TRUE) {
[17:02:37.331]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.331]         }
[17:02:37.331]         else {
[17:02:37.331]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.331]         }
[17:02:37.331]         base::close(...future.stdout)
[17:02:37.331]         ...future.stdout <- NULL
[17:02:37.331]     }
[17:02:37.331]     ...future.result$conditions <- ...future.conditions
[17:02:37.331]     ...future.result$finished <- base::Sys.time()
[17:02:37.331]     ...future.result
[17:02:37.331] }
[17:02:37.333] Exporting 2 global objects (896 bytes) to cluster node #1 ...
[17:02:37.333] Exporting ‘weight’ (208 bytes) to cluster node #1 ...
[17:02:37.334] Exporting ‘weight’ (208 bytes) to cluster node #1 ... DONE
[17:02:37.334] Exporting ‘group’ (688 bytes) to cluster node #1 ...
[17:02:37.334] Exporting ‘group’ (688 bytes) to cluster node #1 ... DONE
[17:02:37.334] Exporting 2 global objects (896 bytes) to cluster node #1 ... DONE
[17:02:37.335] MultisessionFuture started
[17:02:37.335] - Launch lazy future ... done
[17:02:37.335] run() for ‘MultisessionFuture’ ... done
[17:02:37.335] result() for ClusterFuture ...
[17:02:37.335] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.335] - Validating connection of MultisessionFuture
[17:02:37.378] - received message: FutureResult
[17:02:37.378] - Received FutureResult
[17:02:37.379] - Erased future from FutureRegistry
[17:02:37.379] result() for ClusterFuture ...
[17:02:37.379] - result already collected: FutureResult
[17:02:37.379] result() for ClusterFuture ... done
[17:02:37.379] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.379] result() for ClusterFuture ... done
[17:02:37.379] result() for ClusterFuture ...
[17:02:37.379] - result already collected: FutureResult
[17:02:37.379] result() for ClusterFuture ... done

Call:
lm(formula = weight ~ group - 1)

Coefficients:
groupCtl  groupTrt  
   5.032     4.661  

- Globals - one-side formulas, e.g. xtabs(~ x) ...
[17:02:37.381] getGlobalsAndPackages() ...
[17:02:37.381] Searching for globals...
[17:02:37.382] - globals found: [4] ‘{’, ‘xtabs’, ‘x’, ‘~’
[17:02:37.383] Searching for globals ... DONE
[17:02:37.383] Resolving globals: FALSE
[17:02:37.383] The total size of the 1 globals is 96 bytes (96 bytes)
[17:02:37.383] The total size of the 1 globals exported for future expression (‘{; xtabs(~x); }’) is 96 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (96 bytes of class ‘numeric’)
[17:02:37.384] - globals: [1] ‘x’
[17:02:37.384] - packages: [1] ‘stats’
[17:02:37.384] getGlobalsAndPackages() ... DONE
[17:02:37.384] run() for ‘Future’ ...
[17:02:37.384] - state: ‘created’
[17:02:37.384] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.398] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.398] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.398]   - Field: ‘node’
[17:02:37.399]   - Field: ‘label’
[17:02:37.399]   - Field: ‘local’
[17:02:37.399]   - Field: ‘owner’
[17:02:37.399]   - Field: ‘envir’
[17:02:37.399]   - Field: ‘workers’
[17:02:37.399]   - Field: ‘packages’
[17:02:37.399]   - Field: ‘gc’
[17:02:37.399]   - Field: ‘conditions’
[17:02:37.399]   - Field: ‘persistent’
[17:02:37.399]   - Field: ‘expr’
[17:02:37.399]   - Field: ‘uuid’
[17:02:37.400]   - Field: ‘seed’
[17:02:37.400]   - Field: ‘version’
[17:02:37.400]   - Field: ‘result’
[17:02:37.400]   - Field: ‘asynchronous’
[17:02:37.400]   - Field: ‘calls’
[17:02:37.400]   - Field: ‘globals’
[17:02:37.400]   - Field: ‘stdout’
[17:02:37.400]   - Field: ‘earlySignal’
[17:02:37.400]   - Field: ‘lazy’
[17:02:37.400]   - Field: ‘state’
[17:02:37.400] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.401] - Launch lazy future ...
[17:02:37.401] Packages needed by the future expression (n = 1): ‘stats’
[17:02:37.401] Packages needed by future strategies (n = 0): <none>
[17:02:37.401] {
[17:02:37.401]     {
[17:02:37.401]         {
[17:02:37.401]             ...future.startTime <- base::Sys.time()
[17:02:37.401]             {
[17:02:37.401]                 {
[17:02:37.401]                   {
[17:02:37.401]                     {
[17:02:37.401]                       {
[17:02:37.401]                         base::local({
[17:02:37.401]                           has_future <- base::requireNamespace("future", 
[17:02:37.401]                             quietly = TRUE)
[17:02:37.401]                           if (has_future) {
[17:02:37.401]                             ns <- base::getNamespace("future")
[17:02:37.401]                             version <- ns[[".package"]][["version"]]
[17:02:37.401]                             if (is.null(version)) 
[17:02:37.401]                               version <- utils::packageVersion("future")
[17:02:37.401]                           }
[17:02:37.401]                           else {
[17:02:37.401]                             version <- NULL
[17:02:37.401]                           }
[17:02:37.401]                           if (!has_future || version < "1.8.0") {
[17:02:37.401]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.401]                               "", base::R.version$version.string), 
[17:02:37.401]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.401]                                 base::R.version$platform, 8 * 
[17:02:37.401]                                   base::.Machine$sizeof.pointer), 
[17:02:37.401]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.401]                                 "release", "version")], collapse = " "), 
[17:02:37.401]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.401]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.401]                               info)
[17:02:37.401]                             info <- base::paste(info, collapse = "; ")
[17:02:37.401]                             if (!has_future) {
[17:02:37.401]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.401]                                 info)
[17:02:37.401]                             }
[17:02:37.401]                             else {
[17:02:37.401]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.401]                                 info, version)
[17:02:37.401]                             }
[17:02:37.401]                             base::stop(msg)
[17:02:37.401]                           }
[17:02:37.401]                         })
[17:02:37.401]                       }
[17:02:37.401]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.401]                       base::options(mc.cores = 1L)
[17:02:37.401]                     }
[17:02:37.401]                     base::local({
[17:02:37.401]                       for (pkg in "stats") {
[17:02:37.401]                         base::loadNamespace(pkg)
[17:02:37.401]                         base::library(pkg, character.only = TRUE)
[17:02:37.401]                       }
[17:02:37.401]                     })
[17:02:37.401]                   }
[17:02:37.401]                   ...future.strategy.old <- future::plan("list")
[17:02:37.401]                   options(future.plan = NULL)
[17:02:37.401]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.401]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.401]                 }
[17:02:37.401]                 ...future.workdir <- getwd()
[17:02:37.401]             }
[17:02:37.401]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.401]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.401]         }
[17:02:37.401]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.401]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.401]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.401]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.401]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.401]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.401]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.401]             base::names(...future.oldOptions))
[17:02:37.401]     }
[17:02:37.401]     if (FALSE) {
[17:02:37.401]     }
[17:02:37.401]     else {
[17:02:37.401]         if (TRUE) {
[17:02:37.401]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.401]                 open = "w")
[17:02:37.401]         }
[17:02:37.401]         else {
[17:02:37.401]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.401]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.401]         }
[17:02:37.401]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.401]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.401]             base::sink(type = "output", split = FALSE)
[17:02:37.401]             base::close(...future.stdout)
[17:02:37.401]         }, add = TRUE)
[17:02:37.401]     }
[17:02:37.401]     ...future.frame <- base::sys.nframe()
[17:02:37.401]     ...future.conditions <- base::list()
[17:02:37.401]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.401]     if (FALSE) {
[17:02:37.401]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.401]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.401]     }
[17:02:37.401]     ...future.result <- base::tryCatch({
[17:02:37.401]         base::withCallingHandlers({
[17:02:37.401]             ...future.value <- base::withVisible(base::local({
[17:02:37.401]                 ...future.makeSendCondition <- base::local({
[17:02:37.401]                   sendCondition <- NULL
[17:02:37.401]                   function(frame = 1L) {
[17:02:37.401]                     if (is.function(sendCondition)) 
[17:02:37.401]                       return(sendCondition)
[17:02:37.401]                     ns <- getNamespace("parallel")
[17:02:37.401]                     if (exists("sendData", mode = "function", 
[17:02:37.401]                       envir = ns)) {
[17:02:37.401]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.401]                         envir = ns)
[17:02:37.401]                       envir <- sys.frame(frame)
[17:02:37.401]                       master <- NULL
[17:02:37.401]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.401]                         !identical(envir, emptyenv())) {
[17:02:37.401]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.401]                           inherits = FALSE)) {
[17:02:37.401]                           master <- get("master", mode = "list", 
[17:02:37.401]                             envir = envir, inherits = FALSE)
[17:02:37.401]                           if (inherits(master, c("SOCKnode", 
[17:02:37.401]                             "SOCK0node"))) {
[17:02:37.401]                             sendCondition <<- function(cond) {
[17:02:37.401]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.401]                                 success = TRUE)
[17:02:37.401]                               parallel_sendData(master, data)
[17:02:37.401]                             }
[17:02:37.401]                             return(sendCondition)
[17:02:37.401]                           }
[17:02:37.401]                         }
[17:02:37.401]                         frame <- frame + 1L
[17:02:37.401]                         envir <- sys.frame(frame)
[17:02:37.401]                       }
[17:02:37.401]                     }
[17:02:37.401]                     sendCondition <<- function(cond) NULL
[17:02:37.401]                   }
[17:02:37.401]                 })
[17:02:37.401]                 withCallingHandlers({
[17:02:37.401]                   {
[17:02:37.401]                     xtabs(~x)
[17:02:37.401]                   }
[17:02:37.401]                 }, immediateCondition = function(cond) {
[17:02:37.401]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.401]                   sendCondition(cond)
[17:02:37.401]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.401]                   {
[17:02:37.401]                     inherits <- base::inherits
[17:02:37.401]                     invokeRestart <- base::invokeRestart
[17:02:37.401]                     is.null <- base::is.null
[17:02:37.401]                     muffled <- FALSE
[17:02:37.401]                     if (inherits(cond, "message")) {
[17:02:37.401]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.401]                       if (muffled) 
[17:02:37.401]                         invokeRestart("muffleMessage")
[17:02:37.401]                     }
[17:02:37.401]                     else if (inherits(cond, "warning")) {
[17:02:37.401]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.401]                       if (muffled) 
[17:02:37.401]                         invokeRestart("muffleWarning")
[17:02:37.401]                     }
[17:02:37.401]                     else if (inherits(cond, "condition")) {
[17:02:37.401]                       if (!is.null(pattern)) {
[17:02:37.401]                         computeRestarts <- base::computeRestarts
[17:02:37.401]                         grepl <- base::grepl
[17:02:37.401]                         restarts <- computeRestarts(cond)
[17:02:37.401]                         for (restart in restarts) {
[17:02:37.401]                           name <- restart$name
[17:02:37.401]                           if (is.null(name)) 
[17:02:37.401]                             next
[17:02:37.401]                           if (!grepl(pattern, name)) 
[17:02:37.401]                             next
[17:02:37.401]                           invokeRestart(restart)
[17:02:37.401]                           muffled <- TRUE
[17:02:37.401]                           break
[17:02:37.401]                         }
[17:02:37.401]                       }
[17:02:37.401]                     }
[17:02:37.401]                     invisible(muffled)
[17:02:37.401]                   }
[17:02:37.401]                   muffleCondition(cond)
[17:02:37.401]                 })
[17:02:37.401]             }))
[17:02:37.401]             future::FutureResult(value = ...future.value$value, 
[17:02:37.401]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.401]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.401]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.401]                     ...future.globalenv.names))
[17:02:37.401]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.401]         }, condition = base::local({
[17:02:37.401]             c <- base::c
[17:02:37.401]             inherits <- base::inherits
[17:02:37.401]             invokeRestart <- base::invokeRestart
[17:02:37.401]             length <- base::length
[17:02:37.401]             list <- base::list
[17:02:37.401]             seq.int <- base::seq.int
[17:02:37.401]             signalCondition <- base::signalCondition
[17:02:37.401]             sys.calls <- base::sys.calls
[17:02:37.401]             `[[` <- base::`[[`
[17:02:37.401]             `+` <- base::`+`
[17:02:37.401]             `<<-` <- base::`<<-`
[17:02:37.401]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.401]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.401]                   3L)]
[17:02:37.401]             }
[17:02:37.401]             function(cond) {
[17:02:37.401]                 is_error <- inherits(cond, "error")
[17:02:37.401]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.401]                   NULL)
[17:02:37.401]                 if (is_error) {
[17:02:37.401]                   sessionInformation <- function() {
[17:02:37.401]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.401]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.401]                       search = base::search(), system = base::Sys.info())
[17:02:37.401]                   }
[17:02:37.401]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.401]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.401]                     cond$call), session = sessionInformation(), 
[17:02:37.401]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.401]                   signalCondition(cond)
[17:02:37.401]                 }
[17:02:37.401]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.401]                 "immediateCondition"))) {
[17:02:37.401]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.401]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.401]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.401]                   if (TRUE && !signal) {
[17:02:37.401]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.401]                     {
[17:02:37.401]                       inherits <- base::inherits
[17:02:37.401]                       invokeRestart <- base::invokeRestart
[17:02:37.401]                       is.null <- base::is.null
[17:02:37.401]                       muffled <- FALSE
[17:02:37.401]                       if (inherits(cond, "message")) {
[17:02:37.401]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.401]                         if (muffled) 
[17:02:37.401]                           invokeRestart("muffleMessage")
[17:02:37.401]                       }
[17:02:37.401]                       else if (inherits(cond, "warning")) {
[17:02:37.401]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.401]                         if (muffled) 
[17:02:37.401]                           invokeRestart("muffleWarning")
[17:02:37.401]                       }
[17:02:37.401]                       else if (inherits(cond, "condition")) {
[17:02:37.401]                         if (!is.null(pattern)) {
[17:02:37.401]                           computeRestarts <- base::computeRestarts
[17:02:37.401]                           grepl <- base::grepl
[17:02:37.401]                           restarts <- computeRestarts(cond)
[17:02:37.401]                           for (restart in restarts) {
[17:02:37.401]                             name <- restart$name
[17:02:37.401]                             if (is.null(name)) 
[17:02:37.401]                               next
[17:02:37.401]                             if (!grepl(pattern, name)) 
[17:02:37.401]                               next
[17:02:37.401]                             invokeRestart(restart)
[17:02:37.401]                             muffled <- TRUE
[17:02:37.401]                             break
[17:02:37.401]                           }
[17:02:37.401]                         }
[17:02:37.401]                       }
[17:02:37.401]                       invisible(muffled)
[17:02:37.401]                     }
[17:02:37.401]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.401]                   }
[17:02:37.401]                 }
[17:02:37.401]                 else {
[17:02:37.401]                   if (TRUE) {
[17:02:37.401]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.401]                     {
[17:02:37.401]                       inherits <- base::inherits
[17:02:37.401]                       invokeRestart <- base::invokeRestart
[17:02:37.401]                       is.null <- base::is.null
[17:02:37.401]                       muffled <- FALSE
[17:02:37.401]                       if (inherits(cond, "message")) {
[17:02:37.401]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.401]                         if (muffled) 
[17:02:37.401]                           invokeRestart("muffleMessage")
[17:02:37.401]                       }
[17:02:37.401]                       else if (inherits(cond, "warning")) {
[17:02:37.401]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.401]                         if (muffled) 
[17:02:37.401]                           invokeRestart("muffleWarning")
[17:02:37.401]                       }
[17:02:37.401]                       else if (inherits(cond, "condition")) {
[17:02:37.401]                         if (!is.null(pattern)) {
[17:02:37.401]                           computeRestarts <- base::computeRestarts
[17:02:37.401]                           grepl <- base::grepl
[17:02:37.401]                           restarts <- computeRestarts(cond)
[17:02:37.401]                           for (restart in restarts) {
[17:02:37.401]                             name <- restart$name
[17:02:37.401]                             if (is.null(name)) 
[17:02:37.401]                               next
[17:02:37.401]                             if (!grepl(pattern, name)) 
[17:02:37.401]                               next
[17:02:37.401]                             invokeRestart(restart)
[17:02:37.401]                             muffled <- TRUE
[17:02:37.401]                             break
[17:02:37.401]                           }
[17:02:37.401]                         }
[17:02:37.401]                       }
[17:02:37.401]                       invisible(muffled)
[17:02:37.401]                     }
[17:02:37.401]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.401]                   }
[17:02:37.401]                 }
[17:02:37.401]             }
[17:02:37.401]         }))
[17:02:37.401]     }, error = function(ex) {
[17:02:37.401]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.401]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.401]                 ...future.rng), started = ...future.startTime, 
[17:02:37.401]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.401]             version = "1.8"), class = "FutureResult")
[17:02:37.401]     }, finally = {
[17:02:37.401]         if (!identical(...future.workdir, getwd())) 
[17:02:37.401]             setwd(...future.workdir)
[17:02:37.401]         {
[17:02:37.401]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.401]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.401]             }
[17:02:37.401]             base::options(...future.oldOptions)
[17:02:37.401]             if (.Platform$OS.type == "windows") {
[17:02:37.401]                 old_names <- names(...future.oldEnvVars)
[17:02:37.401]                 envs <- base::Sys.getenv()
[17:02:37.401]                 names <- names(envs)
[17:02:37.401]                 common <- intersect(names, old_names)
[17:02:37.401]                 added <- setdiff(names, old_names)
[17:02:37.401]                 removed <- setdiff(old_names, names)
[17:02:37.401]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.401]                   envs[common]]
[17:02:37.401]                 NAMES <- toupper(changed)
[17:02:37.401]                 args <- list()
[17:02:37.401]                 for (kk in seq_along(NAMES)) {
[17:02:37.401]                   name <- changed[[kk]]
[17:02:37.401]                   NAME <- NAMES[[kk]]
[17:02:37.401]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.401]                     next
[17:02:37.401]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.401]                 }
[17:02:37.401]                 NAMES <- toupper(added)
[17:02:37.401]                 for (kk in seq_along(NAMES)) {
[17:02:37.401]                   name <- added[[kk]]
[17:02:37.401]                   NAME <- NAMES[[kk]]
[17:02:37.401]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.401]                     next
[17:02:37.401]                   args[[name]] <- ""
[17:02:37.401]                 }
[17:02:37.401]                 NAMES <- toupper(removed)
[17:02:37.401]                 for (kk in seq_along(NAMES)) {
[17:02:37.401]                   name <- removed[[kk]]
[17:02:37.401]                   NAME <- NAMES[[kk]]
[17:02:37.401]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.401]                     next
[17:02:37.401]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.401]                 }
[17:02:37.401]                 if (length(args) > 0) 
[17:02:37.401]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.401]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.401]             }
[17:02:37.401]             else {
[17:02:37.401]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.401]             }
[17:02:37.401]             {
[17:02:37.401]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.401]                   0L) {
[17:02:37.401]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.401]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.401]                   base::options(opts)
[17:02:37.401]                 }
[17:02:37.401]                 {
[17:02:37.401]                   {
[17:02:37.401]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.401]                     NULL
[17:02:37.401]                   }
[17:02:37.401]                   options(future.plan = NULL)
[17:02:37.401]                   if (is.na(NA_character_)) 
[17:02:37.401]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.401]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.401]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.401]                     .init = FALSE)
[17:02:37.401]                 }
[17:02:37.401]             }
[17:02:37.401]         }
[17:02:37.401]     })
[17:02:37.401]     if (TRUE) {
[17:02:37.401]         base::sink(type = "output", split = FALSE)
[17:02:37.401]         if (TRUE) {
[17:02:37.401]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.401]         }
[17:02:37.401]         else {
[17:02:37.401]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.401]         }
[17:02:37.401]         base::close(...future.stdout)
[17:02:37.401]         ...future.stdout <- NULL
[17:02:37.401]     }
[17:02:37.401]     ...future.result$conditions <- ...future.conditions
[17:02:37.401]     ...future.result$finished <- base::Sys.time()
[17:02:37.401]     ...future.result
[17:02:37.401] }
[17:02:37.404] Exporting 1 global objects (96 bytes) to cluster node #1 ...
[17:02:37.404] Exporting ‘x’ (96 bytes) to cluster node #1 ...
[17:02:37.405] Exporting ‘x’ (96 bytes) to cluster node #1 ... DONE
[17:02:37.405] Exporting 1 global objects (96 bytes) to cluster node #1 ... DONE
[17:02:37.405] MultisessionFuture started
[17:02:37.406] - Launch lazy future ... done
[17:02:37.406] run() for ‘MultisessionFuture’ ... done
[17:02:37.406] result() for ClusterFuture ...
[17:02:37.406] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.406] - Validating connection of MultisessionFuture
[17:02:37.450] - received message: FutureResult
[17:02:37.451] - Received FutureResult
[17:02:37.451] - Erased future from FutureRegistry
[17:02:37.451] result() for ClusterFuture ...
[17:02:37.451] - result already collected: FutureResult
[17:02:37.451] result() for ClusterFuture ... done
[17:02:37.451] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.451] result() for ClusterFuture ... done
[17:02:37.451] result() for ClusterFuture ...
[17:02:37.451] - result already collected: FutureResult
[17:02:37.451] result() for ClusterFuture ... done
x
1 2 
2 3 
[17:02:37.452] getGlobalsAndPackages() ...
[17:02:37.452] Searching for globals...
[17:02:37.454] - globals found: [4] ‘{’, ‘xtabs’, ‘x’, ‘~’
[17:02:37.454] Searching for globals ... DONE
[17:02:37.454] Resolving globals: FALSE
[17:02:37.454] The total size of the 1 globals is 96 bytes (96 bytes)
[17:02:37.455] The total size of the 1 globals exported for future expression (‘{; xtabs(~x); }’) is 96 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (96 bytes of class ‘numeric’)
[17:02:37.455] - globals: [1] ‘x’
[17:02:37.455] - packages: [1] ‘stats’
[17:02:37.455] getGlobalsAndPackages() ... DONE
[17:02:37.455] run() for ‘Future’ ...
[17:02:37.455] - state: ‘created’
[17:02:37.456] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.470] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.470] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.470]   - Field: ‘node’
[17:02:37.470]   - Field: ‘label’
[17:02:37.470]   - Field: ‘local’
[17:02:37.470]   - Field: ‘owner’
[17:02:37.470]   - Field: ‘envir’
[17:02:37.471]   - Field: ‘workers’
[17:02:37.471]   - Field: ‘packages’
[17:02:37.471]   - Field: ‘gc’
[17:02:37.471]   - Field: ‘conditions’
[17:02:37.471]   - Field: ‘persistent’
[17:02:37.471]   - Field: ‘expr’
[17:02:37.471]   - Field: ‘uuid’
[17:02:37.471]   - Field: ‘seed’
[17:02:37.471]   - Field: ‘version’
[17:02:37.471]   - Field: ‘result’
[17:02:37.472]   - Field: ‘asynchronous’
[17:02:37.472]   - Field: ‘calls’
[17:02:37.472]   - Field: ‘globals’
[17:02:37.472]   - Field: ‘stdout’
[17:02:37.472]   - Field: ‘earlySignal’
[17:02:37.472]   - Field: ‘lazy’
[17:02:37.472]   - Field: ‘state’
[17:02:37.472] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.472] - Launch lazy future ...
[17:02:37.473] Packages needed by the future expression (n = 1): ‘stats’
[17:02:37.473] Packages needed by future strategies (n = 0): <none>
[17:02:37.473] {
[17:02:37.473]     {
[17:02:37.473]         {
[17:02:37.473]             ...future.startTime <- base::Sys.time()
[17:02:37.473]             {
[17:02:37.473]                 {
[17:02:37.473]                   {
[17:02:37.473]                     {
[17:02:37.473]                       {
[17:02:37.473]                         base::local({
[17:02:37.473]                           has_future <- base::requireNamespace("future", 
[17:02:37.473]                             quietly = TRUE)
[17:02:37.473]                           if (has_future) {
[17:02:37.473]                             ns <- base::getNamespace("future")
[17:02:37.473]                             version <- ns[[".package"]][["version"]]
[17:02:37.473]                             if (is.null(version)) 
[17:02:37.473]                               version <- utils::packageVersion("future")
[17:02:37.473]                           }
[17:02:37.473]                           else {
[17:02:37.473]                             version <- NULL
[17:02:37.473]                           }
[17:02:37.473]                           if (!has_future || version < "1.8.0") {
[17:02:37.473]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.473]                               "", base::R.version$version.string), 
[17:02:37.473]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.473]                                 base::R.version$platform, 8 * 
[17:02:37.473]                                   base::.Machine$sizeof.pointer), 
[17:02:37.473]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.473]                                 "release", "version")], collapse = " "), 
[17:02:37.473]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.473]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.473]                               info)
[17:02:37.473]                             info <- base::paste(info, collapse = "; ")
[17:02:37.473]                             if (!has_future) {
[17:02:37.473]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.473]                                 info)
[17:02:37.473]                             }
[17:02:37.473]                             else {
[17:02:37.473]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.473]                                 info, version)
[17:02:37.473]                             }
[17:02:37.473]                             base::stop(msg)
[17:02:37.473]                           }
[17:02:37.473]                         })
[17:02:37.473]                       }
[17:02:37.473]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.473]                       base::options(mc.cores = 1L)
[17:02:37.473]                     }
[17:02:37.473]                     base::local({
[17:02:37.473]                       for (pkg in "stats") {
[17:02:37.473]                         base::loadNamespace(pkg)
[17:02:37.473]                         base::library(pkg, character.only = TRUE)
[17:02:37.473]                       }
[17:02:37.473]                     })
[17:02:37.473]                   }
[17:02:37.473]                   ...future.strategy.old <- future::plan("list")
[17:02:37.473]                   options(future.plan = NULL)
[17:02:37.473]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.473]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.473]                 }
[17:02:37.473]                 ...future.workdir <- getwd()
[17:02:37.473]             }
[17:02:37.473]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.473]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.473]         }
[17:02:37.473]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.473]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.473]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.473]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.473]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.473]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.473]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.473]             base::names(...future.oldOptions))
[17:02:37.473]     }
[17:02:37.473]     if (FALSE) {
[17:02:37.473]     }
[17:02:37.473]     else {
[17:02:37.473]         if (TRUE) {
[17:02:37.473]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.473]                 open = "w")
[17:02:37.473]         }
[17:02:37.473]         else {
[17:02:37.473]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.473]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.473]         }
[17:02:37.473]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.473]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.473]             base::sink(type = "output", split = FALSE)
[17:02:37.473]             base::close(...future.stdout)
[17:02:37.473]         }, add = TRUE)
[17:02:37.473]     }
[17:02:37.473]     ...future.frame <- base::sys.nframe()
[17:02:37.473]     ...future.conditions <- base::list()
[17:02:37.473]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.473]     if (FALSE) {
[17:02:37.473]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.473]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.473]     }
[17:02:37.473]     ...future.result <- base::tryCatch({
[17:02:37.473]         base::withCallingHandlers({
[17:02:37.473]             ...future.value <- base::withVisible(base::local({
[17:02:37.473]                 ...future.makeSendCondition <- base::local({
[17:02:37.473]                   sendCondition <- NULL
[17:02:37.473]                   function(frame = 1L) {
[17:02:37.473]                     if (is.function(sendCondition)) 
[17:02:37.473]                       return(sendCondition)
[17:02:37.473]                     ns <- getNamespace("parallel")
[17:02:37.473]                     if (exists("sendData", mode = "function", 
[17:02:37.473]                       envir = ns)) {
[17:02:37.473]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.473]                         envir = ns)
[17:02:37.473]                       envir <- sys.frame(frame)
[17:02:37.473]                       master <- NULL
[17:02:37.473]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.473]                         !identical(envir, emptyenv())) {
[17:02:37.473]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.473]                           inherits = FALSE)) {
[17:02:37.473]                           master <- get("master", mode = "list", 
[17:02:37.473]                             envir = envir, inherits = FALSE)
[17:02:37.473]                           if (inherits(master, c("SOCKnode", 
[17:02:37.473]                             "SOCK0node"))) {
[17:02:37.473]                             sendCondition <<- function(cond) {
[17:02:37.473]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.473]                                 success = TRUE)
[17:02:37.473]                               parallel_sendData(master, data)
[17:02:37.473]                             }
[17:02:37.473]                             return(sendCondition)
[17:02:37.473]                           }
[17:02:37.473]                         }
[17:02:37.473]                         frame <- frame + 1L
[17:02:37.473]                         envir <- sys.frame(frame)
[17:02:37.473]                       }
[17:02:37.473]                     }
[17:02:37.473]                     sendCondition <<- function(cond) NULL
[17:02:37.473]                   }
[17:02:37.473]                 })
[17:02:37.473]                 withCallingHandlers({
[17:02:37.473]                   {
[17:02:37.473]                     xtabs(~x)
[17:02:37.473]                   }
[17:02:37.473]                 }, immediateCondition = function(cond) {
[17:02:37.473]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.473]                   sendCondition(cond)
[17:02:37.473]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.473]                   {
[17:02:37.473]                     inherits <- base::inherits
[17:02:37.473]                     invokeRestart <- base::invokeRestart
[17:02:37.473]                     is.null <- base::is.null
[17:02:37.473]                     muffled <- FALSE
[17:02:37.473]                     if (inherits(cond, "message")) {
[17:02:37.473]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.473]                       if (muffled) 
[17:02:37.473]                         invokeRestart("muffleMessage")
[17:02:37.473]                     }
[17:02:37.473]                     else if (inherits(cond, "warning")) {
[17:02:37.473]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.473]                       if (muffled) 
[17:02:37.473]                         invokeRestart("muffleWarning")
[17:02:37.473]                     }
[17:02:37.473]                     else if (inherits(cond, "condition")) {
[17:02:37.473]                       if (!is.null(pattern)) {
[17:02:37.473]                         computeRestarts <- base::computeRestarts
[17:02:37.473]                         grepl <- base::grepl
[17:02:37.473]                         restarts <- computeRestarts(cond)
[17:02:37.473]                         for (restart in restarts) {
[17:02:37.473]                           name <- restart$name
[17:02:37.473]                           if (is.null(name)) 
[17:02:37.473]                             next
[17:02:37.473]                           if (!grepl(pattern, name)) 
[17:02:37.473]                             next
[17:02:37.473]                           invokeRestart(restart)
[17:02:37.473]                           muffled <- TRUE
[17:02:37.473]                           break
[17:02:37.473]                         }
[17:02:37.473]                       }
[17:02:37.473]                     }
[17:02:37.473]                     invisible(muffled)
[17:02:37.473]                   }
[17:02:37.473]                   muffleCondition(cond)
[17:02:37.473]                 })
[17:02:37.473]             }))
[17:02:37.473]             future::FutureResult(value = ...future.value$value, 
[17:02:37.473]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.473]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.473]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.473]                     ...future.globalenv.names))
[17:02:37.473]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.473]         }, condition = base::local({
[17:02:37.473]             c <- base::c
[17:02:37.473]             inherits <- base::inherits
[17:02:37.473]             invokeRestart <- base::invokeRestart
[17:02:37.473]             length <- base::length
[17:02:37.473]             list <- base::list
[17:02:37.473]             seq.int <- base::seq.int
[17:02:37.473]             signalCondition <- base::signalCondition
[17:02:37.473]             sys.calls <- base::sys.calls
[17:02:37.473]             `[[` <- base::`[[`
[17:02:37.473]             `+` <- base::`+`
[17:02:37.473]             `<<-` <- base::`<<-`
[17:02:37.473]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.473]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.473]                   3L)]
[17:02:37.473]             }
[17:02:37.473]             function(cond) {
[17:02:37.473]                 is_error <- inherits(cond, "error")
[17:02:37.473]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.473]                   NULL)
[17:02:37.473]                 if (is_error) {
[17:02:37.473]                   sessionInformation <- function() {
[17:02:37.473]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.473]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.473]                       search = base::search(), system = base::Sys.info())
[17:02:37.473]                   }
[17:02:37.473]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.473]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.473]                     cond$call), session = sessionInformation(), 
[17:02:37.473]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.473]                   signalCondition(cond)
[17:02:37.473]                 }
[17:02:37.473]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.473]                 "immediateCondition"))) {
[17:02:37.473]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.473]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.473]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.473]                   if (TRUE && !signal) {
[17:02:37.473]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.473]                     {
[17:02:37.473]                       inherits <- base::inherits
[17:02:37.473]                       invokeRestart <- base::invokeRestart
[17:02:37.473]                       is.null <- base::is.null
[17:02:37.473]                       muffled <- FALSE
[17:02:37.473]                       if (inherits(cond, "message")) {
[17:02:37.473]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.473]                         if (muffled) 
[17:02:37.473]                           invokeRestart("muffleMessage")
[17:02:37.473]                       }
[17:02:37.473]                       else if (inherits(cond, "warning")) {
[17:02:37.473]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.473]                         if (muffled) 
[17:02:37.473]                           invokeRestart("muffleWarning")
[17:02:37.473]                       }
[17:02:37.473]                       else if (inherits(cond, "condition")) {
[17:02:37.473]                         if (!is.null(pattern)) {
[17:02:37.473]                           computeRestarts <- base::computeRestarts
[17:02:37.473]                           grepl <- base::grepl
[17:02:37.473]                           restarts <- computeRestarts(cond)
[17:02:37.473]                           for (restart in restarts) {
[17:02:37.473]                             name <- restart$name
[17:02:37.473]                             if (is.null(name)) 
[17:02:37.473]                               next
[17:02:37.473]                             if (!grepl(pattern, name)) 
[17:02:37.473]                               next
[17:02:37.473]                             invokeRestart(restart)
[17:02:37.473]                             muffled <- TRUE
[17:02:37.473]                             break
[17:02:37.473]                           }
[17:02:37.473]                         }
[17:02:37.473]                       }
[17:02:37.473]                       invisible(muffled)
[17:02:37.473]                     }
[17:02:37.473]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.473]                   }
[17:02:37.473]                 }
[17:02:37.473]                 else {
[17:02:37.473]                   if (TRUE) {
[17:02:37.473]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.473]                     {
[17:02:37.473]                       inherits <- base::inherits
[17:02:37.473]                       invokeRestart <- base::invokeRestart
[17:02:37.473]                       is.null <- base::is.null
[17:02:37.473]                       muffled <- FALSE
[17:02:37.473]                       if (inherits(cond, "message")) {
[17:02:37.473]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.473]                         if (muffled) 
[17:02:37.473]                           invokeRestart("muffleMessage")
[17:02:37.473]                       }
[17:02:37.473]                       else if (inherits(cond, "warning")) {
[17:02:37.473]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.473]                         if (muffled) 
[17:02:37.473]                           invokeRestart("muffleWarning")
[17:02:37.473]                       }
[17:02:37.473]                       else if (inherits(cond, "condition")) {
[17:02:37.473]                         if (!is.null(pattern)) {
[17:02:37.473]                           computeRestarts <- base::computeRestarts
[17:02:37.473]                           grepl <- base::grepl
[17:02:37.473]                           restarts <- computeRestarts(cond)
[17:02:37.473]                           for (restart in restarts) {
[17:02:37.473]                             name <- restart$name
[17:02:37.473]                             if (is.null(name)) 
[17:02:37.473]                               next
[17:02:37.473]                             if (!grepl(pattern, name)) 
[17:02:37.473]                               next
[17:02:37.473]                             invokeRestart(restart)
[17:02:37.473]                             muffled <- TRUE
[17:02:37.473]                             break
[17:02:37.473]                           }
[17:02:37.473]                         }
[17:02:37.473]                       }
[17:02:37.473]                       invisible(muffled)
[17:02:37.473]                     }
[17:02:37.473]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.473]                   }
[17:02:37.473]                 }
[17:02:37.473]             }
[17:02:37.473]         }))
[17:02:37.473]     }, error = function(ex) {
[17:02:37.473]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.473]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.473]                 ...future.rng), started = ...future.startTime, 
[17:02:37.473]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.473]             version = "1.8"), class = "FutureResult")
[17:02:37.473]     }, finally = {
[17:02:37.473]         if (!identical(...future.workdir, getwd())) 
[17:02:37.473]             setwd(...future.workdir)
[17:02:37.473]         {
[17:02:37.473]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.473]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.473]             }
[17:02:37.473]             base::options(...future.oldOptions)
[17:02:37.473]             if (.Platform$OS.type == "windows") {
[17:02:37.473]                 old_names <- names(...future.oldEnvVars)
[17:02:37.473]                 envs <- base::Sys.getenv()
[17:02:37.473]                 names <- names(envs)
[17:02:37.473]                 common <- intersect(names, old_names)
[17:02:37.473]                 added <- setdiff(names, old_names)
[17:02:37.473]                 removed <- setdiff(old_names, names)
[17:02:37.473]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.473]                   envs[common]]
[17:02:37.473]                 NAMES <- toupper(changed)
[17:02:37.473]                 args <- list()
[17:02:37.473]                 for (kk in seq_along(NAMES)) {
[17:02:37.473]                   name <- changed[[kk]]
[17:02:37.473]                   NAME <- NAMES[[kk]]
[17:02:37.473]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.473]                     next
[17:02:37.473]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.473]                 }
[17:02:37.473]                 NAMES <- toupper(added)
[17:02:37.473]                 for (kk in seq_along(NAMES)) {
[17:02:37.473]                   name <- added[[kk]]
[17:02:37.473]                   NAME <- NAMES[[kk]]
[17:02:37.473]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.473]                     next
[17:02:37.473]                   args[[name]] <- ""
[17:02:37.473]                 }
[17:02:37.473]                 NAMES <- toupper(removed)
[17:02:37.473]                 for (kk in seq_along(NAMES)) {
[17:02:37.473]                   name <- removed[[kk]]
[17:02:37.473]                   NAME <- NAMES[[kk]]
[17:02:37.473]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.473]                     next
[17:02:37.473]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.473]                 }
[17:02:37.473]                 if (length(args) > 0) 
[17:02:37.473]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.473]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.473]             }
[17:02:37.473]             else {
[17:02:37.473]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.473]             }
[17:02:37.473]             {
[17:02:37.473]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.473]                   0L) {
[17:02:37.473]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.473]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.473]                   base::options(opts)
[17:02:37.473]                 }
[17:02:37.473]                 {
[17:02:37.473]                   {
[17:02:37.473]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.473]                     NULL
[17:02:37.473]                   }
[17:02:37.473]                   options(future.plan = NULL)
[17:02:37.473]                   if (is.na(NA_character_)) 
[17:02:37.473]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.473]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.473]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.473]                     .init = FALSE)
[17:02:37.473]                 }
[17:02:37.473]             }
[17:02:37.473]         }
[17:02:37.473]     })
[17:02:37.473]     if (TRUE) {
[17:02:37.473]         base::sink(type = "output", split = FALSE)
[17:02:37.473]         if (TRUE) {
[17:02:37.473]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.473]         }
[17:02:37.473]         else {
[17:02:37.473]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.473]         }
[17:02:37.473]         base::close(...future.stdout)
[17:02:37.473]         ...future.stdout <- NULL
[17:02:37.473]     }
[17:02:37.473]     ...future.result$conditions <- ...future.conditions
[17:02:37.473]     ...future.result$finished <- base::Sys.time()
[17:02:37.473]     ...future.result
[17:02:37.473] }
[17:02:37.476] Exporting 1 global objects (96 bytes) to cluster node #1 ...
[17:02:37.476] Exporting ‘x’ (96 bytes) to cluster node #1 ...
[17:02:37.476] Exporting ‘x’ (96 bytes) to cluster node #1 ... DONE
[17:02:37.477] Exporting 1 global objects (96 bytes) to cluster node #1 ... DONE
[17:02:37.477] MultisessionFuture started
[17:02:37.477] - Launch lazy future ... done
[17:02:37.477] run() for ‘MultisessionFuture’ ... done
[17:02:37.478] result() for ClusterFuture ...
[17:02:37.478] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.478] - Validating connection of MultisessionFuture
[17:02:37.522] - received message: FutureResult
[17:02:37.523] - Received FutureResult
[17:02:37.523] - Erased future from FutureRegistry
[17:02:37.523] result() for ClusterFuture ...
[17:02:37.523] - result already collected: FutureResult
[17:02:37.523] result() for ClusterFuture ... done
[17:02:37.524] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.524] result() for ClusterFuture ... done
[17:02:37.524] result() for ClusterFuture ...
[17:02:37.524] - result already collected: FutureResult
[17:02:37.524] result() for ClusterFuture ... done
x
1 2 
2 3 
- Globals - lm(<formula>, data = cars) ...
- Globals - lm(<formula #1 (‘a’)>, data = cars) ...

Call:
lm(formula = dist ~ . - 1, data = cars)

Coefficients:
speed  
2.909  

[17:02:37.526] getGlobalsAndPackages() ...
[17:02:37.526] Searching for globals...
[17:02:37.529] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘-’, ‘.’, ‘~’, ‘cars’
[17:02:37.529] Searching for globals ... DONE
[17:02:37.529] Resolving globals: FALSE
[17:02:37.530] 
[17:02:37.530] - packages: [2] ‘stats’, ‘datasets’
[17:02:37.530] getGlobalsAndPackages() ... DONE
[17:02:37.530] run() for ‘Future’ ...
[17:02:37.531] - state: ‘created’
[17:02:37.531] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.548] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.548] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.548]   - Field: ‘node’
[17:02:37.549]   - Field: ‘label’
[17:02:37.549]   - Field: ‘local’
[17:02:37.549]   - Field: ‘owner’
[17:02:37.549]   - Field: ‘envir’
[17:02:37.549]   - Field: ‘workers’
[17:02:37.549]   - Field: ‘packages’
[17:02:37.549]   - Field: ‘gc’
[17:02:37.549]   - Field: ‘conditions’
[17:02:37.549]   - Field: ‘persistent’
[17:02:37.550]   - Field: ‘expr’
[17:02:37.550]   - Field: ‘uuid’
[17:02:37.550]   - Field: ‘seed’
[17:02:37.550]   - Field: ‘version’
[17:02:37.550]   - Field: ‘result’
[17:02:37.550]   - Field: ‘asynchronous’
[17:02:37.550]   - Field: ‘calls’
[17:02:37.550]   - Field: ‘globals’
[17:02:37.550]   - Field: ‘stdout’
[17:02:37.550]   - Field: ‘earlySignal’
[17:02:37.551]   - Field: ‘lazy’
[17:02:37.551]   - Field: ‘state’
[17:02:37.551] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.551] - Launch lazy future ...
[17:02:37.551] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:37.551] Packages needed by future strategies (n = 0): <none>
[17:02:37.552] {
[17:02:37.552]     {
[17:02:37.552]         {
[17:02:37.552]             ...future.startTime <- base::Sys.time()
[17:02:37.552]             {
[17:02:37.552]                 {
[17:02:37.552]                   {
[17:02:37.552]                     {
[17:02:37.552]                       {
[17:02:37.552]                         base::local({
[17:02:37.552]                           has_future <- base::requireNamespace("future", 
[17:02:37.552]                             quietly = TRUE)
[17:02:37.552]                           if (has_future) {
[17:02:37.552]                             ns <- base::getNamespace("future")
[17:02:37.552]                             version <- ns[[".package"]][["version"]]
[17:02:37.552]                             if (is.null(version)) 
[17:02:37.552]                               version <- utils::packageVersion("future")
[17:02:37.552]                           }
[17:02:37.552]                           else {
[17:02:37.552]                             version <- NULL
[17:02:37.552]                           }
[17:02:37.552]                           if (!has_future || version < "1.8.0") {
[17:02:37.552]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.552]                               "", base::R.version$version.string), 
[17:02:37.552]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.552]                                 base::R.version$platform, 8 * 
[17:02:37.552]                                   base::.Machine$sizeof.pointer), 
[17:02:37.552]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.552]                                 "release", "version")], collapse = " "), 
[17:02:37.552]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.552]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.552]                               info)
[17:02:37.552]                             info <- base::paste(info, collapse = "; ")
[17:02:37.552]                             if (!has_future) {
[17:02:37.552]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.552]                                 info)
[17:02:37.552]                             }
[17:02:37.552]                             else {
[17:02:37.552]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.552]                                 info, version)
[17:02:37.552]                             }
[17:02:37.552]                             base::stop(msg)
[17:02:37.552]                           }
[17:02:37.552]                         })
[17:02:37.552]                       }
[17:02:37.552]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.552]                       base::options(mc.cores = 1L)
[17:02:37.552]                     }
[17:02:37.552]                     base::local({
[17:02:37.552]                       for (pkg in c("stats", "datasets")) {
[17:02:37.552]                         base::loadNamespace(pkg)
[17:02:37.552]                         base::library(pkg, character.only = TRUE)
[17:02:37.552]                       }
[17:02:37.552]                     })
[17:02:37.552]                   }
[17:02:37.552]                   ...future.strategy.old <- future::plan("list")
[17:02:37.552]                   options(future.plan = NULL)
[17:02:37.552]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.552]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.552]                 }
[17:02:37.552]                 ...future.workdir <- getwd()
[17:02:37.552]             }
[17:02:37.552]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.552]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.552]         }
[17:02:37.552]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.552]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.552]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.552]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.552]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.552]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.552]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.552]             base::names(...future.oldOptions))
[17:02:37.552]     }
[17:02:37.552]     if (FALSE) {
[17:02:37.552]     }
[17:02:37.552]     else {
[17:02:37.552]         if (TRUE) {
[17:02:37.552]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.552]                 open = "w")
[17:02:37.552]         }
[17:02:37.552]         else {
[17:02:37.552]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.552]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.552]         }
[17:02:37.552]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.552]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.552]             base::sink(type = "output", split = FALSE)
[17:02:37.552]             base::close(...future.stdout)
[17:02:37.552]         }, add = TRUE)
[17:02:37.552]     }
[17:02:37.552]     ...future.frame <- base::sys.nframe()
[17:02:37.552]     ...future.conditions <- base::list()
[17:02:37.552]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.552]     if (FALSE) {
[17:02:37.552]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.552]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.552]     }
[17:02:37.552]     ...future.result <- base::tryCatch({
[17:02:37.552]         base::withCallingHandlers({
[17:02:37.552]             ...future.value <- base::withVisible(base::local({
[17:02:37.552]                 ...future.makeSendCondition <- base::local({
[17:02:37.552]                   sendCondition <- NULL
[17:02:37.552]                   function(frame = 1L) {
[17:02:37.552]                     if (is.function(sendCondition)) 
[17:02:37.552]                       return(sendCondition)
[17:02:37.552]                     ns <- getNamespace("parallel")
[17:02:37.552]                     if (exists("sendData", mode = "function", 
[17:02:37.552]                       envir = ns)) {
[17:02:37.552]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.552]                         envir = ns)
[17:02:37.552]                       envir <- sys.frame(frame)
[17:02:37.552]                       master <- NULL
[17:02:37.552]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.552]                         !identical(envir, emptyenv())) {
[17:02:37.552]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.552]                           inherits = FALSE)) {
[17:02:37.552]                           master <- get("master", mode = "list", 
[17:02:37.552]                             envir = envir, inherits = FALSE)
[17:02:37.552]                           if (inherits(master, c("SOCKnode", 
[17:02:37.552]                             "SOCK0node"))) {
[17:02:37.552]                             sendCondition <<- function(cond) {
[17:02:37.552]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.552]                                 success = TRUE)
[17:02:37.552]                               parallel_sendData(master, data)
[17:02:37.552]                             }
[17:02:37.552]                             return(sendCondition)
[17:02:37.552]                           }
[17:02:37.552]                         }
[17:02:37.552]                         frame <- frame + 1L
[17:02:37.552]                         envir <- sys.frame(frame)
[17:02:37.552]                       }
[17:02:37.552]                     }
[17:02:37.552]                     sendCondition <<- function(cond) NULL
[17:02:37.552]                   }
[17:02:37.552]                 })
[17:02:37.552]                 withCallingHandlers({
[17:02:37.552]                   {
[17:02:37.552]                     lm(dist ~ . - 1, data = cars)
[17:02:37.552]                   }
[17:02:37.552]                 }, immediateCondition = function(cond) {
[17:02:37.552]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.552]                   sendCondition(cond)
[17:02:37.552]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.552]                   {
[17:02:37.552]                     inherits <- base::inherits
[17:02:37.552]                     invokeRestart <- base::invokeRestart
[17:02:37.552]                     is.null <- base::is.null
[17:02:37.552]                     muffled <- FALSE
[17:02:37.552]                     if (inherits(cond, "message")) {
[17:02:37.552]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.552]                       if (muffled) 
[17:02:37.552]                         invokeRestart("muffleMessage")
[17:02:37.552]                     }
[17:02:37.552]                     else if (inherits(cond, "warning")) {
[17:02:37.552]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.552]                       if (muffled) 
[17:02:37.552]                         invokeRestart("muffleWarning")
[17:02:37.552]                     }
[17:02:37.552]                     else if (inherits(cond, "condition")) {
[17:02:37.552]                       if (!is.null(pattern)) {
[17:02:37.552]                         computeRestarts <- base::computeRestarts
[17:02:37.552]                         grepl <- base::grepl
[17:02:37.552]                         restarts <- computeRestarts(cond)
[17:02:37.552]                         for (restart in restarts) {
[17:02:37.552]                           name <- restart$name
[17:02:37.552]                           if (is.null(name)) 
[17:02:37.552]                             next
[17:02:37.552]                           if (!grepl(pattern, name)) 
[17:02:37.552]                             next
[17:02:37.552]                           invokeRestart(restart)
[17:02:37.552]                           muffled <- TRUE
[17:02:37.552]                           break
[17:02:37.552]                         }
[17:02:37.552]                       }
[17:02:37.552]                     }
[17:02:37.552]                     invisible(muffled)
[17:02:37.552]                   }
[17:02:37.552]                   muffleCondition(cond)
[17:02:37.552]                 })
[17:02:37.552]             }))
[17:02:37.552]             future::FutureResult(value = ...future.value$value, 
[17:02:37.552]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.552]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.552]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.552]                     ...future.globalenv.names))
[17:02:37.552]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.552]         }, condition = base::local({
[17:02:37.552]             c <- base::c
[17:02:37.552]             inherits <- base::inherits
[17:02:37.552]             invokeRestart <- base::invokeRestart
[17:02:37.552]             length <- base::length
[17:02:37.552]             list <- base::list
[17:02:37.552]             seq.int <- base::seq.int
[17:02:37.552]             signalCondition <- base::signalCondition
[17:02:37.552]             sys.calls <- base::sys.calls
[17:02:37.552]             `[[` <- base::`[[`
[17:02:37.552]             `+` <- base::`+`
[17:02:37.552]             `<<-` <- base::`<<-`
[17:02:37.552]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.552]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.552]                   3L)]
[17:02:37.552]             }
[17:02:37.552]             function(cond) {
[17:02:37.552]                 is_error <- inherits(cond, "error")
[17:02:37.552]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.552]                   NULL)
[17:02:37.552]                 if (is_error) {
[17:02:37.552]                   sessionInformation <- function() {
[17:02:37.552]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.552]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.552]                       search = base::search(), system = base::Sys.info())
[17:02:37.552]                   }
[17:02:37.552]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.552]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.552]                     cond$call), session = sessionInformation(), 
[17:02:37.552]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.552]                   signalCondition(cond)
[17:02:37.552]                 }
[17:02:37.552]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.552]                 "immediateCondition"))) {
[17:02:37.552]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.552]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.552]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.552]                   if (TRUE && !signal) {
[17:02:37.552]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.552]                     {
[17:02:37.552]                       inherits <- base::inherits
[17:02:37.552]                       invokeRestart <- base::invokeRestart
[17:02:37.552]                       is.null <- base::is.null
[17:02:37.552]                       muffled <- FALSE
[17:02:37.552]                       if (inherits(cond, "message")) {
[17:02:37.552]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.552]                         if (muffled) 
[17:02:37.552]                           invokeRestart("muffleMessage")
[17:02:37.552]                       }
[17:02:37.552]                       else if (inherits(cond, "warning")) {
[17:02:37.552]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.552]                         if (muffled) 
[17:02:37.552]                           invokeRestart("muffleWarning")
[17:02:37.552]                       }
[17:02:37.552]                       else if (inherits(cond, "condition")) {
[17:02:37.552]                         if (!is.null(pattern)) {
[17:02:37.552]                           computeRestarts <- base::computeRestarts
[17:02:37.552]                           grepl <- base::grepl
[17:02:37.552]                           restarts <- computeRestarts(cond)
[17:02:37.552]                           for (restart in restarts) {
[17:02:37.552]                             name <- restart$name
[17:02:37.552]                             if (is.null(name)) 
[17:02:37.552]                               next
[17:02:37.552]                             if (!grepl(pattern, name)) 
[17:02:37.552]                               next
[17:02:37.552]                             invokeRestart(restart)
[17:02:37.552]                             muffled <- TRUE
[17:02:37.552]                             break
[17:02:37.552]                           }
[17:02:37.552]                         }
[17:02:37.552]                       }
[17:02:37.552]                       invisible(muffled)
[17:02:37.552]                     }
[17:02:37.552]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.552]                   }
[17:02:37.552]                 }
[17:02:37.552]                 else {
[17:02:37.552]                   if (TRUE) {
[17:02:37.552]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.552]                     {
[17:02:37.552]                       inherits <- base::inherits
[17:02:37.552]                       invokeRestart <- base::invokeRestart
[17:02:37.552]                       is.null <- base::is.null
[17:02:37.552]                       muffled <- FALSE
[17:02:37.552]                       if (inherits(cond, "message")) {
[17:02:37.552]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.552]                         if (muffled) 
[17:02:37.552]                           invokeRestart("muffleMessage")
[17:02:37.552]                       }
[17:02:37.552]                       else if (inherits(cond, "warning")) {
[17:02:37.552]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.552]                         if (muffled) 
[17:02:37.552]                           invokeRestart("muffleWarning")
[17:02:37.552]                       }
[17:02:37.552]                       else if (inherits(cond, "condition")) {
[17:02:37.552]                         if (!is.null(pattern)) {
[17:02:37.552]                           computeRestarts <- base::computeRestarts
[17:02:37.552]                           grepl <- base::grepl
[17:02:37.552]                           restarts <- computeRestarts(cond)
[17:02:37.552]                           for (restart in restarts) {
[17:02:37.552]                             name <- restart$name
[17:02:37.552]                             if (is.null(name)) 
[17:02:37.552]                               next
[17:02:37.552]                             if (!grepl(pattern, name)) 
[17:02:37.552]                               next
[17:02:37.552]                             invokeRestart(restart)
[17:02:37.552]                             muffled <- TRUE
[17:02:37.552]                             break
[17:02:37.552]                           }
[17:02:37.552]                         }
[17:02:37.552]                       }
[17:02:37.552]                       invisible(muffled)
[17:02:37.552]                     }
[17:02:37.552]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.552]                   }
[17:02:37.552]                 }
[17:02:37.552]             }
[17:02:37.552]         }))
[17:02:37.552]     }, error = function(ex) {
[17:02:37.552]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.552]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.552]                 ...future.rng), started = ...future.startTime, 
[17:02:37.552]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.552]             version = "1.8"), class = "FutureResult")
[17:02:37.552]     }, finally = {
[17:02:37.552]         if (!identical(...future.workdir, getwd())) 
[17:02:37.552]             setwd(...future.workdir)
[17:02:37.552]         {
[17:02:37.552]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.552]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.552]             }
[17:02:37.552]             base::options(...future.oldOptions)
[17:02:37.552]             if (.Platform$OS.type == "windows") {
[17:02:37.552]                 old_names <- names(...future.oldEnvVars)
[17:02:37.552]                 envs <- base::Sys.getenv()
[17:02:37.552]                 names <- names(envs)
[17:02:37.552]                 common <- intersect(names, old_names)
[17:02:37.552]                 added <- setdiff(names, old_names)
[17:02:37.552]                 removed <- setdiff(old_names, names)
[17:02:37.552]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.552]                   envs[common]]
[17:02:37.552]                 NAMES <- toupper(changed)
[17:02:37.552]                 args <- list()
[17:02:37.552]                 for (kk in seq_along(NAMES)) {
[17:02:37.552]                   name <- changed[[kk]]
[17:02:37.552]                   NAME <- NAMES[[kk]]
[17:02:37.552]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.552]                     next
[17:02:37.552]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.552]                 }
[17:02:37.552]                 NAMES <- toupper(added)
[17:02:37.552]                 for (kk in seq_along(NAMES)) {
[17:02:37.552]                   name <- added[[kk]]
[17:02:37.552]                   NAME <- NAMES[[kk]]
[17:02:37.552]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.552]                     next
[17:02:37.552]                   args[[name]] <- ""
[17:02:37.552]                 }
[17:02:37.552]                 NAMES <- toupper(removed)
[17:02:37.552]                 for (kk in seq_along(NAMES)) {
[17:02:37.552]                   name <- removed[[kk]]
[17:02:37.552]                   NAME <- NAMES[[kk]]
[17:02:37.552]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.552]                     next
[17:02:37.552]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.552]                 }
[17:02:37.552]                 if (length(args) > 0) 
[17:02:37.552]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.552]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.552]             }
[17:02:37.552]             else {
[17:02:37.552]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.552]             }
[17:02:37.552]             {
[17:02:37.552]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.552]                   0L) {
[17:02:37.552]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.552]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.552]                   base::options(opts)
[17:02:37.552]                 }
[17:02:37.552]                 {
[17:02:37.552]                   {
[17:02:37.552]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.552]                     NULL
[17:02:37.552]                   }
[17:02:37.552]                   options(future.plan = NULL)
[17:02:37.552]                   if (is.na(NA_character_)) 
[17:02:37.552]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.552]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.552]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.552]                     .init = FALSE)
[17:02:37.552]                 }
[17:02:37.552]             }
[17:02:37.552]         }
[17:02:37.552]     })
[17:02:37.552]     if (TRUE) {
[17:02:37.552]         base::sink(type = "output", split = FALSE)
[17:02:37.552]         if (TRUE) {
[17:02:37.552]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.552]         }
[17:02:37.552]         else {
[17:02:37.552]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.552]         }
[17:02:37.552]         base::close(...future.stdout)
[17:02:37.552]         ...future.stdout <- NULL
[17:02:37.552]     }
[17:02:37.552]     ...future.result$conditions <- ...future.conditions
[17:02:37.552]     ...future.result$finished <- base::Sys.time()
[17:02:37.552]     ...future.result
[17:02:37.552] }
[17:02:37.555] MultisessionFuture started
[17:02:37.556] - Launch lazy future ... done
[17:02:37.556] run() for ‘MultisessionFuture’ ... done
[17:02:37.556] result() for ClusterFuture ...
[17:02:37.556] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.556] - Validating connection of MultisessionFuture
[17:02:37.599] - received message: FutureResult
[17:02:37.599] - Received FutureResult
[17:02:37.599] - Erased future from FutureRegistry
[17:02:37.599] result() for ClusterFuture ...
[17:02:37.599] - result already collected: FutureResult
[17:02:37.599] result() for ClusterFuture ... done
[17:02:37.599] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.600] result() for ClusterFuture ... done
[17:02:37.600] result() for ClusterFuture ...
[17:02:37.600] - result already collected: FutureResult
[17:02:37.600] result() for ClusterFuture ... done

Call:
lm(formula = dist ~ . - 1, data = cars)

Coefficients:
speed  
2.909  

- Globals - lm(<formula #2 (‘b’)>, data = cars) ...

Call:
lm(formula = dist ~ . + 0, data = cars)

Coefficients:
speed  
2.909  

[17:02:37.605] getGlobalsAndPackages() ...
[17:02:37.605] Searching for globals...
[17:02:37.606] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘.’, ‘~’, ‘cars’
[17:02:37.607] Searching for globals ... DONE
[17:02:37.607] Resolving globals: FALSE
[17:02:37.607] 
[17:02:37.607] - packages: [2] ‘stats’, ‘datasets’
[17:02:37.607] getGlobalsAndPackages() ... DONE
[17:02:37.608] run() for ‘Future’ ...
[17:02:37.608] - state: ‘created’
[17:02:37.608] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.622] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.622] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.622]   - Field: ‘node’
[17:02:37.623]   - Field: ‘label’
[17:02:37.623]   - Field: ‘local’
[17:02:37.623]   - Field: ‘owner’
[17:02:37.623]   - Field: ‘envir’
[17:02:37.623]   - Field: ‘workers’
[17:02:37.623]   - Field: ‘packages’
[17:02:37.623]   - Field: ‘gc’
[17:02:37.623]   - Field: ‘conditions’
[17:02:37.623]   - Field: ‘persistent’
[17:02:37.623]   - Field: ‘expr’
[17:02:37.623]   - Field: ‘uuid’
[17:02:37.624]   - Field: ‘seed’
[17:02:37.624]   - Field: ‘version’
[17:02:37.624]   - Field: ‘result’
[17:02:37.624]   - Field: ‘asynchronous’
[17:02:37.624]   - Field: ‘calls’
[17:02:37.624]   - Field: ‘globals’
[17:02:37.624]   - Field: ‘stdout’
[17:02:37.624]   - Field: ‘earlySignal’
[17:02:37.624]   - Field: ‘lazy’
[17:02:37.624]   - Field: ‘state’
[17:02:37.624] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.625] - Launch lazy future ...
[17:02:37.625] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:37.625] Packages needed by future strategies (n = 0): <none>
[17:02:37.626] {
[17:02:37.626]     {
[17:02:37.626]         {
[17:02:37.626]             ...future.startTime <- base::Sys.time()
[17:02:37.626]             {
[17:02:37.626]                 {
[17:02:37.626]                   {
[17:02:37.626]                     {
[17:02:37.626]                       {
[17:02:37.626]                         base::local({
[17:02:37.626]                           has_future <- base::requireNamespace("future", 
[17:02:37.626]                             quietly = TRUE)
[17:02:37.626]                           if (has_future) {
[17:02:37.626]                             ns <- base::getNamespace("future")
[17:02:37.626]                             version <- ns[[".package"]][["version"]]
[17:02:37.626]                             if (is.null(version)) 
[17:02:37.626]                               version <- utils::packageVersion("future")
[17:02:37.626]                           }
[17:02:37.626]                           else {
[17:02:37.626]                             version <- NULL
[17:02:37.626]                           }
[17:02:37.626]                           if (!has_future || version < "1.8.0") {
[17:02:37.626]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.626]                               "", base::R.version$version.string), 
[17:02:37.626]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.626]                                 base::R.version$platform, 8 * 
[17:02:37.626]                                   base::.Machine$sizeof.pointer), 
[17:02:37.626]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.626]                                 "release", "version")], collapse = " "), 
[17:02:37.626]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.626]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.626]                               info)
[17:02:37.626]                             info <- base::paste(info, collapse = "; ")
[17:02:37.626]                             if (!has_future) {
[17:02:37.626]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.626]                                 info)
[17:02:37.626]                             }
[17:02:37.626]                             else {
[17:02:37.626]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.626]                                 info, version)
[17:02:37.626]                             }
[17:02:37.626]                             base::stop(msg)
[17:02:37.626]                           }
[17:02:37.626]                         })
[17:02:37.626]                       }
[17:02:37.626]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.626]                       base::options(mc.cores = 1L)
[17:02:37.626]                     }
[17:02:37.626]                     base::local({
[17:02:37.626]                       for (pkg in c("stats", "datasets")) {
[17:02:37.626]                         base::loadNamespace(pkg)
[17:02:37.626]                         base::library(pkg, character.only = TRUE)
[17:02:37.626]                       }
[17:02:37.626]                     })
[17:02:37.626]                   }
[17:02:37.626]                   ...future.strategy.old <- future::plan("list")
[17:02:37.626]                   options(future.plan = NULL)
[17:02:37.626]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.626]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.626]                 }
[17:02:37.626]                 ...future.workdir <- getwd()
[17:02:37.626]             }
[17:02:37.626]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.626]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.626]         }
[17:02:37.626]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.626]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.626]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.626]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.626]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.626]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.626]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.626]             base::names(...future.oldOptions))
[17:02:37.626]     }
[17:02:37.626]     if (FALSE) {
[17:02:37.626]     }
[17:02:37.626]     else {
[17:02:37.626]         if (TRUE) {
[17:02:37.626]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.626]                 open = "w")
[17:02:37.626]         }
[17:02:37.626]         else {
[17:02:37.626]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.626]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.626]         }
[17:02:37.626]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.626]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.626]             base::sink(type = "output", split = FALSE)
[17:02:37.626]             base::close(...future.stdout)
[17:02:37.626]         }, add = TRUE)
[17:02:37.626]     }
[17:02:37.626]     ...future.frame <- base::sys.nframe()
[17:02:37.626]     ...future.conditions <- base::list()
[17:02:37.626]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.626]     if (FALSE) {
[17:02:37.626]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.626]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.626]     }
[17:02:37.626]     ...future.result <- base::tryCatch({
[17:02:37.626]         base::withCallingHandlers({
[17:02:37.626]             ...future.value <- base::withVisible(base::local({
[17:02:37.626]                 ...future.makeSendCondition <- base::local({
[17:02:37.626]                   sendCondition <- NULL
[17:02:37.626]                   function(frame = 1L) {
[17:02:37.626]                     if (is.function(sendCondition)) 
[17:02:37.626]                       return(sendCondition)
[17:02:37.626]                     ns <- getNamespace("parallel")
[17:02:37.626]                     if (exists("sendData", mode = "function", 
[17:02:37.626]                       envir = ns)) {
[17:02:37.626]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.626]                         envir = ns)
[17:02:37.626]                       envir <- sys.frame(frame)
[17:02:37.626]                       master <- NULL
[17:02:37.626]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.626]                         !identical(envir, emptyenv())) {
[17:02:37.626]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.626]                           inherits = FALSE)) {
[17:02:37.626]                           master <- get("master", mode = "list", 
[17:02:37.626]                             envir = envir, inherits = FALSE)
[17:02:37.626]                           if (inherits(master, c("SOCKnode", 
[17:02:37.626]                             "SOCK0node"))) {
[17:02:37.626]                             sendCondition <<- function(cond) {
[17:02:37.626]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.626]                                 success = TRUE)
[17:02:37.626]                               parallel_sendData(master, data)
[17:02:37.626]                             }
[17:02:37.626]                             return(sendCondition)
[17:02:37.626]                           }
[17:02:37.626]                         }
[17:02:37.626]                         frame <- frame + 1L
[17:02:37.626]                         envir <- sys.frame(frame)
[17:02:37.626]                       }
[17:02:37.626]                     }
[17:02:37.626]                     sendCondition <<- function(cond) NULL
[17:02:37.626]                   }
[17:02:37.626]                 })
[17:02:37.626]                 withCallingHandlers({
[17:02:37.626]                   {
[17:02:37.626]                     lm(dist ~ . + 0, data = cars)
[17:02:37.626]                   }
[17:02:37.626]                 }, immediateCondition = function(cond) {
[17:02:37.626]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.626]                   sendCondition(cond)
[17:02:37.626]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.626]                   {
[17:02:37.626]                     inherits <- base::inherits
[17:02:37.626]                     invokeRestart <- base::invokeRestart
[17:02:37.626]                     is.null <- base::is.null
[17:02:37.626]                     muffled <- FALSE
[17:02:37.626]                     if (inherits(cond, "message")) {
[17:02:37.626]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.626]                       if (muffled) 
[17:02:37.626]                         invokeRestart("muffleMessage")
[17:02:37.626]                     }
[17:02:37.626]                     else if (inherits(cond, "warning")) {
[17:02:37.626]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.626]                       if (muffled) 
[17:02:37.626]                         invokeRestart("muffleWarning")
[17:02:37.626]                     }
[17:02:37.626]                     else if (inherits(cond, "condition")) {
[17:02:37.626]                       if (!is.null(pattern)) {
[17:02:37.626]                         computeRestarts <- base::computeRestarts
[17:02:37.626]                         grepl <- base::grepl
[17:02:37.626]                         restarts <- computeRestarts(cond)
[17:02:37.626]                         for (restart in restarts) {
[17:02:37.626]                           name <- restart$name
[17:02:37.626]                           if (is.null(name)) 
[17:02:37.626]                             next
[17:02:37.626]                           if (!grepl(pattern, name)) 
[17:02:37.626]                             next
[17:02:37.626]                           invokeRestart(restart)
[17:02:37.626]                           muffled <- TRUE
[17:02:37.626]                           break
[17:02:37.626]                         }
[17:02:37.626]                       }
[17:02:37.626]                     }
[17:02:37.626]                     invisible(muffled)
[17:02:37.626]                   }
[17:02:37.626]                   muffleCondition(cond)
[17:02:37.626]                 })
[17:02:37.626]             }))
[17:02:37.626]             future::FutureResult(value = ...future.value$value, 
[17:02:37.626]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.626]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.626]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.626]                     ...future.globalenv.names))
[17:02:37.626]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.626]         }, condition = base::local({
[17:02:37.626]             c <- base::c
[17:02:37.626]             inherits <- base::inherits
[17:02:37.626]             invokeRestart <- base::invokeRestart
[17:02:37.626]             length <- base::length
[17:02:37.626]             list <- base::list
[17:02:37.626]             seq.int <- base::seq.int
[17:02:37.626]             signalCondition <- base::signalCondition
[17:02:37.626]             sys.calls <- base::sys.calls
[17:02:37.626]             `[[` <- base::`[[`
[17:02:37.626]             `+` <- base::`+`
[17:02:37.626]             `<<-` <- base::`<<-`
[17:02:37.626]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.626]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.626]                   3L)]
[17:02:37.626]             }
[17:02:37.626]             function(cond) {
[17:02:37.626]                 is_error <- inherits(cond, "error")
[17:02:37.626]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.626]                   NULL)
[17:02:37.626]                 if (is_error) {
[17:02:37.626]                   sessionInformation <- function() {
[17:02:37.626]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.626]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.626]                       search = base::search(), system = base::Sys.info())
[17:02:37.626]                   }
[17:02:37.626]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.626]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.626]                     cond$call), session = sessionInformation(), 
[17:02:37.626]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.626]                   signalCondition(cond)
[17:02:37.626]                 }
[17:02:37.626]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.626]                 "immediateCondition"))) {
[17:02:37.626]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.626]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.626]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.626]                   if (TRUE && !signal) {
[17:02:37.626]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.626]                     {
[17:02:37.626]                       inherits <- base::inherits
[17:02:37.626]                       invokeRestart <- base::invokeRestart
[17:02:37.626]                       is.null <- base::is.null
[17:02:37.626]                       muffled <- FALSE
[17:02:37.626]                       if (inherits(cond, "message")) {
[17:02:37.626]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.626]                         if (muffled) 
[17:02:37.626]                           invokeRestart("muffleMessage")
[17:02:37.626]                       }
[17:02:37.626]                       else if (inherits(cond, "warning")) {
[17:02:37.626]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.626]                         if (muffled) 
[17:02:37.626]                           invokeRestart("muffleWarning")
[17:02:37.626]                       }
[17:02:37.626]                       else if (inherits(cond, "condition")) {
[17:02:37.626]                         if (!is.null(pattern)) {
[17:02:37.626]                           computeRestarts <- base::computeRestarts
[17:02:37.626]                           grepl <- base::grepl
[17:02:37.626]                           restarts <- computeRestarts(cond)
[17:02:37.626]                           for (restart in restarts) {
[17:02:37.626]                             name <- restart$name
[17:02:37.626]                             if (is.null(name)) 
[17:02:37.626]                               next
[17:02:37.626]                             if (!grepl(pattern, name)) 
[17:02:37.626]                               next
[17:02:37.626]                             invokeRestart(restart)
[17:02:37.626]                             muffled <- TRUE
[17:02:37.626]                             break
[17:02:37.626]                           }
[17:02:37.626]                         }
[17:02:37.626]                       }
[17:02:37.626]                       invisible(muffled)
[17:02:37.626]                     }
[17:02:37.626]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.626]                   }
[17:02:37.626]                 }
[17:02:37.626]                 else {
[17:02:37.626]                   if (TRUE) {
[17:02:37.626]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.626]                     {
[17:02:37.626]                       inherits <- base::inherits
[17:02:37.626]                       invokeRestart <- base::invokeRestart
[17:02:37.626]                       is.null <- base::is.null
[17:02:37.626]                       muffled <- FALSE
[17:02:37.626]                       if (inherits(cond, "message")) {
[17:02:37.626]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.626]                         if (muffled) 
[17:02:37.626]                           invokeRestart("muffleMessage")
[17:02:37.626]                       }
[17:02:37.626]                       else if (inherits(cond, "warning")) {
[17:02:37.626]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.626]                         if (muffled) 
[17:02:37.626]                           invokeRestart("muffleWarning")
[17:02:37.626]                       }
[17:02:37.626]                       else if (inherits(cond, "condition")) {
[17:02:37.626]                         if (!is.null(pattern)) {
[17:02:37.626]                           computeRestarts <- base::computeRestarts
[17:02:37.626]                           grepl <- base::grepl
[17:02:37.626]                           restarts <- computeRestarts(cond)
[17:02:37.626]                           for (restart in restarts) {
[17:02:37.626]                             name <- restart$name
[17:02:37.626]                             if (is.null(name)) 
[17:02:37.626]                               next
[17:02:37.626]                             if (!grepl(pattern, name)) 
[17:02:37.626]                               next
[17:02:37.626]                             invokeRestart(restart)
[17:02:37.626]                             muffled <- TRUE
[17:02:37.626]                             break
[17:02:37.626]                           }
[17:02:37.626]                         }
[17:02:37.626]                       }
[17:02:37.626]                       invisible(muffled)
[17:02:37.626]                     }
[17:02:37.626]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.626]                   }
[17:02:37.626]                 }
[17:02:37.626]             }
[17:02:37.626]         }))
[17:02:37.626]     }, error = function(ex) {
[17:02:37.626]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.626]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.626]                 ...future.rng), started = ...future.startTime, 
[17:02:37.626]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.626]             version = "1.8"), class = "FutureResult")
[17:02:37.626]     }, finally = {
[17:02:37.626]         if (!identical(...future.workdir, getwd())) 
[17:02:37.626]             setwd(...future.workdir)
[17:02:37.626]         {
[17:02:37.626]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.626]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.626]             }
[17:02:37.626]             base::options(...future.oldOptions)
[17:02:37.626]             if (.Platform$OS.type == "windows") {
[17:02:37.626]                 old_names <- names(...future.oldEnvVars)
[17:02:37.626]                 envs <- base::Sys.getenv()
[17:02:37.626]                 names <- names(envs)
[17:02:37.626]                 common <- intersect(names, old_names)
[17:02:37.626]                 added <- setdiff(names, old_names)
[17:02:37.626]                 removed <- setdiff(old_names, names)
[17:02:37.626]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.626]                   envs[common]]
[17:02:37.626]                 NAMES <- toupper(changed)
[17:02:37.626]                 args <- list()
[17:02:37.626]                 for (kk in seq_along(NAMES)) {
[17:02:37.626]                   name <- changed[[kk]]
[17:02:37.626]                   NAME <- NAMES[[kk]]
[17:02:37.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.626]                     next
[17:02:37.626]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.626]                 }
[17:02:37.626]                 NAMES <- toupper(added)
[17:02:37.626]                 for (kk in seq_along(NAMES)) {
[17:02:37.626]                   name <- added[[kk]]
[17:02:37.626]                   NAME <- NAMES[[kk]]
[17:02:37.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.626]                     next
[17:02:37.626]                   args[[name]] <- ""
[17:02:37.626]                 }
[17:02:37.626]                 NAMES <- toupper(removed)
[17:02:37.626]                 for (kk in seq_along(NAMES)) {
[17:02:37.626]                   name <- removed[[kk]]
[17:02:37.626]                   NAME <- NAMES[[kk]]
[17:02:37.626]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.626]                     next
[17:02:37.626]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.626]                 }
[17:02:37.626]                 if (length(args) > 0) 
[17:02:37.626]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.626]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.626]             }
[17:02:37.626]             else {
[17:02:37.626]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.626]             }
[17:02:37.626]             {
[17:02:37.626]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.626]                   0L) {
[17:02:37.626]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.626]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.626]                   base::options(opts)
[17:02:37.626]                 }
[17:02:37.626]                 {
[17:02:37.626]                   {
[17:02:37.626]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.626]                     NULL
[17:02:37.626]                   }
[17:02:37.626]                   options(future.plan = NULL)
[17:02:37.626]                   if (is.na(NA_character_)) 
[17:02:37.626]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.626]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.626]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.626]                     .init = FALSE)
[17:02:37.626]                 }
[17:02:37.626]             }
[17:02:37.626]         }
[17:02:37.626]     })
[17:02:37.626]     if (TRUE) {
[17:02:37.626]         base::sink(type = "output", split = FALSE)
[17:02:37.626]         if (TRUE) {
[17:02:37.626]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.626]         }
[17:02:37.626]         else {
[17:02:37.626]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.626]         }
[17:02:37.626]         base::close(...future.stdout)
[17:02:37.626]         ...future.stdout <- NULL
[17:02:37.626]     }
[17:02:37.626]     ...future.result$conditions <- ...future.conditions
[17:02:37.626]     ...future.result$finished <- base::Sys.time()
[17:02:37.626]     ...future.result
[17:02:37.626] }
[17:02:37.629] MultisessionFuture started
[17:02:37.629] - Launch lazy future ... done
[17:02:37.629] run() for ‘MultisessionFuture’ ... done
[17:02:37.629] result() for ClusterFuture ...
[17:02:37.629] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.629] - Validating connection of MultisessionFuture
[17:02:37.674] - received message: FutureResult
[17:02:37.674] - Received FutureResult
[17:02:37.675] - Erased future from FutureRegistry
[17:02:37.675] result() for ClusterFuture ...
[17:02:37.675] - result already collected: FutureResult
[17:02:37.675] result() for ClusterFuture ... done
[17:02:37.675] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.675] result() for ClusterFuture ... done
[17:02:37.675] result() for ClusterFuture ...
[17:02:37.675] - result already collected: FutureResult
[17:02:37.675] result() for ClusterFuture ... done

Call:
lm(formula = dist ~ . + 0, data = cars)

Coefficients:
speed  
2.909  

- Globals - lm(<formula #3 (‘c’)>, data = cars) ...

Call:
lm(formula = dist ~ speed + speed^2, data = cars)

Coefficients:
(Intercept)        speed  
    -17.579        3.932  

[17:02:37.678] getGlobalsAndPackages() ...
[17:02:37.678] Searching for globals...
[17:02:37.680] - globals found: [8] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘speed’, ‘^’, ‘~’, ‘cars’
[17:02:37.680] Searching for globals ... DONE
[17:02:37.680] Resolving globals: FALSE
[17:02:37.680] 
[17:02:37.681] - packages: [2] ‘stats’, ‘datasets’
[17:02:37.681] getGlobalsAndPackages() ... DONE
[17:02:37.681] run() for ‘Future’ ...
[17:02:37.681] - state: ‘created’
[17:02:37.681] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.696] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.696] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.696]   - Field: ‘node’
[17:02:37.696]   - Field: ‘label’
[17:02:37.697]   - Field: ‘local’
[17:02:37.697]   - Field: ‘owner’
[17:02:37.697]   - Field: ‘envir’
[17:02:37.697]   - Field: ‘workers’
[17:02:37.697]   - Field: ‘packages’
[17:02:37.697]   - Field: ‘gc’
[17:02:37.697]   - Field: ‘conditions’
[17:02:37.697]   - Field: ‘persistent’
[17:02:37.697]   - Field: ‘expr’
[17:02:37.697]   - Field: ‘uuid’
[17:02:37.698]   - Field: ‘seed’
[17:02:37.698]   - Field: ‘version’
[17:02:37.698]   - Field: ‘result’
[17:02:37.698]   - Field: ‘asynchronous’
[17:02:37.698]   - Field: ‘calls’
[17:02:37.698]   - Field: ‘globals’
[17:02:37.698]   - Field: ‘stdout’
[17:02:37.698]   - Field: ‘earlySignal’
[17:02:37.698]   - Field: ‘lazy’
[17:02:37.698]   - Field: ‘state’
[17:02:37.698] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.699] - Launch lazy future ...
[17:02:37.699] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:37.699] Packages needed by future strategies (n = 0): <none>
[17:02:37.700] {
[17:02:37.700]     {
[17:02:37.700]         {
[17:02:37.700]             ...future.startTime <- base::Sys.time()
[17:02:37.700]             {
[17:02:37.700]                 {
[17:02:37.700]                   {
[17:02:37.700]                     {
[17:02:37.700]                       {
[17:02:37.700]                         base::local({
[17:02:37.700]                           has_future <- base::requireNamespace("future", 
[17:02:37.700]                             quietly = TRUE)
[17:02:37.700]                           if (has_future) {
[17:02:37.700]                             ns <- base::getNamespace("future")
[17:02:37.700]                             version <- ns[[".package"]][["version"]]
[17:02:37.700]                             if (is.null(version)) 
[17:02:37.700]                               version <- utils::packageVersion("future")
[17:02:37.700]                           }
[17:02:37.700]                           else {
[17:02:37.700]                             version <- NULL
[17:02:37.700]                           }
[17:02:37.700]                           if (!has_future || version < "1.8.0") {
[17:02:37.700]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.700]                               "", base::R.version$version.string), 
[17:02:37.700]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.700]                                 base::R.version$platform, 8 * 
[17:02:37.700]                                   base::.Machine$sizeof.pointer), 
[17:02:37.700]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.700]                                 "release", "version")], collapse = " "), 
[17:02:37.700]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.700]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.700]                               info)
[17:02:37.700]                             info <- base::paste(info, collapse = "; ")
[17:02:37.700]                             if (!has_future) {
[17:02:37.700]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.700]                                 info)
[17:02:37.700]                             }
[17:02:37.700]                             else {
[17:02:37.700]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.700]                                 info, version)
[17:02:37.700]                             }
[17:02:37.700]                             base::stop(msg)
[17:02:37.700]                           }
[17:02:37.700]                         })
[17:02:37.700]                       }
[17:02:37.700]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.700]                       base::options(mc.cores = 1L)
[17:02:37.700]                     }
[17:02:37.700]                     base::local({
[17:02:37.700]                       for (pkg in c("stats", "datasets")) {
[17:02:37.700]                         base::loadNamespace(pkg)
[17:02:37.700]                         base::library(pkg, character.only = TRUE)
[17:02:37.700]                       }
[17:02:37.700]                     })
[17:02:37.700]                   }
[17:02:37.700]                   ...future.strategy.old <- future::plan("list")
[17:02:37.700]                   options(future.plan = NULL)
[17:02:37.700]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.700]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.700]                 }
[17:02:37.700]                 ...future.workdir <- getwd()
[17:02:37.700]             }
[17:02:37.700]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.700]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.700]         }
[17:02:37.700]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.700]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.700]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.700]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.700]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.700]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.700]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.700]             base::names(...future.oldOptions))
[17:02:37.700]     }
[17:02:37.700]     if (FALSE) {
[17:02:37.700]     }
[17:02:37.700]     else {
[17:02:37.700]         if (TRUE) {
[17:02:37.700]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.700]                 open = "w")
[17:02:37.700]         }
[17:02:37.700]         else {
[17:02:37.700]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.700]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.700]         }
[17:02:37.700]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.700]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.700]             base::sink(type = "output", split = FALSE)
[17:02:37.700]             base::close(...future.stdout)
[17:02:37.700]         }, add = TRUE)
[17:02:37.700]     }
[17:02:37.700]     ...future.frame <- base::sys.nframe()
[17:02:37.700]     ...future.conditions <- base::list()
[17:02:37.700]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.700]     if (FALSE) {
[17:02:37.700]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.700]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.700]     }
[17:02:37.700]     ...future.result <- base::tryCatch({
[17:02:37.700]         base::withCallingHandlers({
[17:02:37.700]             ...future.value <- base::withVisible(base::local({
[17:02:37.700]                 ...future.makeSendCondition <- base::local({
[17:02:37.700]                   sendCondition <- NULL
[17:02:37.700]                   function(frame = 1L) {
[17:02:37.700]                     if (is.function(sendCondition)) 
[17:02:37.700]                       return(sendCondition)
[17:02:37.700]                     ns <- getNamespace("parallel")
[17:02:37.700]                     if (exists("sendData", mode = "function", 
[17:02:37.700]                       envir = ns)) {
[17:02:37.700]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.700]                         envir = ns)
[17:02:37.700]                       envir <- sys.frame(frame)
[17:02:37.700]                       master <- NULL
[17:02:37.700]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.700]                         !identical(envir, emptyenv())) {
[17:02:37.700]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.700]                           inherits = FALSE)) {
[17:02:37.700]                           master <- get("master", mode = "list", 
[17:02:37.700]                             envir = envir, inherits = FALSE)
[17:02:37.700]                           if (inherits(master, c("SOCKnode", 
[17:02:37.700]                             "SOCK0node"))) {
[17:02:37.700]                             sendCondition <<- function(cond) {
[17:02:37.700]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.700]                                 success = TRUE)
[17:02:37.700]                               parallel_sendData(master, data)
[17:02:37.700]                             }
[17:02:37.700]                             return(sendCondition)
[17:02:37.700]                           }
[17:02:37.700]                         }
[17:02:37.700]                         frame <- frame + 1L
[17:02:37.700]                         envir <- sys.frame(frame)
[17:02:37.700]                       }
[17:02:37.700]                     }
[17:02:37.700]                     sendCondition <<- function(cond) NULL
[17:02:37.700]                   }
[17:02:37.700]                 })
[17:02:37.700]                 withCallingHandlers({
[17:02:37.700]                   {
[17:02:37.700]                     lm(dist ~ speed + speed^2, data = cars)
[17:02:37.700]                   }
[17:02:37.700]                 }, immediateCondition = function(cond) {
[17:02:37.700]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.700]                   sendCondition(cond)
[17:02:37.700]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.700]                   {
[17:02:37.700]                     inherits <- base::inherits
[17:02:37.700]                     invokeRestart <- base::invokeRestart
[17:02:37.700]                     is.null <- base::is.null
[17:02:37.700]                     muffled <- FALSE
[17:02:37.700]                     if (inherits(cond, "message")) {
[17:02:37.700]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.700]                       if (muffled) 
[17:02:37.700]                         invokeRestart("muffleMessage")
[17:02:37.700]                     }
[17:02:37.700]                     else if (inherits(cond, "warning")) {
[17:02:37.700]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.700]                       if (muffled) 
[17:02:37.700]                         invokeRestart("muffleWarning")
[17:02:37.700]                     }
[17:02:37.700]                     else if (inherits(cond, "condition")) {
[17:02:37.700]                       if (!is.null(pattern)) {
[17:02:37.700]                         computeRestarts <- base::computeRestarts
[17:02:37.700]                         grepl <- base::grepl
[17:02:37.700]                         restarts <- computeRestarts(cond)
[17:02:37.700]                         for (restart in restarts) {
[17:02:37.700]                           name <- restart$name
[17:02:37.700]                           if (is.null(name)) 
[17:02:37.700]                             next
[17:02:37.700]                           if (!grepl(pattern, name)) 
[17:02:37.700]                             next
[17:02:37.700]                           invokeRestart(restart)
[17:02:37.700]                           muffled <- TRUE
[17:02:37.700]                           break
[17:02:37.700]                         }
[17:02:37.700]                       }
[17:02:37.700]                     }
[17:02:37.700]                     invisible(muffled)
[17:02:37.700]                   }
[17:02:37.700]                   muffleCondition(cond)
[17:02:37.700]                 })
[17:02:37.700]             }))
[17:02:37.700]             future::FutureResult(value = ...future.value$value, 
[17:02:37.700]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.700]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.700]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.700]                     ...future.globalenv.names))
[17:02:37.700]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.700]         }, condition = base::local({
[17:02:37.700]             c <- base::c
[17:02:37.700]             inherits <- base::inherits
[17:02:37.700]             invokeRestart <- base::invokeRestart
[17:02:37.700]             length <- base::length
[17:02:37.700]             list <- base::list
[17:02:37.700]             seq.int <- base::seq.int
[17:02:37.700]             signalCondition <- base::signalCondition
[17:02:37.700]             sys.calls <- base::sys.calls
[17:02:37.700]             `[[` <- base::`[[`
[17:02:37.700]             `+` <- base::`+`
[17:02:37.700]             `<<-` <- base::`<<-`
[17:02:37.700]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.700]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.700]                   3L)]
[17:02:37.700]             }
[17:02:37.700]             function(cond) {
[17:02:37.700]                 is_error <- inherits(cond, "error")
[17:02:37.700]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.700]                   NULL)
[17:02:37.700]                 if (is_error) {
[17:02:37.700]                   sessionInformation <- function() {
[17:02:37.700]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.700]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.700]                       search = base::search(), system = base::Sys.info())
[17:02:37.700]                   }
[17:02:37.700]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.700]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.700]                     cond$call), session = sessionInformation(), 
[17:02:37.700]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.700]                   signalCondition(cond)
[17:02:37.700]                 }
[17:02:37.700]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.700]                 "immediateCondition"))) {
[17:02:37.700]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.700]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.700]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.700]                   if (TRUE && !signal) {
[17:02:37.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.700]                     {
[17:02:37.700]                       inherits <- base::inherits
[17:02:37.700]                       invokeRestart <- base::invokeRestart
[17:02:37.700]                       is.null <- base::is.null
[17:02:37.700]                       muffled <- FALSE
[17:02:37.700]                       if (inherits(cond, "message")) {
[17:02:37.700]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.700]                         if (muffled) 
[17:02:37.700]                           invokeRestart("muffleMessage")
[17:02:37.700]                       }
[17:02:37.700]                       else if (inherits(cond, "warning")) {
[17:02:37.700]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.700]                         if (muffled) 
[17:02:37.700]                           invokeRestart("muffleWarning")
[17:02:37.700]                       }
[17:02:37.700]                       else if (inherits(cond, "condition")) {
[17:02:37.700]                         if (!is.null(pattern)) {
[17:02:37.700]                           computeRestarts <- base::computeRestarts
[17:02:37.700]                           grepl <- base::grepl
[17:02:37.700]                           restarts <- computeRestarts(cond)
[17:02:37.700]                           for (restart in restarts) {
[17:02:37.700]                             name <- restart$name
[17:02:37.700]                             if (is.null(name)) 
[17:02:37.700]                               next
[17:02:37.700]                             if (!grepl(pattern, name)) 
[17:02:37.700]                               next
[17:02:37.700]                             invokeRestart(restart)
[17:02:37.700]                             muffled <- TRUE
[17:02:37.700]                             break
[17:02:37.700]                           }
[17:02:37.700]                         }
[17:02:37.700]                       }
[17:02:37.700]                       invisible(muffled)
[17:02:37.700]                     }
[17:02:37.700]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.700]                   }
[17:02:37.700]                 }
[17:02:37.700]                 else {
[17:02:37.700]                   if (TRUE) {
[17:02:37.700]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.700]                     {
[17:02:37.700]                       inherits <- base::inherits
[17:02:37.700]                       invokeRestart <- base::invokeRestart
[17:02:37.700]                       is.null <- base::is.null
[17:02:37.700]                       muffled <- FALSE
[17:02:37.700]                       if (inherits(cond, "message")) {
[17:02:37.700]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.700]                         if (muffled) 
[17:02:37.700]                           invokeRestart("muffleMessage")
[17:02:37.700]                       }
[17:02:37.700]                       else if (inherits(cond, "warning")) {
[17:02:37.700]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.700]                         if (muffled) 
[17:02:37.700]                           invokeRestart("muffleWarning")
[17:02:37.700]                       }
[17:02:37.700]                       else if (inherits(cond, "condition")) {
[17:02:37.700]                         if (!is.null(pattern)) {
[17:02:37.700]                           computeRestarts <- base::computeRestarts
[17:02:37.700]                           grepl <- base::grepl
[17:02:37.700]                           restarts <- computeRestarts(cond)
[17:02:37.700]                           for (restart in restarts) {
[17:02:37.700]                             name <- restart$name
[17:02:37.700]                             if (is.null(name)) 
[17:02:37.700]                               next
[17:02:37.700]                             if (!grepl(pattern, name)) 
[17:02:37.700]                               next
[17:02:37.700]                             invokeRestart(restart)
[17:02:37.700]                             muffled <- TRUE
[17:02:37.700]                             break
[17:02:37.700]                           }
[17:02:37.700]                         }
[17:02:37.700]                       }
[17:02:37.700]                       invisible(muffled)
[17:02:37.700]                     }
[17:02:37.700]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.700]                   }
[17:02:37.700]                 }
[17:02:37.700]             }
[17:02:37.700]         }))
[17:02:37.700]     }, error = function(ex) {
[17:02:37.700]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.700]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.700]                 ...future.rng), started = ...future.startTime, 
[17:02:37.700]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.700]             version = "1.8"), class = "FutureResult")
[17:02:37.700]     }, finally = {
[17:02:37.700]         if (!identical(...future.workdir, getwd())) 
[17:02:37.700]             setwd(...future.workdir)
[17:02:37.700]         {
[17:02:37.700]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.700]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.700]             }
[17:02:37.700]             base::options(...future.oldOptions)
[17:02:37.700]             if (.Platform$OS.type == "windows") {
[17:02:37.700]                 old_names <- names(...future.oldEnvVars)
[17:02:37.700]                 envs <- base::Sys.getenv()
[17:02:37.700]                 names <- names(envs)
[17:02:37.700]                 common <- intersect(names, old_names)
[17:02:37.700]                 added <- setdiff(names, old_names)
[17:02:37.700]                 removed <- setdiff(old_names, names)
[17:02:37.700]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.700]                   envs[common]]
[17:02:37.700]                 NAMES <- toupper(changed)
[17:02:37.700]                 args <- list()
[17:02:37.700]                 for (kk in seq_along(NAMES)) {
[17:02:37.700]                   name <- changed[[kk]]
[17:02:37.700]                   NAME <- NAMES[[kk]]
[17:02:37.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.700]                     next
[17:02:37.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.700]                 }
[17:02:37.700]                 NAMES <- toupper(added)
[17:02:37.700]                 for (kk in seq_along(NAMES)) {
[17:02:37.700]                   name <- added[[kk]]
[17:02:37.700]                   NAME <- NAMES[[kk]]
[17:02:37.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.700]                     next
[17:02:37.700]                   args[[name]] <- ""
[17:02:37.700]                 }
[17:02:37.700]                 NAMES <- toupper(removed)
[17:02:37.700]                 for (kk in seq_along(NAMES)) {
[17:02:37.700]                   name <- removed[[kk]]
[17:02:37.700]                   NAME <- NAMES[[kk]]
[17:02:37.700]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.700]                     next
[17:02:37.700]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.700]                 }
[17:02:37.700]                 if (length(args) > 0) 
[17:02:37.700]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.700]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.700]             }
[17:02:37.700]             else {
[17:02:37.700]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.700]             }
[17:02:37.700]             {
[17:02:37.700]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.700]                   0L) {
[17:02:37.700]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.700]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.700]                   base::options(opts)
[17:02:37.700]                 }
[17:02:37.700]                 {
[17:02:37.700]                   {
[17:02:37.700]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.700]                     NULL
[17:02:37.700]                   }
[17:02:37.700]                   options(future.plan = NULL)
[17:02:37.700]                   if (is.na(NA_character_)) 
[17:02:37.700]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.700]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.700]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.700]                     .init = FALSE)
[17:02:37.700]                 }
[17:02:37.700]             }
[17:02:37.700]         }
[17:02:37.700]     })
[17:02:37.700]     if (TRUE) {
[17:02:37.700]         base::sink(type = "output", split = FALSE)
[17:02:37.700]         if (TRUE) {
[17:02:37.700]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.700]         }
[17:02:37.700]         else {
[17:02:37.700]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.700]         }
[17:02:37.700]         base::close(...future.stdout)
[17:02:37.700]         ...future.stdout <- NULL
[17:02:37.700]     }
[17:02:37.700]     ...future.result$conditions <- ...future.conditions
[17:02:37.700]     ...future.result$finished <- base::Sys.time()
[17:02:37.700]     ...future.result
[17:02:37.700] }
[17:02:37.703] MultisessionFuture started
[17:02:37.703] - Launch lazy future ... done
[17:02:37.703] run() for ‘MultisessionFuture’ ... done
[17:02:37.703] result() for ClusterFuture ...
[17:02:37.703] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.703] - Validating connection of MultisessionFuture
[17:02:37.746] - received message: FutureResult
[17:02:37.746] - Received FutureResult
[17:02:37.747] - Erased future from FutureRegistry
[17:02:37.747] result() for ClusterFuture ...
[17:02:37.747] - result already collected: FutureResult
[17:02:37.747] result() for ClusterFuture ... done
[17:02:37.747] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.747] result() for ClusterFuture ... done
[17:02:37.747] result() for ClusterFuture ...
[17:02:37.747] - result already collected: FutureResult
[17:02:37.747] result() for ClusterFuture ... done

Call:
lm(formula = dist ~ speed + speed^2, data = cars)

Coefficients:
(Intercept)        speed  
    -17.579        3.932  

- Globals - lm(<formula #4 (‘d’)>, data = cars) ...

Call:
lm(formula = dist ~ speed + I(speed^2), data = cars)

Coefficients:
(Intercept)        speed   I(speed^2)  
    2.47014      0.91329      0.09996  

[17:02:37.750] getGlobalsAndPackages() ...
[17:02:37.750] Searching for globals...
[17:02:37.752] - globals found: [9] ‘{’, ‘lm’, ‘dist’, ‘+’, ‘speed’, ‘I’, ‘^’, ‘~’, ‘cars’
[17:02:37.752] Searching for globals ... DONE
[17:02:37.752] Resolving globals: FALSE
[17:02:37.753] 
[17:02:37.753] - packages: [2] ‘stats’, ‘datasets’
[17:02:37.753] getGlobalsAndPackages() ... DONE
[17:02:37.753] run() for ‘Future’ ...
[17:02:37.753] - state: ‘created’
[17:02:37.753] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.767] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.767] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.767]   - Field: ‘node’
[17:02:37.768]   - Field: ‘label’
[17:02:37.768]   - Field: ‘local’
[17:02:37.768]   - Field: ‘owner’
[17:02:37.768]   - Field: ‘envir’
[17:02:37.768]   - Field: ‘workers’
[17:02:37.768]   - Field: ‘packages’
[17:02:37.768]   - Field: ‘gc’
[17:02:37.768]   - Field: ‘conditions’
[17:02:37.768]   - Field: ‘persistent’
[17:02:37.768]   - Field: ‘expr’
[17:02:37.769]   - Field: ‘uuid’
[17:02:37.769]   - Field: ‘seed’
[17:02:37.769]   - Field: ‘version’
[17:02:37.769]   - Field: ‘result’
[17:02:37.769]   - Field: ‘asynchronous’
[17:02:37.769]   - Field: ‘calls’
[17:02:37.769]   - Field: ‘globals’
[17:02:37.769]   - Field: ‘stdout’
[17:02:37.769]   - Field: ‘earlySignal’
[17:02:37.769]   - Field: ‘lazy’
[17:02:37.769]   - Field: ‘state’
[17:02:37.769] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.770] - Launch lazy future ...
[17:02:37.770] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:37.770] Packages needed by future strategies (n = 0): <none>
[17:02:37.771] {
[17:02:37.771]     {
[17:02:37.771]         {
[17:02:37.771]             ...future.startTime <- base::Sys.time()
[17:02:37.771]             {
[17:02:37.771]                 {
[17:02:37.771]                   {
[17:02:37.771]                     {
[17:02:37.771]                       {
[17:02:37.771]                         base::local({
[17:02:37.771]                           has_future <- base::requireNamespace("future", 
[17:02:37.771]                             quietly = TRUE)
[17:02:37.771]                           if (has_future) {
[17:02:37.771]                             ns <- base::getNamespace("future")
[17:02:37.771]                             version <- ns[[".package"]][["version"]]
[17:02:37.771]                             if (is.null(version)) 
[17:02:37.771]                               version <- utils::packageVersion("future")
[17:02:37.771]                           }
[17:02:37.771]                           else {
[17:02:37.771]                             version <- NULL
[17:02:37.771]                           }
[17:02:37.771]                           if (!has_future || version < "1.8.0") {
[17:02:37.771]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.771]                               "", base::R.version$version.string), 
[17:02:37.771]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.771]                                 base::R.version$platform, 8 * 
[17:02:37.771]                                   base::.Machine$sizeof.pointer), 
[17:02:37.771]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.771]                                 "release", "version")], collapse = " "), 
[17:02:37.771]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.771]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.771]                               info)
[17:02:37.771]                             info <- base::paste(info, collapse = "; ")
[17:02:37.771]                             if (!has_future) {
[17:02:37.771]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.771]                                 info)
[17:02:37.771]                             }
[17:02:37.771]                             else {
[17:02:37.771]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.771]                                 info, version)
[17:02:37.771]                             }
[17:02:37.771]                             base::stop(msg)
[17:02:37.771]                           }
[17:02:37.771]                         })
[17:02:37.771]                       }
[17:02:37.771]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.771]                       base::options(mc.cores = 1L)
[17:02:37.771]                     }
[17:02:37.771]                     base::local({
[17:02:37.771]                       for (pkg in c("stats", "datasets")) {
[17:02:37.771]                         base::loadNamespace(pkg)
[17:02:37.771]                         base::library(pkg, character.only = TRUE)
[17:02:37.771]                       }
[17:02:37.771]                     })
[17:02:37.771]                   }
[17:02:37.771]                   ...future.strategy.old <- future::plan("list")
[17:02:37.771]                   options(future.plan = NULL)
[17:02:37.771]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.771]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.771]                 }
[17:02:37.771]                 ...future.workdir <- getwd()
[17:02:37.771]             }
[17:02:37.771]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.771]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.771]         }
[17:02:37.771]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.771]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.771]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.771]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.771]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.771]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.771]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.771]             base::names(...future.oldOptions))
[17:02:37.771]     }
[17:02:37.771]     if (FALSE) {
[17:02:37.771]     }
[17:02:37.771]     else {
[17:02:37.771]         if (TRUE) {
[17:02:37.771]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.771]                 open = "w")
[17:02:37.771]         }
[17:02:37.771]         else {
[17:02:37.771]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.771]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.771]         }
[17:02:37.771]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.771]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.771]             base::sink(type = "output", split = FALSE)
[17:02:37.771]             base::close(...future.stdout)
[17:02:37.771]         }, add = TRUE)
[17:02:37.771]     }
[17:02:37.771]     ...future.frame <- base::sys.nframe()
[17:02:37.771]     ...future.conditions <- base::list()
[17:02:37.771]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.771]     if (FALSE) {
[17:02:37.771]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.771]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.771]     }
[17:02:37.771]     ...future.result <- base::tryCatch({
[17:02:37.771]         base::withCallingHandlers({
[17:02:37.771]             ...future.value <- base::withVisible(base::local({
[17:02:37.771]                 ...future.makeSendCondition <- base::local({
[17:02:37.771]                   sendCondition <- NULL
[17:02:37.771]                   function(frame = 1L) {
[17:02:37.771]                     if (is.function(sendCondition)) 
[17:02:37.771]                       return(sendCondition)
[17:02:37.771]                     ns <- getNamespace("parallel")
[17:02:37.771]                     if (exists("sendData", mode = "function", 
[17:02:37.771]                       envir = ns)) {
[17:02:37.771]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.771]                         envir = ns)
[17:02:37.771]                       envir <- sys.frame(frame)
[17:02:37.771]                       master <- NULL
[17:02:37.771]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.771]                         !identical(envir, emptyenv())) {
[17:02:37.771]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.771]                           inherits = FALSE)) {
[17:02:37.771]                           master <- get("master", mode = "list", 
[17:02:37.771]                             envir = envir, inherits = FALSE)
[17:02:37.771]                           if (inherits(master, c("SOCKnode", 
[17:02:37.771]                             "SOCK0node"))) {
[17:02:37.771]                             sendCondition <<- function(cond) {
[17:02:37.771]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.771]                                 success = TRUE)
[17:02:37.771]                               parallel_sendData(master, data)
[17:02:37.771]                             }
[17:02:37.771]                             return(sendCondition)
[17:02:37.771]                           }
[17:02:37.771]                         }
[17:02:37.771]                         frame <- frame + 1L
[17:02:37.771]                         envir <- sys.frame(frame)
[17:02:37.771]                       }
[17:02:37.771]                     }
[17:02:37.771]                     sendCondition <<- function(cond) NULL
[17:02:37.771]                   }
[17:02:37.771]                 })
[17:02:37.771]                 withCallingHandlers({
[17:02:37.771]                   {
[17:02:37.771]                     lm(dist ~ speed + I(speed^2), data = cars)
[17:02:37.771]                   }
[17:02:37.771]                 }, immediateCondition = function(cond) {
[17:02:37.771]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.771]                   sendCondition(cond)
[17:02:37.771]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.771]                   {
[17:02:37.771]                     inherits <- base::inherits
[17:02:37.771]                     invokeRestart <- base::invokeRestart
[17:02:37.771]                     is.null <- base::is.null
[17:02:37.771]                     muffled <- FALSE
[17:02:37.771]                     if (inherits(cond, "message")) {
[17:02:37.771]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.771]                       if (muffled) 
[17:02:37.771]                         invokeRestart("muffleMessage")
[17:02:37.771]                     }
[17:02:37.771]                     else if (inherits(cond, "warning")) {
[17:02:37.771]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.771]                       if (muffled) 
[17:02:37.771]                         invokeRestart("muffleWarning")
[17:02:37.771]                     }
[17:02:37.771]                     else if (inherits(cond, "condition")) {
[17:02:37.771]                       if (!is.null(pattern)) {
[17:02:37.771]                         computeRestarts <- base::computeRestarts
[17:02:37.771]                         grepl <- base::grepl
[17:02:37.771]                         restarts <- computeRestarts(cond)
[17:02:37.771]                         for (restart in restarts) {
[17:02:37.771]                           name <- restart$name
[17:02:37.771]                           if (is.null(name)) 
[17:02:37.771]                             next
[17:02:37.771]                           if (!grepl(pattern, name)) 
[17:02:37.771]                             next
[17:02:37.771]                           invokeRestart(restart)
[17:02:37.771]                           muffled <- TRUE
[17:02:37.771]                           break
[17:02:37.771]                         }
[17:02:37.771]                       }
[17:02:37.771]                     }
[17:02:37.771]                     invisible(muffled)
[17:02:37.771]                   }
[17:02:37.771]                   muffleCondition(cond)
[17:02:37.771]                 })
[17:02:37.771]             }))
[17:02:37.771]             future::FutureResult(value = ...future.value$value, 
[17:02:37.771]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.771]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.771]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.771]                     ...future.globalenv.names))
[17:02:37.771]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.771]         }, condition = base::local({
[17:02:37.771]             c <- base::c
[17:02:37.771]             inherits <- base::inherits
[17:02:37.771]             invokeRestart <- base::invokeRestart
[17:02:37.771]             length <- base::length
[17:02:37.771]             list <- base::list
[17:02:37.771]             seq.int <- base::seq.int
[17:02:37.771]             signalCondition <- base::signalCondition
[17:02:37.771]             sys.calls <- base::sys.calls
[17:02:37.771]             `[[` <- base::`[[`
[17:02:37.771]             `+` <- base::`+`
[17:02:37.771]             `<<-` <- base::`<<-`
[17:02:37.771]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.771]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.771]                   3L)]
[17:02:37.771]             }
[17:02:37.771]             function(cond) {
[17:02:37.771]                 is_error <- inherits(cond, "error")
[17:02:37.771]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.771]                   NULL)
[17:02:37.771]                 if (is_error) {
[17:02:37.771]                   sessionInformation <- function() {
[17:02:37.771]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.771]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.771]                       search = base::search(), system = base::Sys.info())
[17:02:37.771]                   }
[17:02:37.771]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.771]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.771]                     cond$call), session = sessionInformation(), 
[17:02:37.771]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.771]                   signalCondition(cond)
[17:02:37.771]                 }
[17:02:37.771]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.771]                 "immediateCondition"))) {
[17:02:37.771]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.771]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.771]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.771]                   if (TRUE && !signal) {
[17:02:37.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.771]                     {
[17:02:37.771]                       inherits <- base::inherits
[17:02:37.771]                       invokeRestart <- base::invokeRestart
[17:02:37.771]                       is.null <- base::is.null
[17:02:37.771]                       muffled <- FALSE
[17:02:37.771]                       if (inherits(cond, "message")) {
[17:02:37.771]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.771]                         if (muffled) 
[17:02:37.771]                           invokeRestart("muffleMessage")
[17:02:37.771]                       }
[17:02:37.771]                       else if (inherits(cond, "warning")) {
[17:02:37.771]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.771]                         if (muffled) 
[17:02:37.771]                           invokeRestart("muffleWarning")
[17:02:37.771]                       }
[17:02:37.771]                       else if (inherits(cond, "condition")) {
[17:02:37.771]                         if (!is.null(pattern)) {
[17:02:37.771]                           computeRestarts <- base::computeRestarts
[17:02:37.771]                           grepl <- base::grepl
[17:02:37.771]                           restarts <- computeRestarts(cond)
[17:02:37.771]                           for (restart in restarts) {
[17:02:37.771]                             name <- restart$name
[17:02:37.771]                             if (is.null(name)) 
[17:02:37.771]                               next
[17:02:37.771]                             if (!grepl(pattern, name)) 
[17:02:37.771]                               next
[17:02:37.771]                             invokeRestart(restart)
[17:02:37.771]                             muffled <- TRUE
[17:02:37.771]                             break
[17:02:37.771]                           }
[17:02:37.771]                         }
[17:02:37.771]                       }
[17:02:37.771]                       invisible(muffled)
[17:02:37.771]                     }
[17:02:37.771]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.771]                   }
[17:02:37.771]                 }
[17:02:37.771]                 else {
[17:02:37.771]                   if (TRUE) {
[17:02:37.771]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.771]                     {
[17:02:37.771]                       inherits <- base::inherits
[17:02:37.771]                       invokeRestart <- base::invokeRestart
[17:02:37.771]                       is.null <- base::is.null
[17:02:37.771]                       muffled <- FALSE
[17:02:37.771]                       if (inherits(cond, "message")) {
[17:02:37.771]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.771]                         if (muffled) 
[17:02:37.771]                           invokeRestart("muffleMessage")
[17:02:37.771]                       }
[17:02:37.771]                       else if (inherits(cond, "warning")) {
[17:02:37.771]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.771]                         if (muffled) 
[17:02:37.771]                           invokeRestart("muffleWarning")
[17:02:37.771]                       }
[17:02:37.771]                       else if (inherits(cond, "condition")) {
[17:02:37.771]                         if (!is.null(pattern)) {
[17:02:37.771]                           computeRestarts <- base::computeRestarts
[17:02:37.771]                           grepl <- base::grepl
[17:02:37.771]                           restarts <- computeRestarts(cond)
[17:02:37.771]                           for (restart in restarts) {
[17:02:37.771]                             name <- restart$name
[17:02:37.771]                             if (is.null(name)) 
[17:02:37.771]                               next
[17:02:37.771]                             if (!grepl(pattern, name)) 
[17:02:37.771]                               next
[17:02:37.771]                             invokeRestart(restart)
[17:02:37.771]                             muffled <- TRUE
[17:02:37.771]                             break
[17:02:37.771]                           }
[17:02:37.771]                         }
[17:02:37.771]                       }
[17:02:37.771]                       invisible(muffled)
[17:02:37.771]                     }
[17:02:37.771]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.771]                   }
[17:02:37.771]                 }
[17:02:37.771]             }
[17:02:37.771]         }))
[17:02:37.771]     }, error = function(ex) {
[17:02:37.771]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.771]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.771]                 ...future.rng), started = ...future.startTime, 
[17:02:37.771]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.771]             version = "1.8"), class = "FutureResult")
[17:02:37.771]     }, finally = {
[17:02:37.771]         if (!identical(...future.workdir, getwd())) 
[17:02:37.771]             setwd(...future.workdir)
[17:02:37.771]         {
[17:02:37.771]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.771]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.771]             }
[17:02:37.771]             base::options(...future.oldOptions)
[17:02:37.771]             if (.Platform$OS.type == "windows") {
[17:02:37.771]                 old_names <- names(...future.oldEnvVars)
[17:02:37.771]                 envs <- base::Sys.getenv()
[17:02:37.771]                 names <- names(envs)
[17:02:37.771]                 common <- intersect(names, old_names)
[17:02:37.771]                 added <- setdiff(names, old_names)
[17:02:37.771]                 removed <- setdiff(old_names, names)
[17:02:37.771]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.771]                   envs[common]]
[17:02:37.771]                 NAMES <- toupper(changed)
[17:02:37.771]                 args <- list()
[17:02:37.771]                 for (kk in seq_along(NAMES)) {
[17:02:37.771]                   name <- changed[[kk]]
[17:02:37.771]                   NAME <- NAMES[[kk]]
[17:02:37.771]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.771]                     next
[17:02:37.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.771]                 }
[17:02:37.771]                 NAMES <- toupper(added)
[17:02:37.771]                 for (kk in seq_along(NAMES)) {
[17:02:37.771]                   name <- added[[kk]]
[17:02:37.771]                   NAME <- NAMES[[kk]]
[17:02:37.771]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.771]                     next
[17:02:37.771]                   args[[name]] <- ""
[17:02:37.771]                 }
[17:02:37.771]                 NAMES <- toupper(removed)
[17:02:37.771]                 for (kk in seq_along(NAMES)) {
[17:02:37.771]                   name <- removed[[kk]]
[17:02:37.771]                   NAME <- NAMES[[kk]]
[17:02:37.771]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.771]                     next
[17:02:37.771]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.771]                 }
[17:02:37.771]                 if (length(args) > 0) 
[17:02:37.771]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.771]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.771]             }
[17:02:37.771]             else {
[17:02:37.771]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.771]             }
[17:02:37.771]             {
[17:02:37.771]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.771]                   0L) {
[17:02:37.771]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.771]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.771]                   base::options(opts)
[17:02:37.771]                 }
[17:02:37.771]                 {
[17:02:37.771]                   {
[17:02:37.771]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.771]                     NULL
[17:02:37.771]                   }
[17:02:37.771]                   options(future.plan = NULL)
[17:02:37.771]                   if (is.na(NA_character_)) 
[17:02:37.771]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.771]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.771]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.771]                     .init = FALSE)
[17:02:37.771]                 }
[17:02:37.771]             }
[17:02:37.771]         }
[17:02:37.771]     })
[17:02:37.771]     if (TRUE) {
[17:02:37.771]         base::sink(type = "output", split = FALSE)
[17:02:37.771]         if (TRUE) {
[17:02:37.771]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.771]         }
[17:02:37.771]         else {
[17:02:37.771]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.771]         }
[17:02:37.771]         base::close(...future.stdout)
[17:02:37.771]         ...future.stdout <- NULL
[17:02:37.771]     }
[17:02:37.771]     ...future.result$conditions <- ...future.conditions
[17:02:37.771]     ...future.result$finished <- base::Sys.time()
[17:02:37.771]     ...future.result
[17:02:37.771] }
[17:02:37.774] MultisessionFuture started
[17:02:37.774] - Launch lazy future ... done
[17:02:37.774] run() for ‘MultisessionFuture’ ... done
[17:02:37.775] result() for ClusterFuture ...
[17:02:37.775] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.775] - Validating connection of MultisessionFuture
[17:02:37.818] - received message: FutureResult
[17:02:37.819] - Received FutureResult
[17:02:37.819] - Erased future from FutureRegistry
[17:02:37.819] result() for ClusterFuture ...
[17:02:37.819] - result already collected: FutureResult
[17:02:37.819] result() for ClusterFuture ... done
[17:02:37.819] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.819] result() for ClusterFuture ... done
[17:02:37.820] result() for ClusterFuture ...
[17:02:37.820] - result already collected: FutureResult
[17:02:37.820] result() for ClusterFuture ... done

Call:
lm(formula = dist ~ speed + I(speed^2), data = cars)

Coefficients:
(Intercept)        speed   I(speed^2)  
    2.47014      0.91329      0.09996  

- Globals - lm(<formula #5 (‘e’)>, data = cars) ...

Call:
lm(formula = dist ~ poly(speed, 2), data = cars)

Coefficients:
    (Intercept)  poly(speed, 2)1  poly(speed, 2)2  
          42.98           145.55            23.00  

[17:02:37.823] getGlobalsAndPackages() ...
[17:02:37.823] Searching for globals...
[17:02:37.824] - globals found: [7] ‘{’, ‘lm’, ‘dist’, ‘poly’, ‘speed’, ‘~’, ‘cars’
[17:02:37.824] Searching for globals ... DONE
[17:02:37.825] Resolving globals: FALSE
[17:02:37.825] 
[17:02:37.825] - packages: [2] ‘stats’, ‘datasets’
[17:02:37.825] getGlobalsAndPackages() ... DONE
[17:02:37.826] run() for ‘Future’ ...
[17:02:37.826] - state: ‘created’
[17:02:37.826] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.840] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.840] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.840]   - Field: ‘node’
[17:02:37.841]   - Field: ‘label’
[17:02:37.841]   - Field: ‘local’
[17:02:37.841]   - Field: ‘owner’
[17:02:37.841]   - Field: ‘envir’
[17:02:37.841]   - Field: ‘workers’
[17:02:37.841]   - Field: ‘packages’
[17:02:37.841]   - Field: ‘gc’
[17:02:37.841]   - Field: ‘conditions’
[17:02:37.841]   - Field: ‘persistent’
[17:02:37.841]   - Field: ‘expr’
[17:02:37.841]   - Field: ‘uuid’
[17:02:37.842]   - Field: ‘seed’
[17:02:37.842]   - Field: ‘version’
[17:02:37.842]   - Field: ‘result’
[17:02:37.842]   - Field: ‘asynchronous’
[17:02:37.842]   - Field: ‘calls’
[17:02:37.842]   - Field: ‘globals’
[17:02:37.842]   - Field: ‘stdout’
[17:02:37.842]   - Field: ‘earlySignal’
[17:02:37.842]   - Field: ‘lazy’
[17:02:37.842]   - Field: ‘state’
[17:02:37.842] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.843] - Launch lazy future ...
[17:02:37.843] Packages needed by the future expression (n = 2): ‘stats’, ‘datasets’
[17:02:37.843] Packages needed by future strategies (n = 0): <none>
[17:02:37.844] {
[17:02:37.844]     {
[17:02:37.844]         {
[17:02:37.844]             ...future.startTime <- base::Sys.time()
[17:02:37.844]             {
[17:02:37.844]                 {
[17:02:37.844]                   {
[17:02:37.844]                     {
[17:02:37.844]                       {
[17:02:37.844]                         base::local({
[17:02:37.844]                           has_future <- base::requireNamespace("future", 
[17:02:37.844]                             quietly = TRUE)
[17:02:37.844]                           if (has_future) {
[17:02:37.844]                             ns <- base::getNamespace("future")
[17:02:37.844]                             version <- ns[[".package"]][["version"]]
[17:02:37.844]                             if (is.null(version)) 
[17:02:37.844]                               version <- utils::packageVersion("future")
[17:02:37.844]                           }
[17:02:37.844]                           else {
[17:02:37.844]                             version <- NULL
[17:02:37.844]                           }
[17:02:37.844]                           if (!has_future || version < "1.8.0") {
[17:02:37.844]                             info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.844]                               "", base::R.version$version.string), 
[17:02:37.844]                               platform = base::sprintf("%s (%s-bit)", 
[17:02:37.844]                                 base::R.version$platform, 8 * 
[17:02:37.844]                                   base::.Machine$sizeof.pointer), 
[17:02:37.844]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.844]                                 "release", "version")], collapse = " "), 
[17:02:37.844]                               hostname = base::Sys.info()[["nodename"]])
[17:02:37.844]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.844]                               info)
[17:02:37.844]                             info <- base::paste(info, collapse = "; ")
[17:02:37.844]                             if (!has_future) {
[17:02:37.844]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.844]                                 info)
[17:02:37.844]                             }
[17:02:37.844]                             else {
[17:02:37.844]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.844]                                 info, version)
[17:02:37.844]                             }
[17:02:37.844]                             base::stop(msg)
[17:02:37.844]                           }
[17:02:37.844]                         })
[17:02:37.844]                       }
[17:02:37.844]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.844]                       base::options(mc.cores = 1L)
[17:02:37.844]                     }
[17:02:37.844]                     base::local({
[17:02:37.844]                       for (pkg in c("stats", "datasets")) {
[17:02:37.844]                         base::loadNamespace(pkg)
[17:02:37.844]                         base::library(pkg, character.only = TRUE)
[17:02:37.844]                       }
[17:02:37.844]                     })
[17:02:37.844]                   }
[17:02:37.844]                   ...future.strategy.old <- future::plan("list")
[17:02:37.844]                   options(future.plan = NULL)
[17:02:37.844]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.844]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.844]                 }
[17:02:37.844]                 ...future.workdir <- getwd()
[17:02:37.844]             }
[17:02:37.844]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.844]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.844]         }
[17:02:37.844]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.844]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.844]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.844]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.844]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.844]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.844]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.844]             base::names(...future.oldOptions))
[17:02:37.844]     }
[17:02:37.844]     if (FALSE) {
[17:02:37.844]     }
[17:02:37.844]     else {
[17:02:37.844]         if (TRUE) {
[17:02:37.844]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.844]                 open = "w")
[17:02:37.844]         }
[17:02:37.844]         else {
[17:02:37.844]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.844]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.844]         }
[17:02:37.844]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.844]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.844]             base::sink(type = "output", split = FALSE)
[17:02:37.844]             base::close(...future.stdout)
[17:02:37.844]         }, add = TRUE)
[17:02:37.844]     }
[17:02:37.844]     ...future.frame <- base::sys.nframe()
[17:02:37.844]     ...future.conditions <- base::list()
[17:02:37.844]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.844]     if (FALSE) {
[17:02:37.844]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.844]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.844]     }
[17:02:37.844]     ...future.result <- base::tryCatch({
[17:02:37.844]         base::withCallingHandlers({
[17:02:37.844]             ...future.value <- base::withVisible(base::local({
[17:02:37.844]                 ...future.makeSendCondition <- base::local({
[17:02:37.844]                   sendCondition <- NULL
[17:02:37.844]                   function(frame = 1L) {
[17:02:37.844]                     if (is.function(sendCondition)) 
[17:02:37.844]                       return(sendCondition)
[17:02:37.844]                     ns <- getNamespace("parallel")
[17:02:37.844]                     if (exists("sendData", mode = "function", 
[17:02:37.844]                       envir = ns)) {
[17:02:37.844]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.844]                         envir = ns)
[17:02:37.844]                       envir <- sys.frame(frame)
[17:02:37.844]                       master <- NULL
[17:02:37.844]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.844]                         !identical(envir, emptyenv())) {
[17:02:37.844]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.844]                           inherits = FALSE)) {
[17:02:37.844]                           master <- get("master", mode = "list", 
[17:02:37.844]                             envir = envir, inherits = FALSE)
[17:02:37.844]                           if (inherits(master, c("SOCKnode", 
[17:02:37.844]                             "SOCK0node"))) {
[17:02:37.844]                             sendCondition <<- function(cond) {
[17:02:37.844]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.844]                                 success = TRUE)
[17:02:37.844]                               parallel_sendData(master, data)
[17:02:37.844]                             }
[17:02:37.844]                             return(sendCondition)
[17:02:37.844]                           }
[17:02:37.844]                         }
[17:02:37.844]                         frame <- frame + 1L
[17:02:37.844]                         envir <- sys.frame(frame)
[17:02:37.844]                       }
[17:02:37.844]                     }
[17:02:37.844]                     sendCondition <<- function(cond) NULL
[17:02:37.844]                   }
[17:02:37.844]                 })
[17:02:37.844]                 withCallingHandlers({
[17:02:37.844]                   {
[17:02:37.844]                     lm(dist ~ poly(speed, 2), data = cars)
[17:02:37.844]                   }
[17:02:37.844]                 }, immediateCondition = function(cond) {
[17:02:37.844]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.844]                   sendCondition(cond)
[17:02:37.844]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.844]                   {
[17:02:37.844]                     inherits <- base::inherits
[17:02:37.844]                     invokeRestart <- base::invokeRestart
[17:02:37.844]                     is.null <- base::is.null
[17:02:37.844]                     muffled <- FALSE
[17:02:37.844]                     if (inherits(cond, "message")) {
[17:02:37.844]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.844]                       if (muffled) 
[17:02:37.844]                         invokeRestart("muffleMessage")
[17:02:37.844]                     }
[17:02:37.844]                     else if (inherits(cond, "warning")) {
[17:02:37.844]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.844]                       if (muffled) 
[17:02:37.844]                         invokeRestart("muffleWarning")
[17:02:37.844]                     }
[17:02:37.844]                     else if (inherits(cond, "condition")) {
[17:02:37.844]                       if (!is.null(pattern)) {
[17:02:37.844]                         computeRestarts <- base::computeRestarts
[17:02:37.844]                         grepl <- base::grepl
[17:02:37.844]                         restarts <- computeRestarts(cond)
[17:02:37.844]                         for (restart in restarts) {
[17:02:37.844]                           name <- restart$name
[17:02:37.844]                           if (is.null(name)) 
[17:02:37.844]                             next
[17:02:37.844]                           if (!grepl(pattern, name)) 
[17:02:37.844]                             next
[17:02:37.844]                           invokeRestart(restart)
[17:02:37.844]                           muffled <- TRUE
[17:02:37.844]                           break
[17:02:37.844]                         }
[17:02:37.844]                       }
[17:02:37.844]                     }
[17:02:37.844]                     invisible(muffled)
[17:02:37.844]                   }
[17:02:37.844]                   muffleCondition(cond)
[17:02:37.844]                 })
[17:02:37.844]             }))
[17:02:37.844]             future::FutureResult(value = ...future.value$value, 
[17:02:37.844]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.844]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.844]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.844]                     ...future.globalenv.names))
[17:02:37.844]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.844]         }, condition = base::local({
[17:02:37.844]             c <- base::c
[17:02:37.844]             inherits <- base::inherits
[17:02:37.844]             invokeRestart <- base::invokeRestart
[17:02:37.844]             length <- base::length
[17:02:37.844]             list <- base::list
[17:02:37.844]             seq.int <- base::seq.int
[17:02:37.844]             signalCondition <- base::signalCondition
[17:02:37.844]             sys.calls <- base::sys.calls
[17:02:37.844]             `[[` <- base::`[[`
[17:02:37.844]             `+` <- base::`+`
[17:02:37.844]             `<<-` <- base::`<<-`
[17:02:37.844]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.844]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.844]                   3L)]
[17:02:37.844]             }
[17:02:37.844]             function(cond) {
[17:02:37.844]                 is_error <- inherits(cond, "error")
[17:02:37.844]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.844]                   NULL)
[17:02:37.844]                 if (is_error) {
[17:02:37.844]                   sessionInformation <- function() {
[17:02:37.844]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.844]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.844]                       search = base::search(), system = base::Sys.info())
[17:02:37.844]                   }
[17:02:37.844]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.844]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.844]                     cond$call), session = sessionInformation(), 
[17:02:37.844]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.844]                   signalCondition(cond)
[17:02:37.844]                 }
[17:02:37.844]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.844]                 "immediateCondition"))) {
[17:02:37.844]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.844]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.844]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.844]                   if (TRUE && !signal) {
[17:02:37.844]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.844]                     {
[17:02:37.844]                       inherits <- base::inherits
[17:02:37.844]                       invokeRestart <- base::invokeRestart
[17:02:37.844]                       is.null <- base::is.null
[17:02:37.844]                       muffled <- FALSE
[17:02:37.844]                       if (inherits(cond, "message")) {
[17:02:37.844]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.844]                         if (muffled) 
[17:02:37.844]                           invokeRestart("muffleMessage")
[17:02:37.844]                       }
[17:02:37.844]                       else if (inherits(cond, "warning")) {
[17:02:37.844]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.844]                         if (muffled) 
[17:02:37.844]                           invokeRestart("muffleWarning")
[17:02:37.844]                       }
[17:02:37.844]                       else if (inherits(cond, "condition")) {
[17:02:37.844]                         if (!is.null(pattern)) {
[17:02:37.844]                           computeRestarts <- base::computeRestarts
[17:02:37.844]                           grepl <- base::grepl
[17:02:37.844]                           restarts <- computeRestarts(cond)
[17:02:37.844]                           for (restart in restarts) {
[17:02:37.844]                             name <- restart$name
[17:02:37.844]                             if (is.null(name)) 
[17:02:37.844]                               next
[17:02:37.844]                             if (!grepl(pattern, name)) 
[17:02:37.844]                               next
[17:02:37.844]                             invokeRestart(restart)
[17:02:37.844]                             muffled <- TRUE
[17:02:37.844]                             break
[17:02:37.844]                           }
[17:02:37.844]                         }
[17:02:37.844]                       }
[17:02:37.844]                       invisible(muffled)
[17:02:37.844]                     }
[17:02:37.844]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.844]                   }
[17:02:37.844]                 }
[17:02:37.844]                 else {
[17:02:37.844]                   if (TRUE) {
[17:02:37.844]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.844]                     {
[17:02:37.844]                       inherits <- base::inherits
[17:02:37.844]                       invokeRestart <- base::invokeRestart
[17:02:37.844]                       is.null <- base::is.null
[17:02:37.844]                       muffled <- FALSE
[17:02:37.844]                       if (inherits(cond, "message")) {
[17:02:37.844]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.844]                         if (muffled) 
[17:02:37.844]                           invokeRestart("muffleMessage")
[17:02:37.844]                       }
[17:02:37.844]                       else if (inherits(cond, "warning")) {
[17:02:37.844]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.844]                         if (muffled) 
[17:02:37.844]                           invokeRestart("muffleWarning")
[17:02:37.844]                       }
[17:02:37.844]                       else if (inherits(cond, "condition")) {
[17:02:37.844]                         if (!is.null(pattern)) {
[17:02:37.844]                           computeRestarts <- base::computeRestarts
[17:02:37.844]                           grepl <- base::grepl
[17:02:37.844]                           restarts <- computeRestarts(cond)
[17:02:37.844]                           for (restart in restarts) {
[17:02:37.844]                             name <- restart$name
[17:02:37.844]                             if (is.null(name)) 
[17:02:37.844]                               next
[17:02:37.844]                             if (!grepl(pattern, name)) 
[17:02:37.844]                               next
[17:02:37.844]                             invokeRestart(restart)
[17:02:37.844]                             muffled <- TRUE
[17:02:37.844]                             break
[17:02:37.844]                           }
[17:02:37.844]                         }
[17:02:37.844]                       }
[17:02:37.844]                       invisible(muffled)
[17:02:37.844]                     }
[17:02:37.844]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.844]                   }
[17:02:37.844]                 }
[17:02:37.844]             }
[17:02:37.844]         }))
[17:02:37.844]     }, error = function(ex) {
[17:02:37.844]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.844]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.844]                 ...future.rng), started = ...future.startTime, 
[17:02:37.844]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.844]             version = "1.8"), class = "FutureResult")
[17:02:37.844]     }, finally = {
[17:02:37.844]         if (!identical(...future.workdir, getwd())) 
[17:02:37.844]             setwd(...future.workdir)
[17:02:37.844]         {
[17:02:37.844]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.844]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.844]             }
[17:02:37.844]             base::options(...future.oldOptions)
[17:02:37.844]             if (.Platform$OS.type == "windows") {
[17:02:37.844]                 old_names <- names(...future.oldEnvVars)
[17:02:37.844]                 envs <- base::Sys.getenv()
[17:02:37.844]                 names <- names(envs)
[17:02:37.844]                 common <- intersect(names, old_names)
[17:02:37.844]                 added <- setdiff(names, old_names)
[17:02:37.844]                 removed <- setdiff(old_names, names)
[17:02:37.844]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.844]                   envs[common]]
[17:02:37.844]                 NAMES <- toupper(changed)
[17:02:37.844]                 args <- list()
[17:02:37.844]                 for (kk in seq_along(NAMES)) {
[17:02:37.844]                   name <- changed[[kk]]
[17:02:37.844]                   NAME <- NAMES[[kk]]
[17:02:37.844]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.844]                     next
[17:02:37.844]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.844]                 }
[17:02:37.844]                 NAMES <- toupper(added)
[17:02:37.844]                 for (kk in seq_along(NAMES)) {
[17:02:37.844]                   name <- added[[kk]]
[17:02:37.844]                   NAME <- NAMES[[kk]]
[17:02:37.844]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.844]                     next
[17:02:37.844]                   args[[name]] <- ""
[17:02:37.844]                 }
[17:02:37.844]                 NAMES <- toupper(removed)
[17:02:37.844]                 for (kk in seq_along(NAMES)) {
[17:02:37.844]                   name <- removed[[kk]]
[17:02:37.844]                   NAME <- NAMES[[kk]]
[17:02:37.844]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.844]                     next
[17:02:37.844]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.844]                 }
[17:02:37.844]                 if (length(args) > 0) 
[17:02:37.844]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.844]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.844]             }
[17:02:37.844]             else {
[17:02:37.844]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.844]             }
[17:02:37.844]             {
[17:02:37.844]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.844]                   0L) {
[17:02:37.844]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.844]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.844]                   base::options(opts)
[17:02:37.844]                 }
[17:02:37.844]                 {
[17:02:37.844]                   {
[17:02:37.844]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.844]                     NULL
[17:02:37.844]                   }
[17:02:37.844]                   options(future.plan = NULL)
[17:02:37.844]                   if (is.na(NA_character_)) 
[17:02:37.844]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.844]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.844]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.844]                     .init = FALSE)
[17:02:37.844]                 }
[17:02:37.844]             }
[17:02:37.844]         }
[17:02:37.844]     })
[17:02:37.844]     if (TRUE) {
[17:02:37.844]         base::sink(type = "output", split = FALSE)
[17:02:37.844]         if (TRUE) {
[17:02:37.844]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.844]         }
[17:02:37.844]         else {
[17:02:37.844]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.844]         }
[17:02:37.844]         base::close(...future.stdout)
[17:02:37.844]         ...future.stdout <- NULL
[17:02:37.844]     }
[17:02:37.844]     ...future.result$conditions <- ...future.conditions
[17:02:37.844]     ...future.result$finished <- base::Sys.time()
[17:02:37.844]     ...future.result
[17:02:37.844] }
[17:02:37.847] MultisessionFuture started
[17:02:37.847] - Launch lazy future ... done
[17:02:37.847] run() for ‘MultisessionFuture’ ... done
[17:02:37.847] result() for ClusterFuture ...
[17:02:37.847] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.847] - Validating connection of MultisessionFuture
[17:02:37.850] - received message: FutureResult
[17:02:37.851] - Received FutureResult
[17:02:37.851] - Erased future from FutureRegistry
[17:02:37.851] result() for ClusterFuture ...
[17:02:37.851] - result already collected: FutureResult
[17:02:37.851] result() for ClusterFuture ... done
[17:02:37.851] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.851] result() for ClusterFuture ... done
[17:02:37.851] result() for ClusterFuture ...
[17:02:37.851] - result already collected: FutureResult
[17:02:37.852] result() for ClusterFuture ... done

Call:
lm(formula = dist ~ poly(speed, 2), data = cars)

Coefficients:
    (Intercept)  poly(speed, 2)1  poly(speed, 2)2  
          42.98           145.55            23.00  

- Globals - map(x, ~ expr) ...
[17:02:37.853] getGlobalsAndPackages() ...
[17:02:37.853] Searching for globals...
[17:02:37.858] - globals found: [16] ‘{’, ‘outer_function’, ‘map’, ‘:’, ‘~’, ‘inner_function’, ‘.x’, ‘if’, ‘inherits’, ‘<-’, ‘[[’, ‘-’, ‘eval’, ‘bquote’, ‘lapply’, ‘+’
[17:02:37.858] Searching for globals ... DONE
[17:02:37.858] Resolving globals: FALSE
[17:02:37.859] The total size of the 3 globals is 7.52 KiB (7704 bytes)
[17:02:37.859] The total size of the 3 globals exported for future expression (‘{; outer_function(1L); }’) is 7.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘map’ (4.43 KiB of class ‘function’), ‘inner_function’ (1.78 KiB of class ‘function’) and ‘outer_function’ (1.31 KiB of class ‘function’)
[17:02:37.859] - globals: [3] ‘outer_function’, ‘map’, ‘inner_function’
[17:02:37.859] 
[17:02:37.859] getGlobalsAndPackages() ... DONE
[17:02:37.860] run() for ‘Future’ ...
[17:02:37.860] - state: ‘created’
[17:02:37.860] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.874] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.874] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.874]   - Field: ‘node’
[17:02:37.874]   - Field: ‘label’
[17:02:37.874]   - Field: ‘local’
[17:02:37.874]   - Field: ‘owner’
[17:02:37.874]   - Field: ‘envir’
[17:02:37.874]   - Field: ‘workers’
[17:02:37.875]   - Field: ‘packages’
[17:02:37.875]   - Field: ‘gc’
[17:02:37.875]   - Field: ‘conditions’
[17:02:37.875]   - Field: ‘persistent’
[17:02:37.875]   - Field: ‘expr’
[17:02:37.875]   - Field: ‘uuid’
[17:02:37.875]   - Field: ‘seed’
[17:02:37.875]   - Field: ‘version’
[17:02:37.875]   - Field: ‘result’
[17:02:37.875]   - Field: ‘asynchronous’
[17:02:37.876]   - Field: ‘calls’
[17:02:37.876]   - Field: ‘globals’
[17:02:37.876]   - Field: ‘stdout’
[17:02:37.876]   - Field: ‘earlySignal’
[17:02:37.876]   - Field: ‘lazy’
[17:02:37.876]   - Field: ‘state’
[17:02:37.876] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.876] - Launch lazy future ...
[17:02:37.876] Packages needed by the future expression (n = 0): <none>
[17:02:37.877] Packages needed by future strategies (n = 0): <none>
[17:02:37.877] {
[17:02:37.877]     {
[17:02:37.877]         {
[17:02:37.877]             ...future.startTime <- base::Sys.time()
[17:02:37.877]             {
[17:02:37.877]                 {
[17:02:37.877]                   {
[17:02:37.877]                     {
[17:02:37.877]                       base::local({
[17:02:37.877]                         has_future <- base::requireNamespace("future", 
[17:02:37.877]                           quietly = TRUE)
[17:02:37.877]                         if (has_future) {
[17:02:37.877]                           ns <- base::getNamespace("future")
[17:02:37.877]                           version <- ns[[".package"]][["version"]]
[17:02:37.877]                           if (is.null(version)) 
[17:02:37.877]                             version <- utils::packageVersion("future")
[17:02:37.877]                         }
[17:02:37.877]                         else {
[17:02:37.877]                           version <- NULL
[17:02:37.877]                         }
[17:02:37.877]                         if (!has_future || version < "1.8.0") {
[17:02:37.877]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.877]                             "", base::R.version$version.string), 
[17:02:37.877]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:37.877]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:37.877]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.877]                               "release", "version")], collapse = " "), 
[17:02:37.877]                             hostname = base::Sys.info()[["nodename"]])
[17:02:37.877]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.877]                             info)
[17:02:37.877]                           info <- base::paste(info, collapse = "; ")
[17:02:37.877]                           if (!has_future) {
[17:02:37.877]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.877]                               info)
[17:02:37.877]                           }
[17:02:37.877]                           else {
[17:02:37.877]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.877]                               info, version)
[17:02:37.877]                           }
[17:02:37.877]                           base::stop(msg)
[17:02:37.877]                         }
[17:02:37.877]                       })
[17:02:37.877]                     }
[17:02:37.877]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.877]                     base::options(mc.cores = 1L)
[17:02:37.877]                   }
[17:02:37.877]                   ...future.strategy.old <- future::plan("list")
[17:02:37.877]                   options(future.plan = NULL)
[17:02:37.877]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.877]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.877]                 }
[17:02:37.877]                 ...future.workdir <- getwd()
[17:02:37.877]             }
[17:02:37.877]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.877]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.877]         }
[17:02:37.877]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.877]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.877]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.877]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.877]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.877]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.877]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.877]             base::names(...future.oldOptions))
[17:02:37.877]     }
[17:02:37.877]     if (FALSE) {
[17:02:37.877]     }
[17:02:37.877]     else {
[17:02:37.877]         if (TRUE) {
[17:02:37.877]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.877]                 open = "w")
[17:02:37.877]         }
[17:02:37.877]         else {
[17:02:37.877]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.877]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.877]         }
[17:02:37.877]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.877]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.877]             base::sink(type = "output", split = FALSE)
[17:02:37.877]             base::close(...future.stdout)
[17:02:37.877]         }, add = TRUE)
[17:02:37.877]     }
[17:02:37.877]     ...future.frame <- base::sys.nframe()
[17:02:37.877]     ...future.conditions <- base::list()
[17:02:37.877]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.877]     if (FALSE) {
[17:02:37.877]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.877]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.877]     }
[17:02:37.877]     ...future.result <- base::tryCatch({
[17:02:37.877]         base::withCallingHandlers({
[17:02:37.877]             ...future.value <- base::withVisible(base::local({
[17:02:37.877]                 ...future.makeSendCondition <- base::local({
[17:02:37.877]                   sendCondition <- NULL
[17:02:37.877]                   function(frame = 1L) {
[17:02:37.877]                     if (is.function(sendCondition)) 
[17:02:37.877]                       return(sendCondition)
[17:02:37.877]                     ns <- getNamespace("parallel")
[17:02:37.877]                     if (exists("sendData", mode = "function", 
[17:02:37.877]                       envir = ns)) {
[17:02:37.877]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.877]                         envir = ns)
[17:02:37.877]                       envir <- sys.frame(frame)
[17:02:37.877]                       master <- NULL
[17:02:37.877]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.877]                         !identical(envir, emptyenv())) {
[17:02:37.877]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.877]                           inherits = FALSE)) {
[17:02:37.877]                           master <- get("master", mode = "list", 
[17:02:37.877]                             envir = envir, inherits = FALSE)
[17:02:37.877]                           if (inherits(master, c("SOCKnode", 
[17:02:37.877]                             "SOCK0node"))) {
[17:02:37.877]                             sendCondition <<- function(cond) {
[17:02:37.877]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.877]                                 success = TRUE)
[17:02:37.877]                               parallel_sendData(master, data)
[17:02:37.877]                             }
[17:02:37.877]                             return(sendCondition)
[17:02:37.877]                           }
[17:02:37.877]                         }
[17:02:37.877]                         frame <- frame + 1L
[17:02:37.877]                         envir <- sys.frame(frame)
[17:02:37.877]                       }
[17:02:37.877]                     }
[17:02:37.877]                     sendCondition <<- function(cond) NULL
[17:02:37.877]                   }
[17:02:37.877]                 })
[17:02:37.877]                 withCallingHandlers({
[17:02:37.877]                   {
[17:02:37.877]                     outer_function(1L)
[17:02:37.877]                   }
[17:02:37.877]                 }, immediateCondition = function(cond) {
[17:02:37.877]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.877]                   sendCondition(cond)
[17:02:37.877]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.877]                   {
[17:02:37.877]                     inherits <- base::inherits
[17:02:37.877]                     invokeRestart <- base::invokeRestart
[17:02:37.877]                     is.null <- base::is.null
[17:02:37.877]                     muffled <- FALSE
[17:02:37.877]                     if (inherits(cond, "message")) {
[17:02:37.877]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.877]                       if (muffled) 
[17:02:37.877]                         invokeRestart("muffleMessage")
[17:02:37.877]                     }
[17:02:37.877]                     else if (inherits(cond, "warning")) {
[17:02:37.877]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.877]                       if (muffled) 
[17:02:37.877]                         invokeRestart("muffleWarning")
[17:02:37.877]                     }
[17:02:37.877]                     else if (inherits(cond, "condition")) {
[17:02:37.877]                       if (!is.null(pattern)) {
[17:02:37.877]                         computeRestarts <- base::computeRestarts
[17:02:37.877]                         grepl <- base::grepl
[17:02:37.877]                         restarts <- computeRestarts(cond)
[17:02:37.877]                         for (restart in restarts) {
[17:02:37.877]                           name <- restart$name
[17:02:37.877]                           if (is.null(name)) 
[17:02:37.877]                             next
[17:02:37.877]                           if (!grepl(pattern, name)) 
[17:02:37.877]                             next
[17:02:37.877]                           invokeRestart(restart)
[17:02:37.877]                           muffled <- TRUE
[17:02:37.877]                           break
[17:02:37.877]                         }
[17:02:37.877]                       }
[17:02:37.877]                     }
[17:02:37.877]                     invisible(muffled)
[17:02:37.877]                   }
[17:02:37.877]                   muffleCondition(cond)
[17:02:37.877]                 })
[17:02:37.877]             }))
[17:02:37.877]             future::FutureResult(value = ...future.value$value, 
[17:02:37.877]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.877]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.877]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.877]                     ...future.globalenv.names))
[17:02:37.877]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.877]         }, condition = base::local({
[17:02:37.877]             c <- base::c
[17:02:37.877]             inherits <- base::inherits
[17:02:37.877]             invokeRestart <- base::invokeRestart
[17:02:37.877]             length <- base::length
[17:02:37.877]             list <- base::list
[17:02:37.877]             seq.int <- base::seq.int
[17:02:37.877]             signalCondition <- base::signalCondition
[17:02:37.877]             sys.calls <- base::sys.calls
[17:02:37.877]             `[[` <- base::`[[`
[17:02:37.877]             `+` <- base::`+`
[17:02:37.877]             `<<-` <- base::`<<-`
[17:02:37.877]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.877]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.877]                   3L)]
[17:02:37.877]             }
[17:02:37.877]             function(cond) {
[17:02:37.877]                 is_error <- inherits(cond, "error")
[17:02:37.877]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.877]                   NULL)
[17:02:37.877]                 if (is_error) {
[17:02:37.877]                   sessionInformation <- function() {
[17:02:37.877]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.877]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.877]                       search = base::search(), system = base::Sys.info())
[17:02:37.877]                   }
[17:02:37.877]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.877]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.877]                     cond$call), session = sessionInformation(), 
[17:02:37.877]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.877]                   signalCondition(cond)
[17:02:37.877]                 }
[17:02:37.877]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.877]                 "immediateCondition"))) {
[17:02:37.877]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.877]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.877]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.877]                   if (TRUE && !signal) {
[17:02:37.877]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.877]                     {
[17:02:37.877]                       inherits <- base::inherits
[17:02:37.877]                       invokeRestart <- base::invokeRestart
[17:02:37.877]                       is.null <- base::is.null
[17:02:37.877]                       muffled <- FALSE
[17:02:37.877]                       if (inherits(cond, "message")) {
[17:02:37.877]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.877]                         if (muffled) 
[17:02:37.877]                           invokeRestart("muffleMessage")
[17:02:37.877]                       }
[17:02:37.877]                       else if (inherits(cond, "warning")) {
[17:02:37.877]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.877]                         if (muffled) 
[17:02:37.877]                           invokeRestart("muffleWarning")
[17:02:37.877]                       }
[17:02:37.877]                       else if (inherits(cond, "condition")) {
[17:02:37.877]                         if (!is.null(pattern)) {
[17:02:37.877]                           computeRestarts <- base::computeRestarts
[17:02:37.877]                           grepl <- base::grepl
[17:02:37.877]                           restarts <- computeRestarts(cond)
[17:02:37.877]                           for (restart in restarts) {
[17:02:37.877]                             name <- restart$name
[17:02:37.877]                             if (is.null(name)) 
[17:02:37.877]                               next
[17:02:37.877]                             if (!grepl(pattern, name)) 
[17:02:37.877]                               next
[17:02:37.877]                             invokeRestart(restart)
[17:02:37.877]                             muffled <- TRUE
[17:02:37.877]                             break
[17:02:37.877]                           }
[17:02:37.877]                         }
[17:02:37.877]                       }
[17:02:37.877]                       invisible(muffled)
[17:02:37.877]                     }
[17:02:37.877]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.877]                   }
[17:02:37.877]                 }
[17:02:37.877]                 else {
[17:02:37.877]                   if (TRUE) {
[17:02:37.877]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.877]                     {
[17:02:37.877]                       inherits <- base::inherits
[17:02:37.877]                       invokeRestart <- base::invokeRestart
[17:02:37.877]                       is.null <- base::is.null
[17:02:37.877]                       muffled <- FALSE
[17:02:37.877]                       if (inherits(cond, "message")) {
[17:02:37.877]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.877]                         if (muffled) 
[17:02:37.877]                           invokeRestart("muffleMessage")
[17:02:37.877]                       }
[17:02:37.877]                       else if (inherits(cond, "warning")) {
[17:02:37.877]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.877]                         if (muffled) 
[17:02:37.877]                           invokeRestart("muffleWarning")
[17:02:37.877]                       }
[17:02:37.877]                       else if (inherits(cond, "condition")) {
[17:02:37.877]                         if (!is.null(pattern)) {
[17:02:37.877]                           computeRestarts <- base::computeRestarts
[17:02:37.877]                           grepl <- base::grepl
[17:02:37.877]                           restarts <- computeRestarts(cond)
[17:02:37.877]                           for (restart in restarts) {
[17:02:37.877]                             name <- restart$name
[17:02:37.877]                             if (is.null(name)) 
[17:02:37.877]                               next
[17:02:37.877]                             if (!grepl(pattern, name)) 
[17:02:37.877]                               next
[17:02:37.877]                             invokeRestart(restart)
[17:02:37.877]                             muffled <- TRUE
[17:02:37.877]                             break
[17:02:37.877]                           }
[17:02:37.877]                         }
[17:02:37.877]                       }
[17:02:37.877]                       invisible(muffled)
[17:02:37.877]                     }
[17:02:37.877]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.877]                   }
[17:02:37.877]                 }
[17:02:37.877]             }
[17:02:37.877]         }))
[17:02:37.877]     }, error = function(ex) {
[17:02:37.877]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.877]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.877]                 ...future.rng), started = ...future.startTime, 
[17:02:37.877]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.877]             version = "1.8"), class = "FutureResult")
[17:02:37.877]     }, finally = {
[17:02:37.877]         if (!identical(...future.workdir, getwd())) 
[17:02:37.877]             setwd(...future.workdir)
[17:02:37.877]         {
[17:02:37.877]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.877]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.877]             }
[17:02:37.877]             base::options(...future.oldOptions)
[17:02:37.877]             if (.Platform$OS.type == "windows") {
[17:02:37.877]                 old_names <- names(...future.oldEnvVars)
[17:02:37.877]                 envs <- base::Sys.getenv()
[17:02:37.877]                 names <- names(envs)
[17:02:37.877]                 common <- intersect(names, old_names)
[17:02:37.877]                 added <- setdiff(names, old_names)
[17:02:37.877]                 removed <- setdiff(old_names, names)
[17:02:37.877]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.877]                   envs[common]]
[17:02:37.877]                 NAMES <- toupper(changed)
[17:02:37.877]                 args <- list()
[17:02:37.877]                 for (kk in seq_along(NAMES)) {
[17:02:37.877]                   name <- changed[[kk]]
[17:02:37.877]                   NAME <- NAMES[[kk]]
[17:02:37.877]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.877]                     next
[17:02:37.877]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.877]                 }
[17:02:37.877]                 NAMES <- toupper(added)
[17:02:37.877]                 for (kk in seq_along(NAMES)) {
[17:02:37.877]                   name <- added[[kk]]
[17:02:37.877]                   NAME <- NAMES[[kk]]
[17:02:37.877]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.877]                     next
[17:02:37.877]                   args[[name]] <- ""
[17:02:37.877]                 }
[17:02:37.877]                 NAMES <- toupper(removed)
[17:02:37.877]                 for (kk in seq_along(NAMES)) {
[17:02:37.877]                   name <- removed[[kk]]
[17:02:37.877]                   NAME <- NAMES[[kk]]
[17:02:37.877]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.877]                     next
[17:02:37.877]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.877]                 }
[17:02:37.877]                 if (length(args) > 0) 
[17:02:37.877]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.877]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.877]             }
[17:02:37.877]             else {
[17:02:37.877]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.877]             }
[17:02:37.877]             {
[17:02:37.877]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.877]                   0L) {
[17:02:37.877]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.877]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.877]                   base::options(opts)
[17:02:37.877]                 }
[17:02:37.877]                 {
[17:02:37.877]                   {
[17:02:37.877]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.877]                     NULL
[17:02:37.877]                   }
[17:02:37.877]                   options(future.plan = NULL)
[17:02:37.877]                   if (is.na(NA_character_)) 
[17:02:37.877]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.877]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.877]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.877]                     .init = FALSE)
[17:02:37.877]                 }
[17:02:37.877]             }
[17:02:37.877]         }
[17:02:37.877]     })
[17:02:37.877]     if (TRUE) {
[17:02:37.877]         base::sink(type = "output", split = FALSE)
[17:02:37.877]         if (TRUE) {
[17:02:37.877]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.877]         }
[17:02:37.877]         else {
[17:02:37.877]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.877]         }
[17:02:37.877]         base::close(...future.stdout)
[17:02:37.877]         ...future.stdout <- NULL
[17:02:37.877]     }
[17:02:37.877]     ...future.result$conditions <- ...future.conditions
[17:02:37.877]     ...future.result$finished <- base::Sys.time()
[17:02:37.877]     ...future.result
[17:02:37.877] }
[17:02:37.882] Exporting 3 global objects (7.52 KiB) to cluster node #1 ...
[17:02:37.882] Exporting ‘outer_function’ (1.31 KiB) to cluster node #1 ...
[17:02:37.883] Exporting ‘outer_function’ (1.31 KiB) to cluster node #1 ... DONE
[17:02:37.883] Exporting ‘map’ (4.43 KiB) to cluster node #1 ...
[17:02:37.883] Exporting ‘map’ (4.43 KiB) to cluster node #1 ... DONE
[17:02:37.883] Exporting ‘inner_function’ (1.78 KiB) to cluster node #1 ...
[17:02:37.884] Exporting ‘inner_function’ (1.78 KiB) to cluster node #1 ... DONE
[17:02:37.884] Exporting 3 global objects (7.52 KiB) to cluster node #1 ... DONE
[17:02:37.884] MultisessionFuture started
[17:02:37.884] - Launch lazy future ... done
[17:02:37.884] run() for ‘MultisessionFuture’ ... done
[17:02:37.885] result() for ClusterFuture ...
[17:02:37.885] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.885] - Validating connection of MultisessionFuture
[17:02:37.891] - received message: FutureResult
[17:02:37.891] - Received FutureResult
[17:02:37.891] - Erased future from FutureRegistry
[17:02:37.891] result() for ClusterFuture ...
[17:02:37.891] - result already collected: FutureResult
[17:02:37.891] result() for ClusterFuture ... done
[17:02:37.891] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.891] result() for ClusterFuture ... done
[17:02:37.892] result() for ClusterFuture ...
[17:02:37.892] - result already collected: FutureResult
[17:02:37.892] result() for ClusterFuture ... done
List of 2
 $ : num [1:2] 2 3
 $ : num [1:2] 2 3
[17:02:37.893] getGlobalsAndPackages() ...
[17:02:37.893] Searching for globals...
[17:02:37.897] - globals found: [16] ‘{’, ‘outer_function’, ‘map’, ‘:’, ‘~’, ‘inner_function’, ‘.x’, ‘if’, ‘inherits’, ‘<-’, ‘[[’, ‘-’, ‘eval’, ‘bquote’, ‘lapply’, ‘+’
[17:02:37.898] Searching for globals ... DONE
[17:02:37.898] Resolving globals: FALSE
[17:02:37.898] The total size of the 3 globals is 7.52 KiB (7704 bytes)
[17:02:37.899] The total size of the 3 globals exported for future expression (‘{; outer_function(1L); }’) is 7.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘map’ (4.43 KiB of class ‘function’), ‘inner_function’ (1.78 KiB of class ‘function’) and ‘outer_function’ (1.31 KiB of class ‘function’)
[17:02:37.899] - globals: [3] ‘outer_function’, ‘map’, ‘inner_function’
[17:02:37.899] 
[17:02:37.899] getGlobalsAndPackages() ... DONE
[17:02:37.899] run() for ‘Future’ ...
[17:02:37.899] - state: ‘created’
[17:02:37.900] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:37.914] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:37.914] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:37.914]   - Field: ‘node’
[17:02:37.914]   - Field: ‘label’
[17:02:37.915]   - Field: ‘local’
[17:02:37.915]   - Field: ‘owner’
[17:02:37.915]   - Field: ‘envir’
[17:02:37.915]   - Field: ‘workers’
[17:02:37.915]   - Field: ‘packages’
[17:02:37.915]   - Field: ‘gc’
[17:02:37.915]   - Field: ‘conditions’
[17:02:37.915]   - Field: ‘persistent’
[17:02:37.915]   - Field: ‘expr’
[17:02:37.915]   - Field: ‘uuid’
[17:02:37.915]   - Field: ‘seed’
[17:02:37.916]   - Field: ‘version’
[17:02:37.916]   - Field: ‘result’
[17:02:37.916]   - Field: ‘asynchronous’
[17:02:37.916]   - Field: ‘calls’
[17:02:37.916]   - Field: ‘globals’
[17:02:37.916]   - Field: ‘stdout’
[17:02:37.916]   - Field: ‘earlySignal’
[17:02:37.916]   - Field: ‘lazy’
[17:02:37.916]   - Field: ‘state’
[17:02:37.916] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:37.916] - Launch lazy future ...
[17:02:37.917] Packages needed by the future expression (n = 0): <none>
[17:02:37.917] Packages needed by future strategies (n = 0): <none>
[17:02:37.917] {
[17:02:37.917]     {
[17:02:37.917]         {
[17:02:37.917]             ...future.startTime <- base::Sys.time()
[17:02:37.917]             {
[17:02:37.917]                 {
[17:02:37.917]                   {
[17:02:37.917]                     {
[17:02:37.917]                       base::local({
[17:02:37.917]                         has_future <- base::requireNamespace("future", 
[17:02:37.917]                           quietly = TRUE)
[17:02:37.917]                         if (has_future) {
[17:02:37.917]                           ns <- base::getNamespace("future")
[17:02:37.917]                           version <- ns[[".package"]][["version"]]
[17:02:37.917]                           if (is.null(version)) 
[17:02:37.917]                             version <- utils::packageVersion("future")
[17:02:37.917]                         }
[17:02:37.917]                         else {
[17:02:37.917]                           version <- NULL
[17:02:37.917]                         }
[17:02:37.917]                         if (!has_future || version < "1.8.0") {
[17:02:37.917]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:37.917]                             "", base::R.version$version.string), 
[17:02:37.917]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:37.917]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:37.917]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:37.917]                               "release", "version")], collapse = " "), 
[17:02:37.917]                             hostname = base::Sys.info()[["nodename"]])
[17:02:37.917]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:37.917]                             info)
[17:02:37.917]                           info <- base::paste(info, collapse = "; ")
[17:02:37.917]                           if (!has_future) {
[17:02:37.917]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:37.917]                               info)
[17:02:37.917]                           }
[17:02:37.917]                           else {
[17:02:37.917]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:37.917]                               info, version)
[17:02:37.917]                           }
[17:02:37.917]                           base::stop(msg)
[17:02:37.917]                         }
[17:02:37.917]                       })
[17:02:37.917]                     }
[17:02:37.917]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:37.917]                     base::options(mc.cores = 1L)
[17:02:37.917]                   }
[17:02:37.917]                   ...future.strategy.old <- future::plan("list")
[17:02:37.917]                   options(future.plan = NULL)
[17:02:37.917]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.917]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:37.917]                 }
[17:02:37.917]                 ...future.workdir <- getwd()
[17:02:37.917]             }
[17:02:37.917]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:37.917]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:37.917]         }
[17:02:37.917]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:37.917]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:37.917]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:37.917]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:37.917]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:37.917]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:37.917]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:37.917]             base::names(...future.oldOptions))
[17:02:37.917]     }
[17:02:37.917]     if (FALSE) {
[17:02:37.917]     }
[17:02:37.917]     else {
[17:02:37.917]         if (TRUE) {
[17:02:37.917]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:37.917]                 open = "w")
[17:02:37.917]         }
[17:02:37.917]         else {
[17:02:37.917]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:37.917]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:37.917]         }
[17:02:37.917]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:37.917]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:37.917]             base::sink(type = "output", split = FALSE)
[17:02:37.917]             base::close(...future.stdout)
[17:02:37.917]         }, add = TRUE)
[17:02:37.917]     }
[17:02:37.917]     ...future.frame <- base::sys.nframe()
[17:02:37.917]     ...future.conditions <- base::list()
[17:02:37.917]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:37.917]     if (FALSE) {
[17:02:37.917]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:37.917]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:37.917]     }
[17:02:37.917]     ...future.result <- base::tryCatch({
[17:02:37.917]         base::withCallingHandlers({
[17:02:37.917]             ...future.value <- base::withVisible(base::local({
[17:02:37.917]                 ...future.makeSendCondition <- base::local({
[17:02:37.917]                   sendCondition <- NULL
[17:02:37.917]                   function(frame = 1L) {
[17:02:37.917]                     if (is.function(sendCondition)) 
[17:02:37.917]                       return(sendCondition)
[17:02:37.917]                     ns <- getNamespace("parallel")
[17:02:37.917]                     if (exists("sendData", mode = "function", 
[17:02:37.917]                       envir = ns)) {
[17:02:37.917]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:37.917]                         envir = ns)
[17:02:37.917]                       envir <- sys.frame(frame)
[17:02:37.917]                       master <- NULL
[17:02:37.917]                       while (!identical(envir, .GlobalEnv) && 
[17:02:37.917]                         !identical(envir, emptyenv())) {
[17:02:37.917]                         if (exists("master", mode = "list", envir = envir, 
[17:02:37.917]                           inherits = FALSE)) {
[17:02:37.917]                           master <- get("master", mode = "list", 
[17:02:37.917]                             envir = envir, inherits = FALSE)
[17:02:37.917]                           if (inherits(master, c("SOCKnode", 
[17:02:37.917]                             "SOCK0node"))) {
[17:02:37.917]                             sendCondition <<- function(cond) {
[17:02:37.917]                               data <- list(type = "VALUE", value = cond, 
[17:02:37.917]                                 success = TRUE)
[17:02:37.917]                               parallel_sendData(master, data)
[17:02:37.917]                             }
[17:02:37.917]                             return(sendCondition)
[17:02:37.917]                           }
[17:02:37.917]                         }
[17:02:37.917]                         frame <- frame + 1L
[17:02:37.917]                         envir <- sys.frame(frame)
[17:02:37.917]                       }
[17:02:37.917]                     }
[17:02:37.917]                     sendCondition <<- function(cond) NULL
[17:02:37.917]                   }
[17:02:37.917]                 })
[17:02:37.917]                 withCallingHandlers({
[17:02:37.917]                   {
[17:02:37.917]                     outer_function(1L)
[17:02:37.917]                   }
[17:02:37.917]                 }, immediateCondition = function(cond) {
[17:02:37.917]                   sendCondition <- ...future.makeSendCondition()
[17:02:37.917]                   sendCondition(cond)
[17:02:37.917]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.917]                   {
[17:02:37.917]                     inherits <- base::inherits
[17:02:37.917]                     invokeRestart <- base::invokeRestart
[17:02:37.917]                     is.null <- base::is.null
[17:02:37.917]                     muffled <- FALSE
[17:02:37.917]                     if (inherits(cond, "message")) {
[17:02:37.917]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:37.917]                       if (muffled) 
[17:02:37.917]                         invokeRestart("muffleMessage")
[17:02:37.917]                     }
[17:02:37.917]                     else if (inherits(cond, "warning")) {
[17:02:37.917]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:37.917]                       if (muffled) 
[17:02:37.917]                         invokeRestart("muffleWarning")
[17:02:37.917]                     }
[17:02:37.917]                     else if (inherits(cond, "condition")) {
[17:02:37.917]                       if (!is.null(pattern)) {
[17:02:37.917]                         computeRestarts <- base::computeRestarts
[17:02:37.917]                         grepl <- base::grepl
[17:02:37.917]                         restarts <- computeRestarts(cond)
[17:02:37.917]                         for (restart in restarts) {
[17:02:37.917]                           name <- restart$name
[17:02:37.917]                           if (is.null(name)) 
[17:02:37.917]                             next
[17:02:37.917]                           if (!grepl(pattern, name)) 
[17:02:37.917]                             next
[17:02:37.917]                           invokeRestart(restart)
[17:02:37.917]                           muffled <- TRUE
[17:02:37.917]                           break
[17:02:37.917]                         }
[17:02:37.917]                       }
[17:02:37.917]                     }
[17:02:37.917]                     invisible(muffled)
[17:02:37.917]                   }
[17:02:37.917]                   muffleCondition(cond)
[17:02:37.917]                 })
[17:02:37.917]             }))
[17:02:37.917]             future::FutureResult(value = ...future.value$value, 
[17:02:37.917]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.917]                   ...future.rng), globalenv = if (FALSE) 
[17:02:37.917]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:37.917]                     ...future.globalenv.names))
[17:02:37.917]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:37.917]         }, condition = base::local({
[17:02:37.917]             c <- base::c
[17:02:37.917]             inherits <- base::inherits
[17:02:37.917]             invokeRestart <- base::invokeRestart
[17:02:37.917]             length <- base::length
[17:02:37.917]             list <- base::list
[17:02:37.917]             seq.int <- base::seq.int
[17:02:37.917]             signalCondition <- base::signalCondition
[17:02:37.917]             sys.calls <- base::sys.calls
[17:02:37.917]             `[[` <- base::`[[`
[17:02:37.917]             `+` <- base::`+`
[17:02:37.917]             `<<-` <- base::`<<-`
[17:02:37.917]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:37.917]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:37.917]                   3L)]
[17:02:37.917]             }
[17:02:37.917]             function(cond) {
[17:02:37.917]                 is_error <- inherits(cond, "error")
[17:02:37.917]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:37.917]                   NULL)
[17:02:37.917]                 if (is_error) {
[17:02:37.917]                   sessionInformation <- function() {
[17:02:37.917]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:37.917]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:37.917]                       search = base::search(), system = base::Sys.info())
[17:02:37.917]                   }
[17:02:37.917]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.917]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:37.917]                     cond$call), session = sessionInformation(), 
[17:02:37.917]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:37.917]                   signalCondition(cond)
[17:02:37.917]                 }
[17:02:37.917]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:37.917]                 "immediateCondition"))) {
[17:02:37.917]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:37.917]                   ...future.conditions[[length(...future.conditions) + 
[17:02:37.917]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:37.917]                   if (TRUE && !signal) {
[17:02:37.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.917]                     {
[17:02:37.917]                       inherits <- base::inherits
[17:02:37.917]                       invokeRestart <- base::invokeRestart
[17:02:37.917]                       is.null <- base::is.null
[17:02:37.917]                       muffled <- FALSE
[17:02:37.917]                       if (inherits(cond, "message")) {
[17:02:37.917]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.917]                         if (muffled) 
[17:02:37.917]                           invokeRestart("muffleMessage")
[17:02:37.917]                       }
[17:02:37.917]                       else if (inherits(cond, "warning")) {
[17:02:37.917]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.917]                         if (muffled) 
[17:02:37.917]                           invokeRestart("muffleWarning")
[17:02:37.917]                       }
[17:02:37.917]                       else if (inherits(cond, "condition")) {
[17:02:37.917]                         if (!is.null(pattern)) {
[17:02:37.917]                           computeRestarts <- base::computeRestarts
[17:02:37.917]                           grepl <- base::grepl
[17:02:37.917]                           restarts <- computeRestarts(cond)
[17:02:37.917]                           for (restart in restarts) {
[17:02:37.917]                             name <- restart$name
[17:02:37.917]                             if (is.null(name)) 
[17:02:37.917]                               next
[17:02:37.917]                             if (!grepl(pattern, name)) 
[17:02:37.917]                               next
[17:02:37.917]                             invokeRestart(restart)
[17:02:37.917]                             muffled <- TRUE
[17:02:37.917]                             break
[17:02:37.917]                           }
[17:02:37.917]                         }
[17:02:37.917]                       }
[17:02:37.917]                       invisible(muffled)
[17:02:37.917]                     }
[17:02:37.917]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.917]                   }
[17:02:37.917]                 }
[17:02:37.917]                 else {
[17:02:37.917]                   if (TRUE) {
[17:02:37.917]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:37.917]                     {
[17:02:37.917]                       inherits <- base::inherits
[17:02:37.917]                       invokeRestart <- base::invokeRestart
[17:02:37.917]                       is.null <- base::is.null
[17:02:37.917]                       muffled <- FALSE
[17:02:37.917]                       if (inherits(cond, "message")) {
[17:02:37.917]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:37.917]                         if (muffled) 
[17:02:37.917]                           invokeRestart("muffleMessage")
[17:02:37.917]                       }
[17:02:37.917]                       else if (inherits(cond, "warning")) {
[17:02:37.917]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:37.917]                         if (muffled) 
[17:02:37.917]                           invokeRestart("muffleWarning")
[17:02:37.917]                       }
[17:02:37.917]                       else if (inherits(cond, "condition")) {
[17:02:37.917]                         if (!is.null(pattern)) {
[17:02:37.917]                           computeRestarts <- base::computeRestarts
[17:02:37.917]                           grepl <- base::grepl
[17:02:37.917]                           restarts <- computeRestarts(cond)
[17:02:37.917]                           for (restart in restarts) {
[17:02:37.917]                             name <- restart$name
[17:02:37.917]                             if (is.null(name)) 
[17:02:37.917]                               next
[17:02:37.917]                             if (!grepl(pattern, name)) 
[17:02:37.917]                               next
[17:02:37.917]                             invokeRestart(restart)
[17:02:37.917]                             muffled <- TRUE
[17:02:37.917]                             break
[17:02:37.917]                           }
[17:02:37.917]                         }
[17:02:37.917]                       }
[17:02:37.917]                       invisible(muffled)
[17:02:37.917]                     }
[17:02:37.917]                     muffleCondition(cond, pattern = "^muffle")
[17:02:37.917]                   }
[17:02:37.917]                 }
[17:02:37.917]             }
[17:02:37.917]         }))
[17:02:37.917]     }, error = function(ex) {
[17:02:37.917]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:37.917]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:37.917]                 ...future.rng), started = ...future.startTime, 
[17:02:37.917]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:37.917]             version = "1.8"), class = "FutureResult")
[17:02:37.917]     }, finally = {
[17:02:37.917]         if (!identical(...future.workdir, getwd())) 
[17:02:37.917]             setwd(...future.workdir)
[17:02:37.917]         {
[17:02:37.917]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:37.917]                 ...future.oldOptions$nwarnings <- NULL
[17:02:37.917]             }
[17:02:37.917]             base::options(...future.oldOptions)
[17:02:37.917]             if (.Platform$OS.type == "windows") {
[17:02:37.917]                 old_names <- names(...future.oldEnvVars)
[17:02:37.917]                 envs <- base::Sys.getenv()
[17:02:37.917]                 names <- names(envs)
[17:02:37.917]                 common <- intersect(names, old_names)
[17:02:37.917]                 added <- setdiff(names, old_names)
[17:02:37.917]                 removed <- setdiff(old_names, names)
[17:02:37.917]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:37.917]                   envs[common]]
[17:02:37.917]                 NAMES <- toupper(changed)
[17:02:37.917]                 args <- list()
[17:02:37.917]                 for (kk in seq_along(NAMES)) {
[17:02:37.917]                   name <- changed[[kk]]
[17:02:37.917]                   NAME <- NAMES[[kk]]
[17:02:37.917]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.917]                     next
[17:02:37.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.917]                 }
[17:02:37.917]                 NAMES <- toupper(added)
[17:02:37.917]                 for (kk in seq_along(NAMES)) {
[17:02:37.917]                   name <- added[[kk]]
[17:02:37.917]                   NAME <- NAMES[[kk]]
[17:02:37.917]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.917]                     next
[17:02:37.917]                   args[[name]] <- ""
[17:02:37.917]                 }
[17:02:37.917]                 NAMES <- toupper(removed)
[17:02:37.917]                 for (kk in seq_along(NAMES)) {
[17:02:37.917]                   name <- removed[[kk]]
[17:02:37.917]                   NAME <- NAMES[[kk]]
[17:02:37.917]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:37.917]                     next
[17:02:37.917]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:37.917]                 }
[17:02:37.917]                 if (length(args) > 0) 
[17:02:37.917]                   base::do.call(base::Sys.setenv, args = args)
[17:02:37.917]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:37.917]             }
[17:02:37.917]             else {
[17:02:37.917]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:37.917]             }
[17:02:37.917]             {
[17:02:37.917]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:37.917]                   0L) {
[17:02:37.917]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:37.917]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:37.917]                   base::options(opts)
[17:02:37.917]                 }
[17:02:37.917]                 {
[17:02:37.917]                   {
[17:02:37.917]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:37.917]                     NULL
[17:02:37.917]                   }
[17:02:37.917]                   options(future.plan = NULL)
[17:02:37.917]                   if (is.na(NA_character_)) 
[17:02:37.917]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:37.917]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:37.917]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:37.917]                     .init = FALSE)
[17:02:37.917]                 }
[17:02:37.917]             }
[17:02:37.917]         }
[17:02:37.917]     })
[17:02:37.917]     if (TRUE) {
[17:02:37.917]         base::sink(type = "output", split = FALSE)
[17:02:37.917]         if (TRUE) {
[17:02:37.917]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:37.917]         }
[17:02:37.917]         else {
[17:02:37.917]             ...future.result["stdout"] <- base::list(NULL)
[17:02:37.917]         }
[17:02:37.917]         base::close(...future.stdout)
[17:02:37.917]         ...future.stdout <- NULL
[17:02:37.917]     }
[17:02:37.917]     ...future.result$conditions <- ...future.conditions
[17:02:37.917]     ...future.result$finished <- base::Sys.time()
[17:02:37.917]     ...future.result
[17:02:37.917] }
[17:02:37.920] Exporting 3 global objects (7.52 KiB) to cluster node #1 ...
[17:02:37.920] Exporting ‘outer_function’ (1.31 KiB) to cluster node #1 ...
[17:02:37.920] Exporting ‘outer_function’ (1.31 KiB) to cluster node #1 ... DONE
[17:02:37.921] Exporting ‘map’ (4.43 KiB) to cluster node #1 ...
[17:02:37.921] Exporting ‘map’ (4.43 KiB) to cluster node #1 ... DONE
[17:02:37.921] Exporting ‘inner_function’ (1.78 KiB) to cluster node #1 ...
[17:02:37.921] Exporting ‘inner_function’ (1.78 KiB) to cluster node #1 ... DONE
[17:02:37.921] Exporting 3 global objects (7.52 KiB) to cluster node #1 ... DONE
[17:02:37.922] MultisessionFuture started
[17:02:37.922] - Launch lazy future ... done
[17:02:37.922] run() for ‘MultisessionFuture’ ... done
[17:02:37.922] result() for ClusterFuture ...
[17:02:37.922] receiveMessageFromWorker() for ClusterFuture ...
[17:02:37.922] - Validating connection of MultisessionFuture
[17:02:37.924] - received message: FutureResult
[17:02:37.924] - Received FutureResult
[17:02:37.924] - Erased future from FutureRegistry
[17:02:37.924] result() for ClusterFuture ...
[17:02:37.924] - result already collected: FutureResult
[17:02:37.924] result() for ClusterFuture ... done
[17:02:37.924] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:37.924] result() for ClusterFuture ... done
[17:02:37.924] result() for ClusterFuture ...
[17:02:37.925] - result already collected: FutureResult
[17:02:37.925] result() for ClusterFuture ... done
List of 2
 $ : num [1:2] 2 3
 $ : num [1:2] 2 3
Testing with 2 cores ... DONE
> 
> message("*** Globals - formulas ... DONE")
*** Globals - formulas ... DONE
> 
> source("incl/end.R")
[17:02:37.926] plan(): Setting new future strategy stack:
[17:02:37.926] List of future strategies:
[17:02:37.926] 1. FutureStrategy:
[17:02:37.926]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:37.926]    - tweaked: FALSE
[17:02:37.926]    - call: future::plan(oplan)
[17:02:37.927] plan(): nbrOfWorkers() = 1
> 
