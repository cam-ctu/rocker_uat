
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:47:22.429] plan(): Setting new future strategy stack:
[17:47:22.430] List of future strategies:
[17:47:22.430] 1. sequential:
[17:47:22.430]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:22.430]    - tweaked: FALSE
[17:47:22.430]    - call: future::plan("sequential")
[17:47:22.441] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[17:47:22.463] plan(): Setting new future strategy stack:
[17:47:22.463] List of future strategies:
[17:47:22.463] 1. sequential:
[17:47:22.463]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:22.463]    - tweaked: FALSE
[17:47:22.463]    - call: plan(strategy)
[17:47:22.474] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[17:47:22.508] plan(): Setting new future strategy stack:
[17:47:22.508] List of future strategies:
[17:47:22.508] 1. multisession:
[17:47:22.508]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:47:22.508]    - tweaked: FALSE
[17:47:22.508]    - call: plan(strategy)
[17:47:22.509] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:22.509] multisession:
[17:47:22.509] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:47:22.509] - tweaked: FALSE
[17:47:22.509] - call: plan(strategy)
[17:47:22.515] getGlobalsAndPackages() ...
[17:47:22.515] Not searching for globals
[17:47:22.515] - globals: [0] <none>
[17:47:22.515] getGlobalsAndPackages() ... DONE
[17:47:22.516] [local output] makeClusterPSOCK() ...
[17:47:22.550] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:47:22.551] [local output] Base port: 11469
[17:47:22.551] [local output] Getting setup options for 2 cluster nodes ...
[17:47:22.551] [local output]  - Node 1 of 2 ...
[17:47:22.552] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:22.553] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a5a0b6e8f.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a5a0b6e8f.pid")'’
[17:47:22.740] - Possible to infer worker's PID: TRUE
[17:47:22.740] [local output] Rscript port: 11469

[17:47:22.741] [local output]  - Node 2 of 2 ...
[17:47:22.741] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:22.742] [local output] Rscript port: 11469

[17:47:22.742] [local output] Getting setup options for 2 cluster nodes ... done
[17:47:22.742] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:22.743] [local output] Setting up PSOCK nodes in parallel
[17:47:22.743] List of 36
[17:47:22.743]  $ worker          : chr "localhost"
[17:47:22.743]   ..- attr(*, "localhost")= logi TRUE
[17:47:22.743]  $ master          : chr "localhost"
[17:47:22.743]  $ port            : int 11469
[17:47:22.743]  $ connectTimeout  : num 120
[17:47:22.743]  $ timeout         : num 2592000
[17:47:22.743]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:22.743]  $ homogeneous     : logi TRUE
[17:47:22.743]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:22.743]  $ rscript_envs    : NULL
[17:47:22.743]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:22.743]  $ rscript_startup : NULL
[17:47:22.743]  $ rscript_sh      : chr "sh"
[17:47:22.743]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:22.743]  $ methods         : logi TRUE
[17:47:22.743]  $ socketOptions   : chr "no-delay"
[17:47:22.743]  $ useXDR          : logi FALSE
[17:47:22.743]  $ outfile         : chr "/dev/null"
[17:47:22.743]  $ renice          : int NA
[17:47:22.743]  $ rshcmd          : NULL
[17:47:22.743]  $ user            : chr(0) 
[17:47:22.743]  $ revtunnel       : logi FALSE
[17:47:22.743]  $ rshlogfile      : NULL
[17:47:22.743]  $ rshopts         : chr(0) 
[17:47:22.743]  $ rank            : int 1
[17:47:22.743]  $ manual          : logi FALSE
[17:47:22.743]  $ dryrun          : logi FALSE
[17:47:22.743]  $ quiet           : logi FALSE
[17:47:22.743]  $ setup_strategy  : chr "parallel"
[17:47:22.743]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:22.743]  $ pidfile         : chr "/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a5a0b6e8f.pid"
[17:47:22.743]  $ rshcmd_label    : NULL
[17:47:22.743]  $ rsh_call        : NULL
[17:47:22.743]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:22.743]  $ localMachine    : logi TRUE
[17:47:22.743]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:22.743]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:22.743]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:22.743]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:22.743]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:22.743]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:22.743]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:22.743]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:22.743]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:22.743]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:22.743]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:22.743]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:22.743]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:22.743]  $ arguments       :List of 28
[17:47:22.743]   ..$ worker          : chr "localhost"
[17:47:22.743]   ..$ master          : NULL
[17:47:22.743]   ..$ port            : int 11469
[17:47:22.743]   ..$ connectTimeout  : num 120
[17:47:22.743]   ..$ timeout         : num 2592000
[17:47:22.743]   ..$ rscript         : NULL
[17:47:22.743]   ..$ homogeneous     : NULL
[17:47:22.743]   ..$ rscript_args    : NULL
[17:47:22.743]   ..$ rscript_envs    : NULL
[17:47:22.743]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:22.743]   ..$ rscript_startup : NULL
[17:47:22.743]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:22.743]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:22.743]   ..$ methods         : logi TRUE
[17:47:22.743]   ..$ socketOptions   : chr "no-delay"
[17:47:22.743]   ..$ useXDR          : logi FALSE
[17:47:22.743]   ..$ outfile         : chr "/dev/null"
[17:47:22.743]   ..$ renice          : int NA
[17:47:22.743]   ..$ rshcmd          : NULL
[17:47:22.743]   ..$ user            : NULL
[17:47:22.743]   ..$ revtunnel       : logi NA
[17:47:22.743]   ..$ rshlogfile      : NULL
[17:47:22.743]   ..$ rshopts         : NULL
[17:47:22.743]   ..$ rank            : int 1
[17:47:22.743]   ..$ manual          : logi FALSE
[17:47:22.743]   ..$ dryrun          : logi FALSE
[17:47:22.743]   ..$ quiet           : logi FALSE
[17:47:22.743]   ..$ setup_strategy  : chr "parallel"
[17:47:22.743]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:22.761] [local output] System call to launch all workers:
[17:47:22.762] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a5a0b6e8f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11469 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:22.762] [local output] Starting PSOCK main server
[17:47:22.767] [local output] Workers launched
[17:47:22.768] [local output] Waiting for workers to connect back
[17:47:22.768]  - [local output] 0 workers out of 2 ready
[17:47:23.029]  - [local output] 0 workers out of 2 ready
[17:47:23.030]  - [local output] 1 workers out of 2 ready
[17:47:23.038]  - [local output] 1 workers out of 2 ready
[17:47:23.038]  - [local output] 2 workers out of 2 ready
[17:47:23.038] [local output] Launching of workers completed
[17:47:23.038] [local output] Collecting session information from workers
[17:47:23.039] [local output]  - Worker #1 of 2
[17:47:23.040] [local output]  - Worker #2 of 2
[17:47:23.040] [local output] makeClusterPSOCK() ... done
[17:47:23.052] Packages needed by the future expression (n = 0): <none>
[17:47:23.052] Packages needed by future strategies (n = 0): <none>
[17:47:23.053] {
[17:47:23.053]     {
[17:47:23.053]         {
[17:47:23.053]             ...future.startTime <- base::Sys.time()
[17:47:23.053]             {
[17:47:23.053]                 {
[17:47:23.053]                   {
[17:47:23.053]                     {
[17:47:23.053]                       base::local({
[17:47:23.053]                         has_future <- base::requireNamespace("future", 
[17:47:23.053]                           quietly = TRUE)
[17:47:23.053]                         if (has_future) {
[17:47:23.053]                           ns <- base::getNamespace("future")
[17:47:23.053]                           version <- ns[[".package"]][["version"]]
[17:47:23.053]                           if (is.null(version)) 
[17:47:23.053]                             version <- utils::packageVersion("future")
[17:47:23.053]                         }
[17:47:23.053]                         else {
[17:47:23.053]                           version <- NULL
[17:47:23.053]                         }
[17:47:23.053]                         if (!has_future || version < "1.8.0") {
[17:47:23.053]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:23.053]                             "", base::R.version$version.string), 
[17:47:23.053]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:23.053]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:23.053]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:23.053]                               "release", "version")], collapse = " "), 
[17:47:23.053]                             hostname = base::Sys.info()[["nodename"]])
[17:47:23.053]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:23.053]                             info)
[17:47:23.053]                           info <- base::paste(info, collapse = "; ")
[17:47:23.053]                           if (!has_future) {
[17:47:23.053]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:23.053]                               info)
[17:47:23.053]                           }
[17:47:23.053]                           else {
[17:47:23.053]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:23.053]                               info, version)
[17:47:23.053]                           }
[17:47:23.053]                           base::stop(msg)
[17:47:23.053]                         }
[17:47:23.053]                       })
[17:47:23.053]                     }
[17:47:23.053]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:23.053]                     base::options(mc.cores = 1L)
[17:47:23.053]                   }
[17:47:23.053]                   ...future.strategy.old <- future::plan("list")
[17:47:23.053]                   options(future.plan = NULL)
[17:47:23.053]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.053]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:23.053]                 }
[17:47:23.053]                 ...future.workdir <- getwd()
[17:47:23.053]             }
[17:47:23.053]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:23.053]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:23.053]         }
[17:47:23.053]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:23.053]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:23.053]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:23.053]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:23.053]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:23.053]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:23.053]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:23.053]             base::names(...future.oldOptions))
[17:47:23.053]     }
[17:47:23.053]     if (FALSE) {
[17:47:23.053]     }
[17:47:23.053]     else {
[17:47:23.053]         if (TRUE) {
[17:47:23.053]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:23.053]                 open = "w")
[17:47:23.053]         }
[17:47:23.053]         else {
[17:47:23.053]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:23.053]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:23.053]         }
[17:47:23.053]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:23.053]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:23.053]             base::sink(type = "output", split = FALSE)
[17:47:23.053]             base::close(...future.stdout)
[17:47:23.053]         }, add = TRUE)
[17:47:23.053]     }
[17:47:23.053]     ...future.frame <- base::sys.nframe()
[17:47:23.053]     ...future.conditions <- base::list()
[17:47:23.053]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:23.053]     if (FALSE) {
[17:47:23.053]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:23.053]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:23.053]     }
[17:47:23.053]     ...future.result <- base::tryCatch({
[17:47:23.053]         base::withCallingHandlers({
[17:47:23.053]             ...future.value <- base::withVisible(base::local({
[17:47:23.053]                 ...future.makeSendCondition <- base::local({
[17:47:23.053]                   sendCondition <- NULL
[17:47:23.053]                   function(frame = 1L) {
[17:47:23.053]                     if (is.function(sendCondition)) 
[17:47:23.053]                       return(sendCondition)
[17:47:23.053]                     ns <- getNamespace("parallel")
[17:47:23.053]                     if (exists("sendData", mode = "function", 
[17:47:23.053]                       envir = ns)) {
[17:47:23.053]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:23.053]                         envir = ns)
[17:47:23.053]                       envir <- sys.frame(frame)
[17:47:23.053]                       master <- NULL
[17:47:23.053]                       while (!identical(envir, .GlobalEnv) && 
[17:47:23.053]                         !identical(envir, emptyenv())) {
[17:47:23.053]                         if (exists("master", mode = "list", envir = envir, 
[17:47:23.053]                           inherits = FALSE)) {
[17:47:23.053]                           master <- get("master", mode = "list", 
[17:47:23.053]                             envir = envir, inherits = FALSE)
[17:47:23.053]                           if (inherits(master, c("SOCKnode", 
[17:47:23.053]                             "SOCK0node"))) {
[17:47:23.053]                             sendCondition <<- function(cond) {
[17:47:23.053]                               data <- list(type = "VALUE", value = cond, 
[17:47:23.053]                                 success = TRUE)
[17:47:23.053]                               parallel_sendData(master, data)
[17:47:23.053]                             }
[17:47:23.053]                             return(sendCondition)
[17:47:23.053]                           }
[17:47:23.053]                         }
[17:47:23.053]                         frame <- frame + 1L
[17:47:23.053]                         envir <- sys.frame(frame)
[17:47:23.053]                       }
[17:47:23.053]                     }
[17:47:23.053]                     sendCondition <<- function(cond) NULL
[17:47:23.053]                   }
[17:47:23.053]                 })
[17:47:23.053]                 withCallingHandlers({
[17:47:23.053]                   NA
[17:47:23.053]                 }, immediateCondition = function(cond) {
[17:47:23.053]                   sendCondition <- ...future.makeSendCondition()
[17:47:23.053]                   sendCondition(cond)
[17:47:23.053]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.053]                   {
[17:47:23.053]                     inherits <- base::inherits
[17:47:23.053]                     invokeRestart <- base::invokeRestart
[17:47:23.053]                     is.null <- base::is.null
[17:47:23.053]                     muffled <- FALSE
[17:47:23.053]                     if (inherits(cond, "message")) {
[17:47:23.053]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:23.053]                       if (muffled) 
[17:47:23.053]                         invokeRestart("muffleMessage")
[17:47:23.053]                     }
[17:47:23.053]                     else if (inherits(cond, "warning")) {
[17:47:23.053]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:23.053]                       if (muffled) 
[17:47:23.053]                         invokeRestart("muffleWarning")
[17:47:23.053]                     }
[17:47:23.053]                     else if (inherits(cond, "condition")) {
[17:47:23.053]                       if (!is.null(pattern)) {
[17:47:23.053]                         computeRestarts <- base::computeRestarts
[17:47:23.053]                         grepl <- base::grepl
[17:47:23.053]                         restarts <- computeRestarts(cond)
[17:47:23.053]                         for (restart in restarts) {
[17:47:23.053]                           name <- restart$name
[17:47:23.053]                           if (is.null(name)) 
[17:47:23.053]                             next
[17:47:23.053]                           if (!grepl(pattern, name)) 
[17:47:23.053]                             next
[17:47:23.053]                           invokeRestart(restart)
[17:47:23.053]                           muffled <- TRUE
[17:47:23.053]                           break
[17:47:23.053]                         }
[17:47:23.053]                       }
[17:47:23.053]                     }
[17:47:23.053]                     invisible(muffled)
[17:47:23.053]                   }
[17:47:23.053]                   muffleCondition(cond)
[17:47:23.053]                 })
[17:47:23.053]             }))
[17:47:23.053]             future::FutureResult(value = ...future.value$value, 
[17:47:23.053]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.053]                   ...future.rng), globalenv = if (FALSE) 
[17:47:23.053]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:23.053]                     ...future.globalenv.names))
[17:47:23.053]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:23.053]         }, condition = base::local({
[17:47:23.053]             c <- base::c
[17:47:23.053]             inherits <- base::inherits
[17:47:23.053]             invokeRestart <- base::invokeRestart
[17:47:23.053]             length <- base::length
[17:47:23.053]             list <- base::list
[17:47:23.053]             seq.int <- base::seq.int
[17:47:23.053]             signalCondition <- base::signalCondition
[17:47:23.053]             sys.calls <- base::sys.calls
[17:47:23.053]             `[[` <- base::`[[`
[17:47:23.053]             `+` <- base::`+`
[17:47:23.053]             `<<-` <- base::`<<-`
[17:47:23.053]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:23.053]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:23.053]                   3L)]
[17:47:23.053]             }
[17:47:23.053]             function(cond) {
[17:47:23.053]                 is_error <- inherits(cond, "error")
[17:47:23.053]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:23.053]                   NULL)
[17:47:23.053]                 if (is_error) {
[17:47:23.053]                   sessionInformation <- function() {
[17:47:23.053]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:23.053]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:23.053]                       search = base::search(), system = base::Sys.info())
[17:47:23.053]                   }
[17:47:23.053]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.053]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:23.053]                     cond$call), session = sessionInformation(), 
[17:47:23.053]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:23.053]                   signalCondition(cond)
[17:47:23.053]                 }
[17:47:23.053]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:23.053]                 "immediateCondition"))) {
[17:47:23.053]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:23.053]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.053]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:23.053]                   if (TRUE && !signal) {
[17:47:23.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.053]                     {
[17:47:23.053]                       inherits <- base::inherits
[17:47:23.053]                       invokeRestart <- base::invokeRestart
[17:47:23.053]                       is.null <- base::is.null
[17:47:23.053]                       muffled <- FALSE
[17:47:23.053]                       if (inherits(cond, "message")) {
[17:47:23.053]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.053]                         if (muffled) 
[17:47:23.053]                           invokeRestart("muffleMessage")
[17:47:23.053]                       }
[17:47:23.053]                       else if (inherits(cond, "warning")) {
[17:47:23.053]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.053]                         if (muffled) 
[17:47:23.053]                           invokeRestart("muffleWarning")
[17:47:23.053]                       }
[17:47:23.053]                       else if (inherits(cond, "condition")) {
[17:47:23.053]                         if (!is.null(pattern)) {
[17:47:23.053]                           computeRestarts <- base::computeRestarts
[17:47:23.053]                           grepl <- base::grepl
[17:47:23.053]                           restarts <- computeRestarts(cond)
[17:47:23.053]                           for (restart in restarts) {
[17:47:23.053]                             name <- restart$name
[17:47:23.053]                             if (is.null(name)) 
[17:47:23.053]                               next
[17:47:23.053]                             if (!grepl(pattern, name)) 
[17:47:23.053]                               next
[17:47:23.053]                             invokeRestart(restart)
[17:47:23.053]                             muffled <- TRUE
[17:47:23.053]                             break
[17:47:23.053]                           }
[17:47:23.053]                         }
[17:47:23.053]                       }
[17:47:23.053]                       invisible(muffled)
[17:47:23.053]                     }
[17:47:23.053]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.053]                   }
[17:47:23.053]                 }
[17:47:23.053]                 else {
[17:47:23.053]                   if (TRUE) {
[17:47:23.053]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.053]                     {
[17:47:23.053]                       inherits <- base::inherits
[17:47:23.053]                       invokeRestart <- base::invokeRestart
[17:47:23.053]                       is.null <- base::is.null
[17:47:23.053]                       muffled <- FALSE
[17:47:23.053]                       if (inherits(cond, "message")) {
[17:47:23.053]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.053]                         if (muffled) 
[17:47:23.053]                           invokeRestart("muffleMessage")
[17:47:23.053]                       }
[17:47:23.053]                       else if (inherits(cond, "warning")) {
[17:47:23.053]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.053]                         if (muffled) 
[17:47:23.053]                           invokeRestart("muffleWarning")
[17:47:23.053]                       }
[17:47:23.053]                       else if (inherits(cond, "condition")) {
[17:47:23.053]                         if (!is.null(pattern)) {
[17:47:23.053]                           computeRestarts <- base::computeRestarts
[17:47:23.053]                           grepl <- base::grepl
[17:47:23.053]                           restarts <- computeRestarts(cond)
[17:47:23.053]                           for (restart in restarts) {
[17:47:23.053]                             name <- restart$name
[17:47:23.053]                             if (is.null(name)) 
[17:47:23.053]                               next
[17:47:23.053]                             if (!grepl(pattern, name)) 
[17:47:23.053]                               next
[17:47:23.053]                             invokeRestart(restart)
[17:47:23.053]                             muffled <- TRUE
[17:47:23.053]                             break
[17:47:23.053]                           }
[17:47:23.053]                         }
[17:47:23.053]                       }
[17:47:23.053]                       invisible(muffled)
[17:47:23.053]                     }
[17:47:23.053]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.053]                   }
[17:47:23.053]                 }
[17:47:23.053]             }
[17:47:23.053]         }))
[17:47:23.053]     }, error = function(ex) {
[17:47:23.053]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:23.053]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.053]                 ...future.rng), started = ...future.startTime, 
[17:47:23.053]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:23.053]             version = "1.8"), class = "FutureResult")
[17:47:23.053]     }, finally = {
[17:47:23.053]         if (!identical(...future.workdir, getwd())) 
[17:47:23.053]             setwd(...future.workdir)
[17:47:23.053]         {
[17:47:23.053]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:23.053]                 ...future.oldOptions$nwarnings <- NULL
[17:47:23.053]             }
[17:47:23.053]             base::options(...future.oldOptions)
[17:47:23.053]             if (.Platform$OS.type == "windows") {
[17:47:23.053]                 old_names <- names(...future.oldEnvVars)
[17:47:23.053]                 envs <- base::Sys.getenv()
[17:47:23.053]                 names <- names(envs)
[17:47:23.053]                 common <- intersect(names, old_names)
[17:47:23.053]                 added <- setdiff(names, old_names)
[17:47:23.053]                 removed <- setdiff(old_names, names)
[17:47:23.053]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:23.053]                   envs[common]]
[17:47:23.053]                 NAMES <- toupper(changed)
[17:47:23.053]                 args <- list()
[17:47:23.053]                 for (kk in seq_along(NAMES)) {
[17:47:23.053]                   name <- changed[[kk]]
[17:47:23.053]                   NAME <- NAMES[[kk]]
[17:47:23.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.053]                     next
[17:47:23.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.053]                 }
[17:47:23.053]                 NAMES <- toupper(added)
[17:47:23.053]                 for (kk in seq_along(NAMES)) {
[17:47:23.053]                   name <- added[[kk]]
[17:47:23.053]                   NAME <- NAMES[[kk]]
[17:47:23.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.053]                     next
[17:47:23.053]                   args[[name]] <- ""
[17:47:23.053]                 }
[17:47:23.053]                 NAMES <- toupper(removed)
[17:47:23.053]                 for (kk in seq_along(NAMES)) {
[17:47:23.053]                   name <- removed[[kk]]
[17:47:23.053]                   NAME <- NAMES[[kk]]
[17:47:23.053]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.053]                     next
[17:47:23.053]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.053]                 }
[17:47:23.053]                 if (length(args) > 0) 
[17:47:23.053]                   base::do.call(base::Sys.setenv, args = args)
[17:47:23.053]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:23.053]             }
[17:47:23.053]             else {
[17:47:23.053]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:23.053]             }
[17:47:23.053]             {
[17:47:23.053]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:23.053]                   0L) {
[17:47:23.053]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:23.053]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:23.053]                   base::options(opts)
[17:47:23.053]                 }
[17:47:23.053]                 {
[17:47:23.053]                   {
[17:47:23.053]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:23.053]                     NULL
[17:47:23.053]                   }
[17:47:23.053]                   options(future.plan = NULL)
[17:47:23.053]                   if (is.na(NA_character_)) 
[17:47:23.053]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.053]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:23.053]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:23.053]                     .init = FALSE)
[17:47:23.053]                 }
[17:47:23.053]             }
[17:47:23.053]         }
[17:47:23.053]     })
[17:47:23.053]     if (TRUE) {
[17:47:23.053]         base::sink(type = "output", split = FALSE)
[17:47:23.053]         if (TRUE) {
[17:47:23.053]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:23.053]         }
[17:47:23.053]         else {
[17:47:23.053]             ...future.result["stdout"] <- base::list(NULL)
[17:47:23.053]         }
[17:47:23.053]         base::close(...future.stdout)
[17:47:23.053]         ...future.stdout <- NULL
[17:47:23.053]     }
[17:47:23.053]     ...future.result$conditions <- ...future.conditions
[17:47:23.053]     ...future.result$finished <- base::Sys.time()
[17:47:23.053]     ...future.result
[17:47:23.053] }
[17:47:23.107] MultisessionFuture started
[17:47:23.108] result() for ClusterFuture ...
[17:47:23.108] receiveMessageFromWorker() for ClusterFuture ...
[17:47:23.108] - Validating connection of MultisessionFuture
[17:47:23.140] - received message: FutureResult
[17:47:23.140] - Received FutureResult
[17:47:23.143] - Erased future from FutureRegistry
[17:47:23.143] result() for ClusterFuture ...
[17:47:23.143] - result already collected: FutureResult
[17:47:23.143] result() for ClusterFuture ... done
[17:47:23.143] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:23.144] result() for ClusterFuture ... done
[17:47:23.144] result() for ClusterFuture ...
[17:47:23.144] - result already collected: FutureResult
[17:47:23.144] result() for ClusterFuture ... done
[17:47:23.144] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:23.148] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[17:47:23.157] getGlobalsAndPackages() ...
[17:47:23.158] 
[17:47:23.158] - globals: [0] <none>
[17:47:23.158] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[17:47:23.175] getGlobalsAndPackages() ...
[17:47:23.176] 
[17:47:23.176] - globals: [0] <none>
[17:47:23.176] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[17:47:23.188] plan(): Setting new future strategy stack:
[17:47:23.188] List of future strategies:
[17:47:23.188] 1. multisession:
[17:47:23.188]    - args: function (..., workers = 1L, envir = parent.frame())
[17:47:23.188]    - tweaked: TRUE
[17:47:23.188]    - call: plan(strategy, workers = 1L)
[17:47:23.189] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:23.189] multisession:
[17:47:23.189] - args: function (..., workers = 1L, envir = parent.frame())
[17:47:23.189] - tweaked: TRUE
[17:47:23.189] - call: plan(strategy, workers = 1L)
[17:47:23.189] getGlobalsAndPackages() ...
[17:47:23.190] Not searching for globals
[17:47:23.190] - globals: [0] <none>
[17:47:23.190] getGlobalsAndPackages() ... DONE
[17:47:23.191] Packages needed by the future expression (n = 0): <none>
[17:47:23.191] Packages needed by future strategies (n = 0): <none>
[17:47:23.192] {
[17:47:23.192]     {
[17:47:23.192]         {
[17:47:23.192]             ...future.startTime <- base::Sys.time()
[17:47:23.192]             {
[17:47:23.192]                 {
[17:47:23.192]                   {
[17:47:23.192]                     base::local({
[17:47:23.192]                       has_future <- base::requireNamespace("future", 
[17:47:23.192]                         quietly = TRUE)
[17:47:23.192]                       if (has_future) {
[17:47:23.192]                         ns <- base::getNamespace("future")
[17:47:23.192]                         version <- ns[[".package"]][["version"]]
[17:47:23.192]                         if (is.null(version)) 
[17:47:23.192]                           version <- utils::packageVersion("future")
[17:47:23.192]                       }
[17:47:23.192]                       else {
[17:47:23.192]                         version <- NULL
[17:47:23.192]                       }
[17:47:23.192]                       if (!has_future || version < "1.8.0") {
[17:47:23.192]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:23.192]                           "", base::R.version$version.string), 
[17:47:23.192]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:23.192]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:23.192]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:23.192]                             "release", "version")], collapse = " "), 
[17:47:23.192]                           hostname = base::Sys.info()[["nodename"]])
[17:47:23.192]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:23.192]                           info)
[17:47:23.192]                         info <- base::paste(info, collapse = "; ")
[17:47:23.192]                         if (!has_future) {
[17:47:23.192]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:23.192]                             info)
[17:47:23.192]                         }
[17:47:23.192]                         else {
[17:47:23.192]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:23.192]                             info, version)
[17:47:23.192]                         }
[17:47:23.192]                         base::stop(msg)
[17:47:23.192]                       }
[17:47:23.192]                     })
[17:47:23.192]                   }
[17:47:23.192]                   ...future.strategy.old <- future::plan("list")
[17:47:23.192]                   options(future.plan = NULL)
[17:47:23.192]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.192]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:23.192]                 }
[17:47:23.192]                 ...future.workdir <- getwd()
[17:47:23.192]             }
[17:47:23.192]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:23.192]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:23.192]         }
[17:47:23.192]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:23.192]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:23.192]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:23.192]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:23.192]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:23.192]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:23.192]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:23.192]             base::names(...future.oldOptions))
[17:47:23.192]     }
[17:47:23.192]     if (FALSE) {
[17:47:23.192]     }
[17:47:23.192]     else {
[17:47:23.192]         if (TRUE) {
[17:47:23.192]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:23.192]                 open = "w")
[17:47:23.192]         }
[17:47:23.192]         else {
[17:47:23.192]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:23.192]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:23.192]         }
[17:47:23.192]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:23.192]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:23.192]             base::sink(type = "output", split = FALSE)
[17:47:23.192]             base::close(...future.stdout)
[17:47:23.192]         }, add = TRUE)
[17:47:23.192]     }
[17:47:23.192]     ...future.frame <- base::sys.nframe()
[17:47:23.192]     ...future.conditions <- base::list()
[17:47:23.192]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:23.192]     if (FALSE) {
[17:47:23.192]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:23.192]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:23.192]     }
[17:47:23.192]     ...future.result <- base::tryCatch({
[17:47:23.192]         base::withCallingHandlers({
[17:47:23.192]             ...future.value <- base::withVisible(base::local(NA))
[17:47:23.192]             future::FutureResult(value = ...future.value$value, 
[17:47:23.192]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.192]                   ...future.rng), globalenv = if (FALSE) 
[17:47:23.192]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:23.192]                     ...future.globalenv.names))
[17:47:23.192]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:23.192]         }, condition = base::local({
[17:47:23.192]             c <- base::c
[17:47:23.192]             inherits <- base::inherits
[17:47:23.192]             invokeRestart <- base::invokeRestart
[17:47:23.192]             length <- base::length
[17:47:23.192]             list <- base::list
[17:47:23.192]             seq.int <- base::seq.int
[17:47:23.192]             signalCondition <- base::signalCondition
[17:47:23.192]             sys.calls <- base::sys.calls
[17:47:23.192]             `[[` <- base::`[[`
[17:47:23.192]             `+` <- base::`+`
[17:47:23.192]             `<<-` <- base::`<<-`
[17:47:23.192]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:23.192]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:23.192]                   3L)]
[17:47:23.192]             }
[17:47:23.192]             function(cond) {
[17:47:23.192]                 is_error <- inherits(cond, "error")
[17:47:23.192]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:23.192]                   NULL)
[17:47:23.192]                 if (is_error) {
[17:47:23.192]                   sessionInformation <- function() {
[17:47:23.192]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:23.192]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:23.192]                       search = base::search(), system = base::Sys.info())
[17:47:23.192]                   }
[17:47:23.192]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.192]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:23.192]                     cond$call), session = sessionInformation(), 
[17:47:23.192]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:23.192]                   signalCondition(cond)
[17:47:23.192]                 }
[17:47:23.192]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:23.192]                 "immediateCondition"))) {
[17:47:23.192]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:23.192]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.192]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:23.192]                   if (TRUE && !signal) {
[17:47:23.192]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.192]                     {
[17:47:23.192]                       inherits <- base::inherits
[17:47:23.192]                       invokeRestart <- base::invokeRestart
[17:47:23.192]                       is.null <- base::is.null
[17:47:23.192]                       muffled <- FALSE
[17:47:23.192]                       if (inherits(cond, "message")) {
[17:47:23.192]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.192]                         if (muffled) 
[17:47:23.192]                           invokeRestart("muffleMessage")
[17:47:23.192]                       }
[17:47:23.192]                       else if (inherits(cond, "warning")) {
[17:47:23.192]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.192]                         if (muffled) 
[17:47:23.192]                           invokeRestart("muffleWarning")
[17:47:23.192]                       }
[17:47:23.192]                       else if (inherits(cond, "condition")) {
[17:47:23.192]                         if (!is.null(pattern)) {
[17:47:23.192]                           computeRestarts <- base::computeRestarts
[17:47:23.192]                           grepl <- base::grepl
[17:47:23.192]                           restarts <- computeRestarts(cond)
[17:47:23.192]                           for (restart in restarts) {
[17:47:23.192]                             name <- restart$name
[17:47:23.192]                             if (is.null(name)) 
[17:47:23.192]                               next
[17:47:23.192]                             if (!grepl(pattern, name)) 
[17:47:23.192]                               next
[17:47:23.192]                             invokeRestart(restart)
[17:47:23.192]                             muffled <- TRUE
[17:47:23.192]                             break
[17:47:23.192]                           }
[17:47:23.192]                         }
[17:47:23.192]                       }
[17:47:23.192]                       invisible(muffled)
[17:47:23.192]                     }
[17:47:23.192]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.192]                   }
[17:47:23.192]                 }
[17:47:23.192]                 else {
[17:47:23.192]                   if (TRUE) {
[17:47:23.192]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.192]                     {
[17:47:23.192]                       inherits <- base::inherits
[17:47:23.192]                       invokeRestart <- base::invokeRestart
[17:47:23.192]                       is.null <- base::is.null
[17:47:23.192]                       muffled <- FALSE
[17:47:23.192]                       if (inherits(cond, "message")) {
[17:47:23.192]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.192]                         if (muffled) 
[17:47:23.192]                           invokeRestart("muffleMessage")
[17:47:23.192]                       }
[17:47:23.192]                       else if (inherits(cond, "warning")) {
[17:47:23.192]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.192]                         if (muffled) 
[17:47:23.192]                           invokeRestart("muffleWarning")
[17:47:23.192]                       }
[17:47:23.192]                       else if (inherits(cond, "condition")) {
[17:47:23.192]                         if (!is.null(pattern)) {
[17:47:23.192]                           computeRestarts <- base::computeRestarts
[17:47:23.192]                           grepl <- base::grepl
[17:47:23.192]                           restarts <- computeRestarts(cond)
[17:47:23.192]                           for (restart in restarts) {
[17:47:23.192]                             name <- restart$name
[17:47:23.192]                             if (is.null(name)) 
[17:47:23.192]                               next
[17:47:23.192]                             if (!grepl(pattern, name)) 
[17:47:23.192]                               next
[17:47:23.192]                             invokeRestart(restart)
[17:47:23.192]                             muffled <- TRUE
[17:47:23.192]                             break
[17:47:23.192]                           }
[17:47:23.192]                         }
[17:47:23.192]                       }
[17:47:23.192]                       invisible(muffled)
[17:47:23.192]                     }
[17:47:23.192]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.192]                   }
[17:47:23.192]                 }
[17:47:23.192]             }
[17:47:23.192]         }))
[17:47:23.192]     }, error = function(ex) {
[17:47:23.192]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:23.192]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.192]                 ...future.rng), started = ...future.startTime, 
[17:47:23.192]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:23.192]             version = "1.8"), class = "FutureResult")
[17:47:23.192]     }, finally = {
[17:47:23.192]         if (!identical(...future.workdir, getwd())) 
[17:47:23.192]             setwd(...future.workdir)
[17:47:23.192]         {
[17:47:23.192]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:23.192]                 ...future.oldOptions$nwarnings <- NULL
[17:47:23.192]             }
[17:47:23.192]             base::options(...future.oldOptions)
[17:47:23.192]             if (.Platform$OS.type == "windows") {
[17:47:23.192]                 old_names <- names(...future.oldEnvVars)
[17:47:23.192]                 envs <- base::Sys.getenv()
[17:47:23.192]                 names <- names(envs)
[17:47:23.192]                 common <- intersect(names, old_names)
[17:47:23.192]                 added <- setdiff(names, old_names)
[17:47:23.192]                 removed <- setdiff(old_names, names)
[17:47:23.192]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:23.192]                   envs[common]]
[17:47:23.192]                 NAMES <- toupper(changed)
[17:47:23.192]                 args <- list()
[17:47:23.192]                 for (kk in seq_along(NAMES)) {
[17:47:23.192]                   name <- changed[[kk]]
[17:47:23.192]                   NAME <- NAMES[[kk]]
[17:47:23.192]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.192]                     next
[17:47:23.192]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.192]                 }
[17:47:23.192]                 NAMES <- toupper(added)
[17:47:23.192]                 for (kk in seq_along(NAMES)) {
[17:47:23.192]                   name <- added[[kk]]
[17:47:23.192]                   NAME <- NAMES[[kk]]
[17:47:23.192]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.192]                     next
[17:47:23.192]                   args[[name]] <- ""
[17:47:23.192]                 }
[17:47:23.192]                 NAMES <- toupper(removed)
[17:47:23.192]                 for (kk in seq_along(NAMES)) {
[17:47:23.192]                   name <- removed[[kk]]
[17:47:23.192]                   NAME <- NAMES[[kk]]
[17:47:23.192]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.192]                     next
[17:47:23.192]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.192]                 }
[17:47:23.192]                 if (length(args) > 0) 
[17:47:23.192]                   base::do.call(base::Sys.setenv, args = args)
[17:47:23.192]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:23.192]             }
[17:47:23.192]             else {
[17:47:23.192]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:23.192]             }
[17:47:23.192]             {
[17:47:23.192]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:23.192]                   0L) {
[17:47:23.192]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:23.192]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:23.192]                   base::options(opts)
[17:47:23.192]                 }
[17:47:23.192]                 {
[17:47:23.192]                   {
[17:47:23.192]                     NULL
[17:47:23.192]                     RNGkind("Mersenne-Twister")
[17:47:23.192]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:23.192]                       inherits = FALSE)
[17:47:23.192]                   }
[17:47:23.192]                   options(future.plan = NULL)
[17:47:23.192]                   if (is.na(NA_character_)) 
[17:47:23.192]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.192]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:23.192]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:23.192]                     .init = FALSE)
[17:47:23.192]                 }
[17:47:23.192]             }
[17:47:23.192]         }
[17:47:23.192]     })
[17:47:23.192]     if (TRUE) {
[17:47:23.192]         base::sink(type = "output", split = FALSE)
[17:47:23.192]         if (TRUE) {
[17:47:23.192]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:23.192]         }
[17:47:23.192]         else {
[17:47:23.192]             ...future.result["stdout"] <- base::list(NULL)
[17:47:23.192]         }
[17:47:23.192]         base::close(...future.stdout)
[17:47:23.192]         ...future.stdout <- NULL
[17:47:23.192]     }
[17:47:23.192]     ...future.result$conditions <- ...future.conditions
[17:47:23.192]     ...future.result$finished <- base::Sys.time()
[17:47:23.192]     ...future.result
[17:47:23.192] }
[17:47:23.194] plan(): Setting new future strategy stack:
[17:47:23.194] List of future strategies:
[17:47:23.194] 1. sequential:
[17:47:23.194]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:23.194]    - tweaked: FALSE
[17:47:23.194]    - call: NULL
[17:47:23.195] plan(): nbrOfWorkers() = 1
[17:47:23.196] plan(): Setting new future strategy stack:
[17:47:23.196] List of future strategies:
[17:47:23.196] 1. multisession:
[17:47:23.196]    - args: function (..., workers = 1L, envir = parent.frame())
[17:47:23.196]    - tweaked: TRUE
[17:47:23.196]    - call: plan(strategy, workers = 1L)
[17:47:23.197] plan(): nbrOfWorkers() = 1
[17:47:23.197] SequentialFuture started (and completed)
[17:47:23.197] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:23.198] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[17:47:23.198] getGlobalsAndPackages() ...
[17:47:23.198] Searching for globals...
[17:47:23.201] 
[17:47:23.201] Searching for globals ... DONE
[17:47:23.201] - globals: [0] <none>
[17:47:23.201] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[17:47:23.202] getGlobalsAndPackages() ...
[17:47:23.202] Searching for globals...
[17:47:23.202] 
[17:47:23.202] Searching for globals ... DONE
[17:47:23.203] - globals: [0] <none>
[17:47:23.203] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[17:47:23.204] plan(): Setting new future strategy stack:
[17:47:23.204] List of future strategies:
[17:47:23.204] 1. multisession:
[17:47:23.204]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:47:23.204]    - tweaked: TRUE
[17:47:23.204]    - call: plan(strategy, workers = allButOneCore)
[17:47:23.204] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:23.205] multisession:
[17:47:23.205] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:47:23.205] - tweaked: TRUE
[17:47:23.205] - call: plan(strategy, workers = allButOneCore)
[17:47:23.209] getGlobalsAndPackages() ...
[17:47:23.209] Not searching for globals
[17:47:23.212] - globals: [0] <none>
[17:47:23.212] getGlobalsAndPackages() ... DONE
[17:47:23.213] Packages needed by the future expression (n = 0): <none>
[17:47:23.213] Packages needed by future strategies (n = 0): <none>
[17:47:23.213] {
[17:47:23.213]     {
[17:47:23.213]         {
[17:47:23.213]             ...future.startTime <- base::Sys.time()
[17:47:23.213]             {
[17:47:23.213]                 {
[17:47:23.213]                   {
[17:47:23.213]                     base::local({
[17:47:23.213]                       has_future <- base::requireNamespace("future", 
[17:47:23.213]                         quietly = TRUE)
[17:47:23.213]                       if (has_future) {
[17:47:23.213]                         ns <- base::getNamespace("future")
[17:47:23.213]                         version <- ns[[".package"]][["version"]]
[17:47:23.213]                         if (is.null(version)) 
[17:47:23.213]                           version <- utils::packageVersion("future")
[17:47:23.213]                       }
[17:47:23.213]                       else {
[17:47:23.213]                         version <- NULL
[17:47:23.213]                       }
[17:47:23.213]                       if (!has_future || version < "1.8.0") {
[17:47:23.213]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:23.213]                           "", base::R.version$version.string), 
[17:47:23.213]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:23.213]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:23.213]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:23.213]                             "release", "version")], collapse = " "), 
[17:47:23.213]                           hostname = base::Sys.info()[["nodename"]])
[17:47:23.213]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:23.213]                           info)
[17:47:23.213]                         info <- base::paste(info, collapse = "; ")
[17:47:23.213]                         if (!has_future) {
[17:47:23.213]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:23.213]                             info)
[17:47:23.213]                         }
[17:47:23.213]                         else {
[17:47:23.213]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:23.213]                             info, version)
[17:47:23.213]                         }
[17:47:23.213]                         base::stop(msg)
[17:47:23.213]                       }
[17:47:23.213]                     })
[17:47:23.213]                   }
[17:47:23.213]                   ...future.strategy.old <- future::plan("list")
[17:47:23.213]                   options(future.plan = NULL)
[17:47:23.213]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.213]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:23.213]                 }
[17:47:23.213]                 ...future.workdir <- getwd()
[17:47:23.213]             }
[17:47:23.213]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:23.213]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:23.213]         }
[17:47:23.213]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:23.213]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:23.213]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:23.213]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:23.213]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:23.213]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:23.213]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:23.213]             base::names(...future.oldOptions))
[17:47:23.213]     }
[17:47:23.213]     if (FALSE) {
[17:47:23.213]     }
[17:47:23.213]     else {
[17:47:23.213]         if (TRUE) {
[17:47:23.213]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:23.213]                 open = "w")
[17:47:23.213]         }
[17:47:23.213]         else {
[17:47:23.213]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:23.213]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:23.213]         }
[17:47:23.213]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:23.213]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:23.213]             base::sink(type = "output", split = FALSE)
[17:47:23.213]             base::close(...future.stdout)
[17:47:23.213]         }, add = TRUE)
[17:47:23.213]     }
[17:47:23.213]     ...future.frame <- base::sys.nframe()
[17:47:23.213]     ...future.conditions <- base::list()
[17:47:23.213]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:23.213]     if (FALSE) {
[17:47:23.213]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:23.213]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:23.213]     }
[17:47:23.213]     ...future.result <- base::tryCatch({
[17:47:23.213]         base::withCallingHandlers({
[17:47:23.213]             ...future.value <- base::withVisible(base::local(NA))
[17:47:23.213]             future::FutureResult(value = ...future.value$value, 
[17:47:23.213]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.213]                   ...future.rng), globalenv = if (FALSE) 
[17:47:23.213]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:23.213]                     ...future.globalenv.names))
[17:47:23.213]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:23.213]         }, condition = base::local({
[17:47:23.213]             c <- base::c
[17:47:23.213]             inherits <- base::inherits
[17:47:23.213]             invokeRestart <- base::invokeRestart
[17:47:23.213]             length <- base::length
[17:47:23.213]             list <- base::list
[17:47:23.213]             seq.int <- base::seq.int
[17:47:23.213]             signalCondition <- base::signalCondition
[17:47:23.213]             sys.calls <- base::sys.calls
[17:47:23.213]             `[[` <- base::`[[`
[17:47:23.213]             `+` <- base::`+`
[17:47:23.213]             `<<-` <- base::`<<-`
[17:47:23.213]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:23.213]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:23.213]                   3L)]
[17:47:23.213]             }
[17:47:23.213]             function(cond) {
[17:47:23.213]                 is_error <- inherits(cond, "error")
[17:47:23.213]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:23.213]                   NULL)
[17:47:23.213]                 if (is_error) {
[17:47:23.213]                   sessionInformation <- function() {
[17:47:23.213]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:23.213]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:23.213]                       search = base::search(), system = base::Sys.info())
[17:47:23.213]                   }
[17:47:23.213]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.213]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:23.213]                     cond$call), session = sessionInformation(), 
[17:47:23.213]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:23.213]                   signalCondition(cond)
[17:47:23.213]                 }
[17:47:23.213]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:23.213]                 "immediateCondition"))) {
[17:47:23.213]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:23.213]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.213]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:23.213]                   if (TRUE && !signal) {
[17:47:23.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.213]                     {
[17:47:23.213]                       inherits <- base::inherits
[17:47:23.213]                       invokeRestart <- base::invokeRestart
[17:47:23.213]                       is.null <- base::is.null
[17:47:23.213]                       muffled <- FALSE
[17:47:23.213]                       if (inherits(cond, "message")) {
[17:47:23.213]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.213]                         if (muffled) 
[17:47:23.213]                           invokeRestart("muffleMessage")
[17:47:23.213]                       }
[17:47:23.213]                       else if (inherits(cond, "warning")) {
[17:47:23.213]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.213]                         if (muffled) 
[17:47:23.213]                           invokeRestart("muffleWarning")
[17:47:23.213]                       }
[17:47:23.213]                       else if (inherits(cond, "condition")) {
[17:47:23.213]                         if (!is.null(pattern)) {
[17:47:23.213]                           computeRestarts <- base::computeRestarts
[17:47:23.213]                           grepl <- base::grepl
[17:47:23.213]                           restarts <- computeRestarts(cond)
[17:47:23.213]                           for (restart in restarts) {
[17:47:23.213]                             name <- restart$name
[17:47:23.213]                             if (is.null(name)) 
[17:47:23.213]                               next
[17:47:23.213]                             if (!grepl(pattern, name)) 
[17:47:23.213]                               next
[17:47:23.213]                             invokeRestart(restart)
[17:47:23.213]                             muffled <- TRUE
[17:47:23.213]                             break
[17:47:23.213]                           }
[17:47:23.213]                         }
[17:47:23.213]                       }
[17:47:23.213]                       invisible(muffled)
[17:47:23.213]                     }
[17:47:23.213]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.213]                   }
[17:47:23.213]                 }
[17:47:23.213]                 else {
[17:47:23.213]                   if (TRUE) {
[17:47:23.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.213]                     {
[17:47:23.213]                       inherits <- base::inherits
[17:47:23.213]                       invokeRestart <- base::invokeRestart
[17:47:23.213]                       is.null <- base::is.null
[17:47:23.213]                       muffled <- FALSE
[17:47:23.213]                       if (inherits(cond, "message")) {
[17:47:23.213]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.213]                         if (muffled) 
[17:47:23.213]                           invokeRestart("muffleMessage")
[17:47:23.213]                       }
[17:47:23.213]                       else if (inherits(cond, "warning")) {
[17:47:23.213]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.213]                         if (muffled) 
[17:47:23.213]                           invokeRestart("muffleWarning")
[17:47:23.213]                       }
[17:47:23.213]                       else if (inherits(cond, "condition")) {
[17:47:23.213]                         if (!is.null(pattern)) {
[17:47:23.213]                           computeRestarts <- base::computeRestarts
[17:47:23.213]                           grepl <- base::grepl
[17:47:23.213]                           restarts <- computeRestarts(cond)
[17:47:23.213]                           for (restart in restarts) {
[17:47:23.213]                             name <- restart$name
[17:47:23.213]                             if (is.null(name)) 
[17:47:23.213]                               next
[17:47:23.213]                             if (!grepl(pattern, name)) 
[17:47:23.213]                               next
[17:47:23.213]                             invokeRestart(restart)
[17:47:23.213]                             muffled <- TRUE
[17:47:23.213]                             break
[17:47:23.213]                           }
[17:47:23.213]                         }
[17:47:23.213]                       }
[17:47:23.213]                       invisible(muffled)
[17:47:23.213]                     }
[17:47:23.213]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.213]                   }
[17:47:23.213]                 }
[17:47:23.213]             }
[17:47:23.213]         }))
[17:47:23.213]     }, error = function(ex) {
[17:47:23.213]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:23.213]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.213]                 ...future.rng), started = ...future.startTime, 
[17:47:23.213]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:23.213]             version = "1.8"), class = "FutureResult")
[17:47:23.213]     }, finally = {
[17:47:23.213]         if (!identical(...future.workdir, getwd())) 
[17:47:23.213]             setwd(...future.workdir)
[17:47:23.213]         {
[17:47:23.213]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:23.213]                 ...future.oldOptions$nwarnings <- NULL
[17:47:23.213]             }
[17:47:23.213]             base::options(...future.oldOptions)
[17:47:23.213]             if (.Platform$OS.type == "windows") {
[17:47:23.213]                 old_names <- names(...future.oldEnvVars)
[17:47:23.213]                 envs <- base::Sys.getenv()
[17:47:23.213]                 names <- names(envs)
[17:47:23.213]                 common <- intersect(names, old_names)
[17:47:23.213]                 added <- setdiff(names, old_names)
[17:47:23.213]                 removed <- setdiff(old_names, names)
[17:47:23.213]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:23.213]                   envs[common]]
[17:47:23.213]                 NAMES <- toupper(changed)
[17:47:23.213]                 args <- list()
[17:47:23.213]                 for (kk in seq_along(NAMES)) {
[17:47:23.213]                   name <- changed[[kk]]
[17:47:23.213]                   NAME <- NAMES[[kk]]
[17:47:23.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.213]                     next
[17:47:23.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.213]                 }
[17:47:23.213]                 NAMES <- toupper(added)
[17:47:23.213]                 for (kk in seq_along(NAMES)) {
[17:47:23.213]                   name <- added[[kk]]
[17:47:23.213]                   NAME <- NAMES[[kk]]
[17:47:23.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.213]                     next
[17:47:23.213]                   args[[name]] <- ""
[17:47:23.213]                 }
[17:47:23.213]                 NAMES <- toupper(removed)
[17:47:23.213]                 for (kk in seq_along(NAMES)) {
[17:47:23.213]                   name <- removed[[kk]]
[17:47:23.213]                   NAME <- NAMES[[kk]]
[17:47:23.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.213]                     next
[17:47:23.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.213]                 }
[17:47:23.213]                 if (length(args) > 0) 
[17:47:23.213]                   base::do.call(base::Sys.setenv, args = args)
[17:47:23.213]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:23.213]             }
[17:47:23.213]             else {
[17:47:23.213]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:23.213]             }
[17:47:23.213]             {
[17:47:23.213]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:23.213]                   0L) {
[17:47:23.213]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:23.213]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:23.213]                   base::options(opts)
[17:47:23.213]                 }
[17:47:23.213]                 {
[17:47:23.213]                   {
[17:47:23.213]                     NULL
[17:47:23.213]                     RNGkind("Mersenne-Twister")
[17:47:23.213]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:23.213]                       inherits = FALSE)
[17:47:23.213]                   }
[17:47:23.213]                   options(future.plan = NULL)
[17:47:23.213]                   if (is.na(NA_character_)) 
[17:47:23.213]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.213]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:23.213]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:23.213]                     .init = FALSE)
[17:47:23.213]                 }
[17:47:23.213]             }
[17:47:23.213]         }
[17:47:23.213]     })
[17:47:23.213]     if (TRUE) {
[17:47:23.213]         base::sink(type = "output", split = FALSE)
[17:47:23.213]         if (TRUE) {
[17:47:23.213]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:23.213]         }
[17:47:23.213]         else {
[17:47:23.213]             ...future.result["stdout"] <- base::list(NULL)
[17:47:23.213]         }
[17:47:23.213]         base::close(...future.stdout)
[17:47:23.213]         ...future.stdout <- NULL
[17:47:23.213]     }
[17:47:23.213]     ...future.result$conditions <- ...future.conditions
[17:47:23.213]     ...future.result$finished <- base::Sys.time()
[17:47:23.213]     ...future.result
[17:47:23.213] }
[17:47:23.215] plan(): Setting new future strategy stack:
[17:47:23.215] List of future strategies:
[17:47:23.215] 1. sequential:
[17:47:23.215]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:23.215]    - tweaked: FALSE
[17:47:23.215]    - call: NULL
[17:47:23.216] plan(): nbrOfWorkers() = 1
[17:47:23.216] plan(): Setting new future strategy stack:
[17:47:23.216] List of future strategies:
[17:47:23.216] 1. multisession:
[17:47:23.216]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:47:23.216]    - tweaked: TRUE
[17:47:23.216]    - call: plan(strategy, workers = allButOneCore)
[17:47:23.221] plan(): nbrOfWorkers() = 1
[17:47:23.221] SequentialFuture started (and completed)
[17:47:23.222] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:23.225] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[17:47:23.234] getGlobalsAndPackages() ...
[17:47:23.234] Searching for globals...
[17:47:23.234] 
[17:47:23.235] Searching for globals ... DONE
[17:47:23.235] - globals: [0] <none>
[17:47:23.235] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[17:47:23.241] getGlobalsAndPackages() ...
[17:47:23.241] Searching for globals...
[17:47:23.241] 
[17:47:23.241] Searching for globals ... DONE
[17:47:23.241] - globals: [0] <none>
[17:47:23.241] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[17:47:23.245] plan(): Setting new future strategy stack:
[17:47:23.245] List of future strategies:
[17:47:23.245] 1. multicore:
[17:47:23.245]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:23.245]    - tweaked: FALSE
[17:47:23.245]    - call: plan(strategy)
[17:47:23.249] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[17:47:23.258] plan(): Setting new future strategy stack:
[17:47:23.258] List of future strategies:
[17:47:23.258] 1. multicore:
[17:47:23.258]    - args: function (..., workers = 1L, envir = parent.frame())
[17:47:23.258]    - tweaked: TRUE
[17:47:23.258]    - call: plan(strategy, workers = 1L)
[17:47:23.259] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[17:47:23.260] plan(): Setting new future strategy stack:
[17:47:23.260] List of future strategies:
[17:47:23.260] 1. multicore:
[17:47:23.260]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x559adf5edbe8>>", envir = parent.frame())
[17:47:23.260]    - tweaked: TRUE
[17:47:23.260]    - call: plan(strategy, workers = allButOneCore)
[17:47:23.263] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[17:47:23.273] plan(): Setting new future strategy stack:
[17:47:23.273] List of future strategies:
[17:47:23.273] 1. cluster:
[17:47:23.273]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[17:47:23.273]    - tweaked: TRUE
[17:47:23.273]    - call: plan(cluster, workers = workers)
[17:47:23.273] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:23.273] cluster:
[17:47:23.273] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[17:47:23.273] - tweaked: TRUE
[17:47:23.273] - call: plan(cluster, workers = workers)
[17:47:23.274] getGlobalsAndPackages() ...
[17:47:23.274] Not searching for globals
[17:47:23.274] - globals: [0] <none>
[17:47:23.274] getGlobalsAndPackages() ... DONE
[17:47:23.275] [local output] makeClusterPSOCK() ...
[17:47:23.275] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:47:23.275] [local output] Base port: 11611
[17:47:23.275] [local output] Getting setup options for 2 cluster nodes ...
[17:47:23.276] [local output]  - Node 1 of 2 ...
[17:47:23.276] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:23.277] [local output] Rscript port: 11611

[17:47:23.277] [local output]  - Node 2 of 2 ...
[17:47:23.277] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:23.278] [local output] Rscript port: 11611

[17:47:23.278] [local output] Getting setup options for 2 cluster nodes ... done
[17:47:23.278] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:23.278] [local output] Setting up PSOCK nodes in parallel
[17:47:23.278] List of 36
[17:47:23.278]  $ worker          : chr "localhost"
[17:47:23.278]   ..- attr(*, "localhost")= logi TRUE
[17:47:23.278]  $ master          : chr "localhost"
[17:47:23.278]  $ port            : int 11611
[17:47:23.278]  $ connectTimeout  : num 120
[17:47:23.278]  $ timeout         : num 2592000
[17:47:23.278]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:23.278]  $ homogeneous     : logi TRUE
[17:47:23.278]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:23.278]  $ rscript_envs    : NULL
[17:47:23.278]  $ rscript_libs    : NULL
[17:47:23.278]  $ rscript_startup : NULL
[17:47:23.278]  $ rscript_sh      : chr "sh"
[17:47:23.278]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:23.278]  $ methods         : logi TRUE
[17:47:23.278]  $ socketOptions   : chr "no-delay"
[17:47:23.278]  $ useXDR          : logi FALSE
[17:47:23.278]  $ outfile         : chr "/dev/null"
[17:47:23.278]  $ renice          : int NA
[17:47:23.278]  $ rshcmd          : NULL
[17:47:23.278]  $ user            : chr(0) 
[17:47:23.278]  $ revtunnel       : logi FALSE
[17:47:23.278]  $ rshlogfile      : NULL
[17:47:23.278]  $ rshopts         : chr(0) 
[17:47:23.278]  $ rank            : int 1
[17:47:23.278]  $ manual          : logi FALSE
[17:47:23.278]  $ dryrun          : logi FALSE
[17:47:23.278]  $ quiet           : logi FALSE
[17:47:23.278]  $ setup_strategy  : chr "parallel"
[17:47:23.278]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:23.278]  $ pidfile         : chr "/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a56d2aca05.pid"
[17:47:23.278]  $ rshcmd_label    : NULL
[17:47:23.278]  $ rsh_call        : NULL
[17:47:23.278]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:23.278]  $ localMachine    : logi TRUE
[17:47:23.278]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:23.278]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:23.278]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:23.278]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:23.278]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:23.278]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:23.278]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:23.278]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:23.278]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:23.278]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:23.278]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:23.278]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:23.278]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:23.278]  $ arguments       :List of 28
[17:47:23.278]   ..$ worker          : chr "localhost"
[17:47:23.278]   ..$ master          : NULL
[17:47:23.278]   ..$ port            : int 11611
[17:47:23.278]   ..$ connectTimeout  : num 120
[17:47:23.278]   ..$ timeout         : num 2592000
[17:47:23.278]   ..$ rscript         : NULL
[17:47:23.278]   ..$ homogeneous     : NULL
[17:47:23.278]   ..$ rscript_args    : NULL
[17:47:23.278]   ..$ rscript_envs    : NULL
[17:47:23.278]   ..$ rscript_libs    : NULL
[17:47:23.278]   ..$ rscript_startup : NULL
[17:47:23.278]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:23.278]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:23.278]   ..$ methods         : logi TRUE
[17:47:23.278]   ..$ socketOptions   : chr "no-delay"
[17:47:23.278]   ..$ useXDR          : logi FALSE
[17:47:23.278]   ..$ outfile         : chr "/dev/null"
[17:47:23.278]   ..$ renice          : int NA
[17:47:23.278]   ..$ rshcmd          : NULL
[17:47:23.278]   ..$ user            : NULL
[17:47:23.278]   ..$ revtunnel       : logi NA
[17:47:23.278]   ..$ rshlogfile      : NULL
[17:47:23.278]   ..$ rshopts         : NULL
[17:47:23.278]   ..$ rank            : int 1
[17:47:23.278]   ..$ manual          : logi FALSE
[17:47:23.278]   ..$ dryrun          : logi FALSE
[17:47:23.278]   ..$ quiet           : logi FALSE
[17:47:23.278]   ..$ setup_strategy  : chr "parallel"
[17:47:23.278]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:23.295] [local output] System call to launch all workers:
[17:47:23.295] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a56d2aca05.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11611 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:23.295] [local output] Starting PSOCK main server
[17:47:23.296] [local output] Workers launched
[17:47:23.296] [local output] Waiting for workers to connect back
[17:47:23.297]  - [local output] 0 workers out of 2 ready
[17:47:23.537]  - [local output] 0 workers out of 2 ready
[17:47:23.537]  - [local output] 1 workers out of 2 ready
[17:47:23.547]  - [local output] 1 workers out of 2 ready
[17:47:23.547]  - [local output] 2 workers out of 2 ready
[17:47:23.547] [local output] Launching of workers completed
[17:47:23.547] [local output] Collecting session information from workers
[17:47:23.548] [local output]  - Worker #1 of 2
[17:47:23.549] [local output]  - Worker #2 of 2
[17:47:23.549] [local output] makeClusterPSOCK() ... done
[17:47:23.559] Packages needed by the future expression (n = 0): <none>
[17:47:23.561] Packages needed by future strategies (n = 0): <none>
[17:47:23.562] {
[17:47:23.562]     {
[17:47:23.562]         {
[17:47:23.562]             ...future.startTime <- base::Sys.time()
[17:47:23.562]             {
[17:47:23.562]                 {
[17:47:23.562]                   {
[17:47:23.562]                     base::local({
[17:47:23.562]                       has_future <- base::requireNamespace("future", 
[17:47:23.562]                         quietly = TRUE)
[17:47:23.562]                       if (has_future) {
[17:47:23.562]                         ns <- base::getNamespace("future")
[17:47:23.562]                         version <- ns[[".package"]][["version"]]
[17:47:23.562]                         if (is.null(version)) 
[17:47:23.562]                           version <- utils::packageVersion("future")
[17:47:23.562]                       }
[17:47:23.562]                       else {
[17:47:23.562]                         version <- NULL
[17:47:23.562]                       }
[17:47:23.562]                       if (!has_future || version < "1.8.0") {
[17:47:23.562]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:23.562]                           "", base::R.version$version.string), 
[17:47:23.562]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:23.562]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:23.562]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:23.562]                             "release", "version")], collapse = " "), 
[17:47:23.562]                           hostname = base::Sys.info()[["nodename"]])
[17:47:23.562]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:23.562]                           info)
[17:47:23.562]                         info <- base::paste(info, collapse = "; ")
[17:47:23.562]                         if (!has_future) {
[17:47:23.562]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:23.562]                             info)
[17:47:23.562]                         }
[17:47:23.562]                         else {
[17:47:23.562]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:23.562]                             info, version)
[17:47:23.562]                         }
[17:47:23.562]                         base::stop(msg)
[17:47:23.562]                       }
[17:47:23.562]                     })
[17:47:23.562]                   }
[17:47:23.562]                   ...future.strategy.old <- future::plan("list")
[17:47:23.562]                   options(future.plan = NULL)
[17:47:23.562]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.562]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:23.562]                 }
[17:47:23.562]                 ...future.workdir <- getwd()
[17:47:23.562]             }
[17:47:23.562]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:23.562]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:23.562]         }
[17:47:23.562]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:23.562]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:23.562]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:23.562]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:23.562]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:23.562]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:23.562]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:23.562]             base::names(...future.oldOptions))
[17:47:23.562]     }
[17:47:23.562]     if (FALSE) {
[17:47:23.562]     }
[17:47:23.562]     else {
[17:47:23.562]         if (TRUE) {
[17:47:23.562]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:23.562]                 open = "w")
[17:47:23.562]         }
[17:47:23.562]         else {
[17:47:23.562]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:23.562]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:23.562]         }
[17:47:23.562]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:23.562]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:23.562]             base::sink(type = "output", split = FALSE)
[17:47:23.562]             base::close(...future.stdout)
[17:47:23.562]         }, add = TRUE)
[17:47:23.562]     }
[17:47:23.562]     ...future.frame <- base::sys.nframe()
[17:47:23.562]     ...future.conditions <- base::list()
[17:47:23.562]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:23.562]     if (FALSE) {
[17:47:23.562]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:23.562]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:23.562]     }
[17:47:23.562]     ...future.result <- base::tryCatch({
[17:47:23.562]         base::withCallingHandlers({
[17:47:23.562]             ...future.value <- base::withVisible(base::local({
[17:47:23.562]                 ...future.makeSendCondition <- base::local({
[17:47:23.562]                   sendCondition <- NULL
[17:47:23.562]                   function(frame = 1L) {
[17:47:23.562]                     if (is.function(sendCondition)) 
[17:47:23.562]                       return(sendCondition)
[17:47:23.562]                     ns <- getNamespace("parallel")
[17:47:23.562]                     if (exists("sendData", mode = "function", 
[17:47:23.562]                       envir = ns)) {
[17:47:23.562]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:23.562]                         envir = ns)
[17:47:23.562]                       envir <- sys.frame(frame)
[17:47:23.562]                       master <- NULL
[17:47:23.562]                       while (!identical(envir, .GlobalEnv) && 
[17:47:23.562]                         !identical(envir, emptyenv())) {
[17:47:23.562]                         if (exists("master", mode = "list", envir = envir, 
[17:47:23.562]                           inherits = FALSE)) {
[17:47:23.562]                           master <- get("master", mode = "list", 
[17:47:23.562]                             envir = envir, inherits = FALSE)
[17:47:23.562]                           if (inherits(master, c("SOCKnode", 
[17:47:23.562]                             "SOCK0node"))) {
[17:47:23.562]                             sendCondition <<- function(cond) {
[17:47:23.562]                               data <- list(type = "VALUE", value = cond, 
[17:47:23.562]                                 success = TRUE)
[17:47:23.562]                               parallel_sendData(master, data)
[17:47:23.562]                             }
[17:47:23.562]                             return(sendCondition)
[17:47:23.562]                           }
[17:47:23.562]                         }
[17:47:23.562]                         frame <- frame + 1L
[17:47:23.562]                         envir <- sys.frame(frame)
[17:47:23.562]                       }
[17:47:23.562]                     }
[17:47:23.562]                     sendCondition <<- function(cond) NULL
[17:47:23.562]                   }
[17:47:23.562]                 })
[17:47:23.562]                 withCallingHandlers({
[17:47:23.562]                   NA
[17:47:23.562]                 }, immediateCondition = function(cond) {
[17:47:23.562]                   sendCondition <- ...future.makeSendCondition()
[17:47:23.562]                   sendCondition(cond)
[17:47:23.562]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.562]                   {
[17:47:23.562]                     inherits <- base::inherits
[17:47:23.562]                     invokeRestart <- base::invokeRestart
[17:47:23.562]                     is.null <- base::is.null
[17:47:23.562]                     muffled <- FALSE
[17:47:23.562]                     if (inherits(cond, "message")) {
[17:47:23.562]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:23.562]                       if (muffled) 
[17:47:23.562]                         invokeRestart("muffleMessage")
[17:47:23.562]                     }
[17:47:23.562]                     else if (inherits(cond, "warning")) {
[17:47:23.562]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:23.562]                       if (muffled) 
[17:47:23.562]                         invokeRestart("muffleWarning")
[17:47:23.562]                     }
[17:47:23.562]                     else if (inherits(cond, "condition")) {
[17:47:23.562]                       if (!is.null(pattern)) {
[17:47:23.562]                         computeRestarts <- base::computeRestarts
[17:47:23.562]                         grepl <- base::grepl
[17:47:23.562]                         restarts <- computeRestarts(cond)
[17:47:23.562]                         for (restart in restarts) {
[17:47:23.562]                           name <- restart$name
[17:47:23.562]                           if (is.null(name)) 
[17:47:23.562]                             next
[17:47:23.562]                           if (!grepl(pattern, name)) 
[17:47:23.562]                             next
[17:47:23.562]                           invokeRestart(restart)
[17:47:23.562]                           muffled <- TRUE
[17:47:23.562]                           break
[17:47:23.562]                         }
[17:47:23.562]                       }
[17:47:23.562]                     }
[17:47:23.562]                     invisible(muffled)
[17:47:23.562]                   }
[17:47:23.562]                   muffleCondition(cond)
[17:47:23.562]                 })
[17:47:23.562]             }))
[17:47:23.562]             future::FutureResult(value = ...future.value$value, 
[17:47:23.562]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.562]                   ...future.rng), globalenv = if (FALSE) 
[17:47:23.562]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:23.562]                     ...future.globalenv.names))
[17:47:23.562]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:23.562]         }, condition = base::local({
[17:47:23.562]             c <- base::c
[17:47:23.562]             inherits <- base::inherits
[17:47:23.562]             invokeRestart <- base::invokeRestart
[17:47:23.562]             length <- base::length
[17:47:23.562]             list <- base::list
[17:47:23.562]             seq.int <- base::seq.int
[17:47:23.562]             signalCondition <- base::signalCondition
[17:47:23.562]             sys.calls <- base::sys.calls
[17:47:23.562]             `[[` <- base::`[[`
[17:47:23.562]             `+` <- base::`+`
[17:47:23.562]             `<<-` <- base::`<<-`
[17:47:23.562]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:23.562]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:23.562]                   3L)]
[17:47:23.562]             }
[17:47:23.562]             function(cond) {
[17:47:23.562]                 is_error <- inherits(cond, "error")
[17:47:23.562]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:23.562]                   NULL)
[17:47:23.562]                 if (is_error) {
[17:47:23.562]                   sessionInformation <- function() {
[17:47:23.562]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:23.562]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:23.562]                       search = base::search(), system = base::Sys.info())
[17:47:23.562]                   }
[17:47:23.562]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.562]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:23.562]                     cond$call), session = sessionInformation(), 
[17:47:23.562]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:23.562]                   signalCondition(cond)
[17:47:23.562]                 }
[17:47:23.562]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:23.562]                 "immediateCondition"))) {
[17:47:23.562]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:23.562]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.562]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:23.562]                   if (TRUE && !signal) {
[17:47:23.562]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.562]                     {
[17:47:23.562]                       inherits <- base::inherits
[17:47:23.562]                       invokeRestart <- base::invokeRestart
[17:47:23.562]                       is.null <- base::is.null
[17:47:23.562]                       muffled <- FALSE
[17:47:23.562]                       if (inherits(cond, "message")) {
[17:47:23.562]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.562]                         if (muffled) 
[17:47:23.562]                           invokeRestart("muffleMessage")
[17:47:23.562]                       }
[17:47:23.562]                       else if (inherits(cond, "warning")) {
[17:47:23.562]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.562]                         if (muffled) 
[17:47:23.562]                           invokeRestart("muffleWarning")
[17:47:23.562]                       }
[17:47:23.562]                       else if (inherits(cond, "condition")) {
[17:47:23.562]                         if (!is.null(pattern)) {
[17:47:23.562]                           computeRestarts <- base::computeRestarts
[17:47:23.562]                           grepl <- base::grepl
[17:47:23.562]                           restarts <- computeRestarts(cond)
[17:47:23.562]                           for (restart in restarts) {
[17:47:23.562]                             name <- restart$name
[17:47:23.562]                             if (is.null(name)) 
[17:47:23.562]                               next
[17:47:23.562]                             if (!grepl(pattern, name)) 
[17:47:23.562]                               next
[17:47:23.562]                             invokeRestart(restart)
[17:47:23.562]                             muffled <- TRUE
[17:47:23.562]                             break
[17:47:23.562]                           }
[17:47:23.562]                         }
[17:47:23.562]                       }
[17:47:23.562]                       invisible(muffled)
[17:47:23.562]                     }
[17:47:23.562]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.562]                   }
[17:47:23.562]                 }
[17:47:23.562]                 else {
[17:47:23.562]                   if (TRUE) {
[17:47:23.562]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.562]                     {
[17:47:23.562]                       inherits <- base::inherits
[17:47:23.562]                       invokeRestart <- base::invokeRestart
[17:47:23.562]                       is.null <- base::is.null
[17:47:23.562]                       muffled <- FALSE
[17:47:23.562]                       if (inherits(cond, "message")) {
[17:47:23.562]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.562]                         if (muffled) 
[17:47:23.562]                           invokeRestart("muffleMessage")
[17:47:23.562]                       }
[17:47:23.562]                       else if (inherits(cond, "warning")) {
[17:47:23.562]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.562]                         if (muffled) 
[17:47:23.562]                           invokeRestart("muffleWarning")
[17:47:23.562]                       }
[17:47:23.562]                       else if (inherits(cond, "condition")) {
[17:47:23.562]                         if (!is.null(pattern)) {
[17:47:23.562]                           computeRestarts <- base::computeRestarts
[17:47:23.562]                           grepl <- base::grepl
[17:47:23.562]                           restarts <- computeRestarts(cond)
[17:47:23.562]                           for (restart in restarts) {
[17:47:23.562]                             name <- restart$name
[17:47:23.562]                             if (is.null(name)) 
[17:47:23.562]                               next
[17:47:23.562]                             if (!grepl(pattern, name)) 
[17:47:23.562]                               next
[17:47:23.562]                             invokeRestart(restart)
[17:47:23.562]                             muffled <- TRUE
[17:47:23.562]                             break
[17:47:23.562]                           }
[17:47:23.562]                         }
[17:47:23.562]                       }
[17:47:23.562]                       invisible(muffled)
[17:47:23.562]                     }
[17:47:23.562]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.562]                   }
[17:47:23.562]                 }
[17:47:23.562]             }
[17:47:23.562]         }))
[17:47:23.562]     }, error = function(ex) {
[17:47:23.562]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:23.562]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.562]                 ...future.rng), started = ...future.startTime, 
[17:47:23.562]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:23.562]             version = "1.8"), class = "FutureResult")
[17:47:23.562]     }, finally = {
[17:47:23.562]         if (!identical(...future.workdir, getwd())) 
[17:47:23.562]             setwd(...future.workdir)
[17:47:23.562]         {
[17:47:23.562]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:23.562]                 ...future.oldOptions$nwarnings <- NULL
[17:47:23.562]             }
[17:47:23.562]             base::options(...future.oldOptions)
[17:47:23.562]             if (.Platform$OS.type == "windows") {
[17:47:23.562]                 old_names <- names(...future.oldEnvVars)
[17:47:23.562]                 envs <- base::Sys.getenv()
[17:47:23.562]                 names <- names(envs)
[17:47:23.562]                 common <- intersect(names, old_names)
[17:47:23.562]                 added <- setdiff(names, old_names)
[17:47:23.562]                 removed <- setdiff(old_names, names)
[17:47:23.562]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:23.562]                   envs[common]]
[17:47:23.562]                 NAMES <- toupper(changed)
[17:47:23.562]                 args <- list()
[17:47:23.562]                 for (kk in seq_along(NAMES)) {
[17:47:23.562]                   name <- changed[[kk]]
[17:47:23.562]                   NAME <- NAMES[[kk]]
[17:47:23.562]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.562]                     next
[17:47:23.562]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.562]                 }
[17:47:23.562]                 NAMES <- toupper(added)
[17:47:23.562]                 for (kk in seq_along(NAMES)) {
[17:47:23.562]                   name <- added[[kk]]
[17:47:23.562]                   NAME <- NAMES[[kk]]
[17:47:23.562]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.562]                     next
[17:47:23.562]                   args[[name]] <- ""
[17:47:23.562]                 }
[17:47:23.562]                 NAMES <- toupper(removed)
[17:47:23.562]                 for (kk in seq_along(NAMES)) {
[17:47:23.562]                   name <- removed[[kk]]
[17:47:23.562]                   NAME <- NAMES[[kk]]
[17:47:23.562]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.562]                     next
[17:47:23.562]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.562]                 }
[17:47:23.562]                 if (length(args) > 0) 
[17:47:23.562]                   base::do.call(base::Sys.setenv, args = args)
[17:47:23.562]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:23.562]             }
[17:47:23.562]             else {
[17:47:23.562]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:23.562]             }
[17:47:23.562]             {
[17:47:23.562]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:23.562]                   0L) {
[17:47:23.562]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:23.562]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:23.562]                   base::options(opts)
[17:47:23.562]                 }
[17:47:23.562]                 {
[17:47:23.562]                   NULL
[17:47:23.562]                   options(future.plan = NULL)
[17:47:23.562]                   if (is.na(NA_character_)) 
[17:47:23.562]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.562]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:23.562]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:23.562]                     .init = FALSE)
[17:47:23.562]                 }
[17:47:23.562]             }
[17:47:23.562]         }
[17:47:23.562]     })
[17:47:23.562]     if (TRUE) {
[17:47:23.562]         base::sink(type = "output", split = FALSE)
[17:47:23.562]         if (TRUE) {
[17:47:23.562]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:23.562]         }
[17:47:23.562]         else {
[17:47:23.562]             ...future.result["stdout"] <- base::list(NULL)
[17:47:23.562]         }
[17:47:23.562]         base::close(...future.stdout)
[17:47:23.562]         ...future.stdout <- NULL
[17:47:23.562]     }
[17:47:23.562]     ...future.result$conditions <- ...future.conditions
[17:47:23.562]     ...future.result$finished <- base::Sys.time()
[17:47:23.562]     ...future.result
[17:47:23.562] }
[17:47:23.614] ClusterFuture started
[17:47:23.614] result() for ClusterFuture ...
[17:47:23.615] receiveMessageFromWorker() for ClusterFuture ...
[17:47:23.615] - Validating connection of ClusterFuture
[17:47:23.647] - received message: FutureResult
[17:47:23.647] - Received FutureResult
[17:47:23.647] - Erased future from FutureRegistry
[17:47:23.647] result() for ClusterFuture ...
[17:47:23.648] - result already collected: FutureResult
[17:47:23.648] result() for ClusterFuture ... done
[17:47:23.648] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:23.648] result() for ClusterFuture ... done
[17:47:23.648] result() for ClusterFuture ...
[17:47:23.648] - result already collected: FutureResult
[17:47:23.648] result() for ClusterFuture ... done
[17:47:23.648] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:23.648] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[17:47:23.649] plan(): Setting new future strategy stack:
[17:47:23.649] List of future strategies:
[17:47:23.649] 1. cluster:
[17:47:23.649]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[17:47:23.649]    - tweaked: TRUE
[17:47:23.649]    - call: plan(cluster, workers = allButOneWorker)
[17:47:23.650] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:23.650] cluster:
[17:47:23.650] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[17:47:23.650] - tweaked: TRUE
[17:47:23.650] - call: plan(cluster, workers = allButOneWorker)
[17:47:23.651] getGlobalsAndPackages() ...
[17:47:23.651] Not searching for globals
[17:47:23.651] - globals: [0] <none>
[17:47:23.651] getGlobalsAndPackages() ... DONE
[17:47:23.657] [local output] makeClusterPSOCK() ...
[17:47:23.658] [local output] Workers: [n = 1] ‘localhost’
[17:47:23.658] [local output] Base port: 11396
[17:47:23.658] [local output] Getting setup options for 1 cluster nodes ...
[17:47:23.658] [local output]  - Node 1 of 1 ...
[17:47:23.659] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:23.660] [local output] Rscript port: 11396

[17:47:23.660] [local output] Getting setup options for 1 cluster nodes ... done
[17:47:23.660] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:23.660] [local output] Setting up PSOCK nodes in parallel
[17:47:23.661] List of 36
[17:47:23.661]  $ worker          : chr "localhost"
[17:47:23.661]   ..- attr(*, "localhost")= logi TRUE
[17:47:23.661]  $ master          : chr "localhost"
[17:47:23.661]  $ port            : int 11396
[17:47:23.661]  $ connectTimeout  : num 120
[17:47:23.661]  $ timeout         : num 2592000
[17:47:23.661]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:23.661]  $ homogeneous     : logi TRUE
[17:47:23.661]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:23.661]  $ rscript_envs    : NULL
[17:47:23.661]  $ rscript_libs    : NULL
[17:47:23.661]  $ rscript_startup : NULL
[17:47:23.661]  $ rscript_sh      : chr "sh"
[17:47:23.661]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:23.661]  $ methods         : logi TRUE
[17:47:23.661]  $ socketOptions   : chr "no-delay"
[17:47:23.661]  $ useXDR          : logi FALSE
[17:47:23.661]  $ outfile         : chr "/dev/null"
[17:47:23.661]  $ renice          : int NA
[17:47:23.661]  $ rshcmd          : NULL
[17:47:23.661]  $ user            : chr(0) 
[17:47:23.661]  $ revtunnel       : logi FALSE
[17:47:23.661]  $ rshlogfile      : NULL
[17:47:23.661]  $ rshopts         : chr(0) 
[17:47:23.661]  $ rank            : int 1
[17:47:23.661]  $ manual          : logi FALSE
[17:47:23.661]  $ dryrun          : logi FALSE
[17:47:23.661]  $ quiet           : logi FALSE
[17:47:23.661]  $ setup_strategy  : chr "parallel"
[17:47:23.661]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:23.661]  $ pidfile         : chr "/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a534c67498.pid"
[17:47:23.661]  $ rshcmd_label    : NULL
[17:47:23.661]  $ rsh_call        : NULL
[17:47:23.661]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:23.661]  $ localMachine    : logi TRUE
[17:47:23.661]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:23.661]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:23.661]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:23.661]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:23.661]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:23.661]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:23.661]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:23.661]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:23.661]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:23.661]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:23.661]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:23.661]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:23.661]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:23.661]  $ arguments       :List of 28
[17:47:23.661]   ..$ worker          : chr "localhost"
[17:47:23.661]   ..$ master          : NULL
[17:47:23.661]   ..$ port            : int 11396
[17:47:23.661]   ..$ connectTimeout  : num 120
[17:47:23.661]   ..$ timeout         : num 2592000
[17:47:23.661]   ..$ rscript         : NULL
[17:47:23.661]   ..$ homogeneous     : NULL
[17:47:23.661]   ..$ rscript_args    : NULL
[17:47:23.661]   ..$ rscript_envs    : NULL
[17:47:23.661]   ..$ rscript_libs    : NULL
[17:47:23.661]   ..$ rscript_startup : NULL
[17:47:23.661]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:23.661]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:23.661]   ..$ methods         : logi TRUE
[17:47:23.661]   ..$ socketOptions   : chr "no-delay"
[17:47:23.661]   ..$ useXDR          : logi FALSE
[17:47:23.661]   ..$ outfile         : chr "/dev/null"
[17:47:23.661]   ..$ renice          : int NA
[17:47:23.661]   ..$ rshcmd          : NULL
[17:47:23.661]   ..$ user            : NULL
[17:47:23.661]   ..$ revtunnel       : logi NA
[17:47:23.661]   ..$ rshlogfile      : NULL
[17:47:23.661]   ..$ rshopts         : NULL
[17:47:23.661]   ..$ rank            : int 1
[17:47:23.661]   ..$ manual          : logi FALSE
[17:47:23.661]   ..$ dryrun          : logi FALSE
[17:47:23.661]   ..$ quiet           : logi FALSE
[17:47:23.661]   ..$ setup_strategy  : chr "parallel"
[17:47:23.661]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:23.677] [local output] System call to launch all workers:
[17:47:23.677] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a534c67498.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11396 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:23.677] [local output] Starting PSOCK main server
[17:47:23.678] [local output] Workers launched
[17:47:23.679] [local output] Waiting for workers to connect back
[17:47:23.679]  - [local output] 0 workers out of 1 ready
[17:47:23.869]  - [local output] 0 workers out of 1 ready
[17:47:23.869]  - [local output] 1 workers out of 1 ready
[17:47:23.869] [local output] Launching of workers completed
[17:47:23.869] [local output] Collecting session information from workers
[17:47:23.870] [local output]  - Worker #1 of 1
[17:47:23.870] [local output] makeClusterPSOCK() ... done
[17:47:23.876] Packages needed by the future expression (n = 0): <none>
[17:47:23.876] Packages needed by future strategies (n = 0): <none>
[17:47:23.876] {
[17:47:23.876]     {
[17:47:23.876]         {
[17:47:23.876]             ...future.startTime <- base::Sys.time()
[17:47:23.876]             {
[17:47:23.876]                 {
[17:47:23.876]                   {
[17:47:23.876]                     base::local({
[17:47:23.876]                       has_future <- base::requireNamespace("future", 
[17:47:23.876]                         quietly = TRUE)
[17:47:23.876]                       if (has_future) {
[17:47:23.876]                         ns <- base::getNamespace("future")
[17:47:23.876]                         version <- ns[[".package"]][["version"]]
[17:47:23.876]                         if (is.null(version)) 
[17:47:23.876]                           version <- utils::packageVersion("future")
[17:47:23.876]                       }
[17:47:23.876]                       else {
[17:47:23.876]                         version <- NULL
[17:47:23.876]                       }
[17:47:23.876]                       if (!has_future || version < "1.8.0") {
[17:47:23.876]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:23.876]                           "", base::R.version$version.string), 
[17:47:23.876]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:23.876]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:23.876]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:23.876]                             "release", "version")], collapse = " "), 
[17:47:23.876]                           hostname = base::Sys.info()[["nodename"]])
[17:47:23.876]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:23.876]                           info)
[17:47:23.876]                         info <- base::paste(info, collapse = "; ")
[17:47:23.876]                         if (!has_future) {
[17:47:23.876]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:23.876]                             info)
[17:47:23.876]                         }
[17:47:23.876]                         else {
[17:47:23.876]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:23.876]                             info, version)
[17:47:23.876]                         }
[17:47:23.876]                         base::stop(msg)
[17:47:23.876]                       }
[17:47:23.876]                     })
[17:47:23.876]                   }
[17:47:23.876]                   ...future.strategy.old <- future::plan("list")
[17:47:23.876]                   options(future.plan = NULL)
[17:47:23.876]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.876]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:23.876]                 }
[17:47:23.876]                 ...future.workdir <- getwd()
[17:47:23.876]             }
[17:47:23.876]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:23.876]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:23.876]         }
[17:47:23.876]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:23.876]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:23.876]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:23.876]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:23.876]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:23.876]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:23.876]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:23.876]             base::names(...future.oldOptions))
[17:47:23.876]     }
[17:47:23.876]     if (FALSE) {
[17:47:23.876]     }
[17:47:23.876]     else {
[17:47:23.876]         if (TRUE) {
[17:47:23.876]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:23.876]                 open = "w")
[17:47:23.876]         }
[17:47:23.876]         else {
[17:47:23.876]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:23.876]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:23.876]         }
[17:47:23.876]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:23.876]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:23.876]             base::sink(type = "output", split = FALSE)
[17:47:23.876]             base::close(...future.stdout)
[17:47:23.876]         }, add = TRUE)
[17:47:23.876]     }
[17:47:23.876]     ...future.frame <- base::sys.nframe()
[17:47:23.876]     ...future.conditions <- base::list()
[17:47:23.876]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:23.876]     if (FALSE) {
[17:47:23.876]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:23.876]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:23.876]     }
[17:47:23.876]     ...future.result <- base::tryCatch({
[17:47:23.876]         base::withCallingHandlers({
[17:47:23.876]             ...future.value <- base::withVisible(base::local({
[17:47:23.876]                 ...future.makeSendCondition <- base::local({
[17:47:23.876]                   sendCondition <- NULL
[17:47:23.876]                   function(frame = 1L) {
[17:47:23.876]                     if (is.function(sendCondition)) 
[17:47:23.876]                       return(sendCondition)
[17:47:23.876]                     ns <- getNamespace("parallel")
[17:47:23.876]                     if (exists("sendData", mode = "function", 
[17:47:23.876]                       envir = ns)) {
[17:47:23.876]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:23.876]                         envir = ns)
[17:47:23.876]                       envir <- sys.frame(frame)
[17:47:23.876]                       master <- NULL
[17:47:23.876]                       while (!identical(envir, .GlobalEnv) && 
[17:47:23.876]                         !identical(envir, emptyenv())) {
[17:47:23.876]                         if (exists("master", mode = "list", envir = envir, 
[17:47:23.876]                           inherits = FALSE)) {
[17:47:23.876]                           master <- get("master", mode = "list", 
[17:47:23.876]                             envir = envir, inherits = FALSE)
[17:47:23.876]                           if (inherits(master, c("SOCKnode", 
[17:47:23.876]                             "SOCK0node"))) {
[17:47:23.876]                             sendCondition <<- function(cond) {
[17:47:23.876]                               data <- list(type = "VALUE", value = cond, 
[17:47:23.876]                                 success = TRUE)
[17:47:23.876]                               parallel_sendData(master, data)
[17:47:23.876]                             }
[17:47:23.876]                             return(sendCondition)
[17:47:23.876]                           }
[17:47:23.876]                         }
[17:47:23.876]                         frame <- frame + 1L
[17:47:23.876]                         envir <- sys.frame(frame)
[17:47:23.876]                       }
[17:47:23.876]                     }
[17:47:23.876]                     sendCondition <<- function(cond) NULL
[17:47:23.876]                   }
[17:47:23.876]                 })
[17:47:23.876]                 withCallingHandlers({
[17:47:23.876]                   NA
[17:47:23.876]                 }, immediateCondition = function(cond) {
[17:47:23.876]                   sendCondition <- ...future.makeSendCondition()
[17:47:23.876]                   sendCondition(cond)
[17:47:23.876]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.876]                   {
[17:47:23.876]                     inherits <- base::inherits
[17:47:23.876]                     invokeRestart <- base::invokeRestart
[17:47:23.876]                     is.null <- base::is.null
[17:47:23.876]                     muffled <- FALSE
[17:47:23.876]                     if (inherits(cond, "message")) {
[17:47:23.876]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:23.876]                       if (muffled) 
[17:47:23.876]                         invokeRestart("muffleMessage")
[17:47:23.876]                     }
[17:47:23.876]                     else if (inherits(cond, "warning")) {
[17:47:23.876]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:23.876]                       if (muffled) 
[17:47:23.876]                         invokeRestart("muffleWarning")
[17:47:23.876]                     }
[17:47:23.876]                     else if (inherits(cond, "condition")) {
[17:47:23.876]                       if (!is.null(pattern)) {
[17:47:23.876]                         computeRestarts <- base::computeRestarts
[17:47:23.876]                         grepl <- base::grepl
[17:47:23.876]                         restarts <- computeRestarts(cond)
[17:47:23.876]                         for (restart in restarts) {
[17:47:23.876]                           name <- restart$name
[17:47:23.876]                           if (is.null(name)) 
[17:47:23.876]                             next
[17:47:23.876]                           if (!grepl(pattern, name)) 
[17:47:23.876]                             next
[17:47:23.876]                           invokeRestart(restart)
[17:47:23.876]                           muffled <- TRUE
[17:47:23.876]                           break
[17:47:23.876]                         }
[17:47:23.876]                       }
[17:47:23.876]                     }
[17:47:23.876]                     invisible(muffled)
[17:47:23.876]                   }
[17:47:23.876]                   muffleCondition(cond)
[17:47:23.876]                 })
[17:47:23.876]             }))
[17:47:23.876]             future::FutureResult(value = ...future.value$value, 
[17:47:23.876]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.876]                   ...future.rng), globalenv = if (FALSE) 
[17:47:23.876]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:23.876]                     ...future.globalenv.names))
[17:47:23.876]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:23.876]         }, condition = base::local({
[17:47:23.876]             c <- base::c
[17:47:23.876]             inherits <- base::inherits
[17:47:23.876]             invokeRestart <- base::invokeRestart
[17:47:23.876]             length <- base::length
[17:47:23.876]             list <- base::list
[17:47:23.876]             seq.int <- base::seq.int
[17:47:23.876]             signalCondition <- base::signalCondition
[17:47:23.876]             sys.calls <- base::sys.calls
[17:47:23.876]             `[[` <- base::`[[`
[17:47:23.876]             `+` <- base::`+`
[17:47:23.876]             `<<-` <- base::`<<-`
[17:47:23.876]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:23.876]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:23.876]                   3L)]
[17:47:23.876]             }
[17:47:23.876]             function(cond) {
[17:47:23.876]                 is_error <- inherits(cond, "error")
[17:47:23.876]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:23.876]                   NULL)
[17:47:23.876]                 if (is_error) {
[17:47:23.876]                   sessionInformation <- function() {
[17:47:23.876]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:23.876]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:23.876]                       search = base::search(), system = base::Sys.info())
[17:47:23.876]                   }
[17:47:23.876]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.876]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:23.876]                     cond$call), session = sessionInformation(), 
[17:47:23.876]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:23.876]                   signalCondition(cond)
[17:47:23.876]                 }
[17:47:23.876]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:23.876]                 "immediateCondition"))) {
[17:47:23.876]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:23.876]                   ...future.conditions[[length(...future.conditions) + 
[17:47:23.876]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:23.876]                   if (TRUE && !signal) {
[17:47:23.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.876]                     {
[17:47:23.876]                       inherits <- base::inherits
[17:47:23.876]                       invokeRestart <- base::invokeRestart
[17:47:23.876]                       is.null <- base::is.null
[17:47:23.876]                       muffled <- FALSE
[17:47:23.876]                       if (inherits(cond, "message")) {
[17:47:23.876]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.876]                         if (muffled) 
[17:47:23.876]                           invokeRestart("muffleMessage")
[17:47:23.876]                       }
[17:47:23.876]                       else if (inherits(cond, "warning")) {
[17:47:23.876]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.876]                         if (muffled) 
[17:47:23.876]                           invokeRestart("muffleWarning")
[17:47:23.876]                       }
[17:47:23.876]                       else if (inherits(cond, "condition")) {
[17:47:23.876]                         if (!is.null(pattern)) {
[17:47:23.876]                           computeRestarts <- base::computeRestarts
[17:47:23.876]                           grepl <- base::grepl
[17:47:23.876]                           restarts <- computeRestarts(cond)
[17:47:23.876]                           for (restart in restarts) {
[17:47:23.876]                             name <- restart$name
[17:47:23.876]                             if (is.null(name)) 
[17:47:23.876]                               next
[17:47:23.876]                             if (!grepl(pattern, name)) 
[17:47:23.876]                               next
[17:47:23.876]                             invokeRestart(restart)
[17:47:23.876]                             muffled <- TRUE
[17:47:23.876]                             break
[17:47:23.876]                           }
[17:47:23.876]                         }
[17:47:23.876]                       }
[17:47:23.876]                       invisible(muffled)
[17:47:23.876]                     }
[17:47:23.876]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.876]                   }
[17:47:23.876]                 }
[17:47:23.876]                 else {
[17:47:23.876]                   if (TRUE) {
[17:47:23.876]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:23.876]                     {
[17:47:23.876]                       inherits <- base::inherits
[17:47:23.876]                       invokeRestart <- base::invokeRestart
[17:47:23.876]                       is.null <- base::is.null
[17:47:23.876]                       muffled <- FALSE
[17:47:23.876]                       if (inherits(cond, "message")) {
[17:47:23.876]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:23.876]                         if (muffled) 
[17:47:23.876]                           invokeRestart("muffleMessage")
[17:47:23.876]                       }
[17:47:23.876]                       else if (inherits(cond, "warning")) {
[17:47:23.876]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:23.876]                         if (muffled) 
[17:47:23.876]                           invokeRestart("muffleWarning")
[17:47:23.876]                       }
[17:47:23.876]                       else if (inherits(cond, "condition")) {
[17:47:23.876]                         if (!is.null(pattern)) {
[17:47:23.876]                           computeRestarts <- base::computeRestarts
[17:47:23.876]                           grepl <- base::grepl
[17:47:23.876]                           restarts <- computeRestarts(cond)
[17:47:23.876]                           for (restart in restarts) {
[17:47:23.876]                             name <- restart$name
[17:47:23.876]                             if (is.null(name)) 
[17:47:23.876]                               next
[17:47:23.876]                             if (!grepl(pattern, name)) 
[17:47:23.876]                               next
[17:47:23.876]                             invokeRestart(restart)
[17:47:23.876]                             muffled <- TRUE
[17:47:23.876]                             break
[17:47:23.876]                           }
[17:47:23.876]                         }
[17:47:23.876]                       }
[17:47:23.876]                       invisible(muffled)
[17:47:23.876]                     }
[17:47:23.876]                     muffleCondition(cond, pattern = "^muffle")
[17:47:23.876]                   }
[17:47:23.876]                 }
[17:47:23.876]             }
[17:47:23.876]         }))
[17:47:23.876]     }, error = function(ex) {
[17:47:23.876]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:23.876]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:23.876]                 ...future.rng), started = ...future.startTime, 
[17:47:23.876]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:23.876]             version = "1.8"), class = "FutureResult")
[17:47:23.876]     }, finally = {
[17:47:23.876]         if (!identical(...future.workdir, getwd())) 
[17:47:23.876]             setwd(...future.workdir)
[17:47:23.876]         {
[17:47:23.876]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:23.876]                 ...future.oldOptions$nwarnings <- NULL
[17:47:23.876]             }
[17:47:23.876]             base::options(...future.oldOptions)
[17:47:23.876]             if (.Platform$OS.type == "windows") {
[17:47:23.876]                 old_names <- names(...future.oldEnvVars)
[17:47:23.876]                 envs <- base::Sys.getenv()
[17:47:23.876]                 names <- names(envs)
[17:47:23.876]                 common <- intersect(names, old_names)
[17:47:23.876]                 added <- setdiff(names, old_names)
[17:47:23.876]                 removed <- setdiff(old_names, names)
[17:47:23.876]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:23.876]                   envs[common]]
[17:47:23.876]                 NAMES <- toupper(changed)
[17:47:23.876]                 args <- list()
[17:47:23.876]                 for (kk in seq_along(NAMES)) {
[17:47:23.876]                   name <- changed[[kk]]
[17:47:23.876]                   NAME <- NAMES[[kk]]
[17:47:23.876]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.876]                     next
[17:47:23.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.876]                 }
[17:47:23.876]                 NAMES <- toupper(added)
[17:47:23.876]                 for (kk in seq_along(NAMES)) {
[17:47:23.876]                   name <- added[[kk]]
[17:47:23.876]                   NAME <- NAMES[[kk]]
[17:47:23.876]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.876]                     next
[17:47:23.876]                   args[[name]] <- ""
[17:47:23.876]                 }
[17:47:23.876]                 NAMES <- toupper(removed)
[17:47:23.876]                 for (kk in seq_along(NAMES)) {
[17:47:23.876]                   name <- removed[[kk]]
[17:47:23.876]                   NAME <- NAMES[[kk]]
[17:47:23.876]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:23.876]                     next
[17:47:23.876]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:23.876]                 }
[17:47:23.876]                 if (length(args) > 0) 
[17:47:23.876]                   base::do.call(base::Sys.setenv, args = args)
[17:47:23.876]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:23.876]             }
[17:47:23.876]             else {
[17:47:23.876]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:23.876]             }
[17:47:23.876]             {
[17:47:23.876]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:23.876]                   0L) {
[17:47:23.876]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:23.876]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:23.876]                   base::options(opts)
[17:47:23.876]                 }
[17:47:23.876]                 {
[17:47:23.876]                   NULL
[17:47:23.876]                   options(future.plan = NULL)
[17:47:23.876]                   if (is.na(NA_character_)) 
[17:47:23.876]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:23.876]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:23.876]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:23.876]                     .init = FALSE)
[17:47:23.876]                 }
[17:47:23.876]             }
[17:47:23.876]         }
[17:47:23.876]     })
[17:47:23.876]     if (TRUE) {
[17:47:23.876]         base::sink(type = "output", split = FALSE)
[17:47:23.876]         if (TRUE) {
[17:47:23.876]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:23.876]         }
[17:47:23.876]         else {
[17:47:23.876]             ...future.result["stdout"] <- base::list(NULL)
[17:47:23.876]         }
[17:47:23.876]         base::close(...future.stdout)
[17:47:23.876]         ...future.stdout <- NULL
[17:47:23.876]     }
[17:47:23.876]     ...future.result$conditions <- ...future.conditions
[17:47:23.876]     ...future.result$finished <- base::Sys.time()
[17:47:23.876]     ...future.result
[17:47:23.876] }
[17:47:23.928] ClusterFuture started
[17:47:23.928] result() for ClusterFuture ...
[17:47:23.928] receiveMessageFromWorker() for ClusterFuture ...
[17:47:23.928] - Validating connection of ClusterFuture
[17:47:23.960] - received message: FutureResult
[17:47:23.960] - Received FutureResult
[17:47:23.960] - Erased future from FutureRegistry
[17:47:23.960] result() for ClusterFuture ...
[17:47:23.960] - result already collected: FutureResult
[17:47:23.960] result() for ClusterFuture ... done
[17:47:23.961] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:23.961] result() for ClusterFuture ... done
[17:47:23.961] result() for ClusterFuture ...
[17:47:23.961] - result already collected: FutureResult
[17:47:23.961] result() for ClusterFuture ... done
[17:47:23.961] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:23.967] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[17:47:23.971] [local output] makeClusterPSOCK() ...
[17:47:23.974] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:47:23.975] [local output] Base port: 11044
[17:47:23.975] [local output] Getting setup options for 2 cluster nodes ...
[17:47:23.975] [local output]  - Node 1 of 2 ...
[17:47:23.976] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:23.976] [local output] Rscript port: 11044

[17:47:23.976] [local output]  - Node 2 of 2 ...
[17:47:23.977] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:23.977] [local output] Rscript port: 11044

[17:47:23.977] [local output] Getting setup options for 2 cluster nodes ... done
[17:47:23.978] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:23.978] [local output] Setting up PSOCK nodes in parallel
[17:47:23.978] List of 36
[17:47:23.978]  $ worker          : chr "localhost"
[17:47:23.978]   ..- attr(*, "localhost")= logi TRUE
[17:47:23.978]  $ master          : chr "localhost"
[17:47:23.978]  $ port            : int 11044
[17:47:23.978]  $ connectTimeout  : num 120
[17:47:23.978]  $ timeout         : num 2592000
[17:47:23.978]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:23.978]  $ homogeneous     : logi TRUE
[17:47:23.978]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:23.978]  $ rscript_envs    : NULL
[17:47:23.978]  $ rscript_libs    : NULL
[17:47:23.978]  $ rscript_startup : NULL
[17:47:23.978]  $ rscript_sh      : chr "sh"
[17:47:23.978]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:23.978]  $ methods         : logi TRUE
[17:47:23.978]  $ socketOptions   : chr "no-delay"
[17:47:23.978]  $ useXDR          : logi FALSE
[17:47:23.978]  $ outfile         : chr "/dev/null"
[17:47:23.978]  $ renice          : int NA
[17:47:23.978]  $ rshcmd          : NULL
[17:47:23.978]  $ user            : chr(0) 
[17:47:23.978]  $ revtunnel       : logi FALSE
[17:47:23.978]  $ rshlogfile      : NULL
[17:47:23.978]  $ rshopts         : chr(0) 
[17:47:23.978]  $ rank            : int 1
[17:47:23.978]  $ manual          : logi FALSE
[17:47:23.978]  $ dryrun          : logi FALSE
[17:47:23.978]  $ quiet           : logi FALSE
[17:47:23.978]  $ setup_strategy  : chr "parallel"
[17:47:23.978]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:23.978]  $ pidfile         : chr "/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a54b012e18.pid"
[17:47:23.978]  $ rshcmd_label    : NULL
[17:47:23.978]  $ rsh_call        : NULL
[17:47:23.978]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:23.978]  $ localMachine    : logi TRUE
[17:47:23.978]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:23.978]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:23.978]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:23.978]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:23.978]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:23.978]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:23.978]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:23.978]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:23.978]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:23.978]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:23.978]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:23.978]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:23.978]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:23.978]  $ arguments       :List of 28
[17:47:23.978]   ..$ worker          : chr "localhost"
[17:47:23.978]   ..$ master          : NULL
[17:47:23.978]   ..$ port            : int 11044
[17:47:23.978]   ..$ connectTimeout  : num 120
[17:47:23.978]   ..$ timeout         : num 2592000
[17:47:23.978]   ..$ rscript         : NULL
[17:47:23.978]   ..$ homogeneous     : NULL
[17:47:23.978]   ..$ rscript_args    : NULL
[17:47:23.978]   ..$ rscript_envs    : NULL
[17:47:23.978]   ..$ rscript_libs    : NULL
[17:47:23.978]   ..$ rscript_startup : NULL
[17:47:23.978]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:23.978]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:23.978]   ..$ methods         : logi TRUE
[17:47:23.978]   ..$ socketOptions   : chr "no-delay"
[17:47:23.978]   ..$ useXDR          : logi FALSE
[17:47:23.978]   ..$ outfile         : chr "/dev/null"
[17:47:23.978]   ..$ renice          : int NA
[17:47:23.978]   ..$ rshcmd          : NULL
[17:47:23.978]   ..$ user            : NULL
[17:47:23.978]   ..$ revtunnel       : logi NA
[17:47:23.978]   ..$ rshlogfile      : NULL
[17:47:23.978]   ..$ rshopts         : NULL
[17:47:23.978]   ..$ rank            : int 1
[17:47:23.978]   ..$ manual          : logi FALSE
[17:47:23.978]   ..$ dryrun          : logi FALSE
[17:47:23.978]   ..$ quiet           : logi FALSE
[17:47:23.978]   ..$ setup_strategy  : chr "parallel"
[17:47:23.978]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:23.996] [local output] System call to launch all workers:
[17:47:23.996] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmps9HdGT/worker.rank=1.parallelly.parent=45989.b3a54b012e18.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11044 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:23.996] [local output] Starting PSOCK main server
[17:47:23.997] [local output] Workers launched
[17:47:23.997] [local output] Waiting for workers to connect back
[17:47:23.997]  - [local output] 0 workers out of 2 ready
[17:47:24.233]  - [local output] 0 workers out of 2 ready
[17:47:24.233]  - [local output] 1 workers out of 2 ready
[17:47:24.233]  - [local output] 2 workers out of 2 ready
[17:47:24.233] [local output] Launching of workers completed
[17:47:24.234] [local output] Collecting session information from workers
[17:47:24.234] [local output]  - Worker #1 of 2
[17:47:24.235] [local output]  - Worker #2 of 2
[17:47:24.235] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[17:47:24.239] plan(): Setting new future strategy stack:
[17:47:24.239] List of future strategies:
[17:47:24.239] 1. cluster:
[17:47:24.239]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[17:47:24.239]    - tweaked: TRUE
[17:47:24.239]    - call: plan(cluster, workers = workers)
[17:47:24.241] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:24.241] cluster:
[17:47:24.241] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[17:47:24.241] - tweaked: TRUE
[17:47:24.241] - call: plan(cluster, workers = workers)
[17:47:24.243] getGlobalsAndPackages() ...
[17:47:24.243] Not searching for globals
[17:47:24.243] - globals: [0] <none>
[17:47:24.243] getGlobalsAndPackages() ... DONE
[17:47:24.254] Packages needed by the future expression (n = 0): <none>
[17:47:24.254] Packages needed by future strategies (n = 0): <none>
[17:47:24.254] {
[17:47:24.254]     {
[17:47:24.254]         {
[17:47:24.254]             ...future.startTime <- base::Sys.time()
[17:47:24.254]             {
[17:47:24.254]                 {
[17:47:24.254]                   {
[17:47:24.254]                     base::local({
[17:47:24.254]                       has_future <- base::requireNamespace("future", 
[17:47:24.254]                         quietly = TRUE)
[17:47:24.254]                       if (has_future) {
[17:47:24.254]                         ns <- base::getNamespace("future")
[17:47:24.254]                         version <- ns[[".package"]][["version"]]
[17:47:24.254]                         if (is.null(version)) 
[17:47:24.254]                           version <- utils::packageVersion("future")
[17:47:24.254]                       }
[17:47:24.254]                       else {
[17:47:24.254]                         version <- NULL
[17:47:24.254]                       }
[17:47:24.254]                       if (!has_future || version < "1.8.0") {
[17:47:24.254]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:24.254]                           "", base::R.version$version.string), 
[17:47:24.254]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:24.254]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:24.254]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:24.254]                             "release", "version")], collapse = " "), 
[17:47:24.254]                           hostname = base::Sys.info()[["nodename"]])
[17:47:24.254]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:24.254]                           info)
[17:47:24.254]                         info <- base::paste(info, collapse = "; ")
[17:47:24.254]                         if (!has_future) {
[17:47:24.254]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:24.254]                             info)
[17:47:24.254]                         }
[17:47:24.254]                         else {
[17:47:24.254]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:24.254]                             info, version)
[17:47:24.254]                         }
[17:47:24.254]                         base::stop(msg)
[17:47:24.254]                       }
[17:47:24.254]                     })
[17:47:24.254]                   }
[17:47:24.254]                   ...future.strategy.old <- future::plan("list")
[17:47:24.254]                   options(future.plan = NULL)
[17:47:24.254]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:24.254]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:24.254]                 }
[17:47:24.254]                 ...future.workdir <- getwd()
[17:47:24.254]             }
[17:47:24.254]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:24.254]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:24.254]         }
[17:47:24.254]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:24.254]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:24.254]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:24.254]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:24.254]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:24.254]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:24.254]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:24.254]             base::names(...future.oldOptions))
[17:47:24.254]     }
[17:47:24.254]     if (FALSE) {
[17:47:24.254]     }
[17:47:24.254]     else {
[17:47:24.254]         if (TRUE) {
[17:47:24.254]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:24.254]                 open = "w")
[17:47:24.254]         }
[17:47:24.254]         else {
[17:47:24.254]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:24.254]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:24.254]         }
[17:47:24.254]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:24.254]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:24.254]             base::sink(type = "output", split = FALSE)
[17:47:24.254]             base::close(...future.stdout)
[17:47:24.254]         }, add = TRUE)
[17:47:24.254]     }
[17:47:24.254]     ...future.frame <- base::sys.nframe()
[17:47:24.254]     ...future.conditions <- base::list()
[17:47:24.254]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:24.254]     if (FALSE) {
[17:47:24.254]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:24.254]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:24.254]     }
[17:47:24.254]     ...future.result <- base::tryCatch({
[17:47:24.254]         base::withCallingHandlers({
[17:47:24.254]             ...future.value <- base::withVisible(base::local({
[17:47:24.254]                 ...future.makeSendCondition <- base::local({
[17:47:24.254]                   sendCondition <- NULL
[17:47:24.254]                   function(frame = 1L) {
[17:47:24.254]                     if (is.function(sendCondition)) 
[17:47:24.254]                       return(sendCondition)
[17:47:24.254]                     ns <- getNamespace("parallel")
[17:47:24.254]                     if (exists("sendData", mode = "function", 
[17:47:24.254]                       envir = ns)) {
[17:47:24.254]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:24.254]                         envir = ns)
[17:47:24.254]                       envir <- sys.frame(frame)
[17:47:24.254]                       master <- NULL
[17:47:24.254]                       while (!identical(envir, .GlobalEnv) && 
[17:47:24.254]                         !identical(envir, emptyenv())) {
[17:47:24.254]                         if (exists("master", mode = "list", envir = envir, 
[17:47:24.254]                           inherits = FALSE)) {
[17:47:24.254]                           master <- get("master", mode = "list", 
[17:47:24.254]                             envir = envir, inherits = FALSE)
[17:47:24.254]                           if (inherits(master, c("SOCKnode", 
[17:47:24.254]                             "SOCK0node"))) {
[17:47:24.254]                             sendCondition <<- function(cond) {
[17:47:24.254]                               data <- list(type = "VALUE", value = cond, 
[17:47:24.254]                                 success = TRUE)
[17:47:24.254]                               parallel_sendData(master, data)
[17:47:24.254]                             }
[17:47:24.254]                             return(sendCondition)
[17:47:24.254]                           }
[17:47:24.254]                         }
[17:47:24.254]                         frame <- frame + 1L
[17:47:24.254]                         envir <- sys.frame(frame)
[17:47:24.254]                       }
[17:47:24.254]                     }
[17:47:24.254]                     sendCondition <<- function(cond) NULL
[17:47:24.254]                   }
[17:47:24.254]                 })
[17:47:24.254]                 withCallingHandlers({
[17:47:24.254]                   NA
[17:47:24.254]                 }, immediateCondition = function(cond) {
[17:47:24.254]                   sendCondition <- ...future.makeSendCondition()
[17:47:24.254]                   sendCondition(cond)
[17:47:24.254]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:24.254]                   {
[17:47:24.254]                     inherits <- base::inherits
[17:47:24.254]                     invokeRestart <- base::invokeRestart
[17:47:24.254]                     is.null <- base::is.null
[17:47:24.254]                     muffled <- FALSE
[17:47:24.254]                     if (inherits(cond, "message")) {
[17:47:24.254]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:24.254]                       if (muffled) 
[17:47:24.254]                         invokeRestart("muffleMessage")
[17:47:24.254]                     }
[17:47:24.254]                     else if (inherits(cond, "warning")) {
[17:47:24.254]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:24.254]                       if (muffled) 
[17:47:24.254]                         invokeRestart("muffleWarning")
[17:47:24.254]                     }
[17:47:24.254]                     else if (inherits(cond, "condition")) {
[17:47:24.254]                       if (!is.null(pattern)) {
[17:47:24.254]                         computeRestarts <- base::computeRestarts
[17:47:24.254]                         grepl <- base::grepl
[17:47:24.254]                         restarts <- computeRestarts(cond)
[17:47:24.254]                         for (restart in restarts) {
[17:47:24.254]                           name <- restart$name
[17:47:24.254]                           if (is.null(name)) 
[17:47:24.254]                             next
[17:47:24.254]                           if (!grepl(pattern, name)) 
[17:47:24.254]                             next
[17:47:24.254]                           invokeRestart(restart)
[17:47:24.254]                           muffled <- TRUE
[17:47:24.254]                           break
[17:47:24.254]                         }
[17:47:24.254]                       }
[17:47:24.254]                     }
[17:47:24.254]                     invisible(muffled)
[17:47:24.254]                   }
[17:47:24.254]                   muffleCondition(cond)
[17:47:24.254]                 })
[17:47:24.254]             }))
[17:47:24.254]             future::FutureResult(value = ...future.value$value, 
[17:47:24.254]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:24.254]                   ...future.rng), globalenv = if (FALSE) 
[17:47:24.254]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:24.254]                     ...future.globalenv.names))
[17:47:24.254]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:24.254]         }, condition = base::local({
[17:47:24.254]             c <- base::c
[17:47:24.254]             inherits <- base::inherits
[17:47:24.254]             invokeRestart <- base::invokeRestart
[17:47:24.254]             length <- base::length
[17:47:24.254]             list <- base::list
[17:47:24.254]             seq.int <- base::seq.int
[17:47:24.254]             signalCondition <- base::signalCondition
[17:47:24.254]             sys.calls <- base::sys.calls
[17:47:24.254]             `[[` <- base::`[[`
[17:47:24.254]             `+` <- base::`+`
[17:47:24.254]             `<<-` <- base::`<<-`
[17:47:24.254]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:24.254]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:24.254]                   3L)]
[17:47:24.254]             }
[17:47:24.254]             function(cond) {
[17:47:24.254]                 is_error <- inherits(cond, "error")
[17:47:24.254]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:24.254]                   NULL)
[17:47:24.254]                 if (is_error) {
[17:47:24.254]                   sessionInformation <- function() {
[17:47:24.254]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:24.254]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:24.254]                       search = base::search(), system = base::Sys.info())
[17:47:24.254]                   }
[17:47:24.254]                   ...future.conditions[[length(...future.conditions) + 
[17:47:24.254]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:24.254]                     cond$call), session = sessionInformation(), 
[17:47:24.254]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:24.254]                   signalCondition(cond)
[17:47:24.254]                 }
[17:47:24.254]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:24.254]                 "immediateCondition"))) {
[17:47:24.254]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:24.254]                   ...future.conditions[[length(...future.conditions) + 
[17:47:24.254]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:24.254]                   if (TRUE && !signal) {
[17:47:24.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:24.254]                     {
[17:47:24.254]                       inherits <- base::inherits
[17:47:24.254]                       invokeRestart <- base::invokeRestart
[17:47:24.254]                       is.null <- base::is.null
[17:47:24.254]                       muffled <- FALSE
[17:47:24.254]                       if (inherits(cond, "message")) {
[17:47:24.254]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:24.254]                         if (muffled) 
[17:47:24.254]                           invokeRestart("muffleMessage")
[17:47:24.254]                       }
[17:47:24.254]                       else if (inherits(cond, "warning")) {
[17:47:24.254]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:24.254]                         if (muffled) 
[17:47:24.254]                           invokeRestart("muffleWarning")
[17:47:24.254]                       }
[17:47:24.254]                       else if (inherits(cond, "condition")) {
[17:47:24.254]                         if (!is.null(pattern)) {
[17:47:24.254]                           computeRestarts <- base::computeRestarts
[17:47:24.254]                           grepl <- base::grepl
[17:47:24.254]                           restarts <- computeRestarts(cond)
[17:47:24.254]                           for (restart in restarts) {
[17:47:24.254]                             name <- restart$name
[17:47:24.254]                             if (is.null(name)) 
[17:47:24.254]                               next
[17:47:24.254]                             if (!grepl(pattern, name)) 
[17:47:24.254]                               next
[17:47:24.254]                             invokeRestart(restart)
[17:47:24.254]                             muffled <- TRUE
[17:47:24.254]                             break
[17:47:24.254]                           }
[17:47:24.254]                         }
[17:47:24.254]                       }
[17:47:24.254]                       invisible(muffled)
[17:47:24.254]                     }
[17:47:24.254]                     muffleCondition(cond, pattern = "^muffle")
[17:47:24.254]                   }
[17:47:24.254]                 }
[17:47:24.254]                 else {
[17:47:24.254]                   if (TRUE) {
[17:47:24.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:24.254]                     {
[17:47:24.254]                       inherits <- base::inherits
[17:47:24.254]                       invokeRestart <- base::invokeRestart
[17:47:24.254]                       is.null <- base::is.null
[17:47:24.254]                       muffled <- FALSE
[17:47:24.254]                       if (inherits(cond, "message")) {
[17:47:24.254]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:24.254]                         if (muffled) 
[17:47:24.254]                           invokeRestart("muffleMessage")
[17:47:24.254]                       }
[17:47:24.254]                       else if (inherits(cond, "warning")) {
[17:47:24.254]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:24.254]                         if (muffled) 
[17:47:24.254]                           invokeRestart("muffleWarning")
[17:47:24.254]                       }
[17:47:24.254]                       else if (inherits(cond, "condition")) {
[17:47:24.254]                         if (!is.null(pattern)) {
[17:47:24.254]                           computeRestarts <- base::computeRestarts
[17:47:24.254]                           grepl <- base::grepl
[17:47:24.254]                           restarts <- computeRestarts(cond)
[17:47:24.254]                           for (restart in restarts) {
[17:47:24.254]                             name <- restart$name
[17:47:24.254]                             if (is.null(name)) 
[17:47:24.254]                               next
[17:47:24.254]                             if (!grepl(pattern, name)) 
[17:47:24.254]                               next
[17:47:24.254]                             invokeRestart(restart)
[17:47:24.254]                             muffled <- TRUE
[17:47:24.254]                             break
[17:47:24.254]                           }
[17:47:24.254]                         }
[17:47:24.254]                       }
[17:47:24.254]                       invisible(muffled)
[17:47:24.254]                     }
[17:47:24.254]                     muffleCondition(cond, pattern = "^muffle")
[17:47:24.254]                   }
[17:47:24.254]                 }
[17:47:24.254]             }
[17:47:24.254]         }))
[17:47:24.254]     }, error = function(ex) {
[17:47:24.254]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:24.254]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:24.254]                 ...future.rng), started = ...future.startTime, 
[17:47:24.254]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:24.254]             version = "1.8"), class = "FutureResult")
[17:47:24.254]     }, finally = {
[17:47:24.254]         if (!identical(...future.workdir, getwd())) 
[17:47:24.254]             setwd(...future.workdir)
[17:47:24.254]         {
[17:47:24.254]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:24.254]                 ...future.oldOptions$nwarnings <- NULL
[17:47:24.254]             }
[17:47:24.254]             base::options(...future.oldOptions)
[17:47:24.254]             if (.Platform$OS.type == "windows") {
[17:47:24.254]                 old_names <- names(...future.oldEnvVars)
[17:47:24.254]                 envs <- base::Sys.getenv()
[17:47:24.254]                 names <- names(envs)
[17:47:24.254]                 common <- intersect(names, old_names)
[17:47:24.254]                 added <- setdiff(names, old_names)
[17:47:24.254]                 removed <- setdiff(old_names, names)
[17:47:24.254]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:24.254]                   envs[common]]
[17:47:24.254]                 NAMES <- toupper(changed)
[17:47:24.254]                 args <- list()
[17:47:24.254]                 for (kk in seq_along(NAMES)) {
[17:47:24.254]                   name <- changed[[kk]]
[17:47:24.254]                   NAME <- NAMES[[kk]]
[17:47:24.254]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:24.254]                     next
[17:47:24.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:24.254]                 }
[17:47:24.254]                 NAMES <- toupper(added)
[17:47:24.254]                 for (kk in seq_along(NAMES)) {
[17:47:24.254]                   name <- added[[kk]]
[17:47:24.254]                   NAME <- NAMES[[kk]]
[17:47:24.254]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:24.254]                     next
[17:47:24.254]                   args[[name]] <- ""
[17:47:24.254]                 }
[17:47:24.254]                 NAMES <- toupper(removed)
[17:47:24.254]                 for (kk in seq_along(NAMES)) {
[17:47:24.254]                   name <- removed[[kk]]
[17:47:24.254]                   NAME <- NAMES[[kk]]
[17:47:24.254]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:24.254]                     next
[17:47:24.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:24.254]                 }
[17:47:24.254]                 if (length(args) > 0) 
[17:47:24.254]                   base::do.call(base::Sys.setenv, args = args)
[17:47:24.254]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:24.254]             }
[17:47:24.254]             else {
[17:47:24.254]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:24.254]             }
[17:47:24.254]             {
[17:47:24.254]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:24.254]                   0L) {
[17:47:24.254]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:24.254]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:24.254]                   base::options(opts)
[17:47:24.254]                 }
[17:47:24.254]                 {
[17:47:24.254]                   NULL
[17:47:24.254]                   options(future.plan = NULL)
[17:47:24.254]                   if (is.na(NA_character_)) 
[17:47:24.254]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:24.254]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:24.254]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:24.254]                     .init = FALSE)
[17:47:24.254]                 }
[17:47:24.254]             }
[17:47:24.254]         }
[17:47:24.254]     })
[17:47:24.254]     if (TRUE) {
[17:47:24.254]         base::sink(type = "output", split = FALSE)
[17:47:24.254]         if (TRUE) {
[17:47:24.254]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:24.254]         }
[17:47:24.254]         else {
[17:47:24.254]             ...future.result["stdout"] <- base::list(NULL)
[17:47:24.254]         }
[17:47:24.254]         base::close(...future.stdout)
[17:47:24.254]         ...future.stdout <- NULL
[17:47:24.254]     }
[17:47:24.254]     ...future.result$conditions <- ...future.conditions
[17:47:24.254]     ...future.result$finished <- base::Sys.time()
[17:47:24.254]     ...future.result
[17:47:24.254] }
[17:47:24.305] ClusterFuture started
[17:47:24.306] result() for ClusterFuture ...
[17:47:24.306] receiveMessageFromWorker() for ClusterFuture ...
[17:47:24.306] - Validating connection of ClusterFuture
[17:47:24.337] - received message: FutureResult
[17:47:24.338] - Received FutureResult
[17:47:24.338] - Erased future from FutureRegistry
[17:47:24.338] result() for ClusterFuture ...
[17:47:24.338] - result already collected: FutureResult
[17:47:24.338] result() for ClusterFuture ... done
[17:47:24.338] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:24.338] result() for ClusterFuture ... done
[17:47:24.338] result() for ClusterFuture ...
[17:47:24.338] - result already collected: FutureResult
[17:47:24.338] result() for ClusterFuture ... done
[17:47:24.339] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:24.339] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[17:47:24.340] plan(): Setting new future strategy stack:
[17:47:24.340] List of future strategies:
[17:47:24.340] 1. FutureStrategy:
[17:47:24.340]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:24.340]    - tweaked: FALSE
[17:47:24.340]    - call: future::plan(oplan)
[17:47:24.341] plan(): nbrOfWorkers() = 1
> 
