
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:22.164] plan(): Setting new future strategy stack:
[17:02:22.165] List of future strategies:
[17:02:22.165] 1. sequential:
[17:02:22.165]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.165]    - tweaked: FALSE
[17:02:22.165]    - call: future::plan("sequential")
[17:02:22.176] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[17:02:22.189] getGlobalsAndPackages() ...
[17:02:22.189] Searching for globals...
[17:02:22.196] - globals found: [2] ‘{’, ‘cat’
[17:02:22.196] Searching for globals ... DONE
[17:02:22.196] Resolving globals: FALSE
[17:02:22.197] 
[17:02:22.197] 
[17:02:22.197] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[17:02:22.198] run() for ‘Future’ ...
[17:02:22.198] - state: ‘created’
[17:02:22.198] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:22.198] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:22.199] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:22.199]   - Field: ‘label’
[17:02:22.199]   - Field: ‘local’
[17:02:22.199]   - Field: ‘owner’
[17:02:22.199]   - Field: ‘envir’
[17:02:22.199]   - Field: ‘packages’
[17:02:22.199]   - Field: ‘gc’
[17:02:22.199]   - Field: ‘conditions’
[17:02:22.199]   - Field: ‘expr’
[17:02:22.199]   - Field: ‘uuid’
[17:02:22.200]   - Field: ‘seed’
[17:02:22.200]   - Field: ‘version’
[17:02:22.200]   - Field: ‘result’
[17:02:22.200]   - Field: ‘asynchronous’
[17:02:22.200]   - Field: ‘calls’
[17:02:22.200]   - Field: ‘globals’
[17:02:22.200]   - Field: ‘stdout’
[17:02:22.200]   - Field: ‘earlySignal’
[17:02:22.200]   - Field: ‘lazy’
[17:02:22.200]   - Field: ‘state’
[17:02:22.200] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:22.201] - Launch lazy future ...
[17:02:22.201] Packages needed by the future expression (n = 0): <none>
[17:02:22.201] Packages needed by future strategies (n = 0): <none>
[17:02:22.202] {
[17:02:22.202]     {
[17:02:22.202]         {
[17:02:22.202]             ...future.startTime <- base::Sys.time()
[17:02:22.202]             {
[17:02:22.202]                 {
[17:02:22.202]                   {
[17:02:22.202]                     base::local({
[17:02:22.202]                       has_future <- base::requireNamespace("future", 
[17:02:22.202]                         quietly = TRUE)
[17:02:22.202]                       if (has_future) {
[17:02:22.202]                         ns <- base::getNamespace("future")
[17:02:22.202]                         version <- ns[[".package"]][["version"]]
[17:02:22.202]                         if (is.null(version)) 
[17:02:22.202]                           version <- utils::packageVersion("future")
[17:02:22.202]                       }
[17:02:22.202]                       else {
[17:02:22.202]                         version <- NULL
[17:02:22.202]                       }
[17:02:22.202]                       if (!has_future || version < "1.8.0") {
[17:02:22.202]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.202]                           "", base::R.version$version.string), 
[17:02:22.202]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:22.202]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.202]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.202]                             "release", "version")], collapse = " "), 
[17:02:22.202]                           hostname = base::Sys.info()[["nodename"]])
[17:02:22.202]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.202]                           info)
[17:02:22.202]                         info <- base::paste(info, collapse = "; ")
[17:02:22.202]                         if (!has_future) {
[17:02:22.202]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.202]                             info)
[17:02:22.202]                         }
[17:02:22.202]                         else {
[17:02:22.202]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.202]                             info, version)
[17:02:22.202]                         }
[17:02:22.202]                         base::stop(msg)
[17:02:22.202]                       }
[17:02:22.202]                     })
[17:02:22.202]                   }
[17:02:22.202]                   ...future.strategy.old <- future::plan("list")
[17:02:22.202]                   options(future.plan = NULL)
[17:02:22.202]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.202]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.202]                 }
[17:02:22.202]                 ...future.workdir <- getwd()
[17:02:22.202]             }
[17:02:22.202]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.202]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.202]         }
[17:02:22.202]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.202]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.202]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.202]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.202]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.202]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.202]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.202]             base::names(...future.oldOptions))
[17:02:22.202]     }
[17:02:22.202]     if (FALSE) {
[17:02:22.202]     }
[17:02:22.202]     else {
[17:02:22.202]         if (TRUE) {
[17:02:22.202]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.202]                 open = "w")
[17:02:22.202]         }
[17:02:22.202]         else {
[17:02:22.202]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.202]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.202]         }
[17:02:22.202]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.202]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.202]             base::sink(type = "output", split = FALSE)
[17:02:22.202]             base::close(...future.stdout)
[17:02:22.202]         }, add = TRUE)
[17:02:22.202]     }
[17:02:22.202]     ...future.frame <- base::sys.nframe()
[17:02:22.202]     ...future.conditions <- base::list()
[17:02:22.202]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.202]     if (FALSE) {
[17:02:22.202]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.202]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.202]     }
[17:02:22.202]     ...future.result <- base::tryCatch({
[17:02:22.202]         base::withCallingHandlers({
[17:02:22.202]             ...future.value <- base::withVisible(base::local({
[17:02:22.202]                 cat("Future assignment evaluated\n")
[17:02:22.202]                 2
[17:02:22.202]             }))
[17:02:22.202]             future::FutureResult(value = ...future.value$value, 
[17:02:22.202]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.202]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.202]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.202]                     ...future.globalenv.names))
[17:02:22.202]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.202]         }, condition = base::local({
[17:02:22.202]             c <- base::c
[17:02:22.202]             inherits <- base::inherits
[17:02:22.202]             invokeRestart <- base::invokeRestart
[17:02:22.202]             length <- base::length
[17:02:22.202]             list <- base::list
[17:02:22.202]             seq.int <- base::seq.int
[17:02:22.202]             signalCondition <- base::signalCondition
[17:02:22.202]             sys.calls <- base::sys.calls
[17:02:22.202]             `[[` <- base::`[[`
[17:02:22.202]             `+` <- base::`+`
[17:02:22.202]             `<<-` <- base::`<<-`
[17:02:22.202]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.202]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.202]                   3L)]
[17:02:22.202]             }
[17:02:22.202]             function(cond) {
[17:02:22.202]                 is_error <- inherits(cond, "error")
[17:02:22.202]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.202]                   NULL)
[17:02:22.202]                 if (is_error) {
[17:02:22.202]                   sessionInformation <- function() {
[17:02:22.202]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.202]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.202]                       search = base::search(), system = base::Sys.info())
[17:02:22.202]                   }
[17:02:22.202]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.202]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.202]                     cond$call), session = sessionInformation(), 
[17:02:22.202]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.202]                   signalCondition(cond)
[17:02:22.202]                 }
[17:02:22.202]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.202]                 "immediateCondition"))) {
[17:02:22.202]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.202]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.202]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.202]                   if (TRUE && !signal) {
[17:02:22.202]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.202]                     {
[17:02:22.202]                       inherits <- base::inherits
[17:02:22.202]                       invokeRestart <- base::invokeRestart
[17:02:22.202]                       is.null <- base::is.null
[17:02:22.202]                       muffled <- FALSE
[17:02:22.202]                       if (inherits(cond, "message")) {
[17:02:22.202]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.202]                         if (muffled) 
[17:02:22.202]                           invokeRestart("muffleMessage")
[17:02:22.202]                       }
[17:02:22.202]                       else if (inherits(cond, "warning")) {
[17:02:22.202]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.202]                         if (muffled) 
[17:02:22.202]                           invokeRestart("muffleWarning")
[17:02:22.202]                       }
[17:02:22.202]                       else if (inherits(cond, "condition")) {
[17:02:22.202]                         if (!is.null(pattern)) {
[17:02:22.202]                           computeRestarts <- base::computeRestarts
[17:02:22.202]                           grepl <- base::grepl
[17:02:22.202]                           restarts <- computeRestarts(cond)
[17:02:22.202]                           for (restart in restarts) {
[17:02:22.202]                             name <- restart$name
[17:02:22.202]                             if (is.null(name)) 
[17:02:22.202]                               next
[17:02:22.202]                             if (!grepl(pattern, name)) 
[17:02:22.202]                               next
[17:02:22.202]                             invokeRestart(restart)
[17:02:22.202]                             muffled <- TRUE
[17:02:22.202]                             break
[17:02:22.202]                           }
[17:02:22.202]                         }
[17:02:22.202]                       }
[17:02:22.202]                       invisible(muffled)
[17:02:22.202]                     }
[17:02:22.202]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.202]                   }
[17:02:22.202]                 }
[17:02:22.202]                 else {
[17:02:22.202]                   if (TRUE) {
[17:02:22.202]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.202]                     {
[17:02:22.202]                       inherits <- base::inherits
[17:02:22.202]                       invokeRestart <- base::invokeRestart
[17:02:22.202]                       is.null <- base::is.null
[17:02:22.202]                       muffled <- FALSE
[17:02:22.202]                       if (inherits(cond, "message")) {
[17:02:22.202]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.202]                         if (muffled) 
[17:02:22.202]                           invokeRestart("muffleMessage")
[17:02:22.202]                       }
[17:02:22.202]                       else if (inherits(cond, "warning")) {
[17:02:22.202]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.202]                         if (muffled) 
[17:02:22.202]                           invokeRestart("muffleWarning")
[17:02:22.202]                       }
[17:02:22.202]                       else if (inherits(cond, "condition")) {
[17:02:22.202]                         if (!is.null(pattern)) {
[17:02:22.202]                           computeRestarts <- base::computeRestarts
[17:02:22.202]                           grepl <- base::grepl
[17:02:22.202]                           restarts <- computeRestarts(cond)
[17:02:22.202]                           for (restart in restarts) {
[17:02:22.202]                             name <- restart$name
[17:02:22.202]                             if (is.null(name)) 
[17:02:22.202]                               next
[17:02:22.202]                             if (!grepl(pattern, name)) 
[17:02:22.202]                               next
[17:02:22.202]                             invokeRestart(restart)
[17:02:22.202]                             muffled <- TRUE
[17:02:22.202]                             break
[17:02:22.202]                           }
[17:02:22.202]                         }
[17:02:22.202]                       }
[17:02:22.202]                       invisible(muffled)
[17:02:22.202]                     }
[17:02:22.202]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.202]                   }
[17:02:22.202]                 }
[17:02:22.202]             }
[17:02:22.202]         }))
[17:02:22.202]     }, error = function(ex) {
[17:02:22.202]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.202]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.202]                 ...future.rng), started = ...future.startTime, 
[17:02:22.202]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.202]             version = "1.8"), class = "FutureResult")
[17:02:22.202]     }, finally = {
[17:02:22.202]         if (!identical(...future.workdir, getwd())) 
[17:02:22.202]             setwd(...future.workdir)
[17:02:22.202]         {
[17:02:22.202]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.202]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.202]             }
[17:02:22.202]             base::options(...future.oldOptions)
[17:02:22.202]             if (.Platform$OS.type == "windows") {
[17:02:22.202]                 old_names <- names(...future.oldEnvVars)
[17:02:22.202]                 envs <- base::Sys.getenv()
[17:02:22.202]                 names <- names(envs)
[17:02:22.202]                 common <- intersect(names, old_names)
[17:02:22.202]                 added <- setdiff(names, old_names)
[17:02:22.202]                 removed <- setdiff(old_names, names)
[17:02:22.202]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.202]                   envs[common]]
[17:02:22.202]                 NAMES <- toupper(changed)
[17:02:22.202]                 args <- list()
[17:02:22.202]                 for (kk in seq_along(NAMES)) {
[17:02:22.202]                   name <- changed[[kk]]
[17:02:22.202]                   NAME <- NAMES[[kk]]
[17:02:22.202]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.202]                     next
[17:02:22.202]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.202]                 }
[17:02:22.202]                 NAMES <- toupper(added)
[17:02:22.202]                 for (kk in seq_along(NAMES)) {
[17:02:22.202]                   name <- added[[kk]]
[17:02:22.202]                   NAME <- NAMES[[kk]]
[17:02:22.202]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.202]                     next
[17:02:22.202]                   args[[name]] <- ""
[17:02:22.202]                 }
[17:02:22.202]                 NAMES <- toupper(removed)
[17:02:22.202]                 for (kk in seq_along(NAMES)) {
[17:02:22.202]                   name <- removed[[kk]]
[17:02:22.202]                   NAME <- NAMES[[kk]]
[17:02:22.202]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.202]                     next
[17:02:22.202]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.202]                 }
[17:02:22.202]                 if (length(args) > 0) 
[17:02:22.202]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.202]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.202]             }
[17:02:22.202]             else {
[17:02:22.202]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.202]             }
[17:02:22.202]             {
[17:02:22.202]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.202]                   0L) {
[17:02:22.202]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.202]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.202]                   base::options(opts)
[17:02:22.202]                 }
[17:02:22.202]                 {
[17:02:22.202]                   {
[17:02:22.202]                     NULL
[17:02:22.202]                     RNGkind("Mersenne-Twister")
[17:02:22.202]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:22.202]                       inherits = FALSE)
[17:02:22.202]                   }
[17:02:22.202]                   options(future.plan = NULL)
[17:02:22.202]                   if (is.na(NA_character_)) 
[17:02:22.202]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.202]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.202]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.202]                     .init = FALSE)
[17:02:22.202]                 }
[17:02:22.202]             }
[17:02:22.202]         }
[17:02:22.202]     })
[17:02:22.202]     if (TRUE) {
[17:02:22.202]         base::sink(type = "output", split = FALSE)
[17:02:22.202]         if (TRUE) {
[17:02:22.202]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.202]         }
[17:02:22.202]         else {
[17:02:22.202]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.202]         }
[17:02:22.202]         base::close(...future.stdout)
[17:02:22.202]         ...future.stdout <- NULL
[17:02:22.202]     }
[17:02:22.202]     ...future.result$conditions <- ...future.conditions
[17:02:22.202]     ...future.result$finished <- base::Sys.time()
[17:02:22.202]     ...future.result
[17:02:22.202] }
[17:02:22.204] plan(): Setting new future strategy stack:
[17:02:22.204] List of future strategies:
[17:02:22.204] 1. sequential:
[17:02:22.204]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.204]    - tweaked: FALSE
[17:02:22.204]    - call: NULL
[17:02:22.205] plan(): nbrOfWorkers() = 1
[17:02:22.206] plan(): Setting new future strategy stack:
[17:02:22.206] List of future strategies:
[17:02:22.206] 1. sequential:
[17:02:22.206]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.206]    - tweaked: FALSE
[17:02:22.206]    - call: future::plan("sequential")
[17:02:22.206] plan(): nbrOfWorkers() = 1
[17:02:22.206] SequentialFuture started (and completed)
[17:02:22.207] - Launch lazy future ... done
[17:02:22.207] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[17:02:22.233] plan(): Setting new future strategy stack:
[17:02:22.233] List of future strategies:
[17:02:22.233] 1. sequential:
[17:02:22.233]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.233]    - tweaked: FALSE
[17:02:22.233]    - call: plan(strategy)
[17:02:22.244] plan(): nbrOfWorkers() = 1
[17:02:22.244] getGlobalsAndPackages() ...
[17:02:22.245] Searching for globals...
[17:02:22.246] - globals found: [1] ‘{’
[17:02:22.246] Searching for globals ... DONE
[17:02:22.246] Resolving globals: FALSE
[17:02:22.246] 
[17:02:22.247] 
[17:02:22.247] getGlobalsAndPackages() ... DONE
[17:02:22.247] run() for ‘Future’ ...
[17:02:22.247] - state: ‘created’
[17:02:22.247] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:22.247] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:22.248] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:22.248]   - Field: ‘label’
[17:02:22.248]   - Field: ‘local’
[17:02:22.248]   - Field: ‘owner’
[17:02:22.248]   - Field: ‘envir’
[17:02:22.248]   - Field: ‘packages’
[17:02:22.248]   - Field: ‘gc’
[17:02:22.248]   - Field: ‘conditions’
[17:02:22.248]   - Field: ‘expr’
[17:02:22.248]   - Field: ‘uuid’
[17:02:22.248]   - Field: ‘seed’
[17:02:22.249]   - Field: ‘version’
[17:02:22.249]   - Field: ‘result’
[17:02:22.249]   - Field: ‘asynchronous’
[17:02:22.249]   - Field: ‘calls’
[17:02:22.249]   - Field: ‘globals’
[17:02:22.249]   - Field: ‘stdout’
[17:02:22.249]   - Field: ‘earlySignal’
[17:02:22.249]   - Field: ‘lazy’
[17:02:22.249]   - Field: ‘state’
[17:02:22.249] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:22.249] - Launch lazy future ...
[17:02:22.250] Packages needed by the future expression (n = 0): <none>
[17:02:22.250] Packages needed by future strategies (n = 0): <none>
[17:02:22.250] {
[17:02:22.250]     {
[17:02:22.250]         {
[17:02:22.250]             ...future.startTime <- base::Sys.time()
[17:02:22.250]             {
[17:02:22.250]                 {
[17:02:22.250]                   {
[17:02:22.250]                     base::local({
[17:02:22.250]                       has_future <- base::requireNamespace("future", 
[17:02:22.250]                         quietly = TRUE)
[17:02:22.250]                       if (has_future) {
[17:02:22.250]                         ns <- base::getNamespace("future")
[17:02:22.250]                         version <- ns[[".package"]][["version"]]
[17:02:22.250]                         if (is.null(version)) 
[17:02:22.250]                           version <- utils::packageVersion("future")
[17:02:22.250]                       }
[17:02:22.250]                       else {
[17:02:22.250]                         version <- NULL
[17:02:22.250]                       }
[17:02:22.250]                       if (!has_future || version < "1.8.0") {
[17:02:22.250]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.250]                           "", base::R.version$version.string), 
[17:02:22.250]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:22.250]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.250]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.250]                             "release", "version")], collapse = " "), 
[17:02:22.250]                           hostname = base::Sys.info()[["nodename"]])
[17:02:22.250]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.250]                           info)
[17:02:22.250]                         info <- base::paste(info, collapse = "; ")
[17:02:22.250]                         if (!has_future) {
[17:02:22.250]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.250]                             info)
[17:02:22.250]                         }
[17:02:22.250]                         else {
[17:02:22.250]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.250]                             info, version)
[17:02:22.250]                         }
[17:02:22.250]                         base::stop(msg)
[17:02:22.250]                       }
[17:02:22.250]                     })
[17:02:22.250]                   }
[17:02:22.250]                   ...future.strategy.old <- future::plan("list")
[17:02:22.250]                   options(future.plan = NULL)
[17:02:22.250]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.250]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.250]                 }
[17:02:22.250]                 ...future.workdir <- getwd()
[17:02:22.250]             }
[17:02:22.250]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.250]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.250]         }
[17:02:22.250]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.250]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.250]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.250]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.250]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.250]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.250]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.250]             base::names(...future.oldOptions))
[17:02:22.250]     }
[17:02:22.250]     if (FALSE) {
[17:02:22.250]     }
[17:02:22.250]     else {
[17:02:22.250]         if (TRUE) {
[17:02:22.250]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.250]                 open = "w")
[17:02:22.250]         }
[17:02:22.250]         else {
[17:02:22.250]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.250]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.250]         }
[17:02:22.250]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.250]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.250]             base::sink(type = "output", split = FALSE)
[17:02:22.250]             base::close(...future.stdout)
[17:02:22.250]         }, add = TRUE)
[17:02:22.250]     }
[17:02:22.250]     ...future.frame <- base::sys.nframe()
[17:02:22.250]     ...future.conditions <- base::list()
[17:02:22.250]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.250]     if (FALSE) {
[17:02:22.250]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.250]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.250]     }
[17:02:22.250]     ...future.result <- base::tryCatch({
[17:02:22.250]         base::withCallingHandlers({
[17:02:22.250]             ...future.value <- base::withVisible(base::local({
[17:02:22.250]                 2
[17:02:22.250]             }))
[17:02:22.250]             future::FutureResult(value = ...future.value$value, 
[17:02:22.250]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.250]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.250]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.250]                     ...future.globalenv.names))
[17:02:22.250]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.250]         }, condition = base::local({
[17:02:22.250]             c <- base::c
[17:02:22.250]             inherits <- base::inherits
[17:02:22.250]             invokeRestart <- base::invokeRestart
[17:02:22.250]             length <- base::length
[17:02:22.250]             list <- base::list
[17:02:22.250]             seq.int <- base::seq.int
[17:02:22.250]             signalCondition <- base::signalCondition
[17:02:22.250]             sys.calls <- base::sys.calls
[17:02:22.250]             `[[` <- base::`[[`
[17:02:22.250]             `+` <- base::`+`
[17:02:22.250]             `<<-` <- base::`<<-`
[17:02:22.250]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.250]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.250]                   3L)]
[17:02:22.250]             }
[17:02:22.250]             function(cond) {
[17:02:22.250]                 is_error <- inherits(cond, "error")
[17:02:22.250]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.250]                   NULL)
[17:02:22.250]                 if (is_error) {
[17:02:22.250]                   sessionInformation <- function() {
[17:02:22.250]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.250]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.250]                       search = base::search(), system = base::Sys.info())
[17:02:22.250]                   }
[17:02:22.250]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.250]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.250]                     cond$call), session = sessionInformation(), 
[17:02:22.250]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.250]                   signalCondition(cond)
[17:02:22.250]                 }
[17:02:22.250]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.250]                 "immediateCondition"))) {
[17:02:22.250]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.250]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.250]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.250]                   if (TRUE && !signal) {
[17:02:22.250]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.250]                     {
[17:02:22.250]                       inherits <- base::inherits
[17:02:22.250]                       invokeRestart <- base::invokeRestart
[17:02:22.250]                       is.null <- base::is.null
[17:02:22.250]                       muffled <- FALSE
[17:02:22.250]                       if (inherits(cond, "message")) {
[17:02:22.250]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.250]                         if (muffled) 
[17:02:22.250]                           invokeRestart("muffleMessage")
[17:02:22.250]                       }
[17:02:22.250]                       else if (inherits(cond, "warning")) {
[17:02:22.250]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.250]                         if (muffled) 
[17:02:22.250]                           invokeRestart("muffleWarning")
[17:02:22.250]                       }
[17:02:22.250]                       else if (inherits(cond, "condition")) {
[17:02:22.250]                         if (!is.null(pattern)) {
[17:02:22.250]                           computeRestarts <- base::computeRestarts
[17:02:22.250]                           grepl <- base::grepl
[17:02:22.250]                           restarts <- computeRestarts(cond)
[17:02:22.250]                           for (restart in restarts) {
[17:02:22.250]                             name <- restart$name
[17:02:22.250]                             if (is.null(name)) 
[17:02:22.250]                               next
[17:02:22.250]                             if (!grepl(pattern, name)) 
[17:02:22.250]                               next
[17:02:22.250]                             invokeRestart(restart)
[17:02:22.250]                             muffled <- TRUE
[17:02:22.250]                             break
[17:02:22.250]                           }
[17:02:22.250]                         }
[17:02:22.250]                       }
[17:02:22.250]                       invisible(muffled)
[17:02:22.250]                     }
[17:02:22.250]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.250]                   }
[17:02:22.250]                 }
[17:02:22.250]                 else {
[17:02:22.250]                   if (TRUE) {
[17:02:22.250]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.250]                     {
[17:02:22.250]                       inherits <- base::inherits
[17:02:22.250]                       invokeRestart <- base::invokeRestart
[17:02:22.250]                       is.null <- base::is.null
[17:02:22.250]                       muffled <- FALSE
[17:02:22.250]                       if (inherits(cond, "message")) {
[17:02:22.250]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.250]                         if (muffled) 
[17:02:22.250]                           invokeRestart("muffleMessage")
[17:02:22.250]                       }
[17:02:22.250]                       else if (inherits(cond, "warning")) {
[17:02:22.250]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.250]                         if (muffled) 
[17:02:22.250]                           invokeRestart("muffleWarning")
[17:02:22.250]                       }
[17:02:22.250]                       else if (inherits(cond, "condition")) {
[17:02:22.250]                         if (!is.null(pattern)) {
[17:02:22.250]                           computeRestarts <- base::computeRestarts
[17:02:22.250]                           grepl <- base::grepl
[17:02:22.250]                           restarts <- computeRestarts(cond)
[17:02:22.250]                           for (restart in restarts) {
[17:02:22.250]                             name <- restart$name
[17:02:22.250]                             if (is.null(name)) 
[17:02:22.250]                               next
[17:02:22.250]                             if (!grepl(pattern, name)) 
[17:02:22.250]                               next
[17:02:22.250]                             invokeRestart(restart)
[17:02:22.250]                             muffled <- TRUE
[17:02:22.250]                             break
[17:02:22.250]                           }
[17:02:22.250]                         }
[17:02:22.250]                       }
[17:02:22.250]                       invisible(muffled)
[17:02:22.250]                     }
[17:02:22.250]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.250]                   }
[17:02:22.250]                 }
[17:02:22.250]             }
[17:02:22.250]         }))
[17:02:22.250]     }, error = function(ex) {
[17:02:22.250]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.250]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.250]                 ...future.rng), started = ...future.startTime, 
[17:02:22.250]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.250]             version = "1.8"), class = "FutureResult")
[17:02:22.250]     }, finally = {
[17:02:22.250]         if (!identical(...future.workdir, getwd())) 
[17:02:22.250]             setwd(...future.workdir)
[17:02:22.250]         {
[17:02:22.250]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.250]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.250]             }
[17:02:22.250]             base::options(...future.oldOptions)
[17:02:22.250]             if (.Platform$OS.type == "windows") {
[17:02:22.250]                 old_names <- names(...future.oldEnvVars)
[17:02:22.250]                 envs <- base::Sys.getenv()
[17:02:22.250]                 names <- names(envs)
[17:02:22.250]                 common <- intersect(names, old_names)
[17:02:22.250]                 added <- setdiff(names, old_names)
[17:02:22.250]                 removed <- setdiff(old_names, names)
[17:02:22.250]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.250]                   envs[common]]
[17:02:22.250]                 NAMES <- toupper(changed)
[17:02:22.250]                 args <- list()
[17:02:22.250]                 for (kk in seq_along(NAMES)) {
[17:02:22.250]                   name <- changed[[kk]]
[17:02:22.250]                   NAME <- NAMES[[kk]]
[17:02:22.250]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.250]                     next
[17:02:22.250]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.250]                 }
[17:02:22.250]                 NAMES <- toupper(added)
[17:02:22.250]                 for (kk in seq_along(NAMES)) {
[17:02:22.250]                   name <- added[[kk]]
[17:02:22.250]                   NAME <- NAMES[[kk]]
[17:02:22.250]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.250]                     next
[17:02:22.250]                   args[[name]] <- ""
[17:02:22.250]                 }
[17:02:22.250]                 NAMES <- toupper(removed)
[17:02:22.250]                 for (kk in seq_along(NAMES)) {
[17:02:22.250]                   name <- removed[[kk]]
[17:02:22.250]                   NAME <- NAMES[[kk]]
[17:02:22.250]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.250]                     next
[17:02:22.250]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.250]                 }
[17:02:22.250]                 if (length(args) > 0) 
[17:02:22.250]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.250]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.250]             }
[17:02:22.250]             else {
[17:02:22.250]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.250]             }
[17:02:22.250]             {
[17:02:22.250]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.250]                   0L) {
[17:02:22.250]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.250]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.250]                   base::options(opts)
[17:02:22.250]                 }
[17:02:22.250]                 {
[17:02:22.250]                   {
[17:02:22.250]                     NULL
[17:02:22.250]                     RNGkind("Mersenne-Twister")
[17:02:22.250]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:22.250]                       inherits = FALSE)
[17:02:22.250]                   }
[17:02:22.250]                   options(future.plan = NULL)
[17:02:22.250]                   if (is.na(NA_character_)) 
[17:02:22.250]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.250]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.250]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.250]                     .init = FALSE)
[17:02:22.250]                 }
[17:02:22.250]             }
[17:02:22.250]         }
[17:02:22.250]     })
[17:02:22.250]     if (TRUE) {
[17:02:22.250]         base::sink(type = "output", split = FALSE)
[17:02:22.250]         if (TRUE) {
[17:02:22.250]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.250]         }
[17:02:22.250]         else {
[17:02:22.250]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.250]         }
[17:02:22.250]         base::close(...future.stdout)
[17:02:22.250]         ...future.stdout <- NULL
[17:02:22.250]     }
[17:02:22.250]     ...future.result$conditions <- ...future.conditions
[17:02:22.250]     ...future.result$finished <- base::Sys.time()
[17:02:22.250]     ...future.result
[17:02:22.250] }
[17:02:22.252] plan(): Setting new future strategy stack:
[17:02:22.252] List of future strategies:
[17:02:22.252] 1. sequential:
[17:02:22.252]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.252]    - tweaked: FALSE
[17:02:22.252]    - call: NULL
[17:02:22.252] plan(): nbrOfWorkers() = 1
[17:02:22.253] plan(): Setting new future strategy stack:
[17:02:22.253] List of future strategies:
[17:02:22.253] 1. sequential:
[17:02:22.253]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.253]    - tweaked: FALSE
[17:02:22.253]    - call: plan(strategy)
[17:02:22.254] plan(): nbrOfWorkers() = 1
[17:02:22.254] SequentialFuture started (and completed)
[17:02:22.254] - Launch lazy future ... done
[17:02:22.254] run() for ‘SequentialFuture’ ... done
[17:02:22.254] getGlobalsAndPackages() ...
[17:02:22.254] Searching for globals...
[17:02:22.255] - globals found: [1] ‘{’
[17:02:22.255] Searching for globals ... DONE
[17:02:22.255] Resolving globals: FALSE
[17:02:22.255] 
[17:02:22.255] 
[17:02:22.255] getGlobalsAndPackages() ... DONE
[17:02:22.256] run() for ‘Future’ ...
[17:02:22.256] - state: ‘created’
[17:02:22.256] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:22.256] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:22.256] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:22.256]   - Field: ‘label’
[17:02:22.256]   - Field: ‘local’
[17:02:22.256]   - Field: ‘owner’
[17:02:22.257]   - Field: ‘envir’
[17:02:22.257]   - Field: ‘packages’
[17:02:22.257]   - Field: ‘gc’
[17:02:22.257]   - Field: ‘conditions’
[17:02:22.257]   - Field: ‘expr’
[17:02:22.257]   - Field: ‘uuid’
[17:02:22.257]   - Field: ‘seed’
[17:02:22.257]   - Field: ‘version’
[17:02:22.257]   - Field: ‘result’
[17:02:22.257]   - Field: ‘asynchronous’
[17:02:22.257]   - Field: ‘calls’
[17:02:22.258]   - Field: ‘globals’
[17:02:22.258]   - Field: ‘stdout’
[17:02:22.258]   - Field: ‘earlySignal’
[17:02:22.258]   - Field: ‘lazy’
[17:02:22.258]   - Field: ‘state’
[17:02:22.258] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:22.258] - Launch lazy future ...
[17:02:22.258] Packages needed by the future expression (n = 0): <none>
[17:02:22.258] Packages needed by future strategies (n = 0): <none>
[17:02:22.259] {
[17:02:22.259]     {
[17:02:22.259]         {
[17:02:22.259]             ...future.startTime <- base::Sys.time()
[17:02:22.259]             {
[17:02:22.259]                 {
[17:02:22.259]                   {
[17:02:22.259]                     base::local({
[17:02:22.259]                       has_future <- base::requireNamespace("future", 
[17:02:22.259]                         quietly = TRUE)
[17:02:22.259]                       if (has_future) {
[17:02:22.259]                         ns <- base::getNamespace("future")
[17:02:22.259]                         version <- ns[[".package"]][["version"]]
[17:02:22.259]                         if (is.null(version)) 
[17:02:22.259]                           version <- utils::packageVersion("future")
[17:02:22.259]                       }
[17:02:22.259]                       else {
[17:02:22.259]                         version <- NULL
[17:02:22.259]                       }
[17:02:22.259]                       if (!has_future || version < "1.8.0") {
[17:02:22.259]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.259]                           "", base::R.version$version.string), 
[17:02:22.259]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:22.259]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.259]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.259]                             "release", "version")], collapse = " "), 
[17:02:22.259]                           hostname = base::Sys.info()[["nodename"]])
[17:02:22.259]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.259]                           info)
[17:02:22.259]                         info <- base::paste(info, collapse = "; ")
[17:02:22.259]                         if (!has_future) {
[17:02:22.259]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.259]                             info)
[17:02:22.259]                         }
[17:02:22.259]                         else {
[17:02:22.259]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.259]                             info, version)
[17:02:22.259]                         }
[17:02:22.259]                         base::stop(msg)
[17:02:22.259]                       }
[17:02:22.259]                     })
[17:02:22.259]                   }
[17:02:22.259]                   ...future.strategy.old <- future::plan("list")
[17:02:22.259]                   options(future.plan = NULL)
[17:02:22.259]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.259]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.259]                 }
[17:02:22.259]                 ...future.workdir <- getwd()
[17:02:22.259]             }
[17:02:22.259]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.259]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.259]         }
[17:02:22.259]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.259]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.259]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.259]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.259]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.259]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.259]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.259]             base::names(...future.oldOptions))
[17:02:22.259]     }
[17:02:22.259]     if (FALSE) {
[17:02:22.259]     }
[17:02:22.259]     else {
[17:02:22.259]         if (TRUE) {
[17:02:22.259]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.259]                 open = "w")
[17:02:22.259]         }
[17:02:22.259]         else {
[17:02:22.259]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.259]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.259]         }
[17:02:22.259]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.259]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.259]             base::sink(type = "output", split = FALSE)
[17:02:22.259]             base::close(...future.stdout)
[17:02:22.259]         }, add = TRUE)
[17:02:22.259]     }
[17:02:22.259]     ...future.frame <- base::sys.nframe()
[17:02:22.259]     ...future.conditions <- base::list()
[17:02:22.259]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.259]     if (FALSE) {
[17:02:22.259]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.259]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.259]     }
[17:02:22.259]     ...future.result <- base::tryCatch({
[17:02:22.259]         base::withCallingHandlers({
[17:02:22.259]             ...future.value <- base::withVisible(base::local({
[17:02:22.259]                 4
[17:02:22.259]             }))
[17:02:22.259]             future::FutureResult(value = ...future.value$value, 
[17:02:22.259]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.259]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.259]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.259]                     ...future.globalenv.names))
[17:02:22.259]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.259]         }, condition = base::local({
[17:02:22.259]             c <- base::c
[17:02:22.259]             inherits <- base::inherits
[17:02:22.259]             invokeRestart <- base::invokeRestart
[17:02:22.259]             length <- base::length
[17:02:22.259]             list <- base::list
[17:02:22.259]             seq.int <- base::seq.int
[17:02:22.259]             signalCondition <- base::signalCondition
[17:02:22.259]             sys.calls <- base::sys.calls
[17:02:22.259]             `[[` <- base::`[[`
[17:02:22.259]             `+` <- base::`+`
[17:02:22.259]             `<<-` <- base::`<<-`
[17:02:22.259]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.259]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.259]                   3L)]
[17:02:22.259]             }
[17:02:22.259]             function(cond) {
[17:02:22.259]                 is_error <- inherits(cond, "error")
[17:02:22.259]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.259]                   NULL)
[17:02:22.259]                 if (is_error) {
[17:02:22.259]                   sessionInformation <- function() {
[17:02:22.259]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.259]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.259]                       search = base::search(), system = base::Sys.info())
[17:02:22.259]                   }
[17:02:22.259]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.259]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.259]                     cond$call), session = sessionInformation(), 
[17:02:22.259]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.259]                   signalCondition(cond)
[17:02:22.259]                 }
[17:02:22.259]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.259]                 "immediateCondition"))) {
[17:02:22.259]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.259]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.259]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.259]                   if (TRUE && !signal) {
[17:02:22.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.259]                     {
[17:02:22.259]                       inherits <- base::inherits
[17:02:22.259]                       invokeRestart <- base::invokeRestart
[17:02:22.259]                       is.null <- base::is.null
[17:02:22.259]                       muffled <- FALSE
[17:02:22.259]                       if (inherits(cond, "message")) {
[17:02:22.259]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.259]                         if (muffled) 
[17:02:22.259]                           invokeRestart("muffleMessage")
[17:02:22.259]                       }
[17:02:22.259]                       else if (inherits(cond, "warning")) {
[17:02:22.259]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.259]                         if (muffled) 
[17:02:22.259]                           invokeRestart("muffleWarning")
[17:02:22.259]                       }
[17:02:22.259]                       else if (inherits(cond, "condition")) {
[17:02:22.259]                         if (!is.null(pattern)) {
[17:02:22.259]                           computeRestarts <- base::computeRestarts
[17:02:22.259]                           grepl <- base::grepl
[17:02:22.259]                           restarts <- computeRestarts(cond)
[17:02:22.259]                           for (restart in restarts) {
[17:02:22.259]                             name <- restart$name
[17:02:22.259]                             if (is.null(name)) 
[17:02:22.259]                               next
[17:02:22.259]                             if (!grepl(pattern, name)) 
[17:02:22.259]                               next
[17:02:22.259]                             invokeRestart(restart)
[17:02:22.259]                             muffled <- TRUE
[17:02:22.259]                             break
[17:02:22.259]                           }
[17:02:22.259]                         }
[17:02:22.259]                       }
[17:02:22.259]                       invisible(muffled)
[17:02:22.259]                     }
[17:02:22.259]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.259]                   }
[17:02:22.259]                 }
[17:02:22.259]                 else {
[17:02:22.259]                   if (TRUE) {
[17:02:22.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.259]                     {
[17:02:22.259]                       inherits <- base::inherits
[17:02:22.259]                       invokeRestart <- base::invokeRestart
[17:02:22.259]                       is.null <- base::is.null
[17:02:22.259]                       muffled <- FALSE
[17:02:22.259]                       if (inherits(cond, "message")) {
[17:02:22.259]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.259]                         if (muffled) 
[17:02:22.259]                           invokeRestart("muffleMessage")
[17:02:22.259]                       }
[17:02:22.259]                       else if (inherits(cond, "warning")) {
[17:02:22.259]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.259]                         if (muffled) 
[17:02:22.259]                           invokeRestart("muffleWarning")
[17:02:22.259]                       }
[17:02:22.259]                       else if (inherits(cond, "condition")) {
[17:02:22.259]                         if (!is.null(pattern)) {
[17:02:22.259]                           computeRestarts <- base::computeRestarts
[17:02:22.259]                           grepl <- base::grepl
[17:02:22.259]                           restarts <- computeRestarts(cond)
[17:02:22.259]                           for (restart in restarts) {
[17:02:22.259]                             name <- restart$name
[17:02:22.259]                             if (is.null(name)) 
[17:02:22.259]                               next
[17:02:22.259]                             if (!grepl(pattern, name)) 
[17:02:22.259]                               next
[17:02:22.259]                             invokeRestart(restart)
[17:02:22.259]                             muffled <- TRUE
[17:02:22.259]                             break
[17:02:22.259]                           }
[17:02:22.259]                         }
[17:02:22.259]                       }
[17:02:22.259]                       invisible(muffled)
[17:02:22.259]                     }
[17:02:22.259]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.259]                   }
[17:02:22.259]                 }
[17:02:22.259]             }
[17:02:22.259]         }))
[17:02:22.259]     }, error = function(ex) {
[17:02:22.259]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.259]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.259]                 ...future.rng), started = ...future.startTime, 
[17:02:22.259]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.259]             version = "1.8"), class = "FutureResult")
[17:02:22.259]     }, finally = {
[17:02:22.259]         if (!identical(...future.workdir, getwd())) 
[17:02:22.259]             setwd(...future.workdir)
[17:02:22.259]         {
[17:02:22.259]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.259]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.259]             }
[17:02:22.259]             base::options(...future.oldOptions)
[17:02:22.259]             if (.Platform$OS.type == "windows") {
[17:02:22.259]                 old_names <- names(...future.oldEnvVars)
[17:02:22.259]                 envs <- base::Sys.getenv()
[17:02:22.259]                 names <- names(envs)
[17:02:22.259]                 common <- intersect(names, old_names)
[17:02:22.259]                 added <- setdiff(names, old_names)
[17:02:22.259]                 removed <- setdiff(old_names, names)
[17:02:22.259]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.259]                   envs[common]]
[17:02:22.259]                 NAMES <- toupper(changed)
[17:02:22.259]                 args <- list()
[17:02:22.259]                 for (kk in seq_along(NAMES)) {
[17:02:22.259]                   name <- changed[[kk]]
[17:02:22.259]                   NAME <- NAMES[[kk]]
[17:02:22.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.259]                     next
[17:02:22.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.259]                 }
[17:02:22.259]                 NAMES <- toupper(added)
[17:02:22.259]                 for (kk in seq_along(NAMES)) {
[17:02:22.259]                   name <- added[[kk]]
[17:02:22.259]                   NAME <- NAMES[[kk]]
[17:02:22.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.259]                     next
[17:02:22.259]                   args[[name]] <- ""
[17:02:22.259]                 }
[17:02:22.259]                 NAMES <- toupper(removed)
[17:02:22.259]                 for (kk in seq_along(NAMES)) {
[17:02:22.259]                   name <- removed[[kk]]
[17:02:22.259]                   NAME <- NAMES[[kk]]
[17:02:22.259]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.259]                     next
[17:02:22.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.259]                 }
[17:02:22.259]                 if (length(args) > 0) 
[17:02:22.259]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.259]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.259]             }
[17:02:22.259]             else {
[17:02:22.259]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.259]             }
[17:02:22.259]             {
[17:02:22.259]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.259]                   0L) {
[17:02:22.259]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.259]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.259]                   base::options(opts)
[17:02:22.259]                 }
[17:02:22.259]                 {
[17:02:22.259]                   {
[17:02:22.259]                     NULL
[17:02:22.259]                     RNGkind("Mersenne-Twister")
[17:02:22.259]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:22.259]                       inherits = FALSE)
[17:02:22.259]                   }
[17:02:22.259]                   options(future.plan = NULL)
[17:02:22.259]                   if (is.na(NA_character_)) 
[17:02:22.259]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.259]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.259]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.259]                     .init = FALSE)
[17:02:22.259]                 }
[17:02:22.259]             }
[17:02:22.259]         }
[17:02:22.259]     })
[17:02:22.259]     if (TRUE) {
[17:02:22.259]         base::sink(type = "output", split = FALSE)
[17:02:22.259]         if (TRUE) {
[17:02:22.259]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.259]         }
[17:02:22.259]         else {
[17:02:22.259]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.259]         }
[17:02:22.259]         base::close(...future.stdout)
[17:02:22.259]         ...future.stdout <- NULL
[17:02:22.259]     }
[17:02:22.259]     ...future.result$conditions <- ...future.conditions
[17:02:22.259]     ...future.result$finished <- base::Sys.time()
[17:02:22.259]     ...future.result
[17:02:22.259] }
[17:02:22.260] plan(): Setting new future strategy stack:
[17:02:22.261] List of future strategies:
[17:02:22.261] 1. sequential:
[17:02:22.261]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.261]    - tweaked: FALSE
[17:02:22.261]    - call: NULL
[17:02:22.261] plan(): nbrOfWorkers() = 1
[17:02:22.262] plan(): Setting new future strategy stack:
[17:02:22.262] List of future strategies:
[17:02:22.262] 1. sequential:
[17:02:22.262]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.262]    - tweaked: FALSE
[17:02:22.262]    - call: plan(strategy)
[17:02:22.262] plan(): nbrOfWorkers() = 1
[17:02:22.262] SequentialFuture started (and completed)
[17:02:22.262] - Launch lazy future ... done
[17:02:22.263] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[17:02:22.263] getGlobalsAndPackages() ...
[17:02:22.263] Searching for globals...
[17:02:22.264] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.264] Searching for globals ... DONE
[17:02:22.264] Resolving globals: FALSE
[17:02:22.265] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.265] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.265] - globals: [1] ‘a’
[17:02:22.265] 
[17:02:22.265] getGlobalsAndPackages() ... DONE
[17:02:22.266] run() for ‘Future’ ...
[17:02:22.266] - state: ‘created’
[17:02:22.266] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:22.266] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:22.266] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:22.266]   - Field: ‘label’
[17:02:22.266]   - Field: ‘local’
[17:02:22.266]   - Field: ‘owner’
[17:02:22.267]   - Field: ‘envir’
[17:02:22.267]   - Field: ‘packages’
[17:02:22.267]   - Field: ‘gc’
[17:02:22.267]   - Field: ‘conditions’
[17:02:22.267]   - Field: ‘expr’
[17:02:22.267]   - Field: ‘uuid’
[17:02:22.267]   - Field: ‘seed’
[17:02:22.267]   - Field: ‘version’
[17:02:22.267]   - Field: ‘result’
[17:02:22.267]   - Field: ‘asynchronous’
[17:02:22.267]   - Field: ‘calls’
[17:02:22.268]   - Field: ‘globals’
[17:02:22.268]   - Field: ‘stdout’
[17:02:22.268]   - Field: ‘earlySignal’
[17:02:22.268]   - Field: ‘lazy’
[17:02:22.268]   - Field: ‘state’
[17:02:22.268] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:22.268] - Launch lazy future ...
[17:02:22.268] Packages needed by the future expression (n = 0): <none>
[17:02:22.268] Packages needed by future strategies (n = 0): <none>
[17:02:22.269] {
[17:02:22.269]     {
[17:02:22.269]         {
[17:02:22.269]             ...future.startTime <- base::Sys.time()
[17:02:22.269]             {
[17:02:22.269]                 {
[17:02:22.269]                   {
[17:02:22.269]                     base::local({
[17:02:22.269]                       has_future <- base::requireNamespace("future", 
[17:02:22.269]                         quietly = TRUE)
[17:02:22.269]                       if (has_future) {
[17:02:22.269]                         ns <- base::getNamespace("future")
[17:02:22.269]                         version <- ns[[".package"]][["version"]]
[17:02:22.269]                         if (is.null(version)) 
[17:02:22.269]                           version <- utils::packageVersion("future")
[17:02:22.269]                       }
[17:02:22.269]                       else {
[17:02:22.269]                         version <- NULL
[17:02:22.269]                       }
[17:02:22.269]                       if (!has_future || version < "1.8.0") {
[17:02:22.269]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.269]                           "", base::R.version$version.string), 
[17:02:22.269]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:22.269]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.269]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.269]                             "release", "version")], collapse = " "), 
[17:02:22.269]                           hostname = base::Sys.info()[["nodename"]])
[17:02:22.269]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.269]                           info)
[17:02:22.269]                         info <- base::paste(info, collapse = "; ")
[17:02:22.269]                         if (!has_future) {
[17:02:22.269]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.269]                             info)
[17:02:22.269]                         }
[17:02:22.269]                         else {
[17:02:22.269]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.269]                             info, version)
[17:02:22.269]                         }
[17:02:22.269]                         base::stop(msg)
[17:02:22.269]                       }
[17:02:22.269]                     })
[17:02:22.269]                   }
[17:02:22.269]                   ...future.strategy.old <- future::plan("list")
[17:02:22.269]                   options(future.plan = NULL)
[17:02:22.269]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.269]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.269]                 }
[17:02:22.269]                 ...future.workdir <- getwd()
[17:02:22.269]             }
[17:02:22.269]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.269]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.269]         }
[17:02:22.269]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.269]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.269]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.269]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.269]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.269]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.269]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.269]             base::names(...future.oldOptions))
[17:02:22.269]     }
[17:02:22.269]     if (FALSE) {
[17:02:22.269]     }
[17:02:22.269]     else {
[17:02:22.269]         if (TRUE) {
[17:02:22.269]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.269]                 open = "w")
[17:02:22.269]         }
[17:02:22.269]         else {
[17:02:22.269]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.269]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.269]         }
[17:02:22.269]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.269]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.269]             base::sink(type = "output", split = FALSE)
[17:02:22.269]             base::close(...future.stdout)
[17:02:22.269]         }, add = TRUE)
[17:02:22.269]     }
[17:02:22.269]     ...future.frame <- base::sys.nframe()
[17:02:22.269]     ...future.conditions <- base::list()
[17:02:22.269]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.269]     if (FALSE) {
[17:02:22.269]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.269]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.269]     }
[17:02:22.269]     ...future.result <- base::tryCatch({
[17:02:22.269]         base::withCallingHandlers({
[17:02:22.269]             ...future.value <- base::withVisible(base::local({
[17:02:22.269]                 2 * a
[17:02:22.269]             }))
[17:02:22.269]             future::FutureResult(value = ...future.value$value, 
[17:02:22.269]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.269]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.269]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.269]                     ...future.globalenv.names))
[17:02:22.269]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.269]         }, condition = base::local({
[17:02:22.269]             c <- base::c
[17:02:22.269]             inherits <- base::inherits
[17:02:22.269]             invokeRestart <- base::invokeRestart
[17:02:22.269]             length <- base::length
[17:02:22.269]             list <- base::list
[17:02:22.269]             seq.int <- base::seq.int
[17:02:22.269]             signalCondition <- base::signalCondition
[17:02:22.269]             sys.calls <- base::sys.calls
[17:02:22.269]             `[[` <- base::`[[`
[17:02:22.269]             `+` <- base::`+`
[17:02:22.269]             `<<-` <- base::`<<-`
[17:02:22.269]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.269]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.269]                   3L)]
[17:02:22.269]             }
[17:02:22.269]             function(cond) {
[17:02:22.269]                 is_error <- inherits(cond, "error")
[17:02:22.269]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.269]                   NULL)
[17:02:22.269]                 if (is_error) {
[17:02:22.269]                   sessionInformation <- function() {
[17:02:22.269]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.269]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.269]                       search = base::search(), system = base::Sys.info())
[17:02:22.269]                   }
[17:02:22.269]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.269]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.269]                     cond$call), session = sessionInformation(), 
[17:02:22.269]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.269]                   signalCondition(cond)
[17:02:22.269]                 }
[17:02:22.269]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.269]                 "immediateCondition"))) {
[17:02:22.269]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.269]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.269]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.269]                   if (TRUE && !signal) {
[17:02:22.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.269]                     {
[17:02:22.269]                       inherits <- base::inherits
[17:02:22.269]                       invokeRestart <- base::invokeRestart
[17:02:22.269]                       is.null <- base::is.null
[17:02:22.269]                       muffled <- FALSE
[17:02:22.269]                       if (inherits(cond, "message")) {
[17:02:22.269]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.269]                         if (muffled) 
[17:02:22.269]                           invokeRestart("muffleMessage")
[17:02:22.269]                       }
[17:02:22.269]                       else if (inherits(cond, "warning")) {
[17:02:22.269]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.269]                         if (muffled) 
[17:02:22.269]                           invokeRestart("muffleWarning")
[17:02:22.269]                       }
[17:02:22.269]                       else if (inherits(cond, "condition")) {
[17:02:22.269]                         if (!is.null(pattern)) {
[17:02:22.269]                           computeRestarts <- base::computeRestarts
[17:02:22.269]                           grepl <- base::grepl
[17:02:22.269]                           restarts <- computeRestarts(cond)
[17:02:22.269]                           for (restart in restarts) {
[17:02:22.269]                             name <- restart$name
[17:02:22.269]                             if (is.null(name)) 
[17:02:22.269]                               next
[17:02:22.269]                             if (!grepl(pattern, name)) 
[17:02:22.269]                               next
[17:02:22.269]                             invokeRestart(restart)
[17:02:22.269]                             muffled <- TRUE
[17:02:22.269]                             break
[17:02:22.269]                           }
[17:02:22.269]                         }
[17:02:22.269]                       }
[17:02:22.269]                       invisible(muffled)
[17:02:22.269]                     }
[17:02:22.269]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.269]                   }
[17:02:22.269]                 }
[17:02:22.269]                 else {
[17:02:22.269]                   if (TRUE) {
[17:02:22.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.269]                     {
[17:02:22.269]                       inherits <- base::inherits
[17:02:22.269]                       invokeRestart <- base::invokeRestart
[17:02:22.269]                       is.null <- base::is.null
[17:02:22.269]                       muffled <- FALSE
[17:02:22.269]                       if (inherits(cond, "message")) {
[17:02:22.269]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.269]                         if (muffled) 
[17:02:22.269]                           invokeRestart("muffleMessage")
[17:02:22.269]                       }
[17:02:22.269]                       else if (inherits(cond, "warning")) {
[17:02:22.269]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.269]                         if (muffled) 
[17:02:22.269]                           invokeRestart("muffleWarning")
[17:02:22.269]                       }
[17:02:22.269]                       else if (inherits(cond, "condition")) {
[17:02:22.269]                         if (!is.null(pattern)) {
[17:02:22.269]                           computeRestarts <- base::computeRestarts
[17:02:22.269]                           grepl <- base::grepl
[17:02:22.269]                           restarts <- computeRestarts(cond)
[17:02:22.269]                           for (restart in restarts) {
[17:02:22.269]                             name <- restart$name
[17:02:22.269]                             if (is.null(name)) 
[17:02:22.269]                               next
[17:02:22.269]                             if (!grepl(pattern, name)) 
[17:02:22.269]                               next
[17:02:22.269]                             invokeRestart(restart)
[17:02:22.269]                             muffled <- TRUE
[17:02:22.269]                             break
[17:02:22.269]                           }
[17:02:22.269]                         }
[17:02:22.269]                       }
[17:02:22.269]                       invisible(muffled)
[17:02:22.269]                     }
[17:02:22.269]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.269]                   }
[17:02:22.269]                 }
[17:02:22.269]             }
[17:02:22.269]         }))
[17:02:22.269]     }, error = function(ex) {
[17:02:22.269]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.269]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.269]                 ...future.rng), started = ...future.startTime, 
[17:02:22.269]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.269]             version = "1.8"), class = "FutureResult")
[17:02:22.269]     }, finally = {
[17:02:22.269]         if (!identical(...future.workdir, getwd())) 
[17:02:22.269]             setwd(...future.workdir)
[17:02:22.269]         {
[17:02:22.269]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.269]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.269]             }
[17:02:22.269]             base::options(...future.oldOptions)
[17:02:22.269]             if (.Platform$OS.type == "windows") {
[17:02:22.269]                 old_names <- names(...future.oldEnvVars)
[17:02:22.269]                 envs <- base::Sys.getenv()
[17:02:22.269]                 names <- names(envs)
[17:02:22.269]                 common <- intersect(names, old_names)
[17:02:22.269]                 added <- setdiff(names, old_names)
[17:02:22.269]                 removed <- setdiff(old_names, names)
[17:02:22.269]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.269]                   envs[common]]
[17:02:22.269]                 NAMES <- toupper(changed)
[17:02:22.269]                 args <- list()
[17:02:22.269]                 for (kk in seq_along(NAMES)) {
[17:02:22.269]                   name <- changed[[kk]]
[17:02:22.269]                   NAME <- NAMES[[kk]]
[17:02:22.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.269]                     next
[17:02:22.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.269]                 }
[17:02:22.269]                 NAMES <- toupper(added)
[17:02:22.269]                 for (kk in seq_along(NAMES)) {
[17:02:22.269]                   name <- added[[kk]]
[17:02:22.269]                   NAME <- NAMES[[kk]]
[17:02:22.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.269]                     next
[17:02:22.269]                   args[[name]] <- ""
[17:02:22.269]                 }
[17:02:22.269]                 NAMES <- toupper(removed)
[17:02:22.269]                 for (kk in seq_along(NAMES)) {
[17:02:22.269]                   name <- removed[[kk]]
[17:02:22.269]                   NAME <- NAMES[[kk]]
[17:02:22.269]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.269]                     next
[17:02:22.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.269]                 }
[17:02:22.269]                 if (length(args) > 0) 
[17:02:22.269]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.269]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.269]             }
[17:02:22.269]             else {
[17:02:22.269]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.269]             }
[17:02:22.269]             {
[17:02:22.269]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.269]                   0L) {
[17:02:22.269]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.269]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.269]                   base::options(opts)
[17:02:22.269]                 }
[17:02:22.269]                 {
[17:02:22.269]                   {
[17:02:22.269]                     NULL
[17:02:22.269]                     RNGkind("Mersenne-Twister")
[17:02:22.269]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:22.269]                       inherits = FALSE)
[17:02:22.269]                   }
[17:02:22.269]                   options(future.plan = NULL)
[17:02:22.269]                   if (is.na(NA_character_)) 
[17:02:22.269]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.269]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.269]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.269]                     .init = FALSE)
[17:02:22.269]                 }
[17:02:22.269]             }
[17:02:22.269]         }
[17:02:22.269]     })
[17:02:22.269]     if (TRUE) {
[17:02:22.269]         base::sink(type = "output", split = FALSE)
[17:02:22.269]         if (TRUE) {
[17:02:22.269]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.269]         }
[17:02:22.269]         else {
[17:02:22.269]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.269]         }
[17:02:22.269]         base::close(...future.stdout)
[17:02:22.269]         ...future.stdout <- NULL
[17:02:22.269]     }
[17:02:22.269]     ...future.result$conditions <- ...future.conditions
[17:02:22.269]     ...future.result$finished <- base::Sys.time()
[17:02:22.269]     ...future.result
[17:02:22.269] }
[17:02:22.270] assign_globals() ...
[17:02:22.270] List of 1
[17:02:22.270]  $ a: num 1
[17:02:22.270]  - attr(*, "where")=List of 1
[17:02:22.270]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.270]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.270]  - attr(*, "resolved")= logi FALSE
[17:02:22.270]  - attr(*, "total_size")= num 56
[17:02:22.270]  - attr(*, "already-done")= logi TRUE
[17:02:22.275] - copied ‘a’ to environment
[17:02:22.275] assign_globals() ... done
[17:02:22.275] plan(): Setting new future strategy stack:
[17:02:22.275] List of future strategies:
[17:02:22.275] 1. sequential:
[17:02:22.275]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.275]    - tweaked: FALSE
[17:02:22.275]    - call: NULL
[17:02:22.276] plan(): nbrOfWorkers() = 1
[17:02:22.276] plan(): Setting new future strategy stack:
[17:02:22.277] List of future strategies:
[17:02:22.277] 1. sequential:
[17:02:22.277]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.277]    - tweaked: FALSE
[17:02:22.277]    - call: plan(strategy)
[17:02:22.277] plan(): nbrOfWorkers() = 1
[17:02:22.277] SequentialFuture started (and completed)
[17:02:22.277] - Launch lazy future ... done
[17:02:22.277] run() for ‘SequentialFuture’ ... done
[17:02:22.278] getGlobalsAndPackages() ...
[17:02:22.278] Searching for globals...
[17:02:22.280] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.281] Searching for globals ... DONE
[17:02:22.281] Resolving globals: FALSE
[17:02:22.281] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.281] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.281] - globals: [1] ‘a’
[17:02:22.282] 
[17:02:22.282] getGlobalsAndPackages() ... DONE
[17:02:22.282] run() for ‘Future’ ...
[17:02:22.282] - state: ‘created’
[17:02:22.282] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:22.282] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:22.283] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:22.283]   - Field: ‘label’
[17:02:22.283]   - Field: ‘local’
[17:02:22.283]   - Field: ‘owner’
[17:02:22.283]   - Field: ‘envir’
[17:02:22.283]   - Field: ‘packages’
[17:02:22.283]   - Field: ‘gc’
[17:02:22.283]   - Field: ‘conditions’
[17:02:22.283]   - Field: ‘expr’
[17:02:22.283]   - Field: ‘uuid’
[17:02:22.283]   - Field: ‘seed’
[17:02:22.284]   - Field: ‘version’
[17:02:22.284]   - Field: ‘result’
[17:02:22.284]   - Field: ‘asynchronous’
[17:02:22.284]   - Field: ‘calls’
[17:02:22.284]   - Field: ‘globals’
[17:02:22.284]   - Field: ‘stdout’
[17:02:22.284]   - Field: ‘earlySignal’
[17:02:22.284]   - Field: ‘lazy’
[17:02:22.284]   - Field: ‘state’
[17:02:22.284] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:22.284] - Launch lazy future ...
[17:02:22.285] Packages needed by the future expression (n = 0): <none>
[17:02:22.285] Packages needed by future strategies (n = 0): <none>
[17:02:22.285] {
[17:02:22.285]     {
[17:02:22.285]         {
[17:02:22.285]             ...future.startTime <- base::Sys.time()
[17:02:22.285]             {
[17:02:22.285]                 {
[17:02:22.285]                   {
[17:02:22.285]                     base::local({
[17:02:22.285]                       has_future <- base::requireNamespace("future", 
[17:02:22.285]                         quietly = TRUE)
[17:02:22.285]                       if (has_future) {
[17:02:22.285]                         ns <- base::getNamespace("future")
[17:02:22.285]                         version <- ns[[".package"]][["version"]]
[17:02:22.285]                         if (is.null(version)) 
[17:02:22.285]                           version <- utils::packageVersion("future")
[17:02:22.285]                       }
[17:02:22.285]                       else {
[17:02:22.285]                         version <- NULL
[17:02:22.285]                       }
[17:02:22.285]                       if (!has_future || version < "1.8.0") {
[17:02:22.285]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.285]                           "", base::R.version$version.string), 
[17:02:22.285]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:22.285]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.285]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.285]                             "release", "version")], collapse = " "), 
[17:02:22.285]                           hostname = base::Sys.info()[["nodename"]])
[17:02:22.285]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.285]                           info)
[17:02:22.285]                         info <- base::paste(info, collapse = "; ")
[17:02:22.285]                         if (!has_future) {
[17:02:22.285]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.285]                             info)
[17:02:22.285]                         }
[17:02:22.285]                         else {
[17:02:22.285]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.285]                             info, version)
[17:02:22.285]                         }
[17:02:22.285]                         base::stop(msg)
[17:02:22.285]                       }
[17:02:22.285]                     })
[17:02:22.285]                   }
[17:02:22.285]                   ...future.strategy.old <- future::plan("list")
[17:02:22.285]                   options(future.plan = NULL)
[17:02:22.285]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.285]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.285]                 }
[17:02:22.285]                 ...future.workdir <- getwd()
[17:02:22.285]             }
[17:02:22.285]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.285]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.285]         }
[17:02:22.285]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.285]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.285]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.285]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.285]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.285]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.285]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.285]             base::names(...future.oldOptions))
[17:02:22.285]     }
[17:02:22.285]     if (FALSE) {
[17:02:22.285]     }
[17:02:22.285]     else {
[17:02:22.285]         if (TRUE) {
[17:02:22.285]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.285]                 open = "w")
[17:02:22.285]         }
[17:02:22.285]         else {
[17:02:22.285]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.285]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.285]         }
[17:02:22.285]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.285]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.285]             base::sink(type = "output", split = FALSE)
[17:02:22.285]             base::close(...future.stdout)
[17:02:22.285]         }, add = TRUE)
[17:02:22.285]     }
[17:02:22.285]     ...future.frame <- base::sys.nframe()
[17:02:22.285]     ...future.conditions <- base::list()
[17:02:22.285]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.285]     if (FALSE) {
[17:02:22.285]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.285]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.285]     }
[17:02:22.285]     ...future.result <- base::tryCatch({
[17:02:22.285]         base::withCallingHandlers({
[17:02:22.285]             ...future.value <- base::withVisible(base::local({
[17:02:22.285]                 2 * a
[17:02:22.285]             }))
[17:02:22.285]             future::FutureResult(value = ...future.value$value, 
[17:02:22.285]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.285]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.285]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.285]                     ...future.globalenv.names))
[17:02:22.285]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.285]         }, condition = base::local({
[17:02:22.285]             c <- base::c
[17:02:22.285]             inherits <- base::inherits
[17:02:22.285]             invokeRestart <- base::invokeRestart
[17:02:22.285]             length <- base::length
[17:02:22.285]             list <- base::list
[17:02:22.285]             seq.int <- base::seq.int
[17:02:22.285]             signalCondition <- base::signalCondition
[17:02:22.285]             sys.calls <- base::sys.calls
[17:02:22.285]             `[[` <- base::`[[`
[17:02:22.285]             `+` <- base::`+`
[17:02:22.285]             `<<-` <- base::`<<-`
[17:02:22.285]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.285]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.285]                   3L)]
[17:02:22.285]             }
[17:02:22.285]             function(cond) {
[17:02:22.285]                 is_error <- inherits(cond, "error")
[17:02:22.285]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.285]                   NULL)
[17:02:22.285]                 if (is_error) {
[17:02:22.285]                   sessionInformation <- function() {
[17:02:22.285]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.285]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.285]                       search = base::search(), system = base::Sys.info())
[17:02:22.285]                   }
[17:02:22.285]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.285]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.285]                     cond$call), session = sessionInformation(), 
[17:02:22.285]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.285]                   signalCondition(cond)
[17:02:22.285]                 }
[17:02:22.285]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.285]                 "immediateCondition"))) {
[17:02:22.285]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.285]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.285]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.285]                   if (TRUE && !signal) {
[17:02:22.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.285]                     {
[17:02:22.285]                       inherits <- base::inherits
[17:02:22.285]                       invokeRestart <- base::invokeRestart
[17:02:22.285]                       is.null <- base::is.null
[17:02:22.285]                       muffled <- FALSE
[17:02:22.285]                       if (inherits(cond, "message")) {
[17:02:22.285]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.285]                         if (muffled) 
[17:02:22.285]                           invokeRestart("muffleMessage")
[17:02:22.285]                       }
[17:02:22.285]                       else if (inherits(cond, "warning")) {
[17:02:22.285]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.285]                         if (muffled) 
[17:02:22.285]                           invokeRestart("muffleWarning")
[17:02:22.285]                       }
[17:02:22.285]                       else if (inherits(cond, "condition")) {
[17:02:22.285]                         if (!is.null(pattern)) {
[17:02:22.285]                           computeRestarts <- base::computeRestarts
[17:02:22.285]                           grepl <- base::grepl
[17:02:22.285]                           restarts <- computeRestarts(cond)
[17:02:22.285]                           for (restart in restarts) {
[17:02:22.285]                             name <- restart$name
[17:02:22.285]                             if (is.null(name)) 
[17:02:22.285]                               next
[17:02:22.285]                             if (!grepl(pattern, name)) 
[17:02:22.285]                               next
[17:02:22.285]                             invokeRestart(restart)
[17:02:22.285]                             muffled <- TRUE
[17:02:22.285]                             break
[17:02:22.285]                           }
[17:02:22.285]                         }
[17:02:22.285]                       }
[17:02:22.285]                       invisible(muffled)
[17:02:22.285]                     }
[17:02:22.285]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.285]                   }
[17:02:22.285]                 }
[17:02:22.285]                 else {
[17:02:22.285]                   if (TRUE) {
[17:02:22.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.285]                     {
[17:02:22.285]                       inherits <- base::inherits
[17:02:22.285]                       invokeRestart <- base::invokeRestart
[17:02:22.285]                       is.null <- base::is.null
[17:02:22.285]                       muffled <- FALSE
[17:02:22.285]                       if (inherits(cond, "message")) {
[17:02:22.285]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.285]                         if (muffled) 
[17:02:22.285]                           invokeRestart("muffleMessage")
[17:02:22.285]                       }
[17:02:22.285]                       else if (inherits(cond, "warning")) {
[17:02:22.285]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.285]                         if (muffled) 
[17:02:22.285]                           invokeRestart("muffleWarning")
[17:02:22.285]                       }
[17:02:22.285]                       else if (inherits(cond, "condition")) {
[17:02:22.285]                         if (!is.null(pattern)) {
[17:02:22.285]                           computeRestarts <- base::computeRestarts
[17:02:22.285]                           grepl <- base::grepl
[17:02:22.285]                           restarts <- computeRestarts(cond)
[17:02:22.285]                           for (restart in restarts) {
[17:02:22.285]                             name <- restart$name
[17:02:22.285]                             if (is.null(name)) 
[17:02:22.285]                               next
[17:02:22.285]                             if (!grepl(pattern, name)) 
[17:02:22.285]                               next
[17:02:22.285]                             invokeRestart(restart)
[17:02:22.285]                             muffled <- TRUE
[17:02:22.285]                             break
[17:02:22.285]                           }
[17:02:22.285]                         }
[17:02:22.285]                       }
[17:02:22.285]                       invisible(muffled)
[17:02:22.285]                     }
[17:02:22.285]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.285]                   }
[17:02:22.285]                 }
[17:02:22.285]             }
[17:02:22.285]         }))
[17:02:22.285]     }, error = function(ex) {
[17:02:22.285]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.285]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.285]                 ...future.rng), started = ...future.startTime, 
[17:02:22.285]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.285]             version = "1.8"), class = "FutureResult")
[17:02:22.285]     }, finally = {
[17:02:22.285]         if (!identical(...future.workdir, getwd())) 
[17:02:22.285]             setwd(...future.workdir)
[17:02:22.285]         {
[17:02:22.285]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.285]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.285]             }
[17:02:22.285]             base::options(...future.oldOptions)
[17:02:22.285]             if (.Platform$OS.type == "windows") {
[17:02:22.285]                 old_names <- names(...future.oldEnvVars)
[17:02:22.285]                 envs <- base::Sys.getenv()
[17:02:22.285]                 names <- names(envs)
[17:02:22.285]                 common <- intersect(names, old_names)
[17:02:22.285]                 added <- setdiff(names, old_names)
[17:02:22.285]                 removed <- setdiff(old_names, names)
[17:02:22.285]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.285]                   envs[common]]
[17:02:22.285]                 NAMES <- toupper(changed)
[17:02:22.285]                 args <- list()
[17:02:22.285]                 for (kk in seq_along(NAMES)) {
[17:02:22.285]                   name <- changed[[kk]]
[17:02:22.285]                   NAME <- NAMES[[kk]]
[17:02:22.285]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.285]                     next
[17:02:22.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.285]                 }
[17:02:22.285]                 NAMES <- toupper(added)
[17:02:22.285]                 for (kk in seq_along(NAMES)) {
[17:02:22.285]                   name <- added[[kk]]
[17:02:22.285]                   NAME <- NAMES[[kk]]
[17:02:22.285]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.285]                     next
[17:02:22.285]                   args[[name]] <- ""
[17:02:22.285]                 }
[17:02:22.285]                 NAMES <- toupper(removed)
[17:02:22.285]                 for (kk in seq_along(NAMES)) {
[17:02:22.285]                   name <- removed[[kk]]
[17:02:22.285]                   NAME <- NAMES[[kk]]
[17:02:22.285]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.285]                     next
[17:02:22.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.285]                 }
[17:02:22.285]                 if (length(args) > 0) 
[17:02:22.285]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.285]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.285]             }
[17:02:22.285]             else {
[17:02:22.285]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.285]             }
[17:02:22.285]             {
[17:02:22.285]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.285]                   0L) {
[17:02:22.285]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.285]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.285]                   base::options(opts)
[17:02:22.285]                 }
[17:02:22.285]                 {
[17:02:22.285]                   {
[17:02:22.285]                     NULL
[17:02:22.285]                     RNGkind("Mersenne-Twister")
[17:02:22.285]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:22.285]                       inherits = FALSE)
[17:02:22.285]                   }
[17:02:22.285]                   options(future.plan = NULL)
[17:02:22.285]                   if (is.na(NA_character_)) 
[17:02:22.285]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.285]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.285]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.285]                     .init = FALSE)
[17:02:22.285]                 }
[17:02:22.285]             }
[17:02:22.285]         }
[17:02:22.285]     })
[17:02:22.285]     if (TRUE) {
[17:02:22.285]         base::sink(type = "output", split = FALSE)
[17:02:22.285]         if (TRUE) {
[17:02:22.285]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.285]         }
[17:02:22.285]         else {
[17:02:22.285]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.285]         }
[17:02:22.285]         base::close(...future.stdout)
[17:02:22.285]         ...future.stdout <- NULL
[17:02:22.285]     }
[17:02:22.285]     ...future.result$conditions <- ...future.conditions
[17:02:22.285]     ...future.result$finished <- base::Sys.time()
[17:02:22.285]     ...future.result
[17:02:22.285] }
[17:02:22.287] assign_globals() ...
[17:02:22.287] List of 1
[17:02:22.287]  $ a: num 1
[17:02:22.287]  - attr(*, "where")=List of 1
[17:02:22.287]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.287]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.287]  - attr(*, "resolved")= logi FALSE
[17:02:22.287]  - attr(*, "total_size")= num 56
[17:02:22.287]  - attr(*, "already-done")= logi TRUE
[17:02:22.289] - copied ‘a’ to environment
[17:02:22.289] assign_globals() ... done
[17:02:22.290] plan(): Setting new future strategy stack:
[17:02:22.290] List of future strategies:
[17:02:22.290] 1. sequential:
[17:02:22.290]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.290]    - tweaked: FALSE
[17:02:22.290]    - call: NULL
[17:02:22.290] plan(): nbrOfWorkers() = 1
[17:02:22.291] plan(): Setting new future strategy stack:
[17:02:22.291] List of future strategies:
[17:02:22.291] 1. sequential:
[17:02:22.291]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.291]    - tweaked: FALSE
[17:02:22.291]    - call: plan(strategy)
[17:02:22.291] plan(): nbrOfWorkers() = 1
[17:02:22.292] SequentialFuture started (and completed)
[17:02:22.292] - Launch lazy future ... done
[17:02:22.292] run() for ‘SequentialFuture’ ... done
[17:02:22.292] getGlobalsAndPackages() ...
[17:02:22.292] Searching for globals...
[17:02:22.293] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.293] Searching for globals ... DONE
[17:02:22.293] Resolving globals: FALSE
[17:02:22.294] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.294] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.294] - globals: [1] ‘a’
[17:02:22.294] 
[17:02:22.294] getGlobalsAndPackages() ... DONE
[17:02:22.294] run() for ‘Future’ ...
[17:02:22.294] - state: ‘created’
[17:02:22.295] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:22.295] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:22.295] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:22.295]   - Field: ‘label’
[17:02:22.295]   - Field: ‘local’
[17:02:22.295]   - Field: ‘owner’
[17:02:22.295]   - Field: ‘envir’
[17:02:22.295]   - Field: ‘packages’
[17:02:22.296]   - Field: ‘gc’
[17:02:22.296]   - Field: ‘conditions’
[17:02:22.296]   - Field: ‘expr’
[17:02:22.296]   - Field: ‘uuid’
[17:02:22.296]   - Field: ‘seed’
[17:02:22.296]   - Field: ‘version’
[17:02:22.296]   - Field: ‘result’
[17:02:22.296]   - Field: ‘asynchronous’
[17:02:22.296]   - Field: ‘calls’
[17:02:22.296]   - Field: ‘globals’
[17:02:22.296]   - Field: ‘stdout’
[17:02:22.297]   - Field: ‘earlySignal’
[17:02:22.297]   - Field: ‘lazy’
[17:02:22.297]   - Field: ‘state’
[17:02:22.297] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:22.297] - Launch lazy future ...
[17:02:22.297] Packages needed by the future expression (n = 0): <none>
[17:02:22.297] Packages needed by future strategies (n = 0): <none>
[17:02:22.298] {
[17:02:22.298]     {
[17:02:22.298]         {
[17:02:22.298]             ...future.startTime <- base::Sys.time()
[17:02:22.298]             {
[17:02:22.298]                 {
[17:02:22.298]                   {
[17:02:22.298]                     base::local({
[17:02:22.298]                       has_future <- base::requireNamespace("future", 
[17:02:22.298]                         quietly = TRUE)
[17:02:22.298]                       if (has_future) {
[17:02:22.298]                         ns <- base::getNamespace("future")
[17:02:22.298]                         version <- ns[[".package"]][["version"]]
[17:02:22.298]                         if (is.null(version)) 
[17:02:22.298]                           version <- utils::packageVersion("future")
[17:02:22.298]                       }
[17:02:22.298]                       else {
[17:02:22.298]                         version <- NULL
[17:02:22.298]                       }
[17:02:22.298]                       if (!has_future || version < "1.8.0") {
[17:02:22.298]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.298]                           "", base::R.version$version.string), 
[17:02:22.298]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:22.298]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.298]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.298]                             "release", "version")], collapse = " "), 
[17:02:22.298]                           hostname = base::Sys.info()[["nodename"]])
[17:02:22.298]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.298]                           info)
[17:02:22.298]                         info <- base::paste(info, collapse = "; ")
[17:02:22.298]                         if (!has_future) {
[17:02:22.298]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.298]                             info)
[17:02:22.298]                         }
[17:02:22.298]                         else {
[17:02:22.298]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.298]                             info, version)
[17:02:22.298]                         }
[17:02:22.298]                         base::stop(msg)
[17:02:22.298]                       }
[17:02:22.298]                     })
[17:02:22.298]                   }
[17:02:22.298]                   ...future.strategy.old <- future::plan("list")
[17:02:22.298]                   options(future.plan = NULL)
[17:02:22.298]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.298]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.298]                 }
[17:02:22.298]                 ...future.workdir <- getwd()
[17:02:22.298]             }
[17:02:22.298]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.298]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.298]         }
[17:02:22.298]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.298]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.298]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.298]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.298]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.298]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.298]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.298]             base::names(...future.oldOptions))
[17:02:22.298]     }
[17:02:22.298]     if (FALSE) {
[17:02:22.298]     }
[17:02:22.298]     else {
[17:02:22.298]         if (TRUE) {
[17:02:22.298]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.298]                 open = "w")
[17:02:22.298]         }
[17:02:22.298]         else {
[17:02:22.298]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.298]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.298]         }
[17:02:22.298]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.298]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.298]             base::sink(type = "output", split = FALSE)
[17:02:22.298]             base::close(...future.stdout)
[17:02:22.298]         }, add = TRUE)
[17:02:22.298]     }
[17:02:22.298]     ...future.frame <- base::sys.nframe()
[17:02:22.298]     ...future.conditions <- base::list()
[17:02:22.298]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.298]     if (FALSE) {
[17:02:22.298]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.298]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.298]     }
[17:02:22.298]     ...future.result <- base::tryCatch({
[17:02:22.298]         base::withCallingHandlers({
[17:02:22.298]             ...future.value <- base::withVisible(base::local({
[17:02:22.298]                 2 * a
[17:02:22.298]             }))
[17:02:22.298]             future::FutureResult(value = ...future.value$value, 
[17:02:22.298]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.298]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.298]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.298]                     ...future.globalenv.names))
[17:02:22.298]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.298]         }, condition = base::local({
[17:02:22.298]             c <- base::c
[17:02:22.298]             inherits <- base::inherits
[17:02:22.298]             invokeRestart <- base::invokeRestart
[17:02:22.298]             length <- base::length
[17:02:22.298]             list <- base::list
[17:02:22.298]             seq.int <- base::seq.int
[17:02:22.298]             signalCondition <- base::signalCondition
[17:02:22.298]             sys.calls <- base::sys.calls
[17:02:22.298]             `[[` <- base::`[[`
[17:02:22.298]             `+` <- base::`+`
[17:02:22.298]             `<<-` <- base::`<<-`
[17:02:22.298]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.298]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.298]                   3L)]
[17:02:22.298]             }
[17:02:22.298]             function(cond) {
[17:02:22.298]                 is_error <- inherits(cond, "error")
[17:02:22.298]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.298]                   NULL)
[17:02:22.298]                 if (is_error) {
[17:02:22.298]                   sessionInformation <- function() {
[17:02:22.298]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.298]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.298]                       search = base::search(), system = base::Sys.info())
[17:02:22.298]                   }
[17:02:22.298]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.298]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.298]                     cond$call), session = sessionInformation(), 
[17:02:22.298]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.298]                   signalCondition(cond)
[17:02:22.298]                 }
[17:02:22.298]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.298]                 "immediateCondition"))) {
[17:02:22.298]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.298]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.298]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.298]                   if (TRUE && !signal) {
[17:02:22.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.298]                     {
[17:02:22.298]                       inherits <- base::inherits
[17:02:22.298]                       invokeRestart <- base::invokeRestart
[17:02:22.298]                       is.null <- base::is.null
[17:02:22.298]                       muffled <- FALSE
[17:02:22.298]                       if (inherits(cond, "message")) {
[17:02:22.298]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.298]                         if (muffled) 
[17:02:22.298]                           invokeRestart("muffleMessage")
[17:02:22.298]                       }
[17:02:22.298]                       else if (inherits(cond, "warning")) {
[17:02:22.298]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.298]                         if (muffled) 
[17:02:22.298]                           invokeRestart("muffleWarning")
[17:02:22.298]                       }
[17:02:22.298]                       else if (inherits(cond, "condition")) {
[17:02:22.298]                         if (!is.null(pattern)) {
[17:02:22.298]                           computeRestarts <- base::computeRestarts
[17:02:22.298]                           grepl <- base::grepl
[17:02:22.298]                           restarts <- computeRestarts(cond)
[17:02:22.298]                           for (restart in restarts) {
[17:02:22.298]                             name <- restart$name
[17:02:22.298]                             if (is.null(name)) 
[17:02:22.298]                               next
[17:02:22.298]                             if (!grepl(pattern, name)) 
[17:02:22.298]                               next
[17:02:22.298]                             invokeRestart(restart)
[17:02:22.298]                             muffled <- TRUE
[17:02:22.298]                             break
[17:02:22.298]                           }
[17:02:22.298]                         }
[17:02:22.298]                       }
[17:02:22.298]                       invisible(muffled)
[17:02:22.298]                     }
[17:02:22.298]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.298]                   }
[17:02:22.298]                 }
[17:02:22.298]                 else {
[17:02:22.298]                   if (TRUE) {
[17:02:22.298]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.298]                     {
[17:02:22.298]                       inherits <- base::inherits
[17:02:22.298]                       invokeRestart <- base::invokeRestart
[17:02:22.298]                       is.null <- base::is.null
[17:02:22.298]                       muffled <- FALSE
[17:02:22.298]                       if (inherits(cond, "message")) {
[17:02:22.298]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.298]                         if (muffled) 
[17:02:22.298]                           invokeRestart("muffleMessage")
[17:02:22.298]                       }
[17:02:22.298]                       else if (inherits(cond, "warning")) {
[17:02:22.298]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.298]                         if (muffled) 
[17:02:22.298]                           invokeRestart("muffleWarning")
[17:02:22.298]                       }
[17:02:22.298]                       else if (inherits(cond, "condition")) {
[17:02:22.298]                         if (!is.null(pattern)) {
[17:02:22.298]                           computeRestarts <- base::computeRestarts
[17:02:22.298]                           grepl <- base::grepl
[17:02:22.298]                           restarts <- computeRestarts(cond)
[17:02:22.298]                           for (restart in restarts) {
[17:02:22.298]                             name <- restart$name
[17:02:22.298]                             if (is.null(name)) 
[17:02:22.298]                               next
[17:02:22.298]                             if (!grepl(pattern, name)) 
[17:02:22.298]                               next
[17:02:22.298]                             invokeRestart(restart)
[17:02:22.298]                             muffled <- TRUE
[17:02:22.298]                             break
[17:02:22.298]                           }
[17:02:22.298]                         }
[17:02:22.298]                       }
[17:02:22.298]                       invisible(muffled)
[17:02:22.298]                     }
[17:02:22.298]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.298]                   }
[17:02:22.298]                 }
[17:02:22.298]             }
[17:02:22.298]         }))
[17:02:22.298]     }, error = function(ex) {
[17:02:22.298]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.298]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.298]                 ...future.rng), started = ...future.startTime, 
[17:02:22.298]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.298]             version = "1.8"), class = "FutureResult")
[17:02:22.298]     }, finally = {
[17:02:22.298]         if (!identical(...future.workdir, getwd())) 
[17:02:22.298]             setwd(...future.workdir)
[17:02:22.298]         {
[17:02:22.298]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.298]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.298]             }
[17:02:22.298]             base::options(...future.oldOptions)
[17:02:22.298]             if (.Platform$OS.type == "windows") {
[17:02:22.298]                 old_names <- names(...future.oldEnvVars)
[17:02:22.298]                 envs <- base::Sys.getenv()
[17:02:22.298]                 names <- names(envs)
[17:02:22.298]                 common <- intersect(names, old_names)
[17:02:22.298]                 added <- setdiff(names, old_names)
[17:02:22.298]                 removed <- setdiff(old_names, names)
[17:02:22.298]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.298]                   envs[common]]
[17:02:22.298]                 NAMES <- toupper(changed)
[17:02:22.298]                 args <- list()
[17:02:22.298]                 for (kk in seq_along(NAMES)) {
[17:02:22.298]                   name <- changed[[kk]]
[17:02:22.298]                   NAME <- NAMES[[kk]]
[17:02:22.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.298]                     next
[17:02:22.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.298]                 }
[17:02:22.298]                 NAMES <- toupper(added)
[17:02:22.298]                 for (kk in seq_along(NAMES)) {
[17:02:22.298]                   name <- added[[kk]]
[17:02:22.298]                   NAME <- NAMES[[kk]]
[17:02:22.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.298]                     next
[17:02:22.298]                   args[[name]] <- ""
[17:02:22.298]                 }
[17:02:22.298]                 NAMES <- toupper(removed)
[17:02:22.298]                 for (kk in seq_along(NAMES)) {
[17:02:22.298]                   name <- removed[[kk]]
[17:02:22.298]                   NAME <- NAMES[[kk]]
[17:02:22.298]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.298]                     next
[17:02:22.298]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.298]                 }
[17:02:22.298]                 if (length(args) > 0) 
[17:02:22.298]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.298]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.298]             }
[17:02:22.298]             else {
[17:02:22.298]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.298]             }
[17:02:22.298]             {
[17:02:22.298]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.298]                   0L) {
[17:02:22.298]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.298]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.298]                   base::options(opts)
[17:02:22.298]                 }
[17:02:22.298]                 {
[17:02:22.298]                   {
[17:02:22.298]                     NULL
[17:02:22.298]                     RNGkind("Mersenne-Twister")
[17:02:22.298]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:22.298]                       inherits = FALSE)
[17:02:22.298]                   }
[17:02:22.298]                   options(future.plan = NULL)
[17:02:22.298]                   if (is.na(NA_character_)) 
[17:02:22.298]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.298]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.298]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.298]                     .init = FALSE)
[17:02:22.298]                 }
[17:02:22.298]             }
[17:02:22.298]         }
[17:02:22.298]     })
[17:02:22.298]     if (TRUE) {
[17:02:22.298]         base::sink(type = "output", split = FALSE)
[17:02:22.298]         if (TRUE) {
[17:02:22.298]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.298]         }
[17:02:22.298]         else {
[17:02:22.298]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.298]         }
[17:02:22.298]         base::close(...future.stdout)
[17:02:22.298]         ...future.stdout <- NULL
[17:02:22.298]     }
[17:02:22.298]     ...future.result$conditions <- ...future.conditions
[17:02:22.298]     ...future.result$finished <- base::Sys.time()
[17:02:22.298]     ...future.result
[17:02:22.298] }
[17:02:22.299] assign_globals() ...
[17:02:22.299] List of 1
[17:02:22.299]  $ a: num 1
[17:02:22.299]  - attr(*, "where")=List of 1
[17:02:22.299]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.299]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.299]  - attr(*, "resolved")= logi FALSE
[17:02:22.299]  - attr(*, "total_size")= num 56
[17:02:22.299]  - attr(*, "already-done")= logi TRUE
[17:02:22.302] - copied ‘a’ to environment
[17:02:22.302] assign_globals() ... done
[17:02:22.302] plan(): Setting new future strategy stack:
[17:02:22.302] List of future strategies:
[17:02:22.302] 1. sequential:
[17:02:22.302]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.302]    - tweaked: FALSE
[17:02:22.302]    - call: NULL
[17:02:22.302] plan(): nbrOfWorkers() = 1
[17:02:22.303] plan(): Setting new future strategy stack:
[17:02:22.303] List of future strategies:
[17:02:22.303] 1. sequential:
[17:02:22.303]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.303]    - tweaked: FALSE
[17:02:22.303]    - call: plan(strategy)
[17:02:22.304] plan(): nbrOfWorkers() = 1
[17:02:22.304] SequentialFuture started (and completed)
[17:02:22.304] - Launch lazy future ... done
[17:02:22.304] run() for ‘SequentialFuture’ ... done
[17:02:22.304] getGlobalsAndPackages() ...
[17:02:22.304] Searching for globals...
[17:02:22.305] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.305] Searching for globals ... DONE
[17:02:22.305] Resolving globals: FALSE
[17:02:22.306] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.306] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.306] - globals: [1] ‘a’
[17:02:22.306] 
[17:02:22.306] getGlobalsAndPackages() ... DONE
[17:02:22.307] run() for ‘Future’ ...
[17:02:22.307] - state: ‘created’
[17:02:22.307] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:22.307] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:22.307] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:22.307]   - Field: ‘label’
[17:02:22.307]   - Field: ‘local’
[17:02:22.308]   - Field: ‘owner’
[17:02:22.308]   - Field: ‘envir’
[17:02:22.308]   - Field: ‘packages’
[17:02:22.308]   - Field: ‘gc’
[17:02:22.308]   - Field: ‘conditions’
[17:02:22.308]   - Field: ‘expr’
[17:02:22.308]   - Field: ‘uuid’
[17:02:22.308]   - Field: ‘seed’
[17:02:22.308]   - Field: ‘version’
[17:02:22.308]   - Field: ‘result’
[17:02:22.308]   - Field: ‘asynchronous’
[17:02:22.308]   - Field: ‘calls’
[17:02:22.309]   - Field: ‘globals’
[17:02:22.309]   - Field: ‘stdout’
[17:02:22.309]   - Field: ‘earlySignal’
[17:02:22.309]   - Field: ‘lazy’
[17:02:22.309]   - Field: ‘state’
[17:02:22.309] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:22.309] - Launch lazy future ...
[17:02:22.309] Packages needed by the future expression (n = 0): <none>
[17:02:22.309] Packages needed by future strategies (n = 0): <none>
[17:02:22.311] {
[17:02:22.311]     {
[17:02:22.311]         {
[17:02:22.311]             ...future.startTime <- base::Sys.time()
[17:02:22.311]             {
[17:02:22.311]                 {
[17:02:22.311]                   {
[17:02:22.311]                     base::local({
[17:02:22.311]                       has_future <- base::requireNamespace("future", 
[17:02:22.311]                         quietly = TRUE)
[17:02:22.311]                       if (has_future) {
[17:02:22.311]                         ns <- base::getNamespace("future")
[17:02:22.311]                         version <- ns[[".package"]][["version"]]
[17:02:22.311]                         if (is.null(version)) 
[17:02:22.311]                           version <- utils::packageVersion("future")
[17:02:22.311]                       }
[17:02:22.311]                       else {
[17:02:22.311]                         version <- NULL
[17:02:22.311]                       }
[17:02:22.311]                       if (!has_future || version < "1.8.0") {
[17:02:22.311]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.311]                           "", base::R.version$version.string), 
[17:02:22.311]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:22.311]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.311]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.311]                             "release", "version")], collapse = " "), 
[17:02:22.311]                           hostname = base::Sys.info()[["nodename"]])
[17:02:22.311]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.311]                           info)
[17:02:22.311]                         info <- base::paste(info, collapse = "; ")
[17:02:22.311]                         if (!has_future) {
[17:02:22.311]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.311]                             info)
[17:02:22.311]                         }
[17:02:22.311]                         else {
[17:02:22.311]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.311]                             info, version)
[17:02:22.311]                         }
[17:02:22.311]                         base::stop(msg)
[17:02:22.311]                       }
[17:02:22.311]                     })
[17:02:22.311]                   }
[17:02:22.311]                   ...future.strategy.old <- future::plan("list")
[17:02:22.311]                   options(future.plan = NULL)
[17:02:22.311]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.311]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.311]                 }
[17:02:22.311]                 ...future.workdir <- getwd()
[17:02:22.311]             }
[17:02:22.311]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.311]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.311]         }
[17:02:22.311]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.311]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.311]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.311]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.311]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.311]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.311]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.311]             base::names(...future.oldOptions))
[17:02:22.311]     }
[17:02:22.311]     if (FALSE) {
[17:02:22.311]     }
[17:02:22.311]     else {
[17:02:22.311]         if (TRUE) {
[17:02:22.311]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.311]                 open = "w")
[17:02:22.311]         }
[17:02:22.311]         else {
[17:02:22.311]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.311]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.311]         }
[17:02:22.311]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.311]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.311]             base::sink(type = "output", split = FALSE)
[17:02:22.311]             base::close(...future.stdout)
[17:02:22.311]         }, add = TRUE)
[17:02:22.311]     }
[17:02:22.311]     ...future.frame <- base::sys.nframe()
[17:02:22.311]     ...future.conditions <- base::list()
[17:02:22.311]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.311]     if (FALSE) {
[17:02:22.311]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.311]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.311]     }
[17:02:22.311]     ...future.result <- base::tryCatch({
[17:02:22.311]         base::withCallingHandlers({
[17:02:22.311]             ...future.value <- base::withVisible(base::local({
[17:02:22.311]                 2 * a
[17:02:22.311]             }))
[17:02:22.311]             future::FutureResult(value = ...future.value$value, 
[17:02:22.311]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.311]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.311]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.311]                     ...future.globalenv.names))
[17:02:22.311]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.311]         }, condition = base::local({
[17:02:22.311]             c <- base::c
[17:02:22.311]             inherits <- base::inherits
[17:02:22.311]             invokeRestart <- base::invokeRestart
[17:02:22.311]             length <- base::length
[17:02:22.311]             list <- base::list
[17:02:22.311]             seq.int <- base::seq.int
[17:02:22.311]             signalCondition <- base::signalCondition
[17:02:22.311]             sys.calls <- base::sys.calls
[17:02:22.311]             `[[` <- base::`[[`
[17:02:22.311]             `+` <- base::`+`
[17:02:22.311]             `<<-` <- base::`<<-`
[17:02:22.311]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.311]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.311]                   3L)]
[17:02:22.311]             }
[17:02:22.311]             function(cond) {
[17:02:22.311]                 is_error <- inherits(cond, "error")
[17:02:22.311]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.311]                   NULL)
[17:02:22.311]                 if (is_error) {
[17:02:22.311]                   sessionInformation <- function() {
[17:02:22.311]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.311]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.311]                       search = base::search(), system = base::Sys.info())
[17:02:22.311]                   }
[17:02:22.311]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.311]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.311]                     cond$call), session = sessionInformation(), 
[17:02:22.311]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.311]                   signalCondition(cond)
[17:02:22.311]                 }
[17:02:22.311]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.311]                 "immediateCondition"))) {
[17:02:22.311]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.311]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.311]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.311]                   if (TRUE && !signal) {
[17:02:22.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.311]                     {
[17:02:22.311]                       inherits <- base::inherits
[17:02:22.311]                       invokeRestart <- base::invokeRestart
[17:02:22.311]                       is.null <- base::is.null
[17:02:22.311]                       muffled <- FALSE
[17:02:22.311]                       if (inherits(cond, "message")) {
[17:02:22.311]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.311]                         if (muffled) 
[17:02:22.311]                           invokeRestart("muffleMessage")
[17:02:22.311]                       }
[17:02:22.311]                       else if (inherits(cond, "warning")) {
[17:02:22.311]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.311]                         if (muffled) 
[17:02:22.311]                           invokeRestart("muffleWarning")
[17:02:22.311]                       }
[17:02:22.311]                       else if (inherits(cond, "condition")) {
[17:02:22.311]                         if (!is.null(pattern)) {
[17:02:22.311]                           computeRestarts <- base::computeRestarts
[17:02:22.311]                           grepl <- base::grepl
[17:02:22.311]                           restarts <- computeRestarts(cond)
[17:02:22.311]                           for (restart in restarts) {
[17:02:22.311]                             name <- restart$name
[17:02:22.311]                             if (is.null(name)) 
[17:02:22.311]                               next
[17:02:22.311]                             if (!grepl(pattern, name)) 
[17:02:22.311]                               next
[17:02:22.311]                             invokeRestart(restart)
[17:02:22.311]                             muffled <- TRUE
[17:02:22.311]                             break
[17:02:22.311]                           }
[17:02:22.311]                         }
[17:02:22.311]                       }
[17:02:22.311]                       invisible(muffled)
[17:02:22.311]                     }
[17:02:22.311]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.311]                   }
[17:02:22.311]                 }
[17:02:22.311]                 else {
[17:02:22.311]                   if (TRUE) {
[17:02:22.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.311]                     {
[17:02:22.311]                       inherits <- base::inherits
[17:02:22.311]                       invokeRestart <- base::invokeRestart
[17:02:22.311]                       is.null <- base::is.null
[17:02:22.311]                       muffled <- FALSE
[17:02:22.311]                       if (inherits(cond, "message")) {
[17:02:22.311]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.311]                         if (muffled) 
[17:02:22.311]                           invokeRestart("muffleMessage")
[17:02:22.311]                       }
[17:02:22.311]                       else if (inherits(cond, "warning")) {
[17:02:22.311]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.311]                         if (muffled) 
[17:02:22.311]                           invokeRestart("muffleWarning")
[17:02:22.311]                       }
[17:02:22.311]                       else if (inherits(cond, "condition")) {
[17:02:22.311]                         if (!is.null(pattern)) {
[17:02:22.311]                           computeRestarts <- base::computeRestarts
[17:02:22.311]                           grepl <- base::grepl
[17:02:22.311]                           restarts <- computeRestarts(cond)
[17:02:22.311]                           for (restart in restarts) {
[17:02:22.311]                             name <- restart$name
[17:02:22.311]                             if (is.null(name)) 
[17:02:22.311]                               next
[17:02:22.311]                             if (!grepl(pattern, name)) 
[17:02:22.311]                               next
[17:02:22.311]                             invokeRestart(restart)
[17:02:22.311]                             muffled <- TRUE
[17:02:22.311]                             break
[17:02:22.311]                           }
[17:02:22.311]                         }
[17:02:22.311]                       }
[17:02:22.311]                       invisible(muffled)
[17:02:22.311]                     }
[17:02:22.311]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.311]                   }
[17:02:22.311]                 }
[17:02:22.311]             }
[17:02:22.311]         }))
[17:02:22.311]     }, error = function(ex) {
[17:02:22.311]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.311]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.311]                 ...future.rng), started = ...future.startTime, 
[17:02:22.311]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.311]             version = "1.8"), class = "FutureResult")
[17:02:22.311]     }, finally = {
[17:02:22.311]         if (!identical(...future.workdir, getwd())) 
[17:02:22.311]             setwd(...future.workdir)
[17:02:22.311]         {
[17:02:22.311]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.311]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.311]             }
[17:02:22.311]             base::options(...future.oldOptions)
[17:02:22.311]             if (.Platform$OS.type == "windows") {
[17:02:22.311]                 old_names <- names(...future.oldEnvVars)
[17:02:22.311]                 envs <- base::Sys.getenv()
[17:02:22.311]                 names <- names(envs)
[17:02:22.311]                 common <- intersect(names, old_names)
[17:02:22.311]                 added <- setdiff(names, old_names)
[17:02:22.311]                 removed <- setdiff(old_names, names)
[17:02:22.311]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.311]                   envs[common]]
[17:02:22.311]                 NAMES <- toupper(changed)
[17:02:22.311]                 args <- list()
[17:02:22.311]                 for (kk in seq_along(NAMES)) {
[17:02:22.311]                   name <- changed[[kk]]
[17:02:22.311]                   NAME <- NAMES[[kk]]
[17:02:22.311]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.311]                     next
[17:02:22.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.311]                 }
[17:02:22.311]                 NAMES <- toupper(added)
[17:02:22.311]                 for (kk in seq_along(NAMES)) {
[17:02:22.311]                   name <- added[[kk]]
[17:02:22.311]                   NAME <- NAMES[[kk]]
[17:02:22.311]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.311]                     next
[17:02:22.311]                   args[[name]] <- ""
[17:02:22.311]                 }
[17:02:22.311]                 NAMES <- toupper(removed)
[17:02:22.311]                 for (kk in seq_along(NAMES)) {
[17:02:22.311]                   name <- removed[[kk]]
[17:02:22.311]                   NAME <- NAMES[[kk]]
[17:02:22.311]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.311]                     next
[17:02:22.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.311]                 }
[17:02:22.311]                 if (length(args) > 0) 
[17:02:22.311]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.311]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.311]             }
[17:02:22.311]             else {
[17:02:22.311]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.311]             }
[17:02:22.311]             {
[17:02:22.311]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.311]                   0L) {
[17:02:22.311]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.311]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.311]                   base::options(opts)
[17:02:22.311]                 }
[17:02:22.311]                 {
[17:02:22.311]                   {
[17:02:22.311]                     NULL
[17:02:22.311]                     RNGkind("Mersenne-Twister")
[17:02:22.311]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:22.311]                       inherits = FALSE)
[17:02:22.311]                   }
[17:02:22.311]                   options(future.plan = NULL)
[17:02:22.311]                   if (is.na(NA_character_)) 
[17:02:22.311]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.311]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.311]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.311]                     .init = FALSE)
[17:02:22.311]                 }
[17:02:22.311]             }
[17:02:22.311]         }
[17:02:22.311]     })
[17:02:22.311]     if (TRUE) {
[17:02:22.311]         base::sink(type = "output", split = FALSE)
[17:02:22.311]         if (TRUE) {
[17:02:22.311]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.311]         }
[17:02:22.311]         else {
[17:02:22.311]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.311]         }
[17:02:22.311]         base::close(...future.stdout)
[17:02:22.311]         ...future.stdout <- NULL
[17:02:22.311]     }
[17:02:22.311]     ...future.result$conditions <- ...future.conditions
[17:02:22.311]     ...future.result$finished <- base::Sys.time()
[17:02:22.311]     ...future.result
[17:02:22.311] }
[17:02:22.313] assign_globals() ...
[17:02:22.313] List of 1
[17:02:22.313]  $ a: num 1
[17:02:22.313]  - attr(*, "where")=List of 1
[17:02:22.313]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.313]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.313]  - attr(*, "resolved")= logi FALSE
[17:02:22.313]  - attr(*, "total_size")= num 56
[17:02:22.313]  - attr(*, "already-done")= logi TRUE
[17:02:22.316] - copied ‘a’ to environment
[17:02:22.316] assign_globals() ... done
[17:02:22.316] plan(): Setting new future strategy stack:
[17:02:22.316] List of future strategies:
[17:02:22.316] 1. sequential:
[17:02:22.316]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.316]    - tweaked: FALSE
[17:02:22.316]    - call: NULL
[17:02:22.317] plan(): nbrOfWorkers() = 1
[17:02:22.317] plan(): Setting new future strategy stack:
[17:02:22.317] List of future strategies:
[17:02:22.317] 1. sequential:
[17:02:22.317]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.317]    - tweaked: FALSE
[17:02:22.317]    - call: plan(strategy)
[17:02:22.318] plan(): nbrOfWorkers() = 1
[17:02:22.318] SequentialFuture started (and completed)
[17:02:22.318] - Launch lazy future ... done
[17:02:22.318] run() for ‘SequentialFuture’ ... done
[17:02:22.318] getGlobalsAndPackages() ...
[17:02:22.318] Searching for globals...
[17:02:22.319] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.319] Searching for globals ... DONE
[17:02:22.319] Resolving globals: FALSE
[17:02:22.320] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.320] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.320] - globals: [1] ‘a’
[17:02:22.320] 
[17:02:22.320] getGlobalsAndPackages() ... DONE
[17:02:22.321] run() for ‘Future’ ...
[17:02:22.321] - state: ‘created’
[17:02:22.321] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:22.321] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:22.321] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:22.321]   - Field: ‘label’
[17:02:22.322]   - Field: ‘local’
[17:02:22.322]   - Field: ‘owner’
[17:02:22.322]   - Field: ‘envir’
[17:02:22.322]   - Field: ‘packages’
[17:02:22.322]   - Field: ‘gc’
[17:02:22.322]   - Field: ‘conditions’
[17:02:22.322]   - Field: ‘expr’
[17:02:22.322]   - Field: ‘uuid’
[17:02:22.322]   - Field: ‘seed’
[17:02:22.322]   - Field: ‘version’
[17:02:22.322]   - Field: ‘result’
[17:02:22.323]   - Field: ‘asynchronous’
[17:02:22.323]   - Field: ‘calls’
[17:02:22.323]   - Field: ‘globals’
[17:02:22.323]   - Field: ‘stdout’
[17:02:22.323]   - Field: ‘earlySignal’
[17:02:22.323]   - Field: ‘lazy’
[17:02:22.323]   - Field: ‘state’
[17:02:22.323] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:22.323] - Launch lazy future ...
[17:02:22.323] Packages needed by the future expression (n = 0): <none>
[17:02:22.324] Packages needed by future strategies (n = 0): <none>
[17:02:22.324] {
[17:02:22.324]     {
[17:02:22.324]         {
[17:02:22.324]             ...future.startTime <- base::Sys.time()
[17:02:22.324]             {
[17:02:22.324]                 {
[17:02:22.324]                   {
[17:02:22.324]                     base::local({
[17:02:22.324]                       has_future <- base::requireNamespace("future", 
[17:02:22.324]                         quietly = TRUE)
[17:02:22.324]                       if (has_future) {
[17:02:22.324]                         ns <- base::getNamespace("future")
[17:02:22.324]                         version <- ns[[".package"]][["version"]]
[17:02:22.324]                         if (is.null(version)) 
[17:02:22.324]                           version <- utils::packageVersion("future")
[17:02:22.324]                       }
[17:02:22.324]                       else {
[17:02:22.324]                         version <- NULL
[17:02:22.324]                       }
[17:02:22.324]                       if (!has_future || version < "1.8.0") {
[17:02:22.324]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.324]                           "", base::R.version$version.string), 
[17:02:22.324]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:22.324]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.324]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.324]                             "release", "version")], collapse = " "), 
[17:02:22.324]                           hostname = base::Sys.info()[["nodename"]])
[17:02:22.324]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.324]                           info)
[17:02:22.324]                         info <- base::paste(info, collapse = "; ")
[17:02:22.324]                         if (!has_future) {
[17:02:22.324]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.324]                             info)
[17:02:22.324]                         }
[17:02:22.324]                         else {
[17:02:22.324]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.324]                             info, version)
[17:02:22.324]                         }
[17:02:22.324]                         base::stop(msg)
[17:02:22.324]                       }
[17:02:22.324]                     })
[17:02:22.324]                   }
[17:02:22.324]                   ...future.strategy.old <- future::plan("list")
[17:02:22.324]                   options(future.plan = NULL)
[17:02:22.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.324]                 }
[17:02:22.324]                 ...future.workdir <- getwd()
[17:02:22.324]             }
[17:02:22.324]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.324]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.324]         }
[17:02:22.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.324]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.324]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.324]             base::names(...future.oldOptions))
[17:02:22.324]     }
[17:02:22.324]     if (FALSE) {
[17:02:22.324]     }
[17:02:22.324]     else {
[17:02:22.324]         if (TRUE) {
[17:02:22.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.324]                 open = "w")
[17:02:22.324]         }
[17:02:22.324]         else {
[17:02:22.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.324]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.324]         }
[17:02:22.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.324]             base::sink(type = "output", split = FALSE)
[17:02:22.324]             base::close(...future.stdout)
[17:02:22.324]         }, add = TRUE)
[17:02:22.324]     }
[17:02:22.324]     ...future.frame <- base::sys.nframe()
[17:02:22.324]     ...future.conditions <- base::list()
[17:02:22.324]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.324]     if (FALSE) {
[17:02:22.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.324]     }
[17:02:22.324]     ...future.result <- base::tryCatch({
[17:02:22.324]         base::withCallingHandlers({
[17:02:22.324]             ...future.value <- base::withVisible(base::local({
[17:02:22.324]                 2 * a
[17:02:22.324]             }))
[17:02:22.324]             future::FutureResult(value = ...future.value$value, 
[17:02:22.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.324]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.324]                     ...future.globalenv.names))
[17:02:22.324]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.324]         }, condition = base::local({
[17:02:22.324]             c <- base::c
[17:02:22.324]             inherits <- base::inherits
[17:02:22.324]             invokeRestart <- base::invokeRestart
[17:02:22.324]             length <- base::length
[17:02:22.324]             list <- base::list
[17:02:22.324]             seq.int <- base::seq.int
[17:02:22.324]             signalCondition <- base::signalCondition
[17:02:22.324]             sys.calls <- base::sys.calls
[17:02:22.324]             `[[` <- base::`[[`
[17:02:22.324]             `+` <- base::`+`
[17:02:22.324]             `<<-` <- base::`<<-`
[17:02:22.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.324]                   3L)]
[17:02:22.324]             }
[17:02:22.324]             function(cond) {
[17:02:22.324]                 is_error <- inherits(cond, "error")
[17:02:22.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.324]                   NULL)
[17:02:22.324]                 if (is_error) {
[17:02:22.324]                   sessionInformation <- function() {
[17:02:22.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.324]                       search = base::search(), system = base::Sys.info())
[17:02:22.324]                   }
[17:02:22.324]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.324]                     cond$call), session = sessionInformation(), 
[17:02:22.324]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.324]                   signalCondition(cond)
[17:02:22.324]                 }
[17:02:22.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.324]                 "immediateCondition"))) {
[17:02:22.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.324]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.324]                   if (TRUE && !signal) {
[17:02:22.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.324]                     {
[17:02:22.324]                       inherits <- base::inherits
[17:02:22.324]                       invokeRestart <- base::invokeRestart
[17:02:22.324]                       is.null <- base::is.null
[17:02:22.324]                       muffled <- FALSE
[17:02:22.324]                       if (inherits(cond, "message")) {
[17:02:22.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.324]                         if (muffled) 
[17:02:22.324]                           invokeRestart("muffleMessage")
[17:02:22.324]                       }
[17:02:22.324]                       else if (inherits(cond, "warning")) {
[17:02:22.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.324]                         if (muffled) 
[17:02:22.324]                           invokeRestart("muffleWarning")
[17:02:22.324]                       }
[17:02:22.324]                       else if (inherits(cond, "condition")) {
[17:02:22.324]                         if (!is.null(pattern)) {
[17:02:22.324]                           computeRestarts <- base::computeRestarts
[17:02:22.324]                           grepl <- base::grepl
[17:02:22.324]                           restarts <- computeRestarts(cond)
[17:02:22.324]                           for (restart in restarts) {
[17:02:22.324]                             name <- restart$name
[17:02:22.324]                             if (is.null(name)) 
[17:02:22.324]                               next
[17:02:22.324]                             if (!grepl(pattern, name)) 
[17:02:22.324]                               next
[17:02:22.324]                             invokeRestart(restart)
[17:02:22.324]                             muffled <- TRUE
[17:02:22.324]                             break
[17:02:22.324]                           }
[17:02:22.324]                         }
[17:02:22.324]                       }
[17:02:22.324]                       invisible(muffled)
[17:02:22.324]                     }
[17:02:22.324]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.324]                   }
[17:02:22.324]                 }
[17:02:22.324]                 else {
[17:02:22.324]                   if (TRUE) {
[17:02:22.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.324]                     {
[17:02:22.324]                       inherits <- base::inherits
[17:02:22.324]                       invokeRestart <- base::invokeRestart
[17:02:22.324]                       is.null <- base::is.null
[17:02:22.324]                       muffled <- FALSE
[17:02:22.324]                       if (inherits(cond, "message")) {
[17:02:22.324]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.324]                         if (muffled) 
[17:02:22.324]                           invokeRestart("muffleMessage")
[17:02:22.324]                       }
[17:02:22.324]                       else if (inherits(cond, "warning")) {
[17:02:22.324]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.324]                         if (muffled) 
[17:02:22.324]                           invokeRestart("muffleWarning")
[17:02:22.324]                       }
[17:02:22.324]                       else if (inherits(cond, "condition")) {
[17:02:22.324]                         if (!is.null(pattern)) {
[17:02:22.324]                           computeRestarts <- base::computeRestarts
[17:02:22.324]                           grepl <- base::grepl
[17:02:22.324]                           restarts <- computeRestarts(cond)
[17:02:22.324]                           for (restart in restarts) {
[17:02:22.324]                             name <- restart$name
[17:02:22.324]                             if (is.null(name)) 
[17:02:22.324]                               next
[17:02:22.324]                             if (!grepl(pattern, name)) 
[17:02:22.324]                               next
[17:02:22.324]                             invokeRestart(restart)
[17:02:22.324]                             muffled <- TRUE
[17:02:22.324]                             break
[17:02:22.324]                           }
[17:02:22.324]                         }
[17:02:22.324]                       }
[17:02:22.324]                       invisible(muffled)
[17:02:22.324]                     }
[17:02:22.324]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.324]                   }
[17:02:22.324]                 }
[17:02:22.324]             }
[17:02:22.324]         }))
[17:02:22.324]     }, error = function(ex) {
[17:02:22.324]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.324]                 ...future.rng), started = ...future.startTime, 
[17:02:22.324]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.324]             version = "1.8"), class = "FutureResult")
[17:02:22.324]     }, finally = {
[17:02:22.324]         if (!identical(...future.workdir, getwd())) 
[17:02:22.324]             setwd(...future.workdir)
[17:02:22.324]         {
[17:02:22.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.324]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.324]             }
[17:02:22.324]             base::options(...future.oldOptions)
[17:02:22.324]             if (.Platform$OS.type == "windows") {
[17:02:22.324]                 old_names <- names(...future.oldEnvVars)
[17:02:22.324]                 envs <- base::Sys.getenv()
[17:02:22.324]                 names <- names(envs)
[17:02:22.324]                 common <- intersect(names, old_names)
[17:02:22.324]                 added <- setdiff(names, old_names)
[17:02:22.324]                 removed <- setdiff(old_names, names)
[17:02:22.324]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.324]                   envs[common]]
[17:02:22.324]                 NAMES <- toupper(changed)
[17:02:22.324]                 args <- list()
[17:02:22.324]                 for (kk in seq_along(NAMES)) {
[17:02:22.324]                   name <- changed[[kk]]
[17:02:22.324]                   NAME <- NAMES[[kk]]
[17:02:22.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.324]                     next
[17:02:22.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.324]                 }
[17:02:22.324]                 NAMES <- toupper(added)
[17:02:22.324]                 for (kk in seq_along(NAMES)) {
[17:02:22.324]                   name <- added[[kk]]
[17:02:22.324]                   NAME <- NAMES[[kk]]
[17:02:22.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.324]                     next
[17:02:22.324]                   args[[name]] <- ""
[17:02:22.324]                 }
[17:02:22.324]                 NAMES <- toupper(removed)
[17:02:22.324]                 for (kk in seq_along(NAMES)) {
[17:02:22.324]                   name <- removed[[kk]]
[17:02:22.324]                   NAME <- NAMES[[kk]]
[17:02:22.324]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.324]                     next
[17:02:22.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.324]                 }
[17:02:22.324]                 if (length(args) > 0) 
[17:02:22.324]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.324]             }
[17:02:22.324]             else {
[17:02:22.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.324]             }
[17:02:22.324]             {
[17:02:22.324]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.324]                   0L) {
[17:02:22.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.324]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.324]                   base::options(opts)
[17:02:22.324]                 }
[17:02:22.324]                 {
[17:02:22.324]                   {
[17:02:22.324]                     NULL
[17:02:22.324]                     RNGkind("Mersenne-Twister")
[17:02:22.324]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:22.324]                       inherits = FALSE)
[17:02:22.324]                   }
[17:02:22.324]                   options(future.plan = NULL)
[17:02:22.324]                   if (is.na(NA_character_)) 
[17:02:22.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.324]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.324]                     .init = FALSE)
[17:02:22.324]                 }
[17:02:22.324]             }
[17:02:22.324]         }
[17:02:22.324]     })
[17:02:22.324]     if (TRUE) {
[17:02:22.324]         base::sink(type = "output", split = FALSE)
[17:02:22.324]         if (TRUE) {
[17:02:22.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.324]         }
[17:02:22.324]         else {
[17:02:22.324]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.324]         }
[17:02:22.324]         base::close(...future.stdout)
[17:02:22.324]         ...future.stdout <- NULL
[17:02:22.324]     }
[17:02:22.324]     ...future.result$conditions <- ...future.conditions
[17:02:22.324]     ...future.result$finished <- base::Sys.time()
[17:02:22.324]     ...future.result
[17:02:22.324] }
[17:02:22.326] assign_globals() ...
[17:02:22.326] List of 1
[17:02:22.326]  $ a: num 1
[17:02:22.326]  - attr(*, "where")=List of 1
[17:02:22.326]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.326]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.326]  - attr(*, "resolved")= logi FALSE
[17:02:22.326]  - attr(*, "total_size")= num 56
[17:02:22.326]  - attr(*, "already-done")= logi TRUE
[17:02:22.328] - copied ‘a’ to environment
[17:02:22.328] assign_globals() ... done
[17:02:22.328] plan(): Setting new future strategy stack:
[17:02:22.328] List of future strategies:
[17:02:22.328] 1. sequential:
[17:02:22.328]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.328]    - tweaked: FALSE
[17:02:22.328]    - call: NULL
[17:02:22.329] plan(): nbrOfWorkers() = 1
[17:02:22.330] plan(): Setting new future strategy stack:
[17:02:22.330] List of future strategies:
[17:02:22.330] 1. sequential:
[17:02:22.330]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.330]    - tweaked: FALSE
[17:02:22.330]    - call: plan(strategy)
[17:02:22.330] plan(): nbrOfWorkers() = 1
[17:02:22.330] SequentialFuture started (and completed)
[17:02:22.330] - Launch lazy future ... done
[17:02:22.330] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[17:02:22.336] plan(): Setting new future strategy stack:
[17:02:22.336] List of future strategies:
[17:02:22.336] 1. multicore:
[17:02:22.336]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:22.336]    - tweaked: FALSE
[17:02:22.336]    - call: plan(strategy)
[17:02:22.340] plan(): nbrOfWorkers() = 2
[17:02:22.340] getGlobalsAndPackages() ...
[17:02:22.340] Searching for globals...
[17:02:22.341] - globals found: [1] ‘{’
[17:02:22.341] Searching for globals ... DONE
[17:02:22.341] Resolving globals: FALSE
[17:02:22.341] 
[17:02:22.341] 
[17:02:22.342] getGlobalsAndPackages() ... DONE
[17:02:22.342] run() for ‘Future’ ...
[17:02:22.342] - state: ‘created’
[17:02:22.342] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:22.348] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:22.348] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:22.348]   - Field: ‘label’
[17:02:22.348]   - Field: ‘local’
[17:02:22.348]   - Field: ‘owner’
[17:02:22.348]   - Field: ‘envir’
[17:02:22.348]   - Field: ‘workers’
[17:02:22.348]   - Field: ‘packages’
[17:02:22.348]   - Field: ‘gc’
[17:02:22.349]   - Field: ‘job’
[17:02:22.349]   - Field: ‘conditions’
[17:02:22.349]   - Field: ‘expr’
[17:02:22.349]   - Field: ‘uuid’
[17:02:22.349]   - Field: ‘seed’
[17:02:22.349]   - Field: ‘version’
[17:02:22.349]   - Field: ‘result’
[17:02:22.349]   - Field: ‘asynchronous’
[17:02:22.349]   - Field: ‘calls’
[17:02:22.349]   - Field: ‘globals’
[17:02:22.349]   - Field: ‘stdout’
[17:02:22.350]   - Field: ‘earlySignal’
[17:02:22.350]   - Field: ‘lazy’
[17:02:22.350]   - Field: ‘state’
[17:02:22.350] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:22.350] - Launch lazy future ...
[17:02:22.351] Packages needed by the future expression (n = 0): <none>
[17:02:22.351] Packages needed by future strategies (n = 0): <none>
[17:02:22.352] {
[17:02:22.352]     {
[17:02:22.352]         {
[17:02:22.352]             ...future.startTime <- base::Sys.time()
[17:02:22.352]             {
[17:02:22.352]                 {
[17:02:22.352]                   {
[17:02:22.352]                     {
[17:02:22.352]                       base::local({
[17:02:22.352]                         has_future <- base::requireNamespace("future", 
[17:02:22.352]                           quietly = TRUE)
[17:02:22.352]                         if (has_future) {
[17:02:22.352]                           ns <- base::getNamespace("future")
[17:02:22.352]                           version <- ns[[".package"]][["version"]]
[17:02:22.352]                           if (is.null(version)) 
[17:02:22.352]                             version <- utils::packageVersion("future")
[17:02:22.352]                         }
[17:02:22.352]                         else {
[17:02:22.352]                           version <- NULL
[17:02:22.352]                         }
[17:02:22.352]                         if (!has_future || version < "1.8.0") {
[17:02:22.352]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.352]                             "", base::R.version$version.string), 
[17:02:22.352]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:22.352]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.352]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.352]                               "release", "version")], collapse = " "), 
[17:02:22.352]                             hostname = base::Sys.info()[["nodename"]])
[17:02:22.352]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.352]                             info)
[17:02:22.352]                           info <- base::paste(info, collapse = "; ")
[17:02:22.352]                           if (!has_future) {
[17:02:22.352]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.352]                               info)
[17:02:22.352]                           }
[17:02:22.352]                           else {
[17:02:22.352]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.352]                               info, version)
[17:02:22.352]                           }
[17:02:22.352]                           base::stop(msg)
[17:02:22.352]                         }
[17:02:22.352]                       })
[17:02:22.352]                     }
[17:02:22.352]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:22.352]                     base::options(mc.cores = 1L)
[17:02:22.352]                   }
[17:02:22.352]                   ...future.strategy.old <- future::plan("list")
[17:02:22.352]                   options(future.plan = NULL)
[17:02:22.352]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.352]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.352]                 }
[17:02:22.352]                 ...future.workdir <- getwd()
[17:02:22.352]             }
[17:02:22.352]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.352]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.352]         }
[17:02:22.352]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.352]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.352]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.352]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.352]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.352]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.352]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.352]             base::names(...future.oldOptions))
[17:02:22.352]     }
[17:02:22.352]     if (FALSE) {
[17:02:22.352]     }
[17:02:22.352]     else {
[17:02:22.352]         if (TRUE) {
[17:02:22.352]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.352]                 open = "w")
[17:02:22.352]         }
[17:02:22.352]         else {
[17:02:22.352]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.352]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.352]         }
[17:02:22.352]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.352]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.352]             base::sink(type = "output", split = FALSE)
[17:02:22.352]             base::close(...future.stdout)
[17:02:22.352]         }, add = TRUE)
[17:02:22.352]     }
[17:02:22.352]     ...future.frame <- base::sys.nframe()
[17:02:22.352]     ...future.conditions <- base::list()
[17:02:22.352]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.352]     if (FALSE) {
[17:02:22.352]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.352]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.352]     }
[17:02:22.352]     ...future.result <- base::tryCatch({
[17:02:22.352]         base::withCallingHandlers({
[17:02:22.352]             ...future.value <- base::withVisible(base::local({
[17:02:22.352]                 withCallingHandlers({
[17:02:22.352]                   {
[17:02:22.352]                     2
[17:02:22.352]                   }
[17:02:22.352]                 }, immediateCondition = function(cond) {
[17:02:22.352]                   save_rds <- function (object, pathname, ...) 
[17:02:22.352]                   {
[17:02:22.352]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:22.352]                     if (file_test("-f", pathname_tmp)) {
[17:02:22.352]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.352]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:22.352]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.352]                         fi_tmp[["mtime"]])
[17:02:22.352]                     }
[17:02:22.352]                     tryCatch({
[17:02:22.352]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:22.352]                     }, error = function(ex) {
[17:02:22.352]                       msg <- conditionMessage(ex)
[17:02:22.352]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.352]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:22.352]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.352]                         fi_tmp[["mtime"]], msg)
[17:02:22.352]                       ex$message <- msg
[17:02:22.352]                       stop(ex)
[17:02:22.352]                     })
[17:02:22.352]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:22.352]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:22.352]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:22.352]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.352]                       fi <- file.info(pathname)
[17:02:22.352]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:22.352]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.352]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:22.352]                         fi[["size"]], fi[["mtime"]])
[17:02:22.352]                       stop(msg)
[17:02:22.352]                     }
[17:02:22.352]                     invisible(pathname)
[17:02:22.352]                   }
[17:02:22.352]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:22.352]                     rootPath = tempdir()) 
[17:02:22.352]                   {
[17:02:22.352]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:22.352]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:22.352]                       tmpdir = path, fileext = ".rds")
[17:02:22.352]                     save_rds(obj, file)
[17:02:22.352]                   }
[17:02:22.352]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8QIev6/.future/immediateConditions")
[17:02:22.352]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.352]                   {
[17:02:22.352]                     inherits <- base::inherits
[17:02:22.352]                     invokeRestart <- base::invokeRestart
[17:02:22.352]                     is.null <- base::is.null
[17:02:22.352]                     muffled <- FALSE
[17:02:22.352]                     if (inherits(cond, "message")) {
[17:02:22.352]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:22.352]                       if (muffled) 
[17:02:22.352]                         invokeRestart("muffleMessage")
[17:02:22.352]                     }
[17:02:22.352]                     else if (inherits(cond, "warning")) {
[17:02:22.352]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:22.352]                       if (muffled) 
[17:02:22.352]                         invokeRestart("muffleWarning")
[17:02:22.352]                     }
[17:02:22.352]                     else if (inherits(cond, "condition")) {
[17:02:22.352]                       if (!is.null(pattern)) {
[17:02:22.352]                         computeRestarts <- base::computeRestarts
[17:02:22.352]                         grepl <- base::grepl
[17:02:22.352]                         restarts <- computeRestarts(cond)
[17:02:22.352]                         for (restart in restarts) {
[17:02:22.352]                           name <- restart$name
[17:02:22.352]                           if (is.null(name)) 
[17:02:22.352]                             next
[17:02:22.352]                           if (!grepl(pattern, name)) 
[17:02:22.352]                             next
[17:02:22.352]                           invokeRestart(restart)
[17:02:22.352]                           muffled <- TRUE
[17:02:22.352]                           break
[17:02:22.352]                         }
[17:02:22.352]                       }
[17:02:22.352]                     }
[17:02:22.352]                     invisible(muffled)
[17:02:22.352]                   }
[17:02:22.352]                   muffleCondition(cond)
[17:02:22.352]                 })
[17:02:22.352]             }))
[17:02:22.352]             future::FutureResult(value = ...future.value$value, 
[17:02:22.352]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.352]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.352]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.352]                     ...future.globalenv.names))
[17:02:22.352]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.352]         }, condition = base::local({
[17:02:22.352]             c <- base::c
[17:02:22.352]             inherits <- base::inherits
[17:02:22.352]             invokeRestart <- base::invokeRestart
[17:02:22.352]             length <- base::length
[17:02:22.352]             list <- base::list
[17:02:22.352]             seq.int <- base::seq.int
[17:02:22.352]             signalCondition <- base::signalCondition
[17:02:22.352]             sys.calls <- base::sys.calls
[17:02:22.352]             `[[` <- base::`[[`
[17:02:22.352]             `+` <- base::`+`
[17:02:22.352]             `<<-` <- base::`<<-`
[17:02:22.352]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.352]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.352]                   3L)]
[17:02:22.352]             }
[17:02:22.352]             function(cond) {
[17:02:22.352]                 is_error <- inherits(cond, "error")
[17:02:22.352]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.352]                   NULL)
[17:02:22.352]                 if (is_error) {
[17:02:22.352]                   sessionInformation <- function() {
[17:02:22.352]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.352]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.352]                       search = base::search(), system = base::Sys.info())
[17:02:22.352]                   }
[17:02:22.352]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.352]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.352]                     cond$call), session = sessionInformation(), 
[17:02:22.352]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.352]                   signalCondition(cond)
[17:02:22.352]                 }
[17:02:22.352]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.352]                 "immediateCondition"))) {
[17:02:22.352]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.352]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.352]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.352]                   if (TRUE && !signal) {
[17:02:22.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.352]                     {
[17:02:22.352]                       inherits <- base::inherits
[17:02:22.352]                       invokeRestart <- base::invokeRestart
[17:02:22.352]                       is.null <- base::is.null
[17:02:22.352]                       muffled <- FALSE
[17:02:22.352]                       if (inherits(cond, "message")) {
[17:02:22.352]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.352]                         if (muffled) 
[17:02:22.352]                           invokeRestart("muffleMessage")
[17:02:22.352]                       }
[17:02:22.352]                       else if (inherits(cond, "warning")) {
[17:02:22.352]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.352]                         if (muffled) 
[17:02:22.352]                           invokeRestart("muffleWarning")
[17:02:22.352]                       }
[17:02:22.352]                       else if (inherits(cond, "condition")) {
[17:02:22.352]                         if (!is.null(pattern)) {
[17:02:22.352]                           computeRestarts <- base::computeRestarts
[17:02:22.352]                           grepl <- base::grepl
[17:02:22.352]                           restarts <- computeRestarts(cond)
[17:02:22.352]                           for (restart in restarts) {
[17:02:22.352]                             name <- restart$name
[17:02:22.352]                             if (is.null(name)) 
[17:02:22.352]                               next
[17:02:22.352]                             if (!grepl(pattern, name)) 
[17:02:22.352]                               next
[17:02:22.352]                             invokeRestart(restart)
[17:02:22.352]                             muffled <- TRUE
[17:02:22.352]                             break
[17:02:22.352]                           }
[17:02:22.352]                         }
[17:02:22.352]                       }
[17:02:22.352]                       invisible(muffled)
[17:02:22.352]                     }
[17:02:22.352]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.352]                   }
[17:02:22.352]                 }
[17:02:22.352]                 else {
[17:02:22.352]                   if (TRUE) {
[17:02:22.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.352]                     {
[17:02:22.352]                       inherits <- base::inherits
[17:02:22.352]                       invokeRestart <- base::invokeRestart
[17:02:22.352]                       is.null <- base::is.null
[17:02:22.352]                       muffled <- FALSE
[17:02:22.352]                       if (inherits(cond, "message")) {
[17:02:22.352]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.352]                         if (muffled) 
[17:02:22.352]                           invokeRestart("muffleMessage")
[17:02:22.352]                       }
[17:02:22.352]                       else if (inherits(cond, "warning")) {
[17:02:22.352]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.352]                         if (muffled) 
[17:02:22.352]                           invokeRestart("muffleWarning")
[17:02:22.352]                       }
[17:02:22.352]                       else if (inherits(cond, "condition")) {
[17:02:22.352]                         if (!is.null(pattern)) {
[17:02:22.352]                           computeRestarts <- base::computeRestarts
[17:02:22.352]                           grepl <- base::grepl
[17:02:22.352]                           restarts <- computeRestarts(cond)
[17:02:22.352]                           for (restart in restarts) {
[17:02:22.352]                             name <- restart$name
[17:02:22.352]                             if (is.null(name)) 
[17:02:22.352]                               next
[17:02:22.352]                             if (!grepl(pattern, name)) 
[17:02:22.352]                               next
[17:02:22.352]                             invokeRestart(restart)
[17:02:22.352]                             muffled <- TRUE
[17:02:22.352]                             break
[17:02:22.352]                           }
[17:02:22.352]                         }
[17:02:22.352]                       }
[17:02:22.352]                       invisible(muffled)
[17:02:22.352]                     }
[17:02:22.352]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.352]                   }
[17:02:22.352]                 }
[17:02:22.352]             }
[17:02:22.352]         }))
[17:02:22.352]     }, error = function(ex) {
[17:02:22.352]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.352]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.352]                 ...future.rng), started = ...future.startTime, 
[17:02:22.352]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.352]             version = "1.8"), class = "FutureResult")
[17:02:22.352]     }, finally = {
[17:02:22.352]         if (!identical(...future.workdir, getwd())) 
[17:02:22.352]             setwd(...future.workdir)
[17:02:22.352]         {
[17:02:22.352]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.352]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.352]             }
[17:02:22.352]             base::options(...future.oldOptions)
[17:02:22.352]             if (.Platform$OS.type == "windows") {
[17:02:22.352]                 old_names <- names(...future.oldEnvVars)
[17:02:22.352]                 envs <- base::Sys.getenv()
[17:02:22.352]                 names <- names(envs)
[17:02:22.352]                 common <- intersect(names, old_names)
[17:02:22.352]                 added <- setdiff(names, old_names)
[17:02:22.352]                 removed <- setdiff(old_names, names)
[17:02:22.352]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.352]                   envs[common]]
[17:02:22.352]                 NAMES <- toupper(changed)
[17:02:22.352]                 args <- list()
[17:02:22.352]                 for (kk in seq_along(NAMES)) {
[17:02:22.352]                   name <- changed[[kk]]
[17:02:22.352]                   NAME <- NAMES[[kk]]
[17:02:22.352]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.352]                     next
[17:02:22.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.352]                 }
[17:02:22.352]                 NAMES <- toupper(added)
[17:02:22.352]                 for (kk in seq_along(NAMES)) {
[17:02:22.352]                   name <- added[[kk]]
[17:02:22.352]                   NAME <- NAMES[[kk]]
[17:02:22.352]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.352]                     next
[17:02:22.352]                   args[[name]] <- ""
[17:02:22.352]                 }
[17:02:22.352]                 NAMES <- toupper(removed)
[17:02:22.352]                 for (kk in seq_along(NAMES)) {
[17:02:22.352]                   name <- removed[[kk]]
[17:02:22.352]                   NAME <- NAMES[[kk]]
[17:02:22.352]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.352]                     next
[17:02:22.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.352]                 }
[17:02:22.352]                 if (length(args) > 0) 
[17:02:22.352]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.352]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.352]             }
[17:02:22.352]             else {
[17:02:22.352]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.352]             }
[17:02:22.352]             {
[17:02:22.352]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.352]                   0L) {
[17:02:22.352]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.352]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.352]                   base::options(opts)
[17:02:22.352]                 }
[17:02:22.352]                 {
[17:02:22.352]                   {
[17:02:22.352]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:22.352]                     NULL
[17:02:22.352]                   }
[17:02:22.352]                   options(future.plan = NULL)
[17:02:22.352]                   if (is.na(NA_character_)) 
[17:02:22.352]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.352]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.352]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.352]                     .init = FALSE)
[17:02:22.352]                 }
[17:02:22.352]             }
[17:02:22.352]         }
[17:02:22.352]     })
[17:02:22.352]     if (TRUE) {
[17:02:22.352]         base::sink(type = "output", split = FALSE)
[17:02:22.352]         if (TRUE) {
[17:02:22.352]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.352]         }
[17:02:22.352]         else {
[17:02:22.352]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.352]         }
[17:02:22.352]         base::close(...future.stdout)
[17:02:22.352]         ...future.stdout <- NULL
[17:02:22.352]     }
[17:02:22.352]     ...future.result$conditions <- ...future.conditions
[17:02:22.352]     ...future.result$finished <- base::Sys.time()
[17:02:22.352]     ...future.result
[17:02:22.352] }
[17:02:22.354] requestCore(): workers = 2
[17:02:22.357] MulticoreFuture started
[17:02:22.358] - Launch lazy future ... done
[17:02:22.358] plan(): Setting new future strategy stack:
[17:02:22.358] run() for ‘MulticoreFuture’ ... done
[17:02:22.358] getGlobalsAndPackages() ...
[17:02:22.359] Searching for globals...
[17:02:22.358] List of future strategies:
[17:02:22.358] 1. sequential:
[17:02:22.358]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.358]    - tweaked: FALSE
[17:02:22.358]    - call: NULL
[17:02:22.359] plan(): nbrOfWorkers() = 1
[17:02:22.361] - globals found: [1] ‘{’
[17:02:22.361] Searching for globals ... DONE
[17:02:22.361] plan(): Setting new future strategy stack:
[17:02:22.361] Resolving globals: FALSE
[17:02:22.361] List of future strategies:
[17:02:22.361] 1. multicore:
[17:02:22.361]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:22.361]    - tweaked: FALSE
[17:02:22.361]    - call: plan(strategy)
[17:02:22.362] 
[17:02:22.362] 
[17:02:22.362] getGlobalsAndPackages() ... DONE
[17:02:22.363] run() for ‘Future’ ...
[17:02:22.363] - state: ‘created’
[17:02:22.363] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:22.366] plan(): nbrOfWorkers() = 2
[17:02:22.368] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:22.368] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:22.368]   - Field: ‘label’
[17:02:22.368]   - Field: ‘local’
[17:02:22.368]   - Field: ‘owner’
[17:02:22.369]   - Field: ‘envir’
[17:02:22.369]   - Field: ‘workers’
[17:02:22.369]   - Field: ‘packages’
[17:02:22.369]   - Field: ‘gc’
[17:02:22.369]   - Field: ‘job’
[17:02:22.369]   - Field: ‘conditions’
[17:02:22.369]   - Field: ‘expr’
[17:02:22.369]   - Field: ‘uuid’
[17:02:22.370]   - Field: ‘seed’
[17:02:22.370]   - Field: ‘version’
[17:02:22.370]   - Field: ‘result’
[17:02:22.370]   - Field: ‘asynchronous’
[17:02:22.370]   - Field: ‘calls’
[17:02:22.370]   - Field: ‘globals’
[17:02:22.370]   - Field: ‘stdout’
[17:02:22.371]   - Field: ‘earlySignal’
[17:02:22.371]   - Field: ‘lazy’
[17:02:22.371]   - Field: ‘state’
[17:02:22.371] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:22.371] - Launch lazy future ...
[17:02:22.372] Packages needed by the future expression (n = 0): <none>
[17:02:22.372] Packages needed by future strategies (n = 0): <none>
[17:02:22.372] {
[17:02:22.372]     {
[17:02:22.372]         {
[17:02:22.372]             ...future.startTime <- base::Sys.time()
[17:02:22.372]             {
[17:02:22.372]                 {
[17:02:22.372]                   {
[17:02:22.372]                     {
[17:02:22.372]                       base::local({
[17:02:22.372]                         has_future <- base::requireNamespace("future", 
[17:02:22.372]                           quietly = TRUE)
[17:02:22.372]                         if (has_future) {
[17:02:22.372]                           ns <- base::getNamespace("future")
[17:02:22.372]                           version <- ns[[".package"]][["version"]]
[17:02:22.372]                           if (is.null(version)) 
[17:02:22.372]                             version <- utils::packageVersion("future")
[17:02:22.372]                         }
[17:02:22.372]                         else {
[17:02:22.372]                           version <- NULL
[17:02:22.372]                         }
[17:02:22.372]                         if (!has_future || version < "1.8.0") {
[17:02:22.372]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.372]                             "", base::R.version$version.string), 
[17:02:22.372]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:22.372]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.372]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.372]                               "release", "version")], collapse = " "), 
[17:02:22.372]                             hostname = base::Sys.info()[["nodename"]])
[17:02:22.372]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.372]                             info)
[17:02:22.372]                           info <- base::paste(info, collapse = "; ")
[17:02:22.372]                           if (!has_future) {
[17:02:22.372]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.372]                               info)
[17:02:22.372]                           }
[17:02:22.372]                           else {
[17:02:22.372]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.372]                               info, version)
[17:02:22.372]                           }
[17:02:22.372]                           base::stop(msg)
[17:02:22.372]                         }
[17:02:22.372]                       })
[17:02:22.372]                     }
[17:02:22.372]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:22.372]                     base::options(mc.cores = 1L)
[17:02:22.372]                   }
[17:02:22.372]                   ...future.strategy.old <- future::plan("list")
[17:02:22.372]                   options(future.plan = NULL)
[17:02:22.372]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.372]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.372]                 }
[17:02:22.372]                 ...future.workdir <- getwd()
[17:02:22.372]             }
[17:02:22.372]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.372]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.372]         }
[17:02:22.372]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.372]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.372]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.372]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.372]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.372]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.372]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.372]             base::names(...future.oldOptions))
[17:02:22.372]     }
[17:02:22.372]     if (FALSE) {
[17:02:22.372]     }
[17:02:22.372]     else {
[17:02:22.372]         if (TRUE) {
[17:02:22.372]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.372]                 open = "w")
[17:02:22.372]         }
[17:02:22.372]         else {
[17:02:22.372]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.372]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.372]         }
[17:02:22.372]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.372]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.372]             base::sink(type = "output", split = FALSE)
[17:02:22.372]             base::close(...future.stdout)
[17:02:22.372]         }, add = TRUE)
[17:02:22.372]     }
[17:02:22.372]     ...future.frame <- base::sys.nframe()
[17:02:22.372]     ...future.conditions <- base::list()
[17:02:22.372]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.372]     if (FALSE) {
[17:02:22.372]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.372]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.372]     }
[17:02:22.372]     ...future.result <- base::tryCatch({
[17:02:22.372]         base::withCallingHandlers({
[17:02:22.372]             ...future.value <- base::withVisible(base::local({
[17:02:22.372]                 withCallingHandlers({
[17:02:22.372]                   {
[17:02:22.372]                     4
[17:02:22.372]                   }
[17:02:22.372]                 }, immediateCondition = function(cond) {
[17:02:22.372]                   save_rds <- function (object, pathname, ...) 
[17:02:22.372]                   {
[17:02:22.372]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:22.372]                     if (file_test("-f", pathname_tmp)) {
[17:02:22.372]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.372]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:22.372]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.372]                         fi_tmp[["mtime"]])
[17:02:22.372]                     }
[17:02:22.372]                     tryCatch({
[17:02:22.372]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:22.372]                     }, error = function(ex) {
[17:02:22.372]                       msg <- conditionMessage(ex)
[17:02:22.372]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.372]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:22.372]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.372]                         fi_tmp[["mtime"]], msg)
[17:02:22.372]                       ex$message <- msg
[17:02:22.372]                       stop(ex)
[17:02:22.372]                     })
[17:02:22.372]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:22.372]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:22.372]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:22.372]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.372]                       fi <- file.info(pathname)
[17:02:22.372]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:22.372]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.372]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:22.372]                         fi[["size"]], fi[["mtime"]])
[17:02:22.372]                       stop(msg)
[17:02:22.372]                     }
[17:02:22.372]                     invisible(pathname)
[17:02:22.372]                   }
[17:02:22.372]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:22.372]                     rootPath = tempdir()) 
[17:02:22.372]                   {
[17:02:22.372]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:22.372]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:22.372]                       tmpdir = path, fileext = ".rds")
[17:02:22.372]                     save_rds(obj, file)
[17:02:22.372]                   }
[17:02:22.372]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8QIev6/.future/immediateConditions")
[17:02:22.372]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.372]                   {
[17:02:22.372]                     inherits <- base::inherits
[17:02:22.372]                     invokeRestart <- base::invokeRestart
[17:02:22.372]                     is.null <- base::is.null
[17:02:22.372]                     muffled <- FALSE
[17:02:22.372]                     if (inherits(cond, "message")) {
[17:02:22.372]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:22.372]                       if (muffled) 
[17:02:22.372]                         invokeRestart("muffleMessage")
[17:02:22.372]                     }
[17:02:22.372]                     else if (inherits(cond, "warning")) {
[17:02:22.372]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:22.372]                       if (muffled) 
[17:02:22.372]                         invokeRestart("muffleWarning")
[17:02:22.372]                     }
[17:02:22.372]                     else if (inherits(cond, "condition")) {
[17:02:22.372]                       if (!is.null(pattern)) {
[17:02:22.372]                         computeRestarts <- base::computeRestarts
[17:02:22.372]                         grepl <- base::grepl
[17:02:22.372]                         restarts <- computeRestarts(cond)
[17:02:22.372]                         for (restart in restarts) {
[17:02:22.372]                           name <- restart$name
[17:02:22.372]                           if (is.null(name)) 
[17:02:22.372]                             next
[17:02:22.372]                           if (!grepl(pattern, name)) 
[17:02:22.372]                             next
[17:02:22.372]                           invokeRestart(restart)
[17:02:22.372]                           muffled <- TRUE
[17:02:22.372]                           break
[17:02:22.372]                         }
[17:02:22.372]                       }
[17:02:22.372]                     }
[17:02:22.372]                     invisible(muffled)
[17:02:22.372]                   }
[17:02:22.372]                   muffleCondition(cond)
[17:02:22.372]                 })
[17:02:22.372]             }))
[17:02:22.372]             future::FutureResult(value = ...future.value$value, 
[17:02:22.372]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.372]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.372]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.372]                     ...future.globalenv.names))
[17:02:22.372]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.372]         }, condition = base::local({
[17:02:22.372]             c <- base::c
[17:02:22.372]             inherits <- base::inherits
[17:02:22.372]             invokeRestart <- base::invokeRestart
[17:02:22.372]             length <- base::length
[17:02:22.372]             list <- base::list
[17:02:22.372]             seq.int <- base::seq.int
[17:02:22.372]             signalCondition <- base::signalCondition
[17:02:22.372]             sys.calls <- base::sys.calls
[17:02:22.372]             `[[` <- base::`[[`
[17:02:22.372]             `+` <- base::`+`
[17:02:22.372]             `<<-` <- base::`<<-`
[17:02:22.372]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.372]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.372]                   3L)]
[17:02:22.372]             }
[17:02:22.372]             function(cond) {
[17:02:22.372]                 is_error <- inherits(cond, "error")
[17:02:22.372]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.372]                   NULL)
[17:02:22.372]                 if (is_error) {
[17:02:22.372]                   sessionInformation <- function() {
[17:02:22.372]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.372]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.372]                       search = base::search(), system = base::Sys.info())
[17:02:22.372]                   }
[17:02:22.372]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.372]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.372]                     cond$call), session = sessionInformation(), 
[17:02:22.372]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.372]                   signalCondition(cond)
[17:02:22.372]                 }
[17:02:22.372]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.372]                 "immediateCondition"))) {
[17:02:22.372]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.372]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.372]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.372]                   if (TRUE && !signal) {
[17:02:22.372]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.372]                     {
[17:02:22.372]                       inherits <- base::inherits
[17:02:22.372]                       invokeRestart <- base::invokeRestart
[17:02:22.372]                       is.null <- base::is.null
[17:02:22.372]                       muffled <- FALSE
[17:02:22.372]                       if (inherits(cond, "message")) {
[17:02:22.372]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.372]                         if (muffled) 
[17:02:22.372]                           invokeRestart("muffleMessage")
[17:02:22.372]                       }
[17:02:22.372]                       else if (inherits(cond, "warning")) {
[17:02:22.372]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.372]                         if (muffled) 
[17:02:22.372]                           invokeRestart("muffleWarning")
[17:02:22.372]                       }
[17:02:22.372]                       else if (inherits(cond, "condition")) {
[17:02:22.372]                         if (!is.null(pattern)) {
[17:02:22.372]                           computeRestarts <- base::computeRestarts
[17:02:22.372]                           grepl <- base::grepl
[17:02:22.372]                           restarts <- computeRestarts(cond)
[17:02:22.372]                           for (restart in restarts) {
[17:02:22.372]                             name <- restart$name
[17:02:22.372]                             if (is.null(name)) 
[17:02:22.372]                               next
[17:02:22.372]                             if (!grepl(pattern, name)) 
[17:02:22.372]                               next
[17:02:22.372]                             invokeRestart(restart)
[17:02:22.372]                             muffled <- TRUE
[17:02:22.372]                             break
[17:02:22.372]                           }
[17:02:22.372]                         }
[17:02:22.372]                       }
[17:02:22.372]                       invisible(muffled)
[17:02:22.372]                     }
[17:02:22.372]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.372]                   }
[17:02:22.372]                 }
[17:02:22.372]                 else {
[17:02:22.372]                   if (TRUE) {
[17:02:22.372]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.372]                     {
[17:02:22.372]                       inherits <- base::inherits
[17:02:22.372]                       invokeRestart <- base::invokeRestart
[17:02:22.372]                       is.null <- base::is.null
[17:02:22.372]                       muffled <- FALSE
[17:02:22.372]                       if (inherits(cond, "message")) {
[17:02:22.372]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.372]                         if (muffled) 
[17:02:22.372]                           invokeRestart("muffleMessage")
[17:02:22.372]                       }
[17:02:22.372]                       else if (inherits(cond, "warning")) {
[17:02:22.372]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.372]                         if (muffled) 
[17:02:22.372]                           invokeRestart("muffleWarning")
[17:02:22.372]                       }
[17:02:22.372]                       else if (inherits(cond, "condition")) {
[17:02:22.372]                         if (!is.null(pattern)) {
[17:02:22.372]                           computeRestarts <- base::computeRestarts
[17:02:22.372]                           grepl <- base::grepl
[17:02:22.372]                           restarts <- computeRestarts(cond)
[17:02:22.372]                           for (restart in restarts) {
[17:02:22.372]                             name <- restart$name
[17:02:22.372]                             if (is.null(name)) 
[17:02:22.372]                               next
[17:02:22.372]                             if (!grepl(pattern, name)) 
[17:02:22.372]                               next
[17:02:22.372]                             invokeRestart(restart)
[17:02:22.372]                             muffled <- TRUE
[17:02:22.372]                             break
[17:02:22.372]                           }
[17:02:22.372]                         }
[17:02:22.372]                       }
[17:02:22.372]                       invisible(muffled)
[17:02:22.372]                     }
[17:02:22.372]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.372]                   }
[17:02:22.372]                 }
[17:02:22.372]             }
[17:02:22.372]         }))
[17:02:22.372]     }, error = function(ex) {
[17:02:22.372]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.372]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.372]                 ...future.rng), started = ...future.startTime, 
[17:02:22.372]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.372]             version = "1.8"), class = "FutureResult")
[17:02:22.372]     }, finally = {
[17:02:22.372]         if (!identical(...future.workdir, getwd())) 
[17:02:22.372]             setwd(...future.workdir)
[17:02:22.372]         {
[17:02:22.372]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.372]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.372]             }
[17:02:22.372]             base::options(...future.oldOptions)
[17:02:22.372]             if (.Platform$OS.type == "windows") {
[17:02:22.372]                 old_names <- names(...future.oldEnvVars)
[17:02:22.372]                 envs <- base::Sys.getenv()
[17:02:22.372]                 names <- names(envs)
[17:02:22.372]                 common <- intersect(names, old_names)
[17:02:22.372]                 added <- setdiff(names, old_names)
[17:02:22.372]                 removed <- setdiff(old_names, names)
[17:02:22.372]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.372]                   envs[common]]
[17:02:22.372]                 NAMES <- toupper(changed)
[17:02:22.372]                 args <- list()
[17:02:22.372]                 for (kk in seq_along(NAMES)) {
[17:02:22.372]                   name <- changed[[kk]]
[17:02:22.372]                   NAME <- NAMES[[kk]]
[17:02:22.372]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.372]                     next
[17:02:22.372]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.372]                 }
[17:02:22.372]                 NAMES <- toupper(added)
[17:02:22.372]                 for (kk in seq_along(NAMES)) {
[17:02:22.372]                   name <- added[[kk]]
[17:02:22.372]                   NAME <- NAMES[[kk]]
[17:02:22.372]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.372]                     next
[17:02:22.372]                   args[[name]] <- ""
[17:02:22.372]                 }
[17:02:22.372]                 NAMES <- toupper(removed)
[17:02:22.372]                 for (kk in seq_along(NAMES)) {
[17:02:22.372]                   name <- removed[[kk]]
[17:02:22.372]                   NAME <- NAMES[[kk]]
[17:02:22.372]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.372]                     next
[17:02:22.372]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.372]                 }
[17:02:22.372]                 if (length(args) > 0) 
[17:02:22.372]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.372]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.372]             }
[17:02:22.372]             else {
[17:02:22.372]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.372]             }
[17:02:22.372]             {
[17:02:22.372]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.372]                   0L) {
[17:02:22.372]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.372]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.372]                   base::options(opts)
[17:02:22.372]                 }
[17:02:22.372]                 {
[17:02:22.372]                   {
[17:02:22.372]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:22.372]                     NULL
[17:02:22.372]                   }
[17:02:22.372]                   options(future.plan = NULL)
[17:02:22.372]                   if (is.na(NA_character_)) 
[17:02:22.372]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.372]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.372]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.372]                     .init = FALSE)
[17:02:22.372]                 }
[17:02:22.372]             }
[17:02:22.372]         }
[17:02:22.372]     })
[17:02:22.372]     if (TRUE) {
[17:02:22.372]         base::sink(type = "output", split = FALSE)
[17:02:22.372]         if (TRUE) {
[17:02:22.372]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.372]         }
[17:02:22.372]         else {
[17:02:22.372]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.372]         }
[17:02:22.372]         base::close(...future.stdout)
[17:02:22.372]         ...future.stdout <- NULL
[17:02:22.372]     }
[17:02:22.372]     ...future.result$conditions <- ...future.conditions
[17:02:22.372]     ...future.result$finished <- base::Sys.time()
[17:02:22.372]     ...future.result
[17:02:22.372] }
[17:02:22.376] requestCore(): workers = 2
[17:02:22.381] MulticoreFuture started
[17:02:22.382] - Launch lazy future ... done
[17:02:22.382] run() for ‘MulticoreFuture’ ... done
[17:02:22.383] plan(): Setting new future strategy stack:
[17:02:22.383] result() for MulticoreFuture ...
[17:02:22.383] List of future strategies:
[17:02:22.383] 1. sequential:
[17:02:22.383]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.383]    - tweaked: FALSE
[17:02:22.383]    - call: NULL
[17:02:22.384] plan(): nbrOfWorkers() = 1
[17:02:22.386] plan(): Setting new future strategy stack:
[17:02:22.386] result() for MulticoreFuture ...
[17:02:22.386] result() for MulticoreFuture ... done
[17:02:22.386] result() for MulticoreFuture ... done
[17:02:22.386] List of future strategies:
[17:02:22.386] 1. multicore:
[17:02:22.386]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:22.386]    - tweaked: FALSE
[17:02:22.386]    - call: plan(strategy)
[17:02:22.386] result() for MulticoreFuture ...
[17:02:22.387] result() for MulticoreFuture ... done
u$a = 2
[17:02:22.387] result() for MulticoreFuture ...
[17:02:22.391] plan(): nbrOfWorkers() = 2
[17:02:22.392] result() for MulticoreFuture ...
[17:02:22.392] result() for MulticoreFuture ... done
[17:02:22.392] result() for MulticoreFuture ... done
[17:02:22.392] result() for MulticoreFuture ...
[17:02:22.392] result() for MulticoreFuture ... done
v$a = 4
[17:02:22.392] getGlobalsAndPackages() ...
[17:02:22.393] Searching for globals...
[17:02:22.394] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.394] Searching for globals ... DONE
[17:02:22.394] Resolving globals: FALSE
[17:02:22.395] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.395] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.395] - globals: [1] ‘a’
[17:02:22.395] 
[17:02:22.396] getGlobalsAndPackages() ... DONE
[17:02:22.396] run() for ‘Future’ ...
[17:02:22.396] - state: ‘created’
[17:02:22.396] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:22.401] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:22.401] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:22.401]   - Field: ‘label’
[17:02:22.401]   - Field: ‘local’
[17:02:22.401]   - Field: ‘owner’
[17:02:22.401]   - Field: ‘envir’
[17:02:22.402]   - Field: ‘workers’
[17:02:22.402]   - Field: ‘packages’
[17:02:22.402]   - Field: ‘gc’
[17:02:22.402]   - Field: ‘job’
[17:02:22.402]   - Field: ‘conditions’
[17:02:22.402]   - Field: ‘expr’
[17:02:22.402]   - Field: ‘uuid’
[17:02:22.402]   - Field: ‘seed’
[17:02:22.403]   - Field: ‘version’
[17:02:22.403]   - Field: ‘result’
[17:02:22.403]   - Field: ‘asynchronous’
[17:02:22.403]   - Field: ‘calls’
[17:02:22.403]   - Field: ‘globals’
[17:02:22.403]   - Field: ‘stdout’
[17:02:22.403]   - Field: ‘earlySignal’
[17:02:22.403]   - Field: ‘lazy’
[17:02:22.403]   - Field: ‘state’
[17:02:22.404] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:22.404] - Launch lazy future ...
[17:02:22.404] Packages needed by the future expression (n = 0): <none>
[17:02:22.404] Packages needed by future strategies (n = 0): <none>
[17:02:22.405] {
[17:02:22.405]     {
[17:02:22.405]         {
[17:02:22.405]             ...future.startTime <- base::Sys.time()
[17:02:22.405]             {
[17:02:22.405]                 {
[17:02:22.405]                   {
[17:02:22.405]                     {
[17:02:22.405]                       base::local({
[17:02:22.405]                         has_future <- base::requireNamespace("future", 
[17:02:22.405]                           quietly = TRUE)
[17:02:22.405]                         if (has_future) {
[17:02:22.405]                           ns <- base::getNamespace("future")
[17:02:22.405]                           version <- ns[[".package"]][["version"]]
[17:02:22.405]                           if (is.null(version)) 
[17:02:22.405]                             version <- utils::packageVersion("future")
[17:02:22.405]                         }
[17:02:22.405]                         else {
[17:02:22.405]                           version <- NULL
[17:02:22.405]                         }
[17:02:22.405]                         if (!has_future || version < "1.8.0") {
[17:02:22.405]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.405]                             "", base::R.version$version.string), 
[17:02:22.405]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:22.405]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.405]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.405]                               "release", "version")], collapse = " "), 
[17:02:22.405]                             hostname = base::Sys.info()[["nodename"]])
[17:02:22.405]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.405]                             info)
[17:02:22.405]                           info <- base::paste(info, collapse = "; ")
[17:02:22.405]                           if (!has_future) {
[17:02:22.405]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.405]                               info)
[17:02:22.405]                           }
[17:02:22.405]                           else {
[17:02:22.405]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.405]                               info, version)
[17:02:22.405]                           }
[17:02:22.405]                           base::stop(msg)
[17:02:22.405]                         }
[17:02:22.405]                       })
[17:02:22.405]                     }
[17:02:22.405]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:22.405]                     base::options(mc.cores = 1L)
[17:02:22.405]                   }
[17:02:22.405]                   ...future.strategy.old <- future::plan("list")
[17:02:22.405]                   options(future.plan = NULL)
[17:02:22.405]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.405]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.405]                 }
[17:02:22.405]                 ...future.workdir <- getwd()
[17:02:22.405]             }
[17:02:22.405]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.405]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.405]         }
[17:02:22.405]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.405]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.405]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.405]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.405]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.405]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.405]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.405]             base::names(...future.oldOptions))
[17:02:22.405]     }
[17:02:22.405]     if (FALSE) {
[17:02:22.405]     }
[17:02:22.405]     else {
[17:02:22.405]         if (TRUE) {
[17:02:22.405]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.405]                 open = "w")
[17:02:22.405]         }
[17:02:22.405]         else {
[17:02:22.405]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.405]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.405]         }
[17:02:22.405]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.405]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.405]             base::sink(type = "output", split = FALSE)
[17:02:22.405]             base::close(...future.stdout)
[17:02:22.405]         }, add = TRUE)
[17:02:22.405]     }
[17:02:22.405]     ...future.frame <- base::sys.nframe()
[17:02:22.405]     ...future.conditions <- base::list()
[17:02:22.405]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.405]     if (FALSE) {
[17:02:22.405]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.405]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.405]     }
[17:02:22.405]     ...future.result <- base::tryCatch({
[17:02:22.405]         base::withCallingHandlers({
[17:02:22.405]             ...future.value <- base::withVisible(base::local({
[17:02:22.405]                 withCallingHandlers({
[17:02:22.405]                   {
[17:02:22.405]                     2 * a
[17:02:22.405]                   }
[17:02:22.405]                 }, immediateCondition = function(cond) {
[17:02:22.405]                   save_rds <- function (object, pathname, ...) 
[17:02:22.405]                   {
[17:02:22.405]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:22.405]                     if (file_test("-f", pathname_tmp)) {
[17:02:22.405]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.405]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:22.405]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.405]                         fi_tmp[["mtime"]])
[17:02:22.405]                     }
[17:02:22.405]                     tryCatch({
[17:02:22.405]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:22.405]                     }, error = function(ex) {
[17:02:22.405]                       msg <- conditionMessage(ex)
[17:02:22.405]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.405]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:22.405]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.405]                         fi_tmp[["mtime"]], msg)
[17:02:22.405]                       ex$message <- msg
[17:02:22.405]                       stop(ex)
[17:02:22.405]                     })
[17:02:22.405]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:22.405]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:22.405]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:22.405]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.405]                       fi <- file.info(pathname)
[17:02:22.405]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:22.405]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.405]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:22.405]                         fi[["size"]], fi[["mtime"]])
[17:02:22.405]                       stop(msg)
[17:02:22.405]                     }
[17:02:22.405]                     invisible(pathname)
[17:02:22.405]                   }
[17:02:22.405]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:22.405]                     rootPath = tempdir()) 
[17:02:22.405]                   {
[17:02:22.405]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:22.405]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:22.405]                       tmpdir = path, fileext = ".rds")
[17:02:22.405]                     save_rds(obj, file)
[17:02:22.405]                   }
[17:02:22.405]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8QIev6/.future/immediateConditions")
[17:02:22.405]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.405]                   {
[17:02:22.405]                     inherits <- base::inherits
[17:02:22.405]                     invokeRestart <- base::invokeRestart
[17:02:22.405]                     is.null <- base::is.null
[17:02:22.405]                     muffled <- FALSE
[17:02:22.405]                     if (inherits(cond, "message")) {
[17:02:22.405]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:22.405]                       if (muffled) 
[17:02:22.405]                         invokeRestart("muffleMessage")
[17:02:22.405]                     }
[17:02:22.405]                     else if (inherits(cond, "warning")) {
[17:02:22.405]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:22.405]                       if (muffled) 
[17:02:22.405]                         invokeRestart("muffleWarning")
[17:02:22.405]                     }
[17:02:22.405]                     else if (inherits(cond, "condition")) {
[17:02:22.405]                       if (!is.null(pattern)) {
[17:02:22.405]                         computeRestarts <- base::computeRestarts
[17:02:22.405]                         grepl <- base::grepl
[17:02:22.405]                         restarts <- computeRestarts(cond)
[17:02:22.405]                         for (restart in restarts) {
[17:02:22.405]                           name <- restart$name
[17:02:22.405]                           if (is.null(name)) 
[17:02:22.405]                             next
[17:02:22.405]                           if (!grepl(pattern, name)) 
[17:02:22.405]                             next
[17:02:22.405]                           invokeRestart(restart)
[17:02:22.405]                           muffled <- TRUE
[17:02:22.405]                           break
[17:02:22.405]                         }
[17:02:22.405]                       }
[17:02:22.405]                     }
[17:02:22.405]                     invisible(muffled)
[17:02:22.405]                   }
[17:02:22.405]                   muffleCondition(cond)
[17:02:22.405]                 })
[17:02:22.405]             }))
[17:02:22.405]             future::FutureResult(value = ...future.value$value, 
[17:02:22.405]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.405]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.405]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.405]                     ...future.globalenv.names))
[17:02:22.405]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.405]         }, condition = base::local({
[17:02:22.405]             c <- base::c
[17:02:22.405]             inherits <- base::inherits
[17:02:22.405]             invokeRestart <- base::invokeRestart
[17:02:22.405]             length <- base::length
[17:02:22.405]             list <- base::list
[17:02:22.405]             seq.int <- base::seq.int
[17:02:22.405]             signalCondition <- base::signalCondition
[17:02:22.405]             sys.calls <- base::sys.calls
[17:02:22.405]             `[[` <- base::`[[`
[17:02:22.405]             `+` <- base::`+`
[17:02:22.405]             `<<-` <- base::`<<-`
[17:02:22.405]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.405]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.405]                   3L)]
[17:02:22.405]             }
[17:02:22.405]             function(cond) {
[17:02:22.405]                 is_error <- inherits(cond, "error")
[17:02:22.405]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.405]                   NULL)
[17:02:22.405]                 if (is_error) {
[17:02:22.405]                   sessionInformation <- function() {
[17:02:22.405]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.405]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.405]                       search = base::search(), system = base::Sys.info())
[17:02:22.405]                   }
[17:02:22.405]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.405]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.405]                     cond$call), session = sessionInformation(), 
[17:02:22.405]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.405]                   signalCondition(cond)
[17:02:22.405]                 }
[17:02:22.405]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.405]                 "immediateCondition"))) {
[17:02:22.405]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.405]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.405]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.405]                   if (TRUE && !signal) {
[17:02:22.405]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.405]                     {
[17:02:22.405]                       inherits <- base::inherits
[17:02:22.405]                       invokeRestart <- base::invokeRestart
[17:02:22.405]                       is.null <- base::is.null
[17:02:22.405]                       muffled <- FALSE
[17:02:22.405]                       if (inherits(cond, "message")) {
[17:02:22.405]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.405]                         if (muffled) 
[17:02:22.405]                           invokeRestart("muffleMessage")
[17:02:22.405]                       }
[17:02:22.405]                       else if (inherits(cond, "warning")) {
[17:02:22.405]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.405]                         if (muffled) 
[17:02:22.405]                           invokeRestart("muffleWarning")
[17:02:22.405]                       }
[17:02:22.405]                       else if (inherits(cond, "condition")) {
[17:02:22.405]                         if (!is.null(pattern)) {
[17:02:22.405]                           computeRestarts <- base::computeRestarts
[17:02:22.405]                           grepl <- base::grepl
[17:02:22.405]                           restarts <- computeRestarts(cond)
[17:02:22.405]                           for (restart in restarts) {
[17:02:22.405]                             name <- restart$name
[17:02:22.405]                             if (is.null(name)) 
[17:02:22.405]                               next
[17:02:22.405]                             if (!grepl(pattern, name)) 
[17:02:22.405]                               next
[17:02:22.405]                             invokeRestart(restart)
[17:02:22.405]                             muffled <- TRUE
[17:02:22.405]                             break
[17:02:22.405]                           }
[17:02:22.405]                         }
[17:02:22.405]                       }
[17:02:22.405]                       invisible(muffled)
[17:02:22.405]                     }
[17:02:22.405]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.405]                   }
[17:02:22.405]                 }
[17:02:22.405]                 else {
[17:02:22.405]                   if (TRUE) {
[17:02:22.405]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.405]                     {
[17:02:22.405]                       inherits <- base::inherits
[17:02:22.405]                       invokeRestart <- base::invokeRestart
[17:02:22.405]                       is.null <- base::is.null
[17:02:22.405]                       muffled <- FALSE
[17:02:22.405]                       if (inherits(cond, "message")) {
[17:02:22.405]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.405]                         if (muffled) 
[17:02:22.405]                           invokeRestart("muffleMessage")
[17:02:22.405]                       }
[17:02:22.405]                       else if (inherits(cond, "warning")) {
[17:02:22.405]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.405]                         if (muffled) 
[17:02:22.405]                           invokeRestart("muffleWarning")
[17:02:22.405]                       }
[17:02:22.405]                       else if (inherits(cond, "condition")) {
[17:02:22.405]                         if (!is.null(pattern)) {
[17:02:22.405]                           computeRestarts <- base::computeRestarts
[17:02:22.405]                           grepl <- base::grepl
[17:02:22.405]                           restarts <- computeRestarts(cond)
[17:02:22.405]                           for (restart in restarts) {
[17:02:22.405]                             name <- restart$name
[17:02:22.405]                             if (is.null(name)) 
[17:02:22.405]                               next
[17:02:22.405]                             if (!grepl(pattern, name)) 
[17:02:22.405]                               next
[17:02:22.405]                             invokeRestart(restart)
[17:02:22.405]                             muffled <- TRUE
[17:02:22.405]                             break
[17:02:22.405]                           }
[17:02:22.405]                         }
[17:02:22.405]                       }
[17:02:22.405]                       invisible(muffled)
[17:02:22.405]                     }
[17:02:22.405]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.405]                   }
[17:02:22.405]                 }
[17:02:22.405]             }
[17:02:22.405]         }))
[17:02:22.405]     }, error = function(ex) {
[17:02:22.405]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.405]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.405]                 ...future.rng), started = ...future.startTime, 
[17:02:22.405]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.405]             version = "1.8"), class = "FutureResult")
[17:02:22.405]     }, finally = {
[17:02:22.405]         if (!identical(...future.workdir, getwd())) 
[17:02:22.405]             setwd(...future.workdir)
[17:02:22.405]         {
[17:02:22.405]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.405]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.405]             }
[17:02:22.405]             base::options(...future.oldOptions)
[17:02:22.405]             if (.Platform$OS.type == "windows") {
[17:02:22.405]                 old_names <- names(...future.oldEnvVars)
[17:02:22.405]                 envs <- base::Sys.getenv()
[17:02:22.405]                 names <- names(envs)
[17:02:22.405]                 common <- intersect(names, old_names)
[17:02:22.405]                 added <- setdiff(names, old_names)
[17:02:22.405]                 removed <- setdiff(old_names, names)
[17:02:22.405]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.405]                   envs[common]]
[17:02:22.405]                 NAMES <- toupper(changed)
[17:02:22.405]                 args <- list()
[17:02:22.405]                 for (kk in seq_along(NAMES)) {
[17:02:22.405]                   name <- changed[[kk]]
[17:02:22.405]                   NAME <- NAMES[[kk]]
[17:02:22.405]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.405]                     next
[17:02:22.405]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.405]                 }
[17:02:22.405]                 NAMES <- toupper(added)
[17:02:22.405]                 for (kk in seq_along(NAMES)) {
[17:02:22.405]                   name <- added[[kk]]
[17:02:22.405]                   NAME <- NAMES[[kk]]
[17:02:22.405]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.405]                     next
[17:02:22.405]                   args[[name]] <- ""
[17:02:22.405]                 }
[17:02:22.405]                 NAMES <- toupper(removed)
[17:02:22.405]                 for (kk in seq_along(NAMES)) {
[17:02:22.405]                   name <- removed[[kk]]
[17:02:22.405]                   NAME <- NAMES[[kk]]
[17:02:22.405]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.405]                     next
[17:02:22.405]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.405]                 }
[17:02:22.405]                 if (length(args) > 0) 
[17:02:22.405]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.405]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.405]             }
[17:02:22.405]             else {
[17:02:22.405]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.405]             }
[17:02:22.405]             {
[17:02:22.405]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.405]                   0L) {
[17:02:22.405]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.405]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.405]                   base::options(opts)
[17:02:22.405]                 }
[17:02:22.405]                 {
[17:02:22.405]                   {
[17:02:22.405]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:22.405]                     NULL
[17:02:22.405]                   }
[17:02:22.405]                   options(future.plan = NULL)
[17:02:22.405]                   if (is.na(NA_character_)) 
[17:02:22.405]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.405]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.405]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.405]                     .init = FALSE)
[17:02:22.405]                 }
[17:02:22.405]             }
[17:02:22.405]         }
[17:02:22.405]     })
[17:02:22.405]     if (TRUE) {
[17:02:22.405]         base::sink(type = "output", split = FALSE)
[17:02:22.405]         if (TRUE) {
[17:02:22.405]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.405]         }
[17:02:22.405]         else {
[17:02:22.405]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.405]         }
[17:02:22.405]         base::close(...future.stdout)
[17:02:22.405]         ...future.stdout <- NULL
[17:02:22.405]     }
[17:02:22.405]     ...future.result$conditions <- ...future.conditions
[17:02:22.405]     ...future.result$finished <- base::Sys.time()
[17:02:22.405]     ...future.result
[17:02:22.405] }
[17:02:22.407] assign_globals() ...
[17:02:22.407] List of 1
[17:02:22.407]  $ a: num 1
[17:02:22.407]  - attr(*, "where")=List of 1
[17:02:22.407]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.407]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.407]  - attr(*, "resolved")= logi FALSE
[17:02:22.407]  - attr(*, "total_size")= num 56
[17:02:22.407]  - attr(*, "already-done")= logi TRUE
[17:02:22.413] - copied ‘a’ to environment
[17:02:22.413] assign_globals() ... done
[17:02:22.414] requestCore(): workers = 2
[17:02:22.416] MulticoreFuture started
[17:02:22.416] - Launch lazy future ... done
[17:02:22.416] run() for ‘MulticoreFuture’ ... done
[17:02:22.417] result() for MulticoreFuture ...
[17:02:22.417] plan(): Setting new future strategy stack:
[17:02:22.417] List of future strategies:
[17:02:22.417] 1. sequential:
[17:02:22.417]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.417]    - tweaked: FALSE
[17:02:22.417]    - call: NULL
[17:02:22.418] plan(): nbrOfWorkers() = 1
[17:02:22.421] plan(): Setting new future strategy stack:
[17:02:22.421] List of future strategies:
[17:02:22.421] 1. multicore:
[17:02:22.421]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:22.421]    - tweaked: FALSE
[17:02:22.421]    - call: plan(strategy)
[17:02:22.426] plan(): nbrOfWorkers() = 2
[17:02:22.427] result() for MulticoreFuture ...
[17:02:22.427] result() for MulticoreFuture ... done
[17:02:22.428] result() for MulticoreFuture ... done
[17:02:22.428] result() for MulticoreFuture ...
[17:02:22.428] result() for MulticoreFuture ... done
[17:02:22.428] getGlobalsAndPackages() ...
[17:02:22.428] Searching for globals...
[17:02:22.430] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.430] Searching for globals ... DONE
[17:02:22.430] Resolving globals: FALSE
[17:02:22.431] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.431] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.431] - globals: [1] ‘a’
[17:02:22.431] 
[17:02:22.431] getGlobalsAndPackages() ... DONE
[17:02:22.432] run() for ‘Future’ ...
[17:02:22.432] - state: ‘created’
[17:02:22.432] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:22.436] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:22.436] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:22.436]   - Field: ‘label’
[17:02:22.436]   - Field: ‘local’
[17:02:22.437]   - Field: ‘owner’
[17:02:22.437]   - Field: ‘envir’
[17:02:22.437]   - Field: ‘workers’
[17:02:22.437]   - Field: ‘packages’
[17:02:22.437]   - Field: ‘gc’
[17:02:22.437]   - Field: ‘job’
[17:02:22.437]   - Field: ‘conditions’
[17:02:22.437]   - Field: ‘expr’
[17:02:22.438]   - Field: ‘uuid’
[17:02:22.438]   - Field: ‘seed’
[17:02:22.438]   - Field: ‘version’
[17:02:22.438]   - Field: ‘result’
[17:02:22.438]   - Field: ‘asynchronous’
[17:02:22.438]   - Field: ‘calls’
[17:02:22.438]   - Field: ‘globals’
[17:02:22.438]   - Field: ‘stdout’
[17:02:22.438]   - Field: ‘earlySignal’
[17:02:22.439]   - Field: ‘lazy’
[17:02:22.439]   - Field: ‘state’
[17:02:22.439] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:22.439] - Launch lazy future ...
[17:02:22.439] Packages needed by the future expression (n = 0): <none>
[17:02:22.439] Packages needed by future strategies (n = 0): <none>
[17:02:22.440] {
[17:02:22.440]     {
[17:02:22.440]         {
[17:02:22.440]             ...future.startTime <- base::Sys.time()
[17:02:22.440]             {
[17:02:22.440]                 {
[17:02:22.440]                   {
[17:02:22.440]                     {
[17:02:22.440]                       base::local({
[17:02:22.440]                         has_future <- base::requireNamespace("future", 
[17:02:22.440]                           quietly = TRUE)
[17:02:22.440]                         if (has_future) {
[17:02:22.440]                           ns <- base::getNamespace("future")
[17:02:22.440]                           version <- ns[[".package"]][["version"]]
[17:02:22.440]                           if (is.null(version)) 
[17:02:22.440]                             version <- utils::packageVersion("future")
[17:02:22.440]                         }
[17:02:22.440]                         else {
[17:02:22.440]                           version <- NULL
[17:02:22.440]                         }
[17:02:22.440]                         if (!has_future || version < "1.8.0") {
[17:02:22.440]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.440]                             "", base::R.version$version.string), 
[17:02:22.440]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:22.440]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.440]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.440]                               "release", "version")], collapse = " "), 
[17:02:22.440]                             hostname = base::Sys.info()[["nodename"]])
[17:02:22.440]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.440]                             info)
[17:02:22.440]                           info <- base::paste(info, collapse = "; ")
[17:02:22.440]                           if (!has_future) {
[17:02:22.440]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.440]                               info)
[17:02:22.440]                           }
[17:02:22.440]                           else {
[17:02:22.440]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.440]                               info, version)
[17:02:22.440]                           }
[17:02:22.440]                           base::stop(msg)
[17:02:22.440]                         }
[17:02:22.440]                       })
[17:02:22.440]                     }
[17:02:22.440]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:22.440]                     base::options(mc.cores = 1L)
[17:02:22.440]                   }
[17:02:22.440]                   ...future.strategy.old <- future::plan("list")
[17:02:22.440]                   options(future.plan = NULL)
[17:02:22.440]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.440]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.440]                 }
[17:02:22.440]                 ...future.workdir <- getwd()
[17:02:22.440]             }
[17:02:22.440]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.440]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.440]         }
[17:02:22.440]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.440]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.440]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.440]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.440]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.440]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.440]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.440]             base::names(...future.oldOptions))
[17:02:22.440]     }
[17:02:22.440]     if (FALSE) {
[17:02:22.440]     }
[17:02:22.440]     else {
[17:02:22.440]         if (TRUE) {
[17:02:22.440]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.440]                 open = "w")
[17:02:22.440]         }
[17:02:22.440]         else {
[17:02:22.440]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.440]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.440]         }
[17:02:22.440]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.440]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.440]             base::sink(type = "output", split = FALSE)
[17:02:22.440]             base::close(...future.stdout)
[17:02:22.440]         }, add = TRUE)
[17:02:22.440]     }
[17:02:22.440]     ...future.frame <- base::sys.nframe()
[17:02:22.440]     ...future.conditions <- base::list()
[17:02:22.440]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.440]     if (FALSE) {
[17:02:22.440]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.440]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.440]     }
[17:02:22.440]     ...future.result <- base::tryCatch({
[17:02:22.440]         base::withCallingHandlers({
[17:02:22.440]             ...future.value <- base::withVisible(base::local({
[17:02:22.440]                 withCallingHandlers({
[17:02:22.440]                   {
[17:02:22.440]                     2 * a
[17:02:22.440]                   }
[17:02:22.440]                 }, immediateCondition = function(cond) {
[17:02:22.440]                   save_rds <- function (object, pathname, ...) 
[17:02:22.440]                   {
[17:02:22.440]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:22.440]                     if (file_test("-f", pathname_tmp)) {
[17:02:22.440]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.440]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:22.440]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.440]                         fi_tmp[["mtime"]])
[17:02:22.440]                     }
[17:02:22.440]                     tryCatch({
[17:02:22.440]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:22.440]                     }, error = function(ex) {
[17:02:22.440]                       msg <- conditionMessage(ex)
[17:02:22.440]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.440]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:22.440]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.440]                         fi_tmp[["mtime"]], msg)
[17:02:22.440]                       ex$message <- msg
[17:02:22.440]                       stop(ex)
[17:02:22.440]                     })
[17:02:22.440]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:22.440]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:22.440]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:22.440]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.440]                       fi <- file.info(pathname)
[17:02:22.440]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:22.440]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.440]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:22.440]                         fi[["size"]], fi[["mtime"]])
[17:02:22.440]                       stop(msg)
[17:02:22.440]                     }
[17:02:22.440]                     invisible(pathname)
[17:02:22.440]                   }
[17:02:22.440]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:22.440]                     rootPath = tempdir()) 
[17:02:22.440]                   {
[17:02:22.440]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:22.440]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:22.440]                       tmpdir = path, fileext = ".rds")
[17:02:22.440]                     save_rds(obj, file)
[17:02:22.440]                   }
[17:02:22.440]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8QIev6/.future/immediateConditions")
[17:02:22.440]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.440]                   {
[17:02:22.440]                     inherits <- base::inherits
[17:02:22.440]                     invokeRestart <- base::invokeRestart
[17:02:22.440]                     is.null <- base::is.null
[17:02:22.440]                     muffled <- FALSE
[17:02:22.440]                     if (inherits(cond, "message")) {
[17:02:22.440]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:22.440]                       if (muffled) 
[17:02:22.440]                         invokeRestart("muffleMessage")
[17:02:22.440]                     }
[17:02:22.440]                     else if (inherits(cond, "warning")) {
[17:02:22.440]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:22.440]                       if (muffled) 
[17:02:22.440]                         invokeRestart("muffleWarning")
[17:02:22.440]                     }
[17:02:22.440]                     else if (inherits(cond, "condition")) {
[17:02:22.440]                       if (!is.null(pattern)) {
[17:02:22.440]                         computeRestarts <- base::computeRestarts
[17:02:22.440]                         grepl <- base::grepl
[17:02:22.440]                         restarts <- computeRestarts(cond)
[17:02:22.440]                         for (restart in restarts) {
[17:02:22.440]                           name <- restart$name
[17:02:22.440]                           if (is.null(name)) 
[17:02:22.440]                             next
[17:02:22.440]                           if (!grepl(pattern, name)) 
[17:02:22.440]                             next
[17:02:22.440]                           invokeRestart(restart)
[17:02:22.440]                           muffled <- TRUE
[17:02:22.440]                           break
[17:02:22.440]                         }
[17:02:22.440]                       }
[17:02:22.440]                     }
[17:02:22.440]                     invisible(muffled)
[17:02:22.440]                   }
[17:02:22.440]                   muffleCondition(cond)
[17:02:22.440]                 })
[17:02:22.440]             }))
[17:02:22.440]             future::FutureResult(value = ...future.value$value, 
[17:02:22.440]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.440]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.440]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.440]                     ...future.globalenv.names))
[17:02:22.440]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.440]         }, condition = base::local({
[17:02:22.440]             c <- base::c
[17:02:22.440]             inherits <- base::inherits
[17:02:22.440]             invokeRestart <- base::invokeRestart
[17:02:22.440]             length <- base::length
[17:02:22.440]             list <- base::list
[17:02:22.440]             seq.int <- base::seq.int
[17:02:22.440]             signalCondition <- base::signalCondition
[17:02:22.440]             sys.calls <- base::sys.calls
[17:02:22.440]             `[[` <- base::`[[`
[17:02:22.440]             `+` <- base::`+`
[17:02:22.440]             `<<-` <- base::`<<-`
[17:02:22.440]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.440]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.440]                   3L)]
[17:02:22.440]             }
[17:02:22.440]             function(cond) {
[17:02:22.440]                 is_error <- inherits(cond, "error")
[17:02:22.440]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.440]                   NULL)
[17:02:22.440]                 if (is_error) {
[17:02:22.440]                   sessionInformation <- function() {
[17:02:22.440]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.440]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.440]                       search = base::search(), system = base::Sys.info())
[17:02:22.440]                   }
[17:02:22.440]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.440]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.440]                     cond$call), session = sessionInformation(), 
[17:02:22.440]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.440]                   signalCondition(cond)
[17:02:22.440]                 }
[17:02:22.440]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.440]                 "immediateCondition"))) {
[17:02:22.440]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.440]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.440]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.440]                   if (TRUE && !signal) {
[17:02:22.440]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.440]                     {
[17:02:22.440]                       inherits <- base::inherits
[17:02:22.440]                       invokeRestart <- base::invokeRestart
[17:02:22.440]                       is.null <- base::is.null
[17:02:22.440]                       muffled <- FALSE
[17:02:22.440]                       if (inherits(cond, "message")) {
[17:02:22.440]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.440]                         if (muffled) 
[17:02:22.440]                           invokeRestart("muffleMessage")
[17:02:22.440]                       }
[17:02:22.440]                       else if (inherits(cond, "warning")) {
[17:02:22.440]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.440]                         if (muffled) 
[17:02:22.440]                           invokeRestart("muffleWarning")
[17:02:22.440]                       }
[17:02:22.440]                       else if (inherits(cond, "condition")) {
[17:02:22.440]                         if (!is.null(pattern)) {
[17:02:22.440]                           computeRestarts <- base::computeRestarts
[17:02:22.440]                           grepl <- base::grepl
[17:02:22.440]                           restarts <- computeRestarts(cond)
[17:02:22.440]                           for (restart in restarts) {
[17:02:22.440]                             name <- restart$name
[17:02:22.440]                             if (is.null(name)) 
[17:02:22.440]                               next
[17:02:22.440]                             if (!grepl(pattern, name)) 
[17:02:22.440]                               next
[17:02:22.440]                             invokeRestart(restart)
[17:02:22.440]                             muffled <- TRUE
[17:02:22.440]                             break
[17:02:22.440]                           }
[17:02:22.440]                         }
[17:02:22.440]                       }
[17:02:22.440]                       invisible(muffled)
[17:02:22.440]                     }
[17:02:22.440]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.440]                   }
[17:02:22.440]                 }
[17:02:22.440]                 else {
[17:02:22.440]                   if (TRUE) {
[17:02:22.440]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.440]                     {
[17:02:22.440]                       inherits <- base::inherits
[17:02:22.440]                       invokeRestart <- base::invokeRestart
[17:02:22.440]                       is.null <- base::is.null
[17:02:22.440]                       muffled <- FALSE
[17:02:22.440]                       if (inherits(cond, "message")) {
[17:02:22.440]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.440]                         if (muffled) 
[17:02:22.440]                           invokeRestart("muffleMessage")
[17:02:22.440]                       }
[17:02:22.440]                       else if (inherits(cond, "warning")) {
[17:02:22.440]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.440]                         if (muffled) 
[17:02:22.440]                           invokeRestart("muffleWarning")
[17:02:22.440]                       }
[17:02:22.440]                       else if (inherits(cond, "condition")) {
[17:02:22.440]                         if (!is.null(pattern)) {
[17:02:22.440]                           computeRestarts <- base::computeRestarts
[17:02:22.440]                           grepl <- base::grepl
[17:02:22.440]                           restarts <- computeRestarts(cond)
[17:02:22.440]                           for (restart in restarts) {
[17:02:22.440]                             name <- restart$name
[17:02:22.440]                             if (is.null(name)) 
[17:02:22.440]                               next
[17:02:22.440]                             if (!grepl(pattern, name)) 
[17:02:22.440]                               next
[17:02:22.440]                             invokeRestart(restart)
[17:02:22.440]                             muffled <- TRUE
[17:02:22.440]                             break
[17:02:22.440]                           }
[17:02:22.440]                         }
[17:02:22.440]                       }
[17:02:22.440]                       invisible(muffled)
[17:02:22.440]                     }
[17:02:22.440]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.440]                   }
[17:02:22.440]                 }
[17:02:22.440]             }
[17:02:22.440]         }))
[17:02:22.440]     }, error = function(ex) {
[17:02:22.440]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.440]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.440]                 ...future.rng), started = ...future.startTime, 
[17:02:22.440]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.440]             version = "1.8"), class = "FutureResult")
[17:02:22.440]     }, finally = {
[17:02:22.440]         if (!identical(...future.workdir, getwd())) 
[17:02:22.440]             setwd(...future.workdir)
[17:02:22.440]         {
[17:02:22.440]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.440]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.440]             }
[17:02:22.440]             base::options(...future.oldOptions)
[17:02:22.440]             if (.Platform$OS.type == "windows") {
[17:02:22.440]                 old_names <- names(...future.oldEnvVars)
[17:02:22.440]                 envs <- base::Sys.getenv()
[17:02:22.440]                 names <- names(envs)
[17:02:22.440]                 common <- intersect(names, old_names)
[17:02:22.440]                 added <- setdiff(names, old_names)
[17:02:22.440]                 removed <- setdiff(old_names, names)
[17:02:22.440]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.440]                   envs[common]]
[17:02:22.440]                 NAMES <- toupper(changed)
[17:02:22.440]                 args <- list()
[17:02:22.440]                 for (kk in seq_along(NAMES)) {
[17:02:22.440]                   name <- changed[[kk]]
[17:02:22.440]                   NAME <- NAMES[[kk]]
[17:02:22.440]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.440]                     next
[17:02:22.440]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.440]                 }
[17:02:22.440]                 NAMES <- toupper(added)
[17:02:22.440]                 for (kk in seq_along(NAMES)) {
[17:02:22.440]                   name <- added[[kk]]
[17:02:22.440]                   NAME <- NAMES[[kk]]
[17:02:22.440]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.440]                     next
[17:02:22.440]                   args[[name]] <- ""
[17:02:22.440]                 }
[17:02:22.440]                 NAMES <- toupper(removed)
[17:02:22.440]                 for (kk in seq_along(NAMES)) {
[17:02:22.440]                   name <- removed[[kk]]
[17:02:22.440]                   NAME <- NAMES[[kk]]
[17:02:22.440]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.440]                     next
[17:02:22.440]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.440]                 }
[17:02:22.440]                 if (length(args) > 0) 
[17:02:22.440]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.440]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.440]             }
[17:02:22.440]             else {
[17:02:22.440]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.440]             }
[17:02:22.440]             {
[17:02:22.440]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.440]                   0L) {
[17:02:22.440]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.440]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.440]                   base::options(opts)
[17:02:22.440]                 }
[17:02:22.440]                 {
[17:02:22.440]                   {
[17:02:22.440]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:22.440]                     NULL
[17:02:22.440]                   }
[17:02:22.440]                   options(future.plan = NULL)
[17:02:22.440]                   if (is.na(NA_character_)) 
[17:02:22.440]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.440]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.440]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.440]                     .init = FALSE)
[17:02:22.440]                 }
[17:02:22.440]             }
[17:02:22.440]         }
[17:02:22.440]     })
[17:02:22.440]     if (TRUE) {
[17:02:22.440]         base::sink(type = "output", split = FALSE)
[17:02:22.440]         if (TRUE) {
[17:02:22.440]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.440]         }
[17:02:22.440]         else {
[17:02:22.440]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.440]         }
[17:02:22.440]         base::close(...future.stdout)
[17:02:22.440]         ...future.stdout <- NULL
[17:02:22.440]     }
[17:02:22.440]     ...future.result$conditions <- ...future.conditions
[17:02:22.440]     ...future.result$finished <- base::Sys.time()
[17:02:22.440]     ...future.result
[17:02:22.440] }
[17:02:22.442] assign_globals() ...
[17:02:22.443] List of 1
[17:02:22.443]  $ a: num 1
[17:02:22.443]  - attr(*, "where")=List of 1
[17:02:22.443]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.443]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.443]  - attr(*, "resolved")= logi FALSE
[17:02:22.443]  - attr(*, "total_size")= num 56
[17:02:22.443]  - attr(*, "already-done")= logi TRUE
[17:02:22.446] - copied ‘a’ to environment
[17:02:22.446] assign_globals() ... done
[17:02:22.446] requestCore(): workers = 2
[17:02:22.448] MulticoreFuture started
[17:02:22.448] - Launch lazy future ... done
[17:02:22.448] run() for ‘MulticoreFuture’ ... done
[17:02:22.449] result() for MulticoreFuture ...
[17:02:22.449] plan(): Setting new future strategy stack:
[17:02:22.449] List of future strategies:
[17:02:22.449] 1. sequential:
[17:02:22.449]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.449]    - tweaked: FALSE
[17:02:22.449]    - call: NULL
[17:02:22.450] plan(): nbrOfWorkers() = 1
[17:02:22.452] plan(): Setting new future strategy stack:
[17:02:22.452] List of future strategies:
[17:02:22.452] 1. multicore:
[17:02:22.452]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:22.452]    - tweaked: FALSE
[17:02:22.452]    - call: plan(strategy)
[17:02:22.457] plan(): nbrOfWorkers() = 2
[17:02:22.458] result() for MulticoreFuture ...
[17:02:22.458] result() for MulticoreFuture ... done
[17:02:22.459] result() for MulticoreFuture ... done
[17:02:22.459] result() for MulticoreFuture ...
[17:02:22.459] result() for MulticoreFuture ... done
[17:02:22.459] getGlobalsAndPackages() ...
[17:02:22.459] Searching for globals...
[17:02:22.461] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.461] Searching for globals ... DONE
[17:02:22.461] Resolving globals: FALSE
[17:02:22.461] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.462] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.462] - globals: [1] ‘a’
[17:02:22.462] 
[17:02:22.462] getGlobalsAndPackages() ... DONE
[17:02:22.463] run() for ‘Future’ ...
[17:02:22.463] - state: ‘created’
[17:02:22.463] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:22.467] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:22.467] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:22.467]   - Field: ‘label’
[17:02:22.467]   - Field: ‘local’
[17:02:22.467]   - Field: ‘owner’
[17:02:22.467]   - Field: ‘envir’
[17:02:22.468]   - Field: ‘workers’
[17:02:22.468]   - Field: ‘packages’
[17:02:22.468]   - Field: ‘gc’
[17:02:22.468]   - Field: ‘job’
[17:02:22.468]   - Field: ‘conditions’
[17:02:22.468]   - Field: ‘expr’
[17:02:22.468]   - Field: ‘uuid’
[17:02:22.468]   - Field: ‘seed’
[17:02:22.468]   - Field: ‘version’
[17:02:22.469]   - Field: ‘result’
[17:02:22.469]   - Field: ‘asynchronous’
[17:02:22.469]   - Field: ‘calls’
[17:02:22.469]   - Field: ‘globals’
[17:02:22.469]   - Field: ‘stdout’
[17:02:22.469]   - Field: ‘earlySignal’
[17:02:22.469]   - Field: ‘lazy’
[17:02:22.469]   - Field: ‘state’
[17:02:22.469] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:22.470] - Launch lazy future ...
[17:02:22.470] Packages needed by the future expression (n = 0): <none>
[17:02:22.470] Packages needed by future strategies (n = 0): <none>
[17:02:22.471] {
[17:02:22.471]     {
[17:02:22.471]         {
[17:02:22.471]             ...future.startTime <- base::Sys.time()
[17:02:22.471]             {
[17:02:22.471]                 {
[17:02:22.471]                   {
[17:02:22.471]                     {
[17:02:22.471]                       base::local({
[17:02:22.471]                         has_future <- base::requireNamespace("future", 
[17:02:22.471]                           quietly = TRUE)
[17:02:22.471]                         if (has_future) {
[17:02:22.471]                           ns <- base::getNamespace("future")
[17:02:22.471]                           version <- ns[[".package"]][["version"]]
[17:02:22.471]                           if (is.null(version)) 
[17:02:22.471]                             version <- utils::packageVersion("future")
[17:02:22.471]                         }
[17:02:22.471]                         else {
[17:02:22.471]                           version <- NULL
[17:02:22.471]                         }
[17:02:22.471]                         if (!has_future || version < "1.8.0") {
[17:02:22.471]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.471]                             "", base::R.version$version.string), 
[17:02:22.471]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:22.471]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.471]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.471]                               "release", "version")], collapse = " "), 
[17:02:22.471]                             hostname = base::Sys.info()[["nodename"]])
[17:02:22.471]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.471]                             info)
[17:02:22.471]                           info <- base::paste(info, collapse = "; ")
[17:02:22.471]                           if (!has_future) {
[17:02:22.471]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.471]                               info)
[17:02:22.471]                           }
[17:02:22.471]                           else {
[17:02:22.471]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.471]                               info, version)
[17:02:22.471]                           }
[17:02:22.471]                           base::stop(msg)
[17:02:22.471]                         }
[17:02:22.471]                       })
[17:02:22.471]                     }
[17:02:22.471]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:22.471]                     base::options(mc.cores = 1L)
[17:02:22.471]                   }
[17:02:22.471]                   ...future.strategy.old <- future::plan("list")
[17:02:22.471]                   options(future.plan = NULL)
[17:02:22.471]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.471]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.471]                 }
[17:02:22.471]                 ...future.workdir <- getwd()
[17:02:22.471]             }
[17:02:22.471]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.471]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.471]         }
[17:02:22.471]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.471]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.471]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.471]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.471]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.471]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.471]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.471]             base::names(...future.oldOptions))
[17:02:22.471]     }
[17:02:22.471]     if (FALSE) {
[17:02:22.471]     }
[17:02:22.471]     else {
[17:02:22.471]         if (TRUE) {
[17:02:22.471]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.471]                 open = "w")
[17:02:22.471]         }
[17:02:22.471]         else {
[17:02:22.471]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.471]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.471]         }
[17:02:22.471]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.471]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.471]             base::sink(type = "output", split = FALSE)
[17:02:22.471]             base::close(...future.stdout)
[17:02:22.471]         }, add = TRUE)
[17:02:22.471]     }
[17:02:22.471]     ...future.frame <- base::sys.nframe()
[17:02:22.471]     ...future.conditions <- base::list()
[17:02:22.471]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.471]     if (FALSE) {
[17:02:22.471]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.471]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.471]     }
[17:02:22.471]     ...future.result <- base::tryCatch({
[17:02:22.471]         base::withCallingHandlers({
[17:02:22.471]             ...future.value <- base::withVisible(base::local({
[17:02:22.471]                 withCallingHandlers({
[17:02:22.471]                   {
[17:02:22.471]                     2 * a
[17:02:22.471]                   }
[17:02:22.471]                 }, immediateCondition = function(cond) {
[17:02:22.471]                   save_rds <- function (object, pathname, ...) 
[17:02:22.471]                   {
[17:02:22.471]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:22.471]                     if (file_test("-f", pathname_tmp)) {
[17:02:22.471]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.471]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:22.471]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.471]                         fi_tmp[["mtime"]])
[17:02:22.471]                     }
[17:02:22.471]                     tryCatch({
[17:02:22.471]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:22.471]                     }, error = function(ex) {
[17:02:22.471]                       msg <- conditionMessage(ex)
[17:02:22.471]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.471]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:22.471]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.471]                         fi_tmp[["mtime"]], msg)
[17:02:22.471]                       ex$message <- msg
[17:02:22.471]                       stop(ex)
[17:02:22.471]                     })
[17:02:22.471]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:22.471]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:22.471]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:22.471]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.471]                       fi <- file.info(pathname)
[17:02:22.471]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:22.471]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.471]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:22.471]                         fi[["size"]], fi[["mtime"]])
[17:02:22.471]                       stop(msg)
[17:02:22.471]                     }
[17:02:22.471]                     invisible(pathname)
[17:02:22.471]                   }
[17:02:22.471]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:22.471]                     rootPath = tempdir()) 
[17:02:22.471]                   {
[17:02:22.471]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:22.471]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:22.471]                       tmpdir = path, fileext = ".rds")
[17:02:22.471]                     save_rds(obj, file)
[17:02:22.471]                   }
[17:02:22.471]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8QIev6/.future/immediateConditions")
[17:02:22.471]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.471]                   {
[17:02:22.471]                     inherits <- base::inherits
[17:02:22.471]                     invokeRestart <- base::invokeRestart
[17:02:22.471]                     is.null <- base::is.null
[17:02:22.471]                     muffled <- FALSE
[17:02:22.471]                     if (inherits(cond, "message")) {
[17:02:22.471]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:22.471]                       if (muffled) 
[17:02:22.471]                         invokeRestart("muffleMessage")
[17:02:22.471]                     }
[17:02:22.471]                     else if (inherits(cond, "warning")) {
[17:02:22.471]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:22.471]                       if (muffled) 
[17:02:22.471]                         invokeRestart("muffleWarning")
[17:02:22.471]                     }
[17:02:22.471]                     else if (inherits(cond, "condition")) {
[17:02:22.471]                       if (!is.null(pattern)) {
[17:02:22.471]                         computeRestarts <- base::computeRestarts
[17:02:22.471]                         grepl <- base::grepl
[17:02:22.471]                         restarts <- computeRestarts(cond)
[17:02:22.471]                         for (restart in restarts) {
[17:02:22.471]                           name <- restart$name
[17:02:22.471]                           if (is.null(name)) 
[17:02:22.471]                             next
[17:02:22.471]                           if (!grepl(pattern, name)) 
[17:02:22.471]                             next
[17:02:22.471]                           invokeRestart(restart)
[17:02:22.471]                           muffled <- TRUE
[17:02:22.471]                           break
[17:02:22.471]                         }
[17:02:22.471]                       }
[17:02:22.471]                     }
[17:02:22.471]                     invisible(muffled)
[17:02:22.471]                   }
[17:02:22.471]                   muffleCondition(cond)
[17:02:22.471]                 })
[17:02:22.471]             }))
[17:02:22.471]             future::FutureResult(value = ...future.value$value, 
[17:02:22.471]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.471]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.471]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.471]                     ...future.globalenv.names))
[17:02:22.471]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.471]         }, condition = base::local({
[17:02:22.471]             c <- base::c
[17:02:22.471]             inherits <- base::inherits
[17:02:22.471]             invokeRestart <- base::invokeRestart
[17:02:22.471]             length <- base::length
[17:02:22.471]             list <- base::list
[17:02:22.471]             seq.int <- base::seq.int
[17:02:22.471]             signalCondition <- base::signalCondition
[17:02:22.471]             sys.calls <- base::sys.calls
[17:02:22.471]             `[[` <- base::`[[`
[17:02:22.471]             `+` <- base::`+`
[17:02:22.471]             `<<-` <- base::`<<-`
[17:02:22.471]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.471]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.471]                   3L)]
[17:02:22.471]             }
[17:02:22.471]             function(cond) {
[17:02:22.471]                 is_error <- inherits(cond, "error")
[17:02:22.471]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.471]                   NULL)
[17:02:22.471]                 if (is_error) {
[17:02:22.471]                   sessionInformation <- function() {
[17:02:22.471]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.471]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.471]                       search = base::search(), system = base::Sys.info())
[17:02:22.471]                   }
[17:02:22.471]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.471]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.471]                     cond$call), session = sessionInformation(), 
[17:02:22.471]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.471]                   signalCondition(cond)
[17:02:22.471]                 }
[17:02:22.471]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.471]                 "immediateCondition"))) {
[17:02:22.471]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.471]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.471]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.471]                   if (TRUE && !signal) {
[17:02:22.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.471]                     {
[17:02:22.471]                       inherits <- base::inherits
[17:02:22.471]                       invokeRestart <- base::invokeRestart
[17:02:22.471]                       is.null <- base::is.null
[17:02:22.471]                       muffled <- FALSE
[17:02:22.471]                       if (inherits(cond, "message")) {
[17:02:22.471]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.471]                         if (muffled) 
[17:02:22.471]                           invokeRestart("muffleMessage")
[17:02:22.471]                       }
[17:02:22.471]                       else if (inherits(cond, "warning")) {
[17:02:22.471]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.471]                         if (muffled) 
[17:02:22.471]                           invokeRestart("muffleWarning")
[17:02:22.471]                       }
[17:02:22.471]                       else if (inherits(cond, "condition")) {
[17:02:22.471]                         if (!is.null(pattern)) {
[17:02:22.471]                           computeRestarts <- base::computeRestarts
[17:02:22.471]                           grepl <- base::grepl
[17:02:22.471]                           restarts <- computeRestarts(cond)
[17:02:22.471]                           for (restart in restarts) {
[17:02:22.471]                             name <- restart$name
[17:02:22.471]                             if (is.null(name)) 
[17:02:22.471]                               next
[17:02:22.471]                             if (!grepl(pattern, name)) 
[17:02:22.471]                               next
[17:02:22.471]                             invokeRestart(restart)
[17:02:22.471]                             muffled <- TRUE
[17:02:22.471]                             break
[17:02:22.471]                           }
[17:02:22.471]                         }
[17:02:22.471]                       }
[17:02:22.471]                       invisible(muffled)
[17:02:22.471]                     }
[17:02:22.471]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.471]                   }
[17:02:22.471]                 }
[17:02:22.471]                 else {
[17:02:22.471]                   if (TRUE) {
[17:02:22.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.471]                     {
[17:02:22.471]                       inherits <- base::inherits
[17:02:22.471]                       invokeRestart <- base::invokeRestart
[17:02:22.471]                       is.null <- base::is.null
[17:02:22.471]                       muffled <- FALSE
[17:02:22.471]                       if (inherits(cond, "message")) {
[17:02:22.471]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.471]                         if (muffled) 
[17:02:22.471]                           invokeRestart("muffleMessage")
[17:02:22.471]                       }
[17:02:22.471]                       else if (inherits(cond, "warning")) {
[17:02:22.471]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.471]                         if (muffled) 
[17:02:22.471]                           invokeRestart("muffleWarning")
[17:02:22.471]                       }
[17:02:22.471]                       else if (inherits(cond, "condition")) {
[17:02:22.471]                         if (!is.null(pattern)) {
[17:02:22.471]                           computeRestarts <- base::computeRestarts
[17:02:22.471]                           grepl <- base::grepl
[17:02:22.471]                           restarts <- computeRestarts(cond)
[17:02:22.471]                           for (restart in restarts) {
[17:02:22.471]                             name <- restart$name
[17:02:22.471]                             if (is.null(name)) 
[17:02:22.471]                               next
[17:02:22.471]                             if (!grepl(pattern, name)) 
[17:02:22.471]                               next
[17:02:22.471]                             invokeRestart(restart)
[17:02:22.471]                             muffled <- TRUE
[17:02:22.471]                             break
[17:02:22.471]                           }
[17:02:22.471]                         }
[17:02:22.471]                       }
[17:02:22.471]                       invisible(muffled)
[17:02:22.471]                     }
[17:02:22.471]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.471]                   }
[17:02:22.471]                 }
[17:02:22.471]             }
[17:02:22.471]         }))
[17:02:22.471]     }, error = function(ex) {
[17:02:22.471]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.471]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.471]                 ...future.rng), started = ...future.startTime, 
[17:02:22.471]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.471]             version = "1.8"), class = "FutureResult")
[17:02:22.471]     }, finally = {
[17:02:22.471]         if (!identical(...future.workdir, getwd())) 
[17:02:22.471]             setwd(...future.workdir)
[17:02:22.471]         {
[17:02:22.471]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.471]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.471]             }
[17:02:22.471]             base::options(...future.oldOptions)
[17:02:22.471]             if (.Platform$OS.type == "windows") {
[17:02:22.471]                 old_names <- names(...future.oldEnvVars)
[17:02:22.471]                 envs <- base::Sys.getenv()
[17:02:22.471]                 names <- names(envs)
[17:02:22.471]                 common <- intersect(names, old_names)
[17:02:22.471]                 added <- setdiff(names, old_names)
[17:02:22.471]                 removed <- setdiff(old_names, names)
[17:02:22.471]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.471]                   envs[common]]
[17:02:22.471]                 NAMES <- toupper(changed)
[17:02:22.471]                 args <- list()
[17:02:22.471]                 for (kk in seq_along(NAMES)) {
[17:02:22.471]                   name <- changed[[kk]]
[17:02:22.471]                   NAME <- NAMES[[kk]]
[17:02:22.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.471]                     next
[17:02:22.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.471]                 }
[17:02:22.471]                 NAMES <- toupper(added)
[17:02:22.471]                 for (kk in seq_along(NAMES)) {
[17:02:22.471]                   name <- added[[kk]]
[17:02:22.471]                   NAME <- NAMES[[kk]]
[17:02:22.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.471]                     next
[17:02:22.471]                   args[[name]] <- ""
[17:02:22.471]                 }
[17:02:22.471]                 NAMES <- toupper(removed)
[17:02:22.471]                 for (kk in seq_along(NAMES)) {
[17:02:22.471]                   name <- removed[[kk]]
[17:02:22.471]                   NAME <- NAMES[[kk]]
[17:02:22.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.471]                     next
[17:02:22.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.471]                 }
[17:02:22.471]                 if (length(args) > 0) 
[17:02:22.471]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.471]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.471]             }
[17:02:22.471]             else {
[17:02:22.471]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.471]             }
[17:02:22.471]             {
[17:02:22.471]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.471]                   0L) {
[17:02:22.471]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.471]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.471]                   base::options(opts)
[17:02:22.471]                 }
[17:02:22.471]                 {
[17:02:22.471]                   {
[17:02:22.471]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:22.471]                     NULL
[17:02:22.471]                   }
[17:02:22.471]                   options(future.plan = NULL)
[17:02:22.471]                   if (is.na(NA_character_)) 
[17:02:22.471]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.471]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.471]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.471]                     .init = FALSE)
[17:02:22.471]                 }
[17:02:22.471]             }
[17:02:22.471]         }
[17:02:22.471]     })
[17:02:22.471]     if (TRUE) {
[17:02:22.471]         base::sink(type = "output", split = FALSE)
[17:02:22.471]         if (TRUE) {
[17:02:22.471]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.471]         }
[17:02:22.471]         else {
[17:02:22.471]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.471]         }
[17:02:22.471]         base::close(...future.stdout)
[17:02:22.471]         ...future.stdout <- NULL
[17:02:22.471]     }
[17:02:22.471]     ...future.result$conditions <- ...future.conditions
[17:02:22.471]     ...future.result$finished <- base::Sys.time()
[17:02:22.471]     ...future.result
[17:02:22.471] }
[17:02:22.473] assign_globals() ...
[17:02:22.473] List of 1
[17:02:22.473]  $ a: num 1
[17:02:22.473]  - attr(*, "where")=List of 1
[17:02:22.473]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.473]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.473]  - attr(*, "resolved")= logi FALSE
[17:02:22.473]  - attr(*, "total_size")= num 56
[17:02:22.473]  - attr(*, "already-done")= logi TRUE
[17:02:22.476] - copied ‘a’ to environment
[17:02:22.476] assign_globals() ... done
[17:02:22.476] requestCore(): workers = 2
[17:02:22.478] MulticoreFuture started
[17:02:22.479] - Launch lazy future ... done
[17:02:22.479] run() for ‘MulticoreFuture’ ... done
[17:02:22.479] result() for MulticoreFuture ...
[17:02:22.479] plan(): Setting new future strategy stack:
[17:02:22.480] List of future strategies:
[17:02:22.480] 1. sequential:
[17:02:22.480]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.480]    - tweaked: FALSE
[17:02:22.480]    - call: NULL
[17:02:22.481] plan(): nbrOfWorkers() = 1
[17:02:22.487] plan(): Setting new future strategy stack:
[17:02:22.487] List of future strategies:
[17:02:22.487] 1. multicore:
[17:02:22.487]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:22.487]    - tweaked: FALSE
[17:02:22.487]    - call: plan(strategy)
[17:02:22.492] plan(): nbrOfWorkers() = 2
[17:02:22.493] result() for MulticoreFuture ...
[17:02:22.496] result() for MulticoreFuture ... done
[17:02:22.496] result() for MulticoreFuture ... done
[17:02:22.496] result() for MulticoreFuture ...
[17:02:22.496] result() for MulticoreFuture ... done
[17:02:22.496] getGlobalsAndPackages() ...
[17:02:22.497] Searching for globals...
[17:02:22.498] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.498] Searching for globals ... DONE
[17:02:22.498] Resolving globals: FALSE
[17:02:22.499] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.499] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.499] - globals: [1] ‘a’
[17:02:22.500] 
[17:02:22.500] getGlobalsAndPackages() ... DONE
[17:02:22.500] run() for ‘Future’ ...
[17:02:22.500] - state: ‘created’
[17:02:22.500] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:22.504] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:22.505] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:22.505]   - Field: ‘label’
[17:02:22.505]   - Field: ‘local’
[17:02:22.505]   - Field: ‘owner’
[17:02:22.505]   - Field: ‘envir’
[17:02:22.505]   - Field: ‘workers’
[17:02:22.505]   - Field: ‘packages’
[17:02:22.505]   - Field: ‘gc’
[17:02:22.505]   - Field: ‘job’
[17:02:22.506]   - Field: ‘conditions’
[17:02:22.506]   - Field: ‘expr’
[17:02:22.506]   - Field: ‘uuid’
[17:02:22.506]   - Field: ‘seed’
[17:02:22.506]   - Field: ‘version’
[17:02:22.506]   - Field: ‘result’
[17:02:22.506]   - Field: ‘asynchronous’
[17:02:22.506]   - Field: ‘calls’
[17:02:22.506]   - Field: ‘globals’
[17:02:22.507]   - Field: ‘stdout’
[17:02:22.507]   - Field: ‘earlySignal’
[17:02:22.507]   - Field: ‘lazy’
[17:02:22.507]   - Field: ‘state’
[17:02:22.507] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:22.507] - Launch lazy future ...
[17:02:22.507] Packages needed by the future expression (n = 0): <none>
[17:02:22.508] Packages needed by future strategies (n = 0): <none>
[17:02:22.508] {
[17:02:22.508]     {
[17:02:22.508]         {
[17:02:22.508]             ...future.startTime <- base::Sys.time()
[17:02:22.508]             {
[17:02:22.508]                 {
[17:02:22.508]                   {
[17:02:22.508]                     {
[17:02:22.508]                       base::local({
[17:02:22.508]                         has_future <- base::requireNamespace("future", 
[17:02:22.508]                           quietly = TRUE)
[17:02:22.508]                         if (has_future) {
[17:02:22.508]                           ns <- base::getNamespace("future")
[17:02:22.508]                           version <- ns[[".package"]][["version"]]
[17:02:22.508]                           if (is.null(version)) 
[17:02:22.508]                             version <- utils::packageVersion("future")
[17:02:22.508]                         }
[17:02:22.508]                         else {
[17:02:22.508]                           version <- NULL
[17:02:22.508]                         }
[17:02:22.508]                         if (!has_future || version < "1.8.0") {
[17:02:22.508]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.508]                             "", base::R.version$version.string), 
[17:02:22.508]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:22.508]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.508]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.508]                               "release", "version")], collapse = " "), 
[17:02:22.508]                             hostname = base::Sys.info()[["nodename"]])
[17:02:22.508]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.508]                             info)
[17:02:22.508]                           info <- base::paste(info, collapse = "; ")
[17:02:22.508]                           if (!has_future) {
[17:02:22.508]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.508]                               info)
[17:02:22.508]                           }
[17:02:22.508]                           else {
[17:02:22.508]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.508]                               info, version)
[17:02:22.508]                           }
[17:02:22.508]                           base::stop(msg)
[17:02:22.508]                         }
[17:02:22.508]                       })
[17:02:22.508]                     }
[17:02:22.508]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:22.508]                     base::options(mc.cores = 1L)
[17:02:22.508]                   }
[17:02:22.508]                   ...future.strategy.old <- future::plan("list")
[17:02:22.508]                   options(future.plan = NULL)
[17:02:22.508]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.508]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.508]                 }
[17:02:22.508]                 ...future.workdir <- getwd()
[17:02:22.508]             }
[17:02:22.508]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.508]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.508]         }
[17:02:22.508]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.508]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.508]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.508]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.508]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.508]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.508]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.508]             base::names(...future.oldOptions))
[17:02:22.508]     }
[17:02:22.508]     if (FALSE) {
[17:02:22.508]     }
[17:02:22.508]     else {
[17:02:22.508]         if (TRUE) {
[17:02:22.508]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.508]                 open = "w")
[17:02:22.508]         }
[17:02:22.508]         else {
[17:02:22.508]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.508]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.508]         }
[17:02:22.508]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.508]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.508]             base::sink(type = "output", split = FALSE)
[17:02:22.508]             base::close(...future.stdout)
[17:02:22.508]         }, add = TRUE)
[17:02:22.508]     }
[17:02:22.508]     ...future.frame <- base::sys.nframe()
[17:02:22.508]     ...future.conditions <- base::list()
[17:02:22.508]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.508]     if (FALSE) {
[17:02:22.508]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.508]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.508]     }
[17:02:22.508]     ...future.result <- base::tryCatch({
[17:02:22.508]         base::withCallingHandlers({
[17:02:22.508]             ...future.value <- base::withVisible(base::local({
[17:02:22.508]                 withCallingHandlers({
[17:02:22.508]                   {
[17:02:22.508]                     2 * a
[17:02:22.508]                   }
[17:02:22.508]                 }, immediateCondition = function(cond) {
[17:02:22.508]                   save_rds <- function (object, pathname, ...) 
[17:02:22.508]                   {
[17:02:22.508]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:22.508]                     if (file_test("-f", pathname_tmp)) {
[17:02:22.508]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.508]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:22.508]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.508]                         fi_tmp[["mtime"]])
[17:02:22.508]                     }
[17:02:22.508]                     tryCatch({
[17:02:22.508]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:22.508]                     }, error = function(ex) {
[17:02:22.508]                       msg <- conditionMessage(ex)
[17:02:22.508]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.508]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:22.508]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.508]                         fi_tmp[["mtime"]], msg)
[17:02:22.508]                       ex$message <- msg
[17:02:22.508]                       stop(ex)
[17:02:22.508]                     })
[17:02:22.508]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:22.508]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:22.508]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:22.508]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.508]                       fi <- file.info(pathname)
[17:02:22.508]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:22.508]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.508]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:22.508]                         fi[["size"]], fi[["mtime"]])
[17:02:22.508]                       stop(msg)
[17:02:22.508]                     }
[17:02:22.508]                     invisible(pathname)
[17:02:22.508]                   }
[17:02:22.508]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:22.508]                     rootPath = tempdir()) 
[17:02:22.508]                   {
[17:02:22.508]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:22.508]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:22.508]                       tmpdir = path, fileext = ".rds")
[17:02:22.508]                     save_rds(obj, file)
[17:02:22.508]                   }
[17:02:22.508]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8QIev6/.future/immediateConditions")
[17:02:22.508]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.508]                   {
[17:02:22.508]                     inherits <- base::inherits
[17:02:22.508]                     invokeRestart <- base::invokeRestart
[17:02:22.508]                     is.null <- base::is.null
[17:02:22.508]                     muffled <- FALSE
[17:02:22.508]                     if (inherits(cond, "message")) {
[17:02:22.508]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:22.508]                       if (muffled) 
[17:02:22.508]                         invokeRestart("muffleMessage")
[17:02:22.508]                     }
[17:02:22.508]                     else if (inherits(cond, "warning")) {
[17:02:22.508]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:22.508]                       if (muffled) 
[17:02:22.508]                         invokeRestart("muffleWarning")
[17:02:22.508]                     }
[17:02:22.508]                     else if (inherits(cond, "condition")) {
[17:02:22.508]                       if (!is.null(pattern)) {
[17:02:22.508]                         computeRestarts <- base::computeRestarts
[17:02:22.508]                         grepl <- base::grepl
[17:02:22.508]                         restarts <- computeRestarts(cond)
[17:02:22.508]                         for (restart in restarts) {
[17:02:22.508]                           name <- restart$name
[17:02:22.508]                           if (is.null(name)) 
[17:02:22.508]                             next
[17:02:22.508]                           if (!grepl(pattern, name)) 
[17:02:22.508]                             next
[17:02:22.508]                           invokeRestart(restart)
[17:02:22.508]                           muffled <- TRUE
[17:02:22.508]                           break
[17:02:22.508]                         }
[17:02:22.508]                       }
[17:02:22.508]                     }
[17:02:22.508]                     invisible(muffled)
[17:02:22.508]                   }
[17:02:22.508]                   muffleCondition(cond)
[17:02:22.508]                 })
[17:02:22.508]             }))
[17:02:22.508]             future::FutureResult(value = ...future.value$value, 
[17:02:22.508]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.508]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.508]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.508]                     ...future.globalenv.names))
[17:02:22.508]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.508]         }, condition = base::local({
[17:02:22.508]             c <- base::c
[17:02:22.508]             inherits <- base::inherits
[17:02:22.508]             invokeRestart <- base::invokeRestart
[17:02:22.508]             length <- base::length
[17:02:22.508]             list <- base::list
[17:02:22.508]             seq.int <- base::seq.int
[17:02:22.508]             signalCondition <- base::signalCondition
[17:02:22.508]             sys.calls <- base::sys.calls
[17:02:22.508]             `[[` <- base::`[[`
[17:02:22.508]             `+` <- base::`+`
[17:02:22.508]             `<<-` <- base::`<<-`
[17:02:22.508]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.508]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.508]                   3L)]
[17:02:22.508]             }
[17:02:22.508]             function(cond) {
[17:02:22.508]                 is_error <- inherits(cond, "error")
[17:02:22.508]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.508]                   NULL)
[17:02:22.508]                 if (is_error) {
[17:02:22.508]                   sessionInformation <- function() {
[17:02:22.508]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.508]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.508]                       search = base::search(), system = base::Sys.info())
[17:02:22.508]                   }
[17:02:22.508]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.508]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.508]                     cond$call), session = sessionInformation(), 
[17:02:22.508]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.508]                   signalCondition(cond)
[17:02:22.508]                 }
[17:02:22.508]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.508]                 "immediateCondition"))) {
[17:02:22.508]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.508]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.508]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.508]                   if (TRUE && !signal) {
[17:02:22.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.508]                     {
[17:02:22.508]                       inherits <- base::inherits
[17:02:22.508]                       invokeRestart <- base::invokeRestart
[17:02:22.508]                       is.null <- base::is.null
[17:02:22.508]                       muffled <- FALSE
[17:02:22.508]                       if (inherits(cond, "message")) {
[17:02:22.508]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.508]                         if (muffled) 
[17:02:22.508]                           invokeRestart("muffleMessage")
[17:02:22.508]                       }
[17:02:22.508]                       else if (inherits(cond, "warning")) {
[17:02:22.508]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.508]                         if (muffled) 
[17:02:22.508]                           invokeRestart("muffleWarning")
[17:02:22.508]                       }
[17:02:22.508]                       else if (inherits(cond, "condition")) {
[17:02:22.508]                         if (!is.null(pattern)) {
[17:02:22.508]                           computeRestarts <- base::computeRestarts
[17:02:22.508]                           grepl <- base::grepl
[17:02:22.508]                           restarts <- computeRestarts(cond)
[17:02:22.508]                           for (restart in restarts) {
[17:02:22.508]                             name <- restart$name
[17:02:22.508]                             if (is.null(name)) 
[17:02:22.508]                               next
[17:02:22.508]                             if (!grepl(pattern, name)) 
[17:02:22.508]                               next
[17:02:22.508]                             invokeRestart(restart)
[17:02:22.508]                             muffled <- TRUE
[17:02:22.508]                             break
[17:02:22.508]                           }
[17:02:22.508]                         }
[17:02:22.508]                       }
[17:02:22.508]                       invisible(muffled)
[17:02:22.508]                     }
[17:02:22.508]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.508]                   }
[17:02:22.508]                 }
[17:02:22.508]                 else {
[17:02:22.508]                   if (TRUE) {
[17:02:22.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.508]                     {
[17:02:22.508]                       inherits <- base::inherits
[17:02:22.508]                       invokeRestart <- base::invokeRestart
[17:02:22.508]                       is.null <- base::is.null
[17:02:22.508]                       muffled <- FALSE
[17:02:22.508]                       if (inherits(cond, "message")) {
[17:02:22.508]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.508]                         if (muffled) 
[17:02:22.508]                           invokeRestart("muffleMessage")
[17:02:22.508]                       }
[17:02:22.508]                       else if (inherits(cond, "warning")) {
[17:02:22.508]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.508]                         if (muffled) 
[17:02:22.508]                           invokeRestart("muffleWarning")
[17:02:22.508]                       }
[17:02:22.508]                       else if (inherits(cond, "condition")) {
[17:02:22.508]                         if (!is.null(pattern)) {
[17:02:22.508]                           computeRestarts <- base::computeRestarts
[17:02:22.508]                           grepl <- base::grepl
[17:02:22.508]                           restarts <- computeRestarts(cond)
[17:02:22.508]                           for (restart in restarts) {
[17:02:22.508]                             name <- restart$name
[17:02:22.508]                             if (is.null(name)) 
[17:02:22.508]                               next
[17:02:22.508]                             if (!grepl(pattern, name)) 
[17:02:22.508]                               next
[17:02:22.508]                             invokeRestart(restart)
[17:02:22.508]                             muffled <- TRUE
[17:02:22.508]                             break
[17:02:22.508]                           }
[17:02:22.508]                         }
[17:02:22.508]                       }
[17:02:22.508]                       invisible(muffled)
[17:02:22.508]                     }
[17:02:22.508]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.508]                   }
[17:02:22.508]                 }
[17:02:22.508]             }
[17:02:22.508]         }))
[17:02:22.508]     }, error = function(ex) {
[17:02:22.508]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.508]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.508]                 ...future.rng), started = ...future.startTime, 
[17:02:22.508]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.508]             version = "1.8"), class = "FutureResult")
[17:02:22.508]     }, finally = {
[17:02:22.508]         if (!identical(...future.workdir, getwd())) 
[17:02:22.508]             setwd(...future.workdir)
[17:02:22.508]         {
[17:02:22.508]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.508]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.508]             }
[17:02:22.508]             base::options(...future.oldOptions)
[17:02:22.508]             if (.Platform$OS.type == "windows") {
[17:02:22.508]                 old_names <- names(...future.oldEnvVars)
[17:02:22.508]                 envs <- base::Sys.getenv()
[17:02:22.508]                 names <- names(envs)
[17:02:22.508]                 common <- intersect(names, old_names)
[17:02:22.508]                 added <- setdiff(names, old_names)
[17:02:22.508]                 removed <- setdiff(old_names, names)
[17:02:22.508]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.508]                   envs[common]]
[17:02:22.508]                 NAMES <- toupper(changed)
[17:02:22.508]                 args <- list()
[17:02:22.508]                 for (kk in seq_along(NAMES)) {
[17:02:22.508]                   name <- changed[[kk]]
[17:02:22.508]                   NAME <- NAMES[[kk]]
[17:02:22.508]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.508]                     next
[17:02:22.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.508]                 }
[17:02:22.508]                 NAMES <- toupper(added)
[17:02:22.508]                 for (kk in seq_along(NAMES)) {
[17:02:22.508]                   name <- added[[kk]]
[17:02:22.508]                   NAME <- NAMES[[kk]]
[17:02:22.508]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.508]                     next
[17:02:22.508]                   args[[name]] <- ""
[17:02:22.508]                 }
[17:02:22.508]                 NAMES <- toupper(removed)
[17:02:22.508]                 for (kk in seq_along(NAMES)) {
[17:02:22.508]                   name <- removed[[kk]]
[17:02:22.508]                   NAME <- NAMES[[kk]]
[17:02:22.508]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.508]                     next
[17:02:22.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.508]                 }
[17:02:22.508]                 if (length(args) > 0) 
[17:02:22.508]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.508]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.508]             }
[17:02:22.508]             else {
[17:02:22.508]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.508]             }
[17:02:22.508]             {
[17:02:22.508]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.508]                   0L) {
[17:02:22.508]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.508]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.508]                   base::options(opts)
[17:02:22.508]                 }
[17:02:22.508]                 {
[17:02:22.508]                   {
[17:02:22.508]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:22.508]                     NULL
[17:02:22.508]                   }
[17:02:22.508]                   options(future.plan = NULL)
[17:02:22.508]                   if (is.na(NA_character_)) 
[17:02:22.508]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.508]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.508]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.508]                     .init = FALSE)
[17:02:22.508]                 }
[17:02:22.508]             }
[17:02:22.508]         }
[17:02:22.508]     })
[17:02:22.508]     if (TRUE) {
[17:02:22.508]         base::sink(type = "output", split = FALSE)
[17:02:22.508]         if (TRUE) {
[17:02:22.508]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.508]         }
[17:02:22.508]         else {
[17:02:22.508]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.508]         }
[17:02:22.508]         base::close(...future.stdout)
[17:02:22.508]         ...future.stdout <- NULL
[17:02:22.508]     }
[17:02:22.508]     ...future.result$conditions <- ...future.conditions
[17:02:22.508]     ...future.result$finished <- base::Sys.time()
[17:02:22.508]     ...future.result
[17:02:22.508] }
[17:02:22.510] assign_globals() ...
[17:02:22.510] List of 1
[17:02:22.510]  $ a: num 1
[17:02:22.510]  - attr(*, "where")=List of 1
[17:02:22.510]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.510]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.510]  - attr(*, "resolved")= logi FALSE
[17:02:22.510]  - attr(*, "total_size")= num 56
[17:02:22.510]  - attr(*, "already-done")= logi TRUE
[17:02:22.513] - copied ‘a’ to environment
[17:02:22.514] assign_globals() ... done
[17:02:22.514] requestCore(): workers = 2
[17:02:22.516] MulticoreFuture started
[17:02:22.516] - Launch lazy future ... done
[17:02:22.516] run() for ‘MulticoreFuture’ ... done
[17:02:22.516] result() for MulticoreFuture ...
[17:02:22.517] plan(): Setting new future strategy stack:
[17:02:22.517] List of future strategies:
[17:02:22.517] 1. sequential:
[17:02:22.517]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.517]    - tweaked: FALSE
[17:02:22.517]    - call: NULL
[17:02:22.518] plan(): nbrOfWorkers() = 1
[17:02:22.520] plan(): Setting new future strategy stack:
[17:02:22.520] List of future strategies:
[17:02:22.520] 1. multicore:
[17:02:22.520]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:22.520]    - tweaked: FALSE
[17:02:22.520]    - call: plan(strategy)
[17:02:22.525] plan(): nbrOfWorkers() = 2
[17:02:22.526] result() for MulticoreFuture ...
[17:02:22.526] result() for MulticoreFuture ... done
[17:02:22.527] result() for MulticoreFuture ... done
[17:02:22.527] result() for MulticoreFuture ...
[17:02:22.527] result() for MulticoreFuture ... done
[17:02:22.527] getGlobalsAndPackages() ...
[17:02:22.527] Searching for globals...
[17:02:22.529] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:22.529] Searching for globals ... DONE
[17:02:22.529] Resolving globals: FALSE
[17:02:22.529] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:22.530] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:22.530] - globals: [1] ‘a’
[17:02:22.530] 
[17:02:22.530] getGlobalsAndPackages() ... DONE
[17:02:22.531] run() for ‘Future’ ...
[17:02:22.531] - state: ‘created’
[17:02:22.531] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:22.535] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:22.535] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:22.535]   - Field: ‘label’
[17:02:22.535]   - Field: ‘local’
[17:02:22.535]   - Field: ‘owner’
[17:02:22.536]   - Field: ‘envir’
[17:02:22.536]   - Field: ‘workers’
[17:02:22.536]   - Field: ‘packages’
[17:02:22.536]   - Field: ‘gc’
[17:02:22.536]   - Field: ‘job’
[17:02:22.536]   - Field: ‘conditions’
[17:02:22.536]   - Field: ‘expr’
[17:02:22.536]   - Field: ‘uuid’
[17:02:22.536]   - Field: ‘seed’
[17:02:22.537]   - Field: ‘version’
[17:02:22.537]   - Field: ‘result’
[17:02:22.537]   - Field: ‘asynchronous’
[17:02:22.537]   - Field: ‘calls’
[17:02:22.537]   - Field: ‘globals’
[17:02:22.537]   - Field: ‘stdout’
[17:02:22.537]   - Field: ‘earlySignal’
[17:02:22.537]   - Field: ‘lazy’
[17:02:22.537]   - Field: ‘state’
[17:02:22.538] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:22.538] - Launch lazy future ...
[17:02:22.538] Packages needed by the future expression (n = 0): <none>
[17:02:22.538] Packages needed by future strategies (n = 0): <none>
[17:02:22.539] {
[17:02:22.539]     {
[17:02:22.539]         {
[17:02:22.539]             ...future.startTime <- base::Sys.time()
[17:02:22.539]             {
[17:02:22.539]                 {
[17:02:22.539]                   {
[17:02:22.539]                     {
[17:02:22.539]                       base::local({
[17:02:22.539]                         has_future <- base::requireNamespace("future", 
[17:02:22.539]                           quietly = TRUE)
[17:02:22.539]                         if (has_future) {
[17:02:22.539]                           ns <- base::getNamespace("future")
[17:02:22.539]                           version <- ns[[".package"]][["version"]]
[17:02:22.539]                           if (is.null(version)) 
[17:02:22.539]                             version <- utils::packageVersion("future")
[17:02:22.539]                         }
[17:02:22.539]                         else {
[17:02:22.539]                           version <- NULL
[17:02:22.539]                         }
[17:02:22.539]                         if (!has_future || version < "1.8.0") {
[17:02:22.539]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:22.539]                             "", base::R.version$version.string), 
[17:02:22.539]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:22.539]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:22.539]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:22.539]                               "release", "version")], collapse = " "), 
[17:02:22.539]                             hostname = base::Sys.info()[["nodename"]])
[17:02:22.539]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:22.539]                             info)
[17:02:22.539]                           info <- base::paste(info, collapse = "; ")
[17:02:22.539]                           if (!has_future) {
[17:02:22.539]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:22.539]                               info)
[17:02:22.539]                           }
[17:02:22.539]                           else {
[17:02:22.539]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:22.539]                               info, version)
[17:02:22.539]                           }
[17:02:22.539]                           base::stop(msg)
[17:02:22.539]                         }
[17:02:22.539]                       })
[17:02:22.539]                     }
[17:02:22.539]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:22.539]                     base::options(mc.cores = 1L)
[17:02:22.539]                   }
[17:02:22.539]                   ...future.strategy.old <- future::plan("list")
[17:02:22.539]                   options(future.plan = NULL)
[17:02:22.539]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.539]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:22.539]                 }
[17:02:22.539]                 ...future.workdir <- getwd()
[17:02:22.539]             }
[17:02:22.539]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:22.539]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:22.539]         }
[17:02:22.539]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:22.539]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:22.539]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:22.539]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:22.539]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:22.539]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:22.539]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:22.539]             base::names(...future.oldOptions))
[17:02:22.539]     }
[17:02:22.539]     if (FALSE) {
[17:02:22.539]     }
[17:02:22.539]     else {
[17:02:22.539]         if (TRUE) {
[17:02:22.539]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:22.539]                 open = "w")
[17:02:22.539]         }
[17:02:22.539]         else {
[17:02:22.539]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:22.539]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:22.539]         }
[17:02:22.539]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:22.539]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:22.539]             base::sink(type = "output", split = FALSE)
[17:02:22.539]             base::close(...future.stdout)
[17:02:22.539]         }, add = TRUE)
[17:02:22.539]     }
[17:02:22.539]     ...future.frame <- base::sys.nframe()
[17:02:22.539]     ...future.conditions <- base::list()
[17:02:22.539]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:22.539]     if (FALSE) {
[17:02:22.539]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:22.539]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:22.539]     }
[17:02:22.539]     ...future.result <- base::tryCatch({
[17:02:22.539]         base::withCallingHandlers({
[17:02:22.539]             ...future.value <- base::withVisible(base::local({
[17:02:22.539]                 withCallingHandlers({
[17:02:22.539]                   {
[17:02:22.539]                     2 * a
[17:02:22.539]                   }
[17:02:22.539]                 }, immediateCondition = function(cond) {
[17:02:22.539]                   save_rds <- function (object, pathname, ...) 
[17:02:22.539]                   {
[17:02:22.539]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:22.539]                     if (file_test("-f", pathname_tmp)) {
[17:02:22.539]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.539]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:22.539]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.539]                         fi_tmp[["mtime"]])
[17:02:22.539]                     }
[17:02:22.539]                     tryCatch({
[17:02:22.539]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:22.539]                     }, error = function(ex) {
[17:02:22.539]                       msg <- conditionMessage(ex)
[17:02:22.539]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.539]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:22.539]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.539]                         fi_tmp[["mtime"]], msg)
[17:02:22.539]                       ex$message <- msg
[17:02:22.539]                       stop(ex)
[17:02:22.539]                     })
[17:02:22.539]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:22.539]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:22.539]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:22.539]                       fi_tmp <- file.info(pathname_tmp)
[17:02:22.539]                       fi <- file.info(pathname)
[17:02:22.539]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:22.539]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:22.539]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:22.539]                         fi[["size"]], fi[["mtime"]])
[17:02:22.539]                       stop(msg)
[17:02:22.539]                     }
[17:02:22.539]                     invisible(pathname)
[17:02:22.539]                   }
[17:02:22.539]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:22.539]                     rootPath = tempdir()) 
[17:02:22.539]                   {
[17:02:22.539]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:22.539]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:22.539]                       tmpdir = path, fileext = ".rds")
[17:02:22.539]                     save_rds(obj, file)
[17:02:22.539]                   }
[17:02:22.539]                   saveImmediateCondition(cond, path = "/tmp/Rtmp8QIev6/.future/immediateConditions")
[17:02:22.539]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.539]                   {
[17:02:22.539]                     inherits <- base::inherits
[17:02:22.539]                     invokeRestart <- base::invokeRestart
[17:02:22.539]                     is.null <- base::is.null
[17:02:22.539]                     muffled <- FALSE
[17:02:22.539]                     if (inherits(cond, "message")) {
[17:02:22.539]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:22.539]                       if (muffled) 
[17:02:22.539]                         invokeRestart("muffleMessage")
[17:02:22.539]                     }
[17:02:22.539]                     else if (inherits(cond, "warning")) {
[17:02:22.539]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:22.539]                       if (muffled) 
[17:02:22.539]                         invokeRestart("muffleWarning")
[17:02:22.539]                     }
[17:02:22.539]                     else if (inherits(cond, "condition")) {
[17:02:22.539]                       if (!is.null(pattern)) {
[17:02:22.539]                         computeRestarts <- base::computeRestarts
[17:02:22.539]                         grepl <- base::grepl
[17:02:22.539]                         restarts <- computeRestarts(cond)
[17:02:22.539]                         for (restart in restarts) {
[17:02:22.539]                           name <- restart$name
[17:02:22.539]                           if (is.null(name)) 
[17:02:22.539]                             next
[17:02:22.539]                           if (!grepl(pattern, name)) 
[17:02:22.539]                             next
[17:02:22.539]                           invokeRestart(restart)
[17:02:22.539]                           muffled <- TRUE
[17:02:22.539]                           break
[17:02:22.539]                         }
[17:02:22.539]                       }
[17:02:22.539]                     }
[17:02:22.539]                     invisible(muffled)
[17:02:22.539]                   }
[17:02:22.539]                   muffleCondition(cond)
[17:02:22.539]                 })
[17:02:22.539]             }))
[17:02:22.539]             future::FutureResult(value = ...future.value$value, 
[17:02:22.539]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.539]                   ...future.rng), globalenv = if (FALSE) 
[17:02:22.539]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:22.539]                     ...future.globalenv.names))
[17:02:22.539]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:22.539]         }, condition = base::local({
[17:02:22.539]             c <- base::c
[17:02:22.539]             inherits <- base::inherits
[17:02:22.539]             invokeRestart <- base::invokeRestart
[17:02:22.539]             length <- base::length
[17:02:22.539]             list <- base::list
[17:02:22.539]             seq.int <- base::seq.int
[17:02:22.539]             signalCondition <- base::signalCondition
[17:02:22.539]             sys.calls <- base::sys.calls
[17:02:22.539]             `[[` <- base::`[[`
[17:02:22.539]             `+` <- base::`+`
[17:02:22.539]             `<<-` <- base::`<<-`
[17:02:22.539]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:22.539]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:22.539]                   3L)]
[17:02:22.539]             }
[17:02:22.539]             function(cond) {
[17:02:22.539]                 is_error <- inherits(cond, "error")
[17:02:22.539]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:22.539]                   NULL)
[17:02:22.539]                 if (is_error) {
[17:02:22.539]                   sessionInformation <- function() {
[17:02:22.539]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:22.539]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:22.539]                       search = base::search(), system = base::Sys.info())
[17:02:22.539]                   }
[17:02:22.539]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.539]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:22.539]                     cond$call), session = sessionInformation(), 
[17:02:22.539]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:22.539]                   signalCondition(cond)
[17:02:22.539]                 }
[17:02:22.539]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:22.539]                 "immediateCondition"))) {
[17:02:22.539]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:22.539]                   ...future.conditions[[length(...future.conditions) + 
[17:02:22.539]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:22.539]                   if (TRUE && !signal) {
[17:02:22.539]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.539]                     {
[17:02:22.539]                       inherits <- base::inherits
[17:02:22.539]                       invokeRestart <- base::invokeRestart
[17:02:22.539]                       is.null <- base::is.null
[17:02:22.539]                       muffled <- FALSE
[17:02:22.539]                       if (inherits(cond, "message")) {
[17:02:22.539]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.539]                         if (muffled) 
[17:02:22.539]                           invokeRestart("muffleMessage")
[17:02:22.539]                       }
[17:02:22.539]                       else if (inherits(cond, "warning")) {
[17:02:22.539]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.539]                         if (muffled) 
[17:02:22.539]                           invokeRestart("muffleWarning")
[17:02:22.539]                       }
[17:02:22.539]                       else if (inherits(cond, "condition")) {
[17:02:22.539]                         if (!is.null(pattern)) {
[17:02:22.539]                           computeRestarts <- base::computeRestarts
[17:02:22.539]                           grepl <- base::grepl
[17:02:22.539]                           restarts <- computeRestarts(cond)
[17:02:22.539]                           for (restart in restarts) {
[17:02:22.539]                             name <- restart$name
[17:02:22.539]                             if (is.null(name)) 
[17:02:22.539]                               next
[17:02:22.539]                             if (!grepl(pattern, name)) 
[17:02:22.539]                               next
[17:02:22.539]                             invokeRestart(restart)
[17:02:22.539]                             muffled <- TRUE
[17:02:22.539]                             break
[17:02:22.539]                           }
[17:02:22.539]                         }
[17:02:22.539]                       }
[17:02:22.539]                       invisible(muffled)
[17:02:22.539]                     }
[17:02:22.539]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.539]                   }
[17:02:22.539]                 }
[17:02:22.539]                 else {
[17:02:22.539]                   if (TRUE) {
[17:02:22.539]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:22.539]                     {
[17:02:22.539]                       inherits <- base::inherits
[17:02:22.539]                       invokeRestart <- base::invokeRestart
[17:02:22.539]                       is.null <- base::is.null
[17:02:22.539]                       muffled <- FALSE
[17:02:22.539]                       if (inherits(cond, "message")) {
[17:02:22.539]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:22.539]                         if (muffled) 
[17:02:22.539]                           invokeRestart("muffleMessage")
[17:02:22.539]                       }
[17:02:22.539]                       else if (inherits(cond, "warning")) {
[17:02:22.539]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:22.539]                         if (muffled) 
[17:02:22.539]                           invokeRestart("muffleWarning")
[17:02:22.539]                       }
[17:02:22.539]                       else if (inherits(cond, "condition")) {
[17:02:22.539]                         if (!is.null(pattern)) {
[17:02:22.539]                           computeRestarts <- base::computeRestarts
[17:02:22.539]                           grepl <- base::grepl
[17:02:22.539]                           restarts <- computeRestarts(cond)
[17:02:22.539]                           for (restart in restarts) {
[17:02:22.539]                             name <- restart$name
[17:02:22.539]                             if (is.null(name)) 
[17:02:22.539]                               next
[17:02:22.539]                             if (!grepl(pattern, name)) 
[17:02:22.539]                               next
[17:02:22.539]                             invokeRestart(restart)
[17:02:22.539]                             muffled <- TRUE
[17:02:22.539]                             break
[17:02:22.539]                           }
[17:02:22.539]                         }
[17:02:22.539]                       }
[17:02:22.539]                       invisible(muffled)
[17:02:22.539]                     }
[17:02:22.539]                     muffleCondition(cond, pattern = "^muffle")
[17:02:22.539]                   }
[17:02:22.539]                 }
[17:02:22.539]             }
[17:02:22.539]         }))
[17:02:22.539]     }, error = function(ex) {
[17:02:22.539]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:22.539]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:22.539]                 ...future.rng), started = ...future.startTime, 
[17:02:22.539]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:22.539]             version = "1.8"), class = "FutureResult")
[17:02:22.539]     }, finally = {
[17:02:22.539]         if (!identical(...future.workdir, getwd())) 
[17:02:22.539]             setwd(...future.workdir)
[17:02:22.539]         {
[17:02:22.539]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:22.539]                 ...future.oldOptions$nwarnings <- NULL
[17:02:22.539]             }
[17:02:22.539]             base::options(...future.oldOptions)
[17:02:22.539]             if (.Platform$OS.type == "windows") {
[17:02:22.539]                 old_names <- names(...future.oldEnvVars)
[17:02:22.539]                 envs <- base::Sys.getenv()
[17:02:22.539]                 names <- names(envs)
[17:02:22.539]                 common <- intersect(names, old_names)
[17:02:22.539]                 added <- setdiff(names, old_names)
[17:02:22.539]                 removed <- setdiff(old_names, names)
[17:02:22.539]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:22.539]                   envs[common]]
[17:02:22.539]                 NAMES <- toupper(changed)
[17:02:22.539]                 args <- list()
[17:02:22.539]                 for (kk in seq_along(NAMES)) {
[17:02:22.539]                   name <- changed[[kk]]
[17:02:22.539]                   NAME <- NAMES[[kk]]
[17:02:22.539]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.539]                     next
[17:02:22.539]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.539]                 }
[17:02:22.539]                 NAMES <- toupper(added)
[17:02:22.539]                 for (kk in seq_along(NAMES)) {
[17:02:22.539]                   name <- added[[kk]]
[17:02:22.539]                   NAME <- NAMES[[kk]]
[17:02:22.539]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.539]                     next
[17:02:22.539]                   args[[name]] <- ""
[17:02:22.539]                 }
[17:02:22.539]                 NAMES <- toupper(removed)
[17:02:22.539]                 for (kk in seq_along(NAMES)) {
[17:02:22.539]                   name <- removed[[kk]]
[17:02:22.539]                   NAME <- NAMES[[kk]]
[17:02:22.539]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:22.539]                     next
[17:02:22.539]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:22.539]                 }
[17:02:22.539]                 if (length(args) > 0) 
[17:02:22.539]                   base::do.call(base::Sys.setenv, args = args)
[17:02:22.539]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:22.539]             }
[17:02:22.539]             else {
[17:02:22.539]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:22.539]             }
[17:02:22.539]             {
[17:02:22.539]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:22.539]                   0L) {
[17:02:22.539]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:22.539]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:22.539]                   base::options(opts)
[17:02:22.539]                 }
[17:02:22.539]                 {
[17:02:22.539]                   {
[17:02:22.539]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:22.539]                     NULL
[17:02:22.539]                   }
[17:02:22.539]                   options(future.plan = NULL)
[17:02:22.539]                   if (is.na(NA_character_)) 
[17:02:22.539]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:22.539]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:22.539]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:22.539]                     .init = FALSE)
[17:02:22.539]                 }
[17:02:22.539]             }
[17:02:22.539]         }
[17:02:22.539]     })
[17:02:22.539]     if (TRUE) {
[17:02:22.539]         base::sink(type = "output", split = FALSE)
[17:02:22.539]         if (TRUE) {
[17:02:22.539]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:22.539]         }
[17:02:22.539]         else {
[17:02:22.539]             ...future.result["stdout"] <- base::list(NULL)
[17:02:22.539]         }
[17:02:22.539]         base::close(...future.stdout)
[17:02:22.539]         ...future.stdout <- NULL
[17:02:22.539]     }
[17:02:22.539]     ...future.result$conditions <- ...future.conditions
[17:02:22.539]     ...future.result$finished <- base::Sys.time()
[17:02:22.539]     ...future.result
[17:02:22.539] }
[17:02:22.541] assign_globals() ...
[17:02:22.541] List of 1
[17:02:22.541]  $ a: num 1
[17:02:22.541]  - attr(*, "where")=List of 1
[17:02:22.541]   ..$ a:<environment: R_EmptyEnv> 
[17:02:22.541]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:22.541]  - attr(*, "resolved")= logi FALSE
[17:02:22.541]  - attr(*, "total_size")= num 56
[17:02:22.541]  - attr(*, "already-done")= logi TRUE
[17:02:22.544] - copied ‘a’ to environment
[17:02:22.545] assign_globals() ... done
[17:02:22.545] requestCore(): workers = 2
[17:02:22.547] MulticoreFuture started
[17:02:22.547] - Launch lazy future ... done
[17:02:22.547] run() for ‘MulticoreFuture’ ... done
[17:02:22.547] result() for MulticoreFuture ...
[17:02:22.548] plan(): Setting new future strategy stack:
[17:02:22.548] List of future strategies:
[17:02:22.548] 1. sequential:
[17:02:22.548]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:22.548]    - tweaked: FALSE
[17:02:22.548]    - call: NULL
[17:02:22.549] plan(): nbrOfWorkers() = 1
[17:02:22.551] plan(): Setting new future strategy stack:
[17:02:22.551] List of future strategies:
[17:02:22.551] 1. multicore:
[17:02:22.551]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:22.551]    - tweaked: FALSE
[17:02:22.551]    - call: plan(strategy)
[17:02:22.557] plan(): nbrOfWorkers() = 2
[17:02:22.557] result() for MulticoreFuture ...
[17:02:22.558] result() for MulticoreFuture ... done
[17:02:22.558] result() for MulticoreFuture ... done
[17:02:22.558] result() for MulticoreFuture ...
[17:02:22.558] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[17:02:22.559] plan(): Setting new future strategy stack:
[17:02:22.559] List of future strategies:
[17:02:22.559] 1. multisession:
[17:02:22.559]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:22.559]    - tweaked: FALSE
[17:02:22.559]    - call: plan(strategy)
[17:02:22.559] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:02:22.560] multisession:
[17:02:22.560] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:22.560] - tweaked: FALSE
[17:02:22.560] - call: plan(strategy)
[17:02:22.569] getGlobalsAndPackages() ...
[17:02:22.569] Not searching for globals
[17:02:22.569] - globals: [0] <none>
[17:02:22.569] getGlobalsAndPackages() ... DONE
[17:02:22.570] [local output] makeClusterPSOCK() ...
[17:02:22.613] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:22.614] [local output] Base port: 11745
[17:02:22.614] [local output] Getting setup options for 2 cluster nodes ...
[17:02:22.614] [local output]  - Node 1 of 2 ...
[17:02:22.615] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:22.615] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8QIev6/worker.rank=1.parallelly.parent=41432.a1d8d722b06.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp8QIev6/worker.rank=1.parallelly.parent=41432.a1d8d722b06.pid")'’
[17:02:22.807] - Possible to infer worker's PID: TRUE
[17:02:22.807] [local output] Rscript port: 11745

[17:02:22.807] [local output]  - Node 2 of 2 ...
[17:02:22.808] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:22.808] [local output] Rscript port: 11745

[17:02:22.809] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:22.809] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:22.809] [local output] Setting up PSOCK nodes in parallel
[17:02:22.809] List of 36
[17:02:22.809]  $ worker          : chr "localhost"
[17:02:22.809]   ..- attr(*, "localhost")= logi TRUE
[17:02:22.809]  $ master          : chr "localhost"
[17:02:22.809]  $ port            : int 11745
[17:02:22.809]  $ connectTimeout  : num 120
[17:02:22.809]  $ timeout         : num 2592000
[17:02:22.809]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:22.809]  $ homogeneous     : logi TRUE
[17:02:22.809]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:22.809]  $ rscript_envs    : NULL
[17:02:22.809]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:22.809]  $ rscript_startup : NULL
[17:02:22.809]  $ rscript_sh      : chr "sh"
[17:02:22.809]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:22.809]  $ methods         : logi TRUE
[17:02:22.809]  $ socketOptions   : chr "no-delay"
[17:02:22.809]  $ useXDR          : logi FALSE
[17:02:22.809]  $ outfile         : chr "/dev/null"
[17:02:22.809]  $ renice          : int NA
[17:02:22.809]  $ rshcmd          : NULL
[17:02:22.809]  $ user            : chr(0) 
[17:02:22.809]  $ revtunnel       : logi FALSE
[17:02:22.809]  $ rshlogfile      : NULL
[17:02:22.809]  $ rshopts         : chr(0) 
[17:02:22.809]  $ rank            : int 1
[17:02:22.809]  $ manual          : logi FALSE
[17:02:22.809]  $ dryrun          : logi FALSE
[17:02:22.809]  $ quiet           : logi FALSE
[17:02:22.809]  $ setup_strategy  : chr "parallel"
[17:02:22.809]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:22.809]  $ pidfile         : chr "/tmp/Rtmp8QIev6/worker.rank=1.parallelly.parent=41432.a1d8d722b06.pid"
[17:02:22.809]  $ rshcmd_label    : NULL
[17:02:22.809]  $ rsh_call        : NULL
[17:02:22.809]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:22.809]  $ localMachine    : logi TRUE
[17:02:22.809]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:22.809]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:22.809]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:22.809]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:22.809]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:22.809]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:22.809]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:22.809]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:22.809]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:22.809]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:22.809]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:22.809]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:22.809]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:22.809]  $ arguments       :List of 28
[17:02:22.809]   ..$ worker          : chr "localhost"
[17:02:22.809]   ..$ master          : NULL
[17:02:22.809]   ..$ port            : int 11745
[17:02:22.809]   ..$ connectTimeout  : num 120
[17:02:22.809]   ..$ timeout         : num 2592000
[17:02:22.809]   ..$ rscript         : NULL
[17:02:22.809]   ..$ homogeneous     : NULL
[17:02:22.809]   ..$ rscript_args    : NULL
[17:02:22.809]   ..$ rscript_envs    : NULL
[17:02:22.809]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:22.809]   ..$ rscript_startup : NULL
[17:02:22.809]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:22.809]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:22.809]   ..$ methods         : logi TRUE
[17:02:22.809]   ..$ socketOptions   : chr "no-delay"
[17:02:22.809]   ..$ useXDR          : logi FALSE
[17:02:22.809]   ..$ outfile         : chr "/dev/null"
[17:02:22.809]   ..$ renice          : int NA
[17:02:22.809]   ..$ rshcmd          : NULL
[17:02:22.809]   ..$ user            : NULL
[17:02:22.809]   ..$ revtunnel       : logi NA
[17:02:22.809]   ..$ rshlogfile      : NULL
[17:02:22.809]   ..$ rshopts         : NULL
[17:02:22.809]   ..$ rank            : int 1
[17:02:22.809]   ..$ manual          : logi FALSE
[17:02:22.809]   ..$ dryrun          : logi FALSE
[17:02:22.809]   ..$ quiet           : logi FALSE
[17:02:22.809]   ..$ setup_strategy  : chr "parallel"
[17:02:22.809]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:22.826] [local output] System call to launch all workers:
[17:02:22.826] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp8QIev6/worker.rank=1.parallelly.parent=41432.a1d8d722b06.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11745 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:22.826] [local output] Starting PSOCK main server
[17:02:22.832] [local output] Workers launched
[17:02:22.832] [local output] Waiting for workers to connect back
[17:02:22.832]  - [local output] 0 workers out of 2 ready
[17:02:23.097]  - [local output] 0 workers out of 2 ready
[17:02:23.098]  - [local output] 1 workers out of 2 ready
[17:02:23.104]  - [local output] 1 workers out of 2 ready
[17:02:23.104]  - [local output] 2 workers out of 2 ready
[17:02:23.105] [local output] Launching of workers completed
[17:02:23.105] [local output] Collecting session information from workers
[17:02:23.105] [local output]  - Worker #1 of 2
[17:02:23.106] [local output]  - Worker #2 of 2
[17:02:23.106] [local output] makeClusterPSOCK() ... done
[17:02:23.119] Packages needed by the future expression (n = 0): <none>
[17:02:23.119] Packages needed by future strategies (n = 0): <none>
[17:02:23.120] {
[17:02:23.120]     {
[17:02:23.120]         {
[17:02:23.120]             ...future.startTime <- base::Sys.time()
[17:02:23.120]             {
[17:02:23.120]                 {
[17:02:23.120]                   {
[17:02:23.120]                     {
[17:02:23.120]                       base::local({
[17:02:23.120]                         has_future <- base::requireNamespace("future", 
[17:02:23.120]                           quietly = TRUE)
[17:02:23.120]                         if (has_future) {
[17:02:23.120]                           ns <- base::getNamespace("future")
[17:02:23.120]                           version <- ns[[".package"]][["version"]]
[17:02:23.120]                           if (is.null(version)) 
[17:02:23.120]                             version <- utils::packageVersion("future")
[17:02:23.120]                         }
[17:02:23.120]                         else {
[17:02:23.120]                           version <- NULL
[17:02:23.120]                         }
[17:02:23.120]                         if (!has_future || version < "1.8.0") {
[17:02:23.120]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:23.120]                             "", base::R.version$version.string), 
[17:02:23.120]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:23.120]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:23.120]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:23.120]                               "release", "version")], collapse = " "), 
[17:02:23.120]                             hostname = base::Sys.info()[["nodename"]])
[17:02:23.120]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:23.120]                             info)
[17:02:23.120]                           info <- base::paste(info, collapse = "; ")
[17:02:23.120]                           if (!has_future) {
[17:02:23.120]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:23.120]                               info)
[17:02:23.120]                           }
[17:02:23.120]                           else {
[17:02:23.120]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:23.120]                               info, version)
[17:02:23.120]                           }
[17:02:23.120]                           base::stop(msg)
[17:02:23.120]                         }
[17:02:23.120]                       })
[17:02:23.120]                     }
[17:02:23.120]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:23.120]                     base::options(mc.cores = 1L)
[17:02:23.120]                   }
[17:02:23.120]                   ...future.strategy.old <- future::plan("list")
[17:02:23.120]                   options(future.plan = NULL)
[17:02:23.120]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.120]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:23.120]                 }
[17:02:23.120]                 ...future.workdir <- getwd()
[17:02:23.120]             }
[17:02:23.120]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:23.120]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:23.120]         }
[17:02:23.120]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:23.120]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:23.120]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:23.120]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:23.120]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:23.120]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:23.120]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:23.120]             base::names(...future.oldOptions))
[17:02:23.120]     }
[17:02:23.120]     if (FALSE) {
[17:02:23.120]     }
[17:02:23.120]     else {
[17:02:23.120]         if (TRUE) {
[17:02:23.120]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:23.120]                 open = "w")
[17:02:23.120]         }
[17:02:23.120]         else {
[17:02:23.120]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:23.120]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:23.120]         }
[17:02:23.120]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:23.120]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:23.120]             base::sink(type = "output", split = FALSE)
[17:02:23.120]             base::close(...future.stdout)
[17:02:23.120]         }, add = TRUE)
[17:02:23.120]     }
[17:02:23.120]     ...future.frame <- base::sys.nframe()
[17:02:23.120]     ...future.conditions <- base::list()
[17:02:23.120]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:23.120]     if (FALSE) {
[17:02:23.120]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:23.120]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:23.120]     }
[17:02:23.120]     ...future.result <- base::tryCatch({
[17:02:23.120]         base::withCallingHandlers({
[17:02:23.120]             ...future.value <- base::withVisible(base::local({
[17:02:23.120]                 ...future.makeSendCondition <- base::local({
[17:02:23.120]                   sendCondition <- NULL
[17:02:23.120]                   function(frame = 1L) {
[17:02:23.120]                     if (is.function(sendCondition)) 
[17:02:23.120]                       return(sendCondition)
[17:02:23.120]                     ns <- getNamespace("parallel")
[17:02:23.120]                     if (exists("sendData", mode = "function", 
[17:02:23.120]                       envir = ns)) {
[17:02:23.120]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:23.120]                         envir = ns)
[17:02:23.120]                       envir <- sys.frame(frame)
[17:02:23.120]                       master <- NULL
[17:02:23.120]                       while (!identical(envir, .GlobalEnv) && 
[17:02:23.120]                         !identical(envir, emptyenv())) {
[17:02:23.120]                         if (exists("master", mode = "list", envir = envir, 
[17:02:23.120]                           inherits = FALSE)) {
[17:02:23.120]                           master <- get("master", mode = "list", 
[17:02:23.120]                             envir = envir, inherits = FALSE)
[17:02:23.120]                           if (inherits(master, c("SOCKnode", 
[17:02:23.120]                             "SOCK0node"))) {
[17:02:23.120]                             sendCondition <<- function(cond) {
[17:02:23.120]                               data <- list(type = "VALUE", value = cond, 
[17:02:23.120]                                 success = TRUE)
[17:02:23.120]                               parallel_sendData(master, data)
[17:02:23.120]                             }
[17:02:23.120]                             return(sendCondition)
[17:02:23.120]                           }
[17:02:23.120]                         }
[17:02:23.120]                         frame <- frame + 1L
[17:02:23.120]                         envir <- sys.frame(frame)
[17:02:23.120]                       }
[17:02:23.120]                     }
[17:02:23.120]                     sendCondition <<- function(cond) NULL
[17:02:23.120]                   }
[17:02:23.120]                 })
[17:02:23.120]                 withCallingHandlers({
[17:02:23.120]                   NA
[17:02:23.120]                 }, immediateCondition = function(cond) {
[17:02:23.120]                   sendCondition <- ...future.makeSendCondition()
[17:02:23.120]                   sendCondition(cond)
[17:02:23.120]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.120]                   {
[17:02:23.120]                     inherits <- base::inherits
[17:02:23.120]                     invokeRestart <- base::invokeRestart
[17:02:23.120]                     is.null <- base::is.null
[17:02:23.120]                     muffled <- FALSE
[17:02:23.120]                     if (inherits(cond, "message")) {
[17:02:23.120]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:23.120]                       if (muffled) 
[17:02:23.120]                         invokeRestart("muffleMessage")
[17:02:23.120]                     }
[17:02:23.120]                     else if (inherits(cond, "warning")) {
[17:02:23.120]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:23.120]                       if (muffled) 
[17:02:23.120]                         invokeRestart("muffleWarning")
[17:02:23.120]                     }
[17:02:23.120]                     else if (inherits(cond, "condition")) {
[17:02:23.120]                       if (!is.null(pattern)) {
[17:02:23.120]                         computeRestarts <- base::computeRestarts
[17:02:23.120]                         grepl <- base::grepl
[17:02:23.120]                         restarts <- computeRestarts(cond)
[17:02:23.120]                         for (restart in restarts) {
[17:02:23.120]                           name <- restart$name
[17:02:23.120]                           if (is.null(name)) 
[17:02:23.120]                             next
[17:02:23.120]                           if (!grepl(pattern, name)) 
[17:02:23.120]                             next
[17:02:23.120]                           invokeRestart(restart)
[17:02:23.120]                           muffled <- TRUE
[17:02:23.120]                           break
[17:02:23.120]                         }
[17:02:23.120]                       }
[17:02:23.120]                     }
[17:02:23.120]                     invisible(muffled)
[17:02:23.120]                   }
[17:02:23.120]                   muffleCondition(cond)
[17:02:23.120]                 })
[17:02:23.120]             }))
[17:02:23.120]             future::FutureResult(value = ...future.value$value, 
[17:02:23.120]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.120]                   ...future.rng), globalenv = if (FALSE) 
[17:02:23.120]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:23.120]                     ...future.globalenv.names))
[17:02:23.120]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:23.120]         }, condition = base::local({
[17:02:23.120]             c <- base::c
[17:02:23.120]             inherits <- base::inherits
[17:02:23.120]             invokeRestart <- base::invokeRestart
[17:02:23.120]             length <- base::length
[17:02:23.120]             list <- base::list
[17:02:23.120]             seq.int <- base::seq.int
[17:02:23.120]             signalCondition <- base::signalCondition
[17:02:23.120]             sys.calls <- base::sys.calls
[17:02:23.120]             `[[` <- base::`[[`
[17:02:23.120]             `+` <- base::`+`
[17:02:23.120]             `<<-` <- base::`<<-`
[17:02:23.120]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:23.120]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:23.120]                   3L)]
[17:02:23.120]             }
[17:02:23.120]             function(cond) {
[17:02:23.120]                 is_error <- inherits(cond, "error")
[17:02:23.120]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:23.120]                   NULL)
[17:02:23.120]                 if (is_error) {
[17:02:23.120]                   sessionInformation <- function() {
[17:02:23.120]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:23.120]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:23.120]                       search = base::search(), system = base::Sys.info())
[17:02:23.120]                   }
[17:02:23.120]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.120]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:23.120]                     cond$call), session = sessionInformation(), 
[17:02:23.120]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:23.120]                   signalCondition(cond)
[17:02:23.120]                 }
[17:02:23.120]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:23.120]                 "immediateCondition"))) {
[17:02:23.120]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:23.120]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.120]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:23.120]                   if (TRUE && !signal) {
[17:02:23.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.120]                     {
[17:02:23.120]                       inherits <- base::inherits
[17:02:23.120]                       invokeRestart <- base::invokeRestart
[17:02:23.120]                       is.null <- base::is.null
[17:02:23.120]                       muffled <- FALSE
[17:02:23.120]                       if (inherits(cond, "message")) {
[17:02:23.120]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.120]                         if (muffled) 
[17:02:23.120]                           invokeRestart("muffleMessage")
[17:02:23.120]                       }
[17:02:23.120]                       else if (inherits(cond, "warning")) {
[17:02:23.120]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.120]                         if (muffled) 
[17:02:23.120]                           invokeRestart("muffleWarning")
[17:02:23.120]                       }
[17:02:23.120]                       else if (inherits(cond, "condition")) {
[17:02:23.120]                         if (!is.null(pattern)) {
[17:02:23.120]                           computeRestarts <- base::computeRestarts
[17:02:23.120]                           grepl <- base::grepl
[17:02:23.120]                           restarts <- computeRestarts(cond)
[17:02:23.120]                           for (restart in restarts) {
[17:02:23.120]                             name <- restart$name
[17:02:23.120]                             if (is.null(name)) 
[17:02:23.120]                               next
[17:02:23.120]                             if (!grepl(pattern, name)) 
[17:02:23.120]                               next
[17:02:23.120]                             invokeRestart(restart)
[17:02:23.120]                             muffled <- TRUE
[17:02:23.120]                             break
[17:02:23.120]                           }
[17:02:23.120]                         }
[17:02:23.120]                       }
[17:02:23.120]                       invisible(muffled)
[17:02:23.120]                     }
[17:02:23.120]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.120]                   }
[17:02:23.120]                 }
[17:02:23.120]                 else {
[17:02:23.120]                   if (TRUE) {
[17:02:23.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.120]                     {
[17:02:23.120]                       inherits <- base::inherits
[17:02:23.120]                       invokeRestart <- base::invokeRestart
[17:02:23.120]                       is.null <- base::is.null
[17:02:23.120]                       muffled <- FALSE
[17:02:23.120]                       if (inherits(cond, "message")) {
[17:02:23.120]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.120]                         if (muffled) 
[17:02:23.120]                           invokeRestart("muffleMessage")
[17:02:23.120]                       }
[17:02:23.120]                       else if (inherits(cond, "warning")) {
[17:02:23.120]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.120]                         if (muffled) 
[17:02:23.120]                           invokeRestart("muffleWarning")
[17:02:23.120]                       }
[17:02:23.120]                       else if (inherits(cond, "condition")) {
[17:02:23.120]                         if (!is.null(pattern)) {
[17:02:23.120]                           computeRestarts <- base::computeRestarts
[17:02:23.120]                           grepl <- base::grepl
[17:02:23.120]                           restarts <- computeRestarts(cond)
[17:02:23.120]                           for (restart in restarts) {
[17:02:23.120]                             name <- restart$name
[17:02:23.120]                             if (is.null(name)) 
[17:02:23.120]                               next
[17:02:23.120]                             if (!grepl(pattern, name)) 
[17:02:23.120]                               next
[17:02:23.120]                             invokeRestart(restart)
[17:02:23.120]                             muffled <- TRUE
[17:02:23.120]                             break
[17:02:23.120]                           }
[17:02:23.120]                         }
[17:02:23.120]                       }
[17:02:23.120]                       invisible(muffled)
[17:02:23.120]                     }
[17:02:23.120]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.120]                   }
[17:02:23.120]                 }
[17:02:23.120]             }
[17:02:23.120]         }))
[17:02:23.120]     }, error = function(ex) {
[17:02:23.120]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:23.120]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.120]                 ...future.rng), started = ...future.startTime, 
[17:02:23.120]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:23.120]             version = "1.8"), class = "FutureResult")
[17:02:23.120]     }, finally = {
[17:02:23.120]         if (!identical(...future.workdir, getwd())) 
[17:02:23.120]             setwd(...future.workdir)
[17:02:23.120]         {
[17:02:23.120]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:23.120]                 ...future.oldOptions$nwarnings <- NULL
[17:02:23.120]             }
[17:02:23.120]             base::options(...future.oldOptions)
[17:02:23.120]             if (.Platform$OS.type == "windows") {
[17:02:23.120]                 old_names <- names(...future.oldEnvVars)
[17:02:23.120]                 envs <- base::Sys.getenv()
[17:02:23.120]                 names <- names(envs)
[17:02:23.120]                 common <- intersect(names, old_names)
[17:02:23.120]                 added <- setdiff(names, old_names)
[17:02:23.120]                 removed <- setdiff(old_names, names)
[17:02:23.120]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:23.120]                   envs[common]]
[17:02:23.120]                 NAMES <- toupper(changed)
[17:02:23.120]                 args <- list()
[17:02:23.120]                 for (kk in seq_along(NAMES)) {
[17:02:23.120]                   name <- changed[[kk]]
[17:02:23.120]                   NAME <- NAMES[[kk]]
[17:02:23.120]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.120]                     next
[17:02:23.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.120]                 }
[17:02:23.120]                 NAMES <- toupper(added)
[17:02:23.120]                 for (kk in seq_along(NAMES)) {
[17:02:23.120]                   name <- added[[kk]]
[17:02:23.120]                   NAME <- NAMES[[kk]]
[17:02:23.120]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.120]                     next
[17:02:23.120]                   args[[name]] <- ""
[17:02:23.120]                 }
[17:02:23.120]                 NAMES <- toupper(removed)
[17:02:23.120]                 for (kk in seq_along(NAMES)) {
[17:02:23.120]                   name <- removed[[kk]]
[17:02:23.120]                   NAME <- NAMES[[kk]]
[17:02:23.120]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.120]                     next
[17:02:23.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.120]                 }
[17:02:23.120]                 if (length(args) > 0) 
[17:02:23.120]                   base::do.call(base::Sys.setenv, args = args)
[17:02:23.120]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:23.120]             }
[17:02:23.120]             else {
[17:02:23.120]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:23.120]             }
[17:02:23.120]             {
[17:02:23.120]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:23.120]                   0L) {
[17:02:23.120]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:23.120]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:23.120]                   base::options(opts)
[17:02:23.120]                 }
[17:02:23.120]                 {
[17:02:23.120]                   {
[17:02:23.120]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:23.120]                     NULL
[17:02:23.120]                   }
[17:02:23.120]                   options(future.plan = NULL)
[17:02:23.120]                   if (is.na(NA_character_)) 
[17:02:23.120]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.120]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:23.120]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:23.120]                     .init = FALSE)
[17:02:23.120]                 }
[17:02:23.120]             }
[17:02:23.120]         }
[17:02:23.120]     })
[17:02:23.120]     if (TRUE) {
[17:02:23.120]         base::sink(type = "output", split = FALSE)
[17:02:23.120]         if (TRUE) {
[17:02:23.120]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:23.120]         }
[17:02:23.120]         else {
[17:02:23.120]             ...future.result["stdout"] <- base::list(NULL)
[17:02:23.120]         }
[17:02:23.120]         base::close(...future.stdout)
[17:02:23.120]         ...future.stdout <- NULL
[17:02:23.120]     }
[17:02:23.120]     ...future.result$conditions <- ...future.conditions
[17:02:23.120]     ...future.result$finished <- base::Sys.time()
[17:02:23.120]     ...future.result
[17:02:23.120] }
[17:02:23.172] MultisessionFuture started
[17:02:23.172] result() for ClusterFuture ...
[17:02:23.173] receiveMessageFromWorker() for ClusterFuture ...
[17:02:23.173] - Validating connection of MultisessionFuture
[17:02:23.205] - received message: FutureResult
[17:02:23.206] - Received FutureResult
[17:02:23.206] - Erased future from FutureRegistry
[17:02:23.206] result() for ClusterFuture ...
[17:02:23.206] - result already collected: FutureResult
[17:02:23.206] result() for ClusterFuture ... done
[17:02:23.206] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:23.206] result() for ClusterFuture ... done
[17:02:23.206] result() for ClusterFuture ...
[17:02:23.207] - result already collected: FutureResult
[17:02:23.207] result() for ClusterFuture ... done
[17:02:23.207] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:02:23.211] plan(): nbrOfWorkers() = 2
[17:02:23.211] getGlobalsAndPackages() ...
[17:02:23.211] Searching for globals...
[17:02:23.212] - globals found: [1] ‘{’
[17:02:23.212] Searching for globals ... DONE
[17:02:23.212] Resolving globals: FALSE
[17:02:23.213] 
[17:02:23.213] 
[17:02:23.213] getGlobalsAndPackages() ... DONE
[17:02:23.213] run() for ‘Future’ ...
[17:02:23.213] - state: ‘created’
[17:02:23.213] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:23.228] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:23.228] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:23.228]   - Field: ‘node’
[17:02:23.228]   - Field: ‘label’
[17:02:23.228]   - Field: ‘local’
[17:02:23.228]   - Field: ‘owner’
[17:02:23.229]   - Field: ‘envir’
[17:02:23.229]   - Field: ‘workers’
[17:02:23.229]   - Field: ‘packages’
[17:02:23.229]   - Field: ‘gc’
[17:02:23.229]   - Field: ‘conditions’
[17:02:23.229]   - Field: ‘persistent’
[17:02:23.229]   - Field: ‘expr’
[17:02:23.229]   - Field: ‘uuid’
[17:02:23.229]   - Field: ‘seed’
[17:02:23.229]   - Field: ‘version’
[17:02:23.230]   - Field: ‘result’
[17:02:23.230]   - Field: ‘asynchronous’
[17:02:23.230]   - Field: ‘calls’
[17:02:23.230]   - Field: ‘globals’
[17:02:23.230]   - Field: ‘stdout’
[17:02:23.230]   - Field: ‘earlySignal’
[17:02:23.230]   - Field: ‘lazy’
[17:02:23.230]   - Field: ‘state’
[17:02:23.231] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:23.231] - Launch lazy future ...
[17:02:23.231] Packages needed by the future expression (n = 0): <none>
[17:02:23.231] Packages needed by future strategies (n = 0): <none>
[17:02:23.232] {
[17:02:23.232]     {
[17:02:23.232]         {
[17:02:23.232]             ...future.startTime <- base::Sys.time()
[17:02:23.232]             {
[17:02:23.232]                 {
[17:02:23.232]                   {
[17:02:23.232]                     {
[17:02:23.232]                       base::local({
[17:02:23.232]                         has_future <- base::requireNamespace("future", 
[17:02:23.232]                           quietly = TRUE)
[17:02:23.232]                         if (has_future) {
[17:02:23.232]                           ns <- base::getNamespace("future")
[17:02:23.232]                           version <- ns[[".package"]][["version"]]
[17:02:23.232]                           if (is.null(version)) 
[17:02:23.232]                             version <- utils::packageVersion("future")
[17:02:23.232]                         }
[17:02:23.232]                         else {
[17:02:23.232]                           version <- NULL
[17:02:23.232]                         }
[17:02:23.232]                         if (!has_future || version < "1.8.0") {
[17:02:23.232]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:23.232]                             "", base::R.version$version.string), 
[17:02:23.232]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:23.232]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:23.232]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:23.232]                               "release", "version")], collapse = " "), 
[17:02:23.232]                             hostname = base::Sys.info()[["nodename"]])
[17:02:23.232]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:23.232]                             info)
[17:02:23.232]                           info <- base::paste(info, collapse = "; ")
[17:02:23.232]                           if (!has_future) {
[17:02:23.232]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:23.232]                               info)
[17:02:23.232]                           }
[17:02:23.232]                           else {
[17:02:23.232]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:23.232]                               info, version)
[17:02:23.232]                           }
[17:02:23.232]                           base::stop(msg)
[17:02:23.232]                         }
[17:02:23.232]                       })
[17:02:23.232]                     }
[17:02:23.232]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:23.232]                     base::options(mc.cores = 1L)
[17:02:23.232]                   }
[17:02:23.232]                   ...future.strategy.old <- future::plan("list")
[17:02:23.232]                   options(future.plan = NULL)
[17:02:23.232]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.232]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:23.232]                 }
[17:02:23.232]                 ...future.workdir <- getwd()
[17:02:23.232]             }
[17:02:23.232]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:23.232]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:23.232]         }
[17:02:23.232]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:23.232]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:23.232]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:23.232]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:23.232]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:23.232]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:23.232]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:23.232]             base::names(...future.oldOptions))
[17:02:23.232]     }
[17:02:23.232]     if (FALSE) {
[17:02:23.232]     }
[17:02:23.232]     else {
[17:02:23.232]         if (TRUE) {
[17:02:23.232]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:23.232]                 open = "w")
[17:02:23.232]         }
[17:02:23.232]         else {
[17:02:23.232]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:23.232]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:23.232]         }
[17:02:23.232]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:23.232]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:23.232]             base::sink(type = "output", split = FALSE)
[17:02:23.232]             base::close(...future.stdout)
[17:02:23.232]         }, add = TRUE)
[17:02:23.232]     }
[17:02:23.232]     ...future.frame <- base::sys.nframe()
[17:02:23.232]     ...future.conditions <- base::list()
[17:02:23.232]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:23.232]     if (FALSE) {
[17:02:23.232]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:23.232]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:23.232]     }
[17:02:23.232]     ...future.result <- base::tryCatch({
[17:02:23.232]         base::withCallingHandlers({
[17:02:23.232]             ...future.value <- base::withVisible(base::local({
[17:02:23.232]                 ...future.makeSendCondition <- base::local({
[17:02:23.232]                   sendCondition <- NULL
[17:02:23.232]                   function(frame = 1L) {
[17:02:23.232]                     if (is.function(sendCondition)) 
[17:02:23.232]                       return(sendCondition)
[17:02:23.232]                     ns <- getNamespace("parallel")
[17:02:23.232]                     if (exists("sendData", mode = "function", 
[17:02:23.232]                       envir = ns)) {
[17:02:23.232]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:23.232]                         envir = ns)
[17:02:23.232]                       envir <- sys.frame(frame)
[17:02:23.232]                       master <- NULL
[17:02:23.232]                       while (!identical(envir, .GlobalEnv) && 
[17:02:23.232]                         !identical(envir, emptyenv())) {
[17:02:23.232]                         if (exists("master", mode = "list", envir = envir, 
[17:02:23.232]                           inherits = FALSE)) {
[17:02:23.232]                           master <- get("master", mode = "list", 
[17:02:23.232]                             envir = envir, inherits = FALSE)
[17:02:23.232]                           if (inherits(master, c("SOCKnode", 
[17:02:23.232]                             "SOCK0node"))) {
[17:02:23.232]                             sendCondition <<- function(cond) {
[17:02:23.232]                               data <- list(type = "VALUE", value = cond, 
[17:02:23.232]                                 success = TRUE)
[17:02:23.232]                               parallel_sendData(master, data)
[17:02:23.232]                             }
[17:02:23.232]                             return(sendCondition)
[17:02:23.232]                           }
[17:02:23.232]                         }
[17:02:23.232]                         frame <- frame + 1L
[17:02:23.232]                         envir <- sys.frame(frame)
[17:02:23.232]                       }
[17:02:23.232]                     }
[17:02:23.232]                     sendCondition <<- function(cond) NULL
[17:02:23.232]                   }
[17:02:23.232]                 })
[17:02:23.232]                 withCallingHandlers({
[17:02:23.232]                   {
[17:02:23.232]                     2
[17:02:23.232]                   }
[17:02:23.232]                 }, immediateCondition = function(cond) {
[17:02:23.232]                   sendCondition <- ...future.makeSendCondition()
[17:02:23.232]                   sendCondition(cond)
[17:02:23.232]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.232]                   {
[17:02:23.232]                     inherits <- base::inherits
[17:02:23.232]                     invokeRestart <- base::invokeRestart
[17:02:23.232]                     is.null <- base::is.null
[17:02:23.232]                     muffled <- FALSE
[17:02:23.232]                     if (inherits(cond, "message")) {
[17:02:23.232]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:23.232]                       if (muffled) 
[17:02:23.232]                         invokeRestart("muffleMessage")
[17:02:23.232]                     }
[17:02:23.232]                     else if (inherits(cond, "warning")) {
[17:02:23.232]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:23.232]                       if (muffled) 
[17:02:23.232]                         invokeRestart("muffleWarning")
[17:02:23.232]                     }
[17:02:23.232]                     else if (inherits(cond, "condition")) {
[17:02:23.232]                       if (!is.null(pattern)) {
[17:02:23.232]                         computeRestarts <- base::computeRestarts
[17:02:23.232]                         grepl <- base::grepl
[17:02:23.232]                         restarts <- computeRestarts(cond)
[17:02:23.232]                         for (restart in restarts) {
[17:02:23.232]                           name <- restart$name
[17:02:23.232]                           if (is.null(name)) 
[17:02:23.232]                             next
[17:02:23.232]                           if (!grepl(pattern, name)) 
[17:02:23.232]                             next
[17:02:23.232]                           invokeRestart(restart)
[17:02:23.232]                           muffled <- TRUE
[17:02:23.232]                           break
[17:02:23.232]                         }
[17:02:23.232]                       }
[17:02:23.232]                     }
[17:02:23.232]                     invisible(muffled)
[17:02:23.232]                   }
[17:02:23.232]                   muffleCondition(cond)
[17:02:23.232]                 })
[17:02:23.232]             }))
[17:02:23.232]             future::FutureResult(value = ...future.value$value, 
[17:02:23.232]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.232]                   ...future.rng), globalenv = if (FALSE) 
[17:02:23.232]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:23.232]                     ...future.globalenv.names))
[17:02:23.232]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:23.232]         }, condition = base::local({
[17:02:23.232]             c <- base::c
[17:02:23.232]             inherits <- base::inherits
[17:02:23.232]             invokeRestart <- base::invokeRestart
[17:02:23.232]             length <- base::length
[17:02:23.232]             list <- base::list
[17:02:23.232]             seq.int <- base::seq.int
[17:02:23.232]             signalCondition <- base::signalCondition
[17:02:23.232]             sys.calls <- base::sys.calls
[17:02:23.232]             `[[` <- base::`[[`
[17:02:23.232]             `+` <- base::`+`
[17:02:23.232]             `<<-` <- base::`<<-`
[17:02:23.232]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:23.232]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:23.232]                   3L)]
[17:02:23.232]             }
[17:02:23.232]             function(cond) {
[17:02:23.232]                 is_error <- inherits(cond, "error")
[17:02:23.232]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:23.232]                   NULL)
[17:02:23.232]                 if (is_error) {
[17:02:23.232]                   sessionInformation <- function() {
[17:02:23.232]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:23.232]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:23.232]                       search = base::search(), system = base::Sys.info())
[17:02:23.232]                   }
[17:02:23.232]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.232]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:23.232]                     cond$call), session = sessionInformation(), 
[17:02:23.232]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:23.232]                   signalCondition(cond)
[17:02:23.232]                 }
[17:02:23.232]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:23.232]                 "immediateCondition"))) {
[17:02:23.232]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:23.232]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.232]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:23.232]                   if (TRUE && !signal) {
[17:02:23.232]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.232]                     {
[17:02:23.232]                       inherits <- base::inherits
[17:02:23.232]                       invokeRestart <- base::invokeRestart
[17:02:23.232]                       is.null <- base::is.null
[17:02:23.232]                       muffled <- FALSE
[17:02:23.232]                       if (inherits(cond, "message")) {
[17:02:23.232]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.232]                         if (muffled) 
[17:02:23.232]                           invokeRestart("muffleMessage")
[17:02:23.232]                       }
[17:02:23.232]                       else if (inherits(cond, "warning")) {
[17:02:23.232]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.232]                         if (muffled) 
[17:02:23.232]                           invokeRestart("muffleWarning")
[17:02:23.232]                       }
[17:02:23.232]                       else if (inherits(cond, "condition")) {
[17:02:23.232]                         if (!is.null(pattern)) {
[17:02:23.232]                           computeRestarts <- base::computeRestarts
[17:02:23.232]                           grepl <- base::grepl
[17:02:23.232]                           restarts <- computeRestarts(cond)
[17:02:23.232]                           for (restart in restarts) {
[17:02:23.232]                             name <- restart$name
[17:02:23.232]                             if (is.null(name)) 
[17:02:23.232]                               next
[17:02:23.232]                             if (!grepl(pattern, name)) 
[17:02:23.232]                               next
[17:02:23.232]                             invokeRestart(restart)
[17:02:23.232]                             muffled <- TRUE
[17:02:23.232]                             break
[17:02:23.232]                           }
[17:02:23.232]                         }
[17:02:23.232]                       }
[17:02:23.232]                       invisible(muffled)
[17:02:23.232]                     }
[17:02:23.232]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.232]                   }
[17:02:23.232]                 }
[17:02:23.232]                 else {
[17:02:23.232]                   if (TRUE) {
[17:02:23.232]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.232]                     {
[17:02:23.232]                       inherits <- base::inherits
[17:02:23.232]                       invokeRestart <- base::invokeRestart
[17:02:23.232]                       is.null <- base::is.null
[17:02:23.232]                       muffled <- FALSE
[17:02:23.232]                       if (inherits(cond, "message")) {
[17:02:23.232]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.232]                         if (muffled) 
[17:02:23.232]                           invokeRestart("muffleMessage")
[17:02:23.232]                       }
[17:02:23.232]                       else if (inherits(cond, "warning")) {
[17:02:23.232]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.232]                         if (muffled) 
[17:02:23.232]                           invokeRestart("muffleWarning")
[17:02:23.232]                       }
[17:02:23.232]                       else if (inherits(cond, "condition")) {
[17:02:23.232]                         if (!is.null(pattern)) {
[17:02:23.232]                           computeRestarts <- base::computeRestarts
[17:02:23.232]                           grepl <- base::grepl
[17:02:23.232]                           restarts <- computeRestarts(cond)
[17:02:23.232]                           for (restart in restarts) {
[17:02:23.232]                             name <- restart$name
[17:02:23.232]                             if (is.null(name)) 
[17:02:23.232]                               next
[17:02:23.232]                             if (!grepl(pattern, name)) 
[17:02:23.232]                               next
[17:02:23.232]                             invokeRestart(restart)
[17:02:23.232]                             muffled <- TRUE
[17:02:23.232]                             break
[17:02:23.232]                           }
[17:02:23.232]                         }
[17:02:23.232]                       }
[17:02:23.232]                       invisible(muffled)
[17:02:23.232]                     }
[17:02:23.232]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.232]                   }
[17:02:23.232]                 }
[17:02:23.232]             }
[17:02:23.232]         }))
[17:02:23.232]     }, error = function(ex) {
[17:02:23.232]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:23.232]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.232]                 ...future.rng), started = ...future.startTime, 
[17:02:23.232]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:23.232]             version = "1.8"), class = "FutureResult")
[17:02:23.232]     }, finally = {
[17:02:23.232]         if (!identical(...future.workdir, getwd())) 
[17:02:23.232]             setwd(...future.workdir)
[17:02:23.232]         {
[17:02:23.232]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:23.232]                 ...future.oldOptions$nwarnings <- NULL
[17:02:23.232]             }
[17:02:23.232]             base::options(...future.oldOptions)
[17:02:23.232]             if (.Platform$OS.type == "windows") {
[17:02:23.232]                 old_names <- names(...future.oldEnvVars)
[17:02:23.232]                 envs <- base::Sys.getenv()
[17:02:23.232]                 names <- names(envs)
[17:02:23.232]                 common <- intersect(names, old_names)
[17:02:23.232]                 added <- setdiff(names, old_names)
[17:02:23.232]                 removed <- setdiff(old_names, names)
[17:02:23.232]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:23.232]                   envs[common]]
[17:02:23.232]                 NAMES <- toupper(changed)
[17:02:23.232]                 args <- list()
[17:02:23.232]                 for (kk in seq_along(NAMES)) {
[17:02:23.232]                   name <- changed[[kk]]
[17:02:23.232]                   NAME <- NAMES[[kk]]
[17:02:23.232]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.232]                     next
[17:02:23.232]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.232]                 }
[17:02:23.232]                 NAMES <- toupper(added)
[17:02:23.232]                 for (kk in seq_along(NAMES)) {
[17:02:23.232]                   name <- added[[kk]]
[17:02:23.232]                   NAME <- NAMES[[kk]]
[17:02:23.232]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.232]                     next
[17:02:23.232]                   args[[name]] <- ""
[17:02:23.232]                 }
[17:02:23.232]                 NAMES <- toupper(removed)
[17:02:23.232]                 for (kk in seq_along(NAMES)) {
[17:02:23.232]                   name <- removed[[kk]]
[17:02:23.232]                   NAME <- NAMES[[kk]]
[17:02:23.232]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.232]                     next
[17:02:23.232]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.232]                 }
[17:02:23.232]                 if (length(args) > 0) 
[17:02:23.232]                   base::do.call(base::Sys.setenv, args = args)
[17:02:23.232]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:23.232]             }
[17:02:23.232]             else {
[17:02:23.232]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:23.232]             }
[17:02:23.232]             {
[17:02:23.232]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:23.232]                   0L) {
[17:02:23.232]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:23.232]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:23.232]                   base::options(opts)
[17:02:23.232]                 }
[17:02:23.232]                 {
[17:02:23.232]                   {
[17:02:23.232]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:23.232]                     NULL
[17:02:23.232]                   }
[17:02:23.232]                   options(future.plan = NULL)
[17:02:23.232]                   if (is.na(NA_character_)) 
[17:02:23.232]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.232]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:23.232]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:23.232]                     .init = FALSE)
[17:02:23.232]                 }
[17:02:23.232]             }
[17:02:23.232]         }
[17:02:23.232]     })
[17:02:23.232]     if (TRUE) {
[17:02:23.232]         base::sink(type = "output", split = FALSE)
[17:02:23.232]         if (TRUE) {
[17:02:23.232]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:23.232]         }
[17:02:23.232]         else {
[17:02:23.232]             ...future.result["stdout"] <- base::list(NULL)
[17:02:23.232]         }
[17:02:23.232]         base::close(...future.stdout)
[17:02:23.232]         ...future.stdout <- NULL
[17:02:23.232]     }
[17:02:23.232]     ...future.result$conditions <- ...future.conditions
[17:02:23.232]     ...future.result$finished <- base::Sys.time()
[17:02:23.232]     ...future.result
[17:02:23.232] }
[17:02:23.235] MultisessionFuture started
[17:02:23.235] - Launch lazy future ... done
[17:02:23.235] run() for ‘MultisessionFuture’ ... done
[17:02:23.236] getGlobalsAndPackages() ...
[17:02:23.236] Searching for globals...
[17:02:23.237] - globals found: [1] ‘{’
[17:02:23.237] Searching for globals ... DONE
[17:02:23.237] Resolving globals: FALSE
[17:02:23.237] 
[17:02:23.237] 
[17:02:23.238] getGlobalsAndPackages() ... DONE
[17:02:23.238] run() for ‘Future’ ...
[17:02:23.238] - state: ‘created’
[17:02:23.238] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:23.253] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:23.253] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:23.253]   - Field: ‘node’
[17:02:23.253]   - Field: ‘label’
[17:02:23.253]   - Field: ‘local’
[17:02:23.253]   - Field: ‘owner’
[17:02:23.253]   - Field: ‘envir’
[17:02:23.254]   - Field: ‘workers’
[17:02:23.254]   - Field: ‘packages’
[17:02:23.254]   - Field: ‘gc’
[17:02:23.254]   - Field: ‘conditions’
[17:02:23.254]   - Field: ‘persistent’
[17:02:23.254]   - Field: ‘expr’
[17:02:23.254]   - Field: ‘uuid’
[17:02:23.254]   - Field: ‘seed’
[17:02:23.254]   - Field: ‘version’
[17:02:23.255]   - Field: ‘result’
[17:02:23.255]   - Field: ‘asynchronous’
[17:02:23.255]   - Field: ‘calls’
[17:02:23.255]   - Field: ‘globals’
[17:02:23.255]   - Field: ‘stdout’
[17:02:23.255]   - Field: ‘earlySignal’
[17:02:23.255]   - Field: ‘lazy’
[17:02:23.255]   - Field: ‘state’
[17:02:23.255] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:23.256] - Launch lazy future ...
[17:02:23.256] Packages needed by the future expression (n = 0): <none>
[17:02:23.256] Packages needed by future strategies (n = 0): <none>
[17:02:23.257] {
[17:02:23.257]     {
[17:02:23.257]         {
[17:02:23.257]             ...future.startTime <- base::Sys.time()
[17:02:23.257]             {
[17:02:23.257]                 {
[17:02:23.257]                   {
[17:02:23.257]                     {
[17:02:23.257]                       base::local({
[17:02:23.257]                         has_future <- base::requireNamespace("future", 
[17:02:23.257]                           quietly = TRUE)
[17:02:23.257]                         if (has_future) {
[17:02:23.257]                           ns <- base::getNamespace("future")
[17:02:23.257]                           version <- ns[[".package"]][["version"]]
[17:02:23.257]                           if (is.null(version)) 
[17:02:23.257]                             version <- utils::packageVersion("future")
[17:02:23.257]                         }
[17:02:23.257]                         else {
[17:02:23.257]                           version <- NULL
[17:02:23.257]                         }
[17:02:23.257]                         if (!has_future || version < "1.8.0") {
[17:02:23.257]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:23.257]                             "", base::R.version$version.string), 
[17:02:23.257]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:23.257]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:23.257]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:23.257]                               "release", "version")], collapse = " "), 
[17:02:23.257]                             hostname = base::Sys.info()[["nodename"]])
[17:02:23.257]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:23.257]                             info)
[17:02:23.257]                           info <- base::paste(info, collapse = "; ")
[17:02:23.257]                           if (!has_future) {
[17:02:23.257]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:23.257]                               info)
[17:02:23.257]                           }
[17:02:23.257]                           else {
[17:02:23.257]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:23.257]                               info, version)
[17:02:23.257]                           }
[17:02:23.257]                           base::stop(msg)
[17:02:23.257]                         }
[17:02:23.257]                       })
[17:02:23.257]                     }
[17:02:23.257]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:23.257]                     base::options(mc.cores = 1L)
[17:02:23.257]                   }
[17:02:23.257]                   ...future.strategy.old <- future::plan("list")
[17:02:23.257]                   options(future.plan = NULL)
[17:02:23.257]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.257]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:23.257]                 }
[17:02:23.257]                 ...future.workdir <- getwd()
[17:02:23.257]             }
[17:02:23.257]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:23.257]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:23.257]         }
[17:02:23.257]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:23.257]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:23.257]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:23.257]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:23.257]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:23.257]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:23.257]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:23.257]             base::names(...future.oldOptions))
[17:02:23.257]     }
[17:02:23.257]     if (FALSE) {
[17:02:23.257]     }
[17:02:23.257]     else {
[17:02:23.257]         if (TRUE) {
[17:02:23.257]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:23.257]                 open = "w")
[17:02:23.257]         }
[17:02:23.257]         else {
[17:02:23.257]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:23.257]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:23.257]         }
[17:02:23.257]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:23.257]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:23.257]             base::sink(type = "output", split = FALSE)
[17:02:23.257]             base::close(...future.stdout)
[17:02:23.257]         }, add = TRUE)
[17:02:23.257]     }
[17:02:23.257]     ...future.frame <- base::sys.nframe()
[17:02:23.257]     ...future.conditions <- base::list()
[17:02:23.257]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:23.257]     if (FALSE) {
[17:02:23.257]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:23.257]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:23.257]     }
[17:02:23.257]     ...future.result <- base::tryCatch({
[17:02:23.257]         base::withCallingHandlers({
[17:02:23.257]             ...future.value <- base::withVisible(base::local({
[17:02:23.257]                 ...future.makeSendCondition <- base::local({
[17:02:23.257]                   sendCondition <- NULL
[17:02:23.257]                   function(frame = 1L) {
[17:02:23.257]                     if (is.function(sendCondition)) 
[17:02:23.257]                       return(sendCondition)
[17:02:23.257]                     ns <- getNamespace("parallel")
[17:02:23.257]                     if (exists("sendData", mode = "function", 
[17:02:23.257]                       envir = ns)) {
[17:02:23.257]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:23.257]                         envir = ns)
[17:02:23.257]                       envir <- sys.frame(frame)
[17:02:23.257]                       master <- NULL
[17:02:23.257]                       while (!identical(envir, .GlobalEnv) && 
[17:02:23.257]                         !identical(envir, emptyenv())) {
[17:02:23.257]                         if (exists("master", mode = "list", envir = envir, 
[17:02:23.257]                           inherits = FALSE)) {
[17:02:23.257]                           master <- get("master", mode = "list", 
[17:02:23.257]                             envir = envir, inherits = FALSE)
[17:02:23.257]                           if (inherits(master, c("SOCKnode", 
[17:02:23.257]                             "SOCK0node"))) {
[17:02:23.257]                             sendCondition <<- function(cond) {
[17:02:23.257]                               data <- list(type = "VALUE", value = cond, 
[17:02:23.257]                                 success = TRUE)
[17:02:23.257]                               parallel_sendData(master, data)
[17:02:23.257]                             }
[17:02:23.257]                             return(sendCondition)
[17:02:23.257]                           }
[17:02:23.257]                         }
[17:02:23.257]                         frame <- frame + 1L
[17:02:23.257]                         envir <- sys.frame(frame)
[17:02:23.257]                       }
[17:02:23.257]                     }
[17:02:23.257]                     sendCondition <<- function(cond) NULL
[17:02:23.257]                   }
[17:02:23.257]                 })
[17:02:23.257]                 withCallingHandlers({
[17:02:23.257]                   {
[17:02:23.257]                     4
[17:02:23.257]                   }
[17:02:23.257]                 }, immediateCondition = function(cond) {
[17:02:23.257]                   sendCondition <- ...future.makeSendCondition()
[17:02:23.257]                   sendCondition(cond)
[17:02:23.257]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.257]                   {
[17:02:23.257]                     inherits <- base::inherits
[17:02:23.257]                     invokeRestart <- base::invokeRestart
[17:02:23.257]                     is.null <- base::is.null
[17:02:23.257]                     muffled <- FALSE
[17:02:23.257]                     if (inherits(cond, "message")) {
[17:02:23.257]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:23.257]                       if (muffled) 
[17:02:23.257]                         invokeRestart("muffleMessage")
[17:02:23.257]                     }
[17:02:23.257]                     else if (inherits(cond, "warning")) {
[17:02:23.257]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:23.257]                       if (muffled) 
[17:02:23.257]                         invokeRestart("muffleWarning")
[17:02:23.257]                     }
[17:02:23.257]                     else if (inherits(cond, "condition")) {
[17:02:23.257]                       if (!is.null(pattern)) {
[17:02:23.257]                         computeRestarts <- base::computeRestarts
[17:02:23.257]                         grepl <- base::grepl
[17:02:23.257]                         restarts <- computeRestarts(cond)
[17:02:23.257]                         for (restart in restarts) {
[17:02:23.257]                           name <- restart$name
[17:02:23.257]                           if (is.null(name)) 
[17:02:23.257]                             next
[17:02:23.257]                           if (!grepl(pattern, name)) 
[17:02:23.257]                             next
[17:02:23.257]                           invokeRestart(restart)
[17:02:23.257]                           muffled <- TRUE
[17:02:23.257]                           break
[17:02:23.257]                         }
[17:02:23.257]                       }
[17:02:23.257]                     }
[17:02:23.257]                     invisible(muffled)
[17:02:23.257]                   }
[17:02:23.257]                   muffleCondition(cond)
[17:02:23.257]                 })
[17:02:23.257]             }))
[17:02:23.257]             future::FutureResult(value = ...future.value$value, 
[17:02:23.257]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.257]                   ...future.rng), globalenv = if (FALSE) 
[17:02:23.257]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:23.257]                     ...future.globalenv.names))
[17:02:23.257]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:23.257]         }, condition = base::local({
[17:02:23.257]             c <- base::c
[17:02:23.257]             inherits <- base::inherits
[17:02:23.257]             invokeRestart <- base::invokeRestart
[17:02:23.257]             length <- base::length
[17:02:23.257]             list <- base::list
[17:02:23.257]             seq.int <- base::seq.int
[17:02:23.257]             signalCondition <- base::signalCondition
[17:02:23.257]             sys.calls <- base::sys.calls
[17:02:23.257]             `[[` <- base::`[[`
[17:02:23.257]             `+` <- base::`+`
[17:02:23.257]             `<<-` <- base::`<<-`
[17:02:23.257]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:23.257]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:23.257]                   3L)]
[17:02:23.257]             }
[17:02:23.257]             function(cond) {
[17:02:23.257]                 is_error <- inherits(cond, "error")
[17:02:23.257]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:23.257]                   NULL)
[17:02:23.257]                 if (is_error) {
[17:02:23.257]                   sessionInformation <- function() {
[17:02:23.257]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:23.257]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:23.257]                       search = base::search(), system = base::Sys.info())
[17:02:23.257]                   }
[17:02:23.257]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.257]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:23.257]                     cond$call), session = sessionInformation(), 
[17:02:23.257]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:23.257]                   signalCondition(cond)
[17:02:23.257]                 }
[17:02:23.257]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:23.257]                 "immediateCondition"))) {
[17:02:23.257]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:23.257]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.257]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:23.257]                   if (TRUE && !signal) {
[17:02:23.257]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.257]                     {
[17:02:23.257]                       inherits <- base::inherits
[17:02:23.257]                       invokeRestart <- base::invokeRestart
[17:02:23.257]                       is.null <- base::is.null
[17:02:23.257]                       muffled <- FALSE
[17:02:23.257]                       if (inherits(cond, "message")) {
[17:02:23.257]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.257]                         if (muffled) 
[17:02:23.257]                           invokeRestart("muffleMessage")
[17:02:23.257]                       }
[17:02:23.257]                       else if (inherits(cond, "warning")) {
[17:02:23.257]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.257]                         if (muffled) 
[17:02:23.257]                           invokeRestart("muffleWarning")
[17:02:23.257]                       }
[17:02:23.257]                       else if (inherits(cond, "condition")) {
[17:02:23.257]                         if (!is.null(pattern)) {
[17:02:23.257]                           computeRestarts <- base::computeRestarts
[17:02:23.257]                           grepl <- base::grepl
[17:02:23.257]                           restarts <- computeRestarts(cond)
[17:02:23.257]                           for (restart in restarts) {
[17:02:23.257]                             name <- restart$name
[17:02:23.257]                             if (is.null(name)) 
[17:02:23.257]                               next
[17:02:23.257]                             if (!grepl(pattern, name)) 
[17:02:23.257]                               next
[17:02:23.257]                             invokeRestart(restart)
[17:02:23.257]                             muffled <- TRUE
[17:02:23.257]                             break
[17:02:23.257]                           }
[17:02:23.257]                         }
[17:02:23.257]                       }
[17:02:23.257]                       invisible(muffled)
[17:02:23.257]                     }
[17:02:23.257]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.257]                   }
[17:02:23.257]                 }
[17:02:23.257]                 else {
[17:02:23.257]                   if (TRUE) {
[17:02:23.257]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.257]                     {
[17:02:23.257]                       inherits <- base::inherits
[17:02:23.257]                       invokeRestart <- base::invokeRestart
[17:02:23.257]                       is.null <- base::is.null
[17:02:23.257]                       muffled <- FALSE
[17:02:23.257]                       if (inherits(cond, "message")) {
[17:02:23.257]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.257]                         if (muffled) 
[17:02:23.257]                           invokeRestart("muffleMessage")
[17:02:23.257]                       }
[17:02:23.257]                       else if (inherits(cond, "warning")) {
[17:02:23.257]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.257]                         if (muffled) 
[17:02:23.257]                           invokeRestart("muffleWarning")
[17:02:23.257]                       }
[17:02:23.257]                       else if (inherits(cond, "condition")) {
[17:02:23.257]                         if (!is.null(pattern)) {
[17:02:23.257]                           computeRestarts <- base::computeRestarts
[17:02:23.257]                           grepl <- base::grepl
[17:02:23.257]                           restarts <- computeRestarts(cond)
[17:02:23.257]                           for (restart in restarts) {
[17:02:23.257]                             name <- restart$name
[17:02:23.257]                             if (is.null(name)) 
[17:02:23.257]                               next
[17:02:23.257]                             if (!grepl(pattern, name)) 
[17:02:23.257]                               next
[17:02:23.257]                             invokeRestart(restart)
[17:02:23.257]                             muffled <- TRUE
[17:02:23.257]                             break
[17:02:23.257]                           }
[17:02:23.257]                         }
[17:02:23.257]                       }
[17:02:23.257]                       invisible(muffled)
[17:02:23.257]                     }
[17:02:23.257]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.257]                   }
[17:02:23.257]                 }
[17:02:23.257]             }
[17:02:23.257]         }))
[17:02:23.257]     }, error = function(ex) {
[17:02:23.257]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:23.257]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.257]                 ...future.rng), started = ...future.startTime, 
[17:02:23.257]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:23.257]             version = "1.8"), class = "FutureResult")
[17:02:23.257]     }, finally = {
[17:02:23.257]         if (!identical(...future.workdir, getwd())) 
[17:02:23.257]             setwd(...future.workdir)
[17:02:23.257]         {
[17:02:23.257]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:23.257]                 ...future.oldOptions$nwarnings <- NULL
[17:02:23.257]             }
[17:02:23.257]             base::options(...future.oldOptions)
[17:02:23.257]             if (.Platform$OS.type == "windows") {
[17:02:23.257]                 old_names <- names(...future.oldEnvVars)
[17:02:23.257]                 envs <- base::Sys.getenv()
[17:02:23.257]                 names <- names(envs)
[17:02:23.257]                 common <- intersect(names, old_names)
[17:02:23.257]                 added <- setdiff(names, old_names)
[17:02:23.257]                 removed <- setdiff(old_names, names)
[17:02:23.257]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:23.257]                   envs[common]]
[17:02:23.257]                 NAMES <- toupper(changed)
[17:02:23.257]                 args <- list()
[17:02:23.257]                 for (kk in seq_along(NAMES)) {
[17:02:23.257]                   name <- changed[[kk]]
[17:02:23.257]                   NAME <- NAMES[[kk]]
[17:02:23.257]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.257]                     next
[17:02:23.257]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.257]                 }
[17:02:23.257]                 NAMES <- toupper(added)
[17:02:23.257]                 for (kk in seq_along(NAMES)) {
[17:02:23.257]                   name <- added[[kk]]
[17:02:23.257]                   NAME <- NAMES[[kk]]
[17:02:23.257]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.257]                     next
[17:02:23.257]                   args[[name]] <- ""
[17:02:23.257]                 }
[17:02:23.257]                 NAMES <- toupper(removed)
[17:02:23.257]                 for (kk in seq_along(NAMES)) {
[17:02:23.257]                   name <- removed[[kk]]
[17:02:23.257]                   NAME <- NAMES[[kk]]
[17:02:23.257]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.257]                     next
[17:02:23.257]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.257]                 }
[17:02:23.257]                 if (length(args) > 0) 
[17:02:23.257]                   base::do.call(base::Sys.setenv, args = args)
[17:02:23.257]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:23.257]             }
[17:02:23.257]             else {
[17:02:23.257]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:23.257]             }
[17:02:23.257]             {
[17:02:23.257]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:23.257]                   0L) {
[17:02:23.257]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:23.257]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:23.257]                   base::options(opts)
[17:02:23.257]                 }
[17:02:23.257]                 {
[17:02:23.257]                   {
[17:02:23.257]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:23.257]                     NULL
[17:02:23.257]                   }
[17:02:23.257]                   options(future.plan = NULL)
[17:02:23.257]                   if (is.na(NA_character_)) 
[17:02:23.257]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.257]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:23.257]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:23.257]                     .init = FALSE)
[17:02:23.257]                 }
[17:02:23.257]             }
[17:02:23.257]         }
[17:02:23.257]     })
[17:02:23.257]     if (TRUE) {
[17:02:23.257]         base::sink(type = "output", split = FALSE)
[17:02:23.257]         if (TRUE) {
[17:02:23.257]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:23.257]         }
[17:02:23.257]         else {
[17:02:23.257]             ...future.result["stdout"] <- base::list(NULL)
[17:02:23.257]         }
[17:02:23.257]         base::close(...future.stdout)
[17:02:23.257]         ...future.stdout <- NULL
[17:02:23.257]     }
[17:02:23.257]     ...future.result$conditions <- ...future.conditions
[17:02:23.257]     ...future.result$finished <- base::Sys.time()
[17:02:23.257]     ...future.result
[17:02:23.257] }
[17:02:23.309] MultisessionFuture started
[17:02:23.309] - Launch lazy future ... done
[17:02:23.309] run() for ‘MultisessionFuture’ ... done
[17:02:23.309] result() for ClusterFuture ...
[17:02:23.309] receiveMessageFromWorker() for ClusterFuture ...
[17:02:23.310] - Validating connection of MultisessionFuture
[17:02:23.310] - received message: FutureResult
[17:02:23.310] - Received FutureResult
[17:02:23.310] - Erased future from FutureRegistry
[17:02:23.310] result() for ClusterFuture ...
[17:02:23.310] - result already collected: FutureResult
[17:02:23.310] result() for ClusterFuture ... done
[17:02:23.310] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:23.311] result() for ClusterFuture ... done
[17:02:23.311] result() for ClusterFuture ...
[17:02:23.311] - result already collected: FutureResult
[17:02:23.311] result() for ClusterFuture ... done
u$a = 2
[17:02:23.311] result() for ClusterFuture ...
[17:02:23.311] receiveMessageFromWorker() for ClusterFuture ...
[17:02:23.311] - Validating connection of MultisessionFuture
[17:02:23.341] - received message: FutureResult
[17:02:23.341] - Received FutureResult
[17:02:23.341] - Erased future from FutureRegistry
[17:02:23.341] result() for ClusterFuture ...
[17:02:23.341] - result already collected: FutureResult
[17:02:23.341] result() for ClusterFuture ... done
[17:02:23.342] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:23.342] result() for ClusterFuture ... done
[17:02:23.342] result() for ClusterFuture ...
[17:02:23.342] - result already collected: FutureResult
[17:02:23.342] result() for ClusterFuture ... done
v$a = 4
[17:02:23.342] getGlobalsAndPackages() ...
[17:02:23.342] Searching for globals...
[17:02:23.344] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:23.344] Searching for globals ... DONE
[17:02:23.344] Resolving globals: FALSE
[17:02:23.344] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:23.345] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:23.345] - globals: [1] ‘a’
[17:02:23.345] 
[17:02:23.345] getGlobalsAndPackages() ... DONE
[17:02:23.345] run() for ‘Future’ ...
[17:02:23.346] - state: ‘created’
[17:02:23.346] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:23.360] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:23.360] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:23.361]   - Field: ‘node’
[17:02:23.361]   - Field: ‘label’
[17:02:23.361]   - Field: ‘local’
[17:02:23.361]   - Field: ‘owner’
[17:02:23.361]   - Field: ‘envir’
[17:02:23.361]   - Field: ‘workers’
[17:02:23.361]   - Field: ‘packages’
[17:02:23.361]   - Field: ‘gc’
[17:02:23.361]   - Field: ‘conditions’
[17:02:23.361]   - Field: ‘persistent’
[17:02:23.362]   - Field: ‘expr’
[17:02:23.362]   - Field: ‘uuid’
[17:02:23.362]   - Field: ‘seed’
[17:02:23.362]   - Field: ‘version’
[17:02:23.362]   - Field: ‘result’
[17:02:23.362]   - Field: ‘asynchronous’
[17:02:23.362]   - Field: ‘calls’
[17:02:23.362]   - Field: ‘globals’
[17:02:23.363]   - Field: ‘stdout’
[17:02:23.363]   - Field: ‘earlySignal’
[17:02:23.363]   - Field: ‘lazy’
[17:02:23.363]   - Field: ‘state’
[17:02:23.363] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:23.363] - Launch lazy future ...
[17:02:23.363] Packages needed by the future expression (n = 0): <none>
[17:02:23.364] Packages needed by future strategies (n = 0): <none>
[17:02:23.364] {
[17:02:23.364]     {
[17:02:23.364]         {
[17:02:23.364]             ...future.startTime <- base::Sys.time()
[17:02:23.364]             {
[17:02:23.364]                 {
[17:02:23.364]                   {
[17:02:23.364]                     {
[17:02:23.364]                       base::local({
[17:02:23.364]                         has_future <- base::requireNamespace("future", 
[17:02:23.364]                           quietly = TRUE)
[17:02:23.364]                         if (has_future) {
[17:02:23.364]                           ns <- base::getNamespace("future")
[17:02:23.364]                           version <- ns[[".package"]][["version"]]
[17:02:23.364]                           if (is.null(version)) 
[17:02:23.364]                             version <- utils::packageVersion("future")
[17:02:23.364]                         }
[17:02:23.364]                         else {
[17:02:23.364]                           version <- NULL
[17:02:23.364]                         }
[17:02:23.364]                         if (!has_future || version < "1.8.0") {
[17:02:23.364]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:23.364]                             "", base::R.version$version.string), 
[17:02:23.364]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:23.364]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:23.364]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:23.364]                               "release", "version")], collapse = " "), 
[17:02:23.364]                             hostname = base::Sys.info()[["nodename"]])
[17:02:23.364]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:23.364]                             info)
[17:02:23.364]                           info <- base::paste(info, collapse = "; ")
[17:02:23.364]                           if (!has_future) {
[17:02:23.364]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:23.364]                               info)
[17:02:23.364]                           }
[17:02:23.364]                           else {
[17:02:23.364]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:23.364]                               info, version)
[17:02:23.364]                           }
[17:02:23.364]                           base::stop(msg)
[17:02:23.364]                         }
[17:02:23.364]                       })
[17:02:23.364]                     }
[17:02:23.364]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:23.364]                     base::options(mc.cores = 1L)
[17:02:23.364]                   }
[17:02:23.364]                   ...future.strategy.old <- future::plan("list")
[17:02:23.364]                   options(future.plan = NULL)
[17:02:23.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:23.364]                 }
[17:02:23.364]                 ...future.workdir <- getwd()
[17:02:23.364]             }
[17:02:23.364]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:23.364]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:23.364]         }
[17:02:23.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:23.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:23.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:23.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:23.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:23.364]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:23.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:23.364]             base::names(...future.oldOptions))
[17:02:23.364]     }
[17:02:23.364]     if (FALSE) {
[17:02:23.364]     }
[17:02:23.364]     else {
[17:02:23.364]         if (TRUE) {
[17:02:23.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:23.364]                 open = "w")
[17:02:23.364]         }
[17:02:23.364]         else {
[17:02:23.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:23.364]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:23.364]         }
[17:02:23.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:23.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:23.364]             base::sink(type = "output", split = FALSE)
[17:02:23.364]             base::close(...future.stdout)
[17:02:23.364]         }, add = TRUE)
[17:02:23.364]     }
[17:02:23.364]     ...future.frame <- base::sys.nframe()
[17:02:23.364]     ...future.conditions <- base::list()
[17:02:23.364]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:23.364]     if (FALSE) {
[17:02:23.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:23.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:23.364]     }
[17:02:23.364]     ...future.result <- base::tryCatch({
[17:02:23.364]         base::withCallingHandlers({
[17:02:23.364]             ...future.value <- base::withVisible(base::local({
[17:02:23.364]                 ...future.makeSendCondition <- base::local({
[17:02:23.364]                   sendCondition <- NULL
[17:02:23.364]                   function(frame = 1L) {
[17:02:23.364]                     if (is.function(sendCondition)) 
[17:02:23.364]                       return(sendCondition)
[17:02:23.364]                     ns <- getNamespace("parallel")
[17:02:23.364]                     if (exists("sendData", mode = "function", 
[17:02:23.364]                       envir = ns)) {
[17:02:23.364]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:23.364]                         envir = ns)
[17:02:23.364]                       envir <- sys.frame(frame)
[17:02:23.364]                       master <- NULL
[17:02:23.364]                       while (!identical(envir, .GlobalEnv) && 
[17:02:23.364]                         !identical(envir, emptyenv())) {
[17:02:23.364]                         if (exists("master", mode = "list", envir = envir, 
[17:02:23.364]                           inherits = FALSE)) {
[17:02:23.364]                           master <- get("master", mode = "list", 
[17:02:23.364]                             envir = envir, inherits = FALSE)
[17:02:23.364]                           if (inherits(master, c("SOCKnode", 
[17:02:23.364]                             "SOCK0node"))) {
[17:02:23.364]                             sendCondition <<- function(cond) {
[17:02:23.364]                               data <- list(type = "VALUE", value = cond, 
[17:02:23.364]                                 success = TRUE)
[17:02:23.364]                               parallel_sendData(master, data)
[17:02:23.364]                             }
[17:02:23.364]                             return(sendCondition)
[17:02:23.364]                           }
[17:02:23.364]                         }
[17:02:23.364]                         frame <- frame + 1L
[17:02:23.364]                         envir <- sys.frame(frame)
[17:02:23.364]                       }
[17:02:23.364]                     }
[17:02:23.364]                     sendCondition <<- function(cond) NULL
[17:02:23.364]                   }
[17:02:23.364]                 })
[17:02:23.364]                 withCallingHandlers({
[17:02:23.364]                   {
[17:02:23.364]                     2 * a
[17:02:23.364]                   }
[17:02:23.364]                 }, immediateCondition = function(cond) {
[17:02:23.364]                   sendCondition <- ...future.makeSendCondition()
[17:02:23.364]                   sendCondition(cond)
[17:02:23.364]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.364]                   {
[17:02:23.364]                     inherits <- base::inherits
[17:02:23.364]                     invokeRestart <- base::invokeRestart
[17:02:23.364]                     is.null <- base::is.null
[17:02:23.364]                     muffled <- FALSE
[17:02:23.364]                     if (inherits(cond, "message")) {
[17:02:23.364]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:23.364]                       if (muffled) 
[17:02:23.364]                         invokeRestart("muffleMessage")
[17:02:23.364]                     }
[17:02:23.364]                     else if (inherits(cond, "warning")) {
[17:02:23.364]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:23.364]                       if (muffled) 
[17:02:23.364]                         invokeRestart("muffleWarning")
[17:02:23.364]                     }
[17:02:23.364]                     else if (inherits(cond, "condition")) {
[17:02:23.364]                       if (!is.null(pattern)) {
[17:02:23.364]                         computeRestarts <- base::computeRestarts
[17:02:23.364]                         grepl <- base::grepl
[17:02:23.364]                         restarts <- computeRestarts(cond)
[17:02:23.364]                         for (restart in restarts) {
[17:02:23.364]                           name <- restart$name
[17:02:23.364]                           if (is.null(name)) 
[17:02:23.364]                             next
[17:02:23.364]                           if (!grepl(pattern, name)) 
[17:02:23.364]                             next
[17:02:23.364]                           invokeRestart(restart)
[17:02:23.364]                           muffled <- TRUE
[17:02:23.364]                           break
[17:02:23.364]                         }
[17:02:23.364]                       }
[17:02:23.364]                     }
[17:02:23.364]                     invisible(muffled)
[17:02:23.364]                   }
[17:02:23.364]                   muffleCondition(cond)
[17:02:23.364]                 })
[17:02:23.364]             }))
[17:02:23.364]             future::FutureResult(value = ...future.value$value, 
[17:02:23.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.364]                   ...future.rng), globalenv = if (FALSE) 
[17:02:23.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:23.364]                     ...future.globalenv.names))
[17:02:23.364]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:23.364]         }, condition = base::local({
[17:02:23.364]             c <- base::c
[17:02:23.364]             inherits <- base::inherits
[17:02:23.364]             invokeRestart <- base::invokeRestart
[17:02:23.364]             length <- base::length
[17:02:23.364]             list <- base::list
[17:02:23.364]             seq.int <- base::seq.int
[17:02:23.364]             signalCondition <- base::signalCondition
[17:02:23.364]             sys.calls <- base::sys.calls
[17:02:23.364]             `[[` <- base::`[[`
[17:02:23.364]             `+` <- base::`+`
[17:02:23.364]             `<<-` <- base::`<<-`
[17:02:23.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:23.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:23.364]                   3L)]
[17:02:23.364]             }
[17:02:23.364]             function(cond) {
[17:02:23.364]                 is_error <- inherits(cond, "error")
[17:02:23.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:23.364]                   NULL)
[17:02:23.364]                 if (is_error) {
[17:02:23.364]                   sessionInformation <- function() {
[17:02:23.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:23.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:23.364]                       search = base::search(), system = base::Sys.info())
[17:02:23.364]                   }
[17:02:23.364]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:23.364]                     cond$call), session = sessionInformation(), 
[17:02:23.364]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:23.364]                   signalCondition(cond)
[17:02:23.364]                 }
[17:02:23.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:23.364]                 "immediateCondition"))) {
[17:02:23.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:23.364]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:23.364]                   if (TRUE && !signal) {
[17:02:23.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.364]                     {
[17:02:23.364]                       inherits <- base::inherits
[17:02:23.364]                       invokeRestart <- base::invokeRestart
[17:02:23.364]                       is.null <- base::is.null
[17:02:23.364]                       muffled <- FALSE
[17:02:23.364]                       if (inherits(cond, "message")) {
[17:02:23.364]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.364]                         if (muffled) 
[17:02:23.364]                           invokeRestart("muffleMessage")
[17:02:23.364]                       }
[17:02:23.364]                       else if (inherits(cond, "warning")) {
[17:02:23.364]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.364]                         if (muffled) 
[17:02:23.364]                           invokeRestart("muffleWarning")
[17:02:23.364]                       }
[17:02:23.364]                       else if (inherits(cond, "condition")) {
[17:02:23.364]                         if (!is.null(pattern)) {
[17:02:23.364]                           computeRestarts <- base::computeRestarts
[17:02:23.364]                           grepl <- base::grepl
[17:02:23.364]                           restarts <- computeRestarts(cond)
[17:02:23.364]                           for (restart in restarts) {
[17:02:23.364]                             name <- restart$name
[17:02:23.364]                             if (is.null(name)) 
[17:02:23.364]                               next
[17:02:23.364]                             if (!grepl(pattern, name)) 
[17:02:23.364]                               next
[17:02:23.364]                             invokeRestart(restart)
[17:02:23.364]                             muffled <- TRUE
[17:02:23.364]                             break
[17:02:23.364]                           }
[17:02:23.364]                         }
[17:02:23.364]                       }
[17:02:23.364]                       invisible(muffled)
[17:02:23.364]                     }
[17:02:23.364]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.364]                   }
[17:02:23.364]                 }
[17:02:23.364]                 else {
[17:02:23.364]                   if (TRUE) {
[17:02:23.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.364]                     {
[17:02:23.364]                       inherits <- base::inherits
[17:02:23.364]                       invokeRestart <- base::invokeRestart
[17:02:23.364]                       is.null <- base::is.null
[17:02:23.364]                       muffled <- FALSE
[17:02:23.364]                       if (inherits(cond, "message")) {
[17:02:23.364]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.364]                         if (muffled) 
[17:02:23.364]                           invokeRestart("muffleMessage")
[17:02:23.364]                       }
[17:02:23.364]                       else if (inherits(cond, "warning")) {
[17:02:23.364]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.364]                         if (muffled) 
[17:02:23.364]                           invokeRestart("muffleWarning")
[17:02:23.364]                       }
[17:02:23.364]                       else if (inherits(cond, "condition")) {
[17:02:23.364]                         if (!is.null(pattern)) {
[17:02:23.364]                           computeRestarts <- base::computeRestarts
[17:02:23.364]                           grepl <- base::grepl
[17:02:23.364]                           restarts <- computeRestarts(cond)
[17:02:23.364]                           for (restart in restarts) {
[17:02:23.364]                             name <- restart$name
[17:02:23.364]                             if (is.null(name)) 
[17:02:23.364]                               next
[17:02:23.364]                             if (!grepl(pattern, name)) 
[17:02:23.364]                               next
[17:02:23.364]                             invokeRestart(restart)
[17:02:23.364]                             muffled <- TRUE
[17:02:23.364]                             break
[17:02:23.364]                           }
[17:02:23.364]                         }
[17:02:23.364]                       }
[17:02:23.364]                       invisible(muffled)
[17:02:23.364]                     }
[17:02:23.364]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.364]                   }
[17:02:23.364]                 }
[17:02:23.364]             }
[17:02:23.364]         }))
[17:02:23.364]     }, error = function(ex) {
[17:02:23.364]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:23.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.364]                 ...future.rng), started = ...future.startTime, 
[17:02:23.364]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:23.364]             version = "1.8"), class = "FutureResult")
[17:02:23.364]     }, finally = {
[17:02:23.364]         if (!identical(...future.workdir, getwd())) 
[17:02:23.364]             setwd(...future.workdir)
[17:02:23.364]         {
[17:02:23.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:23.364]                 ...future.oldOptions$nwarnings <- NULL
[17:02:23.364]             }
[17:02:23.364]             base::options(...future.oldOptions)
[17:02:23.364]             if (.Platform$OS.type == "windows") {
[17:02:23.364]                 old_names <- names(...future.oldEnvVars)
[17:02:23.364]                 envs <- base::Sys.getenv()
[17:02:23.364]                 names <- names(envs)
[17:02:23.364]                 common <- intersect(names, old_names)
[17:02:23.364]                 added <- setdiff(names, old_names)
[17:02:23.364]                 removed <- setdiff(old_names, names)
[17:02:23.364]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:23.364]                   envs[common]]
[17:02:23.364]                 NAMES <- toupper(changed)
[17:02:23.364]                 args <- list()
[17:02:23.364]                 for (kk in seq_along(NAMES)) {
[17:02:23.364]                   name <- changed[[kk]]
[17:02:23.364]                   NAME <- NAMES[[kk]]
[17:02:23.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.364]                     next
[17:02:23.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.364]                 }
[17:02:23.364]                 NAMES <- toupper(added)
[17:02:23.364]                 for (kk in seq_along(NAMES)) {
[17:02:23.364]                   name <- added[[kk]]
[17:02:23.364]                   NAME <- NAMES[[kk]]
[17:02:23.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.364]                     next
[17:02:23.364]                   args[[name]] <- ""
[17:02:23.364]                 }
[17:02:23.364]                 NAMES <- toupper(removed)
[17:02:23.364]                 for (kk in seq_along(NAMES)) {
[17:02:23.364]                   name <- removed[[kk]]
[17:02:23.364]                   NAME <- NAMES[[kk]]
[17:02:23.364]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.364]                     next
[17:02:23.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.364]                 }
[17:02:23.364]                 if (length(args) > 0) 
[17:02:23.364]                   base::do.call(base::Sys.setenv, args = args)
[17:02:23.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:23.364]             }
[17:02:23.364]             else {
[17:02:23.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:23.364]             }
[17:02:23.364]             {
[17:02:23.364]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:23.364]                   0L) {
[17:02:23.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:23.364]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:23.364]                   base::options(opts)
[17:02:23.364]                 }
[17:02:23.364]                 {
[17:02:23.364]                   {
[17:02:23.364]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:23.364]                     NULL
[17:02:23.364]                   }
[17:02:23.364]                   options(future.plan = NULL)
[17:02:23.364]                   if (is.na(NA_character_)) 
[17:02:23.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:23.364]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:23.364]                     .init = FALSE)
[17:02:23.364]                 }
[17:02:23.364]             }
[17:02:23.364]         }
[17:02:23.364]     })
[17:02:23.364]     if (TRUE) {
[17:02:23.364]         base::sink(type = "output", split = FALSE)
[17:02:23.364]         if (TRUE) {
[17:02:23.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:23.364]         }
[17:02:23.364]         else {
[17:02:23.364]             ...future.result["stdout"] <- base::list(NULL)
[17:02:23.364]         }
[17:02:23.364]         base::close(...future.stdout)
[17:02:23.364]         ...future.stdout <- NULL
[17:02:23.364]     }
[17:02:23.364]     ...future.result$conditions <- ...future.conditions
[17:02:23.364]     ...future.result$finished <- base::Sys.time()
[17:02:23.364]     ...future.result
[17:02:23.364] }
[17:02:23.367] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:23.367] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:02:23.368] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:02:23.368] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:23.368] MultisessionFuture started
[17:02:23.369] - Launch lazy future ... done
[17:02:23.369] run() for ‘MultisessionFuture’ ... done
[17:02:23.369] result() for ClusterFuture ...
[17:02:23.369] receiveMessageFromWorker() for ClusterFuture ...
[17:02:23.369] - Validating connection of MultisessionFuture
[17:02:23.373] - received message: FutureResult
[17:02:23.373] - Received FutureResult
[17:02:23.374] - Erased future from FutureRegistry
[17:02:23.374] result() for ClusterFuture ...
[17:02:23.374] - result already collected: FutureResult
[17:02:23.374] result() for ClusterFuture ... done
[17:02:23.374] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:23.374] result() for ClusterFuture ... done
[17:02:23.374] result() for ClusterFuture ...
[17:02:23.374] - result already collected: FutureResult
[17:02:23.375] result() for ClusterFuture ... done
[17:02:23.375] getGlobalsAndPackages() ...
[17:02:23.375] Searching for globals...
[17:02:23.376] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:23.376] Searching for globals ... DONE
[17:02:23.376] Resolving globals: FALSE
[17:02:23.377] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:23.377] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:23.377] - globals: [1] ‘a’
[17:02:23.377] 
[17:02:23.377] getGlobalsAndPackages() ... DONE
[17:02:23.378] run() for ‘Future’ ...
[17:02:23.378] - state: ‘created’
[17:02:23.378] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:23.394] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:23.394] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:23.394]   - Field: ‘node’
[17:02:23.394]   - Field: ‘label’
[17:02:23.394]   - Field: ‘local’
[17:02:23.394]   - Field: ‘owner’
[17:02:23.395]   - Field: ‘envir’
[17:02:23.395]   - Field: ‘workers’
[17:02:23.395]   - Field: ‘packages’
[17:02:23.395]   - Field: ‘gc’
[17:02:23.395]   - Field: ‘conditions’
[17:02:23.395]   - Field: ‘persistent’
[17:02:23.395]   - Field: ‘expr’
[17:02:23.395]   - Field: ‘uuid’
[17:02:23.395]   - Field: ‘seed’
[17:02:23.395]   - Field: ‘version’
[17:02:23.396]   - Field: ‘result’
[17:02:23.396]   - Field: ‘asynchronous’
[17:02:23.396]   - Field: ‘calls’
[17:02:23.396]   - Field: ‘globals’
[17:02:23.396]   - Field: ‘stdout’
[17:02:23.396]   - Field: ‘earlySignal’
[17:02:23.396]   - Field: ‘lazy’
[17:02:23.396]   - Field: ‘state’
[17:02:23.396] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:23.396] - Launch lazy future ...
[17:02:23.397] Packages needed by the future expression (n = 0): <none>
[17:02:23.397] Packages needed by future strategies (n = 0): <none>
[17:02:23.397] {
[17:02:23.397]     {
[17:02:23.397]         {
[17:02:23.397]             ...future.startTime <- base::Sys.time()
[17:02:23.397]             {
[17:02:23.397]                 {
[17:02:23.397]                   {
[17:02:23.397]                     {
[17:02:23.397]                       base::local({
[17:02:23.397]                         has_future <- base::requireNamespace("future", 
[17:02:23.397]                           quietly = TRUE)
[17:02:23.397]                         if (has_future) {
[17:02:23.397]                           ns <- base::getNamespace("future")
[17:02:23.397]                           version <- ns[[".package"]][["version"]]
[17:02:23.397]                           if (is.null(version)) 
[17:02:23.397]                             version <- utils::packageVersion("future")
[17:02:23.397]                         }
[17:02:23.397]                         else {
[17:02:23.397]                           version <- NULL
[17:02:23.397]                         }
[17:02:23.397]                         if (!has_future || version < "1.8.0") {
[17:02:23.397]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:23.397]                             "", base::R.version$version.string), 
[17:02:23.397]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:23.397]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:23.397]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:23.397]                               "release", "version")], collapse = " "), 
[17:02:23.397]                             hostname = base::Sys.info()[["nodename"]])
[17:02:23.397]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:23.397]                             info)
[17:02:23.397]                           info <- base::paste(info, collapse = "; ")
[17:02:23.397]                           if (!has_future) {
[17:02:23.397]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:23.397]                               info)
[17:02:23.397]                           }
[17:02:23.397]                           else {
[17:02:23.397]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:23.397]                               info, version)
[17:02:23.397]                           }
[17:02:23.397]                           base::stop(msg)
[17:02:23.397]                         }
[17:02:23.397]                       })
[17:02:23.397]                     }
[17:02:23.397]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:23.397]                     base::options(mc.cores = 1L)
[17:02:23.397]                   }
[17:02:23.397]                   ...future.strategy.old <- future::plan("list")
[17:02:23.397]                   options(future.plan = NULL)
[17:02:23.397]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.397]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:23.397]                 }
[17:02:23.397]                 ...future.workdir <- getwd()
[17:02:23.397]             }
[17:02:23.397]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:23.397]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:23.397]         }
[17:02:23.397]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:23.397]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:23.397]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:23.397]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:23.397]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:23.397]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:23.397]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:23.397]             base::names(...future.oldOptions))
[17:02:23.397]     }
[17:02:23.397]     if (FALSE) {
[17:02:23.397]     }
[17:02:23.397]     else {
[17:02:23.397]         if (TRUE) {
[17:02:23.397]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:23.397]                 open = "w")
[17:02:23.397]         }
[17:02:23.397]         else {
[17:02:23.397]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:23.397]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:23.397]         }
[17:02:23.397]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:23.397]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:23.397]             base::sink(type = "output", split = FALSE)
[17:02:23.397]             base::close(...future.stdout)
[17:02:23.397]         }, add = TRUE)
[17:02:23.397]     }
[17:02:23.397]     ...future.frame <- base::sys.nframe()
[17:02:23.397]     ...future.conditions <- base::list()
[17:02:23.397]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:23.397]     if (FALSE) {
[17:02:23.397]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:23.397]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:23.397]     }
[17:02:23.397]     ...future.result <- base::tryCatch({
[17:02:23.397]         base::withCallingHandlers({
[17:02:23.397]             ...future.value <- base::withVisible(base::local({
[17:02:23.397]                 ...future.makeSendCondition <- base::local({
[17:02:23.397]                   sendCondition <- NULL
[17:02:23.397]                   function(frame = 1L) {
[17:02:23.397]                     if (is.function(sendCondition)) 
[17:02:23.397]                       return(sendCondition)
[17:02:23.397]                     ns <- getNamespace("parallel")
[17:02:23.397]                     if (exists("sendData", mode = "function", 
[17:02:23.397]                       envir = ns)) {
[17:02:23.397]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:23.397]                         envir = ns)
[17:02:23.397]                       envir <- sys.frame(frame)
[17:02:23.397]                       master <- NULL
[17:02:23.397]                       while (!identical(envir, .GlobalEnv) && 
[17:02:23.397]                         !identical(envir, emptyenv())) {
[17:02:23.397]                         if (exists("master", mode = "list", envir = envir, 
[17:02:23.397]                           inherits = FALSE)) {
[17:02:23.397]                           master <- get("master", mode = "list", 
[17:02:23.397]                             envir = envir, inherits = FALSE)
[17:02:23.397]                           if (inherits(master, c("SOCKnode", 
[17:02:23.397]                             "SOCK0node"))) {
[17:02:23.397]                             sendCondition <<- function(cond) {
[17:02:23.397]                               data <- list(type = "VALUE", value = cond, 
[17:02:23.397]                                 success = TRUE)
[17:02:23.397]                               parallel_sendData(master, data)
[17:02:23.397]                             }
[17:02:23.397]                             return(sendCondition)
[17:02:23.397]                           }
[17:02:23.397]                         }
[17:02:23.397]                         frame <- frame + 1L
[17:02:23.397]                         envir <- sys.frame(frame)
[17:02:23.397]                       }
[17:02:23.397]                     }
[17:02:23.397]                     sendCondition <<- function(cond) NULL
[17:02:23.397]                   }
[17:02:23.397]                 })
[17:02:23.397]                 withCallingHandlers({
[17:02:23.397]                   {
[17:02:23.397]                     2 * a
[17:02:23.397]                   }
[17:02:23.397]                 }, immediateCondition = function(cond) {
[17:02:23.397]                   sendCondition <- ...future.makeSendCondition()
[17:02:23.397]                   sendCondition(cond)
[17:02:23.397]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.397]                   {
[17:02:23.397]                     inherits <- base::inherits
[17:02:23.397]                     invokeRestart <- base::invokeRestart
[17:02:23.397]                     is.null <- base::is.null
[17:02:23.397]                     muffled <- FALSE
[17:02:23.397]                     if (inherits(cond, "message")) {
[17:02:23.397]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:23.397]                       if (muffled) 
[17:02:23.397]                         invokeRestart("muffleMessage")
[17:02:23.397]                     }
[17:02:23.397]                     else if (inherits(cond, "warning")) {
[17:02:23.397]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:23.397]                       if (muffled) 
[17:02:23.397]                         invokeRestart("muffleWarning")
[17:02:23.397]                     }
[17:02:23.397]                     else if (inherits(cond, "condition")) {
[17:02:23.397]                       if (!is.null(pattern)) {
[17:02:23.397]                         computeRestarts <- base::computeRestarts
[17:02:23.397]                         grepl <- base::grepl
[17:02:23.397]                         restarts <- computeRestarts(cond)
[17:02:23.397]                         for (restart in restarts) {
[17:02:23.397]                           name <- restart$name
[17:02:23.397]                           if (is.null(name)) 
[17:02:23.397]                             next
[17:02:23.397]                           if (!grepl(pattern, name)) 
[17:02:23.397]                             next
[17:02:23.397]                           invokeRestart(restart)
[17:02:23.397]                           muffled <- TRUE
[17:02:23.397]                           break
[17:02:23.397]                         }
[17:02:23.397]                       }
[17:02:23.397]                     }
[17:02:23.397]                     invisible(muffled)
[17:02:23.397]                   }
[17:02:23.397]                   muffleCondition(cond)
[17:02:23.397]                 })
[17:02:23.397]             }))
[17:02:23.397]             future::FutureResult(value = ...future.value$value, 
[17:02:23.397]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.397]                   ...future.rng), globalenv = if (FALSE) 
[17:02:23.397]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:23.397]                     ...future.globalenv.names))
[17:02:23.397]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:23.397]         }, condition = base::local({
[17:02:23.397]             c <- base::c
[17:02:23.397]             inherits <- base::inherits
[17:02:23.397]             invokeRestart <- base::invokeRestart
[17:02:23.397]             length <- base::length
[17:02:23.397]             list <- base::list
[17:02:23.397]             seq.int <- base::seq.int
[17:02:23.397]             signalCondition <- base::signalCondition
[17:02:23.397]             sys.calls <- base::sys.calls
[17:02:23.397]             `[[` <- base::`[[`
[17:02:23.397]             `+` <- base::`+`
[17:02:23.397]             `<<-` <- base::`<<-`
[17:02:23.397]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:23.397]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:23.397]                   3L)]
[17:02:23.397]             }
[17:02:23.397]             function(cond) {
[17:02:23.397]                 is_error <- inherits(cond, "error")
[17:02:23.397]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:23.397]                   NULL)
[17:02:23.397]                 if (is_error) {
[17:02:23.397]                   sessionInformation <- function() {
[17:02:23.397]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:23.397]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:23.397]                       search = base::search(), system = base::Sys.info())
[17:02:23.397]                   }
[17:02:23.397]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.397]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:23.397]                     cond$call), session = sessionInformation(), 
[17:02:23.397]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:23.397]                   signalCondition(cond)
[17:02:23.397]                 }
[17:02:23.397]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:23.397]                 "immediateCondition"))) {
[17:02:23.397]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:23.397]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.397]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:23.397]                   if (TRUE && !signal) {
[17:02:23.397]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.397]                     {
[17:02:23.397]                       inherits <- base::inherits
[17:02:23.397]                       invokeRestart <- base::invokeRestart
[17:02:23.397]                       is.null <- base::is.null
[17:02:23.397]                       muffled <- FALSE
[17:02:23.397]                       if (inherits(cond, "message")) {
[17:02:23.397]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.397]                         if (muffled) 
[17:02:23.397]                           invokeRestart("muffleMessage")
[17:02:23.397]                       }
[17:02:23.397]                       else if (inherits(cond, "warning")) {
[17:02:23.397]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.397]                         if (muffled) 
[17:02:23.397]                           invokeRestart("muffleWarning")
[17:02:23.397]                       }
[17:02:23.397]                       else if (inherits(cond, "condition")) {
[17:02:23.397]                         if (!is.null(pattern)) {
[17:02:23.397]                           computeRestarts <- base::computeRestarts
[17:02:23.397]                           grepl <- base::grepl
[17:02:23.397]                           restarts <- computeRestarts(cond)
[17:02:23.397]                           for (restart in restarts) {
[17:02:23.397]                             name <- restart$name
[17:02:23.397]                             if (is.null(name)) 
[17:02:23.397]                               next
[17:02:23.397]                             if (!grepl(pattern, name)) 
[17:02:23.397]                               next
[17:02:23.397]                             invokeRestart(restart)
[17:02:23.397]                             muffled <- TRUE
[17:02:23.397]                             break
[17:02:23.397]                           }
[17:02:23.397]                         }
[17:02:23.397]                       }
[17:02:23.397]                       invisible(muffled)
[17:02:23.397]                     }
[17:02:23.397]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.397]                   }
[17:02:23.397]                 }
[17:02:23.397]                 else {
[17:02:23.397]                   if (TRUE) {
[17:02:23.397]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.397]                     {
[17:02:23.397]                       inherits <- base::inherits
[17:02:23.397]                       invokeRestart <- base::invokeRestart
[17:02:23.397]                       is.null <- base::is.null
[17:02:23.397]                       muffled <- FALSE
[17:02:23.397]                       if (inherits(cond, "message")) {
[17:02:23.397]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.397]                         if (muffled) 
[17:02:23.397]                           invokeRestart("muffleMessage")
[17:02:23.397]                       }
[17:02:23.397]                       else if (inherits(cond, "warning")) {
[17:02:23.397]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.397]                         if (muffled) 
[17:02:23.397]                           invokeRestart("muffleWarning")
[17:02:23.397]                       }
[17:02:23.397]                       else if (inherits(cond, "condition")) {
[17:02:23.397]                         if (!is.null(pattern)) {
[17:02:23.397]                           computeRestarts <- base::computeRestarts
[17:02:23.397]                           grepl <- base::grepl
[17:02:23.397]                           restarts <- computeRestarts(cond)
[17:02:23.397]                           for (restart in restarts) {
[17:02:23.397]                             name <- restart$name
[17:02:23.397]                             if (is.null(name)) 
[17:02:23.397]                               next
[17:02:23.397]                             if (!grepl(pattern, name)) 
[17:02:23.397]                               next
[17:02:23.397]                             invokeRestart(restart)
[17:02:23.397]                             muffled <- TRUE
[17:02:23.397]                             break
[17:02:23.397]                           }
[17:02:23.397]                         }
[17:02:23.397]                       }
[17:02:23.397]                       invisible(muffled)
[17:02:23.397]                     }
[17:02:23.397]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.397]                   }
[17:02:23.397]                 }
[17:02:23.397]             }
[17:02:23.397]         }))
[17:02:23.397]     }, error = function(ex) {
[17:02:23.397]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:23.397]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.397]                 ...future.rng), started = ...future.startTime, 
[17:02:23.397]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:23.397]             version = "1.8"), class = "FutureResult")
[17:02:23.397]     }, finally = {
[17:02:23.397]         if (!identical(...future.workdir, getwd())) 
[17:02:23.397]             setwd(...future.workdir)
[17:02:23.397]         {
[17:02:23.397]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:23.397]                 ...future.oldOptions$nwarnings <- NULL
[17:02:23.397]             }
[17:02:23.397]             base::options(...future.oldOptions)
[17:02:23.397]             if (.Platform$OS.type == "windows") {
[17:02:23.397]                 old_names <- names(...future.oldEnvVars)
[17:02:23.397]                 envs <- base::Sys.getenv()
[17:02:23.397]                 names <- names(envs)
[17:02:23.397]                 common <- intersect(names, old_names)
[17:02:23.397]                 added <- setdiff(names, old_names)
[17:02:23.397]                 removed <- setdiff(old_names, names)
[17:02:23.397]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:23.397]                   envs[common]]
[17:02:23.397]                 NAMES <- toupper(changed)
[17:02:23.397]                 args <- list()
[17:02:23.397]                 for (kk in seq_along(NAMES)) {
[17:02:23.397]                   name <- changed[[kk]]
[17:02:23.397]                   NAME <- NAMES[[kk]]
[17:02:23.397]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.397]                     next
[17:02:23.397]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.397]                 }
[17:02:23.397]                 NAMES <- toupper(added)
[17:02:23.397]                 for (kk in seq_along(NAMES)) {
[17:02:23.397]                   name <- added[[kk]]
[17:02:23.397]                   NAME <- NAMES[[kk]]
[17:02:23.397]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.397]                     next
[17:02:23.397]                   args[[name]] <- ""
[17:02:23.397]                 }
[17:02:23.397]                 NAMES <- toupper(removed)
[17:02:23.397]                 for (kk in seq_along(NAMES)) {
[17:02:23.397]                   name <- removed[[kk]]
[17:02:23.397]                   NAME <- NAMES[[kk]]
[17:02:23.397]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.397]                     next
[17:02:23.397]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.397]                 }
[17:02:23.397]                 if (length(args) > 0) 
[17:02:23.397]                   base::do.call(base::Sys.setenv, args = args)
[17:02:23.397]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:23.397]             }
[17:02:23.397]             else {
[17:02:23.397]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:23.397]             }
[17:02:23.397]             {
[17:02:23.397]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:23.397]                   0L) {
[17:02:23.397]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:23.397]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:23.397]                   base::options(opts)
[17:02:23.397]                 }
[17:02:23.397]                 {
[17:02:23.397]                   {
[17:02:23.397]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:23.397]                     NULL
[17:02:23.397]                   }
[17:02:23.397]                   options(future.plan = NULL)
[17:02:23.397]                   if (is.na(NA_character_)) 
[17:02:23.397]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.397]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:23.397]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:23.397]                     .init = FALSE)
[17:02:23.397]                 }
[17:02:23.397]             }
[17:02:23.397]         }
[17:02:23.397]     })
[17:02:23.397]     if (TRUE) {
[17:02:23.397]         base::sink(type = "output", split = FALSE)
[17:02:23.397]         if (TRUE) {
[17:02:23.397]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:23.397]         }
[17:02:23.397]         else {
[17:02:23.397]             ...future.result["stdout"] <- base::list(NULL)
[17:02:23.397]         }
[17:02:23.397]         base::close(...future.stdout)
[17:02:23.397]         ...future.stdout <- NULL
[17:02:23.397]     }
[17:02:23.397]     ...future.result$conditions <- ...future.conditions
[17:02:23.397]     ...future.result$finished <- base::Sys.time()
[17:02:23.397]     ...future.result
[17:02:23.397] }
[17:02:23.400] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:23.400] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:02:23.400] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:02:23.400] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:23.401] MultisessionFuture started
[17:02:23.401] - Launch lazy future ... done
[17:02:23.401] run() for ‘MultisessionFuture’ ... done
[17:02:23.401] result() for ClusterFuture ...
[17:02:23.401] receiveMessageFromWorker() for ClusterFuture ...
[17:02:23.401] - Validating connection of MultisessionFuture
[17:02:23.402] - received message: FutureResult
[17:02:23.402] - Received FutureResult
[17:02:23.403] - Erased future from FutureRegistry
[17:02:23.403] result() for ClusterFuture ...
[17:02:23.403] - result already collected: FutureResult
[17:02:23.403] result() for ClusterFuture ... done
[17:02:23.403] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:23.403] result() for ClusterFuture ... done
[17:02:23.403] result() for ClusterFuture ...
[17:02:23.403] - result already collected: FutureResult
[17:02:23.403] result() for ClusterFuture ... done
[17:02:23.403] getGlobalsAndPackages() ...
[17:02:23.404] Searching for globals...
[17:02:23.404] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:23.405] Searching for globals ... DONE
[17:02:23.405] Resolving globals: FALSE
[17:02:23.405] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:23.405] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:23.405] - globals: [1] ‘a’
[17:02:23.406] 
[17:02:23.406] getGlobalsAndPackages() ... DONE
[17:02:23.406] run() for ‘Future’ ...
[17:02:23.406] - state: ‘created’
[17:02:23.406] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:23.420] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:23.420] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:23.420]   - Field: ‘node’
[17:02:23.420]   - Field: ‘label’
[17:02:23.420]   - Field: ‘local’
[17:02:23.420]   - Field: ‘owner’
[17:02:23.421]   - Field: ‘envir’
[17:02:23.421]   - Field: ‘workers’
[17:02:23.421]   - Field: ‘packages’
[17:02:23.421]   - Field: ‘gc’
[17:02:23.421]   - Field: ‘conditions’
[17:02:23.421]   - Field: ‘persistent’
[17:02:23.421]   - Field: ‘expr’
[17:02:23.421]   - Field: ‘uuid’
[17:02:23.421]   - Field: ‘seed’
[17:02:23.421]   - Field: ‘version’
[17:02:23.421]   - Field: ‘result’
[17:02:23.421]   - Field: ‘asynchronous’
[17:02:23.422]   - Field: ‘calls’
[17:02:23.422]   - Field: ‘globals’
[17:02:23.422]   - Field: ‘stdout’
[17:02:23.422]   - Field: ‘earlySignal’
[17:02:23.422]   - Field: ‘lazy’
[17:02:23.422]   - Field: ‘state’
[17:02:23.422] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:23.422] - Launch lazy future ...
[17:02:23.422] Packages needed by the future expression (n = 0): <none>
[17:02:23.423] Packages needed by future strategies (n = 0): <none>
[17:02:23.423] {
[17:02:23.423]     {
[17:02:23.423]         {
[17:02:23.423]             ...future.startTime <- base::Sys.time()
[17:02:23.423]             {
[17:02:23.423]                 {
[17:02:23.423]                   {
[17:02:23.423]                     {
[17:02:23.423]                       base::local({
[17:02:23.423]                         has_future <- base::requireNamespace("future", 
[17:02:23.423]                           quietly = TRUE)
[17:02:23.423]                         if (has_future) {
[17:02:23.423]                           ns <- base::getNamespace("future")
[17:02:23.423]                           version <- ns[[".package"]][["version"]]
[17:02:23.423]                           if (is.null(version)) 
[17:02:23.423]                             version <- utils::packageVersion("future")
[17:02:23.423]                         }
[17:02:23.423]                         else {
[17:02:23.423]                           version <- NULL
[17:02:23.423]                         }
[17:02:23.423]                         if (!has_future || version < "1.8.0") {
[17:02:23.423]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:23.423]                             "", base::R.version$version.string), 
[17:02:23.423]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:23.423]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:23.423]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:23.423]                               "release", "version")], collapse = " "), 
[17:02:23.423]                             hostname = base::Sys.info()[["nodename"]])
[17:02:23.423]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:23.423]                             info)
[17:02:23.423]                           info <- base::paste(info, collapse = "; ")
[17:02:23.423]                           if (!has_future) {
[17:02:23.423]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:23.423]                               info)
[17:02:23.423]                           }
[17:02:23.423]                           else {
[17:02:23.423]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:23.423]                               info, version)
[17:02:23.423]                           }
[17:02:23.423]                           base::stop(msg)
[17:02:23.423]                         }
[17:02:23.423]                       })
[17:02:23.423]                     }
[17:02:23.423]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:23.423]                     base::options(mc.cores = 1L)
[17:02:23.423]                   }
[17:02:23.423]                   ...future.strategy.old <- future::plan("list")
[17:02:23.423]                   options(future.plan = NULL)
[17:02:23.423]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.423]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:23.423]                 }
[17:02:23.423]                 ...future.workdir <- getwd()
[17:02:23.423]             }
[17:02:23.423]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:23.423]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:23.423]         }
[17:02:23.423]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:23.423]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:23.423]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:23.423]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:23.423]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:23.423]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:23.423]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:23.423]             base::names(...future.oldOptions))
[17:02:23.423]     }
[17:02:23.423]     if (FALSE) {
[17:02:23.423]     }
[17:02:23.423]     else {
[17:02:23.423]         if (TRUE) {
[17:02:23.423]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:23.423]                 open = "w")
[17:02:23.423]         }
[17:02:23.423]         else {
[17:02:23.423]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:23.423]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:23.423]         }
[17:02:23.423]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:23.423]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:23.423]             base::sink(type = "output", split = FALSE)
[17:02:23.423]             base::close(...future.stdout)
[17:02:23.423]         }, add = TRUE)
[17:02:23.423]     }
[17:02:23.423]     ...future.frame <- base::sys.nframe()
[17:02:23.423]     ...future.conditions <- base::list()
[17:02:23.423]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:23.423]     if (FALSE) {
[17:02:23.423]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:23.423]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:23.423]     }
[17:02:23.423]     ...future.result <- base::tryCatch({
[17:02:23.423]         base::withCallingHandlers({
[17:02:23.423]             ...future.value <- base::withVisible(base::local({
[17:02:23.423]                 ...future.makeSendCondition <- base::local({
[17:02:23.423]                   sendCondition <- NULL
[17:02:23.423]                   function(frame = 1L) {
[17:02:23.423]                     if (is.function(sendCondition)) 
[17:02:23.423]                       return(sendCondition)
[17:02:23.423]                     ns <- getNamespace("parallel")
[17:02:23.423]                     if (exists("sendData", mode = "function", 
[17:02:23.423]                       envir = ns)) {
[17:02:23.423]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:23.423]                         envir = ns)
[17:02:23.423]                       envir <- sys.frame(frame)
[17:02:23.423]                       master <- NULL
[17:02:23.423]                       while (!identical(envir, .GlobalEnv) && 
[17:02:23.423]                         !identical(envir, emptyenv())) {
[17:02:23.423]                         if (exists("master", mode = "list", envir = envir, 
[17:02:23.423]                           inherits = FALSE)) {
[17:02:23.423]                           master <- get("master", mode = "list", 
[17:02:23.423]                             envir = envir, inherits = FALSE)
[17:02:23.423]                           if (inherits(master, c("SOCKnode", 
[17:02:23.423]                             "SOCK0node"))) {
[17:02:23.423]                             sendCondition <<- function(cond) {
[17:02:23.423]                               data <- list(type = "VALUE", value = cond, 
[17:02:23.423]                                 success = TRUE)
[17:02:23.423]                               parallel_sendData(master, data)
[17:02:23.423]                             }
[17:02:23.423]                             return(sendCondition)
[17:02:23.423]                           }
[17:02:23.423]                         }
[17:02:23.423]                         frame <- frame + 1L
[17:02:23.423]                         envir <- sys.frame(frame)
[17:02:23.423]                       }
[17:02:23.423]                     }
[17:02:23.423]                     sendCondition <<- function(cond) NULL
[17:02:23.423]                   }
[17:02:23.423]                 })
[17:02:23.423]                 withCallingHandlers({
[17:02:23.423]                   {
[17:02:23.423]                     2 * a
[17:02:23.423]                   }
[17:02:23.423]                 }, immediateCondition = function(cond) {
[17:02:23.423]                   sendCondition <- ...future.makeSendCondition()
[17:02:23.423]                   sendCondition(cond)
[17:02:23.423]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.423]                   {
[17:02:23.423]                     inherits <- base::inherits
[17:02:23.423]                     invokeRestart <- base::invokeRestart
[17:02:23.423]                     is.null <- base::is.null
[17:02:23.423]                     muffled <- FALSE
[17:02:23.423]                     if (inherits(cond, "message")) {
[17:02:23.423]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:23.423]                       if (muffled) 
[17:02:23.423]                         invokeRestart("muffleMessage")
[17:02:23.423]                     }
[17:02:23.423]                     else if (inherits(cond, "warning")) {
[17:02:23.423]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:23.423]                       if (muffled) 
[17:02:23.423]                         invokeRestart("muffleWarning")
[17:02:23.423]                     }
[17:02:23.423]                     else if (inherits(cond, "condition")) {
[17:02:23.423]                       if (!is.null(pattern)) {
[17:02:23.423]                         computeRestarts <- base::computeRestarts
[17:02:23.423]                         grepl <- base::grepl
[17:02:23.423]                         restarts <- computeRestarts(cond)
[17:02:23.423]                         for (restart in restarts) {
[17:02:23.423]                           name <- restart$name
[17:02:23.423]                           if (is.null(name)) 
[17:02:23.423]                             next
[17:02:23.423]                           if (!grepl(pattern, name)) 
[17:02:23.423]                             next
[17:02:23.423]                           invokeRestart(restart)
[17:02:23.423]                           muffled <- TRUE
[17:02:23.423]                           break
[17:02:23.423]                         }
[17:02:23.423]                       }
[17:02:23.423]                     }
[17:02:23.423]                     invisible(muffled)
[17:02:23.423]                   }
[17:02:23.423]                   muffleCondition(cond)
[17:02:23.423]                 })
[17:02:23.423]             }))
[17:02:23.423]             future::FutureResult(value = ...future.value$value, 
[17:02:23.423]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.423]                   ...future.rng), globalenv = if (FALSE) 
[17:02:23.423]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:23.423]                     ...future.globalenv.names))
[17:02:23.423]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:23.423]         }, condition = base::local({
[17:02:23.423]             c <- base::c
[17:02:23.423]             inherits <- base::inherits
[17:02:23.423]             invokeRestart <- base::invokeRestart
[17:02:23.423]             length <- base::length
[17:02:23.423]             list <- base::list
[17:02:23.423]             seq.int <- base::seq.int
[17:02:23.423]             signalCondition <- base::signalCondition
[17:02:23.423]             sys.calls <- base::sys.calls
[17:02:23.423]             `[[` <- base::`[[`
[17:02:23.423]             `+` <- base::`+`
[17:02:23.423]             `<<-` <- base::`<<-`
[17:02:23.423]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:23.423]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:23.423]                   3L)]
[17:02:23.423]             }
[17:02:23.423]             function(cond) {
[17:02:23.423]                 is_error <- inherits(cond, "error")
[17:02:23.423]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:23.423]                   NULL)
[17:02:23.423]                 if (is_error) {
[17:02:23.423]                   sessionInformation <- function() {
[17:02:23.423]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:23.423]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:23.423]                       search = base::search(), system = base::Sys.info())
[17:02:23.423]                   }
[17:02:23.423]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.423]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:23.423]                     cond$call), session = sessionInformation(), 
[17:02:23.423]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:23.423]                   signalCondition(cond)
[17:02:23.423]                 }
[17:02:23.423]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:23.423]                 "immediateCondition"))) {
[17:02:23.423]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:23.423]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.423]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:23.423]                   if (TRUE && !signal) {
[17:02:23.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.423]                     {
[17:02:23.423]                       inherits <- base::inherits
[17:02:23.423]                       invokeRestart <- base::invokeRestart
[17:02:23.423]                       is.null <- base::is.null
[17:02:23.423]                       muffled <- FALSE
[17:02:23.423]                       if (inherits(cond, "message")) {
[17:02:23.423]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.423]                         if (muffled) 
[17:02:23.423]                           invokeRestart("muffleMessage")
[17:02:23.423]                       }
[17:02:23.423]                       else if (inherits(cond, "warning")) {
[17:02:23.423]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.423]                         if (muffled) 
[17:02:23.423]                           invokeRestart("muffleWarning")
[17:02:23.423]                       }
[17:02:23.423]                       else if (inherits(cond, "condition")) {
[17:02:23.423]                         if (!is.null(pattern)) {
[17:02:23.423]                           computeRestarts <- base::computeRestarts
[17:02:23.423]                           grepl <- base::grepl
[17:02:23.423]                           restarts <- computeRestarts(cond)
[17:02:23.423]                           for (restart in restarts) {
[17:02:23.423]                             name <- restart$name
[17:02:23.423]                             if (is.null(name)) 
[17:02:23.423]                               next
[17:02:23.423]                             if (!grepl(pattern, name)) 
[17:02:23.423]                               next
[17:02:23.423]                             invokeRestart(restart)
[17:02:23.423]                             muffled <- TRUE
[17:02:23.423]                             break
[17:02:23.423]                           }
[17:02:23.423]                         }
[17:02:23.423]                       }
[17:02:23.423]                       invisible(muffled)
[17:02:23.423]                     }
[17:02:23.423]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.423]                   }
[17:02:23.423]                 }
[17:02:23.423]                 else {
[17:02:23.423]                   if (TRUE) {
[17:02:23.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.423]                     {
[17:02:23.423]                       inherits <- base::inherits
[17:02:23.423]                       invokeRestart <- base::invokeRestart
[17:02:23.423]                       is.null <- base::is.null
[17:02:23.423]                       muffled <- FALSE
[17:02:23.423]                       if (inherits(cond, "message")) {
[17:02:23.423]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.423]                         if (muffled) 
[17:02:23.423]                           invokeRestart("muffleMessage")
[17:02:23.423]                       }
[17:02:23.423]                       else if (inherits(cond, "warning")) {
[17:02:23.423]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.423]                         if (muffled) 
[17:02:23.423]                           invokeRestart("muffleWarning")
[17:02:23.423]                       }
[17:02:23.423]                       else if (inherits(cond, "condition")) {
[17:02:23.423]                         if (!is.null(pattern)) {
[17:02:23.423]                           computeRestarts <- base::computeRestarts
[17:02:23.423]                           grepl <- base::grepl
[17:02:23.423]                           restarts <- computeRestarts(cond)
[17:02:23.423]                           for (restart in restarts) {
[17:02:23.423]                             name <- restart$name
[17:02:23.423]                             if (is.null(name)) 
[17:02:23.423]                               next
[17:02:23.423]                             if (!grepl(pattern, name)) 
[17:02:23.423]                               next
[17:02:23.423]                             invokeRestart(restart)
[17:02:23.423]                             muffled <- TRUE
[17:02:23.423]                             break
[17:02:23.423]                           }
[17:02:23.423]                         }
[17:02:23.423]                       }
[17:02:23.423]                       invisible(muffled)
[17:02:23.423]                     }
[17:02:23.423]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.423]                   }
[17:02:23.423]                 }
[17:02:23.423]             }
[17:02:23.423]         }))
[17:02:23.423]     }, error = function(ex) {
[17:02:23.423]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:23.423]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.423]                 ...future.rng), started = ...future.startTime, 
[17:02:23.423]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:23.423]             version = "1.8"), class = "FutureResult")
[17:02:23.423]     }, finally = {
[17:02:23.423]         if (!identical(...future.workdir, getwd())) 
[17:02:23.423]             setwd(...future.workdir)
[17:02:23.423]         {
[17:02:23.423]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:23.423]                 ...future.oldOptions$nwarnings <- NULL
[17:02:23.423]             }
[17:02:23.423]             base::options(...future.oldOptions)
[17:02:23.423]             if (.Platform$OS.type == "windows") {
[17:02:23.423]                 old_names <- names(...future.oldEnvVars)
[17:02:23.423]                 envs <- base::Sys.getenv()
[17:02:23.423]                 names <- names(envs)
[17:02:23.423]                 common <- intersect(names, old_names)
[17:02:23.423]                 added <- setdiff(names, old_names)
[17:02:23.423]                 removed <- setdiff(old_names, names)
[17:02:23.423]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:23.423]                   envs[common]]
[17:02:23.423]                 NAMES <- toupper(changed)
[17:02:23.423]                 args <- list()
[17:02:23.423]                 for (kk in seq_along(NAMES)) {
[17:02:23.423]                   name <- changed[[kk]]
[17:02:23.423]                   NAME <- NAMES[[kk]]
[17:02:23.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.423]                     next
[17:02:23.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.423]                 }
[17:02:23.423]                 NAMES <- toupper(added)
[17:02:23.423]                 for (kk in seq_along(NAMES)) {
[17:02:23.423]                   name <- added[[kk]]
[17:02:23.423]                   NAME <- NAMES[[kk]]
[17:02:23.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.423]                     next
[17:02:23.423]                   args[[name]] <- ""
[17:02:23.423]                 }
[17:02:23.423]                 NAMES <- toupper(removed)
[17:02:23.423]                 for (kk in seq_along(NAMES)) {
[17:02:23.423]                   name <- removed[[kk]]
[17:02:23.423]                   NAME <- NAMES[[kk]]
[17:02:23.423]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.423]                     next
[17:02:23.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.423]                 }
[17:02:23.423]                 if (length(args) > 0) 
[17:02:23.423]                   base::do.call(base::Sys.setenv, args = args)
[17:02:23.423]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:23.423]             }
[17:02:23.423]             else {
[17:02:23.423]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:23.423]             }
[17:02:23.423]             {
[17:02:23.423]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:23.423]                   0L) {
[17:02:23.423]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:23.423]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:23.423]                   base::options(opts)
[17:02:23.423]                 }
[17:02:23.423]                 {
[17:02:23.423]                   {
[17:02:23.423]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:23.423]                     NULL
[17:02:23.423]                   }
[17:02:23.423]                   options(future.plan = NULL)
[17:02:23.423]                   if (is.na(NA_character_)) 
[17:02:23.423]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.423]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:23.423]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:23.423]                     .init = FALSE)
[17:02:23.423]                 }
[17:02:23.423]             }
[17:02:23.423]         }
[17:02:23.423]     })
[17:02:23.423]     if (TRUE) {
[17:02:23.423]         base::sink(type = "output", split = FALSE)
[17:02:23.423]         if (TRUE) {
[17:02:23.423]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:23.423]         }
[17:02:23.423]         else {
[17:02:23.423]             ...future.result["stdout"] <- base::list(NULL)
[17:02:23.423]         }
[17:02:23.423]         base::close(...future.stdout)
[17:02:23.423]         ...future.stdout <- NULL
[17:02:23.423]     }
[17:02:23.423]     ...future.result$conditions <- ...future.conditions
[17:02:23.423]     ...future.result$finished <- base::Sys.time()
[17:02:23.423]     ...future.result
[17:02:23.423] }
[17:02:23.426] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:23.426] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:02:23.426] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:02:23.426] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:23.427] MultisessionFuture started
[17:02:23.427] - Launch lazy future ... done
[17:02:23.427] run() for ‘MultisessionFuture’ ... done
[17:02:23.427] result() for ClusterFuture ...
[17:02:23.427] receiveMessageFromWorker() for ClusterFuture ...
[17:02:23.427] - Validating connection of MultisessionFuture
[17:02:23.428] - received message: FutureResult
[17:02:23.428] - Received FutureResult
[17:02:23.429] - Erased future from FutureRegistry
[17:02:23.429] result() for ClusterFuture ...
[17:02:23.429] - result already collected: FutureResult
[17:02:23.429] result() for ClusterFuture ... done
[17:02:23.429] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:23.429] result() for ClusterFuture ... done
[17:02:23.429] result() for ClusterFuture ...
[17:02:23.429] - result already collected: FutureResult
[17:02:23.429] result() for ClusterFuture ... done
[17:02:23.429] getGlobalsAndPackages() ...
[17:02:23.430] Searching for globals...
[17:02:23.430] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:23.431] Searching for globals ... DONE
[17:02:23.431] Resolving globals: FALSE
[17:02:23.431] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:23.431] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:23.431] - globals: [1] ‘a’
[17:02:23.432] 
[17:02:23.432] getGlobalsAndPackages() ... DONE
[17:02:23.432] run() for ‘Future’ ...
[17:02:23.432] - state: ‘created’
[17:02:23.432] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:23.447] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:23.447] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:23.447]   - Field: ‘node’
[17:02:23.447]   - Field: ‘label’
[17:02:23.447]   - Field: ‘local’
[17:02:23.448]   - Field: ‘owner’
[17:02:23.448]   - Field: ‘envir’
[17:02:23.448]   - Field: ‘workers’
[17:02:23.448]   - Field: ‘packages’
[17:02:23.448]   - Field: ‘gc’
[17:02:23.448]   - Field: ‘conditions’
[17:02:23.448]   - Field: ‘persistent’
[17:02:23.448]   - Field: ‘expr’
[17:02:23.448]   - Field: ‘uuid’
[17:02:23.448]   - Field: ‘seed’
[17:02:23.449]   - Field: ‘version’
[17:02:23.449]   - Field: ‘result’
[17:02:23.449]   - Field: ‘asynchronous’
[17:02:23.449]   - Field: ‘calls’
[17:02:23.449]   - Field: ‘globals’
[17:02:23.449]   - Field: ‘stdout’
[17:02:23.449]   - Field: ‘earlySignal’
[17:02:23.449]   - Field: ‘lazy’
[17:02:23.449]   - Field: ‘state’
[17:02:23.449] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:23.449] - Launch lazy future ...
[17:02:23.450] Packages needed by the future expression (n = 0): <none>
[17:02:23.450] Packages needed by future strategies (n = 0): <none>
[17:02:23.450] {
[17:02:23.450]     {
[17:02:23.450]         {
[17:02:23.450]             ...future.startTime <- base::Sys.time()
[17:02:23.450]             {
[17:02:23.450]                 {
[17:02:23.450]                   {
[17:02:23.450]                     {
[17:02:23.450]                       base::local({
[17:02:23.450]                         has_future <- base::requireNamespace("future", 
[17:02:23.450]                           quietly = TRUE)
[17:02:23.450]                         if (has_future) {
[17:02:23.450]                           ns <- base::getNamespace("future")
[17:02:23.450]                           version <- ns[[".package"]][["version"]]
[17:02:23.450]                           if (is.null(version)) 
[17:02:23.450]                             version <- utils::packageVersion("future")
[17:02:23.450]                         }
[17:02:23.450]                         else {
[17:02:23.450]                           version <- NULL
[17:02:23.450]                         }
[17:02:23.450]                         if (!has_future || version < "1.8.0") {
[17:02:23.450]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:23.450]                             "", base::R.version$version.string), 
[17:02:23.450]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:23.450]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:23.450]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:23.450]                               "release", "version")], collapse = " "), 
[17:02:23.450]                             hostname = base::Sys.info()[["nodename"]])
[17:02:23.450]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:23.450]                             info)
[17:02:23.450]                           info <- base::paste(info, collapse = "; ")
[17:02:23.450]                           if (!has_future) {
[17:02:23.450]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:23.450]                               info)
[17:02:23.450]                           }
[17:02:23.450]                           else {
[17:02:23.450]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:23.450]                               info, version)
[17:02:23.450]                           }
[17:02:23.450]                           base::stop(msg)
[17:02:23.450]                         }
[17:02:23.450]                       })
[17:02:23.450]                     }
[17:02:23.450]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:23.450]                     base::options(mc.cores = 1L)
[17:02:23.450]                   }
[17:02:23.450]                   ...future.strategy.old <- future::plan("list")
[17:02:23.450]                   options(future.plan = NULL)
[17:02:23.450]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.450]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:23.450]                 }
[17:02:23.450]                 ...future.workdir <- getwd()
[17:02:23.450]             }
[17:02:23.450]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:23.450]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:23.450]         }
[17:02:23.450]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:23.450]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:23.450]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:23.450]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:23.450]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:23.450]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:23.450]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:23.450]             base::names(...future.oldOptions))
[17:02:23.450]     }
[17:02:23.450]     if (FALSE) {
[17:02:23.450]     }
[17:02:23.450]     else {
[17:02:23.450]         if (TRUE) {
[17:02:23.450]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:23.450]                 open = "w")
[17:02:23.450]         }
[17:02:23.450]         else {
[17:02:23.450]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:23.450]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:23.450]         }
[17:02:23.450]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:23.450]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:23.450]             base::sink(type = "output", split = FALSE)
[17:02:23.450]             base::close(...future.stdout)
[17:02:23.450]         }, add = TRUE)
[17:02:23.450]     }
[17:02:23.450]     ...future.frame <- base::sys.nframe()
[17:02:23.450]     ...future.conditions <- base::list()
[17:02:23.450]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:23.450]     if (FALSE) {
[17:02:23.450]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:23.450]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:23.450]     }
[17:02:23.450]     ...future.result <- base::tryCatch({
[17:02:23.450]         base::withCallingHandlers({
[17:02:23.450]             ...future.value <- base::withVisible(base::local({
[17:02:23.450]                 ...future.makeSendCondition <- base::local({
[17:02:23.450]                   sendCondition <- NULL
[17:02:23.450]                   function(frame = 1L) {
[17:02:23.450]                     if (is.function(sendCondition)) 
[17:02:23.450]                       return(sendCondition)
[17:02:23.450]                     ns <- getNamespace("parallel")
[17:02:23.450]                     if (exists("sendData", mode = "function", 
[17:02:23.450]                       envir = ns)) {
[17:02:23.450]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:23.450]                         envir = ns)
[17:02:23.450]                       envir <- sys.frame(frame)
[17:02:23.450]                       master <- NULL
[17:02:23.450]                       while (!identical(envir, .GlobalEnv) && 
[17:02:23.450]                         !identical(envir, emptyenv())) {
[17:02:23.450]                         if (exists("master", mode = "list", envir = envir, 
[17:02:23.450]                           inherits = FALSE)) {
[17:02:23.450]                           master <- get("master", mode = "list", 
[17:02:23.450]                             envir = envir, inherits = FALSE)
[17:02:23.450]                           if (inherits(master, c("SOCKnode", 
[17:02:23.450]                             "SOCK0node"))) {
[17:02:23.450]                             sendCondition <<- function(cond) {
[17:02:23.450]                               data <- list(type = "VALUE", value = cond, 
[17:02:23.450]                                 success = TRUE)
[17:02:23.450]                               parallel_sendData(master, data)
[17:02:23.450]                             }
[17:02:23.450]                             return(sendCondition)
[17:02:23.450]                           }
[17:02:23.450]                         }
[17:02:23.450]                         frame <- frame + 1L
[17:02:23.450]                         envir <- sys.frame(frame)
[17:02:23.450]                       }
[17:02:23.450]                     }
[17:02:23.450]                     sendCondition <<- function(cond) NULL
[17:02:23.450]                   }
[17:02:23.450]                 })
[17:02:23.450]                 withCallingHandlers({
[17:02:23.450]                   {
[17:02:23.450]                     2 * a
[17:02:23.450]                   }
[17:02:23.450]                 }, immediateCondition = function(cond) {
[17:02:23.450]                   sendCondition <- ...future.makeSendCondition()
[17:02:23.450]                   sendCondition(cond)
[17:02:23.450]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.450]                   {
[17:02:23.450]                     inherits <- base::inherits
[17:02:23.450]                     invokeRestart <- base::invokeRestart
[17:02:23.450]                     is.null <- base::is.null
[17:02:23.450]                     muffled <- FALSE
[17:02:23.450]                     if (inherits(cond, "message")) {
[17:02:23.450]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:23.450]                       if (muffled) 
[17:02:23.450]                         invokeRestart("muffleMessage")
[17:02:23.450]                     }
[17:02:23.450]                     else if (inherits(cond, "warning")) {
[17:02:23.450]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:23.450]                       if (muffled) 
[17:02:23.450]                         invokeRestart("muffleWarning")
[17:02:23.450]                     }
[17:02:23.450]                     else if (inherits(cond, "condition")) {
[17:02:23.450]                       if (!is.null(pattern)) {
[17:02:23.450]                         computeRestarts <- base::computeRestarts
[17:02:23.450]                         grepl <- base::grepl
[17:02:23.450]                         restarts <- computeRestarts(cond)
[17:02:23.450]                         for (restart in restarts) {
[17:02:23.450]                           name <- restart$name
[17:02:23.450]                           if (is.null(name)) 
[17:02:23.450]                             next
[17:02:23.450]                           if (!grepl(pattern, name)) 
[17:02:23.450]                             next
[17:02:23.450]                           invokeRestart(restart)
[17:02:23.450]                           muffled <- TRUE
[17:02:23.450]                           break
[17:02:23.450]                         }
[17:02:23.450]                       }
[17:02:23.450]                     }
[17:02:23.450]                     invisible(muffled)
[17:02:23.450]                   }
[17:02:23.450]                   muffleCondition(cond)
[17:02:23.450]                 })
[17:02:23.450]             }))
[17:02:23.450]             future::FutureResult(value = ...future.value$value, 
[17:02:23.450]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.450]                   ...future.rng), globalenv = if (FALSE) 
[17:02:23.450]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:23.450]                     ...future.globalenv.names))
[17:02:23.450]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:23.450]         }, condition = base::local({
[17:02:23.450]             c <- base::c
[17:02:23.450]             inherits <- base::inherits
[17:02:23.450]             invokeRestart <- base::invokeRestart
[17:02:23.450]             length <- base::length
[17:02:23.450]             list <- base::list
[17:02:23.450]             seq.int <- base::seq.int
[17:02:23.450]             signalCondition <- base::signalCondition
[17:02:23.450]             sys.calls <- base::sys.calls
[17:02:23.450]             `[[` <- base::`[[`
[17:02:23.450]             `+` <- base::`+`
[17:02:23.450]             `<<-` <- base::`<<-`
[17:02:23.450]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:23.450]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:23.450]                   3L)]
[17:02:23.450]             }
[17:02:23.450]             function(cond) {
[17:02:23.450]                 is_error <- inherits(cond, "error")
[17:02:23.450]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:23.450]                   NULL)
[17:02:23.450]                 if (is_error) {
[17:02:23.450]                   sessionInformation <- function() {
[17:02:23.450]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:23.450]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:23.450]                       search = base::search(), system = base::Sys.info())
[17:02:23.450]                   }
[17:02:23.450]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.450]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:23.450]                     cond$call), session = sessionInformation(), 
[17:02:23.450]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:23.450]                   signalCondition(cond)
[17:02:23.450]                 }
[17:02:23.450]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:23.450]                 "immediateCondition"))) {
[17:02:23.450]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:23.450]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.450]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:23.450]                   if (TRUE && !signal) {
[17:02:23.450]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.450]                     {
[17:02:23.450]                       inherits <- base::inherits
[17:02:23.450]                       invokeRestart <- base::invokeRestart
[17:02:23.450]                       is.null <- base::is.null
[17:02:23.450]                       muffled <- FALSE
[17:02:23.450]                       if (inherits(cond, "message")) {
[17:02:23.450]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.450]                         if (muffled) 
[17:02:23.450]                           invokeRestart("muffleMessage")
[17:02:23.450]                       }
[17:02:23.450]                       else if (inherits(cond, "warning")) {
[17:02:23.450]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.450]                         if (muffled) 
[17:02:23.450]                           invokeRestart("muffleWarning")
[17:02:23.450]                       }
[17:02:23.450]                       else if (inherits(cond, "condition")) {
[17:02:23.450]                         if (!is.null(pattern)) {
[17:02:23.450]                           computeRestarts <- base::computeRestarts
[17:02:23.450]                           grepl <- base::grepl
[17:02:23.450]                           restarts <- computeRestarts(cond)
[17:02:23.450]                           for (restart in restarts) {
[17:02:23.450]                             name <- restart$name
[17:02:23.450]                             if (is.null(name)) 
[17:02:23.450]                               next
[17:02:23.450]                             if (!grepl(pattern, name)) 
[17:02:23.450]                               next
[17:02:23.450]                             invokeRestart(restart)
[17:02:23.450]                             muffled <- TRUE
[17:02:23.450]                             break
[17:02:23.450]                           }
[17:02:23.450]                         }
[17:02:23.450]                       }
[17:02:23.450]                       invisible(muffled)
[17:02:23.450]                     }
[17:02:23.450]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.450]                   }
[17:02:23.450]                 }
[17:02:23.450]                 else {
[17:02:23.450]                   if (TRUE) {
[17:02:23.450]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.450]                     {
[17:02:23.450]                       inherits <- base::inherits
[17:02:23.450]                       invokeRestart <- base::invokeRestart
[17:02:23.450]                       is.null <- base::is.null
[17:02:23.450]                       muffled <- FALSE
[17:02:23.450]                       if (inherits(cond, "message")) {
[17:02:23.450]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.450]                         if (muffled) 
[17:02:23.450]                           invokeRestart("muffleMessage")
[17:02:23.450]                       }
[17:02:23.450]                       else if (inherits(cond, "warning")) {
[17:02:23.450]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.450]                         if (muffled) 
[17:02:23.450]                           invokeRestart("muffleWarning")
[17:02:23.450]                       }
[17:02:23.450]                       else if (inherits(cond, "condition")) {
[17:02:23.450]                         if (!is.null(pattern)) {
[17:02:23.450]                           computeRestarts <- base::computeRestarts
[17:02:23.450]                           grepl <- base::grepl
[17:02:23.450]                           restarts <- computeRestarts(cond)
[17:02:23.450]                           for (restart in restarts) {
[17:02:23.450]                             name <- restart$name
[17:02:23.450]                             if (is.null(name)) 
[17:02:23.450]                               next
[17:02:23.450]                             if (!grepl(pattern, name)) 
[17:02:23.450]                               next
[17:02:23.450]                             invokeRestart(restart)
[17:02:23.450]                             muffled <- TRUE
[17:02:23.450]                             break
[17:02:23.450]                           }
[17:02:23.450]                         }
[17:02:23.450]                       }
[17:02:23.450]                       invisible(muffled)
[17:02:23.450]                     }
[17:02:23.450]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.450]                   }
[17:02:23.450]                 }
[17:02:23.450]             }
[17:02:23.450]         }))
[17:02:23.450]     }, error = function(ex) {
[17:02:23.450]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:23.450]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.450]                 ...future.rng), started = ...future.startTime, 
[17:02:23.450]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:23.450]             version = "1.8"), class = "FutureResult")
[17:02:23.450]     }, finally = {
[17:02:23.450]         if (!identical(...future.workdir, getwd())) 
[17:02:23.450]             setwd(...future.workdir)
[17:02:23.450]         {
[17:02:23.450]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:23.450]                 ...future.oldOptions$nwarnings <- NULL
[17:02:23.450]             }
[17:02:23.450]             base::options(...future.oldOptions)
[17:02:23.450]             if (.Platform$OS.type == "windows") {
[17:02:23.450]                 old_names <- names(...future.oldEnvVars)
[17:02:23.450]                 envs <- base::Sys.getenv()
[17:02:23.450]                 names <- names(envs)
[17:02:23.450]                 common <- intersect(names, old_names)
[17:02:23.450]                 added <- setdiff(names, old_names)
[17:02:23.450]                 removed <- setdiff(old_names, names)
[17:02:23.450]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:23.450]                   envs[common]]
[17:02:23.450]                 NAMES <- toupper(changed)
[17:02:23.450]                 args <- list()
[17:02:23.450]                 for (kk in seq_along(NAMES)) {
[17:02:23.450]                   name <- changed[[kk]]
[17:02:23.450]                   NAME <- NAMES[[kk]]
[17:02:23.450]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.450]                     next
[17:02:23.450]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.450]                 }
[17:02:23.450]                 NAMES <- toupper(added)
[17:02:23.450]                 for (kk in seq_along(NAMES)) {
[17:02:23.450]                   name <- added[[kk]]
[17:02:23.450]                   NAME <- NAMES[[kk]]
[17:02:23.450]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.450]                     next
[17:02:23.450]                   args[[name]] <- ""
[17:02:23.450]                 }
[17:02:23.450]                 NAMES <- toupper(removed)
[17:02:23.450]                 for (kk in seq_along(NAMES)) {
[17:02:23.450]                   name <- removed[[kk]]
[17:02:23.450]                   NAME <- NAMES[[kk]]
[17:02:23.450]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.450]                     next
[17:02:23.450]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.450]                 }
[17:02:23.450]                 if (length(args) > 0) 
[17:02:23.450]                   base::do.call(base::Sys.setenv, args = args)
[17:02:23.450]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:23.450]             }
[17:02:23.450]             else {
[17:02:23.450]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:23.450]             }
[17:02:23.450]             {
[17:02:23.450]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:23.450]                   0L) {
[17:02:23.450]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:23.450]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:23.450]                   base::options(opts)
[17:02:23.450]                 }
[17:02:23.450]                 {
[17:02:23.450]                   {
[17:02:23.450]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:23.450]                     NULL
[17:02:23.450]                   }
[17:02:23.450]                   options(future.plan = NULL)
[17:02:23.450]                   if (is.na(NA_character_)) 
[17:02:23.450]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.450]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:23.450]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:23.450]                     .init = FALSE)
[17:02:23.450]                 }
[17:02:23.450]             }
[17:02:23.450]         }
[17:02:23.450]     })
[17:02:23.450]     if (TRUE) {
[17:02:23.450]         base::sink(type = "output", split = FALSE)
[17:02:23.450]         if (TRUE) {
[17:02:23.450]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:23.450]         }
[17:02:23.450]         else {
[17:02:23.450]             ...future.result["stdout"] <- base::list(NULL)
[17:02:23.450]         }
[17:02:23.450]         base::close(...future.stdout)
[17:02:23.450]         ...future.stdout <- NULL
[17:02:23.450]     }
[17:02:23.450]     ...future.result$conditions <- ...future.conditions
[17:02:23.450]     ...future.result$finished <- base::Sys.time()
[17:02:23.450]     ...future.result
[17:02:23.450] }
[17:02:23.453] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:23.453] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:02:23.454] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:02:23.454] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:23.454] MultisessionFuture started
[17:02:23.454] - Launch lazy future ... done
[17:02:23.454] run() for ‘MultisessionFuture’ ... done
[17:02:23.455] result() for ClusterFuture ...
[17:02:23.455] receiveMessageFromWorker() for ClusterFuture ...
[17:02:23.455] - Validating connection of MultisessionFuture
[17:02:23.456] - received message: FutureResult
[17:02:23.456] - Received FutureResult
[17:02:23.456] - Erased future from FutureRegistry
[17:02:23.456] result() for ClusterFuture ...
[17:02:23.456] - result already collected: FutureResult
[17:02:23.456] result() for ClusterFuture ... done
[17:02:23.456] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:23.456] result() for ClusterFuture ... done
[17:02:23.457] result() for ClusterFuture ...
[17:02:23.457] - result already collected: FutureResult
[17:02:23.457] result() for ClusterFuture ... done
[17:02:23.457] getGlobalsAndPackages() ...
[17:02:23.457] Searching for globals...
[17:02:23.458] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:02:23.458] Searching for globals ... DONE
[17:02:23.458] Resolving globals: FALSE
[17:02:23.459] The total size of the 1 globals is 56 bytes (56 bytes)
[17:02:23.459] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:02:23.459] - globals: [1] ‘a’
[17:02:23.459] 
[17:02:23.459] getGlobalsAndPackages() ... DONE
[17:02:23.460] run() for ‘Future’ ...
[17:02:23.460] - state: ‘created’
[17:02:23.460] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:23.474] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:23.474] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:23.474]   - Field: ‘node’
[17:02:23.474]   - Field: ‘label’
[17:02:23.474]   - Field: ‘local’
[17:02:23.475]   - Field: ‘owner’
[17:02:23.475]   - Field: ‘envir’
[17:02:23.475]   - Field: ‘workers’
[17:02:23.475]   - Field: ‘packages’
[17:02:23.475]   - Field: ‘gc’
[17:02:23.475]   - Field: ‘conditions’
[17:02:23.475]   - Field: ‘persistent’
[17:02:23.475]   - Field: ‘expr’
[17:02:23.475]   - Field: ‘uuid’
[17:02:23.475]   - Field: ‘seed’
[17:02:23.475]   - Field: ‘version’
[17:02:23.476]   - Field: ‘result’
[17:02:23.476]   - Field: ‘asynchronous’
[17:02:23.476]   - Field: ‘calls’
[17:02:23.476]   - Field: ‘globals’
[17:02:23.476]   - Field: ‘stdout’
[17:02:23.476]   - Field: ‘earlySignal’
[17:02:23.476]   - Field: ‘lazy’
[17:02:23.476]   - Field: ‘state’
[17:02:23.476] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:23.476] - Launch lazy future ...
[17:02:23.477] Packages needed by the future expression (n = 0): <none>
[17:02:23.477] Packages needed by future strategies (n = 0): <none>
[17:02:23.477] {
[17:02:23.477]     {
[17:02:23.477]         {
[17:02:23.477]             ...future.startTime <- base::Sys.time()
[17:02:23.477]             {
[17:02:23.477]                 {
[17:02:23.477]                   {
[17:02:23.477]                     {
[17:02:23.477]                       base::local({
[17:02:23.477]                         has_future <- base::requireNamespace("future", 
[17:02:23.477]                           quietly = TRUE)
[17:02:23.477]                         if (has_future) {
[17:02:23.477]                           ns <- base::getNamespace("future")
[17:02:23.477]                           version <- ns[[".package"]][["version"]]
[17:02:23.477]                           if (is.null(version)) 
[17:02:23.477]                             version <- utils::packageVersion("future")
[17:02:23.477]                         }
[17:02:23.477]                         else {
[17:02:23.477]                           version <- NULL
[17:02:23.477]                         }
[17:02:23.477]                         if (!has_future || version < "1.8.0") {
[17:02:23.477]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:23.477]                             "", base::R.version$version.string), 
[17:02:23.477]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:23.477]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:23.477]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:23.477]                               "release", "version")], collapse = " "), 
[17:02:23.477]                             hostname = base::Sys.info()[["nodename"]])
[17:02:23.477]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:23.477]                             info)
[17:02:23.477]                           info <- base::paste(info, collapse = "; ")
[17:02:23.477]                           if (!has_future) {
[17:02:23.477]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:23.477]                               info)
[17:02:23.477]                           }
[17:02:23.477]                           else {
[17:02:23.477]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:23.477]                               info, version)
[17:02:23.477]                           }
[17:02:23.477]                           base::stop(msg)
[17:02:23.477]                         }
[17:02:23.477]                       })
[17:02:23.477]                     }
[17:02:23.477]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:23.477]                     base::options(mc.cores = 1L)
[17:02:23.477]                   }
[17:02:23.477]                   ...future.strategy.old <- future::plan("list")
[17:02:23.477]                   options(future.plan = NULL)
[17:02:23.477]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.477]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:23.477]                 }
[17:02:23.477]                 ...future.workdir <- getwd()
[17:02:23.477]             }
[17:02:23.477]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:23.477]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:23.477]         }
[17:02:23.477]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:23.477]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:23.477]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:23.477]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:23.477]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:23.477]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:23.477]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:23.477]             base::names(...future.oldOptions))
[17:02:23.477]     }
[17:02:23.477]     if (FALSE) {
[17:02:23.477]     }
[17:02:23.477]     else {
[17:02:23.477]         if (TRUE) {
[17:02:23.477]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:23.477]                 open = "w")
[17:02:23.477]         }
[17:02:23.477]         else {
[17:02:23.477]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:23.477]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:23.477]         }
[17:02:23.477]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:23.477]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:23.477]             base::sink(type = "output", split = FALSE)
[17:02:23.477]             base::close(...future.stdout)
[17:02:23.477]         }, add = TRUE)
[17:02:23.477]     }
[17:02:23.477]     ...future.frame <- base::sys.nframe()
[17:02:23.477]     ...future.conditions <- base::list()
[17:02:23.477]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:23.477]     if (FALSE) {
[17:02:23.477]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:23.477]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:23.477]     }
[17:02:23.477]     ...future.result <- base::tryCatch({
[17:02:23.477]         base::withCallingHandlers({
[17:02:23.477]             ...future.value <- base::withVisible(base::local({
[17:02:23.477]                 ...future.makeSendCondition <- base::local({
[17:02:23.477]                   sendCondition <- NULL
[17:02:23.477]                   function(frame = 1L) {
[17:02:23.477]                     if (is.function(sendCondition)) 
[17:02:23.477]                       return(sendCondition)
[17:02:23.477]                     ns <- getNamespace("parallel")
[17:02:23.477]                     if (exists("sendData", mode = "function", 
[17:02:23.477]                       envir = ns)) {
[17:02:23.477]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:23.477]                         envir = ns)
[17:02:23.477]                       envir <- sys.frame(frame)
[17:02:23.477]                       master <- NULL
[17:02:23.477]                       while (!identical(envir, .GlobalEnv) && 
[17:02:23.477]                         !identical(envir, emptyenv())) {
[17:02:23.477]                         if (exists("master", mode = "list", envir = envir, 
[17:02:23.477]                           inherits = FALSE)) {
[17:02:23.477]                           master <- get("master", mode = "list", 
[17:02:23.477]                             envir = envir, inherits = FALSE)
[17:02:23.477]                           if (inherits(master, c("SOCKnode", 
[17:02:23.477]                             "SOCK0node"))) {
[17:02:23.477]                             sendCondition <<- function(cond) {
[17:02:23.477]                               data <- list(type = "VALUE", value = cond, 
[17:02:23.477]                                 success = TRUE)
[17:02:23.477]                               parallel_sendData(master, data)
[17:02:23.477]                             }
[17:02:23.477]                             return(sendCondition)
[17:02:23.477]                           }
[17:02:23.477]                         }
[17:02:23.477]                         frame <- frame + 1L
[17:02:23.477]                         envir <- sys.frame(frame)
[17:02:23.477]                       }
[17:02:23.477]                     }
[17:02:23.477]                     sendCondition <<- function(cond) NULL
[17:02:23.477]                   }
[17:02:23.477]                 })
[17:02:23.477]                 withCallingHandlers({
[17:02:23.477]                   {
[17:02:23.477]                     2 * a
[17:02:23.477]                   }
[17:02:23.477]                 }, immediateCondition = function(cond) {
[17:02:23.477]                   sendCondition <- ...future.makeSendCondition()
[17:02:23.477]                   sendCondition(cond)
[17:02:23.477]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.477]                   {
[17:02:23.477]                     inherits <- base::inherits
[17:02:23.477]                     invokeRestart <- base::invokeRestart
[17:02:23.477]                     is.null <- base::is.null
[17:02:23.477]                     muffled <- FALSE
[17:02:23.477]                     if (inherits(cond, "message")) {
[17:02:23.477]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:23.477]                       if (muffled) 
[17:02:23.477]                         invokeRestart("muffleMessage")
[17:02:23.477]                     }
[17:02:23.477]                     else if (inherits(cond, "warning")) {
[17:02:23.477]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:23.477]                       if (muffled) 
[17:02:23.477]                         invokeRestart("muffleWarning")
[17:02:23.477]                     }
[17:02:23.477]                     else if (inherits(cond, "condition")) {
[17:02:23.477]                       if (!is.null(pattern)) {
[17:02:23.477]                         computeRestarts <- base::computeRestarts
[17:02:23.477]                         grepl <- base::grepl
[17:02:23.477]                         restarts <- computeRestarts(cond)
[17:02:23.477]                         for (restart in restarts) {
[17:02:23.477]                           name <- restart$name
[17:02:23.477]                           if (is.null(name)) 
[17:02:23.477]                             next
[17:02:23.477]                           if (!grepl(pattern, name)) 
[17:02:23.477]                             next
[17:02:23.477]                           invokeRestart(restart)
[17:02:23.477]                           muffled <- TRUE
[17:02:23.477]                           break
[17:02:23.477]                         }
[17:02:23.477]                       }
[17:02:23.477]                     }
[17:02:23.477]                     invisible(muffled)
[17:02:23.477]                   }
[17:02:23.477]                   muffleCondition(cond)
[17:02:23.477]                 })
[17:02:23.477]             }))
[17:02:23.477]             future::FutureResult(value = ...future.value$value, 
[17:02:23.477]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.477]                   ...future.rng), globalenv = if (FALSE) 
[17:02:23.477]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:23.477]                     ...future.globalenv.names))
[17:02:23.477]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:23.477]         }, condition = base::local({
[17:02:23.477]             c <- base::c
[17:02:23.477]             inherits <- base::inherits
[17:02:23.477]             invokeRestart <- base::invokeRestart
[17:02:23.477]             length <- base::length
[17:02:23.477]             list <- base::list
[17:02:23.477]             seq.int <- base::seq.int
[17:02:23.477]             signalCondition <- base::signalCondition
[17:02:23.477]             sys.calls <- base::sys.calls
[17:02:23.477]             `[[` <- base::`[[`
[17:02:23.477]             `+` <- base::`+`
[17:02:23.477]             `<<-` <- base::`<<-`
[17:02:23.477]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:23.477]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:23.477]                   3L)]
[17:02:23.477]             }
[17:02:23.477]             function(cond) {
[17:02:23.477]                 is_error <- inherits(cond, "error")
[17:02:23.477]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:23.477]                   NULL)
[17:02:23.477]                 if (is_error) {
[17:02:23.477]                   sessionInformation <- function() {
[17:02:23.477]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:23.477]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:23.477]                       search = base::search(), system = base::Sys.info())
[17:02:23.477]                   }
[17:02:23.477]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.477]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:23.477]                     cond$call), session = sessionInformation(), 
[17:02:23.477]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:23.477]                   signalCondition(cond)
[17:02:23.477]                 }
[17:02:23.477]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:23.477]                 "immediateCondition"))) {
[17:02:23.477]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:23.477]                   ...future.conditions[[length(...future.conditions) + 
[17:02:23.477]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:23.477]                   if (TRUE && !signal) {
[17:02:23.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.477]                     {
[17:02:23.477]                       inherits <- base::inherits
[17:02:23.477]                       invokeRestart <- base::invokeRestart
[17:02:23.477]                       is.null <- base::is.null
[17:02:23.477]                       muffled <- FALSE
[17:02:23.477]                       if (inherits(cond, "message")) {
[17:02:23.477]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.477]                         if (muffled) 
[17:02:23.477]                           invokeRestart("muffleMessage")
[17:02:23.477]                       }
[17:02:23.477]                       else if (inherits(cond, "warning")) {
[17:02:23.477]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.477]                         if (muffled) 
[17:02:23.477]                           invokeRestart("muffleWarning")
[17:02:23.477]                       }
[17:02:23.477]                       else if (inherits(cond, "condition")) {
[17:02:23.477]                         if (!is.null(pattern)) {
[17:02:23.477]                           computeRestarts <- base::computeRestarts
[17:02:23.477]                           grepl <- base::grepl
[17:02:23.477]                           restarts <- computeRestarts(cond)
[17:02:23.477]                           for (restart in restarts) {
[17:02:23.477]                             name <- restart$name
[17:02:23.477]                             if (is.null(name)) 
[17:02:23.477]                               next
[17:02:23.477]                             if (!grepl(pattern, name)) 
[17:02:23.477]                               next
[17:02:23.477]                             invokeRestart(restart)
[17:02:23.477]                             muffled <- TRUE
[17:02:23.477]                             break
[17:02:23.477]                           }
[17:02:23.477]                         }
[17:02:23.477]                       }
[17:02:23.477]                       invisible(muffled)
[17:02:23.477]                     }
[17:02:23.477]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.477]                   }
[17:02:23.477]                 }
[17:02:23.477]                 else {
[17:02:23.477]                   if (TRUE) {
[17:02:23.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:23.477]                     {
[17:02:23.477]                       inherits <- base::inherits
[17:02:23.477]                       invokeRestart <- base::invokeRestart
[17:02:23.477]                       is.null <- base::is.null
[17:02:23.477]                       muffled <- FALSE
[17:02:23.477]                       if (inherits(cond, "message")) {
[17:02:23.477]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:23.477]                         if (muffled) 
[17:02:23.477]                           invokeRestart("muffleMessage")
[17:02:23.477]                       }
[17:02:23.477]                       else if (inherits(cond, "warning")) {
[17:02:23.477]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:23.477]                         if (muffled) 
[17:02:23.477]                           invokeRestart("muffleWarning")
[17:02:23.477]                       }
[17:02:23.477]                       else if (inherits(cond, "condition")) {
[17:02:23.477]                         if (!is.null(pattern)) {
[17:02:23.477]                           computeRestarts <- base::computeRestarts
[17:02:23.477]                           grepl <- base::grepl
[17:02:23.477]                           restarts <- computeRestarts(cond)
[17:02:23.477]                           for (restart in restarts) {
[17:02:23.477]                             name <- restart$name
[17:02:23.477]                             if (is.null(name)) 
[17:02:23.477]                               next
[17:02:23.477]                             if (!grepl(pattern, name)) 
[17:02:23.477]                               next
[17:02:23.477]                             invokeRestart(restart)
[17:02:23.477]                             muffled <- TRUE
[17:02:23.477]                             break
[17:02:23.477]                           }
[17:02:23.477]                         }
[17:02:23.477]                       }
[17:02:23.477]                       invisible(muffled)
[17:02:23.477]                     }
[17:02:23.477]                     muffleCondition(cond, pattern = "^muffle")
[17:02:23.477]                   }
[17:02:23.477]                 }
[17:02:23.477]             }
[17:02:23.477]         }))
[17:02:23.477]     }, error = function(ex) {
[17:02:23.477]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:23.477]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:23.477]                 ...future.rng), started = ...future.startTime, 
[17:02:23.477]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:23.477]             version = "1.8"), class = "FutureResult")
[17:02:23.477]     }, finally = {
[17:02:23.477]         if (!identical(...future.workdir, getwd())) 
[17:02:23.477]             setwd(...future.workdir)
[17:02:23.477]         {
[17:02:23.477]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:23.477]                 ...future.oldOptions$nwarnings <- NULL
[17:02:23.477]             }
[17:02:23.477]             base::options(...future.oldOptions)
[17:02:23.477]             if (.Platform$OS.type == "windows") {
[17:02:23.477]                 old_names <- names(...future.oldEnvVars)
[17:02:23.477]                 envs <- base::Sys.getenv()
[17:02:23.477]                 names <- names(envs)
[17:02:23.477]                 common <- intersect(names, old_names)
[17:02:23.477]                 added <- setdiff(names, old_names)
[17:02:23.477]                 removed <- setdiff(old_names, names)
[17:02:23.477]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:23.477]                   envs[common]]
[17:02:23.477]                 NAMES <- toupper(changed)
[17:02:23.477]                 args <- list()
[17:02:23.477]                 for (kk in seq_along(NAMES)) {
[17:02:23.477]                   name <- changed[[kk]]
[17:02:23.477]                   NAME <- NAMES[[kk]]
[17:02:23.477]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.477]                     next
[17:02:23.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.477]                 }
[17:02:23.477]                 NAMES <- toupper(added)
[17:02:23.477]                 for (kk in seq_along(NAMES)) {
[17:02:23.477]                   name <- added[[kk]]
[17:02:23.477]                   NAME <- NAMES[[kk]]
[17:02:23.477]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.477]                     next
[17:02:23.477]                   args[[name]] <- ""
[17:02:23.477]                 }
[17:02:23.477]                 NAMES <- toupper(removed)
[17:02:23.477]                 for (kk in seq_along(NAMES)) {
[17:02:23.477]                   name <- removed[[kk]]
[17:02:23.477]                   NAME <- NAMES[[kk]]
[17:02:23.477]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:23.477]                     next
[17:02:23.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:23.477]                 }
[17:02:23.477]                 if (length(args) > 0) 
[17:02:23.477]                   base::do.call(base::Sys.setenv, args = args)
[17:02:23.477]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:23.477]             }
[17:02:23.477]             else {
[17:02:23.477]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:23.477]             }
[17:02:23.477]             {
[17:02:23.477]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:23.477]                   0L) {
[17:02:23.477]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:23.477]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:23.477]                   base::options(opts)
[17:02:23.477]                 }
[17:02:23.477]                 {
[17:02:23.477]                   {
[17:02:23.477]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:23.477]                     NULL
[17:02:23.477]                   }
[17:02:23.477]                   options(future.plan = NULL)
[17:02:23.477]                   if (is.na(NA_character_)) 
[17:02:23.477]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:23.477]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:23.477]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:23.477]                     .init = FALSE)
[17:02:23.477]                 }
[17:02:23.477]             }
[17:02:23.477]         }
[17:02:23.477]     })
[17:02:23.477]     if (TRUE) {
[17:02:23.477]         base::sink(type = "output", split = FALSE)
[17:02:23.477]         if (TRUE) {
[17:02:23.477]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:23.477]         }
[17:02:23.477]         else {
[17:02:23.477]             ...future.result["stdout"] <- base::list(NULL)
[17:02:23.477]         }
[17:02:23.477]         base::close(...future.stdout)
[17:02:23.477]         ...future.stdout <- NULL
[17:02:23.477]     }
[17:02:23.477]     ...future.result$conditions <- ...future.conditions
[17:02:23.477]     ...future.result$finished <- base::Sys.time()
[17:02:23.477]     ...future.result
[17:02:23.477] }
[17:02:23.480] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:02:23.480] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:02:23.480] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:02:23.480] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:02:23.481] MultisessionFuture started
[17:02:23.481] - Launch lazy future ... done
[17:02:23.481] run() for ‘MultisessionFuture’ ... done
[17:02:23.481] result() for ClusterFuture ...
[17:02:23.481] receiveMessageFromWorker() for ClusterFuture ...
[17:02:23.481] - Validating connection of MultisessionFuture
[17:02:23.482] - received message: FutureResult
[17:02:23.483] - Received FutureResult
[17:02:23.483] - Erased future from FutureRegistry
[17:02:23.483] result() for ClusterFuture ...
[17:02:23.483] - result already collected: FutureResult
[17:02:23.483] result() for ClusterFuture ... done
[17:02:23.483] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:23.483] result() for ClusterFuture ... done
[17:02:23.483] result() for ClusterFuture ...
[17:02:23.483] - result already collected: FutureResult
[17:02:23.483] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[17:02:23.484] plan(): Setting new future strategy stack:
[17:02:23.484] List of future strategies:
[17:02:23.484] 1. FutureStrategy:
[17:02:23.484]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:23.484]    - tweaked: FALSE
[17:02:23.484]    - call: future::plan(oplan)
[17:02:23.485] plan(): nbrOfWorkers() = 1
> 
