
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:15.495] plan(): Setting new future strategy stack:
[17:02:15.496] List of future strategies:
[17:02:15.496] 1. sequential:
[17:02:15.496]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:15.496]    - tweaked: FALSE
[17:02:15.496]    - call: future::plan("sequential")
[17:02:15.507] plan(): nbrOfWorkers() = 1
> 
> message("*** Future class ...")
*** Future class ...
> 
> message("*** Future class - exception ...")
*** Future class - exception ...
> 
> f <- Future()
[17:02:15.521] getGlobalsAndPackages() ...
[17:02:15.521] 
[17:02:15.521] - globals: [0] <none>
[17:02:15.521] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
NULL
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: bea4fa5d-47e8-a749-891d-df115c7f3570
Class: ‘Future’, ‘environment’
> 
> res <- tryCatch(value(f), error = identity)
[17:02:15.523] run() for ‘Future’ ...
[17:02:15.523] - state: ‘created’
[17:02:15.523] run() for ‘Future’ ... done
> print(res)
<simpleError: ‘future$lazy’ is not TRUE>
> stopifnot(inherits(res, "error"))
> 
> ## Invalid seed
> res <- tryCatch(f <- Future(42, seed = 1:2), error = identity)
> stopifnot(inherits(res, "error"))
> 
> ## When no packages are exported
> foo <- structure(function(...) { Future(1) }, class = "future")
> plan(foo)
[17:02:15.526] plan(): Setting new future strategy stack:
[17:02:15.526] List of future strategies:
[17:02:15.526] 1. future:
[17:02:15.526]    - args: function (..., workers = "<NULL>")
[17:02:15.526]    - tweaked: FALSE
[17:02:15.526]    - call: plan(foo)
[17:02:15.537] plan(): nbrOfWorkers() = Inf
> f <- Future()
[17:02:15.538] getGlobalsAndPackages() ...
[17:02:15.538] 
[17:02:15.538] - globals: [0] <none>
[17:02:15.538] getGlobalsAndPackages() ... DONE
> expr <- getExpression(f)
[17:02:15.538] Packages needed by the future expression (n = 0): <none>
[17:02:15.539] Packages needed by future strategies (n = 0): <none>
[17:02:15.539] {
[17:02:15.539]     {
[17:02:15.539]         {
[17:02:15.539]             ...future.startTime <- base::Sys.time()
[17:02:15.539]             {
[17:02:15.539]                 {
[17:02:15.539]                   {
[17:02:15.539]                     base::local({
[17:02:15.539]                       has_future <- base::requireNamespace("future", 
[17:02:15.539]                         quietly = TRUE)
[17:02:15.539]                       if (has_future) {
[17:02:15.539]                         ns <- base::getNamespace("future")
[17:02:15.539]                         version <- ns[[".package"]][["version"]]
[17:02:15.539]                         if (is.null(version)) 
[17:02:15.539]                           version <- utils::packageVersion("future")
[17:02:15.539]                       }
[17:02:15.539]                       else {
[17:02:15.539]                         version <- NULL
[17:02:15.539]                       }
[17:02:15.539]                       if (!has_future || version < "1.8.0") {
[17:02:15.539]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:15.539]                           "", base::R.version$version.string), 
[17:02:15.539]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:15.539]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:15.539]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:15.539]                             "release", "version")], collapse = " "), 
[17:02:15.539]                           hostname = base::Sys.info()[["nodename"]])
[17:02:15.539]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:15.539]                           info)
[17:02:15.539]                         info <- base::paste(info, collapse = "; ")
[17:02:15.539]                         if (!has_future) {
[17:02:15.539]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:15.539]                             info)
[17:02:15.539]                         }
[17:02:15.539]                         else {
[17:02:15.539]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:15.539]                             info, version)
[17:02:15.539]                         }
[17:02:15.539]                         base::stop(msg)
[17:02:15.539]                       }
[17:02:15.539]                     })
[17:02:15.539]                   }
[17:02:15.539]                   ...future.strategy.old <- future::plan("list")
[17:02:15.539]                   options(future.plan = NULL)
[17:02:15.539]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:15.539]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:15.539]                 }
[17:02:15.539]                 ...future.workdir <- getwd()
[17:02:15.539]             }
[17:02:15.539]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:15.539]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:15.539]         }
[17:02:15.539]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:15.539]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:15.539]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:15.539]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:15.539]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:15.539]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:15.539]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:15.539]             base::names(...future.oldOptions))
[17:02:15.539]     }
[17:02:15.539]     if (FALSE) {
[17:02:15.539]     }
[17:02:15.539]     else {
[17:02:15.539]         if (TRUE) {
[17:02:15.539]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:15.539]                 open = "w")
[17:02:15.539]         }
[17:02:15.539]         else {
[17:02:15.539]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:15.539]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:15.539]         }
[17:02:15.539]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:15.539]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:15.539]             base::sink(type = "output", split = FALSE)
[17:02:15.539]             base::close(...future.stdout)
[17:02:15.539]         }, add = TRUE)
[17:02:15.539]     }
[17:02:15.539]     ...future.frame <- base::sys.nframe()
[17:02:15.539]     ...future.conditions <- base::list()
[17:02:15.539]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:15.539]     if (FALSE) {
[17:02:15.539]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:15.539]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:15.539]     }
[17:02:15.539]     ...future.result <- base::tryCatch({
[17:02:15.539]         base::withCallingHandlers({
[17:02:15.539]             ...future.value <- base::withVisible(base::local(NULL))
[17:02:15.539]             future::FutureResult(value = ...future.value$value, 
[17:02:15.539]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:15.539]                   ...future.rng), globalenv = if (FALSE) 
[17:02:15.539]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:15.539]                     ...future.globalenv.names))
[17:02:15.539]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:15.539]         }, condition = base::local({
[17:02:15.539]             c <- base::c
[17:02:15.539]             inherits <- base::inherits
[17:02:15.539]             invokeRestart <- base::invokeRestart
[17:02:15.539]             length <- base::length
[17:02:15.539]             list <- base::list
[17:02:15.539]             seq.int <- base::seq.int
[17:02:15.539]             signalCondition <- base::signalCondition
[17:02:15.539]             sys.calls <- base::sys.calls
[17:02:15.539]             `[[` <- base::`[[`
[17:02:15.539]             `+` <- base::`+`
[17:02:15.539]             `<<-` <- base::`<<-`
[17:02:15.539]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:15.539]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:15.539]                   3L)]
[17:02:15.539]             }
[17:02:15.539]             function(cond) {
[17:02:15.539]                 is_error <- inherits(cond, "error")
[17:02:15.539]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:15.539]                   NULL)
[17:02:15.539]                 if (is_error) {
[17:02:15.539]                   sessionInformation <- function() {
[17:02:15.539]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:15.539]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:15.539]                       search = base::search(), system = base::Sys.info())
[17:02:15.539]                   }
[17:02:15.539]                   ...future.conditions[[length(...future.conditions) + 
[17:02:15.539]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:15.539]                     cond$call), session = sessionInformation(), 
[17:02:15.539]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:15.539]                   signalCondition(cond)
[17:02:15.539]                 }
[17:02:15.539]                 else if (!ignore && TRUE && inherits(cond, "condition")) {
[17:02:15.539]                   signal <- FALSE && inherits(cond, character(0))
[17:02:15.539]                   ...future.conditions[[length(...future.conditions) + 
[17:02:15.539]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:15.539]                   if (FALSE && !signal) {
[17:02:15.539]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:15.539]                     {
[17:02:15.539]                       inherits <- base::inherits
[17:02:15.539]                       invokeRestart <- base::invokeRestart
[17:02:15.539]                       is.null <- base::is.null
[17:02:15.539]                       muffled <- FALSE
[17:02:15.539]                       if (inherits(cond, "message")) {
[17:02:15.539]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:15.539]                         if (muffled) 
[17:02:15.539]                           invokeRestart("muffleMessage")
[17:02:15.539]                       }
[17:02:15.539]                       else if (inherits(cond, "warning")) {
[17:02:15.539]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:15.539]                         if (muffled) 
[17:02:15.539]                           invokeRestart("muffleWarning")
[17:02:15.539]                       }
[17:02:15.539]                       else if (inherits(cond, "condition")) {
[17:02:15.539]                         if (!is.null(pattern)) {
[17:02:15.539]                           computeRestarts <- base::computeRestarts
[17:02:15.539]                           grepl <- base::grepl
[17:02:15.539]                           restarts <- computeRestarts(cond)
[17:02:15.539]                           for (restart in restarts) {
[17:02:15.539]                             name <- restart$name
[17:02:15.539]                             if (is.null(name)) 
[17:02:15.539]                               next
[17:02:15.539]                             if (!grepl(pattern, name)) 
[17:02:15.539]                               next
[17:02:15.539]                             invokeRestart(restart)
[17:02:15.539]                             muffled <- TRUE
[17:02:15.539]                             break
[17:02:15.539]                           }
[17:02:15.539]                         }
[17:02:15.539]                       }
[17:02:15.539]                       invisible(muffled)
[17:02:15.539]                     }
[17:02:15.539]                     muffleCondition(cond, pattern = "^muffle")
[17:02:15.539]                   }
[17:02:15.539]                 }
[17:02:15.539]                 else {
[17:02:15.539]                   if (TRUE) {
[17:02:15.539]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:15.539]                     {
[17:02:15.539]                       inherits <- base::inherits
[17:02:15.539]                       invokeRestart <- base::invokeRestart
[17:02:15.539]                       is.null <- base::is.null
[17:02:15.539]                       muffled <- FALSE
[17:02:15.539]                       if (inherits(cond, "message")) {
[17:02:15.539]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:15.539]                         if (muffled) 
[17:02:15.539]                           invokeRestart("muffleMessage")
[17:02:15.539]                       }
[17:02:15.539]                       else if (inherits(cond, "warning")) {
[17:02:15.539]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:15.539]                         if (muffled) 
[17:02:15.539]                           invokeRestart("muffleWarning")
[17:02:15.539]                       }
[17:02:15.539]                       else if (inherits(cond, "condition")) {
[17:02:15.539]                         if (!is.null(pattern)) {
[17:02:15.539]                           computeRestarts <- base::computeRestarts
[17:02:15.539]                           grepl <- base::grepl
[17:02:15.539]                           restarts <- computeRestarts(cond)
[17:02:15.539]                           for (restart in restarts) {
[17:02:15.539]                             name <- restart$name
[17:02:15.539]                             if (is.null(name)) 
[17:02:15.539]                               next
[17:02:15.539]                             if (!grepl(pattern, name)) 
[17:02:15.539]                               next
[17:02:15.539]                             invokeRestart(restart)
[17:02:15.539]                             muffled <- TRUE
[17:02:15.539]                             break
[17:02:15.539]                           }
[17:02:15.539]                         }
[17:02:15.539]                       }
[17:02:15.539]                       invisible(muffled)
[17:02:15.539]                     }
[17:02:15.539]                     muffleCondition(cond, pattern = "^muffle")
[17:02:15.539]                   }
[17:02:15.539]                 }
[17:02:15.539]             }
[17:02:15.539]         }))
[17:02:15.539]     }, error = function(ex) {
[17:02:15.539]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:15.539]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:15.539]                 ...future.rng), started = ...future.startTime, 
[17:02:15.539]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:15.539]             version = "1.8"), class = "FutureResult")
[17:02:15.539]     }, finally = {
[17:02:15.539]         if (!identical(...future.workdir, getwd())) 
[17:02:15.539]             setwd(...future.workdir)
[17:02:15.539]         {
[17:02:15.539]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:15.539]                 ...future.oldOptions$nwarnings <- NULL
[17:02:15.539]             }
[17:02:15.539]             base::options(...future.oldOptions)
[17:02:15.539]             if (.Platform$OS.type == "windows") {
[17:02:15.539]                 old_names <- names(...future.oldEnvVars)
[17:02:15.539]                 envs <- base::Sys.getenv()
[17:02:15.539]                 names <- names(envs)
[17:02:15.539]                 common <- intersect(names, old_names)
[17:02:15.539]                 added <- setdiff(names, old_names)
[17:02:15.539]                 removed <- setdiff(old_names, names)
[17:02:15.539]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:15.539]                   envs[common]]
[17:02:15.539]                 NAMES <- toupper(changed)
[17:02:15.539]                 args <- list()
[17:02:15.539]                 for (kk in seq_along(NAMES)) {
[17:02:15.539]                   name <- changed[[kk]]
[17:02:15.539]                   NAME <- NAMES[[kk]]
[17:02:15.539]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.539]                     next
[17:02:15.539]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:15.539]                 }
[17:02:15.539]                 NAMES <- toupper(added)
[17:02:15.539]                 for (kk in seq_along(NAMES)) {
[17:02:15.539]                   name <- added[[kk]]
[17:02:15.539]                   NAME <- NAMES[[kk]]
[17:02:15.539]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.539]                     next
[17:02:15.539]                   args[[name]] <- ""
[17:02:15.539]                 }
[17:02:15.539]                 NAMES <- toupper(removed)
[17:02:15.539]                 for (kk in seq_along(NAMES)) {
[17:02:15.539]                   name <- removed[[kk]]
[17:02:15.539]                   NAME <- NAMES[[kk]]
[17:02:15.539]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.539]                     next
[17:02:15.539]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:15.539]                 }
[17:02:15.539]                 if (length(args) > 0) 
[17:02:15.539]                   base::do.call(base::Sys.setenv, args = args)
[17:02:15.539]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:15.539]             }
[17:02:15.539]             else {
[17:02:15.539]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:15.539]             }
[17:02:15.539]             {
[17:02:15.539]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:15.539]                   0L) {
[17:02:15.539]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:15.539]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:15.539]                   base::options(opts)
[17:02:15.539]                 }
[17:02:15.539]                 {
[17:02:15.539]                   NULL
[17:02:15.539]                   options(future.plan = NULL)
[17:02:15.539]                   if (is.na(NA_character_)) 
[17:02:15.539]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:15.539]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:15.539]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:15.539]                     .init = FALSE)
[17:02:15.539]                 }
[17:02:15.539]             }
[17:02:15.539]         }
[17:02:15.539]     })
[17:02:15.539]     if (TRUE) {
[17:02:15.539]         base::sink(type = "output", split = FALSE)
[17:02:15.539]         if (TRUE) {
[17:02:15.539]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:15.539]         }
[17:02:15.539]         else {
[17:02:15.539]             ...future.result["stdout"] <- base::list(NULL)
[17:02:15.539]         }
[17:02:15.539]         base::close(...future.stdout)
[17:02:15.539]         ...future.stdout <- NULL
[17:02:15.539]     }
[17:02:15.539]     ...future.result$conditions <- ...future.conditions
[17:02:15.539]     ...future.result$finished <- base::Sys.time()
[17:02:15.539]     ...future.result
[17:02:15.539] }
> print(expr)
{
    {
        {
            ...future.startTime <- base::Sys.time()
            {
                {
                  {
                    base::local({
                      has_future <- base::requireNamespace("future", 
                        quietly = TRUE)
                      if (has_future) {
                        ns <- base::getNamespace("future")
                        version <- ns[[".package"]][["version"]]
                        if (is.null(version)) 
                          version <- utils::packageVersion("future")
                      }
                      else {
                        version <- NULL
                      }
                      if (!has_future || version < "1.8.0") {
                        info <- base::c(r_version = base::gsub("R version ", 
                          "", base::R.version$version.string), 
                          platform = base::sprintf("%s (%s-bit)", 
                            base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
                          os = base::paste(base::Sys.info()[base::c("sysname", 
                            "release", "version")], collapse = " "), 
                          hostname = base::Sys.info()[["nodename"]])
                        info <- base::sprintf("%s: %s", base::names(info), 
                          info)
                        info <- base::paste(info, collapse = "; ")
                        if (!has_future) {
                          msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
                            info)
                        }
                        else {
                          msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
                            info, version)
                        }
                        base::stop(msg)
                      }
                    })
                  }
                  ...future.strategy.old <- future::plan("list")
                  options(future.plan = NULL)
                  Sys.unsetenv("R_FUTURE_PLAN")
                  future::plan("default", .cleanup = FALSE, .init = FALSE)
                }
                ...future.workdir <- getwd()
            }
            ...future.oldOptions <- base::as.list(base::.Options)
            ...future.oldEnvVars <- base::Sys.getenv()
        }
        base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
            future.globals.maxSize = NULL, future.globals.method = NULL, 
            future.globals.onMissing = NULL, future.globals.onReference = NULL, 
            future.globals.resolve = NULL, future.resolve.recursive = NULL, 
            future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
            future.stdout.windows.reencode = NULL, width = 80L)
        ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
            base::names(...future.oldOptions))
    }
    if (FALSE) {
    }
    else {
        if (TRUE) {
            ...future.stdout <- base::rawConnection(base::raw(0L), 
                open = "w")
        }
        else {
            ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
                windows = "NUL", "/dev/null"), open = "w")
        }
        base::sink(...future.stdout, type = "output", split = FALSE)
        base::on.exit(if (!base::is.null(...future.stdout)) {
            base::sink(type = "output", split = FALSE)
            base::close(...future.stdout)
        }, add = TRUE)
    }
    ...future.frame <- base::sys.nframe()
    ...future.conditions <- base::list()
    ...future.rng <- base::globalenv()$.Random.seed
    if (FALSE) {
        ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
            "...future.value", "...future.globalenv.names", ".Random.seed")
    }
    ...future.result <- base::tryCatch({
        base::withCallingHandlers({
            ...future.value <- base::withVisible(base::local(NULL))
            future::FutureResult(value = ...future.value$value, 
                visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
                  ...future.rng), globalenv = if (FALSE) 
                  list(added = base::setdiff(base::names(base::.GlobalEnv), 
                    ...future.globalenv.names))
                else NULL, started = ...future.startTime, version = "1.8")
        }, condition = base::local({
            c <- base::c
            inherits <- base::inherits
            invokeRestart <- base::invokeRestart
            length <- base::length
            list <- base::list
            seq.int <- base::seq.int
            signalCondition <- base::signalCondition
            sys.calls <- base::sys.calls
            `[[` <- base::`[[`
            `+` <- base::`+`
            `<<-` <- base::`<<-`
            sysCalls <- function(calls = sys.calls(), from = 1L) {
                calls[seq.int(from = from + 12L, to = length(calls) - 
                  3L)]
            }
            function(cond) {
                is_error <- inherits(cond, "error")
                ignore <- !is_error && !is.null(NULL) && inherits(cond, 
                  NULL)
                if (is_error) {
                  sessionInformation <- function() {
                    list(r = base::R.Version(), locale = base::Sys.getlocale(), 
                      rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
                      search = base::search(), system = base::Sys.info())
                  }
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
                    cond$call), session = sessionInformation(), 
                    timestamp = base::Sys.time(), signaled = 0L)
                  signalCondition(cond)
                }
                else if (!ignore && TRUE && inherits(cond, "condition")) {
                  signal <- FALSE && inherits(cond, character(0))
                  ...future.conditions[[length(...future.conditions) + 
                    1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
                  if (FALSE && !signal) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
                else {
                  if (TRUE) {
                    muffleCondition <- function (cond, pattern = "^muffle") 
                    {
                      inherits <- base::inherits
                      invokeRestart <- base::invokeRestart
                      is.null <- base::is.null
                      muffled <- FALSE
                      if (inherits(cond, "message")) {
                        muffled <- grepl(pattern, "muffleMessage")
                        if (muffled) 
                          invokeRestart("muffleMessage")
                      }
                      else if (inherits(cond, "warning")) {
                        muffled <- grepl(pattern, "muffleWarning")
                        if (muffled) 
                          invokeRestart("muffleWarning")
                      }
                      else if (inherits(cond, "condition")) {
                        if (!is.null(pattern)) {
                          computeRestarts <- base::computeRestarts
                          grepl <- base::grepl
                          restarts <- computeRestarts(cond)
                          for (restart in restarts) {
                            name <- restart$name
                            if (is.null(name)) 
                              next
                            if (!grepl(pattern, name)) 
                              next
                            invokeRestart(restart)
                            muffled <- TRUE
                            break
                          }
                        }
                      }
                      invisible(muffled)
                    }
                    muffleCondition(cond, pattern = "^muffle")
                  }
                }
            }
        }))
    }, error = function(ex) {
        base::structure(base::list(value = NULL, visible = NULL, 
            conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
                ...future.rng), started = ...future.startTime, 
            finished = Sys.time(), session_uuid = NA_character_, 
            version = "1.8"), class = "FutureResult")
    }, finally = {
        if (!identical(...future.workdir, getwd())) 
            setwd(...future.workdir)
        {
            if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
                ...future.oldOptions$nwarnings <- NULL
            }
            base::options(...future.oldOptions)
            if (.Platform$OS.type == "windows") {
                old_names <- names(...future.oldEnvVars)
                envs <- base::Sys.getenv()
                names <- names(envs)
                common <- intersect(names, old_names)
                added <- setdiff(names, old_names)
                removed <- setdiff(old_names, names)
                changed <- common[...future.oldEnvVars[common] != 
                  envs[common]]
                NAMES <- toupper(changed)
                args <- list()
                for (kk in seq_along(NAMES)) {
                  name <- changed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                NAMES <- toupper(added)
                for (kk in seq_along(NAMES)) {
                  name <- added[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ""
                }
                NAMES <- toupper(removed)
                for (kk in seq_along(NAMES)) {
                  name <- removed[[kk]]
                  NAME <- NAMES[[kk]]
                  if (name != NAME && is.element(NAME, old_names)) 
                    next
                  args[[name]] <- ...future.oldEnvVars[[name]]
                }
                if (length(args) > 0) 
                  base::do.call(base::Sys.setenv, args = args)
                args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
            }
            else {
                base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
            }
            {
                if (base::length(...future.futureOptionsAdded) > 
                  0L) {
                  opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
                  base::names(opts) <- ...future.futureOptionsAdded
                  base::options(opts)
                }
                {
                  NULL
                  options(future.plan = NULL)
                  if (is.na(NA_character_)) 
                    Sys.unsetenv("R_FUTURE_PLAN")
                  else Sys.setenv(R_FUTURE_PLAN = NA_character_)
                  future::plan(...future.strategy.old, .cleanup = FALSE, 
                    .init = FALSE)
                }
            }
        }
    })
    if (TRUE) {
        base::sink(type = "output", split = FALSE)
        if (TRUE) {
            ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
        }
        else {
            ...future.result["stdout"] <- base::list(NULL)
        }
        base::close(...future.stdout)
        ...future.stdout <- NULL
    }
    ...future.result$conditions <- ...future.conditions
    ...future.result$finished <- base::Sys.time()
    ...future.result
}
> stopifnot(is.call(expr))
> 
> clazzes <- list(
+   sequential = SequentialFuture,
+   multisession = function(...) MultisessionFuture(..., workers = 2L),
+   sequential = SequentialFuture
+ )
> if (supportsMulticore()) {
+   clazzes$multicore = function(...) MulticoreFuture(..., workers = 2L)
+ }
> 
> for (clazz in clazzes) {
+   ## Calling run() more than once
+   f <- clazz({ 42L })
+   print(f)
+   run(f)
+   res <- tryCatch(run(f), error = identity)
+   stopifnot(inherits(res, "error"))
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ 
+   ## Call value() without run()
+   f <- clazz({ 42L })
+   v <- value(f)
+   print(v)
+   stopifnot(v == 42L)
+ }
[17:02:15.550] getGlobalsAndPackages() ...
[17:02:15.550] Searching for globals...
[17:02:15.555] - globals found: [1] ‘{’
[17:02:15.556] Searching for globals ... DONE
[17:02:15.556] Resolving globals: FALSE
[17:02:15.556] 
[17:02:15.556] 
[17:02:15.556] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: bea4fa5d-47e8-a749-891d-df115c7f3570
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:15.557] Packages needed by the future expression (n = 0): <none>
[17:02:15.557] Packages needed by future strategies (n = 0): <none>
[17:02:15.558] {
[17:02:15.558]     {
[17:02:15.558]         {
[17:02:15.558]             ...future.startTime <- base::Sys.time()
[17:02:15.558]             {
[17:02:15.558]                 {
[17:02:15.558]                   {
[17:02:15.558]                     base::local({
[17:02:15.558]                       has_future <- base::requireNamespace("future", 
[17:02:15.558]                         quietly = TRUE)
[17:02:15.558]                       if (has_future) {
[17:02:15.558]                         ns <- base::getNamespace("future")
[17:02:15.558]                         version <- ns[[".package"]][["version"]]
[17:02:15.558]                         if (is.null(version)) 
[17:02:15.558]                           version <- utils::packageVersion("future")
[17:02:15.558]                       }
[17:02:15.558]                       else {
[17:02:15.558]                         version <- NULL
[17:02:15.558]                       }
[17:02:15.558]                       if (!has_future || version < "1.8.0") {
[17:02:15.558]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:15.558]                           "", base::R.version$version.string), 
[17:02:15.558]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:15.558]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:15.558]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:15.558]                             "release", "version")], collapse = " "), 
[17:02:15.558]                           hostname = base::Sys.info()[["nodename"]])
[17:02:15.558]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:15.558]                           info)
[17:02:15.558]                         info <- base::paste(info, collapse = "; ")
[17:02:15.558]                         if (!has_future) {
[17:02:15.558]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:15.558]                             info)
[17:02:15.558]                         }
[17:02:15.558]                         else {
[17:02:15.558]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:15.558]                             info, version)
[17:02:15.558]                         }
[17:02:15.558]                         base::stop(msg)
[17:02:15.558]                       }
[17:02:15.558]                     })
[17:02:15.558]                   }
[17:02:15.558]                   ...future.strategy.old <- future::plan("list")
[17:02:15.558]                   options(future.plan = NULL)
[17:02:15.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:15.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:15.558]                 }
[17:02:15.558]                 ...future.workdir <- getwd()
[17:02:15.558]             }
[17:02:15.558]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:15.558]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:15.558]         }
[17:02:15.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:15.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:15.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:15.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:15.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:15.558]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:15.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:15.558]             base::names(...future.oldOptions))
[17:02:15.558]     }
[17:02:15.558]     if (FALSE) {
[17:02:15.558]     }
[17:02:15.558]     else {
[17:02:15.558]         if (TRUE) {
[17:02:15.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:15.558]                 open = "w")
[17:02:15.558]         }
[17:02:15.558]         else {
[17:02:15.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:15.558]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:15.558]         }
[17:02:15.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:15.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:15.558]             base::sink(type = "output", split = FALSE)
[17:02:15.558]             base::close(...future.stdout)
[17:02:15.558]         }, add = TRUE)
[17:02:15.558]     }
[17:02:15.558]     ...future.frame <- base::sys.nframe()
[17:02:15.558]     ...future.conditions <- base::list()
[17:02:15.558]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:15.558]     if (FALSE) {
[17:02:15.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:15.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:15.558]     }
[17:02:15.558]     ...future.result <- base::tryCatch({
[17:02:15.558]         base::withCallingHandlers({
[17:02:15.558]             ...future.value <- base::withVisible(base::local({
[17:02:15.558]                 42L
[17:02:15.558]             }))
[17:02:15.558]             future::FutureResult(value = ...future.value$value, 
[17:02:15.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:15.558]                   ...future.rng), globalenv = if (FALSE) 
[17:02:15.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:15.558]                     ...future.globalenv.names))
[17:02:15.558]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:15.558]         }, condition = base::local({
[17:02:15.558]             c <- base::c
[17:02:15.558]             inherits <- base::inherits
[17:02:15.558]             invokeRestart <- base::invokeRestart
[17:02:15.558]             length <- base::length
[17:02:15.558]             list <- base::list
[17:02:15.558]             seq.int <- base::seq.int
[17:02:15.558]             signalCondition <- base::signalCondition
[17:02:15.558]             sys.calls <- base::sys.calls
[17:02:15.558]             `[[` <- base::`[[`
[17:02:15.558]             `+` <- base::`+`
[17:02:15.558]             `<<-` <- base::`<<-`
[17:02:15.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:15.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:15.558]                   3L)]
[17:02:15.558]             }
[17:02:15.558]             function(cond) {
[17:02:15.558]                 is_error <- inherits(cond, "error")
[17:02:15.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:15.558]                   NULL)
[17:02:15.558]                 if (is_error) {
[17:02:15.558]                   sessionInformation <- function() {
[17:02:15.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:15.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:15.558]                       search = base::search(), system = base::Sys.info())
[17:02:15.558]                   }
[17:02:15.558]                   ...future.conditions[[length(...future.conditions) + 
[17:02:15.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:15.558]                     cond$call), session = sessionInformation(), 
[17:02:15.558]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:15.558]                   signalCondition(cond)
[17:02:15.558]                 }
[17:02:15.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:15.558]                 "immediateCondition"))) {
[17:02:15.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:15.558]                   ...future.conditions[[length(...future.conditions) + 
[17:02:15.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:15.558]                   if (TRUE && !signal) {
[17:02:15.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:15.558]                     {
[17:02:15.558]                       inherits <- base::inherits
[17:02:15.558]                       invokeRestart <- base::invokeRestart
[17:02:15.558]                       is.null <- base::is.null
[17:02:15.558]                       muffled <- FALSE
[17:02:15.558]                       if (inherits(cond, "message")) {
[17:02:15.558]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:15.558]                         if (muffled) 
[17:02:15.558]                           invokeRestart("muffleMessage")
[17:02:15.558]                       }
[17:02:15.558]                       else if (inherits(cond, "warning")) {
[17:02:15.558]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:15.558]                         if (muffled) 
[17:02:15.558]                           invokeRestart("muffleWarning")
[17:02:15.558]                       }
[17:02:15.558]                       else if (inherits(cond, "condition")) {
[17:02:15.558]                         if (!is.null(pattern)) {
[17:02:15.558]                           computeRestarts <- base::computeRestarts
[17:02:15.558]                           grepl <- base::grepl
[17:02:15.558]                           restarts <- computeRestarts(cond)
[17:02:15.558]                           for (restart in restarts) {
[17:02:15.558]                             name <- restart$name
[17:02:15.558]                             if (is.null(name)) 
[17:02:15.558]                               next
[17:02:15.558]                             if (!grepl(pattern, name)) 
[17:02:15.558]                               next
[17:02:15.558]                             invokeRestart(restart)
[17:02:15.558]                             muffled <- TRUE
[17:02:15.558]                             break
[17:02:15.558]                           }
[17:02:15.558]                         }
[17:02:15.558]                       }
[17:02:15.558]                       invisible(muffled)
[17:02:15.558]                     }
[17:02:15.558]                     muffleCondition(cond, pattern = "^muffle")
[17:02:15.558]                   }
[17:02:15.558]                 }
[17:02:15.558]                 else {
[17:02:15.558]                   if (TRUE) {
[17:02:15.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:15.558]                     {
[17:02:15.558]                       inherits <- base::inherits
[17:02:15.558]                       invokeRestart <- base::invokeRestart
[17:02:15.558]                       is.null <- base::is.null
[17:02:15.558]                       muffled <- FALSE
[17:02:15.558]                       if (inherits(cond, "message")) {
[17:02:15.558]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:15.558]                         if (muffled) 
[17:02:15.558]                           invokeRestart("muffleMessage")
[17:02:15.558]                       }
[17:02:15.558]                       else if (inherits(cond, "warning")) {
[17:02:15.558]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:15.558]                         if (muffled) 
[17:02:15.558]                           invokeRestart("muffleWarning")
[17:02:15.558]                       }
[17:02:15.558]                       else if (inherits(cond, "condition")) {
[17:02:15.558]                         if (!is.null(pattern)) {
[17:02:15.558]                           computeRestarts <- base::computeRestarts
[17:02:15.558]                           grepl <- base::grepl
[17:02:15.558]                           restarts <- computeRestarts(cond)
[17:02:15.558]                           for (restart in restarts) {
[17:02:15.558]                             name <- restart$name
[17:02:15.558]                             if (is.null(name)) 
[17:02:15.558]                               next
[17:02:15.558]                             if (!grepl(pattern, name)) 
[17:02:15.558]                               next
[17:02:15.558]                             invokeRestart(restart)
[17:02:15.558]                             muffled <- TRUE
[17:02:15.558]                             break
[17:02:15.558]                           }
[17:02:15.558]                         }
[17:02:15.558]                       }
[17:02:15.558]                       invisible(muffled)
[17:02:15.558]                     }
[17:02:15.558]                     muffleCondition(cond, pattern = "^muffle")
[17:02:15.558]                   }
[17:02:15.558]                 }
[17:02:15.558]             }
[17:02:15.558]         }))
[17:02:15.558]     }, error = function(ex) {
[17:02:15.558]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:15.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:15.558]                 ...future.rng), started = ...future.startTime, 
[17:02:15.558]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:15.558]             version = "1.8"), class = "FutureResult")
[17:02:15.558]     }, finally = {
[17:02:15.558]         if (!identical(...future.workdir, getwd())) 
[17:02:15.558]             setwd(...future.workdir)
[17:02:15.558]         {
[17:02:15.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:15.558]                 ...future.oldOptions$nwarnings <- NULL
[17:02:15.558]             }
[17:02:15.558]             base::options(...future.oldOptions)
[17:02:15.558]             if (.Platform$OS.type == "windows") {
[17:02:15.558]                 old_names <- names(...future.oldEnvVars)
[17:02:15.558]                 envs <- base::Sys.getenv()
[17:02:15.558]                 names <- names(envs)
[17:02:15.558]                 common <- intersect(names, old_names)
[17:02:15.558]                 added <- setdiff(names, old_names)
[17:02:15.558]                 removed <- setdiff(old_names, names)
[17:02:15.558]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:15.558]                   envs[common]]
[17:02:15.558]                 NAMES <- toupper(changed)
[17:02:15.558]                 args <- list()
[17:02:15.558]                 for (kk in seq_along(NAMES)) {
[17:02:15.558]                   name <- changed[[kk]]
[17:02:15.558]                   NAME <- NAMES[[kk]]
[17:02:15.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.558]                     next
[17:02:15.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:15.558]                 }
[17:02:15.558]                 NAMES <- toupper(added)
[17:02:15.558]                 for (kk in seq_along(NAMES)) {
[17:02:15.558]                   name <- added[[kk]]
[17:02:15.558]                   NAME <- NAMES[[kk]]
[17:02:15.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.558]                     next
[17:02:15.558]                   args[[name]] <- ""
[17:02:15.558]                 }
[17:02:15.558]                 NAMES <- toupper(removed)
[17:02:15.558]                 for (kk in seq_along(NAMES)) {
[17:02:15.558]                   name <- removed[[kk]]
[17:02:15.558]                   NAME <- NAMES[[kk]]
[17:02:15.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.558]                     next
[17:02:15.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:15.558]                 }
[17:02:15.558]                 if (length(args) > 0) 
[17:02:15.558]                   base::do.call(base::Sys.setenv, args = args)
[17:02:15.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:15.558]             }
[17:02:15.558]             else {
[17:02:15.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:15.558]             }
[17:02:15.558]             {
[17:02:15.558]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:15.558]                   0L) {
[17:02:15.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:15.558]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:15.558]                   base::options(opts)
[17:02:15.558]                 }
[17:02:15.558]                 {
[17:02:15.558]                   {
[17:02:15.558]                     NULL
[17:02:15.558]                     RNGkind("Mersenne-Twister")
[17:02:15.558]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:15.558]                       inherits = FALSE)
[17:02:15.558]                   }
[17:02:15.558]                   options(future.plan = NULL)
[17:02:15.558]                   if (is.na(NA_character_)) 
[17:02:15.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:15.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:15.558]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:15.558]                     .init = FALSE)
[17:02:15.558]                 }
[17:02:15.558]             }
[17:02:15.558]         }
[17:02:15.558]     })
[17:02:15.558]     if (TRUE) {
[17:02:15.558]         base::sink(type = "output", split = FALSE)
[17:02:15.558]         if (TRUE) {
[17:02:15.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:15.558]         }
[17:02:15.558]         else {
[17:02:15.558]             ...future.result["stdout"] <- base::list(NULL)
[17:02:15.558]         }
[17:02:15.558]         base::close(...future.stdout)
[17:02:15.558]         ...future.stdout <- NULL
[17:02:15.558]     }
[17:02:15.558]     ...future.result$conditions <- ...future.conditions
[17:02:15.558]     ...future.result$finished <- base::Sys.time()
[17:02:15.558]     ...future.result
[17:02:15.558] }
[17:02:15.560] plan(): Setting new future strategy stack:
[17:02:15.560] List of future strategies:
[17:02:15.560] 1. sequential:
[17:02:15.560]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:15.560]    - tweaked: FALSE
[17:02:15.560]    - call: NULL
[17:02:15.560] plan(): nbrOfWorkers() = 1
[17:02:15.561] plan(): Setting new future strategy stack:
[17:02:15.561] List of future strategies:
[17:02:15.561] 1. future:
[17:02:15.561]    - args: function (..., workers = "<NULL>")
[17:02:15.561]    - tweaked: FALSE
[17:02:15.561]    - call: plan(foo)
[17:02:15.562] plan(): nbrOfWorkers() = Inf
[17:02:15.562] SequentialFuture started (and completed)
[1] 42
[17:02:15.563] getGlobalsAndPackages() ...
[17:02:15.563] Searching for globals...
[17:02:15.563] - globals found: [1] ‘{’
[17:02:15.564] Searching for globals ... DONE
[17:02:15.564] Resolving globals: FALSE
[17:02:15.564] 
[17:02:15.564] 
[17:02:15.564] getGlobalsAndPackages() ... DONE
[17:02:15.564] Packages needed by the future expression (n = 0): <none>
[17:02:15.565] Packages needed by future strategies (n = 0): <none>
[17:02:15.565] {
[17:02:15.565]     {
[17:02:15.565]         {
[17:02:15.565]             ...future.startTime <- base::Sys.time()
[17:02:15.565]             {
[17:02:15.565]                 {
[17:02:15.565]                   {
[17:02:15.565]                     base::local({
[17:02:15.565]                       has_future <- base::requireNamespace("future", 
[17:02:15.565]                         quietly = TRUE)
[17:02:15.565]                       if (has_future) {
[17:02:15.565]                         ns <- base::getNamespace("future")
[17:02:15.565]                         version <- ns[[".package"]][["version"]]
[17:02:15.565]                         if (is.null(version)) 
[17:02:15.565]                           version <- utils::packageVersion("future")
[17:02:15.565]                       }
[17:02:15.565]                       else {
[17:02:15.565]                         version <- NULL
[17:02:15.565]                       }
[17:02:15.565]                       if (!has_future || version < "1.8.0") {
[17:02:15.565]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:15.565]                           "", base::R.version$version.string), 
[17:02:15.565]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:15.565]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:15.565]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:15.565]                             "release", "version")], collapse = " "), 
[17:02:15.565]                           hostname = base::Sys.info()[["nodename"]])
[17:02:15.565]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:15.565]                           info)
[17:02:15.565]                         info <- base::paste(info, collapse = "; ")
[17:02:15.565]                         if (!has_future) {
[17:02:15.565]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:15.565]                             info)
[17:02:15.565]                         }
[17:02:15.565]                         else {
[17:02:15.565]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:15.565]                             info, version)
[17:02:15.565]                         }
[17:02:15.565]                         base::stop(msg)
[17:02:15.565]                       }
[17:02:15.565]                     })
[17:02:15.565]                   }
[17:02:15.565]                   ...future.strategy.old <- future::plan("list")
[17:02:15.565]                   options(future.plan = NULL)
[17:02:15.565]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:15.565]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:15.565]                 }
[17:02:15.565]                 ...future.workdir <- getwd()
[17:02:15.565]             }
[17:02:15.565]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:15.565]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:15.565]         }
[17:02:15.565]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:15.565]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:15.565]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:15.565]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:15.565]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:15.565]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:15.565]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:15.565]             base::names(...future.oldOptions))
[17:02:15.565]     }
[17:02:15.565]     if (FALSE) {
[17:02:15.565]     }
[17:02:15.565]     else {
[17:02:15.565]         if (TRUE) {
[17:02:15.565]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:15.565]                 open = "w")
[17:02:15.565]         }
[17:02:15.565]         else {
[17:02:15.565]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:15.565]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:15.565]         }
[17:02:15.565]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:15.565]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:15.565]             base::sink(type = "output", split = FALSE)
[17:02:15.565]             base::close(...future.stdout)
[17:02:15.565]         }, add = TRUE)
[17:02:15.565]     }
[17:02:15.565]     ...future.frame <- base::sys.nframe()
[17:02:15.565]     ...future.conditions <- base::list()
[17:02:15.565]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:15.565]     if (FALSE) {
[17:02:15.565]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:15.565]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:15.565]     }
[17:02:15.565]     ...future.result <- base::tryCatch({
[17:02:15.565]         base::withCallingHandlers({
[17:02:15.565]             ...future.value <- base::withVisible(base::local({
[17:02:15.565]                 42L
[17:02:15.565]             }))
[17:02:15.565]             future::FutureResult(value = ...future.value$value, 
[17:02:15.565]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:15.565]                   ...future.rng), globalenv = if (FALSE) 
[17:02:15.565]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:15.565]                     ...future.globalenv.names))
[17:02:15.565]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:15.565]         }, condition = base::local({
[17:02:15.565]             c <- base::c
[17:02:15.565]             inherits <- base::inherits
[17:02:15.565]             invokeRestart <- base::invokeRestart
[17:02:15.565]             length <- base::length
[17:02:15.565]             list <- base::list
[17:02:15.565]             seq.int <- base::seq.int
[17:02:15.565]             signalCondition <- base::signalCondition
[17:02:15.565]             sys.calls <- base::sys.calls
[17:02:15.565]             `[[` <- base::`[[`
[17:02:15.565]             `+` <- base::`+`
[17:02:15.565]             `<<-` <- base::`<<-`
[17:02:15.565]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:15.565]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:15.565]                   3L)]
[17:02:15.565]             }
[17:02:15.565]             function(cond) {
[17:02:15.565]                 is_error <- inherits(cond, "error")
[17:02:15.565]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:15.565]                   NULL)
[17:02:15.565]                 if (is_error) {
[17:02:15.565]                   sessionInformation <- function() {
[17:02:15.565]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:15.565]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:15.565]                       search = base::search(), system = base::Sys.info())
[17:02:15.565]                   }
[17:02:15.565]                   ...future.conditions[[length(...future.conditions) + 
[17:02:15.565]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:15.565]                     cond$call), session = sessionInformation(), 
[17:02:15.565]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:15.565]                   signalCondition(cond)
[17:02:15.565]                 }
[17:02:15.565]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:15.565]                 "immediateCondition"))) {
[17:02:15.565]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:15.565]                   ...future.conditions[[length(...future.conditions) + 
[17:02:15.565]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:15.565]                   if (TRUE && !signal) {
[17:02:15.565]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:15.565]                     {
[17:02:15.565]                       inherits <- base::inherits
[17:02:15.565]                       invokeRestart <- base::invokeRestart
[17:02:15.565]                       is.null <- base::is.null
[17:02:15.565]                       muffled <- FALSE
[17:02:15.565]                       if (inherits(cond, "message")) {
[17:02:15.565]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:15.565]                         if (muffled) 
[17:02:15.565]                           invokeRestart("muffleMessage")
[17:02:15.565]                       }
[17:02:15.565]                       else if (inherits(cond, "warning")) {
[17:02:15.565]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:15.565]                         if (muffled) 
[17:02:15.565]                           invokeRestart("muffleWarning")
[17:02:15.565]                       }
[17:02:15.565]                       else if (inherits(cond, "condition")) {
[17:02:15.565]                         if (!is.null(pattern)) {
[17:02:15.565]                           computeRestarts <- base::computeRestarts
[17:02:15.565]                           grepl <- base::grepl
[17:02:15.565]                           restarts <- computeRestarts(cond)
[17:02:15.565]                           for (restart in restarts) {
[17:02:15.565]                             name <- restart$name
[17:02:15.565]                             if (is.null(name)) 
[17:02:15.565]                               next
[17:02:15.565]                             if (!grepl(pattern, name)) 
[17:02:15.565]                               next
[17:02:15.565]                             invokeRestart(restart)
[17:02:15.565]                             muffled <- TRUE
[17:02:15.565]                             break
[17:02:15.565]                           }
[17:02:15.565]                         }
[17:02:15.565]                       }
[17:02:15.565]                       invisible(muffled)
[17:02:15.565]                     }
[17:02:15.565]                     muffleCondition(cond, pattern = "^muffle")
[17:02:15.565]                   }
[17:02:15.565]                 }
[17:02:15.565]                 else {
[17:02:15.565]                   if (TRUE) {
[17:02:15.565]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:15.565]                     {
[17:02:15.565]                       inherits <- base::inherits
[17:02:15.565]                       invokeRestart <- base::invokeRestart
[17:02:15.565]                       is.null <- base::is.null
[17:02:15.565]                       muffled <- FALSE
[17:02:15.565]                       if (inherits(cond, "message")) {
[17:02:15.565]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:15.565]                         if (muffled) 
[17:02:15.565]                           invokeRestart("muffleMessage")
[17:02:15.565]                       }
[17:02:15.565]                       else if (inherits(cond, "warning")) {
[17:02:15.565]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:15.565]                         if (muffled) 
[17:02:15.565]                           invokeRestart("muffleWarning")
[17:02:15.565]                       }
[17:02:15.565]                       else if (inherits(cond, "condition")) {
[17:02:15.565]                         if (!is.null(pattern)) {
[17:02:15.565]                           computeRestarts <- base::computeRestarts
[17:02:15.565]                           grepl <- base::grepl
[17:02:15.565]                           restarts <- computeRestarts(cond)
[17:02:15.565]                           for (restart in restarts) {
[17:02:15.565]                             name <- restart$name
[17:02:15.565]                             if (is.null(name)) 
[17:02:15.565]                               next
[17:02:15.565]                             if (!grepl(pattern, name)) 
[17:02:15.565]                               next
[17:02:15.565]                             invokeRestart(restart)
[17:02:15.565]                             muffled <- TRUE
[17:02:15.565]                             break
[17:02:15.565]                           }
[17:02:15.565]                         }
[17:02:15.565]                       }
[17:02:15.565]                       invisible(muffled)
[17:02:15.565]                     }
[17:02:15.565]                     muffleCondition(cond, pattern = "^muffle")
[17:02:15.565]                   }
[17:02:15.565]                 }
[17:02:15.565]             }
[17:02:15.565]         }))
[17:02:15.565]     }, error = function(ex) {
[17:02:15.565]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:15.565]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:15.565]                 ...future.rng), started = ...future.startTime, 
[17:02:15.565]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:15.565]             version = "1.8"), class = "FutureResult")
[17:02:15.565]     }, finally = {
[17:02:15.565]         if (!identical(...future.workdir, getwd())) 
[17:02:15.565]             setwd(...future.workdir)
[17:02:15.565]         {
[17:02:15.565]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:15.565]                 ...future.oldOptions$nwarnings <- NULL
[17:02:15.565]             }
[17:02:15.565]             base::options(...future.oldOptions)
[17:02:15.565]             if (.Platform$OS.type == "windows") {
[17:02:15.565]                 old_names <- names(...future.oldEnvVars)
[17:02:15.565]                 envs <- base::Sys.getenv()
[17:02:15.565]                 names <- names(envs)
[17:02:15.565]                 common <- intersect(names, old_names)
[17:02:15.565]                 added <- setdiff(names, old_names)
[17:02:15.565]                 removed <- setdiff(old_names, names)
[17:02:15.565]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:15.565]                   envs[common]]
[17:02:15.565]                 NAMES <- toupper(changed)
[17:02:15.565]                 args <- list()
[17:02:15.565]                 for (kk in seq_along(NAMES)) {
[17:02:15.565]                   name <- changed[[kk]]
[17:02:15.565]                   NAME <- NAMES[[kk]]
[17:02:15.565]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.565]                     next
[17:02:15.565]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:15.565]                 }
[17:02:15.565]                 NAMES <- toupper(added)
[17:02:15.565]                 for (kk in seq_along(NAMES)) {
[17:02:15.565]                   name <- added[[kk]]
[17:02:15.565]                   NAME <- NAMES[[kk]]
[17:02:15.565]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.565]                     next
[17:02:15.565]                   args[[name]] <- ""
[17:02:15.565]                 }
[17:02:15.565]                 NAMES <- toupper(removed)
[17:02:15.565]                 for (kk in seq_along(NAMES)) {
[17:02:15.565]                   name <- removed[[kk]]
[17:02:15.565]                   NAME <- NAMES[[kk]]
[17:02:15.565]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:15.565]                     next
[17:02:15.565]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:15.565]                 }
[17:02:15.565]                 if (length(args) > 0) 
[17:02:15.565]                   base::do.call(base::Sys.setenv, args = args)
[17:02:15.565]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:15.565]             }
[17:02:15.565]             else {
[17:02:15.565]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:15.565]             }
[17:02:15.565]             {
[17:02:15.565]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:15.565]                   0L) {
[17:02:15.565]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:15.565]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:15.565]                   base::options(opts)
[17:02:15.565]                 }
[17:02:15.565]                 {
[17:02:15.565]                   {
[17:02:15.565]                     NULL
[17:02:15.565]                     RNGkind("Mersenne-Twister")
[17:02:15.565]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:15.565]                       inherits = FALSE)
[17:02:15.565]                   }
[17:02:15.565]                   options(future.plan = NULL)
[17:02:15.565]                   if (is.na(NA_character_)) 
[17:02:15.565]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:15.565]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:15.565]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:15.565]                     .init = FALSE)
[17:02:15.565]                 }
[17:02:15.565]             }
[17:02:15.565]         }
[17:02:15.565]     })
[17:02:15.565]     if (TRUE) {
[17:02:15.565]         base::sink(type = "output", split = FALSE)
[17:02:15.565]         if (TRUE) {
[17:02:15.565]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:15.565]         }
[17:02:15.565]         else {
[17:02:15.565]             ...future.result["stdout"] <- base::list(NULL)
[17:02:15.565]         }
[17:02:15.565]         base::close(...future.stdout)
[17:02:15.565]         ...future.stdout <- NULL
[17:02:15.565]     }
[17:02:15.565]     ...future.result$conditions <- ...future.conditions
[17:02:15.565]     ...future.result$finished <- base::Sys.time()
[17:02:15.565]     ...future.result
[17:02:15.565] }
[17:02:15.567] plan(): Setting new future strategy stack:
[17:02:15.567] List of future strategies:
[17:02:15.567] 1. sequential:
[17:02:15.567]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:15.567]    - tweaked: FALSE
[17:02:15.567]    - call: NULL
[17:02:15.567] plan(): nbrOfWorkers() = 1
[17:02:15.568] plan(): Setting new future strategy stack:
[17:02:15.568] List of future strategies:
[17:02:15.568] 1. future:
[17:02:15.568]    - args: function (..., workers = "<NULL>")
[17:02:15.568]    - tweaked: FALSE
[17:02:15.568]    - call: plan(foo)
[17:02:15.568] plan(): nbrOfWorkers() = Inf
[17:02:15.569] SequentialFuture started (and completed)
[1] 42
[17:02:15.570] getGlobalsAndPackages() ...
[17:02:15.571] 
[17:02:15.571] - globals: [0] <none>
[17:02:15.571] getGlobalsAndPackages() ... DONE
[17:02:15.571] [local output] makeClusterPSOCK() ...
[17:02:15.610] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:15.611] [local output] Base port: 11597
[17:02:15.611] [local output] Getting setup options for 2 cluster nodes ...
[17:02:15.611] [local output]  - Node 1 of 2 ...
[17:02:15.612] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:15.612] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpsRgpZJ/worker.rank=1.parallelly.parent=40637.9ebd43a679ea.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpsRgpZJ/worker.rank=1.parallelly.parent=40637.9ebd43a679ea.pid")'’
[17:02:15.801] - Possible to infer worker's PID: TRUE
[17:02:15.801] [local output] Rscript port: 11597

[17:02:15.801] [local output]  - Node 2 of 2 ...
[17:02:15.802] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:15.803] [local output] Rscript port: 11597

[17:02:15.803] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:15.803] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:15.803] [local output] Setting up PSOCK nodes in parallel
[17:02:15.804] List of 36
[17:02:15.804]  $ worker          : chr "localhost"
[17:02:15.804]   ..- attr(*, "localhost")= logi TRUE
[17:02:15.804]  $ master          : chr "localhost"
[17:02:15.804]  $ port            : int 11597
[17:02:15.804]  $ connectTimeout  : num 120
[17:02:15.804]  $ timeout         : num 2592000
[17:02:15.804]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:15.804]  $ homogeneous     : logi TRUE
[17:02:15.804]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:15.804]  $ rscript_envs    : NULL
[17:02:15.804]  $ rscript_libs    : NULL
[17:02:15.804]  $ rscript_startup : NULL
[17:02:15.804]  $ rscript_sh      : chr "sh"
[17:02:15.804]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:15.804]  $ methods         : logi TRUE
[17:02:15.804]  $ socketOptions   : chr "no-delay"
[17:02:15.804]  $ useXDR          : logi FALSE
[17:02:15.804]  $ outfile         : chr "/dev/null"
[17:02:15.804]  $ renice          : int NA
[17:02:15.804]  $ rshcmd          : NULL
[17:02:15.804]  $ user            : chr(0) 
[17:02:15.804]  $ revtunnel       : logi FALSE
[17:02:15.804]  $ rshlogfile      : NULL
[17:02:15.804]  $ rshopts         : chr(0) 
[17:02:15.804]  $ rank            : int 1
[17:02:15.804]  $ manual          : logi FALSE
[17:02:15.804]  $ dryrun          : logi FALSE
[17:02:15.804]  $ quiet           : logi FALSE
[17:02:15.804]  $ setup_strategy  : chr "parallel"
[17:02:15.804]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:15.804]  $ pidfile         : chr "/tmp/RtmpsRgpZJ/worker.rank=1.parallelly.parent=40637.9ebd43a679ea.pid"
[17:02:15.804]  $ rshcmd_label    : NULL
[17:02:15.804]  $ rsh_call        : NULL
[17:02:15.804]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:15.804]  $ localMachine    : logi TRUE
[17:02:15.804]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:15.804]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:15.804]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:15.804]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:15.804]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:15.804]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:15.804]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:15.804]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:15.804]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:15.804]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:15.804]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:15.804]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:15.804]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:15.804]  $ arguments       :List of 28
[17:02:15.804]   ..$ worker          : chr "localhost"
[17:02:15.804]   ..$ master          : NULL
[17:02:15.804]   ..$ port            : int 11597
[17:02:15.804]   ..$ connectTimeout  : num 120
[17:02:15.804]   ..$ timeout         : num 2592000
[17:02:15.804]   ..$ rscript         : NULL
[17:02:15.804]   ..$ homogeneous     : NULL
[17:02:15.804]   ..$ rscript_args    : NULL
[17:02:15.804]   ..$ rscript_envs    : NULL
[17:02:15.804]   ..$ rscript_libs    : NULL
[17:02:15.804]   ..$ rscript_startup : NULL
[17:02:15.804]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:15.804]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:15.804]   ..$ methods         : logi TRUE
[17:02:15.804]   ..$ socketOptions   : chr "no-delay"
[17:02:15.804]   ..$ useXDR          : logi FALSE
[17:02:15.804]   ..$ outfile         : chr "/dev/null"
[17:02:15.804]   ..$ renice          : int NA
[17:02:15.804]   ..$ rshcmd          : NULL
[17:02:15.804]   ..$ user            : NULL
[17:02:15.804]   ..$ revtunnel       : logi NA
[17:02:15.804]   ..$ rshlogfile      : NULL
[17:02:15.804]   ..$ rshopts         : NULL
[17:02:15.804]   ..$ rank            : int 1
[17:02:15.804]   ..$ manual          : logi FALSE
[17:02:15.804]   ..$ dryrun          : logi FALSE
[17:02:15.804]   ..$ quiet           : logi FALSE
[17:02:15.804]   ..$ setup_strategy  : chr "parallel"
[17:02:15.804]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:15.820] [local output] System call to launch all workers:
[17:02:15.820] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpsRgpZJ/worker.rank=1.parallelly.parent=40637.9ebd43a679ea.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11597 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:15.820] [local output] Starting PSOCK main server
[17:02:15.826] [local output] Workers launched
[17:02:15.826] [local output] Waiting for workers to connect back
[17:02:15.826]  - [local output] 0 workers out of 2 ready
[17:02:16.067]  - [local output] 0 workers out of 2 ready
[17:02:16.068]  - [local output] 1 workers out of 2 ready
[17:02:16.068]  - [local output] 2 workers out of 2 ready
[17:02:16.068] [local output] Launching of workers completed
[17:02:16.068] [local output] Collecting session information from workers
[17:02:16.069] [local output]  - Worker #1 of 2
[17:02:16.070] [local output]  - Worker #2 of 2
[17:02:16.070] [local output] makeClusterPSOCK() ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55699934d9e0
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: bea4fa5d-47e8-a749-891d-df115c7f3570
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.083] Packages needed by the future expression (n = 0): <none>
[17:02:16.083] Packages needed by future strategies (n = 0): <none>
[17:02:16.083] {
[17:02:16.083]     {
[17:02:16.083]         {
[17:02:16.083]             ...future.startTime <- base::Sys.time()
[17:02:16.083]             {
[17:02:16.083]                 {
[17:02:16.083]                   {
[17:02:16.083]                     {
[17:02:16.083]                       base::local({
[17:02:16.083]                         has_future <- base::requireNamespace("future", 
[17:02:16.083]                           quietly = TRUE)
[17:02:16.083]                         if (has_future) {
[17:02:16.083]                           ns <- base::getNamespace("future")
[17:02:16.083]                           version <- ns[[".package"]][["version"]]
[17:02:16.083]                           if (is.null(version)) 
[17:02:16.083]                             version <- utils::packageVersion("future")
[17:02:16.083]                         }
[17:02:16.083]                         else {
[17:02:16.083]                           version <- NULL
[17:02:16.083]                         }
[17:02:16.083]                         if (!has_future || version < "1.8.0") {
[17:02:16.083]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.083]                             "", base::R.version$version.string), 
[17:02:16.083]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.083]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.083]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.083]                               "release", "version")], collapse = " "), 
[17:02:16.083]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.083]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.083]                             info)
[17:02:16.083]                           info <- base::paste(info, collapse = "; ")
[17:02:16.083]                           if (!has_future) {
[17:02:16.083]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.083]                               info)
[17:02:16.083]                           }
[17:02:16.083]                           else {
[17:02:16.083]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.083]                               info, version)
[17:02:16.083]                           }
[17:02:16.083]                           base::stop(msg)
[17:02:16.083]                         }
[17:02:16.083]                       })
[17:02:16.083]                     }
[17:02:16.083]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.083]                     base::options(mc.cores = 1L)
[17:02:16.083]                   }
[17:02:16.083]                   ...future.strategy.old <- future::plan("list")
[17:02:16.083]                   options(future.plan = NULL)
[17:02:16.083]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.083]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.083]                 }
[17:02:16.083]                 ...future.workdir <- getwd()
[17:02:16.083]             }
[17:02:16.083]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.083]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.083]         }
[17:02:16.083]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.083]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.083]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.083]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.083]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.083]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.083]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.083]             base::names(...future.oldOptions))
[17:02:16.083]     }
[17:02:16.083]     if (FALSE) {
[17:02:16.083]     }
[17:02:16.083]     else {
[17:02:16.083]         if (TRUE) {
[17:02:16.083]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.083]                 open = "w")
[17:02:16.083]         }
[17:02:16.083]         else {
[17:02:16.083]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.083]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.083]         }
[17:02:16.083]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.083]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.083]             base::sink(type = "output", split = FALSE)
[17:02:16.083]             base::close(...future.stdout)
[17:02:16.083]         }, add = TRUE)
[17:02:16.083]     }
[17:02:16.083]     ...future.frame <- base::sys.nframe()
[17:02:16.083]     ...future.conditions <- base::list()
[17:02:16.083]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.083]     if (FALSE) {
[17:02:16.083]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.083]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.083]     }
[17:02:16.083]     ...future.result <- base::tryCatch({
[17:02:16.083]         base::withCallingHandlers({
[17:02:16.083]             ...future.value <- base::withVisible(base::local({
[17:02:16.083]                 ...future.makeSendCondition <- base::local({
[17:02:16.083]                   sendCondition <- NULL
[17:02:16.083]                   function(frame = 1L) {
[17:02:16.083]                     if (is.function(sendCondition)) 
[17:02:16.083]                       return(sendCondition)
[17:02:16.083]                     ns <- getNamespace("parallel")
[17:02:16.083]                     if (exists("sendData", mode = "function", 
[17:02:16.083]                       envir = ns)) {
[17:02:16.083]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:16.083]                         envir = ns)
[17:02:16.083]                       envir <- sys.frame(frame)
[17:02:16.083]                       master <- NULL
[17:02:16.083]                       while (!identical(envir, .GlobalEnv) && 
[17:02:16.083]                         !identical(envir, emptyenv())) {
[17:02:16.083]                         if (exists("master", mode = "list", envir = envir, 
[17:02:16.083]                           inherits = FALSE)) {
[17:02:16.083]                           master <- get("master", mode = "list", 
[17:02:16.083]                             envir = envir, inherits = FALSE)
[17:02:16.083]                           if (inherits(master, c("SOCKnode", 
[17:02:16.083]                             "SOCK0node"))) {
[17:02:16.083]                             sendCondition <<- function(cond) {
[17:02:16.083]                               data <- list(type = "VALUE", value = cond, 
[17:02:16.083]                                 success = TRUE)
[17:02:16.083]                               parallel_sendData(master, data)
[17:02:16.083]                             }
[17:02:16.083]                             return(sendCondition)
[17:02:16.083]                           }
[17:02:16.083]                         }
[17:02:16.083]                         frame <- frame + 1L
[17:02:16.083]                         envir <- sys.frame(frame)
[17:02:16.083]                       }
[17:02:16.083]                     }
[17:02:16.083]                     sendCondition <<- function(cond) NULL
[17:02:16.083]                   }
[17:02:16.083]                 })
[17:02:16.083]                 withCallingHandlers({
[17:02:16.083]                   {
[17:02:16.083]                     42L
[17:02:16.083]                   }
[17:02:16.083]                 }, immediateCondition = function(cond) {
[17:02:16.083]                   sendCondition <- ...future.makeSendCondition()
[17:02:16.083]                   sendCondition(cond)
[17:02:16.083]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.083]                   {
[17:02:16.083]                     inherits <- base::inherits
[17:02:16.083]                     invokeRestart <- base::invokeRestart
[17:02:16.083]                     is.null <- base::is.null
[17:02:16.083]                     muffled <- FALSE
[17:02:16.083]                     if (inherits(cond, "message")) {
[17:02:16.083]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.083]                       if (muffled) 
[17:02:16.083]                         invokeRestart("muffleMessage")
[17:02:16.083]                     }
[17:02:16.083]                     else if (inherits(cond, "warning")) {
[17:02:16.083]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.083]                       if (muffled) 
[17:02:16.083]                         invokeRestart("muffleWarning")
[17:02:16.083]                     }
[17:02:16.083]                     else if (inherits(cond, "condition")) {
[17:02:16.083]                       if (!is.null(pattern)) {
[17:02:16.083]                         computeRestarts <- base::computeRestarts
[17:02:16.083]                         grepl <- base::grepl
[17:02:16.083]                         restarts <- computeRestarts(cond)
[17:02:16.083]                         for (restart in restarts) {
[17:02:16.083]                           name <- restart$name
[17:02:16.083]                           if (is.null(name)) 
[17:02:16.083]                             next
[17:02:16.083]                           if (!grepl(pattern, name)) 
[17:02:16.083]                             next
[17:02:16.083]                           invokeRestart(restart)
[17:02:16.083]                           muffled <- TRUE
[17:02:16.083]                           break
[17:02:16.083]                         }
[17:02:16.083]                       }
[17:02:16.083]                     }
[17:02:16.083]                     invisible(muffled)
[17:02:16.083]                   }
[17:02:16.083]                   muffleCondition(cond)
[17:02:16.083]                 })
[17:02:16.083]             }))
[17:02:16.083]             future::FutureResult(value = ...future.value$value, 
[17:02:16.083]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.083]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.083]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.083]                     ...future.globalenv.names))
[17:02:16.083]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.083]         }, condition = base::local({
[17:02:16.083]             c <- base::c
[17:02:16.083]             inherits <- base::inherits
[17:02:16.083]             invokeRestart <- base::invokeRestart
[17:02:16.083]             length <- base::length
[17:02:16.083]             list <- base::list
[17:02:16.083]             seq.int <- base::seq.int
[17:02:16.083]             signalCondition <- base::signalCondition
[17:02:16.083]             sys.calls <- base::sys.calls
[17:02:16.083]             `[[` <- base::`[[`
[17:02:16.083]             `+` <- base::`+`
[17:02:16.083]             `<<-` <- base::`<<-`
[17:02:16.083]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.083]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.083]                   3L)]
[17:02:16.083]             }
[17:02:16.083]             function(cond) {
[17:02:16.083]                 is_error <- inherits(cond, "error")
[17:02:16.083]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.083]                   NULL)
[17:02:16.083]                 if (is_error) {
[17:02:16.083]                   sessionInformation <- function() {
[17:02:16.083]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.083]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.083]                       search = base::search(), system = base::Sys.info())
[17:02:16.083]                   }
[17:02:16.083]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.083]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.083]                     cond$call), session = sessionInformation(), 
[17:02:16.083]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.083]                   signalCondition(cond)
[17:02:16.083]                 }
[17:02:16.083]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.083]                 "immediateCondition"))) {
[17:02:16.083]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.083]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.083]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.083]                   if (TRUE && !signal) {
[17:02:16.083]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.083]                     {
[17:02:16.083]                       inherits <- base::inherits
[17:02:16.083]                       invokeRestart <- base::invokeRestart
[17:02:16.083]                       is.null <- base::is.null
[17:02:16.083]                       muffled <- FALSE
[17:02:16.083]                       if (inherits(cond, "message")) {
[17:02:16.083]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.083]                         if (muffled) 
[17:02:16.083]                           invokeRestart("muffleMessage")
[17:02:16.083]                       }
[17:02:16.083]                       else if (inherits(cond, "warning")) {
[17:02:16.083]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.083]                         if (muffled) 
[17:02:16.083]                           invokeRestart("muffleWarning")
[17:02:16.083]                       }
[17:02:16.083]                       else if (inherits(cond, "condition")) {
[17:02:16.083]                         if (!is.null(pattern)) {
[17:02:16.083]                           computeRestarts <- base::computeRestarts
[17:02:16.083]                           grepl <- base::grepl
[17:02:16.083]                           restarts <- computeRestarts(cond)
[17:02:16.083]                           for (restart in restarts) {
[17:02:16.083]                             name <- restart$name
[17:02:16.083]                             if (is.null(name)) 
[17:02:16.083]                               next
[17:02:16.083]                             if (!grepl(pattern, name)) 
[17:02:16.083]                               next
[17:02:16.083]                             invokeRestart(restart)
[17:02:16.083]                             muffled <- TRUE
[17:02:16.083]                             break
[17:02:16.083]                           }
[17:02:16.083]                         }
[17:02:16.083]                       }
[17:02:16.083]                       invisible(muffled)
[17:02:16.083]                     }
[17:02:16.083]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.083]                   }
[17:02:16.083]                 }
[17:02:16.083]                 else {
[17:02:16.083]                   if (TRUE) {
[17:02:16.083]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.083]                     {
[17:02:16.083]                       inherits <- base::inherits
[17:02:16.083]                       invokeRestart <- base::invokeRestart
[17:02:16.083]                       is.null <- base::is.null
[17:02:16.083]                       muffled <- FALSE
[17:02:16.083]                       if (inherits(cond, "message")) {
[17:02:16.083]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.083]                         if (muffled) 
[17:02:16.083]                           invokeRestart("muffleMessage")
[17:02:16.083]                       }
[17:02:16.083]                       else if (inherits(cond, "warning")) {
[17:02:16.083]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.083]                         if (muffled) 
[17:02:16.083]                           invokeRestart("muffleWarning")
[17:02:16.083]                       }
[17:02:16.083]                       else if (inherits(cond, "condition")) {
[17:02:16.083]                         if (!is.null(pattern)) {
[17:02:16.083]                           computeRestarts <- base::computeRestarts
[17:02:16.083]                           grepl <- base::grepl
[17:02:16.083]                           restarts <- computeRestarts(cond)
[17:02:16.083]                           for (restart in restarts) {
[17:02:16.083]                             name <- restart$name
[17:02:16.083]                             if (is.null(name)) 
[17:02:16.083]                               next
[17:02:16.083]                             if (!grepl(pattern, name)) 
[17:02:16.083]                               next
[17:02:16.083]                             invokeRestart(restart)
[17:02:16.083]                             muffled <- TRUE
[17:02:16.083]                             break
[17:02:16.083]                           }
[17:02:16.083]                         }
[17:02:16.083]                       }
[17:02:16.083]                       invisible(muffled)
[17:02:16.083]                     }
[17:02:16.083]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.083]                   }
[17:02:16.083]                 }
[17:02:16.083]             }
[17:02:16.083]         }))
[17:02:16.083]     }, error = function(ex) {
[17:02:16.083]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.083]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.083]                 ...future.rng), started = ...future.startTime, 
[17:02:16.083]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.083]             version = "1.8"), class = "FutureResult")
[17:02:16.083]     }, finally = {
[17:02:16.083]         if (!identical(...future.workdir, getwd())) 
[17:02:16.083]             setwd(...future.workdir)
[17:02:16.083]         {
[17:02:16.083]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.083]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.083]             }
[17:02:16.083]             base::options(...future.oldOptions)
[17:02:16.083]             if (.Platform$OS.type == "windows") {
[17:02:16.083]                 old_names <- names(...future.oldEnvVars)
[17:02:16.083]                 envs <- base::Sys.getenv()
[17:02:16.083]                 names <- names(envs)
[17:02:16.083]                 common <- intersect(names, old_names)
[17:02:16.083]                 added <- setdiff(names, old_names)
[17:02:16.083]                 removed <- setdiff(old_names, names)
[17:02:16.083]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.083]                   envs[common]]
[17:02:16.083]                 NAMES <- toupper(changed)
[17:02:16.083]                 args <- list()
[17:02:16.083]                 for (kk in seq_along(NAMES)) {
[17:02:16.083]                   name <- changed[[kk]]
[17:02:16.083]                   NAME <- NAMES[[kk]]
[17:02:16.083]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.083]                     next
[17:02:16.083]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.083]                 }
[17:02:16.083]                 NAMES <- toupper(added)
[17:02:16.083]                 for (kk in seq_along(NAMES)) {
[17:02:16.083]                   name <- added[[kk]]
[17:02:16.083]                   NAME <- NAMES[[kk]]
[17:02:16.083]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.083]                     next
[17:02:16.083]                   args[[name]] <- ""
[17:02:16.083]                 }
[17:02:16.083]                 NAMES <- toupper(removed)
[17:02:16.083]                 for (kk in seq_along(NAMES)) {
[17:02:16.083]                   name <- removed[[kk]]
[17:02:16.083]                   NAME <- NAMES[[kk]]
[17:02:16.083]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.083]                     next
[17:02:16.083]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.083]                 }
[17:02:16.083]                 if (length(args) > 0) 
[17:02:16.083]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.083]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.083]             }
[17:02:16.083]             else {
[17:02:16.083]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.083]             }
[17:02:16.083]             {
[17:02:16.083]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.083]                   0L) {
[17:02:16.083]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.083]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.083]                   base::options(opts)
[17:02:16.083]                 }
[17:02:16.083]                 {
[17:02:16.083]                   {
[17:02:16.083]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.083]                     NULL
[17:02:16.083]                   }
[17:02:16.083]                   options(future.plan = NULL)
[17:02:16.083]                   if (is.na(NA_character_)) 
[17:02:16.083]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.083]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.083]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.083]                     .init = FALSE)
[17:02:16.083]                 }
[17:02:16.083]             }
[17:02:16.083]         }
[17:02:16.083]     })
[17:02:16.083]     if (TRUE) {
[17:02:16.083]         base::sink(type = "output", split = FALSE)
[17:02:16.083]         if (TRUE) {
[17:02:16.083]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.083]         }
[17:02:16.083]         else {
[17:02:16.083]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.083]         }
[17:02:16.083]         base::close(...future.stdout)
[17:02:16.083]         ...future.stdout <- NULL
[17:02:16.083]     }
[17:02:16.083]     ...future.result$conditions <- ...future.conditions
[17:02:16.083]     ...future.result$finished <- base::Sys.time()
[17:02:16.083]     ...future.result
[17:02:16.083] }
[17:02:16.137] MultisessionFuture started
[17:02:16.137] result() for ClusterFuture ...
[17:02:16.137] receiveMessageFromWorker() for ClusterFuture ...
[17:02:16.138] - Validating connection of MultisessionFuture
[17:02:16.171] - received message: FutureResult
[17:02:16.171] - Received FutureResult
[17:02:16.173] - Erased future from FutureRegistry
[17:02:16.173] result() for ClusterFuture ...
[17:02:16.174] - result already collected: FutureResult
[17:02:16.174] result() for ClusterFuture ... done
[17:02:16.174] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:16.174] result() for ClusterFuture ... done
[17:02:16.174] result() for ClusterFuture ...
[17:02:16.174] - result already collected: FutureResult
[17:02:16.174] result() for ClusterFuture ... done
[1] 42
[17:02:16.176] getGlobalsAndPackages() ...
[17:02:16.176] 
[17:02:16.176] - globals: [0] <none>
[17:02:16.176] getGlobalsAndPackages() ... DONE
[17:02:16.188] Packages needed by the future expression (n = 0): <none>
[17:02:16.188] Packages needed by future strategies (n = 0): <none>
[17:02:16.188] {
[17:02:16.188]     {
[17:02:16.188]         {
[17:02:16.188]             ...future.startTime <- base::Sys.time()
[17:02:16.188]             {
[17:02:16.188]                 {
[17:02:16.188]                   {
[17:02:16.188]                     {
[17:02:16.188]                       base::local({
[17:02:16.188]                         has_future <- base::requireNamespace("future", 
[17:02:16.188]                           quietly = TRUE)
[17:02:16.188]                         if (has_future) {
[17:02:16.188]                           ns <- base::getNamespace("future")
[17:02:16.188]                           version <- ns[[".package"]][["version"]]
[17:02:16.188]                           if (is.null(version)) 
[17:02:16.188]                             version <- utils::packageVersion("future")
[17:02:16.188]                         }
[17:02:16.188]                         else {
[17:02:16.188]                           version <- NULL
[17:02:16.188]                         }
[17:02:16.188]                         if (!has_future || version < "1.8.0") {
[17:02:16.188]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.188]                             "", base::R.version$version.string), 
[17:02:16.188]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.188]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.188]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.188]                               "release", "version")], collapse = " "), 
[17:02:16.188]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.188]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.188]                             info)
[17:02:16.188]                           info <- base::paste(info, collapse = "; ")
[17:02:16.188]                           if (!has_future) {
[17:02:16.188]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.188]                               info)
[17:02:16.188]                           }
[17:02:16.188]                           else {
[17:02:16.188]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.188]                               info, version)
[17:02:16.188]                           }
[17:02:16.188]                           base::stop(msg)
[17:02:16.188]                         }
[17:02:16.188]                       })
[17:02:16.188]                     }
[17:02:16.188]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.188]                     base::options(mc.cores = 1L)
[17:02:16.188]                   }
[17:02:16.188]                   ...future.strategy.old <- future::plan("list")
[17:02:16.188]                   options(future.plan = NULL)
[17:02:16.188]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.188]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.188]                 }
[17:02:16.188]                 ...future.workdir <- getwd()
[17:02:16.188]             }
[17:02:16.188]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.188]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.188]         }
[17:02:16.188]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.188]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.188]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.188]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.188]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.188]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.188]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.188]             base::names(...future.oldOptions))
[17:02:16.188]     }
[17:02:16.188]     if (FALSE) {
[17:02:16.188]     }
[17:02:16.188]     else {
[17:02:16.188]         if (TRUE) {
[17:02:16.188]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.188]                 open = "w")
[17:02:16.188]         }
[17:02:16.188]         else {
[17:02:16.188]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.188]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.188]         }
[17:02:16.188]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.188]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.188]             base::sink(type = "output", split = FALSE)
[17:02:16.188]             base::close(...future.stdout)
[17:02:16.188]         }, add = TRUE)
[17:02:16.188]     }
[17:02:16.188]     ...future.frame <- base::sys.nframe()
[17:02:16.188]     ...future.conditions <- base::list()
[17:02:16.188]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.188]     if (FALSE) {
[17:02:16.188]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.188]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.188]     }
[17:02:16.188]     ...future.result <- base::tryCatch({
[17:02:16.188]         base::withCallingHandlers({
[17:02:16.188]             ...future.value <- base::withVisible(base::local({
[17:02:16.188]                 ...future.makeSendCondition <- base::local({
[17:02:16.188]                   sendCondition <- NULL
[17:02:16.188]                   function(frame = 1L) {
[17:02:16.188]                     if (is.function(sendCondition)) 
[17:02:16.188]                       return(sendCondition)
[17:02:16.188]                     ns <- getNamespace("parallel")
[17:02:16.188]                     if (exists("sendData", mode = "function", 
[17:02:16.188]                       envir = ns)) {
[17:02:16.188]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:16.188]                         envir = ns)
[17:02:16.188]                       envir <- sys.frame(frame)
[17:02:16.188]                       master <- NULL
[17:02:16.188]                       while (!identical(envir, .GlobalEnv) && 
[17:02:16.188]                         !identical(envir, emptyenv())) {
[17:02:16.188]                         if (exists("master", mode = "list", envir = envir, 
[17:02:16.188]                           inherits = FALSE)) {
[17:02:16.188]                           master <- get("master", mode = "list", 
[17:02:16.188]                             envir = envir, inherits = FALSE)
[17:02:16.188]                           if (inherits(master, c("SOCKnode", 
[17:02:16.188]                             "SOCK0node"))) {
[17:02:16.188]                             sendCondition <<- function(cond) {
[17:02:16.188]                               data <- list(type = "VALUE", value = cond, 
[17:02:16.188]                                 success = TRUE)
[17:02:16.188]                               parallel_sendData(master, data)
[17:02:16.188]                             }
[17:02:16.188]                             return(sendCondition)
[17:02:16.188]                           }
[17:02:16.188]                         }
[17:02:16.188]                         frame <- frame + 1L
[17:02:16.188]                         envir <- sys.frame(frame)
[17:02:16.188]                       }
[17:02:16.188]                     }
[17:02:16.188]                     sendCondition <<- function(cond) NULL
[17:02:16.188]                   }
[17:02:16.188]                 })
[17:02:16.188]                 withCallingHandlers({
[17:02:16.188]                   {
[17:02:16.188]                     42L
[17:02:16.188]                   }
[17:02:16.188]                 }, immediateCondition = function(cond) {
[17:02:16.188]                   sendCondition <- ...future.makeSendCondition()
[17:02:16.188]                   sendCondition(cond)
[17:02:16.188]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.188]                   {
[17:02:16.188]                     inherits <- base::inherits
[17:02:16.188]                     invokeRestart <- base::invokeRestart
[17:02:16.188]                     is.null <- base::is.null
[17:02:16.188]                     muffled <- FALSE
[17:02:16.188]                     if (inherits(cond, "message")) {
[17:02:16.188]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.188]                       if (muffled) 
[17:02:16.188]                         invokeRestart("muffleMessage")
[17:02:16.188]                     }
[17:02:16.188]                     else if (inherits(cond, "warning")) {
[17:02:16.188]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.188]                       if (muffled) 
[17:02:16.188]                         invokeRestart("muffleWarning")
[17:02:16.188]                     }
[17:02:16.188]                     else if (inherits(cond, "condition")) {
[17:02:16.188]                       if (!is.null(pattern)) {
[17:02:16.188]                         computeRestarts <- base::computeRestarts
[17:02:16.188]                         grepl <- base::grepl
[17:02:16.188]                         restarts <- computeRestarts(cond)
[17:02:16.188]                         for (restart in restarts) {
[17:02:16.188]                           name <- restart$name
[17:02:16.188]                           if (is.null(name)) 
[17:02:16.188]                             next
[17:02:16.188]                           if (!grepl(pattern, name)) 
[17:02:16.188]                             next
[17:02:16.188]                           invokeRestart(restart)
[17:02:16.188]                           muffled <- TRUE
[17:02:16.188]                           break
[17:02:16.188]                         }
[17:02:16.188]                       }
[17:02:16.188]                     }
[17:02:16.188]                     invisible(muffled)
[17:02:16.188]                   }
[17:02:16.188]                   muffleCondition(cond)
[17:02:16.188]                 })
[17:02:16.188]             }))
[17:02:16.188]             future::FutureResult(value = ...future.value$value, 
[17:02:16.188]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.188]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.188]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.188]                     ...future.globalenv.names))
[17:02:16.188]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.188]         }, condition = base::local({
[17:02:16.188]             c <- base::c
[17:02:16.188]             inherits <- base::inherits
[17:02:16.188]             invokeRestart <- base::invokeRestart
[17:02:16.188]             length <- base::length
[17:02:16.188]             list <- base::list
[17:02:16.188]             seq.int <- base::seq.int
[17:02:16.188]             signalCondition <- base::signalCondition
[17:02:16.188]             sys.calls <- base::sys.calls
[17:02:16.188]             `[[` <- base::`[[`
[17:02:16.188]             `+` <- base::`+`
[17:02:16.188]             `<<-` <- base::`<<-`
[17:02:16.188]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.188]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.188]                   3L)]
[17:02:16.188]             }
[17:02:16.188]             function(cond) {
[17:02:16.188]                 is_error <- inherits(cond, "error")
[17:02:16.188]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.188]                   NULL)
[17:02:16.188]                 if (is_error) {
[17:02:16.188]                   sessionInformation <- function() {
[17:02:16.188]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.188]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.188]                       search = base::search(), system = base::Sys.info())
[17:02:16.188]                   }
[17:02:16.188]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.188]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.188]                     cond$call), session = sessionInformation(), 
[17:02:16.188]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.188]                   signalCondition(cond)
[17:02:16.188]                 }
[17:02:16.188]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.188]                 "immediateCondition"))) {
[17:02:16.188]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.188]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.188]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.188]                   if (TRUE && !signal) {
[17:02:16.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.188]                     {
[17:02:16.188]                       inherits <- base::inherits
[17:02:16.188]                       invokeRestart <- base::invokeRestart
[17:02:16.188]                       is.null <- base::is.null
[17:02:16.188]                       muffled <- FALSE
[17:02:16.188]                       if (inherits(cond, "message")) {
[17:02:16.188]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.188]                         if (muffled) 
[17:02:16.188]                           invokeRestart("muffleMessage")
[17:02:16.188]                       }
[17:02:16.188]                       else if (inherits(cond, "warning")) {
[17:02:16.188]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.188]                         if (muffled) 
[17:02:16.188]                           invokeRestart("muffleWarning")
[17:02:16.188]                       }
[17:02:16.188]                       else if (inherits(cond, "condition")) {
[17:02:16.188]                         if (!is.null(pattern)) {
[17:02:16.188]                           computeRestarts <- base::computeRestarts
[17:02:16.188]                           grepl <- base::grepl
[17:02:16.188]                           restarts <- computeRestarts(cond)
[17:02:16.188]                           for (restart in restarts) {
[17:02:16.188]                             name <- restart$name
[17:02:16.188]                             if (is.null(name)) 
[17:02:16.188]                               next
[17:02:16.188]                             if (!grepl(pattern, name)) 
[17:02:16.188]                               next
[17:02:16.188]                             invokeRestart(restart)
[17:02:16.188]                             muffled <- TRUE
[17:02:16.188]                             break
[17:02:16.188]                           }
[17:02:16.188]                         }
[17:02:16.188]                       }
[17:02:16.188]                       invisible(muffled)
[17:02:16.188]                     }
[17:02:16.188]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.188]                   }
[17:02:16.188]                 }
[17:02:16.188]                 else {
[17:02:16.188]                   if (TRUE) {
[17:02:16.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.188]                     {
[17:02:16.188]                       inherits <- base::inherits
[17:02:16.188]                       invokeRestart <- base::invokeRestart
[17:02:16.188]                       is.null <- base::is.null
[17:02:16.188]                       muffled <- FALSE
[17:02:16.188]                       if (inherits(cond, "message")) {
[17:02:16.188]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.188]                         if (muffled) 
[17:02:16.188]                           invokeRestart("muffleMessage")
[17:02:16.188]                       }
[17:02:16.188]                       else if (inherits(cond, "warning")) {
[17:02:16.188]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.188]                         if (muffled) 
[17:02:16.188]                           invokeRestart("muffleWarning")
[17:02:16.188]                       }
[17:02:16.188]                       else if (inherits(cond, "condition")) {
[17:02:16.188]                         if (!is.null(pattern)) {
[17:02:16.188]                           computeRestarts <- base::computeRestarts
[17:02:16.188]                           grepl <- base::grepl
[17:02:16.188]                           restarts <- computeRestarts(cond)
[17:02:16.188]                           for (restart in restarts) {
[17:02:16.188]                             name <- restart$name
[17:02:16.188]                             if (is.null(name)) 
[17:02:16.188]                               next
[17:02:16.188]                             if (!grepl(pattern, name)) 
[17:02:16.188]                               next
[17:02:16.188]                             invokeRestart(restart)
[17:02:16.188]                             muffled <- TRUE
[17:02:16.188]                             break
[17:02:16.188]                           }
[17:02:16.188]                         }
[17:02:16.188]                       }
[17:02:16.188]                       invisible(muffled)
[17:02:16.188]                     }
[17:02:16.188]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.188]                   }
[17:02:16.188]                 }
[17:02:16.188]             }
[17:02:16.188]         }))
[17:02:16.188]     }, error = function(ex) {
[17:02:16.188]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.188]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.188]                 ...future.rng), started = ...future.startTime, 
[17:02:16.188]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.188]             version = "1.8"), class = "FutureResult")
[17:02:16.188]     }, finally = {
[17:02:16.188]         if (!identical(...future.workdir, getwd())) 
[17:02:16.188]             setwd(...future.workdir)
[17:02:16.188]         {
[17:02:16.188]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.188]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.188]             }
[17:02:16.188]             base::options(...future.oldOptions)
[17:02:16.188]             if (.Platform$OS.type == "windows") {
[17:02:16.188]                 old_names <- names(...future.oldEnvVars)
[17:02:16.188]                 envs <- base::Sys.getenv()
[17:02:16.188]                 names <- names(envs)
[17:02:16.188]                 common <- intersect(names, old_names)
[17:02:16.188]                 added <- setdiff(names, old_names)
[17:02:16.188]                 removed <- setdiff(old_names, names)
[17:02:16.188]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.188]                   envs[common]]
[17:02:16.188]                 NAMES <- toupper(changed)
[17:02:16.188]                 args <- list()
[17:02:16.188]                 for (kk in seq_along(NAMES)) {
[17:02:16.188]                   name <- changed[[kk]]
[17:02:16.188]                   NAME <- NAMES[[kk]]
[17:02:16.188]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.188]                     next
[17:02:16.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.188]                 }
[17:02:16.188]                 NAMES <- toupper(added)
[17:02:16.188]                 for (kk in seq_along(NAMES)) {
[17:02:16.188]                   name <- added[[kk]]
[17:02:16.188]                   NAME <- NAMES[[kk]]
[17:02:16.188]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.188]                     next
[17:02:16.188]                   args[[name]] <- ""
[17:02:16.188]                 }
[17:02:16.188]                 NAMES <- toupper(removed)
[17:02:16.188]                 for (kk in seq_along(NAMES)) {
[17:02:16.188]                   name <- removed[[kk]]
[17:02:16.188]                   NAME <- NAMES[[kk]]
[17:02:16.188]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.188]                     next
[17:02:16.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.188]                 }
[17:02:16.188]                 if (length(args) > 0) 
[17:02:16.188]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.188]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.188]             }
[17:02:16.188]             else {
[17:02:16.188]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.188]             }
[17:02:16.188]             {
[17:02:16.188]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.188]                   0L) {
[17:02:16.188]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.188]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.188]                   base::options(opts)
[17:02:16.188]                 }
[17:02:16.188]                 {
[17:02:16.188]                   {
[17:02:16.188]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.188]                     NULL
[17:02:16.188]                   }
[17:02:16.188]                   options(future.plan = NULL)
[17:02:16.188]                   if (is.na(NA_character_)) 
[17:02:16.188]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.188]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.188]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.188]                     .init = FALSE)
[17:02:16.188]                 }
[17:02:16.188]             }
[17:02:16.188]         }
[17:02:16.188]     })
[17:02:16.188]     if (TRUE) {
[17:02:16.188]         base::sink(type = "output", split = FALSE)
[17:02:16.188]         if (TRUE) {
[17:02:16.188]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.188]         }
[17:02:16.188]         else {
[17:02:16.188]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.188]         }
[17:02:16.188]         base::close(...future.stdout)
[17:02:16.188]         ...future.stdout <- NULL
[17:02:16.188]     }
[17:02:16.188]     ...future.result$conditions <- ...future.conditions
[17:02:16.188]     ...future.result$finished <- base::Sys.time()
[17:02:16.188]     ...future.result
[17:02:16.188] }
[17:02:16.191] MultisessionFuture started
[17:02:16.192] result() for ClusterFuture ...
[17:02:16.192] receiveMessageFromWorker() for ClusterFuture ...
[17:02:16.192] - Validating connection of MultisessionFuture
[17:02:16.193] - received message: FutureResult
[17:02:16.193] - Received FutureResult
[17:02:16.193] - Erased future from FutureRegistry
[17:02:16.194] result() for ClusterFuture ...
[17:02:16.194] - result already collected: FutureResult
[17:02:16.194] result() for ClusterFuture ... done
[17:02:16.194] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:16.194] result() for ClusterFuture ... done
[17:02:16.194] result() for ClusterFuture ...
[17:02:16.194] - result already collected: FutureResult
[17:02:16.194] result() for ClusterFuture ... done
[1] 42
[17:02:16.194] getGlobalsAndPackages() ...
[17:02:16.195] Searching for globals...
[17:02:16.195] - globals found: [1] ‘{’
[17:02:16.196] Searching for globals ... DONE
[17:02:16.196] Resolving globals: FALSE
[17:02:16.196] 
[17:02:16.196] 
[17:02:16.196] getGlobalsAndPackages() ... DONE
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: bea4fa5d-47e8-a749-891d-df115c7f3570
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.197] Packages needed by the future expression (n = 0): <none>
[17:02:16.197] Packages needed by future strategies (n = 0): <none>
[17:02:16.198] {
[17:02:16.198]     {
[17:02:16.198]         {
[17:02:16.198]             ...future.startTime <- base::Sys.time()
[17:02:16.198]             {
[17:02:16.198]                 {
[17:02:16.198]                   {
[17:02:16.198]                     base::local({
[17:02:16.198]                       has_future <- base::requireNamespace("future", 
[17:02:16.198]                         quietly = TRUE)
[17:02:16.198]                       if (has_future) {
[17:02:16.198]                         ns <- base::getNamespace("future")
[17:02:16.198]                         version <- ns[[".package"]][["version"]]
[17:02:16.198]                         if (is.null(version)) 
[17:02:16.198]                           version <- utils::packageVersion("future")
[17:02:16.198]                       }
[17:02:16.198]                       else {
[17:02:16.198]                         version <- NULL
[17:02:16.198]                       }
[17:02:16.198]                       if (!has_future || version < "1.8.0") {
[17:02:16.198]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.198]                           "", base::R.version$version.string), 
[17:02:16.198]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:16.198]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.198]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.198]                             "release", "version")], collapse = " "), 
[17:02:16.198]                           hostname = base::Sys.info()[["nodename"]])
[17:02:16.198]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.198]                           info)
[17:02:16.198]                         info <- base::paste(info, collapse = "; ")
[17:02:16.198]                         if (!has_future) {
[17:02:16.198]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.198]                             info)
[17:02:16.198]                         }
[17:02:16.198]                         else {
[17:02:16.198]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.198]                             info, version)
[17:02:16.198]                         }
[17:02:16.198]                         base::stop(msg)
[17:02:16.198]                       }
[17:02:16.198]                     })
[17:02:16.198]                   }
[17:02:16.198]                   ...future.strategy.old <- future::plan("list")
[17:02:16.198]                   options(future.plan = NULL)
[17:02:16.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.198]                 }
[17:02:16.198]                 ...future.workdir <- getwd()
[17:02:16.198]             }
[17:02:16.198]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.198]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.198]         }
[17:02:16.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.198]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.198]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.198]             base::names(...future.oldOptions))
[17:02:16.198]     }
[17:02:16.198]     if (FALSE) {
[17:02:16.198]     }
[17:02:16.198]     else {
[17:02:16.198]         if (TRUE) {
[17:02:16.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.198]                 open = "w")
[17:02:16.198]         }
[17:02:16.198]         else {
[17:02:16.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.198]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.198]         }
[17:02:16.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.198]             base::sink(type = "output", split = FALSE)
[17:02:16.198]             base::close(...future.stdout)
[17:02:16.198]         }, add = TRUE)
[17:02:16.198]     }
[17:02:16.198]     ...future.frame <- base::sys.nframe()
[17:02:16.198]     ...future.conditions <- base::list()
[17:02:16.198]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.198]     if (FALSE) {
[17:02:16.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.198]     }
[17:02:16.198]     ...future.result <- base::tryCatch({
[17:02:16.198]         base::withCallingHandlers({
[17:02:16.198]             ...future.value <- base::withVisible(base::local({
[17:02:16.198]                 42L
[17:02:16.198]             }))
[17:02:16.198]             future::FutureResult(value = ...future.value$value, 
[17:02:16.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.198]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.198]                     ...future.globalenv.names))
[17:02:16.198]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.198]         }, condition = base::local({
[17:02:16.198]             c <- base::c
[17:02:16.198]             inherits <- base::inherits
[17:02:16.198]             invokeRestart <- base::invokeRestart
[17:02:16.198]             length <- base::length
[17:02:16.198]             list <- base::list
[17:02:16.198]             seq.int <- base::seq.int
[17:02:16.198]             signalCondition <- base::signalCondition
[17:02:16.198]             sys.calls <- base::sys.calls
[17:02:16.198]             `[[` <- base::`[[`
[17:02:16.198]             `+` <- base::`+`
[17:02:16.198]             `<<-` <- base::`<<-`
[17:02:16.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.198]                   3L)]
[17:02:16.198]             }
[17:02:16.198]             function(cond) {
[17:02:16.198]                 is_error <- inherits(cond, "error")
[17:02:16.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.198]                   NULL)
[17:02:16.198]                 if (is_error) {
[17:02:16.198]                   sessionInformation <- function() {
[17:02:16.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.198]                       search = base::search(), system = base::Sys.info())
[17:02:16.198]                   }
[17:02:16.198]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.198]                     cond$call), session = sessionInformation(), 
[17:02:16.198]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.198]                   signalCondition(cond)
[17:02:16.198]                 }
[17:02:16.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.198]                 "immediateCondition"))) {
[17:02:16.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.198]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.198]                   if (TRUE && !signal) {
[17:02:16.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.198]                     {
[17:02:16.198]                       inherits <- base::inherits
[17:02:16.198]                       invokeRestart <- base::invokeRestart
[17:02:16.198]                       is.null <- base::is.null
[17:02:16.198]                       muffled <- FALSE
[17:02:16.198]                       if (inherits(cond, "message")) {
[17:02:16.198]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.198]                         if (muffled) 
[17:02:16.198]                           invokeRestart("muffleMessage")
[17:02:16.198]                       }
[17:02:16.198]                       else if (inherits(cond, "warning")) {
[17:02:16.198]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.198]                         if (muffled) 
[17:02:16.198]                           invokeRestart("muffleWarning")
[17:02:16.198]                       }
[17:02:16.198]                       else if (inherits(cond, "condition")) {
[17:02:16.198]                         if (!is.null(pattern)) {
[17:02:16.198]                           computeRestarts <- base::computeRestarts
[17:02:16.198]                           grepl <- base::grepl
[17:02:16.198]                           restarts <- computeRestarts(cond)
[17:02:16.198]                           for (restart in restarts) {
[17:02:16.198]                             name <- restart$name
[17:02:16.198]                             if (is.null(name)) 
[17:02:16.198]                               next
[17:02:16.198]                             if (!grepl(pattern, name)) 
[17:02:16.198]                               next
[17:02:16.198]                             invokeRestart(restart)
[17:02:16.198]                             muffled <- TRUE
[17:02:16.198]                             break
[17:02:16.198]                           }
[17:02:16.198]                         }
[17:02:16.198]                       }
[17:02:16.198]                       invisible(muffled)
[17:02:16.198]                     }
[17:02:16.198]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.198]                   }
[17:02:16.198]                 }
[17:02:16.198]                 else {
[17:02:16.198]                   if (TRUE) {
[17:02:16.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.198]                     {
[17:02:16.198]                       inherits <- base::inherits
[17:02:16.198]                       invokeRestart <- base::invokeRestart
[17:02:16.198]                       is.null <- base::is.null
[17:02:16.198]                       muffled <- FALSE
[17:02:16.198]                       if (inherits(cond, "message")) {
[17:02:16.198]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.198]                         if (muffled) 
[17:02:16.198]                           invokeRestart("muffleMessage")
[17:02:16.198]                       }
[17:02:16.198]                       else if (inherits(cond, "warning")) {
[17:02:16.198]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.198]                         if (muffled) 
[17:02:16.198]                           invokeRestart("muffleWarning")
[17:02:16.198]                       }
[17:02:16.198]                       else if (inherits(cond, "condition")) {
[17:02:16.198]                         if (!is.null(pattern)) {
[17:02:16.198]                           computeRestarts <- base::computeRestarts
[17:02:16.198]                           grepl <- base::grepl
[17:02:16.198]                           restarts <- computeRestarts(cond)
[17:02:16.198]                           for (restart in restarts) {
[17:02:16.198]                             name <- restart$name
[17:02:16.198]                             if (is.null(name)) 
[17:02:16.198]                               next
[17:02:16.198]                             if (!grepl(pattern, name)) 
[17:02:16.198]                               next
[17:02:16.198]                             invokeRestart(restart)
[17:02:16.198]                             muffled <- TRUE
[17:02:16.198]                             break
[17:02:16.198]                           }
[17:02:16.198]                         }
[17:02:16.198]                       }
[17:02:16.198]                       invisible(muffled)
[17:02:16.198]                     }
[17:02:16.198]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.198]                   }
[17:02:16.198]                 }
[17:02:16.198]             }
[17:02:16.198]         }))
[17:02:16.198]     }, error = function(ex) {
[17:02:16.198]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.198]                 ...future.rng), started = ...future.startTime, 
[17:02:16.198]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.198]             version = "1.8"), class = "FutureResult")
[17:02:16.198]     }, finally = {
[17:02:16.198]         if (!identical(...future.workdir, getwd())) 
[17:02:16.198]             setwd(...future.workdir)
[17:02:16.198]         {
[17:02:16.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.198]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.198]             }
[17:02:16.198]             base::options(...future.oldOptions)
[17:02:16.198]             if (.Platform$OS.type == "windows") {
[17:02:16.198]                 old_names <- names(...future.oldEnvVars)
[17:02:16.198]                 envs <- base::Sys.getenv()
[17:02:16.198]                 names <- names(envs)
[17:02:16.198]                 common <- intersect(names, old_names)
[17:02:16.198]                 added <- setdiff(names, old_names)
[17:02:16.198]                 removed <- setdiff(old_names, names)
[17:02:16.198]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.198]                   envs[common]]
[17:02:16.198]                 NAMES <- toupper(changed)
[17:02:16.198]                 args <- list()
[17:02:16.198]                 for (kk in seq_along(NAMES)) {
[17:02:16.198]                   name <- changed[[kk]]
[17:02:16.198]                   NAME <- NAMES[[kk]]
[17:02:16.198]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.198]                     next
[17:02:16.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.198]                 }
[17:02:16.198]                 NAMES <- toupper(added)
[17:02:16.198]                 for (kk in seq_along(NAMES)) {
[17:02:16.198]                   name <- added[[kk]]
[17:02:16.198]                   NAME <- NAMES[[kk]]
[17:02:16.198]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.198]                     next
[17:02:16.198]                   args[[name]] <- ""
[17:02:16.198]                 }
[17:02:16.198]                 NAMES <- toupper(removed)
[17:02:16.198]                 for (kk in seq_along(NAMES)) {
[17:02:16.198]                   name <- removed[[kk]]
[17:02:16.198]                   NAME <- NAMES[[kk]]
[17:02:16.198]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.198]                     next
[17:02:16.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.198]                 }
[17:02:16.198]                 if (length(args) > 0) 
[17:02:16.198]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.198]             }
[17:02:16.198]             else {
[17:02:16.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.198]             }
[17:02:16.198]             {
[17:02:16.198]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.198]                   0L) {
[17:02:16.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.198]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.198]                   base::options(opts)
[17:02:16.198]                 }
[17:02:16.198]                 {
[17:02:16.198]                   {
[17:02:16.198]                     NULL
[17:02:16.198]                     RNGkind("Mersenne-Twister")
[17:02:16.198]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:16.198]                       inherits = FALSE)
[17:02:16.198]                   }
[17:02:16.198]                   options(future.plan = NULL)
[17:02:16.198]                   if (is.na(NA_character_)) 
[17:02:16.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.198]                     .init = FALSE)
[17:02:16.198]                 }
[17:02:16.198]             }
[17:02:16.198]         }
[17:02:16.198]     })
[17:02:16.198]     if (TRUE) {
[17:02:16.198]         base::sink(type = "output", split = FALSE)
[17:02:16.198]         if (TRUE) {
[17:02:16.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.198]         }
[17:02:16.198]         else {
[17:02:16.198]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.198]         }
[17:02:16.198]         base::close(...future.stdout)
[17:02:16.198]         ...future.stdout <- NULL
[17:02:16.198]     }
[17:02:16.198]     ...future.result$conditions <- ...future.conditions
[17:02:16.198]     ...future.result$finished <- base::Sys.time()
[17:02:16.198]     ...future.result
[17:02:16.198] }
[17:02:16.200] plan(): Setting new future strategy stack:
[17:02:16.200] List of future strategies:
[17:02:16.200] 1. sequential:
[17:02:16.200]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.200]    - tweaked: FALSE
[17:02:16.200]    - call: NULL
[17:02:16.200] plan(): nbrOfWorkers() = 1
[17:02:16.201] plan(): Setting new future strategy stack:
[17:02:16.201] List of future strategies:
[17:02:16.201] 1. future:
[17:02:16.201]    - args: function (..., workers = "<NULL>")
[17:02:16.201]    - tweaked: FALSE
[17:02:16.201]    - call: plan(foo)
[17:02:16.202] plan(): nbrOfWorkers() = Inf
[17:02:16.202] SequentialFuture started (and completed)
[1] 42
[17:02:16.203] getGlobalsAndPackages() ...
[17:02:16.203] Searching for globals...
[17:02:16.203] - globals found: [1] ‘{’
[17:02:16.204] Searching for globals ... DONE
[17:02:16.204] Resolving globals: FALSE
[17:02:16.204] 
[17:02:16.204] 
[17:02:16.204] getGlobalsAndPackages() ... DONE
[17:02:16.205] Packages needed by the future expression (n = 0): <none>
[17:02:16.205] Packages needed by future strategies (n = 0): <none>
[17:02:16.205] {
[17:02:16.205]     {
[17:02:16.205]         {
[17:02:16.205]             ...future.startTime <- base::Sys.time()
[17:02:16.205]             {
[17:02:16.205]                 {
[17:02:16.205]                   {
[17:02:16.205]                     base::local({
[17:02:16.205]                       has_future <- base::requireNamespace("future", 
[17:02:16.205]                         quietly = TRUE)
[17:02:16.205]                       if (has_future) {
[17:02:16.205]                         ns <- base::getNamespace("future")
[17:02:16.205]                         version <- ns[[".package"]][["version"]]
[17:02:16.205]                         if (is.null(version)) 
[17:02:16.205]                           version <- utils::packageVersion("future")
[17:02:16.205]                       }
[17:02:16.205]                       else {
[17:02:16.205]                         version <- NULL
[17:02:16.205]                       }
[17:02:16.205]                       if (!has_future || version < "1.8.0") {
[17:02:16.205]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.205]                           "", base::R.version$version.string), 
[17:02:16.205]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:16.205]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.205]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.205]                             "release", "version")], collapse = " "), 
[17:02:16.205]                           hostname = base::Sys.info()[["nodename"]])
[17:02:16.205]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.205]                           info)
[17:02:16.205]                         info <- base::paste(info, collapse = "; ")
[17:02:16.205]                         if (!has_future) {
[17:02:16.205]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.205]                             info)
[17:02:16.205]                         }
[17:02:16.205]                         else {
[17:02:16.205]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.205]                             info, version)
[17:02:16.205]                         }
[17:02:16.205]                         base::stop(msg)
[17:02:16.205]                       }
[17:02:16.205]                     })
[17:02:16.205]                   }
[17:02:16.205]                   ...future.strategy.old <- future::plan("list")
[17:02:16.205]                   options(future.plan = NULL)
[17:02:16.205]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.205]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.205]                 }
[17:02:16.205]                 ...future.workdir <- getwd()
[17:02:16.205]             }
[17:02:16.205]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.205]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.205]         }
[17:02:16.205]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.205]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.205]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.205]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.205]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.205]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.205]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.205]             base::names(...future.oldOptions))
[17:02:16.205]     }
[17:02:16.205]     if (FALSE) {
[17:02:16.205]     }
[17:02:16.205]     else {
[17:02:16.205]         if (TRUE) {
[17:02:16.205]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.205]                 open = "w")
[17:02:16.205]         }
[17:02:16.205]         else {
[17:02:16.205]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.205]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.205]         }
[17:02:16.205]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.205]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.205]             base::sink(type = "output", split = FALSE)
[17:02:16.205]             base::close(...future.stdout)
[17:02:16.205]         }, add = TRUE)
[17:02:16.205]     }
[17:02:16.205]     ...future.frame <- base::sys.nframe()
[17:02:16.205]     ...future.conditions <- base::list()
[17:02:16.205]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.205]     if (FALSE) {
[17:02:16.205]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.205]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.205]     }
[17:02:16.205]     ...future.result <- base::tryCatch({
[17:02:16.205]         base::withCallingHandlers({
[17:02:16.205]             ...future.value <- base::withVisible(base::local({
[17:02:16.205]                 42L
[17:02:16.205]             }))
[17:02:16.205]             future::FutureResult(value = ...future.value$value, 
[17:02:16.205]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.205]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.205]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.205]                     ...future.globalenv.names))
[17:02:16.205]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.205]         }, condition = base::local({
[17:02:16.205]             c <- base::c
[17:02:16.205]             inherits <- base::inherits
[17:02:16.205]             invokeRestart <- base::invokeRestart
[17:02:16.205]             length <- base::length
[17:02:16.205]             list <- base::list
[17:02:16.205]             seq.int <- base::seq.int
[17:02:16.205]             signalCondition <- base::signalCondition
[17:02:16.205]             sys.calls <- base::sys.calls
[17:02:16.205]             `[[` <- base::`[[`
[17:02:16.205]             `+` <- base::`+`
[17:02:16.205]             `<<-` <- base::`<<-`
[17:02:16.205]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.205]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.205]                   3L)]
[17:02:16.205]             }
[17:02:16.205]             function(cond) {
[17:02:16.205]                 is_error <- inherits(cond, "error")
[17:02:16.205]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.205]                   NULL)
[17:02:16.205]                 if (is_error) {
[17:02:16.205]                   sessionInformation <- function() {
[17:02:16.205]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.205]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.205]                       search = base::search(), system = base::Sys.info())
[17:02:16.205]                   }
[17:02:16.205]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.205]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.205]                     cond$call), session = sessionInformation(), 
[17:02:16.205]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.205]                   signalCondition(cond)
[17:02:16.205]                 }
[17:02:16.205]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.205]                 "immediateCondition"))) {
[17:02:16.205]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.205]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.205]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.205]                   if (TRUE && !signal) {
[17:02:16.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.205]                     {
[17:02:16.205]                       inherits <- base::inherits
[17:02:16.205]                       invokeRestart <- base::invokeRestart
[17:02:16.205]                       is.null <- base::is.null
[17:02:16.205]                       muffled <- FALSE
[17:02:16.205]                       if (inherits(cond, "message")) {
[17:02:16.205]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.205]                         if (muffled) 
[17:02:16.205]                           invokeRestart("muffleMessage")
[17:02:16.205]                       }
[17:02:16.205]                       else if (inherits(cond, "warning")) {
[17:02:16.205]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.205]                         if (muffled) 
[17:02:16.205]                           invokeRestart("muffleWarning")
[17:02:16.205]                       }
[17:02:16.205]                       else if (inherits(cond, "condition")) {
[17:02:16.205]                         if (!is.null(pattern)) {
[17:02:16.205]                           computeRestarts <- base::computeRestarts
[17:02:16.205]                           grepl <- base::grepl
[17:02:16.205]                           restarts <- computeRestarts(cond)
[17:02:16.205]                           for (restart in restarts) {
[17:02:16.205]                             name <- restart$name
[17:02:16.205]                             if (is.null(name)) 
[17:02:16.205]                               next
[17:02:16.205]                             if (!grepl(pattern, name)) 
[17:02:16.205]                               next
[17:02:16.205]                             invokeRestart(restart)
[17:02:16.205]                             muffled <- TRUE
[17:02:16.205]                             break
[17:02:16.205]                           }
[17:02:16.205]                         }
[17:02:16.205]                       }
[17:02:16.205]                       invisible(muffled)
[17:02:16.205]                     }
[17:02:16.205]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.205]                   }
[17:02:16.205]                 }
[17:02:16.205]                 else {
[17:02:16.205]                   if (TRUE) {
[17:02:16.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.205]                     {
[17:02:16.205]                       inherits <- base::inherits
[17:02:16.205]                       invokeRestart <- base::invokeRestart
[17:02:16.205]                       is.null <- base::is.null
[17:02:16.205]                       muffled <- FALSE
[17:02:16.205]                       if (inherits(cond, "message")) {
[17:02:16.205]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.205]                         if (muffled) 
[17:02:16.205]                           invokeRestart("muffleMessage")
[17:02:16.205]                       }
[17:02:16.205]                       else if (inherits(cond, "warning")) {
[17:02:16.205]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.205]                         if (muffled) 
[17:02:16.205]                           invokeRestart("muffleWarning")
[17:02:16.205]                       }
[17:02:16.205]                       else if (inherits(cond, "condition")) {
[17:02:16.205]                         if (!is.null(pattern)) {
[17:02:16.205]                           computeRestarts <- base::computeRestarts
[17:02:16.205]                           grepl <- base::grepl
[17:02:16.205]                           restarts <- computeRestarts(cond)
[17:02:16.205]                           for (restart in restarts) {
[17:02:16.205]                             name <- restart$name
[17:02:16.205]                             if (is.null(name)) 
[17:02:16.205]                               next
[17:02:16.205]                             if (!grepl(pattern, name)) 
[17:02:16.205]                               next
[17:02:16.205]                             invokeRestart(restart)
[17:02:16.205]                             muffled <- TRUE
[17:02:16.205]                             break
[17:02:16.205]                           }
[17:02:16.205]                         }
[17:02:16.205]                       }
[17:02:16.205]                       invisible(muffled)
[17:02:16.205]                     }
[17:02:16.205]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.205]                   }
[17:02:16.205]                 }
[17:02:16.205]             }
[17:02:16.205]         }))
[17:02:16.205]     }, error = function(ex) {
[17:02:16.205]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.205]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.205]                 ...future.rng), started = ...future.startTime, 
[17:02:16.205]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.205]             version = "1.8"), class = "FutureResult")
[17:02:16.205]     }, finally = {
[17:02:16.205]         if (!identical(...future.workdir, getwd())) 
[17:02:16.205]             setwd(...future.workdir)
[17:02:16.205]         {
[17:02:16.205]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.205]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.205]             }
[17:02:16.205]             base::options(...future.oldOptions)
[17:02:16.205]             if (.Platform$OS.type == "windows") {
[17:02:16.205]                 old_names <- names(...future.oldEnvVars)
[17:02:16.205]                 envs <- base::Sys.getenv()
[17:02:16.205]                 names <- names(envs)
[17:02:16.205]                 common <- intersect(names, old_names)
[17:02:16.205]                 added <- setdiff(names, old_names)
[17:02:16.205]                 removed <- setdiff(old_names, names)
[17:02:16.205]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.205]                   envs[common]]
[17:02:16.205]                 NAMES <- toupper(changed)
[17:02:16.205]                 args <- list()
[17:02:16.205]                 for (kk in seq_along(NAMES)) {
[17:02:16.205]                   name <- changed[[kk]]
[17:02:16.205]                   NAME <- NAMES[[kk]]
[17:02:16.205]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.205]                     next
[17:02:16.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.205]                 }
[17:02:16.205]                 NAMES <- toupper(added)
[17:02:16.205]                 for (kk in seq_along(NAMES)) {
[17:02:16.205]                   name <- added[[kk]]
[17:02:16.205]                   NAME <- NAMES[[kk]]
[17:02:16.205]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.205]                     next
[17:02:16.205]                   args[[name]] <- ""
[17:02:16.205]                 }
[17:02:16.205]                 NAMES <- toupper(removed)
[17:02:16.205]                 for (kk in seq_along(NAMES)) {
[17:02:16.205]                   name <- removed[[kk]]
[17:02:16.205]                   NAME <- NAMES[[kk]]
[17:02:16.205]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.205]                     next
[17:02:16.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.205]                 }
[17:02:16.205]                 if (length(args) > 0) 
[17:02:16.205]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.205]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.205]             }
[17:02:16.205]             else {
[17:02:16.205]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.205]             }
[17:02:16.205]             {
[17:02:16.205]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.205]                   0L) {
[17:02:16.205]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.205]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.205]                   base::options(opts)
[17:02:16.205]                 }
[17:02:16.205]                 {
[17:02:16.205]                   {
[17:02:16.205]                     NULL
[17:02:16.205]                     RNGkind("Mersenne-Twister")
[17:02:16.205]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:16.205]                       inherits = FALSE)
[17:02:16.205]                   }
[17:02:16.205]                   options(future.plan = NULL)
[17:02:16.205]                   if (is.na(NA_character_)) 
[17:02:16.205]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.205]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.205]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.205]                     .init = FALSE)
[17:02:16.205]                 }
[17:02:16.205]             }
[17:02:16.205]         }
[17:02:16.205]     })
[17:02:16.205]     if (TRUE) {
[17:02:16.205]         base::sink(type = "output", split = FALSE)
[17:02:16.205]         if (TRUE) {
[17:02:16.205]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.205]         }
[17:02:16.205]         else {
[17:02:16.205]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.205]         }
[17:02:16.205]         base::close(...future.stdout)
[17:02:16.205]         ...future.stdout <- NULL
[17:02:16.205]     }
[17:02:16.205]     ...future.result$conditions <- ...future.conditions
[17:02:16.205]     ...future.result$finished <- base::Sys.time()
[17:02:16.205]     ...future.result
[17:02:16.205] }
[17:02:16.207] plan(): Setting new future strategy stack:
[17:02:16.207] List of future strategies:
[17:02:16.207] 1. sequential:
[17:02:16.207]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.207]    - tweaked: FALSE
[17:02:16.207]    - call: NULL
[17:02:16.208] plan(): nbrOfWorkers() = 1
[17:02:16.209] plan(): Setting new future strategy stack:
[17:02:16.209] List of future strategies:
[17:02:16.209] 1. future:
[17:02:16.209]    - args: function (..., workers = "<NULL>")
[17:02:16.209]    - tweaked: FALSE
[17:02:16.209]    - call: plan(foo)
[17:02:16.209] plan(): nbrOfWorkers() = Inf
[17:02:16.210] SequentialFuture started (and completed)
[1] 42
[17:02:16.210] getGlobalsAndPackages() ...
[17:02:16.210] 
[17:02:16.210] - globals: [0] <none>
[17:02:16.210] getGlobalsAndPackages() ... DONE
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: 0x55699b2bcad8
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: bea4fa5d-47e8-a749-891d-df115c7f3570
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.212] Packages needed by the future expression (n = 0): <none>
[17:02:16.212] Packages needed by future strategies (n = 0): <none>
[17:02:16.213] {
[17:02:16.213]     {
[17:02:16.213]         {
[17:02:16.213]             ...future.startTime <- base::Sys.time()
[17:02:16.213]             {
[17:02:16.213]                 {
[17:02:16.213]                   {
[17:02:16.213]                     {
[17:02:16.213]                       base::local({
[17:02:16.213]                         has_future <- base::requireNamespace("future", 
[17:02:16.213]                           quietly = TRUE)
[17:02:16.213]                         if (has_future) {
[17:02:16.213]                           ns <- base::getNamespace("future")
[17:02:16.213]                           version <- ns[[".package"]][["version"]]
[17:02:16.213]                           if (is.null(version)) 
[17:02:16.213]                             version <- utils::packageVersion("future")
[17:02:16.213]                         }
[17:02:16.213]                         else {
[17:02:16.213]                           version <- NULL
[17:02:16.213]                         }
[17:02:16.213]                         if (!has_future || version < "1.8.0") {
[17:02:16.213]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.213]                             "", base::R.version$version.string), 
[17:02:16.213]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.213]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.213]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.213]                               "release", "version")], collapse = " "), 
[17:02:16.213]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.213]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.213]                             info)
[17:02:16.213]                           info <- base::paste(info, collapse = "; ")
[17:02:16.213]                           if (!has_future) {
[17:02:16.213]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.213]                               info)
[17:02:16.213]                           }
[17:02:16.213]                           else {
[17:02:16.213]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.213]                               info, version)
[17:02:16.213]                           }
[17:02:16.213]                           base::stop(msg)
[17:02:16.213]                         }
[17:02:16.213]                       })
[17:02:16.213]                     }
[17:02:16.213]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.213]                     base::options(mc.cores = 1L)
[17:02:16.213]                   }
[17:02:16.213]                   ...future.strategy.old <- future::plan("list")
[17:02:16.213]                   options(future.plan = NULL)
[17:02:16.213]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.213]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.213]                 }
[17:02:16.213]                 ...future.workdir <- getwd()
[17:02:16.213]             }
[17:02:16.213]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.213]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.213]         }
[17:02:16.213]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.213]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.213]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.213]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.213]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.213]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.213]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.213]             base::names(...future.oldOptions))
[17:02:16.213]     }
[17:02:16.213]     if (FALSE) {
[17:02:16.213]     }
[17:02:16.213]     else {
[17:02:16.213]         if (TRUE) {
[17:02:16.213]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.213]                 open = "w")
[17:02:16.213]         }
[17:02:16.213]         else {
[17:02:16.213]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.213]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.213]         }
[17:02:16.213]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.213]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.213]             base::sink(type = "output", split = FALSE)
[17:02:16.213]             base::close(...future.stdout)
[17:02:16.213]         }, add = TRUE)
[17:02:16.213]     }
[17:02:16.213]     ...future.frame <- base::sys.nframe()
[17:02:16.213]     ...future.conditions <- base::list()
[17:02:16.213]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.213]     if (FALSE) {
[17:02:16.213]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.213]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.213]     }
[17:02:16.213]     ...future.result <- base::tryCatch({
[17:02:16.213]         base::withCallingHandlers({
[17:02:16.213]             ...future.value <- base::withVisible(base::local({
[17:02:16.213]                 withCallingHandlers({
[17:02:16.213]                   {
[17:02:16.213]                     42L
[17:02:16.213]                   }
[17:02:16.213]                 }, immediateCondition = function(cond) {
[17:02:16.213]                   save_rds <- function (object, pathname, ...) 
[17:02:16.213]                   {
[17:02:16.213]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:16.213]                     if (file_test("-f", pathname_tmp)) {
[17:02:16.213]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.213]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:16.213]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.213]                         fi_tmp[["mtime"]])
[17:02:16.213]                     }
[17:02:16.213]                     tryCatch({
[17:02:16.213]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:16.213]                     }, error = function(ex) {
[17:02:16.213]                       msg <- conditionMessage(ex)
[17:02:16.213]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.213]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:16.213]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.213]                         fi_tmp[["mtime"]], msg)
[17:02:16.213]                       ex$message <- msg
[17:02:16.213]                       stop(ex)
[17:02:16.213]                     })
[17:02:16.213]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:16.213]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:16.213]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:16.213]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.213]                       fi <- file.info(pathname)
[17:02:16.213]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:16.213]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.213]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:16.213]                         fi[["size"]], fi[["mtime"]])
[17:02:16.213]                       stop(msg)
[17:02:16.213]                     }
[17:02:16.213]                     invisible(pathname)
[17:02:16.213]                   }
[17:02:16.213]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:16.213]                     rootPath = tempdir()) 
[17:02:16.213]                   {
[17:02:16.213]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:16.213]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:16.213]                       tmpdir = path, fileext = ".rds")
[17:02:16.213]                     save_rds(obj, file)
[17:02:16.213]                   }
[17:02:16.213]                   saveImmediateCondition(cond, path = "/tmp/RtmpsRgpZJ/.future/immediateConditions")
[17:02:16.213]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.213]                   {
[17:02:16.213]                     inherits <- base::inherits
[17:02:16.213]                     invokeRestart <- base::invokeRestart
[17:02:16.213]                     is.null <- base::is.null
[17:02:16.213]                     muffled <- FALSE
[17:02:16.213]                     if (inherits(cond, "message")) {
[17:02:16.213]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.213]                       if (muffled) 
[17:02:16.213]                         invokeRestart("muffleMessage")
[17:02:16.213]                     }
[17:02:16.213]                     else if (inherits(cond, "warning")) {
[17:02:16.213]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.213]                       if (muffled) 
[17:02:16.213]                         invokeRestart("muffleWarning")
[17:02:16.213]                     }
[17:02:16.213]                     else if (inherits(cond, "condition")) {
[17:02:16.213]                       if (!is.null(pattern)) {
[17:02:16.213]                         computeRestarts <- base::computeRestarts
[17:02:16.213]                         grepl <- base::grepl
[17:02:16.213]                         restarts <- computeRestarts(cond)
[17:02:16.213]                         for (restart in restarts) {
[17:02:16.213]                           name <- restart$name
[17:02:16.213]                           if (is.null(name)) 
[17:02:16.213]                             next
[17:02:16.213]                           if (!grepl(pattern, name)) 
[17:02:16.213]                             next
[17:02:16.213]                           invokeRestart(restart)
[17:02:16.213]                           muffled <- TRUE
[17:02:16.213]                           break
[17:02:16.213]                         }
[17:02:16.213]                       }
[17:02:16.213]                     }
[17:02:16.213]                     invisible(muffled)
[17:02:16.213]                   }
[17:02:16.213]                   muffleCondition(cond)
[17:02:16.213]                 })
[17:02:16.213]             }))
[17:02:16.213]             future::FutureResult(value = ...future.value$value, 
[17:02:16.213]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.213]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.213]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.213]                     ...future.globalenv.names))
[17:02:16.213]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.213]         }, condition = base::local({
[17:02:16.213]             c <- base::c
[17:02:16.213]             inherits <- base::inherits
[17:02:16.213]             invokeRestart <- base::invokeRestart
[17:02:16.213]             length <- base::length
[17:02:16.213]             list <- base::list
[17:02:16.213]             seq.int <- base::seq.int
[17:02:16.213]             signalCondition <- base::signalCondition
[17:02:16.213]             sys.calls <- base::sys.calls
[17:02:16.213]             `[[` <- base::`[[`
[17:02:16.213]             `+` <- base::`+`
[17:02:16.213]             `<<-` <- base::`<<-`
[17:02:16.213]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.213]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.213]                   3L)]
[17:02:16.213]             }
[17:02:16.213]             function(cond) {
[17:02:16.213]                 is_error <- inherits(cond, "error")
[17:02:16.213]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.213]                   NULL)
[17:02:16.213]                 if (is_error) {
[17:02:16.213]                   sessionInformation <- function() {
[17:02:16.213]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.213]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.213]                       search = base::search(), system = base::Sys.info())
[17:02:16.213]                   }
[17:02:16.213]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.213]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.213]                     cond$call), session = sessionInformation(), 
[17:02:16.213]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.213]                   signalCondition(cond)
[17:02:16.213]                 }
[17:02:16.213]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.213]                 "immediateCondition"))) {
[17:02:16.213]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.213]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.213]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.213]                   if (TRUE && !signal) {
[17:02:16.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.213]                     {
[17:02:16.213]                       inherits <- base::inherits
[17:02:16.213]                       invokeRestart <- base::invokeRestart
[17:02:16.213]                       is.null <- base::is.null
[17:02:16.213]                       muffled <- FALSE
[17:02:16.213]                       if (inherits(cond, "message")) {
[17:02:16.213]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.213]                         if (muffled) 
[17:02:16.213]                           invokeRestart("muffleMessage")
[17:02:16.213]                       }
[17:02:16.213]                       else if (inherits(cond, "warning")) {
[17:02:16.213]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.213]                         if (muffled) 
[17:02:16.213]                           invokeRestart("muffleWarning")
[17:02:16.213]                       }
[17:02:16.213]                       else if (inherits(cond, "condition")) {
[17:02:16.213]                         if (!is.null(pattern)) {
[17:02:16.213]                           computeRestarts <- base::computeRestarts
[17:02:16.213]                           grepl <- base::grepl
[17:02:16.213]                           restarts <- computeRestarts(cond)
[17:02:16.213]                           for (restart in restarts) {
[17:02:16.213]                             name <- restart$name
[17:02:16.213]                             if (is.null(name)) 
[17:02:16.213]                               next
[17:02:16.213]                             if (!grepl(pattern, name)) 
[17:02:16.213]                               next
[17:02:16.213]                             invokeRestart(restart)
[17:02:16.213]                             muffled <- TRUE
[17:02:16.213]                             break
[17:02:16.213]                           }
[17:02:16.213]                         }
[17:02:16.213]                       }
[17:02:16.213]                       invisible(muffled)
[17:02:16.213]                     }
[17:02:16.213]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.213]                   }
[17:02:16.213]                 }
[17:02:16.213]                 else {
[17:02:16.213]                   if (TRUE) {
[17:02:16.213]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.213]                     {
[17:02:16.213]                       inherits <- base::inherits
[17:02:16.213]                       invokeRestart <- base::invokeRestart
[17:02:16.213]                       is.null <- base::is.null
[17:02:16.213]                       muffled <- FALSE
[17:02:16.213]                       if (inherits(cond, "message")) {
[17:02:16.213]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.213]                         if (muffled) 
[17:02:16.213]                           invokeRestart("muffleMessage")
[17:02:16.213]                       }
[17:02:16.213]                       else if (inherits(cond, "warning")) {
[17:02:16.213]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.213]                         if (muffled) 
[17:02:16.213]                           invokeRestart("muffleWarning")
[17:02:16.213]                       }
[17:02:16.213]                       else if (inherits(cond, "condition")) {
[17:02:16.213]                         if (!is.null(pattern)) {
[17:02:16.213]                           computeRestarts <- base::computeRestarts
[17:02:16.213]                           grepl <- base::grepl
[17:02:16.213]                           restarts <- computeRestarts(cond)
[17:02:16.213]                           for (restart in restarts) {
[17:02:16.213]                             name <- restart$name
[17:02:16.213]                             if (is.null(name)) 
[17:02:16.213]                               next
[17:02:16.213]                             if (!grepl(pattern, name)) 
[17:02:16.213]                               next
[17:02:16.213]                             invokeRestart(restart)
[17:02:16.213]                             muffled <- TRUE
[17:02:16.213]                             break
[17:02:16.213]                           }
[17:02:16.213]                         }
[17:02:16.213]                       }
[17:02:16.213]                       invisible(muffled)
[17:02:16.213]                     }
[17:02:16.213]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.213]                   }
[17:02:16.213]                 }
[17:02:16.213]             }
[17:02:16.213]         }))
[17:02:16.213]     }, error = function(ex) {
[17:02:16.213]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.213]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.213]                 ...future.rng), started = ...future.startTime, 
[17:02:16.213]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.213]             version = "1.8"), class = "FutureResult")
[17:02:16.213]     }, finally = {
[17:02:16.213]         if (!identical(...future.workdir, getwd())) 
[17:02:16.213]             setwd(...future.workdir)
[17:02:16.213]         {
[17:02:16.213]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.213]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.213]             }
[17:02:16.213]             base::options(...future.oldOptions)
[17:02:16.213]             if (.Platform$OS.type == "windows") {
[17:02:16.213]                 old_names <- names(...future.oldEnvVars)
[17:02:16.213]                 envs <- base::Sys.getenv()
[17:02:16.213]                 names <- names(envs)
[17:02:16.213]                 common <- intersect(names, old_names)
[17:02:16.213]                 added <- setdiff(names, old_names)
[17:02:16.213]                 removed <- setdiff(old_names, names)
[17:02:16.213]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.213]                   envs[common]]
[17:02:16.213]                 NAMES <- toupper(changed)
[17:02:16.213]                 args <- list()
[17:02:16.213]                 for (kk in seq_along(NAMES)) {
[17:02:16.213]                   name <- changed[[kk]]
[17:02:16.213]                   NAME <- NAMES[[kk]]
[17:02:16.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.213]                     next
[17:02:16.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.213]                 }
[17:02:16.213]                 NAMES <- toupper(added)
[17:02:16.213]                 for (kk in seq_along(NAMES)) {
[17:02:16.213]                   name <- added[[kk]]
[17:02:16.213]                   NAME <- NAMES[[kk]]
[17:02:16.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.213]                     next
[17:02:16.213]                   args[[name]] <- ""
[17:02:16.213]                 }
[17:02:16.213]                 NAMES <- toupper(removed)
[17:02:16.213]                 for (kk in seq_along(NAMES)) {
[17:02:16.213]                   name <- removed[[kk]]
[17:02:16.213]                   NAME <- NAMES[[kk]]
[17:02:16.213]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.213]                     next
[17:02:16.213]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.213]                 }
[17:02:16.213]                 if (length(args) > 0) 
[17:02:16.213]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.213]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.213]             }
[17:02:16.213]             else {
[17:02:16.213]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.213]             }
[17:02:16.213]             {
[17:02:16.213]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.213]                   0L) {
[17:02:16.213]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.213]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.213]                   base::options(opts)
[17:02:16.213]                 }
[17:02:16.213]                 {
[17:02:16.213]                   {
[17:02:16.213]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.213]                     NULL
[17:02:16.213]                   }
[17:02:16.213]                   options(future.plan = NULL)
[17:02:16.213]                   if (is.na(NA_character_)) 
[17:02:16.213]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.213]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.213]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.213]                     .init = FALSE)
[17:02:16.213]                 }
[17:02:16.213]             }
[17:02:16.213]         }
[17:02:16.213]     })
[17:02:16.213]     if (TRUE) {
[17:02:16.213]         base::sink(type = "output", split = FALSE)
[17:02:16.213]         if (TRUE) {
[17:02:16.213]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.213]         }
[17:02:16.213]         else {
[17:02:16.213]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.213]         }
[17:02:16.213]         base::close(...future.stdout)
[17:02:16.213]         ...future.stdout <- NULL
[17:02:16.213]     }
[17:02:16.213]     ...future.result$conditions <- ...future.conditions
[17:02:16.213]     ...future.result$finished <- base::Sys.time()
[17:02:16.213]     ...future.result
[17:02:16.213] }
[17:02:16.215] requestCore(): workers = 2
[17:02:16.219] MulticoreFuture started
[17:02:16.219] plan(): Setting new future strategy stack:
[17:02:16.220] result() for MulticoreFuture ...
[17:02:16.219] List of future strategies:
[17:02:16.219] 1. sequential:
[17:02:16.219]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.219]    - tweaked: FALSE
[17:02:16.219]    - call: NULL
[17:02:16.220] plan(): nbrOfWorkers() = 1
[17:02:16.222] plan(): Setting new future strategy stack:
[17:02:16.222] List of future strategies:
[17:02:16.222] 1. future:
[17:02:16.222]    - args: function (..., workers = "<NULL>")
[17:02:16.222]    - tweaked: FALSE
[17:02:16.222]    - call: plan(foo)
[17:02:16.223] plan(): nbrOfWorkers() = Inf
[17:02:16.224] result() for MulticoreFuture ...
[17:02:16.224] result() for MulticoreFuture ... done
[17:02:16.225] result() for MulticoreFuture ... done
[17:02:16.225] result() for MulticoreFuture ...
[17:02:16.225] result() for MulticoreFuture ... done
[1] 42
[17:02:16.226] getGlobalsAndPackages() ...
[17:02:16.226] 
[17:02:16.227] - globals: [0] <none>
[17:02:16.227] getGlobalsAndPackages() ... DONE
[17:02:16.227] Packages needed by the future expression (n = 0): <none>
[17:02:16.228] Packages needed by future strategies (n = 0): <none>
[17:02:16.228] {
[17:02:16.228]     {
[17:02:16.228]         {
[17:02:16.228]             ...future.startTime <- base::Sys.time()
[17:02:16.228]             {
[17:02:16.228]                 {
[17:02:16.228]                   {
[17:02:16.228]                     {
[17:02:16.228]                       base::local({
[17:02:16.228]                         has_future <- base::requireNamespace("future", 
[17:02:16.228]                           quietly = TRUE)
[17:02:16.228]                         if (has_future) {
[17:02:16.228]                           ns <- base::getNamespace("future")
[17:02:16.228]                           version <- ns[[".package"]][["version"]]
[17:02:16.228]                           if (is.null(version)) 
[17:02:16.228]                             version <- utils::packageVersion("future")
[17:02:16.228]                         }
[17:02:16.228]                         else {
[17:02:16.228]                           version <- NULL
[17:02:16.228]                         }
[17:02:16.228]                         if (!has_future || version < "1.8.0") {
[17:02:16.228]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.228]                             "", base::R.version$version.string), 
[17:02:16.228]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.228]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.228]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.228]                               "release", "version")], collapse = " "), 
[17:02:16.228]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.228]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.228]                             info)
[17:02:16.228]                           info <- base::paste(info, collapse = "; ")
[17:02:16.228]                           if (!has_future) {
[17:02:16.228]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.228]                               info)
[17:02:16.228]                           }
[17:02:16.228]                           else {
[17:02:16.228]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.228]                               info, version)
[17:02:16.228]                           }
[17:02:16.228]                           base::stop(msg)
[17:02:16.228]                         }
[17:02:16.228]                       })
[17:02:16.228]                     }
[17:02:16.228]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.228]                     base::options(mc.cores = 1L)
[17:02:16.228]                   }
[17:02:16.228]                   ...future.strategy.old <- future::plan("list")
[17:02:16.228]                   options(future.plan = NULL)
[17:02:16.228]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.228]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.228]                 }
[17:02:16.228]                 ...future.workdir <- getwd()
[17:02:16.228]             }
[17:02:16.228]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.228]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.228]         }
[17:02:16.228]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.228]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.228]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.228]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.228]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.228]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.228]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.228]             base::names(...future.oldOptions))
[17:02:16.228]     }
[17:02:16.228]     if (FALSE) {
[17:02:16.228]     }
[17:02:16.228]     else {
[17:02:16.228]         if (TRUE) {
[17:02:16.228]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.228]                 open = "w")
[17:02:16.228]         }
[17:02:16.228]         else {
[17:02:16.228]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.228]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.228]         }
[17:02:16.228]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.228]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.228]             base::sink(type = "output", split = FALSE)
[17:02:16.228]             base::close(...future.stdout)
[17:02:16.228]         }, add = TRUE)
[17:02:16.228]     }
[17:02:16.228]     ...future.frame <- base::sys.nframe()
[17:02:16.228]     ...future.conditions <- base::list()
[17:02:16.228]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.228]     if (FALSE) {
[17:02:16.228]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.228]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.228]     }
[17:02:16.228]     ...future.result <- base::tryCatch({
[17:02:16.228]         base::withCallingHandlers({
[17:02:16.228]             ...future.value <- base::withVisible(base::local({
[17:02:16.228]                 withCallingHandlers({
[17:02:16.228]                   {
[17:02:16.228]                     42L
[17:02:16.228]                   }
[17:02:16.228]                 }, immediateCondition = function(cond) {
[17:02:16.228]                   save_rds <- function (object, pathname, ...) 
[17:02:16.228]                   {
[17:02:16.228]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:16.228]                     if (file_test("-f", pathname_tmp)) {
[17:02:16.228]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.228]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:16.228]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.228]                         fi_tmp[["mtime"]])
[17:02:16.228]                     }
[17:02:16.228]                     tryCatch({
[17:02:16.228]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:16.228]                     }, error = function(ex) {
[17:02:16.228]                       msg <- conditionMessage(ex)
[17:02:16.228]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.228]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:16.228]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.228]                         fi_tmp[["mtime"]], msg)
[17:02:16.228]                       ex$message <- msg
[17:02:16.228]                       stop(ex)
[17:02:16.228]                     })
[17:02:16.228]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:16.228]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:16.228]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:16.228]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.228]                       fi <- file.info(pathname)
[17:02:16.228]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:16.228]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.228]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:16.228]                         fi[["size"]], fi[["mtime"]])
[17:02:16.228]                       stop(msg)
[17:02:16.228]                     }
[17:02:16.228]                     invisible(pathname)
[17:02:16.228]                   }
[17:02:16.228]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:16.228]                     rootPath = tempdir()) 
[17:02:16.228]                   {
[17:02:16.228]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:16.228]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:16.228]                       tmpdir = path, fileext = ".rds")
[17:02:16.228]                     save_rds(obj, file)
[17:02:16.228]                   }
[17:02:16.228]                   saveImmediateCondition(cond, path = "/tmp/RtmpsRgpZJ/.future/immediateConditions")
[17:02:16.228]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.228]                   {
[17:02:16.228]                     inherits <- base::inherits
[17:02:16.228]                     invokeRestart <- base::invokeRestart
[17:02:16.228]                     is.null <- base::is.null
[17:02:16.228]                     muffled <- FALSE
[17:02:16.228]                     if (inherits(cond, "message")) {
[17:02:16.228]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.228]                       if (muffled) 
[17:02:16.228]                         invokeRestart("muffleMessage")
[17:02:16.228]                     }
[17:02:16.228]                     else if (inherits(cond, "warning")) {
[17:02:16.228]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.228]                       if (muffled) 
[17:02:16.228]                         invokeRestart("muffleWarning")
[17:02:16.228]                     }
[17:02:16.228]                     else if (inherits(cond, "condition")) {
[17:02:16.228]                       if (!is.null(pattern)) {
[17:02:16.228]                         computeRestarts <- base::computeRestarts
[17:02:16.228]                         grepl <- base::grepl
[17:02:16.228]                         restarts <- computeRestarts(cond)
[17:02:16.228]                         for (restart in restarts) {
[17:02:16.228]                           name <- restart$name
[17:02:16.228]                           if (is.null(name)) 
[17:02:16.228]                             next
[17:02:16.228]                           if (!grepl(pattern, name)) 
[17:02:16.228]                             next
[17:02:16.228]                           invokeRestart(restart)
[17:02:16.228]                           muffled <- TRUE
[17:02:16.228]                           break
[17:02:16.228]                         }
[17:02:16.228]                       }
[17:02:16.228]                     }
[17:02:16.228]                     invisible(muffled)
[17:02:16.228]                   }
[17:02:16.228]                   muffleCondition(cond)
[17:02:16.228]                 })
[17:02:16.228]             }))
[17:02:16.228]             future::FutureResult(value = ...future.value$value, 
[17:02:16.228]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.228]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.228]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.228]                     ...future.globalenv.names))
[17:02:16.228]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.228]         }, condition = base::local({
[17:02:16.228]             c <- base::c
[17:02:16.228]             inherits <- base::inherits
[17:02:16.228]             invokeRestart <- base::invokeRestart
[17:02:16.228]             length <- base::length
[17:02:16.228]             list <- base::list
[17:02:16.228]             seq.int <- base::seq.int
[17:02:16.228]             signalCondition <- base::signalCondition
[17:02:16.228]             sys.calls <- base::sys.calls
[17:02:16.228]             `[[` <- base::`[[`
[17:02:16.228]             `+` <- base::`+`
[17:02:16.228]             `<<-` <- base::`<<-`
[17:02:16.228]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.228]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.228]                   3L)]
[17:02:16.228]             }
[17:02:16.228]             function(cond) {
[17:02:16.228]                 is_error <- inherits(cond, "error")
[17:02:16.228]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.228]                   NULL)
[17:02:16.228]                 if (is_error) {
[17:02:16.228]                   sessionInformation <- function() {
[17:02:16.228]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.228]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.228]                       search = base::search(), system = base::Sys.info())
[17:02:16.228]                   }
[17:02:16.228]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.228]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.228]                     cond$call), session = sessionInformation(), 
[17:02:16.228]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.228]                   signalCondition(cond)
[17:02:16.228]                 }
[17:02:16.228]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.228]                 "immediateCondition"))) {
[17:02:16.228]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.228]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.228]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.228]                   if (TRUE && !signal) {
[17:02:16.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.228]                     {
[17:02:16.228]                       inherits <- base::inherits
[17:02:16.228]                       invokeRestart <- base::invokeRestart
[17:02:16.228]                       is.null <- base::is.null
[17:02:16.228]                       muffled <- FALSE
[17:02:16.228]                       if (inherits(cond, "message")) {
[17:02:16.228]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.228]                         if (muffled) 
[17:02:16.228]                           invokeRestart("muffleMessage")
[17:02:16.228]                       }
[17:02:16.228]                       else if (inherits(cond, "warning")) {
[17:02:16.228]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.228]                         if (muffled) 
[17:02:16.228]                           invokeRestart("muffleWarning")
[17:02:16.228]                       }
[17:02:16.228]                       else if (inherits(cond, "condition")) {
[17:02:16.228]                         if (!is.null(pattern)) {
[17:02:16.228]                           computeRestarts <- base::computeRestarts
[17:02:16.228]                           grepl <- base::grepl
[17:02:16.228]                           restarts <- computeRestarts(cond)
[17:02:16.228]                           for (restart in restarts) {
[17:02:16.228]                             name <- restart$name
[17:02:16.228]                             if (is.null(name)) 
[17:02:16.228]                               next
[17:02:16.228]                             if (!grepl(pattern, name)) 
[17:02:16.228]                               next
[17:02:16.228]                             invokeRestart(restart)
[17:02:16.228]                             muffled <- TRUE
[17:02:16.228]                             break
[17:02:16.228]                           }
[17:02:16.228]                         }
[17:02:16.228]                       }
[17:02:16.228]                       invisible(muffled)
[17:02:16.228]                     }
[17:02:16.228]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.228]                   }
[17:02:16.228]                 }
[17:02:16.228]                 else {
[17:02:16.228]                   if (TRUE) {
[17:02:16.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.228]                     {
[17:02:16.228]                       inherits <- base::inherits
[17:02:16.228]                       invokeRestart <- base::invokeRestart
[17:02:16.228]                       is.null <- base::is.null
[17:02:16.228]                       muffled <- FALSE
[17:02:16.228]                       if (inherits(cond, "message")) {
[17:02:16.228]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.228]                         if (muffled) 
[17:02:16.228]                           invokeRestart("muffleMessage")
[17:02:16.228]                       }
[17:02:16.228]                       else if (inherits(cond, "warning")) {
[17:02:16.228]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.228]                         if (muffled) 
[17:02:16.228]                           invokeRestart("muffleWarning")
[17:02:16.228]                       }
[17:02:16.228]                       else if (inherits(cond, "condition")) {
[17:02:16.228]                         if (!is.null(pattern)) {
[17:02:16.228]                           computeRestarts <- base::computeRestarts
[17:02:16.228]                           grepl <- base::grepl
[17:02:16.228]                           restarts <- computeRestarts(cond)
[17:02:16.228]                           for (restart in restarts) {
[17:02:16.228]                             name <- restart$name
[17:02:16.228]                             if (is.null(name)) 
[17:02:16.228]                               next
[17:02:16.228]                             if (!grepl(pattern, name)) 
[17:02:16.228]                               next
[17:02:16.228]                             invokeRestart(restart)
[17:02:16.228]                             muffled <- TRUE
[17:02:16.228]                             break
[17:02:16.228]                           }
[17:02:16.228]                         }
[17:02:16.228]                       }
[17:02:16.228]                       invisible(muffled)
[17:02:16.228]                     }
[17:02:16.228]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.228]                   }
[17:02:16.228]                 }
[17:02:16.228]             }
[17:02:16.228]         }))
[17:02:16.228]     }, error = function(ex) {
[17:02:16.228]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.228]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.228]                 ...future.rng), started = ...future.startTime, 
[17:02:16.228]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.228]             version = "1.8"), class = "FutureResult")
[17:02:16.228]     }, finally = {
[17:02:16.228]         if (!identical(...future.workdir, getwd())) 
[17:02:16.228]             setwd(...future.workdir)
[17:02:16.228]         {
[17:02:16.228]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.228]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.228]             }
[17:02:16.228]             base::options(...future.oldOptions)
[17:02:16.228]             if (.Platform$OS.type == "windows") {
[17:02:16.228]                 old_names <- names(...future.oldEnvVars)
[17:02:16.228]                 envs <- base::Sys.getenv()
[17:02:16.228]                 names <- names(envs)
[17:02:16.228]                 common <- intersect(names, old_names)
[17:02:16.228]                 added <- setdiff(names, old_names)
[17:02:16.228]                 removed <- setdiff(old_names, names)
[17:02:16.228]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.228]                   envs[common]]
[17:02:16.228]                 NAMES <- toupper(changed)
[17:02:16.228]                 args <- list()
[17:02:16.228]                 for (kk in seq_along(NAMES)) {
[17:02:16.228]                   name <- changed[[kk]]
[17:02:16.228]                   NAME <- NAMES[[kk]]
[17:02:16.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.228]                     next
[17:02:16.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.228]                 }
[17:02:16.228]                 NAMES <- toupper(added)
[17:02:16.228]                 for (kk in seq_along(NAMES)) {
[17:02:16.228]                   name <- added[[kk]]
[17:02:16.228]                   NAME <- NAMES[[kk]]
[17:02:16.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.228]                     next
[17:02:16.228]                   args[[name]] <- ""
[17:02:16.228]                 }
[17:02:16.228]                 NAMES <- toupper(removed)
[17:02:16.228]                 for (kk in seq_along(NAMES)) {
[17:02:16.228]                   name <- removed[[kk]]
[17:02:16.228]                   NAME <- NAMES[[kk]]
[17:02:16.228]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.228]                     next
[17:02:16.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.228]                 }
[17:02:16.228]                 if (length(args) > 0) 
[17:02:16.228]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.228]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.228]             }
[17:02:16.228]             else {
[17:02:16.228]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.228]             }
[17:02:16.228]             {
[17:02:16.228]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.228]                   0L) {
[17:02:16.228]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.228]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.228]                   base::options(opts)
[17:02:16.228]                 }
[17:02:16.228]                 {
[17:02:16.228]                   {
[17:02:16.228]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.228]                     NULL
[17:02:16.228]                   }
[17:02:16.228]                   options(future.plan = NULL)
[17:02:16.228]                   if (is.na(NA_character_)) 
[17:02:16.228]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.228]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.228]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.228]                     .init = FALSE)
[17:02:16.228]                 }
[17:02:16.228]             }
[17:02:16.228]         }
[17:02:16.228]     })
[17:02:16.228]     if (TRUE) {
[17:02:16.228]         base::sink(type = "output", split = FALSE)
[17:02:16.228]         if (TRUE) {
[17:02:16.228]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.228]         }
[17:02:16.228]         else {
[17:02:16.228]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.228]         }
[17:02:16.228]         base::close(...future.stdout)
[17:02:16.228]         ...future.stdout <- NULL
[17:02:16.228]     }
[17:02:16.228]     ...future.result$conditions <- ...future.conditions
[17:02:16.228]     ...future.result$finished <- base::Sys.time()
[17:02:16.228]     ...future.result
[17:02:16.228] }
[17:02:16.231] requestCore(): workers = 2
[17:02:16.233] MulticoreFuture started
[17:02:16.234] result() for MulticoreFuture ...
[17:02:16.234] plan(): Setting new future strategy stack:
[17:02:16.235] List of future strategies:
[17:02:16.235] 1. sequential:
[17:02:16.235]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.235]    - tweaked: FALSE
[17:02:16.235]    - call: NULL
[17:02:16.236] plan(): nbrOfWorkers() = 1
[17:02:16.237] plan(): Setting new future strategy stack:
[17:02:16.238] List of future strategies:
[17:02:16.238] 1. future:
[17:02:16.238]    - args: function (..., workers = "<NULL>")
[17:02:16.238]    - tweaked: FALSE
[17:02:16.238]    - call: plan(foo)
[17:02:16.238] plan(): nbrOfWorkers() = Inf
[17:02:16.239] result() for MulticoreFuture ...
[17:02:16.239] result() for MulticoreFuture ... done
[17:02:16.239] result() for MulticoreFuture ... done
[17:02:16.239] result() for MulticoreFuture ...
[17:02:16.240] result() for MulticoreFuture ... done
[1] 42
> 
> message("*** Future class - exception ... DONE")
*** Future class - exception ... DONE
> 
> message("*** Future class ... DONE")
*** Future class ... DONE
> 
> source("incl/end.R")
[17:02:16.241] plan(): Setting new future strategy stack:
[17:02:16.241] List of future strategies:
[17:02:16.241] 1. FutureStrategy:
[17:02:16.241]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.241]    - tweaked: FALSE
[17:02:16.241]    - call: future::plan(oplan)
[17:02:16.242] plan(): nbrOfWorkers() = 1
> 
