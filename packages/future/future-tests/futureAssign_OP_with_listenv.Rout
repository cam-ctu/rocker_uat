
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:35.878] plan(): Setting new future strategy stack:
[17:46:35.878] List of future strategies:
[17:46:35.878] 1. sequential:
[17:46:35.878]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.878]    - tweaked: FALSE
[17:46:35.878]    - call: future::plan("sequential")
[17:46:35.889] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[17:46:35.906] getGlobalsAndPackages() ...
[17:46:35.906] Searching for globals...
[17:46:35.909] - globals found: [1] ‘{’
[17:46:35.909] Searching for globals ... DONE
[17:46:35.909] Resolving globals: FALSE
[17:46:35.910] 
[17:46:35.910] 
[17:46:35.910] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[17:46:35.911] getGlobalsAndPackages() ...
[17:46:35.911] Searching for globals...
[17:46:35.911] - globals found: [1] ‘{’
[17:46:35.911] Searching for globals ... DONE
[17:46:35.911] Resolving globals: FALSE
[17:46:35.912] 
[17:46:35.912] 
[17:46:35.912] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[17:46:35.912] getGlobalsAndPackages() ...
[17:46:35.913] Searching for globals...
[17:46:35.913] - globals found: [1] ‘{’
[17:46:35.913] Searching for globals ... DONE
[17:46:35.913] Resolving globals: FALSE
[17:46:35.913] 
[17:46:35.914] 
[17:46:35.914] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[17:46:35.914] getGlobalsAndPackages() ...
[17:46:35.914] Searching for globals...
[17:46:35.915] - globals found: [1] ‘{’
[17:46:35.915] Searching for globals ... DONE
[17:46:35.915] Resolving globals: FALSE
[17:46:35.915] 
[17:46:35.916] 
[17:46:35.916] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[17:46:35.916] run() for ‘Future’ ...
[17:46:35.917] - state: ‘created’
[17:46:35.917] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.917] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.917] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.917]   - Field: ‘label’
[17:46:35.917]   - Field: ‘local’
[17:46:35.918]   - Field: ‘owner’
[17:46:35.918]   - Field: ‘envir’
[17:46:35.918]   - Field: ‘packages’
[17:46:35.918]   - Field: ‘gc’
[17:46:35.918]   - Field: ‘conditions’
[17:46:35.918]   - Field: ‘expr’
[17:46:35.918]   - Field: ‘uuid’
[17:46:35.918]   - Field: ‘seed’
[17:46:35.918]   - Field: ‘version’
[17:46:35.918]   - Field: ‘result’
[17:46:35.918]   - Field: ‘asynchronous’
[17:46:35.919]   - Field: ‘calls’
[17:46:35.919]   - Field: ‘globals’
[17:46:35.919]   - Field: ‘stdout’
[17:46:35.919]   - Field: ‘earlySignal’
[17:46:35.919]   - Field: ‘lazy’
[17:46:35.919]   - Field: ‘state’
[17:46:35.919] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.919] - Launch lazy future ...
[17:46:35.920] Packages needed by the future expression (n = 0): <none>
[17:46:35.920] Packages needed by future strategies (n = 0): <none>
[17:46:35.921] {
[17:46:35.921]     {
[17:46:35.921]         {
[17:46:35.921]             ...future.startTime <- base::Sys.time()
[17:46:35.921]             {
[17:46:35.921]                 {
[17:46:35.921]                   {
[17:46:35.921]                     base::local({
[17:46:35.921]                       has_future <- base::requireNamespace("future", 
[17:46:35.921]                         quietly = TRUE)
[17:46:35.921]                       if (has_future) {
[17:46:35.921]                         ns <- base::getNamespace("future")
[17:46:35.921]                         version <- ns[[".package"]][["version"]]
[17:46:35.921]                         if (is.null(version)) 
[17:46:35.921]                           version <- utils::packageVersion("future")
[17:46:35.921]                       }
[17:46:35.921]                       else {
[17:46:35.921]                         version <- NULL
[17:46:35.921]                       }
[17:46:35.921]                       if (!has_future || version < "1.8.0") {
[17:46:35.921]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.921]                           "", base::R.version$version.string), 
[17:46:35.921]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.921]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.921]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.921]                             "release", "version")], collapse = " "), 
[17:46:35.921]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.921]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.921]                           info)
[17:46:35.921]                         info <- base::paste(info, collapse = "; ")
[17:46:35.921]                         if (!has_future) {
[17:46:35.921]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.921]                             info)
[17:46:35.921]                         }
[17:46:35.921]                         else {
[17:46:35.921]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.921]                             info, version)
[17:46:35.921]                         }
[17:46:35.921]                         base::stop(msg)
[17:46:35.921]                       }
[17:46:35.921]                     })
[17:46:35.921]                   }
[17:46:35.921]                   ...future.strategy.old <- future::plan("list")
[17:46:35.921]                   options(future.plan = NULL)
[17:46:35.921]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.921]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.921]                 }
[17:46:35.921]                 ...future.workdir <- getwd()
[17:46:35.921]             }
[17:46:35.921]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.921]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.921]         }
[17:46:35.921]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.921]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.921]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.921]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.921]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.921]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.921]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.921]             base::names(...future.oldOptions))
[17:46:35.921]     }
[17:46:35.921]     if (FALSE) {
[17:46:35.921]     }
[17:46:35.921]     else {
[17:46:35.921]         if (TRUE) {
[17:46:35.921]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.921]                 open = "w")
[17:46:35.921]         }
[17:46:35.921]         else {
[17:46:35.921]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.921]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.921]         }
[17:46:35.921]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.921]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.921]             base::sink(type = "output", split = FALSE)
[17:46:35.921]             base::close(...future.stdout)
[17:46:35.921]         }, add = TRUE)
[17:46:35.921]     }
[17:46:35.921]     ...future.frame <- base::sys.nframe()
[17:46:35.921]     ...future.conditions <- base::list()
[17:46:35.921]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.921]     if (FALSE) {
[17:46:35.921]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.921]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.921]     }
[17:46:35.921]     ...future.result <- base::tryCatch({
[17:46:35.921]         base::withCallingHandlers({
[17:46:35.921]             ...future.value <- base::withVisible(base::local({
[17:46:35.921]                 2
[17:46:35.921]             }))
[17:46:35.921]             future::FutureResult(value = ...future.value$value, 
[17:46:35.921]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.921]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.921]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.921]                     ...future.globalenv.names))
[17:46:35.921]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.921]         }, condition = base::local({
[17:46:35.921]             c <- base::c
[17:46:35.921]             inherits <- base::inherits
[17:46:35.921]             invokeRestart <- base::invokeRestart
[17:46:35.921]             length <- base::length
[17:46:35.921]             list <- base::list
[17:46:35.921]             seq.int <- base::seq.int
[17:46:35.921]             signalCondition <- base::signalCondition
[17:46:35.921]             sys.calls <- base::sys.calls
[17:46:35.921]             `[[` <- base::`[[`
[17:46:35.921]             `+` <- base::`+`
[17:46:35.921]             `<<-` <- base::`<<-`
[17:46:35.921]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.921]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.921]                   3L)]
[17:46:35.921]             }
[17:46:35.921]             function(cond) {
[17:46:35.921]                 is_error <- inherits(cond, "error")
[17:46:35.921]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.921]                   NULL)
[17:46:35.921]                 if (is_error) {
[17:46:35.921]                   sessionInformation <- function() {
[17:46:35.921]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.921]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.921]                       search = base::search(), system = base::Sys.info())
[17:46:35.921]                   }
[17:46:35.921]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.921]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.921]                     cond$call), session = sessionInformation(), 
[17:46:35.921]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.921]                   signalCondition(cond)
[17:46:35.921]                 }
[17:46:35.921]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.921]                 "immediateCondition"))) {
[17:46:35.921]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.921]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.921]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.921]                   if (TRUE && !signal) {
[17:46:35.921]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.921]                     {
[17:46:35.921]                       inherits <- base::inherits
[17:46:35.921]                       invokeRestart <- base::invokeRestart
[17:46:35.921]                       is.null <- base::is.null
[17:46:35.921]                       muffled <- FALSE
[17:46:35.921]                       if (inherits(cond, "message")) {
[17:46:35.921]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.921]                         if (muffled) 
[17:46:35.921]                           invokeRestart("muffleMessage")
[17:46:35.921]                       }
[17:46:35.921]                       else if (inherits(cond, "warning")) {
[17:46:35.921]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.921]                         if (muffled) 
[17:46:35.921]                           invokeRestart("muffleWarning")
[17:46:35.921]                       }
[17:46:35.921]                       else if (inherits(cond, "condition")) {
[17:46:35.921]                         if (!is.null(pattern)) {
[17:46:35.921]                           computeRestarts <- base::computeRestarts
[17:46:35.921]                           grepl <- base::grepl
[17:46:35.921]                           restarts <- computeRestarts(cond)
[17:46:35.921]                           for (restart in restarts) {
[17:46:35.921]                             name <- restart$name
[17:46:35.921]                             if (is.null(name)) 
[17:46:35.921]                               next
[17:46:35.921]                             if (!grepl(pattern, name)) 
[17:46:35.921]                               next
[17:46:35.921]                             invokeRestart(restart)
[17:46:35.921]                             muffled <- TRUE
[17:46:35.921]                             break
[17:46:35.921]                           }
[17:46:35.921]                         }
[17:46:35.921]                       }
[17:46:35.921]                       invisible(muffled)
[17:46:35.921]                     }
[17:46:35.921]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.921]                   }
[17:46:35.921]                 }
[17:46:35.921]                 else {
[17:46:35.921]                   if (TRUE) {
[17:46:35.921]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.921]                     {
[17:46:35.921]                       inherits <- base::inherits
[17:46:35.921]                       invokeRestart <- base::invokeRestart
[17:46:35.921]                       is.null <- base::is.null
[17:46:35.921]                       muffled <- FALSE
[17:46:35.921]                       if (inherits(cond, "message")) {
[17:46:35.921]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.921]                         if (muffled) 
[17:46:35.921]                           invokeRestart("muffleMessage")
[17:46:35.921]                       }
[17:46:35.921]                       else if (inherits(cond, "warning")) {
[17:46:35.921]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.921]                         if (muffled) 
[17:46:35.921]                           invokeRestart("muffleWarning")
[17:46:35.921]                       }
[17:46:35.921]                       else if (inherits(cond, "condition")) {
[17:46:35.921]                         if (!is.null(pattern)) {
[17:46:35.921]                           computeRestarts <- base::computeRestarts
[17:46:35.921]                           grepl <- base::grepl
[17:46:35.921]                           restarts <- computeRestarts(cond)
[17:46:35.921]                           for (restart in restarts) {
[17:46:35.921]                             name <- restart$name
[17:46:35.921]                             if (is.null(name)) 
[17:46:35.921]                               next
[17:46:35.921]                             if (!grepl(pattern, name)) 
[17:46:35.921]                               next
[17:46:35.921]                             invokeRestart(restart)
[17:46:35.921]                             muffled <- TRUE
[17:46:35.921]                             break
[17:46:35.921]                           }
[17:46:35.921]                         }
[17:46:35.921]                       }
[17:46:35.921]                       invisible(muffled)
[17:46:35.921]                     }
[17:46:35.921]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.921]                   }
[17:46:35.921]                 }
[17:46:35.921]             }
[17:46:35.921]         }))
[17:46:35.921]     }, error = function(ex) {
[17:46:35.921]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.921]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.921]                 ...future.rng), started = ...future.startTime, 
[17:46:35.921]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.921]             version = "1.8"), class = "FutureResult")
[17:46:35.921]     }, finally = {
[17:46:35.921]         if (!identical(...future.workdir, getwd())) 
[17:46:35.921]             setwd(...future.workdir)
[17:46:35.921]         {
[17:46:35.921]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.921]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.921]             }
[17:46:35.921]             base::options(...future.oldOptions)
[17:46:35.921]             if (.Platform$OS.type == "windows") {
[17:46:35.921]                 old_names <- names(...future.oldEnvVars)
[17:46:35.921]                 envs <- base::Sys.getenv()
[17:46:35.921]                 names <- names(envs)
[17:46:35.921]                 common <- intersect(names, old_names)
[17:46:35.921]                 added <- setdiff(names, old_names)
[17:46:35.921]                 removed <- setdiff(old_names, names)
[17:46:35.921]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.921]                   envs[common]]
[17:46:35.921]                 NAMES <- toupper(changed)
[17:46:35.921]                 args <- list()
[17:46:35.921]                 for (kk in seq_along(NAMES)) {
[17:46:35.921]                   name <- changed[[kk]]
[17:46:35.921]                   NAME <- NAMES[[kk]]
[17:46:35.921]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.921]                     next
[17:46:35.921]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.921]                 }
[17:46:35.921]                 NAMES <- toupper(added)
[17:46:35.921]                 for (kk in seq_along(NAMES)) {
[17:46:35.921]                   name <- added[[kk]]
[17:46:35.921]                   NAME <- NAMES[[kk]]
[17:46:35.921]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.921]                     next
[17:46:35.921]                   args[[name]] <- ""
[17:46:35.921]                 }
[17:46:35.921]                 NAMES <- toupper(removed)
[17:46:35.921]                 for (kk in seq_along(NAMES)) {
[17:46:35.921]                   name <- removed[[kk]]
[17:46:35.921]                   NAME <- NAMES[[kk]]
[17:46:35.921]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.921]                     next
[17:46:35.921]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.921]                 }
[17:46:35.921]                 if (length(args) > 0) 
[17:46:35.921]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.921]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.921]             }
[17:46:35.921]             else {
[17:46:35.921]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.921]             }
[17:46:35.921]             {
[17:46:35.921]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.921]                   0L) {
[17:46:35.921]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.921]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.921]                   base::options(opts)
[17:46:35.921]                 }
[17:46:35.921]                 {
[17:46:35.921]                   {
[17:46:35.921]                     NULL
[17:46:35.921]                     RNGkind("Mersenne-Twister")
[17:46:35.921]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.921]                       inherits = FALSE)
[17:46:35.921]                   }
[17:46:35.921]                   options(future.plan = NULL)
[17:46:35.921]                   if (is.na(NA_character_)) 
[17:46:35.921]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.921]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.921]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.921]                     .init = FALSE)
[17:46:35.921]                 }
[17:46:35.921]             }
[17:46:35.921]         }
[17:46:35.921]     })
[17:46:35.921]     if (TRUE) {
[17:46:35.921]         base::sink(type = "output", split = FALSE)
[17:46:35.921]         if (TRUE) {
[17:46:35.921]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.921]         }
[17:46:35.921]         else {
[17:46:35.921]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.921]         }
[17:46:35.921]         base::close(...future.stdout)
[17:46:35.921]         ...future.stdout <- NULL
[17:46:35.921]     }
[17:46:35.921]     ...future.result$conditions <- ...future.conditions
[17:46:35.921]     ...future.result$finished <- base::Sys.time()
[17:46:35.921]     ...future.result
[17:46:35.921] }
[17:46:35.923] plan(): Setting new future strategy stack:
[17:46:35.923] List of future strategies:
[17:46:35.923] 1. sequential:
[17:46:35.923]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.923]    - tweaked: FALSE
[17:46:35.923]    - call: NULL
[17:46:35.923] plan(): nbrOfWorkers() = 1
[17:46:35.924] plan(): Setting new future strategy stack:
[17:46:35.924] List of future strategies:
[17:46:35.924] 1. sequential:
[17:46:35.924]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.924]    - tweaked: FALSE
[17:46:35.924]    - call: future::plan("sequential")
[17:46:35.925] plan(): nbrOfWorkers() = 1
[17:46:35.925] SequentialFuture started (and completed)
[17:46:35.925] - Launch lazy future ... done
[17:46:35.925] run() for ‘SequentialFuture’ ... done
[17:46:35.926] run() for ‘Future’ ...
[17:46:35.926] - state: ‘created’
[17:46:35.926] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.926] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.926] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.926]   - Field: ‘label’
[17:46:35.926]   - Field: ‘local’
[17:46:35.927]   - Field: ‘owner’
[17:46:35.927]   - Field: ‘envir’
[17:46:35.927]   - Field: ‘packages’
[17:46:35.927]   - Field: ‘gc’
[17:46:35.927]   - Field: ‘conditions’
[17:46:35.927]   - Field: ‘expr’
[17:46:35.927]   - Field: ‘uuid’
[17:46:35.927]   - Field: ‘seed’
[17:46:35.927]   - Field: ‘version’
[17:46:35.927]   - Field: ‘result’
[17:46:35.927]   - Field: ‘asynchronous’
[17:46:35.928]   - Field: ‘calls’
[17:46:35.928]   - Field: ‘globals’
[17:46:35.928]   - Field: ‘stdout’
[17:46:35.928]   - Field: ‘earlySignal’
[17:46:35.928]   - Field: ‘lazy’
[17:46:35.928]   - Field: ‘state’
[17:46:35.928] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.928] - Launch lazy future ...
[17:46:35.928] Packages needed by the future expression (n = 0): <none>
[17:46:35.928] Packages needed by future strategies (n = 0): <none>
[17:46:35.929] {
[17:46:35.929]     {
[17:46:35.929]         {
[17:46:35.929]             ...future.startTime <- base::Sys.time()
[17:46:35.929]             {
[17:46:35.929]                 {
[17:46:35.929]                   {
[17:46:35.929]                     base::local({
[17:46:35.929]                       has_future <- base::requireNamespace("future", 
[17:46:35.929]                         quietly = TRUE)
[17:46:35.929]                       if (has_future) {
[17:46:35.929]                         ns <- base::getNamespace("future")
[17:46:35.929]                         version <- ns[[".package"]][["version"]]
[17:46:35.929]                         if (is.null(version)) 
[17:46:35.929]                           version <- utils::packageVersion("future")
[17:46:35.929]                       }
[17:46:35.929]                       else {
[17:46:35.929]                         version <- NULL
[17:46:35.929]                       }
[17:46:35.929]                       if (!has_future || version < "1.8.0") {
[17:46:35.929]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.929]                           "", base::R.version$version.string), 
[17:46:35.929]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.929]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.929]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.929]                             "release", "version")], collapse = " "), 
[17:46:35.929]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.929]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.929]                           info)
[17:46:35.929]                         info <- base::paste(info, collapse = "; ")
[17:46:35.929]                         if (!has_future) {
[17:46:35.929]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.929]                             info)
[17:46:35.929]                         }
[17:46:35.929]                         else {
[17:46:35.929]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.929]                             info, version)
[17:46:35.929]                         }
[17:46:35.929]                         base::stop(msg)
[17:46:35.929]                       }
[17:46:35.929]                     })
[17:46:35.929]                   }
[17:46:35.929]                   ...future.strategy.old <- future::plan("list")
[17:46:35.929]                   options(future.plan = NULL)
[17:46:35.929]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.929]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.929]                 }
[17:46:35.929]                 ...future.workdir <- getwd()
[17:46:35.929]             }
[17:46:35.929]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.929]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.929]         }
[17:46:35.929]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.929]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.929]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.929]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.929]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.929]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.929]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.929]             base::names(...future.oldOptions))
[17:46:35.929]     }
[17:46:35.929]     if (FALSE) {
[17:46:35.929]     }
[17:46:35.929]     else {
[17:46:35.929]         if (TRUE) {
[17:46:35.929]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.929]                 open = "w")
[17:46:35.929]         }
[17:46:35.929]         else {
[17:46:35.929]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.929]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.929]         }
[17:46:35.929]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.929]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.929]             base::sink(type = "output", split = FALSE)
[17:46:35.929]             base::close(...future.stdout)
[17:46:35.929]         }, add = TRUE)
[17:46:35.929]     }
[17:46:35.929]     ...future.frame <- base::sys.nframe()
[17:46:35.929]     ...future.conditions <- base::list()
[17:46:35.929]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.929]     if (FALSE) {
[17:46:35.929]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.929]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.929]     }
[17:46:35.929]     ...future.result <- base::tryCatch({
[17:46:35.929]         base::withCallingHandlers({
[17:46:35.929]             ...future.value <- base::withVisible(base::local({
[17:46:35.929]                 "async!"
[17:46:35.929]             }))
[17:46:35.929]             future::FutureResult(value = ...future.value$value, 
[17:46:35.929]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.929]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.929]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.929]                     ...future.globalenv.names))
[17:46:35.929]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.929]         }, condition = base::local({
[17:46:35.929]             c <- base::c
[17:46:35.929]             inherits <- base::inherits
[17:46:35.929]             invokeRestart <- base::invokeRestart
[17:46:35.929]             length <- base::length
[17:46:35.929]             list <- base::list
[17:46:35.929]             seq.int <- base::seq.int
[17:46:35.929]             signalCondition <- base::signalCondition
[17:46:35.929]             sys.calls <- base::sys.calls
[17:46:35.929]             `[[` <- base::`[[`
[17:46:35.929]             `+` <- base::`+`
[17:46:35.929]             `<<-` <- base::`<<-`
[17:46:35.929]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.929]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.929]                   3L)]
[17:46:35.929]             }
[17:46:35.929]             function(cond) {
[17:46:35.929]                 is_error <- inherits(cond, "error")
[17:46:35.929]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.929]                   NULL)
[17:46:35.929]                 if (is_error) {
[17:46:35.929]                   sessionInformation <- function() {
[17:46:35.929]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.929]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.929]                       search = base::search(), system = base::Sys.info())
[17:46:35.929]                   }
[17:46:35.929]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.929]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.929]                     cond$call), session = sessionInformation(), 
[17:46:35.929]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.929]                   signalCondition(cond)
[17:46:35.929]                 }
[17:46:35.929]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.929]                 "immediateCondition"))) {
[17:46:35.929]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.929]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.929]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.929]                   if (TRUE && !signal) {
[17:46:35.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.929]                     {
[17:46:35.929]                       inherits <- base::inherits
[17:46:35.929]                       invokeRestart <- base::invokeRestart
[17:46:35.929]                       is.null <- base::is.null
[17:46:35.929]                       muffled <- FALSE
[17:46:35.929]                       if (inherits(cond, "message")) {
[17:46:35.929]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.929]                         if (muffled) 
[17:46:35.929]                           invokeRestart("muffleMessage")
[17:46:35.929]                       }
[17:46:35.929]                       else if (inherits(cond, "warning")) {
[17:46:35.929]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.929]                         if (muffled) 
[17:46:35.929]                           invokeRestart("muffleWarning")
[17:46:35.929]                       }
[17:46:35.929]                       else if (inherits(cond, "condition")) {
[17:46:35.929]                         if (!is.null(pattern)) {
[17:46:35.929]                           computeRestarts <- base::computeRestarts
[17:46:35.929]                           grepl <- base::grepl
[17:46:35.929]                           restarts <- computeRestarts(cond)
[17:46:35.929]                           for (restart in restarts) {
[17:46:35.929]                             name <- restart$name
[17:46:35.929]                             if (is.null(name)) 
[17:46:35.929]                               next
[17:46:35.929]                             if (!grepl(pattern, name)) 
[17:46:35.929]                               next
[17:46:35.929]                             invokeRestart(restart)
[17:46:35.929]                             muffled <- TRUE
[17:46:35.929]                             break
[17:46:35.929]                           }
[17:46:35.929]                         }
[17:46:35.929]                       }
[17:46:35.929]                       invisible(muffled)
[17:46:35.929]                     }
[17:46:35.929]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.929]                   }
[17:46:35.929]                 }
[17:46:35.929]                 else {
[17:46:35.929]                   if (TRUE) {
[17:46:35.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.929]                     {
[17:46:35.929]                       inherits <- base::inherits
[17:46:35.929]                       invokeRestart <- base::invokeRestart
[17:46:35.929]                       is.null <- base::is.null
[17:46:35.929]                       muffled <- FALSE
[17:46:35.929]                       if (inherits(cond, "message")) {
[17:46:35.929]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.929]                         if (muffled) 
[17:46:35.929]                           invokeRestart("muffleMessage")
[17:46:35.929]                       }
[17:46:35.929]                       else if (inherits(cond, "warning")) {
[17:46:35.929]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.929]                         if (muffled) 
[17:46:35.929]                           invokeRestart("muffleWarning")
[17:46:35.929]                       }
[17:46:35.929]                       else if (inherits(cond, "condition")) {
[17:46:35.929]                         if (!is.null(pattern)) {
[17:46:35.929]                           computeRestarts <- base::computeRestarts
[17:46:35.929]                           grepl <- base::grepl
[17:46:35.929]                           restarts <- computeRestarts(cond)
[17:46:35.929]                           for (restart in restarts) {
[17:46:35.929]                             name <- restart$name
[17:46:35.929]                             if (is.null(name)) 
[17:46:35.929]                               next
[17:46:35.929]                             if (!grepl(pattern, name)) 
[17:46:35.929]                               next
[17:46:35.929]                             invokeRestart(restart)
[17:46:35.929]                             muffled <- TRUE
[17:46:35.929]                             break
[17:46:35.929]                           }
[17:46:35.929]                         }
[17:46:35.929]                       }
[17:46:35.929]                       invisible(muffled)
[17:46:35.929]                     }
[17:46:35.929]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.929]                   }
[17:46:35.929]                 }
[17:46:35.929]             }
[17:46:35.929]         }))
[17:46:35.929]     }, error = function(ex) {
[17:46:35.929]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.929]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.929]                 ...future.rng), started = ...future.startTime, 
[17:46:35.929]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.929]             version = "1.8"), class = "FutureResult")
[17:46:35.929]     }, finally = {
[17:46:35.929]         if (!identical(...future.workdir, getwd())) 
[17:46:35.929]             setwd(...future.workdir)
[17:46:35.929]         {
[17:46:35.929]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.929]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.929]             }
[17:46:35.929]             base::options(...future.oldOptions)
[17:46:35.929]             if (.Platform$OS.type == "windows") {
[17:46:35.929]                 old_names <- names(...future.oldEnvVars)
[17:46:35.929]                 envs <- base::Sys.getenv()
[17:46:35.929]                 names <- names(envs)
[17:46:35.929]                 common <- intersect(names, old_names)
[17:46:35.929]                 added <- setdiff(names, old_names)
[17:46:35.929]                 removed <- setdiff(old_names, names)
[17:46:35.929]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.929]                   envs[common]]
[17:46:35.929]                 NAMES <- toupper(changed)
[17:46:35.929]                 args <- list()
[17:46:35.929]                 for (kk in seq_along(NAMES)) {
[17:46:35.929]                   name <- changed[[kk]]
[17:46:35.929]                   NAME <- NAMES[[kk]]
[17:46:35.929]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.929]                     next
[17:46:35.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.929]                 }
[17:46:35.929]                 NAMES <- toupper(added)
[17:46:35.929]                 for (kk in seq_along(NAMES)) {
[17:46:35.929]                   name <- added[[kk]]
[17:46:35.929]                   NAME <- NAMES[[kk]]
[17:46:35.929]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.929]                     next
[17:46:35.929]                   args[[name]] <- ""
[17:46:35.929]                 }
[17:46:35.929]                 NAMES <- toupper(removed)
[17:46:35.929]                 for (kk in seq_along(NAMES)) {
[17:46:35.929]                   name <- removed[[kk]]
[17:46:35.929]                   NAME <- NAMES[[kk]]
[17:46:35.929]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.929]                     next
[17:46:35.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.929]                 }
[17:46:35.929]                 if (length(args) > 0) 
[17:46:35.929]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.929]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.929]             }
[17:46:35.929]             else {
[17:46:35.929]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.929]             }
[17:46:35.929]             {
[17:46:35.929]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.929]                   0L) {
[17:46:35.929]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.929]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.929]                   base::options(opts)
[17:46:35.929]                 }
[17:46:35.929]                 {
[17:46:35.929]                   {
[17:46:35.929]                     NULL
[17:46:35.929]                     RNGkind("Mersenne-Twister")
[17:46:35.929]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.929]                       inherits = FALSE)
[17:46:35.929]                   }
[17:46:35.929]                   options(future.plan = NULL)
[17:46:35.929]                   if (is.na(NA_character_)) 
[17:46:35.929]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.929]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.929]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.929]                     .init = FALSE)
[17:46:35.929]                 }
[17:46:35.929]             }
[17:46:35.929]         }
[17:46:35.929]     })
[17:46:35.929]     if (TRUE) {
[17:46:35.929]         base::sink(type = "output", split = FALSE)
[17:46:35.929]         if (TRUE) {
[17:46:35.929]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.929]         }
[17:46:35.929]         else {
[17:46:35.929]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.929]         }
[17:46:35.929]         base::close(...future.stdout)
[17:46:35.929]         ...future.stdout <- NULL
[17:46:35.929]     }
[17:46:35.929]     ...future.result$conditions <- ...future.conditions
[17:46:35.929]     ...future.result$finished <- base::Sys.time()
[17:46:35.929]     ...future.result
[17:46:35.929] }
[17:46:35.930] plan(): Setting new future strategy stack:
[17:46:35.931] List of future strategies:
[17:46:35.931] 1. sequential:
[17:46:35.931]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.931]    - tweaked: FALSE
[17:46:35.931]    - call: NULL
[17:46:35.931] plan(): nbrOfWorkers() = 1
[17:46:35.932] plan(): Setting new future strategy stack:
[17:46:35.932] List of future strategies:
[17:46:35.932] 1. sequential:
[17:46:35.932]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.932]    - tweaked: FALSE
[17:46:35.932]    - call: future::plan("sequential")
[17:46:35.932] plan(): nbrOfWorkers() = 1
[17:46:35.932] SequentialFuture started (and completed)
[17:46:35.932] - Launch lazy future ... done
[17:46:35.933] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[17:46:35.936] getGlobalsAndPackages() ...
[17:46:35.937] Searching for globals...
[17:46:35.937] - globals found: [1] ‘{’
[17:46:35.937] Searching for globals ... DONE
[17:46:35.937] Resolving globals: FALSE
[17:46:35.938] 
[17:46:35.938] 
[17:46:35.938] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[17:46:35.939] getGlobalsAndPackages() ...
[17:46:35.939] Searching for globals...
[17:46:35.939] - globals found: [1] ‘{’
[17:46:35.939] Searching for globals ... DONE
[17:46:35.940] Resolving globals: FALSE
[17:46:35.940] 
[17:46:35.940] 
[17:46:35.940] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[17:46:35.943] run() for ‘Future’ ...
[17:46:35.943] - state: ‘created’
[17:46:35.944] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.944] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.944] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.944]   - Field: ‘label’
[17:46:35.944]   - Field: ‘local’
[17:46:35.944]   - Field: ‘owner’
[17:46:35.944]   - Field: ‘envir’
[17:46:35.944]   - Field: ‘packages’
[17:46:35.945]   - Field: ‘gc’
[17:46:35.945]   - Field: ‘conditions’
[17:46:35.945]   - Field: ‘expr’
[17:46:35.945]   - Field: ‘uuid’
[17:46:35.945]   - Field: ‘seed’
[17:46:35.945]   - Field: ‘version’
[17:46:35.945]   - Field: ‘result’
[17:46:35.945]   - Field: ‘asynchronous’
[17:46:35.945]   - Field: ‘calls’
[17:46:35.945]   - Field: ‘globals’
[17:46:35.945]   - Field: ‘stdout’
[17:46:35.946]   - Field: ‘earlySignal’
[17:46:35.946]   - Field: ‘lazy’
[17:46:35.946]   - Field: ‘state’
[17:46:35.946] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.946] - Launch lazy future ...
[17:46:35.946] Packages needed by the future expression (n = 0): <none>
[17:46:35.946] Packages needed by future strategies (n = 0): <none>
[17:46:35.947] {
[17:46:35.947]     {
[17:46:35.947]         {
[17:46:35.947]             ...future.startTime <- base::Sys.time()
[17:46:35.947]             {
[17:46:35.947]                 {
[17:46:35.947]                   {
[17:46:35.947]                     base::local({
[17:46:35.947]                       has_future <- base::requireNamespace("future", 
[17:46:35.947]                         quietly = TRUE)
[17:46:35.947]                       if (has_future) {
[17:46:35.947]                         ns <- base::getNamespace("future")
[17:46:35.947]                         version <- ns[[".package"]][["version"]]
[17:46:35.947]                         if (is.null(version)) 
[17:46:35.947]                           version <- utils::packageVersion("future")
[17:46:35.947]                       }
[17:46:35.947]                       else {
[17:46:35.947]                         version <- NULL
[17:46:35.947]                       }
[17:46:35.947]                       if (!has_future || version < "1.8.0") {
[17:46:35.947]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.947]                           "", base::R.version$version.string), 
[17:46:35.947]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.947]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.947]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.947]                             "release", "version")], collapse = " "), 
[17:46:35.947]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.947]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.947]                           info)
[17:46:35.947]                         info <- base::paste(info, collapse = "; ")
[17:46:35.947]                         if (!has_future) {
[17:46:35.947]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.947]                             info)
[17:46:35.947]                         }
[17:46:35.947]                         else {
[17:46:35.947]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.947]                             info, version)
[17:46:35.947]                         }
[17:46:35.947]                         base::stop(msg)
[17:46:35.947]                       }
[17:46:35.947]                     })
[17:46:35.947]                   }
[17:46:35.947]                   ...future.strategy.old <- future::plan("list")
[17:46:35.947]                   options(future.plan = NULL)
[17:46:35.947]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.947]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.947]                 }
[17:46:35.947]                 ...future.workdir <- getwd()
[17:46:35.947]             }
[17:46:35.947]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.947]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.947]         }
[17:46:35.947]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.947]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.947]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.947]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.947]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.947]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.947]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.947]             base::names(...future.oldOptions))
[17:46:35.947]     }
[17:46:35.947]     if (FALSE) {
[17:46:35.947]     }
[17:46:35.947]     else {
[17:46:35.947]         if (TRUE) {
[17:46:35.947]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.947]                 open = "w")
[17:46:35.947]         }
[17:46:35.947]         else {
[17:46:35.947]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.947]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.947]         }
[17:46:35.947]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.947]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.947]             base::sink(type = "output", split = FALSE)
[17:46:35.947]             base::close(...future.stdout)
[17:46:35.947]         }, add = TRUE)
[17:46:35.947]     }
[17:46:35.947]     ...future.frame <- base::sys.nframe()
[17:46:35.947]     ...future.conditions <- base::list()
[17:46:35.947]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.947]     if (FALSE) {
[17:46:35.947]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.947]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.947]     }
[17:46:35.947]     ...future.result <- base::tryCatch({
[17:46:35.947]         base::withCallingHandlers({
[17:46:35.947]             ...future.value <- base::withVisible(base::local({
[17:46:35.947]                 1
[17:46:35.947]             }))
[17:46:35.947]             future::FutureResult(value = ...future.value$value, 
[17:46:35.947]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.947]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.947]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.947]                     ...future.globalenv.names))
[17:46:35.947]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.947]         }, condition = base::local({
[17:46:35.947]             c <- base::c
[17:46:35.947]             inherits <- base::inherits
[17:46:35.947]             invokeRestart <- base::invokeRestart
[17:46:35.947]             length <- base::length
[17:46:35.947]             list <- base::list
[17:46:35.947]             seq.int <- base::seq.int
[17:46:35.947]             signalCondition <- base::signalCondition
[17:46:35.947]             sys.calls <- base::sys.calls
[17:46:35.947]             `[[` <- base::`[[`
[17:46:35.947]             `+` <- base::`+`
[17:46:35.947]             `<<-` <- base::`<<-`
[17:46:35.947]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.947]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.947]                   3L)]
[17:46:35.947]             }
[17:46:35.947]             function(cond) {
[17:46:35.947]                 is_error <- inherits(cond, "error")
[17:46:35.947]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.947]                   NULL)
[17:46:35.947]                 if (is_error) {
[17:46:35.947]                   sessionInformation <- function() {
[17:46:35.947]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.947]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.947]                       search = base::search(), system = base::Sys.info())
[17:46:35.947]                   }
[17:46:35.947]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.947]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.947]                     cond$call), session = sessionInformation(), 
[17:46:35.947]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.947]                   signalCondition(cond)
[17:46:35.947]                 }
[17:46:35.947]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.947]                 "immediateCondition"))) {
[17:46:35.947]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.947]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.947]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.947]                   if (TRUE && !signal) {
[17:46:35.947]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.947]                     {
[17:46:35.947]                       inherits <- base::inherits
[17:46:35.947]                       invokeRestart <- base::invokeRestart
[17:46:35.947]                       is.null <- base::is.null
[17:46:35.947]                       muffled <- FALSE
[17:46:35.947]                       if (inherits(cond, "message")) {
[17:46:35.947]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.947]                         if (muffled) 
[17:46:35.947]                           invokeRestart("muffleMessage")
[17:46:35.947]                       }
[17:46:35.947]                       else if (inherits(cond, "warning")) {
[17:46:35.947]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.947]                         if (muffled) 
[17:46:35.947]                           invokeRestart("muffleWarning")
[17:46:35.947]                       }
[17:46:35.947]                       else if (inherits(cond, "condition")) {
[17:46:35.947]                         if (!is.null(pattern)) {
[17:46:35.947]                           computeRestarts <- base::computeRestarts
[17:46:35.947]                           grepl <- base::grepl
[17:46:35.947]                           restarts <- computeRestarts(cond)
[17:46:35.947]                           for (restart in restarts) {
[17:46:35.947]                             name <- restart$name
[17:46:35.947]                             if (is.null(name)) 
[17:46:35.947]                               next
[17:46:35.947]                             if (!grepl(pattern, name)) 
[17:46:35.947]                               next
[17:46:35.947]                             invokeRestart(restart)
[17:46:35.947]                             muffled <- TRUE
[17:46:35.947]                             break
[17:46:35.947]                           }
[17:46:35.947]                         }
[17:46:35.947]                       }
[17:46:35.947]                       invisible(muffled)
[17:46:35.947]                     }
[17:46:35.947]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.947]                   }
[17:46:35.947]                 }
[17:46:35.947]                 else {
[17:46:35.947]                   if (TRUE) {
[17:46:35.947]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.947]                     {
[17:46:35.947]                       inherits <- base::inherits
[17:46:35.947]                       invokeRestart <- base::invokeRestart
[17:46:35.947]                       is.null <- base::is.null
[17:46:35.947]                       muffled <- FALSE
[17:46:35.947]                       if (inherits(cond, "message")) {
[17:46:35.947]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.947]                         if (muffled) 
[17:46:35.947]                           invokeRestart("muffleMessage")
[17:46:35.947]                       }
[17:46:35.947]                       else if (inherits(cond, "warning")) {
[17:46:35.947]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.947]                         if (muffled) 
[17:46:35.947]                           invokeRestart("muffleWarning")
[17:46:35.947]                       }
[17:46:35.947]                       else if (inherits(cond, "condition")) {
[17:46:35.947]                         if (!is.null(pattern)) {
[17:46:35.947]                           computeRestarts <- base::computeRestarts
[17:46:35.947]                           grepl <- base::grepl
[17:46:35.947]                           restarts <- computeRestarts(cond)
[17:46:35.947]                           for (restart in restarts) {
[17:46:35.947]                             name <- restart$name
[17:46:35.947]                             if (is.null(name)) 
[17:46:35.947]                               next
[17:46:35.947]                             if (!grepl(pattern, name)) 
[17:46:35.947]                               next
[17:46:35.947]                             invokeRestart(restart)
[17:46:35.947]                             muffled <- TRUE
[17:46:35.947]                             break
[17:46:35.947]                           }
[17:46:35.947]                         }
[17:46:35.947]                       }
[17:46:35.947]                       invisible(muffled)
[17:46:35.947]                     }
[17:46:35.947]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.947]                   }
[17:46:35.947]                 }
[17:46:35.947]             }
[17:46:35.947]         }))
[17:46:35.947]     }, error = function(ex) {
[17:46:35.947]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.947]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.947]                 ...future.rng), started = ...future.startTime, 
[17:46:35.947]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.947]             version = "1.8"), class = "FutureResult")
[17:46:35.947]     }, finally = {
[17:46:35.947]         if (!identical(...future.workdir, getwd())) 
[17:46:35.947]             setwd(...future.workdir)
[17:46:35.947]         {
[17:46:35.947]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.947]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.947]             }
[17:46:35.947]             base::options(...future.oldOptions)
[17:46:35.947]             if (.Platform$OS.type == "windows") {
[17:46:35.947]                 old_names <- names(...future.oldEnvVars)
[17:46:35.947]                 envs <- base::Sys.getenv()
[17:46:35.947]                 names <- names(envs)
[17:46:35.947]                 common <- intersect(names, old_names)
[17:46:35.947]                 added <- setdiff(names, old_names)
[17:46:35.947]                 removed <- setdiff(old_names, names)
[17:46:35.947]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.947]                   envs[common]]
[17:46:35.947]                 NAMES <- toupper(changed)
[17:46:35.947]                 args <- list()
[17:46:35.947]                 for (kk in seq_along(NAMES)) {
[17:46:35.947]                   name <- changed[[kk]]
[17:46:35.947]                   NAME <- NAMES[[kk]]
[17:46:35.947]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.947]                     next
[17:46:35.947]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.947]                 }
[17:46:35.947]                 NAMES <- toupper(added)
[17:46:35.947]                 for (kk in seq_along(NAMES)) {
[17:46:35.947]                   name <- added[[kk]]
[17:46:35.947]                   NAME <- NAMES[[kk]]
[17:46:35.947]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.947]                     next
[17:46:35.947]                   args[[name]] <- ""
[17:46:35.947]                 }
[17:46:35.947]                 NAMES <- toupper(removed)
[17:46:35.947]                 for (kk in seq_along(NAMES)) {
[17:46:35.947]                   name <- removed[[kk]]
[17:46:35.947]                   NAME <- NAMES[[kk]]
[17:46:35.947]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.947]                     next
[17:46:35.947]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.947]                 }
[17:46:35.947]                 if (length(args) > 0) 
[17:46:35.947]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.947]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.947]             }
[17:46:35.947]             else {
[17:46:35.947]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.947]             }
[17:46:35.947]             {
[17:46:35.947]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.947]                   0L) {
[17:46:35.947]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.947]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.947]                   base::options(opts)
[17:46:35.947]                 }
[17:46:35.947]                 {
[17:46:35.947]                   {
[17:46:35.947]                     NULL
[17:46:35.947]                     RNGkind("Mersenne-Twister")
[17:46:35.947]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.947]                       inherits = FALSE)
[17:46:35.947]                   }
[17:46:35.947]                   options(future.plan = NULL)
[17:46:35.947]                   if (is.na(NA_character_)) 
[17:46:35.947]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.947]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.947]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.947]                     .init = FALSE)
[17:46:35.947]                 }
[17:46:35.947]             }
[17:46:35.947]         }
[17:46:35.947]     })
[17:46:35.947]     if (TRUE) {
[17:46:35.947]         base::sink(type = "output", split = FALSE)
[17:46:35.947]         if (TRUE) {
[17:46:35.947]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.947]         }
[17:46:35.947]         else {
[17:46:35.947]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.947]         }
[17:46:35.947]         base::close(...future.stdout)
[17:46:35.947]         ...future.stdout <- NULL
[17:46:35.947]     }
[17:46:35.947]     ...future.result$conditions <- ...future.conditions
[17:46:35.947]     ...future.result$finished <- base::Sys.time()
[17:46:35.947]     ...future.result
[17:46:35.947] }
[17:46:35.948] plan(): Setting new future strategy stack:
[17:46:35.948] List of future strategies:
[17:46:35.948] 1. sequential:
[17:46:35.948]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.948]    - tweaked: FALSE
[17:46:35.948]    - call: NULL
[17:46:35.949] plan(): nbrOfWorkers() = 1
[17:46:35.949] plan(): Setting new future strategy stack:
[17:46:35.950] List of future strategies:
[17:46:35.950] 1. sequential:
[17:46:35.950]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.950]    - tweaked: FALSE
[17:46:35.950]    - call: future::plan("sequential")
[17:46:35.950] plan(): nbrOfWorkers() = 1
[17:46:35.950] SequentialFuture started (and completed)
[17:46:35.950] - Launch lazy future ... done
[17:46:35.950] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[17:46:35.951] run() for ‘Future’ ...
[17:46:35.951] - state: ‘created’
[17:46:35.951] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.951] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.951] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.951]   - Field: ‘label’
[17:46:35.951]   - Field: ‘local’
[17:46:35.951]   - Field: ‘owner’
[17:46:35.952]   - Field: ‘envir’
[17:46:35.952]   - Field: ‘packages’
[17:46:35.952]   - Field: ‘gc’
[17:46:35.952]   - Field: ‘conditions’
[17:46:35.952]   - Field: ‘expr’
[17:46:35.952]   - Field: ‘uuid’
[17:46:35.952]   - Field: ‘seed’
[17:46:35.952]   - Field: ‘version’
[17:46:35.952]   - Field: ‘result’
[17:46:35.952]   - Field: ‘asynchronous’
[17:46:35.952]   - Field: ‘calls’
[17:46:35.953]   - Field: ‘globals’
[17:46:35.953]   - Field: ‘stdout’
[17:46:35.953]   - Field: ‘earlySignal’
[17:46:35.953]   - Field: ‘lazy’
[17:46:35.953]   - Field: ‘state’
[17:46:35.953] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.953] - Launch lazy future ...
[17:46:35.953] Packages needed by the future expression (n = 0): <none>
[17:46:35.953] Packages needed by future strategies (n = 0): <none>
[17:46:35.954] {
[17:46:35.954]     {
[17:46:35.954]         {
[17:46:35.954]             ...future.startTime <- base::Sys.time()
[17:46:35.954]             {
[17:46:35.954]                 {
[17:46:35.954]                   {
[17:46:35.954]                     base::local({
[17:46:35.954]                       has_future <- base::requireNamespace("future", 
[17:46:35.954]                         quietly = TRUE)
[17:46:35.954]                       if (has_future) {
[17:46:35.954]                         ns <- base::getNamespace("future")
[17:46:35.954]                         version <- ns[[".package"]][["version"]]
[17:46:35.954]                         if (is.null(version)) 
[17:46:35.954]                           version <- utils::packageVersion("future")
[17:46:35.954]                       }
[17:46:35.954]                       else {
[17:46:35.954]                         version <- NULL
[17:46:35.954]                       }
[17:46:35.954]                       if (!has_future || version < "1.8.0") {
[17:46:35.954]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.954]                           "", base::R.version$version.string), 
[17:46:35.954]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.954]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.954]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.954]                             "release", "version")], collapse = " "), 
[17:46:35.954]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.954]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.954]                           info)
[17:46:35.954]                         info <- base::paste(info, collapse = "; ")
[17:46:35.954]                         if (!has_future) {
[17:46:35.954]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.954]                             info)
[17:46:35.954]                         }
[17:46:35.954]                         else {
[17:46:35.954]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.954]                             info, version)
[17:46:35.954]                         }
[17:46:35.954]                         base::stop(msg)
[17:46:35.954]                       }
[17:46:35.954]                     })
[17:46:35.954]                   }
[17:46:35.954]                   ...future.strategy.old <- future::plan("list")
[17:46:35.954]                   options(future.plan = NULL)
[17:46:35.954]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.954]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.954]                 }
[17:46:35.954]                 ...future.workdir <- getwd()
[17:46:35.954]             }
[17:46:35.954]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.954]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.954]         }
[17:46:35.954]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.954]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.954]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.954]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.954]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.954]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.954]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.954]             base::names(...future.oldOptions))
[17:46:35.954]     }
[17:46:35.954]     if (FALSE) {
[17:46:35.954]     }
[17:46:35.954]     else {
[17:46:35.954]         if (TRUE) {
[17:46:35.954]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.954]                 open = "w")
[17:46:35.954]         }
[17:46:35.954]         else {
[17:46:35.954]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.954]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.954]         }
[17:46:35.954]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.954]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.954]             base::sink(type = "output", split = FALSE)
[17:46:35.954]             base::close(...future.stdout)
[17:46:35.954]         }, add = TRUE)
[17:46:35.954]     }
[17:46:35.954]     ...future.frame <- base::sys.nframe()
[17:46:35.954]     ...future.conditions <- base::list()
[17:46:35.954]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.954]     if (FALSE) {
[17:46:35.954]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.954]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.954]     }
[17:46:35.954]     ...future.result <- base::tryCatch({
[17:46:35.954]         base::withCallingHandlers({
[17:46:35.954]             ...future.value <- base::withVisible(base::local({
[17:46:35.954]                 2
[17:46:35.954]             }))
[17:46:35.954]             future::FutureResult(value = ...future.value$value, 
[17:46:35.954]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.954]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.954]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.954]                     ...future.globalenv.names))
[17:46:35.954]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.954]         }, condition = base::local({
[17:46:35.954]             c <- base::c
[17:46:35.954]             inherits <- base::inherits
[17:46:35.954]             invokeRestart <- base::invokeRestart
[17:46:35.954]             length <- base::length
[17:46:35.954]             list <- base::list
[17:46:35.954]             seq.int <- base::seq.int
[17:46:35.954]             signalCondition <- base::signalCondition
[17:46:35.954]             sys.calls <- base::sys.calls
[17:46:35.954]             `[[` <- base::`[[`
[17:46:35.954]             `+` <- base::`+`
[17:46:35.954]             `<<-` <- base::`<<-`
[17:46:35.954]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.954]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.954]                   3L)]
[17:46:35.954]             }
[17:46:35.954]             function(cond) {
[17:46:35.954]                 is_error <- inherits(cond, "error")
[17:46:35.954]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.954]                   NULL)
[17:46:35.954]                 if (is_error) {
[17:46:35.954]                   sessionInformation <- function() {
[17:46:35.954]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.954]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.954]                       search = base::search(), system = base::Sys.info())
[17:46:35.954]                   }
[17:46:35.954]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.954]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.954]                     cond$call), session = sessionInformation(), 
[17:46:35.954]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.954]                   signalCondition(cond)
[17:46:35.954]                 }
[17:46:35.954]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.954]                 "immediateCondition"))) {
[17:46:35.954]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.954]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.954]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.954]                   if (TRUE && !signal) {
[17:46:35.954]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.954]                     {
[17:46:35.954]                       inherits <- base::inherits
[17:46:35.954]                       invokeRestart <- base::invokeRestart
[17:46:35.954]                       is.null <- base::is.null
[17:46:35.954]                       muffled <- FALSE
[17:46:35.954]                       if (inherits(cond, "message")) {
[17:46:35.954]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.954]                         if (muffled) 
[17:46:35.954]                           invokeRestart("muffleMessage")
[17:46:35.954]                       }
[17:46:35.954]                       else if (inherits(cond, "warning")) {
[17:46:35.954]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.954]                         if (muffled) 
[17:46:35.954]                           invokeRestart("muffleWarning")
[17:46:35.954]                       }
[17:46:35.954]                       else if (inherits(cond, "condition")) {
[17:46:35.954]                         if (!is.null(pattern)) {
[17:46:35.954]                           computeRestarts <- base::computeRestarts
[17:46:35.954]                           grepl <- base::grepl
[17:46:35.954]                           restarts <- computeRestarts(cond)
[17:46:35.954]                           for (restart in restarts) {
[17:46:35.954]                             name <- restart$name
[17:46:35.954]                             if (is.null(name)) 
[17:46:35.954]                               next
[17:46:35.954]                             if (!grepl(pattern, name)) 
[17:46:35.954]                               next
[17:46:35.954]                             invokeRestart(restart)
[17:46:35.954]                             muffled <- TRUE
[17:46:35.954]                             break
[17:46:35.954]                           }
[17:46:35.954]                         }
[17:46:35.954]                       }
[17:46:35.954]                       invisible(muffled)
[17:46:35.954]                     }
[17:46:35.954]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.954]                   }
[17:46:35.954]                 }
[17:46:35.954]                 else {
[17:46:35.954]                   if (TRUE) {
[17:46:35.954]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.954]                     {
[17:46:35.954]                       inherits <- base::inherits
[17:46:35.954]                       invokeRestart <- base::invokeRestart
[17:46:35.954]                       is.null <- base::is.null
[17:46:35.954]                       muffled <- FALSE
[17:46:35.954]                       if (inherits(cond, "message")) {
[17:46:35.954]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.954]                         if (muffled) 
[17:46:35.954]                           invokeRestart("muffleMessage")
[17:46:35.954]                       }
[17:46:35.954]                       else if (inherits(cond, "warning")) {
[17:46:35.954]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.954]                         if (muffled) 
[17:46:35.954]                           invokeRestart("muffleWarning")
[17:46:35.954]                       }
[17:46:35.954]                       else if (inherits(cond, "condition")) {
[17:46:35.954]                         if (!is.null(pattern)) {
[17:46:35.954]                           computeRestarts <- base::computeRestarts
[17:46:35.954]                           grepl <- base::grepl
[17:46:35.954]                           restarts <- computeRestarts(cond)
[17:46:35.954]                           for (restart in restarts) {
[17:46:35.954]                             name <- restart$name
[17:46:35.954]                             if (is.null(name)) 
[17:46:35.954]                               next
[17:46:35.954]                             if (!grepl(pattern, name)) 
[17:46:35.954]                               next
[17:46:35.954]                             invokeRestart(restart)
[17:46:35.954]                             muffled <- TRUE
[17:46:35.954]                             break
[17:46:35.954]                           }
[17:46:35.954]                         }
[17:46:35.954]                       }
[17:46:35.954]                       invisible(muffled)
[17:46:35.954]                     }
[17:46:35.954]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.954]                   }
[17:46:35.954]                 }
[17:46:35.954]             }
[17:46:35.954]         }))
[17:46:35.954]     }, error = function(ex) {
[17:46:35.954]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.954]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.954]                 ...future.rng), started = ...future.startTime, 
[17:46:35.954]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.954]             version = "1.8"), class = "FutureResult")
[17:46:35.954]     }, finally = {
[17:46:35.954]         if (!identical(...future.workdir, getwd())) 
[17:46:35.954]             setwd(...future.workdir)
[17:46:35.954]         {
[17:46:35.954]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.954]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.954]             }
[17:46:35.954]             base::options(...future.oldOptions)
[17:46:35.954]             if (.Platform$OS.type == "windows") {
[17:46:35.954]                 old_names <- names(...future.oldEnvVars)
[17:46:35.954]                 envs <- base::Sys.getenv()
[17:46:35.954]                 names <- names(envs)
[17:46:35.954]                 common <- intersect(names, old_names)
[17:46:35.954]                 added <- setdiff(names, old_names)
[17:46:35.954]                 removed <- setdiff(old_names, names)
[17:46:35.954]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.954]                   envs[common]]
[17:46:35.954]                 NAMES <- toupper(changed)
[17:46:35.954]                 args <- list()
[17:46:35.954]                 for (kk in seq_along(NAMES)) {
[17:46:35.954]                   name <- changed[[kk]]
[17:46:35.954]                   NAME <- NAMES[[kk]]
[17:46:35.954]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.954]                     next
[17:46:35.954]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.954]                 }
[17:46:35.954]                 NAMES <- toupper(added)
[17:46:35.954]                 for (kk in seq_along(NAMES)) {
[17:46:35.954]                   name <- added[[kk]]
[17:46:35.954]                   NAME <- NAMES[[kk]]
[17:46:35.954]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.954]                     next
[17:46:35.954]                   args[[name]] <- ""
[17:46:35.954]                 }
[17:46:35.954]                 NAMES <- toupper(removed)
[17:46:35.954]                 for (kk in seq_along(NAMES)) {
[17:46:35.954]                   name <- removed[[kk]]
[17:46:35.954]                   NAME <- NAMES[[kk]]
[17:46:35.954]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.954]                     next
[17:46:35.954]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.954]                 }
[17:46:35.954]                 if (length(args) > 0) 
[17:46:35.954]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.954]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.954]             }
[17:46:35.954]             else {
[17:46:35.954]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.954]             }
[17:46:35.954]             {
[17:46:35.954]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.954]                   0L) {
[17:46:35.954]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.954]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.954]                   base::options(opts)
[17:46:35.954]                 }
[17:46:35.954]                 {
[17:46:35.954]                   {
[17:46:35.954]                     NULL
[17:46:35.954]                     RNGkind("Mersenne-Twister")
[17:46:35.954]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.954]                       inherits = FALSE)
[17:46:35.954]                   }
[17:46:35.954]                   options(future.plan = NULL)
[17:46:35.954]                   if (is.na(NA_character_)) 
[17:46:35.954]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.954]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.954]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.954]                     .init = FALSE)
[17:46:35.954]                 }
[17:46:35.954]             }
[17:46:35.954]         }
[17:46:35.954]     })
[17:46:35.954]     if (TRUE) {
[17:46:35.954]         base::sink(type = "output", split = FALSE)
[17:46:35.954]         if (TRUE) {
[17:46:35.954]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.954]         }
[17:46:35.954]         else {
[17:46:35.954]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.954]         }
[17:46:35.954]         base::close(...future.stdout)
[17:46:35.954]         ...future.stdout <- NULL
[17:46:35.954]     }
[17:46:35.954]     ...future.result$conditions <- ...future.conditions
[17:46:35.954]     ...future.result$finished <- base::Sys.time()
[17:46:35.954]     ...future.result
[17:46:35.954] }
[17:46:35.955] plan(): Setting new future strategy stack:
[17:46:35.956] List of future strategies:
[17:46:35.956] 1. sequential:
[17:46:35.956]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.956]    - tweaked: FALSE
[17:46:35.956]    - call: NULL
[17:46:35.956] plan(): nbrOfWorkers() = 1
[17:46:35.957] plan(): Setting new future strategy stack:
[17:46:35.957] List of future strategies:
[17:46:35.957] 1. sequential:
[17:46:35.957]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.957]    - tweaked: FALSE
[17:46:35.957]    - call: future::plan("sequential")
[17:46:35.957] plan(): nbrOfWorkers() = 1
[17:46:35.957] SequentialFuture started (and completed)
[17:46:35.957] - Launch lazy future ... done
[17:46:35.958] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[17:46:35.963] getGlobalsAndPackages() ...
[17:46:35.963] Searching for globals...
[17:46:35.965] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:46:35.965] Searching for globals ... DONE
[17:46:35.965] Resolving globals: FALSE
[17:46:35.966] The total size of the 2 globals is 112 bytes (112 bytes)
[17:46:35.966] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:46:35.966] - globals: [2] ‘rr’, ‘cc’
[17:46:35.966] 
[17:46:35.966] getGlobalsAndPackages() ... DONE
[17:46:35.967] getGlobalsAndPackages() ...
[17:46:35.967] Searching for globals...
[17:46:35.968] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:46:35.968] Searching for globals ... DONE
[17:46:35.968] Resolving globals: FALSE
[17:46:35.968] The total size of the 2 globals is 112 bytes (112 bytes)
[17:46:35.969] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:46:35.969] - globals: [2] ‘rr’, ‘cc’
[17:46:35.969] 
[17:46:35.969] getGlobalsAndPackages() ... DONE
[17:46:35.969] getGlobalsAndPackages() ...
[17:46:35.969] Searching for globals...
[17:46:35.970] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:46:35.970] Searching for globals ... DONE
[17:46:35.970] Resolving globals: FALSE
[17:46:35.970] The total size of the 2 globals is 112 bytes (112 bytes)
[17:46:35.971] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:46:35.971] - globals: [2] ‘rr’, ‘cc’
[17:46:35.971] 
[17:46:35.971] getGlobalsAndPackages() ... DONE
[17:46:35.972] getGlobalsAndPackages() ...
[17:46:35.972] Searching for globals...
[17:46:35.974] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:46:35.974] Searching for globals ... DONE
[17:46:35.974] Resolving globals: FALSE
[17:46:35.974] The total size of the 2 globals is 112 bytes (112 bytes)
[17:46:35.975] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:46:35.975] - globals: [2] ‘rr’, ‘cc’
[17:46:35.975] 
[17:46:35.975] getGlobalsAndPackages() ... DONE
[17:46:35.975] getGlobalsAndPackages() ...
[17:46:35.975] Searching for globals...
[17:46:35.976] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:46:35.976] Searching for globals ... DONE
[17:46:35.976] Resolving globals: FALSE
[17:46:35.977] The total size of the 2 globals is 112 bytes (112 bytes)
[17:46:35.977] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:46:35.977] - globals: [2] ‘rr’, ‘cc’
[17:46:35.977] 
[17:46:35.977] getGlobalsAndPackages() ... DONE
[17:46:35.978] getGlobalsAndPackages() ...
[17:46:35.978] Searching for globals...
[17:46:35.978] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:46:35.978] Searching for globals ... DONE
[17:46:35.978] Resolving globals: FALSE
[17:46:35.979] The total size of the 2 globals is 112 bytes (112 bytes)
[17:46:35.979] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:46:35.979] - globals: [2] ‘rr’, ‘cc’
[17:46:35.979] 
[17:46:35.979] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[17:46:35.980] run() for ‘Future’ ...
[17:46:35.980] - state: ‘created’
[17:46:35.980] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.980] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.980] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.980]   - Field: ‘label’
[17:46:35.980]   - Field: ‘local’
[17:46:35.981]   - Field: ‘owner’
[17:46:35.981]   - Field: ‘envir’
[17:46:35.981]   - Field: ‘packages’
[17:46:35.981]   - Field: ‘gc’
[17:46:35.981]   - Field: ‘conditions’
[17:46:35.981]   - Field: ‘expr’
[17:46:35.981]   - Field: ‘uuid’
[17:46:35.981]   - Field: ‘seed’
[17:46:35.981]   - Field: ‘version’
[17:46:35.981]   - Field: ‘result’
[17:46:35.982]   - Field: ‘asynchronous’
[17:46:35.982]   - Field: ‘calls’
[17:46:35.982]   - Field: ‘globals’
[17:46:35.982]   - Field: ‘stdout’
[17:46:35.982]   - Field: ‘earlySignal’
[17:46:35.982]   - Field: ‘lazy’
[17:46:35.982]   - Field: ‘state’
[17:46:35.982] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.982] - Launch lazy future ...
[17:46:35.982] Packages needed by the future expression (n = 0): <none>
[17:46:35.983] Packages needed by future strategies (n = 0): <none>
[17:46:35.983] {
[17:46:35.983]     {
[17:46:35.983]         {
[17:46:35.983]             ...future.startTime <- base::Sys.time()
[17:46:35.983]             {
[17:46:35.983]                 {
[17:46:35.983]                   {
[17:46:35.983]                     base::local({
[17:46:35.983]                       has_future <- base::requireNamespace("future", 
[17:46:35.983]                         quietly = TRUE)
[17:46:35.983]                       if (has_future) {
[17:46:35.983]                         ns <- base::getNamespace("future")
[17:46:35.983]                         version <- ns[[".package"]][["version"]]
[17:46:35.983]                         if (is.null(version)) 
[17:46:35.983]                           version <- utils::packageVersion("future")
[17:46:35.983]                       }
[17:46:35.983]                       else {
[17:46:35.983]                         version <- NULL
[17:46:35.983]                       }
[17:46:35.983]                       if (!has_future || version < "1.8.0") {
[17:46:35.983]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.983]                           "", base::R.version$version.string), 
[17:46:35.983]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.983]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.983]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.983]                             "release", "version")], collapse = " "), 
[17:46:35.983]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.983]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.983]                           info)
[17:46:35.983]                         info <- base::paste(info, collapse = "; ")
[17:46:35.983]                         if (!has_future) {
[17:46:35.983]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.983]                             info)
[17:46:35.983]                         }
[17:46:35.983]                         else {
[17:46:35.983]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.983]                             info, version)
[17:46:35.983]                         }
[17:46:35.983]                         base::stop(msg)
[17:46:35.983]                       }
[17:46:35.983]                     })
[17:46:35.983]                   }
[17:46:35.983]                   ...future.strategy.old <- future::plan("list")
[17:46:35.983]                   options(future.plan = NULL)
[17:46:35.983]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.983]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.983]                 }
[17:46:35.983]                 ...future.workdir <- getwd()
[17:46:35.983]             }
[17:46:35.983]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.983]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.983]         }
[17:46:35.983]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.983]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.983]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.983]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.983]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.983]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.983]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.983]             base::names(...future.oldOptions))
[17:46:35.983]     }
[17:46:35.983]     if (FALSE) {
[17:46:35.983]     }
[17:46:35.983]     else {
[17:46:35.983]         if (TRUE) {
[17:46:35.983]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.983]                 open = "w")
[17:46:35.983]         }
[17:46:35.983]         else {
[17:46:35.983]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.983]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.983]         }
[17:46:35.983]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.983]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.983]             base::sink(type = "output", split = FALSE)
[17:46:35.983]             base::close(...future.stdout)
[17:46:35.983]         }, add = TRUE)
[17:46:35.983]     }
[17:46:35.983]     ...future.frame <- base::sys.nframe()
[17:46:35.983]     ...future.conditions <- base::list()
[17:46:35.983]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.983]     if (FALSE) {
[17:46:35.983]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.983]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.983]     }
[17:46:35.983]     ...future.result <- base::tryCatch({
[17:46:35.983]         base::withCallingHandlers({
[17:46:35.983]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:46:35.983]                 rr, cc)))
[17:46:35.983]             future::FutureResult(value = ...future.value$value, 
[17:46:35.983]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.983]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.983]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.983]                     ...future.globalenv.names))
[17:46:35.983]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.983]         }, condition = base::local({
[17:46:35.983]             c <- base::c
[17:46:35.983]             inherits <- base::inherits
[17:46:35.983]             invokeRestart <- base::invokeRestart
[17:46:35.983]             length <- base::length
[17:46:35.983]             list <- base::list
[17:46:35.983]             seq.int <- base::seq.int
[17:46:35.983]             signalCondition <- base::signalCondition
[17:46:35.983]             sys.calls <- base::sys.calls
[17:46:35.983]             `[[` <- base::`[[`
[17:46:35.983]             `+` <- base::`+`
[17:46:35.983]             `<<-` <- base::`<<-`
[17:46:35.983]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.983]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.983]                   3L)]
[17:46:35.983]             }
[17:46:35.983]             function(cond) {
[17:46:35.983]                 is_error <- inherits(cond, "error")
[17:46:35.983]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.983]                   NULL)
[17:46:35.983]                 if (is_error) {
[17:46:35.983]                   sessionInformation <- function() {
[17:46:35.983]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.983]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.983]                       search = base::search(), system = base::Sys.info())
[17:46:35.983]                   }
[17:46:35.983]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.983]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.983]                     cond$call), session = sessionInformation(), 
[17:46:35.983]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.983]                   signalCondition(cond)
[17:46:35.983]                 }
[17:46:35.983]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.983]                 "immediateCondition"))) {
[17:46:35.983]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.983]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.983]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.983]                   if (TRUE && !signal) {
[17:46:35.983]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.983]                     {
[17:46:35.983]                       inherits <- base::inherits
[17:46:35.983]                       invokeRestart <- base::invokeRestart
[17:46:35.983]                       is.null <- base::is.null
[17:46:35.983]                       muffled <- FALSE
[17:46:35.983]                       if (inherits(cond, "message")) {
[17:46:35.983]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.983]                         if (muffled) 
[17:46:35.983]                           invokeRestart("muffleMessage")
[17:46:35.983]                       }
[17:46:35.983]                       else if (inherits(cond, "warning")) {
[17:46:35.983]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.983]                         if (muffled) 
[17:46:35.983]                           invokeRestart("muffleWarning")
[17:46:35.983]                       }
[17:46:35.983]                       else if (inherits(cond, "condition")) {
[17:46:35.983]                         if (!is.null(pattern)) {
[17:46:35.983]                           computeRestarts <- base::computeRestarts
[17:46:35.983]                           grepl <- base::grepl
[17:46:35.983]                           restarts <- computeRestarts(cond)
[17:46:35.983]                           for (restart in restarts) {
[17:46:35.983]                             name <- restart$name
[17:46:35.983]                             if (is.null(name)) 
[17:46:35.983]                               next
[17:46:35.983]                             if (!grepl(pattern, name)) 
[17:46:35.983]                               next
[17:46:35.983]                             invokeRestart(restart)
[17:46:35.983]                             muffled <- TRUE
[17:46:35.983]                             break
[17:46:35.983]                           }
[17:46:35.983]                         }
[17:46:35.983]                       }
[17:46:35.983]                       invisible(muffled)
[17:46:35.983]                     }
[17:46:35.983]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.983]                   }
[17:46:35.983]                 }
[17:46:35.983]                 else {
[17:46:35.983]                   if (TRUE) {
[17:46:35.983]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.983]                     {
[17:46:35.983]                       inherits <- base::inherits
[17:46:35.983]                       invokeRestart <- base::invokeRestart
[17:46:35.983]                       is.null <- base::is.null
[17:46:35.983]                       muffled <- FALSE
[17:46:35.983]                       if (inherits(cond, "message")) {
[17:46:35.983]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.983]                         if (muffled) 
[17:46:35.983]                           invokeRestart("muffleMessage")
[17:46:35.983]                       }
[17:46:35.983]                       else if (inherits(cond, "warning")) {
[17:46:35.983]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.983]                         if (muffled) 
[17:46:35.983]                           invokeRestart("muffleWarning")
[17:46:35.983]                       }
[17:46:35.983]                       else if (inherits(cond, "condition")) {
[17:46:35.983]                         if (!is.null(pattern)) {
[17:46:35.983]                           computeRestarts <- base::computeRestarts
[17:46:35.983]                           grepl <- base::grepl
[17:46:35.983]                           restarts <- computeRestarts(cond)
[17:46:35.983]                           for (restart in restarts) {
[17:46:35.983]                             name <- restart$name
[17:46:35.983]                             if (is.null(name)) 
[17:46:35.983]                               next
[17:46:35.983]                             if (!grepl(pattern, name)) 
[17:46:35.983]                               next
[17:46:35.983]                             invokeRestart(restart)
[17:46:35.983]                             muffled <- TRUE
[17:46:35.983]                             break
[17:46:35.983]                           }
[17:46:35.983]                         }
[17:46:35.983]                       }
[17:46:35.983]                       invisible(muffled)
[17:46:35.983]                     }
[17:46:35.983]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.983]                   }
[17:46:35.983]                 }
[17:46:35.983]             }
[17:46:35.983]         }))
[17:46:35.983]     }, error = function(ex) {
[17:46:35.983]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.983]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.983]                 ...future.rng), started = ...future.startTime, 
[17:46:35.983]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.983]             version = "1.8"), class = "FutureResult")
[17:46:35.983]     }, finally = {
[17:46:35.983]         if (!identical(...future.workdir, getwd())) 
[17:46:35.983]             setwd(...future.workdir)
[17:46:35.983]         {
[17:46:35.983]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.983]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.983]             }
[17:46:35.983]             base::options(...future.oldOptions)
[17:46:35.983]             if (.Platform$OS.type == "windows") {
[17:46:35.983]                 old_names <- names(...future.oldEnvVars)
[17:46:35.983]                 envs <- base::Sys.getenv()
[17:46:35.983]                 names <- names(envs)
[17:46:35.983]                 common <- intersect(names, old_names)
[17:46:35.983]                 added <- setdiff(names, old_names)
[17:46:35.983]                 removed <- setdiff(old_names, names)
[17:46:35.983]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.983]                   envs[common]]
[17:46:35.983]                 NAMES <- toupper(changed)
[17:46:35.983]                 args <- list()
[17:46:35.983]                 for (kk in seq_along(NAMES)) {
[17:46:35.983]                   name <- changed[[kk]]
[17:46:35.983]                   NAME <- NAMES[[kk]]
[17:46:35.983]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.983]                     next
[17:46:35.983]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.983]                 }
[17:46:35.983]                 NAMES <- toupper(added)
[17:46:35.983]                 for (kk in seq_along(NAMES)) {
[17:46:35.983]                   name <- added[[kk]]
[17:46:35.983]                   NAME <- NAMES[[kk]]
[17:46:35.983]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.983]                     next
[17:46:35.983]                   args[[name]] <- ""
[17:46:35.983]                 }
[17:46:35.983]                 NAMES <- toupper(removed)
[17:46:35.983]                 for (kk in seq_along(NAMES)) {
[17:46:35.983]                   name <- removed[[kk]]
[17:46:35.983]                   NAME <- NAMES[[kk]]
[17:46:35.983]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.983]                     next
[17:46:35.983]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.983]                 }
[17:46:35.983]                 if (length(args) > 0) 
[17:46:35.983]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.983]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.983]             }
[17:46:35.983]             else {
[17:46:35.983]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.983]             }
[17:46:35.983]             {
[17:46:35.983]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.983]                   0L) {
[17:46:35.983]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.983]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.983]                   base::options(opts)
[17:46:35.983]                 }
[17:46:35.983]                 {
[17:46:35.983]                   {
[17:46:35.983]                     NULL
[17:46:35.983]                     RNGkind("Mersenne-Twister")
[17:46:35.983]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.983]                       inherits = FALSE)
[17:46:35.983]                   }
[17:46:35.983]                   options(future.plan = NULL)
[17:46:35.983]                   if (is.na(NA_character_)) 
[17:46:35.983]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.983]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.983]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.983]                     .init = FALSE)
[17:46:35.983]                 }
[17:46:35.983]             }
[17:46:35.983]         }
[17:46:35.983]     })
[17:46:35.983]     if (TRUE) {
[17:46:35.983]         base::sink(type = "output", split = FALSE)
[17:46:35.983]         if (TRUE) {
[17:46:35.983]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.983]         }
[17:46:35.983]         else {
[17:46:35.983]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.983]         }
[17:46:35.983]         base::close(...future.stdout)
[17:46:35.983]         ...future.stdout <- NULL
[17:46:35.983]     }
[17:46:35.983]     ...future.result$conditions <- ...future.conditions
[17:46:35.983]     ...future.result$finished <- base::Sys.time()
[17:46:35.983]     ...future.result
[17:46:35.983] }
[17:46:35.984] assign_globals() ...
[17:46:35.985] List of 2
[17:46:35.985]  $ rr: int 1
[17:46:35.985]  $ cc: int 1
[17:46:35.985]  - attr(*, "where")=List of 2
[17:46:35.985]   ..$ rr:<environment: R_EmptyEnv> 
[17:46:35.985]   ..$ cc:<environment: R_EmptyEnv> 
[17:46:35.985]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:35.985]  - attr(*, "resolved")= logi FALSE
[17:46:35.985]  - attr(*, "total_size")= num 112
[17:46:35.985]  - attr(*, "already-done")= logi TRUE
[17:46:35.987] - copied ‘rr’ to environment
[17:46:35.988] - copied ‘cc’ to environment
[17:46:35.988] assign_globals() ... done
[17:46:35.988] plan(): Setting new future strategy stack:
[17:46:35.988] List of future strategies:
[17:46:35.988] 1. sequential:
[17:46:35.988]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.988]    - tweaked: FALSE
[17:46:35.988]    - call: NULL
[17:46:35.988] plan(): nbrOfWorkers() = 1
[17:46:35.989] plan(): Setting new future strategy stack:
[17:46:35.989] List of future strategies:
[17:46:35.989] 1. sequential:
[17:46:35.989]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.989]    - tweaked: FALSE
[17:46:35.989]    - call: future::plan("sequential")
[17:46:35.990] plan(): nbrOfWorkers() = 1
[17:46:35.990] SequentialFuture started (and completed)
[17:46:35.990] - Launch lazy future ... done
[17:46:35.990] run() for ‘SequentialFuture’ ... done
[17:46:35.990] run() for ‘Future’ ...
[17:46:35.990] - state: ‘created’
[17:46:35.990] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.991] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.991] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.991]   - Field: ‘label’
[17:46:35.991]   - Field: ‘local’
[17:46:35.991]   - Field: ‘owner’
[17:46:35.991]   - Field: ‘envir’
[17:46:35.991]   - Field: ‘packages’
[17:46:35.991]   - Field: ‘gc’
[17:46:35.991]   - Field: ‘conditions’
[17:46:35.991]   - Field: ‘expr’
[17:46:35.991]   - Field: ‘uuid’
[17:46:35.992]   - Field: ‘seed’
[17:46:35.992]   - Field: ‘version’
[17:46:35.992]   - Field: ‘result’
[17:46:35.992]   - Field: ‘asynchronous’
[17:46:35.992]   - Field: ‘calls’
[17:46:35.992]   - Field: ‘globals’
[17:46:35.992]   - Field: ‘stdout’
[17:46:35.992]   - Field: ‘earlySignal’
[17:46:35.992]   - Field: ‘lazy’
[17:46:35.992]   - Field: ‘state’
[17:46:35.992] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.993] - Launch lazy future ...
[17:46:35.993] Packages needed by the future expression (n = 0): <none>
[17:46:35.993] Packages needed by future strategies (n = 0): <none>
[17:46:35.993] {
[17:46:35.993]     {
[17:46:35.993]         {
[17:46:35.993]             ...future.startTime <- base::Sys.time()
[17:46:35.993]             {
[17:46:35.993]                 {
[17:46:35.993]                   {
[17:46:35.993]                     base::local({
[17:46:35.993]                       has_future <- base::requireNamespace("future", 
[17:46:35.993]                         quietly = TRUE)
[17:46:35.993]                       if (has_future) {
[17:46:35.993]                         ns <- base::getNamespace("future")
[17:46:35.993]                         version <- ns[[".package"]][["version"]]
[17:46:35.993]                         if (is.null(version)) 
[17:46:35.993]                           version <- utils::packageVersion("future")
[17:46:35.993]                       }
[17:46:35.993]                       else {
[17:46:35.993]                         version <- NULL
[17:46:35.993]                       }
[17:46:35.993]                       if (!has_future || version < "1.8.0") {
[17:46:35.993]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.993]                           "", base::R.version$version.string), 
[17:46:35.993]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.993]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.993]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.993]                             "release", "version")], collapse = " "), 
[17:46:35.993]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.993]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.993]                           info)
[17:46:35.993]                         info <- base::paste(info, collapse = "; ")
[17:46:35.993]                         if (!has_future) {
[17:46:35.993]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.993]                             info)
[17:46:35.993]                         }
[17:46:35.993]                         else {
[17:46:35.993]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.993]                             info, version)
[17:46:35.993]                         }
[17:46:35.993]                         base::stop(msg)
[17:46:35.993]                       }
[17:46:35.993]                     })
[17:46:35.993]                   }
[17:46:35.993]                   ...future.strategy.old <- future::plan("list")
[17:46:35.993]                   options(future.plan = NULL)
[17:46:35.993]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.993]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.993]                 }
[17:46:35.993]                 ...future.workdir <- getwd()
[17:46:35.993]             }
[17:46:35.993]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.993]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.993]         }
[17:46:35.993]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.993]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.993]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.993]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.993]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.993]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.993]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.993]             base::names(...future.oldOptions))
[17:46:35.993]     }
[17:46:35.993]     if (FALSE) {
[17:46:35.993]     }
[17:46:35.993]     else {
[17:46:35.993]         if (TRUE) {
[17:46:35.993]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.993]                 open = "w")
[17:46:35.993]         }
[17:46:35.993]         else {
[17:46:35.993]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.993]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.993]         }
[17:46:35.993]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.993]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.993]             base::sink(type = "output", split = FALSE)
[17:46:35.993]             base::close(...future.stdout)
[17:46:35.993]         }, add = TRUE)
[17:46:35.993]     }
[17:46:35.993]     ...future.frame <- base::sys.nframe()
[17:46:35.993]     ...future.conditions <- base::list()
[17:46:35.993]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.993]     if (FALSE) {
[17:46:35.993]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.993]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.993]     }
[17:46:35.993]     ...future.result <- base::tryCatch({
[17:46:35.993]         base::withCallingHandlers({
[17:46:35.993]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:46:35.993]                 rr, cc)))
[17:46:35.993]             future::FutureResult(value = ...future.value$value, 
[17:46:35.993]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.993]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.993]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.993]                     ...future.globalenv.names))
[17:46:35.993]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.993]         }, condition = base::local({
[17:46:35.993]             c <- base::c
[17:46:35.993]             inherits <- base::inherits
[17:46:35.993]             invokeRestart <- base::invokeRestart
[17:46:35.993]             length <- base::length
[17:46:35.993]             list <- base::list
[17:46:35.993]             seq.int <- base::seq.int
[17:46:35.993]             signalCondition <- base::signalCondition
[17:46:35.993]             sys.calls <- base::sys.calls
[17:46:35.993]             `[[` <- base::`[[`
[17:46:35.993]             `+` <- base::`+`
[17:46:35.993]             `<<-` <- base::`<<-`
[17:46:35.993]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.993]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.993]                   3L)]
[17:46:35.993]             }
[17:46:35.993]             function(cond) {
[17:46:35.993]                 is_error <- inherits(cond, "error")
[17:46:35.993]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.993]                   NULL)
[17:46:35.993]                 if (is_error) {
[17:46:35.993]                   sessionInformation <- function() {
[17:46:35.993]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.993]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.993]                       search = base::search(), system = base::Sys.info())
[17:46:35.993]                   }
[17:46:35.993]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.993]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.993]                     cond$call), session = sessionInformation(), 
[17:46:35.993]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.993]                   signalCondition(cond)
[17:46:35.993]                 }
[17:46:35.993]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.993]                 "immediateCondition"))) {
[17:46:35.993]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.993]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.993]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.993]                   if (TRUE && !signal) {
[17:46:35.993]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.993]                     {
[17:46:35.993]                       inherits <- base::inherits
[17:46:35.993]                       invokeRestart <- base::invokeRestart
[17:46:35.993]                       is.null <- base::is.null
[17:46:35.993]                       muffled <- FALSE
[17:46:35.993]                       if (inherits(cond, "message")) {
[17:46:35.993]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.993]                         if (muffled) 
[17:46:35.993]                           invokeRestart("muffleMessage")
[17:46:35.993]                       }
[17:46:35.993]                       else if (inherits(cond, "warning")) {
[17:46:35.993]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.993]                         if (muffled) 
[17:46:35.993]                           invokeRestart("muffleWarning")
[17:46:35.993]                       }
[17:46:35.993]                       else if (inherits(cond, "condition")) {
[17:46:35.993]                         if (!is.null(pattern)) {
[17:46:35.993]                           computeRestarts <- base::computeRestarts
[17:46:35.993]                           grepl <- base::grepl
[17:46:35.993]                           restarts <- computeRestarts(cond)
[17:46:35.993]                           for (restart in restarts) {
[17:46:35.993]                             name <- restart$name
[17:46:35.993]                             if (is.null(name)) 
[17:46:35.993]                               next
[17:46:35.993]                             if (!grepl(pattern, name)) 
[17:46:35.993]                               next
[17:46:35.993]                             invokeRestart(restart)
[17:46:35.993]                             muffled <- TRUE
[17:46:35.993]                             break
[17:46:35.993]                           }
[17:46:35.993]                         }
[17:46:35.993]                       }
[17:46:35.993]                       invisible(muffled)
[17:46:35.993]                     }
[17:46:35.993]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.993]                   }
[17:46:35.993]                 }
[17:46:35.993]                 else {
[17:46:35.993]                   if (TRUE) {
[17:46:35.993]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.993]                     {
[17:46:35.993]                       inherits <- base::inherits
[17:46:35.993]                       invokeRestart <- base::invokeRestart
[17:46:35.993]                       is.null <- base::is.null
[17:46:35.993]                       muffled <- FALSE
[17:46:35.993]                       if (inherits(cond, "message")) {
[17:46:35.993]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.993]                         if (muffled) 
[17:46:35.993]                           invokeRestart("muffleMessage")
[17:46:35.993]                       }
[17:46:35.993]                       else if (inherits(cond, "warning")) {
[17:46:35.993]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.993]                         if (muffled) 
[17:46:35.993]                           invokeRestart("muffleWarning")
[17:46:35.993]                       }
[17:46:35.993]                       else if (inherits(cond, "condition")) {
[17:46:35.993]                         if (!is.null(pattern)) {
[17:46:35.993]                           computeRestarts <- base::computeRestarts
[17:46:35.993]                           grepl <- base::grepl
[17:46:35.993]                           restarts <- computeRestarts(cond)
[17:46:35.993]                           for (restart in restarts) {
[17:46:35.993]                             name <- restart$name
[17:46:35.993]                             if (is.null(name)) 
[17:46:35.993]                               next
[17:46:35.993]                             if (!grepl(pattern, name)) 
[17:46:35.993]                               next
[17:46:35.993]                             invokeRestart(restart)
[17:46:35.993]                             muffled <- TRUE
[17:46:35.993]                             break
[17:46:35.993]                           }
[17:46:35.993]                         }
[17:46:35.993]                       }
[17:46:35.993]                       invisible(muffled)
[17:46:35.993]                     }
[17:46:35.993]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.993]                   }
[17:46:35.993]                 }
[17:46:35.993]             }
[17:46:35.993]         }))
[17:46:35.993]     }, error = function(ex) {
[17:46:35.993]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.993]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.993]                 ...future.rng), started = ...future.startTime, 
[17:46:35.993]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.993]             version = "1.8"), class = "FutureResult")
[17:46:35.993]     }, finally = {
[17:46:35.993]         if (!identical(...future.workdir, getwd())) 
[17:46:35.993]             setwd(...future.workdir)
[17:46:35.993]         {
[17:46:35.993]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.993]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.993]             }
[17:46:35.993]             base::options(...future.oldOptions)
[17:46:35.993]             if (.Platform$OS.type == "windows") {
[17:46:35.993]                 old_names <- names(...future.oldEnvVars)
[17:46:35.993]                 envs <- base::Sys.getenv()
[17:46:35.993]                 names <- names(envs)
[17:46:35.993]                 common <- intersect(names, old_names)
[17:46:35.993]                 added <- setdiff(names, old_names)
[17:46:35.993]                 removed <- setdiff(old_names, names)
[17:46:35.993]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.993]                   envs[common]]
[17:46:35.993]                 NAMES <- toupper(changed)
[17:46:35.993]                 args <- list()
[17:46:35.993]                 for (kk in seq_along(NAMES)) {
[17:46:35.993]                   name <- changed[[kk]]
[17:46:35.993]                   NAME <- NAMES[[kk]]
[17:46:35.993]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.993]                     next
[17:46:35.993]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.993]                 }
[17:46:35.993]                 NAMES <- toupper(added)
[17:46:35.993]                 for (kk in seq_along(NAMES)) {
[17:46:35.993]                   name <- added[[kk]]
[17:46:35.993]                   NAME <- NAMES[[kk]]
[17:46:35.993]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.993]                     next
[17:46:35.993]                   args[[name]] <- ""
[17:46:35.993]                 }
[17:46:35.993]                 NAMES <- toupper(removed)
[17:46:35.993]                 for (kk in seq_along(NAMES)) {
[17:46:35.993]                   name <- removed[[kk]]
[17:46:35.993]                   NAME <- NAMES[[kk]]
[17:46:35.993]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.993]                     next
[17:46:35.993]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.993]                 }
[17:46:35.993]                 if (length(args) > 0) 
[17:46:35.993]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.993]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.993]             }
[17:46:35.993]             else {
[17:46:35.993]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.993]             }
[17:46:35.993]             {
[17:46:35.993]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.993]                   0L) {
[17:46:35.993]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.993]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.993]                   base::options(opts)
[17:46:35.993]                 }
[17:46:35.993]                 {
[17:46:35.993]                   {
[17:46:35.993]                     NULL
[17:46:35.993]                     RNGkind("Mersenne-Twister")
[17:46:35.993]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.993]                       inherits = FALSE)
[17:46:35.993]                   }
[17:46:35.993]                   options(future.plan = NULL)
[17:46:35.993]                   if (is.na(NA_character_)) 
[17:46:35.993]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.993]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.993]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.993]                     .init = FALSE)
[17:46:35.993]                 }
[17:46:35.993]             }
[17:46:35.993]         }
[17:46:35.993]     })
[17:46:35.993]     if (TRUE) {
[17:46:35.993]         base::sink(type = "output", split = FALSE)
[17:46:35.993]         if (TRUE) {
[17:46:35.993]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.993]         }
[17:46:35.993]         else {
[17:46:35.993]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.993]         }
[17:46:35.993]         base::close(...future.stdout)
[17:46:35.993]         ...future.stdout <- NULL
[17:46:35.993]     }
[17:46:35.993]     ...future.result$conditions <- ...future.conditions
[17:46:35.993]     ...future.result$finished <- base::Sys.time()
[17:46:35.993]     ...future.result
[17:46:35.993] }
[17:46:35.995] assign_globals() ...
[17:46:35.995] List of 2
[17:46:35.995]  $ rr: int 2
[17:46:35.995]  $ cc: int 1
[17:46:35.995]  - attr(*, "where")=List of 2
[17:46:35.995]   ..$ rr:<environment: R_EmptyEnv> 
[17:46:35.995]   ..$ cc:<environment: R_EmptyEnv> 
[17:46:35.995]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:35.995]  - attr(*, "resolved")= logi FALSE
[17:46:35.995]  - attr(*, "total_size")= num 112
[17:46:35.995]  - attr(*, "already-done")= logi TRUE
[17:46:35.997] - copied ‘rr’ to environment
[17:46:35.998] - copied ‘cc’ to environment
[17:46:35.998] assign_globals() ... done
[17:46:35.998] plan(): Setting new future strategy stack:
[17:46:35.998] List of future strategies:
[17:46:35.998] 1. sequential:
[17:46:35.998]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.998]    - tweaked: FALSE
[17:46:35.998]    - call: NULL
[17:46:35.998] plan(): nbrOfWorkers() = 1
[17:46:35.999] plan(): Setting new future strategy stack:
[17:46:35.999] List of future strategies:
[17:46:35.999] 1. sequential:
[17:46:35.999]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.999]    - tweaked: FALSE
[17:46:35.999]    - call: future::plan("sequential")
[17:46:36.000] plan(): nbrOfWorkers() = 1
[17:46:36.000] SequentialFuture started (and completed)
[17:46:36.000] - Launch lazy future ... done
[17:46:36.000] run() for ‘SequentialFuture’ ... done
[17:46:36.000] run() for ‘Future’ ...
[17:46:36.000] - state: ‘created’
[17:46:36.000] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:36.001] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:36.001] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:36.001]   - Field: ‘label’
[17:46:36.001]   - Field: ‘local’
[17:46:36.001]   - Field: ‘owner’
[17:46:36.001]   - Field: ‘envir’
[17:46:36.002]   - Field: ‘packages’
[17:46:36.002]   - Field: ‘gc’
[17:46:36.002]   - Field: ‘conditions’
[17:46:36.003]   - Field: ‘expr’
[17:46:36.003]   - Field: ‘uuid’
[17:46:36.003]   - Field: ‘seed’
[17:46:36.003]   - Field: ‘version’
[17:46:36.003]   - Field: ‘result’
[17:46:36.003]   - Field: ‘asynchronous’
[17:46:36.003]   - Field: ‘calls’
[17:46:36.003]   - Field: ‘globals’
[17:46:36.003]   - Field: ‘stdout’
[17:46:36.003]   - Field: ‘earlySignal’
[17:46:36.003]   - Field: ‘lazy’
[17:46:36.004]   - Field: ‘state’
[17:46:36.004] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:36.004] - Launch lazy future ...
[17:46:36.004] Packages needed by the future expression (n = 0): <none>
[17:46:36.004] Packages needed by future strategies (n = 0): <none>
[17:46:36.004] {
[17:46:36.004]     {
[17:46:36.004]         {
[17:46:36.004]             ...future.startTime <- base::Sys.time()
[17:46:36.004]             {
[17:46:36.004]                 {
[17:46:36.004]                   {
[17:46:36.004]                     base::local({
[17:46:36.004]                       has_future <- base::requireNamespace("future", 
[17:46:36.004]                         quietly = TRUE)
[17:46:36.004]                       if (has_future) {
[17:46:36.004]                         ns <- base::getNamespace("future")
[17:46:36.004]                         version <- ns[[".package"]][["version"]]
[17:46:36.004]                         if (is.null(version)) 
[17:46:36.004]                           version <- utils::packageVersion("future")
[17:46:36.004]                       }
[17:46:36.004]                       else {
[17:46:36.004]                         version <- NULL
[17:46:36.004]                       }
[17:46:36.004]                       if (!has_future || version < "1.8.0") {
[17:46:36.004]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:36.004]                           "", base::R.version$version.string), 
[17:46:36.004]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:36.004]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:36.004]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:36.004]                             "release", "version")], collapse = " "), 
[17:46:36.004]                           hostname = base::Sys.info()[["nodename"]])
[17:46:36.004]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:36.004]                           info)
[17:46:36.004]                         info <- base::paste(info, collapse = "; ")
[17:46:36.004]                         if (!has_future) {
[17:46:36.004]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:36.004]                             info)
[17:46:36.004]                         }
[17:46:36.004]                         else {
[17:46:36.004]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:36.004]                             info, version)
[17:46:36.004]                         }
[17:46:36.004]                         base::stop(msg)
[17:46:36.004]                       }
[17:46:36.004]                     })
[17:46:36.004]                   }
[17:46:36.004]                   ...future.strategy.old <- future::plan("list")
[17:46:36.004]                   options(future.plan = NULL)
[17:46:36.004]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:36.004]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:36.004]                 }
[17:46:36.004]                 ...future.workdir <- getwd()
[17:46:36.004]             }
[17:46:36.004]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:36.004]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:36.004]         }
[17:46:36.004]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:36.004]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:36.004]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:36.004]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:36.004]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:36.004]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:36.004]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:36.004]             base::names(...future.oldOptions))
[17:46:36.004]     }
[17:46:36.004]     if (FALSE) {
[17:46:36.004]     }
[17:46:36.004]     else {
[17:46:36.004]         if (TRUE) {
[17:46:36.004]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:36.004]                 open = "w")
[17:46:36.004]         }
[17:46:36.004]         else {
[17:46:36.004]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:36.004]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:36.004]         }
[17:46:36.004]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:36.004]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:36.004]             base::sink(type = "output", split = FALSE)
[17:46:36.004]             base::close(...future.stdout)
[17:46:36.004]         }, add = TRUE)
[17:46:36.004]     }
[17:46:36.004]     ...future.frame <- base::sys.nframe()
[17:46:36.004]     ...future.conditions <- base::list()
[17:46:36.004]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:36.004]     if (FALSE) {
[17:46:36.004]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:36.004]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:36.004]     }
[17:46:36.004]     ...future.result <- base::tryCatch({
[17:46:36.004]         base::withCallingHandlers({
[17:46:36.004]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:46:36.004]                 rr, cc)))
[17:46:36.004]             future::FutureResult(value = ...future.value$value, 
[17:46:36.004]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:36.004]                   ...future.rng), globalenv = if (FALSE) 
[17:46:36.004]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:36.004]                     ...future.globalenv.names))
[17:46:36.004]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:36.004]         }, condition = base::local({
[17:46:36.004]             c <- base::c
[17:46:36.004]             inherits <- base::inherits
[17:46:36.004]             invokeRestart <- base::invokeRestart
[17:46:36.004]             length <- base::length
[17:46:36.004]             list <- base::list
[17:46:36.004]             seq.int <- base::seq.int
[17:46:36.004]             signalCondition <- base::signalCondition
[17:46:36.004]             sys.calls <- base::sys.calls
[17:46:36.004]             `[[` <- base::`[[`
[17:46:36.004]             `+` <- base::`+`
[17:46:36.004]             `<<-` <- base::`<<-`
[17:46:36.004]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:36.004]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:36.004]                   3L)]
[17:46:36.004]             }
[17:46:36.004]             function(cond) {
[17:46:36.004]                 is_error <- inherits(cond, "error")
[17:46:36.004]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:36.004]                   NULL)
[17:46:36.004]                 if (is_error) {
[17:46:36.004]                   sessionInformation <- function() {
[17:46:36.004]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:36.004]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:36.004]                       search = base::search(), system = base::Sys.info())
[17:46:36.004]                   }
[17:46:36.004]                   ...future.conditions[[length(...future.conditions) + 
[17:46:36.004]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:36.004]                     cond$call), session = sessionInformation(), 
[17:46:36.004]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:36.004]                   signalCondition(cond)
[17:46:36.004]                 }
[17:46:36.004]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:36.004]                 "immediateCondition"))) {
[17:46:36.004]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:36.004]                   ...future.conditions[[length(...future.conditions) + 
[17:46:36.004]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:36.004]                   if (TRUE && !signal) {
[17:46:36.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:36.004]                     {
[17:46:36.004]                       inherits <- base::inherits
[17:46:36.004]                       invokeRestart <- base::invokeRestart
[17:46:36.004]                       is.null <- base::is.null
[17:46:36.004]                       muffled <- FALSE
[17:46:36.004]                       if (inherits(cond, "message")) {
[17:46:36.004]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:36.004]                         if (muffled) 
[17:46:36.004]                           invokeRestart("muffleMessage")
[17:46:36.004]                       }
[17:46:36.004]                       else if (inherits(cond, "warning")) {
[17:46:36.004]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:36.004]                         if (muffled) 
[17:46:36.004]                           invokeRestart("muffleWarning")
[17:46:36.004]                       }
[17:46:36.004]                       else if (inherits(cond, "condition")) {
[17:46:36.004]                         if (!is.null(pattern)) {
[17:46:36.004]                           computeRestarts <- base::computeRestarts
[17:46:36.004]                           grepl <- base::grepl
[17:46:36.004]                           restarts <- computeRestarts(cond)
[17:46:36.004]                           for (restart in restarts) {
[17:46:36.004]                             name <- restart$name
[17:46:36.004]                             if (is.null(name)) 
[17:46:36.004]                               next
[17:46:36.004]                             if (!grepl(pattern, name)) 
[17:46:36.004]                               next
[17:46:36.004]                             invokeRestart(restart)
[17:46:36.004]                             muffled <- TRUE
[17:46:36.004]                             break
[17:46:36.004]                           }
[17:46:36.004]                         }
[17:46:36.004]                       }
[17:46:36.004]                       invisible(muffled)
[17:46:36.004]                     }
[17:46:36.004]                     muffleCondition(cond, pattern = "^muffle")
[17:46:36.004]                   }
[17:46:36.004]                 }
[17:46:36.004]                 else {
[17:46:36.004]                   if (TRUE) {
[17:46:36.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:36.004]                     {
[17:46:36.004]                       inherits <- base::inherits
[17:46:36.004]                       invokeRestart <- base::invokeRestart
[17:46:36.004]                       is.null <- base::is.null
[17:46:36.004]                       muffled <- FALSE
[17:46:36.004]                       if (inherits(cond, "message")) {
[17:46:36.004]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:36.004]                         if (muffled) 
[17:46:36.004]                           invokeRestart("muffleMessage")
[17:46:36.004]                       }
[17:46:36.004]                       else if (inherits(cond, "warning")) {
[17:46:36.004]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:36.004]                         if (muffled) 
[17:46:36.004]                           invokeRestart("muffleWarning")
[17:46:36.004]                       }
[17:46:36.004]                       else if (inherits(cond, "condition")) {
[17:46:36.004]                         if (!is.null(pattern)) {
[17:46:36.004]                           computeRestarts <- base::computeRestarts
[17:46:36.004]                           grepl <- base::grepl
[17:46:36.004]                           restarts <- computeRestarts(cond)
[17:46:36.004]                           for (restart in restarts) {
[17:46:36.004]                             name <- restart$name
[17:46:36.004]                             if (is.null(name)) 
[17:46:36.004]                               next
[17:46:36.004]                             if (!grepl(pattern, name)) 
[17:46:36.004]                               next
[17:46:36.004]                             invokeRestart(restart)
[17:46:36.004]                             muffled <- TRUE
[17:46:36.004]                             break
[17:46:36.004]                           }
[17:46:36.004]                         }
[17:46:36.004]                       }
[17:46:36.004]                       invisible(muffled)
[17:46:36.004]                     }
[17:46:36.004]                     muffleCondition(cond, pattern = "^muffle")
[17:46:36.004]                   }
[17:46:36.004]                 }
[17:46:36.004]             }
[17:46:36.004]         }))
[17:46:36.004]     }, error = function(ex) {
[17:46:36.004]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:36.004]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:36.004]                 ...future.rng), started = ...future.startTime, 
[17:46:36.004]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:36.004]             version = "1.8"), class = "FutureResult")
[17:46:36.004]     }, finally = {
[17:46:36.004]         if (!identical(...future.workdir, getwd())) 
[17:46:36.004]             setwd(...future.workdir)
[17:46:36.004]         {
[17:46:36.004]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:36.004]                 ...future.oldOptions$nwarnings <- NULL
[17:46:36.004]             }
[17:46:36.004]             base::options(...future.oldOptions)
[17:46:36.004]             if (.Platform$OS.type == "windows") {
[17:46:36.004]                 old_names <- names(...future.oldEnvVars)
[17:46:36.004]                 envs <- base::Sys.getenv()
[17:46:36.004]                 names <- names(envs)
[17:46:36.004]                 common <- intersect(names, old_names)
[17:46:36.004]                 added <- setdiff(names, old_names)
[17:46:36.004]                 removed <- setdiff(old_names, names)
[17:46:36.004]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:36.004]                   envs[common]]
[17:46:36.004]                 NAMES <- toupper(changed)
[17:46:36.004]                 args <- list()
[17:46:36.004]                 for (kk in seq_along(NAMES)) {
[17:46:36.004]                   name <- changed[[kk]]
[17:46:36.004]                   NAME <- NAMES[[kk]]
[17:46:36.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.004]                     next
[17:46:36.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:36.004]                 }
[17:46:36.004]                 NAMES <- toupper(added)
[17:46:36.004]                 for (kk in seq_along(NAMES)) {
[17:46:36.004]                   name <- added[[kk]]
[17:46:36.004]                   NAME <- NAMES[[kk]]
[17:46:36.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.004]                     next
[17:46:36.004]                   args[[name]] <- ""
[17:46:36.004]                 }
[17:46:36.004]                 NAMES <- toupper(removed)
[17:46:36.004]                 for (kk in seq_along(NAMES)) {
[17:46:36.004]                   name <- removed[[kk]]
[17:46:36.004]                   NAME <- NAMES[[kk]]
[17:46:36.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.004]                     next
[17:46:36.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:36.004]                 }
[17:46:36.004]                 if (length(args) > 0) 
[17:46:36.004]                   base::do.call(base::Sys.setenv, args = args)
[17:46:36.004]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:36.004]             }
[17:46:36.004]             else {
[17:46:36.004]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:36.004]             }
[17:46:36.004]             {
[17:46:36.004]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:36.004]                   0L) {
[17:46:36.004]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:36.004]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:36.004]                   base::options(opts)
[17:46:36.004]                 }
[17:46:36.004]                 {
[17:46:36.004]                   {
[17:46:36.004]                     NULL
[17:46:36.004]                     RNGkind("Mersenne-Twister")
[17:46:36.004]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:36.004]                       inherits = FALSE)
[17:46:36.004]                   }
[17:46:36.004]                   options(future.plan = NULL)
[17:46:36.004]                   if (is.na(NA_character_)) 
[17:46:36.004]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:36.004]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:36.004]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:36.004]                     .init = FALSE)
[17:46:36.004]                 }
[17:46:36.004]             }
[17:46:36.004]         }
[17:46:36.004]     })
[17:46:36.004]     if (TRUE) {
[17:46:36.004]         base::sink(type = "output", split = FALSE)
[17:46:36.004]         if (TRUE) {
[17:46:36.004]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:36.004]         }
[17:46:36.004]         else {
[17:46:36.004]             ...future.result["stdout"] <- base::list(NULL)
[17:46:36.004]         }
[17:46:36.004]         base::close(...future.stdout)
[17:46:36.004]         ...future.stdout <- NULL
[17:46:36.004]     }
[17:46:36.004]     ...future.result$conditions <- ...future.conditions
[17:46:36.004]     ...future.result$finished <- base::Sys.time()
[17:46:36.004]     ...future.result
[17:46:36.004] }
[17:46:36.006] assign_globals() ...
[17:46:36.006] List of 2
[17:46:36.006]  $ rr: int 3
[17:46:36.006]  $ cc: int 1
[17:46:36.006]  - attr(*, "where")=List of 2
[17:46:36.006]   ..$ rr:<environment: R_EmptyEnv> 
[17:46:36.006]   ..$ cc:<environment: R_EmptyEnv> 
[17:46:36.006]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:36.006]  - attr(*, "resolved")= logi FALSE
[17:46:36.006]  - attr(*, "total_size")= num 112
[17:46:36.006]  - attr(*, "already-done")= logi TRUE
[17:46:36.009] - copied ‘rr’ to environment
[17:46:36.009] - copied ‘cc’ to environment
[17:46:36.009] assign_globals() ... done
[17:46:36.009] plan(): Setting new future strategy stack:
[17:46:36.009] List of future strategies:
[17:46:36.009] 1. sequential:
[17:46:36.009]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.009]    - tweaked: FALSE
[17:46:36.009]    - call: NULL
[17:46:36.010] plan(): nbrOfWorkers() = 1
[17:46:36.010] plan(): Setting new future strategy stack:
[17:46:36.010] List of future strategies:
[17:46:36.010] 1. sequential:
[17:46:36.010]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.010]    - tweaked: FALSE
[17:46:36.010]    - call: future::plan("sequential")
[17:46:36.011] plan(): nbrOfWorkers() = 1
[17:46:36.011] SequentialFuture started (and completed)
[17:46:36.011] - Launch lazy future ... done
[17:46:36.011] run() for ‘SequentialFuture’ ... done
[17:46:36.011] run() for ‘Future’ ...
[17:46:36.011] - state: ‘created’
[17:46:36.012] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:36.012] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:36.012] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:36.012]   - Field: ‘label’
[17:46:36.012]   - Field: ‘local’
[17:46:36.012]   - Field: ‘owner’
[17:46:36.012]   - Field: ‘envir’
[17:46:36.012]   - Field: ‘packages’
[17:46:36.012]   - Field: ‘gc’
[17:46:36.013]   - Field: ‘conditions’
[17:46:36.013]   - Field: ‘expr’
[17:46:36.013]   - Field: ‘uuid’
[17:46:36.013]   - Field: ‘seed’
[17:46:36.013]   - Field: ‘version’
[17:46:36.013]   - Field: ‘result’
[17:46:36.013]   - Field: ‘asynchronous’
[17:46:36.013]   - Field: ‘calls’
[17:46:36.013]   - Field: ‘globals’
[17:46:36.013]   - Field: ‘stdout’
[17:46:36.013]   - Field: ‘earlySignal’
[17:46:36.014]   - Field: ‘lazy’
[17:46:36.014]   - Field: ‘state’
[17:46:36.014] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:36.014] - Launch lazy future ...
[17:46:36.014] Packages needed by the future expression (n = 0): <none>
[17:46:36.014] Packages needed by future strategies (n = 0): <none>
[17:46:36.014] {
[17:46:36.014]     {
[17:46:36.014]         {
[17:46:36.014]             ...future.startTime <- base::Sys.time()
[17:46:36.014]             {
[17:46:36.014]                 {
[17:46:36.014]                   {
[17:46:36.014]                     base::local({
[17:46:36.014]                       has_future <- base::requireNamespace("future", 
[17:46:36.014]                         quietly = TRUE)
[17:46:36.014]                       if (has_future) {
[17:46:36.014]                         ns <- base::getNamespace("future")
[17:46:36.014]                         version <- ns[[".package"]][["version"]]
[17:46:36.014]                         if (is.null(version)) 
[17:46:36.014]                           version <- utils::packageVersion("future")
[17:46:36.014]                       }
[17:46:36.014]                       else {
[17:46:36.014]                         version <- NULL
[17:46:36.014]                       }
[17:46:36.014]                       if (!has_future || version < "1.8.0") {
[17:46:36.014]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:36.014]                           "", base::R.version$version.string), 
[17:46:36.014]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:36.014]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:36.014]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:36.014]                             "release", "version")], collapse = " "), 
[17:46:36.014]                           hostname = base::Sys.info()[["nodename"]])
[17:46:36.014]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:36.014]                           info)
[17:46:36.014]                         info <- base::paste(info, collapse = "; ")
[17:46:36.014]                         if (!has_future) {
[17:46:36.014]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:36.014]                             info)
[17:46:36.014]                         }
[17:46:36.014]                         else {
[17:46:36.014]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:36.014]                             info, version)
[17:46:36.014]                         }
[17:46:36.014]                         base::stop(msg)
[17:46:36.014]                       }
[17:46:36.014]                     })
[17:46:36.014]                   }
[17:46:36.014]                   ...future.strategy.old <- future::plan("list")
[17:46:36.014]                   options(future.plan = NULL)
[17:46:36.014]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:36.014]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:36.014]                 }
[17:46:36.014]                 ...future.workdir <- getwd()
[17:46:36.014]             }
[17:46:36.014]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:36.014]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:36.014]         }
[17:46:36.014]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:36.014]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:36.014]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:36.014]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:36.014]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:36.014]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:36.014]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:36.014]             base::names(...future.oldOptions))
[17:46:36.014]     }
[17:46:36.014]     if (FALSE) {
[17:46:36.014]     }
[17:46:36.014]     else {
[17:46:36.014]         if (TRUE) {
[17:46:36.014]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:36.014]                 open = "w")
[17:46:36.014]         }
[17:46:36.014]         else {
[17:46:36.014]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:36.014]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:36.014]         }
[17:46:36.014]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:36.014]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:36.014]             base::sink(type = "output", split = FALSE)
[17:46:36.014]             base::close(...future.stdout)
[17:46:36.014]         }, add = TRUE)
[17:46:36.014]     }
[17:46:36.014]     ...future.frame <- base::sys.nframe()
[17:46:36.014]     ...future.conditions <- base::list()
[17:46:36.014]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:36.014]     if (FALSE) {
[17:46:36.014]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:36.014]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:36.014]     }
[17:46:36.014]     ...future.result <- base::tryCatch({
[17:46:36.014]         base::withCallingHandlers({
[17:46:36.014]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:46:36.014]                 rr, cc)))
[17:46:36.014]             future::FutureResult(value = ...future.value$value, 
[17:46:36.014]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:36.014]                   ...future.rng), globalenv = if (FALSE) 
[17:46:36.014]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:36.014]                     ...future.globalenv.names))
[17:46:36.014]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:36.014]         }, condition = base::local({
[17:46:36.014]             c <- base::c
[17:46:36.014]             inherits <- base::inherits
[17:46:36.014]             invokeRestart <- base::invokeRestart
[17:46:36.014]             length <- base::length
[17:46:36.014]             list <- base::list
[17:46:36.014]             seq.int <- base::seq.int
[17:46:36.014]             signalCondition <- base::signalCondition
[17:46:36.014]             sys.calls <- base::sys.calls
[17:46:36.014]             `[[` <- base::`[[`
[17:46:36.014]             `+` <- base::`+`
[17:46:36.014]             `<<-` <- base::`<<-`
[17:46:36.014]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:36.014]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:36.014]                   3L)]
[17:46:36.014]             }
[17:46:36.014]             function(cond) {
[17:46:36.014]                 is_error <- inherits(cond, "error")
[17:46:36.014]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:36.014]                   NULL)
[17:46:36.014]                 if (is_error) {
[17:46:36.014]                   sessionInformation <- function() {
[17:46:36.014]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:36.014]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:36.014]                       search = base::search(), system = base::Sys.info())
[17:46:36.014]                   }
[17:46:36.014]                   ...future.conditions[[length(...future.conditions) + 
[17:46:36.014]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:36.014]                     cond$call), session = sessionInformation(), 
[17:46:36.014]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:36.014]                   signalCondition(cond)
[17:46:36.014]                 }
[17:46:36.014]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:36.014]                 "immediateCondition"))) {
[17:46:36.014]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:36.014]                   ...future.conditions[[length(...future.conditions) + 
[17:46:36.014]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:36.014]                   if (TRUE && !signal) {
[17:46:36.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:36.014]                     {
[17:46:36.014]                       inherits <- base::inherits
[17:46:36.014]                       invokeRestart <- base::invokeRestart
[17:46:36.014]                       is.null <- base::is.null
[17:46:36.014]                       muffled <- FALSE
[17:46:36.014]                       if (inherits(cond, "message")) {
[17:46:36.014]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:36.014]                         if (muffled) 
[17:46:36.014]                           invokeRestart("muffleMessage")
[17:46:36.014]                       }
[17:46:36.014]                       else if (inherits(cond, "warning")) {
[17:46:36.014]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:36.014]                         if (muffled) 
[17:46:36.014]                           invokeRestart("muffleWarning")
[17:46:36.014]                       }
[17:46:36.014]                       else if (inherits(cond, "condition")) {
[17:46:36.014]                         if (!is.null(pattern)) {
[17:46:36.014]                           computeRestarts <- base::computeRestarts
[17:46:36.014]                           grepl <- base::grepl
[17:46:36.014]                           restarts <- computeRestarts(cond)
[17:46:36.014]                           for (restart in restarts) {
[17:46:36.014]                             name <- restart$name
[17:46:36.014]                             if (is.null(name)) 
[17:46:36.014]                               next
[17:46:36.014]                             if (!grepl(pattern, name)) 
[17:46:36.014]                               next
[17:46:36.014]                             invokeRestart(restart)
[17:46:36.014]                             muffled <- TRUE
[17:46:36.014]                             break
[17:46:36.014]                           }
[17:46:36.014]                         }
[17:46:36.014]                       }
[17:46:36.014]                       invisible(muffled)
[17:46:36.014]                     }
[17:46:36.014]                     muffleCondition(cond, pattern = "^muffle")
[17:46:36.014]                   }
[17:46:36.014]                 }
[17:46:36.014]                 else {
[17:46:36.014]                   if (TRUE) {
[17:46:36.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:36.014]                     {
[17:46:36.014]                       inherits <- base::inherits
[17:46:36.014]                       invokeRestart <- base::invokeRestart
[17:46:36.014]                       is.null <- base::is.null
[17:46:36.014]                       muffled <- FALSE
[17:46:36.014]                       if (inherits(cond, "message")) {
[17:46:36.014]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:36.014]                         if (muffled) 
[17:46:36.014]                           invokeRestart("muffleMessage")
[17:46:36.014]                       }
[17:46:36.014]                       else if (inherits(cond, "warning")) {
[17:46:36.014]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:36.014]                         if (muffled) 
[17:46:36.014]                           invokeRestart("muffleWarning")
[17:46:36.014]                       }
[17:46:36.014]                       else if (inherits(cond, "condition")) {
[17:46:36.014]                         if (!is.null(pattern)) {
[17:46:36.014]                           computeRestarts <- base::computeRestarts
[17:46:36.014]                           grepl <- base::grepl
[17:46:36.014]                           restarts <- computeRestarts(cond)
[17:46:36.014]                           for (restart in restarts) {
[17:46:36.014]                             name <- restart$name
[17:46:36.014]                             if (is.null(name)) 
[17:46:36.014]                               next
[17:46:36.014]                             if (!grepl(pattern, name)) 
[17:46:36.014]                               next
[17:46:36.014]                             invokeRestart(restart)
[17:46:36.014]                             muffled <- TRUE
[17:46:36.014]                             break
[17:46:36.014]                           }
[17:46:36.014]                         }
[17:46:36.014]                       }
[17:46:36.014]                       invisible(muffled)
[17:46:36.014]                     }
[17:46:36.014]                     muffleCondition(cond, pattern = "^muffle")
[17:46:36.014]                   }
[17:46:36.014]                 }
[17:46:36.014]             }
[17:46:36.014]         }))
[17:46:36.014]     }, error = function(ex) {
[17:46:36.014]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:36.014]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:36.014]                 ...future.rng), started = ...future.startTime, 
[17:46:36.014]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:36.014]             version = "1.8"), class = "FutureResult")
[17:46:36.014]     }, finally = {
[17:46:36.014]         if (!identical(...future.workdir, getwd())) 
[17:46:36.014]             setwd(...future.workdir)
[17:46:36.014]         {
[17:46:36.014]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:36.014]                 ...future.oldOptions$nwarnings <- NULL
[17:46:36.014]             }
[17:46:36.014]             base::options(...future.oldOptions)
[17:46:36.014]             if (.Platform$OS.type == "windows") {
[17:46:36.014]                 old_names <- names(...future.oldEnvVars)
[17:46:36.014]                 envs <- base::Sys.getenv()
[17:46:36.014]                 names <- names(envs)
[17:46:36.014]                 common <- intersect(names, old_names)
[17:46:36.014]                 added <- setdiff(names, old_names)
[17:46:36.014]                 removed <- setdiff(old_names, names)
[17:46:36.014]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:36.014]                   envs[common]]
[17:46:36.014]                 NAMES <- toupper(changed)
[17:46:36.014]                 args <- list()
[17:46:36.014]                 for (kk in seq_along(NAMES)) {
[17:46:36.014]                   name <- changed[[kk]]
[17:46:36.014]                   NAME <- NAMES[[kk]]
[17:46:36.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.014]                     next
[17:46:36.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:36.014]                 }
[17:46:36.014]                 NAMES <- toupper(added)
[17:46:36.014]                 for (kk in seq_along(NAMES)) {
[17:46:36.014]                   name <- added[[kk]]
[17:46:36.014]                   NAME <- NAMES[[kk]]
[17:46:36.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.014]                     next
[17:46:36.014]                   args[[name]] <- ""
[17:46:36.014]                 }
[17:46:36.014]                 NAMES <- toupper(removed)
[17:46:36.014]                 for (kk in seq_along(NAMES)) {
[17:46:36.014]                   name <- removed[[kk]]
[17:46:36.014]                   NAME <- NAMES[[kk]]
[17:46:36.014]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.014]                     next
[17:46:36.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:36.014]                 }
[17:46:36.014]                 if (length(args) > 0) 
[17:46:36.014]                   base::do.call(base::Sys.setenv, args = args)
[17:46:36.014]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:36.014]             }
[17:46:36.014]             else {
[17:46:36.014]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:36.014]             }
[17:46:36.014]             {
[17:46:36.014]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:36.014]                   0L) {
[17:46:36.014]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:36.014]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:36.014]                   base::options(opts)
[17:46:36.014]                 }
[17:46:36.014]                 {
[17:46:36.014]                   {
[17:46:36.014]                     NULL
[17:46:36.014]                     RNGkind("Mersenne-Twister")
[17:46:36.014]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:36.014]                       inherits = FALSE)
[17:46:36.014]                   }
[17:46:36.014]                   options(future.plan = NULL)
[17:46:36.014]                   if (is.na(NA_character_)) 
[17:46:36.014]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:36.014]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:36.014]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:36.014]                     .init = FALSE)
[17:46:36.014]                 }
[17:46:36.014]             }
[17:46:36.014]         }
[17:46:36.014]     })
[17:46:36.014]     if (TRUE) {
[17:46:36.014]         base::sink(type = "output", split = FALSE)
[17:46:36.014]         if (TRUE) {
[17:46:36.014]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:36.014]         }
[17:46:36.014]         else {
[17:46:36.014]             ...future.result["stdout"] <- base::list(NULL)
[17:46:36.014]         }
[17:46:36.014]         base::close(...future.stdout)
[17:46:36.014]         ...future.stdout <- NULL
[17:46:36.014]     }
[17:46:36.014]     ...future.result$conditions <- ...future.conditions
[17:46:36.014]     ...future.result$finished <- base::Sys.time()
[17:46:36.014]     ...future.result
[17:46:36.014] }
[17:46:36.016] assign_globals() ...
[17:46:36.016] List of 2
[17:46:36.016]  $ rr: int 1
[17:46:36.016]  $ cc: int 2
[17:46:36.016]  - attr(*, "where")=List of 2
[17:46:36.016]   ..$ rr:<environment: R_EmptyEnv> 
[17:46:36.016]   ..$ cc:<environment: R_EmptyEnv> 
[17:46:36.016]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:36.016]  - attr(*, "resolved")= logi FALSE
[17:46:36.016]  - attr(*, "total_size")= num 112
[17:46:36.016]  - attr(*, "already-done")= logi TRUE
[17:46:36.019] - copied ‘rr’ to environment
[17:46:36.019] - copied ‘cc’ to environment
[17:46:36.019] assign_globals() ... done
[17:46:36.019] plan(): Setting new future strategy stack:
[17:46:36.019] List of future strategies:
[17:46:36.019] 1. sequential:
[17:46:36.019]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.019]    - tweaked: FALSE
[17:46:36.019]    - call: NULL
[17:46:36.020] plan(): nbrOfWorkers() = 1
[17:46:36.020] plan(): Setting new future strategy stack:
[17:46:36.020] List of future strategies:
[17:46:36.020] 1. sequential:
[17:46:36.020]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.020]    - tweaked: FALSE
[17:46:36.020]    - call: future::plan("sequential")
[17:46:36.021] plan(): nbrOfWorkers() = 1
[17:46:36.021] SequentialFuture started (and completed)
[17:46:36.021] - Launch lazy future ... done
[17:46:36.021] run() for ‘SequentialFuture’ ... done
[17:46:36.021] run() for ‘Future’ ...
[17:46:36.021] - state: ‘created’
[17:46:36.022] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:36.022] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:36.022] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:36.022]   - Field: ‘label’
[17:46:36.022]   - Field: ‘local’
[17:46:36.022]   - Field: ‘owner’
[17:46:36.022]   - Field: ‘envir’
[17:46:36.022]   - Field: ‘packages’
[17:46:36.022]   - Field: ‘gc’
[17:46:36.023]   - Field: ‘conditions’
[17:46:36.023]   - Field: ‘expr’
[17:46:36.023]   - Field: ‘uuid’
[17:46:36.023]   - Field: ‘seed’
[17:46:36.023]   - Field: ‘version’
[17:46:36.023]   - Field: ‘result’
[17:46:36.023]   - Field: ‘asynchronous’
[17:46:36.023]   - Field: ‘calls’
[17:46:36.023]   - Field: ‘globals’
[17:46:36.023]   - Field: ‘stdout’
[17:46:36.024]   - Field: ‘earlySignal’
[17:46:36.024]   - Field: ‘lazy’
[17:46:36.024]   - Field: ‘state’
[17:46:36.024] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:36.024] - Launch lazy future ...
[17:46:36.024] Packages needed by the future expression (n = 0): <none>
[17:46:36.024] Packages needed by future strategies (n = 0): <none>
[17:46:36.024] {
[17:46:36.024]     {
[17:46:36.024]         {
[17:46:36.024]             ...future.startTime <- base::Sys.time()
[17:46:36.024]             {
[17:46:36.024]                 {
[17:46:36.024]                   {
[17:46:36.024]                     base::local({
[17:46:36.024]                       has_future <- base::requireNamespace("future", 
[17:46:36.024]                         quietly = TRUE)
[17:46:36.024]                       if (has_future) {
[17:46:36.024]                         ns <- base::getNamespace("future")
[17:46:36.024]                         version <- ns[[".package"]][["version"]]
[17:46:36.024]                         if (is.null(version)) 
[17:46:36.024]                           version <- utils::packageVersion("future")
[17:46:36.024]                       }
[17:46:36.024]                       else {
[17:46:36.024]                         version <- NULL
[17:46:36.024]                       }
[17:46:36.024]                       if (!has_future || version < "1.8.0") {
[17:46:36.024]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:36.024]                           "", base::R.version$version.string), 
[17:46:36.024]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:36.024]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:36.024]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:36.024]                             "release", "version")], collapse = " "), 
[17:46:36.024]                           hostname = base::Sys.info()[["nodename"]])
[17:46:36.024]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:36.024]                           info)
[17:46:36.024]                         info <- base::paste(info, collapse = "; ")
[17:46:36.024]                         if (!has_future) {
[17:46:36.024]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:36.024]                             info)
[17:46:36.024]                         }
[17:46:36.024]                         else {
[17:46:36.024]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:36.024]                             info, version)
[17:46:36.024]                         }
[17:46:36.024]                         base::stop(msg)
[17:46:36.024]                       }
[17:46:36.024]                     })
[17:46:36.024]                   }
[17:46:36.024]                   ...future.strategy.old <- future::plan("list")
[17:46:36.024]                   options(future.plan = NULL)
[17:46:36.024]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:36.024]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:36.024]                 }
[17:46:36.024]                 ...future.workdir <- getwd()
[17:46:36.024]             }
[17:46:36.024]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:36.024]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:36.024]         }
[17:46:36.024]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:36.024]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:36.024]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:36.024]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:36.024]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:36.024]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:36.024]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:36.024]             base::names(...future.oldOptions))
[17:46:36.024]     }
[17:46:36.024]     if (FALSE) {
[17:46:36.024]     }
[17:46:36.024]     else {
[17:46:36.024]         if (TRUE) {
[17:46:36.024]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:36.024]                 open = "w")
[17:46:36.024]         }
[17:46:36.024]         else {
[17:46:36.024]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:36.024]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:36.024]         }
[17:46:36.024]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:36.024]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:36.024]             base::sink(type = "output", split = FALSE)
[17:46:36.024]             base::close(...future.stdout)
[17:46:36.024]         }, add = TRUE)
[17:46:36.024]     }
[17:46:36.024]     ...future.frame <- base::sys.nframe()
[17:46:36.024]     ...future.conditions <- base::list()
[17:46:36.024]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:36.024]     if (FALSE) {
[17:46:36.024]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:36.024]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:36.024]     }
[17:46:36.024]     ...future.result <- base::tryCatch({
[17:46:36.024]         base::withCallingHandlers({
[17:46:36.024]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:46:36.024]                 rr, cc)))
[17:46:36.024]             future::FutureResult(value = ...future.value$value, 
[17:46:36.024]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:36.024]                   ...future.rng), globalenv = if (FALSE) 
[17:46:36.024]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:36.024]                     ...future.globalenv.names))
[17:46:36.024]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:36.024]         }, condition = base::local({
[17:46:36.024]             c <- base::c
[17:46:36.024]             inherits <- base::inherits
[17:46:36.024]             invokeRestart <- base::invokeRestart
[17:46:36.024]             length <- base::length
[17:46:36.024]             list <- base::list
[17:46:36.024]             seq.int <- base::seq.int
[17:46:36.024]             signalCondition <- base::signalCondition
[17:46:36.024]             sys.calls <- base::sys.calls
[17:46:36.024]             `[[` <- base::`[[`
[17:46:36.024]             `+` <- base::`+`
[17:46:36.024]             `<<-` <- base::`<<-`
[17:46:36.024]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:36.024]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:36.024]                   3L)]
[17:46:36.024]             }
[17:46:36.024]             function(cond) {
[17:46:36.024]                 is_error <- inherits(cond, "error")
[17:46:36.024]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:36.024]                   NULL)
[17:46:36.024]                 if (is_error) {
[17:46:36.024]                   sessionInformation <- function() {
[17:46:36.024]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:36.024]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:36.024]                       search = base::search(), system = base::Sys.info())
[17:46:36.024]                   }
[17:46:36.024]                   ...future.conditions[[length(...future.conditions) + 
[17:46:36.024]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:36.024]                     cond$call), session = sessionInformation(), 
[17:46:36.024]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:36.024]                   signalCondition(cond)
[17:46:36.024]                 }
[17:46:36.024]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:36.024]                 "immediateCondition"))) {
[17:46:36.024]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:36.024]                   ...future.conditions[[length(...future.conditions) + 
[17:46:36.024]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:36.024]                   if (TRUE && !signal) {
[17:46:36.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:36.024]                     {
[17:46:36.024]                       inherits <- base::inherits
[17:46:36.024]                       invokeRestart <- base::invokeRestart
[17:46:36.024]                       is.null <- base::is.null
[17:46:36.024]                       muffled <- FALSE
[17:46:36.024]                       if (inherits(cond, "message")) {
[17:46:36.024]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:36.024]                         if (muffled) 
[17:46:36.024]                           invokeRestart("muffleMessage")
[17:46:36.024]                       }
[17:46:36.024]                       else if (inherits(cond, "warning")) {
[17:46:36.024]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:36.024]                         if (muffled) 
[17:46:36.024]                           invokeRestart("muffleWarning")
[17:46:36.024]                       }
[17:46:36.024]                       else if (inherits(cond, "condition")) {
[17:46:36.024]                         if (!is.null(pattern)) {
[17:46:36.024]                           computeRestarts <- base::computeRestarts
[17:46:36.024]                           grepl <- base::grepl
[17:46:36.024]                           restarts <- computeRestarts(cond)
[17:46:36.024]                           for (restart in restarts) {
[17:46:36.024]                             name <- restart$name
[17:46:36.024]                             if (is.null(name)) 
[17:46:36.024]                               next
[17:46:36.024]                             if (!grepl(pattern, name)) 
[17:46:36.024]                               next
[17:46:36.024]                             invokeRestart(restart)
[17:46:36.024]                             muffled <- TRUE
[17:46:36.024]                             break
[17:46:36.024]                           }
[17:46:36.024]                         }
[17:46:36.024]                       }
[17:46:36.024]                       invisible(muffled)
[17:46:36.024]                     }
[17:46:36.024]                     muffleCondition(cond, pattern = "^muffle")
[17:46:36.024]                   }
[17:46:36.024]                 }
[17:46:36.024]                 else {
[17:46:36.024]                   if (TRUE) {
[17:46:36.024]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:36.024]                     {
[17:46:36.024]                       inherits <- base::inherits
[17:46:36.024]                       invokeRestart <- base::invokeRestart
[17:46:36.024]                       is.null <- base::is.null
[17:46:36.024]                       muffled <- FALSE
[17:46:36.024]                       if (inherits(cond, "message")) {
[17:46:36.024]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:36.024]                         if (muffled) 
[17:46:36.024]                           invokeRestart("muffleMessage")
[17:46:36.024]                       }
[17:46:36.024]                       else if (inherits(cond, "warning")) {
[17:46:36.024]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:36.024]                         if (muffled) 
[17:46:36.024]                           invokeRestart("muffleWarning")
[17:46:36.024]                       }
[17:46:36.024]                       else if (inherits(cond, "condition")) {
[17:46:36.024]                         if (!is.null(pattern)) {
[17:46:36.024]                           computeRestarts <- base::computeRestarts
[17:46:36.024]                           grepl <- base::grepl
[17:46:36.024]                           restarts <- computeRestarts(cond)
[17:46:36.024]                           for (restart in restarts) {
[17:46:36.024]                             name <- restart$name
[17:46:36.024]                             if (is.null(name)) 
[17:46:36.024]                               next
[17:46:36.024]                             if (!grepl(pattern, name)) 
[17:46:36.024]                               next
[17:46:36.024]                             invokeRestart(restart)
[17:46:36.024]                             muffled <- TRUE
[17:46:36.024]                             break
[17:46:36.024]                           }
[17:46:36.024]                         }
[17:46:36.024]                       }
[17:46:36.024]                       invisible(muffled)
[17:46:36.024]                     }
[17:46:36.024]                     muffleCondition(cond, pattern = "^muffle")
[17:46:36.024]                   }
[17:46:36.024]                 }
[17:46:36.024]             }
[17:46:36.024]         }))
[17:46:36.024]     }, error = function(ex) {
[17:46:36.024]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:36.024]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:36.024]                 ...future.rng), started = ...future.startTime, 
[17:46:36.024]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:36.024]             version = "1.8"), class = "FutureResult")
[17:46:36.024]     }, finally = {
[17:46:36.024]         if (!identical(...future.workdir, getwd())) 
[17:46:36.024]             setwd(...future.workdir)
[17:46:36.024]         {
[17:46:36.024]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:36.024]                 ...future.oldOptions$nwarnings <- NULL
[17:46:36.024]             }
[17:46:36.024]             base::options(...future.oldOptions)
[17:46:36.024]             if (.Platform$OS.type == "windows") {
[17:46:36.024]                 old_names <- names(...future.oldEnvVars)
[17:46:36.024]                 envs <- base::Sys.getenv()
[17:46:36.024]                 names <- names(envs)
[17:46:36.024]                 common <- intersect(names, old_names)
[17:46:36.024]                 added <- setdiff(names, old_names)
[17:46:36.024]                 removed <- setdiff(old_names, names)
[17:46:36.024]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:36.024]                   envs[common]]
[17:46:36.024]                 NAMES <- toupper(changed)
[17:46:36.024]                 args <- list()
[17:46:36.024]                 for (kk in seq_along(NAMES)) {
[17:46:36.024]                   name <- changed[[kk]]
[17:46:36.024]                   NAME <- NAMES[[kk]]
[17:46:36.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.024]                     next
[17:46:36.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:36.024]                 }
[17:46:36.024]                 NAMES <- toupper(added)
[17:46:36.024]                 for (kk in seq_along(NAMES)) {
[17:46:36.024]                   name <- added[[kk]]
[17:46:36.024]                   NAME <- NAMES[[kk]]
[17:46:36.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.024]                     next
[17:46:36.024]                   args[[name]] <- ""
[17:46:36.024]                 }
[17:46:36.024]                 NAMES <- toupper(removed)
[17:46:36.024]                 for (kk in seq_along(NAMES)) {
[17:46:36.024]                   name <- removed[[kk]]
[17:46:36.024]                   NAME <- NAMES[[kk]]
[17:46:36.024]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.024]                     next
[17:46:36.024]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:36.024]                 }
[17:46:36.024]                 if (length(args) > 0) 
[17:46:36.024]                   base::do.call(base::Sys.setenv, args = args)
[17:46:36.024]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:36.024]             }
[17:46:36.024]             else {
[17:46:36.024]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:36.024]             }
[17:46:36.024]             {
[17:46:36.024]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:36.024]                   0L) {
[17:46:36.024]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:36.024]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:36.024]                   base::options(opts)
[17:46:36.024]                 }
[17:46:36.024]                 {
[17:46:36.024]                   {
[17:46:36.024]                     NULL
[17:46:36.024]                     RNGkind("Mersenne-Twister")
[17:46:36.024]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:36.024]                       inherits = FALSE)
[17:46:36.024]                   }
[17:46:36.024]                   options(future.plan = NULL)
[17:46:36.024]                   if (is.na(NA_character_)) 
[17:46:36.024]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:36.024]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:36.024]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:36.024]                     .init = FALSE)
[17:46:36.024]                 }
[17:46:36.024]             }
[17:46:36.024]         }
[17:46:36.024]     })
[17:46:36.024]     if (TRUE) {
[17:46:36.024]         base::sink(type = "output", split = FALSE)
[17:46:36.024]         if (TRUE) {
[17:46:36.024]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:36.024]         }
[17:46:36.024]         else {
[17:46:36.024]             ...future.result["stdout"] <- base::list(NULL)
[17:46:36.024]         }
[17:46:36.024]         base::close(...future.stdout)
[17:46:36.024]         ...future.stdout <- NULL
[17:46:36.024]     }
[17:46:36.024]     ...future.result$conditions <- ...future.conditions
[17:46:36.024]     ...future.result$finished <- base::Sys.time()
[17:46:36.024]     ...future.result
[17:46:36.024] }
[17:46:36.026] assign_globals() ...
[17:46:36.026] List of 2
[17:46:36.026]  $ rr: int 2
[17:46:36.026]  $ cc: int 2
[17:46:36.026]  - attr(*, "where")=List of 2
[17:46:36.026]   ..$ rr:<environment: R_EmptyEnv> 
[17:46:36.026]   ..$ cc:<environment: R_EmptyEnv> 
[17:46:36.026]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:36.026]  - attr(*, "resolved")= logi FALSE
[17:46:36.026]  - attr(*, "total_size")= num 112
[17:46:36.026]  - attr(*, "already-done")= logi TRUE
[17:46:36.029] - copied ‘rr’ to environment
[17:46:36.029] - copied ‘cc’ to environment
[17:46:36.029] assign_globals() ... done
[17:46:36.029] plan(): Setting new future strategy stack:
[17:46:36.029] List of future strategies:
[17:46:36.029] 1. sequential:
[17:46:36.029]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.029]    - tweaked: FALSE
[17:46:36.029]    - call: NULL
[17:46:36.030] plan(): nbrOfWorkers() = 1
[17:46:36.032] plan(): Setting new future strategy stack:
[17:46:36.032] List of future strategies:
[17:46:36.032] 1. sequential:
[17:46:36.032]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.032]    - tweaked: FALSE
[17:46:36.032]    - call: future::plan("sequential")
[17:46:36.032] plan(): nbrOfWorkers() = 1
[17:46:36.032] SequentialFuture started (and completed)
[17:46:36.033] - Launch lazy future ... done
[17:46:36.033] run() for ‘SequentialFuture’ ... done
[17:46:36.033] run() for ‘Future’ ...
[17:46:36.033] - state: ‘created’
[17:46:36.033] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:36.033] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:36.033] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:36.034]   - Field: ‘label’
[17:46:36.034]   - Field: ‘local’
[17:46:36.034]   - Field: ‘owner’
[17:46:36.034]   - Field: ‘envir’
[17:46:36.034]   - Field: ‘packages’
[17:46:36.034]   - Field: ‘gc’
[17:46:36.034]   - Field: ‘conditions’
[17:46:36.034]   - Field: ‘expr’
[17:46:36.034]   - Field: ‘uuid’
[17:46:36.034]   - Field: ‘seed’
[17:46:36.034]   - Field: ‘version’
[17:46:36.035]   - Field: ‘result’
[17:46:36.035]   - Field: ‘asynchronous’
[17:46:36.035]   - Field: ‘calls’
[17:46:36.035]   - Field: ‘globals’
[17:46:36.035]   - Field: ‘stdout’
[17:46:36.035]   - Field: ‘earlySignal’
[17:46:36.035]   - Field: ‘lazy’
[17:46:36.035]   - Field: ‘state’
[17:46:36.035] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:36.035] - Launch lazy future ...
[17:46:36.036] Packages needed by the future expression (n = 0): <none>
[17:46:36.036] Packages needed by future strategies (n = 0): <none>
[17:46:36.036] {
[17:46:36.036]     {
[17:46:36.036]         {
[17:46:36.036]             ...future.startTime <- base::Sys.time()
[17:46:36.036]             {
[17:46:36.036]                 {
[17:46:36.036]                   {
[17:46:36.036]                     base::local({
[17:46:36.036]                       has_future <- base::requireNamespace("future", 
[17:46:36.036]                         quietly = TRUE)
[17:46:36.036]                       if (has_future) {
[17:46:36.036]                         ns <- base::getNamespace("future")
[17:46:36.036]                         version <- ns[[".package"]][["version"]]
[17:46:36.036]                         if (is.null(version)) 
[17:46:36.036]                           version <- utils::packageVersion("future")
[17:46:36.036]                       }
[17:46:36.036]                       else {
[17:46:36.036]                         version <- NULL
[17:46:36.036]                       }
[17:46:36.036]                       if (!has_future || version < "1.8.0") {
[17:46:36.036]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:36.036]                           "", base::R.version$version.string), 
[17:46:36.036]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:36.036]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:36.036]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:36.036]                             "release", "version")], collapse = " "), 
[17:46:36.036]                           hostname = base::Sys.info()[["nodename"]])
[17:46:36.036]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:36.036]                           info)
[17:46:36.036]                         info <- base::paste(info, collapse = "; ")
[17:46:36.036]                         if (!has_future) {
[17:46:36.036]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:36.036]                             info)
[17:46:36.036]                         }
[17:46:36.036]                         else {
[17:46:36.036]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:36.036]                             info, version)
[17:46:36.036]                         }
[17:46:36.036]                         base::stop(msg)
[17:46:36.036]                       }
[17:46:36.036]                     })
[17:46:36.036]                   }
[17:46:36.036]                   ...future.strategy.old <- future::plan("list")
[17:46:36.036]                   options(future.plan = NULL)
[17:46:36.036]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:36.036]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:36.036]                 }
[17:46:36.036]                 ...future.workdir <- getwd()
[17:46:36.036]             }
[17:46:36.036]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:36.036]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:36.036]         }
[17:46:36.036]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:36.036]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:36.036]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:36.036]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:36.036]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:36.036]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:36.036]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:36.036]             base::names(...future.oldOptions))
[17:46:36.036]     }
[17:46:36.036]     if (FALSE) {
[17:46:36.036]     }
[17:46:36.036]     else {
[17:46:36.036]         if (TRUE) {
[17:46:36.036]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:36.036]                 open = "w")
[17:46:36.036]         }
[17:46:36.036]         else {
[17:46:36.036]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:36.036]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:36.036]         }
[17:46:36.036]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:36.036]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:36.036]             base::sink(type = "output", split = FALSE)
[17:46:36.036]             base::close(...future.stdout)
[17:46:36.036]         }, add = TRUE)
[17:46:36.036]     }
[17:46:36.036]     ...future.frame <- base::sys.nframe()
[17:46:36.036]     ...future.conditions <- base::list()
[17:46:36.036]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:36.036]     if (FALSE) {
[17:46:36.036]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:36.036]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:36.036]     }
[17:46:36.036]     ...future.result <- base::tryCatch({
[17:46:36.036]         base::withCallingHandlers({
[17:46:36.036]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:46:36.036]                 rr, cc)))
[17:46:36.036]             future::FutureResult(value = ...future.value$value, 
[17:46:36.036]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:36.036]                   ...future.rng), globalenv = if (FALSE) 
[17:46:36.036]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:36.036]                     ...future.globalenv.names))
[17:46:36.036]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:36.036]         }, condition = base::local({
[17:46:36.036]             c <- base::c
[17:46:36.036]             inherits <- base::inherits
[17:46:36.036]             invokeRestart <- base::invokeRestart
[17:46:36.036]             length <- base::length
[17:46:36.036]             list <- base::list
[17:46:36.036]             seq.int <- base::seq.int
[17:46:36.036]             signalCondition <- base::signalCondition
[17:46:36.036]             sys.calls <- base::sys.calls
[17:46:36.036]             `[[` <- base::`[[`
[17:46:36.036]             `+` <- base::`+`
[17:46:36.036]             `<<-` <- base::`<<-`
[17:46:36.036]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:36.036]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:36.036]                   3L)]
[17:46:36.036]             }
[17:46:36.036]             function(cond) {
[17:46:36.036]                 is_error <- inherits(cond, "error")
[17:46:36.036]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:36.036]                   NULL)
[17:46:36.036]                 if (is_error) {
[17:46:36.036]                   sessionInformation <- function() {
[17:46:36.036]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:36.036]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:36.036]                       search = base::search(), system = base::Sys.info())
[17:46:36.036]                   }
[17:46:36.036]                   ...future.conditions[[length(...future.conditions) + 
[17:46:36.036]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:36.036]                     cond$call), session = sessionInformation(), 
[17:46:36.036]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:36.036]                   signalCondition(cond)
[17:46:36.036]                 }
[17:46:36.036]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:36.036]                 "immediateCondition"))) {
[17:46:36.036]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:36.036]                   ...future.conditions[[length(...future.conditions) + 
[17:46:36.036]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:36.036]                   if (TRUE && !signal) {
[17:46:36.036]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:36.036]                     {
[17:46:36.036]                       inherits <- base::inherits
[17:46:36.036]                       invokeRestart <- base::invokeRestart
[17:46:36.036]                       is.null <- base::is.null
[17:46:36.036]                       muffled <- FALSE
[17:46:36.036]                       if (inherits(cond, "message")) {
[17:46:36.036]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:36.036]                         if (muffled) 
[17:46:36.036]                           invokeRestart("muffleMessage")
[17:46:36.036]                       }
[17:46:36.036]                       else if (inherits(cond, "warning")) {
[17:46:36.036]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:36.036]                         if (muffled) 
[17:46:36.036]                           invokeRestart("muffleWarning")
[17:46:36.036]                       }
[17:46:36.036]                       else if (inherits(cond, "condition")) {
[17:46:36.036]                         if (!is.null(pattern)) {
[17:46:36.036]                           computeRestarts <- base::computeRestarts
[17:46:36.036]                           grepl <- base::grepl
[17:46:36.036]                           restarts <- computeRestarts(cond)
[17:46:36.036]                           for (restart in restarts) {
[17:46:36.036]                             name <- restart$name
[17:46:36.036]                             if (is.null(name)) 
[17:46:36.036]                               next
[17:46:36.036]                             if (!grepl(pattern, name)) 
[17:46:36.036]                               next
[17:46:36.036]                             invokeRestart(restart)
[17:46:36.036]                             muffled <- TRUE
[17:46:36.036]                             break
[17:46:36.036]                           }
[17:46:36.036]                         }
[17:46:36.036]                       }
[17:46:36.036]                       invisible(muffled)
[17:46:36.036]                     }
[17:46:36.036]                     muffleCondition(cond, pattern = "^muffle")
[17:46:36.036]                   }
[17:46:36.036]                 }
[17:46:36.036]                 else {
[17:46:36.036]                   if (TRUE) {
[17:46:36.036]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:36.036]                     {
[17:46:36.036]                       inherits <- base::inherits
[17:46:36.036]                       invokeRestart <- base::invokeRestart
[17:46:36.036]                       is.null <- base::is.null
[17:46:36.036]                       muffled <- FALSE
[17:46:36.036]                       if (inherits(cond, "message")) {
[17:46:36.036]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:36.036]                         if (muffled) 
[17:46:36.036]                           invokeRestart("muffleMessage")
[17:46:36.036]                       }
[17:46:36.036]                       else if (inherits(cond, "warning")) {
[17:46:36.036]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:36.036]                         if (muffled) 
[17:46:36.036]                           invokeRestart("muffleWarning")
[17:46:36.036]                       }
[17:46:36.036]                       else if (inherits(cond, "condition")) {
[17:46:36.036]                         if (!is.null(pattern)) {
[17:46:36.036]                           computeRestarts <- base::computeRestarts
[17:46:36.036]                           grepl <- base::grepl
[17:46:36.036]                           restarts <- computeRestarts(cond)
[17:46:36.036]                           for (restart in restarts) {
[17:46:36.036]                             name <- restart$name
[17:46:36.036]                             if (is.null(name)) 
[17:46:36.036]                               next
[17:46:36.036]                             if (!grepl(pattern, name)) 
[17:46:36.036]                               next
[17:46:36.036]                             invokeRestart(restart)
[17:46:36.036]                             muffled <- TRUE
[17:46:36.036]                             break
[17:46:36.036]                           }
[17:46:36.036]                         }
[17:46:36.036]                       }
[17:46:36.036]                       invisible(muffled)
[17:46:36.036]                     }
[17:46:36.036]                     muffleCondition(cond, pattern = "^muffle")
[17:46:36.036]                   }
[17:46:36.036]                 }
[17:46:36.036]             }
[17:46:36.036]         }))
[17:46:36.036]     }, error = function(ex) {
[17:46:36.036]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:36.036]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:36.036]                 ...future.rng), started = ...future.startTime, 
[17:46:36.036]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:36.036]             version = "1.8"), class = "FutureResult")
[17:46:36.036]     }, finally = {
[17:46:36.036]         if (!identical(...future.workdir, getwd())) 
[17:46:36.036]             setwd(...future.workdir)
[17:46:36.036]         {
[17:46:36.036]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:36.036]                 ...future.oldOptions$nwarnings <- NULL
[17:46:36.036]             }
[17:46:36.036]             base::options(...future.oldOptions)
[17:46:36.036]             if (.Platform$OS.type == "windows") {
[17:46:36.036]                 old_names <- names(...future.oldEnvVars)
[17:46:36.036]                 envs <- base::Sys.getenv()
[17:46:36.036]                 names <- names(envs)
[17:46:36.036]                 common <- intersect(names, old_names)
[17:46:36.036]                 added <- setdiff(names, old_names)
[17:46:36.036]                 removed <- setdiff(old_names, names)
[17:46:36.036]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:36.036]                   envs[common]]
[17:46:36.036]                 NAMES <- toupper(changed)
[17:46:36.036]                 args <- list()
[17:46:36.036]                 for (kk in seq_along(NAMES)) {
[17:46:36.036]                   name <- changed[[kk]]
[17:46:36.036]                   NAME <- NAMES[[kk]]
[17:46:36.036]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.036]                     next
[17:46:36.036]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:36.036]                 }
[17:46:36.036]                 NAMES <- toupper(added)
[17:46:36.036]                 for (kk in seq_along(NAMES)) {
[17:46:36.036]                   name <- added[[kk]]
[17:46:36.036]                   NAME <- NAMES[[kk]]
[17:46:36.036]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.036]                     next
[17:46:36.036]                   args[[name]] <- ""
[17:46:36.036]                 }
[17:46:36.036]                 NAMES <- toupper(removed)
[17:46:36.036]                 for (kk in seq_along(NAMES)) {
[17:46:36.036]                   name <- removed[[kk]]
[17:46:36.036]                   NAME <- NAMES[[kk]]
[17:46:36.036]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:36.036]                     next
[17:46:36.036]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:36.036]                 }
[17:46:36.036]                 if (length(args) > 0) 
[17:46:36.036]                   base::do.call(base::Sys.setenv, args = args)
[17:46:36.036]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:36.036]             }
[17:46:36.036]             else {
[17:46:36.036]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:36.036]             }
[17:46:36.036]             {
[17:46:36.036]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:36.036]                   0L) {
[17:46:36.036]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:36.036]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:36.036]                   base::options(opts)
[17:46:36.036]                 }
[17:46:36.036]                 {
[17:46:36.036]                   {
[17:46:36.036]                     NULL
[17:46:36.036]                     RNGkind("Mersenne-Twister")
[17:46:36.036]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:36.036]                       inherits = FALSE)
[17:46:36.036]                   }
[17:46:36.036]                   options(future.plan = NULL)
[17:46:36.036]                   if (is.na(NA_character_)) 
[17:46:36.036]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:36.036]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:36.036]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:36.036]                     .init = FALSE)
[17:46:36.036]                 }
[17:46:36.036]             }
[17:46:36.036]         }
[17:46:36.036]     })
[17:46:36.036]     if (TRUE) {
[17:46:36.036]         base::sink(type = "output", split = FALSE)
[17:46:36.036]         if (TRUE) {
[17:46:36.036]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:36.036]         }
[17:46:36.036]         else {
[17:46:36.036]             ...future.result["stdout"] <- base::list(NULL)
[17:46:36.036]         }
[17:46:36.036]         base::close(...future.stdout)
[17:46:36.036]         ...future.stdout <- NULL
[17:46:36.036]     }
[17:46:36.036]     ...future.result$conditions <- ...future.conditions
[17:46:36.036]     ...future.result$finished <- base::Sys.time()
[17:46:36.036]     ...future.result
[17:46:36.036] }
[17:46:36.038] assign_globals() ...
[17:46:36.038] List of 2
[17:46:36.038]  $ rr: int 3
[17:46:36.038]  $ cc: int 2
[17:46:36.038]  - attr(*, "where")=List of 2
[17:46:36.038]   ..$ rr:<environment: R_EmptyEnv> 
[17:46:36.038]   ..$ cc:<environment: R_EmptyEnv> 
[17:46:36.038]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:36.038]  - attr(*, "resolved")= logi FALSE
[17:46:36.038]  - attr(*, "total_size")= num 112
[17:46:36.038]  - attr(*, "already-done")= logi TRUE
[17:46:36.040] - copied ‘rr’ to environment
[17:46:36.040] - copied ‘cc’ to environment
[17:46:36.041] assign_globals() ... done
[17:46:36.041] plan(): Setting new future strategy stack:
[17:46:36.041] List of future strategies:
[17:46:36.041] 1. sequential:
[17:46:36.041]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.041]    - tweaked: FALSE
[17:46:36.041]    - call: NULL
[17:46:36.041] plan(): nbrOfWorkers() = 1
[17:46:36.042] plan(): Setting new future strategy stack:
[17:46:36.042] List of future strategies:
[17:46:36.042] 1. sequential:
[17:46:36.042]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.042]    - tweaked: FALSE
[17:46:36.042]    - call: future::plan("sequential")
[17:46:36.042] plan(): nbrOfWorkers() = 1
[17:46:36.043] SequentialFuture started (and completed)
[17:46:36.043] - Launch lazy future ... done
[17:46:36.043] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[17:46:36.044] plan(): Setting new future strategy stack:
[17:46:36.044] List of future strategies:
[17:46:36.044] 1. FutureStrategy:
[17:46:36.044]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:36.044]    - tweaked: FALSE
[17:46:36.044]    - call: future::plan(oplan)
[17:46:36.054] plan(): nbrOfWorkers() = 1
> 
