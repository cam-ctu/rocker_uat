
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:58.022] plan(): Setting new future strategy stack:
[18:03:58.023] List of future strategies:
[18:03:58.023] 1. sequential:
[18:03:58.023]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.023]    - tweaked: FALSE
[18:03:58.023]    - call: future::plan("sequential")
[18:03:58.047] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[18:03:58.076] getGlobalsAndPackages() ...
[18:03:58.076] Searching for globals...
[18:03:58.082] - globals found: [1] ‘{’
[18:03:58.082] Searching for globals ... DONE
[18:03:58.082] Resolving globals: FALSE
[18:03:58.083] 
[18:03:58.083] 
[18:03:58.083] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[18:03:58.085] getGlobalsAndPackages() ...
[18:03:58.085] Searching for globals...
[18:03:58.086] - globals found: [1] ‘{’
[18:03:58.087] Searching for globals ... DONE
[18:03:58.087] Resolving globals: FALSE
[18:03:58.087] 
[18:03:58.087] 
[18:03:58.088] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[18:03:58.089] getGlobalsAndPackages() ...
[18:03:58.089] Searching for globals...
[18:03:58.090] - globals found: [1] ‘{’
[18:03:58.090] Searching for globals ... DONE
[18:03:58.090] Resolving globals: FALSE
[18:03:58.091] 
[18:03:58.091] 
[18:03:58.091] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[18:03:58.093] getGlobalsAndPackages() ...
[18:03:58.093] Searching for globals...
[18:03:58.094] - globals found: [1] ‘{’
[18:03:58.094] Searching for globals ... DONE
[18:03:58.095] Resolving globals: FALSE
[18:03:58.095] 
[18:03:58.095] 
[18:03:58.095] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[18:03:58.097] run() for ‘Future’ ...
[18:03:58.097] - state: ‘created’
[18:03:58.098] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.098] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.098] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.099]   - Field: ‘label’
[18:03:58.099]   - Field: ‘local’
[18:03:58.099]   - Field: ‘owner’
[18:03:58.099]   - Field: ‘envir’
[18:03:58.099]   - Field: ‘packages’
[18:03:58.100]   - Field: ‘gc’
[18:03:58.100]   - Field: ‘conditions’
[18:03:58.100]   - Field: ‘expr’
[18:03:58.100]   - Field: ‘uuid’
[18:03:58.100]   - Field: ‘seed’
[18:03:58.101]   - Field: ‘version’
[18:03:58.101]   - Field: ‘result’
[18:03:58.101]   - Field: ‘asynchronous’
[18:03:58.101]   - Field: ‘calls’
[18:03:58.101]   - Field: ‘globals’
[18:03:58.102]   - Field: ‘stdout’
[18:03:58.102]   - Field: ‘earlySignal’
[18:03:58.102]   - Field: ‘lazy’
[18:03:58.102]   - Field: ‘state’
[18:03:58.102] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.103] - Launch lazy future ...
[18:03:58.104] Packages needed by the future expression (n = 0): <none>
[18:03:58.104] Packages needed by future strategies (n = 0): <none>
[18:03:58.106] {
[18:03:58.106]     {
[18:03:58.106]         {
[18:03:58.106]             ...future.startTime <- base::Sys.time()
[18:03:58.106]             {
[18:03:58.106]                 {
[18:03:58.106]                   {
[18:03:58.106]                     base::local({
[18:03:58.106]                       has_future <- base::requireNamespace("future", 
[18:03:58.106]                         quietly = TRUE)
[18:03:58.106]                       if (has_future) {
[18:03:58.106]                         ns <- base::getNamespace("future")
[18:03:58.106]                         version <- ns[[".package"]][["version"]]
[18:03:58.106]                         if (is.null(version)) 
[18:03:58.106]                           version <- utils::packageVersion("future")
[18:03:58.106]                       }
[18:03:58.106]                       else {
[18:03:58.106]                         version <- NULL
[18:03:58.106]                       }
[18:03:58.106]                       if (!has_future || version < "1.8.0") {
[18:03:58.106]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.106]                           "", base::R.version$version.string), 
[18:03:58.106]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.106]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.106]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.106]                             "release", "version")], collapse = " "), 
[18:03:58.106]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.106]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.106]                           info)
[18:03:58.106]                         info <- base::paste(info, collapse = "; ")
[18:03:58.106]                         if (!has_future) {
[18:03:58.106]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.106]                             info)
[18:03:58.106]                         }
[18:03:58.106]                         else {
[18:03:58.106]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.106]                             info, version)
[18:03:58.106]                         }
[18:03:58.106]                         base::stop(msg)
[18:03:58.106]                       }
[18:03:58.106]                     })
[18:03:58.106]                   }
[18:03:58.106]                   ...future.strategy.old <- future::plan("list")
[18:03:58.106]                   options(future.plan = NULL)
[18:03:58.106]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.106]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.106]                 }
[18:03:58.106]                 ...future.workdir <- getwd()
[18:03:58.106]             }
[18:03:58.106]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.106]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.106]         }
[18:03:58.106]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.106]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.106]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.106]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.106]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.106]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.106]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.106]             base::names(...future.oldOptions))
[18:03:58.106]     }
[18:03:58.106]     if (FALSE) {
[18:03:58.106]     }
[18:03:58.106]     else {
[18:03:58.106]         if (TRUE) {
[18:03:58.106]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.106]                 open = "w")
[18:03:58.106]         }
[18:03:58.106]         else {
[18:03:58.106]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.106]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.106]         }
[18:03:58.106]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.106]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.106]             base::sink(type = "output", split = FALSE)
[18:03:58.106]             base::close(...future.stdout)
[18:03:58.106]         }, add = TRUE)
[18:03:58.106]     }
[18:03:58.106]     ...future.frame <- base::sys.nframe()
[18:03:58.106]     ...future.conditions <- base::list()
[18:03:58.106]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.106]     if (FALSE) {
[18:03:58.106]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.106]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.106]     }
[18:03:58.106]     ...future.result <- base::tryCatch({
[18:03:58.106]         base::withCallingHandlers({
[18:03:58.106]             ...future.value <- base::withVisible(base::local({
[18:03:58.106]                 2
[18:03:58.106]             }))
[18:03:58.106]             future::FutureResult(value = ...future.value$value, 
[18:03:58.106]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.106]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.106]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.106]                     ...future.globalenv.names))
[18:03:58.106]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.106]         }, condition = base::local({
[18:03:58.106]             c <- base::c
[18:03:58.106]             inherits <- base::inherits
[18:03:58.106]             invokeRestart <- base::invokeRestart
[18:03:58.106]             length <- base::length
[18:03:58.106]             list <- base::list
[18:03:58.106]             seq.int <- base::seq.int
[18:03:58.106]             signalCondition <- base::signalCondition
[18:03:58.106]             sys.calls <- base::sys.calls
[18:03:58.106]             `[[` <- base::`[[`
[18:03:58.106]             `+` <- base::`+`
[18:03:58.106]             `<<-` <- base::`<<-`
[18:03:58.106]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.106]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.106]                   3L)]
[18:03:58.106]             }
[18:03:58.106]             function(cond) {
[18:03:58.106]                 is_error <- inherits(cond, "error")
[18:03:58.106]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.106]                   NULL)
[18:03:58.106]                 if (is_error) {
[18:03:58.106]                   sessionInformation <- function() {
[18:03:58.106]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.106]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.106]                       search = base::search(), system = base::Sys.info())
[18:03:58.106]                   }
[18:03:58.106]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.106]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.106]                     cond$call), session = sessionInformation(), 
[18:03:58.106]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.106]                   signalCondition(cond)
[18:03:58.106]                 }
[18:03:58.106]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.106]                 "immediateCondition"))) {
[18:03:58.106]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.106]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.106]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.106]                   if (TRUE && !signal) {
[18:03:58.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.106]                     {
[18:03:58.106]                       inherits <- base::inherits
[18:03:58.106]                       invokeRestart <- base::invokeRestart
[18:03:58.106]                       is.null <- base::is.null
[18:03:58.106]                       muffled <- FALSE
[18:03:58.106]                       if (inherits(cond, "message")) {
[18:03:58.106]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.106]                         if (muffled) 
[18:03:58.106]                           invokeRestart("muffleMessage")
[18:03:58.106]                       }
[18:03:58.106]                       else if (inherits(cond, "warning")) {
[18:03:58.106]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.106]                         if (muffled) 
[18:03:58.106]                           invokeRestart("muffleWarning")
[18:03:58.106]                       }
[18:03:58.106]                       else if (inherits(cond, "condition")) {
[18:03:58.106]                         if (!is.null(pattern)) {
[18:03:58.106]                           computeRestarts <- base::computeRestarts
[18:03:58.106]                           grepl <- base::grepl
[18:03:58.106]                           restarts <- computeRestarts(cond)
[18:03:58.106]                           for (restart in restarts) {
[18:03:58.106]                             name <- restart$name
[18:03:58.106]                             if (is.null(name)) 
[18:03:58.106]                               next
[18:03:58.106]                             if (!grepl(pattern, name)) 
[18:03:58.106]                               next
[18:03:58.106]                             invokeRestart(restart)
[18:03:58.106]                             muffled <- TRUE
[18:03:58.106]                             break
[18:03:58.106]                           }
[18:03:58.106]                         }
[18:03:58.106]                       }
[18:03:58.106]                       invisible(muffled)
[18:03:58.106]                     }
[18:03:58.106]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.106]                   }
[18:03:58.106]                 }
[18:03:58.106]                 else {
[18:03:58.106]                   if (TRUE) {
[18:03:58.106]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.106]                     {
[18:03:58.106]                       inherits <- base::inherits
[18:03:58.106]                       invokeRestart <- base::invokeRestart
[18:03:58.106]                       is.null <- base::is.null
[18:03:58.106]                       muffled <- FALSE
[18:03:58.106]                       if (inherits(cond, "message")) {
[18:03:58.106]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.106]                         if (muffled) 
[18:03:58.106]                           invokeRestart("muffleMessage")
[18:03:58.106]                       }
[18:03:58.106]                       else if (inherits(cond, "warning")) {
[18:03:58.106]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.106]                         if (muffled) 
[18:03:58.106]                           invokeRestart("muffleWarning")
[18:03:58.106]                       }
[18:03:58.106]                       else if (inherits(cond, "condition")) {
[18:03:58.106]                         if (!is.null(pattern)) {
[18:03:58.106]                           computeRestarts <- base::computeRestarts
[18:03:58.106]                           grepl <- base::grepl
[18:03:58.106]                           restarts <- computeRestarts(cond)
[18:03:58.106]                           for (restart in restarts) {
[18:03:58.106]                             name <- restart$name
[18:03:58.106]                             if (is.null(name)) 
[18:03:58.106]                               next
[18:03:58.106]                             if (!grepl(pattern, name)) 
[18:03:58.106]                               next
[18:03:58.106]                             invokeRestart(restart)
[18:03:58.106]                             muffled <- TRUE
[18:03:58.106]                             break
[18:03:58.106]                           }
[18:03:58.106]                         }
[18:03:58.106]                       }
[18:03:58.106]                       invisible(muffled)
[18:03:58.106]                     }
[18:03:58.106]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.106]                   }
[18:03:58.106]                 }
[18:03:58.106]             }
[18:03:58.106]         }))
[18:03:58.106]     }, error = function(ex) {
[18:03:58.106]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.106]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.106]                 ...future.rng), started = ...future.startTime, 
[18:03:58.106]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.106]             version = "1.8"), class = "FutureResult")
[18:03:58.106]     }, finally = {
[18:03:58.106]         if (!identical(...future.workdir, getwd())) 
[18:03:58.106]             setwd(...future.workdir)
[18:03:58.106]         {
[18:03:58.106]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.106]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.106]             }
[18:03:58.106]             base::options(...future.oldOptions)
[18:03:58.106]             if (.Platform$OS.type == "windows") {
[18:03:58.106]                 old_names <- names(...future.oldEnvVars)
[18:03:58.106]                 envs <- base::Sys.getenv()
[18:03:58.106]                 names <- names(envs)
[18:03:58.106]                 common <- intersect(names, old_names)
[18:03:58.106]                 added <- setdiff(names, old_names)
[18:03:58.106]                 removed <- setdiff(old_names, names)
[18:03:58.106]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.106]                   envs[common]]
[18:03:58.106]                 NAMES <- toupper(changed)
[18:03:58.106]                 args <- list()
[18:03:58.106]                 for (kk in seq_along(NAMES)) {
[18:03:58.106]                   name <- changed[[kk]]
[18:03:58.106]                   NAME <- NAMES[[kk]]
[18:03:58.106]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.106]                     next
[18:03:58.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.106]                 }
[18:03:58.106]                 NAMES <- toupper(added)
[18:03:58.106]                 for (kk in seq_along(NAMES)) {
[18:03:58.106]                   name <- added[[kk]]
[18:03:58.106]                   NAME <- NAMES[[kk]]
[18:03:58.106]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.106]                     next
[18:03:58.106]                   args[[name]] <- ""
[18:03:58.106]                 }
[18:03:58.106]                 NAMES <- toupper(removed)
[18:03:58.106]                 for (kk in seq_along(NAMES)) {
[18:03:58.106]                   name <- removed[[kk]]
[18:03:58.106]                   NAME <- NAMES[[kk]]
[18:03:58.106]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.106]                     next
[18:03:58.106]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.106]                 }
[18:03:58.106]                 if (length(args) > 0) 
[18:03:58.106]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.106]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.106]             }
[18:03:58.106]             else {
[18:03:58.106]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.106]             }
[18:03:58.106]             {
[18:03:58.106]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.106]                   0L) {
[18:03:58.106]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.106]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.106]                   base::options(opts)
[18:03:58.106]                 }
[18:03:58.106]                 {
[18:03:58.106]                   {
[18:03:58.106]                     NULL
[18:03:58.106]                     RNGkind("Mersenne-Twister")
[18:03:58.106]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.106]                       inherits = FALSE)
[18:03:58.106]                   }
[18:03:58.106]                   options(future.plan = NULL)
[18:03:58.106]                   if (is.na(NA_character_)) 
[18:03:58.106]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.106]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.106]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.106]                     .init = FALSE)
[18:03:58.106]                 }
[18:03:58.106]             }
[18:03:58.106]         }
[18:03:58.106]     })
[18:03:58.106]     if (TRUE) {
[18:03:58.106]         base::sink(type = "output", split = FALSE)
[18:03:58.106]         if (TRUE) {
[18:03:58.106]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.106]         }
[18:03:58.106]         else {
[18:03:58.106]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.106]         }
[18:03:58.106]         base::close(...future.stdout)
[18:03:58.106]         ...future.stdout <- NULL
[18:03:58.106]     }
[18:03:58.106]     ...future.result$conditions <- ...future.conditions
[18:03:58.106]     ...future.result$finished <- base::Sys.time()
[18:03:58.106]     ...future.result
[18:03:58.106] }
[18:03:58.109] plan(): Setting new future strategy stack:
[18:03:58.109] List of future strategies:
[18:03:58.109] 1. sequential:
[18:03:58.109]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.109]    - tweaked: FALSE
[18:03:58.109]    - call: NULL
[18:03:58.110] plan(): nbrOfWorkers() = 1
[18:03:58.112] plan(): Setting new future strategy stack:
[18:03:58.113] List of future strategies:
[18:03:58.113] 1. sequential:
[18:03:58.113]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.113]    - tweaked: FALSE
[18:03:58.113]    - call: future::plan("sequential")
[18:03:58.114] plan(): nbrOfWorkers() = 1
[18:03:58.114] SequentialFuture started (and completed)
[18:03:58.115] - Launch lazy future ... done
[18:03:58.115] run() for ‘SequentialFuture’ ... done
[18:03:58.115] run() for ‘Future’ ...
[18:03:58.116] - state: ‘created’
[18:03:58.116] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.116] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.117] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.117]   - Field: ‘label’
[18:03:58.117]   - Field: ‘local’
[18:03:58.117]   - Field: ‘owner’
[18:03:58.118]   - Field: ‘envir’
[18:03:58.118]   - Field: ‘packages’
[18:03:58.118]   - Field: ‘gc’
[18:03:58.118]   - Field: ‘conditions’
[18:03:58.118]   - Field: ‘expr’
[18:03:58.118]   - Field: ‘uuid’
[18:03:58.119]   - Field: ‘seed’
[18:03:58.119]   - Field: ‘version’
[18:03:58.119]   - Field: ‘result’
[18:03:58.119]   - Field: ‘asynchronous’
[18:03:58.119]   - Field: ‘calls’
[18:03:58.120]   - Field: ‘globals’
[18:03:58.120]   - Field: ‘stdout’
[18:03:58.120]   - Field: ‘earlySignal’
[18:03:58.120]   - Field: ‘lazy’
[18:03:58.120]   - Field: ‘state’
[18:03:58.121] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.121] - Launch lazy future ...
[18:03:58.121] Packages needed by the future expression (n = 0): <none>
[18:03:58.122] Packages needed by future strategies (n = 0): <none>
[18:03:58.122] {
[18:03:58.122]     {
[18:03:58.122]         {
[18:03:58.122]             ...future.startTime <- base::Sys.time()
[18:03:58.122]             {
[18:03:58.122]                 {
[18:03:58.122]                   {
[18:03:58.122]                     base::local({
[18:03:58.122]                       has_future <- base::requireNamespace("future", 
[18:03:58.122]                         quietly = TRUE)
[18:03:58.122]                       if (has_future) {
[18:03:58.122]                         ns <- base::getNamespace("future")
[18:03:58.122]                         version <- ns[[".package"]][["version"]]
[18:03:58.122]                         if (is.null(version)) 
[18:03:58.122]                           version <- utils::packageVersion("future")
[18:03:58.122]                       }
[18:03:58.122]                       else {
[18:03:58.122]                         version <- NULL
[18:03:58.122]                       }
[18:03:58.122]                       if (!has_future || version < "1.8.0") {
[18:03:58.122]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.122]                           "", base::R.version$version.string), 
[18:03:58.122]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.122]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.122]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.122]                             "release", "version")], collapse = " "), 
[18:03:58.122]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.122]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.122]                           info)
[18:03:58.122]                         info <- base::paste(info, collapse = "; ")
[18:03:58.122]                         if (!has_future) {
[18:03:58.122]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.122]                             info)
[18:03:58.122]                         }
[18:03:58.122]                         else {
[18:03:58.122]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.122]                             info, version)
[18:03:58.122]                         }
[18:03:58.122]                         base::stop(msg)
[18:03:58.122]                       }
[18:03:58.122]                     })
[18:03:58.122]                   }
[18:03:58.122]                   ...future.strategy.old <- future::plan("list")
[18:03:58.122]                   options(future.plan = NULL)
[18:03:58.122]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.122]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.122]                 }
[18:03:58.122]                 ...future.workdir <- getwd()
[18:03:58.122]             }
[18:03:58.122]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.122]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.122]         }
[18:03:58.122]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.122]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.122]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.122]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.122]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.122]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.122]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.122]             base::names(...future.oldOptions))
[18:03:58.122]     }
[18:03:58.122]     if (FALSE) {
[18:03:58.122]     }
[18:03:58.122]     else {
[18:03:58.122]         if (TRUE) {
[18:03:58.122]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.122]                 open = "w")
[18:03:58.122]         }
[18:03:58.122]         else {
[18:03:58.122]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.122]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.122]         }
[18:03:58.122]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.122]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.122]             base::sink(type = "output", split = FALSE)
[18:03:58.122]             base::close(...future.stdout)
[18:03:58.122]         }, add = TRUE)
[18:03:58.122]     }
[18:03:58.122]     ...future.frame <- base::sys.nframe()
[18:03:58.122]     ...future.conditions <- base::list()
[18:03:58.122]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.122]     if (FALSE) {
[18:03:58.122]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.122]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.122]     }
[18:03:58.122]     ...future.result <- base::tryCatch({
[18:03:58.122]         base::withCallingHandlers({
[18:03:58.122]             ...future.value <- base::withVisible(base::local({
[18:03:58.122]                 "async!"
[18:03:58.122]             }))
[18:03:58.122]             future::FutureResult(value = ...future.value$value, 
[18:03:58.122]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.122]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.122]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.122]                     ...future.globalenv.names))
[18:03:58.122]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.122]         }, condition = base::local({
[18:03:58.122]             c <- base::c
[18:03:58.122]             inherits <- base::inherits
[18:03:58.122]             invokeRestart <- base::invokeRestart
[18:03:58.122]             length <- base::length
[18:03:58.122]             list <- base::list
[18:03:58.122]             seq.int <- base::seq.int
[18:03:58.122]             signalCondition <- base::signalCondition
[18:03:58.122]             sys.calls <- base::sys.calls
[18:03:58.122]             `[[` <- base::`[[`
[18:03:58.122]             `+` <- base::`+`
[18:03:58.122]             `<<-` <- base::`<<-`
[18:03:58.122]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.122]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.122]                   3L)]
[18:03:58.122]             }
[18:03:58.122]             function(cond) {
[18:03:58.122]                 is_error <- inherits(cond, "error")
[18:03:58.122]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.122]                   NULL)
[18:03:58.122]                 if (is_error) {
[18:03:58.122]                   sessionInformation <- function() {
[18:03:58.122]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.122]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.122]                       search = base::search(), system = base::Sys.info())
[18:03:58.122]                   }
[18:03:58.122]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.122]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.122]                     cond$call), session = sessionInformation(), 
[18:03:58.122]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.122]                   signalCondition(cond)
[18:03:58.122]                 }
[18:03:58.122]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.122]                 "immediateCondition"))) {
[18:03:58.122]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.122]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.122]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.122]                   if (TRUE && !signal) {
[18:03:58.122]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.122]                     {
[18:03:58.122]                       inherits <- base::inherits
[18:03:58.122]                       invokeRestart <- base::invokeRestart
[18:03:58.122]                       is.null <- base::is.null
[18:03:58.122]                       muffled <- FALSE
[18:03:58.122]                       if (inherits(cond, "message")) {
[18:03:58.122]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.122]                         if (muffled) 
[18:03:58.122]                           invokeRestart("muffleMessage")
[18:03:58.122]                       }
[18:03:58.122]                       else if (inherits(cond, "warning")) {
[18:03:58.122]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.122]                         if (muffled) 
[18:03:58.122]                           invokeRestart("muffleWarning")
[18:03:58.122]                       }
[18:03:58.122]                       else if (inherits(cond, "condition")) {
[18:03:58.122]                         if (!is.null(pattern)) {
[18:03:58.122]                           computeRestarts <- base::computeRestarts
[18:03:58.122]                           grepl <- base::grepl
[18:03:58.122]                           restarts <- computeRestarts(cond)
[18:03:58.122]                           for (restart in restarts) {
[18:03:58.122]                             name <- restart$name
[18:03:58.122]                             if (is.null(name)) 
[18:03:58.122]                               next
[18:03:58.122]                             if (!grepl(pattern, name)) 
[18:03:58.122]                               next
[18:03:58.122]                             invokeRestart(restart)
[18:03:58.122]                             muffled <- TRUE
[18:03:58.122]                             break
[18:03:58.122]                           }
[18:03:58.122]                         }
[18:03:58.122]                       }
[18:03:58.122]                       invisible(muffled)
[18:03:58.122]                     }
[18:03:58.122]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.122]                   }
[18:03:58.122]                 }
[18:03:58.122]                 else {
[18:03:58.122]                   if (TRUE) {
[18:03:58.122]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.122]                     {
[18:03:58.122]                       inherits <- base::inherits
[18:03:58.122]                       invokeRestart <- base::invokeRestart
[18:03:58.122]                       is.null <- base::is.null
[18:03:58.122]                       muffled <- FALSE
[18:03:58.122]                       if (inherits(cond, "message")) {
[18:03:58.122]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.122]                         if (muffled) 
[18:03:58.122]                           invokeRestart("muffleMessage")
[18:03:58.122]                       }
[18:03:58.122]                       else if (inherits(cond, "warning")) {
[18:03:58.122]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.122]                         if (muffled) 
[18:03:58.122]                           invokeRestart("muffleWarning")
[18:03:58.122]                       }
[18:03:58.122]                       else if (inherits(cond, "condition")) {
[18:03:58.122]                         if (!is.null(pattern)) {
[18:03:58.122]                           computeRestarts <- base::computeRestarts
[18:03:58.122]                           grepl <- base::grepl
[18:03:58.122]                           restarts <- computeRestarts(cond)
[18:03:58.122]                           for (restart in restarts) {
[18:03:58.122]                             name <- restart$name
[18:03:58.122]                             if (is.null(name)) 
[18:03:58.122]                               next
[18:03:58.122]                             if (!grepl(pattern, name)) 
[18:03:58.122]                               next
[18:03:58.122]                             invokeRestart(restart)
[18:03:58.122]                             muffled <- TRUE
[18:03:58.122]                             break
[18:03:58.122]                           }
[18:03:58.122]                         }
[18:03:58.122]                       }
[18:03:58.122]                       invisible(muffled)
[18:03:58.122]                     }
[18:03:58.122]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.122]                   }
[18:03:58.122]                 }
[18:03:58.122]             }
[18:03:58.122]         }))
[18:03:58.122]     }, error = function(ex) {
[18:03:58.122]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.122]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.122]                 ...future.rng), started = ...future.startTime, 
[18:03:58.122]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.122]             version = "1.8"), class = "FutureResult")
[18:03:58.122]     }, finally = {
[18:03:58.122]         if (!identical(...future.workdir, getwd())) 
[18:03:58.122]             setwd(...future.workdir)
[18:03:58.122]         {
[18:03:58.122]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.122]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.122]             }
[18:03:58.122]             base::options(...future.oldOptions)
[18:03:58.122]             if (.Platform$OS.type == "windows") {
[18:03:58.122]                 old_names <- names(...future.oldEnvVars)
[18:03:58.122]                 envs <- base::Sys.getenv()
[18:03:58.122]                 names <- names(envs)
[18:03:58.122]                 common <- intersect(names, old_names)
[18:03:58.122]                 added <- setdiff(names, old_names)
[18:03:58.122]                 removed <- setdiff(old_names, names)
[18:03:58.122]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.122]                   envs[common]]
[18:03:58.122]                 NAMES <- toupper(changed)
[18:03:58.122]                 args <- list()
[18:03:58.122]                 for (kk in seq_along(NAMES)) {
[18:03:58.122]                   name <- changed[[kk]]
[18:03:58.122]                   NAME <- NAMES[[kk]]
[18:03:58.122]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.122]                     next
[18:03:58.122]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.122]                 }
[18:03:58.122]                 NAMES <- toupper(added)
[18:03:58.122]                 for (kk in seq_along(NAMES)) {
[18:03:58.122]                   name <- added[[kk]]
[18:03:58.122]                   NAME <- NAMES[[kk]]
[18:03:58.122]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.122]                     next
[18:03:58.122]                   args[[name]] <- ""
[18:03:58.122]                 }
[18:03:58.122]                 NAMES <- toupper(removed)
[18:03:58.122]                 for (kk in seq_along(NAMES)) {
[18:03:58.122]                   name <- removed[[kk]]
[18:03:58.122]                   NAME <- NAMES[[kk]]
[18:03:58.122]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.122]                     next
[18:03:58.122]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.122]                 }
[18:03:58.122]                 if (length(args) > 0) 
[18:03:58.122]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.122]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.122]             }
[18:03:58.122]             else {
[18:03:58.122]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.122]             }
[18:03:58.122]             {
[18:03:58.122]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.122]                   0L) {
[18:03:58.122]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.122]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.122]                   base::options(opts)
[18:03:58.122]                 }
[18:03:58.122]                 {
[18:03:58.122]                   {
[18:03:58.122]                     NULL
[18:03:58.122]                     RNGkind("Mersenne-Twister")
[18:03:58.122]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.122]                       inherits = FALSE)
[18:03:58.122]                   }
[18:03:58.122]                   options(future.plan = NULL)
[18:03:58.122]                   if (is.na(NA_character_)) 
[18:03:58.122]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.122]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.122]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.122]                     .init = FALSE)
[18:03:58.122]                 }
[18:03:58.122]             }
[18:03:58.122]         }
[18:03:58.122]     })
[18:03:58.122]     if (TRUE) {
[18:03:58.122]         base::sink(type = "output", split = FALSE)
[18:03:58.122]         if (TRUE) {
[18:03:58.122]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.122]         }
[18:03:58.122]         else {
[18:03:58.122]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.122]         }
[18:03:58.122]         base::close(...future.stdout)
[18:03:58.122]         ...future.stdout <- NULL
[18:03:58.122]     }
[18:03:58.122]     ...future.result$conditions <- ...future.conditions
[18:03:58.122]     ...future.result$finished <- base::Sys.time()
[18:03:58.122]     ...future.result
[18:03:58.122] }
[18:03:58.126] plan(): Setting new future strategy stack:
[18:03:58.127] List of future strategies:
[18:03:58.127] 1. sequential:
[18:03:58.127]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.127]    - tweaked: FALSE
[18:03:58.127]    - call: NULL
[18:03:58.128] plan(): nbrOfWorkers() = 1
[18:03:58.129] plan(): Setting new future strategy stack:
[18:03:58.130] List of future strategies:
[18:03:58.130] 1. sequential:
[18:03:58.130]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.130]    - tweaked: FALSE
[18:03:58.130]    - call: future::plan("sequential")
[18:03:58.131] plan(): nbrOfWorkers() = 1
[18:03:58.131] SequentialFuture started (and completed)
[18:03:58.131] - Launch lazy future ... done
[18:03:58.132] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[18:03:58.140] getGlobalsAndPackages() ...
[18:03:58.140] Searching for globals...
[18:03:58.141] - globals found: [1] ‘{’
[18:03:58.142] Searching for globals ... DONE
[18:03:58.142] Resolving globals: FALSE
[18:03:58.142] 
[18:03:58.143] 
[18:03:58.143] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[18:03:58.145] getGlobalsAndPackages() ...
[18:03:58.145] Searching for globals...
[18:03:58.146] - globals found: [1] ‘{’
[18:03:58.147] Searching for globals ... DONE
[18:03:58.147] Resolving globals: FALSE
[18:03:58.148] 
[18:03:58.148] 
[18:03:58.148] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[18:03:58.154] run() for ‘Future’ ...
[18:03:58.154] - state: ‘created’
[18:03:58.155] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.155] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.156] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.156]   - Field: ‘label’
[18:03:58.156]   - Field: ‘local’
[18:03:58.156]   - Field: ‘owner’
[18:03:58.156]   - Field: ‘envir’
[18:03:58.157]   - Field: ‘packages’
[18:03:58.157]   - Field: ‘gc’
[18:03:58.157]   - Field: ‘conditions’
[18:03:58.157]   - Field: ‘expr’
[18:03:58.157]   - Field: ‘uuid’
[18:03:58.158]   - Field: ‘seed’
[18:03:58.158]   - Field: ‘version’
[18:03:58.158]   - Field: ‘result’
[18:03:58.158]   - Field: ‘asynchronous’
[18:03:58.158]   - Field: ‘calls’
[18:03:58.159]   - Field: ‘globals’
[18:03:58.159]   - Field: ‘stdout’
[18:03:58.159]   - Field: ‘earlySignal’
[18:03:58.159]   - Field: ‘lazy’
[18:03:58.159]   - Field: ‘state’
[18:03:58.160] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.160] - Launch lazy future ...
[18:03:58.160] Packages needed by the future expression (n = 0): <none>
[18:03:58.160] Packages needed by future strategies (n = 0): <none>
[18:03:58.161] {
[18:03:58.161]     {
[18:03:58.161]         {
[18:03:58.161]             ...future.startTime <- base::Sys.time()
[18:03:58.161]             {
[18:03:58.161]                 {
[18:03:58.161]                   {
[18:03:58.161]                     base::local({
[18:03:58.161]                       has_future <- base::requireNamespace("future", 
[18:03:58.161]                         quietly = TRUE)
[18:03:58.161]                       if (has_future) {
[18:03:58.161]                         ns <- base::getNamespace("future")
[18:03:58.161]                         version <- ns[[".package"]][["version"]]
[18:03:58.161]                         if (is.null(version)) 
[18:03:58.161]                           version <- utils::packageVersion("future")
[18:03:58.161]                       }
[18:03:58.161]                       else {
[18:03:58.161]                         version <- NULL
[18:03:58.161]                       }
[18:03:58.161]                       if (!has_future || version < "1.8.0") {
[18:03:58.161]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.161]                           "", base::R.version$version.string), 
[18:03:58.161]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.161]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.161]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.161]                             "release", "version")], collapse = " "), 
[18:03:58.161]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.161]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.161]                           info)
[18:03:58.161]                         info <- base::paste(info, collapse = "; ")
[18:03:58.161]                         if (!has_future) {
[18:03:58.161]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.161]                             info)
[18:03:58.161]                         }
[18:03:58.161]                         else {
[18:03:58.161]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.161]                             info, version)
[18:03:58.161]                         }
[18:03:58.161]                         base::stop(msg)
[18:03:58.161]                       }
[18:03:58.161]                     })
[18:03:58.161]                   }
[18:03:58.161]                   ...future.strategy.old <- future::plan("list")
[18:03:58.161]                   options(future.plan = NULL)
[18:03:58.161]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.161]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.161]                 }
[18:03:58.161]                 ...future.workdir <- getwd()
[18:03:58.161]             }
[18:03:58.161]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.161]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.161]         }
[18:03:58.161]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.161]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.161]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.161]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.161]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.161]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.161]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.161]             base::names(...future.oldOptions))
[18:03:58.161]     }
[18:03:58.161]     if (FALSE) {
[18:03:58.161]     }
[18:03:58.161]     else {
[18:03:58.161]         if (TRUE) {
[18:03:58.161]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.161]                 open = "w")
[18:03:58.161]         }
[18:03:58.161]         else {
[18:03:58.161]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.161]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.161]         }
[18:03:58.161]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.161]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.161]             base::sink(type = "output", split = FALSE)
[18:03:58.161]             base::close(...future.stdout)
[18:03:58.161]         }, add = TRUE)
[18:03:58.161]     }
[18:03:58.161]     ...future.frame <- base::sys.nframe()
[18:03:58.161]     ...future.conditions <- base::list()
[18:03:58.161]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.161]     if (FALSE) {
[18:03:58.161]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.161]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.161]     }
[18:03:58.161]     ...future.result <- base::tryCatch({
[18:03:58.161]         base::withCallingHandlers({
[18:03:58.161]             ...future.value <- base::withVisible(base::local({
[18:03:58.161]                 1
[18:03:58.161]             }))
[18:03:58.161]             future::FutureResult(value = ...future.value$value, 
[18:03:58.161]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.161]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.161]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.161]                     ...future.globalenv.names))
[18:03:58.161]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.161]         }, condition = base::local({
[18:03:58.161]             c <- base::c
[18:03:58.161]             inherits <- base::inherits
[18:03:58.161]             invokeRestart <- base::invokeRestart
[18:03:58.161]             length <- base::length
[18:03:58.161]             list <- base::list
[18:03:58.161]             seq.int <- base::seq.int
[18:03:58.161]             signalCondition <- base::signalCondition
[18:03:58.161]             sys.calls <- base::sys.calls
[18:03:58.161]             `[[` <- base::`[[`
[18:03:58.161]             `+` <- base::`+`
[18:03:58.161]             `<<-` <- base::`<<-`
[18:03:58.161]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.161]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.161]                   3L)]
[18:03:58.161]             }
[18:03:58.161]             function(cond) {
[18:03:58.161]                 is_error <- inherits(cond, "error")
[18:03:58.161]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.161]                   NULL)
[18:03:58.161]                 if (is_error) {
[18:03:58.161]                   sessionInformation <- function() {
[18:03:58.161]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.161]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.161]                       search = base::search(), system = base::Sys.info())
[18:03:58.161]                   }
[18:03:58.161]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.161]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.161]                     cond$call), session = sessionInformation(), 
[18:03:58.161]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.161]                   signalCondition(cond)
[18:03:58.161]                 }
[18:03:58.161]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.161]                 "immediateCondition"))) {
[18:03:58.161]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.161]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.161]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.161]                   if (TRUE && !signal) {
[18:03:58.161]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.161]                     {
[18:03:58.161]                       inherits <- base::inherits
[18:03:58.161]                       invokeRestart <- base::invokeRestart
[18:03:58.161]                       is.null <- base::is.null
[18:03:58.161]                       muffled <- FALSE
[18:03:58.161]                       if (inherits(cond, "message")) {
[18:03:58.161]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.161]                         if (muffled) 
[18:03:58.161]                           invokeRestart("muffleMessage")
[18:03:58.161]                       }
[18:03:58.161]                       else if (inherits(cond, "warning")) {
[18:03:58.161]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.161]                         if (muffled) 
[18:03:58.161]                           invokeRestart("muffleWarning")
[18:03:58.161]                       }
[18:03:58.161]                       else if (inherits(cond, "condition")) {
[18:03:58.161]                         if (!is.null(pattern)) {
[18:03:58.161]                           computeRestarts <- base::computeRestarts
[18:03:58.161]                           grepl <- base::grepl
[18:03:58.161]                           restarts <- computeRestarts(cond)
[18:03:58.161]                           for (restart in restarts) {
[18:03:58.161]                             name <- restart$name
[18:03:58.161]                             if (is.null(name)) 
[18:03:58.161]                               next
[18:03:58.161]                             if (!grepl(pattern, name)) 
[18:03:58.161]                               next
[18:03:58.161]                             invokeRestart(restart)
[18:03:58.161]                             muffled <- TRUE
[18:03:58.161]                             break
[18:03:58.161]                           }
[18:03:58.161]                         }
[18:03:58.161]                       }
[18:03:58.161]                       invisible(muffled)
[18:03:58.161]                     }
[18:03:58.161]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.161]                   }
[18:03:58.161]                 }
[18:03:58.161]                 else {
[18:03:58.161]                   if (TRUE) {
[18:03:58.161]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.161]                     {
[18:03:58.161]                       inherits <- base::inherits
[18:03:58.161]                       invokeRestart <- base::invokeRestart
[18:03:58.161]                       is.null <- base::is.null
[18:03:58.161]                       muffled <- FALSE
[18:03:58.161]                       if (inherits(cond, "message")) {
[18:03:58.161]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.161]                         if (muffled) 
[18:03:58.161]                           invokeRestart("muffleMessage")
[18:03:58.161]                       }
[18:03:58.161]                       else if (inherits(cond, "warning")) {
[18:03:58.161]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.161]                         if (muffled) 
[18:03:58.161]                           invokeRestart("muffleWarning")
[18:03:58.161]                       }
[18:03:58.161]                       else if (inherits(cond, "condition")) {
[18:03:58.161]                         if (!is.null(pattern)) {
[18:03:58.161]                           computeRestarts <- base::computeRestarts
[18:03:58.161]                           grepl <- base::grepl
[18:03:58.161]                           restarts <- computeRestarts(cond)
[18:03:58.161]                           for (restart in restarts) {
[18:03:58.161]                             name <- restart$name
[18:03:58.161]                             if (is.null(name)) 
[18:03:58.161]                               next
[18:03:58.161]                             if (!grepl(pattern, name)) 
[18:03:58.161]                               next
[18:03:58.161]                             invokeRestart(restart)
[18:03:58.161]                             muffled <- TRUE
[18:03:58.161]                             break
[18:03:58.161]                           }
[18:03:58.161]                         }
[18:03:58.161]                       }
[18:03:58.161]                       invisible(muffled)
[18:03:58.161]                     }
[18:03:58.161]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.161]                   }
[18:03:58.161]                 }
[18:03:58.161]             }
[18:03:58.161]         }))
[18:03:58.161]     }, error = function(ex) {
[18:03:58.161]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.161]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.161]                 ...future.rng), started = ...future.startTime, 
[18:03:58.161]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.161]             version = "1.8"), class = "FutureResult")
[18:03:58.161]     }, finally = {
[18:03:58.161]         if (!identical(...future.workdir, getwd())) 
[18:03:58.161]             setwd(...future.workdir)
[18:03:58.161]         {
[18:03:58.161]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.161]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.161]             }
[18:03:58.161]             base::options(...future.oldOptions)
[18:03:58.161]             if (.Platform$OS.type == "windows") {
[18:03:58.161]                 old_names <- names(...future.oldEnvVars)
[18:03:58.161]                 envs <- base::Sys.getenv()
[18:03:58.161]                 names <- names(envs)
[18:03:58.161]                 common <- intersect(names, old_names)
[18:03:58.161]                 added <- setdiff(names, old_names)
[18:03:58.161]                 removed <- setdiff(old_names, names)
[18:03:58.161]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.161]                   envs[common]]
[18:03:58.161]                 NAMES <- toupper(changed)
[18:03:58.161]                 args <- list()
[18:03:58.161]                 for (kk in seq_along(NAMES)) {
[18:03:58.161]                   name <- changed[[kk]]
[18:03:58.161]                   NAME <- NAMES[[kk]]
[18:03:58.161]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.161]                     next
[18:03:58.161]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.161]                 }
[18:03:58.161]                 NAMES <- toupper(added)
[18:03:58.161]                 for (kk in seq_along(NAMES)) {
[18:03:58.161]                   name <- added[[kk]]
[18:03:58.161]                   NAME <- NAMES[[kk]]
[18:03:58.161]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.161]                     next
[18:03:58.161]                   args[[name]] <- ""
[18:03:58.161]                 }
[18:03:58.161]                 NAMES <- toupper(removed)
[18:03:58.161]                 for (kk in seq_along(NAMES)) {
[18:03:58.161]                   name <- removed[[kk]]
[18:03:58.161]                   NAME <- NAMES[[kk]]
[18:03:58.161]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.161]                     next
[18:03:58.161]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.161]                 }
[18:03:58.161]                 if (length(args) > 0) 
[18:03:58.161]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.161]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.161]             }
[18:03:58.161]             else {
[18:03:58.161]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.161]             }
[18:03:58.161]             {
[18:03:58.161]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.161]                   0L) {
[18:03:58.161]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.161]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.161]                   base::options(opts)
[18:03:58.161]                 }
[18:03:58.161]                 {
[18:03:58.161]                   {
[18:03:58.161]                     NULL
[18:03:58.161]                     RNGkind("Mersenne-Twister")
[18:03:58.161]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.161]                       inherits = FALSE)
[18:03:58.161]                   }
[18:03:58.161]                   options(future.plan = NULL)
[18:03:58.161]                   if (is.na(NA_character_)) 
[18:03:58.161]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.161]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.161]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.161]                     .init = FALSE)
[18:03:58.161]                 }
[18:03:58.161]             }
[18:03:58.161]         }
[18:03:58.161]     })
[18:03:58.161]     if (TRUE) {
[18:03:58.161]         base::sink(type = "output", split = FALSE)
[18:03:58.161]         if (TRUE) {
[18:03:58.161]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.161]         }
[18:03:58.161]         else {
[18:03:58.161]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.161]         }
[18:03:58.161]         base::close(...future.stdout)
[18:03:58.161]         ...future.stdout <- NULL
[18:03:58.161]     }
[18:03:58.161]     ...future.result$conditions <- ...future.conditions
[18:03:58.161]     ...future.result$finished <- base::Sys.time()
[18:03:58.161]     ...future.result
[18:03:58.161] }
[18:03:58.165] plan(): Setting new future strategy stack:
[18:03:58.165] List of future strategies:
[18:03:58.165] 1. sequential:
[18:03:58.165]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.165]    - tweaked: FALSE
[18:03:58.165]    - call: NULL
[18:03:58.166] plan(): nbrOfWorkers() = 1
[18:03:58.168] plan(): Setting new future strategy stack:
[18:03:58.168] List of future strategies:
[18:03:58.168] 1. sequential:
[18:03:58.168]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.168]    - tweaked: FALSE
[18:03:58.168]    - call: future::plan("sequential")
[18:03:58.169] plan(): nbrOfWorkers() = 1
[18:03:58.170] SequentialFuture started (and completed)
[18:03:58.170] - Launch lazy future ... done
[18:03:58.170] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[18:03:58.171] run() for ‘Future’ ...
[18:03:58.171] - state: ‘created’
[18:03:58.171] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.172] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.172] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.172]   - Field: ‘label’
[18:03:58.173]   - Field: ‘local’
[18:03:58.173]   - Field: ‘owner’
[18:03:58.173]   - Field: ‘envir’
[18:03:58.173]   - Field: ‘packages’
[18:03:58.173]   - Field: ‘gc’
[18:03:58.174]   - Field: ‘conditions’
[18:03:58.174]   - Field: ‘expr’
[18:03:58.174]   - Field: ‘uuid’
[18:03:58.174]   - Field: ‘seed’
[18:03:58.174]   - Field: ‘version’
[18:03:58.175]   - Field: ‘result’
[18:03:58.175]   - Field: ‘asynchronous’
[18:03:58.175]   - Field: ‘calls’
[18:03:58.175]   - Field: ‘globals’
[18:03:58.175]   - Field: ‘stdout’
[18:03:58.176]   - Field: ‘earlySignal’
[18:03:58.176]   - Field: ‘lazy’
[18:03:58.176]   - Field: ‘state’
[18:03:58.176] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.176] - Launch lazy future ...
[18:03:58.177] Packages needed by the future expression (n = 0): <none>
[18:03:58.177] Packages needed by future strategies (n = 0): <none>
[18:03:58.178] {
[18:03:58.178]     {
[18:03:58.178]         {
[18:03:58.178]             ...future.startTime <- base::Sys.time()
[18:03:58.178]             {
[18:03:58.178]                 {
[18:03:58.178]                   {
[18:03:58.178]                     base::local({
[18:03:58.178]                       has_future <- base::requireNamespace("future", 
[18:03:58.178]                         quietly = TRUE)
[18:03:58.178]                       if (has_future) {
[18:03:58.178]                         ns <- base::getNamespace("future")
[18:03:58.178]                         version <- ns[[".package"]][["version"]]
[18:03:58.178]                         if (is.null(version)) 
[18:03:58.178]                           version <- utils::packageVersion("future")
[18:03:58.178]                       }
[18:03:58.178]                       else {
[18:03:58.178]                         version <- NULL
[18:03:58.178]                       }
[18:03:58.178]                       if (!has_future || version < "1.8.0") {
[18:03:58.178]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.178]                           "", base::R.version$version.string), 
[18:03:58.178]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.178]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.178]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.178]                             "release", "version")], collapse = " "), 
[18:03:58.178]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.178]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.178]                           info)
[18:03:58.178]                         info <- base::paste(info, collapse = "; ")
[18:03:58.178]                         if (!has_future) {
[18:03:58.178]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.178]                             info)
[18:03:58.178]                         }
[18:03:58.178]                         else {
[18:03:58.178]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.178]                             info, version)
[18:03:58.178]                         }
[18:03:58.178]                         base::stop(msg)
[18:03:58.178]                       }
[18:03:58.178]                     })
[18:03:58.178]                   }
[18:03:58.178]                   ...future.strategy.old <- future::plan("list")
[18:03:58.178]                   options(future.plan = NULL)
[18:03:58.178]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.178]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.178]                 }
[18:03:58.178]                 ...future.workdir <- getwd()
[18:03:58.178]             }
[18:03:58.178]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.178]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.178]         }
[18:03:58.178]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.178]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.178]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.178]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.178]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.178]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.178]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.178]             base::names(...future.oldOptions))
[18:03:58.178]     }
[18:03:58.178]     if (FALSE) {
[18:03:58.178]     }
[18:03:58.178]     else {
[18:03:58.178]         if (TRUE) {
[18:03:58.178]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.178]                 open = "w")
[18:03:58.178]         }
[18:03:58.178]         else {
[18:03:58.178]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.178]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.178]         }
[18:03:58.178]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.178]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.178]             base::sink(type = "output", split = FALSE)
[18:03:58.178]             base::close(...future.stdout)
[18:03:58.178]         }, add = TRUE)
[18:03:58.178]     }
[18:03:58.178]     ...future.frame <- base::sys.nframe()
[18:03:58.178]     ...future.conditions <- base::list()
[18:03:58.178]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.178]     if (FALSE) {
[18:03:58.178]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.178]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.178]     }
[18:03:58.178]     ...future.result <- base::tryCatch({
[18:03:58.178]         base::withCallingHandlers({
[18:03:58.178]             ...future.value <- base::withVisible(base::local({
[18:03:58.178]                 2
[18:03:58.178]             }))
[18:03:58.178]             future::FutureResult(value = ...future.value$value, 
[18:03:58.178]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.178]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.178]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.178]                     ...future.globalenv.names))
[18:03:58.178]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.178]         }, condition = base::local({
[18:03:58.178]             c <- base::c
[18:03:58.178]             inherits <- base::inherits
[18:03:58.178]             invokeRestart <- base::invokeRestart
[18:03:58.178]             length <- base::length
[18:03:58.178]             list <- base::list
[18:03:58.178]             seq.int <- base::seq.int
[18:03:58.178]             signalCondition <- base::signalCondition
[18:03:58.178]             sys.calls <- base::sys.calls
[18:03:58.178]             `[[` <- base::`[[`
[18:03:58.178]             `+` <- base::`+`
[18:03:58.178]             `<<-` <- base::`<<-`
[18:03:58.178]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.178]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.178]                   3L)]
[18:03:58.178]             }
[18:03:58.178]             function(cond) {
[18:03:58.178]                 is_error <- inherits(cond, "error")
[18:03:58.178]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.178]                   NULL)
[18:03:58.178]                 if (is_error) {
[18:03:58.178]                   sessionInformation <- function() {
[18:03:58.178]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.178]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.178]                       search = base::search(), system = base::Sys.info())
[18:03:58.178]                   }
[18:03:58.178]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.178]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.178]                     cond$call), session = sessionInformation(), 
[18:03:58.178]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.178]                   signalCondition(cond)
[18:03:58.178]                 }
[18:03:58.178]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.178]                 "immediateCondition"))) {
[18:03:58.178]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.178]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.178]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.178]                   if (TRUE && !signal) {
[18:03:58.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.178]                     {
[18:03:58.178]                       inherits <- base::inherits
[18:03:58.178]                       invokeRestart <- base::invokeRestart
[18:03:58.178]                       is.null <- base::is.null
[18:03:58.178]                       muffled <- FALSE
[18:03:58.178]                       if (inherits(cond, "message")) {
[18:03:58.178]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.178]                         if (muffled) 
[18:03:58.178]                           invokeRestart("muffleMessage")
[18:03:58.178]                       }
[18:03:58.178]                       else if (inherits(cond, "warning")) {
[18:03:58.178]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.178]                         if (muffled) 
[18:03:58.178]                           invokeRestart("muffleWarning")
[18:03:58.178]                       }
[18:03:58.178]                       else if (inherits(cond, "condition")) {
[18:03:58.178]                         if (!is.null(pattern)) {
[18:03:58.178]                           computeRestarts <- base::computeRestarts
[18:03:58.178]                           grepl <- base::grepl
[18:03:58.178]                           restarts <- computeRestarts(cond)
[18:03:58.178]                           for (restart in restarts) {
[18:03:58.178]                             name <- restart$name
[18:03:58.178]                             if (is.null(name)) 
[18:03:58.178]                               next
[18:03:58.178]                             if (!grepl(pattern, name)) 
[18:03:58.178]                               next
[18:03:58.178]                             invokeRestart(restart)
[18:03:58.178]                             muffled <- TRUE
[18:03:58.178]                             break
[18:03:58.178]                           }
[18:03:58.178]                         }
[18:03:58.178]                       }
[18:03:58.178]                       invisible(muffled)
[18:03:58.178]                     }
[18:03:58.178]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.178]                   }
[18:03:58.178]                 }
[18:03:58.178]                 else {
[18:03:58.178]                   if (TRUE) {
[18:03:58.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.178]                     {
[18:03:58.178]                       inherits <- base::inherits
[18:03:58.178]                       invokeRestart <- base::invokeRestart
[18:03:58.178]                       is.null <- base::is.null
[18:03:58.178]                       muffled <- FALSE
[18:03:58.178]                       if (inherits(cond, "message")) {
[18:03:58.178]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.178]                         if (muffled) 
[18:03:58.178]                           invokeRestart("muffleMessage")
[18:03:58.178]                       }
[18:03:58.178]                       else if (inherits(cond, "warning")) {
[18:03:58.178]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.178]                         if (muffled) 
[18:03:58.178]                           invokeRestart("muffleWarning")
[18:03:58.178]                       }
[18:03:58.178]                       else if (inherits(cond, "condition")) {
[18:03:58.178]                         if (!is.null(pattern)) {
[18:03:58.178]                           computeRestarts <- base::computeRestarts
[18:03:58.178]                           grepl <- base::grepl
[18:03:58.178]                           restarts <- computeRestarts(cond)
[18:03:58.178]                           for (restart in restarts) {
[18:03:58.178]                             name <- restart$name
[18:03:58.178]                             if (is.null(name)) 
[18:03:58.178]                               next
[18:03:58.178]                             if (!grepl(pattern, name)) 
[18:03:58.178]                               next
[18:03:58.178]                             invokeRestart(restart)
[18:03:58.178]                             muffled <- TRUE
[18:03:58.178]                             break
[18:03:58.178]                           }
[18:03:58.178]                         }
[18:03:58.178]                       }
[18:03:58.178]                       invisible(muffled)
[18:03:58.178]                     }
[18:03:58.178]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.178]                   }
[18:03:58.178]                 }
[18:03:58.178]             }
[18:03:58.178]         }))
[18:03:58.178]     }, error = function(ex) {
[18:03:58.178]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.178]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.178]                 ...future.rng), started = ...future.startTime, 
[18:03:58.178]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.178]             version = "1.8"), class = "FutureResult")
[18:03:58.178]     }, finally = {
[18:03:58.178]         if (!identical(...future.workdir, getwd())) 
[18:03:58.178]             setwd(...future.workdir)
[18:03:58.178]         {
[18:03:58.178]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.178]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.178]             }
[18:03:58.178]             base::options(...future.oldOptions)
[18:03:58.178]             if (.Platform$OS.type == "windows") {
[18:03:58.178]                 old_names <- names(...future.oldEnvVars)
[18:03:58.178]                 envs <- base::Sys.getenv()
[18:03:58.178]                 names <- names(envs)
[18:03:58.178]                 common <- intersect(names, old_names)
[18:03:58.178]                 added <- setdiff(names, old_names)
[18:03:58.178]                 removed <- setdiff(old_names, names)
[18:03:58.178]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.178]                   envs[common]]
[18:03:58.178]                 NAMES <- toupper(changed)
[18:03:58.178]                 args <- list()
[18:03:58.178]                 for (kk in seq_along(NAMES)) {
[18:03:58.178]                   name <- changed[[kk]]
[18:03:58.178]                   NAME <- NAMES[[kk]]
[18:03:58.178]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.178]                     next
[18:03:58.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.178]                 }
[18:03:58.178]                 NAMES <- toupper(added)
[18:03:58.178]                 for (kk in seq_along(NAMES)) {
[18:03:58.178]                   name <- added[[kk]]
[18:03:58.178]                   NAME <- NAMES[[kk]]
[18:03:58.178]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.178]                     next
[18:03:58.178]                   args[[name]] <- ""
[18:03:58.178]                 }
[18:03:58.178]                 NAMES <- toupper(removed)
[18:03:58.178]                 for (kk in seq_along(NAMES)) {
[18:03:58.178]                   name <- removed[[kk]]
[18:03:58.178]                   NAME <- NAMES[[kk]]
[18:03:58.178]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.178]                     next
[18:03:58.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.178]                 }
[18:03:58.178]                 if (length(args) > 0) 
[18:03:58.178]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.178]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.178]             }
[18:03:58.178]             else {
[18:03:58.178]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.178]             }
[18:03:58.178]             {
[18:03:58.178]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.178]                   0L) {
[18:03:58.178]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.178]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.178]                   base::options(opts)
[18:03:58.178]                 }
[18:03:58.178]                 {
[18:03:58.178]                   {
[18:03:58.178]                     NULL
[18:03:58.178]                     RNGkind("Mersenne-Twister")
[18:03:58.178]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.178]                       inherits = FALSE)
[18:03:58.178]                   }
[18:03:58.178]                   options(future.plan = NULL)
[18:03:58.178]                   if (is.na(NA_character_)) 
[18:03:58.178]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.178]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.178]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.178]                     .init = FALSE)
[18:03:58.178]                 }
[18:03:58.178]             }
[18:03:58.178]         }
[18:03:58.178]     })
[18:03:58.178]     if (TRUE) {
[18:03:58.178]         base::sink(type = "output", split = FALSE)
[18:03:58.178]         if (TRUE) {
[18:03:58.178]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.178]         }
[18:03:58.178]         else {
[18:03:58.178]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.178]         }
[18:03:58.178]         base::close(...future.stdout)
[18:03:58.178]         ...future.stdout <- NULL
[18:03:58.178]     }
[18:03:58.178]     ...future.result$conditions <- ...future.conditions
[18:03:58.178]     ...future.result$finished <- base::Sys.time()
[18:03:58.178]     ...future.result
[18:03:58.178] }
[18:03:58.182] plan(): Setting new future strategy stack:
[18:03:58.182] List of future strategies:
[18:03:58.182] 1. sequential:
[18:03:58.182]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.182]    - tweaked: FALSE
[18:03:58.182]    - call: NULL
[18:03:58.183] plan(): nbrOfWorkers() = 1
[18:03:58.185] plan(): Setting new future strategy stack:
[18:03:58.185] List of future strategies:
[18:03:58.185] 1. sequential:
[18:03:58.185]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.185]    - tweaked: FALSE
[18:03:58.185]    - call: future::plan("sequential")
[18:03:58.186] plan(): nbrOfWorkers() = 1
[18:03:58.187] SequentialFuture started (and completed)
[18:03:58.187] - Launch lazy future ... done
[18:03:58.187] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[18:03:58.199] getGlobalsAndPackages() ...
[18:03:58.200] Searching for globals...
[18:03:58.203] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[18:03:58.203] Searching for globals ... DONE
[18:03:58.204] Resolving globals: FALSE
[18:03:58.205] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:58.206] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[18:03:58.207] - globals: [2] ‘rr’, ‘cc’
[18:03:58.207] 
[18:03:58.207] getGlobalsAndPackages() ... DONE
[18:03:58.208] getGlobalsAndPackages() ...
[18:03:58.208] Searching for globals...
[18:03:58.210] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[18:03:58.210] Searching for globals ... DONE
[18:03:58.210] Resolving globals: FALSE
[18:03:58.211] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:58.212] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[18:03:58.212] - globals: [2] ‘rr’, ‘cc’
[18:03:58.212] 
[18:03:58.213] getGlobalsAndPackages() ... DONE
[18:03:58.214] getGlobalsAndPackages() ...
[18:03:58.214] Searching for globals...
[18:03:58.216] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[18:03:58.216] Searching for globals ... DONE
[18:03:58.216] Resolving globals: FALSE
[18:03:58.217] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:58.218] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[18:03:58.218] - globals: [2] ‘rr’, ‘cc’
[18:03:58.218] 
[18:03:58.219] getGlobalsAndPackages() ... DONE
[18:03:58.220] getGlobalsAndPackages() ...
[18:03:58.220] Searching for globals...
[18:03:58.224] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[18:03:58.225] Searching for globals ... DONE
[18:03:58.225] Resolving globals: FALSE
[18:03:58.226] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:58.227] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[18:03:58.227] - globals: [2] ‘rr’, ‘cc’
[18:03:58.227] 
[18:03:58.227] getGlobalsAndPackages() ... DONE
[18:03:58.228] getGlobalsAndPackages() ...
[18:03:58.229] Searching for globals...
[18:03:58.230] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[18:03:58.230] Searching for globals ... DONE
[18:03:58.231] Resolving globals: FALSE
[18:03:58.232] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:58.232] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[18:03:58.233] - globals: [2] ‘rr’, ‘cc’
[18:03:58.233] 
[18:03:58.233] getGlobalsAndPackages() ... DONE
[18:03:58.234] getGlobalsAndPackages() ...
[18:03:58.234] Searching for globals...
[18:03:58.236] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[18:03:58.236] Searching for globals ... DONE
[18:03:58.236] Resolving globals: FALSE
[18:03:58.237] The total size of the 2 globals is 112 bytes (112 bytes)
[18:03:58.238] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[18:03:58.238] - globals: [2] ‘rr’, ‘cc’
[18:03:58.239] 
[18:03:58.239] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[18:03:58.240] run() for ‘Future’ ...
[18:03:58.240] - state: ‘created’
[18:03:58.240] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.241] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.241] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.241]   - Field: ‘label’
[18:03:58.241]   - Field: ‘local’
[18:03:58.242]   - Field: ‘owner’
[18:03:58.242]   - Field: ‘envir’
[18:03:58.242]   - Field: ‘packages’
[18:03:58.242]   - Field: ‘gc’
[18:03:58.242]   - Field: ‘conditions’
[18:03:58.243]   - Field: ‘expr’
[18:03:58.243]   - Field: ‘uuid’
[18:03:58.243]   - Field: ‘seed’
[18:03:58.243]   - Field: ‘version’
[18:03:58.243]   - Field: ‘result’
[18:03:58.244]   - Field: ‘asynchronous’
[18:03:58.244]   - Field: ‘calls’
[18:03:58.244]   - Field: ‘globals’
[18:03:58.244]   - Field: ‘stdout’
[18:03:58.244]   - Field: ‘earlySignal’
[18:03:58.245]   - Field: ‘lazy’
[18:03:58.245]   - Field: ‘state’
[18:03:58.245] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.245] - Launch lazy future ...
[18:03:58.246] Packages needed by the future expression (n = 0): <none>
[18:03:58.246] Packages needed by future strategies (n = 0): <none>
[18:03:58.247] {
[18:03:58.247]     {
[18:03:58.247]         {
[18:03:58.247]             ...future.startTime <- base::Sys.time()
[18:03:58.247]             {
[18:03:58.247]                 {
[18:03:58.247]                   {
[18:03:58.247]                     base::local({
[18:03:58.247]                       has_future <- base::requireNamespace("future", 
[18:03:58.247]                         quietly = TRUE)
[18:03:58.247]                       if (has_future) {
[18:03:58.247]                         ns <- base::getNamespace("future")
[18:03:58.247]                         version <- ns[[".package"]][["version"]]
[18:03:58.247]                         if (is.null(version)) 
[18:03:58.247]                           version <- utils::packageVersion("future")
[18:03:58.247]                       }
[18:03:58.247]                       else {
[18:03:58.247]                         version <- NULL
[18:03:58.247]                       }
[18:03:58.247]                       if (!has_future || version < "1.8.0") {
[18:03:58.247]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.247]                           "", base::R.version$version.string), 
[18:03:58.247]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.247]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.247]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.247]                             "release", "version")], collapse = " "), 
[18:03:58.247]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.247]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.247]                           info)
[18:03:58.247]                         info <- base::paste(info, collapse = "; ")
[18:03:58.247]                         if (!has_future) {
[18:03:58.247]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.247]                             info)
[18:03:58.247]                         }
[18:03:58.247]                         else {
[18:03:58.247]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.247]                             info, version)
[18:03:58.247]                         }
[18:03:58.247]                         base::stop(msg)
[18:03:58.247]                       }
[18:03:58.247]                     })
[18:03:58.247]                   }
[18:03:58.247]                   ...future.strategy.old <- future::plan("list")
[18:03:58.247]                   options(future.plan = NULL)
[18:03:58.247]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.247]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.247]                 }
[18:03:58.247]                 ...future.workdir <- getwd()
[18:03:58.247]             }
[18:03:58.247]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.247]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.247]         }
[18:03:58.247]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.247]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.247]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.247]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.247]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.247]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.247]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.247]             base::names(...future.oldOptions))
[18:03:58.247]     }
[18:03:58.247]     if (FALSE) {
[18:03:58.247]     }
[18:03:58.247]     else {
[18:03:58.247]         if (TRUE) {
[18:03:58.247]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.247]                 open = "w")
[18:03:58.247]         }
[18:03:58.247]         else {
[18:03:58.247]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.247]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.247]         }
[18:03:58.247]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.247]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.247]             base::sink(type = "output", split = FALSE)
[18:03:58.247]             base::close(...future.stdout)
[18:03:58.247]         }, add = TRUE)
[18:03:58.247]     }
[18:03:58.247]     ...future.frame <- base::sys.nframe()
[18:03:58.247]     ...future.conditions <- base::list()
[18:03:58.247]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.247]     if (FALSE) {
[18:03:58.247]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.247]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.247]     }
[18:03:58.247]     ...future.result <- base::tryCatch({
[18:03:58.247]         base::withCallingHandlers({
[18:03:58.247]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[18:03:58.247]                 rr, cc)))
[18:03:58.247]             future::FutureResult(value = ...future.value$value, 
[18:03:58.247]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.247]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.247]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.247]                     ...future.globalenv.names))
[18:03:58.247]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.247]         }, condition = base::local({
[18:03:58.247]             c <- base::c
[18:03:58.247]             inherits <- base::inherits
[18:03:58.247]             invokeRestart <- base::invokeRestart
[18:03:58.247]             length <- base::length
[18:03:58.247]             list <- base::list
[18:03:58.247]             seq.int <- base::seq.int
[18:03:58.247]             signalCondition <- base::signalCondition
[18:03:58.247]             sys.calls <- base::sys.calls
[18:03:58.247]             `[[` <- base::`[[`
[18:03:58.247]             `+` <- base::`+`
[18:03:58.247]             `<<-` <- base::`<<-`
[18:03:58.247]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.247]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.247]                   3L)]
[18:03:58.247]             }
[18:03:58.247]             function(cond) {
[18:03:58.247]                 is_error <- inherits(cond, "error")
[18:03:58.247]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.247]                   NULL)
[18:03:58.247]                 if (is_error) {
[18:03:58.247]                   sessionInformation <- function() {
[18:03:58.247]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.247]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.247]                       search = base::search(), system = base::Sys.info())
[18:03:58.247]                   }
[18:03:58.247]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.247]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.247]                     cond$call), session = sessionInformation(), 
[18:03:58.247]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.247]                   signalCondition(cond)
[18:03:58.247]                 }
[18:03:58.247]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.247]                 "immediateCondition"))) {
[18:03:58.247]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.247]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.247]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.247]                   if (TRUE && !signal) {
[18:03:58.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.247]                     {
[18:03:58.247]                       inherits <- base::inherits
[18:03:58.247]                       invokeRestart <- base::invokeRestart
[18:03:58.247]                       is.null <- base::is.null
[18:03:58.247]                       muffled <- FALSE
[18:03:58.247]                       if (inherits(cond, "message")) {
[18:03:58.247]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.247]                         if (muffled) 
[18:03:58.247]                           invokeRestart("muffleMessage")
[18:03:58.247]                       }
[18:03:58.247]                       else if (inherits(cond, "warning")) {
[18:03:58.247]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.247]                         if (muffled) 
[18:03:58.247]                           invokeRestart("muffleWarning")
[18:03:58.247]                       }
[18:03:58.247]                       else if (inherits(cond, "condition")) {
[18:03:58.247]                         if (!is.null(pattern)) {
[18:03:58.247]                           computeRestarts <- base::computeRestarts
[18:03:58.247]                           grepl <- base::grepl
[18:03:58.247]                           restarts <- computeRestarts(cond)
[18:03:58.247]                           for (restart in restarts) {
[18:03:58.247]                             name <- restart$name
[18:03:58.247]                             if (is.null(name)) 
[18:03:58.247]                               next
[18:03:58.247]                             if (!grepl(pattern, name)) 
[18:03:58.247]                               next
[18:03:58.247]                             invokeRestart(restart)
[18:03:58.247]                             muffled <- TRUE
[18:03:58.247]                             break
[18:03:58.247]                           }
[18:03:58.247]                         }
[18:03:58.247]                       }
[18:03:58.247]                       invisible(muffled)
[18:03:58.247]                     }
[18:03:58.247]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.247]                   }
[18:03:58.247]                 }
[18:03:58.247]                 else {
[18:03:58.247]                   if (TRUE) {
[18:03:58.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.247]                     {
[18:03:58.247]                       inherits <- base::inherits
[18:03:58.247]                       invokeRestart <- base::invokeRestart
[18:03:58.247]                       is.null <- base::is.null
[18:03:58.247]                       muffled <- FALSE
[18:03:58.247]                       if (inherits(cond, "message")) {
[18:03:58.247]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.247]                         if (muffled) 
[18:03:58.247]                           invokeRestart("muffleMessage")
[18:03:58.247]                       }
[18:03:58.247]                       else if (inherits(cond, "warning")) {
[18:03:58.247]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.247]                         if (muffled) 
[18:03:58.247]                           invokeRestart("muffleWarning")
[18:03:58.247]                       }
[18:03:58.247]                       else if (inherits(cond, "condition")) {
[18:03:58.247]                         if (!is.null(pattern)) {
[18:03:58.247]                           computeRestarts <- base::computeRestarts
[18:03:58.247]                           grepl <- base::grepl
[18:03:58.247]                           restarts <- computeRestarts(cond)
[18:03:58.247]                           for (restart in restarts) {
[18:03:58.247]                             name <- restart$name
[18:03:58.247]                             if (is.null(name)) 
[18:03:58.247]                               next
[18:03:58.247]                             if (!grepl(pattern, name)) 
[18:03:58.247]                               next
[18:03:58.247]                             invokeRestart(restart)
[18:03:58.247]                             muffled <- TRUE
[18:03:58.247]                             break
[18:03:58.247]                           }
[18:03:58.247]                         }
[18:03:58.247]                       }
[18:03:58.247]                       invisible(muffled)
[18:03:58.247]                     }
[18:03:58.247]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.247]                   }
[18:03:58.247]                 }
[18:03:58.247]             }
[18:03:58.247]         }))
[18:03:58.247]     }, error = function(ex) {
[18:03:58.247]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.247]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.247]                 ...future.rng), started = ...future.startTime, 
[18:03:58.247]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.247]             version = "1.8"), class = "FutureResult")
[18:03:58.247]     }, finally = {
[18:03:58.247]         if (!identical(...future.workdir, getwd())) 
[18:03:58.247]             setwd(...future.workdir)
[18:03:58.247]         {
[18:03:58.247]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.247]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.247]             }
[18:03:58.247]             base::options(...future.oldOptions)
[18:03:58.247]             if (.Platform$OS.type == "windows") {
[18:03:58.247]                 old_names <- names(...future.oldEnvVars)
[18:03:58.247]                 envs <- base::Sys.getenv()
[18:03:58.247]                 names <- names(envs)
[18:03:58.247]                 common <- intersect(names, old_names)
[18:03:58.247]                 added <- setdiff(names, old_names)
[18:03:58.247]                 removed <- setdiff(old_names, names)
[18:03:58.247]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.247]                   envs[common]]
[18:03:58.247]                 NAMES <- toupper(changed)
[18:03:58.247]                 args <- list()
[18:03:58.247]                 for (kk in seq_along(NAMES)) {
[18:03:58.247]                   name <- changed[[kk]]
[18:03:58.247]                   NAME <- NAMES[[kk]]
[18:03:58.247]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.247]                     next
[18:03:58.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.247]                 }
[18:03:58.247]                 NAMES <- toupper(added)
[18:03:58.247]                 for (kk in seq_along(NAMES)) {
[18:03:58.247]                   name <- added[[kk]]
[18:03:58.247]                   NAME <- NAMES[[kk]]
[18:03:58.247]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.247]                     next
[18:03:58.247]                   args[[name]] <- ""
[18:03:58.247]                 }
[18:03:58.247]                 NAMES <- toupper(removed)
[18:03:58.247]                 for (kk in seq_along(NAMES)) {
[18:03:58.247]                   name <- removed[[kk]]
[18:03:58.247]                   NAME <- NAMES[[kk]]
[18:03:58.247]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.247]                     next
[18:03:58.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.247]                 }
[18:03:58.247]                 if (length(args) > 0) 
[18:03:58.247]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.247]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.247]             }
[18:03:58.247]             else {
[18:03:58.247]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.247]             }
[18:03:58.247]             {
[18:03:58.247]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.247]                   0L) {
[18:03:58.247]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.247]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.247]                   base::options(opts)
[18:03:58.247]                 }
[18:03:58.247]                 {
[18:03:58.247]                   {
[18:03:58.247]                     NULL
[18:03:58.247]                     RNGkind("Mersenne-Twister")
[18:03:58.247]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.247]                       inherits = FALSE)
[18:03:58.247]                   }
[18:03:58.247]                   options(future.plan = NULL)
[18:03:58.247]                   if (is.na(NA_character_)) 
[18:03:58.247]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.247]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.247]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.247]                     .init = FALSE)
[18:03:58.247]                 }
[18:03:58.247]             }
[18:03:58.247]         }
[18:03:58.247]     })
[18:03:58.247]     if (TRUE) {
[18:03:58.247]         base::sink(type = "output", split = FALSE)
[18:03:58.247]         if (TRUE) {
[18:03:58.247]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.247]         }
[18:03:58.247]         else {
[18:03:58.247]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.247]         }
[18:03:58.247]         base::close(...future.stdout)
[18:03:58.247]         ...future.stdout <- NULL
[18:03:58.247]     }
[18:03:58.247]     ...future.result$conditions <- ...future.conditions
[18:03:58.247]     ...future.result$finished <- base::Sys.time()
[18:03:58.247]     ...future.result
[18:03:58.247] }
[18:03:58.250] assign_globals() ...
[18:03:58.251] List of 2
[18:03:58.251]  $ rr: int 1
[18:03:58.251]  $ cc: int 1
[18:03:58.251]  - attr(*, "where")=List of 2
[18:03:58.251]   ..$ rr:<environment: R_EmptyEnv> 
[18:03:58.251]   ..$ cc:<environment: R_EmptyEnv> 
[18:03:58.251]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:58.251]  - attr(*, "resolved")= logi FALSE
[18:03:58.251]  - attr(*, "total_size")= num 112
[18:03:58.251]  - attr(*, "already-done")= logi TRUE
[18:03:58.257] - copied ‘rr’ to environment
[18:03:58.257] - copied ‘cc’ to environment
[18:03:58.258] assign_globals() ... done
[18:03:58.258] plan(): Setting new future strategy stack:
[18:03:58.258] List of future strategies:
[18:03:58.258] 1. sequential:
[18:03:58.258]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.258]    - tweaked: FALSE
[18:03:58.258]    - call: NULL
[18:03:58.259] plan(): nbrOfWorkers() = 1
[18:03:58.261] plan(): Setting new future strategy stack:
[18:03:58.261] List of future strategies:
[18:03:58.261] 1. sequential:
[18:03:58.261]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.261]    - tweaked: FALSE
[18:03:58.261]    - call: future::plan("sequential")
[18:03:58.262] plan(): nbrOfWorkers() = 1
[18:03:58.263] SequentialFuture started (and completed)
[18:03:58.263] - Launch lazy future ... done
[18:03:58.263] run() for ‘SequentialFuture’ ... done
[18:03:58.264] run() for ‘Future’ ...
[18:03:58.264] - state: ‘created’
[18:03:58.264] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.265] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.265] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.265]   - Field: ‘label’
[18:03:58.265]   - Field: ‘local’
[18:03:58.266]   - Field: ‘owner’
[18:03:58.266]   - Field: ‘envir’
[18:03:58.266]   - Field: ‘packages’
[18:03:58.266]   - Field: ‘gc’
[18:03:58.266]   - Field: ‘conditions’
[18:03:58.267]   - Field: ‘expr’
[18:03:58.267]   - Field: ‘uuid’
[18:03:58.267]   - Field: ‘seed’
[18:03:58.267]   - Field: ‘version’
[18:03:58.267]   - Field: ‘result’
[18:03:58.268]   - Field: ‘asynchronous’
[18:03:58.268]   - Field: ‘calls’
[18:03:58.268]   - Field: ‘globals’
[18:03:58.268]   - Field: ‘stdout’
[18:03:58.268]   - Field: ‘earlySignal’
[18:03:58.269]   - Field: ‘lazy’
[18:03:58.269]   - Field: ‘state’
[18:03:58.269] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.269] - Launch lazy future ...
[18:03:58.270] Packages needed by the future expression (n = 0): <none>
[18:03:58.270] Packages needed by future strategies (n = 0): <none>
[18:03:58.271] {
[18:03:58.271]     {
[18:03:58.271]         {
[18:03:58.271]             ...future.startTime <- base::Sys.time()
[18:03:58.271]             {
[18:03:58.271]                 {
[18:03:58.271]                   {
[18:03:58.271]                     base::local({
[18:03:58.271]                       has_future <- base::requireNamespace("future", 
[18:03:58.271]                         quietly = TRUE)
[18:03:58.271]                       if (has_future) {
[18:03:58.271]                         ns <- base::getNamespace("future")
[18:03:58.271]                         version <- ns[[".package"]][["version"]]
[18:03:58.271]                         if (is.null(version)) 
[18:03:58.271]                           version <- utils::packageVersion("future")
[18:03:58.271]                       }
[18:03:58.271]                       else {
[18:03:58.271]                         version <- NULL
[18:03:58.271]                       }
[18:03:58.271]                       if (!has_future || version < "1.8.0") {
[18:03:58.271]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.271]                           "", base::R.version$version.string), 
[18:03:58.271]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.271]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.271]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.271]                             "release", "version")], collapse = " "), 
[18:03:58.271]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.271]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.271]                           info)
[18:03:58.271]                         info <- base::paste(info, collapse = "; ")
[18:03:58.271]                         if (!has_future) {
[18:03:58.271]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.271]                             info)
[18:03:58.271]                         }
[18:03:58.271]                         else {
[18:03:58.271]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.271]                             info, version)
[18:03:58.271]                         }
[18:03:58.271]                         base::stop(msg)
[18:03:58.271]                       }
[18:03:58.271]                     })
[18:03:58.271]                   }
[18:03:58.271]                   ...future.strategy.old <- future::plan("list")
[18:03:58.271]                   options(future.plan = NULL)
[18:03:58.271]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.271]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.271]                 }
[18:03:58.271]                 ...future.workdir <- getwd()
[18:03:58.271]             }
[18:03:58.271]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.271]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.271]         }
[18:03:58.271]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.271]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.271]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.271]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.271]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.271]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.271]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.271]             base::names(...future.oldOptions))
[18:03:58.271]     }
[18:03:58.271]     if (FALSE) {
[18:03:58.271]     }
[18:03:58.271]     else {
[18:03:58.271]         if (TRUE) {
[18:03:58.271]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.271]                 open = "w")
[18:03:58.271]         }
[18:03:58.271]         else {
[18:03:58.271]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.271]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.271]         }
[18:03:58.271]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.271]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.271]             base::sink(type = "output", split = FALSE)
[18:03:58.271]             base::close(...future.stdout)
[18:03:58.271]         }, add = TRUE)
[18:03:58.271]     }
[18:03:58.271]     ...future.frame <- base::sys.nframe()
[18:03:58.271]     ...future.conditions <- base::list()
[18:03:58.271]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.271]     if (FALSE) {
[18:03:58.271]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.271]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.271]     }
[18:03:58.271]     ...future.result <- base::tryCatch({
[18:03:58.271]         base::withCallingHandlers({
[18:03:58.271]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[18:03:58.271]                 rr, cc)))
[18:03:58.271]             future::FutureResult(value = ...future.value$value, 
[18:03:58.271]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.271]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.271]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.271]                     ...future.globalenv.names))
[18:03:58.271]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.271]         }, condition = base::local({
[18:03:58.271]             c <- base::c
[18:03:58.271]             inherits <- base::inherits
[18:03:58.271]             invokeRestart <- base::invokeRestart
[18:03:58.271]             length <- base::length
[18:03:58.271]             list <- base::list
[18:03:58.271]             seq.int <- base::seq.int
[18:03:58.271]             signalCondition <- base::signalCondition
[18:03:58.271]             sys.calls <- base::sys.calls
[18:03:58.271]             `[[` <- base::`[[`
[18:03:58.271]             `+` <- base::`+`
[18:03:58.271]             `<<-` <- base::`<<-`
[18:03:58.271]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.271]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.271]                   3L)]
[18:03:58.271]             }
[18:03:58.271]             function(cond) {
[18:03:58.271]                 is_error <- inherits(cond, "error")
[18:03:58.271]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.271]                   NULL)
[18:03:58.271]                 if (is_error) {
[18:03:58.271]                   sessionInformation <- function() {
[18:03:58.271]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.271]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.271]                       search = base::search(), system = base::Sys.info())
[18:03:58.271]                   }
[18:03:58.271]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.271]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.271]                     cond$call), session = sessionInformation(), 
[18:03:58.271]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.271]                   signalCondition(cond)
[18:03:58.271]                 }
[18:03:58.271]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.271]                 "immediateCondition"))) {
[18:03:58.271]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.271]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.271]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.271]                   if (TRUE && !signal) {
[18:03:58.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.271]                     {
[18:03:58.271]                       inherits <- base::inherits
[18:03:58.271]                       invokeRestart <- base::invokeRestart
[18:03:58.271]                       is.null <- base::is.null
[18:03:58.271]                       muffled <- FALSE
[18:03:58.271]                       if (inherits(cond, "message")) {
[18:03:58.271]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.271]                         if (muffled) 
[18:03:58.271]                           invokeRestart("muffleMessage")
[18:03:58.271]                       }
[18:03:58.271]                       else if (inherits(cond, "warning")) {
[18:03:58.271]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.271]                         if (muffled) 
[18:03:58.271]                           invokeRestart("muffleWarning")
[18:03:58.271]                       }
[18:03:58.271]                       else if (inherits(cond, "condition")) {
[18:03:58.271]                         if (!is.null(pattern)) {
[18:03:58.271]                           computeRestarts <- base::computeRestarts
[18:03:58.271]                           grepl <- base::grepl
[18:03:58.271]                           restarts <- computeRestarts(cond)
[18:03:58.271]                           for (restart in restarts) {
[18:03:58.271]                             name <- restart$name
[18:03:58.271]                             if (is.null(name)) 
[18:03:58.271]                               next
[18:03:58.271]                             if (!grepl(pattern, name)) 
[18:03:58.271]                               next
[18:03:58.271]                             invokeRestart(restart)
[18:03:58.271]                             muffled <- TRUE
[18:03:58.271]                             break
[18:03:58.271]                           }
[18:03:58.271]                         }
[18:03:58.271]                       }
[18:03:58.271]                       invisible(muffled)
[18:03:58.271]                     }
[18:03:58.271]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.271]                   }
[18:03:58.271]                 }
[18:03:58.271]                 else {
[18:03:58.271]                   if (TRUE) {
[18:03:58.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.271]                     {
[18:03:58.271]                       inherits <- base::inherits
[18:03:58.271]                       invokeRestart <- base::invokeRestart
[18:03:58.271]                       is.null <- base::is.null
[18:03:58.271]                       muffled <- FALSE
[18:03:58.271]                       if (inherits(cond, "message")) {
[18:03:58.271]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.271]                         if (muffled) 
[18:03:58.271]                           invokeRestart("muffleMessage")
[18:03:58.271]                       }
[18:03:58.271]                       else if (inherits(cond, "warning")) {
[18:03:58.271]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.271]                         if (muffled) 
[18:03:58.271]                           invokeRestart("muffleWarning")
[18:03:58.271]                       }
[18:03:58.271]                       else if (inherits(cond, "condition")) {
[18:03:58.271]                         if (!is.null(pattern)) {
[18:03:58.271]                           computeRestarts <- base::computeRestarts
[18:03:58.271]                           grepl <- base::grepl
[18:03:58.271]                           restarts <- computeRestarts(cond)
[18:03:58.271]                           for (restart in restarts) {
[18:03:58.271]                             name <- restart$name
[18:03:58.271]                             if (is.null(name)) 
[18:03:58.271]                               next
[18:03:58.271]                             if (!grepl(pattern, name)) 
[18:03:58.271]                               next
[18:03:58.271]                             invokeRestart(restart)
[18:03:58.271]                             muffled <- TRUE
[18:03:58.271]                             break
[18:03:58.271]                           }
[18:03:58.271]                         }
[18:03:58.271]                       }
[18:03:58.271]                       invisible(muffled)
[18:03:58.271]                     }
[18:03:58.271]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.271]                   }
[18:03:58.271]                 }
[18:03:58.271]             }
[18:03:58.271]         }))
[18:03:58.271]     }, error = function(ex) {
[18:03:58.271]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.271]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.271]                 ...future.rng), started = ...future.startTime, 
[18:03:58.271]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.271]             version = "1.8"), class = "FutureResult")
[18:03:58.271]     }, finally = {
[18:03:58.271]         if (!identical(...future.workdir, getwd())) 
[18:03:58.271]             setwd(...future.workdir)
[18:03:58.271]         {
[18:03:58.271]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.271]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.271]             }
[18:03:58.271]             base::options(...future.oldOptions)
[18:03:58.271]             if (.Platform$OS.type == "windows") {
[18:03:58.271]                 old_names <- names(...future.oldEnvVars)
[18:03:58.271]                 envs <- base::Sys.getenv()
[18:03:58.271]                 names <- names(envs)
[18:03:58.271]                 common <- intersect(names, old_names)
[18:03:58.271]                 added <- setdiff(names, old_names)
[18:03:58.271]                 removed <- setdiff(old_names, names)
[18:03:58.271]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.271]                   envs[common]]
[18:03:58.271]                 NAMES <- toupper(changed)
[18:03:58.271]                 args <- list()
[18:03:58.271]                 for (kk in seq_along(NAMES)) {
[18:03:58.271]                   name <- changed[[kk]]
[18:03:58.271]                   NAME <- NAMES[[kk]]
[18:03:58.271]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.271]                     next
[18:03:58.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.271]                 }
[18:03:58.271]                 NAMES <- toupper(added)
[18:03:58.271]                 for (kk in seq_along(NAMES)) {
[18:03:58.271]                   name <- added[[kk]]
[18:03:58.271]                   NAME <- NAMES[[kk]]
[18:03:58.271]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.271]                     next
[18:03:58.271]                   args[[name]] <- ""
[18:03:58.271]                 }
[18:03:58.271]                 NAMES <- toupper(removed)
[18:03:58.271]                 for (kk in seq_along(NAMES)) {
[18:03:58.271]                   name <- removed[[kk]]
[18:03:58.271]                   NAME <- NAMES[[kk]]
[18:03:58.271]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.271]                     next
[18:03:58.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.271]                 }
[18:03:58.271]                 if (length(args) > 0) 
[18:03:58.271]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.271]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.271]             }
[18:03:58.271]             else {
[18:03:58.271]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.271]             }
[18:03:58.271]             {
[18:03:58.271]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.271]                   0L) {
[18:03:58.271]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.271]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.271]                   base::options(opts)
[18:03:58.271]                 }
[18:03:58.271]                 {
[18:03:58.271]                   {
[18:03:58.271]                     NULL
[18:03:58.271]                     RNGkind("Mersenne-Twister")
[18:03:58.271]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.271]                       inherits = FALSE)
[18:03:58.271]                   }
[18:03:58.271]                   options(future.plan = NULL)
[18:03:58.271]                   if (is.na(NA_character_)) 
[18:03:58.271]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.271]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.271]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.271]                     .init = FALSE)
[18:03:58.271]                 }
[18:03:58.271]             }
[18:03:58.271]         }
[18:03:58.271]     })
[18:03:58.271]     if (TRUE) {
[18:03:58.271]         base::sink(type = "output", split = FALSE)
[18:03:58.271]         if (TRUE) {
[18:03:58.271]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.271]         }
[18:03:58.271]         else {
[18:03:58.271]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.271]         }
[18:03:58.271]         base::close(...future.stdout)
[18:03:58.271]         ...future.stdout <- NULL
[18:03:58.271]     }
[18:03:58.271]     ...future.result$conditions <- ...future.conditions
[18:03:58.271]     ...future.result$finished <- base::Sys.time()
[18:03:58.271]     ...future.result
[18:03:58.271] }
[18:03:58.274] assign_globals() ...
[18:03:58.274] List of 2
[18:03:58.274]  $ rr: int 2
[18:03:58.274]  $ cc: int 1
[18:03:58.274]  - attr(*, "where")=List of 2
[18:03:58.274]   ..$ rr:<environment: R_EmptyEnv> 
[18:03:58.274]   ..$ cc:<environment: R_EmptyEnv> 
[18:03:58.274]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:58.274]  - attr(*, "resolved")= logi FALSE
[18:03:58.274]  - attr(*, "total_size")= num 112
[18:03:58.274]  - attr(*, "already-done")= logi TRUE
[18:03:58.281] - copied ‘rr’ to environment
[18:03:58.281] - copied ‘cc’ to environment
[18:03:58.282] assign_globals() ... done
[18:03:58.282] plan(): Setting new future strategy stack:
[18:03:58.282] List of future strategies:
[18:03:58.282] 1. sequential:
[18:03:58.282]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.282]    - tweaked: FALSE
[18:03:58.282]    - call: NULL
[18:03:58.283] plan(): nbrOfWorkers() = 1
[18:03:58.285] plan(): Setting new future strategy stack:
[18:03:58.285] List of future strategies:
[18:03:58.285] 1. sequential:
[18:03:58.285]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.285]    - tweaked: FALSE
[18:03:58.285]    - call: future::plan("sequential")
[18:03:58.286] plan(): nbrOfWorkers() = 1
[18:03:58.287] SequentialFuture started (and completed)
[18:03:58.287] - Launch lazy future ... done
[18:03:58.287] run() for ‘SequentialFuture’ ... done
[18:03:58.288] run() for ‘Future’ ...
[18:03:58.288] - state: ‘created’
[18:03:58.288] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.289] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.289] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.289]   - Field: ‘label’
[18:03:58.289]   - Field: ‘local’
[18:03:58.290]   - Field: ‘owner’
[18:03:58.290]   - Field: ‘envir’
[18:03:58.293]   - Field: ‘packages’
[18:03:58.293]   - Field: ‘gc’
[18:03:58.293]   - Field: ‘conditions’
[18:03:58.293]   - Field: ‘expr’
[18:03:58.293]   - Field: ‘uuid’
[18:03:58.294]   - Field: ‘seed’
[18:03:58.294]   - Field: ‘version’
[18:03:58.294]   - Field: ‘result’
[18:03:58.294]   - Field: ‘asynchronous’
[18:03:58.294]   - Field: ‘calls’
[18:03:58.295]   - Field: ‘globals’
[18:03:58.295]   - Field: ‘stdout’
[18:03:58.295]   - Field: ‘earlySignal’
[18:03:58.295]   - Field: ‘lazy’
[18:03:58.295]   - Field: ‘state’
[18:03:58.296] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.296] - Launch lazy future ...
[18:03:58.296] Packages needed by the future expression (n = 0): <none>
[18:03:58.297] Packages needed by future strategies (n = 0): <none>
[18:03:58.297] {
[18:03:58.297]     {
[18:03:58.297]         {
[18:03:58.297]             ...future.startTime <- base::Sys.time()
[18:03:58.297]             {
[18:03:58.297]                 {
[18:03:58.297]                   {
[18:03:58.297]                     base::local({
[18:03:58.297]                       has_future <- base::requireNamespace("future", 
[18:03:58.297]                         quietly = TRUE)
[18:03:58.297]                       if (has_future) {
[18:03:58.297]                         ns <- base::getNamespace("future")
[18:03:58.297]                         version <- ns[[".package"]][["version"]]
[18:03:58.297]                         if (is.null(version)) 
[18:03:58.297]                           version <- utils::packageVersion("future")
[18:03:58.297]                       }
[18:03:58.297]                       else {
[18:03:58.297]                         version <- NULL
[18:03:58.297]                       }
[18:03:58.297]                       if (!has_future || version < "1.8.0") {
[18:03:58.297]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.297]                           "", base::R.version$version.string), 
[18:03:58.297]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.297]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.297]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.297]                             "release", "version")], collapse = " "), 
[18:03:58.297]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.297]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.297]                           info)
[18:03:58.297]                         info <- base::paste(info, collapse = "; ")
[18:03:58.297]                         if (!has_future) {
[18:03:58.297]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.297]                             info)
[18:03:58.297]                         }
[18:03:58.297]                         else {
[18:03:58.297]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.297]                             info, version)
[18:03:58.297]                         }
[18:03:58.297]                         base::stop(msg)
[18:03:58.297]                       }
[18:03:58.297]                     })
[18:03:58.297]                   }
[18:03:58.297]                   ...future.strategy.old <- future::plan("list")
[18:03:58.297]                   options(future.plan = NULL)
[18:03:58.297]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.297]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.297]                 }
[18:03:58.297]                 ...future.workdir <- getwd()
[18:03:58.297]             }
[18:03:58.297]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.297]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.297]         }
[18:03:58.297]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.297]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.297]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.297]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.297]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.297]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.297]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.297]             base::names(...future.oldOptions))
[18:03:58.297]     }
[18:03:58.297]     if (FALSE) {
[18:03:58.297]     }
[18:03:58.297]     else {
[18:03:58.297]         if (TRUE) {
[18:03:58.297]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.297]                 open = "w")
[18:03:58.297]         }
[18:03:58.297]         else {
[18:03:58.297]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.297]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.297]         }
[18:03:58.297]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.297]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.297]             base::sink(type = "output", split = FALSE)
[18:03:58.297]             base::close(...future.stdout)
[18:03:58.297]         }, add = TRUE)
[18:03:58.297]     }
[18:03:58.297]     ...future.frame <- base::sys.nframe()
[18:03:58.297]     ...future.conditions <- base::list()
[18:03:58.297]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.297]     if (FALSE) {
[18:03:58.297]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.297]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.297]     }
[18:03:58.297]     ...future.result <- base::tryCatch({
[18:03:58.297]         base::withCallingHandlers({
[18:03:58.297]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[18:03:58.297]                 rr, cc)))
[18:03:58.297]             future::FutureResult(value = ...future.value$value, 
[18:03:58.297]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.297]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.297]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.297]                     ...future.globalenv.names))
[18:03:58.297]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.297]         }, condition = base::local({
[18:03:58.297]             c <- base::c
[18:03:58.297]             inherits <- base::inherits
[18:03:58.297]             invokeRestart <- base::invokeRestart
[18:03:58.297]             length <- base::length
[18:03:58.297]             list <- base::list
[18:03:58.297]             seq.int <- base::seq.int
[18:03:58.297]             signalCondition <- base::signalCondition
[18:03:58.297]             sys.calls <- base::sys.calls
[18:03:58.297]             `[[` <- base::`[[`
[18:03:58.297]             `+` <- base::`+`
[18:03:58.297]             `<<-` <- base::`<<-`
[18:03:58.297]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.297]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.297]                   3L)]
[18:03:58.297]             }
[18:03:58.297]             function(cond) {
[18:03:58.297]                 is_error <- inherits(cond, "error")
[18:03:58.297]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.297]                   NULL)
[18:03:58.297]                 if (is_error) {
[18:03:58.297]                   sessionInformation <- function() {
[18:03:58.297]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.297]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.297]                       search = base::search(), system = base::Sys.info())
[18:03:58.297]                   }
[18:03:58.297]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.297]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.297]                     cond$call), session = sessionInformation(), 
[18:03:58.297]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.297]                   signalCondition(cond)
[18:03:58.297]                 }
[18:03:58.297]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.297]                 "immediateCondition"))) {
[18:03:58.297]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.297]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.297]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.297]                   if (TRUE && !signal) {
[18:03:58.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.297]                     {
[18:03:58.297]                       inherits <- base::inherits
[18:03:58.297]                       invokeRestart <- base::invokeRestart
[18:03:58.297]                       is.null <- base::is.null
[18:03:58.297]                       muffled <- FALSE
[18:03:58.297]                       if (inherits(cond, "message")) {
[18:03:58.297]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.297]                         if (muffled) 
[18:03:58.297]                           invokeRestart("muffleMessage")
[18:03:58.297]                       }
[18:03:58.297]                       else if (inherits(cond, "warning")) {
[18:03:58.297]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.297]                         if (muffled) 
[18:03:58.297]                           invokeRestart("muffleWarning")
[18:03:58.297]                       }
[18:03:58.297]                       else if (inherits(cond, "condition")) {
[18:03:58.297]                         if (!is.null(pattern)) {
[18:03:58.297]                           computeRestarts <- base::computeRestarts
[18:03:58.297]                           grepl <- base::grepl
[18:03:58.297]                           restarts <- computeRestarts(cond)
[18:03:58.297]                           for (restart in restarts) {
[18:03:58.297]                             name <- restart$name
[18:03:58.297]                             if (is.null(name)) 
[18:03:58.297]                               next
[18:03:58.297]                             if (!grepl(pattern, name)) 
[18:03:58.297]                               next
[18:03:58.297]                             invokeRestart(restart)
[18:03:58.297]                             muffled <- TRUE
[18:03:58.297]                             break
[18:03:58.297]                           }
[18:03:58.297]                         }
[18:03:58.297]                       }
[18:03:58.297]                       invisible(muffled)
[18:03:58.297]                     }
[18:03:58.297]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.297]                   }
[18:03:58.297]                 }
[18:03:58.297]                 else {
[18:03:58.297]                   if (TRUE) {
[18:03:58.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.297]                     {
[18:03:58.297]                       inherits <- base::inherits
[18:03:58.297]                       invokeRestart <- base::invokeRestart
[18:03:58.297]                       is.null <- base::is.null
[18:03:58.297]                       muffled <- FALSE
[18:03:58.297]                       if (inherits(cond, "message")) {
[18:03:58.297]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.297]                         if (muffled) 
[18:03:58.297]                           invokeRestart("muffleMessage")
[18:03:58.297]                       }
[18:03:58.297]                       else if (inherits(cond, "warning")) {
[18:03:58.297]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.297]                         if (muffled) 
[18:03:58.297]                           invokeRestart("muffleWarning")
[18:03:58.297]                       }
[18:03:58.297]                       else if (inherits(cond, "condition")) {
[18:03:58.297]                         if (!is.null(pattern)) {
[18:03:58.297]                           computeRestarts <- base::computeRestarts
[18:03:58.297]                           grepl <- base::grepl
[18:03:58.297]                           restarts <- computeRestarts(cond)
[18:03:58.297]                           for (restart in restarts) {
[18:03:58.297]                             name <- restart$name
[18:03:58.297]                             if (is.null(name)) 
[18:03:58.297]                               next
[18:03:58.297]                             if (!grepl(pattern, name)) 
[18:03:58.297]                               next
[18:03:58.297]                             invokeRestart(restart)
[18:03:58.297]                             muffled <- TRUE
[18:03:58.297]                             break
[18:03:58.297]                           }
[18:03:58.297]                         }
[18:03:58.297]                       }
[18:03:58.297]                       invisible(muffled)
[18:03:58.297]                     }
[18:03:58.297]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.297]                   }
[18:03:58.297]                 }
[18:03:58.297]             }
[18:03:58.297]         }))
[18:03:58.297]     }, error = function(ex) {
[18:03:58.297]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.297]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.297]                 ...future.rng), started = ...future.startTime, 
[18:03:58.297]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.297]             version = "1.8"), class = "FutureResult")
[18:03:58.297]     }, finally = {
[18:03:58.297]         if (!identical(...future.workdir, getwd())) 
[18:03:58.297]             setwd(...future.workdir)
[18:03:58.297]         {
[18:03:58.297]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.297]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.297]             }
[18:03:58.297]             base::options(...future.oldOptions)
[18:03:58.297]             if (.Platform$OS.type == "windows") {
[18:03:58.297]                 old_names <- names(...future.oldEnvVars)
[18:03:58.297]                 envs <- base::Sys.getenv()
[18:03:58.297]                 names <- names(envs)
[18:03:58.297]                 common <- intersect(names, old_names)
[18:03:58.297]                 added <- setdiff(names, old_names)
[18:03:58.297]                 removed <- setdiff(old_names, names)
[18:03:58.297]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.297]                   envs[common]]
[18:03:58.297]                 NAMES <- toupper(changed)
[18:03:58.297]                 args <- list()
[18:03:58.297]                 for (kk in seq_along(NAMES)) {
[18:03:58.297]                   name <- changed[[kk]]
[18:03:58.297]                   NAME <- NAMES[[kk]]
[18:03:58.297]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.297]                     next
[18:03:58.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.297]                 }
[18:03:58.297]                 NAMES <- toupper(added)
[18:03:58.297]                 for (kk in seq_along(NAMES)) {
[18:03:58.297]                   name <- added[[kk]]
[18:03:58.297]                   NAME <- NAMES[[kk]]
[18:03:58.297]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.297]                     next
[18:03:58.297]                   args[[name]] <- ""
[18:03:58.297]                 }
[18:03:58.297]                 NAMES <- toupper(removed)
[18:03:58.297]                 for (kk in seq_along(NAMES)) {
[18:03:58.297]                   name <- removed[[kk]]
[18:03:58.297]                   NAME <- NAMES[[kk]]
[18:03:58.297]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.297]                     next
[18:03:58.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.297]                 }
[18:03:58.297]                 if (length(args) > 0) 
[18:03:58.297]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.297]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.297]             }
[18:03:58.297]             else {
[18:03:58.297]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.297]             }
[18:03:58.297]             {
[18:03:58.297]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.297]                   0L) {
[18:03:58.297]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.297]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.297]                   base::options(opts)
[18:03:58.297]                 }
[18:03:58.297]                 {
[18:03:58.297]                   {
[18:03:58.297]                     NULL
[18:03:58.297]                     RNGkind("Mersenne-Twister")
[18:03:58.297]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.297]                       inherits = FALSE)
[18:03:58.297]                   }
[18:03:58.297]                   options(future.plan = NULL)
[18:03:58.297]                   if (is.na(NA_character_)) 
[18:03:58.297]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.297]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.297]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.297]                     .init = FALSE)
[18:03:58.297]                 }
[18:03:58.297]             }
[18:03:58.297]         }
[18:03:58.297]     })
[18:03:58.297]     if (TRUE) {
[18:03:58.297]         base::sink(type = "output", split = FALSE)
[18:03:58.297]         if (TRUE) {
[18:03:58.297]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.297]         }
[18:03:58.297]         else {
[18:03:58.297]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.297]         }
[18:03:58.297]         base::close(...future.stdout)
[18:03:58.297]         ...future.stdout <- NULL
[18:03:58.297]     }
[18:03:58.297]     ...future.result$conditions <- ...future.conditions
[18:03:58.297]     ...future.result$finished <- base::Sys.time()
[18:03:58.297]     ...future.result
[18:03:58.297] }
[18:03:58.301] assign_globals() ...
[18:03:58.301] List of 2
[18:03:58.301]  $ rr: int 3
[18:03:58.301]  $ cc: int 1
[18:03:58.301]  - attr(*, "where")=List of 2
[18:03:58.301]   ..$ rr:<environment: R_EmptyEnv> 
[18:03:58.301]   ..$ cc:<environment: R_EmptyEnv> 
[18:03:58.301]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:58.301]  - attr(*, "resolved")= logi FALSE
[18:03:58.301]  - attr(*, "total_size")= num 112
[18:03:58.301]  - attr(*, "already-done")= logi TRUE
[18:03:58.308] - copied ‘rr’ to environment
[18:03:58.308] - copied ‘cc’ to environment
[18:03:58.308] assign_globals() ... done
[18:03:58.309] plan(): Setting new future strategy stack:
[18:03:58.309] List of future strategies:
[18:03:58.309] 1. sequential:
[18:03:58.309]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.309]    - tweaked: FALSE
[18:03:58.309]    - call: NULL
[18:03:58.310] plan(): nbrOfWorkers() = 1
[18:03:58.311] plan(): Setting new future strategy stack:
[18:03:58.312] List of future strategies:
[18:03:58.312] 1. sequential:
[18:03:58.312]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.312]    - tweaked: FALSE
[18:03:58.312]    - call: future::plan("sequential")
[18:03:58.313] plan(): nbrOfWorkers() = 1
[18:03:58.313] SequentialFuture started (and completed)
[18:03:58.314] - Launch lazy future ... done
[18:03:58.314] run() for ‘SequentialFuture’ ... done
[18:03:58.314] run() for ‘Future’ ...
[18:03:58.315] - state: ‘created’
[18:03:58.315] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.315] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.316] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.316]   - Field: ‘label’
[18:03:58.316]   - Field: ‘local’
[18:03:58.316]   - Field: ‘owner’
[18:03:58.317]   - Field: ‘envir’
[18:03:58.317]   - Field: ‘packages’
[18:03:58.317]   - Field: ‘gc’
[18:03:58.317]   - Field: ‘conditions’
[18:03:58.317]   - Field: ‘expr’
[18:03:58.318]   - Field: ‘uuid’
[18:03:58.318]   - Field: ‘seed’
[18:03:58.318]   - Field: ‘version’
[18:03:58.318]   - Field: ‘result’
[18:03:58.318]   - Field: ‘asynchronous’
[18:03:58.318]   - Field: ‘calls’
[18:03:58.319]   - Field: ‘globals’
[18:03:58.319]   - Field: ‘stdout’
[18:03:58.319]   - Field: ‘earlySignal’
[18:03:58.319]   - Field: ‘lazy’
[18:03:58.319]   - Field: ‘state’
[18:03:58.320] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.320] - Launch lazy future ...
[18:03:58.320] Packages needed by the future expression (n = 0): <none>
[18:03:58.321] Packages needed by future strategies (n = 0): <none>
[18:03:58.321] {
[18:03:58.321]     {
[18:03:58.321]         {
[18:03:58.321]             ...future.startTime <- base::Sys.time()
[18:03:58.321]             {
[18:03:58.321]                 {
[18:03:58.321]                   {
[18:03:58.321]                     base::local({
[18:03:58.321]                       has_future <- base::requireNamespace("future", 
[18:03:58.321]                         quietly = TRUE)
[18:03:58.321]                       if (has_future) {
[18:03:58.321]                         ns <- base::getNamespace("future")
[18:03:58.321]                         version <- ns[[".package"]][["version"]]
[18:03:58.321]                         if (is.null(version)) 
[18:03:58.321]                           version <- utils::packageVersion("future")
[18:03:58.321]                       }
[18:03:58.321]                       else {
[18:03:58.321]                         version <- NULL
[18:03:58.321]                       }
[18:03:58.321]                       if (!has_future || version < "1.8.0") {
[18:03:58.321]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.321]                           "", base::R.version$version.string), 
[18:03:58.321]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.321]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.321]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.321]                             "release", "version")], collapse = " "), 
[18:03:58.321]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.321]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.321]                           info)
[18:03:58.321]                         info <- base::paste(info, collapse = "; ")
[18:03:58.321]                         if (!has_future) {
[18:03:58.321]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.321]                             info)
[18:03:58.321]                         }
[18:03:58.321]                         else {
[18:03:58.321]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.321]                             info, version)
[18:03:58.321]                         }
[18:03:58.321]                         base::stop(msg)
[18:03:58.321]                       }
[18:03:58.321]                     })
[18:03:58.321]                   }
[18:03:58.321]                   ...future.strategy.old <- future::plan("list")
[18:03:58.321]                   options(future.plan = NULL)
[18:03:58.321]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.321]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.321]                 }
[18:03:58.321]                 ...future.workdir <- getwd()
[18:03:58.321]             }
[18:03:58.321]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.321]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.321]         }
[18:03:58.321]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.321]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.321]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.321]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.321]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.321]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.321]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.321]             base::names(...future.oldOptions))
[18:03:58.321]     }
[18:03:58.321]     if (FALSE) {
[18:03:58.321]     }
[18:03:58.321]     else {
[18:03:58.321]         if (TRUE) {
[18:03:58.321]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.321]                 open = "w")
[18:03:58.321]         }
[18:03:58.321]         else {
[18:03:58.321]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.321]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.321]         }
[18:03:58.321]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.321]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.321]             base::sink(type = "output", split = FALSE)
[18:03:58.321]             base::close(...future.stdout)
[18:03:58.321]         }, add = TRUE)
[18:03:58.321]     }
[18:03:58.321]     ...future.frame <- base::sys.nframe()
[18:03:58.321]     ...future.conditions <- base::list()
[18:03:58.321]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.321]     if (FALSE) {
[18:03:58.321]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.321]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.321]     }
[18:03:58.321]     ...future.result <- base::tryCatch({
[18:03:58.321]         base::withCallingHandlers({
[18:03:58.321]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[18:03:58.321]                 rr, cc)))
[18:03:58.321]             future::FutureResult(value = ...future.value$value, 
[18:03:58.321]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.321]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.321]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.321]                     ...future.globalenv.names))
[18:03:58.321]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.321]         }, condition = base::local({
[18:03:58.321]             c <- base::c
[18:03:58.321]             inherits <- base::inherits
[18:03:58.321]             invokeRestart <- base::invokeRestart
[18:03:58.321]             length <- base::length
[18:03:58.321]             list <- base::list
[18:03:58.321]             seq.int <- base::seq.int
[18:03:58.321]             signalCondition <- base::signalCondition
[18:03:58.321]             sys.calls <- base::sys.calls
[18:03:58.321]             `[[` <- base::`[[`
[18:03:58.321]             `+` <- base::`+`
[18:03:58.321]             `<<-` <- base::`<<-`
[18:03:58.321]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.321]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.321]                   3L)]
[18:03:58.321]             }
[18:03:58.321]             function(cond) {
[18:03:58.321]                 is_error <- inherits(cond, "error")
[18:03:58.321]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.321]                   NULL)
[18:03:58.321]                 if (is_error) {
[18:03:58.321]                   sessionInformation <- function() {
[18:03:58.321]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.321]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.321]                       search = base::search(), system = base::Sys.info())
[18:03:58.321]                   }
[18:03:58.321]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.321]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.321]                     cond$call), session = sessionInformation(), 
[18:03:58.321]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.321]                   signalCondition(cond)
[18:03:58.321]                 }
[18:03:58.321]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.321]                 "immediateCondition"))) {
[18:03:58.321]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.321]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.321]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.321]                   if (TRUE && !signal) {
[18:03:58.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.321]                     {
[18:03:58.321]                       inherits <- base::inherits
[18:03:58.321]                       invokeRestart <- base::invokeRestart
[18:03:58.321]                       is.null <- base::is.null
[18:03:58.321]                       muffled <- FALSE
[18:03:58.321]                       if (inherits(cond, "message")) {
[18:03:58.321]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.321]                         if (muffled) 
[18:03:58.321]                           invokeRestart("muffleMessage")
[18:03:58.321]                       }
[18:03:58.321]                       else if (inherits(cond, "warning")) {
[18:03:58.321]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.321]                         if (muffled) 
[18:03:58.321]                           invokeRestart("muffleWarning")
[18:03:58.321]                       }
[18:03:58.321]                       else if (inherits(cond, "condition")) {
[18:03:58.321]                         if (!is.null(pattern)) {
[18:03:58.321]                           computeRestarts <- base::computeRestarts
[18:03:58.321]                           grepl <- base::grepl
[18:03:58.321]                           restarts <- computeRestarts(cond)
[18:03:58.321]                           for (restart in restarts) {
[18:03:58.321]                             name <- restart$name
[18:03:58.321]                             if (is.null(name)) 
[18:03:58.321]                               next
[18:03:58.321]                             if (!grepl(pattern, name)) 
[18:03:58.321]                               next
[18:03:58.321]                             invokeRestart(restart)
[18:03:58.321]                             muffled <- TRUE
[18:03:58.321]                             break
[18:03:58.321]                           }
[18:03:58.321]                         }
[18:03:58.321]                       }
[18:03:58.321]                       invisible(muffled)
[18:03:58.321]                     }
[18:03:58.321]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.321]                   }
[18:03:58.321]                 }
[18:03:58.321]                 else {
[18:03:58.321]                   if (TRUE) {
[18:03:58.321]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.321]                     {
[18:03:58.321]                       inherits <- base::inherits
[18:03:58.321]                       invokeRestart <- base::invokeRestart
[18:03:58.321]                       is.null <- base::is.null
[18:03:58.321]                       muffled <- FALSE
[18:03:58.321]                       if (inherits(cond, "message")) {
[18:03:58.321]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.321]                         if (muffled) 
[18:03:58.321]                           invokeRestart("muffleMessage")
[18:03:58.321]                       }
[18:03:58.321]                       else if (inherits(cond, "warning")) {
[18:03:58.321]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.321]                         if (muffled) 
[18:03:58.321]                           invokeRestart("muffleWarning")
[18:03:58.321]                       }
[18:03:58.321]                       else if (inherits(cond, "condition")) {
[18:03:58.321]                         if (!is.null(pattern)) {
[18:03:58.321]                           computeRestarts <- base::computeRestarts
[18:03:58.321]                           grepl <- base::grepl
[18:03:58.321]                           restarts <- computeRestarts(cond)
[18:03:58.321]                           for (restart in restarts) {
[18:03:58.321]                             name <- restart$name
[18:03:58.321]                             if (is.null(name)) 
[18:03:58.321]                               next
[18:03:58.321]                             if (!grepl(pattern, name)) 
[18:03:58.321]                               next
[18:03:58.321]                             invokeRestart(restart)
[18:03:58.321]                             muffled <- TRUE
[18:03:58.321]                             break
[18:03:58.321]                           }
[18:03:58.321]                         }
[18:03:58.321]                       }
[18:03:58.321]                       invisible(muffled)
[18:03:58.321]                     }
[18:03:58.321]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.321]                   }
[18:03:58.321]                 }
[18:03:58.321]             }
[18:03:58.321]         }))
[18:03:58.321]     }, error = function(ex) {
[18:03:58.321]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.321]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.321]                 ...future.rng), started = ...future.startTime, 
[18:03:58.321]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.321]             version = "1.8"), class = "FutureResult")
[18:03:58.321]     }, finally = {
[18:03:58.321]         if (!identical(...future.workdir, getwd())) 
[18:03:58.321]             setwd(...future.workdir)
[18:03:58.321]         {
[18:03:58.321]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.321]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.321]             }
[18:03:58.321]             base::options(...future.oldOptions)
[18:03:58.321]             if (.Platform$OS.type == "windows") {
[18:03:58.321]                 old_names <- names(...future.oldEnvVars)
[18:03:58.321]                 envs <- base::Sys.getenv()
[18:03:58.321]                 names <- names(envs)
[18:03:58.321]                 common <- intersect(names, old_names)
[18:03:58.321]                 added <- setdiff(names, old_names)
[18:03:58.321]                 removed <- setdiff(old_names, names)
[18:03:58.321]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.321]                   envs[common]]
[18:03:58.321]                 NAMES <- toupper(changed)
[18:03:58.321]                 args <- list()
[18:03:58.321]                 for (kk in seq_along(NAMES)) {
[18:03:58.321]                   name <- changed[[kk]]
[18:03:58.321]                   NAME <- NAMES[[kk]]
[18:03:58.321]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.321]                     next
[18:03:58.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.321]                 }
[18:03:58.321]                 NAMES <- toupper(added)
[18:03:58.321]                 for (kk in seq_along(NAMES)) {
[18:03:58.321]                   name <- added[[kk]]
[18:03:58.321]                   NAME <- NAMES[[kk]]
[18:03:58.321]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.321]                     next
[18:03:58.321]                   args[[name]] <- ""
[18:03:58.321]                 }
[18:03:58.321]                 NAMES <- toupper(removed)
[18:03:58.321]                 for (kk in seq_along(NAMES)) {
[18:03:58.321]                   name <- removed[[kk]]
[18:03:58.321]                   NAME <- NAMES[[kk]]
[18:03:58.321]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.321]                     next
[18:03:58.321]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.321]                 }
[18:03:58.321]                 if (length(args) > 0) 
[18:03:58.321]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.321]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.321]             }
[18:03:58.321]             else {
[18:03:58.321]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.321]             }
[18:03:58.321]             {
[18:03:58.321]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.321]                   0L) {
[18:03:58.321]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.321]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.321]                   base::options(opts)
[18:03:58.321]                 }
[18:03:58.321]                 {
[18:03:58.321]                   {
[18:03:58.321]                     NULL
[18:03:58.321]                     RNGkind("Mersenne-Twister")
[18:03:58.321]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.321]                       inherits = FALSE)
[18:03:58.321]                   }
[18:03:58.321]                   options(future.plan = NULL)
[18:03:58.321]                   if (is.na(NA_character_)) 
[18:03:58.321]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.321]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.321]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.321]                     .init = FALSE)
[18:03:58.321]                 }
[18:03:58.321]             }
[18:03:58.321]         }
[18:03:58.321]     })
[18:03:58.321]     if (TRUE) {
[18:03:58.321]         base::sink(type = "output", split = FALSE)
[18:03:58.321]         if (TRUE) {
[18:03:58.321]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.321]         }
[18:03:58.321]         else {
[18:03:58.321]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.321]         }
[18:03:58.321]         base::close(...future.stdout)
[18:03:58.321]         ...future.stdout <- NULL
[18:03:58.321]     }
[18:03:58.321]     ...future.result$conditions <- ...future.conditions
[18:03:58.321]     ...future.result$finished <- base::Sys.time()
[18:03:58.321]     ...future.result
[18:03:58.321] }
[18:03:58.325] assign_globals() ...
[18:03:58.325] List of 2
[18:03:58.325]  $ rr: int 1
[18:03:58.325]  $ cc: int 2
[18:03:58.325]  - attr(*, "where")=List of 2
[18:03:58.325]   ..$ rr:<environment: R_EmptyEnv> 
[18:03:58.325]   ..$ cc:<environment: R_EmptyEnv> 
[18:03:58.325]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:58.325]  - attr(*, "resolved")= logi FALSE
[18:03:58.325]  - attr(*, "total_size")= num 112
[18:03:58.325]  - attr(*, "already-done")= logi TRUE
[18:03:58.332] - copied ‘rr’ to environment
[18:03:58.332] - copied ‘cc’ to environment
[18:03:58.332] assign_globals() ... done
[18:03:58.333] plan(): Setting new future strategy stack:
[18:03:58.333] List of future strategies:
[18:03:58.333] 1. sequential:
[18:03:58.333]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.333]    - tweaked: FALSE
[18:03:58.333]    - call: NULL
[18:03:58.334] plan(): nbrOfWorkers() = 1
[18:03:58.335] plan(): Setting new future strategy stack:
[18:03:58.336] List of future strategies:
[18:03:58.336] 1. sequential:
[18:03:58.336]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.336]    - tweaked: FALSE
[18:03:58.336]    - call: future::plan("sequential")
[18:03:58.337] plan(): nbrOfWorkers() = 1
[18:03:58.337] SequentialFuture started (and completed)
[18:03:58.338] - Launch lazy future ... done
[18:03:58.338] run() for ‘SequentialFuture’ ... done
[18:03:58.338] run() for ‘Future’ ...
[18:03:58.338] - state: ‘created’
[18:03:58.339] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.339] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.339] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.340]   - Field: ‘label’
[18:03:58.340]   - Field: ‘local’
[18:03:58.340]   - Field: ‘owner’
[18:03:58.340]   - Field: ‘envir’
[18:03:58.341]   - Field: ‘packages’
[18:03:58.341]   - Field: ‘gc’
[18:03:58.342]   - Field: ‘conditions’
[18:03:58.342]   - Field: ‘expr’
[18:03:58.342]   - Field: ‘uuid’
[18:03:58.342]   - Field: ‘seed’
[18:03:58.342]   - Field: ‘version’
[18:03:58.343]   - Field: ‘result’
[18:03:58.343]   - Field: ‘asynchronous’
[18:03:58.345]   - Field: ‘calls’
[18:03:58.345]   - Field: ‘globals’
[18:03:58.345]   - Field: ‘stdout’
[18:03:58.346]   - Field: ‘earlySignal’
[18:03:58.346]   - Field: ‘lazy’
[18:03:58.346]   - Field: ‘state’
[18:03:58.347] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.347] - Launch lazy future ...
[18:03:58.347] Packages needed by the future expression (n = 0): <none>
[18:03:58.348] Packages needed by future strategies (n = 0): <none>
[18:03:58.348] {
[18:03:58.348]     {
[18:03:58.348]         {
[18:03:58.348]             ...future.startTime <- base::Sys.time()
[18:03:58.348]             {
[18:03:58.348]                 {
[18:03:58.348]                   {
[18:03:58.348]                     base::local({
[18:03:58.348]                       has_future <- base::requireNamespace("future", 
[18:03:58.348]                         quietly = TRUE)
[18:03:58.348]                       if (has_future) {
[18:03:58.348]                         ns <- base::getNamespace("future")
[18:03:58.348]                         version <- ns[[".package"]][["version"]]
[18:03:58.348]                         if (is.null(version)) 
[18:03:58.348]                           version <- utils::packageVersion("future")
[18:03:58.348]                       }
[18:03:58.348]                       else {
[18:03:58.348]                         version <- NULL
[18:03:58.348]                       }
[18:03:58.348]                       if (!has_future || version < "1.8.0") {
[18:03:58.348]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.348]                           "", base::R.version$version.string), 
[18:03:58.348]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.348]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.348]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.348]                             "release", "version")], collapse = " "), 
[18:03:58.348]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.348]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.348]                           info)
[18:03:58.348]                         info <- base::paste(info, collapse = "; ")
[18:03:58.348]                         if (!has_future) {
[18:03:58.348]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.348]                             info)
[18:03:58.348]                         }
[18:03:58.348]                         else {
[18:03:58.348]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.348]                             info, version)
[18:03:58.348]                         }
[18:03:58.348]                         base::stop(msg)
[18:03:58.348]                       }
[18:03:58.348]                     })
[18:03:58.348]                   }
[18:03:58.348]                   ...future.strategy.old <- future::plan("list")
[18:03:58.348]                   options(future.plan = NULL)
[18:03:58.348]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.348]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.348]                 }
[18:03:58.348]                 ...future.workdir <- getwd()
[18:03:58.348]             }
[18:03:58.348]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.348]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.348]         }
[18:03:58.348]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.348]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.348]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.348]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.348]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.348]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.348]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.348]             base::names(...future.oldOptions))
[18:03:58.348]     }
[18:03:58.348]     if (FALSE) {
[18:03:58.348]     }
[18:03:58.348]     else {
[18:03:58.348]         if (TRUE) {
[18:03:58.348]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.348]                 open = "w")
[18:03:58.348]         }
[18:03:58.348]         else {
[18:03:58.348]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.348]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.348]         }
[18:03:58.348]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.348]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.348]             base::sink(type = "output", split = FALSE)
[18:03:58.348]             base::close(...future.stdout)
[18:03:58.348]         }, add = TRUE)
[18:03:58.348]     }
[18:03:58.348]     ...future.frame <- base::sys.nframe()
[18:03:58.348]     ...future.conditions <- base::list()
[18:03:58.348]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.348]     if (FALSE) {
[18:03:58.348]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.348]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.348]     }
[18:03:58.348]     ...future.result <- base::tryCatch({
[18:03:58.348]         base::withCallingHandlers({
[18:03:58.348]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[18:03:58.348]                 rr, cc)))
[18:03:58.348]             future::FutureResult(value = ...future.value$value, 
[18:03:58.348]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.348]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.348]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.348]                     ...future.globalenv.names))
[18:03:58.348]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.348]         }, condition = base::local({
[18:03:58.348]             c <- base::c
[18:03:58.348]             inherits <- base::inherits
[18:03:58.348]             invokeRestart <- base::invokeRestart
[18:03:58.348]             length <- base::length
[18:03:58.348]             list <- base::list
[18:03:58.348]             seq.int <- base::seq.int
[18:03:58.348]             signalCondition <- base::signalCondition
[18:03:58.348]             sys.calls <- base::sys.calls
[18:03:58.348]             `[[` <- base::`[[`
[18:03:58.348]             `+` <- base::`+`
[18:03:58.348]             `<<-` <- base::`<<-`
[18:03:58.348]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.348]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.348]                   3L)]
[18:03:58.348]             }
[18:03:58.348]             function(cond) {
[18:03:58.348]                 is_error <- inherits(cond, "error")
[18:03:58.348]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.348]                   NULL)
[18:03:58.348]                 if (is_error) {
[18:03:58.348]                   sessionInformation <- function() {
[18:03:58.348]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.348]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.348]                       search = base::search(), system = base::Sys.info())
[18:03:58.348]                   }
[18:03:58.348]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.348]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.348]                     cond$call), session = sessionInformation(), 
[18:03:58.348]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.348]                   signalCondition(cond)
[18:03:58.348]                 }
[18:03:58.348]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.348]                 "immediateCondition"))) {
[18:03:58.348]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.348]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.348]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.348]                   if (TRUE && !signal) {
[18:03:58.348]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.348]                     {
[18:03:58.348]                       inherits <- base::inherits
[18:03:58.348]                       invokeRestart <- base::invokeRestart
[18:03:58.348]                       is.null <- base::is.null
[18:03:58.348]                       muffled <- FALSE
[18:03:58.348]                       if (inherits(cond, "message")) {
[18:03:58.348]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.348]                         if (muffled) 
[18:03:58.348]                           invokeRestart("muffleMessage")
[18:03:58.348]                       }
[18:03:58.348]                       else if (inherits(cond, "warning")) {
[18:03:58.348]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.348]                         if (muffled) 
[18:03:58.348]                           invokeRestart("muffleWarning")
[18:03:58.348]                       }
[18:03:58.348]                       else if (inherits(cond, "condition")) {
[18:03:58.348]                         if (!is.null(pattern)) {
[18:03:58.348]                           computeRestarts <- base::computeRestarts
[18:03:58.348]                           grepl <- base::grepl
[18:03:58.348]                           restarts <- computeRestarts(cond)
[18:03:58.348]                           for (restart in restarts) {
[18:03:58.348]                             name <- restart$name
[18:03:58.348]                             if (is.null(name)) 
[18:03:58.348]                               next
[18:03:58.348]                             if (!grepl(pattern, name)) 
[18:03:58.348]                               next
[18:03:58.348]                             invokeRestart(restart)
[18:03:58.348]                             muffled <- TRUE
[18:03:58.348]                             break
[18:03:58.348]                           }
[18:03:58.348]                         }
[18:03:58.348]                       }
[18:03:58.348]                       invisible(muffled)
[18:03:58.348]                     }
[18:03:58.348]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.348]                   }
[18:03:58.348]                 }
[18:03:58.348]                 else {
[18:03:58.348]                   if (TRUE) {
[18:03:58.348]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.348]                     {
[18:03:58.348]                       inherits <- base::inherits
[18:03:58.348]                       invokeRestart <- base::invokeRestart
[18:03:58.348]                       is.null <- base::is.null
[18:03:58.348]                       muffled <- FALSE
[18:03:58.348]                       if (inherits(cond, "message")) {
[18:03:58.348]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.348]                         if (muffled) 
[18:03:58.348]                           invokeRestart("muffleMessage")
[18:03:58.348]                       }
[18:03:58.348]                       else if (inherits(cond, "warning")) {
[18:03:58.348]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.348]                         if (muffled) 
[18:03:58.348]                           invokeRestart("muffleWarning")
[18:03:58.348]                       }
[18:03:58.348]                       else if (inherits(cond, "condition")) {
[18:03:58.348]                         if (!is.null(pattern)) {
[18:03:58.348]                           computeRestarts <- base::computeRestarts
[18:03:58.348]                           grepl <- base::grepl
[18:03:58.348]                           restarts <- computeRestarts(cond)
[18:03:58.348]                           for (restart in restarts) {
[18:03:58.348]                             name <- restart$name
[18:03:58.348]                             if (is.null(name)) 
[18:03:58.348]                               next
[18:03:58.348]                             if (!grepl(pattern, name)) 
[18:03:58.348]                               next
[18:03:58.348]                             invokeRestart(restart)
[18:03:58.348]                             muffled <- TRUE
[18:03:58.348]                             break
[18:03:58.348]                           }
[18:03:58.348]                         }
[18:03:58.348]                       }
[18:03:58.348]                       invisible(muffled)
[18:03:58.348]                     }
[18:03:58.348]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.348]                   }
[18:03:58.348]                 }
[18:03:58.348]             }
[18:03:58.348]         }))
[18:03:58.348]     }, error = function(ex) {
[18:03:58.348]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.348]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.348]                 ...future.rng), started = ...future.startTime, 
[18:03:58.348]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.348]             version = "1.8"), class = "FutureResult")
[18:03:58.348]     }, finally = {
[18:03:58.348]         if (!identical(...future.workdir, getwd())) 
[18:03:58.348]             setwd(...future.workdir)
[18:03:58.348]         {
[18:03:58.348]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.348]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.348]             }
[18:03:58.348]             base::options(...future.oldOptions)
[18:03:58.348]             if (.Platform$OS.type == "windows") {
[18:03:58.348]                 old_names <- names(...future.oldEnvVars)
[18:03:58.348]                 envs <- base::Sys.getenv()
[18:03:58.348]                 names <- names(envs)
[18:03:58.348]                 common <- intersect(names, old_names)
[18:03:58.348]                 added <- setdiff(names, old_names)
[18:03:58.348]                 removed <- setdiff(old_names, names)
[18:03:58.348]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.348]                   envs[common]]
[18:03:58.348]                 NAMES <- toupper(changed)
[18:03:58.348]                 args <- list()
[18:03:58.348]                 for (kk in seq_along(NAMES)) {
[18:03:58.348]                   name <- changed[[kk]]
[18:03:58.348]                   NAME <- NAMES[[kk]]
[18:03:58.348]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.348]                     next
[18:03:58.348]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.348]                 }
[18:03:58.348]                 NAMES <- toupper(added)
[18:03:58.348]                 for (kk in seq_along(NAMES)) {
[18:03:58.348]                   name <- added[[kk]]
[18:03:58.348]                   NAME <- NAMES[[kk]]
[18:03:58.348]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.348]                     next
[18:03:58.348]                   args[[name]] <- ""
[18:03:58.348]                 }
[18:03:58.348]                 NAMES <- toupper(removed)
[18:03:58.348]                 for (kk in seq_along(NAMES)) {
[18:03:58.348]                   name <- removed[[kk]]
[18:03:58.348]                   NAME <- NAMES[[kk]]
[18:03:58.348]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.348]                     next
[18:03:58.348]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.348]                 }
[18:03:58.348]                 if (length(args) > 0) 
[18:03:58.348]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.348]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.348]             }
[18:03:58.348]             else {
[18:03:58.348]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.348]             }
[18:03:58.348]             {
[18:03:58.348]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.348]                   0L) {
[18:03:58.348]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.348]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.348]                   base::options(opts)
[18:03:58.348]                 }
[18:03:58.348]                 {
[18:03:58.348]                   {
[18:03:58.348]                     NULL
[18:03:58.348]                     RNGkind("Mersenne-Twister")
[18:03:58.348]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.348]                       inherits = FALSE)
[18:03:58.348]                   }
[18:03:58.348]                   options(future.plan = NULL)
[18:03:58.348]                   if (is.na(NA_character_)) 
[18:03:58.348]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.348]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.348]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.348]                     .init = FALSE)
[18:03:58.348]                 }
[18:03:58.348]             }
[18:03:58.348]         }
[18:03:58.348]     })
[18:03:58.348]     if (TRUE) {
[18:03:58.348]         base::sink(type = "output", split = FALSE)
[18:03:58.348]         if (TRUE) {
[18:03:58.348]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.348]         }
[18:03:58.348]         else {
[18:03:58.348]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.348]         }
[18:03:58.348]         base::close(...future.stdout)
[18:03:58.348]         ...future.stdout <- NULL
[18:03:58.348]     }
[18:03:58.348]     ...future.result$conditions <- ...future.conditions
[18:03:58.348]     ...future.result$finished <- base::Sys.time()
[18:03:58.348]     ...future.result
[18:03:58.348] }
[18:03:58.352] assign_globals() ...
[18:03:58.352] List of 2
[18:03:58.352]  $ rr: int 2
[18:03:58.352]  $ cc: int 2
[18:03:58.352]  - attr(*, "where")=List of 2
[18:03:58.352]   ..$ rr:<environment: R_EmptyEnv> 
[18:03:58.352]   ..$ cc:<environment: R_EmptyEnv> 
[18:03:58.352]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:58.352]  - attr(*, "resolved")= logi FALSE
[18:03:58.352]  - attr(*, "total_size")= num 112
[18:03:58.352]  - attr(*, "already-done")= logi TRUE
[18:03:58.359] - copied ‘rr’ to environment
[18:03:58.359] - copied ‘cc’ to environment
[18:03:58.360] assign_globals() ... done
[18:03:58.360] plan(): Setting new future strategy stack:
[18:03:58.360] List of future strategies:
[18:03:58.360] 1. sequential:
[18:03:58.360]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.360]    - tweaked: FALSE
[18:03:58.360]    - call: NULL
[18:03:58.361] plan(): nbrOfWorkers() = 1
[18:03:58.366] plan(): Setting new future strategy stack:
[18:03:58.366] List of future strategies:
[18:03:58.366] 1. sequential:
[18:03:58.366]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.366]    - tweaked: FALSE
[18:03:58.366]    - call: future::plan("sequential")
[18:03:58.367] plan(): nbrOfWorkers() = 1
[18:03:58.367] SequentialFuture started (and completed)
[18:03:58.368] - Launch lazy future ... done
[18:03:58.368] run() for ‘SequentialFuture’ ... done
[18:03:58.368] run() for ‘Future’ ...
[18:03:58.369] - state: ‘created’
[18:03:58.369] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:58.369] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:58.370] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:58.370]   - Field: ‘label’
[18:03:58.372]   - Field: ‘local’
[18:03:58.373]   - Field: ‘owner’
[18:03:58.373]   - Field: ‘envir’
[18:03:58.373]   - Field: ‘packages’
[18:03:58.373]   - Field: ‘gc’
[18:03:58.373]   - Field: ‘conditions’
[18:03:58.374]   - Field: ‘expr’
[18:03:58.376]   - Field: ‘uuid’
[18:03:58.376]   - Field: ‘seed’
[18:03:58.376]   - Field: ‘version’
[18:03:58.376]   - Field: ‘result’
[18:03:58.377]   - Field: ‘asynchronous’
[18:03:58.377]   - Field: ‘calls’
[18:03:58.377]   - Field: ‘globals’
[18:03:58.377]   - Field: ‘stdout’
[18:03:58.378]   - Field: ‘earlySignal’
[18:03:58.378]   - Field: ‘lazy’
[18:03:58.378]   - Field: ‘state’
[18:03:58.379] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:58.379] - Launch lazy future ...
[18:03:58.379] Packages needed by the future expression (n = 0): <none>
[18:03:58.379] Packages needed by future strategies (n = 0): <none>
[18:03:58.380] {
[18:03:58.380]     {
[18:03:58.380]         {
[18:03:58.380]             ...future.startTime <- base::Sys.time()
[18:03:58.380]             {
[18:03:58.380]                 {
[18:03:58.380]                   {
[18:03:58.380]                     base::local({
[18:03:58.380]                       has_future <- base::requireNamespace("future", 
[18:03:58.380]                         quietly = TRUE)
[18:03:58.380]                       if (has_future) {
[18:03:58.380]                         ns <- base::getNamespace("future")
[18:03:58.380]                         version <- ns[[".package"]][["version"]]
[18:03:58.380]                         if (is.null(version)) 
[18:03:58.380]                           version <- utils::packageVersion("future")
[18:03:58.380]                       }
[18:03:58.380]                       else {
[18:03:58.380]                         version <- NULL
[18:03:58.380]                       }
[18:03:58.380]                       if (!has_future || version < "1.8.0") {
[18:03:58.380]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:58.380]                           "", base::R.version$version.string), 
[18:03:58.380]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:58.380]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:58.380]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:58.380]                             "release", "version")], collapse = " "), 
[18:03:58.380]                           hostname = base::Sys.info()[["nodename"]])
[18:03:58.380]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:58.380]                           info)
[18:03:58.380]                         info <- base::paste(info, collapse = "; ")
[18:03:58.380]                         if (!has_future) {
[18:03:58.380]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:58.380]                             info)
[18:03:58.380]                         }
[18:03:58.380]                         else {
[18:03:58.380]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:58.380]                             info, version)
[18:03:58.380]                         }
[18:03:58.380]                         base::stop(msg)
[18:03:58.380]                       }
[18:03:58.380]                     })
[18:03:58.380]                   }
[18:03:58.380]                   ...future.strategy.old <- future::plan("list")
[18:03:58.380]                   options(future.plan = NULL)
[18:03:58.380]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.380]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:58.380]                 }
[18:03:58.380]                 ...future.workdir <- getwd()
[18:03:58.380]             }
[18:03:58.380]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:58.380]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:58.380]         }
[18:03:58.380]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:58.380]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:58.380]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:58.380]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:58.380]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:58.380]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:58.380]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:58.380]             base::names(...future.oldOptions))
[18:03:58.380]     }
[18:03:58.380]     if (FALSE) {
[18:03:58.380]     }
[18:03:58.380]     else {
[18:03:58.380]         if (TRUE) {
[18:03:58.380]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:58.380]                 open = "w")
[18:03:58.380]         }
[18:03:58.380]         else {
[18:03:58.380]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:58.380]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:58.380]         }
[18:03:58.380]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:58.380]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:58.380]             base::sink(type = "output", split = FALSE)
[18:03:58.380]             base::close(...future.stdout)
[18:03:58.380]         }, add = TRUE)
[18:03:58.380]     }
[18:03:58.380]     ...future.frame <- base::sys.nframe()
[18:03:58.380]     ...future.conditions <- base::list()
[18:03:58.380]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:58.380]     if (FALSE) {
[18:03:58.380]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:58.380]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:58.380]     }
[18:03:58.380]     ...future.result <- base::tryCatch({
[18:03:58.380]         base::withCallingHandlers({
[18:03:58.380]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[18:03:58.380]                 rr, cc)))
[18:03:58.380]             future::FutureResult(value = ...future.value$value, 
[18:03:58.380]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.380]                   ...future.rng), globalenv = if (FALSE) 
[18:03:58.380]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:58.380]                     ...future.globalenv.names))
[18:03:58.380]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:58.380]         }, condition = base::local({
[18:03:58.380]             c <- base::c
[18:03:58.380]             inherits <- base::inherits
[18:03:58.380]             invokeRestart <- base::invokeRestart
[18:03:58.380]             length <- base::length
[18:03:58.380]             list <- base::list
[18:03:58.380]             seq.int <- base::seq.int
[18:03:58.380]             signalCondition <- base::signalCondition
[18:03:58.380]             sys.calls <- base::sys.calls
[18:03:58.380]             `[[` <- base::`[[`
[18:03:58.380]             `+` <- base::`+`
[18:03:58.380]             `<<-` <- base::`<<-`
[18:03:58.380]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:58.380]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:58.380]                   3L)]
[18:03:58.380]             }
[18:03:58.380]             function(cond) {
[18:03:58.380]                 is_error <- inherits(cond, "error")
[18:03:58.380]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:58.380]                   NULL)
[18:03:58.380]                 if (is_error) {
[18:03:58.380]                   sessionInformation <- function() {
[18:03:58.380]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:58.380]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:58.380]                       search = base::search(), system = base::Sys.info())
[18:03:58.380]                   }
[18:03:58.380]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.380]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:58.380]                     cond$call), session = sessionInformation(), 
[18:03:58.380]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:58.380]                   signalCondition(cond)
[18:03:58.380]                 }
[18:03:58.380]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:58.380]                 "immediateCondition"))) {
[18:03:58.380]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:58.380]                   ...future.conditions[[length(...future.conditions) + 
[18:03:58.380]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:58.380]                   if (TRUE && !signal) {
[18:03:58.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.380]                     {
[18:03:58.380]                       inherits <- base::inherits
[18:03:58.380]                       invokeRestart <- base::invokeRestart
[18:03:58.380]                       is.null <- base::is.null
[18:03:58.380]                       muffled <- FALSE
[18:03:58.380]                       if (inherits(cond, "message")) {
[18:03:58.380]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.380]                         if (muffled) 
[18:03:58.380]                           invokeRestart("muffleMessage")
[18:03:58.380]                       }
[18:03:58.380]                       else if (inherits(cond, "warning")) {
[18:03:58.380]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.380]                         if (muffled) 
[18:03:58.380]                           invokeRestart("muffleWarning")
[18:03:58.380]                       }
[18:03:58.380]                       else if (inherits(cond, "condition")) {
[18:03:58.380]                         if (!is.null(pattern)) {
[18:03:58.380]                           computeRestarts <- base::computeRestarts
[18:03:58.380]                           grepl <- base::grepl
[18:03:58.380]                           restarts <- computeRestarts(cond)
[18:03:58.380]                           for (restart in restarts) {
[18:03:58.380]                             name <- restart$name
[18:03:58.380]                             if (is.null(name)) 
[18:03:58.380]                               next
[18:03:58.380]                             if (!grepl(pattern, name)) 
[18:03:58.380]                               next
[18:03:58.380]                             invokeRestart(restart)
[18:03:58.380]                             muffled <- TRUE
[18:03:58.380]                             break
[18:03:58.380]                           }
[18:03:58.380]                         }
[18:03:58.380]                       }
[18:03:58.380]                       invisible(muffled)
[18:03:58.380]                     }
[18:03:58.380]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.380]                   }
[18:03:58.380]                 }
[18:03:58.380]                 else {
[18:03:58.380]                   if (TRUE) {
[18:03:58.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:58.380]                     {
[18:03:58.380]                       inherits <- base::inherits
[18:03:58.380]                       invokeRestart <- base::invokeRestart
[18:03:58.380]                       is.null <- base::is.null
[18:03:58.380]                       muffled <- FALSE
[18:03:58.380]                       if (inherits(cond, "message")) {
[18:03:58.380]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:58.380]                         if (muffled) 
[18:03:58.380]                           invokeRestart("muffleMessage")
[18:03:58.380]                       }
[18:03:58.380]                       else if (inherits(cond, "warning")) {
[18:03:58.380]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:58.380]                         if (muffled) 
[18:03:58.380]                           invokeRestart("muffleWarning")
[18:03:58.380]                       }
[18:03:58.380]                       else if (inherits(cond, "condition")) {
[18:03:58.380]                         if (!is.null(pattern)) {
[18:03:58.380]                           computeRestarts <- base::computeRestarts
[18:03:58.380]                           grepl <- base::grepl
[18:03:58.380]                           restarts <- computeRestarts(cond)
[18:03:58.380]                           for (restart in restarts) {
[18:03:58.380]                             name <- restart$name
[18:03:58.380]                             if (is.null(name)) 
[18:03:58.380]                               next
[18:03:58.380]                             if (!grepl(pattern, name)) 
[18:03:58.380]                               next
[18:03:58.380]                             invokeRestart(restart)
[18:03:58.380]                             muffled <- TRUE
[18:03:58.380]                             break
[18:03:58.380]                           }
[18:03:58.380]                         }
[18:03:58.380]                       }
[18:03:58.380]                       invisible(muffled)
[18:03:58.380]                     }
[18:03:58.380]                     muffleCondition(cond, pattern = "^muffle")
[18:03:58.380]                   }
[18:03:58.380]                 }
[18:03:58.380]             }
[18:03:58.380]         }))
[18:03:58.380]     }, error = function(ex) {
[18:03:58.380]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:58.380]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:58.380]                 ...future.rng), started = ...future.startTime, 
[18:03:58.380]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:58.380]             version = "1.8"), class = "FutureResult")
[18:03:58.380]     }, finally = {
[18:03:58.380]         if (!identical(...future.workdir, getwd())) 
[18:03:58.380]             setwd(...future.workdir)
[18:03:58.380]         {
[18:03:58.380]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:58.380]                 ...future.oldOptions$nwarnings <- NULL
[18:03:58.380]             }
[18:03:58.380]             base::options(...future.oldOptions)
[18:03:58.380]             if (.Platform$OS.type == "windows") {
[18:03:58.380]                 old_names <- names(...future.oldEnvVars)
[18:03:58.380]                 envs <- base::Sys.getenv()
[18:03:58.380]                 names <- names(envs)
[18:03:58.380]                 common <- intersect(names, old_names)
[18:03:58.380]                 added <- setdiff(names, old_names)
[18:03:58.380]                 removed <- setdiff(old_names, names)
[18:03:58.380]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:58.380]                   envs[common]]
[18:03:58.380]                 NAMES <- toupper(changed)
[18:03:58.380]                 args <- list()
[18:03:58.380]                 for (kk in seq_along(NAMES)) {
[18:03:58.380]                   name <- changed[[kk]]
[18:03:58.380]                   NAME <- NAMES[[kk]]
[18:03:58.380]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.380]                     next
[18:03:58.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.380]                 }
[18:03:58.380]                 NAMES <- toupper(added)
[18:03:58.380]                 for (kk in seq_along(NAMES)) {
[18:03:58.380]                   name <- added[[kk]]
[18:03:58.380]                   NAME <- NAMES[[kk]]
[18:03:58.380]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.380]                     next
[18:03:58.380]                   args[[name]] <- ""
[18:03:58.380]                 }
[18:03:58.380]                 NAMES <- toupper(removed)
[18:03:58.380]                 for (kk in seq_along(NAMES)) {
[18:03:58.380]                   name <- removed[[kk]]
[18:03:58.380]                   NAME <- NAMES[[kk]]
[18:03:58.380]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:58.380]                     next
[18:03:58.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:58.380]                 }
[18:03:58.380]                 if (length(args) > 0) 
[18:03:58.380]                   base::do.call(base::Sys.setenv, args = args)
[18:03:58.380]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:58.380]             }
[18:03:58.380]             else {
[18:03:58.380]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:58.380]             }
[18:03:58.380]             {
[18:03:58.380]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:58.380]                   0L) {
[18:03:58.380]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:58.380]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:58.380]                   base::options(opts)
[18:03:58.380]                 }
[18:03:58.380]                 {
[18:03:58.380]                   {
[18:03:58.380]                     NULL
[18:03:58.380]                     RNGkind("Mersenne-Twister")
[18:03:58.380]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:58.380]                       inherits = FALSE)
[18:03:58.380]                   }
[18:03:58.380]                   options(future.plan = NULL)
[18:03:58.380]                   if (is.na(NA_character_)) 
[18:03:58.380]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:58.380]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:58.380]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:58.380]                     .init = FALSE)
[18:03:58.380]                 }
[18:03:58.380]             }
[18:03:58.380]         }
[18:03:58.380]     })
[18:03:58.380]     if (TRUE) {
[18:03:58.380]         base::sink(type = "output", split = FALSE)
[18:03:58.380]         if (TRUE) {
[18:03:58.380]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:58.380]         }
[18:03:58.380]         else {
[18:03:58.380]             ...future.result["stdout"] <- base::list(NULL)
[18:03:58.380]         }
[18:03:58.380]         base::close(...future.stdout)
[18:03:58.380]         ...future.stdout <- NULL
[18:03:58.380]     }
[18:03:58.380]     ...future.result$conditions <- ...future.conditions
[18:03:58.380]     ...future.result$finished <- base::Sys.time()
[18:03:58.380]     ...future.result
[18:03:58.380] }
[18:03:58.384] assign_globals() ...
[18:03:58.384] List of 2
[18:03:58.384]  $ rr: int 3
[18:03:58.384]  $ cc: int 2
[18:03:58.384]  - attr(*, "where")=List of 2
[18:03:58.384]   ..$ rr:<environment: R_EmptyEnv> 
[18:03:58.384]   ..$ cc:<environment: R_EmptyEnv> 
[18:03:58.384]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:03:58.384]  - attr(*, "resolved")= logi FALSE
[18:03:58.384]  - attr(*, "total_size")= num 112
[18:03:58.384]  - attr(*, "already-done")= logi TRUE
[18:03:58.391] - copied ‘rr’ to environment
[18:03:58.391] - copied ‘cc’ to environment
[18:03:58.391] assign_globals() ... done
[18:03:58.392] plan(): Setting new future strategy stack:
[18:03:58.392] List of future strategies:
[18:03:58.392] 1. sequential:
[18:03:58.392]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.392]    - tweaked: FALSE
[18:03:58.392]    - call: NULL
[18:03:58.393] plan(): nbrOfWorkers() = 1
[18:03:58.395] plan(): Setting new future strategy stack:
[18:03:58.395] List of future strategies:
[18:03:58.395] 1. sequential:
[18:03:58.395]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.395]    - tweaked: FALSE
[18:03:58.395]    - call: future::plan("sequential")
[18:03:58.396] plan(): nbrOfWorkers() = 1
[18:03:58.396] SequentialFuture started (and completed)
[18:03:58.397] - Launch lazy future ... done
[18:03:58.397] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[18:03:58.398] plan(): Setting new future strategy stack:
[18:03:58.399] List of future strategies:
[18:03:58.399] 1. FutureStrategy:
[18:03:58.399]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:58.399]    - tweaked: FALSE
[18:03:58.399]    - call: future::plan(oplan)
[18:03:58.423] plan(): nbrOfWorkers() = 1
> 
