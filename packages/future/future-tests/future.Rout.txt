
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:18.908] plan(): Setting new future strategy stack:
[17:02:18.909] List of future strategies:
[17:02:18.909] 1. sequential:
[17:02:18.909]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.909]    - tweaked: FALSE
[17:02:18.909]    - call: future::plan("sequential")
[17:02:18.920] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[17:02:18.934] getGlobalsAndPackages() ...
[17:02:18.934] Searching for globals...
[17:02:18.937] - globals found: [1] ‘{’
[17:02:18.937] Searching for globals ... DONE
[17:02:18.937] Resolving globals: FALSE
[17:02:18.938] 
[17:02:18.938] 
[17:02:18.938] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[17:02:18.939] resolved() for ‘Future’ ...
[17:02:18.939] - state: ‘created’
[17:02:18.939] - run: TRUE
[17:02:18.939] - run() ...
[17:02:18.939] run() for ‘Future’ ...
[17:02:18.939] - state: ‘created’
[17:02:18.939] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:18.940] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:18.940] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:18.940]   - Field: ‘label’
[17:02:18.940]   - Field: ‘local’
[17:02:18.940]   - Field: ‘owner’
[17:02:18.940]   - Field: ‘envir’
[17:02:18.940]   - Field: ‘packages’
[17:02:18.940]   - Field: ‘gc’
[17:02:18.941]   - Field: ‘conditions’
[17:02:18.941]   - Field: ‘expr’
[17:02:18.941]   - Field: ‘uuid’
[17:02:18.941]   - Field: ‘seed’
[17:02:18.941]   - Field: ‘version’
[17:02:18.941]   - Field: ‘result’
[17:02:18.941]   - Field: ‘asynchronous’
[17:02:18.941]   - Field: ‘calls’
[17:02:18.941]   - Field: ‘globals’
[17:02:18.941]   - Field: ‘stdout’
[17:02:18.941]   - Field: ‘earlySignal’
[17:02:18.942]   - Field: ‘lazy’
[17:02:18.942]   - Field: ‘state’
[17:02:18.942] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:18.942] - Launch lazy future ...
[17:02:18.943] Packages needed by the future expression (n = 0): <none>
[17:02:18.943] Packages needed by future strategies (n = 0): <none>
[17:02:18.943] {
[17:02:18.943]     {
[17:02:18.943]         {
[17:02:18.943]             ...future.startTime <- base::Sys.time()
[17:02:18.943]             {
[17:02:18.943]                 {
[17:02:18.943]                   {
[17:02:18.943]                     base::local({
[17:02:18.943]                       has_future <- base::requireNamespace("future", 
[17:02:18.943]                         quietly = TRUE)
[17:02:18.943]                       if (has_future) {
[17:02:18.943]                         ns <- base::getNamespace("future")
[17:02:18.943]                         version <- ns[[".package"]][["version"]]
[17:02:18.943]                         if (is.null(version)) 
[17:02:18.943]                           version <- utils::packageVersion("future")
[17:02:18.943]                       }
[17:02:18.943]                       else {
[17:02:18.943]                         version <- NULL
[17:02:18.943]                       }
[17:02:18.943]                       if (!has_future || version < "1.8.0") {
[17:02:18.943]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:18.943]                           "", base::R.version$version.string), 
[17:02:18.943]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:18.943]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:18.943]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:18.943]                             "release", "version")], collapse = " "), 
[17:02:18.943]                           hostname = base::Sys.info()[["nodename"]])
[17:02:18.943]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:18.943]                           info)
[17:02:18.943]                         info <- base::paste(info, collapse = "; ")
[17:02:18.943]                         if (!has_future) {
[17:02:18.943]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:18.943]                             info)
[17:02:18.943]                         }
[17:02:18.943]                         else {
[17:02:18.943]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:18.943]                             info, version)
[17:02:18.943]                         }
[17:02:18.943]                         base::stop(msg)
[17:02:18.943]                       }
[17:02:18.943]                     })
[17:02:18.943]                   }
[17:02:18.943]                   ...future.strategy.old <- future::plan("list")
[17:02:18.943]                   options(future.plan = NULL)
[17:02:18.943]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:18.943]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:18.943]                 }
[17:02:18.943]                 ...future.workdir <- getwd()
[17:02:18.943]             }
[17:02:18.943]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:18.943]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:18.943]         }
[17:02:18.943]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:18.943]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:18.943]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:18.943]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:18.943]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:18.943]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:18.943]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:18.943]             base::names(...future.oldOptions))
[17:02:18.943]     }
[17:02:18.943]     if (FALSE) {
[17:02:18.943]     }
[17:02:18.943]     else {
[17:02:18.943]         if (TRUE) {
[17:02:18.943]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:18.943]                 open = "w")
[17:02:18.943]         }
[17:02:18.943]         else {
[17:02:18.943]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:18.943]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:18.943]         }
[17:02:18.943]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:18.943]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:18.943]             base::sink(type = "output", split = FALSE)
[17:02:18.943]             base::close(...future.stdout)
[17:02:18.943]         }, add = TRUE)
[17:02:18.943]     }
[17:02:18.943]     ...future.frame <- base::sys.nframe()
[17:02:18.943]     ...future.conditions <- base::list()
[17:02:18.943]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:18.943]     if (FALSE) {
[17:02:18.943]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:18.943]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:18.943]     }
[17:02:18.943]     ...future.result <- base::tryCatch({
[17:02:18.943]         base::withCallingHandlers({
[17:02:18.943]             ...future.value <- base::withVisible(base::local({
[17:02:18.943]                 42L
[17:02:18.943]             }))
[17:02:18.943]             future::FutureResult(value = ...future.value$value, 
[17:02:18.943]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:18.943]                   ...future.rng), globalenv = if (FALSE) 
[17:02:18.943]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:18.943]                     ...future.globalenv.names))
[17:02:18.943]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:18.943]         }, condition = base::local({
[17:02:18.943]             c <- base::c
[17:02:18.943]             inherits <- base::inherits
[17:02:18.943]             invokeRestart <- base::invokeRestart
[17:02:18.943]             length <- base::length
[17:02:18.943]             list <- base::list
[17:02:18.943]             seq.int <- base::seq.int
[17:02:18.943]             signalCondition <- base::signalCondition
[17:02:18.943]             sys.calls <- base::sys.calls
[17:02:18.943]             `[[` <- base::`[[`
[17:02:18.943]             `+` <- base::`+`
[17:02:18.943]             `<<-` <- base::`<<-`
[17:02:18.943]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:18.943]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:18.943]                   3L)]
[17:02:18.943]             }
[17:02:18.943]             function(cond) {
[17:02:18.943]                 is_error <- inherits(cond, "error")
[17:02:18.943]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:18.943]                   NULL)
[17:02:18.943]                 if (is_error) {
[17:02:18.943]                   sessionInformation <- function() {
[17:02:18.943]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:18.943]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:18.943]                       search = base::search(), system = base::Sys.info())
[17:02:18.943]                   }
[17:02:18.943]                   ...future.conditions[[length(...future.conditions) + 
[17:02:18.943]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:18.943]                     cond$call), session = sessionInformation(), 
[17:02:18.943]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:18.943]                   signalCondition(cond)
[17:02:18.943]                 }
[17:02:18.943]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:18.943]                 "immediateCondition"))) {
[17:02:18.943]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:18.943]                   ...future.conditions[[length(...future.conditions) + 
[17:02:18.943]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:18.943]                   if (TRUE && !signal) {
[17:02:18.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:18.943]                     {
[17:02:18.943]                       inherits <- base::inherits
[17:02:18.943]                       invokeRestart <- base::invokeRestart
[17:02:18.943]                       is.null <- base::is.null
[17:02:18.943]                       muffled <- FALSE
[17:02:18.943]                       if (inherits(cond, "message")) {
[17:02:18.943]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:18.943]                         if (muffled) 
[17:02:18.943]                           invokeRestart("muffleMessage")
[17:02:18.943]                       }
[17:02:18.943]                       else if (inherits(cond, "warning")) {
[17:02:18.943]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:18.943]                         if (muffled) 
[17:02:18.943]                           invokeRestart("muffleWarning")
[17:02:18.943]                       }
[17:02:18.943]                       else if (inherits(cond, "condition")) {
[17:02:18.943]                         if (!is.null(pattern)) {
[17:02:18.943]                           computeRestarts <- base::computeRestarts
[17:02:18.943]                           grepl <- base::grepl
[17:02:18.943]                           restarts <- computeRestarts(cond)
[17:02:18.943]                           for (restart in restarts) {
[17:02:18.943]                             name <- restart$name
[17:02:18.943]                             if (is.null(name)) 
[17:02:18.943]                               next
[17:02:18.943]                             if (!grepl(pattern, name)) 
[17:02:18.943]                               next
[17:02:18.943]                             invokeRestart(restart)
[17:02:18.943]                             muffled <- TRUE
[17:02:18.943]                             break
[17:02:18.943]                           }
[17:02:18.943]                         }
[17:02:18.943]                       }
[17:02:18.943]                       invisible(muffled)
[17:02:18.943]                     }
[17:02:18.943]                     muffleCondition(cond, pattern = "^muffle")
[17:02:18.943]                   }
[17:02:18.943]                 }
[17:02:18.943]                 else {
[17:02:18.943]                   if (TRUE) {
[17:02:18.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:18.943]                     {
[17:02:18.943]                       inherits <- base::inherits
[17:02:18.943]                       invokeRestart <- base::invokeRestart
[17:02:18.943]                       is.null <- base::is.null
[17:02:18.943]                       muffled <- FALSE
[17:02:18.943]                       if (inherits(cond, "message")) {
[17:02:18.943]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:18.943]                         if (muffled) 
[17:02:18.943]                           invokeRestart("muffleMessage")
[17:02:18.943]                       }
[17:02:18.943]                       else if (inherits(cond, "warning")) {
[17:02:18.943]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:18.943]                         if (muffled) 
[17:02:18.943]                           invokeRestart("muffleWarning")
[17:02:18.943]                       }
[17:02:18.943]                       else if (inherits(cond, "condition")) {
[17:02:18.943]                         if (!is.null(pattern)) {
[17:02:18.943]                           computeRestarts <- base::computeRestarts
[17:02:18.943]                           grepl <- base::grepl
[17:02:18.943]                           restarts <- computeRestarts(cond)
[17:02:18.943]                           for (restart in restarts) {
[17:02:18.943]                             name <- restart$name
[17:02:18.943]                             if (is.null(name)) 
[17:02:18.943]                               next
[17:02:18.943]                             if (!grepl(pattern, name)) 
[17:02:18.943]                               next
[17:02:18.943]                             invokeRestart(restart)
[17:02:18.943]                             muffled <- TRUE
[17:02:18.943]                             break
[17:02:18.943]                           }
[17:02:18.943]                         }
[17:02:18.943]                       }
[17:02:18.943]                       invisible(muffled)
[17:02:18.943]                     }
[17:02:18.943]                     muffleCondition(cond, pattern = "^muffle")
[17:02:18.943]                   }
[17:02:18.943]                 }
[17:02:18.943]             }
[17:02:18.943]         }))
[17:02:18.943]     }, error = function(ex) {
[17:02:18.943]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:18.943]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:18.943]                 ...future.rng), started = ...future.startTime, 
[17:02:18.943]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:18.943]             version = "1.8"), class = "FutureResult")
[17:02:18.943]     }, finally = {
[17:02:18.943]         if (!identical(...future.workdir, getwd())) 
[17:02:18.943]             setwd(...future.workdir)
[17:02:18.943]         {
[17:02:18.943]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:18.943]                 ...future.oldOptions$nwarnings <- NULL
[17:02:18.943]             }
[17:02:18.943]             base::options(...future.oldOptions)
[17:02:18.943]             if (.Platform$OS.type == "windows") {
[17:02:18.943]                 old_names <- names(...future.oldEnvVars)
[17:02:18.943]                 envs <- base::Sys.getenv()
[17:02:18.943]                 names <- names(envs)
[17:02:18.943]                 common <- intersect(names, old_names)
[17:02:18.943]                 added <- setdiff(names, old_names)
[17:02:18.943]                 removed <- setdiff(old_names, names)
[17:02:18.943]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:18.943]                   envs[common]]
[17:02:18.943]                 NAMES <- toupper(changed)
[17:02:18.943]                 args <- list()
[17:02:18.943]                 for (kk in seq_along(NAMES)) {
[17:02:18.943]                   name <- changed[[kk]]
[17:02:18.943]                   NAME <- NAMES[[kk]]
[17:02:18.943]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.943]                     next
[17:02:18.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:18.943]                 }
[17:02:18.943]                 NAMES <- toupper(added)
[17:02:18.943]                 for (kk in seq_along(NAMES)) {
[17:02:18.943]                   name <- added[[kk]]
[17:02:18.943]                   NAME <- NAMES[[kk]]
[17:02:18.943]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.943]                     next
[17:02:18.943]                   args[[name]] <- ""
[17:02:18.943]                 }
[17:02:18.943]                 NAMES <- toupper(removed)
[17:02:18.943]                 for (kk in seq_along(NAMES)) {
[17:02:18.943]                   name <- removed[[kk]]
[17:02:18.943]                   NAME <- NAMES[[kk]]
[17:02:18.943]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.943]                     next
[17:02:18.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:18.943]                 }
[17:02:18.943]                 if (length(args) > 0) 
[17:02:18.943]                   base::do.call(base::Sys.setenv, args = args)
[17:02:18.943]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:18.943]             }
[17:02:18.943]             else {
[17:02:18.943]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:18.943]             }
[17:02:18.943]             {
[17:02:18.943]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:18.943]                   0L) {
[17:02:18.943]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:18.943]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:18.943]                   base::options(opts)
[17:02:18.943]                 }
[17:02:18.943]                 {
[17:02:18.943]                   {
[17:02:18.943]                     NULL
[17:02:18.943]                     RNGkind("Mersenne-Twister")
[17:02:18.943]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:18.943]                       inherits = FALSE)
[17:02:18.943]                   }
[17:02:18.943]                   options(future.plan = NULL)
[17:02:18.943]                   if (is.na(NA_character_)) 
[17:02:18.943]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:18.943]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:18.943]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:18.943]                     .init = FALSE)
[17:02:18.943]                 }
[17:02:18.943]             }
[17:02:18.943]         }
[17:02:18.943]     })
[17:02:18.943]     if (TRUE) {
[17:02:18.943]         base::sink(type = "output", split = FALSE)
[17:02:18.943]         if (TRUE) {
[17:02:18.943]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:18.943]         }
[17:02:18.943]         else {
[17:02:18.943]             ...future.result["stdout"] <- base::list(NULL)
[17:02:18.943]         }
[17:02:18.943]         base::close(...future.stdout)
[17:02:18.943]         ...future.stdout <- NULL
[17:02:18.943]     }
[17:02:18.943]     ...future.result$conditions <- ...future.conditions
[17:02:18.943]     ...future.result$finished <- base::Sys.time()
[17:02:18.943]     ...future.result
[17:02:18.943] }
[17:02:18.945] plan(): Setting new future strategy stack:
[17:02:18.946] List of future strategies:
[17:02:18.946] 1. sequential:
[17:02:18.946]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.946]    - tweaked: FALSE
[17:02:18.946]    - call: NULL
[17:02:18.946] plan(): nbrOfWorkers() = 1
[17:02:18.947] plan(): Setting new future strategy stack:
[17:02:18.947] List of future strategies:
[17:02:18.947] 1. sequential:
[17:02:18.947]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.947]    - tweaked: FALSE
[17:02:18.947]    - call: future::plan("sequential")
[17:02:18.948] plan(): nbrOfWorkers() = 1
[17:02:18.948] SequentialFuture started (and completed)
[17:02:18.949] - Launch lazy future ... done
[17:02:18.949] run() for ‘SequentialFuture’ ... done
[17:02:18.949] - run() ... done
[17:02:18.949] - resolved() ...
[17:02:18.949] resolved() for ‘SequentialFuture’ ...
[17:02:18.949] - state: ‘finished’
[17:02:18.949] - run: TRUE
[17:02:18.949] - result: ‘FutureResult’
[17:02:18.949] resolved() for ‘SequentialFuture’ ... done
[17:02:18.949] - resolved: TRUE
[17:02:18.950] - resolved() ... done
[17:02:18.950] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[17:02:18.950] getGlobalsAndPackages() ...
[17:02:18.950] Searching for globals...
[17:02:18.951] 
[17:02:18.951] Searching for globals ... DONE
[17:02:18.951] - globals: [0] <none>
[17:02:18.951] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 89041d08-8f0a-39b7-6e4c-9f6c895137ed
Class: ‘Future’, ‘environment’
> y <- value(f)
[17:02:18.952] run() for ‘Future’ ...
[17:02:18.952] - state: ‘created’
[17:02:18.952] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:18.952] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:18.953] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:18.953]   - Field: ‘label’
[17:02:18.953]   - Field: ‘local’
[17:02:18.953]   - Field: ‘owner’
[17:02:18.953]   - Field: ‘envir’
[17:02:18.953]   - Field: ‘packages’
[17:02:18.953]   - Field: ‘gc’
[17:02:18.953]   - Field: ‘conditions’
[17:02:18.953]   - Field: ‘expr’
[17:02:18.953]   - Field: ‘uuid’
[17:02:18.953]   - Field: ‘seed’
[17:02:18.954]   - Field: ‘version’
[17:02:18.954]   - Field: ‘result’
[17:02:18.954]   - Field: ‘asynchronous’
[17:02:18.954]   - Field: ‘calls’
[17:02:18.954]   - Field: ‘globals’
[17:02:18.954]   - Field: ‘stdout’
[17:02:18.954]   - Field: ‘earlySignal’
[17:02:18.954]   - Field: ‘lazy’
[17:02:18.954]   - Field: ‘state’
[17:02:18.954] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:18.954] - Launch lazy future ...
[17:02:18.955] Packages needed by the future expression (n = 0): <none>
[17:02:18.955] Packages needed by future strategies (n = 0): <none>
[17:02:18.955] {
[17:02:18.955]     {
[17:02:18.955]         {
[17:02:18.955]             ...future.startTime <- base::Sys.time()
[17:02:18.955]             {
[17:02:18.955]                 {
[17:02:18.955]                   {
[17:02:18.955]                     base::local({
[17:02:18.955]                       has_future <- base::requireNamespace("future", 
[17:02:18.955]                         quietly = TRUE)
[17:02:18.955]                       if (has_future) {
[17:02:18.955]                         ns <- base::getNamespace("future")
[17:02:18.955]                         version <- ns[[".package"]][["version"]]
[17:02:18.955]                         if (is.null(version)) 
[17:02:18.955]                           version <- utils::packageVersion("future")
[17:02:18.955]                       }
[17:02:18.955]                       else {
[17:02:18.955]                         version <- NULL
[17:02:18.955]                       }
[17:02:18.955]                       if (!has_future || version < "1.8.0") {
[17:02:18.955]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:18.955]                           "", base::R.version$version.string), 
[17:02:18.955]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:18.955]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:18.955]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:18.955]                             "release", "version")], collapse = " "), 
[17:02:18.955]                           hostname = base::Sys.info()[["nodename"]])
[17:02:18.955]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:18.955]                           info)
[17:02:18.955]                         info <- base::paste(info, collapse = "; ")
[17:02:18.955]                         if (!has_future) {
[17:02:18.955]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:18.955]                             info)
[17:02:18.955]                         }
[17:02:18.955]                         else {
[17:02:18.955]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:18.955]                             info, version)
[17:02:18.955]                         }
[17:02:18.955]                         base::stop(msg)
[17:02:18.955]                       }
[17:02:18.955]                     })
[17:02:18.955]                   }
[17:02:18.955]                   ...future.strategy.old <- future::plan("list")
[17:02:18.955]                   options(future.plan = NULL)
[17:02:18.955]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:18.955]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:18.955]                 }
[17:02:18.955]                 ...future.workdir <- getwd()
[17:02:18.955]             }
[17:02:18.955]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:18.955]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:18.955]         }
[17:02:18.955]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:18.955]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:18.955]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:18.955]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:18.955]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:18.955]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:18.955]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:18.955]             base::names(...future.oldOptions))
[17:02:18.955]     }
[17:02:18.955]     if (FALSE) {
[17:02:18.955]     }
[17:02:18.955]     else {
[17:02:18.955]         if (TRUE) {
[17:02:18.955]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:18.955]                 open = "w")
[17:02:18.955]         }
[17:02:18.955]         else {
[17:02:18.955]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:18.955]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:18.955]         }
[17:02:18.955]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:18.955]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:18.955]             base::sink(type = "output", split = FALSE)
[17:02:18.955]             base::close(...future.stdout)
[17:02:18.955]         }, add = TRUE)
[17:02:18.955]     }
[17:02:18.955]     ...future.frame <- base::sys.nframe()
[17:02:18.955]     ...future.conditions <- base::list()
[17:02:18.955]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:18.955]     if (FALSE) {
[17:02:18.955]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:18.955]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:18.955]     }
[17:02:18.955]     ...future.result <- base::tryCatch({
[17:02:18.955]         base::withCallingHandlers({
[17:02:18.955]             ...future.value <- base::withVisible(base::local(42L))
[17:02:18.955]             future::FutureResult(value = ...future.value$value, 
[17:02:18.955]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:18.955]                   ...future.rng), globalenv = if (FALSE) 
[17:02:18.955]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:18.955]                     ...future.globalenv.names))
[17:02:18.955]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:18.955]         }, condition = base::local({
[17:02:18.955]             c <- base::c
[17:02:18.955]             inherits <- base::inherits
[17:02:18.955]             invokeRestart <- base::invokeRestart
[17:02:18.955]             length <- base::length
[17:02:18.955]             list <- base::list
[17:02:18.955]             seq.int <- base::seq.int
[17:02:18.955]             signalCondition <- base::signalCondition
[17:02:18.955]             sys.calls <- base::sys.calls
[17:02:18.955]             `[[` <- base::`[[`
[17:02:18.955]             `+` <- base::`+`
[17:02:18.955]             `<<-` <- base::`<<-`
[17:02:18.955]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:18.955]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:18.955]                   3L)]
[17:02:18.955]             }
[17:02:18.955]             function(cond) {
[17:02:18.955]                 is_error <- inherits(cond, "error")
[17:02:18.955]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:18.955]                   NULL)
[17:02:18.955]                 if (is_error) {
[17:02:18.955]                   sessionInformation <- function() {
[17:02:18.955]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:18.955]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:18.955]                       search = base::search(), system = base::Sys.info())
[17:02:18.955]                   }
[17:02:18.955]                   ...future.conditions[[length(...future.conditions) + 
[17:02:18.955]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:18.955]                     cond$call), session = sessionInformation(), 
[17:02:18.955]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:18.955]                   signalCondition(cond)
[17:02:18.955]                 }
[17:02:18.955]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:18.955]                 "immediateCondition"))) {
[17:02:18.955]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:18.955]                   ...future.conditions[[length(...future.conditions) + 
[17:02:18.955]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:18.955]                   if (TRUE && !signal) {
[17:02:18.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:18.955]                     {
[17:02:18.955]                       inherits <- base::inherits
[17:02:18.955]                       invokeRestart <- base::invokeRestart
[17:02:18.955]                       is.null <- base::is.null
[17:02:18.955]                       muffled <- FALSE
[17:02:18.955]                       if (inherits(cond, "message")) {
[17:02:18.955]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:18.955]                         if (muffled) 
[17:02:18.955]                           invokeRestart("muffleMessage")
[17:02:18.955]                       }
[17:02:18.955]                       else if (inherits(cond, "warning")) {
[17:02:18.955]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:18.955]                         if (muffled) 
[17:02:18.955]                           invokeRestart("muffleWarning")
[17:02:18.955]                       }
[17:02:18.955]                       else if (inherits(cond, "condition")) {
[17:02:18.955]                         if (!is.null(pattern)) {
[17:02:18.955]                           computeRestarts <- base::computeRestarts
[17:02:18.955]                           grepl <- base::grepl
[17:02:18.955]                           restarts <- computeRestarts(cond)
[17:02:18.955]                           for (restart in restarts) {
[17:02:18.955]                             name <- restart$name
[17:02:18.955]                             if (is.null(name)) 
[17:02:18.955]                               next
[17:02:18.955]                             if (!grepl(pattern, name)) 
[17:02:18.955]                               next
[17:02:18.955]                             invokeRestart(restart)
[17:02:18.955]                             muffled <- TRUE
[17:02:18.955]                             break
[17:02:18.955]                           }
[17:02:18.955]                         }
[17:02:18.955]                       }
[17:02:18.955]                       invisible(muffled)
[17:02:18.955]                     }
[17:02:18.955]                     muffleCondition(cond, pattern = "^muffle")
[17:02:18.955]                   }
[17:02:18.955]                 }
[17:02:18.955]                 else {
[17:02:18.955]                   if (TRUE) {
[17:02:18.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:18.955]                     {
[17:02:18.955]                       inherits <- base::inherits
[17:02:18.955]                       invokeRestart <- base::invokeRestart
[17:02:18.955]                       is.null <- base::is.null
[17:02:18.955]                       muffled <- FALSE
[17:02:18.955]                       if (inherits(cond, "message")) {
[17:02:18.955]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:18.955]                         if (muffled) 
[17:02:18.955]                           invokeRestart("muffleMessage")
[17:02:18.955]                       }
[17:02:18.955]                       else if (inherits(cond, "warning")) {
[17:02:18.955]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:18.955]                         if (muffled) 
[17:02:18.955]                           invokeRestart("muffleWarning")
[17:02:18.955]                       }
[17:02:18.955]                       else if (inherits(cond, "condition")) {
[17:02:18.955]                         if (!is.null(pattern)) {
[17:02:18.955]                           computeRestarts <- base::computeRestarts
[17:02:18.955]                           grepl <- base::grepl
[17:02:18.955]                           restarts <- computeRestarts(cond)
[17:02:18.955]                           for (restart in restarts) {
[17:02:18.955]                             name <- restart$name
[17:02:18.955]                             if (is.null(name)) 
[17:02:18.955]                               next
[17:02:18.955]                             if (!grepl(pattern, name)) 
[17:02:18.955]                               next
[17:02:18.955]                             invokeRestart(restart)
[17:02:18.955]                             muffled <- TRUE
[17:02:18.955]                             break
[17:02:18.955]                           }
[17:02:18.955]                         }
[17:02:18.955]                       }
[17:02:18.955]                       invisible(muffled)
[17:02:18.955]                     }
[17:02:18.955]                     muffleCondition(cond, pattern = "^muffle")
[17:02:18.955]                   }
[17:02:18.955]                 }
[17:02:18.955]             }
[17:02:18.955]         }))
[17:02:18.955]     }, error = function(ex) {
[17:02:18.955]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:18.955]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:18.955]                 ...future.rng), started = ...future.startTime, 
[17:02:18.955]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:18.955]             version = "1.8"), class = "FutureResult")
[17:02:18.955]     }, finally = {
[17:02:18.955]         if (!identical(...future.workdir, getwd())) 
[17:02:18.955]             setwd(...future.workdir)
[17:02:18.955]         {
[17:02:18.955]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:18.955]                 ...future.oldOptions$nwarnings <- NULL
[17:02:18.955]             }
[17:02:18.955]             base::options(...future.oldOptions)
[17:02:18.955]             if (.Platform$OS.type == "windows") {
[17:02:18.955]                 old_names <- names(...future.oldEnvVars)
[17:02:18.955]                 envs <- base::Sys.getenv()
[17:02:18.955]                 names <- names(envs)
[17:02:18.955]                 common <- intersect(names, old_names)
[17:02:18.955]                 added <- setdiff(names, old_names)
[17:02:18.955]                 removed <- setdiff(old_names, names)
[17:02:18.955]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:18.955]                   envs[common]]
[17:02:18.955]                 NAMES <- toupper(changed)
[17:02:18.955]                 args <- list()
[17:02:18.955]                 for (kk in seq_along(NAMES)) {
[17:02:18.955]                   name <- changed[[kk]]
[17:02:18.955]                   NAME <- NAMES[[kk]]
[17:02:18.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.955]                     next
[17:02:18.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:18.955]                 }
[17:02:18.955]                 NAMES <- toupper(added)
[17:02:18.955]                 for (kk in seq_along(NAMES)) {
[17:02:18.955]                   name <- added[[kk]]
[17:02:18.955]                   NAME <- NAMES[[kk]]
[17:02:18.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.955]                     next
[17:02:18.955]                   args[[name]] <- ""
[17:02:18.955]                 }
[17:02:18.955]                 NAMES <- toupper(removed)
[17:02:18.955]                 for (kk in seq_along(NAMES)) {
[17:02:18.955]                   name <- removed[[kk]]
[17:02:18.955]                   NAME <- NAMES[[kk]]
[17:02:18.955]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.955]                     next
[17:02:18.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:18.955]                 }
[17:02:18.955]                 if (length(args) > 0) 
[17:02:18.955]                   base::do.call(base::Sys.setenv, args = args)
[17:02:18.955]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:18.955]             }
[17:02:18.955]             else {
[17:02:18.955]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:18.955]             }
[17:02:18.955]             {
[17:02:18.955]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:18.955]                   0L) {
[17:02:18.955]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:18.955]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:18.955]                   base::options(opts)
[17:02:18.955]                 }
[17:02:18.955]                 {
[17:02:18.955]                   {
[17:02:18.955]                     NULL
[17:02:18.955]                     RNGkind("Mersenne-Twister")
[17:02:18.955]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:18.955]                       inherits = FALSE)
[17:02:18.955]                   }
[17:02:18.955]                   options(future.plan = NULL)
[17:02:18.955]                   if (is.na(NA_character_)) 
[17:02:18.955]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:18.955]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:18.955]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:18.955]                     .init = FALSE)
[17:02:18.955]                 }
[17:02:18.955]             }
[17:02:18.955]         }
[17:02:18.955]     })
[17:02:18.955]     if (TRUE) {
[17:02:18.955]         base::sink(type = "output", split = FALSE)
[17:02:18.955]         if (TRUE) {
[17:02:18.955]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:18.955]         }
[17:02:18.955]         else {
[17:02:18.955]             ...future.result["stdout"] <- base::list(NULL)
[17:02:18.955]         }
[17:02:18.955]         base::close(...future.stdout)
[17:02:18.955]         ...future.stdout <- NULL
[17:02:18.955]     }
[17:02:18.955]     ...future.result$conditions <- ...future.conditions
[17:02:18.955]     ...future.result$finished <- base::Sys.time()
[17:02:18.955]     ...future.result
[17:02:18.955] }
[17:02:18.957] plan(): Setting new future strategy stack:
[17:02:18.957] List of future strategies:
[17:02:18.957] 1. sequential:
[17:02:18.957]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.957]    - tweaked: FALSE
[17:02:18.957]    - call: NULL
[17:02:18.957] plan(): nbrOfWorkers() = 1
[17:02:18.958] plan(): Setting new future strategy stack:
[17:02:18.958] List of future strategies:
[17:02:18.958] 1. sequential:
[17:02:18.958]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.958]    - tweaked: FALSE
[17:02:18.958]    - call: future::plan("sequential")
[17:02:18.959] plan(): nbrOfWorkers() = 1
[17:02:18.959] SequentialFuture started (and completed)
[17:02:18.959] - Launch lazy future ... done
[17:02:18.959] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[17:02:18.960] getGlobalsAndPackages() ...
[17:02:18.960] Searching for globals...
[17:02:18.960] - globals found: [1] ‘{’
[17:02:18.960] Searching for globals ... DONE
[17:02:18.961] Resolving globals: FALSE
[17:02:18.961] 
[17:02:18.961] 
[17:02:18.961] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[17:02:18.961] resolved() for ‘Future’ ...
[17:02:18.961] - state: ‘created’
[17:02:18.962] - run: TRUE
[17:02:18.962] - run() ...
[17:02:18.962] run() for ‘Future’ ...
[17:02:18.962] - state: ‘created’
[17:02:18.962] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:18.962] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:18.962] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:18.962]   - Field: ‘label’
[17:02:18.963]   - Field: ‘local’
[17:02:18.963]   - Field: ‘owner’
[17:02:18.963]   - Field: ‘envir’
[17:02:18.963]   - Field: ‘packages’
[17:02:18.963]   - Field: ‘gc’
[17:02:18.963]   - Field: ‘conditions’
[17:02:18.963]   - Field: ‘expr’
[17:02:18.963]   - Field: ‘uuid’
[17:02:18.963]   - Field: ‘seed’
[17:02:18.963]   - Field: ‘version’
[17:02:18.963]   - Field: ‘result’
[17:02:18.964]   - Field: ‘asynchronous’
[17:02:18.964]   - Field: ‘calls’
[17:02:18.964]   - Field: ‘globals’
[17:02:18.964]   - Field: ‘stdout’
[17:02:18.964]   - Field: ‘earlySignal’
[17:02:18.964]   - Field: ‘lazy’
[17:02:18.964]   - Field: ‘state’
[17:02:18.964] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:18.964] - Launch lazy future ...
[17:02:18.964] Packages needed by the future expression (n = 0): <none>
[17:02:18.965] Packages needed by future strategies (n = 0): <none>
[17:02:18.965] {
[17:02:18.965]     {
[17:02:18.965]         {
[17:02:18.965]             ...future.startTime <- base::Sys.time()
[17:02:18.965]             {
[17:02:18.965]                 {
[17:02:18.965]                   {
[17:02:18.965]                     base::local({
[17:02:18.965]                       has_future <- base::requireNamespace("future", 
[17:02:18.965]                         quietly = TRUE)
[17:02:18.965]                       if (has_future) {
[17:02:18.965]                         ns <- base::getNamespace("future")
[17:02:18.965]                         version <- ns[[".package"]][["version"]]
[17:02:18.965]                         if (is.null(version)) 
[17:02:18.965]                           version <- utils::packageVersion("future")
[17:02:18.965]                       }
[17:02:18.965]                       else {
[17:02:18.965]                         version <- NULL
[17:02:18.965]                       }
[17:02:18.965]                       if (!has_future || version < "1.8.0") {
[17:02:18.965]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:18.965]                           "", base::R.version$version.string), 
[17:02:18.965]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:18.965]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:18.965]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:18.965]                             "release", "version")], collapse = " "), 
[17:02:18.965]                           hostname = base::Sys.info()[["nodename"]])
[17:02:18.965]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:18.965]                           info)
[17:02:18.965]                         info <- base::paste(info, collapse = "; ")
[17:02:18.965]                         if (!has_future) {
[17:02:18.965]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:18.965]                             info)
[17:02:18.965]                         }
[17:02:18.965]                         else {
[17:02:18.965]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:18.965]                             info, version)
[17:02:18.965]                         }
[17:02:18.965]                         base::stop(msg)
[17:02:18.965]                       }
[17:02:18.965]                     })
[17:02:18.965]                   }
[17:02:18.965]                   ...future.strategy.old <- future::plan("list")
[17:02:18.965]                   options(future.plan = NULL)
[17:02:18.965]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:18.965]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:18.965]                 }
[17:02:18.965]                 ...future.workdir <- getwd()
[17:02:18.965]             }
[17:02:18.965]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:18.965]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:18.965]         }
[17:02:18.965]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:18.965]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:18.965]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:18.965]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:18.965]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:18.965]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:18.965]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:18.965]             base::names(...future.oldOptions))
[17:02:18.965]     }
[17:02:18.965]     if (FALSE) {
[17:02:18.965]     }
[17:02:18.965]     else {
[17:02:18.965]         if (TRUE) {
[17:02:18.965]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:18.965]                 open = "w")
[17:02:18.965]         }
[17:02:18.965]         else {
[17:02:18.965]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:18.965]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:18.965]         }
[17:02:18.965]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:18.965]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:18.965]             base::sink(type = "output", split = FALSE)
[17:02:18.965]             base::close(...future.stdout)
[17:02:18.965]         }, add = TRUE)
[17:02:18.965]     }
[17:02:18.965]     ...future.frame <- base::sys.nframe()
[17:02:18.965]     ...future.conditions <- base::list()
[17:02:18.965]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:18.965]     if (FALSE) {
[17:02:18.965]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:18.965]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:18.965]     }
[17:02:18.965]     ...future.result <- base::tryCatch({
[17:02:18.965]         base::withCallingHandlers({
[17:02:18.965]             ...future.value <- base::withVisible(base::local({
[17:02:18.965]                 42L
[17:02:18.965]             }))
[17:02:18.965]             future::FutureResult(value = ...future.value$value, 
[17:02:18.965]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:18.965]                   ...future.rng), globalenv = if (FALSE) 
[17:02:18.965]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:18.965]                     ...future.globalenv.names))
[17:02:18.965]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:18.965]         }, condition = base::local({
[17:02:18.965]             c <- base::c
[17:02:18.965]             inherits <- base::inherits
[17:02:18.965]             invokeRestart <- base::invokeRestart
[17:02:18.965]             length <- base::length
[17:02:18.965]             list <- base::list
[17:02:18.965]             seq.int <- base::seq.int
[17:02:18.965]             signalCondition <- base::signalCondition
[17:02:18.965]             sys.calls <- base::sys.calls
[17:02:18.965]             `[[` <- base::`[[`
[17:02:18.965]             `+` <- base::`+`
[17:02:18.965]             `<<-` <- base::`<<-`
[17:02:18.965]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:18.965]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:18.965]                   3L)]
[17:02:18.965]             }
[17:02:18.965]             function(cond) {
[17:02:18.965]                 is_error <- inherits(cond, "error")
[17:02:18.965]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:18.965]                   NULL)
[17:02:18.965]                 if (is_error) {
[17:02:18.965]                   sessionInformation <- function() {
[17:02:18.965]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:18.965]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:18.965]                       search = base::search(), system = base::Sys.info())
[17:02:18.965]                   }
[17:02:18.965]                   ...future.conditions[[length(...future.conditions) + 
[17:02:18.965]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:18.965]                     cond$call), session = sessionInformation(), 
[17:02:18.965]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:18.965]                   signalCondition(cond)
[17:02:18.965]                 }
[17:02:18.965]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:18.965]                 "immediateCondition"))) {
[17:02:18.965]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:18.965]                   ...future.conditions[[length(...future.conditions) + 
[17:02:18.965]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:18.965]                   if (TRUE && !signal) {
[17:02:18.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:18.965]                     {
[17:02:18.965]                       inherits <- base::inherits
[17:02:18.965]                       invokeRestart <- base::invokeRestart
[17:02:18.965]                       is.null <- base::is.null
[17:02:18.965]                       muffled <- FALSE
[17:02:18.965]                       if (inherits(cond, "message")) {
[17:02:18.965]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:18.965]                         if (muffled) 
[17:02:18.965]                           invokeRestart("muffleMessage")
[17:02:18.965]                       }
[17:02:18.965]                       else if (inherits(cond, "warning")) {
[17:02:18.965]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:18.965]                         if (muffled) 
[17:02:18.965]                           invokeRestart("muffleWarning")
[17:02:18.965]                       }
[17:02:18.965]                       else if (inherits(cond, "condition")) {
[17:02:18.965]                         if (!is.null(pattern)) {
[17:02:18.965]                           computeRestarts <- base::computeRestarts
[17:02:18.965]                           grepl <- base::grepl
[17:02:18.965]                           restarts <- computeRestarts(cond)
[17:02:18.965]                           for (restart in restarts) {
[17:02:18.965]                             name <- restart$name
[17:02:18.965]                             if (is.null(name)) 
[17:02:18.965]                               next
[17:02:18.965]                             if (!grepl(pattern, name)) 
[17:02:18.965]                               next
[17:02:18.965]                             invokeRestart(restart)
[17:02:18.965]                             muffled <- TRUE
[17:02:18.965]                             break
[17:02:18.965]                           }
[17:02:18.965]                         }
[17:02:18.965]                       }
[17:02:18.965]                       invisible(muffled)
[17:02:18.965]                     }
[17:02:18.965]                     muffleCondition(cond, pattern = "^muffle")
[17:02:18.965]                   }
[17:02:18.965]                 }
[17:02:18.965]                 else {
[17:02:18.965]                   if (TRUE) {
[17:02:18.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:18.965]                     {
[17:02:18.965]                       inherits <- base::inherits
[17:02:18.965]                       invokeRestart <- base::invokeRestart
[17:02:18.965]                       is.null <- base::is.null
[17:02:18.965]                       muffled <- FALSE
[17:02:18.965]                       if (inherits(cond, "message")) {
[17:02:18.965]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:18.965]                         if (muffled) 
[17:02:18.965]                           invokeRestart("muffleMessage")
[17:02:18.965]                       }
[17:02:18.965]                       else if (inherits(cond, "warning")) {
[17:02:18.965]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:18.965]                         if (muffled) 
[17:02:18.965]                           invokeRestart("muffleWarning")
[17:02:18.965]                       }
[17:02:18.965]                       else if (inherits(cond, "condition")) {
[17:02:18.965]                         if (!is.null(pattern)) {
[17:02:18.965]                           computeRestarts <- base::computeRestarts
[17:02:18.965]                           grepl <- base::grepl
[17:02:18.965]                           restarts <- computeRestarts(cond)
[17:02:18.965]                           for (restart in restarts) {
[17:02:18.965]                             name <- restart$name
[17:02:18.965]                             if (is.null(name)) 
[17:02:18.965]                               next
[17:02:18.965]                             if (!grepl(pattern, name)) 
[17:02:18.965]                               next
[17:02:18.965]                             invokeRestart(restart)
[17:02:18.965]                             muffled <- TRUE
[17:02:18.965]                             break
[17:02:18.965]                           }
[17:02:18.965]                         }
[17:02:18.965]                       }
[17:02:18.965]                       invisible(muffled)
[17:02:18.965]                     }
[17:02:18.965]                     muffleCondition(cond, pattern = "^muffle")
[17:02:18.965]                   }
[17:02:18.965]                 }
[17:02:18.965]             }
[17:02:18.965]         }))
[17:02:18.965]     }, error = function(ex) {
[17:02:18.965]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:18.965]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:18.965]                 ...future.rng), started = ...future.startTime, 
[17:02:18.965]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:18.965]             version = "1.8"), class = "FutureResult")
[17:02:18.965]     }, finally = {
[17:02:18.965]         if (!identical(...future.workdir, getwd())) 
[17:02:18.965]             setwd(...future.workdir)
[17:02:18.965]         {
[17:02:18.965]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:18.965]                 ...future.oldOptions$nwarnings <- NULL
[17:02:18.965]             }
[17:02:18.965]             base::options(...future.oldOptions)
[17:02:18.965]             if (.Platform$OS.type == "windows") {
[17:02:18.965]                 old_names <- names(...future.oldEnvVars)
[17:02:18.965]                 envs <- base::Sys.getenv()
[17:02:18.965]                 names <- names(envs)
[17:02:18.965]                 common <- intersect(names, old_names)
[17:02:18.965]                 added <- setdiff(names, old_names)
[17:02:18.965]                 removed <- setdiff(old_names, names)
[17:02:18.965]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:18.965]                   envs[common]]
[17:02:18.965]                 NAMES <- toupper(changed)
[17:02:18.965]                 args <- list()
[17:02:18.965]                 for (kk in seq_along(NAMES)) {
[17:02:18.965]                   name <- changed[[kk]]
[17:02:18.965]                   NAME <- NAMES[[kk]]
[17:02:18.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.965]                     next
[17:02:18.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:18.965]                 }
[17:02:18.965]                 NAMES <- toupper(added)
[17:02:18.965]                 for (kk in seq_along(NAMES)) {
[17:02:18.965]                   name <- added[[kk]]
[17:02:18.965]                   NAME <- NAMES[[kk]]
[17:02:18.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.965]                     next
[17:02:18.965]                   args[[name]] <- ""
[17:02:18.965]                 }
[17:02:18.965]                 NAMES <- toupper(removed)
[17:02:18.965]                 for (kk in seq_along(NAMES)) {
[17:02:18.965]                   name <- removed[[kk]]
[17:02:18.965]                   NAME <- NAMES[[kk]]
[17:02:18.965]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.965]                     next
[17:02:18.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:18.965]                 }
[17:02:18.965]                 if (length(args) > 0) 
[17:02:18.965]                   base::do.call(base::Sys.setenv, args = args)
[17:02:18.965]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:18.965]             }
[17:02:18.965]             else {
[17:02:18.965]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:18.965]             }
[17:02:18.965]             {
[17:02:18.965]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:18.965]                   0L) {
[17:02:18.965]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:18.965]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:18.965]                   base::options(opts)
[17:02:18.965]                 }
[17:02:18.965]                 {
[17:02:18.965]                   {
[17:02:18.965]                     NULL
[17:02:18.965]                     RNGkind("Mersenne-Twister")
[17:02:18.965]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:18.965]                       inherits = FALSE)
[17:02:18.965]                   }
[17:02:18.965]                   options(future.plan = NULL)
[17:02:18.965]                   if (is.na(NA_character_)) 
[17:02:18.965]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:18.965]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:18.965]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:18.965]                     .init = FALSE)
[17:02:18.965]                 }
[17:02:18.965]             }
[17:02:18.965]         }
[17:02:18.965]     })
[17:02:18.965]     if (TRUE) {
[17:02:18.965]         base::sink(type = "output", split = FALSE)
[17:02:18.965]         if (TRUE) {
[17:02:18.965]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:18.965]         }
[17:02:18.965]         else {
[17:02:18.965]             ...future.result["stdout"] <- base::list(NULL)
[17:02:18.965]         }
[17:02:18.965]         base::close(...future.stdout)
[17:02:18.965]         ...future.stdout <- NULL
[17:02:18.965]     }
[17:02:18.965]     ...future.result$conditions <- ...future.conditions
[17:02:18.965]     ...future.result$finished <- base::Sys.time()
[17:02:18.965]     ...future.result
[17:02:18.965] }
[17:02:18.967] plan(): Setting new future strategy stack:
[17:02:18.967] List of future strategies:
[17:02:18.967] 1. sequential:
[17:02:18.967]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.967]    - tweaked: FALSE
[17:02:18.967]    - call: NULL
[17:02:18.967] plan(): nbrOfWorkers() = 1
[17:02:18.968] plan(): Setting new future strategy stack:
[17:02:18.968] List of future strategies:
[17:02:18.968] 1. sequential:
[17:02:18.968]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.968]    - tweaked: FALSE
[17:02:18.968]    - call: future::plan("sequential")
[17:02:18.969] plan(): nbrOfWorkers() = 1
[17:02:18.969] SequentialFuture started (and completed)
[17:02:18.969] - Launch lazy future ... done
[17:02:18.969] run() for ‘SequentialFuture’ ... done
[17:02:18.969] - run() ... done
[17:02:18.969] - resolved() ...
[17:02:18.969] resolved() for ‘SequentialFuture’ ...
[17:02:18.969] - state: ‘finished’
[17:02:18.969] - run: TRUE
[17:02:18.970] - result: ‘FutureResult’
[17:02:18.970] resolved() for ‘SequentialFuture’ ... done
[17:02:18.970] - resolved: TRUE
[17:02:18.970] - resolved() ... done
[17:02:18.970] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[17:02:18.970] getGlobalsAndPackages() ...
[17:02:18.970] Searching for globals...
[17:02:18.971] 
[17:02:18.971] Searching for globals ... DONE
[17:02:18.971] - globals: [0] <none>
[17:02:18.971] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 89041d08-8f0a-39b7-6e4c-9f6c895137ed
Class: ‘Future’, ‘environment’
> y <- value(f)
[17:02:18.972] run() for ‘Future’ ...
[17:02:18.972] - state: ‘created’
[17:02:18.972] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:18.972] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:18.972] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:18.972]   - Field: ‘label’
[17:02:18.972]   - Field: ‘local’
[17:02:18.972]   - Field: ‘owner’
[17:02:18.973]   - Field: ‘envir’
[17:02:18.975]   - Field: ‘packages’
[17:02:18.976]   - Field: ‘gc’
[17:02:18.976]   - Field: ‘conditions’
[17:02:18.976]   - Field: ‘expr’
[17:02:18.976]   - Field: ‘uuid’
[17:02:18.976]   - Field: ‘seed’
[17:02:18.976]   - Field: ‘version’
[17:02:18.976]   - Field: ‘result’
[17:02:18.976]   - Field: ‘asynchronous’
[17:02:18.976]   - Field: ‘calls’
[17:02:18.976]   - Field: ‘globals’
[17:02:18.976]   - Field: ‘stdout’
[17:02:18.977]   - Field: ‘earlySignal’
[17:02:18.977]   - Field: ‘lazy’
[17:02:18.977]   - Field: ‘state’
[17:02:18.977] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:18.977] - Launch lazy future ...
[17:02:18.977] Packages needed by the future expression (n = 0): <none>
[17:02:18.977] Packages needed by future strategies (n = 0): <none>
[17:02:18.978] {
[17:02:18.978]     {
[17:02:18.978]         {
[17:02:18.978]             ...future.startTime <- base::Sys.time()
[17:02:18.978]             {
[17:02:18.978]                 {
[17:02:18.978]                   {
[17:02:18.978]                     base::local({
[17:02:18.978]                       has_future <- base::requireNamespace("future", 
[17:02:18.978]                         quietly = TRUE)
[17:02:18.978]                       if (has_future) {
[17:02:18.978]                         ns <- base::getNamespace("future")
[17:02:18.978]                         version <- ns[[".package"]][["version"]]
[17:02:18.978]                         if (is.null(version)) 
[17:02:18.978]                           version <- utils::packageVersion("future")
[17:02:18.978]                       }
[17:02:18.978]                       else {
[17:02:18.978]                         version <- NULL
[17:02:18.978]                       }
[17:02:18.978]                       if (!has_future || version < "1.8.0") {
[17:02:18.978]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:18.978]                           "", base::R.version$version.string), 
[17:02:18.978]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:18.978]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:18.978]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:18.978]                             "release", "version")], collapse = " "), 
[17:02:18.978]                           hostname = base::Sys.info()[["nodename"]])
[17:02:18.978]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:18.978]                           info)
[17:02:18.978]                         info <- base::paste(info, collapse = "; ")
[17:02:18.978]                         if (!has_future) {
[17:02:18.978]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:18.978]                             info)
[17:02:18.978]                         }
[17:02:18.978]                         else {
[17:02:18.978]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:18.978]                             info, version)
[17:02:18.978]                         }
[17:02:18.978]                         base::stop(msg)
[17:02:18.978]                       }
[17:02:18.978]                     })
[17:02:18.978]                   }
[17:02:18.978]                   ...future.strategy.old <- future::plan("list")
[17:02:18.978]                   options(future.plan = NULL)
[17:02:18.978]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:18.978]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:18.978]                 }
[17:02:18.978]                 ...future.workdir <- getwd()
[17:02:18.978]             }
[17:02:18.978]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:18.978]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:18.978]         }
[17:02:18.978]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:18.978]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:18.978]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:18.978]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:18.978]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:18.978]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:18.978]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:18.978]             base::names(...future.oldOptions))
[17:02:18.978]     }
[17:02:18.978]     if (FALSE) {
[17:02:18.978]     }
[17:02:18.978]     else {
[17:02:18.978]         if (TRUE) {
[17:02:18.978]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:18.978]                 open = "w")
[17:02:18.978]         }
[17:02:18.978]         else {
[17:02:18.978]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:18.978]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:18.978]         }
[17:02:18.978]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:18.978]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:18.978]             base::sink(type = "output", split = FALSE)
[17:02:18.978]             base::close(...future.stdout)
[17:02:18.978]         }, add = TRUE)
[17:02:18.978]     }
[17:02:18.978]     ...future.frame <- base::sys.nframe()
[17:02:18.978]     ...future.conditions <- base::list()
[17:02:18.978]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:18.978]     if (FALSE) {
[17:02:18.978]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:18.978]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:18.978]     }
[17:02:18.978]     ...future.result <- base::tryCatch({
[17:02:18.978]         base::withCallingHandlers({
[17:02:18.978]             ...future.value <- base::withVisible(base::local(42L))
[17:02:18.978]             future::FutureResult(value = ...future.value$value, 
[17:02:18.978]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:18.978]                   ...future.rng), globalenv = if (FALSE) 
[17:02:18.978]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:18.978]                     ...future.globalenv.names))
[17:02:18.978]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:18.978]         }, condition = base::local({
[17:02:18.978]             c <- base::c
[17:02:18.978]             inherits <- base::inherits
[17:02:18.978]             invokeRestart <- base::invokeRestart
[17:02:18.978]             length <- base::length
[17:02:18.978]             list <- base::list
[17:02:18.978]             seq.int <- base::seq.int
[17:02:18.978]             signalCondition <- base::signalCondition
[17:02:18.978]             sys.calls <- base::sys.calls
[17:02:18.978]             `[[` <- base::`[[`
[17:02:18.978]             `+` <- base::`+`
[17:02:18.978]             `<<-` <- base::`<<-`
[17:02:18.978]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:18.978]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:18.978]                   3L)]
[17:02:18.978]             }
[17:02:18.978]             function(cond) {
[17:02:18.978]                 is_error <- inherits(cond, "error")
[17:02:18.978]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:18.978]                   NULL)
[17:02:18.978]                 if (is_error) {
[17:02:18.978]                   sessionInformation <- function() {
[17:02:18.978]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:18.978]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:18.978]                       search = base::search(), system = base::Sys.info())
[17:02:18.978]                   }
[17:02:18.978]                   ...future.conditions[[length(...future.conditions) + 
[17:02:18.978]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:18.978]                     cond$call), session = sessionInformation(), 
[17:02:18.978]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:18.978]                   signalCondition(cond)
[17:02:18.978]                 }
[17:02:18.978]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:18.978]                 "immediateCondition"))) {
[17:02:18.978]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:18.978]                   ...future.conditions[[length(...future.conditions) + 
[17:02:18.978]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:18.978]                   if (TRUE && !signal) {
[17:02:18.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:18.978]                     {
[17:02:18.978]                       inherits <- base::inherits
[17:02:18.978]                       invokeRestart <- base::invokeRestart
[17:02:18.978]                       is.null <- base::is.null
[17:02:18.978]                       muffled <- FALSE
[17:02:18.978]                       if (inherits(cond, "message")) {
[17:02:18.978]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:18.978]                         if (muffled) 
[17:02:18.978]                           invokeRestart("muffleMessage")
[17:02:18.978]                       }
[17:02:18.978]                       else if (inherits(cond, "warning")) {
[17:02:18.978]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:18.978]                         if (muffled) 
[17:02:18.978]                           invokeRestart("muffleWarning")
[17:02:18.978]                       }
[17:02:18.978]                       else if (inherits(cond, "condition")) {
[17:02:18.978]                         if (!is.null(pattern)) {
[17:02:18.978]                           computeRestarts <- base::computeRestarts
[17:02:18.978]                           grepl <- base::grepl
[17:02:18.978]                           restarts <- computeRestarts(cond)
[17:02:18.978]                           for (restart in restarts) {
[17:02:18.978]                             name <- restart$name
[17:02:18.978]                             if (is.null(name)) 
[17:02:18.978]                               next
[17:02:18.978]                             if (!grepl(pattern, name)) 
[17:02:18.978]                               next
[17:02:18.978]                             invokeRestart(restart)
[17:02:18.978]                             muffled <- TRUE
[17:02:18.978]                             break
[17:02:18.978]                           }
[17:02:18.978]                         }
[17:02:18.978]                       }
[17:02:18.978]                       invisible(muffled)
[17:02:18.978]                     }
[17:02:18.978]                     muffleCondition(cond, pattern = "^muffle")
[17:02:18.978]                   }
[17:02:18.978]                 }
[17:02:18.978]                 else {
[17:02:18.978]                   if (TRUE) {
[17:02:18.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:18.978]                     {
[17:02:18.978]                       inherits <- base::inherits
[17:02:18.978]                       invokeRestart <- base::invokeRestart
[17:02:18.978]                       is.null <- base::is.null
[17:02:18.978]                       muffled <- FALSE
[17:02:18.978]                       if (inherits(cond, "message")) {
[17:02:18.978]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:18.978]                         if (muffled) 
[17:02:18.978]                           invokeRestart("muffleMessage")
[17:02:18.978]                       }
[17:02:18.978]                       else if (inherits(cond, "warning")) {
[17:02:18.978]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:18.978]                         if (muffled) 
[17:02:18.978]                           invokeRestart("muffleWarning")
[17:02:18.978]                       }
[17:02:18.978]                       else if (inherits(cond, "condition")) {
[17:02:18.978]                         if (!is.null(pattern)) {
[17:02:18.978]                           computeRestarts <- base::computeRestarts
[17:02:18.978]                           grepl <- base::grepl
[17:02:18.978]                           restarts <- computeRestarts(cond)
[17:02:18.978]                           for (restart in restarts) {
[17:02:18.978]                             name <- restart$name
[17:02:18.978]                             if (is.null(name)) 
[17:02:18.978]                               next
[17:02:18.978]                             if (!grepl(pattern, name)) 
[17:02:18.978]                               next
[17:02:18.978]                             invokeRestart(restart)
[17:02:18.978]                             muffled <- TRUE
[17:02:18.978]                             break
[17:02:18.978]                           }
[17:02:18.978]                         }
[17:02:18.978]                       }
[17:02:18.978]                       invisible(muffled)
[17:02:18.978]                     }
[17:02:18.978]                     muffleCondition(cond, pattern = "^muffle")
[17:02:18.978]                   }
[17:02:18.978]                 }
[17:02:18.978]             }
[17:02:18.978]         }))
[17:02:18.978]     }, error = function(ex) {
[17:02:18.978]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:18.978]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:18.978]                 ...future.rng), started = ...future.startTime, 
[17:02:18.978]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:18.978]             version = "1.8"), class = "FutureResult")
[17:02:18.978]     }, finally = {
[17:02:18.978]         if (!identical(...future.workdir, getwd())) 
[17:02:18.978]             setwd(...future.workdir)
[17:02:18.978]         {
[17:02:18.978]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:18.978]                 ...future.oldOptions$nwarnings <- NULL
[17:02:18.978]             }
[17:02:18.978]             base::options(...future.oldOptions)
[17:02:18.978]             if (.Platform$OS.type == "windows") {
[17:02:18.978]                 old_names <- names(...future.oldEnvVars)
[17:02:18.978]                 envs <- base::Sys.getenv()
[17:02:18.978]                 names <- names(envs)
[17:02:18.978]                 common <- intersect(names, old_names)
[17:02:18.978]                 added <- setdiff(names, old_names)
[17:02:18.978]                 removed <- setdiff(old_names, names)
[17:02:18.978]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:18.978]                   envs[common]]
[17:02:18.978]                 NAMES <- toupper(changed)
[17:02:18.978]                 args <- list()
[17:02:18.978]                 for (kk in seq_along(NAMES)) {
[17:02:18.978]                   name <- changed[[kk]]
[17:02:18.978]                   NAME <- NAMES[[kk]]
[17:02:18.978]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.978]                     next
[17:02:18.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:18.978]                 }
[17:02:18.978]                 NAMES <- toupper(added)
[17:02:18.978]                 for (kk in seq_along(NAMES)) {
[17:02:18.978]                   name <- added[[kk]]
[17:02:18.978]                   NAME <- NAMES[[kk]]
[17:02:18.978]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.978]                     next
[17:02:18.978]                   args[[name]] <- ""
[17:02:18.978]                 }
[17:02:18.978]                 NAMES <- toupper(removed)
[17:02:18.978]                 for (kk in seq_along(NAMES)) {
[17:02:18.978]                   name <- removed[[kk]]
[17:02:18.978]                   NAME <- NAMES[[kk]]
[17:02:18.978]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:18.978]                     next
[17:02:18.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:18.978]                 }
[17:02:18.978]                 if (length(args) > 0) 
[17:02:18.978]                   base::do.call(base::Sys.setenv, args = args)
[17:02:18.978]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:18.978]             }
[17:02:18.978]             else {
[17:02:18.978]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:18.978]             }
[17:02:18.978]             {
[17:02:18.978]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:18.978]                   0L) {
[17:02:18.978]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:18.978]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:18.978]                   base::options(opts)
[17:02:18.978]                 }
[17:02:18.978]                 {
[17:02:18.978]                   {
[17:02:18.978]                     NULL
[17:02:18.978]                     RNGkind("Mersenne-Twister")
[17:02:18.978]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:18.978]                       inherits = FALSE)
[17:02:18.978]                   }
[17:02:18.978]                   options(future.plan = NULL)
[17:02:18.978]                   if (is.na(NA_character_)) 
[17:02:18.978]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:18.978]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:18.978]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:18.978]                     .init = FALSE)
[17:02:18.978]                 }
[17:02:18.978]             }
[17:02:18.978]         }
[17:02:18.978]     })
[17:02:18.978]     if (TRUE) {
[17:02:18.978]         base::sink(type = "output", split = FALSE)
[17:02:18.978]         if (TRUE) {
[17:02:18.978]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:18.978]         }
[17:02:18.978]         else {
[17:02:18.978]             ...future.result["stdout"] <- base::list(NULL)
[17:02:18.978]         }
[17:02:18.978]         base::close(...future.stdout)
[17:02:18.978]         ...future.stdout <- NULL
[17:02:18.978]     }
[17:02:18.978]     ...future.result$conditions <- ...future.conditions
[17:02:18.978]     ...future.result$finished <- base::Sys.time()
[17:02:18.978]     ...future.result
[17:02:18.978] }
[17:02:18.979] plan(): Setting new future strategy stack:
[17:02:18.980] List of future strategies:
[17:02:18.980] 1. sequential:
[17:02:18.980]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.980]    - tweaked: FALSE
[17:02:18.980]    - call: NULL
[17:02:18.980] plan(): nbrOfWorkers() = 1
[17:02:18.981] plan(): Setting new future strategy stack:
[17:02:18.981] List of future strategies:
[17:02:18.981] 1. sequential:
[17:02:18.981]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.981]    - tweaked: FALSE
[17:02:18.981]    - call: future::plan("sequential")
[17:02:18.981] plan(): nbrOfWorkers() = 1
[17:02:18.981] SequentialFuture started (and completed)
[17:02:18.982] - Launch lazy future ... done
[17:02:18.982] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[17:02:18.982] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[17:02:18.983] plan(): Setting new future strategy stack:
[17:02:18.983] List of future strategies:
[17:02:18.983] 1. FutureStrategy:
[17:02:18.983]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:18.983]    - tweaked: FALSE
[17:02:18.983]    - call: future::plan(oplan)
[17:02:18.994] plan(): nbrOfWorkers() = 1
> 
