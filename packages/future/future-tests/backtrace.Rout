
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:45:59.373] plan(): Setting new future strategy stack:
[17:45:59.374] List of future strategies:
[17:45:59.374] 1. sequential:
[17:45:59.374]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.374]    - tweaked: FALSE
[17:45:59.374]    - call: future::plan("sequential")
[17:45:59.385] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[17:45:59.399] getGlobalsAndPackages() ...
[17:45:59.400] Searching for globals...
[17:45:59.406] - globals found: [2] ‘{’, ‘stop’
[17:45:59.406] Searching for globals ... DONE
[17:45:59.406] Resolving globals: FALSE
[17:45:59.407] 
[17:45:59.407] 
[17:45:59.407] getGlobalsAndPackages() ... DONE
[17:45:59.408] run() for ‘Future’ ...
[17:45:59.408] - state: ‘created’
[17:45:59.408] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.408] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.408] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.408]   - Field: ‘label’
[17:45:59.409]   - Field: ‘local’
[17:45:59.409]   - Field: ‘owner’
[17:45:59.409]   - Field: ‘envir’
[17:45:59.409]   - Field: ‘packages’
[17:45:59.409]   - Field: ‘gc’
[17:45:59.409]   - Field: ‘conditions’
[17:45:59.409]   - Field: ‘expr’
[17:45:59.409]   - Field: ‘uuid’
[17:45:59.409]   - Field: ‘seed’
[17:45:59.409]   - Field: ‘version’
[17:45:59.409]   - Field: ‘result’
[17:45:59.409]   - Field: ‘asynchronous’
[17:45:59.410]   - Field: ‘calls’
[17:45:59.410]   - Field: ‘globals’
[17:45:59.410]   - Field: ‘stdout’
[17:45:59.410]   - Field: ‘earlySignal’
[17:45:59.410]   - Field: ‘lazy’
[17:45:59.410]   - Field: ‘state’
[17:45:59.410] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.410] - Launch lazy future ...
[17:45:59.411] Packages needed by the future expression (n = 0): <none>
[17:45:59.411] Packages needed by future strategies (n = 0): <none>
[17:45:59.412] {
[17:45:59.412]     {
[17:45:59.412]         {
[17:45:59.412]             ...future.startTime <- base::Sys.time()
[17:45:59.412]             {
[17:45:59.412]                 {
[17:45:59.412]                   {
[17:45:59.412]                     base::local({
[17:45:59.412]                       has_future <- base::requireNamespace("future", 
[17:45:59.412]                         quietly = TRUE)
[17:45:59.412]                       if (has_future) {
[17:45:59.412]                         ns <- base::getNamespace("future")
[17:45:59.412]                         version <- ns[[".package"]][["version"]]
[17:45:59.412]                         if (is.null(version)) 
[17:45:59.412]                           version <- utils::packageVersion("future")
[17:45:59.412]                       }
[17:45:59.412]                       else {
[17:45:59.412]                         version <- NULL
[17:45:59.412]                       }
[17:45:59.412]                       if (!has_future || version < "1.8.0") {
[17:45:59.412]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.412]                           "", base::R.version$version.string), 
[17:45:59.412]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.412]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.412]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.412]                             "release", "version")], collapse = " "), 
[17:45:59.412]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.412]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.412]                           info)
[17:45:59.412]                         info <- base::paste(info, collapse = "; ")
[17:45:59.412]                         if (!has_future) {
[17:45:59.412]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.412]                             info)
[17:45:59.412]                         }
[17:45:59.412]                         else {
[17:45:59.412]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.412]                             info, version)
[17:45:59.412]                         }
[17:45:59.412]                         base::stop(msg)
[17:45:59.412]                       }
[17:45:59.412]                     })
[17:45:59.412]                   }
[17:45:59.412]                   ...future.strategy.old <- future::plan("list")
[17:45:59.412]                   options(future.plan = NULL)
[17:45:59.412]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.412]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.412]                 }
[17:45:59.412]                 ...future.workdir <- getwd()
[17:45:59.412]             }
[17:45:59.412]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.412]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.412]         }
[17:45:59.412]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.412]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.412]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.412]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.412]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.412]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.412]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.412]             base::names(...future.oldOptions))
[17:45:59.412]     }
[17:45:59.412]     if (FALSE) {
[17:45:59.412]     }
[17:45:59.412]     else {
[17:45:59.412]         if (TRUE) {
[17:45:59.412]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.412]                 open = "w")
[17:45:59.412]         }
[17:45:59.412]         else {
[17:45:59.412]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.412]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.412]         }
[17:45:59.412]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.412]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.412]             base::sink(type = "output", split = FALSE)
[17:45:59.412]             base::close(...future.stdout)
[17:45:59.412]         }, add = TRUE)
[17:45:59.412]     }
[17:45:59.412]     ...future.frame <- base::sys.nframe()
[17:45:59.412]     ...future.conditions <- base::list()
[17:45:59.412]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.412]     if (FALSE) {
[17:45:59.412]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.412]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.412]     }
[17:45:59.412]     ...future.result <- base::tryCatch({
[17:45:59.412]         base::withCallingHandlers({
[17:45:59.412]             ...future.value <- base::withVisible(base::local({
[17:45:59.412]                 42L
[17:45:59.412]                 stop("Woops")
[17:45:59.412]             }))
[17:45:59.412]             future::FutureResult(value = ...future.value$value, 
[17:45:59.412]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.412]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.412]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.412]                     ...future.globalenv.names))
[17:45:59.412]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.412]         }, condition = base::local({
[17:45:59.412]             c <- base::c
[17:45:59.412]             inherits <- base::inherits
[17:45:59.412]             invokeRestart <- base::invokeRestart
[17:45:59.412]             length <- base::length
[17:45:59.412]             list <- base::list
[17:45:59.412]             seq.int <- base::seq.int
[17:45:59.412]             signalCondition <- base::signalCondition
[17:45:59.412]             sys.calls <- base::sys.calls
[17:45:59.412]             `[[` <- base::`[[`
[17:45:59.412]             `+` <- base::`+`
[17:45:59.412]             `<<-` <- base::`<<-`
[17:45:59.412]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.412]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.412]                   3L)]
[17:45:59.412]             }
[17:45:59.412]             function(cond) {
[17:45:59.412]                 is_error <- inherits(cond, "error")
[17:45:59.412]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.412]                   NULL)
[17:45:59.412]                 if (is_error) {
[17:45:59.412]                   sessionInformation <- function() {
[17:45:59.412]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.412]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.412]                       search = base::search(), system = base::Sys.info())
[17:45:59.412]                   }
[17:45:59.412]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.412]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.412]                     cond$call), session = sessionInformation(), 
[17:45:59.412]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.412]                   signalCondition(cond)
[17:45:59.412]                 }
[17:45:59.412]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.412]                 "immediateCondition"))) {
[17:45:59.412]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.412]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.412]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.412]                   if (TRUE && !signal) {
[17:45:59.412]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.412]                     {
[17:45:59.412]                       inherits <- base::inherits
[17:45:59.412]                       invokeRestart <- base::invokeRestart
[17:45:59.412]                       is.null <- base::is.null
[17:45:59.412]                       muffled <- FALSE
[17:45:59.412]                       if (inherits(cond, "message")) {
[17:45:59.412]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.412]                         if (muffled) 
[17:45:59.412]                           invokeRestart("muffleMessage")
[17:45:59.412]                       }
[17:45:59.412]                       else if (inherits(cond, "warning")) {
[17:45:59.412]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.412]                         if (muffled) 
[17:45:59.412]                           invokeRestart("muffleWarning")
[17:45:59.412]                       }
[17:45:59.412]                       else if (inherits(cond, "condition")) {
[17:45:59.412]                         if (!is.null(pattern)) {
[17:45:59.412]                           computeRestarts <- base::computeRestarts
[17:45:59.412]                           grepl <- base::grepl
[17:45:59.412]                           restarts <- computeRestarts(cond)
[17:45:59.412]                           for (restart in restarts) {
[17:45:59.412]                             name <- restart$name
[17:45:59.412]                             if (is.null(name)) 
[17:45:59.412]                               next
[17:45:59.412]                             if (!grepl(pattern, name)) 
[17:45:59.412]                               next
[17:45:59.412]                             invokeRestart(restart)
[17:45:59.412]                             muffled <- TRUE
[17:45:59.412]                             break
[17:45:59.412]                           }
[17:45:59.412]                         }
[17:45:59.412]                       }
[17:45:59.412]                       invisible(muffled)
[17:45:59.412]                     }
[17:45:59.412]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.412]                   }
[17:45:59.412]                 }
[17:45:59.412]                 else {
[17:45:59.412]                   if (TRUE) {
[17:45:59.412]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.412]                     {
[17:45:59.412]                       inherits <- base::inherits
[17:45:59.412]                       invokeRestart <- base::invokeRestart
[17:45:59.412]                       is.null <- base::is.null
[17:45:59.412]                       muffled <- FALSE
[17:45:59.412]                       if (inherits(cond, "message")) {
[17:45:59.412]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.412]                         if (muffled) 
[17:45:59.412]                           invokeRestart("muffleMessage")
[17:45:59.412]                       }
[17:45:59.412]                       else if (inherits(cond, "warning")) {
[17:45:59.412]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.412]                         if (muffled) 
[17:45:59.412]                           invokeRestart("muffleWarning")
[17:45:59.412]                       }
[17:45:59.412]                       else if (inherits(cond, "condition")) {
[17:45:59.412]                         if (!is.null(pattern)) {
[17:45:59.412]                           computeRestarts <- base::computeRestarts
[17:45:59.412]                           grepl <- base::grepl
[17:45:59.412]                           restarts <- computeRestarts(cond)
[17:45:59.412]                           for (restart in restarts) {
[17:45:59.412]                             name <- restart$name
[17:45:59.412]                             if (is.null(name)) 
[17:45:59.412]                               next
[17:45:59.412]                             if (!grepl(pattern, name)) 
[17:45:59.412]                               next
[17:45:59.412]                             invokeRestart(restart)
[17:45:59.412]                             muffled <- TRUE
[17:45:59.412]                             break
[17:45:59.412]                           }
[17:45:59.412]                         }
[17:45:59.412]                       }
[17:45:59.412]                       invisible(muffled)
[17:45:59.412]                     }
[17:45:59.412]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.412]                   }
[17:45:59.412]                 }
[17:45:59.412]             }
[17:45:59.412]         }))
[17:45:59.412]     }, error = function(ex) {
[17:45:59.412]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.412]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.412]                 ...future.rng), started = ...future.startTime, 
[17:45:59.412]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.412]             version = "1.8"), class = "FutureResult")
[17:45:59.412]     }, finally = {
[17:45:59.412]         if (!identical(...future.workdir, getwd())) 
[17:45:59.412]             setwd(...future.workdir)
[17:45:59.412]         {
[17:45:59.412]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.412]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.412]             }
[17:45:59.412]             base::options(...future.oldOptions)
[17:45:59.412]             if (.Platform$OS.type == "windows") {
[17:45:59.412]                 old_names <- names(...future.oldEnvVars)
[17:45:59.412]                 envs <- base::Sys.getenv()
[17:45:59.412]                 names <- names(envs)
[17:45:59.412]                 common <- intersect(names, old_names)
[17:45:59.412]                 added <- setdiff(names, old_names)
[17:45:59.412]                 removed <- setdiff(old_names, names)
[17:45:59.412]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.412]                   envs[common]]
[17:45:59.412]                 NAMES <- toupper(changed)
[17:45:59.412]                 args <- list()
[17:45:59.412]                 for (kk in seq_along(NAMES)) {
[17:45:59.412]                   name <- changed[[kk]]
[17:45:59.412]                   NAME <- NAMES[[kk]]
[17:45:59.412]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.412]                     next
[17:45:59.412]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.412]                 }
[17:45:59.412]                 NAMES <- toupper(added)
[17:45:59.412]                 for (kk in seq_along(NAMES)) {
[17:45:59.412]                   name <- added[[kk]]
[17:45:59.412]                   NAME <- NAMES[[kk]]
[17:45:59.412]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.412]                     next
[17:45:59.412]                   args[[name]] <- ""
[17:45:59.412]                 }
[17:45:59.412]                 NAMES <- toupper(removed)
[17:45:59.412]                 for (kk in seq_along(NAMES)) {
[17:45:59.412]                   name <- removed[[kk]]
[17:45:59.412]                   NAME <- NAMES[[kk]]
[17:45:59.412]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.412]                     next
[17:45:59.412]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.412]                 }
[17:45:59.412]                 if (length(args) > 0) 
[17:45:59.412]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.412]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.412]             }
[17:45:59.412]             else {
[17:45:59.412]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.412]             }
[17:45:59.412]             {
[17:45:59.412]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.412]                   0L) {
[17:45:59.412]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.412]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.412]                   base::options(opts)
[17:45:59.412]                 }
[17:45:59.412]                 {
[17:45:59.412]                   {
[17:45:59.412]                     NULL
[17:45:59.412]                     RNGkind("Mersenne-Twister")
[17:45:59.412]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.412]                       inherits = FALSE)
[17:45:59.412]                   }
[17:45:59.412]                   options(future.plan = NULL)
[17:45:59.412]                   if (is.na(NA_character_)) 
[17:45:59.412]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.412]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.412]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.412]                     .init = FALSE)
[17:45:59.412]                 }
[17:45:59.412]             }
[17:45:59.412]         }
[17:45:59.412]     })
[17:45:59.412]     if (TRUE) {
[17:45:59.412]         base::sink(type = "output", split = FALSE)
[17:45:59.412]         if (TRUE) {
[17:45:59.412]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.412]         }
[17:45:59.412]         else {
[17:45:59.412]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.412]         }
[17:45:59.412]         base::close(...future.stdout)
[17:45:59.412]         ...future.stdout <- NULL
[17:45:59.412]     }
[17:45:59.412]     ...future.result$conditions <- ...future.conditions
[17:45:59.412]     ...future.result$finished <- base::Sys.time()
[17:45:59.412]     ...future.result
[17:45:59.412] }
[17:45:59.414] plan(): Setting new future strategy stack:
[17:45:59.414] List of future strategies:
[17:45:59.414] 1. sequential:
[17:45:59.414]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.414]    - tweaked: FALSE
[17:45:59.414]    - call: NULL
[17:45:59.414] plan(): nbrOfWorkers() = 1
[17:45:59.416] plan(): Setting new future strategy stack:
[17:45:59.416] List of future strategies:
[17:45:59.416] 1. sequential:
[17:45:59.416]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.416]    - tweaked: FALSE
[17:45:59.416]    - call: future::plan("sequential")
[17:45:59.416] plan(): nbrOfWorkers() = 1
[17:45:59.416] SequentialFuture started (and completed)
[17:45:59.417] signalConditions() ...
[17:45:59.417]  - include = ‘immediateCondition’
[17:45:59.417]  - exclude = 
[17:45:59.417]  - resignal = FALSE
[17:45:59.417]  - Number of conditions: 1
[17:45:59.417] signalConditions() ... done
[17:45:59.417] - Launch lazy future ... done
[17:45:59.417] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[17:45:59.418] signalConditions() ...
[17:45:59.418]  - include = ‘immediateCondition’
[17:45:59.418]  - exclude = 
[17:45:59.418]  - resignal = FALSE
[17:45:59.418]  - Number of conditions: 1
[17:45:59.418] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[17:45:59.419] resolved() for ‘SequentialFuture’ ...
[17:45:59.420] - state: ‘finished’
[17:45:59.420] - run: TRUE
[17:45:59.420] - result: ‘FutureResult’
[17:45:59.420] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[17:45:59.421] getGlobalsAndPackages() ...
[17:45:59.421] Searching for globals...
[17:45:59.422] - globals found: [2] ‘{’, ‘stop’
[17:45:59.422] Searching for globals ... DONE
[17:45:59.422] Resolving globals: FALSE
[17:45:59.422] 
[17:45:59.422] 
[17:45:59.422] getGlobalsAndPackages() ... DONE
[17:45:59.423] run() for ‘Future’ ...
[17:45:59.423] - state: ‘created’
[17:45:59.423] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.423] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.423] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.423]   - Field: ‘label’
[17:45:59.423]   - Field: ‘local’
[17:45:59.423]   - Field: ‘owner’
[17:45:59.424]   - Field: ‘envir’
[17:45:59.424]   - Field: ‘packages’
[17:45:59.424]   - Field: ‘gc’
[17:45:59.424]   - Field: ‘conditions’
[17:45:59.424]   - Field: ‘expr’
[17:45:59.424]   - Field: ‘uuid’
[17:45:59.424]   - Field: ‘seed’
[17:45:59.424]   - Field: ‘version’
[17:45:59.424]   - Field: ‘result’
[17:45:59.424]   - Field: ‘asynchronous’
[17:45:59.424]   - Field: ‘calls’
[17:45:59.425]   - Field: ‘globals’
[17:45:59.425]   - Field: ‘stdout’
[17:45:59.425]   - Field: ‘earlySignal’
[17:45:59.425]   - Field: ‘lazy’
[17:45:59.425]   - Field: ‘state’
[17:45:59.425] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.425] - Launch lazy future ...
[17:45:59.425] Packages needed by the future expression (n = 0): <none>
[17:45:59.425] Packages needed by future strategies (n = 0): <none>
[17:45:59.426] {
[17:45:59.426]     {
[17:45:59.426]         {
[17:45:59.426]             ...future.startTime <- base::Sys.time()
[17:45:59.426]             {
[17:45:59.426]                 {
[17:45:59.426]                   {
[17:45:59.426]                     base::local({
[17:45:59.426]                       has_future <- base::requireNamespace("future", 
[17:45:59.426]                         quietly = TRUE)
[17:45:59.426]                       if (has_future) {
[17:45:59.426]                         ns <- base::getNamespace("future")
[17:45:59.426]                         version <- ns[[".package"]][["version"]]
[17:45:59.426]                         if (is.null(version)) 
[17:45:59.426]                           version <- utils::packageVersion("future")
[17:45:59.426]                       }
[17:45:59.426]                       else {
[17:45:59.426]                         version <- NULL
[17:45:59.426]                       }
[17:45:59.426]                       if (!has_future || version < "1.8.0") {
[17:45:59.426]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.426]                           "", base::R.version$version.string), 
[17:45:59.426]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.426]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.426]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.426]                             "release", "version")], collapse = " "), 
[17:45:59.426]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.426]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.426]                           info)
[17:45:59.426]                         info <- base::paste(info, collapse = "; ")
[17:45:59.426]                         if (!has_future) {
[17:45:59.426]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.426]                             info)
[17:45:59.426]                         }
[17:45:59.426]                         else {
[17:45:59.426]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.426]                             info, version)
[17:45:59.426]                         }
[17:45:59.426]                         base::stop(msg)
[17:45:59.426]                       }
[17:45:59.426]                     })
[17:45:59.426]                   }
[17:45:59.426]                   ...future.strategy.old <- future::plan("list")
[17:45:59.426]                   options(future.plan = NULL)
[17:45:59.426]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.426]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.426]                 }
[17:45:59.426]                 ...future.workdir <- getwd()
[17:45:59.426]             }
[17:45:59.426]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.426]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.426]         }
[17:45:59.426]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.426]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.426]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.426]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.426]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.426]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.426]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.426]             base::names(...future.oldOptions))
[17:45:59.426]     }
[17:45:59.426]     if (FALSE) {
[17:45:59.426]     }
[17:45:59.426]     else {
[17:45:59.426]         if (TRUE) {
[17:45:59.426]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.426]                 open = "w")
[17:45:59.426]         }
[17:45:59.426]         else {
[17:45:59.426]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.426]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.426]         }
[17:45:59.426]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.426]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.426]             base::sink(type = "output", split = FALSE)
[17:45:59.426]             base::close(...future.stdout)
[17:45:59.426]         }, add = TRUE)
[17:45:59.426]     }
[17:45:59.426]     ...future.frame <- base::sys.nframe()
[17:45:59.426]     ...future.conditions <- base::list()
[17:45:59.426]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.426]     if (FALSE) {
[17:45:59.426]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.426]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.426]     }
[17:45:59.426]     ...future.result <- base::tryCatch({
[17:45:59.426]         base::withCallingHandlers({
[17:45:59.426]             ...future.value <- base::withVisible(base::local({
[17:45:59.426]                 42L
[17:45:59.426]                 stop("Woops")
[17:45:59.426]             }))
[17:45:59.426]             future::FutureResult(value = ...future.value$value, 
[17:45:59.426]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.426]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.426]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.426]                     ...future.globalenv.names))
[17:45:59.426]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.426]         }, condition = base::local({
[17:45:59.426]             c <- base::c
[17:45:59.426]             inherits <- base::inherits
[17:45:59.426]             invokeRestart <- base::invokeRestart
[17:45:59.426]             length <- base::length
[17:45:59.426]             list <- base::list
[17:45:59.426]             seq.int <- base::seq.int
[17:45:59.426]             signalCondition <- base::signalCondition
[17:45:59.426]             sys.calls <- base::sys.calls
[17:45:59.426]             `[[` <- base::`[[`
[17:45:59.426]             `+` <- base::`+`
[17:45:59.426]             `<<-` <- base::`<<-`
[17:45:59.426]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.426]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.426]                   3L)]
[17:45:59.426]             }
[17:45:59.426]             function(cond) {
[17:45:59.426]                 is_error <- inherits(cond, "error")
[17:45:59.426]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.426]                   NULL)
[17:45:59.426]                 if (is_error) {
[17:45:59.426]                   sessionInformation <- function() {
[17:45:59.426]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.426]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.426]                       search = base::search(), system = base::Sys.info())
[17:45:59.426]                   }
[17:45:59.426]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.426]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.426]                     cond$call), session = sessionInformation(), 
[17:45:59.426]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.426]                   signalCondition(cond)
[17:45:59.426]                 }
[17:45:59.426]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.426]                 "immediateCondition"))) {
[17:45:59.426]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.426]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.426]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.426]                   if (TRUE && !signal) {
[17:45:59.426]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.426]                     {
[17:45:59.426]                       inherits <- base::inherits
[17:45:59.426]                       invokeRestart <- base::invokeRestart
[17:45:59.426]                       is.null <- base::is.null
[17:45:59.426]                       muffled <- FALSE
[17:45:59.426]                       if (inherits(cond, "message")) {
[17:45:59.426]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.426]                         if (muffled) 
[17:45:59.426]                           invokeRestart("muffleMessage")
[17:45:59.426]                       }
[17:45:59.426]                       else if (inherits(cond, "warning")) {
[17:45:59.426]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.426]                         if (muffled) 
[17:45:59.426]                           invokeRestart("muffleWarning")
[17:45:59.426]                       }
[17:45:59.426]                       else if (inherits(cond, "condition")) {
[17:45:59.426]                         if (!is.null(pattern)) {
[17:45:59.426]                           computeRestarts <- base::computeRestarts
[17:45:59.426]                           grepl <- base::grepl
[17:45:59.426]                           restarts <- computeRestarts(cond)
[17:45:59.426]                           for (restart in restarts) {
[17:45:59.426]                             name <- restart$name
[17:45:59.426]                             if (is.null(name)) 
[17:45:59.426]                               next
[17:45:59.426]                             if (!grepl(pattern, name)) 
[17:45:59.426]                               next
[17:45:59.426]                             invokeRestart(restart)
[17:45:59.426]                             muffled <- TRUE
[17:45:59.426]                             break
[17:45:59.426]                           }
[17:45:59.426]                         }
[17:45:59.426]                       }
[17:45:59.426]                       invisible(muffled)
[17:45:59.426]                     }
[17:45:59.426]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.426]                   }
[17:45:59.426]                 }
[17:45:59.426]                 else {
[17:45:59.426]                   if (TRUE) {
[17:45:59.426]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.426]                     {
[17:45:59.426]                       inherits <- base::inherits
[17:45:59.426]                       invokeRestart <- base::invokeRestart
[17:45:59.426]                       is.null <- base::is.null
[17:45:59.426]                       muffled <- FALSE
[17:45:59.426]                       if (inherits(cond, "message")) {
[17:45:59.426]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.426]                         if (muffled) 
[17:45:59.426]                           invokeRestart("muffleMessage")
[17:45:59.426]                       }
[17:45:59.426]                       else if (inherits(cond, "warning")) {
[17:45:59.426]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.426]                         if (muffled) 
[17:45:59.426]                           invokeRestart("muffleWarning")
[17:45:59.426]                       }
[17:45:59.426]                       else if (inherits(cond, "condition")) {
[17:45:59.426]                         if (!is.null(pattern)) {
[17:45:59.426]                           computeRestarts <- base::computeRestarts
[17:45:59.426]                           grepl <- base::grepl
[17:45:59.426]                           restarts <- computeRestarts(cond)
[17:45:59.426]                           for (restart in restarts) {
[17:45:59.426]                             name <- restart$name
[17:45:59.426]                             if (is.null(name)) 
[17:45:59.426]                               next
[17:45:59.426]                             if (!grepl(pattern, name)) 
[17:45:59.426]                               next
[17:45:59.426]                             invokeRestart(restart)
[17:45:59.426]                             muffled <- TRUE
[17:45:59.426]                             break
[17:45:59.426]                           }
[17:45:59.426]                         }
[17:45:59.426]                       }
[17:45:59.426]                       invisible(muffled)
[17:45:59.426]                     }
[17:45:59.426]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.426]                   }
[17:45:59.426]                 }
[17:45:59.426]             }
[17:45:59.426]         }))
[17:45:59.426]     }, error = function(ex) {
[17:45:59.426]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.426]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.426]                 ...future.rng), started = ...future.startTime, 
[17:45:59.426]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.426]             version = "1.8"), class = "FutureResult")
[17:45:59.426]     }, finally = {
[17:45:59.426]         if (!identical(...future.workdir, getwd())) 
[17:45:59.426]             setwd(...future.workdir)
[17:45:59.426]         {
[17:45:59.426]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.426]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.426]             }
[17:45:59.426]             base::options(...future.oldOptions)
[17:45:59.426]             if (.Platform$OS.type == "windows") {
[17:45:59.426]                 old_names <- names(...future.oldEnvVars)
[17:45:59.426]                 envs <- base::Sys.getenv()
[17:45:59.426]                 names <- names(envs)
[17:45:59.426]                 common <- intersect(names, old_names)
[17:45:59.426]                 added <- setdiff(names, old_names)
[17:45:59.426]                 removed <- setdiff(old_names, names)
[17:45:59.426]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.426]                   envs[common]]
[17:45:59.426]                 NAMES <- toupper(changed)
[17:45:59.426]                 args <- list()
[17:45:59.426]                 for (kk in seq_along(NAMES)) {
[17:45:59.426]                   name <- changed[[kk]]
[17:45:59.426]                   NAME <- NAMES[[kk]]
[17:45:59.426]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.426]                     next
[17:45:59.426]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.426]                 }
[17:45:59.426]                 NAMES <- toupper(added)
[17:45:59.426]                 for (kk in seq_along(NAMES)) {
[17:45:59.426]                   name <- added[[kk]]
[17:45:59.426]                   NAME <- NAMES[[kk]]
[17:45:59.426]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.426]                     next
[17:45:59.426]                   args[[name]] <- ""
[17:45:59.426]                 }
[17:45:59.426]                 NAMES <- toupper(removed)
[17:45:59.426]                 for (kk in seq_along(NAMES)) {
[17:45:59.426]                   name <- removed[[kk]]
[17:45:59.426]                   NAME <- NAMES[[kk]]
[17:45:59.426]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.426]                     next
[17:45:59.426]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.426]                 }
[17:45:59.426]                 if (length(args) > 0) 
[17:45:59.426]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.426]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.426]             }
[17:45:59.426]             else {
[17:45:59.426]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.426]             }
[17:45:59.426]             {
[17:45:59.426]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.426]                   0L) {
[17:45:59.426]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.426]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.426]                   base::options(opts)
[17:45:59.426]                 }
[17:45:59.426]                 {
[17:45:59.426]                   {
[17:45:59.426]                     NULL
[17:45:59.426]                     RNGkind("Mersenne-Twister")
[17:45:59.426]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.426]                       inherits = FALSE)
[17:45:59.426]                   }
[17:45:59.426]                   options(future.plan = NULL)
[17:45:59.426]                   if (is.na(NA_character_)) 
[17:45:59.426]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.426]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.426]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.426]                     .init = FALSE)
[17:45:59.426]                 }
[17:45:59.426]             }
[17:45:59.426]         }
[17:45:59.426]     })
[17:45:59.426]     if (TRUE) {
[17:45:59.426]         base::sink(type = "output", split = FALSE)
[17:45:59.426]         if (TRUE) {
[17:45:59.426]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.426]         }
[17:45:59.426]         else {
[17:45:59.426]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.426]         }
[17:45:59.426]         base::close(...future.stdout)
[17:45:59.426]         ...future.stdout <- NULL
[17:45:59.426]     }
[17:45:59.426]     ...future.result$conditions <- ...future.conditions
[17:45:59.426]     ...future.result$finished <- base::Sys.time()
[17:45:59.426]     ...future.result
[17:45:59.426] }
[17:45:59.427] plan(): Setting new future strategy stack:
[17:45:59.428] List of future strategies:
[17:45:59.428] 1. sequential:
[17:45:59.428]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.428]    - tweaked: FALSE
[17:45:59.428]    - call: NULL
[17:45:59.428] plan(): nbrOfWorkers() = 1
[17:45:59.429] plan(): Setting new future strategy stack:
[17:45:59.429] List of future strategies:
[17:45:59.429] 1. sequential:
[17:45:59.429]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.429]    - tweaked: FALSE
[17:45:59.429]    - call: future::plan("sequential")
[17:45:59.429] plan(): nbrOfWorkers() = 1
[17:45:59.430] SequentialFuture started (and completed)
[17:45:59.430] signalConditions() ...
[17:45:59.430]  - include = ‘immediateCondition’
[17:45:59.430]  - exclude = 
[17:45:59.430]  - resignal = FALSE
[17:45:59.430]  - Number of conditions: 1
[17:45:59.430] signalConditions() ... done
[17:45:59.430] - Launch lazy future ... done
[17:45:59.430] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[17:45:59.431] resolved() for ‘SequentialFuture’ ...
[17:45:59.431] - state: ‘finished’
[17:45:59.431] - run: TRUE
[17:45:59.431] - result: ‘FutureResult’
[17:45:59.431] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[17:45:59.432] getGlobalsAndPackages() ...
[17:45:59.432] Searching for globals...
[17:45:59.433] - globals found: [2] ‘{’, ‘stop’
[17:45:59.433] Searching for globals ... DONE
[17:45:59.433] Resolving globals: FALSE
[17:45:59.433] 
[17:45:59.434] 
[17:45:59.434] getGlobalsAndPackages() ... DONE
[17:45:59.434] run() for ‘Future’ ...
[17:45:59.434] - state: ‘created’
[17:45:59.434] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.434] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.434] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.435]   - Field: ‘label’
[17:45:59.435]   - Field: ‘local’
[17:45:59.435]   - Field: ‘owner’
[17:45:59.435]   - Field: ‘envir’
[17:45:59.435]   - Field: ‘packages’
[17:45:59.435]   - Field: ‘gc’
[17:45:59.435]   - Field: ‘conditions’
[17:45:59.435]   - Field: ‘expr’
[17:45:59.435]   - Field: ‘uuid’
[17:45:59.435]   - Field: ‘seed’
[17:45:59.436]   - Field: ‘version’
[17:45:59.436]   - Field: ‘result’
[17:45:59.436]   - Field: ‘asynchronous’
[17:45:59.436]   - Field: ‘calls’
[17:45:59.436]   - Field: ‘globals’
[17:45:59.436]   - Field: ‘stdout’
[17:45:59.439]   - Field: ‘earlySignal’
[17:45:59.439]   - Field: ‘lazy’
[17:45:59.439]   - Field: ‘state’
[17:45:59.439] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.439] - Launch lazy future ...
[17:45:59.440] Packages needed by the future expression (n = 0): <none>
[17:45:59.440] Packages needed by future strategies (n = 0): <none>
[17:45:59.440] {
[17:45:59.440]     {
[17:45:59.440]         {
[17:45:59.440]             ...future.startTime <- base::Sys.time()
[17:45:59.440]             {
[17:45:59.440]                 {
[17:45:59.440]                   {
[17:45:59.440]                     base::local({
[17:45:59.440]                       has_future <- base::requireNamespace("future", 
[17:45:59.440]                         quietly = TRUE)
[17:45:59.440]                       if (has_future) {
[17:45:59.440]                         ns <- base::getNamespace("future")
[17:45:59.440]                         version <- ns[[".package"]][["version"]]
[17:45:59.440]                         if (is.null(version)) 
[17:45:59.440]                           version <- utils::packageVersion("future")
[17:45:59.440]                       }
[17:45:59.440]                       else {
[17:45:59.440]                         version <- NULL
[17:45:59.440]                       }
[17:45:59.440]                       if (!has_future || version < "1.8.0") {
[17:45:59.440]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.440]                           "", base::R.version$version.string), 
[17:45:59.440]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.440]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.440]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.440]                             "release", "version")], collapse = " "), 
[17:45:59.440]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.440]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.440]                           info)
[17:45:59.440]                         info <- base::paste(info, collapse = "; ")
[17:45:59.440]                         if (!has_future) {
[17:45:59.440]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.440]                             info)
[17:45:59.440]                         }
[17:45:59.440]                         else {
[17:45:59.440]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.440]                             info, version)
[17:45:59.440]                         }
[17:45:59.440]                         base::stop(msg)
[17:45:59.440]                       }
[17:45:59.440]                     })
[17:45:59.440]                   }
[17:45:59.440]                   ...future.strategy.old <- future::plan("list")
[17:45:59.440]                   options(future.plan = NULL)
[17:45:59.440]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.440]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.440]                 }
[17:45:59.440]                 ...future.workdir <- getwd()
[17:45:59.440]             }
[17:45:59.440]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.440]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.440]         }
[17:45:59.440]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.440]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.440]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.440]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.440]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.440]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.440]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.440]             base::names(...future.oldOptions))
[17:45:59.440]     }
[17:45:59.440]     if (FALSE) {
[17:45:59.440]     }
[17:45:59.440]     else {
[17:45:59.440]         if (TRUE) {
[17:45:59.440]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.440]                 open = "w")
[17:45:59.440]         }
[17:45:59.440]         else {
[17:45:59.440]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.440]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.440]         }
[17:45:59.440]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.440]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.440]             base::sink(type = "output", split = FALSE)
[17:45:59.440]             base::close(...future.stdout)
[17:45:59.440]         }, add = TRUE)
[17:45:59.440]     }
[17:45:59.440]     ...future.frame <- base::sys.nframe()
[17:45:59.440]     ...future.conditions <- base::list()
[17:45:59.440]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.440]     if (FALSE) {
[17:45:59.440]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.440]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.440]     }
[17:45:59.440]     ...future.result <- base::tryCatch({
[17:45:59.440]         base::withCallingHandlers({
[17:45:59.440]             ...future.value <- base::withVisible(base::local({
[17:45:59.440]                 42L
[17:45:59.440]                 stop("Woops")
[17:45:59.440]             }))
[17:45:59.440]             future::FutureResult(value = ...future.value$value, 
[17:45:59.440]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.440]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.440]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.440]                     ...future.globalenv.names))
[17:45:59.440]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.440]         }, condition = base::local({
[17:45:59.440]             c <- base::c
[17:45:59.440]             inherits <- base::inherits
[17:45:59.440]             invokeRestart <- base::invokeRestart
[17:45:59.440]             length <- base::length
[17:45:59.440]             list <- base::list
[17:45:59.440]             seq.int <- base::seq.int
[17:45:59.440]             signalCondition <- base::signalCondition
[17:45:59.440]             sys.calls <- base::sys.calls
[17:45:59.440]             `[[` <- base::`[[`
[17:45:59.440]             `+` <- base::`+`
[17:45:59.440]             `<<-` <- base::`<<-`
[17:45:59.440]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.440]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.440]                   3L)]
[17:45:59.440]             }
[17:45:59.440]             function(cond) {
[17:45:59.440]                 is_error <- inherits(cond, "error")
[17:45:59.440]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.440]                   NULL)
[17:45:59.440]                 if (is_error) {
[17:45:59.440]                   sessionInformation <- function() {
[17:45:59.440]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.440]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.440]                       search = base::search(), system = base::Sys.info())
[17:45:59.440]                   }
[17:45:59.440]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.440]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.440]                     cond$call), session = sessionInformation(), 
[17:45:59.440]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.440]                   signalCondition(cond)
[17:45:59.440]                 }
[17:45:59.440]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.440]                 "immediateCondition"))) {
[17:45:59.440]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.440]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.440]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.440]                   if (TRUE && !signal) {
[17:45:59.440]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.440]                     {
[17:45:59.440]                       inherits <- base::inherits
[17:45:59.440]                       invokeRestart <- base::invokeRestart
[17:45:59.440]                       is.null <- base::is.null
[17:45:59.440]                       muffled <- FALSE
[17:45:59.440]                       if (inherits(cond, "message")) {
[17:45:59.440]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.440]                         if (muffled) 
[17:45:59.440]                           invokeRestart("muffleMessage")
[17:45:59.440]                       }
[17:45:59.440]                       else if (inherits(cond, "warning")) {
[17:45:59.440]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.440]                         if (muffled) 
[17:45:59.440]                           invokeRestart("muffleWarning")
[17:45:59.440]                       }
[17:45:59.440]                       else if (inherits(cond, "condition")) {
[17:45:59.440]                         if (!is.null(pattern)) {
[17:45:59.440]                           computeRestarts <- base::computeRestarts
[17:45:59.440]                           grepl <- base::grepl
[17:45:59.440]                           restarts <- computeRestarts(cond)
[17:45:59.440]                           for (restart in restarts) {
[17:45:59.440]                             name <- restart$name
[17:45:59.440]                             if (is.null(name)) 
[17:45:59.440]                               next
[17:45:59.440]                             if (!grepl(pattern, name)) 
[17:45:59.440]                               next
[17:45:59.440]                             invokeRestart(restart)
[17:45:59.440]                             muffled <- TRUE
[17:45:59.440]                             break
[17:45:59.440]                           }
[17:45:59.440]                         }
[17:45:59.440]                       }
[17:45:59.440]                       invisible(muffled)
[17:45:59.440]                     }
[17:45:59.440]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.440]                   }
[17:45:59.440]                 }
[17:45:59.440]                 else {
[17:45:59.440]                   if (TRUE) {
[17:45:59.440]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.440]                     {
[17:45:59.440]                       inherits <- base::inherits
[17:45:59.440]                       invokeRestart <- base::invokeRestart
[17:45:59.440]                       is.null <- base::is.null
[17:45:59.440]                       muffled <- FALSE
[17:45:59.440]                       if (inherits(cond, "message")) {
[17:45:59.440]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.440]                         if (muffled) 
[17:45:59.440]                           invokeRestart("muffleMessage")
[17:45:59.440]                       }
[17:45:59.440]                       else if (inherits(cond, "warning")) {
[17:45:59.440]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.440]                         if (muffled) 
[17:45:59.440]                           invokeRestart("muffleWarning")
[17:45:59.440]                       }
[17:45:59.440]                       else if (inherits(cond, "condition")) {
[17:45:59.440]                         if (!is.null(pattern)) {
[17:45:59.440]                           computeRestarts <- base::computeRestarts
[17:45:59.440]                           grepl <- base::grepl
[17:45:59.440]                           restarts <- computeRestarts(cond)
[17:45:59.440]                           for (restart in restarts) {
[17:45:59.440]                             name <- restart$name
[17:45:59.440]                             if (is.null(name)) 
[17:45:59.440]                               next
[17:45:59.440]                             if (!grepl(pattern, name)) 
[17:45:59.440]                               next
[17:45:59.440]                             invokeRestart(restart)
[17:45:59.440]                             muffled <- TRUE
[17:45:59.440]                             break
[17:45:59.440]                           }
[17:45:59.440]                         }
[17:45:59.440]                       }
[17:45:59.440]                       invisible(muffled)
[17:45:59.440]                     }
[17:45:59.440]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.440]                   }
[17:45:59.440]                 }
[17:45:59.440]             }
[17:45:59.440]         }))
[17:45:59.440]     }, error = function(ex) {
[17:45:59.440]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.440]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.440]                 ...future.rng), started = ...future.startTime, 
[17:45:59.440]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.440]             version = "1.8"), class = "FutureResult")
[17:45:59.440]     }, finally = {
[17:45:59.440]         if (!identical(...future.workdir, getwd())) 
[17:45:59.440]             setwd(...future.workdir)
[17:45:59.440]         {
[17:45:59.440]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.440]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.440]             }
[17:45:59.440]             base::options(...future.oldOptions)
[17:45:59.440]             if (.Platform$OS.type == "windows") {
[17:45:59.440]                 old_names <- names(...future.oldEnvVars)
[17:45:59.440]                 envs <- base::Sys.getenv()
[17:45:59.440]                 names <- names(envs)
[17:45:59.440]                 common <- intersect(names, old_names)
[17:45:59.440]                 added <- setdiff(names, old_names)
[17:45:59.440]                 removed <- setdiff(old_names, names)
[17:45:59.440]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.440]                   envs[common]]
[17:45:59.440]                 NAMES <- toupper(changed)
[17:45:59.440]                 args <- list()
[17:45:59.440]                 for (kk in seq_along(NAMES)) {
[17:45:59.440]                   name <- changed[[kk]]
[17:45:59.440]                   NAME <- NAMES[[kk]]
[17:45:59.440]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.440]                     next
[17:45:59.440]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.440]                 }
[17:45:59.440]                 NAMES <- toupper(added)
[17:45:59.440]                 for (kk in seq_along(NAMES)) {
[17:45:59.440]                   name <- added[[kk]]
[17:45:59.440]                   NAME <- NAMES[[kk]]
[17:45:59.440]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.440]                     next
[17:45:59.440]                   args[[name]] <- ""
[17:45:59.440]                 }
[17:45:59.440]                 NAMES <- toupper(removed)
[17:45:59.440]                 for (kk in seq_along(NAMES)) {
[17:45:59.440]                   name <- removed[[kk]]
[17:45:59.440]                   NAME <- NAMES[[kk]]
[17:45:59.440]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.440]                     next
[17:45:59.440]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.440]                 }
[17:45:59.440]                 if (length(args) > 0) 
[17:45:59.440]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.440]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.440]             }
[17:45:59.440]             else {
[17:45:59.440]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.440]             }
[17:45:59.440]             {
[17:45:59.440]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.440]                   0L) {
[17:45:59.440]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.440]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.440]                   base::options(opts)
[17:45:59.440]                 }
[17:45:59.440]                 {
[17:45:59.440]                   {
[17:45:59.440]                     NULL
[17:45:59.440]                     RNGkind("Mersenne-Twister")
[17:45:59.440]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.440]                       inherits = FALSE)
[17:45:59.440]                   }
[17:45:59.440]                   options(future.plan = NULL)
[17:45:59.440]                   if (is.na(NA_character_)) 
[17:45:59.440]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.440]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.440]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.440]                     .init = FALSE)
[17:45:59.440]                 }
[17:45:59.440]             }
[17:45:59.440]         }
[17:45:59.440]     })
[17:45:59.440]     if (TRUE) {
[17:45:59.440]         base::sink(type = "output", split = FALSE)
[17:45:59.440]         if (TRUE) {
[17:45:59.440]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.440]         }
[17:45:59.440]         else {
[17:45:59.440]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.440]         }
[17:45:59.440]         base::close(...future.stdout)
[17:45:59.440]         ...future.stdout <- NULL
[17:45:59.440]     }
[17:45:59.440]     ...future.result$conditions <- ...future.conditions
[17:45:59.440]     ...future.result$finished <- base::Sys.time()
[17:45:59.440]     ...future.result
[17:45:59.440] }
[17:45:59.442] plan(): Setting new future strategy stack:
[17:45:59.442] List of future strategies:
[17:45:59.442] 1. sequential:
[17:45:59.442]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.442]    - tweaked: FALSE
[17:45:59.442]    - call: NULL
[17:45:59.442] plan(): nbrOfWorkers() = 1
[17:45:59.443] plan(): Setting new future strategy stack:
[17:45:59.443] List of future strategies:
[17:45:59.443] 1. sequential:
[17:45:59.443]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.443]    - tweaked: FALSE
[17:45:59.443]    - call: future::plan("sequential")
[17:45:59.444] plan(): nbrOfWorkers() = 1
[17:45:59.444] SequentialFuture started (and completed)
[17:45:59.444] signalConditions() ...
[17:45:59.444]  - include = ‘immediateCondition’
[17:45:59.444]  - exclude = 
[17:45:59.444]  - resignal = FALSE
[17:45:59.444]  - Number of conditions: 1
[17:45:59.445] signalConditions() ... done
[17:45:59.445] - Launch lazy future ... done
[17:45:59.445] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[17:45:59.445] getGlobalsAndPackages() ...
[17:45:59.445] Searching for globals...
[17:45:59.446] - globals found: [2] ‘{’, ‘stop’
[17:45:59.446] Searching for globals ... DONE
[17:45:59.446] Resolving globals: FALSE
[17:45:59.446] 
[17:45:59.447] 
[17:45:59.447] getGlobalsAndPackages() ... DONE
[17:45:59.447] run() for ‘Future’ ...
[17:45:59.447] - state: ‘created’
[17:45:59.447] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.447] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.447] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.448]   - Field: ‘label’
[17:45:59.448]   - Field: ‘local’
[17:45:59.448]   - Field: ‘owner’
[17:45:59.448]   - Field: ‘envir’
[17:45:59.448]   - Field: ‘packages’
[17:45:59.448]   - Field: ‘gc’
[17:45:59.448]   - Field: ‘conditions’
[17:45:59.448]   - Field: ‘expr’
[17:45:59.448]   - Field: ‘uuid’
[17:45:59.448]   - Field: ‘seed’
[17:45:59.449]   - Field: ‘version’
[17:45:59.449]   - Field: ‘result’
[17:45:59.449]   - Field: ‘asynchronous’
[17:45:59.449]   - Field: ‘calls’
[17:45:59.449]   - Field: ‘globals’
[17:45:59.449]   - Field: ‘stdout’
[17:45:59.449]   - Field: ‘earlySignal’
[17:45:59.449]   - Field: ‘lazy’
[17:45:59.449]   - Field: ‘state’
[17:45:59.449] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.449] - Launch lazy future ...
[17:45:59.450] Packages needed by the future expression (n = 0): <none>
[17:45:59.450] Packages needed by future strategies (n = 0): <none>
[17:45:59.450] {
[17:45:59.450]     {
[17:45:59.450]         {
[17:45:59.450]             ...future.startTime <- base::Sys.time()
[17:45:59.450]             {
[17:45:59.450]                 {
[17:45:59.450]                   {
[17:45:59.450]                     base::local({
[17:45:59.450]                       has_future <- base::requireNamespace("future", 
[17:45:59.450]                         quietly = TRUE)
[17:45:59.450]                       if (has_future) {
[17:45:59.450]                         ns <- base::getNamespace("future")
[17:45:59.450]                         version <- ns[[".package"]][["version"]]
[17:45:59.450]                         if (is.null(version)) 
[17:45:59.450]                           version <- utils::packageVersion("future")
[17:45:59.450]                       }
[17:45:59.450]                       else {
[17:45:59.450]                         version <- NULL
[17:45:59.450]                       }
[17:45:59.450]                       if (!has_future || version < "1.8.0") {
[17:45:59.450]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.450]                           "", base::R.version$version.string), 
[17:45:59.450]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.450]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.450]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.450]                             "release", "version")], collapse = " "), 
[17:45:59.450]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.450]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.450]                           info)
[17:45:59.450]                         info <- base::paste(info, collapse = "; ")
[17:45:59.450]                         if (!has_future) {
[17:45:59.450]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.450]                             info)
[17:45:59.450]                         }
[17:45:59.450]                         else {
[17:45:59.450]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.450]                             info, version)
[17:45:59.450]                         }
[17:45:59.450]                         base::stop(msg)
[17:45:59.450]                       }
[17:45:59.450]                     })
[17:45:59.450]                   }
[17:45:59.450]                   ...future.strategy.old <- future::plan("list")
[17:45:59.450]                   options(future.plan = NULL)
[17:45:59.450]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.450]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.450]                 }
[17:45:59.450]                 ...future.workdir <- getwd()
[17:45:59.450]             }
[17:45:59.450]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.450]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.450]         }
[17:45:59.450]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.450]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.450]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.450]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.450]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.450]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.450]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.450]             base::names(...future.oldOptions))
[17:45:59.450]     }
[17:45:59.450]     if (FALSE) {
[17:45:59.450]     }
[17:45:59.450]     else {
[17:45:59.450]         if (TRUE) {
[17:45:59.450]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.450]                 open = "w")
[17:45:59.450]         }
[17:45:59.450]         else {
[17:45:59.450]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.450]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.450]         }
[17:45:59.450]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.450]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.450]             base::sink(type = "output", split = FALSE)
[17:45:59.450]             base::close(...future.stdout)
[17:45:59.450]         }, add = TRUE)
[17:45:59.450]     }
[17:45:59.450]     ...future.frame <- base::sys.nframe()
[17:45:59.450]     ...future.conditions <- base::list()
[17:45:59.450]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.450]     if (FALSE) {
[17:45:59.450]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.450]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.450]     }
[17:45:59.450]     ...future.result <- base::tryCatch({
[17:45:59.450]         base::withCallingHandlers({
[17:45:59.450]             ...future.value <- base::withVisible(base::local({
[17:45:59.450]                 42L
[17:45:59.450]                 stop("Woops")
[17:45:59.450]             }))
[17:45:59.450]             future::FutureResult(value = ...future.value$value, 
[17:45:59.450]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.450]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.450]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.450]                     ...future.globalenv.names))
[17:45:59.450]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.450]         }, condition = base::local({
[17:45:59.450]             c <- base::c
[17:45:59.450]             inherits <- base::inherits
[17:45:59.450]             invokeRestart <- base::invokeRestart
[17:45:59.450]             length <- base::length
[17:45:59.450]             list <- base::list
[17:45:59.450]             seq.int <- base::seq.int
[17:45:59.450]             signalCondition <- base::signalCondition
[17:45:59.450]             sys.calls <- base::sys.calls
[17:45:59.450]             `[[` <- base::`[[`
[17:45:59.450]             `+` <- base::`+`
[17:45:59.450]             `<<-` <- base::`<<-`
[17:45:59.450]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.450]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.450]                   3L)]
[17:45:59.450]             }
[17:45:59.450]             function(cond) {
[17:45:59.450]                 is_error <- inherits(cond, "error")
[17:45:59.450]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.450]                   NULL)
[17:45:59.450]                 if (is_error) {
[17:45:59.450]                   sessionInformation <- function() {
[17:45:59.450]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.450]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.450]                       search = base::search(), system = base::Sys.info())
[17:45:59.450]                   }
[17:45:59.450]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.450]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.450]                     cond$call), session = sessionInformation(), 
[17:45:59.450]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.450]                   signalCondition(cond)
[17:45:59.450]                 }
[17:45:59.450]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.450]                 "immediateCondition"))) {
[17:45:59.450]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.450]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.450]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.450]                   if (TRUE && !signal) {
[17:45:59.450]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.450]                     {
[17:45:59.450]                       inherits <- base::inherits
[17:45:59.450]                       invokeRestart <- base::invokeRestart
[17:45:59.450]                       is.null <- base::is.null
[17:45:59.450]                       muffled <- FALSE
[17:45:59.450]                       if (inherits(cond, "message")) {
[17:45:59.450]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.450]                         if (muffled) 
[17:45:59.450]                           invokeRestart("muffleMessage")
[17:45:59.450]                       }
[17:45:59.450]                       else if (inherits(cond, "warning")) {
[17:45:59.450]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.450]                         if (muffled) 
[17:45:59.450]                           invokeRestart("muffleWarning")
[17:45:59.450]                       }
[17:45:59.450]                       else if (inherits(cond, "condition")) {
[17:45:59.450]                         if (!is.null(pattern)) {
[17:45:59.450]                           computeRestarts <- base::computeRestarts
[17:45:59.450]                           grepl <- base::grepl
[17:45:59.450]                           restarts <- computeRestarts(cond)
[17:45:59.450]                           for (restart in restarts) {
[17:45:59.450]                             name <- restart$name
[17:45:59.450]                             if (is.null(name)) 
[17:45:59.450]                               next
[17:45:59.450]                             if (!grepl(pattern, name)) 
[17:45:59.450]                               next
[17:45:59.450]                             invokeRestart(restart)
[17:45:59.450]                             muffled <- TRUE
[17:45:59.450]                             break
[17:45:59.450]                           }
[17:45:59.450]                         }
[17:45:59.450]                       }
[17:45:59.450]                       invisible(muffled)
[17:45:59.450]                     }
[17:45:59.450]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.450]                   }
[17:45:59.450]                 }
[17:45:59.450]                 else {
[17:45:59.450]                   if (TRUE) {
[17:45:59.450]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.450]                     {
[17:45:59.450]                       inherits <- base::inherits
[17:45:59.450]                       invokeRestart <- base::invokeRestart
[17:45:59.450]                       is.null <- base::is.null
[17:45:59.450]                       muffled <- FALSE
[17:45:59.450]                       if (inherits(cond, "message")) {
[17:45:59.450]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.450]                         if (muffled) 
[17:45:59.450]                           invokeRestart("muffleMessage")
[17:45:59.450]                       }
[17:45:59.450]                       else if (inherits(cond, "warning")) {
[17:45:59.450]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.450]                         if (muffled) 
[17:45:59.450]                           invokeRestart("muffleWarning")
[17:45:59.450]                       }
[17:45:59.450]                       else if (inherits(cond, "condition")) {
[17:45:59.450]                         if (!is.null(pattern)) {
[17:45:59.450]                           computeRestarts <- base::computeRestarts
[17:45:59.450]                           grepl <- base::grepl
[17:45:59.450]                           restarts <- computeRestarts(cond)
[17:45:59.450]                           for (restart in restarts) {
[17:45:59.450]                             name <- restart$name
[17:45:59.450]                             if (is.null(name)) 
[17:45:59.450]                               next
[17:45:59.450]                             if (!grepl(pattern, name)) 
[17:45:59.450]                               next
[17:45:59.450]                             invokeRestart(restart)
[17:45:59.450]                             muffled <- TRUE
[17:45:59.450]                             break
[17:45:59.450]                           }
[17:45:59.450]                         }
[17:45:59.450]                       }
[17:45:59.450]                       invisible(muffled)
[17:45:59.450]                     }
[17:45:59.450]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.450]                   }
[17:45:59.450]                 }
[17:45:59.450]             }
[17:45:59.450]         }))
[17:45:59.450]     }, error = function(ex) {
[17:45:59.450]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.450]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.450]                 ...future.rng), started = ...future.startTime, 
[17:45:59.450]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.450]             version = "1.8"), class = "FutureResult")
[17:45:59.450]     }, finally = {
[17:45:59.450]         if (!identical(...future.workdir, getwd())) 
[17:45:59.450]             setwd(...future.workdir)
[17:45:59.450]         {
[17:45:59.450]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.450]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.450]             }
[17:45:59.450]             base::options(...future.oldOptions)
[17:45:59.450]             if (.Platform$OS.type == "windows") {
[17:45:59.450]                 old_names <- names(...future.oldEnvVars)
[17:45:59.450]                 envs <- base::Sys.getenv()
[17:45:59.450]                 names <- names(envs)
[17:45:59.450]                 common <- intersect(names, old_names)
[17:45:59.450]                 added <- setdiff(names, old_names)
[17:45:59.450]                 removed <- setdiff(old_names, names)
[17:45:59.450]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.450]                   envs[common]]
[17:45:59.450]                 NAMES <- toupper(changed)
[17:45:59.450]                 args <- list()
[17:45:59.450]                 for (kk in seq_along(NAMES)) {
[17:45:59.450]                   name <- changed[[kk]]
[17:45:59.450]                   NAME <- NAMES[[kk]]
[17:45:59.450]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.450]                     next
[17:45:59.450]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.450]                 }
[17:45:59.450]                 NAMES <- toupper(added)
[17:45:59.450]                 for (kk in seq_along(NAMES)) {
[17:45:59.450]                   name <- added[[kk]]
[17:45:59.450]                   NAME <- NAMES[[kk]]
[17:45:59.450]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.450]                     next
[17:45:59.450]                   args[[name]] <- ""
[17:45:59.450]                 }
[17:45:59.450]                 NAMES <- toupper(removed)
[17:45:59.450]                 for (kk in seq_along(NAMES)) {
[17:45:59.450]                   name <- removed[[kk]]
[17:45:59.450]                   NAME <- NAMES[[kk]]
[17:45:59.450]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.450]                     next
[17:45:59.450]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.450]                 }
[17:45:59.450]                 if (length(args) > 0) 
[17:45:59.450]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.450]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.450]             }
[17:45:59.450]             else {
[17:45:59.450]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.450]             }
[17:45:59.450]             {
[17:45:59.450]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.450]                   0L) {
[17:45:59.450]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.450]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.450]                   base::options(opts)
[17:45:59.450]                 }
[17:45:59.450]                 {
[17:45:59.450]                   {
[17:45:59.450]                     NULL
[17:45:59.450]                     RNGkind("Mersenne-Twister")
[17:45:59.450]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.450]                       inherits = FALSE)
[17:45:59.450]                   }
[17:45:59.450]                   options(future.plan = NULL)
[17:45:59.450]                   if (is.na(NA_character_)) 
[17:45:59.450]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.450]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.450]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.450]                     .init = FALSE)
[17:45:59.450]                 }
[17:45:59.450]             }
[17:45:59.450]         }
[17:45:59.450]     })
[17:45:59.450]     if (TRUE) {
[17:45:59.450]         base::sink(type = "output", split = FALSE)
[17:45:59.450]         if (TRUE) {
[17:45:59.450]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.450]         }
[17:45:59.450]         else {
[17:45:59.450]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.450]         }
[17:45:59.450]         base::close(...future.stdout)
[17:45:59.450]         ...future.stdout <- NULL
[17:45:59.450]     }
[17:45:59.450]     ...future.result$conditions <- ...future.conditions
[17:45:59.450]     ...future.result$finished <- base::Sys.time()
[17:45:59.450]     ...future.result
[17:45:59.450] }
[17:45:59.452] plan(): Setting new future strategy stack:
[17:45:59.452] List of future strategies:
[17:45:59.452] 1. sequential:
[17:45:59.452]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.452]    - tweaked: FALSE
[17:45:59.452]    - call: NULL
[17:45:59.452] plan(): nbrOfWorkers() = 1
[17:45:59.453] plan(): Setting new future strategy stack:
[17:45:59.453] List of future strategies:
[17:45:59.453] 1. sequential:
[17:45:59.453]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.453]    - tweaked: FALSE
[17:45:59.453]    - call: future::plan("sequential")
[17:45:59.454] plan(): nbrOfWorkers() = 1
[17:45:59.454] SequentialFuture started (and completed)
[17:45:59.454] signalConditions() ...
[17:45:59.454]  - include = ‘immediateCondition’
[17:45:59.454]  - exclude = 
[17:45:59.454]  - resignal = FALSE
[17:45:59.454]  - Number of conditions: 1
[17:45:59.454] signalConditions() ... done
[17:45:59.454] - Launch lazy future ... done
[17:45:59.455] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[17:45:59.455] resolved() for ‘SequentialFuture’ ...
[17:45:59.455] - state: ‘finished’
[17:45:59.455] - run: TRUE
[17:45:59.455] - result: ‘FutureResult’
[17:45:59.455] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[17:45:59.456] getGlobalsAndPackages() ...
[17:45:59.456] Searching for globals...
[17:45:59.457] - globals found: [2] ‘{’, ‘stop’
[17:45:59.457] Searching for globals ... DONE
[17:45:59.457] Resolving globals: FALSE
[17:45:59.458] 
[17:45:59.458] 
[17:45:59.458] getGlobalsAndPackages() ... DONE
[17:45:59.458] run() for ‘Future’ ...
[17:45:59.458] - state: ‘created’
[17:45:59.458] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.459] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.459] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.459]   - Field: ‘label’
[17:45:59.459]   - Field: ‘local’
[17:45:59.459]   - Field: ‘owner’
[17:45:59.459]   - Field: ‘envir’
[17:45:59.459]   - Field: ‘packages’
[17:45:59.459]   - Field: ‘gc’
[17:45:59.459]   - Field: ‘conditions’
[17:45:59.459]   - Field: ‘expr’
[17:45:59.460]   - Field: ‘uuid’
[17:45:59.460]   - Field: ‘seed’
[17:45:59.460]   - Field: ‘version’
[17:45:59.460]   - Field: ‘result’
[17:45:59.460]   - Field: ‘asynchronous’
[17:45:59.460]   - Field: ‘calls’
[17:45:59.460]   - Field: ‘globals’
[17:45:59.460]   - Field: ‘stdout’
[17:45:59.460]   - Field: ‘earlySignal’
[17:45:59.460]   - Field: ‘lazy’
[17:45:59.460]   - Field: ‘state’
[17:45:59.460] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.461] - Launch lazy future ...
[17:45:59.461] Packages needed by the future expression (n = 0): <none>
[17:45:59.461] Packages needed by future strategies (n = 0): <none>
[17:45:59.461] {
[17:45:59.461]     {
[17:45:59.461]         {
[17:45:59.461]             ...future.startTime <- base::Sys.time()
[17:45:59.461]             {
[17:45:59.461]                 {
[17:45:59.461]                   {
[17:45:59.461]                     base::local({
[17:45:59.461]                       has_future <- base::requireNamespace("future", 
[17:45:59.461]                         quietly = TRUE)
[17:45:59.461]                       if (has_future) {
[17:45:59.461]                         ns <- base::getNamespace("future")
[17:45:59.461]                         version <- ns[[".package"]][["version"]]
[17:45:59.461]                         if (is.null(version)) 
[17:45:59.461]                           version <- utils::packageVersion("future")
[17:45:59.461]                       }
[17:45:59.461]                       else {
[17:45:59.461]                         version <- NULL
[17:45:59.461]                       }
[17:45:59.461]                       if (!has_future || version < "1.8.0") {
[17:45:59.461]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.461]                           "", base::R.version$version.string), 
[17:45:59.461]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.461]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.461]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.461]                             "release", "version")], collapse = " "), 
[17:45:59.461]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.461]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.461]                           info)
[17:45:59.461]                         info <- base::paste(info, collapse = "; ")
[17:45:59.461]                         if (!has_future) {
[17:45:59.461]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.461]                             info)
[17:45:59.461]                         }
[17:45:59.461]                         else {
[17:45:59.461]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.461]                             info, version)
[17:45:59.461]                         }
[17:45:59.461]                         base::stop(msg)
[17:45:59.461]                       }
[17:45:59.461]                     })
[17:45:59.461]                   }
[17:45:59.461]                   ...future.strategy.old <- future::plan("list")
[17:45:59.461]                   options(future.plan = NULL)
[17:45:59.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.461]                 }
[17:45:59.461]                 ...future.workdir <- getwd()
[17:45:59.461]             }
[17:45:59.461]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.461]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.461]         }
[17:45:59.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.461]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.461]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.461]             base::names(...future.oldOptions))
[17:45:59.461]     }
[17:45:59.461]     if (FALSE) {
[17:45:59.461]     }
[17:45:59.461]     else {
[17:45:59.461]         if (TRUE) {
[17:45:59.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.461]                 open = "w")
[17:45:59.461]         }
[17:45:59.461]         else {
[17:45:59.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.461]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.461]         }
[17:45:59.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.461]             base::sink(type = "output", split = FALSE)
[17:45:59.461]             base::close(...future.stdout)
[17:45:59.461]         }, add = TRUE)
[17:45:59.461]     }
[17:45:59.461]     ...future.frame <- base::sys.nframe()
[17:45:59.461]     ...future.conditions <- base::list()
[17:45:59.461]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.461]     if (FALSE) {
[17:45:59.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.461]     }
[17:45:59.461]     ...future.result <- base::tryCatch({
[17:45:59.461]         base::withCallingHandlers({
[17:45:59.461]             ...future.value <- base::withVisible(base::local({
[17:45:59.461]                 42L
[17:45:59.461]                 stop("Woops")
[17:45:59.461]             }))
[17:45:59.461]             future::FutureResult(value = ...future.value$value, 
[17:45:59.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.461]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.461]                     ...future.globalenv.names))
[17:45:59.461]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.461]         }, condition = base::local({
[17:45:59.461]             c <- base::c
[17:45:59.461]             inherits <- base::inherits
[17:45:59.461]             invokeRestart <- base::invokeRestart
[17:45:59.461]             length <- base::length
[17:45:59.461]             list <- base::list
[17:45:59.461]             seq.int <- base::seq.int
[17:45:59.461]             signalCondition <- base::signalCondition
[17:45:59.461]             sys.calls <- base::sys.calls
[17:45:59.461]             `[[` <- base::`[[`
[17:45:59.461]             `+` <- base::`+`
[17:45:59.461]             `<<-` <- base::`<<-`
[17:45:59.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.461]                   3L)]
[17:45:59.461]             }
[17:45:59.461]             function(cond) {
[17:45:59.461]                 is_error <- inherits(cond, "error")
[17:45:59.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.461]                   NULL)
[17:45:59.461]                 if (is_error) {
[17:45:59.461]                   sessionInformation <- function() {
[17:45:59.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.461]                       search = base::search(), system = base::Sys.info())
[17:45:59.461]                   }
[17:45:59.461]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.461]                     cond$call), session = sessionInformation(), 
[17:45:59.461]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.461]                   signalCondition(cond)
[17:45:59.461]                 }
[17:45:59.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.461]                 "immediateCondition"))) {
[17:45:59.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.461]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.461]                   if (TRUE && !signal) {
[17:45:59.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.461]                     {
[17:45:59.461]                       inherits <- base::inherits
[17:45:59.461]                       invokeRestart <- base::invokeRestart
[17:45:59.461]                       is.null <- base::is.null
[17:45:59.461]                       muffled <- FALSE
[17:45:59.461]                       if (inherits(cond, "message")) {
[17:45:59.461]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.461]                         if (muffled) 
[17:45:59.461]                           invokeRestart("muffleMessage")
[17:45:59.461]                       }
[17:45:59.461]                       else if (inherits(cond, "warning")) {
[17:45:59.461]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.461]                         if (muffled) 
[17:45:59.461]                           invokeRestart("muffleWarning")
[17:45:59.461]                       }
[17:45:59.461]                       else if (inherits(cond, "condition")) {
[17:45:59.461]                         if (!is.null(pattern)) {
[17:45:59.461]                           computeRestarts <- base::computeRestarts
[17:45:59.461]                           grepl <- base::grepl
[17:45:59.461]                           restarts <- computeRestarts(cond)
[17:45:59.461]                           for (restart in restarts) {
[17:45:59.461]                             name <- restart$name
[17:45:59.461]                             if (is.null(name)) 
[17:45:59.461]                               next
[17:45:59.461]                             if (!grepl(pattern, name)) 
[17:45:59.461]                               next
[17:45:59.461]                             invokeRestart(restart)
[17:45:59.461]                             muffled <- TRUE
[17:45:59.461]                             break
[17:45:59.461]                           }
[17:45:59.461]                         }
[17:45:59.461]                       }
[17:45:59.461]                       invisible(muffled)
[17:45:59.461]                     }
[17:45:59.461]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.461]                   }
[17:45:59.461]                 }
[17:45:59.461]                 else {
[17:45:59.461]                   if (TRUE) {
[17:45:59.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.461]                     {
[17:45:59.461]                       inherits <- base::inherits
[17:45:59.461]                       invokeRestart <- base::invokeRestart
[17:45:59.461]                       is.null <- base::is.null
[17:45:59.461]                       muffled <- FALSE
[17:45:59.461]                       if (inherits(cond, "message")) {
[17:45:59.461]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.461]                         if (muffled) 
[17:45:59.461]                           invokeRestart("muffleMessage")
[17:45:59.461]                       }
[17:45:59.461]                       else if (inherits(cond, "warning")) {
[17:45:59.461]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.461]                         if (muffled) 
[17:45:59.461]                           invokeRestart("muffleWarning")
[17:45:59.461]                       }
[17:45:59.461]                       else if (inherits(cond, "condition")) {
[17:45:59.461]                         if (!is.null(pattern)) {
[17:45:59.461]                           computeRestarts <- base::computeRestarts
[17:45:59.461]                           grepl <- base::grepl
[17:45:59.461]                           restarts <- computeRestarts(cond)
[17:45:59.461]                           for (restart in restarts) {
[17:45:59.461]                             name <- restart$name
[17:45:59.461]                             if (is.null(name)) 
[17:45:59.461]                               next
[17:45:59.461]                             if (!grepl(pattern, name)) 
[17:45:59.461]                               next
[17:45:59.461]                             invokeRestart(restart)
[17:45:59.461]                             muffled <- TRUE
[17:45:59.461]                             break
[17:45:59.461]                           }
[17:45:59.461]                         }
[17:45:59.461]                       }
[17:45:59.461]                       invisible(muffled)
[17:45:59.461]                     }
[17:45:59.461]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.461]                   }
[17:45:59.461]                 }
[17:45:59.461]             }
[17:45:59.461]         }))
[17:45:59.461]     }, error = function(ex) {
[17:45:59.461]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.461]                 ...future.rng), started = ...future.startTime, 
[17:45:59.461]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.461]             version = "1.8"), class = "FutureResult")
[17:45:59.461]     }, finally = {
[17:45:59.461]         if (!identical(...future.workdir, getwd())) 
[17:45:59.461]             setwd(...future.workdir)
[17:45:59.461]         {
[17:45:59.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.461]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.461]             }
[17:45:59.461]             base::options(...future.oldOptions)
[17:45:59.461]             if (.Platform$OS.type == "windows") {
[17:45:59.461]                 old_names <- names(...future.oldEnvVars)
[17:45:59.461]                 envs <- base::Sys.getenv()
[17:45:59.461]                 names <- names(envs)
[17:45:59.461]                 common <- intersect(names, old_names)
[17:45:59.461]                 added <- setdiff(names, old_names)
[17:45:59.461]                 removed <- setdiff(old_names, names)
[17:45:59.461]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.461]                   envs[common]]
[17:45:59.461]                 NAMES <- toupper(changed)
[17:45:59.461]                 args <- list()
[17:45:59.461]                 for (kk in seq_along(NAMES)) {
[17:45:59.461]                   name <- changed[[kk]]
[17:45:59.461]                   NAME <- NAMES[[kk]]
[17:45:59.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.461]                     next
[17:45:59.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.461]                 }
[17:45:59.461]                 NAMES <- toupper(added)
[17:45:59.461]                 for (kk in seq_along(NAMES)) {
[17:45:59.461]                   name <- added[[kk]]
[17:45:59.461]                   NAME <- NAMES[[kk]]
[17:45:59.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.461]                     next
[17:45:59.461]                   args[[name]] <- ""
[17:45:59.461]                 }
[17:45:59.461]                 NAMES <- toupper(removed)
[17:45:59.461]                 for (kk in seq_along(NAMES)) {
[17:45:59.461]                   name <- removed[[kk]]
[17:45:59.461]                   NAME <- NAMES[[kk]]
[17:45:59.461]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.461]                     next
[17:45:59.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.461]                 }
[17:45:59.461]                 if (length(args) > 0) 
[17:45:59.461]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.461]             }
[17:45:59.461]             else {
[17:45:59.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.461]             }
[17:45:59.461]             {
[17:45:59.461]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.461]                   0L) {
[17:45:59.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.461]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.461]                   base::options(opts)
[17:45:59.461]                 }
[17:45:59.461]                 {
[17:45:59.461]                   {
[17:45:59.461]                     NULL
[17:45:59.461]                     RNGkind("Mersenne-Twister")
[17:45:59.461]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.461]                       inherits = FALSE)
[17:45:59.461]                   }
[17:45:59.461]                   options(future.plan = NULL)
[17:45:59.461]                   if (is.na(NA_character_)) 
[17:45:59.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.461]                     .init = FALSE)
[17:45:59.461]                 }
[17:45:59.461]             }
[17:45:59.461]         }
[17:45:59.461]     })
[17:45:59.461]     if (TRUE) {
[17:45:59.461]         base::sink(type = "output", split = FALSE)
[17:45:59.461]         if (TRUE) {
[17:45:59.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.461]         }
[17:45:59.461]         else {
[17:45:59.461]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.461]         }
[17:45:59.461]         base::close(...future.stdout)
[17:45:59.461]         ...future.stdout <- NULL
[17:45:59.461]     }
[17:45:59.461]     ...future.result$conditions <- ...future.conditions
[17:45:59.461]     ...future.result$finished <- base::Sys.time()
[17:45:59.461]     ...future.result
[17:45:59.461] }
[17:45:59.463] plan(): Setting new future strategy stack:
[17:45:59.463] List of future strategies:
[17:45:59.463] 1. sequential:
[17:45:59.463]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.463]    - tweaked: FALSE
[17:45:59.463]    - call: NULL
[17:45:59.463] plan(): nbrOfWorkers() = 1
[17:45:59.464] plan(): Setting new future strategy stack:
[17:45:59.464] List of future strategies:
[17:45:59.464] 1. sequential:
[17:45:59.464]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.464]    - tweaked: FALSE
[17:45:59.464]    - call: future::plan("sequential")
[17:45:59.465] plan(): nbrOfWorkers() = 1
[17:45:59.465] SequentialFuture started (and completed)
[17:45:59.465] signalConditions() ...
[17:45:59.465]  - include = ‘immediateCondition’
[17:45:59.465]  - exclude = 
[17:45:59.465]  - resignal = FALSE
[17:45:59.465]  - Number of conditions: 1
[17:45:59.465] signalConditions() ... done
[17:45:59.466] - Launch lazy future ... done
[17:45:59.466] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[17:45:59.466] getGlobalsAndPackages() ...
[17:45:59.466] Searching for globals...
[17:45:59.467] - globals found: [2] ‘{’, ‘stop’
[17:45:59.467] Searching for globals ... DONE
[17:45:59.467] Resolving globals: FALSE
[17:45:59.467] 
[17:45:59.468] 
[17:45:59.468] getGlobalsAndPackages() ... DONE
[17:45:59.468] run() for ‘Future’ ...
[17:45:59.468] - state: ‘created’
[17:45:59.468] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.468] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.468] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.468]   - Field: ‘label’
[17:45:59.469]   - Field: ‘local’
[17:45:59.469]   - Field: ‘owner’
[17:45:59.469]   - Field: ‘envir’
[17:45:59.469]   - Field: ‘packages’
[17:45:59.469]   - Field: ‘gc’
[17:45:59.469]   - Field: ‘conditions’
[17:45:59.469]   - Field: ‘expr’
[17:45:59.469]   - Field: ‘uuid’
[17:45:59.469]   - Field: ‘seed’
[17:45:59.469]   - Field: ‘version’
[17:45:59.469]   - Field: ‘result’
[17:45:59.470]   - Field: ‘asynchronous’
[17:45:59.470]   - Field: ‘calls’
[17:45:59.470]   - Field: ‘globals’
[17:45:59.470]   - Field: ‘stdout’
[17:45:59.470]   - Field: ‘earlySignal’
[17:45:59.470]   - Field: ‘lazy’
[17:45:59.470]   - Field: ‘state’
[17:45:59.470] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.470] - Launch lazy future ...
[17:45:59.470] Packages needed by the future expression (n = 0): <none>
[17:45:59.470] Packages needed by future strategies (n = 0): <none>
[17:45:59.471] {
[17:45:59.471]     {
[17:45:59.471]         {
[17:45:59.471]             ...future.startTime <- base::Sys.time()
[17:45:59.471]             {
[17:45:59.471]                 {
[17:45:59.471]                   {
[17:45:59.471]                     base::local({
[17:45:59.471]                       has_future <- base::requireNamespace("future", 
[17:45:59.471]                         quietly = TRUE)
[17:45:59.471]                       if (has_future) {
[17:45:59.471]                         ns <- base::getNamespace("future")
[17:45:59.471]                         version <- ns[[".package"]][["version"]]
[17:45:59.471]                         if (is.null(version)) 
[17:45:59.471]                           version <- utils::packageVersion("future")
[17:45:59.471]                       }
[17:45:59.471]                       else {
[17:45:59.471]                         version <- NULL
[17:45:59.471]                       }
[17:45:59.471]                       if (!has_future || version < "1.8.0") {
[17:45:59.471]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.471]                           "", base::R.version$version.string), 
[17:45:59.471]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.471]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.471]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.471]                             "release", "version")], collapse = " "), 
[17:45:59.471]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.471]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.471]                           info)
[17:45:59.471]                         info <- base::paste(info, collapse = "; ")
[17:45:59.471]                         if (!has_future) {
[17:45:59.471]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.471]                             info)
[17:45:59.471]                         }
[17:45:59.471]                         else {
[17:45:59.471]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.471]                             info, version)
[17:45:59.471]                         }
[17:45:59.471]                         base::stop(msg)
[17:45:59.471]                       }
[17:45:59.471]                     })
[17:45:59.471]                   }
[17:45:59.471]                   ...future.strategy.old <- future::plan("list")
[17:45:59.471]                   options(future.plan = NULL)
[17:45:59.471]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.471]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.471]                 }
[17:45:59.471]                 ...future.workdir <- getwd()
[17:45:59.471]             }
[17:45:59.471]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.471]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.471]         }
[17:45:59.471]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.471]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.471]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.471]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.471]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.471]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.471]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.471]             base::names(...future.oldOptions))
[17:45:59.471]     }
[17:45:59.471]     if (FALSE) {
[17:45:59.471]     }
[17:45:59.471]     else {
[17:45:59.471]         if (TRUE) {
[17:45:59.471]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.471]                 open = "w")
[17:45:59.471]         }
[17:45:59.471]         else {
[17:45:59.471]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.471]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.471]         }
[17:45:59.471]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.471]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.471]             base::sink(type = "output", split = FALSE)
[17:45:59.471]             base::close(...future.stdout)
[17:45:59.471]         }, add = TRUE)
[17:45:59.471]     }
[17:45:59.471]     ...future.frame <- base::sys.nframe()
[17:45:59.471]     ...future.conditions <- base::list()
[17:45:59.471]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.471]     if (FALSE) {
[17:45:59.471]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.471]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.471]     }
[17:45:59.471]     ...future.result <- base::tryCatch({
[17:45:59.471]         base::withCallingHandlers({
[17:45:59.471]             ...future.value <- base::withVisible(base::local({
[17:45:59.471]                 42L
[17:45:59.471]                 stop("Woops")
[17:45:59.471]             }))
[17:45:59.471]             future::FutureResult(value = ...future.value$value, 
[17:45:59.471]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.471]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.471]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.471]                     ...future.globalenv.names))
[17:45:59.471]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.471]         }, condition = base::local({
[17:45:59.471]             c <- base::c
[17:45:59.471]             inherits <- base::inherits
[17:45:59.471]             invokeRestart <- base::invokeRestart
[17:45:59.471]             length <- base::length
[17:45:59.471]             list <- base::list
[17:45:59.471]             seq.int <- base::seq.int
[17:45:59.471]             signalCondition <- base::signalCondition
[17:45:59.471]             sys.calls <- base::sys.calls
[17:45:59.471]             `[[` <- base::`[[`
[17:45:59.471]             `+` <- base::`+`
[17:45:59.471]             `<<-` <- base::`<<-`
[17:45:59.471]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.471]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.471]                   3L)]
[17:45:59.471]             }
[17:45:59.471]             function(cond) {
[17:45:59.471]                 is_error <- inherits(cond, "error")
[17:45:59.471]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.471]                   NULL)
[17:45:59.471]                 if (is_error) {
[17:45:59.471]                   sessionInformation <- function() {
[17:45:59.471]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.471]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.471]                       search = base::search(), system = base::Sys.info())
[17:45:59.471]                   }
[17:45:59.471]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.471]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.471]                     cond$call), session = sessionInformation(), 
[17:45:59.471]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.471]                   signalCondition(cond)
[17:45:59.471]                 }
[17:45:59.471]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.471]                 "immediateCondition"))) {
[17:45:59.471]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.471]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.471]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.471]                   if (TRUE && !signal) {
[17:45:59.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.471]                     {
[17:45:59.471]                       inherits <- base::inherits
[17:45:59.471]                       invokeRestart <- base::invokeRestart
[17:45:59.471]                       is.null <- base::is.null
[17:45:59.471]                       muffled <- FALSE
[17:45:59.471]                       if (inherits(cond, "message")) {
[17:45:59.471]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.471]                         if (muffled) 
[17:45:59.471]                           invokeRestart("muffleMessage")
[17:45:59.471]                       }
[17:45:59.471]                       else if (inherits(cond, "warning")) {
[17:45:59.471]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.471]                         if (muffled) 
[17:45:59.471]                           invokeRestart("muffleWarning")
[17:45:59.471]                       }
[17:45:59.471]                       else if (inherits(cond, "condition")) {
[17:45:59.471]                         if (!is.null(pattern)) {
[17:45:59.471]                           computeRestarts <- base::computeRestarts
[17:45:59.471]                           grepl <- base::grepl
[17:45:59.471]                           restarts <- computeRestarts(cond)
[17:45:59.471]                           for (restart in restarts) {
[17:45:59.471]                             name <- restart$name
[17:45:59.471]                             if (is.null(name)) 
[17:45:59.471]                               next
[17:45:59.471]                             if (!grepl(pattern, name)) 
[17:45:59.471]                               next
[17:45:59.471]                             invokeRestart(restart)
[17:45:59.471]                             muffled <- TRUE
[17:45:59.471]                             break
[17:45:59.471]                           }
[17:45:59.471]                         }
[17:45:59.471]                       }
[17:45:59.471]                       invisible(muffled)
[17:45:59.471]                     }
[17:45:59.471]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.471]                   }
[17:45:59.471]                 }
[17:45:59.471]                 else {
[17:45:59.471]                   if (TRUE) {
[17:45:59.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.471]                     {
[17:45:59.471]                       inherits <- base::inherits
[17:45:59.471]                       invokeRestart <- base::invokeRestart
[17:45:59.471]                       is.null <- base::is.null
[17:45:59.471]                       muffled <- FALSE
[17:45:59.471]                       if (inherits(cond, "message")) {
[17:45:59.471]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.471]                         if (muffled) 
[17:45:59.471]                           invokeRestart("muffleMessage")
[17:45:59.471]                       }
[17:45:59.471]                       else if (inherits(cond, "warning")) {
[17:45:59.471]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.471]                         if (muffled) 
[17:45:59.471]                           invokeRestart("muffleWarning")
[17:45:59.471]                       }
[17:45:59.471]                       else if (inherits(cond, "condition")) {
[17:45:59.471]                         if (!is.null(pattern)) {
[17:45:59.471]                           computeRestarts <- base::computeRestarts
[17:45:59.471]                           grepl <- base::grepl
[17:45:59.471]                           restarts <- computeRestarts(cond)
[17:45:59.471]                           for (restart in restarts) {
[17:45:59.471]                             name <- restart$name
[17:45:59.471]                             if (is.null(name)) 
[17:45:59.471]                               next
[17:45:59.471]                             if (!grepl(pattern, name)) 
[17:45:59.471]                               next
[17:45:59.471]                             invokeRestart(restart)
[17:45:59.471]                             muffled <- TRUE
[17:45:59.471]                             break
[17:45:59.471]                           }
[17:45:59.471]                         }
[17:45:59.471]                       }
[17:45:59.471]                       invisible(muffled)
[17:45:59.471]                     }
[17:45:59.471]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.471]                   }
[17:45:59.471]                 }
[17:45:59.471]             }
[17:45:59.471]         }))
[17:45:59.471]     }, error = function(ex) {
[17:45:59.471]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.471]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.471]                 ...future.rng), started = ...future.startTime, 
[17:45:59.471]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.471]             version = "1.8"), class = "FutureResult")
[17:45:59.471]     }, finally = {
[17:45:59.471]         if (!identical(...future.workdir, getwd())) 
[17:45:59.471]             setwd(...future.workdir)
[17:45:59.471]         {
[17:45:59.471]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.471]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.471]             }
[17:45:59.471]             base::options(...future.oldOptions)
[17:45:59.471]             if (.Platform$OS.type == "windows") {
[17:45:59.471]                 old_names <- names(...future.oldEnvVars)
[17:45:59.471]                 envs <- base::Sys.getenv()
[17:45:59.471]                 names <- names(envs)
[17:45:59.471]                 common <- intersect(names, old_names)
[17:45:59.471]                 added <- setdiff(names, old_names)
[17:45:59.471]                 removed <- setdiff(old_names, names)
[17:45:59.471]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.471]                   envs[common]]
[17:45:59.471]                 NAMES <- toupper(changed)
[17:45:59.471]                 args <- list()
[17:45:59.471]                 for (kk in seq_along(NAMES)) {
[17:45:59.471]                   name <- changed[[kk]]
[17:45:59.471]                   NAME <- NAMES[[kk]]
[17:45:59.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.471]                     next
[17:45:59.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.471]                 }
[17:45:59.471]                 NAMES <- toupper(added)
[17:45:59.471]                 for (kk in seq_along(NAMES)) {
[17:45:59.471]                   name <- added[[kk]]
[17:45:59.471]                   NAME <- NAMES[[kk]]
[17:45:59.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.471]                     next
[17:45:59.471]                   args[[name]] <- ""
[17:45:59.471]                 }
[17:45:59.471]                 NAMES <- toupper(removed)
[17:45:59.471]                 for (kk in seq_along(NAMES)) {
[17:45:59.471]                   name <- removed[[kk]]
[17:45:59.471]                   NAME <- NAMES[[kk]]
[17:45:59.471]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.471]                     next
[17:45:59.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.471]                 }
[17:45:59.471]                 if (length(args) > 0) 
[17:45:59.471]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.471]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.471]             }
[17:45:59.471]             else {
[17:45:59.471]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.471]             }
[17:45:59.471]             {
[17:45:59.471]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.471]                   0L) {
[17:45:59.471]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.471]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.471]                   base::options(opts)
[17:45:59.471]                 }
[17:45:59.471]                 {
[17:45:59.471]                   {
[17:45:59.471]                     NULL
[17:45:59.471]                     RNGkind("Mersenne-Twister")
[17:45:59.471]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.471]                       inherits = FALSE)
[17:45:59.471]                   }
[17:45:59.471]                   options(future.plan = NULL)
[17:45:59.471]                   if (is.na(NA_character_)) 
[17:45:59.471]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.471]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.471]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.471]                     .init = FALSE)
[17:45:59.471]                 }
[17:45:59.471]             }
[17:45:59.471]         }
[17:45:59.471]     })
[17:45:59.471]     if (TRUE) {
[17:45:59.471]         base::sink(type = "output", split = FALSE)
[17:45:59.471]         if (TRUE) {
[17:45:59.471]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.471]         }
[17:45:59.471]         else {
[17:45:59.471]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.471]         }
[17:45:59.471]         base::close(...future.stdout)
[17:45:59.471]         ...future.stdout <- NULL
[17:45:59.471]     }
[17:45:59.471]     ...future.result$conditions <- ...future.conditions
[17:45:59.471]     ...future.result$finished <- base::Sys.time()
[17:45:59.471]     ...future.result
[17:45:59.471] }
[17:45:59.474] plan(): Setting new future strategy stack:
[17:45:59.474] List of future strategies:
[17:45:59.474] 1. sequential:
[17:45:59.474]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.474]    - tweaked: FALSE
[17:45:59.474]    - call: NULL
[17:45:59.475] plan(): nbrOfWorkers() = 1
[17:45:59.476] plan(): Setting new future strategy stack:
[17:45:59.476] List of future strategies:
[17:45:59.476] 1. sequential:
[17:45:59.476]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.476]    - tweaked: FALSE
[17:45:59.476]    - call: future::plan("sequential")
[17:45:59.476] plan(): nbrOfWorkers() = 1
[17:45:59.476] SequentialFuture started (and completed)
[17:45:59.476] signalConditions() ...
[17:45:59.476]  - include = ‘immediateCondition’
[17:45:59.477]  - exclude = 
[17:45:59.477]  - resignal = FALSE
[17:45:59.477]  - Number of conditions: 1
[17:45:59.477] signalConditions() ... done
[17:45:59.477] - Launch lazy future ... done
[17:45:59.477] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[17:45:59.477] resolved() for ‘SequentialFuture’ ...
[17:45:59.477] - state: ‘finished’
[17:45:59.477] - run: TRUE
[17:45:59.478] - result: ‘FutureResult’
[17:45:59.478] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[17:45:59.478] getGlobalsAndPackages() ...
[17:45:59.478] Searching for globals...
[17:45:59.479] - globals found: [2] ‘{’, ‘stop’
[17:45:59.479] Searching for globals ... DONE
[17:45:59.479] Resolving globals: FALSE
[17:45:59.480] 
[17:45:59.480] 
[17:45:59.480] getGlobalsAndPackages() ... DONE
[17:45:59.480] run() for ‘Future’ ...
[17:45:59.480] - state: ‘created’
[17:45:59.480] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.481] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.481] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.481]   - Field: ‘label’
[17:45:59.481]   - Field: ‘local’
[17:45:59.481]   - Field: ‘owner’
[17:45:59.481]   - Field: ‘envir’
[17:45:59.481]   - Field: ‘packages’
[17:45:59.481]   - Field: ‘gc’
[17:45:59.481]   - Field: ‘conditions’
[17:45:59.481]   - Field: ‘expr’
[17:45:59.481]   - Field: ‘uuid’
[17:45:59.482]   - Field: ‘seed’
[17:45:59.482]   - Field: ‘version’
[17:45:59.482]   - Field: ‘result’
[17:45:59.482]   - Field: ‘asynchronous’
[17:45:59.482]   - Field: ‘calls’
[17:45:59.482]   - Field: ‘globals’
[17:45:59.482]   - Field: ‘stdout’
[17:45:59.482]   - Field: ‘earlySignal’
[17:45:59.482]   - Field: ‘lazy’
[17:45:59.482]   - Field: ‘state’
[17:45:59.482] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.482] - Launch lazy future ...
[17:45:59.483] Packages needed by the future expression (n = 0): <none>
[17:45:59.483] Packages needed by future strategies (n = 0): <none>
[17:45:59.483] {
[17:45:59.483]     {
[17:45:59.483]         {
[17:45:59.483]             ...future.startTime <- base::Sys.time()
[17:45:59.483]             {
[17:45:59.483]                 {
[17:45:59.483]                   {
[17:45:59.483]                     base::local({
[17:45:59.483]                       has_future <- base::requireNamespace("future", 
[17:45:59.483]                         quietly = TRUE)
[17:45:59.483]                       if (has_future) {
[17:45:59.483]                         ns <- base::getNamespace("future")
[17:45:59.483]                         version <- ns[[".package"]][["version"]]
[17:45:59.483]                         if (is.null(version)) 
[17:45:59.483]                           version <- utils::packageVersion("future")
[17:45:59.483]                       }
[17:45:59.483]                       else {
[17:45:59.483]                         version <- NULL
[17:45:59.483]                       }
[17:45:59.483]                       if (!has_future || version < "1.8.0") {
[17:45:59.483]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.483]                           "", base::R.version$version.string), 
[17:45:59.483]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.483]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.483]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.483]                             "release", "version")], collapse = " "), 
[17:45:59.483]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.483]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.483]                           info)
[17:45:59.483]                         info <- base::paste(info, collapse = "; ")
[17:45:59.483]                         if (!has_future) {
[17:45:59.483]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.483]                             info)
[17:45:59.483]                         }
[17:45:59.483]                         else {
[17:45:59.483]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.483]                             info, version)
[17:45:59.483]                         }
[17:45:59.483]                         base::stop(msg)
[17:45:59.483]                       }
[17:45:59.483]                     })
[17:45:59.483]                   }
[17:45:59.483]                   ...future.strategy.old <- future::plan("list")
[17:45:59.483]                   options(future.plan = NULL)
[17:45:59.483]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.483]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.483]                 }
[17:45:59.483]                 ...future.workdir <- getwd()
[17:45:59.483]             }
[17:45:59.483]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.483]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.483]         }
[17:45:59.483]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.483]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.483]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.483]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.483]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.483]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.483]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.483]             base::names(...future.oldOptions))
[17:45:59.483]     }
[17:45:59.483]     if (FALSE) {
[17:45:59.483]     }
[17:45:59.483]     else {
[17:45:59.483]         if (TRUE) {
[17:45:59.483]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.483]                 open = "w")
[17:45:59.483]         }
[17:45:59.483]         else {
[17:45:59.483]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.483]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.483]         }
[17:45:59.483]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.483]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.483]             base::sink(type = "output", split = FALSE)
[17:45:59.483]             base::close(...future.stdout)
[17:45:59.483]         }, add = TRUE)
[17:45:59.483]     }
[17:45:59.483]     ...future.frame <- base::sys.nframe()
[17:45:59.483]     ...future.conditions <- base::list()
[17:45:59.483]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.483]     if (FALSE) {
[17:45:59.483]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.483]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.483]     }
[17:45:59.483]     ...future.result <- base::tryCatch({
[17:45:59.483]         base::withCallingHandlers({
[17:45:59.483]             ...future.value <- base::withVisible(base::local({
[17:45:59.483]                 42L
[17:45:59.483]                 stop("Woops")
[17:45:59.483]             }))
[17:45:59.483]             future::FutureResult(value = ...future.value$value, 
[17:45:59.483]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.483]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.483]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.483]                     ...future.globalenv.names))
[17:45:59.483]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.483]         }, condition = base::local({
[17:45:59.483]             c <- base::c
[17:45:59.483]             inherits <- base::inherits
[17:45:59.483]             invokeRestart <- base::invokeRestart
[17:45:59.483]             length <- base::length
[17:45:59.483]             list <- base::list
[17:45:59.483]             seq.int <- base::seq.int
[17:45:59.483]             signalCondition <- base::signalCondition
[17:45:59.483]             sys.calls <- base::sys.calls
[17:45:59.483]             `[[` <- base::`[[`
[17:45:59.483]             `+` <- base::`+`
[17:45:59.483]             `<<-` <- base::`<<-`
[17:45:59.483]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.483]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.483]                   3L)]
[17:45:59.483]             }
[17:45:59.483]             function(cond) {
[17:45:59.483]                 is_error <- inherits(cond, "error")
[17:45:59.483]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.483]                   NULL)
[17:45:59.483]                 if (is_error) {
[17:45:59.483]                   sessionInformation <- function() {
[17:45:59.483]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.483]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.483]                       search = base::search(), system = base::Sys.info())
[17:45:59.483]                   }
[17:45:59.483]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.483]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.483]                     cond$call), session = sessionInformation(), 
[17:45:59.483]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.483]                   signalCondition(cond)
[17:45:59.483]                 }
[17:45:59.483]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.483]                 "immediateCondition"))) {
[17:45:59.483]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.483]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.483]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.483]                   if (TRUE && !signal) {
[17:45:59.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.483]                     {
[17:45:59.483]                       inherits <- base::inherits
[17:45:59.483]                       invokeRestart <- base::invokeRestart
[17:45:59.483]                       is.null <- base::is.null
[17:45:59.483]                       muffled <- FALSE
[17:45:59.483]                       if (inherits(cond, "message")) {
[17:45:59.483]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.483]                         if (muffled) 
[17:45:59.483]                           invokeRestart("muffleMessage")
[17:45:59.483]                       }
[17:45:59.483]                       else if (inherits(cond, "warning")) {
[17:45:59.483]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.483]                         if (muffled) 
[17:45:59.483]                           invokeRestart("muffleWarning")
[17:45:59.483]                       }
[17:45:59.483]                       else if (inherits(cond, "condition")) {
[17:45:59.483]                         if (!is.null(pattern)) {
[17:45:59.483]                           computeRestarts <- base::computeRestarts
[17:45:59.483]                           grepl <- base::grepl
[17:45:59.483]                           restarts <- computeRestarts(cond)
[17:45:59.483]                           for (restart in restarts) {
[17:45:59.483]                             name <- restart$name
[17:45:59.483]                             if (is.null(name)) 
[17:45:59.483]                               next
[17:45:59.483]                             if (!grepl(pattern, name)) 
[17:45:59.483]                               next
[17:45:59.483]                             invokeRestart(restart)
[17:45:59.483]                             muffled <- TRUE
[17:45:59.483]                             break
[17:45:59.483]                           }
[17:45:59.483]                         }
[17:45:59.483]                       }
[17:45:59.483]                       invisible(muffled)
[17:45:59.483]                     }
[17:45:59.483]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.483]                   }
[17:45:59.483]                 }
[17:45:59.483]                 else {
[17:45:59.483]                   if (TRUE) {
[17:45:59.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.483]                     {
[17:45:59.483]                       inherits <- base::inherits
[17:45:59.483]                       invokeRestart <- base::invokeRestart
[17:45:59.483]                       is.null <- base::is.null
[17:45:59.483]                       muffled <- FALSE
[17:45:59.483]                       if (inherits(cond, "message")) {
[17:45:59.483]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.483]                         if (muffled) 
[17:45:59.483]                           invokeRestart("muffleMessage")
[17:45:59.483]                       }
[17:45:59.483]                       else if (inherits(cond, "warning")) {
[17:45:59.483]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.483]                         if (muffled) 
[17:45:59.483]                           invokeRestart("muffleWarning")
[17:45:59.483]                       }
[17:45:59.483]                       else if (inherits(cond, "condition")) {
[17:45:59.483]                         if (!is.null(pattern)) {
[17:45:59.483]                           computeRestarts <- base::computeRestarts
[17:45:59.483]                           grepl <- base::grepl
[17:45:59.483]                           restarts <- computeRestarts(cond)
[17:45:59.483]                           for (restart in restarts) {
[17:45:59.483]                             name <- restart$name
[17:45:59.483]                             if (is.null(name)) 
[17:45:59.483]                               next
[17:45:59.483]                             if (!grepl(pattern, name)) 
[17:45:59.483]                               next
[17:45:59.483]                             invokeRestart(restart)
[17:45:59.483]                             muffled <- TRUE
[17:45:59.483]                             break
[17:45:59.483]                           }
[17:45:59.483]                         }
[17:45:59.483]                       }
[17:45:59.483]                       invisible(muffled)
[17:45:59.483]                     }
[17:45:59.483]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.483]                   }
[17:45:59.483]                 }
[17:45:59.483]             }
[17:45:59.483]         }))
[17:45:59.483]     }, error = function(ex) {
[17:45:59.483]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.483]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.483]                 ...future.rng), started = ...future.startTime, 
[17:45:59.483]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.483]             version = "1.8"), class = "FutureResult")
[17:45:59.483]     }, finally = {
[17:45:59.483]         if (!identical(...future.workdir, getwd())) 
[17:45:59.483]             setwd(...future.workdir)
[17:45:59.483]         {
[17:45:59.483]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.483]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.483]             }
[17:45:59.483]             base::options(...future.oldOptions)
[17:45:59.483]             if (.Platform$OS.type == "windows") {
[17:45:59.483]                 old_names <- names(...future.oldEnvVars)
[17:45:59.483]                 envs <- base::Sys.getenv()
[17:45:59.483]                 names <- names(envs)
[17:45:59.483]                 common <- intersect(names, old_names)
[17:45:59.483]                 added <- setdiff(names, old_names)
[17:45:59.483]                 removed <- setdiff(old_names, names)
[17:45:59.483]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.483]                   envs[common]]
[17:45:59.483]                 NAMES <- toupper(changed)
[17:45:59.483]                 args <- list()
[17:45:59.483]                 for (kk in seq_along(NAMES)) {
[17:45:59.483]                   name <- changed[[kk]]
[17:45:59.483]                   NAME <- NAMES[[kk]]
[17:45:59.483]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.483]                     next
[17:45:59.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.483]                 }
[17:45:59.483]                 NAMES <- toupper(added)
[17:45:59.483]                 for (kk in seq_along(NAMES)) {
[17:45:59.483]                   name <- added[[kk]]
[17:45:59.483]                   NAME <- NAMES[[kk]]
[17:45:59.483]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.483]                     next
[17:45:59.483]                   args[[name]] <- ""
[17:45:59.483]                 }
[17:45:59.483]                 NAMES <- toupper(removed)
[17:45:59.483]                 for (kk in seq_along(NAMES)) {
[17:45:59.483]                   name <- removed[[kk]]
[17:45:59.483]                   NAME <- NAMES[[kk]]
[17:45:59.483]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.483]                     next
[17:45:59.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.483]                 }
[17:45:59.483]                 if (length(args) > 0) 
[17:45:59.483]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.483]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.483]             }
[17:45:59.483]             else {
[17:45:59.483]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.483]             }
[17:45:59.483]             {
[17:45:59.483]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.483]                   0L) {
[17:45:59.483]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.483]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.483]                   base::options(opts)
[17:45:59.483]                 }
[17:45:59.483]                 {
[17:45:59.483]                   {
[17:45:59.483]                     NULL
[17:45:59.483]                     RNGkind("Mersenne-Twister")
[17:45:59.483]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.483]                       inherits = FALSE)
[17:45:59.483]                   }
[17:45:59.483]                   options(future.plan = NULL)
[17:45:59.483]                   if (is.na(NA_character_)) 
[17:45:59.483]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.483]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.483]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.483]                     .init = FALSE)
[17:45:59.483]                 }
[17:45:59.483]             }
[17:45:59.483]         }
[17:45:59.483]     })
[17:45:59.483]     if (TRUE) {
[17:45:59.483]         base::sink(type = "output", split = FALSE)
[17:45:59.483]         if (TRUE) {
[17:45:59.483]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.483]         }
[17:45:59.483]         else {
[17:45:59.483]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.483]         }
[17:45:59.483]         base::close(...future.stdout)
[17:45:59.483]         ...future.stdout <- NULL
[17:45:59.483]     }
[17:45:59.483]     ...future.result$conditions <- ...future.conditions
[17:45:59.483]     ...future.result$finished <- base::Sys.time()
[17:45:59.483]     ...future.result
[17:45:59.483] }
[17:45:59.485] plan(): Setting new future strategy stack:
[17:45:59.485] List of future strategies:
[17:45:59.485] 1. sequential:
[17:45:59.485]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.485]    - tweaked: FALSE
[17:45:59.485]    - call: NULL
[17:45:59.485] plan(): nbrOfWorkers() = 1
[17:45:59.486] plan(): Setting new future strategy stack:
[17:45:59.486] List of future strategies:
[17:45:59.486] 1. sequential:
[17:45:59.486]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.486]    - tweaked: FALSE
[17:45:59.486]    - call: future::plan("sequential")
[17:45:59.487] plan(): nbrOfWorkers() = 1
[17:45:59.487] SequentialFuture started (and completed)
[17:45:59.487] signalConditions() ...
[17:45:59.487]  - include = ‘immediateCondition’
[17:45:59.487]  - exclude = 
[17:45:59.487]  - resignal = FALSE
[17:45:59.487]  - Number of conditions: 1
[17:45:59.487] signalConditions() ... done
[17:45:59.487] - Launch lazy future ... done
[17:45:59.488] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[17:45:59.488] getGlobalsAndPackages() ...
[17:45:59.488] Searching for globals...
[17:45:59.489] - globals found: [2] ‘{’, ‘stop’
[17:45:59.489] Searching for globals ... DONE
[17:45:59.489] Resolving globals: FALSE
[17:45:59.489] 
[17:45:59.489] 
[17:45:59.489] getGlobalsAndPackages() ... DONE
[17:45:59.489] run() for ‘Future’ ...
[17:45:59.490] - state: ‘created’
[17:45:59.490] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.490] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.490] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.490]   - Field: ‘label’
[17:45:59.490]   - Field: ‘local’
[17:45:59.490]   - Field: ‘owner’
[17:45:59.490]   - Field: ‘envir’
[17:45:59.490]   - Field: ‘packages’
[17:45:59.491]   - Field: ‘gc’
[17:45:59.491]   - Field: ‘conditions’
[17:45:59.491]   - Field: ‘expr’
[17:45:59.491]   - Field: ‘uuid’
[17:45:59.491]   - Field: ‘seed’
[17:45:59.491]   - Field: ‘version’
[17:45:59.491]   - Field: ‘result’
[17:45:59.491]   - Field: ‘asynchronous’
[17:45:59.491]   - Field: ‘calls’
[17:45:59.491]   - Field: ‘globals’
[17:45:59.491]   - Field: ‘stdout’
[17:45:59.491]   - Field: ‘earlySignal’
[17:45:59.492]   - Field: ‘lazy’
[17:45:59.492]   - Field: ‘state’
[17:45:59.492] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.492] - Launch lazy future ...
[17:45:59.492] Packages needed by the future expression (n = 0): <none>
[17:45:59.492] Packages needed by future strategies (n = 0): <none>
[17:45:59.492] {
[17:45:59.492]     {
[17:45:59.492]         {
[17:45:59.492]             ...future.startTime <- base::Sys.time()
[17:45:59.492]             {
[17:45:59.492]                 {
[17:45:59.492]                   {
[17:45:59.492]                     base::local({
[17:45:59.492]                       has_future <- base::requireNamespace("future", 
[17:45:59.492]                         quietly = TRUE)
[17:45:59.492]                       if (has_future) {
[17:45:59.492]                         ns <- base::getNamespace("future")
[17:45:59.492]                         version <- ns[[".package"]][["version"]]
[17:45:59.492]                         if (is.null(version)) 
[17:45:59.492]                           version <- utils::packageVersion("future")
[17:45:59.492]                       }
[17:45:59.492]                       else {
[17:45:59.492]                         version <- NULL
[17:45:59.492]                       }
[17:45:59.492]                       if (!has_future || version < "1.8.0") {
[17:45:59.492]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.492]                           "", base::R.version$version.string), 
[17:45:59.492]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.492]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.492]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.492]                             "release", "version")], collapse = " "), 
[17:45:59.492]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.492]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.492]                           info)
[17:45:59.492]                         info <- base::paste(info, collapse = "; ")
[17:45:59.492]                         if (!has_future) {
[17:45:59.492]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.492]                             info)
[17:45:59.492]                         }
[17:45:59.492]                         else {
[17:45:59.492]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.492]                             info, version)
[17:45:59.492]                         }
[17:45:59.492]                         base::stop(msg)
[17:45:59.492]                       }
[17:45:59.492]                     })
[17:45:59.492]                   }
[17:45:59.492]                   ...future.strategy.old <- future::plan("list")
[17:45:59.492]                   options(future.plan = NULL)
[17:45:59.492]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.492]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.492]                 }
[17:45:59.492]                 ...future.workdir <- getwd()
[17:45:59.492]             }
[17:45:59.492]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.492]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.492]         }
[17:45:59.492]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.492]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.492]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.492]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.492]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.492]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.492]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.492]             base::names(...future.oldOptions))
[17:45:59.492]     }
[17:45:59.492]     if (FALSE) {
[17:45:59.492]     }
[17:45:59.492]     else {
[17:45:59.492]         if (TRUE) {
[17:45:59.492]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.492]                 open = "w")
[17:45:59.492]         }
[17:45:59.492]         else {
[17:45:59.492]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.492]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.492]         }
[17:45:59.492]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.492]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.492]             base::sink(type = "output", split = FALSE)
[17:45:59.492]             base::close(...future.stdout)
[17:45:59.492]         }, add = TRUE)
[17:45:59.492]     }
[17:45:59.492]     ...future.frame <- base::sys.nframe()
[17:45:59.492]     ...future.conditions <- base::list()
[17:45:59.492]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.492]     if (FALSE) {
[17:45:59.492]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.492]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.492]     }
[17:45:59.492]     ...future.result <- base::tryCatch({
[17:45:59.492]         base::withCallingHandlers({
[17:45:59.492]             ...future.value <- base::withVisible(base::local({
[17:45:59.492]                 42L
[17:45:59.492]                 stop("Woops")
[17:45:59.492]             }))
[17:45:59.492]             future::FutureResult(value = ...future.value$value, 
[17:45:59.492]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.492]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.492]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.492]                     ...future.globalenv.names))
[17:45:59.492]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.492]         }, condition = base::local({
[17:45:59.492]             c <- base::c
[17:45:59.492]             inherits <- base::inherits
[17:45:59.492]             invokeRestart <- base::invokeRestart
[17:45:59.492]             length <- base::length
[17:45:59.492]             list <- base::list
[17:45:59.492]             seq.int <- base::seq.int
[17:45:59.492]             signalCondition <- base::signalCondition
[17:45:59.492]             sys.calls <- base::sys.calls
[17:45:59.492]             `[[` <- base::`[[`
[17:45:59.492]             `+` <- base::`+`
[17:45:59.492]             `<<-` <- base::`<<-`
[17:45:59.492]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.492]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.492]                   3L)]
[17:45:59.492]             }
[17:45:59.492]             function(cond) {
[17:45:59.492]                 is_error <- inherits(cond, "error")
[17:45:59.492]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.492]                   NULL)
[17:45:59.492]                 if (is_error) {
[17:45:59.492]                   sessionInformation <- function() {
[17:45:59.492]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.492]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.492]                       search = base::search(), system = base::Sys.info())
[17:45:59.492]                   }
[17:45:59.492]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.492]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.492]                     cond$call), session = sessionInformation(), 
[17:45:59.492]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.492]                   signalCondition(cond)
[17:45:59.492]                 }
[17:45:59.492]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.492]                 "immediateCondition"))) {
[17:45:59.492]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.492]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.492]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.492]                   if (TRUE && !signal) {
[17:45:59.492]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.492]                     {
[17:45:59.492]                       inherits <- base::inherits
[17:45:59.492]                       invokeRestart <- base::invokeRestart
[17:45:59.492]                       is.null <- base::is.null
[17:45:59.492]                       muffled <- FALSE
[17:45:59.492]                       if (inherits(cond, "message")) {
[17:45:59.492]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.492]                         if (muffled) 
[17:45:59.492]                           invokeRestart("muffleMessage")
[17:45:59.492]                       }
[17:45:59.492]                       else if (inherits(cond, "warning")) {
[17:45:59.492]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.492]                         if (muffled) 
[17:45:59.492]                           invokeRestart("muffleWarning")
[17:45:59.492]                       }
[17:45:59.492]                       else if (inherits(cond, "condition")) {
[17:45:59.492]                         if (!is.null(pattern)) {
[17:45:59.492]                           computeRestarts <- base::computeRestarts
[17:45:59.492]                           grepl <- base::grepl
[17:45:59.492]                           restarts <- computeRestarts(cond)
[17:45:59.492]                           for (restart in restarts) {
[17:45:59.492]                             name <- restart$name
[17:45:59.492]                             if (is.null(name)) 
[17:45:59.492]                               next
[17:45:59.492]                             if (!grepl(pattern, name)) 
[17:45:59.492]                               next
[17:45:59.492]                             invokeRestart(restart)
[17:45:59.492]                             muffled <- TRUE
[17:45:59.492]                             break
[17:45:59.492]                           }
[17:45:59.492]                         }
[17:45:59.492]                       }
[17:45:59.492]                       invisible(muffled)
[17:45:59.492]                     }
[17:45:59.492]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.492]                   }
[17:45:59.492]                 }
[17:45:59.492]                 else {
[17:45:59.492]                   if (TRUE) {
[17:45:59.492]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.492]                     {
[17:45:59.492]                       inherits <- base::inherits
[17:45:59.492]                       invokeRestart <- base::invokeRestart
[17:45:59.492]                       is.null <- base::is.null
[17:45:59.492]                       muffled <- FALSE
[17:45:59.492]                       if (inherits(cond, "message")) {
[17:45:59.492]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.492]                         if (muffled) 
[17:45:59.492]                           invokeRestart("muffleMessage")
[17:45:59.492]                       }
[17:45:59.492]                       else if (inherits(cond, "warning")) {
[17:45:59.492]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.492]                         if (muffled) 
[17:45:59.492]                           invokeRestart("muffleWarning")
[17:45:59.492]                       }
[17:45:59.492]                       else if (inherits(cond, "condition")) {
[17:45:59.492]                         if (!is.null(pattern)) {
[17:45:59.492]                           computeRestarts <- base::computeRestarts
[17:45:59.492]                           grepl <- base::grepl
[17:45:59.492]                           restarts <- computeRestarts(cond)
[17:45:59.492]                           for (restart in restarts) {
[17:45:59.492]                             name <- restart$name
[17:45:59.492]                             if (is.null(name)) 
[17:45:59.492]                               next
[17:45:59.492]                             if (!grepl(pattern, name)) 
[17:45:59.492]                               next
[17:45:59.492]                             invokeRestart(restart)
[17:45:59.492]                             muffled <- TRUE
[17:45:59.492]                             break
[17:45:59.492]                           }
[17:45:59.492]                         }
[17:45:59.492]                       }
[17:45:59.492]                       invisible(muffled)
[17:45:59.492]                     }
[17:45:59.492]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.492]                   }
[17:45:59.492]                 }
[17:45:59.492]             }
[17:45:59.492]         }))
[17:45:59.492]     }, error = function(ex) {
[17:45:59.492]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.492]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.492]                 ...future.rng), started = ...future.startTime, 
[17:45:59.492]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.492]             version = "1.8"), class = "FutureResult")
[17:45:59.492]     }, finally = {
[17:45:59.492]         if (!identical(...future.workdir, getwd())) 
[17:45:59.492]             setwd(...future.workdir)
[17:45:59.492]         {
[17:45:59.492]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.492]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.492]             }
[17:45:59.492]             base::options(...future.oldOptions)
[17:45:59.492]             if (.Platform$OS.type == "windows") {
[17:45:59.492]                 old_names <- names(...future.oldEnvVars)
[17:45:59.492]                 envs <- base::Sys.getenv()
[17:45:59.492]                 names <- names(envs)
[17:45:59.492]                 common <- intersect(names, old_names)
[17:45:59.492]                 added <- setdiff(names, old_names)
[17:45:59.492]                 removed <- setdiff(old_names, names)
[17:45:59.492]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.492]                   envs[common]]
[17:45:59.492]                 NAMES <- toupper(changed)
[17:45:59.492]                 args <- list()
[17:45:59.492]                 for (kk in seq_along(NAMES)) {
[17:45:59.492]                   name <- changed[[kk]]
[17:45:59.492]                   NAME <- NAMES[[kk]]
[17:45:59.492]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.492]                     next
[17:45:59.492]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.492]                 }
[17:45:59.492]                 NAMES <- toupper(added)
[17:45:59.492]                 for (kk in seq_along(NAMES)) {
[17:45:59.492]                   name <- added[[kk]]
[17:45:59.492]                   NAME <- NAMES[[kk]]
[17:45:59.492]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.492]                     next
[17:45:59.492]                   args[[name]] <- ""
[17:45:59.492]                 }
[17:45:59.492]                 NAMES <- toupper(removed)
[17:45:59.492]                 for (kk in seq_along(NAMES)) {
[17:45:59.492]                   name <- removed[[kk]]
[17:45:59.492]                   NAME <- NAMES[[kk]]
[17:45:59.492]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.492]                     next
[17:45:59.492]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.492]                 }
[17:45:59.492]                 if (length(args) > 0) 
[17:45:59.492]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.492]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.492]             }
[17:45:59.492]             else {
[17:45:59.492]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.492]             }
[17:45:59.492]             {
[17:45:59.492]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.492]                   0L) {
[17:45:59.492]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.492]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.492]                   base::options(opts)
[17:45:59.492]                 }
[17:45:59.492]                 {
[17:45:59.492]                   {
[17:45:59.492]                     NULL
[17:45:59.492]                     RNGkind("Mersenne-Twister")
[17:45:59.492]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.492]                       inherits = FALSE)
[17:45:59.492]                   }
[17:45:59.492]                   options(future.plan = NULL)
[17:45:59.492]                   if (is.na(NA_character_)) 
[17:45:59.492]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.492]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.492]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.492]                     .init = FALSE)
[17:45:59.492]                 }
[17:45:59.492]             }
[17:45:59.492]         }
[17:45:59.492]     })
[17:45:59.492]     if (TRUE) {
[17:45:59.492]         base::sink(type = "output", split = FALSE)
[17:45:59.492]         if (TRUE) {
[17:45:59.492]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.492]         }
[17:45:59.492]         else {
[17:45:59.492]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.492]         }
[17:45:59.492]         base::close(...future.stdout)
[17:45:59.492]         ...future.stdout <- NULL
[17:45:59.492]     }
[17:45:59.492]     ...future.result$conditions <- ...future.conditions
[17:45:59.492]     ...future.result$finished <- base::Sys.time()
[17:45:59.492]     ...future.result
[17:45:59.492] }
[17:45:59.494] plan(): Setting new future strategy stack:
[17:45:59.494] List of future strategies:
[17:45:59.494] 1. sequential:
[17:45:59.494]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.494]    - tweaked: FALSE
[17:45:59.494]    - call: NULL
[17:45:59.495] plan(): nbrOfWorkers() = 1
[17:45:59.495] plan(): Setting new future strategy stack:
[17:45:59.496] List of future strategies:
[17:45:59.496] 1. sequential:
[17:45:59.496]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.496]    - tweaked: FALSE
[17:45:59.496]    - call: future::plan("sequential")
[17:45:59.496] plan(): nbrOfWorkers() = 1
[17:45:59.496] SequentialFuture started (and completed)
[17:45:59.496] signalConditions() ...
[17:45:59.496]  - include = ‘immediateCondition’
[17:45:59.496]  - exclude = 
[17:45:59.496]  - resignal = FALSE
[17:45:59.497]  - Number of conditions: 1
[17:45:59.497] signalConditions() ... done
[17:45:59.497] - Launch lazy future ... done
[17:45:59.497] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[17:45:59.497] resolve() on list ...
[17:45:59.497]  recursive: 0
[17:45:59.498]  length: 2
[17:45:59.498] 
[17:45:59.498] resolved() for ‘SequentialFuture’ ...
[17:45:59.498] - state: ‘finished’
[17:45:59.498] - run: TRUE
[17:45:59.498] - result: ‘FutureResult’
[17:45:59.498] resolved() for ‘SequentialFuture’ ... done
[17:45:59.498] Future #1
[17:45:59.498] signalConditions() ...
[17:45:59.498]  - include = ‘immediateCondition’
[17:45:59.499]  - exclude = 
[17:45:59.499]  - resignal = FALSE
[17:45:59.499]  - Number of conditions: 1
[17:45:59.499] signalConditions() ... done
[17:45:59.499] signalConditionsASAP(SequentialFuture, pos=1) ...
[17:45:59.499] - nx: 2
[17:45:59.499] - relay: TRUE
[17:45:59.499] - stdout: TRUE
[17:45:59.499] - signal: FALSE
[17:45:59.499] - resignal: FALSE
[17:45:59.499] - force: TRUE
[17:45:59.500] - relayed: [n=2] FALSE, FALSE
[17:45:59.500] - queued futures: [n=2] FALSE, FALSE
[17:45:59.500]  - until=1
[17:45:59.500]  - relaying element #1
[17:45:59.500] signalConditions() ...
[17:45:59.500]  - include = ‘immediateCondition’
[17:45:59.500]  - exclude = 
[17:45:59.500]  - resignal = FALSE
[17:45:59.500]  - Number of conditions: 1
[17:45:59.500] signalConditions() ... done
[17:45:59.500] - relayed: [n=2] TRUE, FALSE
[17:45:59.500] - queued futures: [n=2] TRUE, FALSE
[17:45:59.501] signalConditionsASAP(SequentialFuture, pos=1) ... done
[17:45:59.501]  length: 1 (resolved future 1)
[17:45:59.501] resolved() for ‘SequentialFuture’ ...
[17:45:59.501] - state: ‘finished’
[17:45:59.501] - run: TRUE
[17:45:59.501] - result: ‘FutureResult’
[17:45:59.501] resolved() for ‘SequentialFuture’ ... done
[17:45:59.501] Future #2
[17:45:59.501] signalConditions() ...
[17:45:59.502]  - include = ‘immediateCondition’
[17:45:59.502]  - exclude = 
[17:45:59.502]  - resignal = FALSE
[17:45:59.502]  - Number of conditions: 1
[17:45:59.502] signalConditions() ... done
[17:45:59.502] signalConditionsASAP(SequentialFuture, pos=2) ...
[17:45:59.502] - nx: 2
[17:45:59.502] - relay: TRUE
[17:45:59.502] - stdout: TRUE
[17:45:59.502] - signal: FALSE
[17:45:59.502] - resignal: FALSE
[17:45:59.502] - force: TRUE
[17:45:59.502] - relayed: [n=2] TRUE, FALSE
[17:45:59.503] - queued futures: [n=2] TRUE, FALSE
[17:45:59.503]  - until=2
[17:45:59.503]  - relaying element #2
[17:45:59.503] signalConditions() ...
[17:45:59.503]  - include = ‘immediateCondition’
[17:45:59.503]  - exclude = 
[17:45:59.503]  - resignal = FALSE
[17:45:59.503]  - Number of conditions: 1
[17:45:59.503] signalConditions() ... done
[17:45:59.503] - relayed: [n=2] TRUE, TRUE
[17:45:59.503] - queued futures: [n=2] TRUE, TRUE
[17:45:59.504] signalConditionsASAP(SequentialFuture, pos=2) ... done
[17:45:59.504]  length: 0 (resolved future 2)
[17:45:59.504] Relaying remaining futures
[17:45:59.504] signalConditionsASAP(NULL, pos=0) ...
[17:45:59.504] - nx: 2
[17:45:59.504] - relay: TRUE
[17:45:59.504] - stdout: TRUE
[17:45:59.504] - signal: FALSE
[17:45:59.504] - resignal: FALSE
[17:45:59.506] - force: TRUE
[17:45:59.506] - relayed: [n=2] TRUE, TRUE
[17:45:59.506] - queued futures: [n=2] TRUE, TRUE
 - flush all
[17:45:59.506] - relayed: [n=2] TRUE, TRUE
[17:45:59.506] - queued futures: [n=2] TRUE, TRUE
[17:45:59.506] signalConditionsASAP(NULL, pos=0) ... done
[17:45:59.506] resolve() on list ... DONE
[17:45:59.506] signalConditions() ...
[17:45:59.506]  - include = ‘immediateCondition’
[17:45:59.507]  - exclude = 
[17:45:59.507]  - resignal = FALSE
[17:45:59.507]  - Number of conditions: 1
[17:45:59.507] signalConditions() ... done
[17:45:59.507] signalConditions() ...
[17:45:59.507]  - include = ‘immediateCondition’
[17:45:59.507]  - exclude = 
[17:45:59.507]  - resignal = FALSE
[17:45:59.507]  - Number of conditions: 1
[17:45:59.507] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[17:45:59.508] resolved() for ‘SequentialFuture’ ...
[17:45:59.508] - state: ‘finished’
[17:45:59.508] - run: TRUE
[17:45:59.508] - result: ‘FutureResult’
[17:45:59.508] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[17:45:59.509] getGlobalsAndPackages() ...
[17:45:59.509] Searching for globals...
[17:45:59.509] 
[17:45:59.509] Searching for globals ... DONE
[17:45:59.509] - globals: [0] <none>
[17:45:59.509] getGlobalsAndPackages() ... DONE
[17:45:59.509] run() for ‘Future’ ...
[17:45:59.510] - state: ‘created’
[17:45:59.510] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.510] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.510] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.510]   - Field: ‘label’
[17:45:59.510]   - Field: ‘local’
[17:45:59.510]   - Field: ‘owner’
[17:45:59.510]   - Field: ‘envir’
[17:45:59.510]   - Field: ‘packages’
[17:45:59.511]   - Field: ‘gc’
[17:45:59.511]   - Field: ‘conditions’
[17:45:59.511]   - Field: ‘expr’
[17:45:59.511]   - Field: ‘uuid’
[17:45:59.511]   - Field: ‘seed’
[17:45:59.511]   - Field: ‘version’
[17:45:59.511]   - Field: ‘result’
[17:45:59.511]   - Field: ‘asynchronous’
[17:45:59.511]   - Field: ‘calls’
[17:45:59.511]   - Field: ‘globals’
[17:45:59.511]   - Field: ‘stdout’
[17:45:59.512]   - Field: ‘earlySignal’
[17:45:59.512]   - Field: ‘lazy’
[17:45:59.512]   - Field: ‘state’
[17:45:59.512] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.512] - Launch lazy future ...
[17:45:59.512] Packages needed by the future expression (n = 0): <none>
[17:45:59.512] Packages needed by future strategies (n = 0): <none>
[17:45:59.513] {
[17:45:59.513]     {
[17:45:59.513]         {
[17:45:59.513]             ...future.startTime <- base::Sys.time()
[17:45:59.513]             {
[17:45:59.513]                 {
[17:45:59.513]                   {
[17:45:59.513]                     base::local({
[17:45:59.513]                       has_future <- base::requireNamespace("future", 
[17:45:59.513]                         quietly = TRUE)
[17:45:59.513]                       if (has_future) {
[17:45:59.513]                         ns <- base::getNamespace("future")
[17:45:59.513]                         version <- ns[[".package"]][["version"]]
[17:45:59.513]                         if (is.null(version)) 
[17:45:59.513]                           version <- utils::packageVersion("future")
[17:45:59.513]                       }
[17:45:59.513]                       else {
[17:45:59.513]                         version <- NULL
[17:45:59.513]                       }
[17:45:59.513]                       if (!has_future || version < "1.8.0") {
[17:45:59.513]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.513]                           "", base::R.version$version.string), 
[17:45:59.513]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.513]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.513]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.513]                             "release", "version")], collapse = " "), 
[17:45:59.513]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.513]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.513]                           info)
[17:45:59.513]                         info <- base::paste(info, collapse = "; ")
[17:45:59.513]                         if (!has_future) {
[17:45:59.513]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.513]                             info)
[17:45:59.513]                         }
[17:45:59.513]                         else {
[17:45:59.513]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.513]                             info, version)
[17:45:59.513]                         }
[17:45:59.513]                         base::stop(msg)
[17:45:59.513]                       }
[17:45:59.513]                     })
[17:45:59.513]                   }
[17:45:59.513]                   ...future.strategy.old <- future::plan("list")
[17:45:59.513]                   options(future.plan = NULL)
[17:45:59.513]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.513]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.513]                 }
[17:45:59.513]                 ...future.workdir <- getwd()
[17:45:59.513]             }
[17:45:59.513]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.513]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.513]         }
[17:45:59.513]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.513]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.513]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.513]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.513]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.513]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.513]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.513]             base::names(...future.oldOptions))
[17:45:59.513]     }
[17:45:59.513]     if (FALSE) {
[17:45:59.513]     }
[17:45:59.513]     else {
[17:45:59.513]         if (TRUE) {
[17:45:59.513]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.513]                 open = "w")
[17:45:59.513]         }
[17:45:59.513]         else {
[17:45:59.513]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.513]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.513]         }
[17:45:59.513]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.513]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.513]             base::sink(type = "output", split = FALSE)
[17:45:59.513]             base::close(...future.stdout)
[17:45:59.513]         }, add = TRUE)
[17:45:59.513]     }
[17:45:59.513]     ...future.frame <- base::sys.nframe()
[17:45:59.513]     ...future.conditions <- base::list()
[17:45:59.513]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.513]     if (FALSE) {
[17:45:59.513]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.513]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.513]     }
[17:45:59.513]     ...future.result <- base::tryCatch({
[17:45:59.513]         base::withCallingHandlers({
[17:45:59.513]             ...future.value <- base::withVisible(base::local(42L))
[17:45:59.513]             future::FutureResult(value = ...future.value$value, 
[17:45:59.513]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.513]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.513]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.513]                     ...future.globalenv.names))
[17:45:59.513]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.513]         }, condition = base::local({
[17:45:59.513]             c <- base::c
[17:45:59.513]             inherits <- base::inherits
[17:45:59.513]             invokeRestart <- base::invokeRestart
[17:45:59.513]             length <- base::length
[17:45:59.513]             list <- base::list
[17:45:59.513]             seq.int <- base::seq.int
[17:45:59.513]             signalCondition <- base::signalCondition
[17:45:59.513]             sys.calls <- base::sys.calls
[17:45:59.513]             `[[` <- base::`[[`
[17:45:59.513]             `+` <- base::`+`
[17:45:59.513]             `<<-` <- base::`<<-`
[17:45:59.513]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.513]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.513]                   3L)]
[17:45:59.513]             }
[17:45:59.513]             function(cond) {
[17:45:59.513]                 is_error <- inherits(cond, "error")
[17:45:59.513]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.513]                   NULL)
[17:45:59.513]                 if (is_error) {
[17:45:59.513]                   sessionInformation <- function() {
[17:45:59.513]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.513]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.513]                       search = base::search(), system = base::Sys.info())
[17:45:59.513]                   }
[17:45:59.513]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.513]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.513]                     cond$call), session = sessionInformation(), 
[17:45:59.513]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.513]                   signalCondition(cond)
[17:45:59.513]                 }
[17:45:59.513]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.513]                 "immediateCondition"))) {
[17:45:59.513]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.513]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.513]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.513]                   if (TRUE && !signal) {
[17:45:59.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.513]                     {
[17:45:59.513]                       inherits <- base::inherits
[17:45:59.513]                       invokeRestart <- base::invokeRestart
[17:45:59.513]                       is.null <- base::is.null
[17:45:59.513]                       muffled <- FALSE
[17:45:59.513]                       if (inherits(cond, "message")) {
[17:45:59.513]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.513]                         if (muffled) 
[17:45:59.513]                           invokeRestart("muffleMessage")
[17:45:59.513]                       }
[17:45:59.513]                       else if (inherits(cond, "warning")) {
[17:45:59.513]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.513]                         if (muffled) 
[17:45:59.513]                           invokeRestart("muffleWarning")
[17:45:59.513]                       }
[17:45:59.513]                       else if (inherits(cond, "condition")) {
[17:45:59.513]                         if (!is.null(pattern)) {
[17:45:59.513]                           computeRestarts <- base::computeRestarts
[17:45:59.513]                           grepl <- base::grepl
[17:45:59.513]                           restarts <- computeRestarts(cond)
[17:45:59.513]                           for (restart in restarts) {
[17:45:59.513]                             name <- restart$name
[17:45:59.513]                             if (is.null(name)) 
[17:45:59.513]                               next
[17:45:59.513]                             if (!grepl(pattern, name)) 
[17:45:59.513]                               next
[17:45:59.513]                             invokeRestart(restart)
[17:45:59.513]                             muffled <- TRUE
[17:45:59.513]                             break
[17:45:59.513]                           }
[17:45:59.513]                         }
[17:45:59.513]                       }
[17:45:59.513]                       invisible(muffled)
[17:45:59.513]                     }
[17:45:59.513]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.513]                   }
[17:45:59.513]                 }
[17:45:59.513]                 else {
[17:45:59.513]                   if (TRUE) {
[17:45:59.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.513]                     {
[17:45:59.513]                       inherits <- base::inherits
[17:45:59.513]                       invokeRestart <- base::invokeRestart
[17:45:59.513]                       is.null <- base::is.null
[17:45:59.513]                       muffled <- FALSE
[17:45:59.513]                       if (inherits(cond, "message")) {
[17:45:59.513]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.513]                         if (muffled) 
[17:45:59.513]                           invokeRestart("muffleMessage")
[17:45:59.513]                       }
[17:45:59.513]                       else if (inherits(cond, "warning")) {
[17:45:59.513]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.513]                         if (muffled) 
[17:45:59.513]                           invokeRestart("muffleWarning")
[17:45:59.513]                       }
[17:45:59.513]                       else if (inherits(cond, "condition")) {
[17:45:59.513]                         if (!is.null(pattern)) {
[17:45:59.513]                           computeRestarts <- base::computeRestarts
[17:45:59.513]                           grepl <- base::grepl
[17:45:59.513]                           restarts <- computeRestarts(cond)
[17:45:59.513]                           for (restart in restarts) {
[17:45:59.513]                             name <- restart$name
[17:45:59.513]                             if (is.null(name)) 
[17:45:59.513]                               next
[17:45:59.513]                             if (!grepl(pattern, name)) 
[17:45:59.513]                               next
[17:45:59.513]                             invokeRestart(restart)
[17:45:59.513]                             muffled <- TRUE
[17:45:59.513]                             break
[17:45:59.513]                           }
[17:45:59.513]                         }
[17:45:59.513]                       }
[17:45:59.513]                       invisible(muffled)
[17:45:59.513]                     }
[17:45:59.513]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.513]                   }
[17:45:59.513]                 }
[17:45:59.513]             }
[17:45:59.513]         }))
[17:45:59.513]     }, error = function(ex) {
[17:45:59.513]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.513]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.513]                 ...future.rng), started = ...future.startTime, 
[17:45:59.513]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.513]             version = "1.8"), class = "FutureResult")
[17:45:59.513]     }, finally = {
[17:45:59.513]         if (!identical(...future.workdir, getwd())) 
[17:45:59.513]             setwd(...future.workdir)
[17:45:59.513]         {
[17:45:59.513]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.513]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.513]             }
[17:45:59.513]             base::options(...future.oldOptions)
[17:45:59.513]             if (.Platform$OS.type == "windows") {
[17:45:59.513]                 old_names <- names(...future.oldEnvVars)
[17:45:59.513]                 envs <- base::Sys.getenv()
[17:45:59.513]                 names <- names(envs)
[17:45:59.513]                 common <- intersect(names, old_names)
[17:45:59.513]                 added <- setdiff(names, old_names)
[17:45:59.513]                 removed <- setdiff(old_names, names)
[17:45:59.513]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.513]                   envs[common]]
[17:45:59.513]                 NAMES <- toupper(changed)
[17:45:59.513]                 args <- list()
[17:45:59.513]                 for (kk in seq_along(NAMES)) {
[17:45:59.513]                   name <- changed[[kk]]
[17:45:59.513]                   NAME <- NAMES[[kk]]
[17:45:59.513]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.513]                     next
[17:45:59.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.513]                 }
[17:45:59.513]                 NAMES <- toupper(added)
[17:45:59.513]                 for (kk in seq_along(NAMES)) {
[17:45:59.513]                   name <- added[[kk]]
[17:45:59.513]                   NAME <- NAMES[[kk]]
[17:45:59.513]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.513]                     next
[17:45:59.513]                   args[[name]] <- ""
[17:45:59.513]                 }
[17:45:59.513]                 NAMES <- toupper(removed)
[17:45:59.513]                 for (kk in seq_along(NAMES)) {
[17:45:59.513]                   name <- removed[[kk]]
[17:45:59.513]                   NAME <- NAMES[[kk]]
[17:45:59.513]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.513]                     next
[17:45:59.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.513]                 }
[17:45:59.513]                 if (length(args) > 0) 
[17:45:59.513]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.513]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.513]             }
[17:45:59.513]             else {
[17:45:59.513]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.513]             }
[17:45:59.513]             {
[17:45:59.513]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.513]                   0L) {
[17:45:59.513]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.513]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.513]                   base::options(opts)
[17:45:59.513]                 }
[17:45:59.513]                 {
[17:45:59.513]                   {
[17:45:59.513]                     NULL
[17:45:59.513]                     RNGkind("Mersenne-Twister")
[17:45:59.513]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.513]                       inherits = FALSE)
[17:45:59.513]                   }
[17:45:59.513]                   options(future.plan = NULL)
[17:45:59.513]                   if (is.na(NA_character_)) 
[17:45:59.513]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.513]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.513]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.513]                     .init = FALSE)
[17:45:59.513]                 }
[17:45:59.513]             }
[17:45:59.513]         }
[17:45:59.513]     })
[17:45:59.513]     if (TRUE) {
[17:45:59.513]         base::sink(type = "output", split = FALSE)
[17:45:59.513]         if (TRUE) {
[17:45:59.513]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.513]         }
[17:45:59.513]         else {
[17:45:59.513]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.513]         }
[17:45:59.513]         base::close(...future.stdout)
[17:45:59.513]         ...future.stdout <- NULL
[17:45:59.513]     }
[17:45:59.513]     ...future.result$conditions <- ...future.conditions
[17:45:59.513]     ...future.result$finished <- base::Sys.time()
[17:45:59.513]     ...future.result
[17:45:59.513] }
[17:45:59.514] plan(): Setting new future strategy stack:
[17:45:59.514] List of future strategies:
[17:45:59.514] 1. sequential:
[17:45:59.514]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.514]    - tweaked: FALSE
[17:45:59.514]    - call: NULL
[17:45:59.515] plan(): nbrOfWorkers() = 1
[17:45:59.516] plan(): Setting new future strategy stack:
[17:45:59.516] List of future strategies:
[17:45:59.516] 1. sequential:
[17:45:59.516]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.516]    - tweaked: FALSE
[17:45:59.516]    - call: future::plan("sequential")
[17:45:59.516] plan(): nbrOfWorkers() = 1
[17:45:59.516] SequentialFuture started (and completed)
[17:45:59.516] - Launch lazy future ... done
[17:45:59.517] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[17:45:59.517] resolved() for ‘SequentialFuture’ ...
[17:45:59.517] - state: ‘finished’
[17:45:59.517] - run: TRUE
[17:45:59.517] - result: ‘FutureResult’
[17:45:59.517] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[17:45:59.518] getGlobalsAndPackages() ...
[17:45:59.518] Searching for globals...
[17:45:59.518] - globals found: [2] ‘{’, ‘stop’
[17:45:59.519] Searching for globals ... DONE
[17:45:59.519] Resolving globals: FALSE
[17:45:59.519] 
[17:45:59.519] 
[17:45:59.519] getGlobalsAndPackages() ... DONE
[17:45:59.519] run() for ‘Future’ ...
[17:45:59.519] - state: ‘created’
[17:45:59.520] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:45:59.520] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:45:59.520] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:45:59.520]   - Field: ‘label’
[17:45:59.520]   - Field: ‘local’
[17:45:59.520]   - Field: ‘owner’
[17:45:59.520]   - Field: ‘envir’
[17:45:59.520]   - Field: ‘packages’
[17:45:59.520]   - Field: ‘gc’
[17:45:59.521]   - Field: ‘conditions’
[17:45:59.521]   - Field: ‘expr’
[17:45:59.521]   - Field: ‘uuid’
[17:45:59.521]   - Field: ‘seed’
[17:45:59.521]   - Field: ‘version’
[17:45:59.521]   - Field: ‘result’
[17:45:59.521]   - Field: ‘asynchronous’
[17:45:59.521]   - Field: ‘calls’
[17:45:59.521]   - Field: ‘globals’
[17:45:59.521]   - Field: ‘stdout’
[17:45:59.521]   - Field: ‘earlySignal’
[17:45:59.521]   - Field: ‘lazy’
[17:45:59.522]   - Field: ‘state’
[17:45:59.522] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:45:59.522] - Launch lazy future ...
[17:45:59.522] Packages needed by the future expression (n = 0): <none>
[17:45:59.522] Packages needed by future strategies (n = 0): <none>
[17:45:59.522] {
[17:45:59.522]     {
[17:45:59.522]         {
[17:45:59.522]             ...future.startTime <- base::Sys.time()
[17:45:59.522]             {
[17:45:59.522]                 {
[17:45:59.522]                   {
[17:45:59.522]                     base::local({
[17:45:59.522]                       has_future <- base::requireNamespace("future", 
[17:45:59.522]                         quietly = TRUE)
[17:45:59.522]                       if (has_future) {
[17:45:59.522]                         ns <- base::getNamespace("future")
[17:45:59.522]                         version <- ns[[".package"]][["version"]]
[17:45:59.522]                         if (is.null(version)) 
[17:45:59.522]                           version <- utils::packageVersion("future")
[17:45:59.522]                       }
[17:45:59.522]                       else {
[17:45:59.522]                         version <- NULL
[17:45:59.522]                       }
[17:45:59.522]                       if (!has_future || version < "1.8.0") {
[17:45:59.522]                         info <- base::c(r_version = base::gsub("R version ", 
[17:45:59.522]                           "", base::R.version$version.string), 
[17:45:59.522]                           platform = base::sprintf("%s (%s-bit)", 
[17:45:59.522]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:45:59.522]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:45:59.522]                             "release", "version")], collapse = " "), 
[17:45:59.522]                           hostname = base::Sys.info()[["nodename"]])
[17:45:59.522]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:45:59.522]                           info)
[17:45:59.522]                         info <- base::paste(info, collapse = "; ")
[17:45:59.522]                         if (!has_future) {
[17:45:59.522]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:45:59.522]                             info)
[17:45:59.522]                         }
[17:45:59.522]                         else {
[17:45:59.522]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:45:59.522]                             info, version)
[17:45:59.522]                         }
[17:45:59.522]                         base::stop(msg)
[17:45:59.522]                       }
[17:45:59.522]                     })
[17:45:59.522]                   }
[17:45:59.522]                   ...future.strategy.old <- future::plan("list")
[17:45:59.522]                   options(future.plan = NULL)
[17:45:59.522]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.522]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:45:59.522]                 }
[17:45:59.522]                 ...future.workdir <- getwd()
[17:45:59.522]             }
[17:45:59.522]             ...future.oldOptions <- base::as.list(base::.Options)
[17:45:59.522]             ...future.oldEnvVars <- base::Sys.getenv()
[17:45:59.522]         }
[17:45:59.522]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:45:59.522]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:45:59.522]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:45:59.522]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:45:59.522]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:45:59.522]             future.stdout.windows.reencode = NULL, width = 80L)
[17:45:59.522]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:45:59.522]             base::names(...future.oldOptions))
[17:45:59.522]     }
[17:45:59.522]     if (FALSE) {
[17:45:59.522]     }
[17:45:59.522]     else {
[17:45:59.522]         if (TRUE) {
[17:45:59.522]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:45:59.522]                 open = "w")
[17:45:59.522]         }
[17:45:59.522]         else {
[17:45:59.522]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:45:59.522]                 windows = "NUL", "/dev/null"), open = "w")
[17:45:59.522]         }
[17:45:59.522]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:45:59.522]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:45:59.522]             base::sink(type = "output", split = FALSE)
[17:45:59.522]             base::close(...future.stdout)
[17:45:59.522]         }, add = TRUE)
[17:45:59.522]     }
[17:45:59.522]     ...future.frame <- base::sys.nframe()
[17:45:59.522]     ...future.conditions <- base::list()
[17:45:59.522]     ...future.rng <- base::globalenv()$.Random.seed
[17:45:59.522]     if (FALSE) {
[17:45:59.522]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:45:59.522]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:45:59.522]     }
[17:45:59.522]     ...future.result <- base::tryCatch({
[17:45:59.522]         base::withCallingHandlers({
[17:45:59.522]             ...future.value <- base::withVisible(base::local({
[17:45:59.522]                 42L
[17:45:59.522]                 stop("Woops")
[17:45:59.522]             }))
[17:45:59.522]             future::FutureResult(value = ...future.value$value, 
[17:45:59.522]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.522]                   ...future.rng), globalenv = if (FALSE) 
[17:45:59.522]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:45:59.522]                     ...future.globalenv.names))
[17:45:59.522]                 else NULL, started = ...future.startTime, version = "1.8")
[17:45:59.522]         }, condition = base::local({
[17:45:59.522]             c <- base::c
[17:45:59.522]             inherits <- base::inherits
[17:45:59.522]             invokeRestart <- base::invokeRestart
[17:45:59.522]             length <- base::length
[17:45:59.522]             list <- base::list
[17:45:59.522]             seq.int <- base::seq.int
[17:45:59.522]             signalCondition <- base::signalCondition
[17:45:59.522]             sys.calls <- base::sys.calls
[17:45:59.522]             `[[` <- base::`[[`
[17:45:59.522]             `+` <- base::`+`
[17:45:59.522]             `<<-` <- base::`<<-`
[17:45:59.522]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:45:59.522]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:45:59.522]                   3L)]
[17:45:59.522]             }
[17:45:59.522]             function(cond) {
[17:45:59.522]                 is_error <- inherits(cond, "error")
[17:45:59.522]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:45:59.522]                   NULL)
[17:45:59.522]                 if (is_error) {
[17:45:59.522]                   sessionInformation <- function() {
[17:45:59.522]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:45:59.522]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:45:59.522]                       search = base::search(), system = base::Sys.info())
[17:45:59.522]                   }
[17:45:59.522]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.522]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:45:59.522]                     cond$call), session = sessionInformation(), 
[17:45:59.522]                     timestamp = base::Sys.time(), signaled = 0L)
[17:45:59.522]                   signalCondition(cond)
[17:45:59.522]                 }
[17:45:59.522]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:45:59.522]                 "immediateCondition"))) {
[17:45:59.522]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:45:59.522]                   ...future.conditions[[length(...future.conditions) + 
[17:45:59.522]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:45:59.522]                   if (TRUE && !signal) {
[17:45:59.522]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.522]                     {
[17:45:59.522]                       inherits <- base::inherits
[17:45:59.522]                       invokeRestart <- base::invokeRestart
[17:45:59.522]                       is.null <- base::is.null
[17:45:59.522]                       muffled <- FALSE
[17:45:59.522]                       if (inherits(cond, "message")) {
[17:45:59.522]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.522]                         if (muffled) 
[17:45:59.522]                           invokeRestart("muffleMessage")
[17:45:59.522]                       }
[17:45:59.522]                       else if (inherits(cond, "warning")) {
[17:45:59.522]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.522]                         if (muffled) 
[17:45:59.522]                           invokeRestart("muffleWarning")
[17:45:59.522]                       }
[17:45:59.522]                       else if (inherits(cond, "condition")) {
[17:45:59.522]                         if (!is.null(pattern)) {
[17:45:59.522]                           computeRestarts <- base::computeRestarts
[17:45:59.522]                           grepl <- base::grepl
[17:45:59.522]                           restarts <- computeRestarts(cond)
[17:45:59.522]                           for (restart in restarts) {
[17:45:59.522]                             name <- restart$name
[17:45:59.522]                             if (is.null(name)) 
[17:45:59.522]                               next
[17:45:59.522]                             if (!grepl(pattern, name)) 
[17:45:59.522]                               next
[17:45:59.522]                             invokeRestart(restart)
[17:45:59.522]                             muffled <- TRUE
[17:45:59.522]                             break
[17:45:59.522]                           }
[17:45:59.522]                         }
[17:45:59.522]                       }
[17:45:59.522]                       invisible(muffled)
[17:45:59.522]                     }
[17:45:59.522]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.522]                   }
[17:45:59.522]                 }
[17:45:59.522]                 else {
[17:45:59.522]                   if (TRUE) {
[17:45:59.522]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:45:59.522]                     {
[17:45:59.522]                       inherits <- base::inherits
[17:45:59.522]                       invokeRestart <- base::invokeRestart
[17:45:59.522]                       is.null <- base::is.null
[17:45:59.522]                       muffled <- FALSE
[17:45:59.522]                       if (inherits(cond, "message")) {
[17:45:59.522]                         muffled <- grepl(pattern, "muffleMessage")
[17:45:59.522]                         if (muffled) 
[17:45:59.522]                           invokeRestart("muffleMessage")
[17:45:59.522]                       }
[17:45:59.522]                       else if (inherits(cond, "warning")) {
[17:45:59.522]                         muffled <- grepl(pattern, "muffleWarning")
[17:45:59.522]                         if (muffled) 
[17:45:59.522]                           invokeRestart("muffleWarning")
[17:45:59.522]                       }
[17:45:59.522]                       else if (inherits(cond, "condition")) {
[17:45:59.522]                         if (!is.null(pattern)) {
[17:45:59.522]                           computeRestarts <- base::computeRestarts
[17:45:59.522]                           grepl <- base::grepl
[17:45:59.522]                           restarts <- computeRestarts(cond)
[17:45:59.522]                           for (restart in restarts) {
[17:45:59.522]                             name <- restart$name
[17:45:59.522]                             if (is.null(name)) 
[17:45:59.522]                               next
[17:45:59.522]                             if (!grepl(pattern, name)) 
[17:45:59.522]                               next
[17:45:59.522]                             invokeRestart(restart)
[17:45:59.522]                             muffled <- TRUE
[17:45:59.522]                             break
[17:45:59.522]                           }
[17:45:59.522]                         }
[17:45:59.522]                       }
[17:45:59.522]                       invisible(muffled)
[17:45:59.522]                     }
[17:45:59.522]                     muffleCondition(cond, pattern = "^muffle")
[17:45:59.522]                   }
[17:45:59.522]                 }
[17:45:59.522]             }
[17:45:59.522]         }))
[17:45:59.522]     }, error = function(ex) {
[17:45:59.522]         base::structure(base::list(value = NULL, visible = NULL, 
[17:45:59.522]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:45:59.522]                 ...future.rng), started = ...future.startTime, 
[17:45:59.522]             finished = Sys.time(), session_uuid = NA_character_, 
[17:45:59.522]             version = "1.8"), class = "FutureResult")
[17:45:59.522]     }, finally = {
[17:45:59.522]         if (!identical(...future.workdir, getwd())) 
[17:45:59.522]             setwd(...future.workdir)
[17:45:59.522]         {
[17:45:59.522]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:45:59.522]                 ...future.oldOptions$nwarnings <- NULL
[17:45:59.522]             }
[17:45:59.522]             base::options(...future.oldOptions)
[17:45:59.522]             if (.Platform$OS.type == "windows") {
[17:45:59.522]                 old_names <- names(...future.oldEnvVars)
[17:45:59.522]                 envs <- base::Sys.getenv()
[17:45:59.522]                 names <- names(envs)
[17:45:59.522]                 common <- intersect(names, old_names)
[17:45:59.522]                 added <- setdiff(names, old_names)
[17:45:59.522]                 removed <- setdiff(old_names, names)
[17:45:59.522]                 changed <- common[...future.oldEnvVars[common] != 
[17:45:59.522]                   envs[common]]
[17:45:59.522]                 NAMES <- toupper(changed)
[17:45:59.522]                 args <- list()
[17:45:59.522]                 for (kk in seq_along(NAMES)) {
[17:45:59.522]                   name <- changed[[kk]]
[17:45:59.522]                   NAME <- NAMES[[kk]]
[17:45:59.522]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.522]                     next
[17:45:59.522]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.522]                 }
[17:45:59.522]                 NAMES <- toupper(added)
[17:45:59.522]                 for (kk in seq_along(NAMES)) {
[17:45:59.522]                   name <- added[[kk]]
[17:45:59.522]                   NAME <- NAMES[[kk]]
[17:45:59.522]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.522]                     next
[17:45:59.522]                   args[[name]] <- ""
[17:45:59.522]                 }
[17:45:59.522]                 NAMES <- toupper(removed)
[17:45:59.522]                 for (kk in seq_along(NAMES)) {
[17:45:59.522]                   name <- removed[[kk]]
[17:45:59.522]                   NAME <- NAMES[[kk]]
[17:45:59.522]                   if (name != NAME && is.element(NAME, old_names)) 
[17:45:59.522]                     next
[17:45:59.522]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:45:59.522]                 }
[17:45:59.522]                 if (length(args) > 0) 
[17:45:59.522]                   base::do.call(base::Sys.setenv, args = args)
[17:45:59.522]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:45:59.522]             }
[17:45:59.522]             else {
[17:45:59.522]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:45:59.522]             }
[17:45:59.522]             {
[17:45:59.522]                 if (base::length(...future.futureOptionsAdded) > 
[17:45:59.522]                   0L) {
[17:45:59.522]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:45:59.522]                   base::names(opts) <- ...future.futureOptionsAdded
[17:45:59.522]                   base::options(opts)
[17:45:59.522]                 }
[17:45:59.522]                 {
[17:45:59.522]                   {
[17:45:59.522]                     NULL
[17:45:59.522]                     RNGkind("Mersenne-Twister")
[17:45:59.522]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:45:59.522]                       inherits = FALSE)
[17:45:59.522]                   }
[17:45:59.522]                   options(future.plan = NULL)
[17:45:59.522]                   if (is.na(NA_character_)) 
[17:45:59.522]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:45:59.522]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:45:59.522]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:45:59.522]                     .init = FALSE)
[17:45:59.522]                 }
[17:45:59.522]             }
[17:45:59.522]         }
[17:45:59.522]     })
[17:45:59.522]     if (TRUE) {
[17:45:59.522]         base::sink(type = "output", split = FALSE)
[17:45:59.522]         if (TRUE) {
[17:45:59.522]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:45:59.522]         }
[17:45:59.522]         else {
[17:45:59.522]             ...future.result["stdout"] <- base::list(NULL)
[17:45:59.522]         }
[17:45:59.522]         base::close(...future.stdout)
[17:45:59.522]         ...future.stdout <- NULL
[17:45:59.522]     }
[17:45:59.522]     ...future.result$conditions <- ...future.conditions
[17:45:59.522]     ...future.result$finished <- base::Sys.time()
[17:45:59.522]     ...future.result
[17:45:59.522] }
[17:45:59.524] plan(): Setting new future strategy stack:
[17:45:59.524] List of future strategies:
[17:45:59.524] 1. sequential:
[17:45:59.524]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.524]    - tweaked: FALSE
[17:45:59.524]    - call: NULL
[17:45:59.525] plan(): nbrOfWorkers() = 1
[17:45:59.525] plan(): Setting new future strategy stack:
[17:45:59.525] List of future strategies:
[17:45:59.525] 1. sequential:
[17:45:59.525]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:45:59.525]    - tweaked: FALSE
[17:45:59.525]    - call: future::plan("sequential")
[17:45:59.526] plan(): nbrOfWorkers() = 1
[17:45:59.526] SequentialFuture started (and completed)
[17:45:59.526] signalConditions() ...
[17:45:59.526]  - include = ‘immediateCondition’
[17:45:59.526]  - exclude = 
[17:45:59.526]  - resignal = FALSE
[17:45:59.526]  - Number of conditions: 1
[17:45:59.527] signalConditions() ... done
[17:45:59.527] - Launch lazy future ... done
[17:45:59.527] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[17:45:59.527] signalConditions() ...
[17:45:59.527]  - include = ‘immediateCondition’
[17:45:59.527]  - exclude = 
[17:45:59.527]  - resignal = FALSE
[17:45:59.527]  - Number of conditions: 1
[17:45:59.527] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[17:45:59.533] plan(): Setting new future strategy stack:
[17:45:59.533] List of future strategies:
[17:45:59.533] 1. multisession:
[17:45:59.533]    - args: function (..., workers = 2L, envir = parent.frame())
[17:45:59.533]    - tweaked: TRUE
[17:45:59.533]    - call: plan(multisession, workers = 2L)
[17:45:59.545] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:45:59.546] multisession:
[17:45:59.546] - args: function (..., workers = 2L, envir = parent.frame())
[17:45:59.546] - tweaked: TRUE
[17:45:59.546] - call: plan(multisession, workers = 2L)
[17:45:59.546] getGlobalsAndPackages() ...
[17:45:59.546] Not searching for globals
[17:45:59.546] - globals: [0] <none>
[17:45:59.547] getGlobalsAndPackages() ... DONE
[17:45:59.547] [local output] makeClusterPSOCK() ...
[17:45:59.581] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:45:59.582] [local output] Base port: 11222
[17:45:59.582] [local output] Getting setup options for 2 cluster nodes ...
[17:45:59.582] [local output]  - Node 1 of 2 ...
[17:45:59.582] [local output] localMachine=TRUE => revtunnel=FALSE

[17:45:59.583] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp2P7bDV/worker.rank=1.parallelly.parent=38804.97943a496881.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp2P7bDV/worker.rank=1.parallelly.parent=38804.97943a496881.pid")'’
[17:45:59.770] - Possible to infer worker's PID: TRUE
[17:45:59.771] [local output] Rscript port: 11222

[17:45:59.771] [local output]  - Node 2 of 2 ...
[17:45:59.771] [local output] localMachine=TRUE => revtunnel=FALSE

[17:45:59.772] [local output] Rscript port: 11222

[17:45:59.772] [local output] Getting setup options for 2 cluster nodes ... done
[17:45:59.772] [local output]  - Parallel setup requested for some PSOCK nodes
[17:45:59.773] [local output] Setting up PSOCK nodes in parallel
[17:45:59.773] List of 36
[17:45:59.773]  $ worker          : chr "localhost"
[17:45:59.773]   ..- attr(*, "localhost")= logi TRUE
[17:45:59.773]  $ master          : chr "localhost"
[17:45:59.773]  $ port            : int 11222
[17:45:59.773]  $ connectTimeout  : num 120
[17:45:59.773]  $ timeout         : num 2592000
[17:45:59.773]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:45:59.773]  $ homogeneous     : logi TRUE
[17:45:59.773]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:45:59.773]  $ rscript_envs    : NULL
[17:45:59.773]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:45:59.773]  $ rscript_startup : NULL
[17:45:59.773]  $ rscript_sh      : chr "sh"
[17:45:59.773]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:45:59.773]  $ methods         : logi TRUE
[17:45:59.773]  $ socketOptions   : chr "no-delay"
[17:45:59.773]  $ useXDR          : logi FALSE
[17:45:59.773]  $ outfile         : chr "/dev/null"
[17:45:59.773]  $ renice          : int NA
[17:45:59.773]  $ rshcmd          : NULL
[17:45:59.773]  $ user            : chr(0) 
[17:45:59.773]  $ revtunnel       : logi FALSE
[17:45:59.773]  $ rshlogfile      : NULL
[17:45:59.773]  $ rshopts         : chr(0) 
[17:45:59.773]  $ rank            : int 1
[17:45:59.773]  $ manual          : logi FALSE
[17:45:59.773]  $ dryrun          : logi FALSE
[17:45:59.773]  $ quiet           : logi FALSE
[17:45:59.773]  $ setup_strategy  : chr "parallel"
[17:45:59.773]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:45:59.773]  $ pidfile         : chr "/tmp/Rtmp2P7bDV/worker.rank=1.parallelly.parent=38804.97943a496881.pid"
[17:45:59.773]  $ rshcmd_label    : NULL
[17:45:59.773]  $ rsh_call        : NULL
[17:45:59.773]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:45:59.773]  $ localMachine    : logi TRUE
[17:45:59.773]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:45:59.773]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:45:59.773]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:45:59.773]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:45:59.773]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:45:59.773]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:45:59.773]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:45:59.773]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:45:59.773]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:45:59.773]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:45:59.773]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:45:59.773]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:45:59.773]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:45:59.773]  $ arguments       :List of 28
[17:45:59.773]   ..$ worker          : chr "localhost"
[17:45:59.773]   ..$ master          : NULL
[17:45:59.773]   ..$ port            : int 11222
[17:45:59.773]   ..$ connectTimeout  : num 120
[17:45:59.773]   ..$ timeout         : num 2592000
[17:45:59.773]   ..$ rscript         : NULL
[17:45:59.773]   ..$ homogeneous     : NULL
[17:45:59.773]   ..$ rscript_args    : NULL
[17:45:59.773]   ..$ rscript_envs    : NULL
[17:45:59.773]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:45:59.773]   ..$ rscript_startup : NULL
[17:45:59.773]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:45:59.773]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:45:59.773]   ..$ methods         : logi TRUE
[17:45:59.773]   ..$ socketOptions   : chr "no-delay"
[17:45:59.773]   ..$ useXDR          : logi FALSE
[17:45:59.773]   ..$ outfile         : chr "/dev/null"
[17:45:59.773]   ..$ renice          : int NA
[17:45:59.773]   ..$ rshcmd          : NULL
[17:45:59.773]   ..$ user            : NULL
[17:45:59.773]   ..$ revtunnel       : logi NA
[17:45:59.773]   ..$ rshlogfile      : NULL
[17:45:59.773]   ..$ rshopts         : NULL
[17:45:59.773]   ..$ rank            : int 1
[17:45:59.773]   ..$ manual          : logi FALSE
[17:45:59.773]   ..$ dryrun          : logi FALSE
[17:45:59.773]   ..$ quiet           : logi FALSE
[17:45:59.773]   ..$ setup_strategy  : chr "parallel"
[17:45:59.773]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:45:59.791] [local output] System call to launch all workers:
[17:45:59.791] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp2P7bDV/worker.rank=1.parallelly.parent=38804.97943a496881.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11222 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:45:59.791] [local output] Starting PSOCK main server
[17:45:59.797] [local output] Workers launched
[17:45:59.797] [local output] Waiting for workers to connect back
[17:45:59.797]  - [local output] 0 workers out of 2 ready
[17:46:00.039]  - [local output] 0 workers out of 2 ready
[17:46:00.039]  - [local output] 1 workers out of 2 ready
[17:46:00.040]  - [local output] 1 workers out of 2 ready
[17:46:00.041]  - [local output] 2 workers out of 2 ready
[17:46:00.041] [local output] Launching of workers completed
[17:46:00.041] [local output] Collecting session information from workers
[17:46:00.042] [local output]  - Worker #1 of 2
[17:46:00.042] [local output]  - Worker #2 of 2
[17:46:00.043] [local output] makeClusterPSOCK() ... done
[17:46:00.055] Packages needed by the future expression (n = 0): <none>
[17:46:00.055] Packages needed by future strategies (n = 0): <none>
[17:46:00.055] {
[17:46:00.055]     {
[17:46:00.055]         {
[17:46:00.055]             ...future.startTime <- base::Sys.time()
[17:46:00.055]             {
[17:46:00.055]                 {
[17:46:00.055]                   {
[17:46:00.055]                     {
[17:46:00.055]                       base::local({
[17:46:00.055]                         has_future <- base::requireNamespace("future", 
[17:46:00.055]                           quietly = TRUE)
[17:46:00.055]                         if (has_future) {
[17:46:00.055]                           ns <- base::getNamespace("future")
[17:46:00.055]                           version <- ns[[".package"]][["version"]]
[17:46:00.055]                           if (is.null(version)) 
[17:46:00.055]                             version <- utils::packageVersion("future")
[17:46:00.055]                         }
[17:46:00.055]                         else {
[17:46:00.055]                           version <- NULL
[17:46:00.055]                         }
[17:46:00.055]                         if (!has_future || version < "1.8.0") {
[17:46:00.055]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:00.055]                             "", base::R.version$version.string), 
[17:46:00.055]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:00.055]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:00.055]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:00.055]                               "release", "version")], collapse = " "), 
[17:46:00.055]                             hostname = base::Sys.info()[["nodename"]])
[17:46:00.055]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:00.055]                             info)
[17:46:00.055]                           info <- base::paste(info, collapse = "; ")
[17:46:00.055]                           if (!has_future) {
[17:46:00.055]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:00.055]                               info)
[17:46:00.055]                           }
[17:46:00.055]                           else {
[17:46:00.055]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:00.055]                               info, version)
[17:46:00.055]                           }
[17:46:00.055]                           base::stop(msg)
[17:46:00.055]                         }
[17:46:00.055]                       })
[17:46:00.055]                     }
[17:46:00.055]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:00.055]                     base::options(mc.cores = 1L)
[17:46:00.055]                   }
[17:46:00.055]                   ...future.strategy.old <- future::plan("list")
[17:46:00.055]                   options(future.plan = NULL)
[17:46:00.055]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:00.055]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:00.055]                 }
[17:46:00.055]                 ...future.workdir <- getwd()
[17:46:00.055]             }
[17:46:00.055]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:00.055]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:00.055]         }
[17:46:00.055]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:00.055]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:00.055]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:00.055]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:00.055]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:00.055]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:00.055]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:00.055]             base::names(...future.oldOptions))
[17:46:00.055]     }
[17:46:00.055]     if (FALSE) {
[17:46:00.055]     }
[17:46:00.055]     else {
[17:46:00.055]         if (TRUE) {
[17:46:00.055]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:00.055]                 open = "w")
[17:46:00.055]         }
[17:46:00.055]         else {
[17:46:00.055]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:00.055]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:00.055]         }
[17:46:00.055]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:00.055]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:00.055]             base::sink(type = "output", split = FALSE)
[17:46:00.055]             base::close(...future.stdout)
[17:46:00.055]         }, add = TRUE)
[17:46:00.055]     }
[17:46:00.055]     ...future.frame <- base::sys.nframe()
[17:46:00.055]     ...future.conditions <- base::list()
[17:46:00.055]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:00.055]     if (FALSE) {
[17:46:00.055]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:00.055]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:00.055]     }
[17:46:00.055]     ...future.result <- base::tryCatch({
[17:46:00.055]         base::withCallingHandlers({
[17:46:00.055]             ...future.value <- base::withVisible(base::local({
[17:46:00.055]                 ...future.makeSendCondition <- base::local({
[17:46:00.055]                   sendCondition <- NULL
[17:46:00.055]                   function(frame = 1L) {
[17:46:00.055]                     if (is.function(sendCondition)) 
[17:46:00.055]                       return(sendCondition)
[17:46:00.055]                     ns <- getNamespace("parallel")
[17:46:00.055]                     if (exists("sendData", mode = "function", 
[17:46:00.055]                       envir = ns)) {
[17:46:00.055]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:00.055]                         envir = ns)
[17:46:00.055]                       envir <- sys.frame(frame)
[17:46:00.055]                       master <- NULL
[17:46:00.055]                       while (!identical(envir, .GlobalEnv) && 
[17:46:00.055]                         !identical(envir, emptyenv())) {
[17:46:00.055]                         if (exists("master", mode = "list", envir = envir, 
[17:46:00.055]                           inherits = FALSE)) {
[17:46:00.055]                           master <- get("master", mode = "list", 
[17:46:00.055]                             envir = envir, inherits = FALSE)
[17:46:00.055]                           if (inherits(master, c("SOCKnode", 
[17:46:00.055]                             "SOCK0node"))) {
[17:46:00.055]                             sendCondition <<- function(cond) {
[17:46:00.055]                               data <- list(type = "VALUE", value = cond, 
[17:46:00.055]                                 success = TRUE)
[17:46:00.055]                               parallel_sendData(master, data)
[17:46:00.055]                             }
[17:46:00.055]                             return(sendCondition)
[17:46:00.055]                           }
[17:46:00.055]                         }
[17:46:00.055]                         frame <- frame + 1L
[17:46:00.055]                         envir <- sys.frame(frame)
[17:46:00.055]                       }
[17:46:00.055]                     }
[17:46:00.055]                     sendCondition <<- function(cond) NULL
[17:46:00.055]                   }
[17:46:00.055]                 })
[17:46:00.055]                 withCallingHandlers({
[17:46:00.055]                   NA
[17:46:00.055]                 }, immediateCondition = function(cond) {
[17:46:00.055]                   sendCondition <- ...future.makeSendCondition()
[17:46:00.055]                   sendCondition(cond)
[17:46:00.055]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:00.055]                   {
[17:46:00.055]                     inherits <- base::inherits
[17:46:00.055]                     invokeRestart <- base::invokeRestart
[17:46:00.055]                     is.null <- base::is.null
[17:46:00.055]                     muffled <- FALSE
[17:46:00.055]                     if (inherits(cond, "message")) {
[17:46:00.055]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:00.055]                       if (muffled) 
[17:46:00.055]                         invokeRestart("muffleMessage")
[17:46:00.055]                     }
[17:46:00.055]                     else if (inherits(cond, "warning")) {
[17:46:00.055]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:00.055]                       if (muffled) 
[17:46:00.055]                         invokeRestart("muffleWarning")
[17:46:00.055]                     }
[17:46:00.055]                     else if (inherits(cond, "condition")) {
[17:46:00.055]                       if (!is.null(pattern)) {
[17:46:00.055]                         computeRestarts <- base::computeRestarts
[17:46:00.055]                         grepl <- base::grepl
[17:46:00.055]                         restarts <- computeRestarts(cond)
[17:46:00.055]                         for (restart in restarts) {
[17:46:00.055]                           name <- restart$name
[17:46:00.055]                           if (is.null(name)) 
[17:46:00.055]                             next
[17:46:00.055]                           if (!grepl(pattern, name)) 
[17:46:00.055]                             next
[17:46:00.055]                           invokeRestart(restart)
[17:46:00.055]                           muffled <- TRUE
[17:46:00.055]                           break
[17:46:00.055]                         }
[17:46:00.055]                       }
[17:46:00.055]                     }
[17:46:00.055]                     invisible(muffled)
[17:46:00.055]                   }
[17:46:00.055]                   muffleCondition(cond)
[17:46:00.055]                 })
[17:46:00.055]             }))
[17:46:00.055]             future::FutureResult(value = ...future.value$value, 
[17:46:00.055]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:00.055]                   ...future.rng), globalenv = if (FALSE) 
[17:46:00.055]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:00.055]                     ...future.globalenv.names))
[17:46:00.055]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:00.055]         }, condition = base::local({
[17:46:00.055]             c <- base::c
[17:46:00.055]             inherits <- base::inherits
[17:46:00.055]             invokeRestart <- base::invokeRestart
[17:46:00.055]             length <- base::length
[17:46:00.055]             list <- base::list
[17:46:00.055]             seq.int <- base::seq.int
[17:46:00.055]             signalCondition <- base::signalCondition
[17:46:00.055]             sys.calls <- base::sys.calls
[17:46:00.055]             `[[` <- base::`[[`
[17:46:00.055]             `+` <- base::`+`
[17:46:00.055]             `<<-` <- base::`<<-`
[17:46:00.055]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:00.055]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:00.055]                   3L)]
[17:46:00.055]             }
[17:46:00.055]             function(cond) {
[17:46:00.055]                 is_error <- inherits(cond, "error")
[17:46:00.055]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:00.055]                   NULL)
[17:46:00.055]                 if (is_error) {
[17:46:00.055]                   sessionInformation <- function() {
[17:46:00.055]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:00.055]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:00.055]                       search = base::search(), system = base::Sys.info())
[17:46:00.055]                   }
[17:46:00.055]                   ...future.conditions[[length(...future.conditions) + 
[17:46:00.055]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:00.055]                     cond$call), session = sessionInformation(), 
[17:46:00.055]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:00.055]                   signalCondition(cond)
[17:46:00.055]                 }
[17:46:00.055]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:00.055]                 "immediateCondition"))) {
[17:46:00.055]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:00.055]                   ...future.conditions[[length(...future.conditions) + 
[17:46:00.055]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:00.055]                   if (TRUE && !signal) {
[17:46:00.055]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:00.055]                     {
[17:46:00.055]                       inherits <- base::inherits
[17:46:00.055]                       invokeRestart <- base::invokeRestart
[17:46:00.055]                       is.null <- base::is.null
[17:46:00.055]                       muffled <- FALSE
[17:46:00.055]                       if (inherits(cond, "message")) {
[17:46:00.055]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:00.055]                         if (muffled) 
[17:46:00.055]                           invokeRestart("muffleMessage")
[17:46:00.055]                       }
[17:46:00.055]                       else if (inherits(cond, "warning")) {
[17:46:00.055]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:00.055]                         if (muffled) 
[17:46:00.055]                           invokeRestart("muffleWarning")
[17:46:00.055]                       }
[17:46:00.055]                       else if (inherits(cond, "condition")) {
[17:46:00.055]                         if (!is.null(pattern)) {
[17:46:00.055]                           computeRestarts <- base::computeRestarts
[17:46:00.055]                           grepl <- base::grepl
[17:46:00.055]                           restarts <- computeRestarts(cond)
[17:46:00.055]                           for (restart in restarts) {
[17:46:00.055]                             name <- restart$name
[17:46:00.055]                             if (is.null(name)) 
[17:46:00.055]                               next
[17:46:00.055]                             if (!grepl(pattern, name)) 
[17:46:00.055]                               next
[17:46:00.055]                             invokeRestart(restart)
[17:46:00.055]                             muffled <- TRUE
[17:46:00.055]                             break
[17:46:00.055]                           }
[17:46:00.055]                         }
[17:46:00.055]                       }
[17:46:00.055]                       invisible(muffled)
[17:46:00.055]                     }
[17:46:00.055]                     muffleCondition(cond, pattern = "^muffle")
[17:46:00.055]                   }
[17:46:00.055]                 }
[17:46:00.055]                 else {
[17:46:00.055]                   if (TRUE) {
[17:46:00.055]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:00.055]                     {
[17:46:00.055]                       inherits <- base::inherits
[17:46:00.055]                       invokeRestart <- base::invokeRestart
[17:46:00.055]                       is.null <- base::is.null
[17:46:00.055]                       muffled <- FALSE
[17:46:00.055]                       if (inherits(cond, "message")) {
[17:46:00.055]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:00.055]                         if (muffled) 
[17:46:00.055]                           invokeRestart("muffleMessage")
[17:46:00.055]                       }
[17:46:00.055]                       else if (inherits(cond, "warning")) {
[17:46:00.055]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:00.055]                         if (muffled) 
[17:46:00.055]                           invokeRestart("muffleWarning")
[17:46:00.055]                       }
[17:46:00.055]                       else if (inherits(cond, "condition")) {
[17:46:00.055]                         if (!is.null(pattern)) {
[17:46:00.055]                           computeRestarts <- base::computeRestarts
[17:46:00.055]                           grepl <- base::grepl
[17:46:00.055]                           restarts <- computeRestarts(cond)
[17:46:00.055]                           for (restart in restarts) {
[17:46:00.055]                             name <- restart$name
[17:46:00.055]                             if (is.null(name)) 
[17:46:00.055]                               next
[17:46:00.055]                             if (!grepl(pattern, name)) 
[17:46:00.055]                               next
[17:46:00.055]                             invokeRestart(restart)
[17:46:00.055]                             muffled <- TRUE
[17:46:00.055]                             break
[17:46:00.055]                           }
[17:46:00.055]                         }
[17:46:00.055]                       }
[17:46:00.055]                       invisible(muffled)
[17:46:00.055]                     }
[17:46:00.055]                     muffleCondition(cond, pattern = "^muffle")
[17:46:00.055]                   }
[17:46:00.055]                 }
[17:46:00.055]             }
[17:46:00.055]         }))
[17:46:00.055]     }, error = function(ex) {
[17:46:00.055]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:00.055]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:00.055]                 ...future.rng), started = ...future.startTime, 
[17:46:00.055]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:00.055]             version = "1.8"), class = "FutureResult")
[17:46:00.055]     }, finally = {
[17:46:00.055]         if (!identical(...future.workdir, getwd())) 
[17:46:00.055]             setwd(...future.workdir)
[17:46:00.055]         {
[17:46:00.055]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:00.055]                 ...future.oldOptions$nwarnings <- NULL
[17:46:00.055]             }
[17:46:00.055]             base::options(...future.oldOptions)
[17:46:00.055]             if (.Platform$OS.type == "windows") {
[17:46:00.055]                 old_names <- names(...future.oldEnvVars)
[17:46:00.055]                 envs <- base::Sys.getenv()
[17:46:00.055]                 names <- names(envs)
[17:46:00.055]                 common <- intersect(names, old_names)
[17:46:00.055]                 added <- setdiff(names, old_names)
[17:46:00.055]                 removed <- setdiff(old_names, names)
[17:46:00.055]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:00.055]                   envs[common]]
[17:46:00.055]                 NAMES <- toupper(changed)
[17:46:00.055]                 args <- list()
[17:46:00.055]                 for (kk in seq_along(NAMES)) {
[17:46:00.055]                   name <- changed[[kk]]
[17:46:00.055]                   NAME <- NAMES[[kk]]
[17:46:00.055]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:00.055]                     next
[17:46:00.055]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:00.055]                 }
[17:46:00.055]                 NAMES <- toupper(added)
[17:46:00.055]                 for (kk in seq_along(NAMES)) {
[17:46:00.055]                   name <- added[[kk]]
[17:46:00.055]                   NAME <- NAMES[[kk]]
[17:46:00.055]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:00.055]                     next
[17:46:00.055]                   args[[name]] <- ""
[17:46:00.055]                 }
[17:46:00.055]                 NAMES <- toupper(removed)
[17:46:00.055]                 for (kk in seq_along(NAMES)) {
[17:46:00.055]                   name <- removed[[kk]]
[17:46:00.055]                   NAME <- NAMES[[kk]]
[17:46:00.055]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:00.055]                     next
[17:46:00.055]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:00.055]                 }
[17:46:00.055]                 if (length(args) > 0) 
[17:46:00.055]                   base::do.call(base::Sys.setenv, args = args)
[17:46:00.055]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:00.055]             }
[17:46:00.055]             else {
[17:46:00.055]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:00.055]             }
[17:46:00.055]             {
[17:46:00.055]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:00.055]                   0L) {
[17:46:00.055]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:00.055]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:00.055]                   base::options(opts)
[17:46:00.055]                 }
[17:46:00.055]                 {
[17:46:00.055]                   {
[17:46:00.055]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:00.055]                     NULL
[17:46:00.055]                   }
[17:46:00.055]                   options(future.plan = NULL)
[17:46:00.055]                   if (is.na(NA_character_)) 
[17:46:00.055]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:00.055]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:00.055]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:00.055]                     .init = FALSE)
[17:46:00.055]                 }
[17:46:00.055]             }
[17:46:00.055]         }
[17:46:00.055]     })
[17:46:00.055]     if (TRUE) {
[17:46:00.055]         base::sink(type = "output", split = FALSE)
[17:46:00.055]         if (TRUE) {
[17:46:00.055]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:00.055]         }
[17:46:00.055]         else {
[17:46:00.055]             ...future.result["stdout"] <- base::list(NULL)
[17:46:00.055]         }
[17:46:00.055]         base::close(...future.stdout)
[17:46:00.055]         ...future.stdout <- NULL
[17:46:00.055]     }
[17:46:00.055]     ...future.result$conditions <- ...future.conditions
[17:46:00.055]     ...future.result$finished <- base::Sys.time()
[17:46:00.055]     ...future.result
[17:46:00.055] }
[17:46:00.107] MultisessionFuture started
[17:46:00.108] result() for ClusterFuture ...
[17:46:00.108] receiveMessageFromWorker() for ClusterFuture ...
[17:46:00.109] - Validating connection of MultisessionFuture
[17:46:00.140] - received message: FutureResult
[17:46:00.140] - Received FutureResult
[17:46:00.143] - Erased future from FutureRegistry
[17:46:00.143] result() for ClusterFuture ...
[17:46:00.143] - result already collected: FutureResult
[17:46:00.144] result() for ClusterFuture ... done
[17:46:00.144] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:00.144] result() for ClusterFuture ... done
[17:46:00.144] result() for ClusterFuture ...
[17:46:00.144] - result already collected: FutureResult
[17:46:00.144] result() for ClusterFuture ... done
[17:46:00.144] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:46:00.145] plan(): nbrOfWorkers() = 2
[17:46:00.145] getGlobalsAndPackages() ...
[17:46:00.145] Searching for globals...
[17:46:00.146] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[17:46:00.147] Searching for globals ... DONE
[17:46:00.147] Resolving globals: FALSE
[17:46:00.147] 
[17:46:00.147] 
[17:46:00.147] getGlobalsAndPackages() ... DONE
[17:46:00.148] run() for ‘Future’ ...
[17:46:00.148] - state: ‘created’
[17:46:00.148] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:00.159] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:00.159] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:00.159]   - Field: ‘node’
[17:46:00.159]   - Field: ‘label’
[17:46:00.159]   - Field: ‘local’
[17:46:00.159]   - Field: ‘owner’
[17:46:00.159]   - Field: ‘envir’
[17:46:00.159]   - Field: ‘workers’
[17:46:00.160]   - Field: ‘packages’
[17:46:00.160]   - Field: ‘gc’
[17:46:00.160]   - Field: ‘conditions’
[17:46:00.160]   - Field: ‘persistent’
[17:46:00.160]   - Field: ‘expr’
[17:46:00.160]   - Field: ‘uuid’
[17:46:00.160]   - Field: ‘seed’
[17:46:00.160]   - Field: ‘version’
[17:46:00.161]   - Field: ‘result’
[17:46:00.161]   - Field: ‘asynchronous’
[17:46:00.161]   - Field: ‘calls’
[17:46:00.161]   - Field: ‘globals’
[17:46:00.161]   - Field: ‘stdout’
[17:46:00.161]   - Field: ‘earlySignal’
[17:46:00.161]   - Field: ‘lazy’
[17:46:00.161]   - Field: ‘state’
[17:46:00.161] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:00.162] - Launch lazy future ...
[17:46:00.162] Packages needed by the future expression (n = 0): <none>
[17:46:00.162] Packages needed by future strategies (n = 0): <none>
[17:46:00.162] {
[17:46:00.162]     {
[17:46:00.162]         {
[17:46:00.162]             ...future.startTime <- base::Sys.time()
[17:46:00.162]             {
[17:46:00.162]                 {
[17:46:00.162]                   {
[17:46:00.162]                     {
[17:46:00.162]                       base::local({
[17:46:00.162]                         has_future <- base::requireNamespace("future", 
[17:46:00.162]                           quietly = TRUE)
[17:46:00.162]                         if (has_future) {
[17:46:00.162]                           ns <- base::getNamespace("future")
[17:46:00.162]                           version <- ns[[".package"]][["version"]]
[17:46:00.162]                           if (is.null(version)) 
[17:46:00.162]                             version <- utils::packageVersion("future")
[17:46:00.162]                         }
[17:46:00.162]                         else {
[17:46:00.162]                           version <- NULL
[17:46:00.162]                         }
[17:46:00.162]                         if (!has_future || version < "1.8.0") {
[17:46:00.162]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:00.162]                             "", base::R.version$version.string), 
[17:46:00.162]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:00.162]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:00.162]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:00.162]                               "release", "version")], collapse = " "), 
[17:46:00.162]                             hostname = base::Sys.info()[["nodename"]])
[17:46:00.162]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:00.162]                             info)
[17:46:00.162]                           info <- base::paste(info, collapse = "; ")
[17:46:00.162]                           if (!has_future) {
[17:46:00.162]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:00.162]                               info)
[17:46:00.162]                           }
[17:46:00.162]                           else {
[17:46:00.162]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:00.162]                               info, version)
[17:46:00.162]                           }
[17:46:00.162]                           base::stop(msg)
[17:46:00.162]                         }
[17:46:00.162]                       })
[17:46:00.162]                     }
[17:46:00.162]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:00.162]                     base::options(mc.cores = 1L)
[17:46:00.162]                   }
[17:46:00.162]                   ...future.strategy.old <- future::plan("list")
[17:46:00.162]                   options(future.plan = NULL)
[17:46:00.162]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:00.162]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:00.162]                 }
[17:46:00.162]                 ...future.workdir <- getwd()
[17:46:00.162]             }
[17:46:00.162]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:00.162]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:00.162]         }
[17:46:00.162]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:00.162]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:00.162]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:00.162]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:00.162]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:00.162]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:00.162]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:00.162]             base::names(...future.oldOptions))
[17:46:00.162]     }
[17:46:00.162]     if (FALSE) {
[17:46:00.162]     }
[17:46:00.162]     else {
[17:46:00.162]         if (TRUE) {
[17:46:00.162]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:00.162]                 open = "w")
[17:46:00.162]         }
[17:46:00.162]         else {
[17:46:00.162]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:00.162]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:00.162]         }
[17:46:00.162]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:00.162]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:00.162]             base::sink(type = "output", split = FALSE)
[17:46:00.162]             base::close(...future.stdout)
[17:46:00.162]         }, add = TRUE)
[17:46:00.162]     }
[17:46:00.162]     ...future.frame <- base::sys.nframe()
[17:46:00.162]     ...future.conditions <- base::list()
[17:46:00.162]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:00.162]     if (FALSE) {
[17:46:00.162]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:00.162]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:00.162]     }
[17:46:00.162]     ...future.result <- base::tryCatch({
[17:46:00.162]         base::withCallingHandlers({
[17:46:00.162]             ...future.value <- base::withVisible(base::local({
[17:46:00.162]                 ...future.makeSendCondition <- base::local({
[17:46:00.162]                   sendCondition <- NULL
[17:46:00.162]                   function(frame = 1L) {
[17:46:00.162]                     if (is.function(sendCondition)) 
[17:46:00.162]                       return(sendCondition)
[17:46:00.162]                     ns <- getNamespace("parallel")
[17:46:00.162]                     if (exists("sendData", mode = "function", 
[17:46:00.162]                       envir = ns)) {
[17:46:00.162]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:00.162]                         envir = ns)
[17:46:00.162]                       envir <- sys.frame(frame)
[17:46:00.162]                       master <- NULL
[17:46:00.162]                       while (!identical(envir, .GlobalEnv) && 
[17:46:00.162]                         !identical(envir, emptyenv())) {
[17:46:00.162]                         if (exists("master", mode = "list", envir = envir, 
[17:46:00.162]                           inherits = FALSE)) {
[17:46:00.162]                           master <- get("master", mode = "list", 
[17:46:00.162]                             envir = envir, inherits = FALSE)
[17:46:00.162]                           if (inherits(master, c("SOCKnode", 
[17:46:00.162]                             "SOCK0node"))) {
[17:46:00.162]                             sendCondition <<- function(cond) {
[17:46:00.162]                               data <- list(type = "VALUE", value = cond, 
[17:46:00.162]                                 success = TRUE)
[17:46:00.162]                               parallel_sendData(master, data)
[17:46:00.162]                             }
[17:46:00.162]                             return(sendCondition)
[17:46:00.162]                           }
[17:46:00.162]                         }
[17:46:00.162]                         frame <- frame + 1L
[17:46:00.162]                         envir <- sys.frame(frame)
[17:46:00.162]                       }
[17:46:00.162]                     }
[17:46:00.162]                     sendCondition <<- function(cond) NULL
[17:46:00.162]                   }
[17:46:00.162]                 })
[17:46:00.162]                 withCallingHandlers({
[17:46:00.162]                   {
[17:46:00.162]                     Sys.sleep(3)
[17:46:00.162]                     42L
[17:46:00.162]                     stop("Woops")
[17:46:00.162]                   }
[17:46:00.162]                 }, immediateCondition = function(cond) {
[17:46:00.162]                   sendCondition <- ...future.makeSendCondition()
[17:46:00.162]                   sendCondition(cond)
[17:46:00.162]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:00.162]                   {
[17:46:00.162]                     inherits <- base::inherits
[17:46:00.162]                     invokeRestart <- base::invokeRestart
[17:46:00.162]                     is.null <- base::is.null
[17:46:00.162]                     muffled <- FALSE
[17:46:00.162]                     if (inherits(cond, "message")) {
[17:46:00.162]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:00.162]                       if (muffled) 
[17:46:00.162]                         invokeRestart("muffleMessage")
[17:46:00.162]                     }
[17:46:00.162]                     else if (inherits(cond, "warning")) {
[17:46:00.162]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:00.162]                       if (muffled) 
[17:46:00.162]                         invokeRestart("muffleWarning")
[17:46:00.162]                     }
[17:46:00.162]                     else if (inherits(cond, "condition")) {
[17:46:00.162]                       if (!is.null(pattern)) {
[17:46:00.162]                         computeRestarts <- base::computeRestarts
[17:46:00.162]                         grepl <- base::grepl
[17:46:00.162]                         restarts <- computeRestarts(cond)
[17:46:00.162]                         for (restart in restarts) {
[17:46:00.162]                           name <- restart$name
[17:46:00.162]                           if (is.null(name)) 
[17:46:00.162]                             next
[17:46:00.162]                           if (!grepl(pattern, name)) 
[17:46:00.162]                             next
[17:46:00.162]                           invokeRestart(restart)
[17:46:00.162]                           muffled <- TRUE
[17:46:00.162]                           break
[17:46:00.162]                         }
[17:46:00.162]                       }
[17:46:00.162]                     }
[17:46:00.162]                     invisible(muffled)
[17:46:00.162]                   }
[17:46:00.162]                   muffleCondition(cond)
[17:46:00.162]                 })
[17:46:00.162]             }))
[17:46:00.162]             future::FutureResult(value = ...future.value$value, 
[17:46:00.162]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:00.162]                   ...future.rng), globalenv = if (FALSE) 
[17:46:00.162]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:00.162]                     ...future.globalenv.names))
[17:46:00.162]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:00.162]         }, condition = base::local({
[17:46:00.162]             c <- base::c
[17:46:00.162]             inherits <- base::inherits
[17:46:00.162]             invokeRestart <- base::invokeRestart
[17:46:00.162]             length <- base::length
[17:46:00.162]             list <- base::list
[17:46:00.162]             seq.int <- base::seq.int
[17:46:00.162]             signalCondition <- base::signalCondition
[17:46:00.162]             sys.calls <- base::sys.calls
[17:46:00.162]             `[[` <- base::`[[`
[17:46:00.162]             `+` <- base::`+`
[17:46:00.162]             `<<-` <- base::`<<-`
[17:46:00.162]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:00.162]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:00.162]                   3L)]
[17:46:00.162]             }
[17:46:00.162]             function(cond) {
[17:46:00.162]                 is_error <- inherits(cond, "error")
[17:46:00.162]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:00.162]                   NULL)
[17:46:00.162]                 if (is_error) {
[17:46:00.162]                   sessionInformation <- function() {
[17:46:00.162]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:00.162]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:00.162]                       search = base::search(), system = base::Sys.info())
[17:46:00.162]                   }
[17:46:00.162]                   ...future.conditions[[length(...future.conditions) + 
[17:46:00.162]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:00.162]                     cond$call), session = sessionInformation(), 
[17:46:00.162]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:00.162]                   signalCondition(cond)
[17:46:00.162]                 }
[17:46:00.162]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:00.162]                 "immediateCondition"))) {
[17:46:00.162]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:00.162]                   ...future.conditions[[length(...future.conditions) + 
[17:46:00.162]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:00.162]                   if (TRUE && !signal) {
[17:46:00.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:00.162]                     {
[17:46:00.162]                       inherits <- base::inherits
[17:46:00.162]                       invokeRestart <- base::invokeRestart
[17:46:00.162]                       is.null <- base::is.null
[17:46:00.162]                       muffled <- FALSE
[17:46:00.162]                       if (inherits(cond, "message")) {
[17:46:00.162]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:00.162]                         if (muffled) 
[17:46:00.162]                           invokeRestart("muffleMessage")
[17:46:00.162]                       }
[17:46:00.162]                       else if (inherits(cond, "warning")) {
[17:46:00.162]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:00.162]                         if (muffled) 
[17:46:00.162]                           invokeRestart("muffleWarning")
[17:46:00.162]                       }
[17:46:00.162]                       else if (inherits(cond, "condition")) {
[17:46:00.162]                         if (!is.null(pattern)) {
[17:46:00.162]                           computeRestarts <- base::computeRestarts
[17:46:00.162]                           grepl <- base::grepl
[17:46:00.162]                           restarts <- computeRestarts(cond)
[17:46:00.162]                           for (restart in restarts) {
[17:46:00.162]                             name <- restart$name
[17:46:00.162]                             if (is.null(name)) 
[17:46:00.162]                               next
[17:46:00.162]                             if (!grepl(pattern, name)) 
[17:46:00.162]                               next
[17:46:00.162]                             invokeRestart(restart)
[17:46:00.162]                             muffled <- TRUE
[17:46:00.162]                             break
[17:46:00.162]                           }
[17:46:00.162]                         }
[17:46:00.162]                       }
[17:46:00.162]                       invisible(muffled)
[17:46:00.162]                     }
[17:46:00.162]                     muffleCondition(cond, pattern = "^muffle")
[17:46:00.162]                   }
[17:46:00.162]                 }
[17:46:00.162]                 else {
[17:46:00.162]                   if (TRUE) {
[17:46:00.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:00.162]                     {
[17:46:00.162]                       inherits <- base::inherits
[17:46:00.162]                       invokeRestart <- base::invokeRestart
[17:46:00.162]                       is.null <- base::is.null
[17:46:00.162]                       muffled <- FALSE
[17:46:00.162]                       if (inherits(cond, "message")) {
[17:46:00.162]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:00.162]                         if (muffled) 
[17:46:00.162]                           invokeRestart("muffleMessage")
[17:46:00.162]                       }
[17:46:00.162]                       else if (inherits(cond, "warning")) {
[17:46:00.162]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:00.162]                         if (muffled) 
[17:46:00.162]                           invokeRestart("muffleWarning")
[17:46:00.162]                       }
[17:46:00.162]                       else if (inherits(cond, "condition")) {
[17:46:00.162]                         if (!is.null(pattern)) {
[17:46:00.162]                           computeRestarts <- base::computeRestarts
[17:46:00.162]                           grepl <- base::grepl
[17:46:00.162]                           restarts <- computeRestarts(cond)
[17:46:00.162]                           for (restart in restarts) {
[17:46:00.162]                             name <- restart$name
[17:46:00.162]                             if (is.null(name)) 
[17:46:00.162]                               next
[17:46:00.162]                             if (!grepl(pattern, name)) 
[17:46:00.162]                               next
[17:46:00.162]                             invokeRestart(restart)
[17:46:00.162]                             muffled <- TRUE
[17:46:00.162]                             break
[17:46:00.162]                           }
[17:46:00.162]                         }
[17:46:00.162]                       }
[17:46:00.162]                       invisible(muffled)
[17:46:00.162]                     }
[17:46:00.162]                     muffleCondition(cond, pattern = "^muffle")
[17:46:00.162]                   }
[17:46:00.162]                 }
[17:46:00.162]             }
[17:46:00.162]         }))
[17:46:00.162]     }, error = function(ex) {
[17:46:00.162]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:00.162]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:00.162]                 ...future.rng), started = ...future.startTime, 
[17:46:00.162]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:00.162]             version = "1.8"), class = "FutureResult")
[17:46:00.162]     }, finally = {
[17:46:00.162]         if (!identical(...future.workdir, getwd())) 
[17:46:00.162]             setwd(...future.workdir)
[17:46:00.162]         {
[17:46:00.162]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:00.162]                 ...future.oldOptions$nwarnings <- NULL
[17:46:00.162]             }
[17:46:00.162]             base::options(...future.oldOptions)
[17:46:00.162]             if (.Platform$OS.type == "windows") {
[17:46:00.162]                 old_names <- names(...future.oldEnvVars)
[17:46:00.162]                 envs <- base::Sys.getenv()
[17:46:00.162]                 names <- names(envs)
[17:46:00.162]                 common <- intersect(names, old_names)
[17:46:00.162]                 added <- setdiff(names, old_names)
[17:46:00.162]                 removed <- setdiff(old_names, names)
[17:46:00.162]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:00.162]                   envs[common]]
[17:46:00.162]                 NAMES <- toupper(changed)
[17:46:00.162]                 args <- list()
[17:46:00.162]                 for (kk in seq_along(NAMES)) {
[17:46:00.162]                   name <- changed[[kk]]
[17:46:00.162]                   NAME <- NAMES[[kk]]
[17:46:00.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:00.162]                     next
[17:46:00.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:00.162]                 }
[17:46:00.162]                 NAMES <- toupper(added)
[17:46:00.162]                 for (kk in seq_along(NAMES)) {
[17:46:00.162]                   name <- added[[kk]]
[17:46:00.162]                   NAME <- NAMES[[kk]]
[17:46:00.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:00.162]                     next
[17:46:00.162]                   args[[name]] <- ""
[17:46:00.162]                 }
[17:46:00.162]                 NAMES <- toupper(removed)
[17:46:00.162]                 for (kk in seq_along(NAMES)) {
[17:46:00.162]                   name <- removed[[kk]]
[17:46:00.162]                   NAME <- NAMES[[kk]]
[17:46:00.162]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:00.162]                     next
[17:46:00.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:00.162]                 }
[17:46:00.162]                 if (length(args) > 0) 
[17:46:00.162]                   base::do.call(base::Sys.setenv, args = args)
[17:46:00.162]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:00.162]             }
[17:46:00.162]             else {
[17:46:00.162]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:00.162]             }
[17:46:00.162]             {
[17:46:00.162]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:00.162]                   0L) {
[17:46:00.162]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:00.162]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:00.162]                   base::options(opts)
[17:46:00.162]                 }
[17:46:00.162]                 {
[17:46:00.162]                   {
[17:46:00.162]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:00.162]                     NULL
[17:46:00.162]                   }
[17:46:00.162]                   options(future.plan = NULL)
[17:46:00.162]                   if (is.na(NA_character_)) 
[17:46:00.162]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:00.162]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:00.162]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:00.162]                     .init = FALSE)
[17:46:00.162]                 }
[17:46:00.162]             }
[17:46:00.162]         }
[17:46:00.162]     })
[17:46:00.162]     if (TRUE) {
[17:46:00.162]         base::sink(type = "output", split = FALSE)
[17:46:00.162]         if (TRUE) {
[17:46:00.162]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:00.162]         }
[17:46:00.162]         else {
[17:46:00.162]             ...future.result["stdout"] <- base::list(NULL)
[17:46:00.162]         }
[17:46:00.162]         base::close(...future.stdout)
[17:46:00.162]         ...future.stdout <- NULL
[17:46:00.162]     }
[17:46:00.162]     ...future.result$conditions <- ...future.conditions
[17:46:00.162]     ...future.result$finished <- base::Sys.time()
[17:46:00.162]     ...future.result
[17:46:00.162] }
[17:46:00.166] MultisessionFuture started
[17:46:00.166] - Launch lazy future ... done
[17:46:00.166] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[17:46:03.172] receiveMessageFromWorker() for ClusterFuture ...
[17:46:03.172] - Validating connection of MultisessionFuture
[17:46:03.173] - received message: FutureResult
[17:46:03.173] - Received FutureResult
[17:46:03.173] - Erased future from FutureRegistry
[17:46:03.173] result() for ClusterFuture ...
[17:46:03.173] - result already collected: FutureResult
[17:46:03.173] result() for ClusterFuture ... done
[17:46:03.173] signalConditions() ...
[17:46:03.173]  - include = ‘immediateCondition’
[17:46:03.173]  - exclude = 
[17:46:03.173]  - resignal = FALSE
[17:46:03.174]  - Number of conditions: 1
[17:46:03.174] signalConditions() ... done
[17:46:03.174] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:03.174] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 24e2b16b-3f36-f956-d26c-218a83dded4b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[17:46:03.175] plan(): Setting new future strategy stack:
[17:46:03.176] List of future strategies:
[17:46:03.176] 1. FutureStrategy:
[17:46:03.176]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:03.176]    - tweaked: FALSE
[17:46:03.176]    - call: future::plan(oplan)
[17:46:03.176] plan(): nbrOfWorkers() = 1
> 
