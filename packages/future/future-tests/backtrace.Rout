
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:04.093] plan(): Setting new future strategy stack:
[18:03:04.094] List of future strategies:
[18:03:04.094] 1. sequential:
[18:03:04.094]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.094]    - tweaked: FALSE
[18:03:04.094]    - call: future::plan("sequential")
[18:03:04.119] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[18:03:04.142] getGlobalsAndPackages() ...
[18:03:04.143] Searching for globals...
[18:03:04.155] - globals found: [2] ‘{’, ‘stop’
[18:03:04.155] Searching for globals ... DONE
[18:03:04.155] Resolving globals: FALSE
[18:03:04.156] 
[18:03:04.156] 
[18:03:04.157] getGlobalsAndPackages() ... DONE
[18:03:04.158] run() for ‘Future’ ...
[18:03:04.158] - state: ‘created’
[18:03:04.158] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.159] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.159] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.159]   - Field: ‘label’
[18:03:04.160]   - Field: ‘local’
[18:03:04.160]   - Field: ‘owner’
[18:03:04.160]   - Field: ‘envir’
[18:03:04.160]   - Field: ‘packages’
[18:03:04.160]   - Field: ‘gc’
[18:03:04.161]   - Field: ‘conditions’
[18:03:04.161]   - Field: ‘expr’
[18:03:04.161]   - Field: ‘uuid’
[18:03:04.161]   - Field: ‘seed’
[18:03:04.161]   - Field: ‘version’
[18:03:04.162]   - Field: ‘result’
[18:03:04.162]   - Field: ‘asynchronous’
[18:03:04.162]   - Field: ‘calls’
[18:03:04.162]   - Field: ‘globals’
[18:03:04.162]   - Field: ‘stdout’
[18:03:04.163]   - Field: ‘earlySignal’
[18:03:04.163]   - Field: ‘lazy’
[18:03:04.163]   - Field: ‘state’
[18:03:04.163] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.163] - Launch lazy future ...
[18:03:04.165] Packages needed by the future expression (n = 0): <none>
[18:03:04.165] Packages needed by future strategies (n = 0): <none>
[18:03:04.166] {
[18:03:04.166]     {
[18:03:04.166]         {
[18:03:04.166]             ...future.startTime <- base::Sys.time()
[18:03:04.166]             {
[18:03:04.166]                 {
[18:03:04.166]                   {
[18:03:04.166]                     base::local({
[18:03:04.166]                       has_future <- base::requireNamespace("future", 
[18:03:04.166]                         quietly = TRUE)
[18:03:04.166]                       if (has_future) {
[18:03:04.166]                         ns <- base::getNamespace("future")
[18:03:04.166]                         version <- ns[[".package"]][["version"]]
[18:03:04.166]                         if (is.null(version)) 
[18:03:04.166]                           version <- utils::packageVersion("future")
[18:03:04.166]                       }
[18:03:04.166]                       else {
[18:03:04.166]                         version <- NULL
[18:03:04.166]                       }
[18:03:04.166]                       if (!has_future || version < "1.8.0") {
[18:03:04.166]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.166]                           "", base::R.version$version.string), 
[18:03:04.166]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.166]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.166]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.166]                             "release", "version")], collapse = " "), 
[18:03:04.166]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.166]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.166]                           info)
[18:03:04.166]                         info <- base::paste(info, collapse = "; ")
[18:03:04.166]                         if (!has_future) {
[18:03:04.166]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.166]                             info)
[18:03:04.166]                         }
[18:03:04.166]                         else {
[18:03:04.166]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.166]                             info, version)
[18:03:04.166]                         }
[18:03:04.166]                         base::stop(msg)
[18:03:04.166]                       }
[18:03:04.166]                     })
[18:03:04.166]                   }
[18:03:04.166]                   ...future.strategy.old <- future::plan("list")
[18:03:04.166]                   options(future.plan = NULL)
[18:03:04.166]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.166]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.166]                 }
[18:03:04.166]                 ...future.workdir <- getwd()
[18:03:04.166]             }
[18:03:04.166]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.166]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.166]         }
[18:03:04.166]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.166]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.166]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.166]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.166]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.166]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.166]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.166]             base::names(...future.oldOptions))
[18:03:04.166]     }
[18:03:04.166]     if (FALSE) {
[18:03:04.166]     }
[18:03:04.166]     else {
[18:03:04.166]         if (TRUE) {
[18:03:04.166]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.166]                 open = "w")
[18:03:04.166]         }
[18:03:04.166]         else {
[18:03:04.166]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.166]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.166]         }
[18:03:04.166]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.166]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.166]             base::sink(type = "output", split = FALSE)
[18:03:04.166]             base::close(...future.stdout)
[18:03:04.166]         }, add = TRUE)
[18:03:04.166]     }
[18:03:04.166]     ...future.frame <- base::sys.nframe()
[18:03:04.166]     ...future.conditions <- base::list()
[18:03:04.166]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.166]     if (FALSE) {
[18:03:04.166]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.166]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.166]     }
[18:03:04.166]     ...future.result <- base::tryCatch({
[18:03:04.166]         base::withCallingHandlers({
[18:03:04.166]             ...future.value <- base::withVisible(base::local({
[18:03:04.166]                 42L
[18:03:04.166]                 stop("Woops")
[18:03:04.166]             }))
[18:03:04.166]             future::FutureResult(value = ...future.value$value, 
[18:03:04.166]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.166]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.166]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.166]                     ...future.globalenv.names))
[18:03:04.166]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.166]         }, condition = base::local({
[18:03:04.166]             c <- base::c
[18:03:04.166]             inherits <- base::inherits
[18:03:04.166]             invokeRestart <- base::invokeRestart
[18:03:04.166]             length <- base::length
[18:03:04.166]             list <- base::list
[18:03:04.166]             seq.int <- base::seq.int
[18:03:04.166]             signalCondition <- base::signalCondition
[18:03:04.166]             sys.calls <- base::sys.calls
[18:03:04.166]             `[[` <- base::`[[`
[18:03:04.166]             `+` <- base::`+`
[18:03:04.166]             `<<-` <- base::`<<-`
[18:03:04.166]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.166]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.166]                   3L)]
[18:03:04.166]             }
[18:03:04.166]             function(cond) {
[18:03:04.166]                 is_error <- inherits(cond, "error")
[18:03:04.166]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.166]                   NULL)
[18:03:04.166]                 if (is_error) {
[18:03:04.166]                   sessionInformation <- function() {
[18:03:04.166]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.166]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.166]                       search = base::search(), system = base::Sys.info())
[18:03:04.166]                   }
[18:03:04.166]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.166]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.166]                     cond$call), session = sessionInformation(), 
[18:03:04.166]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.166]                   signalCondition(cond)
[18:03:04.166]                 }
[18:03:04.166]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.166]                 "immediateCondition"))) {
[18:03:04.166]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.166]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.166]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.166]                   if (TRUE && !signal) {
[18:03:04.166]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.166]                     {
[18:03:04.166]                       inherits <- base::inherits
[18:03:04.166]                       invokeRestart <- base::invokeRestart
[18:03:04.166]                       is.null <- base::is.null
[18:03:04.166]                       muffled <- FALSE
[18:03:04.166]                       if (inherits(cond, "message")) {
[18:03:04.166]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.166]                         if (muffled) 
[18:03:04.166]                           invokeRestart("muffleMessage")
[18:03:04.166]                       }
[18:03:04.166]                       else if (inherits(cond, "warning")) {
[18:03:04.166]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.166]                         if (muffled) 
[18:03:04.166]                           invokeRestart("muffleWarning")
[18:03:04.166]                       }
[18:03:04.166]                       else if (inherits(cond, "condition")) {
[18:03:04.166]                         if (!is.null(pattern)) {
[18:03:04.166]                           computeRestarts <- base::computeRestarts
[18:03:04.166]                           grepl <- base::grepl
[18:03:04.166]                           restarts <- computeRestarts(cond)
[18:03:04.166]                           for (restart in restarts) {
[18:03:04.166]                             name <- restart$name
[18:03:04.166]                             if (is.null(name)) 
[18:03:04.166]                               next
[18:03:04.166]                             if (!grepl(pattern, name)) 
[18:03:04.166]                               next
[18:03:04.166]                             invokeRestart(restart)
[18:03:04.166]                             muffled <- TRUE
[18:03:04.166]                             break
[18:03:04.166]                           }
[18:03:04.166]                         }
[18:03:04.166]                       }
[18:03:04.166]                       invisible(muffled)
[18:03:04.166]                     }
[18:03:04.166]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.166]                   }
[18:03:04.166]                 }
[18:03:04.166]                 else {
[18:03:04.166]                   if (TRUE) {
[18:03:04.166]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.166]                     {
[18:03:04.166]                       inherits <- base::inherits
[18:03:04.166]                       invokeRestart <- base::invokeRestart
[18:03:04.166]                       is.null <- base::is.null
[18:03:04.166]                       muffled <- FALSE
[18:03:04.166]                       if (inherits(cond, "message")) {
[18:03:04.166]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.166]                         if (muffled) 
[18:03:04.166]                           invokeRestart("muffleMessage")
[18:03:04.166]                       }
[18:03:04.166]                       else if (inherits(cond, "warning")) {
[18:03:04.166]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.166]                         if (muffled) 
[18:03:04.166]                           invokeRestart("muffleWarning")
[18:03:04.166]                       }
[18:03:04.166]                       else if (inherits(cond, "condition")) {
[18:03:04.166]                         if (!is.null(pattern)) {
[18:03:04.166]                           computeRestarts <- base::computeRestarts
[18:03:04.166]                           grepl <- base::grepl
[18:03:04.166]                           restarts <- computeRestarts(cond)
[18:03:04.166]                           for (restart in restarts) {
[18:03:04.166]                             name <- restart$name
[18:03:04.166]                             if (is.null(name)) 
[18:03:04.166]                               next
[18:03:04.166]                             if (!grepl(pattern, name)) 
[18:03:04.166]                               next
[18:03:04.166]                             invokeRestart(restart)
[18:03:04.166]                             muffled <- TRUE
[18:03:04.166]                             break
[18:03:04.166]                           }
[18:03:04.166]                         }
[18:03:04.166]                       }
[18:03:04.166]                       invisible(muffled)
[18:03:04.166]                     }
[18:03:04.166]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.166]                   }
[18:03:04.166]                 }
[18:03:04.166]             }
[18:03:04.166]         }))
[18:03:04.166]     }, error = function(ex) {
[18:03:04.166]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.166]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.166]                 ...future.rng), started = ...future.startTime, 
[18:03:04.166]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.166]             version = "1.8"), class = "FutureResult")
[18:03:04.166]     }, finally = {
[18:03:04.166]         if (!identical(...future.workdir, getwd())) 
[18:03:04.166]             setwd(...future.workdir)
[18:03:04.166]         {
[18:03:04.166]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.166]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.166]             }
[18:03:04.166]             base::options(...future.oldOptions)
[18:03:04.166]             if (.Platform$OS.type == "windows") {
[18:03:04.166]                 old_names <- names(...future.oldEnvVars)
[18:03:04.166]                 envs <- base::Sys.getenv()
[18:03:04.166]                 names <- names(envs)
[18:03:04.166]                 common <- intersect(names, old_names)
[18:03:04.166]                 added <- setdiff(names, old_names)
[18:03:04.166]                 removed <- setdiff(old_names, names)
[18:03:04.166]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.166]                   envs[common]]
[18:03:04.166]                 NAMES <- toupper(changed)
[18:03:04.166]                 args <- list()
[18:03:04.166]                 for (kk in seq_along(NAMES)) {
[18:03:04.166]                   name <- changed[[kk]]
[18:03:04.166]                   NAME <- NAMES[[kk]]
[18:03:04.166]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.166]                     next
[18:03:04.166]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.166]                 }
[18:03:04.166]                 NAMES <- toupper(added)
[18:03:04.166]                 for (kk in seq_along(NAMES)) {
[18:03:04.166]                   name <- added[[kk]]
[18:03:04.166]                   NAME <- NAMES[[kk]]
[18:03:04.166]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.166]                     next
[18:03:04.166]                   args[[name]] <- ""
[18:03:04.166]                 }
[18:03:04.166]                 NAMES <- toupper(removed)
[18:03:04.166]                 for (kk in seq_along(NAMES)) {
[18:03:04.166]                   name <- removed[[kk]]
[18:03:04.166]                   NAME <- NAMES[[kk]]
[18:03:04.166]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.166]                     next
[18:03:04.166]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.166]                 }
[18:03:04.166]                 if (length(args) > 0) 
[18:03:04.166]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.166]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.166]             }
[18:03:04.166]             else {
[18:03:04.166]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.166]             }
[18:03:04.166]             {
[18:03:04.166]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.166]                   0L) {
[18:03:04.166]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.166]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.166]                   base::options(opts)
[18:03:04.166]                 }
[18:03:04.166]                 {
[18:03:04.166]                   {
[18:03:04.166]                     NULL
[18:03:04.166]                     RNGkind("Mersenne-Twister")
[18:03:04.166]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.166]                       inherits = FALSE)
[18:03:04.166]                   }
[18:03:04.166]                   options(future.plan = NULL)
[18:03:04.166]                   if (is.na(NA_character_)) 
[18:03:04.166]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.166]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.166]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.166]                     .init = FALSE)
[18:03:04.166]                 }
[18:03:04.166]             }
[18:03:04.166]         }
[18:03:04.166]     })
[18:03:04.166]     if (TRUE) {
[18:03:04.166]         base::sink(type = "output", split = FALSE)
[18:03:04.166]         if (TRUE) {
[18:03:04.166]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.166]         }
[18:03:04.166]         else {
[18:03:04.166]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.166]         }
[18:03:04.166]         base::close(...future.stdout)
[18:03:04.166]         ...future.stdout <- NULL
[18:03:04.166]     }
[18:03:04.166]     ...future.result$conditions <- ...future.conditions
[18:03:04.166]     ...future.result$finished <- base::Sys.time()
[18:03:04.166]     ...future.result
[18:03:04.166] }
[18:03:04.170] plan(): Setting new future strategy stack:
[18:03:04.170] List of future strategies:
[18:03:04.170] 1. sequential:
[18:03:04.170]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.170]    - tweaked: FALSE
[18:03:04.170]    - call: NULL
[18:03:04.171] plan(): nbrOfWorkers() = 1
[18:03:04.173] plan(): Setting new future strategy stack:
[18:03:04.173] List of future strategies:
[18:03:04.173] 1. sequential:
[18:03:04.173]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.173]    - tweaked: FALSE
[18:03:04.173]    - call: future::plan("sequential")
[18:03:04.174] plan(): nbrOfWorkers() = 1
[18:03:04.175] SequentialFuture started (and completed)
[18:03:04.175] signalConditions() ...
[18:03:04.175]  - include = ‘immediateCondition’
[18:03:04.176]  - exclude = 
[18:03:04.176]  - resignal = FALSE
[18:03:04.176]  - Number of conditions: 1
[18:03:04.176] signalConditions() ... done
[18:03:04.176] - Launch lazy future ... done
[18:03:04.177] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[18:03:04.177] signalConditions() ...
[18:03:04.178]  - include = ‘immediateCondition’
[18:03:04.178]  - exclude = 
[18:03:04.178]  - resignal = FALSE
[18:03:04.178]  - Number of conditions: 1
[18:03:04.178] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[18:03:04.180] resolved() for ‘SequentialFuture’ ...
[18:03:04.181] - state: ‘finished’
[18:03:04.181] - run: TRUE
[18:03:04.181] - result: ‘FutureResult’
[18:03:04.181] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[18:03:04.183] getGlobalsAndPackages() ...
[18:03:04.183] Searching for globals...
[18:03:04.185] - globals found: [2] ‘{’, ‘stop’
[18:03:04.185] Searching for globals ... DONE
[18:03:04.185] Resolving globals: FALSE
[18:03:04.186] 
[18:03:04.186] 
[18:03:04.186] getGlobalsAndPackages() ... DONE
[18:03:04.186] run() for ‘Future’ ...
[18:03:04.187] - state: ‘created’
[18:03:04.187] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.188] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.188] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.188]   - Field: ‘label’
[18:03:04.188]   - Field: ‘local’
[18:03:04.188]   - Field: ‘owner’
[18:03:04.191]   - Field: ‘envir’
[18:03:04.191]   - Field: ‘packages’
[18:03:04.191]   - Field: ‘gc’
[18:03:04.192]   - Field: ‘conditions’
[18:03:04.192]   - Field: ‘expr’
[18:03:04.192]   - Field: ‘uuid’
[18:03:04.192]   - Field: ‘seed’
[18:03:04.192]   - Field: ‘version’
[18:03:04.193]   - Field: ‘result’
[18:03:04.193]   - Field: ‘asynchronous’
[18:03:04.193]   - Field: ‘calls’
[18:03:04.193]   - Field: ‘globals’
[18:03:04.193]   - Field: ‘stdout’
[18:03:04.194]   - Field: ‘earlySignal’
[18:03:04.194]   - Field: ‘lazy’
[18:03:04.194]   - Field: ‘state’
[18:03:04.194] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.194] - Launch lazy future ...
[18:03:04.197] Packages needed by the future expression (n = 0): <none>
[18:03:04.197] Packages needed by future strategies (n = 0): <none>
[18:03:04.198] {
[18:03:04.198]     {
[18:03:04.198]         {
[18:03:04.198]             ...future.startTime <- base::Sys.time()
[18:03:04.198]             {
[18:03:04.198]                 {
[18:03:04.198]                   {
[18:03:04.198]                     base::local({
[18:03:04.198]                       has_future <- base::requireNamespace("future", 
[18:03:04.198]                         quietly = TRUE)
[18:03:04.198]                       if (has_future) {
[18:03:04.198]                         ns <- base::getNamespace("future")
[18:03:04.198]                         version <- ns[[".package"]][["version"]]
[18:03:04.198]                         if (is.null(version)) 
[18:03:04.198]                           version <- utils::packageVersion("future")
[18:03:04.198]                       }
[18:03:04.198]                       else {
[18:03:04.198]                         version <- NULL
[18:03:04.198]                       }
[18:03:04.198]                       if (!has_future || version < "1.8.0") {
[18:03:04.198]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.198]                           "", base::R.version$version.string), 
[18:03:04.198]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.198]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.198]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.198]                             "release", "version")], collapse = " "), 
[18:03:04.198]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.198]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.198]                           info)
[18:03:04.198]                         info <- base::paste(info, collapse = "; ")
[18:03:04.198]                         if (!has_future) {
[18:03:04.198]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.198]                             info)
[18:03:04.198]                         }
[18:03:04.198]                         else {
[18:03:04.198]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.198]                             info, version)
[18:03:04.198]                         }
[18:03:04.198]                         base::stop(msg)
[18:03:04.198]                       }
[18:03:04.198]                     })
[18:03:04.198]                   }
[18:03:04.198]                   ...future.strategy.old <- future::plan("list")
[18:03:04.198]                   options(future.plan = NULL)
[18:03:04.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.198]                 }
[18:03:04.198]                 ...future.workdir <- getwd()
[18:03:04.198]             }
[18:03:04.198]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.198]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.198]         }
[18:03:04.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.198]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.198]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.198]             base::names(...future.oldOptions))
[18:03:04.198]     }
[18:03:04.198]     if (FALSE) {
[18:03:04.198]     }
[18:03:04.198]     else {
[18:03:04.198]         if (TRUE) {
[18:03:04.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.198]                 open = "w")
[18:03:04.198]         }
[18:03:04.198]         else {
[18:03:04.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.198]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.198]         }
[18:03:04.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.198]             base::sink(type = "output", split = FALSE)
[18:03:04.198]             base::close(...future.stdout)
[18:03:04.198]         }, add = TRUE)
[18:03:04.198]     }
[18:03:04.198]     ...future.frame <- base::sys.nframe()
[18:03:04.198]     ...future.conditions <- base::list()
[18:03:04.198]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.198]     if (FALSE) {
[18:03:04.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.198]     }
[18:03:04.198]     ...future.result <- base::tryCatch({
[18:03:04.198]         base::withCallingHandlers({
[18:03:04.198]             ...future.value <- base::withVisible(base::local({
[18:03:04.198]                 42L
[18:03:04.198]                 stop("Woops")
[18:03:04.198]             }))
[18:03:04.198]             future::FutureResult(value = ...future.value$value, 
[18:03:04.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.198]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.198]                     ...future.globalenv.names))
[18:03:04.198]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.198]         }, condition = base::local({
[18:03:04.198]             c <- base::c
[18:03:04.198]             inherits <- base::inherits
[18:03:04.198]             invokeRestart <- base::invokeRestart
[18:03:04.198]             length <- base::length
[18:03:04.198]             list <- base::list
[18:03:04.198]             seq.int <- base::seq.int
[18:03:04.198]             signalCondition <- base::signalCondition
[18:03:04.198]             sys.calls <- base::sys.calls
[18:03:04.198]             `[[` <- base::`[[`
[18:03:04.198]             `+` <- base::`+`
[18:03:04.198]             `<<-` <- base::`<<-`
[18:03:04.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.198]                   3L)]
[18:03:04.198]             }
[18:03:04.198]             function(cond) {
[18:03:04.198]                 is_error <- inherits(cond, "error")
[18:03:04.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.198]                   NULL)
[18:03:04.198]                 if (is_error) {
[18:03:04.198]                   sessionInformation <- function() {
[18:03:04.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.198]                       search = base::search(), system = base::Sys.info())
[18:03:04.198]                   }
[18:03:04.198]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.198]                     cond$call), session = sessionInformation(), 
[18:03:04.198]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.198]                   signalCondition(cond)
[18:03:04.198]                 }
[18:03:04.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.198]                 "immediateCondition"))) {
[18:03:04.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.198]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.198]                   if (TRUE && !signal) {
[18:03:04.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.198]                     {
[18:03:04.198]                       inherits <- base::inherits
[18:03:04.198]                       invokeRestart <- base::invokeRestart
[18:03:04.198]                       is.null <- base::is.null
[18:03:04.198]                       muffled <- FALSE
[18:03:04.198]                       if (inherits(cond, "message")) {
[18:03:04.198]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.198]                         if (muffled) 
[18:03:04.198]                           invokeRestart("muffleMessage")
[18:03:04.198]                       }
[18:03:04.198]                       else if (inherits(cond, "warning")) {
[18:03:04.198]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.198]                         if (muffled) 
[18:03:04.198]                           invokeRestart("muffleWarning")
[18:03:04.198]                       }
[18:03:04.198]                       else if (inherits(cond, "condition")) {
[18:03:04.198]                         if (!is.null(pattern)) {
[18:03:04.198]                           computeRestarts <- base::computeRestarts
[18:03:04.198]                           grepl <- base::grepl
[18:03:04.198]                           restarts <- computeRestarts(cond)
[18:03:04.198]                           for (restart in restarts) {
[18:03:04.198]                             name <- restart$name
[18:03:04.198]                             if (is.null(name)) 
[18:03:04.198]                               next
[18:03:04.198]                             if (!grepl(pattern, name)) 
[18:03:04.198]                               next
[18:03:04.198]                             invokeRestart(restart)
[18:03:04.198]                             muffled <- TRUE
[18:03:04.198]                             break
[18:03:04.198]                           }
[18:03:04.198]                         }
[18:03:04.198]                       }
[18:03:04.198]                       invisible(muffled)
[18:03:04.198]                     }
[18:03:04.198]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.198]                   }
[18:03:04.198]                 }
[18:03:04.198]                 else {
[18:03:04.198]                   if (TRUE) {
[18:03:04.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.198]                     {
[18:03:04.198]                       inherits <- base::inherits
[18:03:04.198]                       invokeRestart <- base::invokeRestart
[18:03:04.198]                       is.null <- base::is.null
[18:03:04.198]                       muffled <- FALSE
[18:03:04.198]                       if (inherits(cond, "message")) {
[18:03:04.198]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.198]                         if (muffled) 
[18:03:04.198]                           invokeRestart("muffleMessage")
[18:03:04.198]                       }
[18:03:04.198]                       else if (inherits(cond, "warning")) {
[18:03:04.198]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.198]                         if (muffled) 
[18:03:04.198]                           invokeRestart("muffleWarning")
[18:03:04.198]                       }
[18:03:04.198]                       else if (inherits(cond, "condition")) {
[18:03:04.198]                         if (!is.null(pattern)) {
[18:03:04.198]                           computeRestarts <- base::computeRestarts
[18:03:04.198]                           grepl <- base::grepl
[18:03:04.198]                           restarts <- computeRestarts(cond)
[18:03:04.198]                           for (restart in restarts) {
[18:03:04.198]                             name <- restart$name
[18:03:04.198]                             if (is.null(name)) 
[18:03:04.198]                               next
[18:03:04.198]                             if (!grepl(pattern, name)) 
[18:03:04.198]                               next
[18:03:04.198]                             invokeRestart(restart)
[18:03:04.198]                             muffled <- TRUE
[18:03:04.198]                             break
[18:03:04.198]                           }
[18:03:04.198]                         }
[18:03:04.198]                       }
[18:03:04.198]                       invisible(muffled)
[18:03:04.198]                     }
[18:03:04.198]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.198]                   }
[18:03:04.198]                 }
[18:03:04.198]             }
[18:03:04.198]         }))
[18:03:04.198]     }, error = function(ex) {
[18:03:04.198]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.198]                 ...future.rng), started = ...future.startTime, 
[18:03:04.198]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.198]             version = "1.8"), class = "FutureResult")
[18:03:04.198]     }, finally = {
[18:03:04.198]         if (!identical(...future.workdir, getwd())) 
[18:03:04.198]             setwd(...future.workdir)
[18:03:04.198]         {
[18:03:04.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.198]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.198]             }
[18:03:04.198]             base::options(...future.oldOptions)
[18:03:04.198]             if (.Platform$OS.type == "windows") {
[18:03:04.198]                 old_names <- names(...future.oldEnvVars)
[18:03:04.198]                 envs <- base::Sys.getenv()
[18:03:04.198]                 names <- names(envs)
[18:03:04.198]                 common <- intersect(names, old_names)
[18:03:04.198]                 added <- setdiff(names, old_names)
[18:03:04.198]                 removed <- setdiff(old_names, names)
[18:03:04.198]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.198]                   envs[common]]
[18:03:04.198]                 NAMES <- toupper(changed)
[18:03:04.198]                 args <- list()
[18:03:04.198]                 for (kk in seq_along(NAMES)) {
[18:03:04.198]                   name <- changed[[kk]]
[18:03:04.198]                   NAME <- NAMES[[kk]]
[18:03:04.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.198]                     next
[18:03:04.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.198]                 }
[18:03:04.198]                 NAMES <- toupper(added)
[18:03:04.198]                 for (kk in seq_along(NAMES)) {
[18:03:04.198]                   name <- added[[kk]]
[18:03:04.198]                   NAME <- NAMES[[kk]]
[18:03:04.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.198]                     next
[18:03:04.198]                   args[[name]] <- ""
[18:03:04.198]                 }
[18:03:04.198]                 NAMES <- toupper(removed)
[18:03:04.198]                 for (kk in seq_along(NAMES)) {
[18:03:04.198]                   name <- removed[[kk]]
[18:03:04.198]                   NAME <- NAMES[[kk]]
[18:03:04.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.198]                     next
[18:03:04.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.198]                 }
[18:03:04.198]                 if (length(args) > 0) 
[18:03:04.198]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.198]             }
[18:03:04.198]             else {
[18:03:04.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.198]             }
[18:03:04.198]             {
[18:03:04.198]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.198]                   0L) {
[18:03:04.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.198]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.198]                   base::options(opts)
[18:03:04.198]                 }
[18:03:04.198]                 {
[18:03:04.198]                   {
[18:03:04.198]                     NULL
[18:03:04.198]                     RNGkind("Mersenne-Twister")
[18:03:04.198]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.198]                       inherits = FALSE)
[18:03:04.198]                   }
[18:03:04.198]                   options(future.plan = NULL)
[18:03:04.198]                   if (is.na(NA_character_)) 
[18:03:04.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.198]                     .init = FALSE)
[18:03:04.198]                 }
[18:03:04.198]             }
[18:03:04.198]         }
[18:03:04.198]     })
[18:03:04.198]     if (TRUE) {
[18:03:04.198]         base::sink(type = "output", split = FALSE)
[18:03:04.198]         if (TRUE) {
[18:03:04.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.198]         }
[18:03:04.198]         else {
[18:03:04.198]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.198]         }
[18:03:04.198]         base::close(...future.stdout)
[18:03:04.198]         ...future.stdout <- NULL
[18:03:04.198]     }
[18:03:04.198]     ...future.result$conditions <- ...future.conditions
[18:03:04.198]     ...future.result$finished <- base::Sys.time()
[18:03:04.198]     ...future.result
[18:03:04.198] }
[18:03:04.206] plan(): Setting new future strategy stack:
[18:03:04.206] List of future strategies:
[18:03:04.206] 1. sequential:
[18:03:04.206]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.206]    - tweaked: FALSE
[18:03:04.206]    - call: NULL
[18:03:04.209] plan(): nbrOfWorkers() = 1
[18:03:04.213] plan(): Setting new future strategy stack:
[18:03:04.214] List of future strategies:
[18:03:04.214] 1. sequential:
[18:03:04.214]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.214]    - tweaked: FALSE
[18:03:04.214]    - call: future::plan("sequential")
[18:03:04.217] plan(): nbrOfWorkers() = 1
[18:03:04.217] SequentialFuture started (and completed)
[18:03:04.218] signalConditions() ...
[18:03:04.218]  - include = ‘immediateCondition’
[18:03:04.218]  - exclude = 
[18:03:04.218]  - resignal = FALSE
[18:03:04.218]  - Number of conditions: 1
[18:03:04.219] signalConditions() ... done
[18:03:04.219] - Launch lazy future ... done
[18:03:04.221] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[18:03:04.222] resolved() for ‘SequentialFuture’ ...
[18:03:04.222] - state: ‘finished’
[18:03:04.222] - run: TRUE
[18:03:04.222] - result: ‘FutureResult’
[18:03:04.223] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[18:03:04.227] getGlobalsAndPackages() ...
[18:03:04.229] Searching for globals...
[18:03:04.232] - globals found: [2] ‘{’, ‘stop’
[18:03:04.232] Searching for globals ... DONE
[18:03:04.232] Resolving globals: FALSE
[18:03:04.233] 
[18:03:04.233] 
[18:03:04.234] getGlobalsAndPackages() ... DONE
[18:03:04.234] run() for ‘Future’ ...
[18:03:04.234] - state: ‘created’
[18:03:04.235] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.235] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.236] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.236]   - Field: ‘label’
[18:03:04.236]   - Field: ‘local’
[18:03:04.236]   - Field: ‘owner’
[18:03:04.237]   - Field: ‘envir’
[18:03:04.237]   - Field: ‘packages’
[18:03:04.237]   - Field: ‘gc’
[18:03:04.237]   - Field: ‘conditions’
[18:03:04.237]   - Field: ‘expr’
[18:03:04.238]   - Field: ‘uuid’
[18:03:04.238]   - Field: ‘seed’
[18:03:04.238]   - Field: ‘version’
[18:03:04.238]   - Field: ‘result’
[18:03:04.238]   - Field: ‘asynchronous’
[18:03:04.239]   - Field: ‘calls’
[18:03:04.239]   - Field: ‘globals’
[18:03:04.243]   - Field: ‘stdout’
[18:03:04.243]   - Field: ‘earlySignal’
[18:03:04.244]   - Field: ‘lazy’
[18:03:04.244]   - Field: ‘state’
[18:03:04.244] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.244] - Launch lazy future ...
[18:03:04.245] Packages needed by the future expression (n = 0): <none>
[18:03:04.245] Packages needed by future strategies (n = 0): <none>
[18:03:04.246] {
[18:03:04.246]     {
[18:03:04.246]         {
[18:03:04.246]             ...future.startTime <- base::Sys.time()
[18:03:04.246]             {
[18:03:04.246]                 {
[18:03:04.246]                   {
[18:03:04.246]                     base::local({
[18:03:04.246]                       has_future <- base::requireNamespace("future", 
[18:03:04.246]                         quietly = TRUE)
[18:03:04.246]                       if (has_future) {
[18:03:04.246]                         ns <- base::getNamespace("future")
[18:03:04.246]                         version <- ns[[".package"]][["version"]]
[18:03:04.246]                         if (is.null(version)) 
[18:03:04.246]                           version <- utils::packageVersion("future")
[18:03:04.246]                       }
[18:03:04.246]                       else {
[18:03:04.246]                         version <- NULL
[18:03:04.246]                       }
[18:03:04.246]                       if (!has_future || version < "1.8.0") {
[18:03:04.246]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.246]                           "", base::R.version$version.string), 
[18:03:04.246]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.246]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.246]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.246]                             "release", "version")], collapse = " "), 
[18:03:04.246]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.246]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.246]                           info)
[18:03:04.246]                         info <- base::paste(info, collapse = "; ")
[18:03:04.246]                         if (!has_future) {
[18:03:04.246]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.246]                             info)
[18:03:04.246]                         }
[18:03:04.246]                         else {
[18:03:04.246]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.246]                             info, version)
[18:03:04.246]                         }
[18:03:04.246]                         base::stop(msg)
[18:03:04.246]                       }
[18:03:04.246]                     })
[18:03:04.246]                   }
[18:03:04.246]                   ...future.strategy.old <- future::plan("list")
[18:03:04.246]                   options(future.plan = NULL)
[18:03:04.246]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.246]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.246]                 }
[18:03:04.246]                 ...future.workdir <- getwd()
[18:03:04.246]             }
[18:03:04.246]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.246]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.246]         }
[18:03:04.246]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.246]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.246]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.246]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.246]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.246]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.246]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.246]             base::names(...future.oldOptions))
[18:03:04.246]     }
[18:03:04.246]     if (FALSE) {
[18:03:04.246]     }
[18:03:04.246]     else {
[18:03:04.246]         if (TRUE) {
[18:03:04.246]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.246]                 open = "w")
[18:03:04.246]         }
[18:03:04.246]         else {
[18:03:04.246]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.246]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.246]         }
[18:03:04.246]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.246]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.246]             base::sink(type = "output", split = FALSE)
[18:03:04.246]             base::close(...future.stdout)
[18:03:04.246]         }, add = TRUE)
[18:03:04.246]     }
[18:03:04.246]     ...future.frame <- base::sys.nframe()
[18:03:04.246]     ...future.conditions <- base::list()
[18:03:04.246]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.246]     if (FALSE) {
[18:03:04.246]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.246]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.246]     }
[18:03:04.246]     ...future.result <- base::tryCatch({
[18:03:04.246]         base::withCallingHandlers({
[18:03:04.246]             ...future.value <- base::withVisible(base::local({
[18:03:04.246]                 42L
[18:03:04.246]                 stop("Woops")
[18:03:04.246]             }))
[18:03:04.246]             future::FutureResult(value = ...future.value$value, 
[18:03:04.246]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.246]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.246]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.246]                     ...future.globalenv.names))
[18:03:04.246]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.246]         }, condition = base::local({
[18:03:04.246]             c <- base::c
[18:03:04.246]             inherits <- base::inherits
[18:03:04.246]             invokeRestart <- base::invokeRestart
[18:03:04.246]             length <- base::length
[18:03:04.246]             list <- base::list
[18:03:04.246]             seq.int <- base::seq.int
[18:03:04.246]             signalCondition <- base::signalCondition
[18:03:04.246]             sys.calls <- base::sys.calls
[18:03:04.246]             `[[` <- base::`[[`
[18:03:04.246]             `+` <- base::`+`
[18:03:04.246]             `<<-` <- base::`<<-`
[18:03:04.246]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.246]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.246]                   3L)]
[18:03:04.246]             }
[18:03:04.246]             function(cond) {
[18:03:04.246]                 is_error <- inherits(cond, "error")
[18:03:04.246]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.246]                   NULL)
[18:03:04.246]                 if (is_error) {
[18:03:04.246]                   sessionInformation <- function() {
[18:03:04.246]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.246]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.246]                       search = base::search(), system = base::Sys.info())
[18:03:04.246]                   }
[18:03:04.246]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.246]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.246]                     cond$call), session = sessionInformation(), 
[18:03:04.246]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.246]                   signalCondition(cond)
[18:03:04.246]                 }
[18:03:04.246]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.246]                 "immediateCondition"))) {
[18:03:04.246]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.246]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.246]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.246]                   if (TRUE && !signal) {
[18:03:04.246]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.246]                     {
[18:03:04.246]                       inherits <- base::inherits
[18:03:04.246]                       invokeRestart <- base::invokeRestart
[18:03:04.246]                       is.null <- base::is.null
[18:03:04.246]                       muffled <- FALSE
[18:03:04.246]                       if (inherits(cond, "message")) {
[18:03:04.246]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.246]                         if (muffled) 
[18:03:04.246]                           invokeRestart("muffleMessage")
[18:03:04.246]                       }
[18:03:04.246]                       else if (inherits(cond, "warning")) {
[18:03:04.246]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.246]                         if (muffled) 
[18:03:04.246]                           invokeRestart("muffleWarning")
[18:03:04.246]                       }
[18:03:04.246]                       else if (inherits(cond, "condition")) {
[18:03:04.246]                         if (!is.null(pattern)) {
[18:03:04.246]                           computeRestarts <- base::computeRestarts
[18:03:04.246]                           grepl <- base::grepl
[18:03:04.246]                           restarts <- computeRestarts(cond)
[18:03:04.246]                           for (restart in restarts) {
[18:03:04.246]                             name <- restart$name
[18:03:04.246]                             if (is.null(name)) 
[18:03:04.246]                               next
[18:03:04.246]                             if (!grepl(pattern, name)) 
[18:03:04.246]                               next
[18:03:04.246]                             invokeRestart(restart)
[18:03:04.246]                             muffled <- TRUE
[18:03:04.246]                             break
[18:03:04.246]                           }
[18:03:04.246]                         }
[18:03:04.246]                       }
[18:03:04.246]                       invisible(muffled)
[18:03:04.246]                     }
[18:03:04.246]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.246]                   }
[18:03:04.246]                 }
[18:03:04.246]                 else {
[18:03:04.246]                   if (TRUE) {
[18:03:04.246]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.246]                     {
[18:03:04.246]                       inherits <- base::inherits
[18:03:04.246]                       invokeRestart <- base::invokeRestart
[18:03:04.246]                       is.null <- base::is.null
[18:03:04.246]                       muffled <- FALSE
[18:03:04.246]                       if (inherits(cond, "message")) {
[18:03:04.246]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.246]                         if (muffled) 
[18:03:04.246]                           invokeRestart("muffleMessage")
[18:03:04.246]                       }
[18:03:04.246]                       else if (inherits(cond, "warning")) {
[18:03:04.246]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.246]                         if (muffled) 
[18:03:04.246]                           invokeRestart("muffleWarning")
[18:03:04.246]                       }
[18:03:04.246]                       else if (inherits(cond, "condition")) {
[18:03:04.246]                         if (!is.null(pattern)) {
[18:03:04.246]                           computeRestarts <- base::computeRestarts
[18:03:04.246]                           grepl <- base::grepl
[18:03:04.246]                           restarts <- computeRestarts(cond)
[18:03:04.246]                           for (restart in restarts) {
[18:03:04.246]                             name <- restart$name
[18:03:04.246]                             if (is.null(name)) 
[18:03:04.246]                               next
[18:03:04.246]                             if (!grepl(pattern, name)) 
[18:03:04.246]                               next
[18:03:04.246]                             invokeRestart(restart)
[18:03:04.246]                             muffled <- TRUE
[18:03:04.246]                             break
[18:03:04.246]                           }
[18:03:04.246]                         }
[18:03:04.246]                       }
[18:03:04.246]                       invisible(muffled)
[18:03:04.246]                     }
[18:03:04.246]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.246]                   }
[18:03:04.246]                 }
[18:03:04.246]             }
[18:03:04.246]         }))
[18:03:04.246]     }, error = function(ex) {
[18:03:04.246]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.246]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.246]                 ...future.rng), started = ...future.startTime, 
[18:03:04.246]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.246]             version = "1.8"), class = "FutureResult")
[18:03:04.246]     }, finally = {
[18:03:04.246]         if (!identical(...future.workdir, getwd())) 
[18:03:04.246]             setwd(...future.workdir)
[18:03:04.246]         {
[18:03:04.246]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.246]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.246]             }
[18:03:04.246]             base::options(...future.oldOptions)
[18:03:04.246]             if (.Platform$OS.type == "windows") {
[18:03:04.246]                 old_names <- names(...future.oldEnvVars)
[18:03:04.246]                 envs <- base::Sys.getenv()
[18:03:04.246]                 names <- names(envs)
[18:03:04.246]                 common <- intersect(names, old_names)
[18:03:04.246]                 added <- setdiff(names, old_names)
[18:03:04.246]                 removed <- setdiff(old_names, names)
[18:03:04.246]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.246]                   envs[common]]
[18:03:04.246]                 NAMES <- toupper(changed)
[18:03:04.246]                 args <- list()
[18:03:04.246]                 for (kk in seq_along(NAMES)) {
[18:03:04.246]                   name <- changed[[kk]]
[18:03:04.246]                   NAME <- NAMES[[kk]]
[18:03:04.246]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.246]                     next
[18:03:04.246]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.246]                 }
[18:03:04.246]                 NAMES <- toupper(added)
[18:03:04.246]                 for (kk in seq_along(NAMES)) {
[18:03:04.246]                   name <- added[[kk]]
[18:03:04.246]                   NAME <- NAMES[[kk]]
[18:03:04.246]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.246]                     next
[18:03:04.246]                   args[[name]] <- ""
[18:03:04.246]                 }
[18:03:04.246]                 NAMES <- toupper(removed)
[18:03:04.246]                 for (kk in seq_along(NAMES)) {
[18:03:04.246]                   name <- removed[[kk]]
[18:03:04.246]                   NAME <- NAMES[[kk]]
[18:03:04.246]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.246]                     next
[18:03:04.246]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.246]                 }
[18:03:04.246]                 if (length(args) > 0) 
[18:03:04.246]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.246]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.246]             }
[18:03:04.246]             else {
[18:03:04.246]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.246]             }
[18:03:04.246]             {
[18:03:04.246]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.246]                   0L) {
[18:03:04.246]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.246]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.246]                   base::options(opts)
[18:03:04.246]                 }
[18:03:04.246]                 {
[18:03:04.246]                   {
[18:03:04.246]                     NULL
[18:03:04.246]                     RNGkind("Mersenne-Twister")
[18:03:04.246]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.246]                       inherits = FALSE)
[18:03:04.246]                   }
[18:03:04.246]                   options(future.plan = NULL)
[18:03:04.246]                   if (is.na(NA_character_)) 
[18:03:04.246]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.246]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.246]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.246]                     .init = FALSE)
[18:03:04.246]                 }
[18:03:04.246]             }
[18:03:04.246]         }
[18:03:04.246]     })
[18:03:04.246]     if (TRUE) {
[18:03:04.246]         base::sink(type = "output", split = FALSE)
[18:03:04.246]         if (TRUE) {
[18:03:04.246]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.246]         }
[18:03:04.246]         else {
[18:03:04.246]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.246]         }
[18:03:04.246]         base::close(...future.stdout)
[18:03:04.246]         ...future.stdout <- NULL
[18:03:04.246]     }
[18:03:04.246]     ...future.result$conditions <- ...future.conditions
[18:03:04.246]     ...future.result$finished <- base::Sys.time()
[18:03:04.246]     ...future.result
[18:03:04.246] }
[18:03:04.250] plan(): Setting new future strategy stack:
[18:03:04.250] List of future strategies:
[18:03:04.250] 1. sequential:
[18:03:04.250]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.250]    - tweaked: FALSE
[18:03:04.250]    - call: NULL
[18:03:04.251] plan(): nbrOfWorkers() = 1
[18:03:04.253] plan(): Setting new future strategy stack:
[18:03:04.253] List of future strategies:
[18:03:04.253] 1. sequential:
[18:03:04.253]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.253]    - tweaked: FALSE
[18:03:04.253]    - call: future::plan("sequential")
[18:03:04.255] plan(): nbrOfWorkers() = 1
[18:03:04.255] SequentialFuture started (and completed)
[18:03:04.255] signalConditions() ...
[18:03:04.255]  - include = ‘immediateCondition’
[18:03:04.256]  - exclude = 
[18:03:04.256]  - resignal = FALSE
[18:03:04.256]  - Number of conditions: 1
[18:03:04.256] signalConditions() ... done
[18:03:04.256] - Launch lazy future ... done
[18:03:04.257] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[18:03:04.257] getGlobalsAndPackages() ...
[18:03:04.257] Searching for globals...
[18:03:04.260] - globals found: [2] ‘{’, ‘stop’
[18:03:04.260] Searching for globals ... DONE
[18:03:04.260] Resolving globals: FALSE
[18:03:04.261] 
[18:03:04.261] 
[18:03:04.261] getGlobalsAndPackages() ... DONE
[18:03:04.262] run() for ‘Future’ ...
[18:03:04.262] - state: ‘created’
[18:03:04.262] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.263] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.263] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.263]   - Field: ‘label’
[18:03:04.263]   - Field: ‘local’
[18:03:04.264]   - Field: ‘owner’
[18:03:04.264]   - Field: ‘envir’
[18:03:04.264]   - Field: ‘packages’
[18:03:04.264]   - Field: ‘gc’
[18:03:04.265]   - Field: ‘conditions’
[18:03:04.265]   - Field: ‘expr’
[18:03:04.265]   - Field: ‘uuid’
[18:03:04.265]   - Field: ‘seed’
[18:03:04.265]   - Field: ‘version’
[18:03:04.266]   - Field: ‘result’
[18:03:04.266]   - Field: ‘asynchronous’
[18:03:04.266]   - Field: ‘calls’
[18:03:04.266]   - Field: ‘globals’
[18:03:04.266]   - Field: ‘stdout’
[18:03:04.267]   - Field: ‘earlySignal’
[18:03:04.267]   - Field: ‘lazy’
[18:03:04.267]   - Field: ‘state’
[18:03:04.267] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.267] - Launch lazy future ...
[18:03:04.268] Packages needed by the future expression (n = 0): <none>
[18:03:04.269] Packages needed by future strategies (n = 0): <none>
[18:03:04.269] {
[18:03:04.269]     {
[18:03:04.269]         {
[18:03:04.269]             ...future.startTime <- base::Sys.time()
[18:03:04.269]             {
[18:03:04.269]                 {
[18:03:04.269]                   {
[18:03:04.269]                     base::local({
[18:03:04.269]                       has_future <- base::requireNamespace("future", 
[18:03:04.269]                         quietly = TRUE)
[18:03:04.269]                       if (has_future) {
[18:03:04.269]                         ns <- base::getNamespace("future")
[18:03:04.269]                         version <- ns[[".package"]][["version"]]
[18:03:04.269]                         if (is.null(version)) 
[18:03:04.269]                           version <- utils::packageVersion("future")
[18:03:04.269]                       }
[18:03:04.269]                       else {
[18:03:04.269]                         version <- NULL
[18:03:04.269]                       }
[18:03:04.269]                       if (!has_future || version < "1.8.0") {
[18:03:04.269]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.269]                           "", base::R.version$version.string), 
[18:03:04.269]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.269]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.269]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.269]                             "release", "version")], collapse = " "), 
[18:03:04.269]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.269]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.269]                           info)
[18:03:04.269]                         info <- base::paste(info, collapse = "; ")
[18:03:04.269]                         if (!has_future) {
[18:03:04.269]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.269]                             info)
[18:03:04.269]                         }
[18:03:04.269]                         else {
[18:03:04.269]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.269]                             info, version)
[18:03:04.269]                         }
[18:03:04.269]                         base::stop(msg)
[18:03:04.269]                       }
[18:03:04.269]                     })
[18:03:04.269]                   }
[18:03:04.269]                   ...future.strategy.old <- future::plan("list")
[18:03:04.269]                   options(future.plan = NULL)
[18:03:04.269]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.269]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.269]                 }
[18:03:04.269]                 ...future.workdir <- getwd()
[18:03:04.269]             }
[18:03:04.269]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.269]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.269]         }
[18:03:04.269]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.269]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.269]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.269]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.269]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.269]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.269]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.269]             base::names(...future.oldOptions))
[18:03:04.269]     }
[18:03:04.269]     if (FALSE) {
[18:03:04.269]     }
[18:03:04.269]     else {
[18:03:04.269]         if (TRUE) {
[18:03:04.269]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.269]                 open = "w")
[18:03:04.269]         }
[18:03:04.269]         else {
[18:03:04.269]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.269]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.269]         }
[18:03:04.269]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.269]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.269]             base::sink(type = "output", split = FALSE)
[18:03:04.269]             base::close(...future.stdout)
[18:03:04.269]         }, add = TRUE)
[18:03:04.269]     }
[18:03:04.269]     ...future.frame <- base::sys.nframe()
[18:03:04.269]     ...future.conditions <- base::list()
[18:03:04.269]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.269]     if (FALSE) {
[18:03:04.269]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.269]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.269]     }
[18:03:04.269]     ...future.result <- base::tryCatch({
[18:03:04.269]         base::withCallingHandlers({
[18:03:04.269]             ...future.value <- base::withVisible(base::local({
[18:03:04.269]                 42L
[18:03:04.269]                 stop("Woops")
[18:03:04.269]             }))
[18:03:04.269]             future::FutureResult(value = ...future.value$value, 
[18:03:04.269]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.269]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.269]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.269]                     ...future.globalenv.names))
[18:03:04.269]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.269]         }, condition = base::local({
[18:03:04.269]             c <- base::c
[18:03:04.269]             inherits <- base::inherits
[18:03:04.269]             invokeRestart <- base::invokeRestart
[18:03:04.269]             length <- base::length
[18:03:04.269]             list <- base::list
[18:03:04.269]             seq.int <- base::seq.int
[18:03:04.269]             signalCondition <- base::signalCondition
[18:03:04.269]             sys.calls <- base::sys.calls
[18:03:04.269]             `[[` <- base::`[[`
[18:03:04.269]             `+` <- base::`+`
[18:03:04.269]             `<<-` <- base::`<<-`
[18:03:04.269]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.269]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.269]                   3L)]
[18:03:04.269]             }
[18:03:04.269]             function(cond) {
[18:03:04.269]                 is_error <- inherits(cond, "error")
[18:03:04.269]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.269]                   NULL)
[18:03:04.269]                 if (is_error) {
[18:03:04.269]                   sessionInformation <- function() {
[18:03:04.269]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.269]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.269]                       search = base::search(), system = base::Sys.info())
[18:03:04.269]                   }
[18:03:04.269]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.269]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.269]                     cond$call), session = sessionInformation(), 
[18:03:04.269]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.269]                   signalCondition(cond)
[18:03:04.269]                 }
[18:03:04.269]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.269]                 "immediateCondition"))) {
[18:03:04.269]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.269]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.269]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.269]                   if (TRUE && !signal) {
[18:03:04.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.269]                     {
[18:03:04.269]                       inherits <- base::inherits
[18:03:04.269]                       invokeRestart <- base::invokeRestart
[18:03:04.269]                       is.null <- base::is.null
[18:03:04.269]                       muffled <- FALSE
[18:03:04.269]                       if (inherits(cond, "message")) {
[18:03:04.269]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.269]                         if (muffled) 
[18:03:04.269]                           invokeRestart("muffleMessage")
[18:03:04.269]                       }
[18:03:04.269]                       else if (inherits(cond, "warning")) {
[18:03:04.269]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.269]                         if (muffled) 
[18:03:04.269]                           invokeRestart("muffleWarning")
[18:03:04.269]                       }
[18:03:04.269]                       else if (inherits(cond, "condition")) {
[18:03:04.269]                         if (!is.null(pattern)) {
[18:03:04.269]                           computeRestarts <- base::computeRestarts
[18:03:04.269]                           grepl <- base::grepl
[18:03:04.269]                           restarts <- computeRestarts(cond)
[18:03:04.269]                           for (restart in restarts) {
[18:03:04.269]                             name <- restart$name
[18:03:04.269]                             if (is.null(name)) 
[18:03:04.269]                               next
[18:03:04.269]                             if (!grepl(pattern, name)) 
[18:03:04.269]                               next
[18:03:04.269]                             invokeRestart(restart)
[18:03:04.269]                             muffled <- TRUE
[18:03:04.269]                             break
[18:03:04.269]                           }
[18:03:04.269]                         }
[18:03:04.269]                       }
[18:03:04.269]                       invisible(muffled)
[18:03:04.269]                     }
[18:03:04.269]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.269]                   }
[18:03:04.269]                 }
[18:03:04.269]                 else {
[18:03:04.269]                   if (TRUE) {
[18:03:04.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.269]                     {
[18:03:04.269]                       inherits <- base::inherits
[18:03:04.269]                       invokeRestart <- base::invokeRestart
[18:03:04.269]                       is.null <- base::is.null
[18:03:04.269]                       muffled <- FALSE
[18:03:04.269]                       if (inherits(cond, "message")) {
[18:03:04.269]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.269]                         if (muffled) 
[18:03:04.269]                           invokeRestart("muffleMessage")
[18:03:04.269]                       }
[18:03:04.269]                       else if (inherits(cond, "warning")) {
[18:03:04.269]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.269]                         if (muffled) 
[18:03:04.269]                           invokeRestart("muffleWarning")
[18:03:04.269]                       }
[18:03:04.269]                       else if (inherits(cond, "condition")) {
[18:03:04.269]                         if (!is.null(pattern)) {
[18:03:04.269]                           computeRestarts <- base::computeRestarts
[18:03:04.269]                           grepl <- base::grepl
[18:03:04.269]                           restarts <- computeRestarts(cond)
[18:03:04.269]                           for (restart in restarts) {
[18:03:04.269]                             name <- restart$name
[18:03:04.269]                             if (is.null(name)) 
[18:03:04.269]                               next
[18:03:04.269]                             if (!grepl(pattern, name)) 
[18:03:04.269]                               next
[18:03:04.269]                             invokeRestart(restart)
[18:03:04.269]                             muffled <- TRUE
[18:03:04.269]                             break
[18:03:04.269]                           }
[18:03:04.269]                         }
[18:03:04.269]                       }
[18:03:04.269]                       invisible(muffled)
[18:03:04.269]                     }
[18:03:04.269]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.269]                   }
[18:03:04.269]                 }
[18:03:04.269]             }
[18:03:04.269]         }))
[18:03:04.269]     }, error = function(ex) {
[18:03:04.269]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.269]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.269]                 ...future.rng), started = ...future.startTime, 
[18:03:04.269]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.269]             version = "1.8"), class = "FutureResult")
[18:03:04.269]     }, finally = {
[18:03:04.269]         if (!identical(...future.workdir, getwd())) 
[18:03:04.269]             setwd(...future.workdir)
[18:03:04.269]         {
[18:03:04.269]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.269]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.269]             }
[18:03:04.269]             base::options(...future.oldOptions)
[18:03:04.269]             if (.Platform$OS.type == "windows") {
[18:03:04.269]                 old_names <- names(...future.oldEnvVars)
[18:03:04.269]                 envs <- base::Sys.getenv()
[18:03:04.269]                 names <- names(envs)
[18:03:04.269]                 common <- intersect(names, old_names)
[18:03:04.269]                 added <- setdiff(names, old_names)
[18:03:04.269]                 removed <- setdiff(old_names, names)
[18:03:04.269]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.269]                   envs[common]]
[18:03:04.269]                 NAMES <- toupper(changed)
[18:03:04.269]                 args <- list()
[18:03:04.269]                 for (kk in seq_along(NAMES)) {
[18:03:04.269]                   name <- changed[[kk]]
[18:03:04.269]                   NAME <- NAMES[[kk]]
[18:03:04.269]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.269]                     next
[18:03:04.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.269]                 }
[18:03:04.269]                 NAMES <- toupper(added)
[18:03:04.269]                 for (kk in seq_along(NAMES)) {
[18:03:04.269]                   name <- added[[kk]]
[18:03:04.269]                   NAME <- NAMES[[kk]]
[18:03:04.269]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.269]                     next
[18:03:04.269]                   args[[name]] <- ""
[18:03:04.269]                 }
[18:03:04.269]                 NAMES <- toupper(removed)
[18:03:04.269]                 for (kk in seq_along(NAMES)) {
[18:03:04.269]                   name <- removed[[kk]]
[18:03:04.269]                   NAME <- NAMES[[kk]]
[18:03:04.269]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.269]                     next
[18:03:04.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.269]                 }
[18:03:04.269]                 if (length(args) > 0) 
[18:03:04.269]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.269]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.269]             }
[18:03:04.269]             else {
[18:03:04.269]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.269]             }
[18:03:04.269]             {
[18:03:04.269]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.269]                   0L) {
[18:03:04.269]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.269]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.269]                   base::options(opts)
[18:03:04.269]                 }
[18:03:04.269]                 {
[18:03:04.269]                   {
[18:03:04.269]                     NULL
[18:03:04.269]                     RNGkind("Mersenne-Twister")
[18:03:04.269]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.269]                       inherits = FALSE)
[18:03:04.269]                   }
[18:03:04.269]                   options(future.plan = NULL)
[18:03:04.269]                   if (is.na(NA_character_)) 
[18:03:04.269]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.269]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.269]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.269]                     .init = FALSE)
[18:03:04.269]                 }
[18:03:04.269]             }
[18:03:04.269]         }
[18:03:04.269]     })
[18:03:04.269]     if (TRUE) {
[18:03:04.269]         base::sink(type = "output", split = FALSE)
[18:03:04.269]         if (TRUE) {
[18:03:04.269]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.269]         }
[18:03:04.269]         else {
[18:03:04.269]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.269]         }
[18:03:04.269]         base::close(...future.stdout)
[18:03:04.269]         ...future.stdout <- NULL
[18:03:04.269]     }
[18:03:04.269]     ...future.result$conditions <- ...future.conditions
[18:03:04.269]     ...future.result$finished <- base::Sys.time()
[18:03:04.269]     ...future.result
[18:03:04.269] }
[18:03:04.273] plan(): Setting new future strategy stack:
[18:03:04.273] List of future strategies:
[18:03:04.273] 1. sequential:
[18:03:04.273]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.273]    - tweaked: FALSE
[18:03:04.273]    - call: NULL
[18:03:04.275] plan(): nbrOfWorkers() = 1
[18:03:04.276] plan(): Setting new future strategy stack:
[18:03:04.277] List of future strategies:
[18:03:04.277] 1. sequential:
[18:03:04.277]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.277]    - tweaked: FALSE
[18:03:04.277]    - call: future::plan("sequential")
[18:03:04.278] plan(): nbrOfWorkers() = 1
[18:03:04.278] SequentialFuture started (and completed)
[18:03:04.278] signalConditions() ...
[18:03:04.279]  - include = ‘immediateCondition’
[18:03:04.279]  - exclude = 
[18:03:04.279]  - resignal = FALSE
[18:03:04.279]  - Number of conditions: 1
[18:03:04.279] signalConditions() ... done
[18:03:04.280] - Launch lazy future ... done
[18:03:04.280] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[18:03:04.281] resolved() for ‘SequentialFuture’ ...
[18:03:04.281] - state: ‘finished’
[18:03:04.281] - run: TRUE
[18:03:04.281] - result: ‘FutureResult’
[18:03:04.281] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[18:03:04.286] getGlobalsAndPackages() ...
[18:03:04.288] Searching for globals...
[18:03:04.292] - globals found: [2] ‘{’, ‘stop’
[18:03:04.293] Searching for globals ... DONE
[18:03:04.295] Resolving globals: FALSE
[18:03:04.295] 
[18:03:04.296] 
[18:03:04.296] getGlobalsAndPackages() ... DONE
[18:03:04.296] run() for ‘Future’ ...
[18:03:04.299] - state: ‘created’
[18:03:04.299] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.300] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.300] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.300]   - Field: ‘label’
[18:03:04.301]   - Field: ‘local’
[18:03:04.303]   - Field: ‘owner’
[18:03:04.303]   - Field: ‘envir’
[18:03:04.303]   - Field: ‘packages’
[18:03:04.304]   - Field: ‘gc’
[18:03:04.304]   - Field: ‘conditions’
[18:03:04.304]   - Field: ‘expr’
[18:03:04.304]   - Field: ‘uuid’
[18:03:04.305]   - Field: ‘seed’
[18:03:04.307]   - Field: ‘version’
[18:03:04.307]   - Field: ‘result’
[18:03:04.308]   - Field: ‘asynchronous’
[18:03:04.308]   - Field: ‘calls’
[18:03:04.308]   - Field: ‘globals’
[18:03:04.308]   - Field: ‘stdout’
[18:03:04.308]   - Field: ‘earlySignal’
[18:03:04.309]   - Field: ‘lazy’
[18:03:04.311]   - Field: ‘state’
[18:03:04.311] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.312] - Launch lazy future ...
[18:03:04.312] Packages needed by the future expression (n = 0): <none>
[18:03:04.312] Packages needed by future strategies (n = 0): <none>
[18:03:04.315] {
[18:03:04.315]     {
[18:03:04.315]         {
[18:03:04.315]             ...future.startTime <- base::Sys.time()
[18:03:04.315]             {
[18:03:04.315]                 {
[18:03:04.315]                   {
[18:03:04.315]                     base::local({
[18:03:04.315]                       has_future <- base::requireNamespace("future", 
[18:03:04.315]                         quietly = TRUE)
[18:03:04.315]                       if (has_future) {
[18:03:04.315]                         ns <- base::getNamespace("future")
[18:03:04.315]                         version <- ns[[".package"]][["version"]]
[18:03:04.315]                         if (is.null(version)) 
[18:03:04.315]                           version <- utils::packageVersion("future")
[18:03:04.315]                       }
[18:03:04.315]                       else {
[18:03:04.315]                         version <- NULL
[18:03:04.315]                       }
[18:03:04.315]                       if (!has_future || version < "1.8.0") {
[18:03:04.315]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.315]                           "", base::R.version$version.string), 
[18:03:04.315]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.315]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.315]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.315]                             "release", "version")], collapse = " "), 
[18:03:04.315]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.315]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.315]                           info)
[18:03:04.315]                         info <- base::paste(info, collapse = "; ")
[18:03:04.315]                         if (!has_future) {
[18:03:04.315]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.315]                             info)
[18:03:04.315]                         }
[18:03:04.315]                         else {
[18:03:04.315]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.315]                             info, version)
[18:03:04.315]                         }
[18:03:04.315]                         base::stop(msg)
[18:03:04.315]                       }
[18:03:04.315]                     })
[18:03:04.315]                   }
[18:03:04.315]                   ...future.strategy.old <- future::plan("list")
[18:03:04.315]                   options(future.plan = NULL)
[18:03:04.315]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.315]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.315]                 }
[18:03:04.315]                 ...future.workdir <- getwd()
[18:03:04.315]             }
[18:03:04.315]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.315]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.315]         }
[18:03:04.315]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.315]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.315]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.315]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.315]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.315]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.315]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.315]             base::names(...future.oldOptions))
[18:03:04.315]     }
[18:03:04.315]     if (FALSE) {
[18:03:04.315]     }
[18:03:04.315]     else {
[18:03:04.315]         if (TRUE) {
[18:03:04.315]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.315]                 open = "w")
[18:03:04.315]         }
[18:03:04.315]         else {
[18:03:04.315]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.315]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.315]         }
[18:03:04.315]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.315]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.315]             base::sink(type = "output", split = FALSE)
[18:03:04.315]             base::close(...future.stdout)
[18:03:04.315]         }, add = TRUE)
[18:03:04.315]     }
[18:03:04.315]     ...future.frame <- base::sys.nframe()
[18:03:04.315]     ...future.conditions <- base::list()
[18:03:04.315]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.315]     if (FALSE) {
[18:03:04.315]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.315]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.315]     }
[18:03:04.315]     ...future.result <- base::tryCatch({
[18:03:04.315]         base::withCallingHandlers({
[18:03:04.315]             ...future.value <- base::withVisible(base::local({
[18:03:04.315]                 42L
[18:03:04.315]                 stop("Woops")
[18:03:04.315]             }))
[18:03:04.315]             future::FutureResult(value = ...future.value$value, 
[18:03:04.315]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.315]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.315]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.315]                     ...future.globalenv.names))
[18:03:04.315]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.315]         }, condition = base::local({
[18:03:04.315]             c <- base::c
[18:03:04.315]             inherits <- base::inherits
[18:03:04.315]             invokeRestart <- base::invokeRestart
[18:03:04.315]             length <- base::length
[18:03:04.315]             list <- base::list
[18:03:04.315]             seq.int <- base::seq.int
[18:03:04.315]             signalCondition <- base::signalCondition
[18:03:04.315]             sys.calls <- base::sys.calls
[18:03:04.315]             `[[` <- base::`[[`
[18:03:04.315]             `+` <- base::`+`
[18:03:04.315]             `<<-` <- base::`<<-`
[18:03:04.315]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.315]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.315]                   3L)]
[18:03:04.315]             }
[18:03:04.315]             function(cond) {
[18:03:04.315]                 is_error <- inherits(cond, "error")
[18:03:04.315]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.315]                   NULL)
[18:03:04.315]                 if (is_error) {
[18:03:04.315]                   sessionInformation <- function() {
[18:03:04.315]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.315]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.315]                       search = base::search(), system = base::Sys.info())
[18:03:04.315]                   }
[18:03:04.315]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.315]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.315]                     cond$call), session = sessionInformation(), 
[18:03:04.315]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.315]                   signalCondition(cond)
[18:03:04.315]                 }
[18:03:04.315]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.315]                 "immediateCondition"))) {
[18:03:04.315]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.315]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.315]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.315]                   if (TRUE && !signal) {
[18:03:04.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.315]                     {
[18:03:04.315]                       inherits <- base::inherits
[18:03:04.315]                       invokeRestart <- base::invokeRestart
[18:03:04.315]                       is.null <- base::is.null
[18:03:04.315]                       muffled <- FALSE
[18:03:04.315]                       if (inherits(cond, "message")) {
[18:03:04.315]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.315]                         if (muffled) 
[18:03:04.315]                           invokeRestart("muffleMessage")
[18:03:04.315]                       }
[18:03:04.315]                       else if (inherits(cond, "warning")) {
[18:03:04.315]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.315]                         if (muffled) 
[18:03:04.315]                           invokeRestart("muffleWarning")
[18:03:04.315]                       }
[18:03:04.315]                       else if (inherits(cond, "condition")) {
[18:03:04.315]                         if (!is.null(pattern)) {
[18:03:04.315]                           computeRestarts <- base::computeRestarts
[18:03:04.315]                           grepl <- base::grepl
[18:03:04.315]                           restarts <- computeRestarts(cond)
[18:03:04.315]                           for (restart in restarts) {
[18:03:04.315]                             name <- restart$name
[18:03:04.315]                             if (is.null(name)) 
[18:03:04.315]                               next
[18:03:04.315]                             if (!grepl(pattern, name)) 
[18:03:04.315]                               next
[18:03:04.315]                             invokeRestart(restart)
[18:03:04.315]                             muffled <- TRUE
[18:03:04.315]                             break
[18:03:04.315]                           }
[18:03:04.315]                         }
[18:03:04.315]                       }
[18:03:04.315]                       invisible(muffled)
[18:03:04.315]                     }
[18:03:04.315]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.315]                   }
[18:03:04.315]                 }
[18:03:04.315]                 else {
[18:03:04.315]                   if (TRUE) {
[18:03:04.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.315]                     {
[18:03:04.315]                       inherits <- base::inherits
[18:03:04.315]                       invokeRestart <- base::invokeRestart
[18:03:04.315]                       is.null <- base::is.null
[18:03:04.315]                       muffled <- FALSE
[18:03:04.315]                       if (inherits(cond, "message")) {
[18:03:04.315]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.315]                         if (muffled) 
[18:03:04.315]                           invokeRestart("muffleMessage")
[18:03:04.315]                       }
[18:03:04.315]                       else if (inherits(cond, "warning")) {
[18:03:04.315]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.315]                         if (muffled) 
[18:03:04.315]                           invokeRestart("muffleWarning")
[18:03:04.315]                       }
[18:03:04.315]                       else if (inherits(cond, "condition")) {
[18:03:04.315]                         if (!is.null(pattern)) {
[18:03:04.315]                           computeRestarts <- base::computeRestarts
[18:03:04.315]                           grepl <- base::grepl
[18:03:04.315]                           restarts <- computeRestarts(cond)
[18:03:04.315]                           for (restart in restarts) {
[18:03:04.315]                             name <- restart$name
[18:03:04.315]                             if (is.null(name)) 
[18:03:04.315]                               next
[18:03:04.315]                             if (!grepl(pattern, name)) 
[18:03:04.315]                               next
[18:03:04.315]                             invokeRestart(restart)
[18:03:04.315]                             muffled <- TRUE
[18:03:04.315]                             break
[18:03:04.315]                           }
[18:03:04.315]                         }
[18:03:04.315]                       }
[18:03:04.315]                       invisible(muffled)
[18:03:04.315]                     }
[18:03:04.315]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.315]                   }
[18:03:04.315]                 }
[18:03:04.315]             }
[18:03:04.315]         }))
[18:03:04.315]     }, error = function(ex) {
[18:03:04.315]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.315]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.315]                 ...future.rng), started = ...future.startTime, 
[18:03:04.315]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.315]             version = "1.8"), class = "FutureResult")
[18:03:04.315]     }, finally = {
[18:03:04.315]         if (!identical(...future.workdir, getwd())) 
[18:03:04.315]             setwd(...future.workdir)
[18:03:04.315]         {
[18:03:04.315]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.315]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.315]             }
[18:03:04.315]             base::options(...future.oldOptions)
[18:03:04.315]             if (.Platform$OS.type == "windows") {
[18:03:04.315]                 old_names <- names(...future.oldEnvVars)
[18:03:04.315]                 envs <- base::Sys.getenv()
[18:03:04.315]                 names <- names(envs)
[18:03:04.315]                 common <- intersect(names, old_names)
[18:03:04.315]                 added <- setdiff(names, old_names)
[18:03:04.315]                 removed <- setdiff(old_names, names)
[18:03:04.315]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.315]                   envs[common]]
[18:03:04.315]                 NAMES <- toupper(changed)
[18:03:04.315]                 args <- list()
[18:03:04.315]                 for (kk in seq_along(NAMES)) {
[18:03:04.315]                   name <- changed[[kk]]
[18:03:04.315]                   NAME <- NAMES[[kk]]
[18:03:04.315]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.315]                     next
[18:03:04.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.315]                 }
[18:03:04.315]                 NAMES <- toupper(added)
[18:03:04.315]                 for (kk in seq_along(NAMES)) {
[18:03:04.315]                   name <- added[[kk]]
[18:03:04.315]                   NAME <- NAMES[[kk]]
[18:03:04.315]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.315]                     next
[18:03:04.315]                   args[[name]] <- ""
[18:03:04.315]                 }
[18:03:04.315]                 NAMES <- toupper(removed)
[18:03:04.315]                 for (kk in seq_along(NAMES)) {
[18:03:04.315]                   name <- removed[[kk]]
[18:03:04.315]                   NAME <- NAMES[[kk]]
[18:03:04.315]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.315]                     next
[18:03:04.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.315]                 }
[18:03:04.315]                 if (length(args) > 0) 
[18:03:04.315]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.315]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.315]             }
[18:03:04.315]             else {
[18:03:04.315]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.315]             }
[18:03:04.315]             {
[18:03:04.315]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.315]                   0L) {
[18:03:04.315]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.315]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.315]                   base::options(opts)
[18:03:04.315]                 }
[18:03:04.315]                 {
[18:03:04.315]                   {
[18:03:04.315]                     NULL
[18:03:04.315]                     RNGkind("Mersenne-Twister")
[18:03:04.315]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.315]                       inherits = FALSE)
[18:03:04.315]                   }
[18:03:04.315]                   options(future.plan = NULL)
[18:03:04.315]                   if (is.na(NA_character_)) 
[18:03:04.315]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.315]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.315]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.315]                     .init = FALSE)
[18:03:04.315]                 }
[18:03:04.315]             }
[18:03:04.315]         }
[18:03:04.315]     })
[18:03:04.315]     if (TRUE) {
[18:03:04.315]         base::sink(type = "output", split = FALSE)
[18:03:04.315]         if (TRUE) {
[18:03:04.315]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.315]         }
[18:03:04.315]         else {
[18:03:04.315]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.315]         }
[18:03:04.315]         base::close(...future.stdout)
[18:03:04.315]         ...future.stdout <- NULL
[18:03:04.315]     }
[18:03:04.315]     ...future.result$conditions <- ...future.conditions
[18:03:04.315]     ...future.result$finished <- base::Sys.time()
[18:03:04.315]     ...future.result
[18:03:04.315] }
[18:03:04.323] plan(): Setting new future strategy stack:
[18:03:04.323] List of future strategies:
[18:03:04.323] 1. sequential:
[18:03:04.323]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.323]    - tweaked: FALSE
[18:03:04.323]    - call: NULL
[18:03:04.324] plan(): nbrOfWorkers() = 1
[18:03:04.328] plan(): Setting new future strategy stack:
[18:03:04.329] List of future strategies:
[18:03:04.329] 1. sequential:
[18:03:04.329]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.329]    - tweaked: FALSE
[18:03:04.329]    - call: future::plan("sequential")
[18:03:04.331] plan(): nbrOfWorkers() = 1
[18:03:04.331] SequentialFuture started (and completed)
[18:03:04.331] signalConditions() ...
[18:03:04.331]  - include = ‘immediateCondition’
[18:03:04.332]  - exclude = 
[18:03:04.332]  - resignal = FALSE
[18:03:04.332]  - Number of conditions: 1
[18:03:04.332] signalConditions() ... done
[18:03:04.333] - Launch lazy future ... done
[18:03:04.333] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[18:03:04.334] getGlobalsAndPackages() ...
[18:03:04.334] Searching for globals...
[18:03:04.336] - globals found: [2] ‘{’, ‘stop’
[18:03:04.336] Searching for globals ... DONE
[18:03:04.337] Resolving globals: FALSE
[18:03:04.337] 
[18:03:04.337] 
[18:03:04.338] getGlobalsAndPackages() ... DONE
[18:03:04.338] run() for ‘Future’ ...
[18:03:04.338] - state: ‘created’
[18:03:04.339] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.339] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.339] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.340]   - Field: ‘label’
[18:03:04.340]   - Field: ‘local’
[18:03:04.340]   - Field: ‘owner’
[18:03:04.340]   - Field: ‘envir’
[18:03:04.341]   - Field: ‘packages’
[18:03:04.341]   - Field: ‘gc’
[18:03:04.341]   - Field: ‘conditions’
[18:03:04.341]   - Field: ‘expr’
[18:03:04.341]   - Field: ‘uuid’
[18:03:04.342]   - Field: ‘seed’
[18:03:04.342]   - Field: ‘version’
[18:03:04.342]   - Field: ‘result’
[18:03:04.342]   - Field: ‘asynchronous’
[18:03:04.342]   - Field: ‘calls’
[18:03:04.343]   - Field: ‘globals’
[18:03:04.343]   - Field: ‘stdout’
[18:03:04.343]   - Field: ‘earlySignal’
[18:03:04.343]   - Field: ‘lazy’
[18:03:04.343]   - Field: ‘state’
[18:03:04.344] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.344] - Launch lazy future ...
[18:03:04.344] Packages needed by the future expression (n = 0): <none>
[18:03:04.344] Packages needed by future strategies (n = 0): <none>
[18:03:04.345] {
[18:03:04.345]     {
[18:03:04.345]         {
[18:03:04.345]             ...future.startTime <- base::Sys.time()
[18:03:04.345]             {
[18:03:04.345]                 {
[18:03:04.345]                   {
[18:03:04.345]                     base::local({
[18:03:04.345]                       has_future <- base::requireNamespace("future", 
[18:03:04.345]                         quietly = TRUE)
[18:03:04.345]                       if (has_future) {
[18:03:04.345]                         ns <- base::getNamespace("future")
[18:03:04.345]                         version <- ns[[".package"]][["version"]]
[18:03:04.345]                         if (is.null(version)) 
[18:03:04.345]                           version <- utils::packageVersion("future")
[18:03:04.345]                       }
[18:03:04.345]                       else {
[18:03:04.345]                         version <- NULL
[18:03:04.345]                       }
[18:03:04.345]                       if (!has_future || version < "1.8.0") {
[18:03:04.345]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.345]                           "", base::R.version$version.string), 
[18:03:04.345]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.345]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.345]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.345]                             "release", "version")], collapse = " "), 
[18:03:04.345]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.345]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.345]                           info)
[18:03:04.345]                         info <- base::paste(info, collapse = "; ")
[18:03:04.345]                         if (!has_future) {
[18:03:04.345]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.345]                             info)
[18:03:04.345]                         }
[18:03:04.345]                         else {
[18:03:04.345]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.345]                             info, version)
[18:03:04.345]                         }
[18:03:04.345]                         base::stop(msg)
[18:03:04.345]                       }
[18:03:04.345]                     })
[18:03:04.345]                   }
[18:03:04.345]                   ...future.strategy.old <- future::plan("list")
[18:03:04.345]                   options(future.plan = NULL)
[18:03:04.345]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.345]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.345]                 }
[18:03:04.345]                 ...future.workdir <- getwd()
[18:03:04.345]             }
[18:03:04.345]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.345]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.345]         }
[18:03:04.345]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.345]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.345]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.345]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.345]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.345]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.345]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.345]             base::names(...future.oldOptions))
[18:03:04.345]     }
[18:03:04.345]     if (FALSE) {
[18:03:04.345]     }
[18:03:04.345]     else {
[18:03:04.345]         if (TRUE) {
[18:03:04.345]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.345]                 open = "w")
[18:03:04.345]         }
[18:03:04.345]         else {
[18:03:04.345]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.345]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.345]         }
[18:03:04.345]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.345]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.345]             base::sink(type = "output", split = FALSE)
[18:03:04.345]             base::close(...future.stdout)
[18:03:04.345]         }, add = TRUE)
[18:03:04.345]     }
[18:03:04.345]     ...future.frame <- base::sys.nframe()
[18:03:04.345]     ...future.conditions <- base::list()
[18:03:04.345]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.345]     if (FALSE) {
[18:03:04.345]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.345]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.345]     }
[18:03:04.345]     ...future.result <- base::tryCatch({
[18:03:04.345]         base::withCallingHandlers({
[18:03:04.345]             ...future.value <- base::withVisible(base::local({
[18:03:04.345]                 42L
[18:03:04.345]                 stop("Woops")
[18:03:04.345]             }))
[18:03:04.345]             future::FutureResult(value = ...future.value$value, 
[18:03:04.345]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.345]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.345]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.345]                     ...future.globalenv.names))
[18:03:04.345]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.345]         }, condition = base::local({
[18:03:04.345]             c <- base::c
[18:03:04.345]             inherits <- base::inherits
[18:03:04.345]             invokeRestart <- base::invokeRestart
[18:03:04.345]             length <- base::length
[18:03:04.345]             list <- base::list
[18:03:04.345]             seq.int <- base::seq.int
[18:03:04.345]             signalCondition <- base::signalCondition
[18:03:04.345]             sys.calls <- base::sys.calls
[18:03:04.345]             `[[` <- base::`[[`
[18:03:04.345]             `+` <- base::`+`
[18:03:04.345]             `<<-` <- base::`<<-`
[18:03:04.345]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.345]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.345]                   3L)]
[18:03:04.345]             }
[18:03:04.345]             function(cond) {
[18:03:04.345]                 is_error <- inherits(cond, "error")
[18:03:04.345]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.345]                   NULL)
[18:03:04.345]                 if (is_error) {
[18:03:04.345]                   sessionInformation <- function() {
[18:03:04.345]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.345]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.345]                       search = base::search(), system = base::Sys.info())
[18:03:04.345]                   }
[18:03:04.345]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.345]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.345]                     cond$call), session = sessionInformation(), 
[18:03:04.345]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.345]                   signalCondition(cond)
[18:03:04.345]                 }
[18:03:04.345]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.345]                 "immediateCondition"))) {
[18:03:04.345]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.345]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.345]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.345]                   if (TRUE && !signal) {
[18:03:04.345]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.345]                     {
[18:03:04.345]                       inherits <- base::inherits
[18:03:04.345]                       invokeRestart <- base::invokeRestart
[18:03:04.345]                       is.null <- base::is.null
[18:03:04.345]                       muffled <- FALSE
[18:03:04.345]                       if (inherits(cond, "message")) {
[18:03:04.345]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.345]                         if (muffled) 
[18:03:04.345]                           invokeRestart("muffleMessage")
[18:03:04.345]                       }
[18:03:04.345]                       else if (inherits(cond, "warning")) {
[18:03:04.345]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.345]                         if (muffled) 
[18:03:04.345]                           invokeRestart("muffleWarning")
[18:03:04.345]                       }
[18:03:04.345]                       else if (inherits(cond, "condition")) {
[18:03:04.345]                         if (!is.null(pattern)) {
[18:03:04.345]                           computeRestarts <- base::computeRestarts
[18:03:04.345]                           grepl <- base::grepl
[18:03:04.345]                           restarts <- computeRestarts(cond)
[18:03:04.345]                           for (restart in restarts) {
[18:03:04.345]                             name <- restart$name
[18:03:04.345]                             if (is.null(name)) 
[18:03:04.345]                               next
[18:03:04.345]                             if (!grepl(pattern, name)) 
[18:03:04.345]                               next
[18:03:04.345]                             invokeRestart(restart)
[18:03:04.345]                             muffled <- TRUE
[18:03:04.345]                             break
[18:03:04.345]                           }
[18:03:04.345]                         }
[18:03:04.345]                       }
[18:03:04.345]                       invisible(muffled)
[18:03:04.345]                     }
[18:03:04.345]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.345]                   }
[18:03:04.345]                 }
[18:03:04.345]                 else {
[18:03:04.345]                   if (TRUE) {
[18:03:04.345]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.345]                     {
[18:03:04.345]                       inherits <- base::inherits
[18:03:04.345]                       invokeRestart <- base::invokeRestart
[18:03:04.345]                       is.null <- base::is.null
[18:03:04.345]                       muffled <- FALSE
[18:03:04.345]                       if (inherits(cond, "message")) {
[18:03:04.345]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.345]                         if (muffled) 
[18:03:04.345]                           invokeRestart("muffleMessage")
[18:03:04.345]                       }
[18:03:04.345]                       else if (inherits(cond, "warning")) {
[18:03:04.345]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.345]                         if (muffled) 
[18:03:04.345]                           invokeRestart("muffleWarning")
[18:03:04.345]                       }
[18:03:04.345]                       else if (inherits(cond, "condition")) {
[18:03:04.345]                         if (!is.null(pattern)) {
[18:03:04.345]                           computeRestarts <- base::computeRestarts
[18:03:04.345]                           grepl <- base::grepl
[18:03:04.345]                           restarts <- computeRestarts(cond)
[18:03:04.345]                           for (restart in restarts) {
[18:03:04.345]                             name <- restart$name
[18:03:04.345]                             if (is.null(name)) 
[18:03:04.345]                               next
[18:03:04.345]                             if (!grepl(pattern, name)) 
[18:03:04.345]                               next
[18:03:04.345]                             invokeRestart(restart)
[18:03:04.345]                             muffled <- TRUE
[18:03:04.345]                             break
[18:03:04.345]                           }
[18:03:04.345]                         }
[18:03:04.345]                       }
[18:03:04.345]                       invisible(muffled)
[18:03:04.345]                     }
[18:03:04.345]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.345]                   }
[18:03:04.345]                 }
[18:03:04.345]             }
[18:03:04.345]         }))
[18:03:04.345]     }, error = function(ex) {
[18:03:04.345]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.345]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.345]                 ...future.rng), started = ...future.startTime, 
[18:03:04.345]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.345]             version = "1.8"), class = "FutureResult")
[18:03:04.345]     }, finally = {
[18:03:04.345]         if (!identical(...future.workdir, getwd())) 
[18:03:04.345]             setwd(...future.workdir)
[18:03:04.345]         {
[18:03:04.345]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.345]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.345]             }
[18:03:04.345]             base::options(...future.oldOptions)
[18:03:04.345]             if (.Platform$OS.type == "windows") {
[18:03:04.345]                 old_names <- names(...future.oldEnvVars)
[18:03:04.345]                 envs <- base::Sys.getenv()
[18:03:04.345]                 names <- names(envs)
[18:03:04.345]                 common <- intersect(names, old_names)
[18:03:04.345]                 added <- setdiff(names, old_names)
[18:03:04.345]                 removed <- setdiff(old_names, names)
[18:03:04.345]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.345]                   envs[common]]
[18:03:04.345]                 NAMES <- toupper(changed)
[18:03:04.345]                 args <- list()
[18:03:04.345]                 for (kk in seq_along(NAMES)) {
[18:03:04.345]                   name <- changed[[kk]]
[18:03:04.345]                   NAME <- NAMES[[kk]]
[18:03:04.345]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.345]                     next
[18:03:04.345]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.345]                 }
[18:03:04.345]                 NAMES <- toupper(added)
[18:03:04.345]                 for (kk in seq_along(NAMES)) {
[18:03:04.345]                   name <- added[[kk]]
[18:03:04.345]                   NAME <- NAMES[[kk]]
[18:03:04.345]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.345]                     next
[18:03:04.345]                   args[[name]] <- ""
[18:03:04.345]                 }
[18:03:04.345]                 NAMES <- toupper(removed)
[18:03:04.345]                 for (kk in seq_along(NAMES)) {
[18:03:04.345]                   name <- removed[[kk]]
[18:03:04.345]                   NAME <- NAMES[[kk]]
[18:03:04.345]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.345]                     next
[18:03:04.345]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.345]                 }
[18:03:04.345]                 if (length(args) > 0) 
[18:03:04.345]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.345]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.345]             }
[18:03:04.345]             else {
[18:03:04.345]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.345]             }
[18:03:04.345]             {
[18:03:04.345]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.345]                   0L) {
[18:03:04.345]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.345]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.345]                   base::options(opts)
[18:03:04.345]                 }
[18:03:04.345]                 {
[18:03:04.345]                   {
[18:03:04.345]                     NULL
[18:03:04.345]                     RNGkind("Mersenne-Twister")
[18:03:04.345]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.345]                       inherits = FALSE)
[18:03:04.345]                   }
[18:03:04.345]                   options(future.plan = NULL)
[18:03:04.345]                   if (is.na(NA_character_)) 
[18:03:04.345]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.345]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.345]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.345]                     .init = FALSE)
[18:03:04.345]                 }
[18:03:04.345]             }
[18:03:04.345]         }
[18:03:04.345]     })
[18:03:04.345]     if (TRUE) {
[18:03:04.345]         base::sink(type = "output", split = FALSE)
[18:03:04.345]         if (TRUE) {
[18:03:04.345]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.345]         }
[18:03:04.345]         else {
[18:03:04.345]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.345]         }
[18:03:04.345]         base::close(...future.stdout)
[18:03:04.345]         ...future.stdout <- NULL
[18:03:04.345]     }
[18:03:04.345]     ...future.result$conditions <- ...future.conditions
[18:03:04.345]     ...future.result$finished <- base::Sys.time()
[18:03:04.345]     ...future.result
[18:03:04.345] }
[18:03:04.352] plan(): Setting new future strategy stack:
[18:03:04.353] List of future strategies:
[18:03:04.353] 1. sequential:
[18:03:04.353]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.353]    - tweaked: FALSE
[18:03:04.353]    - call: NULL
[18:03:04.354] plan(): nbrOfWorkers() = 1
[18:03:04.356] plan(): Setting new future strategy stack:
[18:03:04.356] List of future strategies:
[18:03:04.356] 1. sequential:
[18:03:04.356]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.356]    - tweaked: FALSE
[18:03:04.356]    - call: future::plan("sequential")
[18:03:04.357] plan(): nbrOfWorkers() = 1
[18:03:04.357] SequentialFuture started (and completed)
[18:03:04.358] signalConditions() ...
[18:03:04.358]  - include = ‘immediateCondition’
[18:03:04.358]  - exclude = 
[18:03:04.358]  - resignal = FALSE
[18:03:04.359]  - Number of conditions: 1
[18:03:04.359] signalConditions() ... done
[18:03:04.359] - Launch lazy future ... done
[18:03:04.359] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[18:03:04.360] resolved() for ‘SequentialFuture’ ...
[18:03:04.360] - state: ‘finished’
[18:03:04.360] - run: TRUE
[18:03:04.361] - result: ‘FutureResult’
[18:03:04.361] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[18:03:04.362] getGlobalsAndPackages() ...
[18:03:04.362] Searching for globals...
[18:03:04.364] - globals found: [2] ‘{’, ‘stop’
[18:03:04.364] Searching for globals ... DONE
[18:03:04.365] Resolving globals: FALSE
[18:03:04.365] 
[18:03:04.366] 
[18:03:04.366] getGlobalsAndPackages() ... DONE
[18:03:04.366] run() for ‘Future’ ...
[18:03:04.367] - state: ‘created’
[18:03:04.367] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.367] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.368] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.368]   - Field: ‘label’
[18:03:04.368]   - Field: ‘local’
[18:03:04.368]   - Field: ‘owner’
[18:03:04.369]   - Field: ‘envir’
[18:03:04.369]   - Field: ‘packages’
[18:03:04.369]   - Field: ‘gc’
[18:03:04.370]   - Field: ‘conditions’
[18:03:04.370]   - Field: ‘expr’
[18:03:04.370]   - Field: ‘uuid’
[18:03:04.370]   - Field: ‘seed’
[18:03:04.370]   - Field: ‘version’
[18:03:04.371]   - Field: ‘result’
[18:03:04.371]   - Field: ‘asynchronous’
[18:03:04.371]   - Field: ‘calls’
[18:03:04.371]   - Field: ‘globals’
[18:03:04.371]   - Field: ‘stdout’
[18:03:04.372]   - Field: ‘earlySignal’
[18:03:04.372]   - Field: ‘lazy’
[18:03:04.372]   - Field: ‘state’
[18:03:04.372] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.372] - Launch lazy future ...
[18:03:04.373] Packages needed by the future expression (n = 0): <none>
[18:03:04.373] Packages needed by future strategies (n = 0): <none>
[18:03:04.374] {
[18:03:04.374]     {
[18:03:04.374]         {
[18:03:04.374]             ...future.startTime <- base::Sys.time()
[18:03:04.374]             {
[18:03:04.374]                 {
[18:03:04.374]                   {
[18:03:04.374]                     base::local({
[18:03:04.374]                       has_future <- base::requireNamespace("future", 
[18:03:04.374]                         quietly = TRUE)
[18:03:04.374]                       if (has_future) {
[18:03:04.374]                         ns <- base::getNamespace("future")
[18:03:04.374]                         version <- ns[[".package"]][["version"]]
[18:03:04.374]                         if (is.null(version)) 
[18:03:04.374]                           version <- utils::packageVersion("future")
[18:03:04.374]                       }
[18:03:04.374]                       else {
[18:03:04.374]                         version <- NULL
[18:03:04.374]                       }
[18:03:04.374]                       if (!has_future || version < "1.8.0") {
[18:03:04.374]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.374]                           "", base::R.version$version.string), 
[18:03:04.374]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.374]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.374]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.374]                             "release", "version")], collapse = " "), 
[18:03:04.374]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.374]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.374]                           info)
[18:03:04.374]                         info <- base::paste(info, collapse = "; ")
[18:03:04.374]                         if (!has_future) {
[18:03:04.374]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.374]                             info)
[18:03:04.374]                         }
[18:03:04.374]                         else {
[18:03:04.374]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.374]                             info, version)
[18:03:04.374]                         }
[18:03:04.374]                         base::stop(msg)
[18:03:04.374]                       }
[18:03:04.374]                     })
[18:03:04.374]                   }
[18:03:04.374]                   ...future.strategy.old <- future::plan("list")
[18:03:04.374]                   options(future.plan = NULL)
[18:03:04.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.374]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.374]                 }
[18:03:04.374]                 ...future.workdir <- getwd()
[18:03:04.374]             }
[18:03:04.374]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.374]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.374]         }
[18:03:04.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.374]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.374]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.374]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.374]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.374]             base::names(...future.oldOptions))
[18:03:04.374]     }
[18:03:04.374]     if (FALSE) {
[18:03:04.374]     }
[18:03:04.374]     else {
[18:03:04.374]         if (TRUE) {
[18:03:04.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.374]                 open = "w")
[18:03:04.374]         }
[18:03:04.374]         else {
[18:03:04.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.374]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.374]         }
[18:03:04.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.374]             base::sink(type = "output", split = FALSE)
[18:03:04.374]             base::close(...future.stdout)
[18:03:04.374]         }, add = TRUE)
[18:03:04.374]     }
[18:03:04.374]     ...future.frame <- base::sys.nframe()
[18:03:04.374]     ...future.conditions <- base::list()
[18:03:04.374]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.374]     if (FALSE) {
[18:03:04.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.374]     }
[18:03:04.374]     ...future.result <- base::tryCatch({
[18:03:04.374]         base::withCallingHandlers({
[18:03:04.374]             ...future.value <- base::withVisible(base::local({
[18:03:04.374]                 42L
[18:03:04.374]                 stop("Woops")
[18:03:04.374]             }))
[18:03:04.374]             future::FutureResult(value = ...future.value$value, 
[18:03:04.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.374]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.374]                     ...future.globalenv.names))
[18:03:04.374]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.374]         }, condition = base::local({
[18:03:04.374]             c <- base::c
[18:03:04.374]             inherits <- base::inherits
[18:03:04.374]             invokeRestart <- base::invokeRestart
[18:03:04.374]             length <- base::length
[18:03:04.374]             list <- base::list
[18:03:04.374]             seq.int <- base::seq.int
[18:03:04.374]             signalCondition <- base::signalCondition
[18:03:04.374]             sys.calls <- base::sys.calls
[18:03:04.374]             `[[` <- base::`[[`
[18:03:04.374]             `+` <- base::`+`
[18:03:04.374]             `<<-` <- base::`<<-`
[18:03:04.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.374]                   3L)]
[18:03:04.374]             }
[18:03:04.374]             function(cond) {
[18:03:04.374]                 is_error <- inherits(cond, "error")
[18:03:04.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.374]                   NULL)
[18:03:04.374]                 if (is_error) {
[18:03:04.374]                   sessionInformation <- function() {
[18:03:04.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.374]                       search = base::search(), system = base::Sys.info())
[18:03:04.374]                   }
[18:03:04.374]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.374]                     cond$call), session = sessionInformation(), 
[18:03:04.374]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.374]                   signalCondition(cond)
[18:03:04.374]                 }
[18:03:04.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.374]                 "immediateCondition"))) {
[18:03:04.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.374]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.374]                   if (TRUE && !signal) {
[18:03:04.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.374]                     {
[18:03:04.374]                       inherits <- base::inherits
[18:03:04.374]                       invokeRestart <- base::invokeRestart
[18:03:04.374]                       is.null <- base::is.null
[18:03:04.374]                       muffled <- FALSE
[18:03:04.374]                       if (inherits(cond, "message")) {
[18:03:04.374]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.374]                         if (muffled) 
[18:03:04.374]                           invokeRestart("muffleMessage")
[18:03:04.374]                       }
[18:03:04.374]                       else if (inherits(cond, "warning")) {
[18:03:04.374]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.374]                         if (muffled) 
[18:03:04.374]                           invokeRestart("muffleWarning")
[18:03:04.374]                       }
[18:03:04.374]                       else if (inherits(cond, "condition")) {
[18:03:04.374]                         if (!is.null(pattern)) {
[18:03:04.374]                           computeRestarts <- base::computeRestarts
[18:03:04.374]                           grepl <- base::grepl
[18:03:04.374]                           restarts <- computeRestarts(cond)
[18:03:04.374]                           for (restart in restarts) {
[18:03:04.374]                             name <- restart$name
[18:03:04.374]                             if (is.null(name)) 
[18:03:04.374]                               next
[18:03:04.374]                             if (!grepl(pattern, name)) 
[18:03:04.374]                               next
[18:03:04.374]                             invokeRestart(restart)
[18:03:04.374]                             muffled <- TRUE
[18:03:04.374]                             break
[18:03:04.374]                           }
[18:03:04.374]                         }
[18:03:04.374]                       }
[18:03:04.374]                       invisible(muffled)
[18:03:04.374]                     }
[18:03:04.374]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.374]                   }
[18:03:04.374]                 }
[18:03:04.374]                 else {
[18:03:04.374]                   if (TRUE) {
[18:03:04.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.374]                     {
[18:03:04.374]                       inherits <- base::inherits
[18:03:04.374]                       invokeRestart <- base::invokeRestart
[18:03:04.374]                       is.null <- base::is.null
[18:03:04.374]                       muffled <- FALSE
[18:03:04.374]                       if (inherits(cond, "message")) {
[18:03:04.374]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.374]                         if (muffled) 
[18:03:04.374]                           invokeRestart("muffleMessage")
[18:03:04.374]                       }
[18:03:04.374]                       else if (inherits(cond, "warning")) {
[18:03:04.374]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.374]                         if (muffled) 
[18:03:04.374]                           invokeRestart("muffleWarning")
[18:03:04.374]                       }
[18:03:04.374]                       else if (inherits(cond, "condition")) {
[18:03:04.374]                         if (!is.null(pattern)) {
[18:03:04.374]                           computeRestarts <- base::computeRestarts
[18:03:04.374]                           grepl <- base::grepl
[18:03:04.374]                           restarts <- computeRestarts(cond)
[18:03:04.374]                           for (restart in restarts) {
[18:03:04.374]                             name <- restart$name
[18:03:04.374]                             if (is.null(name)) 
[18:03:04.374]                               next
[18:03:04.374]                             if (!grepl(pattern, name)) 
[18:03:04.374]                               next
[18:03:04.374]                             invokeRestart(restart)
[18:03:04.374]                             muffled <- TRUE
[18:03:04.374]                             break
[18:03:04.374]                           }
[18:03:04.374]                         }
[18:03:04.374]                       }
[18:03:04.374]                       invisible(muffled)
[18:03:04.374]                     }
[18:03:04.374]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.374]                   }
[18:03:04.374]                 }
[18:03:04.374]             }
[18:03:04.374]         }))
[18:03:04.374]     }, error = function(ex) {
[18:03:04.374]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.374]                 ...future.rng), started = ...future.startTime, 
[18:03:04.374]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.374]             version = "1.8"), class = "FutureResult")
[18:03:04.374]     }, finally = {
[18:03:04.374]         if (!identical(...future.workdir, getwd())) 
[18:03:04.374]             setwd(...future.workdir)
[18:03:04.374]         {
[18:03:04.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.374]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.374]             }
[18:03:04.374]             base::options(...future.oldOptions)
[18:03:04.374]             if (.Platform$OS.type == "windows") {
[18:03:04.374]                 old_names <- names(...future.oldEnvVars)
[18:03:04.374]                 envs <- base::Sys.getenv()
[18:03:04.374]                 names <- names(envs)
[18:03:04.374]                 common <- intersect(names, old_names)
[18:03:04.374]                 added <- setdiff(names, old_names)
[18:03:04.374]                 removed <- setdiff(old_names, names)
[18:03:04.374]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.374]                   envs[common]]
[18:03:04.374]                 NAMES <- toupper(changed)
[18:03:04.374]                 args <- list()
[18:03:04.374]                 for (kk in seq_along(NAMES)) {
[18:03:04.374]                   name <- changed[[kk]]
[18:03:04.374]                   NAME <- NAMES[[kk]]
[18:03:04.374]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.374]                     next
[18:03:04.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.374]                 }
[18:03:04.374]                 NAMES <- toupper(added)
[18:03:04.374]                 for (kk in seq_along(NAMES)) {
[18:03:04.374]                   name <- added[[kk]]
[18:03:04.374]                   NAME <- NAMES[[kk]]
[18:03:04.374]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.374]                     next
[18:03:04.374]                   args[[name]] <- ""
[18:03:04.374]                 }
[18:03:04.374]                 NAMES <- toupper(removed)
[18:03:04.374]                 for (kk in seq_along(NAMES)) {
[18:03:04.374]                   name <- removed[[kk]]
[18:03:04.374]                   NAME <- NAMES[[kk]]
[18:03:04.374]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.374]                     next
[18:03:04.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.374]                 }
[18:03:04.374]                 if (length(args) > 0) 
[18:03:04.374]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.374]             }
[18:03:04.374]             else {
[18:03:04.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.374]             }
[18:03:04.374]             {
[18:03:04.374]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.374]                   0L) {
[18:03:04.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.374]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.374]                   base::options(opts)
[18:03:04.374]                 }
[18:03:04.374]                 {
[18:03:04.374]                   {
[18:03:04.374]                     NULL
[18:03:04.374]                     RNGkind("Mersenne-Twister")
[18:03:04.374]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.374]                       inherits = FALSE)
[18:03:04.374]                   }
[18:03:04.374]                   options(future.plan = NULL)
[18:03:04.374]                   if (is.na(NA_character_)) 
[18:03:04.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.374]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.374]                     .init = FALSE)
[18:03:04.374]                 }
[18:03:04.374]             }
[18:03:04.374]         }
[18:03:04.374]     })
[18:03:04.374]     if (TRUE) {
[18:03:04.374]         base::sink(type = "output", split = FALSE)
[18:03:04.374]         if (TRUE) {
[18:03:04.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.374]         }
[18:03:04.374]         else {
[18:03:04.374]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.374]         }
[18:03:04.374]         base::close(...future.stdout)
[18:03:04.374]         ...future.stdout <- NULL
[18:03:04.374]     }
[18:03:04.374]     ...future.result$conditions <- ...future.conditions
[18:03:04.374]     ...future.result$finished <- base::Sys.time()
[18:03:04.374]     ...future.result
[18:03:04.374] }
[18:03:04.378] plan(): Setting new future strategy stack:
[18:03:04.378] List of future strategies:
[18:03:04.378] 1. sequential:
[18:03:04.378]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.378]    - tweaked: FALSE
[18:03:04.378]    - call: NULL
[18:03:04.379] plan(): nbrOfWorkers() = 1
[18:03:04.383] plan(): Setting new future strategy stack:
[18:03:04.383] List of future strategies:
[18:03:04.383] 1. sequential:
[18:03:04.383]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.383]    - tweaked: FALSE
[18:03:04.383]    - call: future::plan("sequential")
[18:03:04.385] plan(): nbrOfWorkers() = 1
[18:03:04.387] SequentialFuture started (and completed)
[18:03:04.387] signalConditions() ...
[18:03:04.388]  - include = ‘immediateCondition’
[18:03:04.388]  - exclude = 
[18:03:04.388]  - resignal = FALSE
[18:03:04.388]  - Number of conditions: 1
[18:03:04.388] signalConditions() ... done
[18:03:04.389] - Launch lazy future ... done
[18:03:04.391] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[18:03:04.391] getGlobalsAndPackages() ...
[18:03:04.392] Searching for globals...
[18:03:04.396] - globals found: [2] ‘{’, ‘stop’
[18:03:04.396] Searching for globals ... DONE
[18:03:04.396] Resolving globals: FALSE
[18:03:04.399] 
[18:03:04.399] 
[18:03:04.400] getGlobalsAndPackages() ... DONE
[18:03:04.400] run() for ‘Future’ ...
[18:03:04.400] - state: ‘created’
[18:03:04.401] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.403] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.404] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.404]   - Field: ‘label’
[18:03:04.404]   - Field: ‘local’
[18:03:04.404]   - Field: ‘owner’
[18:03:04.405]   - Field: ‘envir’
[18:03:04.406]   - Field: ‘packages’
[18:03:04.406]   - Field: ‘gc’
[18:03:04.406]   - Field: ‘conditions’
[18:03:04.406]   - Field: ‘expr’
[18:03:04.407]   - Field: ‘uuid’
[18:03:04.407]   - Field: ‘seed’
[18:03:04.407]   - Field: ‘version’
[18:03:04.407]   - Field: ‘result’
[18:03:04.411]   - Field: ‘asynchronous’
[18:03:04.411]   - Field: ‘calls’
[18:03:04.412]   - Field: ‘globals’
[18:03:04.412]   - Field: ‘stdout’
[18:03:04.412]   - Field: ‘earlySignal’
[18:03:04.412]   - Field: ‘lazy’
[18:03:04.412]   - Field: ‘state’
[18:03:04.413] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.415] - Launch lazy future ...
[18:03:04.415] Packages needed by the future expression (n = 0): <none>
[18:03:04.416] Packages needed by future strategies (n = 0): <none>
[18:03:04.417] {
[18:03:04.417]     {
[18:03:04.417]         {
[18:03:04.417]             ...future.startTime <- base::Sys.time()
[18:03:04.417]             {
[18:03:04.417]                 {
[18:03:04.417]                   {
[18:03:04.417]                     base::local({
[18:03:04.417]                       has_future <- base::requireNamespace("future", 
[18:03:04.417]                         quietly = TRUE)
[18:03:04.417]                       if (has_future) {
[18:03:04.417]                         ns <- base::getNamespace("future")
[18:03:04.417]                         version <- ns[[".package"]][["version"]]
[18:03:04.417]                         if (is.null(version)) 
[18:03:04.417]                           version <- utils::packageVersion("future")
[18:03:04.417]                       }
[18:03:04.417]                       else {
[18:03:04.417]                         version <- NULL
[18:03:04.417]                       }
[18:03:04.417]                       if (!has_future || version < "1.8.0") {
[18:03:04.417]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.417]                           "", base::R.version$version.string), 
[18:03:04.417]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.417]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.417]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.417]                             "release", "version")], collapse = " "), 
[18:03:04.417]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.417]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.417]                           info)
[18:03:04.417]                         info <- base::paste(info, collapse = "; ")
[18:03:04.417]                         if (!has_future) {
[18:03:04.417]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.417]                             info)
[18:03:04.417]                         }
[18:03:04.417]                         else {
[18:03:04.417]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.417]                             info, version)
[18:03:04.417]                         }
[18:03:04.417]                         base::stop(msg)
[18:03:04.417]                       }
[18:03:04.417]                     })
[18:03:04.417]                   }
[18:03:04.417]                   ...future.strategy.old <- future::plan("list")
[18:03:04.417]                   options(future.plan = NULL)
[18:03:04.417]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.417]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.417]                 }
[18:03:04.417]                 ...future.workdir <- getwd()
[18:03:04.417]             }
[18:03:04.417]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.417]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.417]         }
[18:03:04.417]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.417]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.417]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.417]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.417]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.417]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.417]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.417]             base::names(...future.oldOptions))
[18:03:04.417]     }
[18:03:04.417]     if (FALSE) {
[18:03:04.417]     }
[18:03:04.417]     else {
[18:03:04.417]         if (TRUE) {
[18:03:04.417]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.417]                 open = "w")
[18:03:04.417]         }
[18:03:04.417]         else {
[18:03:04.417]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.417]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.417]         }
[18:03:04.417]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.417]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.417]             base::sink(type = "output", split = FALSE)
[18:03:04.417]             base::close(...future.stdout)
[18:03:04.417]         }, add = TRUE)
[18:03:04.417]     }
[18:03:04.417]     ...future.frame <- base::sys.nframe()
[18:03:04.417]     ...future.conditions <- base::list()
[18:03:04.417]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.417]     if (FALSE) {
[18:03:04.417]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.417]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.417]     }
[18:03:04.417]     ...future.result <- base::tryCatch({
[18:03:04.417]         base::withCallingHandlers({
[18:03:04.417]             ...future.value <- base::withVisible(base::local({
[18:03:04.417]                 42L
[18:03:04.417]                 stop("Woops")
[18:03:04.417]             }))
[18:03:04.417]             future::FutureResult(value = ...future.value$value, 
[18:03:04.417]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.417]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.417]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.417]                     ...future.globalenv.names))
[18:03:04.417]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.417]         }, condition = base::local({
[18:03:04.417]             c <- base::c
[18:03:04.417]             inherits <- base::inherits
[18:03:04.417]             invokeRestart <- base::invokeRestart
[18:03:04.417]             length <- base::length
[18:03:04.417]             list <- base::list
[18:03:04.417]             seq.int <- base::seq.int
[18:03:04.417]             signalCondition <- base::signalCondition
[18:03:04.417]             sys.calls <- base::sys.calls
[18:03:04.417]             `[[` <- base::`[[`
[18:03:04.417]             `+` <- base::`+`
[18:03:04.417]             `<<-` <- base::`<<-`
[18:03:04.417]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.417]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.417]                   3L)]
[18:03:04.417]             }
[18:03:04.417]             function(cond) {
[18:03:04.417]                 is_error <- inherits(cond, "error")
[18:03:04.417]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.417]                   NULL)
[18:03:04.417]                 if (is_error) {
[18:03:04.417]                   sessionInformation <- function() {
[18:03:04.417]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.417]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.417]                       search = base::search(), system = base::Sys.info())
[18:03:04.417]                   }
[18:03:04.417]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.417]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.417]                     cond$call), session = sessionInformation(), 
[18:03:04.417]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.417]                   signalCondition(cond)
[18:03:04.417]                 }
[18:03:04.417]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.417]                 "immediateCondition"))) {
[18:03:04.417]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.417]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.417]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.417]                   if (TRUE && !signal) {
[18:03:04.417]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.417]                     {
[18:03:04.417]                       inherits <- base::inherits
[18:03:04.417]                       invokeRestart <- base::invokeRestart
[18:03:04.417]                       is.null <- base::is.null
[18:03:04.417]                       muffled <- FALSE
[18:03:04.417]                       if (inherits(cond, "message")) {
[18:03:04.417]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.417]                         if (muffled) 
[18:03:04.417]                           invokeRestart("muffleMessage")
[18:03:04.417]                       }
[18:03:04.417]                       else if (inherits(cond, "warning")) {
[18:03:04.417]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.417]                         if (muffled) 
[18:03:04.417]                           invokeRestart("muffleWarning")
[18:03:04.417]                       }
[18:03:04.417]                       else if (inherits(cond, "condition")) {
[18:03:04.417]                         if (!is.null(pattern)) {
[18:03:04.417]                           computeRestarts <- base::computeRestarts
[18:03:04.417]                           grepl <- base::grepl
[18:03:04.417]                           restarts <- computeRestarts(cond)
[18:03:04.417]                           for (restart in restarts) {
[18:03:04.417]                             name <- restart$name
[18:03:04.417]                             if (is.null(name)) 
[18:03:04.417]                               next
[18:03:04.417]                             if (!grepl(pattern, name)) 
[18:03:04.417]                               next
[18:03:04.417]                             invokeRestart(restart)
[18:03:04.417]                             muffled <- TRUE
[18:03:04.417]                             break
[18:03:04.417]                           }
[18:03:04.417]                         }
[18:03:04.417]                       }
[18:03:04.417]                       invisible(muffled)
[18:03:04.417]                     }
[18:03:04.417]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.417]                   }
[18:03:04.417]                 }
[18:03:04.417]                 else {
[18:03:04.417]                   if (TRUE) {
[18:03:04.417]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.417]                     {
[18:03:04.417]                       inherits <- base::inherits
[18:03:04.417]                       invokeRestart <- base::invokeRestart
[18:03:04.417]                       is.null <- base::is.null
[18:03:04.417]                       muffled <- FALSE
[18:03:04.417]                       if (inherits(cond, "message")) {
[18:03:04.417]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.417]                         if (muffled) 
[18:03:04.417]                           invokeRestart("muffleMessage")
[18:03:04.417]                       }
[18:03:04.417]                       else if (inherits(cond, "warning")) {
[18:03:04.417]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.417]                         if (muffled) 
[18:03:04.417]                           invokeRestart("muffleWarning")
[18:03:04.417]                       }
[18:03:04.417]                       else if (inherits(cond, "condition")) {
[18:03:04.417]                         if (!is.null(pattern)) {
[18:03:04.417]                           computeRestarts <- base::computeRestarts
[18:03:04.417]                           grepl <- base::grepl
[18:03:04.417]                           restarts <- computeRestarts(cond)
[18:03:04.417]                           for (restart in restarts) {
[18:03:04.417]                             name <- restart$name
[18:03:04.417]                             if (is.null(name)) 
[18:03:04.417]                               next
[18:03:04.417]                             if (!grepl(pattern, name)) 
[18:03:04.417]                               next
[18:03:04.417]                             invokeRestart(restart)
[18:03:04.417]                             muffled <- TRUE
[18:03:04.417]                             break
[18:03:04.417]                           }
[18:03:04.417]                         }
[18:03:04.417]                       }
[18:03:04.417]                       invisible(muffled)
[18:03:04.417]                     }
[18:03:04.417]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.417]                   }
[18:03:04.417]                 }
[18:03:04.417]             }
[18:03:04.417]         }))
[18:03:04.417]     }, error = function(ex) {
[18:03:04.417]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.417]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.417]                 ...future.rng), started = ...future.startTime, 
[18:03:04.417]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.417]             version = "1.8"), class = "FutureResult")
[18:03:04.417]     }, finally = {
[18:03:04.417]         if (!identical(...future.workdir, getwd())) 
[18:03:04.417]             setwd(...future.workdir)
[18:03:04.417]         {
[18:03:04.417]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.417]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.417]             }
[18:03:04.417]             base::options(...future.oldOptions)
[18:03:04.417]             if (.Platform$OS.type == "windows") {
[18:03:04.417]                 old_names <- names(...future.oldEnvVars)
[18:03:04.417]                 envs <- base::Sys.getenv()
[18:03:04.417]                 names <- names(envs)
[18:03:04.417]                 common <- intersect(names, old_names)
[18:03:04.417]                 added <- setdiff(names, old_names)
[18:03:04.417]                 removed <- setdiff(old_names, names)
[18:03:04.417]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.417]                   envs[common]]
[18:03:04.417]                 NAMES <- toupper(changed)
[18:03:04.417]                 args <- list()
[18:03:04.417]                 for (kk in seq_along(NAMES)) {
[18:03:04.417]                   name <- changed[[kk]]
[18:03:04.417]                   NAME <- NAMES[[kk]]
[18:03:04.417]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.417]                     next
[18:03:04.417]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.417]                 }
[18:03:04.417]                 NAMES <- toupper(added)
[18:03:04.417]                 for (kk in seq_along(NAMES)) {
[18:03:04.417]                   name <- added[[kk]]
[18:03:04.417]                   NAME <- NAMES[[kk]]
[18:03:04.417]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.417]                     next
[18:03:04.417]                   args[[name]] <- ""
[18:03:04.417]                 }
[18:03:04.417]                 NAMES <- toupper(removed)
[18:03:04.417]                 for (kk in seq_along(NAMES)) {
[18:03:04.417]                   name <- removed[[kk]]
[18:03:04.417]                   NAME <- NAMES[[kk]]
[18:03:04.417]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.417]                     next
[18:03:04.417]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.417]                 }
[18:03:04.417]                 if (length(args) > 0) 
[18:03:04.417]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.417]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.417]             }
[18:03:04.417]             else {
[18:03:04.417]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.417]             }
[18:03:04.417]             {
[18:03:04.417]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.417]                   0L) {
[18:03:04.417]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.417]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.417]                   base::options(opts)
[18:03:04.417]                 }
[18:03:04.417]                 {
[18:03:04.417]                   {
[18:03:04.417]                     NULL
[18:03:04.417]                     RNGkind("Mersenne-Twister")
[18:03:04.417]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.417]                       inherits = FALSE)
[18:03:04.417]                   }
[18:03:04.417]                   options(future.plan = NULL)
[18:03:04.417]                   if (is.na(NA_character_)) 
[18:03:04.417]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.417]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.417]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.417]                     .init = FALSE)
[18:03:04.417]                 }
[18:03:04.417]             }
[18:03:04.417]         }
[18:03:04.417]     })
[18:03:04.417]     if (TRUE) {
[18:03:04.417]         base::sink(type = "output", split = FALSE)
[18:03:04.417]         if (TRUE) {
[18:03:04.417]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.417]         }
[18:03:04.417]         else {
[18:03:04.417]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.417]         }
[18:03:04.417]         base::close(...future.stdout)
[18:03:04.417]         ...future.stdout <- NULL
[18:03:04.417]     }
[18:03:04.417]     ...future.result$conditions <- ...future.conditions
[18:03:04.417]     ...future.result$finished <- base::Sys.time()
[18:03:04.417]     ...future.result
[18:03:04.417] }
[18:03:04.425] plan(): Setting new future strategy stack:
[18:03:04.426] List of future strategies:
[18:03:04.426] 1. sequential:
[18:03:04.426]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.426]    - tweaked: FALSE
[18:03:04.426]    - call: NULL
[18:03:04.427] plan(): nbrOfWorkers() = 1
[18:03:04.432] plan(): Setting new future strategy stack:
[18:03:04.432] List of future strategies:
[18:03:04.432] 1. sequential:
[18:03:04.432]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.432]    - tweaked: FALSE
[18:03:04.432]    - call: future::plan("sequential")
[18:03:04.433] plan(): nbrOfWorkers() = 1
[18:03:04.433] SequentialFuture started (and completed)
[18:03:04.434] signalConditions() ...
[18:03:04.434]  - include = ‘immediateCondition’
[18:03:04.434]  - exclude = 
[18:03:04.434]  - resignal = FALSE
[18:03:04.435]  - Number of conditions: 1
[18:03:04.435] signalConditions() ... done
[18:03:04.435] - Launch lazy future ... done
[18:03:04.435] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[18:03:04.436] resolve() on list ...
[18:03:04.436]  recursive: 0
[18:03:04.437]  length: 2
[18:03:04.437] 
[18:03:04.437] resolved() for ‘SequentialFuture’ ...
[18:03:04.438] - state: ‘finished’
[18:03:04.438] - run: TRUE
[18:03:04.438] - result: ‘FutureResult’
[18:03:04.438] resolved() for ‘SequentialFuture’ ... done
[18:03:04.438] Future #1
[18:03:04.439] signalConditions() ...
[18:03:04.439]  - include = ‘immediateCondition’
[18:03:04.439]  - exclude = 
[18:03:04.439]  - resignal = FALSE
[18:03:04.439]  - Number of conditions: 1
[18:03:04.440] signalConditions() ... done
[18:03:04.440] signalConditionsASAP(SequentialFuture, pos=1) ...
[18:03:04.440] - nx: 2
[18:03:04.440] - relay: TRUE
[18:03:04.440] - stdout: TRUE
[18:03:04.441] - signal: FALSE
[18:03:04.441] - resignal: FALSE
[18:03:04.441] - force: TRUE
[18:03:04.441] - relayed: [n=2] FALSE, FALSE
[18:03:04.441] - queued futures: [n=2] FALSE, FALSE
[18:03:04.442]  - until=1
[18:03:04.442]  - relaying element #1
[18:03:04.442] signalConditions() ...
[18:03:04.442]  - include = ‘immediateCondition’
[18:03:04.442]  - exclude = 
[18:03:04.443]  - resignal = FALSE
[18:03:04.443]  - Number of conditions: 1
[18:03:04.443] signalConditions() ... done
[18:03:04.443] - relayed: [n=2] TRUE, FALSE
[18:03:04.443] - queued futures: [n=2] TRUE, FALSE
[18:03:04.444] signalConditionsASAP(SequentialFuture, pos=1) ... done
[18:03:04.444]  length: 1 (resolved future 1)
[18:03:04.444] resolved() for ‘SequentialFuture’ ...
[18:03:04.445] - state: ‘finished’
[18:03:04.445] - run: TRUE
[18:03:04.445] - result: ‘FutureResult’
[18:03:04.445] resolved() for ‘SequentialFuture’ ... done
[18:03:04.445] Future #2
[18:03:04.446] signalConditions() ...
[18:03:04.446]  - include = ‘immediateCondition’
[18:03:04.446]  - exclude = 
[18:03:04.446]  - resignal = FALSE
[18:03:04.446]  - Number of conditions: 1
[18:03:04.447] signalConditions() ... done
[18:03:04.447] signalConditionsASAP(SequentialFuture, pos=2) ...
[18:03:04.447] - nx: 2
[18:03:04.447] - relay: TRUE
[18:03:04.447] - stdout: TRUE
[18:03:04.448] - signal: FALSE
[18:03:04.448] - resignal: FALSE
[18:03:04.448] - force: TRUE
[18:03:04.448] - relayed: [n=2] TRUE, FALSE
[18:03:04.448] - queued futures: [n=2] TRUE, FALSE
[18:03:04.449]  - until=2
[18:03:04.449]  - relaying element #2
[18:03:04.449] signalConditions() ...
[18:03:04.449]  - include = ‘immediateCondition’
[18:03:04.449]  - exclude = 
[18:03:04.450]  - resignal = FALSE
[18:03:04.450]  - Number of conditions: 1
[18:03:04.450] signalConditions() ... done
[18:03:04.450] - relayed: [n=2] TRUE, TRUE
[18:03:04.450] - queued futures: [n=2] TRUE, TRUE
[18:03:04.451] signalConditionsASAP(SequentialFuture, pos=2) ... done
[18:03:04.451]  length: 0 (resolved future 2)
[18:03:04.451] Relaying remaining futures
[18:03:04.451] signalConditionsASAP(NULL, pos=0) ...
[18:03:04.451] - nx: 2
[18:03:04.451] - relay: TRUE
[18:03:04.452] - stdout: TRUE
[18:03:04.452] - signal: FALSE
[18:03:04.454] - resignal: FALSE
[18:03:04.455] - force: TRUE
[18:03:04.455] - relayed: [n=2] TRUE, TRUE
[18:03:04.455] - queued futures: [n=2] TRUE, TRUE
 - flush all
[18:03:04.456] - relayed: [n=2] TRUE, TRUE
[18:03:04.456] - queued futures: [n=2] TRUE, TRUE
[18:03:04.456] signalConditionsASAP(NULL, pos=0) ... done
[18:03:04.456] resolve() on list ... DONE
[18:03:04.457] signalConditions() ...
[18:03:04.457]  - include = ‘immediateCondition’
[18:03:04.457]  - exclude = 
[18:03:04.457]  - resignal = FALSE
[18:03:04.457]  - Number of conditions: 1
[18:03:04.458] signalConditions() ... done
[18:03:04.458] signalConditions() ...
[18:03:04.458]  - include = ‘immediateCondition’
[18:03:04.458]  - exclude = 
[18:03:04.458]  - resignal = FALSE
[18:03:04.459]  - Number of conditions: 1
[18:03:04.459] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[18:03:04.460] resolved() for ‘SequentialFuture’ ...
[18:03:04.460] - state: ‘finished’
[18:03:04.460] - run: TRUE
[18:03:04.460] - result: ‘FutureResult’
[18:03:04.460] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[18:03:04.462] getGlobalsAndPackages() ...
[18:03:04.462] Searching for globals...
[18:03:04.462] 
[18:03:04.463] Searching for globals ... DONE
[18:03:04.463] - globals: [0] <none>
[18:03:04.463] getGlobalsAndPackages() ... DONE
[18:03:04.464] run() for ‘Future’ ...
[18:03:04.464] - state: ‘created’
[18:03:04.464] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.465] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.465] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.465]   - Field: ‘label’
[18:03:04.465]   - Field: ‘local’
[18:03:04.466]   - Field: ‘owner’
[18:03:04.466]   - Field: ‘envir’
[18:03:04.466]   - Field: ‘packages’
[18:03:04.466]   - Field: ‘gc’
[18:03:04.466]   - Field: ‘conditions’
[18:03:04.467]   - Field: ‘expr’
[18:03:04.467]   - Field: ‘uuid’
[18:03:04.467]   - Field: ‘seed’
[18:03:04.467]   - Field: ‘version’
[18:03:04.467]   - Field: ‘result’
[18:03:04.468]   - Field: ‘asynchronous’
[18:03:04.468]   - Field: ‘calls’
[18:03:04.468]   - Field: ‘globals’
[18:03:04.468]   - Field: ‘stdout’
[18:03:04.468]   - Field: ‘earlySignal’
[18:03:04.469]   - Field: ‘lazy’
[18:03:04.469]   - Field: ‘state’
[18:03:04.469] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.469] - Launch lazy future ...
[18:03:04.470] Packages needed by the future expression (n = 0): <none>
[18:03:04.470] Packages needed by future strategies (n = 0): <none>
[18:03:04.471] {
[18:03:04.471]     {
[18:03:04.471]         {
[18:03:04.471]             ...future.startTime <- base::Sys.time()
[18:03:04.471]             {
[18:03:04.471]                 {
[18:03:04.471]                   {
[18:03:04.471]                     base::local({
[18:03:04.471]                       has_future <- base::requireNamespace("future", 
[18:03:04.471]                         quietly = TRUE)
[18:03:04.471]                       if (has_future) {
[18:03:04.471]                         ns <- base::getNamespace("future")
[18:03:04.471]                         version <- ns[[".package"]][["version"]]
[18:03:04.471]                         if (is.null(version)) 
[18:03:04.471]                           version <- utils::packageVersion("future")
[18:03:04.471]                       }
[18:03:04.471]                       else {
[18:03:04.471]                         version <- NULL
[18:03:04.471]                       }
[18:03:04.471]                       if (!has_future || version < "1.8.0") {
[18:03:04.471]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.471]                           "", base::R.version$version.string), 
[18:03:04.471]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.471]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.471]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.471]                             "release", "version")], collapse = " "), 
[18:03:04.471]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.471]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.471]                           info)
[18:03:04.471]                         info <- base::paste(info, collapse = "; ")
[18:03:04.471]                         if (!has_future) {
[18:03:04.471]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.471]                             info)
[18:03:04.471]                         }
[18:03:04.471]                         else {
[18:03:04.471]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.471]                             info, version)
[18:03:04.471]                         }
[18:03:04.471]                         base::stop(msg)
[18:03:04.471]                       }
[18:03:04.471]                     })
[18:03:04.471]                   }
[18:03:04.471]                   ...future.strategy.old <- future::plan("list")
[18:03:04.471]                   options(future.plan = NULL)
[18:03:04.471]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.471]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.471]                 }
[18:03:04.471]                 ...future.workdir <- getwd()
[18:03:04.471]             }
[18:03:04.471]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.471]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.471]         }
[18:03:04.471]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.471]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.471]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.471]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.471]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.471]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.471]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.471]             base::names(...future.oldOptions))
[18:03:04.471]     }
[18:03:04.471]     if (FALSE) {
[18:03:04.471]     }
[18:03:04.471]     else {
[18:03:04.471]         if (TRUE) {
[18:03:04.471]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.471]                 open = "w")
[18:03:04.471]         }
[18:03:04.471]         else {
[18:03:04.471]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.471]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.471]         }
[18:03:04.471]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.471]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.471]             base::sink(type = "output", split = FALSE)
[18:03:04.471]             base::close(...future.stdout)
[18:03:04.471]         }, add = TRUE)
[18:03:04.471]     }
[18:03:04.471]     ...future.frame <- base::sys.nframe()
[18:03:04.471]     ...future.conditions <- base::list()
[18:03:04.471]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.471]     if (FALSE) {
[18:03:04.471]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.471]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.471]     }
[18:03:04.471]     ...future.result <- base::tryCatch({
[18:03:04.471]         base::withCallingHandlers({
[18:03:04.471]             ...future.value <- base::withVisible(base::local(42L))
[18:03:04.471]             future::FutureResult(value = ...future.value$value, 
[18:03:04.471]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.471]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.471]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.471]                     ...future.globalenv.names))
[18:03:04.471]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.471]         }, condition = base::local({
[18:03:04.471]             c <- base::c
[18:03:04.471]             inherits <- base::inherits
[18:03:04.471]             invokeRestart <- base::invokeRestart
[18:03:04.471]             length <- base::length
[18:03:04.471]             list <- base::list
[18:03:04.471]             seq.int <- base::seq.int
[18:03:04.471]             signalCondition <- base::signalCondition
[18:03:04.471]             sys.calls <- base::sys.calls
[18:03:04.471]             `[[` <- base::`[[`
[18:03:04.471]             `+` <- base::`+`
[18:03:04.471]             `<<-` <- base::`<<-`
[18:03:04.471]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.471]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.471]                   3L)]
[18:03:04.471]             }
[18:03:04.471]             function(cond) {
[18:03:04.471]                 is_error <- inherits(cond, "error")
[18:03:04.471]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.471]                   NULL)
[18:03:04.471]                 if (is_error) {
[18:03:04.471]                   sessionInformation <- function() {
[18:03:04.471]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.471]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.471]                       search = base::search(), system = base::Sys.info())
[18:03:04.471]                   }
[18:03:04.471]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.471]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.471]                     cond$call), session = sessionInformation(), 
[18:03:04.471]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.471]                   signalCondition(cond)
[18:03:04.471]                 }
[18:03:04.471]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.471]                 "immediateCondition"))) {
[18:03:04.471]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.471]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.471]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.471]                   if (TRUE && !signal) {
[18:03:04.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.471]                     {
[18:03:04.471]                       inherits <- base::inherits
[18:03:04.471]                       invokeRestart <- base::invokeRestart
[18:03:04.471]                       is.null <- base::is.null
[18:03:04.471]                       muffled <- FALSE
[18:03:04.471]                       if (inherits(cond, "message")) {
[18:03:04.471]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.471]                         if (muffled) 
[18:03:04.471]                           invokeRestart("muffleMessage")
[18:03:04.471]                       }
[18:03:04.471]                       else if (inherits(cond, "warning")) {
[18:03:04.471]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.471]                         if (muffled) 
[18:03:04.471]                           invokeRestart("muffleWarning")
[18:03:04.471]                       }
[18:03:04.471]                       else if (inherits(cond, "condition")) {
[18:03:04.471]                         if (!is.null(pattern)) {
[18:03:04.471]                           computeRestarts <- base::computeRestarts
[18:03:04.471]                           grepl <- base::grepl
[18:03:04.471]                           restarts <- computeRestarts(cond)
[18:03:04.471]                           for (restart in restarts) {
[18:03:04.471]                             name <- restart$name
[18:03:04.471]                             if (is.null(name)) 
[18:03:04.471]                               next
[18:03:04.471]                             if (!grepl(pattern, name)) 
[18:03:04.471]                               next
[18:03:04.471]                             invokeRestart(restart)
[18:03:04.471]                             muffled <- TRUE
[18:03:04.471]                             break
[18:03:04.471]                           }
[18:03:04.471]                         }
[18:03:04.471]                       }
[18:03:04.471]                       invisible(muffled)
[18:03:04.471]                     }
[18:03:04.471]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.471]                   }
[18:03:04.471]                 }
[18:03:04.471]                 else {
[18:03:04.471]                   if (TRUE) {
[18:03:04.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.471]                     {
[18:03:04.471]                       inherits <- base::inherits
[18:03:04.471]                       invokeRestart <- base::invokeRestart
[18:03:04.471]                       is.null <- base::is.null
[18:03:04.471]                       muffled <- FALSE
[18:03:04.471]                       if (inherits(cond, "message")) {
[18:03:04.471]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.471]                         if (muffled) 
[18:03:04.471]                           invokeRestart("muffleMessage")
[18:03:04.471]                       }
[18:03:04.471]                       else if (inherits(cond, "warning")) {
[18:03:04.471]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.471]                         if (muffled) 
[18:03:04.471]                           invokeRestart("muffleWarning")
[18:03:04.471]                       }
[18:03:04.471]                       else if (inherits(cond, "condition")) {
[18:03:04.471]                         if (!is.null(pattern)) {
[18:03:04.471]                           computeRestarts <- base::computeRestarts
[18:03:04.471]                           grepl <- base::grepl
[18:03:04.471]                           restarts <- computeRestarts(cond)
[18:03:04.471]                           for (restart in restarts) {
[18:03:04.471]                             name <- restart$name
[18:03:04.471]                             if (is.null(name)) 
[18:03:04.471]                               next
[18:03:04.471]                             if (!grepl(pattern, name)) 
[18:03:04.471]                               next
[18:03:04.471]                             invokeRestart(restart)
[18:03:04.471]                             muffled <- TRUE
[18:03:04.471]                             break
[18:03:04.471]                           }
[18:03:04.471]                         }
[18:03:04.471]                       }
[18:03:04.471]                       invisible(muffled)
[18:03:04.471]                     }
[18:03:04.471]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.471]                   }
[18:03:04.471]                 }
[18:03:04.471]             }
[18:03:04.471]         }))
[18:03:04.471]     }, error = function(ex) {
[18:03:04.471]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.471]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.471]                 ...future.rng), started = ...future.startTime, 
[18:03:04.471]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.471]             version = "1.8"), class = "FutureResult")
[18:03:04.471]     }, finally = {
[18:03:04.471]         if (!identical(...future.workdir, getwd())) 
[18:03:04.471]             setwd(...future.workdir)
[18:03:04.471]         {
[18:03:04.471]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.471]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.471]             }
[18:03:04.471]             base::options(...future.oldOptions)
[18:03:04.471]             if (.Platform$OS.type == "windows") {
[18:03:04.471]                 old_names <- names(...future.oldEnvVars)
[18:03:04.471]                 envs <- base::Sys.getenv()
[18:03:04.471]                 names <- names(envs)
[18:03:04.471]                 common <- intersect(names, old_names)
[18:03:04.471]                 added <- setdiff(names, old_names)
[18:03:04.471]                 removed <- setdiff(old_names, names)
[18:03:04.471]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.471]                   envs[common]]
[18:03:04.471]                 NAMES <- toupper(changed)
[18:03:04.471]                 args <- list()
[18:03:04.471]                 for (kk in seq_along(NAMES)) {
[18:03:04.471]                   name <- changed[[kk]]
[18:03:04.471]                   NAME <- NAMES[[kk]]
[18:03:04.471]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.471]                     next
[18:03:04.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.471]                 }
[18:03:04.471]                 NAMES <- toupper(added)
[18:03:04.471]                 for (kk in seq_along(NAMES)) {
[18:03:04.471]                   name <- added[[kk]]
[18:03:04.471]                   NAME <- NAMES[[kk]]
[18:03:04.471]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.471]                     next
[18:03:04.471]                   args[[name]] <- ""
[18:03:04.471]                 }
[18:03:04.471]                 NAMES <- toupper(removed)
[18:03:04.471]                 for (kk in seq_along(NAMES)) {
[18:03:04.471]                   name <- removed[[kk]]
[18:03:04.471]                   NAME <- NAMES[[kk]]
[18:03:04.471]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.471]                     next
[18:03:04.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.471]                 }
[18:03:04.471]                 if (length(args) > 0) 
[18:03:04.471]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.471]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.471]             }
[18:03:04.471]             else {
[18:03:04.471]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.471]             }
[18:03:04.471]             {
[18:03:04.471]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.471]                   0L) {
[18:03:04.471]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.471]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.471]                   base::options(opts)
[18:03:04.471]                 }
[18:03:04.471]                 {
[18:03:04.471]                   {
[18:03:04.471]                     NULL
[18:03:04.471]                     RNGkind("Mersenne-Twister")
[18:03:04.471]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.471]                       inherits = FALSE)
[18:03:04.471]                   }
[18:03:04.471]                   options(future.plan = NULL)
[18:03:04.471]                   if (is.na(NA_character_)) 
[18:03:04.471]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.471]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.471]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.471]                     .init = FALSE)
[18:03:04.471]                 }
[18:03:04.471]             }
[18:03:04.471]         }
[18:03:04.471]     })
[18:03:04.471]     if (TRUE) {
[18:03:04.471]         base::sink(type = "output", split = FALSE)
[18:03:04.471]         if (TRUE) {
[18:03:04.471]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.471]         }
[18:03:04.471]         else {
[18:03:04.471]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.471]         }
[18:03:04.471]         base::close(...future.stdout)
[18:03:04.471]         ...future.stdout <- NULL
[18:03:04.471]     }
[18:03:04.471]     ...future.result$conditions <- ...future.conditions
[18:03:04.471]     ...future.result$finished <- base::Sys.time()
[18:03:04.471]     ...future.result
[18:03:04.471] }
[18:03:04.474] plan(): Setting new future strategy stack:
[18:03:04.475] List of future strategies:
[18:03:04.475] 1. sequential:
[18:03:04.475]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.475]    - tweaked: FALSE
[18:03:04.475]    - call: NULL
[18:03:04.476] plan(): nbrOfWorkers() = 1
[18:03:04.478] plan(): Setting new future strategy stack:
[18:03:04.478] List of future strategies:
[18:03:04.478] 1. sequential:
[18:03:04.478]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.478]    - tweaked: FALSE
[18:03:04.478]    - call: future::plan("sequential")
[18:03:04.480] plan(): nbrOfWorkers() = 1
[18:03:04.480] SequentialFuture started (and completed)
[18:03:04.480] - Launch lazy future ... done
[18:03:04.480] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[18:03:04.481] resolved() for ‘SequentialFuture’ ...
[18:03:04.481] - state: ‘finished’
[18:03:04.481] - run: TRUE
[18:03:04.482] - result: ‘FutureResult’
[18:03:04.482] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[18:03:04.485] getGlobalsAndPackages() ...
[18:03:04.486] Searching for globals...
[18:03:04.489] - globals found: [2] ‘{’, ‘stop’
[18:03:04.492] Searching for globals ... DONE
[18:03:04.492] Resolving globals: FALSE
[18:03:04.493] 
[18:03:04.493] 
[18:03:04.493] getGlobalsAndPackages() ... DONE
[18:03:04.494] run() for ‘Future’ ...
[18:03:04.494] - state: ‘created’
[18:03:04.494] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:04.497] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:04.497] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:04.497]   - Field: ‘label’
[18:03:04.497]   - Field: ‘local’
[18:03:04.498]   - Field: ‘owner’
[18:03:04.501]   - Field: ‘envir’
[18:03:04.501]   - Field: ‘packages’
[18:03:04.501]   - Field: ‘gc’
[18:03:04.502]   - Field: ‘conditions’
[18:03:04.502]   - Field: ‘expr’
[18:03:04.502]   - Field: ‘uuid’
[18:03:04.502]   - Field: ‘seed’
[18:03:04.502]   - Field: ‘version’
[18:03:04.503]   - Field: ‘result’
[18:03:04.505]   - Field: ‘asynchronous’
[18:03:04.505]   - Field: ‘calls’
[18:03:04.506]   - Field: ‘globals’
[18:03:04.506]   - Field: ‘stdout’
[18:03:04.506]   - Field: ‘earlySignal’
[18:03:04.506]   - Field: ‘lazy’
[18:03:04.506]   - Field: ‘state’
[18:03:04.507] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:04.507] - Launch lazy future ...
[18:03:04.507] Packages needed by the future expression (n = 0): <none>
[18:03:04.508] Packages needed by future strategies (n = 0): <none>
[18:03:04.508] {
[18:03:04.508]     {
[18:03:04.508]         {
[18:03:04.508]             ...future.startTime <- base::Sys.time()
[18:03:04.508]             {
[18:03:04.508]                 {
[18:03:04.508]                   {
[18:03:04.508]                     base::local({
[18:03:04.508]                       has_future <- base::requireNamespace("future", 
[18:03:04.508]                         quietly = TRUE)
[18:03:04.508]                       if (has_future) {
[18:03:04.508]                         ns <- base::getNamespace("future")
[18:03:04.508]                         version <- ns[[".package"]][["version"]]
[18:03:04.508]                         if (is.null(version)) 
[18:03:04.508]                           version <- utils::packageVersion("future")
[18:03:04.508]                       }
[18:03:04.508]                       else {
[18:03:04.508]                         version <- NULL
[18:03:04.508]                       }
[18:03:04.508]                       if (!has_future || version < "1.8.0") {
[18:03:04.508]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:04.508]                           "", base::R.version$version.string), 
[18:03:04.508]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:04.508]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:04.508]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:04.508]                             "release", "version")], collapse = " "), 
[18:03:04.508]                           hostname = base::Sys.info()[["nodename"]])
[18:03:04.508]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:04.508]                           info)
[18:03:04.508]                         info <- base::paste(info, collapse = "; ")
[18:03:04.508]                         if (!has_future) {
[18:03:04.508]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:04.508]                             info)
[18:03:04.508]                         }
[18:03:04.508]                         else {
[18:03:04.508]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:04.508]                             info, version)
[18:03:04.508]                         }
[18:03:04.508]                         base::stop(msg)
[18:03:04.508]                       }
[18:03:04.508]                     })
[18:03:04.508]                   }
[18:03:04.508]                   ...future.strategy.old <- future::plan("list")
[18:03:04.508]                   options(future.plan = NULL)
[18:03:04.508]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.508]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:04.508]                 }
[18:03:04.508]                 ...future.workdir <- getwd()
[18:03:04.508]             }
[18:03:04.508]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:04.508]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:04.508]         }
[18:03:04.508]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:04.508]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:04.508]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:04.508]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:04.508]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:04.508]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:04.508]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:04.508]             base::names(...future.oldOptions))
[18:03:04.508]     }
[18:03:04.508]     if (FALSE) {
[18:03:04.508]     }
[18:03:04.508]     else {
[18:03:04.508]         if (TRUE) {
[18:03:04.508]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:04.508]                 open = "w")
[18:03:04.508]         }
[18:03:04.508]         else {
[18:03:04.508]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:04.508]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:04.508]         }
[18:03:04.508]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:04.508]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:04.508]             base::sink(type = "output", split = FALSE)
[18:03:04.508]             base::close(...future.stdout)
[18:03:04.508]         }, add = TRUE)
[18:03:04.508]     }
[18:03:04.508]     ...future.frame <- base::sys.nframe()
[18:03:04.508]     ...future.conditions <- base::list()
[18:03:04.508]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:04.508]     if (FALSE) {
[18:03:04.508]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:04.508]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:04.508]     }
[18:03:04.508]     ...future.result <- base::tryCatch({
[18:03:04.508]         base::withCallingHandlers({
[18:03:04.508]             ...future.value <- base::withVisible(base::local({
[18:03:04.508]                 42L
[18:03:04.508]                 stop("Woops")
[18:03:04.508]             }))
[18:03:04.508]             future::FutureResult(value = ...future.value$value, 
[18:03:04.508]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.508]                   ...future.rng), globalenv = if (FALSE) 
[18:03:04.508]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:04.508]                     ...future.globalenv.names))
[18:03:04.508]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:04.508]         }, condition = base::local({
[18:03:04.508]             c <- base::c
[18:03:04.508]             inherits <- base::inherits
[18:03:04.508]             invokeRestart <- base::invokeRestart
[18:03:04.508]             length <- base::length
[18:03:04.508]             list <- base::list
[18:03:04.508]             seq.int <- base::seq.int
[18:03:04.508]             signalCondition <- base::signalCondition
[18:03:04.508]             sys.calls <- base::sys.calls
[18:03:04.508]             `[[` <- base::`[[`
[18:03:04.508]             `+` <- base::`+`
[18:03:04.508]             `<<-` <- base::`<<-`
[18:03:04.508]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:04.508]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:04.508]                   3L)]
[18:03:04.508]             }
[18:03:04.508]             function(cond) {
[18:03:04.508]                 is_error <- inherits(cond, "error")
[18:03:04.508]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:04.508]                   NULL)
[18:03:04.508]                 if (is_error) {
[18:03:04.508]                   sessionInformation <- function() {
[18:03:04.508]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:04.508]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:04.508]                       search = base::search(), system = base::Sys.info())
[18:03:04.508]                   }
[18:03:04.508]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.508]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:04.508]                     cond$call), session = sessionInformation(), 
[18:03:04.508]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:04.508]                   signalCondition(cond)
[18:03:04.508]                 }
[18:03:04.508]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:04.508]                 "immediateCondition"))) {
[18:03:04.508]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:04.508]                   ...future.conditions[[length(...future.conditions) + 
[18:03:04.508]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:04.508]                   if (TRUE && !signal) {
[18:03:04.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.508]                     {
[18:03:04.508]                       inherits <- base::inherits
[18:03:04.508]                       invokeRestart <- base::invokeRestart
[18:03:04.508]                       is.null <- base::is.null
[18:03:04.508]                       muffled <- FALSE
[18:03:04.508]                       if (inherits(cond, "message")) {
[18:03:04.508]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.508]                         if (muffled) 
[18:03:04.508]                           invokeRestart("muffleMessage")
[18:03:04.508]                       }
[18:03:04.508]                       else if (inherits(cond, "warning")) {
[18:03:04.508]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.508]                         if (muffled) 
[18:03:04.508]                           invokeRestart("muffleWarning")
[18:03:04.508]                       }
[18:03:04.508]                       else if (inherits(cond, "condition")) {
[18:03:04.508]                         if (!is.null(pattern)) {
[18:03:04.508]                           computeRestarts <- base::computeRestarts
[18:03:04.508]                           grepl <- base::grepl
[18:03:04.508]                           restarts <- computeRestarts(cond)
[18:03:04.508]                           for (restart in restarts) {
[18:03:04.508]                             name <- restart$name
[18:03:04.508]                             if (is.null(name)) 
[18:03:04.508]                               next
[18:03:04.508]                             if (!grepl(pattern, name)) 
[18:03:04.508]                               next
[18:03:04.508]                             invokeRestart(restart)
[18:03:04.508]                             muffled <- TRUE
[18:03:04.508]                             break
[18:03:04.508]                           }
[18:03:04.508]                         }
[18:03:04.508]                       }
[18:03:04.508]                       invisible(muffled)
[18:03:04.508]                     }
[18:03:04.508]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.508]                   }
[18:03:04.508]                 }
[18:03:04.508]                 else {
[18:03:04.508]                   if (TRUE) {
[18:03:04.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:04.508]                     {
[18:03:04.508]                       inherits <- base::inherits
[18:03:04.508]                       invokeRestart <- base::invokeRestart
[18:03:04.508]                       is.null <- base::is.null
[18:03:04.508]                       muffled <- FALSE
[18:03:04.508]                       if (inherits(cond, "message")) {
[18:03:04.508]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:04.508]                         if (muffled) 
[18:03:04.508]                           invokeRestart("muffleMessage")
[18:03:04.508]                       }
[18:03:04.508]                       else if (inherits(cond, "warning")) {
[18:03:04.508]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:04.508]                         if (muffled) 
[18:03:04.508]                           invokeRestart("muffleWarning")
[18:03:04.508]                       }
[18:03:04.508]                       else if (inherits(cond, "condition")) {
[18:03:04.508]                         if (!is.null(pattern)) {
[18:03:04.508]                           computeRestarts <- base::computeRestarts
[18:03:04.508]                           grepl <- base::grepl
[18:03:04.508]                           restarts <- computeRestarts(cond)
[18:03:04.508]                           for (restart in restarts) {
[18:03:04.508]                             name <- restart$name
[18:03:04.508]                             if (is.null(name)) 
[18:03:04.508]                               next
[18:03:04.508]                             if (!grepl(pattern, name)) 
[18:03:04.508]                               next
[18:03:04.508]                             invokeRestart(restart)
[18:03:04.508]                             muffled <- TRUE
[18:03:04.508]                             break
[18:03:04.508]                           }
[18:03:04.508]                         }
[18:03:04.508]                       }
[18:03:04.508]                       invisible(muffled)
[18:03:04.508]                     }
[18:03:04.508]                     muffleCondition(cond, pattern = "^muffle")
[18:03:04.508]                   }
[18:03:04.508]                 }
[18:03:04.508]             }
[18:03:04.508]         }))
[18:03:04.508]     }, error = function(ex) {
[18:03:04.508]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:04.508]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:04.508]                 ...future.rng), started = ...future.startTime, 
[18:03:04.508]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:04.508]             version = "1.8"), class = "FutureResult")
[18:03:04.508]     }, finally = {
[18:03:04.508]         if (!identical(...future.workdir, getwd())) 
[18:03:04.508]             setwd(...future.workdir)
[18:03:04.508]         {
[18:03:04.508]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:04.508]                 ...future.oldOptions$nwarnings <- NULL
[18:03:04.508]             }
[18:03:04.508]             base::options(...future.oldOptions)
[18:03:04.508]             if (.Platform$OS.type == "windows") {
[18:03:04.508]                 old_names <- names(...future.oldEnvVars)
[18:03:04.508]                 envs <- base::Sys.getenv()
[18:03:04.508]                 names <- names(envs)
[18:03:04.508]                 common <- intersect(names, old_names)
[18:03:04.508]                 added <- setdiff(names, old_names)
[18:03:04.508]                 removed <- setdiff(old_names, names)
[18:03:04.508]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:04.508]                   envs[common]]
[18:03:04.508]                 NAMES <- toupper(changed)
[18:03:04.508]                 args <- list()
[18:03:04.508]                 for (kk in seq_along(NAMES)) {
[18:03:04.508]                   name <- changed[[kk]]
[18:03:04.508]                   NAME <- NAMES[[kk]]
[18:03:04.508]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.508]                     next
[18:03:04.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.508]                 }
[18:03:04.508]                 NAMES <- toupper(added)
[18:03:04.508]                 for (kk in seq_along(NAMES)) {
[18:03:04.508]                   name <- added[[kk]]
[18:03:04.508]                   NAME <- NAMES[[kk]]
[18:03:04.508]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.508]                     next
[18:03:04.508]                   args[[name]] <- ""
[18:03:04.508]                 }
[18:03:04.508]                 NAMES <- toupper(removed)
[18:03:04.508]                 for (kk in seq_along(NAMES)) {
[18:03:04.508]                   name <- removed[[kk]]
[18:03:04.508]                   NAME <- NAMES[[kk]]
[18:03:04.508]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:04.508]                     next
[18:03:04.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:04.508]                 }
[18:03:04.508]                 if (length(args) > 0) 
[18:03:04.508]                   base::do.call(base::Sys.setenv, args = args)
[18:03:04.508]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:04.508]             }
[18:03:04.508]             else {
[18:03:04.508]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:04.508]             }
[18:03:04.508]             {
[18:03:04.508]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:04.508]                   0L) {
[18:03:04.508]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:04.508]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:04.508]                   base::options(opts)
[18:03:04.508]                 }
[18:03:04.508]                 {
[18:03:04.508]                   {
[18:03:04.508]                     NULL
[18:03:04.508]                     RNGkind("Mersenne-Twister")
[18:03:04.508]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:04.508]                       inherits = FALSE)
[18:03:04.508]                   }
[18:03:04.508]                   options(future.plan = NULL)
[18:03:04.508]                   if (is.na(NA_character_)) 
[18:03:04.508]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:04.508]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:04.508]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:04.508]                     .init = FALSE)
[18:03:04.508]                 }
[18:03:04.508]             }
[18:03:04.508]         }
[18:03:04.508]     })
[18:03:04.508]     if (TRUE) {
[18:03:04.508]         base::sink(type = "output", split = FALSE)
[18:03:04.508]         if (TRUE) {
[18:03:04.508]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:04.508]         }
[18:03:04.508]         else {
[18:03:04.508]             ...future.result["stdout"] <- base::list(NULL)
[18:03:04.508]         }
[18:03:04.508]         base::close(...future.stdout)
[18:03:04.508]         ...future.stdout <- NULL
[18:03:04.508]     }
[18:03:04.508]     ...future.result$conditions <- ...future.conditions
[18:03:04.508]     ...future.result$finished <- base::Sys.time()
[18:03:04.508]     ...future.result
[18:03:04.508] }
[18:03:04.518] plan(): Setting new future strategy stack:
[18:03:04.518] List of future strategies:
[18:03:04.518] 1. sequential:
[18:03:04.518]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.518]    - tweaked: FALSE
[18:03:04.518]    - call: NULL
[18:03:04.521] plan(): nbrOfWorkers() = 1
[18:03:04.525] plan(): Setting new future strategy stack:
[18:03:04.526] List of future strategies:
[18:03:04.526] 1. sequential:
[18:03:04.526]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:04.526]    - tweaked: FALSE
[18:03:04.526]    - call: future::plan("sequential")
[18:03:04.529] plan(): nbrOfWorkers() = 1
[18:03:04.530] SequentialFuture started (and completed)
[18:03:04.530] signalConditions() ...
[18:03:04.530]  - include = ‘immediateCondition’
[18:03:04.530]  - exclude = 
[18:03:04.530]  - resignal = FALSE
[18:03:04.531]  - Number of conditions: 1
[18:03:04.532] signalConditions() ... done
[18:03:04.533] - Launch lazy future ... done
[18:03:04.533] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[18:03:04.533] signalConditions() ...
[18:03:04.533]  - include = ‘immediateCondition’
[18:03:04.534]  - exclude = 
[18:03:04.534]  - resignal = FALSE
[18:03:04.534]  - Number of conditions: 1
[18:03:04.534] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[18:03:04.545] plan(): Setting new future strategy stack:
[18:03:04.545] List of future strategies:
[18:03:04.545] 1. multisession:
[18:03:04.545]    - args: function (..., workers = 2L, envir = parent.frame())
[18:03:04.545]    - tweaked: TRUE
[18:03:04.545]    - call: plan(multisession, workers = 2L)
[18:03:04.572] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:03:04.573] multisession:
[18:03:04.573] - args: function (..., workers = 2L, envir = parent.frame())
[18:03:04.573] - tweaked: TRUE
[18:03:04.573] - call: plan(multisession, workers = 2L)
[18:03:04.574] getGlobalsAndPackages() ...
[18:03:04.574] Not searching for globals
[18:03:04.575] - globals: [0] <none>
[18:03:04.575] getGlobalsAndPackages() ... DONE
[18:03:04.576] [local output] makeClusterPSOCK() ...
[18:03:04.629] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:03:04.631] [local output] Base port: 11426
[18:03:04.631] [local output] Getting setup options for 2 cluster nodes ...
[18:03:04.631] [local output]  - Node 1 of 2 ...
[18:03:04.632] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:04.634] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpmh1GCd/worker.rank=1.parallelly.parent=318883.4dda3678c63d9.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpmh1GCd/worker.rank=1.parallelly.parent=318883.4dda3678c63d9.pid")'’
[18:03:04.931] - Possible to infer worker's PID: TRUE
[18:03:04.931] [local output] Rscript port: 11426

[18:03:04.932] [local output]  - Node 2 of 2 ...
[18:03:04.933] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:04.934] [local output] Rscript port: 11426

[18:03:04.934] [local output] Getting setup options for 2 cluster nodes ... done
[18:03:04.935] [local output]  - Parallel setup requested for some PSOCK nodes
[18:03:04.936] [local output] Setting up PSOCK nodes in parallel
[18:03:04.936] List of 36
[18:03:04.936]  $ worker          : chr "localhost"
[18:03:04.936]   ..- attr(*, "localhost")= logi TRUE
[18:03:04.936]  $ master          : chr "localhost"
[18:03:04.936]  $ port            : int 11426
[18:03:04.936]  $ connectTimeout  : num 120
[18:03:04.936]  $ timeout         : num 2592000
[18:03:04.936]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:03:04.936]  $ homogeneous     : logi TRUE
[18:03:04.936]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:03:04.936]  $ rscript_envs    : NULL
[18:03:04.936]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:04.936]  $ rscript_startup : NULL
[18:03:04.936]  $ rscript_sh      : chr "sh"
[18:03:04.936]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:04.936]  $ methods         : logi TRUE
[18:03:04.936]  $ socketOptions   : chr "no-delay"
[18:03:04.936]  $ useXDR          : logi FALSE
[18:03:04.936]  $ outfile         : chr "/dev/null"
[18:03:04.936]  $ renice          : int NA
[18:03:04.936]  $ rshcmd          : NULL
[18:03:04.936]  $ user            : chr(0) 
[18:03:04.936]  $ revtunnel       : logi FALSE
[18:03:04.936]  $ rshlogfile      : NULL
[18:03:04.936]  $ rshopts         : chr(0) 
[18:03:04.936]  $ rank            : int 1
[18:03:04.936]  $ manual          : logi FALSE
[18:03:04.936]  $ dryrun          : logi FALSE
[18:03:04.936]  $ quiet           : logi FALSE
[18:03:04.936]  $ setup_strategy  : chr "parallel"
[18:03:04.936]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:04.936]  $ pidfile         : chr "/tmp/Rtmpmh1GCd/worker.rank=1.parallelly.parent=318883.4dda3678c63d9.pid"
[18:03:04.936]  $ rshcmd_label    : NULL
[18:03:04.936]  $ rsh_call        : NULL
[18:03:04.936]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:04.936]  $ localMachine    : logi TRUE
[18:03:04.936]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:03:04.936]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:03:04.936]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:03:04.936]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:03:04.936]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:03:04.936]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:03:04.936]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:03:04.936]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:03:04.936]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:03:04.936]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:03:04.936]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:03:04.936]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:03:04.936]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:03:04.936]  $ arguments       :List of 28
[18:03:04.936]   ..$ worker          : chr "localhost"
[18:03:04.936]   ..$ master          : NULL
[18:03:04.936]   ..$ port            : int 11426
[18:03:04.936]   ..$ connectTimeout  : num 120
[18:03:04.936]   ..$ timeout         : num 2592000
[18:03:04.936]   ..$ rscript         : NULL
[18:03:04.936]   ..$ homogeneous     : NULL
[18:03:04.936]   ..$ rscript_args    : NULL
[18:03:04.936]   ..$ rscript_envs    : NULL
[18:03:04.936]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:04.936]   ..$ rscript_startup : NULL
[18:03:04.936]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:03:04.936]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:04.936]   ..$ methods         : logi TRUE
[18:03:04.936]   ..$ socketOptions   : chr "no-delay"
[18:03:04.936]   ..$ useXDR          : logi FALSE
[18:03:04.936]   ..$ outfile         : chr "/dev/null"
[18:03:04.936]   ..$ renice          : int NA
[18:03:04.936]   ..$ rshcmd          : NULL
[18:03:04.936]   ..$ user            : NULL
[18:03:04.936]   ..$ revtunnel       : logi NA
[18:03:04.936]   ..$ rshlogfile      : NULL
[18:03:04.936]   ..$ rshopts         : NULL
[18:03:04.936]   ..$ rank            : int 1
[18:03:04.936]   ..$ manual          : logi FALSE
[18:03:04.936]   ..$ dryrun          : logi FALSE
[18:03:04.936]   ..$ quiet           : logi FALSE
[18:03:04.936]   ..$ setup_strategy  : chr "parallel"
[18:03:04.936]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:03:04.974] [local output] System call to launch all workers:
[18:03:04.974] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpmh1GCd/worker.rank=1.parallelly.parent=318883.4dda3678c63d9.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11426 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:03:04.974] [local output] Starting PSOCK main server
[18:03:04.982] [local output] Workers launched
[18:03:04.983] [local output] Waiting for workers to connect back
[18:03:04.983]  - [local output] 0 workers out of 2 ready
[18:03:05.383]  - [local output] 0 workers out of 2 ready
[18:03:05.384]  - [local output] 1 workers out of 2 ready
[18:03:05.390]  - [local output] 1 workers out of 2 ready
[18:03:05.391]  - [local output] 2 workers out of 2 ready
[18:03:05.392] [local output] Launching of workers completed
[18:03:05.392] [local output] Collecting session information from workers
[18:03:05.394] [local output]  - Worker #1 of 2
[18:03:05.395] [local output]  - Worker #2 of 2
[18:03:05.395] [local output] makeClusterPSOCK() ... done
[18:03:05.415] Packages needed by the future expression (n = 0): <none>
[18:03:05.415] Packages needed by future strategies (n = 0): <none>
[18:03:05.416] {
[18:03:05.416]     {
[18:03:05.416]         {
[18:03:05.416]             ...future.startTime <- base::Sys.time()
[18:03:05.416]             {
[18:03:05.416]                 {
[18:03:05.416]                   {
[18:03:05.416]                     {
[18:03:05.416]                       base::local({
[18:03:05.416]                         has_future <- base::requireNamespace("future", 
[18:03:05.416]                           quietly = TRUE)
[18:03:05.416]                         if (has_future) {
[18:03:05.416]                           ns <- base::getNamespace("future")
[18:03:05.416]                           version <- ns[[".package"]][["version"]]
[18:03:05.416]                           if (is.null(version)) 
[18:03:05.416]                             version <- utils::packageVersion("future")
[18:03:05.416]                         }
[18:03:05.416]                         else {
[18:03:05.416]                           version <- NULL
[18:03:05.416]                         }
[18:03:05.416]                         if (!has_future || version < "1.8.0") {
[18:03:05.416]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:05.416]                             "", base::R.version$version.string), 
[18:03:05.416]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:05.416]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:05.416]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:05.416]                               "release", "version")], collapse = " "), 
[18:03:05.416]                             hostname = base::Sys.info()[["nodename"]])
[18:03:05.416]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:05.416]                             info)
[18:03:05.416]                           info <- base::paste(info, collapse = "; ")
[18:03:05.416]                           if (!has_future) {
[18:03:05.416]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:05.416]                               info)
[18:03:05.416]                           }
[18:03:05.416]                           else {
[18:03:05.416]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:05.416]                               info, version)
[18:03:05.416]                           }
[18:03:05.416]                           base::stop(msg)
[18:03:05.416]                         }
[18:03:05.416]                       })
[18:03:05.416]                     }
[18:03:05.416]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:05.416]                     base::options(mc.cores = 1L)
[18:03:05.416]                   }
[18:03:05.416]                   ...future.strategy.old <- future::plan("list")
[18:03:05.416]                   options(future.plan = NULL)
[18:03:05.416]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:05.416]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:05.416]                 }
[18:03:05.416]                 ...future.workdir <- getwd()
[18:03:05.416]             }
[18:03:05.416]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:05.416]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:05.416]         }
[18:03:05.416]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:05.416]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:05.416]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:05.416]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:05.416]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:05.416]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:05.416]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:05.416]             base::names(...future.oldOptions))
[18:03:05.416]     }
[18:03:05.416]     if (FALSE) {
[18:03:05.416]     }
[18:03:05.416]     else {
[18:03:05.416]         if (TRUE) {
[18:03:05.416]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:05.416]                 open = "w")
[18:03:05.416]         }
[18:03:05.416]         else {
[18:03:05.416]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:05.416]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:05.416]         }
[18:03:05.416]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:05.416]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:05.416]             base::sink(type = "output", split = FALSE)
[18:03:05.416]             base::close(...future.stdout)
[18:03:05.416]         }, add = TRUE)
[18:03:05.416]     }
[18:03:05.416]     ...future.frame <- base::sys.nframe()
[18:03:05.416]     ...future.conditions <- base::list()
[18:03:05.416]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:05.416]     if (FALSE) {
[18:03:05.416]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:05.416]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:05.416]     }
[18:03:05.416]     ...future.result <- base::tryCatch({
[18:03:05.416]         base::withCallingHandlers({
[18:03:05.416]             ...future.value <- base::withVisible(base::local({
[18:03:05.416]                 ...future.makeSendCondition <- base::local({
[18:03:05.416]                   sendCondition <- NULL
[18:03:05.416]                   function(frame = 1L) {
[18:03:05.416]                     if (is.function(sendCondition)) 
[18:03:05.416]                       return(sendCondition)
[18:03:05.416]                     ns <- getNamespace("parallel")
[18:03:05.416]                     if (exists("sendData", mode = "function", 
[18:03:05.416]                       envir = ns)) {
[18:03:05.416]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:05.416]                         envir = ns)
[18:03:05.416]                       envir <- sys.frame(frame)
[18:03:05.416]                       master <- NULL
[18:03:05.416]                       while (!identical(envir, .GlobalEnv) && 
[18:03:05.416]                         !identical(envir, emptyenv())) {
[18:03:05.416]                         if (exists("master", mode = "list", envir = envir, 
[18:03:05.416]                           inherits = FALSE)) {
[18:03:05.416]                           master <- get("master", mode = "list", 
[18:03:05.416]                             envir = envir, inherits = FALSE)
[18:03:05.416]                           if (inherits(master, c("SOCKnode", 
[18:03:05.416]                             "SOCK0node"))) {
[18:03:05.416]                             sendCondition <<- function(cond) {
[18:03:05.416]                               data <- list(type = "VALUE", value = cond, 
[18:03:05.416]                                 success = TRUE)
[18:03:05.416]                               parallel_sendData(master, data)
[18:03:05.416]                             }
[18:03:05.416]                             return(sendCondition)
[18:03:05.416]                           }
[18:03:05.416]                         }
[18:03:05.416]                         frame <- frame + 1L
[18:03:05.416]                         envir <- sys.frame(frame)
[18:03:05.416]                       }
[18:03:05.416]                     }
[18:03:05.416]                     sendCondition <<- function(cond) NULL
[18:03:05.416]                   }
[18:03:05.416]                 })
[18:03:05.416]                 withCallingHandlers({
[18:03:05.416]                   NA
[18:03:05.416]                 }, immediateCondition = function(cond) {
[18:03:05.416]                   sendCondition <- ...future.makeSendCondition()
[18:03:05.416]                   sendCondition(cond)
[18:03:05.416]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:05.416]                   {
[18:03:05.416]                     inherits <- base::inherits
[18:03:05.416]                     invokeRestart <- base::invokeRestart
[18:03:05.416]                     is.null <- base::is.null
[18:03:05.416]                     muffled <- FALSE
[18:03:05.416]                     if (inherits(cond, "message")) {
[18:03:05.416]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:05.416]                       if (muffled) 
[18:03:05.416]                         invokeRestart("muffleMessage")
[18:03:05.416]                     }
[18:03:05.416]                     else if (inherits(cond, "warning")) {
[18:03:05.416]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:05.416]                       if (muffled) 
[18:03:05.416]                         invokeRestart("muffleWarning")
[18:03:05.416]                     }
[18:03:05.416]                     else if (inherits(cond, "condition")) {
[18:03:05.416]                       if (!is.null(pattern)) {
[18:03:05.416]                         computeRestarts <- base::computeRestarts
[18:03:05.416]                         grepl <- base::grepl
[18:03:05.416]                         restarts <- computeRestarts(cond)
[18:03:05.416]                         for (restart in restarts) {
[18:03:05.416]                           name <- restart$name
[18:03:05.416]                           if (is.null(name)) 
[18:03:05.416]                             next
[18:03:05.416]                           if (!grepl(pattern, name)) 
[18:03:05.416]                             next
[18:03:05.416]                           invokeRestart(restart)
[18:03:05.416]                           muffled <- TRUE
[18:03:05.416]                           break
[18:03:05.416]                         }
[18:03:05.416]                       }
[18:03:05.416]                     }
[18:03:05.416]                     invisible(muffled)
[18:03:05.416]                   }
[18:03:05.416]                   muffleCondition(cond)
[18:03:05.416]                 })
[18:03:05.416]             }))
[18:03:05.416]             future::FutureResult(value = ...future.value$value, 
[18:03:05.416]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:05.416]                   ...future.rng), globalenv = if (FALSE) 
[18:03:05.416]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:05.416]                     ...future.globalenv.names))
[18:03:05.416]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:05.416]         }, condition = base::local({
[18:03:05.416]             c <- base::c
[18:03:05.416]             inherits <- base::inherits
[18:03:05.416]             invokeRestart <- base::invokeRestart
[18:03:05.416]             length <- base::length
[18:03:05.416]             list <- base::list
[18:03:05.416]             seq.int <- base::seq.int
[18:03:05.416]             signalCondition <- base::signalCondition
[18:03:05.416]             sys.calls <- base::sys.calls
[18:03:05.416]             `[[` <- base::`[[`
[18:03:05.416]             `+` <- base::`+`
[18:03:05.416]             `<<-` <- base::`<<-`
[18:03:05.416]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:05.416]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:05.416]                   3L)]
[18:03:05.416]             }
[18:03:05.416]             function(cond) {
[18:03:05.416]                 is_error <- inherits(cond, "error")
[18:03:05.416]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:05.416]                   NULL)
[18:03:05.416]                 if (is_error) {
[18:03:05.416]                   sessionInformation <- function() {
[18:03:05.416]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:05.416]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:05.416]                       search = base::search(), system = base::Sys.info())
[18:03:05.416]                   }
[18:03:05.416]                   ...future.conditions[[length(...future.conditions) + 
[18:03:05.416]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:05.416]                     cond$call), session = sessionInformation(), 
[18:03:05.416]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:05.416]                   signalCondition(cond)
[18:03:05.416]                 }
[18:03:05.416]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:05.416]                 "immediateCondition"))) {
[18:03:05.416]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:05.416]                   ...future.conditions[[length(...future.conditions) + 
[18:03:05.416]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:05.416]                   if (TRUE && !signal) {
[18:03:05.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:05.416]                     {
[18:03:05.416]                       inherits <- base::inherits
[18:03:05.416]                       invokeRestart <- base::invokeRestart
[18:03:05.416]                       is.null <- base::is.null
[18:03:05.416]                       muffled <- FALSE
[18:03:05.416]                       if (inherits(cond, "message")) {
[18:03:05.416]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:05.416]                         if (muffled) 
[18:03:05.416]                           invokeRestart("muffleMessage")
[18:03:05.416]                       }
[18:03:05.416]                       else if (inherits(cond, "warning")) {
[18:03:05.416]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:05.416]                         if (muffled) 
[18:03:05.416]                           invokeRestart("muffleWarning")
[18:03:05.416]                       }
[18:03:05.416]                       else if (inherits(cond, "condition")) {
[18:03:05.416]                         if (!is.null(pattern)) {
[18:03:05.416]                           computeRestarts <- base::computeRestarts
[18:03:05.416]                           grepl <- base::grepl
[18:03:05.416]                           restarts <- computeRestarts(cond)
[18:03:05.416]                           for (restart in restarts) {
[18:03:05.416]                             name <- restart$name
[18:03:05.416]                             if (is.null(name)) 
[18:03:05.416]                               next
[18:03:05.416]                             if (!grepl(pattern, name)) 
[18:03:05.416]                               next
[18:03:05.416]                             invokeRestart(restart)
[18:03:05.416]                             muffled <- TRUE
[18:03:05.416]                             break
[18:03:05.416]                           }
[18:03:05.416]                         }
[18:03:05.416]                       }
[18:03:05.416]                       invisible(muffled)
[18:03:05.416]                     }
[18:03:05.416]                     muffleCondition(cond, pattern = "^muffle")
[18:03:05.416]                   }
[18:03:05.416]                 }
[18:03:05.416]                 else {
[18:03:05.416]                   if (TRUE) {
[18:03:05.416]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:05.416]                     {
[18:03:05.416]                       inherits <- base::inherits
[18:03:05.416]                       invokeRestart <- base::invokeRestart
[18:03:05.416]                       is.null <- base::is.null
[18:03:05.416]                       muffled <- FALSE
[18:03:05.416]                       if (inherits(cond, "message")) {
[18:03:05.416]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:05.416]                         if (muffled) 
[18:03:05.416]                           invokeRestart("muffleMessage")
[18:03:05.416]                       }
[18:03:05.416]                       else if (inherits(cond, "warning")) {
[18:03:05.416]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:05.416]                         if (muffled) 
[18:03:05.416]                           invokeRestart("muffleWarning")
[18:03:05.416]                       }
[18:03:05.416]                       else if (inherits(cond, "condition")) {
[18:03:05.416]                         if (!is.null(pattern)) {
[18:03:05.416]                           computeRestarts <- base::computeRestarts
[18:03:05.416]                           grepl <- base::grepl
[18:03:05.416]                           restarts <- computeRestarts(cond)
[18:03:05.416]                           for (restart in restarts) {
[18:03:05.416]                             name <- restart$name
[18:03:05.416]                             if (is.null(name)) 
[18:03:05.416]                               next
[18:03:05.416]                             if (!grepl(pattern, name)) 
[18:03:05.416]                               next
[18:03:05.416]                             invokeRestart(restart)
[18:03:05.416]                             muffled <- TRUE
[18:03:05.416]                             break
[18:03:05.416]                           }
[18:03:05.416]                         }
[18:03:05.416]                       }
[18:03:05.416]                       invisible(muffled)
[18:03:05.416]                     }
[18:03:05.416]                     muffleCondition(cond, pattern = "^muffle")
[18:03:05.416]                   }
[18:03:05.416]                 }
[18:03:05.416]             }
[18:03:05.416]         }))
[18:03:05.416]     }, error = function(ex) {
[18:03:05.416]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:05.416]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:05.416]                 ...future.rng), started = ...future.startTime, 
[18:03:05.416]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:05.416]             version = "1.8"), class = "FutureResult")
[18:03:05.416]     }, finally = {
[18:03:05.416]         if (!identical(...future.workdir, getwd())) 
[18:03:05.416]             setwd(...future.workdir)
[18:03:05.416]         {
[18:03:05.416]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:05.416]                 ...future.oldOptions$nwarnings <- NULL
[18:03:05.416]             }
[18:03:05.416]             base::options(...future.oldOptions)
[18:03:05.416]             if (.Platform$OS.type == "windows") {
[18:03:05.416]                 old_names <- names(...future.oldEnvVars)
[18:03:05.416]                 envs <- base::Sys.getenv()
[18:03:05.416]                 names <- names(envs)
[18:03:05.416]                 common <- intersect(names, old_names)
[18:03:05.416]                 added <- setdiff(names, old_names)
[18:03:05.416]                 removed <- setdiff(old_names, names)
[18:03:05.416]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:05.416]                   envs[common]]
[18:03:05.416]                 NAMES <- toupper(changed)
[18:03:05.416]                 args <- list()
[18:03:05.416]                 for (kk in seq_along(NAMES)) {
[18:03:05.416]                   name <- changed[[kk]]
[18:03:05.416]                   NAME <- NAMES[[kk]]
[18:03:05.416]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:05.416]                     next
[18:03:05.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:05.416]                 }
[18:03:05.416]                 NAMES <- toupper(added)
[18:03:05.416]                 for (kk in seq_along(NAMES)) {
[18:03:05.416]                   name <- added[[kk]]
[18:03:05.416]                   NAME <- NAMES[[kk]]
[18:03:05.416]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:05.416]                     next
[18:03:05.416]                   args[[name]] <- ""
[18:03:05.416]                 }
[18:03:05.416]                 NAMES <- toupper(removed)
[18:03:05.416]                 for (kk in seq_along(NAMES)) {
[18:03:05.416]                   name <- removed[[kk]]
[18:03:05.416]                   NAME <- NAMES[[kk]]
[18:03:05.416]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:05.416]                     next
[18:03:05.416]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:05.416]                 }
[18:03:05.416]                 if (length(args) > 0) 
[18:03:05.416]                   base::do.call(base::Sys.setenv, args = args)
[18:03:05.416]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:05.416]             }
[18:03:05.416]             else {
[18:03:05.416]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:05.416]             }
[18:03:05.416]             {
[18:03:05.416]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:05.416]                   0L) {
[18:03:05.416]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:05.416]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:05.416]                   base::options(opts)
[18:03:05.416]                 }
[18:03:05.416]                 {
[18:03:05.416]                   {
[18:03:05.416]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:05.416]                     NULL
[18:03:05.416]                   }
[18:03:05.416]                   options(future.plan = NULL)
[18:03:05.416]                   if (is.na(NA_character_)) 
[18:03:05.416]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:05.416]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:05.416]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:05.416]                     .init = FALSE)
[18:03:05.416]                 }
[18:03:05.416]             }
[18:03:05.416]         }
[18:03:05.416]     })
[18:03:05.416]     if (TRUE) {
[18:03:05.416]         base::sink(type = "output", split = FALSE)
[18:03:05.416]         if (TRUE) {
[18:03:05.416]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:05.416]         }
[18:03:05.416]         else {
[18:03:05.416]             ...future.result["stdout"] <- base::list(NULL)
[18:03:05.416]         }
[18:03:05.416]         base::close(...future.stdout)
[18:03:05.416]         ...future.stdout <- NULL
[18:03:05.416]     }
[18:03:05.416]     ...future.result$conditions <- ...future.conditions
[18:03:05.416]     ...future.result$finished <- base::Sys.time()
[18:03:05.416]     ...future.result
[18:03:05.416] }
[18:03:05.518] MultisessionFuture started
[18:03:05.519] result() for ClusterFuture ...
[18:03:05.520] receiveMessageFromWorker() for ClusterFuture ...
[18:03:05.520] - Validating connection of MultisessionFuture
[18:03:05.584] - received message: FutureResult
[18:03:05.584] - Received FutureResult
[18:03:05.590] - Erased future from FutureRegistry
[18:03:05.591] result() for ClusterFuture ...
[18:03:05.591] - result already collected: FutureResult
[18:03:05.591] result() for ClusterFuture ... done
[18:03:05.591] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:05.591] result() for ClusterFuture ... done
[18:03:05.592] result() for ClusterFuture ...
[18:03:05.592] - result already collected: FutureResult
[18:03:05.592] result() for ClusterFuture ... done
[18:03:05.592] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:03:05.593] plan(): nbrOfWorkers() = 2
[18:03:05.593] getGlobalsAndPackages() ...
[18:03:05.594] Searching for globals...
[18:03:05.597] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[18:03:05.597] Searching for globals ... DONE
[18:03:05.597] Resolving globals: FALSE
[18:03:05.598] 
[18:03:05.599] 
[18:03:05.599] getGlobalsAndPackages() ... DONE
[18:03:05.599] run() for ‘Future’ ...
[18:03:05.600] - state: ‘created’
[18:03:05.600] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:05.620] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:05.620] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:05.621]   - Field: ‘node’
[18:03:05.621]   - Field: ‘label’
[18:03:05.621]   - Field: ‘local’
[18:03:05.621]   - Field: ‘owner’
[18:03:05.622]   - Field: ‘envir’
[18:03:05.622]   - Field: ‘workers’
[18:03:05.624]   - Field: ‘packages’
[18:03:05.624]   - Field: ‘gc’
[18:03:05.626]   - Field: ‘conditions’
[18:03:05.626]   - Field: ‘persistent’
[18:03:05.627]   - Field: ‘expr’
[18:03:05.628]   - Field: ‘uuid’
[18:03:05.628]   - Field: ‘seed’
[18:03:05.628]   - Field: ‘version’
[18:03:05.629]   - Field: ‘result’
[18:03:05.629]   - Field: ‘asynchronous’
[18:03:05.629]   - Field: ‘calls’
[18:03:05.629]   - Field: ‘globals’
[18:03:05.630]   - Field: ‘stdout’
[18:03:05.630]   - Field: ‘earlySignal’
[18:03:05.630]   - Field: ‘lazy’
[18:03:05.630]   - Field: ‘state’
[18:03:05.631] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:05.631] - Launch lazy future ...
[18:03:05.631] Packages needed by the future expression (n = 0): <none>
[18:03:05.632] Packages needed by future strategies (n = 0): <none>
[18:03:05.633] {
[18:03:05.633]     {
[18:03:05.633]         {
[18:03:05.633]             ...future.startTime <- base::Sys.time()
[18:03:05.633]             {
[18:03:05.633]                 {
[18:03:05.633]                   {
[18:03:05.633]                     {
[18:03:05.633]                       base::local({
[18:03:05.633]                         has_future <- base::requireNamespace("future", 
[18:03:05.633]                           quietly = TRUE)
[18:03:05.633]                         if (has_future) {
[18:03:05.633]                           ns <- base::getNamespace("future")
[18:03:05.633]                           version <- ns[[".package"]][["version"]]
[18:03:05.633]                           if (is.null(version)) 
[18:03:05.633]                             version <- utils::packageVersion("future")
[18:03:05.633]                         }
[18:03:05.633]                         else {
[18:03:05.633]                           version <- NULL
[18:03:05.633]                         }
[18:03:05.633]                         if (!has_future || version < "1.8.0") {
[18:03:05.633]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:05.633]                             "", base::R.version$version.string), 
[18:03:05.633]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:05.633]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:05.633]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:05.633]                               "release", "version")], collapse = " "), 
[18:03:05.633]                             hostname = base::Sys.info()[["nodename"]])
[18:03:05.633]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:05.633]                             info)
[18:03:05.633]                           info <- base::paste(info, collapse = "; ")
[18:03:05.633]                           if (!has_future) {
[18:03:05.633]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:05.633]                               info)
[18:03:05.633]                           }
[18:03:05.633]                           else {
[18:03:05.633]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:05.633]                               info, version)
[18:03:05.633]                           }
[18:03:05.633]                           base::stop(msg)
[18:03:05.633]                         }
[18:03:05.633]                       })
[18:03:05.633]                     }
[18:03:05.633]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:05.633]                     base::options(mc.cores = 1L)
[18:03:05.633]                   }
[18:03:05.633]                   ...future.strategy.old <- future::plan("list")
[18:03:05.633]                   options(future.plan = NULL)
[18:03:05.633]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:05.633]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:05.633]                 }
[18:03:05.633]                 ...future.workdir <- getwd()
[18:03:05.633]             }
[18:03:05.633]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:05.633]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:05.633]         }
[18:03:05.633]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:05.633]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:05.633]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:05.633]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:05.633]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:05.633]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:05.633]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:05.633]             base::names(...future.oldOptions))
[18:03:05.633]     }
[18:03:05.633]     if (FALSE) {
[18:03:05.633]     }
[18:03:05.633]     else {
[18:03:05.633]         if (TRUE) {
[18:03:05.633]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:05.633]                 open = "w")
[18:03:05.633]         }
[18:03:05.633]         else {
[18:03:05.633]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:05.633]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:05.633]         }
[18:03:05.633]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:05.633]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:05.633]             base::sink(type = "output", split = FALSE)
[18:03:05.633]             base::close(...future.stdout)
[18:03:05.633]         }, add = TRUE)
[18:03:05.633]     }
[18:03:05.633]     ...future.frame <- base::sys.nframe()
[18:03:05.633]     ...future.conditions <- base::list()
[18:03:05.633]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:05.633]     if (FALSE) {
[18:03:05.633]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:05.633]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:05.633]     }
[18:03:05.633]     ...future.result <- base::tryCatch({
[18:03:05.633]         base::withCallingHandlers({
[18:03:05.633]             ...future.value <- base::withVisible(base::local({
[18:03:05.633]                 ...future.makeSendCondition <- base::local({
[18:03:05.633]                   sendCondition <- NULL
[18:03:05.633]                   function(frame = 1L) {
[18:03:05.633]                     if (is.function(sendCondition)) 
[18:03:05.633]                       return(sendCondition)
[18:03:05.633]                     ns <- getNamespace("parallel")
[18:03:05.633]                     if (exists("sendData", mode = "function", 
[18:03:05.633]                       envir = ns)) {
[18:03:05.633]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:05.633]                         envir = ns)
[18:03:05.633]                       envir <- sys.frame(frame)
[18:03:05.633]                       master <- NULL
[18:03:05.633]                       while (!identical(envir, .GlobalEnv) && 
[18:03:05.633]                         !identical(envir, emptyenv())) {
[18:03:05.633]                         if (exists("master", mode = "list", envir = envir, 
[18:03:05.633]                           inherits = FALSE)) {
[18:03:05.633]                           master <- get("master", mode = "list", 
[18:03:05.633]                             envir = envir, inherits = FALSE)
[18:03:05.633]                           if (inherits(master, c("SOCKnode", 
[18:03:05.633]                             "SOCK0node"))) {
[18:03:05.633]                             sendCondition <<- function(cond) {
[18:03:05.633]                               data <- list(type = "VALUE", value = cond, 
[18:03:05.633]                                 success = TRUE)
[18:03:05.633]                               parallel_sendData(master, data)
[18:03:05.633]                             }
[18:03:05.633]                             return(sendCondition)
[18:03:05.633]                           }
[18:03:05.633]                         }
[18:03:05.633]                         frame <- frame + 1L
[18:03:05.633]                         envir <- sys.frame(frame)
[18:03:05.633]                       }
[18:03:05.633]                     }
[18:03:05.633]                     sendCondition <<- function(cond) NULL
[18:03:05.633]                   }
[18:03:05.633]                 })
[18:03:05.633]                 withCallingHandlers({
[18:03:05.633]                   {
[18:03:05.633]                     Sys.sleep(3)
[18:03:05.633]                     42L
[18:03:05.633]                     stop("Woops")
[18:03:05.633]                   }
[18:03:05.633]                 }, immediateCondition = function(cond) {
[18:03:05.633]                   sendCondition <- ...future.makeSendCondition()
[18:03:05.633]                   sendCondition(cond)
[18:03:05.633]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:05.633]                   {
[18:03:05.633]                     inherits <- base::inherits
[18:03:05.633]                     invokeRestart <- base::invokeRestart
[18:03:05.633]                     is.null <- base::is.null
[18:03:05.633]                     muffled <- FALSE
[18:03:05.633]                     if (inherits(cond, "message")) {
[18:03:05.633]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:05.633]                       if (muffled) 
[18:03:05.633]                         invokeRestart("muffleMessage")
[18:03:05.633]                     }
[18:03:05.633]                     else if (inherits(cond, "warning")) {
[18:03:05.633]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:05.633]                       if (muffled) 
[18:03:05.633]                         invokeRestart("muffleWarning")
[18:03:05.633]                     }
[18:03:05.633]                     else if (inherits(cond, "condition")) {
[18:03:05.633]                       if (!is.null(pattern)) {
[18:03:05.633]                         computeRestarts <- base::computeRestarts
[18:03:05.633]                         grepl <- base::grepl
[18:03:05.633]                         restarts <- computeRestarts(cond)
[18:03:05.633]                         for (restart in restarts) {
[18:03:05.633]                           name <- restart$name
[18:03:05.633]                           if (is.null(name)) 
[18:03:05.633]                             next
[18:03:05.633]                           if (!grepl(pattern, name)) 
[18:03:05.633]                             next
[18:03:05.633]                           invokeRestart(restart)
[18:03:05.633]                           muffled <- TRUE
[18:03:05.633]                           break
[18:03:05.633]                         }
[18:03:05.633]                       }
[18:03:05.633]                     }
[18:03:05.633]                     invisible(muffled)
[18:03:05.633]                   }
[18:03:05.633]                   muffleCondition(cond)
[18:03:05.633]                 })
[18:03:05.633]             }))
[18:03:05.633]             future::FutureResult(value = ...future.value$value, 
[18:03:05.633]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:05.633]                   ...future.rng), globalenv = if (FALSE) 
[18:03:05.633]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:05.633]                     ...future.globalenv.names))
[18:03:05.633]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:05.633]         }, condition = base::local({
[18:03:05.633]             c <- base::c
[18:03:05.633]             inherits <- base::inherits
[18:03:05.633]             invokeRestart <- base::invokeRestart
[18:03:05.633]             length <- base::length
[18:03:05.633]             list <- base::list
[18:03:05.633]             seq.int <- base::seq.int
[18:03:05.633]             signalCondition <- base::signalCondition
[18:03:05.633]             sys.calls <- base::sys.calls
[18:03:05.633]             `[[` <- base::`[[`
[18:03:05.633]             `+` <- base::`+`
[18:03:05.633]             `<<-` <- base::`<<-`
[18:03:05.633]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:05.633]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:05.633]                   3L)]
[18:03:05.633]             }
[18:03:05.633]             function(cond) {
[18:03:05.633]                 is_error <- inherits(cond, "error")
[18:03:05.633]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:05.633]                   NULL)
[18:03:05.633]                 if (is_error) {
[18:03:05.633]                   sessionInformation <- function() {
[18:03:05.633]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:05.633]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:05.633]                       search = base::search(), system = base::Sys.info())
[18:03:05.633]                   }
[18:03:05.633]                   ...future.conditions[[length(...future.conditions) + 
[18:03:05.633]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:05.633]                     cond$call), session = sessionInformation(), 
[18:03:05.633]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:05.633]                   signalCondition(cond)
[18:03:05.633]                 }
[18:03:05.633]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:05.633]                 "immediateCondition"))) {
[18:03:05.633]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:05.633]                   ...future.conditions[[length(...future.conditions) + 
[18:03:05.633]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:05.633]                   if (TRUE && !signal) {
[18:03:05.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:05.633]                     {
[18:03:05.633]                       inherits <- base::inherits
[18:03:05.633]                       invokeRestart <- base::invokeRestart
[18:03:05.633]                       is.null <- base::is.null
[18:03:05.633]                       muffled <- FALSE
[18:03:05.633]                       if (inherits(cond, "message")) {
[18:03:05.633]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:05.633]                         if (muffled) 
[18:03:05.633]                           invokeRestart("muffleMessage")
[18:03:05.633]                       }
[18:03:05.633]                       else if (inherits(cond, "warning")) {
[18:03:05.633]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:05.633]                         if (muffled) 
[18:03:05.633]                           invokeRestart("muffleWarning")
[18:03:05.633]                       }
[18:03:05.633]                       else if (inherits(cond, "condition")) {
[18:03:05.633]                         if (!is.null(pattern)) {
[18:03:05.633]                           computeRestarts <- base::computeRestarts
[18:03:05.633]                           grepl <- base::grepl
[18:03:05.633]                           restarts <- computeRestarts(cond)
[18:03:05.633]                           for (restart in restarts) {
[18:03:05.633]                             name <- restart$name
[18:03:05.633]                             if (is.null(name)) 
[18:03:05.633]                               next
[18:03:05.633]                             if (!grepl(pattern, name)) 
[18:03:05.633]                               next
[18:03:05.633]                             invokeRestart(restart)
[18:03:05.633]                             muffled <- TRUE
[18:03:05.633]                             break
[18:03:05.633]                           }
[18:03:05.633]                         }
[18:03:05.633]                       }
[18:03:05.633]                       invisible(muffled)
[18:03:05.633]                     }
[18:03:05.633]                     muffleCondition(cond, pattern = "^muffle")
[18:03:05.633]                   }
[18:03:05.633]                 }
[18:03:05.633]                 else {
[18:03:05.633]                   if (TRUE) {
[18:03:05.633]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:05.633]                     {
[18:03:05.633]                       inherits <- base::inherits
[18:03:05.633]                       invokeRestart <- base::invokeRestart
[18:03:05.633]                       is.null <- base::is.null
[18:03:05.633]                       muffled <- FALSE
[18:03:05.633]                       if (inherits(cond, "message")) {
[18:03:05.633]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:05.633]                         if (muffled) 
[18:03:05.633]                           invokeRestart("muffleMessage")
[18:03:05.633]                       }
[18:03:05.633]                       else if (inherits(cond, "warning")) {
[18:03:05.633]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:05.633]                         if (muffled) 
[18:03:05.633]                           invokeRestart("muffleWarning")
[18:03:05.633]                       }
[18:03:05.633]                       else if (inherits(cond, "condition")) {
[18:03:05.633]                         if (!is.null(pattern)) {
[18:03:05.633]                           computeRestarts <- base::computeRestarts
[18:03:05.633]                           grepl <- base::grepl
[18:03:05.633]                           restarts <- computeRestarts(cond)
[18:03:05.633]                           for (restart in restarts) {
[18:03:05.633]                             name <- restart$name
[18:03:05.633]                             if (is.null(name)) 
[18:03:05.633]                               next
[18:03:05.633]                             if (!grepl(pattern, name)) 
[18:03:05.633]                               next
[18:03:05.633]                             invokeRestart(restart)
[18:03:05.633]                             muffled <- TRUE
[18:03:05.633]                             break
[18:03:05.633]                           }
[18:03:05.633]                         }
[18:03:05.633]                       }
[18:03:05.633]                       invisible(muffled)
[18:03:05.633]                     }
[18:03:05.633]                     muffleCondition(cond, pattern = "^muffle")
[18:03:05.633]                   }
[18:03:05.633]                 }
[18:03:05.633]             }
[18:03:05.633]         }))
[18:03:05.633]     }, error = function(ex) {
[18:03:05.633]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:05.633]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:05.633]                 ...future.rng), started = ...future.startTime, 
[18:03:05.633]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:05.633]             version = "1.8"), class = "FutureResult")
[18:03:05.633]     }, finally = {
[18:03:05.633]         if (!identical(...future.workdir, getwd())) 
[18:03:05.633]             setwd(...future.workdir)
[18:03:05.633]         {
[18:03:05.633]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:05.633]                 ...future.oldOptions$nwarnings <- NULL
[18:03:05.633]             }
[18:03:05.633]             base::options(...future.oldOptions)
[18:03:05.633]             if (.Platform$OS.type == "windows") {
[18:03:05.633]                 old_names <- names(...future.oldEnvVars)
[18:03:05.633]                 envs <- base::Sys.getenv()
[18:03:05.633]                 names <- names(envs)
[18:03:05.633]                 common <- intersect(names, old_names)
[18:03:05.633]                 added <- setdiff(names, old_names)
[18:03:05.633]                 removed <- setdiff(old_names, names)
[18:03:05.633]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:05.633]                   envs[common]]
[18:03:05.633]                 NAMES <- toupper(changed)
[18:03:05.633]                 args <- list()
[18:03:05.633]                 for (kk in seq_along(NAMES)) {
[18:03:05.633]                   name <- changed[[kk]]
[18:03:05.633]                   NAME <- NAMES[[kk]]
[18:03:05.633]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:05.633]                     next
[18:03:05.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:05.633]                 }
[18:03:05.633]                 NAMES <- toupper(added)
[18:03:05.633]                 for (kk in seq_along(NAMES)) {
[18:03:05.633]                   name <- added[[kk]]
[18:03:05.633]                   NAME <- NAMES[[kk]]
[18:03:05.633]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:05.633]                     next
[18:03:05.633]                   args[[name]] <- ""
[18:03:05.633]                 }
[18:03:05.633]                 NAMES <- toupper(removed)
[18:03:05.633]                 for (kk in seq_along(NAMES)) {
[18:03:05.633]                   name <- removed[[kk]]
[18:03:05.633]                   NAME <- NAMES[[kk]]
[18:03:05.633]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:05.633]                     next
[18:03:05.633]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:05.633]                 }
[18:03:05.633]                 if (length(args) > 0) 
[18:03:05.633]                   base::do.call(base::Sys.setenv, args = args)
[18:03:05.633]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:05.633]             }
[18:03:05.633]             else {
[18:03:05.633]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:05.633]             }
[18:03:05.633]             {
[18:03:05.633]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:05.633]                   0L) {
[18:03:05.633]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:05.633]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:05.633]                   base::options(opts)
[18:03:05.633]                 }
[18:03:05.633]                 {
[18:03:05.633]                   {
[18:03:05.633]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:05.633]                     NULL
[18:03:05.633]                   }
[18:03:05.633]                   options(future.plan = NULL)
[18:03:05.633]                   if (is.na(NA_character_)) 
[18:03:05.633]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:05.633]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:05.633]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:05.633]                     .init = FALSE)
[18:03:05.633]                 }
[18:03:05.633]             }
[18:03:05.633]         }
[18:03:05.633]     })
[18:03:05.633]     if (TRUE) {
[18:03:05.633]         base::sink(type = "output", split = FALSE)
[18:03:05.633]         if (TRUE) {
[18:03:05.633]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:05.633]         }
[18:03:05.633]         else {
[18:03:05.633]             ...future.result["stdout"] <- base::list(NULL)
[18:03:05.633]         }
[18:03:05.633]         base::close(...future.stdout)
[18:03:05.633]         ...future.stdout <- NULL
[18:03:05.633]     }
[18:03:05.633]     ...future.result$conditions <- ...future.conditions
[18:03:05.633]     ...future.result$finished <- base::Sys.time()
[18:03:05.633]     ...future.result
[18:03:05.633] }
[18:03:05.640] MultisessionFuture started
[18:03:05.640] - Launch lazy future ... done
[18:03:05.640] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[18:03:08.687] receiveMessageFromWorker() for ClusterFuture ...
[18:03:08.687] - Validating connection of MultisessionFuture
[18:03:08.688] - received message: FutureResult
[18:03:08.688] - Received FutureResult
[18:03:08.688] - Erased future from FutureRegistry
[18:03:08.689] result() for ClusterFuture ...
[18:03:08.689] - result already collected: FutureResult
[18:03:08.689] result() for ClusterFuture ... done
[18:03:08.689] signalConditions() ...
[18:03:08.689]  - include = ‘immediateCondition’
[18:03:08.689]  - exclude = 
[18:03:08.690]  - resignal = FALSE
[18:03:08.690]  - Number of conditions: 1
[18:03:08.690] signalConditions() ... done
[18:03:08.690] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:08.690] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 312ef99a-b08d-6300-4fc5-c7014d0e2af1
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[18:03:08.694] plan(): Setting new future strategy stack:
[18:03:08.695] List of future strategies:
[18:03:08.695] 1. FutureStrategy:
[18:03:08.695]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:08.695]    - tweaked: FALSE
[18:03:08.695]    - call: future::plan(oplan)
[18:03:08.696] plan(): nbrOfWorkers() = 1
> 
