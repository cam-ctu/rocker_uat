
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:03:00.382] plan(): Setting new future strategy stack:
[17:03:00.382] List of future strategies:
[17:03:00.382] 1. sequential:
[17:03:00.382]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:00.382]    - tweaked: FALSE
[17:03:00.382]    - call: future::plan("sequential")
[17:03:00.393] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[17:03:00.409] plan(): Setting new future strategy stack:
[17:03:00.409] List of future strategies:
[17:03:00.409] 1. multisession:
[17:03:00.409]    - args: function (..., workers = 2L, envir = parent.frame())
[17:03:00.409]    - tweaked: TRUE
[17:03:00.409]    - call: plan(multisession, workers = 2L)
[17:03:00.421] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:00.421] multisession:
[17:03:00.421] - args: function (..., workers = 2L, envir = parent.frame())
[17:03:00.421] - tweaked: TRUE
[17:03:00.421] - call: plan(multisession, workers = 2L)
[17:03:00.422] getGlobalsAndPackages() ...
[17:03:00.422] Not searching for globals
[17:03:00.423] - globals: [0] <none>
[17:03:00.423] getGlobalsAndPackages() ... DONE
[17:03:00.423] [local output] makeClusterPSOCK() ...
[17:03:00.461] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:00.462] [local output] Base port: 11647
[17:03:00.462] [local output] Getting setup options for 2 cluster nodes ...
[17:03:00.462] [local output]  - Node 1 of 2 ...
[17:03:00.463] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:00.463] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpy0oAir/worker.rank=1.parallelly.parent=45190.b0862eb728b1.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpy0oAir/worker.rank=1.parallelly.parent=45190.b0862eb728b1.pid")'’
[17:03:00.655] - Possible to infer worker's PID: TRUE
[17:03:00.655] [local output] Rscript port: 11647

[17:03:00.656] [local output]  - Node 2 of 2 ...
[17:03:00.656] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:00.657] [local output] Rscript port: 11647

[17:03:00.657] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:00.657] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:00.658] [local output] Setting up PSOCK nodes in parallel
[17:03:00.658] List of 36
[17:03:00.658]  $ worker          : chr "localhost"
[17:03:00.658]   ..- attr(*, "localhost")= logi TRUE
[17:03:00.658]  $ master          : chr "localhost"
[17:03:00.658]  $ port            : int 11647
[17:03:00.658]  $ connectTimeout  : num 120
[17:03:00.658]  $ timeout         : num 2592000
[17:03:00.658]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:00.658]  $ homogeneous     : logi TRUE
[17:03:00.658]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:00.658]  $ rscript_envs    : NULL
[17:03:00.658]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:00.658]  $ rscript_startup : NULL
[17:03:00.658]  $ rscript_sh      : chr "sh"
[17:03:00.658]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:00.658]  $ methods         : logi TRUE
[17:03:00.658]  $ socketOptions   : chr "no-delay"
[17:03:00.658]  $ useXDR          : logi FALSE
[17:03:00.658]  $ outfile         : chr "/dev/null"
[17:03:00.658]  $ renice          : int NA
[17:03:00.658]  $ rshcmd          : NULL
[17:03:00.658]  $ user            : chr(0) 
[17:03:00.658]  $ revtunnel       : logi FALSE
[17:03:00.658]  $ rshlogfile      : NULL
[17:03:00.658]  $ rshopts         : chr(0) 
[17:03:00.658]  $ rank            : int 1
[17:03:00.658]  $ manual          : logi FALSE
[17:03:00.658]  $ dryrun          : logi FALSE
[17:03:00.658]  $ quiet           : logi FALSE
[17:03:00.658]  $ setup_strategy  : chr "parallel"
[17:03:00.658]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:00.658]  $ pidfile         : chr "/tmp/Rtmpy0oAir/worker.rank=1.parallelly.parent=45190.b0862eb728b1.pid"
[17:03:00.658]  $ rshcmd_label    : NULL
[17:03:00.658]  $ rsh_call        : NULL
[17:03:00.658]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:00.658]  $ localMachine    : logi TRUE
[17:03:00.658]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:00.658]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:00.658]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:00.658]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:00.658]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:00.658]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:00.658]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:00.658]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:00.658]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:00.658]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:00.658]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:00.658]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:00.658]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:00.658]  $ arguments       :List of 28
[17:03:00.658]   ..$ worker          : chr "localhost"
[17:03:00.658]   ..$ master          : NULL
[17:03:00.658]   ..$ port            : int 11647
[17:03:00.658]   ..$ connectTimeout  : num 120
[17:03:00.658]   ..$ timeout         : num 2592000
[17:03:00.658]   ..$ rscript         : NULL
[17:03:00.658]   ..$ homogeneous     : NULL
[17:03:00.658]   ..$ rscript_args    : NULL
[17:03:00.658]   ..$ rscript_envs    : NULL
[17:03:00.658]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:00.658]   ..$ rscript_startup : NULL
[17:03:00.658]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:00.658]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:00.658]   ..$ methods         : logi TRUE
[17:03:00.658]   ..$ socketOptions   : chr "no-delay"
[17:03:00.658]   ..$ useXDR          : logi FALSE
[17:03:00.658]   ..$ outfile         : chr "/dev/null"
[17:03:00.658]   ..$ renice          : int NA
[17:03:00.658]   ..$ rshcmd          : NULL
[17:03:00.658]   ..$ user            : NULL
[17:03:00.658]   ..$ revtunnel       : logi NA
[17:03:00.658]   ..$ rshlogfile      : NULL
[17:03:00.658]   ..$ rshopts         : NULL
[17:03:00.658]   ..$ rank            : int 1
[17:03:00.658]   ..$ manual          : logi FALSE
[17:03:00.658]   ..$ dryrun          : logi FALSE
[17:03:00.658]   ..$ quiet           : logi FALSE
[17:03:00.658]   ..$ setup_strategy  : chr "parallel"
[17:03:00.658]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:00.676] [local output] System call to launch all workers:
[17:03:00.676] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpy0oAir/worker.rank=1.parallelly.parent=45190.b0862eb728b1.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11647 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:00.676] [local output] Starting PSOCK main server
[17:03:00.682] [local output] Workers launched
[17:03:00.682] [local output] Waiting for workers to connect back
[17:03:00.682]  - [local output] 0 workers out of 2 ready
[17:03:00.926]  - [local output] 0 workers out of 2 ready
[17:03:00.927]  - [local output] 1 workers out of 2 ready
[17:03:00.927]  - [local output] 2 workers out of 2 ready
[17:03:00.927] [local output] Launching of workers completed
[17:03:00.927] [local output] Collecting session information from workers
[17:03:00.928] [local output]  - Worker #1 of 2
[17:03:00.928] [local output]  - Worker #2 of 2
[17:03:00.929] [local output] makeClusterPSOCK() ... done
[17:03:00.941] Packages needed by the future expression (n = 0): <none>
[17:03:00.941] Packages needed by future strategies (n = 0): <none>
[17:03:00.942] {
[17:03:00.942]     {
[17:03:00.942]         {
[17:03:00.942]             ...future.startTime <- base::Sys.time()
[17:03:00.942]             {
[17:03:00.942]                 {
[17:03:00.942]                   {
[17:03:00.942]                     {
[17:03:00.942]                       base::local({
[17:03:00.942]                         has_future <- base::requireNamespace("future", 
[17:03:00.942]                           quietly = TRUE)
[17:03:00.942]                         if (has_future) {
[17:03:00.942]                           ns <- base::getNamespace("future")
[17:03:00.942]                           version <- ns[[".package"]][["version"]]
[17:03:00.942]                           if (is.null(version)) 
[17:03:00.942]                             version <- utils::packageVersion("future")
[17:03:00.942]                         }
[17:03:00.942]                         else {
[17:03:00.942]                           version <- NULL
[17:03:00.942]                         }
[17:03:00.942]                         if (!has_future || version < "1.8.0") {
[17:03:00.942]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:00.942]                             "", base::R.version$version.string), 
[17:03:00.942]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:00.942]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:00.942]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:00.942]                               "release", "version")], collapse = " "), 
[17:03:00.942]                             hostname = base::Sys.info()[["nodename"]])
[17:03:00.942]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:00.942]                             info)
[17:03:00.942]                           info <- base::paste(info, collapse = "; ")
[17:03:00.942]                           if (!has_future) {
[17:03:00.942]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:00.942]                               info)
[17:03:00.942]                           }
[17:03:00.942]                           else {
[17:03:00.942]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:00.942]                               info, version)
[17:03:00.942]                           }
[17:03:00.942]                           base::stop(msg)
[17:03:00.942]                         }
[17:03:00.942]                       })
[17:03:00.942]                     }
[17:03:00.942]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:00.942]                     base::options(mc.cores = 1L)
[17:03:00.942]                   }
[17:03:00.942]                   ...future.strategy.old <- future::plan("list")
[17:03:00.942]                   options(future.plan = NULL)
[17:03:00.942]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:00.942]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:00.942]                 }
[17:03:00.942]                 ...future.workdir <- getwd()
[17:03:00.942]             }
[17:03:00.942]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:00.942]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:00.942]         }
[17:03:00.942]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:00.942]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:00.942]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:00.942]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:00.942]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:00.942]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:00.942]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:00.942]             base::names(...future.oldOptions))
[17:03:00.942]     }
[17:03:00.942]     if (FALSE) {
[17:03:00.942]     }
[17:03:00.942]     else {
[17:03:00.942]         if (TRUE) {
[17:03:00.942]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:00.942]                 open = "w")
[17:03:00.942]         }
[17:03:00.942]         else {
[17:03:00.942]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:00.942]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:00.942]         }
[17:03:00.942]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:00.942]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:00.942]             base::sink(type = "output", split = FALSE)
[17:03:00.942]             base::close(...future.stdout)
[17:03:00.942]         }, add = TRUE)
[17:03:00.942]     }
[17:03:00.942]     ...future.frame <- base::sys.nframe()
[17:03:00.942]     ...future.conditions <- base::list()
[17:03:00.942]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:00.942]     if (FALSE) {
[17:03:00.942]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:00.942]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:00.942]     }
[17:03:00.942]     ...future.result <- base::tryCatch({
[17:03:00.942]         base::withCallingHandlers({
[17:03:00.942]             ...future.value <- base::withVisible(base::local({
[17:03:00.942]                 ...future.makeSendCondition <- base::local({
[17:03:00.942]                   sendCondition <- NULL
[17:03:00.942]                   function(frame = 1L) {
[17:03:00.942]                     if (is.function(sendCondition)) 
[17:03:00.942]                       return(sendCondition)
[17:03:00.942]                     ns <- getNamespace("parallel")
[17:03:00.942]                     if (exists("sendData", mode = "function", 
[17:03:00.942]                       envir = ns)) {
[17:03:00.942]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:00.942]                         envir = ns)
[17:03:00.942]                       envir <- sys.frame(frame)
[17:03:00.942]                       master <- NULL
[17:03:00.942]                       while (!identical(envir, .GlobalEnv) && 
[17:03:00.942]                         !identical(envir, emptyenv())) {
[17:03:00.942]                         if (exists("master", mode = "list", envir = envir, 
[17:03:00.942]                           inherits = FALSE)) {
[17:03:00.942]                           master <- get("master", mode = "list", 
[17:03:00.942]                             envir = envir, inherits = FALSE)
[17:03:00.942]                           if (inherits(master, c("SOCKnode", 
[17:03:00.942]                             "SOCK0node"))) {
[17:03:00.942]                             sendCondition <<- function(cond) {
[17:03:00.942]                               data <- list(type = "VALUE", value = cond, 
[17:03:00.942]                                 success = TRUE)
[17:03:00.942]                               parallel_sendData(master, data)
[17:03:00.942]                             }
[17:03:00.942]                             return(sendCondition)
[17:03:00.942]                           }
[17:03:00.942]                         }
[17:03:00.942]                         frame <- frame + 1L
[17:03:00.942]                         envir <- sys.frame(frame)
[17:03:00.942]                       }
[17:03:00.942]                     }
[17:03:00.942]                     sendCondition <<- function(cond) NULL
[17:03:00.942]                   }
[17:03:00.942]                 })
[17:03:00.942]                 withCallingHandlers({
[17:03:00.942]                   NA
[17:03:00.942]                 }, immediateCondition = function(cond) {
[17:03:00.942]                   sendCondition <- ...future.makeSendCondition()
[17:03:00.942]                   sendCondition(cond)
[17:03:00.942]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:00.942]                   {
[17:03:00.942]                     inherits <- base::inherits
[17:03:00.942]                     invokeRestart <- base::invokeRestart
[17:03:00.942]                     is.null <- base::is.null
[17:03:00.942]                     muffled <- FALSE
[17:03:00.942]                     if (inherits(cond, "message")) {
[17:03:00.942]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:00.942]                       if (muffled) 
[17:03:00.942]                         invokeRestart("muffleMessage")
[17:03:00.942]                     }
[17:03:00.942]                     else if (inherits(cond, "warning")) {
[17:03:00.942]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:00.942]                       if (muffled) 
[17:03:00.942]                         invokeRestart("muffleWarning")
[17:03:00.942]                     }
[17:03:00.942]                     else if (inherits(cond, "condition")) {
[17:03:00.942]                       if (!is.null(pattern)) {
[17:03:00.942]                         computeRestarts <- base::computeRestarts
[17:03:00.942]                         grepl <- base::grepl
[17:03:00.942]                         restarts <- computeRestarts(cond)
[17:03:00.942]                         for (restart in restarts) {
[17:03:00.942]                           name <- restart$name
[17:03:00.942]                           if (is.null(name)) 
[17:03:00.942]                             next
[17:03:00.942]                           if (!grepl(pattern, name)) 
[17:03:00.942]                             next
[17:03:00.942]                           invokeRestart(restart)
[17:03:00.942]                           muffled <- TRUE
[17:03:00.942]                           break
[17:03:00.942]                         }
[17:03:00.942]                       }
[17:03:00.942]                     }
[17:03:00.942]                     invisible(muffled)
[17:03:00.942]                   }
[17:03:00.942]                   muffleCondition(cond)
[17:03:00.942]                 })
[17:03:00.942]             }))
[17:03:00.942]             future::FutureResult(value = ...future.value$value, 
[17:03:00.942]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:00.942]                   ...future.rng), globalenv = if (FALSE) 
[17:03:00.942]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:00.942]                     ...future.globalenv.names))
[17:03:00.942]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:00.942]         }, condition = base::local({
[17:03:00.942]             c <- base::c
[17:03:00.942]             inherits <- base::inherits
[17:03:00.942]             invokeRestart <- base::invokeRestart
[17:03:00.942]             length <- base::length
[17:03:00.942]             list <- base::list
[17:03:00.942]             seq.int <- base::seq.int
[17:03:00.942]             signalCondition <- base::signalCondition
[17:03:00.942]             sys.calls <- base::sys.calls
[17:03:00.942]             `[[` <- base::`[[`
[17:03:00.942]             `+` <- base::`+`
[17:03:00.942]             `<<-` <- base::`<<-`
[17:03:00.942]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:00.942]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:00.942]                   3L)]
[17:03:00.942]             }
[17:03:00.942]             function(cond) {
[17:03:00.942]                 is_error <- inherits(cond, "error")
[17:03:00.942]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:00.942]                   NULL)
[17:03:00.942]                 if (is_error) {
[17:03:00.942]                   sessionInformation <- function() {
[17:03:00.942]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:00.942]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:00.942]                       search = base::search(), system = base::Sys.info())
[17:03:00.942]                   }
[17:03:00.942]                   ...future.conditions[[length(...future.conditions) + 
[17:03:00.942]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:00.942]                     cond$call), session = sessionInformation(), 
[17:03:00.942]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:00.942]                   signalCondition(cond)
[17:03:00.942]                 }
[17:03:00.942]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:00.942]                 "immediateCondition"))) {
[17:03:00.942]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:00.942]                   ...future.conditions[[length(...future.conditions) + 
[17:03:00.942]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:00.942]                   if (TRUE && !signal) {
[17:03:00.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:00.942]                     {
[17:03:00.942]                       inherits <- base::inherits
[17:03:00.942]                       invokeRestart <- base::invokeRestart
[17:03:00.942]                       is.null <- base::is.null
[17:03:00.942]                       muffled <- FALSE
[17:03:00.942]                       if (inherits(cond, "message")) {
[17:03:00.942]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:00.942]                         if (muffled) 
[17:03:00.942]                           invokeRestart("muffleMessage")
[17:03:00.942]                       }
[17:03:00.942]                       else if (inherits(cond, "warning")) {
[17:03:00.942]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:00.942]                         if (muffled) 
[17:03:00.942]                           invokeRestart("muffleWarning")
[17:03:00.942]                       }
[17:03:00.942]                       else if (inherits(cond, "condition")) {
[17:03:00.942]                         if (!is.null(pattern)) {
[17:03:00.942]                           computeRestarts <- base::computeRestarts
[17:03:00.942]                           grepl <- base::grepl
[17:03:00.942]                           restarts <- computeRestarts(cond)
[17:03:00.942]                           for (restart in restarts) {
[17:03:00.942]                             name <- restart$name
[17:03:00.942]                             if (is.null(name)) 
[17:03:00.942]                               next
[17:03:00.942]                             if (!grepl(pattern, name)) 
[17:03:00.942]                               next
[17:03:00.942]                             invokeRestart(restart)
[17:03:00.942]                             muffled <- TRUE
[17:03:00.942]                             break
[17:03:00.942]                           }
[17:03:00.942]                         }
[17:03:00.942]                       }
[17:03:00.942]                       invisible(muffled)
[17:03:00.942]                     }
[17:03:00.942]                     muffleCondition(cond, pattern = "^muffle")
[17:03:00.942]                   }
[17:03:00.942]                 }
[17:03:00.942]                 else {
[17:03:00.942]                   if (TRUE) {
[17:03:00.942]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:00.942]                     {
[17:03:00.942]                       inherits <- base::inherits
[17:03:00.942]                       invokeRestart <- base::invokeRestart
[17:03:00.942]                       is.null <- base::is.null
[17:03:00.942]                       muffled <- FALSE
[17:03:00.942]                       if (inherits(cond, "message")) {
[17:03:00.942]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:00.942]                         if (muffled) 
[17:03:00.942]                           invokeRestart("muffleMessage")
[17:03:00.942]                       }
[17:03:00.942]                       else if (inherits(cond, "warning")) {
[17:03:00.942]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:00.942]                         if (muffled) 
[17:03:00.942]                           invokeRestart("muffleWarning")
[17:03:00.942]                       }
[17:03:00.942]                       else if (inherits(cond, "condition")) {
[17:03:00.942]                         if (!is.null(pattern)) {
[17:03:00.942]                           computeRestarts <- base::computeRestarts
[17:03:00.942]                           grepl <- base::grepl
[17:03:00.942]                           restarts <- computeRestarts(cond)
[17:03:00.942]                           for (restart in restarts) {
[17:03:00.942]                             name <- restart$name
[17:03:00.942]                             if (is.null(name)) 
[17:03:00.942]                               next
[17:03:00.942]                             if (!grepl(pattern, name)) 
[17:03:00.942]                               next
[17:03:00.942]                             invokeRestart(restart)
[17:03:00.942]                             muffled <- TRUE
[17:03:00.942]                             break
[17:03:00.942]                           }
[17:03:00.942]                         }
[17:03:00.942]                       }
[17:03:00.942]                       invisible(muffled)
[17:03:00.942]                     }
[17:03:00.942]                     muffleCondition(cond, pattern = "^muffle")
[17:03:00.942]                   }
[17:03:00.942]                 }
[17:03:00.942]             }
[17:03:00.942]         }))
[17:03:00.942]     }, error = function(ex) {
[17:03:00.942]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:00.942]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:00.942]                 ...future.rng), started = ...future.startTime, 
[17:03:00.942]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:00.942]             version = "1.8"), class = "FutureResult")
[17:03:00.942]     }, finally = {
[17:03:00.942]         if (!identical(...future.workdir, getwd())) 
[17:03:00.942]             setwd(...future.workdir)
[17:03:00.942]         {
[17:03:00.942]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:00.942]                 ...future.oldOptions$nwarnings <- NULL
[17:03:00.942]             }
[17:03:00.942]             base::options(...future.oldOptions)
[17:03:00.942]             if (.Platform$OS.type == "windows") {
[17:03:00.942]                 old_names <- names(...future.oldEnvVars)
[17:03:00.942]                 envs <- base::Sys.getenv()
[17:03:00.942]                 names <- names(envs)
[17:03:00.942]                 common <- intersect(names, old_names)
[17:03:00.942]                 added <- setdiff(names, old_names)
[17:03:00.942]                 removed <- setdiff(old_names, names)
[17:03:00.942]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:00.942]                   envs[common]]
[17:03:00.942]                 NAMES <- toupper(changed)
[17:03:00.942]                 args <- list()
[17:03:00.942]                 for (kk in seq_along(NAMES)) {
[17:03:00.942]                   name <- changed[[kk]]
[17:03:00.942]                   NAME <- NAMES[[kk]]
[17:03:00.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:00.942]                     next
[17:03:00.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:00.942]                 }
[17:03:00.942]                 NAMES <- toupper(added)
[17:03:00.942]                 for (kk in seq_along(NAMES)) {
[17:03:00.942]                   name <- added[[kk]]
[17:03:00.942]                   NAME <- NAMES[[kk]]
[17:03:00.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:00.942]                     next
[17:03:00.942]                   args[[name]] <- ""
[17:03:00.942]                 }
[17:03:00.942]                 NAMES <- toupper(removed)
[17:03:00.942]                 for (kk in seq_along(NAMES)) {
[17:03:00.942]                   name <- removed[[kk]]
[17:03:00.942]                   NAME <- NAMES[[kk]]
[17:03:00.942]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:00.942]                     next
[17:03:00.942]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:00.942]                 }
[17:03:00.942]                 if (length(args) > 0) 
[17:03:00.942]                   base::do.call(base::Sys.setenv, args = args)
[17:03:00.942]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:00.942]             }
[17:03:00.942]             else {
[17:03:00.942]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:00.942]             }
[17:03:00.942]             {
[17:03:00.942]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:00.942]                   0L) {
[17:03:00.942]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:00.942]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:00.942]                   base::options(opts)
[17:03:00.942]                 }
[17:03:00.942]                 {
[17:03:00.942]                   {
[17:03:00.942]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:00.942]                     NULL
[17:03:00.942]                   }
[17:03:00.942]                   options(future.plan = NULL)
[17:03:00.942]                   if (is.na(NA_character_)) 
[17:03:00.942]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:00.942]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:00.942]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:00.942]                     .init = FALSE)
[17:03:00.942]                 }
[17:03:00.942]             }
[17:03:00.942]         }
[17:03:00.942]     })
[17:03:00.942]     if (TRUE) {
[17:03:00.942]         base::sink(type = "output", split = FALSE)
[17:03:00.942]         if (TRUE) {
[17:03:00.942]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:00.942]         }
[17:03:00.942]         else {
[17:03:00.942]             ...future.result["stdout"] <- base::list(NULL)
[17:03:00.942]         }
[17:03:00.942]         base::close(...future.stdout)
[17:03:00.942]         ...future.stdout <- NULL
[17:03:00.942]     }
[17:03:00.942]     ...future.result$conditions <- ...future.conditions
[17:03:00.942]     ...future.result$finished <- base::Sys.time()
[17:03:00.942]     ...future.result
[17:03:00.942] }
[17:03:00.998] MultisessionFuture started
[17:03:00.998] result() for ClusterFuture ...
[17:03:00.999] receiveMessageFromWorker() for ClusterFuture ...
[17:03:00.999] - Validating connection of MultisessionFuture
[17:03:01.031] - received message: FutureResult
[17:03:01.031] - Received FutureResult
[17:03:01.033] - Erased future from FutureRegistry
[17:03:01.034] result() for ClusterFuture ...
[17:03:01.034] - result already collected: FutureResult
[17:03:01.034] result() for ClusterFuture ... done
[17:03:01.034] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:01.034] result() for ClusterFuture ... done
[17:03:01.034] result() for ClusterFuture ...
[17:03:01.034] - result already collected: FutureResult
[17:03:01.035] result() for ClusterFuture ... done
[17:03:01.035] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:01.035] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: e17f438e-79a9-1889-0a3a-b61f47c93c14
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[17:03:01.036] getGlobalsAndPackages() ...
[17:03:01.036] Searching for globals...
[17:03:01.043] - globals found: [2] ‘{’, ‘:::’
[17:03:01.044] Searching for globals ... DONE
[17:03:01.044] Resolving globals: FALSE
[17:03:01.044] 
[17:03:01.045] 
[17:03:01.045] getGlobalsAndPackages() ... DONE
[17:03:01.045] run() for ‘Future’ ...
[17:03:01.045] - state: ‘created’
[17:03:01.045] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:01.056] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:01.057] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:01.057]   - Field: ‘node’
[17:03:01.057]   - Field: ‘label’
[17:03:01.057]   - Field: ‘local’
[17:03:01.057]   - Field: ‘owner’
[17:03:01.057]   - Field: ‘envir’
[17:03:01.057]   - Field: ‘workers’
[17:03:01.057]   - Field: ‘packages’
[17:03:01.057]   - Field: ‘gc’
[17:03:01.057]   - Field: ‘conditions’
[17:03:01.058]   - Field: ‘persistent’
[17:03:01.058]   - Field: ‘expr’
[17:03:01.058]   - Field: ‘uuid’
[17:03:01.058]   - Field: ‘seed’
[17:03:01.058]   - Field: ‘version’
[17:03:01.058]   - Field: ‘result’
[17:03:01.058]   - Field: ‘asynchronous’
[17:03:01.058]   - Field: ‘calls’
[17:03:01.058]   - Field: ‘globals’
[17:03:01.059]   - Field: ‘stdout’
[17:03:01.059]   - Field: ‘earlySignal’
[17:03:01.059]   - Field: ‘lazy’
[17:03:01.059]   - Field: ‘state’
[17:03:01.059] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:01.059] - Launch lazy future ...
[17:03:01.060] Packages needed by the future expression (n = 0): <none>
[17:03:01.060] Packages needed by future strategies (n = 0): <none>
[17:03:01.060] {
[17:03:01.060]     {
[17:03:01.060]         {
[17:03:01.060]             ...future.startTime <- base::Sys.time()
[17:03:01.060]             {
[17:03:01.060]                 {
[17:03:01.060]                   {
[17:03:01.060]                     {
[17:03:01.060]                       base::local({
[17:03:01.060]                         has_future <- base::requireNamespace("future", 
[17:03:01.060]                           quietly = TRUE)
[17:03:01.060]                         if (has_future) {
[17:03:01.060]                           ns <- base::getNamespace("future")
[17:03:01.060]                           version <- ns[[".package"]][["version"]]
[17:03:01.060]                           if (is.null(version)) 
[17:03:01.060]                             version <- utils::packageVersion("future")
[17:03:01.060]                         }
[17:03:01.060]                         else {
[17:03:01.060]                           version <- NULL
[17:03:01.060]                         }
[17:03:01.060]                         if (!has_future || version < "1.8.0") {
[17:03:01.060]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:01.060]                             "", base::R.version$version.string), 
[17:03:01.060]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:01.060]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:01.060]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:01.060]                               "release", "version")], collapse = " "), 
[17:03:01.060]                             hostname = base::Sys.info()[["nodename"]])
[17:03:01.060]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:01.060]                             info)
[17:03:01.060]                           info <- base::paste(info, collapse = "; ")
[17:03:01.060]                           if (!has_future) {
[17:03:01.060]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:01.060]                               info)
[17:03:01.060]                           }
[17:03:01.060]                           else {
[17:03:01.060]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:01.060]                               info, version)
[17:03:01.060]                           }
[17:03:01.060]                           base::stop(msg)
[17:03:01.060]                         }
[17:03:01.060]                       })
[17:03:01.060]                     }
[17:03:01.060]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:01.060]                     base::options(mc.cores = 1L)
[17:03:01.060]                   }
[17:03:01.060]                   ...future.strategy.old <- future::plan("list")
[17:03:01.060]                   options(future.plan = NULL)
[17:03:01.060]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.060]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:01.060]                 }
[17:03:01.060]                 ...future.workdir <- getwd()
[17:03:01.060]             }
[17:03:01.060]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:01.060]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:01.060]         }
[17:03:01.060]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:01.060]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:01.060]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:01.060]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:01.060]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:01.060]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:01.060]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:01.060]             base::names(...future.oldOptions))
[17:03:01.060]     }
[17:03:01.060]     if (FALSE) {
[17:03:01.060]     }
[17:03:01.060]     else {
[17:03:01.060]         if (TRUE) {
[17:03:01.060]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:01.060]                 open = "w")
[17:03:01.060]         }
[17:03:01.060]         else {
[17:03:01.060]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:01.060]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:01.060]         }
[17:03:01.060]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:01.060]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:01.060]             base::sink(type = "output", split = FALSE)
[17:03:01.060]             base::close(...future.stdout)
[17:03:01.060]         }, add = TRUE)
[17:03:01.060]     }
[17:03:01.060]     ...future.frame <- base::sys.nframe()
[17:03:01.060]     ...future.conditions <- base::list()
[17:03:01.060]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:01.060]     if (FALSE) {
[17:03:01.060]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:01.060]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:01.060]     }
[17:03:01.060]     ...future.result <- base::tryCatch({
[17:03:01.060]         base::withCallingHandlers({
[17:03:01.060]             ...future.value <- base::withVisible(base::local({
[17:03:01.060]                 ...future.makeSendCondition <- base::local({
[17:03:01.060]                   sendCondition <- NULL
[17:03:01.060]                   function(frame = 1L) {
[17:03:01.060]                     if (is.function(sendCondition)) 
[17:03:01.060]                       return(sendCondition)
[17:03:01.060]                     ns <- getNamespace("parallel")
[17:03:01.060]                     if (exists("sendData", mode = "function", 
[17:03:01.060]                       envir = ns)) {
[17:03:01.060]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:01.060]                         envir = ns)
[17:03:01.060]                       envir <- sys.frame(frame)
[17:03:01.060]                       master <- NULL
[17:03:01.060]                       while (!identical(envir, .GlobalEnv) && 
[17:03:01.060]                         !identical(envir, emptyenv())) {
[17:03:01.060]                         if (exists("master", mode = "list", envir = envir, 
[17:03:01.060]                           inherits = FALSE)) {
[17:03:01.060]                           master <- get("master", mode = "list", 
[17:03:01.060]                             envir = envir, inherits = FALSE)
[17:03:01.060]                           if (inherits(master, c("SOCKnode", 
[17:03:01.060]                             "SOCK0node"))) {
[17:03:01.060]                             sendCondition <<- function(cond) {
[17:03:01.060]                               data <- list(type = "VALUE", value = cond, 
[17:03:01.060]                                 success = TRUE)
[17:03:01.060]                               parallel_sendData(master, data)
[17:03:01.060]                             }
[17:03:01.060]                             return(sendCondition)
[17:03:01.060]                           }
[17:03:01.060]                         }
[17:03:01.060]                         frame <- frame + 1L
[17:03:01.060]                         envir <- sys.frame(frame)
[17:03:01.060]                       }
[17:03:01.060]                     }
[17:03:01.060]                     sendCondition <<- function(cond) NULL
[17:03:01.060]                   }
[17:03:01.060]                 })
[17:03:01.060]                 withCallingHandlers({
[17:03:01.060]                   {
[17:03:01.060]                     future:::session_uuid(attributes = TRUE)
[17:03:01.060]                   }
[17:03:01.060]                 }, immediateCondition = function(cond) {
[17:03:01.060]                   sendCondition <- ...future.makeSendCondition()
[17:03:01.060]                   sendCondition(cond)
[17:03:01.060]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.060]                   {
[17:03:01.060]                     inherits <- base::inherits
[17:03:01.060]                     invokeRestart <- base::invokeRestart
[17:03:01.060]                     is.null <- base::is.null
[17:03:01.060]                     muffled <- FALSE
[17:03:01.060]                     if (inherits(cond, "message")) {
[17:03:01.060]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:01.060]                       if (muffled) 
[17:03:01.060]                         invokeRestart("muffleMessage")
[17:03:01.060]                     }
[17:03:01.060]                     else if (inherits(cond, "warning")) {
[17:03:01.060]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:01.060]                       if (muffled) 
[17:03:01.060]                         invokeRestart("muffleWarning")
[17:03:01.060]                     }
[17:03:01.060]                     else if (inherits(cond, "condition")) {
[17:03:01.060]                       if (!is.null(pattern)) {
[17:03:01.060]                         computeRestarts <- base::computeRestarts
[17:03:01.060]                         grepl <- base::grepl
[17:03:01.060]                         restarts <- computeRestarts(cond)
[17:03:01.060]                         for (restart in restarts) {
[17:03:01.060]                           name <- restart$name
[17:03:01.060]                           if (is.null(name)) 
[17:03:01.060]                             next
[17:03:01.060]                           if (!grepl(pattern, name)) 
[17:03:01.060]                             next
[17:03:01.060]                           invokeRestart(restart)
[17:03:01.060]                           muffled <- TRUE
[17:03:01.060]                           break
[17:03:01.060]                         }
[17:03:01.060]                       }
[17:03:01.060]                     }
[17:03:01.060]                     invisible(muffled)
[17:03:01.060]                   }
[17:03:01.060]                   muffleCondition(cond)
[17:03:01.060]                 })
[17:03:01.060]             }))
[17:03:01.060]             future::FutureResult(value = ...future.value$value, 
[17:03:01.060]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.060]                   ...future.rng), globalenv = if (FALSE) 
[17:03:01.060]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:01.060]                     ...future.globalenv.names))
[17:03:01.060]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:01.060]         }, condition = base::local({
[17:03:01.060]             c <- base::c
[17:03:01.060]             inherits <- base::inherits
[17:03:01.060]             invokeRestart <- base::invokeRestart
[17:03:01.060]             length <- base::length
[17:03:01.060]             list <- base::list
[17:03:01.060]             seq.int <- base::seq.int
[17:03:01.060]             signalCondition <- base::signalCondition
[17:03:01.060]             sys.calls <- base::sys.calls
[17:03:01.060]             `[[` <- base::`[[`
[17:03:01.060]             `+` <- base::`+`
[17:03:01.060]             `<<-` <- base::`<<-`
[17:03:01.060]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:01.060]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:01.060]                   3L)]
[17:03:01.060]             }
[17:03:01.060]             function(cond) {
[17:03:01.060]                 is_error <- inherits(cond, "error")
[17:03:01.060]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:01.060]                   NULL)
[17:03:01.060]                 if (is_error) {
[17:03:01.060]                   sessionInformation <- function() {
[17:03:01.060]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:01.060]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:01.060]                       search = base::search(), system = base::Sys.info())
[17:03:01.060]                   }
[17:03:01.060]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.060]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:01.060]                     cond$call), session = sessionInformation(), 
[17:03:01.060]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:01.060]                   signalCondition(cond)
[17:03:01.060]                 }
[17:03:01.060]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:01.060]                 "immediateCondition"))) {
[17:03:01.060]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:01.060]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.060]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:01.060]                   if (TRUE && !signal) {
[17:03:01.060]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.060]                     {
[17:03:01.060]                       inherits <- base::inherits
[17:03:01.060]                       invokeRestart <- base::invokeRestart
[17:03:01.060]                       is.null <- base::is.null
[17:03:01.060]                       muffled <- FALSE
[17:03:01.060]                       if (inherits(cond, "message")) {
[17:03:01.060]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.060]                         if (muffled) 
[17:03:01.060]                           invokeRestart("muffleMessage")
[17:03:01.060]                       }
[17:03:01.060]                       else if (inherits(cond, "warning")) {
[17:03:01.060]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.060]                         if (muffled) 
[17:03:01.060]                           invokeRestart("muffleWarning")
[17:03:01.060]                       }
[17:03:01.060]                       else if (inherits(cond, "condition")) {
[17:03:01.060]                         if (!is.null(pattern)) {
[17:03:01.060]                           computeRestarts <- base::computeRestarts
[17:03:01.060]                           grepl <- base::grepl
[17:03:01.060]                           restarts <- computeRestarts(cond)
[17:03:01.060]                           for (restart in restarts) {
[17:03:01.060]                             name <- restart$name
[17:03:01.060]                             if (is.null(name)) 
[17:03:01.060]                               next
[17:03:01.060]                             if (!grepl(pattern, name)) 
[17:03:01.060]                               next
[17:03:01.060]                             invokeRestart(restart)
[17:03:01.060]                             muffled <- TRUE
[17:03:01.060]                             break
[17:03:01.060]                           }
[17:03:01.060]                         }
[17:03:01.060]                       }
[17:03:01.060]                       invisible(muffled)
[17:03:01.060]                     }
[17:03:01.060]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.060]                   }
[17:03:01.060]                 }
[17:03:01.060]                 else {
[17:03:01.060]                   if (TRUE) {
[17:03:01.060]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.060]                     {
[17:03:01.060]                       inherits <- base::inherits
[17:03:01.060]                       invokeRestart <- base::invokeRestart
[17:03:01.060]                       is.null <- base::is.null
[17:03:01.060]                       muffled <- FALSE
[17:03:01.060]                       if (inherits(cond, "message")) {
[17:03:01.060]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.060]                         if (muffled) 
[17:03:01.060]                           invokeRestart("muffleMessage")
[17:03:01.060]                       }
[17:03:01.060]                       else if (inherits(cond, "warning")) {
[17:03:01.060]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.060]                         if (muffled) 
[17:03:01.060]                           invokeRestart("muffleWarning")
[17:03:01.060]                       }
[17:03:01.060]                       else if (inherits(cond, "condition")) {
[17:03:01.060]                         if (!is.null(pattern)) {
[17:03:01.060]                           computeRestarts <- base::computeRestarts
[17:03:01.060]                           grepl <- base::grepl
[17:03:01.060]                           restarts <- computeRestarts(cond)
[17:03:01.060]                           for (restart in restarts) {
[17:03:01.060]                             name <- restart$name
[17:03:01.060]                             if (is.null(name)) 
[17:03:01.060]                               next
[17:03:01.060]                             if (!grepl(pattern, name)) 
[17:03:01.060]                               next
[17:03:01.060]                             invokeRestart(restart)
[17:03:01.060]                             muffled <- TRUE
[17:03:01.060]                             break
[17:03:01.060]                           }
[17:03:01.060]                         }
[17:03:01.060]                       }
[17:03:01.060]                       invisible(muffled)
[17:03:01.060]                     }
[17:03:01.060]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.060]                   }
[17:03:01.060]                 }
[17:03:01.060]             }
[17:03:01.060]         }))
[17:03:01.060]     }, error = function(ex) {
[17:03:01.060]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:01.060]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.060]                 ...future.rng), started = ...future.startTime, 
[17:03:01.060]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:01.060]             version = "1.8"), class = "FutureResult")
[17:03:01.060]     }, finally = {
[17:03:01.060]         if (!identical(...future.workdir, getwd())) 
[17:03:01.060]             setwd(...future.workdir)
[17:03:01.060]         {
[17:03:01.060]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:01.060]                 ...future.oldOptions$nwarnings <- NULL
[17:03:01.060]             }
[17:03:01.060]             base::options(...future.oldOptions)
[17:03:01.060]             if (.Platform$OS.type == "windows") {
[17:03:01.060]                 old_names <- names(...future.oldEnvVars)
[17:03:01.060]                 envs <- base::Sys.getenv()
[17:03:01.060]                 names <- names(envs)
[17:03:01.060]                 common <- intersect(names, old_names)
[17:03:01.060]                 added <- setdiff(names, old_names)
[17:03:01.060]                 removed <- setdiff(old_names, names)
[17:03:01.060]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:01.060]                   envs[common]]
[17:03:01.060]                 NAMES <- toupper(changed)
[17:03:01.060]                 args <- list()
[17:03:01.060]                 for (kk in seq_along(NAMES)) {
[17:03:01.060]                   name <- changed[[kk]]
[17:03:01.060]                   NAME <- NAMES[[kk]]
[17:03:01.060]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.060]                     next
[17:03:01.060]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.060]                 }
[17:03:01.060]                 NAMES <- toupper(added)
[17:03:01.060]                 for (kk in seq_along(NAMES)) {
[17:03:01.060]                   name <- added[[kk]]
[17:03:01.060]                   NAME <- NAMES[[kk]]
[17:03:01.060]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.060]                     next
[17:03:01.060]                   args[[name]] <- ""
[17:03:01.060]                 }
[17:03:01.060]                 NAMES <- toupper(removed)
[17:03:01.060]                 for (kk in seq_along(NAMES)) {
[17:03:01.060]                   name <- removed[[kk]]
[17:03:01.060]                   NAME <- NAMES[[kk]]
[17:03:01.060]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.060]                     next
[17:03:01.060]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.060]                 }
[17:03:01.060]                 if (length(args) > 0) 
[17:03:01.060]                   base::do.call(base::Sys.setenv, args = args)
[17:03:01.060]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:01.060]             }
[17:03:01.060]             else {
[17:03:01.060]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:01.060]             }
[17:03:01.060]             {
[17:03:01.060]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:01.060]                   0L) {
[17:03:01.060]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:01.060]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:01.060]                   base::options(opts)
[17:03:01.060]                 }
[17:03:01.060]                 {
[17:03:01.060]                   {
[17:03:01.060]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:01.060]                     NULL
[17:03:01.060]                   }
[17:03:01.060]                   options(future.plan = NULL)
[17:03:01.060]                   if (is.na(NA_character_)) 
[17:03:01.060]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.060]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:01.060]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:01.060]                     .init = FALSE)
[17:03:01.060]                 }
[17:03:01.060]             }
[17:03:01.060]         }
[17:03:01.060]     })
[17:03:01.060]     if (TRUE) {
[17:03:01.060]         base::sink(type = "output", split = FALSE)
[17:03:01.060]         if (TRUE) {
[17:03:01.060]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:01.060]         }
[17:03:01.060]         else {
[17:03:01.060]             ...future.result["stdout"] <- base::list(NULL)
[17:03:01.060]         }
[17:03:01.060]         base::close(...future.stdout)
[17:03:01.060]         ...future.stdout <- NULL
[17:03:01.060]     }
[17:03:01.060]     ...future.result$conditions <- ...future.conditions
[17:03:01.060]     ...future.result$finished <- base::Sys.time()
[17:03:01.060]     ...future.result
[17:03:01.060] }
[17:03:01.064] MultisessionFuture started
[17:03:01.064] - Launch lazy future ... done
[17:03:01.064] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[17:03:01.064] result() for ClusterFuture ...
[17:03:01.065] receiveMessageFromWorker() for ClusterFuture ...
[17:03:01.065] - Validating connection of MultisessionFuture
[17:03:01.066] - received message: FutureResult
[17:03:01.066] - Received FutureResult
[17:03:01.066] - Erased future from FutureRegistry
[17:03:01.066] result() for ClusterFuture ...
[17:03:01.066] - result already collected: FutureResult
[17:03:01.066] result() for ClusterFuture ... done
[17:03:01.067] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:01.067] result() for ClusterFuture ... done
[17:03:01.067] result() for ClusterFuture ...
[17:03:01.067] - result already collected: FutureResult
[17:03:01.067] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 4676c8f5-5d39-5008-c79a-5ba4e7c34d3d
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[17:03:01.067] getGlobalsAndPackages() ...
[17:03:01.068] Searching for globals...
[17:03:01.069] - globals found: [2] ‘{’, ‘:::’
[17:03:01.069] Searching for globals ... DONE
[17:03:01.069] Resolving globals: FALSE
[17:03:01.069] 
[17:03:01.069] 
[17:03:01.069] getGlobalsAndPackages() ... DONE
[17:03:01.070] run() for ‘Future’ ...
[17:03:01.070] - state: ‘created’
[17:03:01.070] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:01.081] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:01.081] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:01.081]   - Field: ‘node’
[17:03:01.081]   - Field: ‘label’
[17:03:01.081]   - Field: ‘local’
[17:03:01.082]   - Field: ‘owner’
[17:03:01.082]   - Field: ‘envir’
[17:03:01.082]   - Field: ‘workers’
[17:03:01.082]   - Field: ‘packages’
[17:03:01.082]   - Field: ‘gc’
[17:03:01.082]   - Field: ‘conditions’
[17:03:01.082]   - Field: ‘persistent’
[17:03:01.082]   - Field: ‘expr’
[17:03:01.082]   - Field: ‘uuid’
[17:03:01.083]   - Field: ‘seed’
[17:03:01.086]   - Field: ‘version’
[17:03:01.086]   - Field: ‘result’
[17:03:01.086]   - Field: ‘asynchronous’
[17:03:01.086]   - Field: ‘calls’
[17:03:01.086]   - Field: ‘globals’
[17:03:01.086]   - Field: ‘stdout’
[17:03:01.086]   - Field: ‘earlySignal’
[17:03:01.086]   - Field: ‘lazy’
[17:03:01.086]   - Field: ‘state’
[17:03:01.086] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:01.086] - Launch lazy future ...
[17:03:01.087] Packages needed by the future expression (n = 0): <none>
[17:03:01.087] Packages needed by future strategies (n = 0): <none>
[17:03:01.087] {
[17:03:01.087]     {
[17:03:01.087]         {
[17:03:01.087]             ...future.startTime <- base::Sys.time()
[17:03:01.087]             {
[17:03:01.087]                 {
[17:03:01.087]                   {
[17:03:01.087]                     {
[17:03:01.087]                       base::local({
[17:03:01.087]                         has_future <- base::requireNamespace("future", 
[17:03:01.087]                           quietly = TRUE)
[17:03:01.087]                         if (has_future) {
[17:03:01.087]                           ns <- base::getNamespace("future")
[17:03:01.087]                           version <- ns[[".package"]][["version"]]
[17:03:01.087]                           if (is.null(version)) 
[17:03:01.087]                             version <- utils::packageVersion("future")
[17:03:01.087]                         }
[17:03:01.087]                         else {
[17:03:01.087]                           version <- NULL
[17:03:01.087]                         }
[17:03:01.087]                         if (!has_future || version < "1.8.0") {
[17:03:01.087]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:01.087]                             "", base::R.version$version.string), 
[17:03:01.087]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:01.087]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:01.087]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:01.087]                               "release", "version")], collapse = " "), 
[17:03:01.087]                             hostname = base::Sys.info()[["nodename"]])
[17:03:01.087]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:01.087]                             info)
[17:03:01.087]                           info <- base::paste(info, collapse = "; ")
[17:03:01.087]                           if (!has_future) {
[17:03:01.087]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:01.087]                               info)
[17:03:01.087]                           }
[17:03:01.087]                           else {
[17:03:01.087]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:01.087]                               info, version)
[17:03:01.087]                           }
[17:03:01.087]                           base::stop(msg)
[17:03:01.087]                         }
[17:03:01.087]                       })
[17:03:01.087]                     }
[17:03:01.087]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:01.087]                     base::options(mc.cores = 1L)
[17:03:01.087]                   }
[17:03:01.087]                   ...future.strategy.old <- future::plan("list")
[17:03:01.087]                   options(future.plan = NULL)
[17:03:01.087]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.087]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:01.087]                 }
[17:03:01.087]                 ...future.workdir <- getwd()
[17:03:01.087]             }
[17:03:01.087]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:01.087]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:01.087]         }
[17:03:01.087]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:01.087]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:01.087]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:01.087]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:01.087]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:01.087]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:01.087]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:01.087]             base::names(...future.oldOptions))
[17:03:01.087]     }
[17:03:01.087]     if (FALSE) {
[17:03:01.087]     }
[17:03:01.087]     else {
[17:03:01.087]         if (TRUE) {
[17:03:01.087]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:01.087]                 open = "w")
[17:03:01.087]         }
[17:03:01.087]         else {
[17:03:01.087]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:01.087]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:01.087]         }
[17:03:01.087]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:01.087]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:01.087]             base::sink(type = "output", split = FALSE)
[17:03:01.087]             base::close(...future.stdout)
[17:03:01.087]         }, add = TRUE)
[17:03:01.087]     }
[17:03:01.087]     ...future.frame <- base::sys.nframe()
[17:03:01.087]     ...future.conditions <- base::list()
[17:03:01.087]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:01.087]     if (FALSE) {
[17:03:01.087]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:01.087]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:01.087]     }
[17:03:01.087]     ...future.result <- base::tryCatch({
[17:03:01.087]         base::withCallingHandlers({
[17:03:01.087]             ...future.value <- base::withVisible(base::local({
[17:03:01.087]                 ...future.makeSendCondition <- base::local({
[17:03:01.087]                   sendCondition <- NULL
[17:03:01.087]                   function(frame = 1L) {
[17:03:01.087]                     if (is.function(sendCondition)) 
[17:03:01.087]                       return(sendCondition)
[17:03:01.087]                     ns <- getNamespace("parallel")
[17:03:01.087]                     if (exists("sendData", mode = "function", 
[17:03:01.087]                       envir = ns)) {
[17:03:01.087]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:01.087]                         envir = ns)
[17:03:01.087]                       envir <- sys.frame(frame)
[17:03:01.087]                       master <- NULL
[17:03:01.087]                       while (!identical(envir, .GlobalEnv) && 
[17:03:01.087]                         !identical(envir, emptyenv())) {
[17:03:01.087]                         if (exists("master", mode = "list", envir = envir, 
[17:03:01.087]                           inherits = FALSE)) {
[17:03:01.087]                           master <- get("master", mode = "list", 
[17:03:01.087]                             envir = envir, inherits = FALSE)
[17:03:01.087]                           if (inherits(master, c("SOCKnode", 
[17:03:01.087]                             "SOCK0node"))) {
[17:03:01.087]                             sendCondition <<- function(cond) {
[17:03:01.087]                               data <- list(type = "VALUE", value = cond, 
[17:03:01.087]                                 success = TRUE)
[17:03:01.087]                               parallel_sendData(master, data)
[17:03:01.087]                             }
[17:03:01.087]                             return(sendCondition)
[17:03:01.087]                           }
[17:03:01.087]                         }
[17:03:01.087]                         frame <- frame + 1L
[17:03:01.087]                         envir <- sys.frame(frame)
[17:03:01.087]                       }
[17:03:01.087]                     }
[17:03:01.087]                     sendCondition <<- function(cond) NULL
[17:03:01.087]                   }
[17:03:01.087]                 })
[17:03:01.087]                 withCallingHandlers({
[17:03:01.087]                   {
[17:03:01.087]                     future:::session_uuid(attributes = TRUE)
[17:03:01.087]                   }
[17:03:01.087]                 }, immediateCondition = function(cond) {
[17:03:01.087]                   sendCondition <- ...future.makeSendCondition()
[17:03:01.087]                   sendCondition(cond)
[17:03:01.087]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.087]                   {
[17:03:01.087]                     inherits <- base::inherits
[17:03:01.087]                     invokeRestart <- base::invokeRestart
[17:03:01.087]                     is.null <- base::is.null
[17:03:01.087]                     muffled <- FALSE
[17:03:01.087]                     if (inherits(cond, "message")) {
[17:03:01.087]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:01.087]                       if (muffled) 
[17:03:01.087]                         invokeRestart("muffleMessage")
[17:03:01.087]                     }
[17:03:01.087]                     else if (inherits(cond, "warning")) {
[17:03:01.087]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:01.087]                       if (muffled) 
[17:03:01.087]                         invokeRestart("muffleWarning")
[17:03:01.087]                     }
[17:03:01.087]                     else if (inherits(cond, "condition")) {
[17:03:01.087]                       if (!is.null(pattern)) {
[17:03:01.087]                         computeRestarts <- base::computeRestarts
[17:03:01.087]                         grepl <- base::grepl
[17:03:01.087]                         restarts <- computeRestarts(cond)
[17:03:01.087]                         for (restart in restarts) {
[17:03:01.087]                           name <- restart$name
[17:03:01.087]                           if (is.null(name)) 
[17:03:01.087]                             next
[17:03:01.087]                           if (!grepl(pattern, name)) 
[17:03:01.087]                             next
[17:03:01.087]                           invokeRestart(restart)
[17:03:01.087]                           muffled <- TRUE
[17:03:01.087]                           break
[17:03:01.087]                         }
[17:03:01.087]                       }
[17:03:01.087]                     }
[17:03:01.087]                     invisible(muffled)
[17:03:01.087]                   }
[17:03:01.087]                   muffleCondition(cond)
[17:03:01.087]                 })
[17:03:01.087]             }))
[17:03:01.087]             future::FutureResult(value = ...future.value$value, 
[17:03:01.087]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.087]                   ...future.rng), globalenv = if (FALSE) 
[17:03:01.087]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:01.087]                     ...future.globalenv.names))
[17:03:01.087]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:01.087]         }, condition = base::local({
[17:03:01.087]             c <- base::c
[17:03:01.087]             inherits <- base::inherits
[17:03:01.087]             invokeRestart <- base::invokeRestart
[17:03:01.087]             length <- base::length
[17:03:01.087]             list <- base::list
[17:03:01.087]             seq.int <- base::seq.int
[17:03:01.087]             signalCondition <- base::signalCondition
[17:03:01.087]             sys.calls <- base::sys.calls
[17:03:01.087]             `[[` <- base::`[[`
[17:03:01.087]             `+` <- base::`+`
[17:03:01.087]             `<<-` <- base::`<<-`
[17:03:01.087]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:01.087]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:01.087]                   3L)]
[17:03:01.087]             }
[17:03:01.087]             function(cond) {
[17:03:01.087]                 is_error <- inherits(cond, "error")
[17:03:01.087]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:01.087]                   NULL)
[17:03:01.087]                 if (is_error) {
[17:03:01.087]                   sessionInformation <- function() {
[17:03:01.087]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:01.087]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:01.087]                       search = base::search(), system = base::Sys.info())
[17:03:01.087]                   }
[17:03:01.087]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.087]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:01.087]                     cond$call), session = sessionInformation(), 
[17:03:01.087]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:01.087]                   signalCondition(cond)
[17:03:01.087]                 }
[17:03:01.087]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:01.087]                 "immediateCondition"))) {
[17:03:01.087]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:01.087]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.087]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:01.087]                   if (TRUE && !signal) {
[17:03:01.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.087]                     {
[17:03:01.087]                       inherits <- base::inherits
[17:03:01.087]                       invokeRestart <- base::invokeRestart
[17:03:01.087]                       is.null <- base::is.null
[17:03:01.087]                       muffled <- FALSE
[17:03:01.087]                       if (inherits(cond, "message")) {
[17:03:01.087]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.087]                         if (muffled) 
[17:03:01.087]                           invokeRestart("muffleMessage")
[17:03:01.087]                       }
[17:03:01.087]                       else if (inherits(cond, "warning")) {
[17:03:01.087]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.087]                         if (muffled) 
[17:03:01.087]                           invokeRestart("muffleWarning")
[17:03:01.087]                       }
[17:03:01.087]                       else if (inherits(cond, "condition")) {
[17:03:01.087]                         if (!is.null(pattern)) {
[17:03:01.087]                           computeRestarts <- base::computeRestarts
[17:03:01.087]                           grepl <- base::grepl
[17:03:01.087]                           restarts <- computeRestarts(cond)
[17:03:01.087]                           for (restart in restarts) {
[17:03:01.087]                             name <- restart$name
[17:03:01.087]                             if (is.null(name)) 
[17:03:01.087]                               next
[17:03:01.087]                             if (!grepl(pattern, name)) 
[17:03:01.087]                               next
[17:03:01.087]                             invokeRestart(restart)
[17:03:01.087]                             muffled <- TRUE
[17:03:01.087]                             break
[17:03:01.087]                           }
[17:03:01.087]                         }
[17:03:01.087]                       }
[17:03:01.087]                       invisible(muffled)
[17:03:01.087]                     }
[17:03:01.087]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.087]                   }
[17:03:01.087]                 }
[17:03:01.087]                 else {
[17:03:01.087]                   if (TRUE) {
[17:03:01.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.087]                     {
[17:03:01.087]                       inherits <- base::inherits
[17:03:01.087]                       invokeRestart <- base::invokeRestart
[17:03:01.087]                       is.null <- base::is.null
[17:03:01.087]                       muffled <- FALSE
[17:03:01.087]                       if (inherits(cond, "message")) {
[17:03:01.087]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.087]                         if (muffled) 
[17:03:01.087]                           invokeRestart("muffleMessage")
[17:03:01.087]                       }
[17:03:01.087]                       else if (inherits(cond, "warning")) {
[17:03:01.087]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.087]                         if (muffled) 
[17:03:01.087]                           invokeRestart("muffleWarning")
[17:03:01.087]                       }
[17:03:01.087]                       else if (inherits(cond, "condition")) {
[17:03:01.087]                         if (!is.null(pattern)) {
[17:03:01.087]                           computeRestarts <- base::computeRestarts
[17:03:01.087]                           grepl <- base::grepl
[17:03:01.087]                           restarts <- computeRestarts(cond)
[17:03:01.087]                           for (restart in restarts) {
[17:03:01.087]                             name <- restart$name
[17:03:01.087]                             if (is.null(name)) 
[17:03:01.087]                               next
[17:03:01.087]                             if (!grepl(pattern, name)) 
[17:03:01.087]                               next
[17:03:01.087]                             invokeRestart(restart)
[17:03:01.087]                             muffled <- TRUE
[17:03:01.087]                             break
[17:03:01.087]                           }
[17:03:01.087]                         }
[17:03:01.087]                       }
[17:03:01.087]                       invisible(muffled)
[17:03:01.087]                     }
[17:03:01.087]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.087]                   }
[17:03:01.087]                 }
[17:03:01.087]             }
[17:03:01.087]         }))
[17:03:01.087]     }, error = function(ex) {
[17:03:01.087]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:01.087]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.087]                 ...future.rng), started = ...future.startTime, 
[17:03:01.087]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:01.087]             version = "1.8"), class = "FutureResult")
[17:03:01.087]     }, finally = {
[17:03:01.087]         if (!identical(...future.workdir, getwd())) 
[17:03:01.087]             setwd(...future.workdir)
[17:03:01.087]         {
[17:03:01.087]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:01.087]                 ...future.oldOptions$nwarnings <- NULL
[17:03:01.087]             }
[17:03:01.087]             base::options(...future.oldOptions)
[17:03:01.087]             if (.Platform$OS.type == "windows") {
[17:03:01.087]                 old_names <- names(...future.oldEnvVars)
[17:03:01.087]                 envs <- base::Sys.getenv()
[17:03:01.087]                 names <- names(envs)
[17:03:01.087]                 common <- intersect(names, old_names)
[17:03:01.087]                 added <- setdiff(names, old_names)
[17:03:01.087]                 removed <- setdiff(old_names, names)
[17:03:01.087]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:01.087]                   envs[common]]
[17:03:01.087]                 NAMES <- toupper(changed)
[17:03:01.087]                 args <- list()
[17:03:01.087]                 for (kk in seq_along(NAMES)) {
[17:03:01.087]                   name <- changed[[kk]]
[17:03:01.087]                   NAME <- NAMES[[kk]]
[17:03:01.087]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.087]                     next
[17:03:01.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.087]                 }
[17:03:01.087]                 NAMES <- toupper(added)
[17:03:01.087]                 for (kk in seq_along(NAMES)) {
[17:03:01.087]                   name <- added[[kk]]
[17:03:01.087]                   NAME <- NAMES[[kk]]
[17:03:01.087]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.087]                     next
[17:03:01.087]                   args[[name]] <- ""
[17:03:01.087]                 }
[17:03:01.087]                 NAMES <- toupper(removed)
[17:03:01.087]                 for (kk in seq_along(NAMES)) {
[17:03:01.087]                   name <- removed[[kk]]
[17:03:01.087]                   NAME <- NAMES[[kk]]
[17:03:01.087]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.087]                     next
[17:03:01.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.087]                 }
[17:03:01.087]                 if (length(args) > 0) 
[17:03:01.087]                   base::do.call(base::Sys.setenv, args = args)
[17:03:01.087]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:01.087]             }
[17:03:01.087]             else {
[17:03:01.087]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:01.087]             }
[17:03:01.087]             {
[17:03:01.087]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:01.087]                   0L) {
[17:03:01.087]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:01.087]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:01.087]                   base::options(opts)
[17:03:01.087]                 }
[17:03:01.087]                 {
[17:03:01.087]                   {
[17:03:01.087]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:01.087]                     NULL
[17:03:01.087]                   }
[17:03:01.087]                   options(future.plan = NULL)
[17:03:01.087]                   if (is.na(NA_character_)) 
[17:03:01.087]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.087]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:01.087]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:01.087]                     .init = FALSE)
[17:03:01.087]                 }
[17:03:01.087]             }
[17:03:01.087]         }
[17:03:01.087]     })
[17:03:01.087]     if (TRUE) {
[17:03:01.087]         base::sink(type = "output", split = FALSE)
[17:03:01.087]         if (TRUE) {
[17:03:01.087]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:01.087]         }
[17:03:01.087]         else {
[17:03:01.087]             ...future.result["stdout"] <- base::list(NULL)
[17:03:01.087]         }
[17:03:01.087]         base::close(...future.stdout)
[17:03:01.087]         ...future.stdout <- NULL
[17:03:01.087]     }
[17:03:01.087]     ...future.result$conditions <- ...future.conditions
[17:03:01.087]     ...future.result$finished <- base::Sys.time()
[17:03:01.087]     ...future.result
[17:03:01.087] }
[17:03:01.090] MultisessionFuture started
[17:03:01.090] - Launch lazy future ... done
[17:03:01.091] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[17:03:01.091] result() for ClusterFuture ...
[17:03:01.091] receiveMessageFromWorker() for ClusterFuture ...
[17:03:01.091] - Validating connection of MultisessionFuture
[17:03:01.096] - received message: FutureResult
[17:03:01.096] - Received FutureResult
[17:03:01.096] - Erased future from FutureRegistry
[17:03:01.096] result() for ClusterFuture ...
[17:03:01.096] - result already collected: FutureResult
[17:03:01.096] result() for ClusterFuture ... done
[17:03:01.097] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:01.097] result() for ClusterFuture ... done
[17:03:01.097] result() for ClusterFuture ...
[17:03:01.097] - result already collected: FutureResult
[17:03:01.097] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 4676c8f5-5d39-5008-c79a-5ba4e7c34d3d
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[17:03:01.097] getGlobalsAndPackages() ...
[17:03:01.097] Searching for globals...
[17:03:01.098] - globals found: [3] ‘{’, ‘$’, ‘f1’
[17:03:01.098] Searching for globals ... DONE
[17:03:01.098] Resolving globals: FALSE
[17:03:01.101] The total size of the 1 globals is 1.56 MiB (1638048 bytes)
[17:03:01.101] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:03:01.102] - globals: [1] ‘f1’
[17:03:01.102] 
[17:03:01.102] getGlobalsAndPackages() ... DONE
[17:03:01.102] run() for ‘Future’ ...
[17:03:01.102] - state: ‘created’
[17:03:01.102] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:01.112] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:01.112] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:01.113]   - Field: ‘node’
[17:03:01.113]   - Field: ‘label’
[17:03:01.113]   - Field: ‘local’
[17:03:01.113]   - Field: ‘owner’
[17:03:01.113]   - Field: ‘envir’
[17:03:01.113]   - Field: ‘workers’
[17:03:01.113]   - Field: ‘packages’
[17:03:01.113]   - Field: ‘gc’
[17:03:01.113]   - Field: ‘conditions’
[17:03:01.113]   - Field: ‘persistent’
[17:03:01.113]   - Field: ‘expr’
[17:03:01.114]   - Field: ‘uuid’
[17:03:01.114]   - Field: ‘seed’
[17:03:01.114]   - Field: ‘version’
[17:03:01.114]   - Field: ‘result’
[17:03:01.114]   - Field: ‘asynchronous’
[17:03:01.114]   - Field: ‘calls’
[17:03:01.114]   - Field: ‘globals’
[17:03:01.114]   - Field: ‘stdout’
[17:03:01.114]   - Field: ‘earlySignal’
[17:03:01.114]   - Field: ‘lazy’
[17:03:01.114]   - Field: ‘state’
[17:03:01.114] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:01.115] - Launch lazy future ...
[17:03:01.115] Packages needed by the future expression (n = 0): <none>
[17:03:01.115] Packages needed by future strategies (n = 0): <none>
[17:03:01.115] {
[17:03:01.115]     {
[17:03:01.115]         {
[17:03:01.115]             ...future.startTime <- base::Sys.time()
[17:03:01.115]             {
[17:03:01.115]                 {
[17:03:01.115]                   {
[17:03:01.115]                     {
[17:03:01.115]                       base::local({
[17:03:01.115]                         has_future <- base::requireNamespace("future", 
[17:03:01.115]                           quietly = TRUE)
[17:03:01.115]                         if (has_future) {
[17:03:01.115]                           ns <- base::getNamespace("future")
[17:03:01.115]                           version <- ns[[".package"]][["version"]]
[17:03:01.115]                           if (is.null(version)) 
[17:03:01.115]                             version <- utils::packageVersion("future")
[17:03:01.115]                         }
[17:03:01.115]                         else {
[17:03:01.115]                           version <- NULL
[17:03:01.115]                         }
[17:03:01.115]                         if (!has_future || version < "1.8.0") {
[17:03:01.115]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:01.115]                             "", base::R.version$version.string), 
[17:03:01.115]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:01.115]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:01.115]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:01.115]                               "release", "version")], collapse = " "), 
[17:03:01.115]                             hostname = base::Sys.info()[["nodename"]])
[17:03:01.115]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:01.115]                             info)
[17:03:01.115]                           info <- base::paste(info, collapse = "; ")
[17:03:01.115]                           if (!has_future) {
[17:03:01.115]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:01.115]                               info)
[17:03:01.115]                           }
[17:03:01.115]                           else {
[17:03:01.115]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:01.115]                               info, version)
[17:03:01.115]                           }
[17:03:01.115]                           base::stop(msg)
[17:03:01.115]                         }
[17:03:01.115]                       })
[17:03:01.115]                     }
[17:03:01.115]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:01.115]                     base::options(mc.cores = 1L)
[17:03:01.115]                   }
[17:03:01.115]                   ...future.strategy.old <- future::plan("list")
[17:03:01.115]                   options(future.plan = NULL)
[17:03:01.115]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.115]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:01.115]                 }
[17:03:01.115]                 ...future.workdir <- getwd()
[17:03:01.115]             }
[17:03:01.115]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:01.115]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:01.115]         }
[17:03:01.115]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:01.115]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:01.115]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:01.115]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:01.115]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:01.115]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:01.115]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:01.115]             base::names(...future.oldOptions))
[17:03:01.115]     }
[17:03:01.115]     if (FALSE) {
[17:03:01.115]     }
[17:03:01.115]     else {
[17:03:01.115]         if (TRUE) {
[17:03:01.115]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:01.115]                 open = "w")
[17:03:01.115]         }
[17:03:01.115]         else {
[17:03:01.115]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:01.115]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:01.115]         }
[17:03:01.115]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:01.115]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:01.115]             base::sink(type = "output", split = FALSE)
[17:03:01.115]             base::close(...future.stdout)
[17:03:01.115]         }, add = TRUE)
[17:03:01.115]     }
[17:03:01.115]     ...future.frame <- base::sys.nframe()
[17:03:01.115]     ...future.conditions <- base::list()
[17:03:01.115]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:01.115]     if (FALSE) {
[17:03:01.115]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:01.115]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:01.115]     }
[17:03:01.115]     ...future.result <- base::tryCatch({
[17:03:01.115]         base::withCallingHandlers({
[17:03:01.115]             ...future.value <- base::withVisible(base::local({
[17:03:01.115]                 ...future.makeSendCondition <- base::local({
[17:03:01.115]                   sendCondition <- NULL
[17:03:01.115]                   function(frame = 1L) {
[17:03:01.115]                     if (is.function(sendCondition)) 
[17:03:01.115]                       return(sendCondition)
[17:03:01.115]                     ns <- getNamespace("parallel")
[17:03:01.115]                     if (exists("sendData", mode = "function", 
[17:03:01.115]                       envir = ns)) {
[17:03:01.115]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:01.115]                         envir = ns)
[17:03:01.115]                       envir <- sys.frame(frame)
[17:03:01.115]                       master <- NULL
[17:03:01.115]                       while (!identical(envir, .GlobalEnv) && 
[17:03:01.115]                         !identical(envir, emptyenv())) {
[17:03:01.115]                         if (exists("master", mode = "list", envir = envir, 
[17:03:01.115]                           inherits = FALSE)) {
[17:03:01.115]                           master <- get("master", mode = "list", 
[17:03:01.115]                             envir = envir, inherits = FALSE)
[17:03:01.115]                           if (inherits(master, c("SOCKnode", 
[17:03:01.115]                             "SOCK0node"))) {
[17:03:01.115]                             sendCondition <<- function(cond) {
[17:03:01.115]                               data <- list(type = "VALUE", value = cond, 
[17:03:01.115]                                 success = TRUE)
[17:03:01.115]                               parallel_sendData(master, data)
[17:03:01.115]                             }
[17:03:01.115]                             return(sendCondition)
[17:03:01.115]                           }
[17:03:01.115]                         }
[17:03:01.115]                         frame <- frame + 1L
[17:03:01.115]                         envir <- sys.frame(frame)
[17:03:01.115]                       }
[17:03:01.115]                     }
[17:03:01.115]                     sendCondition <<- function(cond) NULL
[17:03:01.115]                   }
[17:03:01.115]                 })
[17:03:01.115]                 withCallingHandlers({
[17:03:01.115]                   {
[17:03:01.115]                     f1$owner
[17:03:01.115]                   }
[17:03:01.115]                 }, immediateCondition = function(cond) {
[17:03:01.115]                   sendCondition <- ...future.makeSendCondition()
[17:03:01.115]                   sendCondition(cond)
[17:03:01.115]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.115]                   {
[17:03:01.115]                     inherits <- base::inherits
[17:03:01.115]                     invokeRestart <- base::invokeRestart
[17:03:01.115]                     is.null <- base::is.null
[17:03:01.115]                     muffled <- FALSE
[17:03:01.115]                     if (inherits(cond, "message")) {
[17:03:01.115]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:01.115]                       if (muffled) 
[17:03:01.115]                         invokeRestart("muffleMessage")
[17:03:01.115]                     }
[17:03:01.115]                     else if (inherits(cond, "warning")) {
[17:03:01.115]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:01.115]                       if (muffled) 
[17:03:01.115]                         invokeRestart("muffleWarning")
[17:03:01.115]                     }
[17:03:01.115]                     else if (inherits(cond, "condition")) {
[17:03:01.115]                       if (!is.null(pattern)) {
[17:03:01.115]                         computeRestarts <- base::computeRestarts
[17:03:01.115]                         grepl <- base::grepl
[17:03:01.115]                         restarts <- computeRestarts(cond)
[17:03:01.115]                         for (restart in restarts) {
[17:03:01.115]                           name <- restart$name
[17:03:01.115]                           if (is.null(name)) 
[17:03:01.115]                             next
[17:03:01.115]                           if (!grepl(pattern, name)) 
[17:03:01.115]                             next
[17:03:01.115]                           invokeRestart(restart)
[17:03:01.115]                           muffled <- TRUE
[17:03:01.115]                           break
[17:03:01.115]                         }
[17:03:01.115]                       }
[17:03:01.115]                     }
[17:03:01.115]                     invisible(muffled)
[17:03:01.115]                   }
[17:03:01.115]                   muffleCondition(cond)
[17:03:01.115]                 })
[17:03:01.115]             }))
[17:03:01.115]             future::FutureResult(value = ...future.value$value, 
[17:03:01.115]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.115]                   ...future.rng), globalenv = if (FALSE) 
[17:03:01.115]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:01.115]                     ...future.globalenv.names))
[17:03:01.115]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:01.115]         }, condition = base::local({
[17:03:01.115]             c <- base::c
[17:03:01.115]             inherits <- base::inherits
[17:03:01.115]             invokeRestart <- base::invokeRestart
[17:03:01.115]             length <- base::length
[17:03:01.115]             list <- base::list
[17:03:01.115]             seq.int <- base::seq.int
[17:03:01.115]             signalCondition <- base::signalCondition
[17:03:01.115]             sys.calls <- base::sys.calls
[17:03:01.115]             `[[` <- base::`[[`
[17:03:01.115]             `+` <- base::`+`
[17:03:01.115]             `<<-` <- base::`<<-`
[17:03:01.115]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:01.115]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:01.115]                   3L)]
[17:03:01.115]             }
[17:03:01.115]             function(cond) {
[17:03:01.115]                 is_error <- inherits(cond, "error")
[17:03:01.115]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:01.115]                   NULL)
[17:03:01.115]                 if (is_error) {
[17:03:01.115]                   sessionInformation <- function() {
[17:03:01.115]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:01.115]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:01.115]                       search = base::search(), system = base::Sys.info())
[17:03:01.115]                   }
[17:03:01.115]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.115]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:01.115]                     cond$call), session = sessionInformation(), 
[17:03:01.115]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:01.115]                   signalCondition(cond)
[17:03:01.115]                 }
[17:03:01.115]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:01.115]                 "immediateCondition"))) {
[17:03:01.115]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:01.115]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.115]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:01.115]                   if (TRUE && !signal) {
[17:03:01.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.115]                     {
[17:03:01.115]                       inherits <- base::inherits
[17:03:01.115]                       invokeRestart <- base::invokeRestart
[17:03:01.115]                       is.null <- base::is.null
[17:03:01.115]                       muffled <- FALSE
[17:03:01.115]                       if (inherits(cond, "message")) {
[17:03:01.115]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.115]                         if (muffled) 
[17:03:01.115]                           invokeRestart("muffleMessage")
[17:03:01.115]                       }
[17:03:01.115]                       else if (inherits(cond, "warning")) {
[17:03:01.115]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.115]                         if (muffled) 
[17:03:01.115]                           invokeRestart("muffleWarning")
[17:03:01.115]                       }
[17:03:01.115]                       else if (inherits(cond, "condition")) {
[17:03:01.115]                         if (!is.null(pattern)) {
[17:03:01.115]                           computeRestarts <- base::computeRestarts
[17:03:01.115]                           grepl <- base::grepl
[17:03:01.115]                           restarts <- computeRestarts(cond)
[17:03:01.115]                           for (restart in restarts) {
[17:03:01.115]                             name <- restart$name
[17:03:01.115]                             if (is.null(name)) 
[17:03:01.115]                               next
[17:03:01.115]                             if (!grepl(pattern, name)) 
[17:03:01.115]                               next
[17:03:01.115]                             invokeRestart(restart)
[17:03:01.115]                             muffled <- TRUE
[17:03:01.115]                             break
[17:03:01.115]                           }
[17:03:01.115]                         }
[17:03:01.115]                       }
[17:03:01.115]                       invisible(muffled)
[17:03:01.115]                     }
[17:03:01.115]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.115]                   }
[17:03:01.115]                 }
[17:03:01.115]                 else {
[17:03:01.115]                   if (TRUE) {
[17:03:01.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.115]                     {
[17:03:01.115]                       inherits <- base::inherits
[17:03:01.115]                       invokeRestart <- base::invokeRestart
[17:03:01.115]                       is.null <- base::is.null
[17:03:01.115]                       muffled <- FALSE
[17:03:01.115]                       if (inherits(cond, "message")) {
[17:03:01.115]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.115]                         if (muffled) 
[17:03:01.115]                           invokeRestart("muffleMessage")
[17:03:01.115]                       }
[17:03:01.115]                       else if (inherits(cond, "warning")) {
[17:03:01.115]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.115]                         if (muffled) 
[17:03:01.115]                           invokeRestart("muffleWarning")
[17:03:01.115]                       }
[17:03:01.115]                       else if (inherits(cond, "condition")) {
[17:03:01.115]                         if (!is.null(pattern)) {
[17:03:01.115]                           computeRestarts <- base::computeRestarts
[17:03:01.115]                           grepl <- base::grepl
[17:03:01.115]                           restarts <- computeRestarts(cond)
[17:03:01.115]                           for (restart in restarts) {
[17:03:01.115]                             name <- restart$name
[17:03:01.115]                             if (is.null(name)) 
[17:03:01.115]                               next
[17:03:01.115]                             if (!grepl(pattern, name)) 
[17:03:01.115]                               next
[17:03:01.115]                             invokeRestart(restart)
[17:03:01.115]                             muffled <- TRUE
[17:03:01.115]                             break
[17:03:01.115]                           }
[17:03:01.115]                         }
[17:03:01.115]                       }
[17:03:01.115]                       invisible(muffled)
[17:03:01.115]                     }
[17:03:01.115]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.115]                   }
[17:03:01.115]                 }
[17:03:01.115]             }
[17:03:01.115]         }))
[17:03:01.115]     }, error = function(ex) {
[17:03:01.115]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:01.115]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.115]                 ...future.rng), started = ...future.startTime, 
[17:03:01.115]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:01.115]             version = "1.8"), class = "FutureResult")
[17:03:01.115]     }, finally = {
[17:03:01.115]         if (!identical(...future.workdir, getwd())) 
[17:03:01.115]             setwd(...future.workdir)
[17:03:01.115]         {
[17:03:01.115]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:01.115]                 ...future.oldOptions$nwarnings <- NULL
[17:03:01.115]             }
[17:03:01.115]             base::options(...future.oldOptions)
[17:03:01.115]             if (.Platform$OS.type == "windows") {
[17:03:01.115]                 old_names <- names(...future.oldEnvVars)
[17:03:01.115]                 envs <- base::Sys.getenv()
[17:03:01.115]                 names <- names(envs)
[17:03:01.115]                 common <- intersect(names, old_names)
[17:03:01.115]                 added <- setdiff(names, old_names)
[17:03:01.115]                 removed <- setdiff(old_names, names)
[17:03:01.115]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:01.115]                   envs[common]]
[17:03:01.115]                 NAMES <- toupper(changed)
[17:03:01.115]                 args <- list()
[17:03:01.115]                 for (kk in seq_along(NAMES)) {
[17:03:01.115]                   name <- changed[[kk]]
[17:03:01.115]                   NAME <- NAMES[[kk]]
[17:03:01.115]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.115]                     next
[17:03:01.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.115]                 }
[17:03:01.115]                 NAMES <- toupper(added)
[17:03:01.115]                 for (kk in seq_along(NAMES)) {
[17:03:01.115]                   name <- added[[kk]]
[17:03:01.115]                   NAME <- NAMES[[kk]]
[17:03:01.115]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.115]                     next
[17:03:01.115]                   args[[name]] <- ""
[17:03:01.115]                 }
[17:03:01.115]                 NAMES <- toupper(removed)
[17:03:01.115]                 for (kk in seq_along(NAMES)) {
[17:03:01.115]                   name <- removed[[kk]]
[17:03:01.115]                   NAME <- NAMES[[kk]]
[17:03:01.115]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.115]                     next
[17:03:01.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.115]                 }
[17:03:01.115]                 if (length(args) > 0) 
[17:03:01.115]                   base::do.call(base::Sys.setenv, args = args)
[17:03:01.115]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:01.115]             }
[17:03:01.115]             else {
[17:03:01.115]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:01.115]             }
[17:03:01.115]             {
[17:03:01.115]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:01.115]                   0L) {
[17:03:01.115]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:01.115]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:01.115]                   base::options(opts)
[17:03:01.115]                 }
[17:03:01.115]                 {
[17:03:01.115]                   {
[17:03:01.115]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:01.115]                     NULL
[17:03:01.115]                   }
[17:03:01.115]                   options(future.plan = NULL)
[17:03:01.115]                   if (is.na(NA_character_)) 
[17:03:01.115]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.115]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:01.115]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:01.115]                     .init = FALSE)
[17:03:01.115]                 }
[17:03:01.115]             }
[17:03:01.115]         }
[17:03:01.115]     })
[17:03:01.115]     if (TRUE) {
[17:03:01.115]         base::sink(type = "output", split = FALSE)
[17:03:01.115]         if (TRUE) {
[17:03:01.115]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:01.115]         }
[17:03:01.115]         else {
[17:03:01.115]             ...future.result["stdout"] <- base::list(NULL)
[17:03:01.115]         }
[17:03:01.115]         base::close(...future.stdout)
[17:03:01.115]         ...future.stdout <- NULL
[17:03:01.115]     }
[17:03:01.115]     ...future.result$conditions <- ...future.conditions
[17:03:01.115]     ...future.result$finished <- base::Sys.time()
[17:03:01.115]     ...future.result
[17:03:01.115] }
[17:03:01.118] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[17:03:01.120] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[17:03:01.172] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[17:03:01.172] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[17:03:01.173] MultisessionFuture started
[17:03:01.173] - Launch lazy future ... done
[17:03:01.173] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[17:03:01.173] result() for ClusterFuture ...
[17:03:01.173] receiveMessageFromWorker() for ClusterFuture ...
[17:03:01.173] - Validating connection of MultisessionFuture
[17:03:01.217] - received message: FutureResult
[17:03:01.218] - Received FutureResult
[17:03:01.218] - Erased future from FutureRegistry
[17:03:01.218] result() for ClusterFuture ...
[17:03:01.218] - result already collected: FutureResult
[17:03:01.218] result() for ClusterFuture ... done
[17:03:01.218] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:01.218] result() for ClusterFuture ... done
[17:03:01.218] result() for ClusterFuture ...
[17:03:01.218] - result already collected: FutureResult
[17:03:01.218] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: e17f438e-79a9-1889-0a3a-b61f47c93c14
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[17:03:01.219] getGlobalsAndPackages() ...
[17:03:01.219] Searching for globals...
[17:03:01.220] - globals found: [3] ‘{’, ‘$’, ‘f1’
[17:03:01.220] Searching for globals ... DONE
[17:03:01.220] Resolving globals: FALSE
[17:03:01.222] The total size of the 1 globals is 1.56 MiB (1640984 bytes)
[17:03:01.223] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:03:01.223] - globals: [1] ‘f1’
[17:03:01.223] 
[17:03:01.223] getGlobalsAndPackages() ... DONE
[17:03:01.223] run() for ‘Future’ ...
[17:03:01.223] - state: ‘created’
[17:03:01.223] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:01.234] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:01.234] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:01.234]   - Field: ‘node’
[17:03:01.234]   - Field: ‘label’
[17:03:01.234]   - Field: ‘local’
[17:03:01.234]   - Field: ‘owner’
[17:03:01.234]   - Field: ‘envir’
[17:03:01.234]   - Field: ‘workers’
[17:03:01.235]   - Field: ‘packages’
[17:03:01.235]   - Field: ‘gc’
[17:03:01.235]   - Field: ‘conditions’
[17:03:01.235]   - Field: ‘persistent’
[17:03:01.235]   - Field: ‘expr’
[17:03:01.235]   - Field: ‘uuid’
[17:03:01.235]   - Field: ‘seed’
[17:03:01.235]   - Field: ‘version’
[17:03:01.235]   - Field: ‘result’
[17:03:01.235]   - Field: ‘asynchronous’
[17:03:01.235]   - Field: ‘calls’
[17:03:01.236]   - Field: ‘globals’
[17:03:01.236]   - Field: ‘stdout’
[17:03:01.236]   - Field: ‘earlySignal’
[17:03:01.236]   - Field: ‘lazy’
[17:03:01.236]   - Field: ‘state’
[17:03:01.236] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:01.236] - Launch lazy future ...
[17:03:01.236] Packages needed by the future expression (n = 0): <none>
[17:03:01.236] Packages needed by future strategies (n = 0): <none>
[17:03:01.237] {
[17:03:01.237]     {
[17:03:01.237]         {
[17:03:01.237]             ...future.startTime <- base::Sys.time()
[17:03:01.237]             {
[17:03:01.237]                 {
[17:03:01.237]                   {
[17:03:01.237]                     {
[17:03:01.237]                       base::local({
[17:03:01.237]                         has_future <- base::requireNamespace("future", 
[17:03:01.237]                           quietly = TRUE)
[17:03:01.237]                         if (has_future) {
[17:03:01.237]                           ns <- base::getNamespace("future")
[17:03:01.237]                           version <- ns[[".package"]][["version"]]
[17:03:01.237]                           if (is.null(version)) 
[17:03:01.237]                             version <- utils::packageVersion("future")
[17:03:01.237]                         }
[17:03:01.237]                         else {
[17:03:01.237]                           version <- NULL
[17:03:01.237]                         }
[17:03:01.237]                         if (!has_future || version < "1.8.0") {
[17:03:01.237]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:01.237]                             "", base::R.version$version.string), 
[17:03:01.237]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:01.237]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:01.237]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:01.237]                               "release", "version")], collapse = " "), 
[17:03:01.237]                             hostname = base::Sys.info()[["nodename"]])
[17:03:01.237]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:01.237]                             info)
[17:03:01.237]                           info <- base::paste(info, collapse = "; ")
[17:03:01.237]                           if (!has_future) {
[17:03:01.237]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:01.237]                               info)
[17:03:01.237]                           }
[17:03:01.237]                           else {
[17:03:01.237]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:01.237]                               info, version)
[17:03:01.237]                           }
[17:03:01.237]                           base::stop(msg)
[17:03:01.237]                         }
[17:03:01.237]                       })
[17:03:01.237]                     }
[17:03:01.237]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:01.237]                     base::options(mc.cores = 1L)
[17:03:01.237]                   }
[17:03:01.237]                   ...future.strategy.old <- future::plan("list")
[17:03:01.237]                   options(future.plan = NULL)
[17:03:01.237]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.237]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:01.237]                 }
[17:03:01.237]                 ...future.workdir <- getwd()
[17:03:01.237]             }
[17:03:01.237]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:01.237]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:01.237]         }
[17:03:01.237]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:01.237]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:01.237]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:01.237]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:01.237]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:01.237]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:01.237]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:01.237]             base::names(...future.oldOptions))
[17:03:01.237]     }
[17:03:01.237]     if (FALSE) {
[17:03:01.237]     }
[17:03:01.237]     else {
[17:03:01.237]         if (TRUE) {
[17:03:01.237]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:01.237]                 open = "w")
[17:03:01.237]         }
[17:03:01.237]         else {
[17:03:01.237]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:01.237]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:01.237]         }
[17:03:01.237]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:01.237]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:01.237]             base::sink(type = "output", split = FALSE)
[17:03:01.237]             base::close(...future.stdout)
[17:03:01.237]         }, add = TRUE)
[17:03:01.237]     }
[17:03:01.237]     ...future.frame <- base::sys.nframe()
[17:03:01.237]     ...future.conditions <- base::list()
[17:03:01.237]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:01.237]     if (FALSE) {
[17:03:01.237]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:01.237]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:01.237]     }
[17:03:01.237]     ...future.result <- base::tryCatch({
[17:03:01.237]         base::withCallingHandlers({
[17:03:01.237]             ...future.value <- base::withVisible(base::local({
[17:03:01.237]                 ...future.makeSendCondition <- base::local({
[17:03:01.237]                   sendCondition <- NULL
[17:03:01.237]                   function(frame = 1L) {
[17:03:01.237]                     if (is.function(sendCondition)) 
[17:03:01.237]                       return(sendCondition)
[17:03:01.237]                     ns <- getNamespace("parallel")
[17:03:01.237]                     if (exists("sendData", mode = "function", 
[17:03:01.237]                       envir = ns)) {
[17:03:01.237]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:01.237]                         envir = ns)
[17:03:01.237]                       envir <- sys.frame(frame)
[17:03:01.237]                       master <- NULL
[17:03:01.237]                       while (!identical(envir, .GlobalEnv) && 
[17:03:01.237]                         !identical(envir, emptyenv())) {
[17:03:01.237]                         if (exists("master", mode = "list", envir = envir, 
[17:03:01.237]                           inherits = FALSE)) {
[17:03:01.237]                           master <- get("master", mode = "list", 
[17:03:01.237]                             envir = envir, inherits = FALSE)
[17:03:01.237]                           if (inherits(master, c("SOCKnode", 
[17:03:01.237]                             "SOCK0node"))) {
[17:03:01.237]                             sendCondition <<- function(cond) {
[17:03:01.237]                               data <- list(type = "VALUE", value = cond, 
[17:03:01.237]                                 success = TRUE)
[17:03:01.237]                               parallel_sendData(master, data)
[17:03:01.237]                             }
[17:03:01.237]                             return(sendCondition)
[17:03:01.237]                           }
[17:03:01.237]                         }
[17:03:01.237]                         frame <- frame + 1L
[17:03:01.237]                         envir <- sys.frame(frame)
[17:03:01.237]                       }
[17:03:01.237]                     }
[17:03:01.237]                     sendCondition <<- function(cond) NULL
[17:03:01.237]                   }
[17:03:01.237]                 })
[17:03:01.237]                 withCallingHandlers({
[17:03:01.237]                   {
[17:03:01.237]                     f1$owner
[17:03:01.237]                   }
[17:03:01.237]                 }, immediateCondition = function(cond) {
[17:03:01.237]                   sendCondition <- ...future.makeSendCondition()
[17:03:01.237]                   sendCondition(cond)
[17:03:01.237]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.237]                   {
[17:03:01.237]                     inherits <- base::inherits
[17:03:01.237]                     invokeRestart <- base::invokeRestart
[17:03:01.237]                     is.null <- base::is.null
[17:03:01.237]                     muffled <- FALSE
[17:03:01.237]                     if (inherits(cond, "message")) {
[17:03:01.237]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:01.237]                       if (muffled) 
[17:03:01.237]                         invokeRestart("muffleMessage")
[17:03:01.237]                     }
[17:03:01.237]                     else if (inherits(cond, "warning")) {
[17:03:01.237]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:01.237]                       if (muffled) 
[17:03:01.237]                         invokeRestart("muffleWarning")
[17:03:01.237]                     }
[17:03:01.237]                     else if (inherits(cond, "condition")) {
[17:03:01.237]                       if (!is.null(pattern)) {
[17:03:01.237]                         computeRestarts <- base::computeRestarts
[17:03:01.237]                         grepl <- base::grepl
[17:03:01.237]                         restarts <- computeRestarts(cond)
[17:03:01.237]                         for (restart in restarts) {
[17:03:01.237]                           name <- restart$name
[17:03:01.237]                           if (is.null(name)) 
[17:03:01.237]                             next
[17:03:01.237]                           if (!grepl(pattern, name)) 
[17:03:01.237]                             next
[17:03:01.237]                           invokeRestart(restart)
[17:03:01.237]                           muffled <- TRUE
[17:03:01.237]                           break
[17:03:01.237]                         }
[17:03:01.237]                       }
[17:03:01.237]                     }
[17:03:01.237]                     invisible(muffled)
[17:03:01.237]                   }
[17:03:01.237]                   muffleCondition(cond)
[17:03:01.237]                 })
[17:03:01.237]             }))
[17:03:01.237]             future::FutureResult(value = ...future.value$value, 
[17:03:01.237]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.237]                   ...future.rng), globalenv = if (FALSE) 
[17:03:01.237]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:01.237]                     ...future.globalenv.names))
[17:03:01.237]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:01.237]         }, condition = base::local({
[17:03:01.237]             c <- base::c
[17:03:01.237]             inherits <- base::inherits
[17:03:01.237]             invokeRestart <- base::invokeRestart
[17:03:01.237]             length <- base::length
[17:03:01.237]             list <- base::list
[17:03:01.237]             seq.int <- base::seq.int
[17:03:01.237]             signalCondition <- base::signalCondition
[17:03:01.237]             sys.calls <- base::sys.calls
[17:03:01.237]             `[[` <- base::`[[`
[17:03:01.237]             `+` <- base::`+`
[17:03:01.237]             `<<-` <- base::`<<-`
[17:03:01.237]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:01.237]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:01.237]                   3L)]
[17:03:01.237]             }
[17:03:01.237]             function(cond) {
[17:03:01.237]                 is_error <- inherits(cond, "error")
[17:03:01.237]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:01.237]                   NULL)
[17:03:01.237]                 if (is_error) {
[17:03:01.237]                   sessionInformation <- function() {
[17:03:01.237]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:01.237]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:01.237]                       search = base::search(), system = base::Sys.info())
[17:03:01.237]                   }
[17:03:01.237]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.237]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:01.237]                     cond$call), session = sessionInformation(), 
[17:03:01.237]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:01.237]                   signalCondition(cond)
[17:03:01.237]                 }
[17:03:01.237]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:01.237]                 "immediateCondition"))) {
[17:03:01.237]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:01.237]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.237]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:01.237]                   if (TRUE && !signal) {
[17:03:01.237]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.237]                     {
[17:03:01.237]                       inherits <- base::inherits
[17:03:01.237]                       invokeRestart <- base::invokeRestart
[17:03:01.237]                       is.null <- base::is.null
[17:03:01.237]                       muffled <- FALSE
[17:03:01.237]                       if (inherits(cond, "message")) {
[17:03:01.237]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.237]                         if (muffled) 
[17:03:01.237]                           invokeRestart("muffleMessage")
[17:03:01.237]                       }
[17:03:01.237]                       else if (inherits(cond, "warning")) {
[17:03:01.237]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.237]                         if (muffled) 
[17:03:01.237]                           invokeRestart("muffleWarning")
[17:03:01.237]                       }
[17:03:01.237]                       else if (inherits(cond, "condition")) {
[17:03:01.237]                         if (!is.null(pattern)) {
[17:03:01.237]                           computeRestarts <- base::computeRestarts
[17:03:01.237]                           grepl <- base::grepl
[17:03:01.237]                           restarts <- computeRestarts(cond)
[17:03:01.237]                           for (restart in restarts) {
[17:03:01.237]                             name <- restart$name
[17:03:01.237]                             if (is.null(name)) 
[17:03:01.237]                               next
[17:03:01.237]                             if (!grepl(pattern, name)) 
[17:03:01.237]                               next
[17:03:01.237]                             invokeRestart(restart)
[17:03:01.237]                             muffled <- TRUE
[17:03:01.237]                             break
[17:03:01.237]                           }
[17:03:01.237]                         }
[17:03:01.237]                       }
[17:03:01.237]                       invisible(muffled)
[17:03:01.237]                     }
[17:03:01.237]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.237]                   }
[17:03:01.237]                 }
[17:03:01.237]                 else {
[17:03:01.237]                   if (TRUE) {
[17:03:01.237]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.237]                     {
[17:03:01.237]                       inherits <- base::inherits
[17:03:01.237]                       invokeRestart <- base::invokeRestart
[17:03:01.237]                       is.null <- base::is.null
[17:03:01.237]                       muffled <- FALSE
[17:03:01.237]                       if (inherits(cond, "message")) {
[17:03:01.237]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.237]                         if (muffled) 
[17:03:01.237]                           invokeRestart("muffleMessage")
[17:03:01.237]                       }
[17:03:01.237]                       else if (inherits(cond, "warning")) {
[17:03:01.237]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.237]                         if (muffled) 
[17:03:01.237]                           invokeRestart("muffleWarning")
[17:03:01.237]                       }
[17:03:01.237]                       else if (inherits(cond, "condition")) {
[17:03:01.237]                         if (!is.null(pattern)) {
[17:03:01.237]                           computeRestarts <- base::computeRestarts
[17:03:01.237]                           grepl <- base::grepl
[17:03:01.237]                           restarts <- computeRestarts(cond)
[17:03:01.237]                           for (restart in restarts) {
[17:03:01.237]                             name <- restart$name
[17:03:01.237]                             if (is.null(name)) 
[17:03:01.237]                               next
[17:03:01.237]                             if (!grepl(pattern, name)) 
[17:03:01.237]                               next
[17:03:01.237]                             invokeRestart(restart)
[17:03:01.237]                             muffled <- TRUE
[17:03:01.237]                             break
[17:03:01.237]                           }
[17:03:01.237]                         }
[17:03:01.237]                       }
[17:03:01.237]                       invisible(muffled)
[17:03:01.237]                     }
[17:03:01.237]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.237]                   }
[17:03:01.237]                 }
[17:03:01.237]             }
[17:03:01.237]         }))
[17:03:01.237]     }, error = function(ex) {
[17:03:01.237]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:01.237]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.237]                 ...future.rng), started = ...future.startTime, 
[17:03:01.237]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:01.237]             version = "1.8"), class = "FutureResult")
[17:03:01.237]     }, finally = {
[17:03:01.237]         if (!identical(...future.workdir, getwd())) 
[17:03:01.237]             setwd(...future.workdir)
[17:03:01.237]         {
[17:03:01.237]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:01.237]                 ...future.oldOptions$nwarnings <- NULL
[17:03:01.237]             }
[17:03:01.237]             base::options(...future.oldOptions)
[17:03:01.237]             if (.Platform$OS.type == "windows") {
[17:03:01.237]                 old_names <- names(...future.oldEnvVars)
[17:03:01.237]                 envs <- base::Sys.getenv()
[17:03:01.237]                 names <- names(envs)
[17:03:01.237]                 common <- intersect(names, old_names)
[17:03:01.237]                 added <- setdiff(names, old_names)
[17:03:01.237]                 removed <- setdiff(old_names, names)
[17:03:01.237]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:01.237]                   envs[common]]
[17:03:01.237]                 NAMES <- toupper(changed)
[17:03:01.237]                 args <- list()
[17:03:01.237]                 for (kk in seq_along(NAMES)) {
[17:03:01.237]                   name <- changed[[kk]]
[17:03:01.237]                   NAME <- NAMES[[kk]]
[17:03:01.237]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.237]                     next
[17:03:01.237]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.237]                 }
[17:03:01.237]                 NAMES <- toupper(added)
[17:03:01.237]                 for (kk in seq_along(NAMES)) {
[17:03:01.237]                   name <- added[[kk]]
[17:03:01.237]                   NAME <- NAMES[[kk]]
[17:03:01.237]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.237]                     next
[17:03:01.237]                   args[[name]] <- ""
[17:03:01.237]                 }
[17:03:01.237]                 NAMES <- toupper(removed)
[17:03:01.237]                 for (kk in seq_along(NAMES)) {
[17:03:01.237]                   name <- removed[[kk]]
[17:03:01.237]                   NAME <- NAMES[[kk]]
[17:03:01.237]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.237]                     next
[17:03:01.237]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.237]                 }
[17:03:01.237]                 if (length(args) > 0) 
[17:03:01.237]                   base::do.call(base::Sys.setenv, args = args)
[17:03:01.237]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:01.237]             }
[17:03:01.237]             else {
[17:03:01.237]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:01.237]             }
[17:03:01.237]             {
[17:03:01.237]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:01.237]                   0L) {
[17:03:01.237]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:01.237]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:01.237]                   base::options(opts)
[17:03:01.237]                 }
[17:03:01.237]                 {
[17:03:01.237]                   {
[17:03:01.237]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:01.237]                     NULL
[17:03:01.237]                   }
[17:03:01.237]                   options(future.plan = NULL)
[17:03:01.237]                   if (is.na(NA_character_)) 
[17:03:01.237]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.237]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:01.237]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:01.237]                     .init = FALSE)
[17:03:01.237]                 }
[17:03:01.237]             }
[17:03:01.237]         }
[17:03:01.237]     })
[17:03:01.237]     if (TRUE) {
[17:03:01.237]         base::sink(type = "output", split = FALSE)
[17:03:01.237]         if (TRUE) {
[17:03:01.237]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:01.237]         }
[17:03:01.237]         else {
[17:03:01.237]             ...future.result["stdout"] <- base::list(NULL)
[17:03:01.237]         }
[17:03:01.237]         base::close(...future.stdout)
[17:03:01.237]         ...future.stdout <- NULL
[17:03:01.237]     }
[17:03:01.237]     ...future.result$conditions <- ...future.conditions
[17:03:01.237]     ...future.result$finished <- base::Sys.time()
[17:03:01.237]     ...future.result
[17:03:01.237] }
[17:03:01.240] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[17:03:01.241] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[17:03:01.296] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[17:03:01.296] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[17:03:01.297] MultisessionFuture started
[17:03:01.297] - Launch lazy future ... done
[17:03:01.297] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[17:03:01.298] result() for ClusterFuture ...
[17:03:01.298] receiveMessageFromWorker() for ClusterFuture ...
[17:03:01.298] - Validating connection of MultisessionFuture
[17:03:01.341] - received message: FutureResult
[17:03:01.342] - Received FutureResult
[17:03:01.342] - Erased future from FutureRegistry
[17:03:01.342] result() for ClusterFuture ...
[17:03:01.342] - result already collected: FutureResult
[17:03:01.342] result() for ClusterFuture ... done
[17:03:01.342] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:01.342] result() for ClusterFuture ... done
[17:03:01.342] result() for ClusterFuture ...
[17:03:01.342] - result already collected: FutureResult
[17:03:01.343] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: e17f438e-79a9-1889-0a3a-b61f47c93c14
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[17:03:01.343] getGlobalsAndPackages() ...
[17:03:01.343] Searching for globals...
[17:03:01.344] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[17:03:01.345] Searching for globals ... DONE
[17:03:01.345] Resolving globals: FALSE
[17:03:01.347] The total size of the 1 globals is 1.57 MiB (1643920 bytes)
[17:03:01.347] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[17:03:01.347] - globals: [1] ‘f1’
[17:03:01.348] 
[17:03:01.348] getGlobalsAndPackages() ... DONE
[17:03:01.348] run() for ‘Future’ ...
[17:03:01.348] - state: ‘created’
[17:03:01.348] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:01.359] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:01.359] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:01.359]   - Field: ‘node’
[17:03:01.359]   - Field: ‘label’
[17:03:01.359]   - Field: ‘local’
[17:03:01.359]   - Field: ‘owner’
[17:03:01.359]   - Field: ‘envir’
[17:03:01.359]   - Field: ‘workers’
[17:03:01.359]   - Field: ‘packages’
[17:03:01.360]   - Field: ‘gc’
[17:03:01.360]   - Field: ‘conditions’
[17:03:01.360]   - Field: ‘persistent’
[17:03:01.360]   - Field: ‘expr’
[17:03:01.360]   - Field: ‘uuid’
[17:03:01.360]   - Field: ‘seed’
[17:03:01.360]   - Field: ‘version’
[17:03:01.360]   - Field: ‘result’
[17:03:01.360]   - Field: ‘asynchronous’
[17:03:01.360]   - Field: ‘calls’
[17:03:01.360]   - Field: ‘globals’
[17:03:01.361]   - Field: ‘stdout’
[17:03:01.361]   - Field: ‘earlySignal’
[17:03:01.361]   - Field: ‘lazy’
[17:03:01.361]   - Field: ‘state’
[17:03:01.361] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:01.361] - Launch lazy future ...
[17:03:01.361] Packages needed by the future expression (n = 0): <none>
[17:03:01.361] Packages needed by future strategies (n = 0): <none>
[17:03:01.362] {
[17:03:01.362]     {
[17:03:01.362]         {
[17:03:01.362]             ...future.startTime <- base::Sys.time()
[17:03:01.362]             {
[17:03:01.362]                 {
[17:03:01.362]                   {
[17:03:01.362]                     {
[17:03:01.362]                       base::local({
[17:03:01.362]                         has_future <- base::requireNamespace("future", 
[17:03:01.362]                           quietly = TRUE)
[17:03:01.362]                         if (has_future) {
[17:03:01.362]                           ns <- base::getNamespace("future")
[17:03:01.362]                           version <- ns[[".package"]][["version"]]
[17:03:01.362]                           if (is.null(version)) 
[17:03:01.362]                             version <- utils::packageVersion("future")
[17:03:01.362]                         }
[17:03:01.362]                         else {
[17:03:01.362]                           version <- NULL
[17:03:01.362]                         }
[17:03:01.362]                         if (!has_future || version < "1.8.0") {
[17:03:01.362]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:01.362]                             "", base::R.version$version.string), 
[17:03:01.362]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:01.362]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:01.362]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:01.362]                               "release", "version")], collapse = " "), 
[17:03:01.362]                             hostname = base::Sys.info()[["nodename"]])
[17:03:01.362]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:01.362]                             info)
[17:03:01.362]                           info <- base::paste(info, collapse = "; ")
[17:03:01.362]                           if (!has_future) {
[17:03:01.362]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:01.362]                               info)
[17:03:01.362]                           }
[17:03:01.362]                           else {
[17:03:01.362]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:01.362]                               info, version)
[17:03:01.362]                           }
[17:03:01.362]                           base::stop(msg)
[17:03:01.362]                         }
[17:03:01.362]                       })
[17:03:01.362]                     }
[17:03:01.362]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:01.362]                     base::options(mc.cores = 1L)
[17:03:01.362]                   }
[17:03:01.362]                   ...future.strategy.old <- future::plan("list")
[17:03:01.362]                   options(future.plan = NULL)
[17:03:01.362]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.362]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:01.362]                 }
[17:03:01.362]                 ...future.workdir <- getwd()
[17:03:01.362]             }
[17:03:01.362]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:01.362]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:01.362]         }
[17:03:01.362]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:01.362]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:01.362]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:01.362]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:01.362]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:01.362]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:01.362]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:01.362]             base::names(...future.oldOptions))
[17:03:01.362]     }
[17:03:01.362]     if (FALSE) {
[17:03:01.362]     }
[17:03:01.362]     else {
[17:03:01.362]         if (TRUE) {
[17:03:01.362]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:01.362]                 open = "w")
[17:03:01.362]         }
[17:03:01.362]         else {
[17:03:01.362]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:01.362]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:01.362]         }
[17:03:01.362]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:01.362]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:01.362]             base::sink(type = "output", split = FALSE)
[17:03:01.362]             base::close(...future.stdout)
[17:03:01.362]         }, add = TRUE)
[17:03:01.362]     }
[17:03:01.362]     ...future.frame <- base::sys.nframe()
[17:03:01.362]     ...future.conditions <- base::list()
[17:03:01.362]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:01.362]     if (FALSE) {
[17:03:01.362]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:01.362]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:01.362]     }
[17:03:01.362]     ...future.result <- base::tryCatch({
[17:03:01.362]         base::withCallingHandlers({
[17:03:01.362]             ...future.value <- base::withVisible(base::local({
[17:03:01.362]                 ...future.makeSendCondition <- base::local({
[17:03:01.362]                   sendCondition <- NULL
[17:03:01.362]                   function(frame = 1L) {
[17:03:01.362]                     if (is.function(sendCondition)) 
[17:03:01.362]                       return(sendCondition)
[17:03:01.362]                     ns <- getNamespace("parallel")
[17:03:01.362]                     if (exists("sendData", mode = "function", 
[17:03:01.362]                       envir = ns)) {
[17:03:01.362]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:01.362]                         envir = ns)
[17:03:01.362]                       envir <- sys.frame(frame)
[17:03:01.362]                       master <- NULL
[17:03:01.362]                       while (!identical(envir, .GlobalEnv) && 
[17:03:01.362]                         !identical(envir, emptyenv())) {
[17:03:01.362]                         if (exists("master", mode = "list", envir = envir, 
[17:03:01.362]                           inherits = FALSE)) {
[17:03:01.362]                           master <- get("master", mode = "list", 
[17:03:01.362]                             envir = envir, inherits = FALSE)
[17:03:01.362]                           if (inherits(master, c("SOCKnode", 
[17:03:01.362]                             "SOCK0node"))) {
[17:03:01.362]                             sendCondition <<- function(cond) {
[17:03:01.362]                               data <- list(type = "VALUE", value = cond, 
[17:03:01.362]                                 success = TRUE)
[17:03:01.362]                               parallel_sendData(master, data)
[17:03:01.362]                             }
[17:03:01.362]                             return(sendCondition)
[17:03:01.362]                           }
[17:03:01.362]                         }
[17:03:01.362]                         frame <- frame + 1L
[17:03:01.362]                         envir <- sys.frame(frame)
[17:03:01.362]                       }
[17:03:01.362]                     }
[17:03:01.362]                     sendCondition <<- function(cond) NULL
[17:03:01.362]                   }
[17:03:01.362]                 })
[17:03:01.362]                 withCallingHandlers({
[17:03:01.362]                   {
[17:03:01.362]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[17:03:01.362]                     "not-owner"
[17:03:01.362]                   }
[17:03:01.362]                 }, immediateCondition = function(cond) {
[17:03:01.362]                   sendCondition <- ...future.makeSendCondition()
[17:03:01.362]                   sendCondition(cond)
[17:03:01.362]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.362]                   {
[17:03:01.362]                     inherits <- base::inherits
[17:03:01.362]                     invokeRestart <- base::invokeRestart
[17:03:01.362]                     is.null <- base::is.null
[17:03:01.362]                     muffled <- FALSE
[17:03:01.362]                     if (inherits(cond, "message")) {
[17:03:01.362]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:01.362]                       if (muffled) 
[17:03:01.362]                         invokeRestart("muffleMessage")
[17:03:01.362]                     }
[17:03:01.362]                     else if (inherits(cond, "warning")) {
[17:03:01.362]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:01.362]                       if (muffled) 
[17:03:01.362]                         invokeRestart("muffleWarning")
[17:03:01.362]                     }
[17:03:01.362]                     else if (inherits(cond, "condition")) {
[17:03:01.362]                       if (!is.null(pattern)) {
[17:03:01.362]                         computeRestarts <- base::computeRestarts
[17:03:01.362]                         grepl <- base::grepl
[17:03:01.362]                         restarts <- computeRestarts(cond)
[17:03:01.362]                         for (restart in restarts) {
[17:03:01.362]                           name <- restart$name
[17:03:01.362]                           if (is.null(name)) 
[17:03:01.362]                             next
[17:03:01.362]                           if (!grepl(pattern, name)) 
[17:03:01.362]                             next
[17:03:01.362]                           invokeRestart(restart)
[17:03:01.362]                           muffled <- TRUE
[17:03:01.362]                           break
[17:03:01.362]                         }
[17:03:01.362]                       }
[17:03:01.362]                     }
[17:03:01.362]                     invisible(muffled)
[17:03:01.362]                   }
[17:03:01.362]                   muffleCondition(cond)
[17:03:01.362]                 })
[17:03:01.362]             }))
[17:03:01.362]             future::FutureResult(value = ...future.value$value, 
[17:03:01.362]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.362]                   ...future.rng), globalenv = if (FALSE) 
[17:03:01.362]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:01.362]                     ...future.globalenv.names))
[17:03:01.362]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:01.362]         }, condition = base::local({
[17:03:01.362]             c <- base::c
[17:03:01.362]             inherits <- base::inherits
[17:03:01.362]             invokeRestart <- base::invokeRestart
[17:03:01.362]             length <- base::length
[17:03:01.362]             list <- base::list
[17:03:01.362]             seq.int <- base::seq.int
[17:03:01.362]             signalCondition <- base::signalCondition
[17:03:01.362]             sys.calls <- base::sys.calls
[17:03:01.362]             `[[` <- base::`[[`
[17:03:01.362]             `+` <- base::`+`
[17:03:01.362]             `<<-` <- base::`<<-`
[17:03:01.362]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:01.362]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:01.362]                   3L)]
[17:03:01.362]             }
[17:03:01.362]             function(cond) {
[17:03:01.362]                 is_error <- inherits(cond, "error")
[17:03:01.362]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:01.362]                   NULL)
[17:03:01.362]                 if (is_error) {
[17:03:01.362]                   sessionInformation <- function() {
[17:03:01.362]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:01.362]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:01.362]                       search = base::search(), system = base::Sys.info())
[17:03:01.362]                   }
[17:03:01.362]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.362]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:01.362]                     cond$call), session = sessionInformation(), 
[17:03:01.362]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:01.362]                   signalCondition(cond)
[17:03:01.362]                 }
[17:03:01.362]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:01.362]                 "immediateCondition"))) {
[17:03:01.362]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:01.362]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.362]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:01.362]                   if (TRUE && !signal) {
[17:03:01.362]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.362]                     {
[17:03:01.362]                       inherits <- base::inherits
[17:03:01.362]                       invokeRestart <- base::invokeRestart
[17:03:01.362]                       is.null <- base::is.null
[17:03:01.362]                       muffled <- FALSE
[17:03:01.362]                       if (inherits(cond, "message")) {
[17:03:01.362]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.362]                         if (muffled) 
[17:03:01.362]                           invokeRestart("muffleMessage")
[17:03:01.362]                       }
[17:03:01.362]                       else if (inherits(cond, "warning")) {
[17:03:01.362]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.362]                         if (muffled) 
[17:03:01.362]                           invokeRestart("muffleWarning")
[17:03:01.362]                       }
[17:03:01.362]                       else if (inherits(cond, "condition")) {
[17:03:01.362]                         if (!is.null(pattern)) {
[17:03:01.362]                           computeRestarts <- base::computeRestarts
[17:03:01.362]                           grepl <- base::grepl
[17:03:01.362]                           restarts <- computeRestarts(cond)
[17:03:01.362]                           for (restart in restarts) {
[17:03:01.362]                             name <- restart$name
[17:03:01.362]                             if (is.null(name)) 
[17:03:01.362]                               next
[17:03:01.362]                             if (!grepl(pattern, name)) 
[17:03:01.362]                               next
[17:03:01.362]                             invokeRestart(restart)
[17:03:01.362]                             muffled <- TRUE
[17:03:01.362]                             break
[17:03:01.362]                           }
[17:03:01.362]                         }
[17:03:01.362]                       }
[17:03:01.362]                       invisible(muffled)
[17:03:01.362]                     }
[17:03:01.362]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.362]                   }
[17:03:01.362]                 }
[17:03:01.362]                 else {
[17:03:01.362]                   if (TRUE) {
[17:03:01.362]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.362]                     {
[17:03:01.362]                       inherits <- base::inherits
[17:03:01.362]                       invokeRestart <- base::invokeRestart
[17:03:01.362]                       is.null <- base::is.null
[17:03:01.362]                       muffled <- FALSE
[17:03:01.362]                       if (inherits(cond, "message")) {
[17:03:01.362]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.362]                         if (muffled) 
[17:03:01.362]                           invokeRestart("muffleMessage")
[17:03:01.362]                       }
[17:03:01.362]                       else if (inherits(cond, "warning")) {
[17:03:01.362]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.362]                         if (muffled) 
[17:03:01.362]                           invokeRestart("muffleWarning")
[17:03:01.362]                       }
[17:03:01.362]                       else if (inherits(cond, "condition")) {
[17:03:01.362]                         if (!is.null(pattern)) {
[17:03:01.362]                           computeRestarts <- base::computeRestarts
[17:03:01.362]                           grepl <- base::grepl
[17:03:01.362]                           restarts <- computeRestarts(cond)
[17:03:01.362]                           for (restart in restarts) {
[17:03:01.362]                             name <- restart$name
[17:03:01.362]                             if (is.null(name)) 
[17:03:01.362]                               next
[17:03:01.362]                             if (!grepl(pattern, name)) 
[17:03:01.362]                               next
[17:03:01.362]                             invokeRestart(restart)
[17:03:01.362]                             muffled <- TRUE
[17:03:01.362]                             break
[17:03:01.362]                           }
[17:03:01.362]                         }
[17:03:01.362]                       }
[17:03:01.362]                       invisible(muffled)
[17:03:01.362]                     }
[17:03:01.362]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.362]                   }
[17:03:01.362]                 }
[17:03:01.362]             }
[17:03:01.362]         }))
[17:03:01.362]     }, error = function(ex) {
[17:03:01.362]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:01.362]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.362]                 ...future.rng), started = ...future.startTime, 
[17:03:01.362]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:01.362]             version = "1.8"), class = "FutureResult")
[17:03:01.362]     }, finally = {
[17:03:01.362]         if (!identical(...future.workdir, getwd())) 
[17:03:01.362]             setwd(...future.workdir)
[17:03:01.362]         {
[17:03:01.362]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:01.362]                 ...future.oldOptions$nwarnings <- NULL
[17:03:01.362]             }
[17:03:01.362]             base::options(...future.oldOptions)
[17:03:01.362]             if (.Platform$OS.type == "windows") {
[17:03:01.362]                 old_names <- names(...future.oldEnvVars)
[17:03:01.362]                 envs <- base::Sys.getenv()
[17:03:01.362]                 names <- names(envs)
[17:03:01.362]                 common <- intersect(names, old_names)
[17:03:01.362]                 added <- setdiff(names, old_names)
[17:03:01.362]                 removed <- setdiff(old_names, names)
[17:03:01.362]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:01.362]                   envs[common]]
[17:03:01.362]                 NAMES <- toupper(changed)
[17:03:01.362]                 args <- list()
[17:03:01.362]                 for (kk in seq_along(NAMES)) {
[17:03:01.362]                   name <- changed[[kk]]
[17:03:01.362]                   NAME <- NAMES[[kk]]
[17:03:01.362]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.362]                     next
[17:03:01.362]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.362]                 }
[17:03:01.362]                 NAMES <- toupper(added)
[17:03:01.362]                 for (kk in seq_along(NAMES)) {
[17:03:01.362]                   name <- added[[kk]]
[17:03:01.362]                   NAME <- NAMES[[kk]]
[17:03:01.362]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.362]                     next
[17:03:01.362]                   args[[name]] <- ""
[17:03:01.362]                 }
[17:03:01.362]                 NAMES <- toupper(removed)
[17:03:01.362]                 for (kk in seq_along(NAMES)) {
[17:03:01.362]                   name <- removed[[kk]]
[17:03:01.362]                   NAME <- NAMES[[kk]]
[17:03:01.362]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.362]                     next
[17:03:01.362]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.362]                 }
[17:03:01.362]                 if (length(args) > 0) 
[17:03:01.362]                   base::do.call(base::Sys.setenv, args = args)
[17:03:01.362]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:01.362]             }
[17:03:01.362]             else {
[17:03:01.362]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:01.362]             }
[17:03:01.362]             {
[17:03:01.362]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:01.362]                   0L) {
[17:03:01.362]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:01.362]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:01.362]                   base::options(opts)
[17:03:01.362]                 }
[17:03:01.362]                 {
[17:03:01.362]                   {
[17:03:01.362]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:01.362]                     NULL
[17:03:01.362]                   }
[17:03:01.362]                   options(future.plan = NULL)
[17:03:01.362]                   if (is.na(NA_character_)) 
[17:03:01.362]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.362]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:01.362]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:01.362]                     .init = FALSE)
[17:03:01.362]                 }
[17:03:01.362]             }
[17:03:01.362]         }
[17:03:01.362]     })
[17:03:01.362]     if (TRUE) {
[17:03:01.362]         base::sink(type = "output", split = FALSE)
[17:03:01.362]         if (TRUE) {
[17:03:01.362]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:01.362]         }
[17:03:01.362]         else {
[17:03:01.362]             ...future.result["stdout"] <- base::list(NULL)
[17:03:01.362]         }
[17:03:01.362]         base::close(...future.stdout)
[17:03:01.362]         ...future.stdout <- NULL
[17:03:01.362]     }
[17:03:01.362]     ...future.result$conditions <- ...future.conditions
[17:03:01.362]     ...future.result$finished <- base::Sys.time()
[17:03:01.362]     ...future.result
[17:03:01.362] }
[17:03:01.364] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[17:03:01.366] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[17:03:01.420] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[17:03:01.420] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[17:03:01.421] MultisessionFuture started
[17:03:01.421] - Launch lazy future ... done
[17:03:01.421] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[17:03:01.421] result() for ClusterFuture ...
[17:03:01.421] receiveMessageFromWorker() for ClusterFuture ...
[17:03:01.421] - Validating connection of MultisessionFuture
[17:03:01.465] - received message: FutureResult
[17:03:01.466] - Received FutureResult
[17:03:01.466] - Erased future from FutureRegistry
[17:03:01.466] result() for ClusterFuture ...
[17:03:01.466] - result already collected: FutureResult
[17:03:01.466] result() for ClusterFuture ... done
[17:03:01.466] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:01.466] result() for ClusterFuture ... done
[17:03:01.466] result() for ClusterFuture ...
[17:03:01.466] - result already collected: FutureResult
[17:03:01.466] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[17:03:01.467] getGlobalsAndPackages() ...
[17:03:01.467] Searching for globals...
[17:03:01.468] - globals found: [1] ‘{’
[17:03:01.468] Searching for globals ... DONE
[17:03:01.468] Resolving globals: FALSE
[17:03:01.468] 
[17:03:01.468] 
[17:03:01.468] getGlobalsAndPackages() ... DONE
[17:03:01.469] run() for ‘Future’ ...
[17:03:01.469] - state: ‘created’
[17:03:01.469] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:01.479] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:01.479] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:01.480]   - Field: ‘node’
[17:03:01.480]   - Field: ‘label’
[17:03:01.480]   - Field: ‘local’
[17:03:01.480]   - Field: ‘owner’
[17:03:01.480]   - Field: ‘envir’
[17:03:01.480]   - Field: ‘workers’
[17:03:01.480]   - Field: ‘packages’
[17:03:01.480]   - Field: ‘gc’
[17:03:01.480]   - Field: ‘conditions’
[17:03:01.480]   - Field: ‘persistent’
[17:03:01.480]   - Field: ‘expr’
[17:03:01.481]   - Field: ‘uuid’
[17:03:01.481]   - Field: ‘seed’
[17:03:01.481]   - Field: ‘version’
[17:03:01.481]   - Field: ‘result’
[17:03:01.481]   - Field: ‘asynchronous’
[17:03:01.481]   - Field: ‘calls’
[17:03:01.481]   - Field: ‘globals’
[17:03:01.481]   - Field: ‘stdout’
[17:03:01.481]   - Field: ‘earlySignal’
[17:03:01.481]   - Field: ‘lazy’
[17:03:01.481]   - Field: ‘state’
[17:03:01.482] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:01.482] - Launch lazy future ...
[17:03:01.482] Packages needed by the future expression (n = 0): <none>
[17:03:01.482] Packages needed by future strategies (n = 0): <none>
[17:03:01.482] {
[17:03:01.482]     {
[17:03:01.482]         {
[17:03:01.482]             ...future.startTime <- base::Sys.time()
[17:03:01.482]             {
[17:03:01.482]                 {
[17:03:01.482]                   {
[17:03:01.482]                     {
[17:03:01.482]                       base::local({
[17:03:01.482]                         has_future <- base::requireNamespace("future", 
[17:03:01.482]                           quietly = TRUE)
[17:03:01.482]                         if (has_future) {
[17:03:01.482]                           ns <- base::getNamespace("future")
[17:03:01.482]                           version <- ns[[".package"]][["version"]]
[17:03:01.482]                           if (is.null(version)) 
[17:03:01.482]                             version <- utils::packageVersion("future")
[17:03:01.482]                         }
[17:03:01.482]                         else {
[17:03:01.482]                           version <- NULL
[17:03:01.482]                         }
[17:03:01.482]                         if (!has_future || version < "1.8.0") {
[17:03:01.482]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:01.482]                             "", base::R.version$version.string), 
[17:03:01.482]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:01.482]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:01.482]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:01.482]                               "release", "version")], collapse = " "), 
[17:03:01.482]                             hostname = base::Sys.info()[["nodename"]])
[17:03:01.482]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:01.482]                             info)
[17:03:01.482]                           info <- base::paste(info, collapse = "; ")
[17:03:01.482]                           if (!has_future) {
[17:03:01.482]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:01.482]                               info)
[17:03:01.482]                           }
[17:03:01.482]                           else {
[17:03:01.482]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:01.482]                               info, version)
[17:03:01.482]                           }
[17:03:01.482]                           base::stop(msg)
[17:03:01.482]                         }
[17:03:01.482]                       })
[17:03:01.482]                     }
[17:03:01.482]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:01.482]                     base::options(mc.cores = 1L)
[17:03:01.482]                   }
[17:03:01.482]                   ...future.strategy.old <- future::plan("list")
[17:03:01.482]                   options(future.plan = NULL)
[17:03:01.482]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.482]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:01.482]                 }
[17:03:01.482]                 ...future.workdir <- getwd()
[17:03:01.482]             }
[17:03:01.482]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:01.482]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:01.482]         }
[17:03:01.482]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:01.482]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:01.482]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:01.482]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:01.482]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:01.482]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:01.482]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:01.482]             base::names(...future.oldOptions))
[17:03:01.482]     }
[17:03:01.482]     if (FALSE) {
[17:03:01.482]     }
[17:03:01.482]     else {
[17:03:01.482]         if (TRUE) {
[17:03:01.482]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:01.482]                 open = "w")
[17:03:01.482]         }
[17:03:01.482]         else {
[17:03:01.482]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:01.482]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:01.482]         }
[17:03:01.482]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:01.482]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:01.482]             base::sink(type = "output", split = FALSE)
[17:03:01.482]             base::close(...future.stdout)
[17:03:01.482]         }, add = TRUE)
[17:03:01.482]     }
[17:03:01.482]     ...future.frame <- base::sys.nframe()
[17:03:01.482]     ...future.conditions <- base::list()
[17:03:01.482]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:01.482]     if (FALSE) {
[17:03:01.482]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:01.482]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:01.482]     }
[17:03:01.482]     ...future.result <- base::tryCatch({
[17:03:01.482]         base::withCallingHandlers({
[17:03:01.482]             ...future.value <- base::withVisible(base::local({
[17:03:01.482]                 ...future.makeSendCondition <- base::local({
[17:03:01.482]                   sendCondition <- NULL
[17:03:01.482]                   function(frame = 1L) {
[17:03:01.482]                     if (is.function(sendCondition)) 
[17:03:01.482]                       return(sendCondition)
[17:03:01.482]                     ns <- getNamespace("parallel")
[17:03:01.482]                     if (exists("sendData", mode = "function", 
[17:03:01.482]                       envir = ns)) {
[17:03:01.482]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:01.482]                         envir = ns)
[17:03:01.482]                       envir <- sys.frame(frame)
[17:03:01.482]                       master <- NULL
[17:03:01.482]                       while (!identical(envir, .GlobalEnv) && 
[17:03:01.482]                         !identical(envir, emptyenv())) {
[17:03:01.482]                         if (exists("master", mode = "list", envir = envir, 
[17:03:01.482]                           inherits = FALSE)) {
[17:03:01.482]                           master <- get("master", mode = "list", 
[17:03:01.482]                             envir = envir, inherits = FALSE)
[17:03:01.482]                           if (inherits(master, c("SOCKnode", 
[17:03:01.482]                             "SOCK0node"))) {
[17:03:01.482]                             sendCondition <<- function(cond) {
[17:03:01.482]                               data <- list(type = "VALUE", value = cond, 
[17:03:01.482]                                 success = TRUE)
[17:03:01.482]                               parallel_sendData(master, data)
[17:03:01.482]                             }
[17:03:01.482]                             return(sendCondition)
[17:03:01.482]                           }
[17:03:01.482]                         }
[17:03:01.482]                         frame <- frame + 1L
[17:03:01.482]                         envir <- sys.frame(frame)
[17:03:01.482]                       }
[17:03:01.482]                     }
[17:03:01.482]                     sendCondition <<- function(cond) NULL
[17:03:01.482]                   }
[17:03:01.482]                 })
[17:03:01.482]                 withCallingHandlers({
[17:03:01.482]                   {
[17:03:01.482]                     42L
[17:03:01.482]                   }
[17:03:01.482]                 }, immediateCondition = function(cond) {
[17:03:01.482]                   sendCondition <- ...future.makeSendCondition()
[17:03:01.482]                   sendCondition(cond)
[17:03:01.482]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.482]                   {
[17:03:01.482]                     inherits <- base::inherits
[17:03:01.482]                     invokeRestart <- base::invokeRestart
[17:03:01.482]                     is.null <- base::is.null
[17:03:01.482]                     muffled <- FALSE
[17:03:01.482]                     if (inherits(cond, "message")) {
[17:03:01.482]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:01.482]                       if (muffled) 
[17:03:01.482]                         invokeRestart("muffleMessage")
[17:03:01.482]                     }
[17:03:01.482]                     else if (inherits(cond, "warning")) {
[17:03:01.482]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:01.482]                       if (muffled) 
[17:03:01.482]                         invokeRestart("muffleWarning")
[17:03:01.482]                     }
[17:03:01.482]                     else if (inherits(cond, "condition")) {
[17:03:01.482]                       if (!is.null(pattern)) {
[17:03:01.482]                         computeRestarts <- base::computeRestarts
[17:03:01.482]                         grepl <- base::grepl
[17:03:01.482]                         restarts <- computeRestarts(cond)
[17:03:01.482]                         for (restart in restarts) {
[17:03:01.482]                           name <- restart$name
[17:03:01.482]                           if (is.null(name)) 
[17:03:01.482]                             next
[17:03:01.482]                           if (!grepl(pattern, name)) 
[17:03:01.482]                             next
[17:03:01.482]                           invokeRestart(restart)
[17:03:01.482]                           muffled <- TRUE
[17:03:01.482]                           break
[17:03:01.482]                         }
[17:03:01.482]                       }
[17:03:01.482]                     }
[17:03:01.482]                     invisible(muffled)
[17:03:01.482]                   }
[17:03:01.482]                   muffleCondition(cond)
[17:03:01.482]                 })
[17:03:01.482]             }))
[17:03:01.482]             future::FutureResult(value = ...future.value$value, 
[17:03:01.482]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.482]                   ...future.rng), globalenv = if (FALSE) 
[17:03:01.482]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:01.482]                     ...future.globalenv.names))
[17:03:01.482]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:01.482]         }, condition = base::local({
[17:03:01.482]             c <- base::c
[17:03:01.482]             inherits <- base::inherits
[17:03:01.482]             invokeRestart <- base::invokeRestart
[17:03:01.482]             length <- base::length
[17:03:01.482]             list <- base::list
[17:03:01.482]             seq.int <- base::seq.int
[17:03:01.482]             signalCondition <- base::signalCondition
[17:03:01.482]             sys.calls <- base::sys.calls
[17:03:01.482]             `[[` <- base::`[[`
[17:03:01.482]             `+` <- base::`+`
[17:03:01.482]             `<<-` <- base::`<<-`
[17:03:01.482]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:01.482]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:01.482]                   3L)]
[17:03:01.482]             }
[17:03:01.482]             function(cond) {
[17:03:01.482]                 is_error <- inherits(cond, "error")
[17:03:01.482]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:01.482]                   NULL)
[17:03:01.482]                 if (is_error) {
[17:03:01.482]                   sessionInformation <- function() {
[17:03:01.482]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:01.482]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:01.482]                       search = base::search(), system = base::Sys.info())
[17:03:01.482]                   }
[17:03:01.482]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.482]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:01.482]                     cond$call), session = sessionInformation(), 
[17:03:01.482]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:01.482]                   signalCondition(cond)
[17:03:01.482]                 }
[17:03:01.482]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:01.482]                 "immediateCondition"))) {
[17:03:01.482]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:01.482]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.482]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:01.482]                   if (TRUE && !signal) {
[17:03:01.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.482]                     {
[17:03:01.482]                       inherits <- base::inherits
[17:03:01.482]                       invokeRestart <- base::invokeRestart
[17:03:01.482]                       is.null <- base::is.null
[17:03:01.482]                       muffled <- FALSE
[17:03:01.482]                       if (inherits(cond, "message")) {
[17:03:01.482]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.482]                         if (muffled) 
[17:03:01.482]                           invokeRestart("muffleMessage")
[17:03:01.482]                       }
[17:03:01.482]                       else if (inherits(cond, "warning")) {
[17:03:01.482]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.482]                         if (muffled) 
[17:03:01.482]                           invokeRestart("muffleWarning")
[17:03:01.482]                       }
[17:03:01.482]                       else if (inherits(cond, "condition")) {
[17:03:01.482]                         if (!is.null(pattern)) {
[17:03:01.482]                           computeRestarts <- base::computeRestarts
[17:03:01.482]                           grepl <- base::grepl
[17:03:01.482]                           restarts <- computeRestarts(cond)
[17:03:01.482]                           for (restart in restarts) {
[17:03:01.482]                             name <- restart$name
[17:03:01.482]                             if (is.null(name)) 
[17:03:01.482]                               next
[17:03:01.482]                             if (!grepl(pattern, name)) 
[17:03:01.482]                               next
[17:03:01.482]                             invokeRestart(restart)
[17:03:01.482]                             muffled <- TRUE
[17:03:01.482]                             break
[17:03:01.482]                           }
[17:03:01.482]                         }
[17:03:01.482]                       }
[17:03:01.482]                       invisible(muffled)
[17:03:01.482]                     }
[17:03:01.482]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.482]                   }
[17:03:01.482]                 }
[17:03:01.482]                 else {
[17:03:01.482]                   if (TRUE) {
[17:03:01.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.482]                     {
[17:03:01.482]                       inherits <- base::inherits
[17:03:01.482]                       invokeRestart <- base::invokeRestart
[17:03:01.482]                       is.null <- base::is.null
[17:03:01.482]                       muffled <- FALSE
[17:03:01.482]                       if (inherits(cond, "message")) {
[17:03:01.482]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.482]                         if (muffled) 
[17:03:01.482]                           invokeRestart("muffleMessage")
[17:03:01.482]                       }
[17:03:01.482]                       else if (inherits(cond, "warning")) {
[17:03:01.482]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.482]                         if (muffled) 
[17:03:01.482]                           invokeRestart("muffleWarning")
[17:03:01.482]                       }
[17:03:01.482]                       else if (inherits(cond, "condition")) {
[17:03:01.482]                         if (!is.null(pattern)) {
[17:03:01.482]                           computeRestarts <- base::computeRestarts
[17:03:01.482]                           grepl <- base::grepl
[17:03:01.482]                           restarts <- computeRestarts(cond)
[17:03:01.482]                           for (restart in restarts) {
[17:03:01.482]                             name <- restart$name
[17:03:01.482]                             if (is.null(name)) 
[17:03:01.482]                               next
[17:03:01.482]                             if (!grepl(pattern, name)) 
[17:03:01.482]                               next
[17:03:01.482]                             invokeRestart(restart)
[17:03:01.482]                             muffled <- TRUE
[17:03:01.482]                             break
[17:03:01.482]                           }
[17:03:01.482]                         }
[17:03:01.482]                       }
[17:03:01.482]                       invisible(muffled)
[17:03:01.482]                     }
[17:03:01.482]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.482]                   }
[17:03:01.482]                 }
[17:03:01.482]             }
[17:03:01.482]         }))
[17:03:01.482]     }, error = function(ex) {
[17:03:01.482]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:01.482]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.482]                 ...future.rng), started = ...future.startTime, 
[17:03:01.482]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:01.482]             version = "1.8"), class = "FutureResult")
[17:03:01.482]     }, finally = {
[17:03:01.482]         if (!identical(...future.workdir, getwd())) 
[17:03:01.482]             setwd(...future.workdir)
[17:03:01.482]         {
[17:03:01.482]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:01.482]                 ...future.oldOptions$nwarnings <- NULL
[17:03:01.482]             }
[17:03:01.482]             base::options(...future.oldOptions)
[17:03:01.482]             if (.Platform$OS.type == "windows") {
[17:03:01.482]                 old_names <- names(...future.oldEnvVars)
[17:03:01.482]                 envs <- base::Sys.getenv()
[17:03:01.482]                 names <- names(envs)
[17:03:01.482]                 common <- intersect(names, old_names)
[17:03:01.482]                 added <- setdiff(names, old_names)
[17:03:01.482]                 removed <- setdiff(old_names, names)
[17:03:01.482]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:01.482]                   envs[common]]
[17:03:01.482]                 NAMES <- toupper(changed)
[17:03:01.482]                 args <- list()
[17:03:01.482]                 for (kk in seq_along(NAMES)) {
[17:03:01.482]                   name <- changed[[kk]]
[17:03:01.482]                   NAME <- NAMES[[kk]]
[17:03:01.482]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.482]                     next
[17:03:01.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.482]                 }
[17:03:01.482]                 NAMES <- toupper(added)
[17:03:01.482]                 for (kk in seq_along(NAMES)) {
[17:03:01.482]                   name <- added[[kk]]
[17:03:01.482]                   NAME <- NAMES[[kk]]
[17:03:01.482]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.482]                     next
[17:03:01.482]                   args[[name]] <- ""
[17:03:01.482]                 }
[17:03:01.482]                 NAMES <- toupper(removed)
[17:03:01.482]                 for (kk in seq_along(NAMES)) {
[17:03:01.482]                   name <- removed[[kk]]
[17:03:01.482]                   NAME <- NAMES[[kk]]
[17:03:01.482]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.482]                     next
[17:03:01.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.482]                 }
[17:03:01.482]                 if (length(args) > 0) 
[17:03:01.482]                   base::do.call(base::Sys.setenv, args = args)
[17:03:01.482]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:01.482]             }
[17:03:01.482]             else {
[17:03:01.482]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:01.482]             }
[17:03:01.482]             {
[17:03:01.482]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:01.482]                   0L) {
[17:03:01.482]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:01.482]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:01.482]                   base::options(opts)
[17:03:01.482]                 }
[17:03:01.482]                 {
[17:03:01.482]                   {
[17:03:01.482]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:01.482]                     NULL
[17:03:01.482]                   }
[17:03:01.482]                   options(future.plan = NULL)
[17:03:01.482]                   if (is.na(NA_character_)) 
[17:03:01.482]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.482]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:01.482]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:01.482]                     .init = FALSE)
[17:03:01.482]                 }
[17:03:01.482]             }
[17:03:01.482]         }
[17:03:01.482]     })
[17:03:01.482]     if (TRUE) {
[17:03:01.482]         base::sink(type = "output", split = FALSE)
[17:03:01.482]         if (TRUE) {
[17:03:01.482]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:01.482]         }
[17:03:01.482]         else {
[17:03:01.482]             ...future.result["stdout"] <- base::list(NULL)
[17:03:01.482]         }
[17:03:01.482]         base::close(...future.stdout)
[17:03:01.482]         ...future.stdout <- NULL
[17:03:01.482]     }
[17:03:01.482]     ...future.result$conditions <- ...future.conditions
[17:03:01.482]     ...future.result$finished <- base::Sys.time()
[17:03:01.482]     ...future.result
[17:03:01.482] }
[17:03:01.485] MultisessionFuture started
[17:03:01.486] - Launch lazy future ... done
[17:03:01.486] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[17:03:01.486] getGlobalsAndPackages() ...
[17:03:01.486] Searching for globals...
[17:03:01.487] - globals found: [3] ‘{’, ‘value’, ‘f1’
[17:03:01.487] Searching for globals ... DONE
[17:03:01.487] Resolving globals: FALSE
[17:03:01.489] The total size of the 1 globals is 1.56 MiB (1636072 bytes)
[17:03:01.490] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[17:03:01.490] - globals: [1] ‘f1’
[17:03:01.490] - packages: [1] ‘future’
[17:03:01.490] getGlobalsAndPackages() ... DONE
[17:03:01.490] run() for ‘Future’ ...
[17:03:01.490] - state: ‘created’
[17:03:01.490] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:03:01.501] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:03:01.501] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:03:01.502]   - Field: ‘node’
[17:03:01.502]   - Field: ‘label’
[17:03:01.502]   - Field: ‘local’
[17:03:01.502]   - Field: ‘owner’
[17:03:01.502]   - Field: ‘envir’
[17:03:01.502]   - Field: ‘workers’
[17:03:01.502]   - Field: ‘packages’
[17:03:01.502]   - Field: ‘gc’
[17:03:01.502]   - Field: ‘conditions’
[17:03:01.502]   - Field: ‘persistent’
[17:03:01.502]   - Field: ‘expr’
[17:03:01.503]   - Field: ‘uuid’
[17:03:01.503]   - Field: ‘seed’
[17:03:01.503]   - Field: ‘version’
[17:03:01.503]   - Field: ‘result’
[17:03:01.503]   - Field: ‘asynchronous’
[17:03:01.503]   - Field: ‘calls’
[17:03:01.503]   - Field: ‘globals’
[17:03:01.503]   - Field: ‘stdout’
[17:03:01.503]   - Field: ‘earlySignal’
[17:03:01.503]   - Field: ‘lazy’
[17:03:01.503]   - Field: ‘state’
[17:03:01.504] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:03:01.504] - Launch lazy future ...
[17:03:01.504] Packages needed by the future expression (n = 1): ‘future’
[17:03:01.504] Packages needed by future strategies (n = 0): <none>
[17:03:01.505] {
[17:03:01.505]     {
[17:03:01.505]         {
[17:03:01.505]             ...future.startTime <- base::Sys.time()
[17:03:01.505]             {
[17:03:01.505]                 {
[17:03:01.505]                   {
[17:03:01.505]                     {
[17:03:01.505]                       {
[17:03:01.505]                         base::local({
[17:03:01.505]                           has_future <- base::requireNamespace("future", 
[17:03:01.505]                             quietly = TRUE)
[17:03:01.505]                           if (has_future) {
[17:03:01.505]                             ns <- base::getNamespace("future")
[17:03:01.505]                             version <- ns[[".package"]][["version"]]
[17:03:01.505]                             if (is.null(version)) 
[17:03:01.505]                               version <- utils::packageVersion("future")
[17:03:01.505]                           }
[17:03:01.505]                           else {
[17:03:01.505]                             version <- NULL
[17:03:01.505]                           }
[17:03:01.505]                           if (!has_future || version < "1.8.0") {
[17:03:01.505]                             info <- base::c(r_version = base::gsub("R version ", 
[17:03:01.505]                               "", base::R.version$version.string), 
[17:03:01.505]                               platform = base::sprintf("%s (%s-bit)", 
[17:03:01.505]                                 base::R.version$platform, 8 * 
[17:03:01.505]                                   base::.Machine$sizeof.pointer), 
[17:03:01.505]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:01.505]                                 "release", "version")], collapse = " "), 
[17:03:01.505]                               hostname = base::Sys.info()[["nodename"]])
[17:03:01.505]                             info <- base::sprintf("%s: %s", base::names(info), 
[17:03:01.505]                               info)
[17:03:01.505]                             info <- base::paste(info, collapse = "; ")
[17:03:01.505]                             if (!has_future) {
[17:03:01.505]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:01.505]                                 info)
[17:03:01.505]                             }
[17:03:01.505]                             else {
[17:03:01.505]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:01.505]                                 info, version)
[17:03:01.505]                             }
[17:03:01.505]                             base::stop(msg)
[17:03:01.505]                           }
[17:03:01.505]                         })
[17:03:01.505]                       }
[17:03:01.505]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:01.505]                       base::options(mc.cores = 1L)
[17:03:01.505]                     }
[17:03:01.505]                     base::local({
[17:03:01.505]                       for (pkg in "future") {
[17:03:01.505]                         base::loadNamespace(pkg)
[17:03:01.505]                         base::library(pkg, character.only = TRUE)
[17:03:01.505]                       }
[17:03:01.505]                     })
[17:03:01.505]                   }
[17:03:01.505]                   ...future.strategy.old <- future::plan("list")
[17:03:01.505]                   options(future.plan = NULL)
[17:03:01.505]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.505]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:01.505]                 }
[17:03:01.505]                 ...future.workdir <- getwd()
[17:03:01.505]             }
[17:03:01.505]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:01.505]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:01.505]         }
[17:03:01.505]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:01.505]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:01.505]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:01.505]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:01.505]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:01.505]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:01.505]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:01.505]             base::names(...future.oldOptions))
[17:03:01.505]     }
[17:03:01.505]     if (FALSE) {
[17:03:01.505]     }
[17:03:01.505]     else {
[17:03:01.505]         if (TRUE) {
[17:03:01.505]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:01.505]                 open = "w")
[17:03:01.505]         }
[17:03:01.505]         else {
[17:03:01.505]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:01.505]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:01.505]         }
[17:03:01.505]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:01.505]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:01.505]             base::sink(type = "output", split = FALSE)
[17:03:01.505]             base::close(...future.stdout)
[17:03:01.505]         }, add = TRUE)
[17:03:01.505]     }
[17:03:01.505]     ...future.frame <- base::sys.nframe()
[17:03:01.505]     ...future.conditions <- base::list()
[17:03:01.505]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:01.505]     if (FALSE) {
[17:03:01.505]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:01.505]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:01.505]     }
[17:03:01.505]     ...future.result <- base::tryCatch({
[17:03:01.505]         base::withCallingHandlers({
[17:03:01.505]             ...future.value <- base::withVisible(base::local({
[17:03:01.505]                 ...future.makeSendCondition <- base::local({
[17:03:01.505]                   sendCondition <- NULL
[17:03:01.505]                   function(frame = 1L) {
[17:03:01.505]                     if (is.function(sendCondition)) 
[17:03:01.505]                       return(sendCondition)
[17:03:01.505]                     ns <- getNamespace("parallel")
[17:03:01.505]                     if (exists("sendData", mode = "function", 
[17:03:01.505]                       envir = ns)) {
[17:03:01.505]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:01.505]                         envir = ns)
[17:03:01.505]                       envir <- sys.frame(frame)
[17:03:01.505]                       master <- NULL
[17:03:01.505]                       while (!identical(envir, .GlobalEnv) && 
[17:03:01.505]                         !identical(envir, emptyenv())) {
[17:03:01.505]                         if (exists("master", mode = "list", envir = envir, 
[17:03:01.505]                           inherits = FALSE)) {
[17:03:01.505]                           master <- get("master", mode = "list", 
[17:03:01.505]                             envir = envir, inherits = FALSE)
[17:03:01.505]                           if (inherits(master, c("SOCKnode", 
[17:03:01.505]                             "SOCK0node"))) {
[17:03:01.505]                             sendCondition <<- function(cond) {
[17:03:01.505]                               data <- list(type = "VALUE", value = cond, 
[17:03:01.505]                                 success = TRUE)
[17:03:01.505]                               parallel_sendData(master, data)
[17:03:01.505]                             }
[17:03:01.505]                             return(sendCondition)
[17:03:01.505]                           }
[17:03:01.505]                         }
[17:03:01.505]                         frame <- frame + 1L
[17:03:01.505]                         envir <- sys.frame(frame)
[17:03:01.505]                       }
[17:03:01.505]                     }
[17:03:01.505]                     sendCondition <<- function(cond) NULL
[17:03:01.505]                   }
[17:03:01.505]                 })
[17:03:01.505]                 withCallingHandlers({
[17:03:01.505]                   {
[17:03:01.505]                     value(f1)
[17:03:01.505]                   }
[17:03:01.505]                 }, immediateCondition = function(cond) {
[17:03:01.505]                   sendCondition <- ...future.makeSendCondition()
[17:03:01.505]                   sendCondition(cond)
[17:03:01.505]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.505]                   {
[17:03:01.505]                     inherits <- base::inherits
[17:03:01.505]                     invokeRestart <- base::invokeRestart
[17:03:01.505]                     is.null <- base::is.null
[17:03:01.505]                     muffled <- FALSE
[17:03:01.505]                     if (inherits(cond, "message")) {
[17:03:01.505]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:01.505]                       if (muffled) 
[17:03:01.505]                         invokeRestart("muffleMessage")
[17:03:01.505]                     }
[17:03:01.505]                     else if (inherits(cond, "warning")) {
[17:03:01.505]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:01.505]                       if (muffled) 
[17:03:01.505]                         invokeRestart("muffleWarning")
[17:03:01.505]                     }
[17:03:01.505]                     else if (inherits(cond, "condition")) {
[17:03:01.505]                       if (!is.null(pattern)) {
[17:03:01.505]                         computeRestarts <- base::computeRestarts
[17:03:01.505]                         grepl <- base::grepl
[17:03:01.505]                         restarts <- computeRestarts(cond)
[17:03:01.505]                         for (restart in restarts) {
[17:03:01.505]                           name <- restart$name
[17:03:01.505]                           if (is.null(name)) 
[17:03:01.505]                             next
[17:03:01.505]                           if (!grepl(pattern, name)) 
[17:03:01.505]                             next
[17:03:01.505]                           invokeRestart(restart)
[17:03:01.505]                           muffled <- TRUE
[17:03:01.505]                           break
[17:03:01.505]                         }
[17:03:01.505]                       }
[17:03:01.505]                     }
[17:03:01.505]                     invisible(muffled)
[17:03:01.505]                   }
[17:03:01.505]                   muffleCondition(cond)
[17:03:01.505]                 })
[17:03:01.505]             }))
[17:03:01.505]             future::FutureResult(value = ...future.value$value, 
[17:03:01.505]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.505]                   ...future.rng), globalenv = if (FALSE) 
[17:03:01.505]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:01.505]                     ...future.globalenv.names))
[17:03:01.505]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:01.505]         }, condition = base::local({
[17:03:01.505]             c <- base::c
[17:03:01.505]             inherits <- base::inherits
[17:03:01.505]             invokeRestart <- base::invokeRestart
[17:03:01.505]             length <- base::length
[17:03:01.505]             list <- base::list
[17:03:01.505]             seq.int <- base::seq.int
[17:03:01.505]             signalCondition <- base::signalCondition
[17:03:01.505]             sys.calls <- base::sys.calls
[17:03:01.505]             `[[` <- base::`[[`
[17:03:01.505]             `+` <- base::`+`
[17:03:01.505]             `<<-` <- base::`<<-`
[17:03:01.505]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:01.505]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:01.505]                   3L)]
[17:03:01.505]             }
[17:03:01.505]             function(cond) {
[17:03:01.505]                 is_error <- inherits(cond, "error")
[17:03:01.505]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:01.505]                   NULL)
[17:03:01.505]                 if (is_error) {
[17:03:01.505]                   sessionInformation <- function() {
[17:03:01.505]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:01.505]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:01.505]                       search = base::search(), system = base::Sys.info())
[17:03:01.505]                   }
[17:03:01.505]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.505]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:01.505]                     cond$call), session = sessionInformation(), 
[17:03:01.505]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:01.505]                   signalCondition(cond)
[17:03:01.505]                 }
[17:03:01.505]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:01.505]                 "immediateCondition"))) {
[17:03:01.505]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:01.505]                   ...future.conditions[[length(...future.conditions) + 
[17:03:01.505]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:01.505]                   if (TRUE && !signal) {
[17:03:01.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.505]                     {
[17:03:01.505]                       inherits <- base::inherits
[17:03:01.505]                       invokeRestart <- base::invokeRestart
[17:03:01.505]                       is.null <- base::is.null
[17:03:01.505]                       muffled <- FALSE
[17:03:01.505]                       if (inherits(cond, "message")) {
[17:03:01.505]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.505]                         if (muffled) 
[17:03:01.505]                           invokeRestart("muffleMessage")
[17:03:01.505]                       }
[17:03:01.505]                       else if (inherits(cond, "warning")) {
[17:03:01.505]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.505]                         if (muffled) 
[17:03:01.505]                           invokeRestart("muffleWarning")
[17:03:01.505]                       }
[17:03:01.505]                       else if (inherits(cond, "condition")) {
[17:03:01.505]                         if (!is.null(pattern)) {
[17:03:01.505]                           computeRestarts <- base::computeRestarts
[17:03:01.505]                           grepl <- base::grepl
[17:03:01.505]                           restarts <- computeRestarts(cond)
[17:03:01.505]                           for (restart in restarts) {
[17:03:01.505]                             name <- restart$name
[17:03:01.505]                             if (is.null(name)) 
[17:03:01.505]                               next
[17:03:01.505]                             if (!grepl(pattern, name)) 
[17:03:01.505]                               next
[17:03:01.505]                             invokeRestart(restart)
[17:03:01.505]                             muffled <- TRUE
[17:03:01.505]                             break
[17:03:01.505]                           }
[17:03:01.505]                         }
[17:03:01.505]                       }
[17:03:01.505]                       invisible(muffled)
[17:03:01.505]                     }
[17:03:01.505]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.505]                   }
[17:03:01.505]                 }
[17:03:01.505]                 else {
[17:03:01.505]                   if (TRUE) {
[17:03:01.505]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:01.505]                     {
[17:03:01.505]                       inherits <- base::inherits
[17:03:01.505]                       invokeRestart <- base::invokeRestart
[17:03:01.505]                       is.null <- base::is.null
[17:03:01.505]                       muffled <- FALSE
[17:03:01.505]                       if (inherits(cond, "message")) {
[17:03:01.505]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:01.505]                         if (muffled) 
[17:03:01.505]                           invokeRestart("muffleMessage")
[17:03:01.505]                       }
[17:03:01.505]                       else if (inherits(cond, "warning")) {
[17:03:01.505]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:01.505]                         if (muffled) 
[17:03:01.505]                           invokeRestart("muffleWarning")
[17:03:01.505]                       }
[17:03:01.505]                       else if (inherits(cond, "condition")) {
[17:03:01.505]                         if (!is.null(pattern)) {
[17:03:01.505]                           computeRestarts <- base::computeRestarts
[17:03:01.505]                           grepl <- base::grepl
[17:03:01.505]                           restarts <- computeRestarts(cond)
[17:03:01.505]                           for (restart in restarts) {
[17:03:01.505]                             name <- restart$name
[17:03:01.505]                             if (is.null(name)) 
[17:03:01.505]                               next
[17:03:01.505]                             if (!grepl(pattern, name)) 
[17:03:01.505]                               next
[17:03:01.505]                             invokeRestart(restart)
[17:03:01.505]                             muffled <- TRUE
[17:03:01.505]                             break
[17:03:01.505]                           }
[17:03:01.505]                         }
[17:03:01.505]                       }
[17:03:01.505]                       invisible(muffled)
[17:03:01.505]                     }
[17:03:01.505]                     muffleCondition(cond, pattern = "^muffle")
[17:03:01.505]                   }
[17:03:01.505]                 }
[17:03:01.505]             }
[17:03:01.505]         }))
[17:03:01.505]     }, error = function(ex) {
[17:03:01.505]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:01.505]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:01.505]                 ...future.rng), started = ...future.startTime, 
[17:03:01.505]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:01.505]             version = "1.8"), class = "FutureResult")
[17:03:01.505]     }, finally = {
[17:03:01.505]         if (!identical(...future.workdir, getwd())) 
[17:03:01.505]             setwd(...future.workdir)
[17:03:01.505]         {
[17:03:01.505]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:01.505]                 ...future.oldOptions$nwarnings <- NULL
[17:03:01.505]             }
[17:03:01.505]             base::options(...future.oldOptions)
[17:03:01.505]             if (.Platform$OS.type == "windows") {
[17:03:01.505]                 old_names <- names(...future.oldEnvVars)
[17:03:01.505]                 envs <- base::Sys.getenv()
[17:03:01.505]                 names <- names(envs)
[17:03:01.505]                 common <- intersect(names, old_names)
[17:03:01.505]                 added <- setdiff(names, old_names)
[17:03:01.505]                 removed <- setdiff(old_names, names)
[17:03:01.505]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:01.505]                   envs[common]]
[17:03:01.505]                 NAMES <- toupper(changed)
[17:03:01.505]                 args <- list()
[17:03:01.505]                 for (kk in seq_along(NAMES)) {
[17:03:01.505]                   name <- changed[[kk]]
[17:03:01.505]                   NAME <- NAMES[[kk]]
[17:03:01.505]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.505]                     next
[17:03:01.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.505]                 }
[17:03:01.505]                 NAMES <- toupper(added)
[17:03:01.505]                 for (kk in seq_along(NAMES)) {
[17:03:01.505]                   name <- added[[kk]]
[17:03:01.505]                   NAME <- NAMES[[kk]]
[17:03:01.505]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.505]                     next
[17:03:01.505]                   args[[name]] <- ""
[17:03:01.505]                 }
[17:03:01.505]                 NAMES <- toupper(removed)
[17:03:01.505]                 for (kk in seq_along(NAMES)) {
[17:03:01.505]                   name <- removed[[kk]]
[17:03:01.505]                   NAME <- NAMES[[kk]]
[17:03:01.505]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:01.505]                     next
[17:03:01.505]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:01.505]                 }
[17:03:01.505]                 if (length(args) > 0) 
[17:03:01.505]                   base::do.call(base::Sys.setenv, args = args)
[17:03:01.505]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:01.505]             }
[17:03:01.505]             else {
[17:03:01.505]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:01.505]             }
[17:03:01.505]             {
[17:03:01.505]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:01.505]                   0L) {
[17:03:01.505]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:01.505]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:01.505]                   base::options(opts)
[17:03:01.505]                 }
[17:03:01.505]                 {
[17:03:01.505]                   {
[17:03:01.505]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:01.505]                     NULL
[17:03:01.505]                   }
[17:03:01.505]                   options(future.plan = NULL)
[17:03:01.505]                   if (is.na(NA_character_)) 
[17:03:01.505]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:01.505]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:01.505]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:01.505]                     .init = FALSE)
[17:03:01.505]                 }
[17:03:01.505]             }
[17:03:01.505]         }
[17:03:01.505]     })
[17:03:01.505]     if (TRUE) {
[17:03:01.505]         base::sink(type = "output", split = FALSE)
[17:03:01.505]         if (TRUE) {
[17:03:01.505]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:01.505]         }
[17:03:01.505]         else {
[17:03:01.505]             ...future.result["stdout"] <- base::list(NULL)
[17:03:01.505]         }
[17:03:01.505]         base::close(...future.stdout)
[17:03:01.505]         ...future.stdout <- NULL
[17:03:01.505]     }
[17:03:01.505]     ...future.result$conditions <- ...future.conditions
[17:03:01.505]     ...future.result$finished <- base::Sys.time()
[17:03:01.505]     ...future.result
[17:03:01.505] }
[17:03:01.556] Exporting 1 global objects (1.56 MiB) to cluster node #2 ...
[17:03:01.558] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ...
[17:03:01.569] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ... DONE
[17:03:01.569] Exporting 1 global objects (1.56 MiB) to cluster node #2 ... DONE
[17:03:01.570] MultisessionFuture started
[17:03:01.570] - Launch lazy future ... done
[17:03:01.570] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.56 MiB (MultisessionFuture ‘f1’ of 1.56 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e17f438e-79a9-1889-0a3a-b61f47c93c14
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[17:03:01.587] result() for ClusterFuture ...
[17:03:01.587] receiveMessageFromWorker() for ClusterFuture ...
[17:03:01.587] - Validating connection of MultisessionFuture
[17:03:01.664] - received message: FutureResult
[17:03:01.664] - Received FutureResult
[17:03:01.664] - Erased future from FutureRegistry
[17:03:01.664] result() for ClusterFuture ...
[17:03:01.664] - result already collected: FutureResult
[17:03:01.664] result() for ClusterFuture ... done
[17:03:01.665] signalConditions() ...
[17:03:01.665]  - include = ‘immediateCondition’
[17:03:01.665]  - exclude = 
[17:03:01.665]  - resignal = FALSE
[17:03:01.665]  - Number of conditions: 1
[17:03:01.665] signalConditions() ... done
[17:03:01.665] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:01.665] result() for ClusterFuture ... done
[17:03:01.665] result() for ClusterFuture ...
[17:03:01.665] - result already collected: FutureResult
[17:03:01.665] result() for ClusterFuture ... done
[17:03:01.666] signalConditions() ...
[17:03:01.666]  - include = ‘immediateCondition’
[17:03:01.666]  - exclude = 
[17:03:01.666]  - resignal = FALSE
[17:03:01.666]  - Number of conditions: 1
[17:03:01.666] signalConditions() ... done
[17:03:01.666] Future state: ‘finished’
[17:03:01.666] result() for ClusterFuture ...
[17:03:01.666] - result already collected: FutureResult
[17:03:01.666] result() for ClusterFuture ... done
[17:03:01.666] signalConditions() ...
[17:03:01.666]  - include = ‘condition’
[17:03:01.667]  - exclude = ‘immediateCondition’
[17:03:01.667]  - resignal = TRUE
[17:03:01.667]  - Number of conditions: 1
[17:03:01.667]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[17:03:01.667] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (e17f438e-79a9-1889-0a3a-b61f47c93c14; pid 45190 on 48b61fc2246e) that created it, not by any other R processes (b6b27acf-223f-5915-3d02-7ab291bc4eb4; pid 45244 on 48b61fc2246e): {; 42L; }>


Future UUID: ddb11657-7d26-424a-2dd8-48195ff87bd6


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e17f438e-79a9-1889-0a3a-b61f47c93c14
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[17:03:01.668] result() for ClusterFuture ...
[17:03:01.668] receiveMessageFromWorker() for ClusterFuture ...
[17:03:01.668] - Validating connection of MultisessionFuture
[17:03:01.668] - received message: FutureResult
[17:03:01.669] - Received FutureResult
[17:03:01.669] - Erased future from FutureRegistry
[17:03:01.669] result() for ClusterFuture ...
[17:03:01.669] - result already collected: FutureResult
[17:03:01.669] result() for ClusterFuture ... done
[17:03:01.669] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:01.669] result() for ClusterFuture ... done
[17:03:01.669] result() for ClusterFuture ...
[17:03:01.669] - result already collected: FutureResult
[17:03:01.669] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[17:03:01.670] plan(): Setting new future strategy stack:
[17:03:01.670] List of future strategies:
[17:03:01.670] 1. FutureStrategy:
[17:03:01.670]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:01.670]    - tweaked: FALSE
[17:03:01.670]    - call: future::plan(oplan)
[17:03:01.671] plan(): nbrOfWorkers() = 1
> 
