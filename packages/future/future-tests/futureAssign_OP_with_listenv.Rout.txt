
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:19.611] plan(): Setting new future strategy stack:
[17:02:19.612] List of future strategies:
[17:02:19.612] 1. sequential:
[17:02:19.612]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.612]    - tweaked: FALSE
[17:02:19.612]    - call: future::plan("sequential")
[17:02:19.623] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[17:02:19.640] getGlobalsAndPackages() ...
[17:02:19.640] Searching for globals...
[17:02:19.643] - globals found: [1] ‘{’
[17:02:19.644] Searching for globals ... DONE
[17:02:19.644] Resolving globals: FALSE
[17:02:19.644] 
[17:02:19.644] 
[17:02:19.644] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[17:02:19.645] getGlobalsAndPackages() ...
[17:02:19.645] Searching for globals...
[17:02:19.646] - globals found: [1] ‘{’
[17:02:19.646] Searching for globals ... DONE
[17:02:19.646] Resolving globals: FALSE
[17:02:19.646] 
[17:02:19.646] 
[17:02:19.646] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[17:02:19.647] getGlobalsAndPackages() ...
[17:02:19.647] Searching for globals...
[17:02:19.648] - globals found: [1] ‘{’
[17:02:19.648] Searching for globals ... DONE
[17:02:19.648] Resolving globals: FALSE
[17:02:19.648] 
[17:02:19.648] 
[17:02:19.648] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[17:02:19.649] getGlobalsAndPackages() ...
[17:02:19.649] Searching for globals...
[17:02:19.650] - globals found: [1] ‘{’
[17:02:19.650] Searching for globals ... DONE
[17:02:19.650] Resolving globals: FALSE
[17:02:19.650] 
[17:02:19.650] 
[17:02:19.650] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[17:02:19.651] run() for ‘Future’ ...
[17:02:19.651] - state: ‘created’
[17:02:19.651] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.652] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.652] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.652]   - Field: ‘label’
[17:02:19.652]   - Field: ‘local’
[17:02:19.652]   - Field: ‘owner’
[17:02:19.652]   - Field: ‘envir’
[17:02:19.652]   - Field: ‘packages’
[17:02:19.653]   - Field: ‘gc’
[17:02:19.653]   - Field: ‘conditions’
[17:02:19.653]   - Field: ‘expr’
[17:02:19.653]   - Field: ‘uuid’
[17:02:19.653]   - Field: ‘seed’
[17:02:19.653]   - Field: ‘version’
[17:02:19.653]   - Field: ‘result’
[17:02:19.653]   - Field: ‘asynchronous’
[17:02:19.653]   - Field: ‘calls’
[17:02:19.653]   - Field: ‘globals’
[17:02:19.654]   - Field: ‘stdout’
[17:02:19.654]   - Field: ‘earlySignal’
[17:02:19.654]   - Field: ‘lazy’
[17:02:19.654]   - Field: ‘state’
[17:02:19.654] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.654] - Launch lazy future ...
[17:02:19.655] Packages needed by the future expression (n = 0): <none>
[17:02:19.655] Packages needed by future strategies (n = 0): <none>
[17:02:19.656] {
[17:02:19.656]     {
[17:02:19.656]         {
[17:02:19.656]             ...future.startTime <- base::Sys.time()
[17:02:19.656]             {
[17:02:19.656]                 {
[17:02:19.656]                   {
[17:02:19.656]                     base::local({
[17:02:19.656]                       has_future <- base::requireNamespace("future", 
[17:02:19.656]                         quietly = TRUE)
[17:02:19.656]                       if (has_future) {
[17:02:19.656]                         ns <- base::getNamespace("future")
[17:02:19.656]                         version <- ns[[".package"]][["version"]]
[17:02:19.656]                         if (is.null(version)) 
[17:02:19.656]                           version <- utils::packageVersion("future")
[17:02:19.656]                       }
[17:02:19.656]                       else {
[17:02:19.656]                         version <- NULL
[17:02:19.656]                       }
[17:02:19.656]                       if (!has_future || version < "1.8.0") {
[17:02:19.656]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.656]                           "", base::R.version$version.string), 
[17:02:19.656]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.656]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.656]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.656]                             "release", "version")], collapse = " "), 
[17:02:19.656]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.656]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.656]                           info)
[17:02:19.656]                         info <- base::paste(info, collapse = "; ")
[17:02:19.656]                         if (!has_future) {
[17:02:19.656]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.656]                             info)
[17:02:19.656]                         }
[17:02:19.656]                         else {
[17:02:19.656]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.656]                             info, version)
[17:02:19.656]                         }
[17:02:19.656]                         base::stop(msg)
[17:02:19.656]                       }
[17:02:19.656]                     })
[17:02:19.656]                   }
[17:02:19.656]                   ...future.strategy.old <- future::plan("list")
[17:02:19.656]                   options(future.plan = NULL)
[17:02:19.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.656]                 }
[17:02:19.656]                 ...future.workdir <- getwd()
[17:02:19.656]             }
[17:02:19.656]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.656]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.656]         }
[17:02:19.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.656]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.656]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.656]             base::names(...future.oldOptions))
[17:02:19.656]     }
[17:02:19.656]     if (FALSE) {
[17:02:19.656]     }
[17:02:19.656]     else {
[17:02:19.656]         if (TRUE) {
[17:02:19.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.656]                 open = "w")
[17:02:19.656]         }
[17:02:19.656]         else {
[17:02:19.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.656]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.656]         }
[17:02:19.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.656]             base::sink(type = "output", split = FALSE)
[17:02:19.656]             base::close(...future.stdout)
[17:02:19.656]         }, add = TRUE)
[17:02:19.656]     }
[17:02:19.656]     ...future.frame <- base::sys.nframe()
[17:02:19.656]     ...future.conditions <- base::list()
[17:02:19.656]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.656]     if (FALSE) {
[17:02:19.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.656]     }
[17:02:19.656]     ...future.result <- base::tryCatch({
[17:02:19.656]         base::withCallingHandlers({
[17:02:19.656]             ...future.value <- base::withVisible(base::local({
[17:02:19.656]                 2
[17:02:19.656]             }))
[17:02:19.656]             future::FutureResult(value = ...future.value$value, 
[17:02:19.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.656]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.656]                     ...future.globalenv.names))
[17:02:19.656]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.656]         }, condition = base::local({
[17:02:19.656]             c <- base::c
[17:02:19.656]             inherits <- base::inherits
[17:02:19.656]             invokeRestart <- base::invokeRestart
[17:02:19.656]             length <- base::length
[17:02:19.656]             list <- base::list
[17:02:19.656]             seq.int <- base::seq.int
[17:02:19.656]             signalCondition <- base::signalCondition
[17:02:19.656]             sys.calls <- base::sys.calls
[17:02:19.656]             `[[` <- base::`[[`
[17:02:19.656]             `+` <- base::`+`
[17:02:19.656]             `<<-` <- base::`<<-`
[17:02:19.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.656]                   3L)]
[17:02:19.656]             }
[17:02:19.656]             function(cond) {
[17:02:19.656]                 is_error <- inherits(cond, "error")
[17:02:19.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.656]                   NULL)
[17:02:19.656]                 if (is_error) {
[17:02:19.656]                   sessionInformation <- function() {
[17:02:19.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.656]                       search = base::search(), system = base::Sys.info())
[17:02:19.656]                   }
[17:02:19.656]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.656]                     cond$call), session = sessionInformation(), 
[17:02:19.656]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.656]                   signalCondition(cond)
[17:02:19.656]                 }
[17:02:19.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.656]                 "immediateCondition"))) {
[17:02:19.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.656]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.656]                   if (TRUE && !signal) {
[17:02:19.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.656]                     {
[17:02:19.656]                       inherits <- base::inherits
[17:02:19.656]                       invokeRestart <- base::invokeRestart
[17:02:19.656]                       is.null <- base::is.null
[17:02:19.656]                       muffled <- FALSE
[17:02:19.656]                       if (inherits(cond, "message")) {
[17:02:19.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.656]                         if (muffled) 
[17:02:19.656]                           invokeRestart("muffleMessage")
[17:02:19.656]                       }
[17:02:19.656]                       else if (inherits(cond, "warning")) {
[17:02:19.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.656]                         if (muffled) 
[17:02:19.656]                           invokeRestart("muffleWarning")
[17:02:19.656]                       }
[17:02:19.656]                       else if (inherits(cond, "condition")) {
[17:02:19.656]                         if (!is.null(pattern)) {
[17:02:19.656]                           computeRestarts <- base::computeRestarts
[17:02:19.656]                           grepl <- base::grepl
[17:02:19.656]                           restarts <- computeRestarts(cond)
[17:02:19.656]                           for (restart in restarts) {
[17:02:19.656]                             name <- restart$name
[17:02:19.656]                             if (is.null(name)) 
[17:02:19.656]                               next
[17:02:19.656]                             if (!grepl(pattern, name)) 
[17:02:19.656]                               next
[17:02:19.656]                             invokeRestart(restart)
[17:02:19.656]                             muffled <- TRUE
[17:02:19.656]                             break
[17:02:19.656]                           }
[17:02:19.656]                         }
[17:02:19.656]                       }
[17:02:19.656]                       invisible(muffled)
[17:02:19.656]                     }
[17:02:19.656]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.656]                   }
[17:02:19.656]                 }
[17:02:19.656]                 else {
[17:02:19.656]                   if (TRUE) {
[17:02:19.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.656]                     {
[17:02:19.656]                       inherits <- base::inherits
[17:02:19.656]                       invokeRestart <- base::invokeRestart
[17:02:19.656]                       is.null <- base::is.null
[17:02:19.656]                       muffled <- FALSE
[17:02:19.656]                       if (inherits(cond, "message")) {
[17:02:19.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.656]                         if (muffled) 
[17:02:19.656]                           invokeRestart("muffleMessage")
[17:02:19.656]                       }
[17:02:19.656]                       else if (inherits(cond, "warning")) {
[17:02:19.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.656]                         if (muffled) 
[17:02:19.656]                           invokeRestart("muffleWarning")
[17:02:19.656]                       }
[17:02:19.656]                       else if (inherits(cond, "condition")) {
[17:02:19.656]                         if (!is.null(pattern)) {
[17:02:19.656]                           computeRestarts <- base::computeRestarts
[17:02:19.656]                           grepl <- base::grepl
[17:02:19.656]                           restarts <- computeRestarts(cond)
[17:02:19.656]                           for (restart in restarts) {
[17:02:19.656]                             name <- restart$name
[17:02:19.656]                             if (is.null(name)) 
[17:02:19.656]                               next
[17:02:19.656]                             if (!grepl(pattern, name)) 
[17:02:19.656]                               next
[17:02:19.656]                             invokeRestart(restart)
[17:02:19.656]                             muffled <- TRUE
[17:02:19.656]                             break
[17:02:19.656]                           }
[17:02:19.656]                         }
[17:02:19.656]                       }
[17:02:19.656]                       invisible(muffled)
[17:02:19.656]                     }
[17:02:19.656]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.656]                   }
[17:02:19.656]                 }
[17:02:19.656]             }
[17:02:19.656]         }))
[17:02:19.656]     }, error = function(ex) {
[17:02:19.656]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.656]                 ...future.rng), started = ...future.startTime, 
[17:02:19.656]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.656]             version = "1.8"), class = "FutureResult")
[17:02:19.656]     }, finally = {
[17:02:19.656]         if (!identical(...future.workdir, getwd())) 
[17:02:19.656]             setwd(...future.workdir)
[17:02:19.656]         {
[17:02:19.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.656]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.656]             }
[17:02:19.656]             base::options(...future.oldOptions)
[17:02:19.656]             if (.Platform$OS.type == "windows") {
[17:02:19.656]                 old_names <- names(...future.oldEnvVars)
[17:02:19.656]                 envs <- base::Sys.getenv()
[17:02:19.656]                 names <- names(envs)
[17:02:19.656]                 common <- intersect(names, old_names)
[17:02:19.656]                 added <- setdiff(names, old_names)
[17:02:19.656]                 removed <- setdiff(old_names, names)
[17:02:19.656]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.656]                   envs[common]]
[17:02:19.656]                 NAMES <- toupper(changed)
[17:02:19.656]                 args <- list()
[17:02:19.656]                 for (kk in seq_along(NAMES)) {
[17:02:19.656]                   name <- changed[[kk]]
[17:02:19.656]                   NAME <- NAMES[[kk]]
[17:02:19.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.656]                     next
[17:02:19.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.656]                 }
[17:02:19.656]                 NAMES <- toupper(added)
[17:02:19.656]                 for (kk in seq_along(NAMES)) {
[17:02:19.656]                   name <- added[[kk]]
[17:02:19.656]                   NAME <- NAMES[[kk]]
[17:02:19.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.656]                     next
[17:02:19.656]                   args[[name]] <- ""
[17:02:19.656]                 }
[17:02:19.656]                 NAMES <- toupper(removed)
[17:02:19.656]                 for (kk in seq_along(NAMES)) {
[17:02:19.656]                   name <- removed[[kk]]
[17:02:19.656]                   NAME <- NAMES[[kk]]
[17:02:19.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.656]                     next
[17:02:19.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.656]                 }
[17:02:19.656]                 if (length(args) > 0) 
[17:02:19.656]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.656]             }
[17:02:19.656]             else {
[17:02:19.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.656]             }
[17:02:19.656]             {
[17:02:19.656]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.656]                   0L) {
[17:02:19.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.656]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.656]                   base::options(opts)
[17:02:19.656]                 }
[17:02:19.656]                 {
[17:02:19.656]                   {
[17:02:19.656]                     NULL
[17:02:19.656]                     RNGkind("Mersenne-Twister")
[17:02:19.656]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.656]                       inherits = FALSE)
[17:02:19.656]                   }
[17:02:19.656]                   options(future.plan = NULL)
[17:02:19.656]                   if (is.na(NA_character_)) 
[17:02:19.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.656]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.656]                     .init = FALSE)
[17:02:19.656]                 }
[17:02:19.656]             }
[17:02:19.656]         }
[17:02:19.656]     })
[17:02:19.656]     if (TRUE) {
[17:02:19.656]         base::sink(type = "output", split = FALSE)
[17:02:19.656]         if (TRUE) {
[17:02:19.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.656]         }
[17:02:19.656]         else {
[17:02:19.656]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.656]         }
[17:02:19.656]         base::close(...future.stdout)
[17:02:19.656]         ...future.stdout <- NULL
[17:02:19.656]     }
[17:02:19.656]     ...future.result$conditions <- ...future.conditions
[17:02:19.656]     ...future.result$finished <- base::Sys.time()
[17:02:19.656]     ...future.result
[17:02:19.656] }
[17:02:19.658] plan(): Setting new future strategy stack:
[17:02:19.658] List of future strategies:
[17:02:19.658] 1. sequential:
[17:02:19.658]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.658]    - tweaked: FALSE
[17:02:19.658]    - call: NULL
[17:02:19.658] plan(): nbrOfWorkers() = 1
[17:02:19.659] plan(): Setting new future strategy stack:
[17:02:19.659] List of future strategies:
[17:02:19.659] 1. sequential:
[17:02:19.659]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.659]    - tweaked: FALSE
[17:02:19.659]    - call: future::plan("sequential")
[17:02:19.660] plan(): nbrOfWorkers() = 1
[17:02:19.660] SequentialFuture started (and completed)
[17:02:19.661] - Launch lazy future ... done
[17:02:19.661] run() for ‘SequentialFuture’ ... done
[17:02:19.661] run() for ‘Future’ ...
[17:02:19.661] - state: ‘created’
[17:02:19.661] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.661] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.661] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.662]   - Field: ‘label’
[17:02:19.662]   - Field: ‘local’
[17:02:19.662]   - Field: ‘owner’
[17:02:19.662]   - Field: ‘envir’
[17:02:19.662]   - Field: ‘packages’
[17:02:19.662]   - Field: ‘gc’
[17:02:19.662]   - Field: ‘conditions’
[17:02:19.662]   - Field: ‘expr’
[17:02:19.662]   - Field: ‘uuid’
[17:02:19.662]   - Field: ‘seed’
[17:02:19.662]   - Field: ‘version’
[17:02:19.663]   - Field: ‘result’
[17:02:19.663]   - Field: ‘asynchronous’
[17:02:19.663]   - Field: ‘calls’
[17:02:19.663]   - Field: ‘globals’
[17:02:19.663]   - Field: ‘stdout’
[17:02:19.663]   - Field: ‘earlySignal’
[17:02:19.663]   - Field: ‘lazy’
[17:02:19.663]   - Field: ‘state’
[17:02:19.663] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.663] - Launch lazy future ...
[17:02:19.664] Packages needed by the future expression (n = 0): <none>
[17:02:19.664] Packages needed by future strategies (n = 0): <none>
[17:02:19.664] {
[17:02:19.664]     {
[17:02:19.664]         {
[17:02:19.664]             ...future.startTime <- base::Sys.time()
[17:02:19.664]             {
[17:02:19.664]                 {
[17:02:19.664]                   {
[17:02:19.664]                     base::local({
[17:02:19.664]                       has_future <- base::requireNamespace("future", 
[17:02:19.664]                         quietly = TRUE)
[17:02:19.664]                       if (has_future) {
[17:02:19.664]                         ns <- base::getNamespace("future")
[17:02:19.664]                         version <- ns[[".package"]][["version"]]
[17:02:19.664]                         if (is.null(version)) 
[17:02:19.664]                           version <- utils::packageVersion("future")
[17:02:19.664]                       }
[17:02:19.664]                       else {
[17:02:19.664]                         version <- NULL
[17:02:19.664]                       }
[17:02:19.664]                       if (!has_future || version < "1.8.0") {
[17:02:19.664]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.664]                           "", base::R.version$version.string), 
[17:02:19.664]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.664]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.664]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.664]                             "release", "version")], collapse = " "), 
[17:02:19.664]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.664]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.664]                           info)
[17:02:19.664]                         info <- base::paste(info, collapse = "; ")
[17:02:19.664]                         if (!has_future) {
[17:02:19.664]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.664]                             info)
[17:02:19.664]                         }
[17:02:19.664]                         else {
[17:02:19.664]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.664]                             info, version)
[17:02:19.664]                         }
[17:02:19.664]                         base::stop(msg)
[17:02:19.664]                       }
[17:02:19.664]                     })
[17:02:19.664]                   }
[17:02:19.664]                   ...future.strategy.old <- future::plan("list")
[17:02:19.664]                   options(future.plan = NULL)
[17:02:19.664]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.664]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.664]                 }
[17:02:19.664]                 ...future.workdir <- getwd()
[17:02:19.664]             }
[17:02:19.664]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.664]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.664]         }
[17:02:19.664]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.664]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.664]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.664]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.664]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.664]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.664]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.664]             base::names(...future.oldOptions))
[17:02:19.664]     }
[17:02:19.664]     if (FALSE) {
[17:02:19.664]     }
[17:02:19.664]     else {
[17:02:19.664]         if (TRUE) {
[17:02:19.664]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.664]                 open = "w")
[17:02:19.664]         }
[17:02:19.664]         else {
[17:02:19.664]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.664]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.664]         }
[17:02:19.664]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.664]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.664]             base::sink(type = "output", split = FALSE)
[17:02:19.664]             base::close(...future.stdout)
[17:02:19.664]         }, add = TRUE)
[17:02:19.664]     }
[17:02:19.664]     ...future.frame <- base::sys.nframe()
[17:02:19.664]     ...future.conditions <- base::list()
[17:02:19.664]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.664]     if (FALSE) {
[17:02:19.664]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.664]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.664]     }
[17:02:19.664]     ...future.result <- base::tryCatch({
[17:02:19.664]         base::withCallingHandlers({
[17:02:19.664]             ...future.value <- base::withVisible(base::local({
[17:02:19.664]                 "async!"
[17:02:19.664]             }))
[17:02:19.664]             future::FutureResult(value = ...future.value$value, 
[17:02:19.664]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.664]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.664]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.664]                     ...future.globalenv.names))
[17:02:19.664]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.664]         }, condition = base::local({
[17:02:19.664]             c <- base::c
[17:02:19.664]             inherits <- base::inherits
[17:02:19.664]             invokeRestart <- base::invokeRestart
[17:02:19.664]             length <- base::length
[17:02:19.664]             list <- base::list
[17:02:19.664]             seq.int <- base::seq.int
[17:02:19.664]             signalCondition <- base::signalCondition
[17:02:19.664]             sys.calls <- base::sys.calls
[17:02:19.664]             `[[` <- base::`[[`
[17:02:19.664]             `+` <- base::`+`
[17:02:19.664]             `<<-` <- base::`<<-`
[17:02:19.664]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.664]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.664]                   3L)]
[17:02:19.664]             }
[17:02:19.664]             function(cond) {
[17:02:19.664]                 is_error <- inherits(cond, "error")
[17:02:19.664]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.664]                   NULL)
[17:02:19.664]                 if (is_error) {
[17:02:19.664]                   sessionInformation <- function() {
[17:02:19.664]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.664]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.664]                       search = base::search(), system = base::Sys.info())
[17:02:19.664]                   }
[17:02:19.664]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.664]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.664]                     cond$call), session = sessionInformation(), 
[17:02:19.664]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.664]                   signalCondition(cond)
[17:02:19.664]                 }
[17:02:19.664]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.664]                 "immediateCondition"))) {
[17:02:19.664]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.664]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.664]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.664]                   if (TRUE && !signal) {
[17:02:19.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.664]                     {
[17:02:19.664]                       inherits <- base::inherits
[17:02:19.664]                       invokeRestart <- base::invokeRestart
[17:02:19.664]                       is.null <- base::is.null
[17:02:19.664]                       muffled <- FALSE
[17:02:19.664]                       if (inherits(cond, "message")) {
[17:02:19.664]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.664]                         if (muffled) 
[17:02:19.664]                           invokeRestart("muffleMessage")
[17:02:19.664]                       }
[17:02:19.664]                       else if (inherits(cond, "warning")) {
[17:02:19.664]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.664]                         if (muffled) 
[17:02:19.664]                           invokeRestart("muffleWarning")
[17:02:19.664]                       }
[17:02:19.664]                       else if (inherits(cond, "condition")) {
[17:02:19.664]                         if (!is.null(pattern)) {
[17:02:19.664]                           computeRestarts <- base::computeRestarts
[17:02:19.664]                           grepl <- base::grepl
[17:02:19.664]                           restarts <- computeRestarts(cond)
[17:02:19.664]                           for (restart in restarts) {
[17:02:19.664]                             name <- restart$name
[17:02:19.664]                             if (is.null(name)) 
[17:02:19.664]                               next
[17:02:19.664]                             if (!grepl(pattern, name)) 
[17:02:19.664]                               next
[17:02:19.664]                             invokeRestart(restart)
[17:02:19.664]                             muffled <- TRUE
[17:02:19.664]                             break
[17:02:19.664]                           }
[17:02:19.664]                         }
[17:02:19.664]                       }
[17:02:19.664]                       invisible(muffled)
[17:02:19.664]                     }
[17:02:19.664]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.664]                   }
[17:02:19.664]                 }
[17:02:19.664]                 else {
[17:02:19.664]                   if (TRUE) {
[17:02:19.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.664]                     {
[17:02:19.664]                       inherits <- base::inherits
[17:02:19.664]                       invokeRestart <- base::invokeRestart
[17:02:19.664]                       is.null <- base::is.null
[17:02:19.664]                       muffled <- FALSE
[17:02:19.664]                       if (inherits(cond, "message")) {
[17:02:19.664]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.664]                         if (muffled) 
[17:02:19.664]                           invokeRestart("muffleMessage")
[17:02:19.664]                       }
[17:02:19.664]                       else if (inherits(cond, "warning")) {
[17:02:19.664]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.664]                         if (muffled) 
[17:02:19.664]                           invokeRestart("muffleWarning")
[17:02:19.664]                       }
[17:02:19.664]                       else if (inherits(cond, "condition")) {
[17:02:19.664]                         if (!is.null(pattern)) {
[17:02:19.664]                           computeRestarts <- base::computeRestarts
[17:02:19.664]                           grepl <- base::grepl
[17:02:19.664]                           restarts <- computeRestarts(cond)
[17:02:19.664]                           for (restart in restarts) {
[17:02:19.664]                             name <- restart$name
[17:02:19.664]                             if (is.null(name)) 
[17:02:19.664]                               next
[17:02:19.664]                             if (!grepl(pattern, name)) 
[17:02:19.664]                               next
[17:02:19.664]                             invokeRestart(restart)
[17:02:19.664]                             muffled <- TRUE
[17:02:19.664]                             break
[17:02:19.664]                           }
[17:02:19.664]                         }
[17:02:19.664]                       }
[17:02:19.664]                       invisible(muffled)
[17:02:19.664]                     }
[17:02:19.664]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.664]                   }
[17:02:19.664]                 }
[17:02:19.664]             }
[17:02:19.664]         }))
[17:02:19.664]     }, error = function(ex) {
[17:02:19.664]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.664]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.664]                 ...future.rng), started = ...future.startTime, 
[17:02:19.664]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.664]             version = "1.8"), class = "FutureResult")
[17:02:19.664]     }, finally = {
[17:02:19.664]         if (!identical(...future.workdir, getwd())) 
[17:02:19.664]             setwd(...future.workdir)
[17:02:19.664]         {
[17:02:19.664]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.664]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.664]             }
[17:02:19.664]             base::options(...future.oldOptions)
[17:02:19.664]             if (.Platform$OS.type == "windows") {
[17:02:19.664]                 old_names <- names(...future.oldEnvVars)
[17:02:19.664]                 envs <- base::Sys.getenv()
[17:02:19.664]                 names <- names(envs)
[17:02:19.664]                 common <- intersect(names, old_names)
[17:02:19.664]                 added <- setdiff(names, old_names)
[17:02:19.664]                 removed <- setdiff(old_names, names)
[17:02:19.664]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.664]                   envs[common]]
[17:02:19.664]                 NAMES <- toupper(changed)
[17:02:19.664]                 args <- list()
[17:02:19.664]                 for (kk in seq_along(NAMES)) {
[17:02:19.664]                   name <- changed[[kk]]
[17:02:19.664]                   NAME <- NAMES[[kk]]
[17:02:19.664]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.664]                     next
[17:02:19.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.664]                 }
[17:02:19.664]                 NAMES <- toupper(added)
[17:02:19.664]                 for (kk in seq_along(NAMES)) {
[17:02:19.664]                   name <- added[[kk]]
[17:02:19.664]                   NAME <- NAMES[[kk]]
[17:02:19.664]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.664]                     next
[17:02:19.664]                   args[[name]] <- ""
[17:02:19.664]                 }
[17:02:19.664]                 NAMES <- toupper(removed)
[17:02:19.664]                 for (kk in seq_along(NAMES)) {
[17:02:19.664]                   name <- removed[[kk]]
[17:02:19.664]                   NAME <- NAMES[[kk]]
[17:02:19.664]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.664]                     next
[17:02:19.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.664]                 }
[17:02:19.664]                 if (length(args) > 0) 
[17:02:19.664]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.664]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.664]             }
[17:02:19.664]             else {
[17:02:19.664]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.664]             }
[17:02:19.664]             {
[17:02:19.664]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.664]                   0L) {
[17:02:19.664]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.664]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.664]                   base::options(opts)
[17:02:19.664]                 }
[17:02:19.664]                 {
[17:02:19.664]                   {
[17:02:19.664]                     NULL
[17:02:19.664]                     RNGkind("Mersenne-Twister")
[17:02:19.664]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.664]                       inherits = FALSE)
[17:02:19.664]                   }
[17:02:19.664]                   options(future.plan = NULL)
[17:02:19.664]                   if (is.na(NA_character_)) 
[17:02:19.664]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.664]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.664]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.664]                     .init = FALSE)
[17:02:19.664]                 }
[17:02:19.664]             }
[17:02:19.664]         }
[17:02:19.664]     })
[17:02:19.664]     if (TRUE) {
[17:02:19.664]         base::sink(type = "output", split = FALSE)
[17:02:19.664]         if (TRUE) {
[17:02:19.664]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.664]         }
[17:02:19.664]         else {
[17:02:19.664]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.664]         }
[17:02:19.664]         base::close(...future.stdout)
[17:02:19.664]         ...future.stdout <- NULL
[17:02:19.664]     }
[17:02:19.664]     ...future.result$conditions <- ...future.conditions
[17:02:19.664]     ...future.result$finished <- base::Sys.time()
[17:02:19.664]     ...future.result
[17:02:19.664] }
[17:02:19.666] plan(): Setting new future strategy stack:
[17:02:19.666] List of future strategies:
[17:02:19.666] 1. sequential:
[17:02:19.666]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.666]    - tweaked: FALSE
[17:02:19.666]    - call: NULL
[17:02:19.666] plan(): nbrOfWorkers() = 1
[17:02:19.667] plan(): Setting new future strategy stack:
[17:02:19.667] List of future strategies:
[17:02:19.667] 1. sequential:
[17:02:19.667]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.667]    - tweaked: FALSE
[17:02:19.667]    - call: future::plan("sequential")
[17:02:19.668] plan(): nbrOfWorkers() = 1
[17:02:19.668] SequentialFuture started (and completed)
[17:02:19.668] - Launch lazy future ... done
[17:02:19.668] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[17:02:19.672] getGlobalsAndPackages() ...
[17:02:19.672] Searching for globals...
[17:02:19.673] - globals found: [1] ‘{’
[17:02:19.673] Searching for globals ... DONE
[17:02:19.673] Resolving globals: FALSE
[17:02:19.674] 
[17:02:19.674] 
[17:02:19.674] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[17:02:19.675] getGlobalsAndPackages() ...
[17:02:19.675] Searching for globals...
[17:02:19.675] - globals found: [1] ‘{’
[17:02:19.676] Searching for globals ... DONE
[17:02:19.676] Resolving globals: FALSE
[17:02:19.676] 
[17:02:19.676] 
[17:02:19.676] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[17:02:19.680] run() for ‘Future’ ...
[17:02:19.680] - state: ‘created’
[17:02:19.680] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.680] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.680] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.680]   - Field: ‘label’
[17:02:19.681]   - Field: ‘local’
[17:02:19.681]   - Field: ‘owner’
[17:02:19.681]   - Field: ‘envir’
[17:02:19.681]   - Field: ‘packages’
[17:02:19.681]   - Field: ‘gc’
[17:02:19.681]   - Field: ‘conditions’
[17:02:19.681]   - Field: ‘expr’
[17:02:19.681]   - Field: ‘uuid’
[17:02:19.681]   - Field: ‘seed’
[17:02:19.681]   - Field: ‘version’
[17:02:19.681]   - Field: ‘result’
[17:02:19.682]   - Field: ‘asynchronous’
[17:02:19.682]   - Field: ‘calls’
[17:02:19.682]   - Field: ‘globals’
[17:02:19.682]   - Field: ‘stdout’
[17:02:19.682]   - Field: ‘earlySignal’
[17:02:19.682]   - Field: ‘lazy’
[17:02:19.682]   - Field: ‘state’
[17:02:19.682] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.682] - Launch lazy future ...
[17:02:19.683] Packages needed by the future expression (n = 0): <none>
[17:02:19.683] Packages needed by future strategies (n = 0): <none>
[17:02:19.683] {
[17:02:19.683]     {
[17:02:19.683]         {
[17:02:19.683]             ...future.startTime <- base::Sys.time()
[17:02:19.683]             {
[17:02:19.683]                 {
[17:02:19.683]                   {
[17:02:19.683]                     base::local({
[17:02:19.683]                       has_future <- base::requireNamespace("future", 
[17:02:19.683]                         quietly = TRUE)
[17:02:19.683]                       if (has_future) {
[17:02:19.683]                         ns <- base::getNamespace("future")
[17:02:19.683]                         version <- ns[[".package"]][["version"]]
[17:02:19.683]                         if (is.null(version)) 
[17:02:19.683]                           version <- utils::packageVersion("future")
[17:02:19.683]                       }
[17:02:19.683]                       else {
[17:02:19.683]                         version <- NULL
[17:02:19.683]                       }
[17:02:19.683]                       if (!has_future || version < "1.8.0") {
[17:02:19.683]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.683]                           "", base::R.version$version.string), 
[17:02:19.683]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.683]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.683]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.683]                             "release", "version")], collapse = " "), 
[17:02:19.683]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.683]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.683]                           info)
[17:02:19.683]                         info <- base::paste(info, collapse = "; ")
[17:02:19.683]                         if (!has_future) {
[17:02:19.683]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.683]                             info)
[17:02:19.683]                         }
[17:02:19.683]                         else {
[17:02:19.683]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.683]                             info, version)
[17:02:19.683]                         }
[17:02:19.683]                         base::stop(msg)
[17:02:19.683]                       }
[17:02:19.683]                     })
[17:02:19.683]                   }
[17:02:19.683]                   ...future.strategy.old <- future::plan("list")
[17:02:19.683]                   options(future.plan = NULL)
[17:02:19.683]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.683]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.683]                 }
[17:02:19.683]                 ...future.workdir <- getwd()
[17:02:19.683]             }
[17:02:19.683]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.683]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.683]         }
[17:02:19.683]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.683]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.683]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.683]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.683]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.683]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.683]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.683]             base::names(...future.oldOptions))
[17:02:19.683]     }
[17:02:19.683]     if (FALSE) {
[17:02:19.683]     }
[17:02:19.683]     else {
[17:02:19.683]         if (TRUE) {
[17:02:19.683]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.683]                 open = "w")
[17:02:19.683]         }
[17:02:19.683]         else {
[17:02:19.683]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.683]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.683]         }
[17:02:19.683]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.683]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.683]             base::sink(type = "output", split = FALSE)
[17:02:19.683]             base::close(...future.stdout)
[17:02:19.683]         }, add = TRUE)
[17:02:19.683]     }
[17:02:19.683]     ...future.frame <- base::sys.nframe()
[17:02:19.683]     ...future.conditions <- base::list()
[17:02:19.683]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.683]     if (FALSE) {
[17:02:19.683]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.683]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.683]     }
[17:02:19.683]     ...future.result <- base::tryCatch({
[17:02:19.683]         base::withCallingHandlers({
[17:02:19.683]             ...future.value <- base::withVisible(base::local({
[17:02:19.683]                 1
[17:02:19.683]             }))
[17:02:19.683]             future::FutureResult(value = ...future.value$value, 
[17:02:19.683]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.683]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.683]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.683]                     ...future.globalenv.names))
[17:02:19.683]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.683]         }, condition = base::local({
[17:02:19.683]             c <- base::c
[17:02:19.683]             inherits <- base::inherits
[17:02:19.683]             invokeRestart <- base::invokeRestart
[17:02:19.683]             length <- base::length
[17:02:19.683]             list <- base::list
[17:02:19.683]             seq.int <- base::seq.int
[17:02:19.683]             signalCondition <- base::signalCondition
[17:02:19.683]             sys.calls <- base::sys.calls
[17:02:19.683]             `[[` <- base::`[[`
[17:02:19.683]             `+` <- base::`+`
[17:02:19.683]             `<<-` <- base::`<<-`
[17:02:19.683]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.683]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.683]                   3L)]
[17:02:19.683]             }
[17:02:19.683]             function(cond) {
[17:02:19.683]                 is_error <- inherits(cond, "error")
[17:02:19.683]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.683]                   NULL)
[17:02:19.683]                 if (is_error) {
[17:02:19.683]                   sessionInformation <- function() {
[17:02:19.683]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.683]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.683]                       search = base::search(), system = base::Sys.info())
[17:02:19.683]                   }
[17:02:19.683]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.683]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.683]                     cond$call), session = sessionInformation(), 
[17:02:19.683]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.683]                   signalCondition(cond)
[17:02:19.683]                 }
[17:02:19.683]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.683]                 "immediateCondition"))) {
[17:02:19.683]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.683]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.683]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.683]                   if (TRUE && !signal) {
[17:02:19.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.683]                     {
[17:02:19.683]                       inherits <- base::inherits
[17:02:19.683]                       invokeRestart <- base::invokeRestart
[17:02:19.683]                       is.null <- base::is.null
[17:02:19.683]                       muffled <- FALSE
[17:02:19.683]                       if (inherits(cond, "message")) {
[17:02:19.683]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.683]                         if (muffled) 
[17:02:19.683]                           invokeRestart("muffleMessage")
[17:02:19.683]                       }
[17:02:19.683]                       else if (inherits(cond, "warning")) {
[17:02:19.683]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.683]                         if (muffled) 
[17:02:19.683]                           invokeRestart("muffleWarning")
[17:02:19.683]                       }
[17:02:19.683]                       else if (inherits(cond, "condition")) {
[17:02:19.683]                         if (!is.null(pattern)) {
[17:02:19.683]                           computeRestarts <- base::computeRestarts
[17:02:19.683]                           grepl <- base::grepl
[17:02:19.683]                           restarts <- computeRestarts(cond)
[17:02:19.683]                           for (restart in restarts) {
[17:02:19.683]                             name <- restart$name
[17:02:19.683]                             if (is.null(name)) 
[17:02:19.683]                               next
[17:02:19.683]                             if (!grepl(pattern, name)) 
[17:02:19.683]                               next
[17:02:19.683]                             invokeRestart(restart)
[17:02:19.683]                             muffled <- TRUE
[17:02:19.683]                             break
[17:02:19.683]                           }
[17:02:19.683]                         }
[17:02:19.683]                       }
[17:02:19.683]                       invisible(muffled)
[17:02:19.683]                     }
[17:02:19.683]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.683]                   }
[17:02:19.683]                 }
[17:02:19.683]                 else {
[17:02:19.683]                   if (TRUE) {
[17:02:19.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.683]                     {
[17:02:19.683]                       inherits <- base::inherits
[17:02:19.683]                       invokeRestart <- base::invokeRestart
[17:02:19.683]                       is.null <- base::is.null
[17:02:19.683]                       muffled <- FALSE
[17:02:19.683]                       if (inherits(cond, "message")) {
[17:02:19.683]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.683]                         if (muffled) 
[17:02:19.683]                           invokeRestart("muffleMessage")
[17:02:19.683]                       }
[17:02:19.683]                       else if (inherits(cond, "warning")) {
[17:02:19.683]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.683]                         if (muffled) 
[17:02:19.683]                           invokeRestart("muffleWarning")
[17:02:19.683]                       }
[17:02:19.683]                       else if (inherits(cond, "condition")) {
[17:02:19.683]                         if (!is.null(pattern)) {
[17:02:19.683]                           computeRestarts <- base::computeRestarts
[17:02:19.683]                           grepl <- base::grepl
[17:02:19.683]                           restarts <- computeRestarts(cond)
[17:02:19.683]                           for (restart in restarts) {
[17:02:19.683]                             name <- restart$name
[17:02:19.683]                             if (is.null(name)) 
[17:02:19.683]                               next
[17:02:19.683]                             if (!grepl(pattern, name)) 
[17:02:19.683]                               next
[17:02:19.683]                             invokeRestart(restart)
[17:02:19.683]                             muffled <- TRUE
[17:02:19.683]                             break
[17:02:19.683]                           }
[17:02:19.683]                         }
[17:02:19.683]                       }
[17:02:19.683]                       invisible(muffled)
[17:02:19.683]                     }
[17:02:19.683]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.683]                   }
[17:02:19.683]                 }
[17:02:19.683]             }
[17:02:19.683]         }))
[17:02:19.683]     }, error = function(ex) {
[17:02:19.683]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.683]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.683]                 ...future.rng), started = ...future.startTime, 
[17:02:19.683]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.683]             version = "1.8"), class = "FutureResult")
[17:02:19.683]     }, finally = {
[17:02:19.683]         if (!identical(...future.workdir, getwd())) 
[17:02:19.683]             setwd(...future.workdir)
[17:02:19.683]         {
[17:02:19.683]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.683]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.683]             }
[17:02:19.683]             base::options(...future.oldOptions)
[17:02:19.683]             if (.Platform$OS.type == "windows") {
[17:02:19.683]                 old_names <- names(...future.oldEnvVars)
[17:02:19.683]                 envs <- base::Sys.getenv()
[17:02:19.683]                 names <- names(envs)
[17:02:19.683]                 common <- intersect(names, old_names)
[17:02:19.683]                 added <- setdiff(names, old_names)
[17:02:19.683]                 removed <- setdiff(old_names, names)
[17:02:19.683]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.683]                   envs[common]]
[17:02:19.683]                 NAMES <- toupper(changed)
[17:02:19.683]                 args <- list()
[17:02:19.683]                 for (kk in seq_along(NAMES)) {
[17:02:19.683]                   name <- changed[[kk]]
[17:02:19.683]                   NAME <- NAMES[[kk]]
[17:02:19.683]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.683]                     next
[17:02:19.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.683]                 }
[17:02:19.683]                 NAMES <- toupper(added)
[17:02:19.683]                 for (kk in seq_along(NAMES)) {
[17:02:19.683]                   name <- added[[kk]]
[17:02:19.683]                   NAME <- NAMES[[kk]]
[17:02:19.683]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.683]                     next
[17:02:19.683]                   args[[name]] <- ""
[17:02:19.683]                 }
[17:02:19.683]                 NAMES <- toupper(removed)
[17:02:19.683]                 for (kk in seq_along(NAMES)) {
[17:02:19.683]                   name <- removed[[kk]]
[17:02:19.683]                   NAME <- NAMES[[kk]]
[17:02:19.683]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.683]                     next
[17:02:19.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.683]                 }
[17:02:19.683]                 if (length(args) > 0) 
[17:02:19.683]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.683]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.683]             }
[17:02:19.683]             else {
[17:02:19.683]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.683]             }
[17:02:19.683]             {
[17:02:19.683]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.683]                   0L) {
[17:02:19.683]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.683]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.683]                   base::options(opts)
[17:02:19.683]                 }
[17:02:19.683]                 {
[17:02:19.683]                   {
[17:02:19.683]                     NULL
[17:02:19.683]                     RNGkind("Mersenne-Twister")
[17:02:19.683]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.683]                       inherits = FALSE)
[17:02:19.683]                   }
[17:02:19.683]                   options(future.plan = NULL)
[17:02:19.683]                   if (is.na(NA_character_)) 
[17:02:19.683]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.683]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.683]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.683]                     .init = FALSE)
[17:02:19.683]                 }
[17:02:19.683]             }
[17:02:19.683]         }
[17:02:19.683]     })
[17:02:19.683]     if (TRUE) {
[17:02:19.683]         base::sink(type = "output", split = FALSE)
[17:02:19.683]         if (TRUE) {
[17:02:19.683]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.683]         }
[17:02:19.683]         else {
[17:02:19.683]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.683]         }
[17:02:19.683]         base::close(...future.stdout)
[17:02:19.683]         ...future.stdout <- NULL
[17:02:19.683]     }
[17:02:19.683]     ...future.result$conditions <- ...future.conditions
[17:02:19.683]     ...future.result$finished <- base::Sys.time()
[17:02:19.683]     ...future.result
[17:02:19.683] }
[17:02:19.685] plan(): Setting new future strategy stack:
[17:02:19.685] List of future strategies:
[17:02:19.685] 1. sequential:
[17:02:19.685]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.685]    - tweaked: FALSE
[17:02:19.685]    - call: NULL
[17:02:19.685] plan(): nbrOfWorkers() = 1
[17:02:19.686] plan(): Setting new future strategy stack:
[17:02:19.686] List of future strategies:
[17:02:19.686] 1. sequential:
[17:02:19.686]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.686]    - tweaked: FALSE
[17:02:19.686]    - call: future::plan("sequential")
[17:02:19.687] plan(): nbrOfWorkers() = 1
[17:02:19.687] SequentialFuture started (and completed)
[17:02:19.687] - Launch lazy future ... done
[17:02:19.687] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[17:02:19.687] run() for ‘Future’ ...
[17:02:19.687] - state: ‘created’
[17:02:19.688] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.688] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.688] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.688]   - Field: ‘label’
[17:02:19.688]   - Field: ‘local’
[17:02:19.688]   - Field: ‘owner’
[17:02:19.688]   - Field: ‘envir’
[17:02:19.688]   - Field: ‘packages’
[17:02:19.688]   - Field: ‘gc’
[17:02:19.689]   - Field: ‘conditions’
[17:02:19.689]   - Field: ‘expr’
[17:02:19.689]   - Field: ‘uuid’
[17:02:19.689]   - Field: ‘seed’
[17:02:19.689]   - Field: ‘version’
[17:02:19.689]   - Field: ‘result’
[17:02:19.689]   - Field: ‘asynchronous’
[17:02:19.689]   - Field: ‘calls’
[17:02:19.689]   - Field: ‘globals’
[17:02:19.689]   - Field: ‘stdout’
[17:02:19.689]   - Field: ‘earlySignal’
[17:02:19.690]   - Field: ‘lazy’
[17:02:19.690]   - Field: ‘state’
[17:02:19.690] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.690] - Launch lazy future ...
[17:02:19.690] Packages needed by the future expression (n = 0): <none>
[17:02:19.690] Packages needed by future strategies (n = 0): <none>
[17:02:19.690] {
[17:02:19.690]     {
[17:02:19.690]         {
[17:02:19.690]             ...future.startTime <- base::Sys.time()
[17:02:19.690]             {
[17:02:19.690]                 {
[17:02:19.690]                   {
[17:02:19.690]                     base::local({
[17:02:19.690]                       has_future <- base::requireNamespace("future", 
[17:02:19.690]                         quietly = TRUE)
[17:02:19.690]                       if (has_future) {
[17:02:19.690]                         ns <- base::getNamespace("future")
[17:02:19.690]                         version <- ns[[".package"]][["version"]]
[17:02:19.690]                         if (is.null(version)) 
[17:02:19.690]                           version <- utils::packageVersion("future")
[17:02:19.690]                       }
[17:02:19.690]                       else {
[17:02:19.690]                         version <- NULL
[17:02:19.690]                       }
[17:02:19.690]                       if (!has_future || version < "1.8.0") {
[17:02:19.690]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.690]                           "", base::R.version$version.string), 
[17:02:19.690]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.690]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.690]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.690]                             "release", "version")], collapse = " "), 
[17:02:19.690]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.690]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.690]                           info)
[17:02:19.690]                         info <- base::paste(info, collapse = "; ")
[17:02:19.690]                         if (!has_future) {
[17:02:19.690]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.690]                             info)
[17:02:19.690]                         }
[17:02:19.690]                         else {
[17:02:19.690]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.690]                             info, version)
[17:02:19.690]                         }
[17:02:19.690]                         base::stop(msg)
[17:02:19.690]                       }
[17:02:19.690]                     })
[17:02:19.690]                   }
[17:02:19.690]                   ...future.strategy.old <- future::plan("list")
[17:02:19.690]                   options(future.plan = NULL)
[17:02:19.690]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.690]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.690]                 }
[17:02:19.690]                 ...future.workdir <- getwd()
[17:02:19.690]             }
[17:02:19.690]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.690]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.690]         }
[17:02:19.690]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.690]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.690]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.690]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.690]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.690]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.690]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.690]             base::names(...future.oldOptions))
[17:02:19.690]     }
[17:02:19.690]     if (FALSE) {
[17:02:19.690]     }
[17:02:19.690]     else {
[17:02:19.690]         if (TRUE) {
[17:02:19.690]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.690]                 open = "w")
[17:02:19.690]         }
[17:02:19.690]         else {
[17:02:19.690]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.690]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.690]         }
[17:02:19.690]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.690]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.690]             base::sink(type = "output", split = FALSE)
[17:02:19.690]             base::close(...future.stdout)
[17:02:19.690]         }, add = TRUE)
[17:02:19.690]     }
[17:02:19.690]     ...future.frame <- base::sys.nframe()
[17:02:19.690]     ...future.conditions <- base::list()
[17:02:19.690]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.690]     if (FALSE) {
[17:02:19.690]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.690]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.690]     }
[17:02:19.690]     ...future.result <- base::tryCatch({
[17:02:19.690]         base::withCallingHandlers({
[17:02:19.690]             ...future.value <- base::withVisible(base::local({
[17:02:19.690]                 2
[17:02:19.690]             }))
[17:02:19.690]             future::FutureResult(value = ...future.value$value, 
[17:02:19.690]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.690]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.690]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.690]                     ...future.globalenv.names))
[17:02:19.690]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.690]         }, condition = base::local({
[17:02:19.690]             c <- base::c
[17:02:19.690]             inherits <- base::inherits
[17:02:19.690]             invokeRestart <- base::invokeRestart
[17:02:19.690]             length <- base::length
[17:02:19.690]             list <- base::list
[17:02:19.690]             seq.int <- base::seq.int
[17:02:19.690]             signalCondition <- base::signalCondition
[17:02:19.690]             sys.calls <- base::sys.calls
[17:02:19.690]             `[[` <- base::`[[`
[17:02:19.690]             `+` <- base::`+`
[17:02:19.690]             `<<-` <- base::`<<-`
[17:02:19.690]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.690]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.690]                   3L)]
[17:02:19.690]             }
[17:02:19.690]             function(cond) {
[17:02:19.690]                 is_error <- inherits(cond, "error")
[17:02:19.690]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.690]                   NULL)
[17:02:19.690]                 if (is_error) {
[17:02:19.690]                   sessionInformation <- function() {
[17:02:19.690]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.690]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.690]                       search = base::search(), system = base::Sys.info())
[17:02:19.690]                   }
[17:02:19.690]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.690]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.690]                     cond$call), session = sessionInformation(), 
[17:02:19.690]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.690]                   signalCondition(cond)
[17:02:19.690]                 }
[17:02:19.690]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.690]                 "immediateCondition"))) {
[17:02:19.690]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.690]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.690]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.690]                   if (TRUE && !signal) {
[17:02:19.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.690]                     {
[17:02:19.690]                       inherits <- base::inherits
[17:02:19.690]                       invokeRestart <- base::invokeRestart
[17:02:19.690]                       is.null <- base::is.null
[17:02:19.690]                       muffled <- FALSE
[17:02:19.690]                       if (inherits(cond, "message")) {
[17:02:19.690]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.690]                         if (muffled) 
[17:02:19.690]                           invokeRestart("muffleMessage")
[17:02:19.690]                       }
[17:02:19.690]                       else if (inherits(cond, "warning")) {
[17:02:19.690]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.690]                         if (muffled) 
[17:02:19.690]                           invokeRestart("muffleWarning")
[17:02:19.690]                       }
[17:02:19.690]                       else if (inherits(cond, "condition")) {
[17:02:19.690]                         if (!is.null(pattern)) {
[17:02:19.690]                           computeRestarts <- base::computeRestarts
[17:02:19.690]                           grepl <- base::grepl
[17:02:19.690]                           restarts <- computeRestarts(cond)
[17:02:19.690]                           for (restart in restarts) {
[17:02:19.690]                             name <- restart$name
[17:02:19.690]                             if (is.null(name)) 
[17:02:19.690]                               next
[17:02:19.690]                             if (!grepl(pattern, name)) 
[17:02:19.690]                               next
[17:02:19.690]                             invokeRestart(restart)
[17:02:19.690]                             muffled <- TRUE
[17:02:19.690]                             break
[17:02:19.690]                           }
[17:02:19.690]                         }
[17:02:19.690]                       }
[17:02:19.690]                       invisible(muffled)
[17:02:19.690]                     }
[17:02:19.690]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.690]                   }
[17:02:19.690]                 }
[17:02:19.690]                 else {
[17:02:19.690]                   if (TRUE) {
[17:02:19.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.690]                     {
[17:02:19.690]                       inherits <- base::inherits
[17:02:19.690]                       invokeRestart <- base::invokeRestart
[17:02:19.690]                       is.null <- base::is.null
[17:02:19.690]                       muffled <- FALSE
[17:02:19.690]                       if (inherits(cond, "message")) {
[17:02:19.690]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.690]                         if (muffled) 
[17:02:19.690]                           invokeRestart("muffleMessage")
[17:02:19.690]                       }
[17:02:19.690]                       else if (inherits(cond, "warning")) {
[17:02:19.690]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.690]                         if (muffled) 
[17:02:19.690]                           invokeRestart("muffleWarning")
[17:02:19.690]                       }
[17:02:19.690]                       else if (inherits(cond, "condition")) {
[17:02:19.690]                         if (!is.null(pattern)) {
[17:02:19.690]                           computeRestarts <- base::computeRestarts
[17:02:19.690]                           grepl <- base::grepl
[17:02:19.690]                           restarts <- computeRestarts(cond)
[17:02:19.690]                           for (restart in restarts) {
[17:02:19.690]                             name <- restart$name
[17:02:19.690]                             if (is.null(name)) 
[17:02:19.690]                               next
[17:02:19.690]                             if (!grepl(pattern, name)) 
[17:02:19.690]                               next
[17:02:19.690]                             invokeRestart(restart)
[17:02:19.690]                             muffled <- TRUE
[17:02:19.690]                             break
[17:02:19.690]                           }
[17:02:19.690]                         }
[17:02:19.690]                       }
[17:02:19.690]                       invisible(muffled)
[17:02:19.690]                     }
[17:02:19.690]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.690]                   }
[17:02:19.690]                 }
[17:02:19.690]             }
[17:02:19.690]         }))
[17:02:19.690]     }, error = function(ex) {
[17:02:19.690]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.690]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.690]                 ...future.rng), started = ...future.startTime, 
[17:02:19.690]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.690]             version = "1.8"), class = "FutureResult")
[17:02:19.690]     }, finally = {
[17:02:19.690]         if (!identical(...future.workdir, getwd())) 
[17:02:19.690]             setwd(...future.workdir)
[17:02:19.690]         {
[17:02:19.690]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.690]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.690]             }
[17:02:19.690]             base::options(...future.oldOptions)
[17:02:19.690]             if (.Platform$OS.type == "windows") {
[17:02:19.690]                 old_names <- names(...future.oldEnvVars)
[17:02:19.690]                 envs <- base::Sys.getenv()
[17:02:19.690]                 names <- names(envs)
[17:02:19.690]                 common <- intersect(names, old_names)
[17:02:19.690]                 added <- setdiff(names, old_names)
[17:02:19.690]                 removed <- setdiff(old_names, names)
[17:02:19.690]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.690]                   envs[common]]
[17:02:19.690]                 NAMES <- toupper(changed)
[17:02:19.690]                 args <- list()
[17:02:19.690]                 for (kk in seq_along(NAMES)) {
[17:02:19.690]                   name <- changed[[kk]]
[17:02:19.690]                   NAME <- NAMES[[kk]]
[17:02:19.690]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.690]                     next
[17:02:19.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.690]                 }
[17:02:19.690]                 NAMES <- toupper(added)
[17:02:19.690]                 for (kk in seq_along(NAMES)) {
[17:02:19.690]                   name <- added[[kk]]
[17:02:19.690]                   NAME <- NAMES[[kk]]
[17:02:19.690]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.690]                     next
[17:02:19.690]                   args[[name]] <- ""
[17:02:19.690]                 }
[17:02:19.690]                 NAMES <- toupper(removed)
[17:02:19.690]                 for (kk in seq_along(NAMES)) {
[17:02:19.690]                   name <- removed[[kk]]
[17:02:19.690]                   NAME <- NAMES[[kk]]
[17:02:19.690]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.690]                     next
[17:02:19.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.690]                 }
[17:02:19.690]                 if (length(args) > 0) 
[17:02:19.690]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.690]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.690]             }
[17:02:19.690]             else {
[17:02:19.690]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.690]             }
[17:02:19.690]             {
[17:02:19.690]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.690]                   0L) {
[17:02:19.690]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.690]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.690]                   base::options(opts)
[17:02:19.690]                 }
[17:02:19.690]                 {
[17:02:19.690]                   {
[17:02:19.690]                     NULL
[17:02:19.690]                     RNGkind("Mersenne-Twister")
[17:02:19.690]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.690]                       inherits = FALSE)
[17:02:19.690]                   }
[17:02:19.690]                   options(future.plan = NULL)
[17:02:19.690]                   if (is.na(NA_character_)) 
[17:02:19.690]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.690]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.690]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.690]                     .init = FALSE)
[17:02:19.690]                 }
[17:02:19.690]             }
[17:02:19.690]         }
[17:02:19.690]     })
[17:02:19.690]     if (TRUE) {
[17:02:19.690]         base::sink(type = "output", split = FALSE)
[17:02:19.690]         if (TRUE) {
[17:02:19.690]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.690]         }
[17:02:19.690]         else {
[17:02:19.690]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.690]         }
[17:02:19.690]         base::close(...future.stdout)
[17:02:19.690]         ...future.stdout <- NULL
[17:02:19.690]     }
[17:02:19.690]     ...future.result$conditions <- ...future.conditions
[17:02:19.690]     ...future.result$finished <- base::Sys.time()
[17:02:19.690]     ...future.result
[17:02:19.690] }
[17:02:19.692] plan(): Setting new future strategy stack:
[17:02:19.692] List of future strategies:
[17:02:19.692] 1. sequential:
[17:02:19.692]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.692]    - tweaked: FALSE
[17:02:19.692]    - call: NULL
[17:02:19.693] plan(): nbrOfWorkers() = 1
[17:02:19.693] plan(): Setting new future strategy stack:
[17:02:19.694] List of future strategies:
[17:02:19.694] 1. sequential:
[17:02:19.694]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.694]    - tweaked: FALSE
[17:02:19.694]    - call: future::plan("sequential")
[17:02:19.694] plan(): nbrOfWorkers() = 1
[17:02:19.694] SequentialFuture started (and completed)
[17:02:19.694] - Launch lazy future ... done
[17:02:19.694] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[17:02:19.700] getGlobalsAndPackages() ...
[17:02:19.700] Searching for globals...
[17:02:19.702] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:02:19.702] Searching for globals ... DONE
[17:02:19.702] Resolving globals: FALSE
[17:02:19.703] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:19.703] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:02:19.703] - globals: [2] ‘rr’, ‘cc’
[17:02:19.704] 
[17:02:19.704] getGlobalsAndPackages() ... DONE
[17:02:19.704] getGlobalsAndPackages() ...
[17:02:19.704] Searching for globals...
[17:02:19.705] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:02:19.705] Searching for globals ... DONE
[17:02:19.705] Resolving globals: FALSE
[17:02:19.705] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:19.706] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:02:19.706] - globals: [2] ‘rr’, ‘cc’
[17:02:19.706] 
[17:02:19.706] getGlobalsAndPackages() ... DONE
[17:02:19.707] getGlobalsAndPackages() ...
[17:02:19.707] Searching for globals...
[17:02:19.707] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:02:19.707] Searching for globals ... DONE
[17:02:19.707] Resolving globals: FALSE
[17:02:19.708] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:19.708] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:02:19.708] - globals: [2] ‘rr’, ‘cc’
[17:02:19.708] 
[17:02:19.708] getGlobalsAndPackages() ... DONE
[17:02:19.709] getGlobalsAndPackages() ...
[17:02:19.709] Searching for globals...
[17:02:19.711] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:02:19.712] Searching for globals ... DONE
[17:02:19.712] Resolving globals: FALSE
[17:02:19.712] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:19.712] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:02:19.713] - globals: [2] ‘rr’, ‘cc’
[17:02:19.713] 
[17:02:19.713] getGlobalsAndPackages() ... DONE
[17:02:19.713] getGlobalsAndPackages() ...
[17:02:19.713] Searching for globals...
[17:02:19.714] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:02:19.714] Searching for globals ... DONE
[17:02:19.714] Resolving globals: FALSE
[17:02:19.715] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:19.715] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:02:19.715] - globals: [2] ‘rr’, ‘cc’
[17:02:19.715] 
[17:02:19.715] getGlobalsAndPackages() ... DONE
[17:02:19.716] getGlobalsAndPackages() ...
[17:02:19.716] Searching for globals...
[17:02:19.716] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[17:02:19.716] Searching for globals ... DONE
[17:02:19.717] Resolving globals: FALSE
[17:02:19.717] The total size of the 2 globals is 112 bytes (112 bytes)
[17:02:19.717] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[17:02:19.717] - globals: [2] ‘rr’, ‘cc’
[17:02:19.718] 
[17:02:19.718] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[17:02:19.718] run() for ‘Future’ ...
[17:02:19.718] - state: ‘created’
[17:02:19.718] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.718] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.719] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.719]   - Field: ‘label’
[17:02:19.719]   - Field: ‘local’
[17:02:19.719]   - Field: ‘owner’
[17:02:19.719]   - Field: ‘envir’
[17:02:19.719]   - Field: ‘packages’
[17:02:19.719]   - Field: ‘gc’
[17:02:19.719]   - Field: ‘conditions’
[17:02:19.719]   - Field: ‘expr’
[17:02:19.719]   - Field: ‘uuid’
[17:02:19.720]   - Field: ‘seed’
[17:02:19.720]   - Field: ‘version’
[17:02:19.720]   - Field: ‘result’
[17:02:19.720]   - Field: ‘asynchronous’
[17:02:19.720]   - Field: ‘calls’
[17:02:19.720]   - Field: ‘globals’
[17:02:19.720]   - Field: ‘stdout’
[17:02:19.720]   - Field: ‘earlySignal’
[17:02:19.720]   - Field: ‘lazy’
[17:02:19.720]   - Field: ‘state’
[17:02:19.720] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.721] - Launch lazy future ...
[17:02:19.721] Packages needed by the future expression (n = 0): <none>
[17:02:19.721] Packages needed by future strategies (n = 0): <none>
[17:02:19.721] {
[17:02:19.721]     {
[17:02:19.721]         {
[17:02:19.721]             ...future.startTime <- base::Sys.time()
[17:02:19.721]             {
[17:02:19.721]                 {
[17:02:19.721]                   {
[17:02:19.721]                     base::local({
[17:02:19.721]                       has_future <- base::requireNamespace("future", 
[17:02:19.721]                         quietly = TRUE)
[17:02:19.721]                       if (has_future) {
[17:02:19.721]                         ns <- base::getNamespace("future")
[17:02:19.721]                         version <- ns[[".package"]][["version"]]
[17:02:19.721]                         if (is.null(version)) 
[17:02:19.721]                           version <- utils::packageVersion("future")
[17:02:19.721]                       }
[17:02:19.721]                       else {
[17:02:19.721]                         version <- NULL
[17:02:19.721]                       }
[17:02:19.721]                       if (!has_future || version < "1.8.0") {
[17:02:19.721]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.721]                           "", base::R.version$version.string), 
[17:02:19.721]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.721]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.721]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.721]                             "release", "version")], collapse = " "), 
[17:02:19.721]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.721]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.721]                           info)
[17:02:19.721]                         info <- base::paste(info, collapse = "; ")
[17:02:19.721]                         if (!has_future) {
[17:02:19.721]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.721]                             info)
[17:02:19.721]                         }
[17:02:19.721]                         else {
[17:02:19.721]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.721]                             info, version)
[17:02:19.721]                         }
[17:02:19.721]                         base::stop(msg)
[17:02:19.721]                       }
[17:02:19.721]                     })
[17:02:19.721]                   }
[17:02:19.721]                   ...future.strategy.old <- future::plan("list")
[17:02:19.721]                   options(future.plan = NULL)
[17:02:19.721]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.721]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.721]                 }
[17:02:19.721]                 ...future.workdir <- getwd()
[17:02:19.721]             }
[17:02:19.721]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.721]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.721]         }
[17:02:19.721]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.721]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.721]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.721]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.721]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.721]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.721]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.721]             base::names(...future.oldOptions))
[17:02:19.721]     }
[17:02:19.721]     if (FALSE) {
[17:02:19.721]     }
[17:02:19.721]     else {
[17:02:19.721]         if (TRUE) {
[17:02:19.721]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.721]                 open = "w")
[17:02:19.721]         }
[17:02:19.721]         else {
[17:02:19.721]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.721]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.721]         }
[17:02:19.721]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.721]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.721]             base::sink(type = "output", split = FALSE)
[17:02:19.721]             base::close(...future.stdout)
[17:02:19.721]         }, add = TRUE)
[17:02:19.721]     }
[17:02:19.721]     ...future.frame <- base::sys.nframe()
[17:02:19.721]     ...future.conditions <- base::list()
[17:02:19.721]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.721]     if (FALSE) {
[17:02:19.721]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.721]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.721]     }
[17:02:19.721]     ...future.result <- base::tryCatch({
[17:02:19.721]         base::withCallingHandlers({
[17:02:19.721]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:02:19.721]                 rr, cc)))
[17:02:19.721]             future::FutureResult(value = ...future.value$value, 
[17:02:19.721]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.721]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.721]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.721]                     ...future.globalenv.names))
[17:02:19.721]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.721]         }, condition = base::local({
[17:02:19.721]             c <- base::c
[17:02:19.721]             inherits <- base::inherits
[17:02:19.721]             invokeRestart <- base::invokeRestart
[17:02:19.721]             length <- base::length
[17:02:19.721]             list <- base::list
[17:02:19.721]             seq.int <- base::seq.int
[17:02:19.721]             signalCondition <- base::signalCondition
[17:02:19.721]             sys.calls <- base::sys.calls
[17:02:19.721]             `[[` <- base::`[[`
[17:02:19.721]             `+` <- base::`+`
[17:02:19.721]             `<<-` <- base::`<<-`
[17:02:19.721]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.721]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.721]                   3L)]
[17:02:19.721]             }
[17:02:19.721]             function(cond) {
[17:02:19.721]                 is_error <- inherits(cond, "error")
[17:02:19.721]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.721]                   NULL)
[17:02:19.721]                 if (is_error) {
[17:02:19.721]                   sessionInformation <- function() {
[17:02:19.721]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.721]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.721]                       search = base::search(), system = base::Sys.info())
[17:02:19.721]                   }
[17:02:19.721]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.721]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.721]                     cond$call), session = sessionInformation(), 
[17:02:19.721]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.721]                   signalCondition(cond)
[17:02:19.721]                 }
[17:02:19.721]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.721]                 "immediateCondition"))) {
[17:02:19.721]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.721]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.721]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.721]                   if (TRUE && !signal) {
[17:02:19.721]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.721]                     {
[17:02:19.721]                       inherits <- base::inherits
[17:02:19.721]                       invokeRestart <- base::invokeRestart
[17:02:19.721]                       is.null <- base::is.null
[17:02:19.721]                       muffled <- FALSE
[17:02:19.721]                       if (inherits(cond, "message")) {
[17:02:19.721]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.721]                         if (muffled) 
[17:02:19.721]                           invokeRestart("muffleMessage")
[17:02:19.721]                       }
[17:02:19.721]                       else if (inherits(cond, "warning")) {
[17:02:19.721]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.721]                         if (muffled) 
[17:02:19.721]                           invokeRestart("muffleWarning")
[17:02:19.721]                       }
[17:02:19.721]                       else if (inherits(cond, "condition")) {
[17:02:19.721]                         if (!is.null(pattern)) {
[17:02:19.721]                           computeRestarts <- base::computeRestarts
[17:02:19.721]                           grepl <- base::grepl
[17:02:19.721]                           restarts <- computeRestarts(cond)
[17:02:19.721]                           for (restart in restarts) {
[17:02:19.721]                             name <- restart$name
[17:02:19.721]                             if (is.null(name)) 
[17:02:19.721]                               next
[17:02:19.721]                             if (!grepl(pattern, name)) 
[17:02:19.721]                               next
[17:02:19.721]                             invokeRestart(restart)
[17:02:19.721]                             muffled <- TRUE
[17:02:19.721]                             break
[17:02:19.721]                           }
[17:02:19.721]                         }
[17:02:19.721]                       }
[17:02:19.721]                       invisible(muffled)
[17:02:19.721]                     }
[17:02:19.721]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.721]                   }
[17:02:19.721]                 }
[17:02:19.721]                 else {
[17:02:19.721]                   if (TRUE) {
[17:02:19.721]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.721]                     {
[17:02:19.721]                       inherits <- base::inherits
[17:02:19.721]                       invokeRestart <- base::invokeRestart
[17:02:19.721]                       is.null <- base::is.null
[17:02:19.721]                       muffled <- FALSE
[17:02:19.721]                       if (inherits(cond, "message")) {
[17:02:19.721]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.721]                         if (muffled) 
[17:02:19.721]                           invokeRestart("muffleMessage")
[17:02:19.721]                       }
[17:02:19.721]                       else if (inherits(cond, "warning")) {
[17:02:19.721]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.721]                         if (muffled) 
[17:02:19.721]                           invokeRestart("muffleWarning")
[17:02:19.721]                       }
[17:02:19.721]                       else if (inherits(cond, "condition")) {
[17:02:19.721]                         if (!is.null(pattern)) {
[17:02:19.721]                           computeRestarts <- base::computeRestarts
[17:02:19.721]                           grepl <- base::grepl
[17:02:19.721]                           restarts <- computeRestarts(cond)
[17:02:19.721]                           for (restart in restarts) {
[17:02:19.721]                             name <- restart$name
[17:02:19.721]                             if (is.null(name)) 
[17:02:19.721]                               next
[17:02:19.721]                             if (!grepl(pattern, name)) 
[17:02:19.721]                               next
[17:02:19.721]                             invokeRestart(restart)
[17:02:19.721]                             muffled <- TRUE
[17:02:19.721]                             break
[17:02:19.721]                           }
[17:02:19.721]                         }
[17:02:19.721]                       }
[17:02:19.721]                       invisible(muffled)
[17:02:19.721]                     }
[17:02:19.721]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.721]                   }
[17:02:19.721]                 }
[17:02:19.721]             }
[17:02:19.721]         }))
[17:02:19.721]     }, error = function(ex) {
[17:02:19.721]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.721]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.721]                 ...future.rng), started = ...future.startTime, 
[17:02:19.721]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.721]             version = "1.8"), class = "FutureResult")
[17:02:19.721]     }, finally = {
[17:02:19.721]         if (!identical(...future.workdir, getwd())) 
[17:02:19.721]             setwd(...future.workdir)
[17:02:19.721]         {
[17:02:19.721]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.721]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.721]             }
[17:02:19.721]             base::options(...future.oldOptions)
[17:02:19.721]             if (.Platform$OS.type == "windows") {
[17:02:19.721]                 old_names <- names(...future.oldEnvVars)
[17:02:19.721]                 envs <- base::Sys.getenv()
[17:02:19.721]                 names <- names(envs)
[17:02:19.721]                 common <- intersect(names, old_names)
[17:02:19.721]                 added <- setdiff(names, old_names)
[17:02:19.721]                 removed <- setdiff(old_names, names)
[17:02:19.721]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.721]                   envs[common]]
[17:02:19.721]                 NAMES <- toupper(changed)
[17:02:19.721]                 args <- list()
[17:02:19.721]                 for (kk in seq_along(NAMES)) {
[17:02:19.721]                   name <- changed[[kk]]
[17:02:19.721]                   NAME <- NAMES[[kk]]
[17:02:19.721]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.721]                     next
[17:02:19.721]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.721]                 }
[17:02:19.721]                 NAMES <- toupper(added)
[17:02:19.721]                 for (kk in seq_along(NAMES)) {
[17:02:19.721]                   name <- added[[kk]]
[17:02:19.721]                   NAME <- NAMES[[kk]]
[17:02:19.721]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.721]                     next
[17:02:19.721]                   args[[name]] <- ""
[17:02:19.721]                 }
[17:02:19.721]                 NAMES <- toupper(removed)
[17:02:19.721]                 for (kk in seq_along(NAMES)) {
[17:02:19.721]                   name <- removed[[kk]]
[17:02:19.721]                   NAME <- NAMES[[kk]]
[17:02:19.721]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.721]                     next
[17:02:19.721]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.721]                 }
[17:02:19.721]                 if (length(args) > 0) 
[17:02:19.721]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.721]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.721]             }
[17:02:19.721]             else {
[17:02:19.721]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.721]             }
[17:02:19.721]             {
[17:02:19.721]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.721]                   0L) {
[17:02:19.721]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.721]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.721]                   base::options(opts)
[17:02:19.721]                 }
[17:02:19.721]                 {
[17:02:19.721]                   {
[17:02:19.721]                     NULL
[17:02:19.721]                     RNGkind("Mersenne-Twister")
[17:02:19.721]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.721]                       inherits = FALSE)
[17:02:19.721]                   }
[17:02:19.721]                   options(future.plan = NULL)
[17:02:19.721]                   if (is.na(NA_character_)) 
[17:02:19.721]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.721]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.721]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.721]                     .init = FALSE)
[17:02:19.721]                 }
[17:02:19.721]             }
[17:02:19.721]         }
[17:02:19.721]     })
[17:02:19.721]     if (TRUE) {
[17:02:19.721]         base::sink(type = "output", split = FALSE)
[17:02:19.721]         if (TRUE) {
[17:02:19.721]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.721]         }
[17:02:19.721]         else {
[17:02:19.721]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.721]         }
[17:02:19.721]         base::close(...future.stdout)
[17:02:19.721]         ...future.stdout <- NULL
[17:02:19.721]     }
[17:02:19.721]     ...future.result$conditions <- ...future.conditions
[17:02:19.721]     ...future.result$finished <- base::Sys.time()
[17:02:19.721]     ...future.result
[17:02:19.721] }
[17:02:19.723] assign_globals() ...
[17:02:19.723] List of 2
[17:02:19.723]  $ rr: int 1
[17:02:19.723]  $ cc: int 1
[17:02:19.723]  - attr(*, "where")=List of 2
[17:02:19.723]   ..$ rr:<environment: R_EmptyEnv> 
[17:02:19.723]   ..$ cc:<environment: R_EmptyEnv> 
[17:02:19.723]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:19.723]  - attr(*, "resolved")= logi FALSE
[17:02:19.723]  - attr(*, "total_size")= num 112
[17:02:19.723]  - attr(*, "already-done")= logi TRUE
[17:02:19.726] - copied ‘rr’ to environment
[17:02:19.726] - copied ‘cc’ to environment
[17:02:19.726] assign_globals() ... done
[17:02:19.727] plan(): Setting new future strategy stack:
[17:02:19.727] List of future strategies:
[17:02:19.727] 1. sequential:
[17:02:19.727]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.727]    - tweaked: FALSE
[17:02:19.727]    - call: NULL
[17:02:19.727] plan(): nbrOfWorkers() = 1
[17:02:19.728] plan(): Setting new future strategy stack:
[17:02:19.728] List of future strategies:
[17:02:19.728] 1. sequential:
[17:02:19.728]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.728]    - tweaked: FALSE
[17:02:19.728]    - call: future::plan("sequential")
[17:02:19.728] plan(): nbrOfWorkers() = 1
[17:02:19.729] SequentialFuture started (and completed)
[17:02:19.729] - Launch lazy future ... done
[17:02:19.729] run() for ‘SequentialFuture’ ... done
[17:02:19.729] run() for ‘Future’ ...
[17:02:19.729] - state: ‘created’
[17:02:19.729] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.730] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.730] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.730]   - Field: ‘label’
[17:02:19.730]   - Field: ‘local’
[17:02:19.730]   - Field: ‘owner’
[17:02:19.730]   - Field: ‘envir’
[17:02:19.730]   - Field: ‘packages’
[17:02:19.730]   - Field: ‘gc’
[17:02:19.730]   - Field: ‘conditions’
[17:02:19.730]   - Field: ‘expr’
[17:02:19.731]   - Field: ‘uuid’
[17:02:19.731]   - Field: ‘seed’
[17:02:19.731]   - Field: ‘version’
[17:02:19.731]   - Field: ‘result’
[17:02:19.731]   - Field: ‘asynchronous’
[17:02:19.731]   - Field: ‘calls’
[17:02:19.731]   - Field: ‘globals’
[17:02:19.731]   - Field: ‘stdout’
[17:02:19.731]   - Field: ‘earlySignal’
[17:02:19.731]   - Field: ‘lazy’
[17:02:19.731]   - Field: ‘state’
[17:02:19.732] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.732] - Launch lazy future ...
[17:02:19.732] Packages needed by the future expression (n = 0): <none>
[17:02:19.732] Packages needed by future strategies (n = 0): <none>
[17:02:19.732] {
[17:02:19.732]     {
[17:02:19.732]         {
[17:02:19.732]             ...future.startTime <- base::Sys.time()
[17:02:19.732]             {
[17:02:19.732]                 {
[17:02:19.732]                   {
[17:02:19.732]                     base::local({
[17:02:19.732]                       has_future <- base::requireNamespace("future", 
[17:02:19.732]                         quietly = TRUE)
[17:02:19.732]                       if (has_future) {
[17:02:19.732]                         ns <- base::getNamespace("future")
[17:02:19.732]                         version <- ns[[".package"]][["version"]]
[17:02:19.732]                         if (is.null(version)) 
[17:02:19.732]                           version <- utils::packageVersion("future")
[17:02:19.732]                       }
[17:02:19.732]                       else {
[17:02:19.732]                         version <- NULL
[17:02:19.732]                       }
[17:02:19.732]                       if (!has_future || version < "1.8.0") {
[17:02:19.732]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.732]                           "", base::R.version$version.string), 
[17:02:19.732]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.732]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.732]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.732]                             "release", "version")], collapse = " "), 
[17:02:19.732]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.732]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.732]                           info)
[17:02:19.732]                         info <- base::paste(info, collapse = "; ")
[17:02:19.732]                         if (!has_future) {
[17:02:19.732]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.732]                             info)
[17:02:19.732]                         }
[17:02:19.732]                         else {
[17:02:19.732]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.732]                             info, version)
[17:02:19.732]                         }
[17:02:19.732]                         base::stop(msg)
[17:02:19.732]                       }
[17:02:19.732]                     })
[17:02:19.732]                   }
[17:02:19.732]                   ...future.strategy.old <- future::plan("list")
[17:02:19.732]                   options(future.plan = NULL)
[17:02:19.732]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.732]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.732]                 }
[17:02:19.732]                 ...future.workdir <- getwd()
[17:02:19.732]             }
[17:02:19.732]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.732]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.732]         }
[17:02:19.732]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.732]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.732]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.732]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.732]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.732]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.732]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.732]             base::names(...future.oldOptions))
[17:02:19.732]     }
[17:02:19.732]     if (FALSE) {
[17:02:19.732]     }
[17:02:19.732]     else {
[17:02:19.732]         if (TRUE) {
[17:02:19.732]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.732]                 open = "w")
[17:02:19.732]         }
[17:02:19.732]         else {
[17:02:19.732]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.732]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.732]         }
[17:02:19.732]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.732]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.732]             base::sink(type = "output", split = FALSE)
[17:02:19.732]             base::close(...future.stdout)
[17:02:19.732]         }, add = TRUE)
[17:02:19.732]     }
[17:02:19.732]     ...future.frame <- base::sys.nframe()
[17:02:19.732]     ...future.conditions <- base::list()
[17:02:19.732]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.732]     if (FALSE) {
[17:02:19.732]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.732]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.732]     }
[17:02:19.732]     ...future.result <- base::tryCatch({
[17:02:19.732]         base::withCallingHandlers({
[17:02:19.732]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:02:19.732]                 rr, cc)))
[17:02:19.732]             future::FutureResult(value = ...future.value$value, 
[17:02:19.732]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.732]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.732]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.732]                     ...future.globalenv.names))
[17:02:19.732]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.732]         }, condition = base::local({
[17:02:19.732]             c <- base::c
[17:02:19.732]             inherits <- base::inherits
[17:02:19.732]             invokeRestart <- base::invokeRestart
[17:02:19.732]             length <- base::length
[17:02:19.732]             list <- base::list
[17:02:19.732]             seq.int <- base::seq.int
[17:02:19.732]             signalCondition <- base::signalCondition
[17:02:19.732]             sys.calls <- base::sys.calls
[17:02:19.732]             `[[` <- base::`[[`
[17:02:19.732]             `+` <- base::`+`
[17:02:19.732]             `<<-` <- base::`<<-`
[17:02:19.732]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.732]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.732]                   3L)]
[17:02:19.732]             }
[17:02:19.732]             function(cond) {
[17:02:19.732]                 is_error <- inherits(cond, "error")
[17:02:19.732]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.732]                   NULL)
[17:02:19.732]                 if (is_error) {
[17:02:19.732]                   sessionInformation <- function() {
[17:02:19.732]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.732]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.732]                       search = base::search(), system = base::Sys.info())
[17:02:19.732]                   }
[17:02:19.732]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.732]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.732]                     cond$call), session = sessionInformation(), 
[17:02:19.732]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.732]                   signalCondition(cond)
[17:02:19.732]                 }
[17:02:19.732]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.732]                 "immediateCondition"))) {
[17:02:19.732]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.732]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.732]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.732]                   if (TRUE && !signal) {
[17:02:19.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.732]                     {
[17:02:19.732]                       inherits <- base::inherits
[17:02:19.732]                       invokeRestart <- base::invokeRestart
[17:02:19.732]                       is.null <- base::is.null
[17:02:19.732]                       muffled <- FALSE
[17:02:19.732]                       if (inherits(cond, "message")) {
[17:02:19.732]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.732]                         if (muffled) 
[17:02:19.732]                           invokeRestart("muffleMessage")
[17:02:19.732]                       }
[17:02:19.732]                       else if (inherits(cond, "warning")) {
[17:02:19.732]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.732]                         if (muffled) 
[17:02:19.732]                           invokeRestart("muffleWarning")
[17:02:19.732]                       }
[17:02:19.732]                       else if (inherits(cond, "condition")) {
[17:02:19.732]                         if (!is.null(pattern)) {
[17:02:19.732]                           computeRestarts <- base::computeRestarts
[17:02:19.732]                           grepl <- base::grepl
[17:02:19.732]                           restarts <- computeRestarts(cond)
[17:02:19.732]                           for (restart in restarts) {
[17:02:19.732]                             name <- restart$name
[17:02:19.732]                             if (is.null(name)) 
[17:02:19.732]                               next
[17:02:19.732]                             if (!grepl(pattern, name)) 
[17:02:19.732]                               next
[17:02:19.732]                             invokeRestart(restart)
[17:02:19.732]                             muffled <- TRUE
[17:02:19.732]                             break
[17:02:19.732]                           }
[17:02:19.732]                         }
[17:02:19.732]                       }
[17:02:19.732]                       invisible(muffled)
[17:02:19.732]                     }
[17:02:19.732]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.732]                   }
[17:02:19.732]                 }
[17:02:19.732]                 else {
[17:02:19.732]                   if (TRUE) {
[17:02:19.732]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.732]                     {
[17:02:19.732]                       inherits <- base::inherits
[17:02:19.732]                       invokeRestart <- base::invokeRestart
[17:02:19.732]                       is.null <- base::is.null
[17:02:19.732]                       muffled <- FALSE
[17:02:19.732]                       if (inherits(cond, "message")) {
[17:02:19.732]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.732]                         if (muffled) 
[17:02:19.732]                           invokeRestart("muffleMessage")
[17:02:19.732]                       }
[17:02:19.732]                       else if (inherits(cond, "warning")) {
[17:02:19.732]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.732]                         if (muffled) 
[17:02:19.732]                           invokeRestart("muffleWarning")
[17:02:19.732]                       }
[17:02:19.732]                       else if (inherits(cond, "condition")) {
[17:02:19.732]                         if (!is.null(pattern)) {
[17:02:19.732]                           computeRestarts <- base::computeRestarts
[17:02:19.732]                           grepl <- base::grepl
[17:02:19.732]                           restarts <- computeRestarts(cond)
[17:02:19.732]                           for (restart in restarts) {
[17:02:19.732]                             name <- restart$name
[17:02:19.732]                             if (is.null(name)) 
[17:02:19.732]                               next
[17:02:19.732]                             if (!grepl(pattern, name)) 
[17:02:19.732]                               next
[17:02:19.732]                             invokeRestart(restart)
[17:02:19.732]                             muffled <- TRUE
[17:02:19.732]                             break
[17:02:19.732]                           }
[17:02:19.732]                         }
[17:02:19.732]                       }
[17:02:19.732]                       invisible(muffled)
[17:02:19.732]                     }
[17:02:19.732]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.732]                   }
[17:02:19.732]                 }
[17:02:19.732]             }
[17:02:19.732]         }))
[17:02:19.732]     }, error = function(ex) {
[17:02:19.732]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.732]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.732]                 ...future.rng), started = ...future.startTime, 
[17:02:19.732]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.732]             version = "1.8"), class = "FutureResult")
[17:02:19.732]     }, finally = {
[17:02:19.732]         if (!identical(...future.workdir, getwd())) 
[17:02:19.732]             setwd(...future.workdir)
[17:02:19.732]         {
[17:02:19.732]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.732]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.732]             }
[17:02:19.732]             base::options(...future.oldOptions)
[17:02:19.732]             if (.Platform$OS.type == "windows") {
[17:02:19.732]                 old_names <- names(...future.oldEnvVars)
[17:02:19.732]                 envs <- base::Sys.getenv()
[17:02:19.732]                 names <- names(envs)
[17:02:19.732]                 common <- intersect(names, old_names)
[17:02:19.732]                 added <- setdiff(names, old_names)
[17:02:19.732]                 removed <- setdiff(old_names, names)
[17:02:19.732]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.732]                   envs[common]]
[17:02:19.732]                 NAMES <- toupper(changed)
[17:02:19.732]                 args <- list()
[17:02:19.732]                 for (kk in seq_along(NAMES)) {
[17:02:19.732]                   name <- changed[[kk]]
[17:02:19.732]                   NAME <- NAMES[[kk]]
[17:02:19.732]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.732]                     next
[17:02:19.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.732]                 }
[17:02:19.732]                 NAMES <- toupper(added)
[17:02:19.732]                 for (kk in seq_along(NAMES)) {
[17:02:19.732]                   name <- added[[kk]]
[17:02:19.732]                   NAME <- NAMES[[kk]]
[17:02:19.732]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.732]                     next
[17:02:19.732]                   args[[name]] <- ""
[17:02:19.732]                 }
[17:02:19.732]                 NAMES <- toupper(removed)
[17:02:19.732]                 for (kk in seq_along(NAMES)) {
[17:02:19.732]                   name <- removed[[kk]]
[17:02:19.732]                   NAME <- NAMES[[kk]]
[17:02:19.732]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.732]                     next
[17:02:19.732]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.732]                 }
[17:02:19.732]                 if (length(args) > 0) 
[17:02:19.732]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.732]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.732]             }
[17:02:19.732]             else {
[17:02:19.732]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.732]             }
[17:02:19.732]             {
[17:02:19.732]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.732]                   0L) {
[17:02:19.732]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.732]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.732]                   base::options(opts)
[17:02:19.732]                 }
[17:02:19.732]                 {
[17:02:19.732]                   {
[17:02:19.732]                     NULL
[17:02:19.732]                     RNGkind("Mersenne-Twister")
[17:02:19.732]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.732]                       inherits = FALSE)
[17:02:19.732]                   }
[17:02:19.732]                   options(future.plan = NULL)
[17:02:19.732]                   if (is.na(NA_character_)) 
[17:02:19.732]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.732]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.732]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.732]                     .init = FALSE)
[17:02:19.732]                 }
[17:02:19.732]             }
[17:02:19.732]         }
[17:02:19.732]     })
[17:02:19.732]     if (TRUE) {
[17:02:19.732]         base::sink(type = "output", split = FALSE)
[17:02:19.732]         if (TRUE) {
[17:02:19.732]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.732]         }
[17:02:19.732]         else {
[17:02:19.732]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.732]         }
[17:02:19.732]         base::close(...future.stdout)
[17:02:19.732]         ...future.stdout <- NULL
[17:02:19.732]     }
[17:02:19.732]     ...future.result$conditions <- ...future.conditions
[17:02:19.732]     ...future.result$finished <- base::Sys.time()
[17:02:19.732]     ...future.result
[17:02:19.732] }
[17:02:19.734] assign_globals() ...
[17:02:19.734] List of 2
[17:02:19.734]  $ rr: int 2
[17:02:19.734]  $ cc: int 1
[17:02:19.734]  - attr(*, "where")=List of 2
[17:02:19.734]   ..$ rr:<environment: R_EmptyEnv> 
[17:02:19.734]   ..$ cc:<environment: R_EmptyEnv> 
[17:02:19.734]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:19.734]  - attr(*, "resolved")= logi FALSE
[17:02:19.734]  - attr(*, "total_size")= num 112
[17:02:19.734]  - attr(*, "already-done")= logi TRUE
[17:02:19.737] - copied ‘rr’ to environment
[17:02:19.737] - copied ‘cc’ to environment
[17:02:19.737] assign_globals() ... done
[17:02:19.738] plan(): Setting new future strategy stack:
[17:02:19.738] List of future strategies:
[17:02:19.738] 1. sequential:
[17:02:19.738]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.738]    - tweaked: FALSE
[17:02:19.738]    - call: NULL
[17:02:19.738] plan(): nbrOfWorkers() = 1
[17:02:19.739] plan(): Setting new future strategy stack:
[17:02:19.739] List of future strategies:
[17:02:19.739] 1. sequential:
[17:02:19.739]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.739]    - tweaked: FALSE
[17:02:19.739]    - call: future::plan("sequential")
[17:02:19.740] plan(): nbrOfWorkers() = 1
[17:02:19.740] SequentialFuture started (and completed)
[17:02:19.740] - Launch lazy future ... done
[17:02:19.740] run() for ‘SequentialFuture’ ... done
[17:02:19.740] run() for ‘Future’ ...
[17:02:19.740] - state: ‘created’
[17:02:19.740] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.741] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.741] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.741]   - Field: ‘label’
[17:02:19.741]   - Field: ‘local’
[17:02:19.741]   - Field: ‘owner’
[17:02:19.741]   - Field: ‘envir’
[17:02:19.743]   - Field: ‘packages’
[17:02:19.743]   - Field: ‘gc’
[17:02:19.743]   - Field: ‘conditions’
[17:02:19.743]   - Field: ‘expr’
[17:02:19.743]   - Field: ‘uuid’
[17:02:19.744]   - Field: ‘seed’
[17:02:19.744]   - Field: ‘version’
[17:02:19.744]   - Field: ‘result’
[17:02:19.744]   - Field: ‘asynchronous’
[17:02:19.744]   - Field: ‘calls’
[17:02:19.744]   - Field: ‘globals’
[17:02:19.744]   - Field: ‘stdout’
[17:02:19.744]   - Field: ‘earlySignal’
[17:02:19.744]   - Field: ‘lazy’
[17:02:19.744]   - Field: ‘state’
[17:02:19.744] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.745] - Launch lazy future ...
[17:02:19.745] Packages needed by the future expression (n = 0): <none>
[17:02:19.745] Packages needed by future strategies (n = 0): <none>
[17:02:19.745] {
[17:02:19.745]     {
[17:02:19.745]         {
[17:02:19.745]             ...future.startTime <- base::Sys.time()
[17:02:19.745]             {
[17:02:19.745]                 {
[17:02:19.745]                   {
[17:02:19.745]                     base::local({
[17:02:19.745]                       has_future <- base::requireNamespace("future", 
[17:02:19.745]                         quietly = TRUE)
[17:02:19.745]                       if (has_future) {
[17:02:19.745]                         ns <- base::getNamespace("future")
[17:02:19.745]                         version <- ns[[".package"]][["version"]]
[17:02:19.745]                         if (is.null(version)) 
[17:02:19.745]                           version <- utils::packageVersion("future")
[17:02:19.745]                       }
[17:02:19.745]                       else {
[17:02:19.745]                         version <- NULL
[17:02:19.745]                       }
[17:02:19.745]                       if (!has_future || version < "1.8.0") {
[17:02:19.745]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.745]                           "", base::R.version$version.string), 
[17:02:19.745]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.745]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.745]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.745]                             "release", "version")], collapse = " "), 
[17:02:19.745]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.745]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.745]                           info)
[17:02:19.745]                         info <- base::paste(info, collapse = "; ")
[17:02:19.745]                         if (!has_future) {
[17:02:19.745]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.745]                             info)
[17:02:19.745]                         }
[17:02:19.745]                         else {
[17:02:19.745]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.745]                             info, version)
[17:02:19.745]                         }
[17:02:19.745]                         base::stop(msg)
[17:02:19.745]                       }
[17:02:19.745]                     })
[17:02:19.745]                   }
[17:02:19.745]                   ...future.strategy.old <- future::plan("list")
[17:02:19.745]                   options(future.plan = NULL)
[17:02:19.745]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.745]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.745]                 }
[17:02:19.745]                 ...future.workdir <- getwd()
[17:02:19.745]             }
[17:02:19.745]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.745]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.745]         }
[17:02:19.745]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.745]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.745]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.745]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.745]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.745]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.745]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.745]             base::names(...future.oldOptions))
[17:02:19.745]     }
[17:02:19.745]     if (FALSE) {
[17:02:19.745]     }
[17:02:19.745]     else {
[17:02:19.745]         if (TRUE) {
[17:02:19.745]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.745]                 open = "w")
[17:02:19.745]         }
[17:02:19.745]         else {
[17:02:19.745]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.745]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.745]         }
[17:02:19.745]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.745]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.745]             base::sink(type = "output", split = FALSE)
[17:02:19.745]             base::close(...future.stdout)
[17:02:19.745]         }, add = TRUE)
[17:02:19.745]     }
[17:02:19.745]     ...future.frame <- base::sys.nframe()
[17:02:19.745]     ...future.conditions <- base::list()
[17:02:19.745]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.745]     if (FALSE) {
[17:02:19.745]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.745]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.745]     }
[17:02:19.745]     ...future.result <- base::tryCatch({
[17:02:19.745]         base::withCallingHandlers({
[17:02:19.745]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:02:19.745]                 rr, cc)))
[17:02:19.745]             future::FutureResult(value = ...future.value$value, 
[17:02:19.745]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.745]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.745]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.745]                     ...future.globalenv.names))
[17:02:19.745]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.745]         }, condition = base::local({
[17:02:19.745]             c <- base::c
[17:02:19.745]             inherits <- base::inherits
[17:02:19.745]             invokeRestart <- base::invokeRestart
[17:02:19.745]             length <- base::length
[17:02:19.745]             list <- base::list
[17:02:19.745]             seq.int <- base::seq.int
[17:02:19.745]             signalCondition <- base::signalCondition
[17:02:19.745]             sys.calls <- base::sys.calls
[17:02:19.745]             `[[` <- base::`[[`
[17:02:19.745]             `+` <- base::`+`
[17:02:19.745]             `<<-` <- base::`<<-`
[17:02:19.745]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.745]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.745]                   3L)]
[17:02:19.745]             }
[17:02:19.745]             function(cond) {
[17:02:19.745]                 is_error <- inherits(cond, "error")
[17:02:19.745]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.745]                   NULL)
[17:02:19.745]                 if (is_error) {
[17:02:19.745]                   sessionInformation <- function() {
[17:02:19.745]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.745]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.745]                       search = base::search(), system = base::Sys.info())
[17:02:19.745]                   }
[17:02:19.745]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.745]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.745]                     cond$call), session = sessionInformation(), 
[17:02:19.745]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.745]                   signalCondition(cond)
[17:02:19.745]                 }
[17:02:19.745]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.745]                 "immediateCondition"))) {
[17:02:19.745]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.745]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.745]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.745]                   if (TRUE && !signal) {
[17:02:19.745]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.745]                     {
[17:02:19.745]                       inherits <- base::inherits
[17:02:19.745]                       invokeRestart <- base::invokeRestart
[17:02:19.745]                       is.null <- base::is.null
[17:02:19.745]                       muffled <- FALSE
[17:02:19.745]                       if (inherits(cond, "message")) {
[17:02:19.745]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.745]                         if (muffled) 
[17:02:19.745]                           invokeRestart("muffleMessage")
[17:02:19.745]                       }
[17:02:19.745]                       else if (inherits(cond, "warning")) {
[17:02:19.745]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.745]                         if (muffled) 
[17:02:19.745]                           invokeRestart("muffleWarning")
[17:02:19.745]                       }
[17:02:19.745]                       else if (inherits(cond, "condition")) {
[17:02:19.745]                         if (!is.null(pattern)) {
[17:02:19.745]                           computeRestarts <- base::computeRestarts
[17:02:19.745]                           grepl <- base::grepl
[17:02:19.745]                           restarts <- computeRestarts(cond)
[17:02:19.745]                           for (restart in restarts) {
[17:02:19.745]                             name <- restart$name
[17:02:19.745]                             if (is.null(name)) 
[17:02:19.745]                               next
[17:02:19.745]                             if (!grepl(pattern, name)) 
[17:02:19.745]                               next
[17:02:19.745]                             invokeRestart(restart)
[17:02:19.745]                             muffled <- TRUE
[17:02:19.745]                             break
[17:02:19.745]                           }
[17:02:19.745]                         }
[17:02:19.745]                       }
[17:02:19.745]                       invisible(muffled)
[17:02:19.745]                     }
[17:02:19.745]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.745]                   }
[17:02:19.745]                 }
[17:02:19.745]                 else {
[17:02:19.745]                   if (TRUE) {
[17:02:19.745]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.745]                     {
[17:02:19.745]                       inherits <- base::inherits
[17:02:19.745]                       invokeRestart <- base::invokeRestart
[17:02:19.745]                       is.null <- base::is.null
[17:02:19.745]                       muffled <- FALSE
[17:02:19.745]                       if (inherits(cond, "message")) {
[17:02:19.745]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.745]                         if (muffled) 
[17:02:19.745]                           invokeRestart("muffleMessage")
[17:02:19.745]                       }
[17:02:19.745]                       else if (inherits(cond, "warning")) {
[17:02:19.745]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.745]                         if (muffled) 
[17:02:19.745]                           invokeRestart("muffleWarning")
[17:02:19.745]                       }
[17:02:19.745]                       else if (inherits(cond, "condition")) {
[17:02:19.745]                         if (!is.null(pattern)) {
[17:02:19.745]                           computeRestarts <- base::computeRestarts
[17:02:19.745]                           grepl <- base::grepl
[17:02:19.745]                           restarts <- computeRestarts(cond)
[17:02:19.745]                           for (restart in restarts) {
[17:02:19.745]                             name <- restart$name
[17:02:19.745]                             if (is.null(name)) 
[17:02:19.745]                               next
[17:02:19.745]                             if (!grepl(pattern, name)) 
[17:02:19.745]                               next
[17:02:19.745]                             invokeRestart(restart)
[17:02:19.745]                             muffled <- TRUE
[17:02:19.745]                             break
[17:02:19.745]                           }
[17:02:19.745]                         }
[17:02:19.745]                       }
[17:02:19.745]                       invisible(muffled)
[17:02:19.745]                     }
[17:02:19.745]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.745]                   }
[17:02:19.745]                 }
[17:02:19.745]             }
[17:02:19.745]         }))
[17:02:19.745]     }, error = function(ex) {
[17:02:19.745]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.745]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.745]                 ...future.rng), started = ...future.startTime, 
[17:02:19.745]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.745]             version = "1.8"), class = "FutureResult")
[17:02:19.745]     }, finally = {
[17:02:19.745]         if (!identical(...future.workdir, getwd())) 
[17:02:19.745]             setwd(...future.workdir)
[17:02:19.745]         {
[17:02:19.745]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.745]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.745]             }
[17:02:19.745]             base::options(...future.oldOptions)
[17:02:19.745]             if (.Platform$OS.type == "windows") {
[17:02:19.745]                 old_names <- names(...future.oldEnvVars)
[17:02:19.745]                 envs <- base::Sys.getenv()
[17:02:19.745]                 names <- names(envs)
[17:02:19.745]                 common <- intersect(names, old_names)
[17:02:19.745]                 added <- setdiff(names, old_names)
[17:02:19.745]                 removed <- setdiff(old_names, names)
[17:02:19.745]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.745]                   envs[common]]
[17:02:19.745]                 NAMES <- toupper(changed)
[17:02:19.745]                 args <- list()
[17:02:19.745]                 for (kk in seq_along(NAMES)) {
[17:02:19.745]                   name <- changed[[kk]]
[17:02:19.745]                   NAME <- NAMES[[kk]]
[17:02:19.745]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.745]                     next
[17:02:19.745]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.745]                 }
[17:02:19.745]                 NAMES <- toupper(added)
[17:02:19.745]                 for (kk in seq_along(NAMES)) {
[17:02:19.745]                   name <- added[[kk]]
[17:02:19.745]                   NAME <- NAMES[[kk]]
[17:02:19.745]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.745]                     next
[17:02:19.745]                   args[[name]] <- ""
[17:02:19.745]                 }
[17:02:19.745]                 NAMES <- toupper(removed)
[17:02:19.745]                 for (kk in seq_along(NAMES)) {
[17:02:19.745]                   name <- removed[[kk]]
[17:02:19.745]                   NAME <- NAMES[[kk]]
[17:02:19.745]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.745]                     next
[17:02:19.745]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.745]                 }
[17:02:19.745]                 if (length(args) > 0) 
[17:02:19.745]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.745]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.745]             }
[17:02:19.745]             else {
[17:02:19.745]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.745]             }
[17:02:19.745]             {
[17:02:19.745]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.745]                   0L) {
[17:02:19.745]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.745]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.745]                   base::options(opts)
[17:02:19.745]                 }
[17:02:19.745]                 {
[17:02:19.745]                   {
[17:02:19.745]                     NULL
[17:02:19.745]                     RNGkind("Mersenne-Twister")
[17:02:19.745]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.745]                       inherits = FALSE)
[17:02:19.745]                   }
[17:02:19.745]                   options(future.plan = NULL)
[17:02:19.745]                   if (is.na(NA_character_)) 
[17:02:19.745]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.745]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.745]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.745]                     .init = FALSE)
[17:02:19.745]                 }
[17:02:19.745]             }
[17:02:19.745]         }
[17:02:19.745]     })
[17:02:19.745]     if (TRUE) {
[17:02:19.745]         base::sink(type = "output", split = FALSE)
[17:02:19.745]         if (TRUE) {
[17:02:19.745]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.745]         }
[17:02:19.745]         else {
[17:02:19.745]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.745]         }
[17:02:19.745]         base::close(...future.stdout)
[17:02:19.745]         ...future.stdout <- NULL
[17:02:19.745]     }
[17:02:19.745]     ...future.result$conditions <- ...future.conditions
[17:02:19.745]     ...future.result$finished <- base::Sys.time()
[17:02:19.745]     ...future.result
[17:02:19.745] }
[17:02:19.747] assign_globals() ...
[17:02:19.747] List of 2
[17:02:19.747]  $ rr: int 3
[17:02:19.747]  $ cc: int 1
[17:02:19.747]  - attr(*, "where")=List of 2
[17:02:19.747]   ..$ rr:<environment: R_EmptyEnv> 
[17:02:19.747]   ..$ cc:<environment: R_EmptyEnv> 
[17:02:19.747]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:19.747]  - attr(*, "resolved")= logi FALSE
[17:02:19.747]  - attr(*, "total_size")= num 112
[17:02:19.747]  - attr(*, "already-done")= logi TRUE
[17:02:19.750] - copied ‘rr’ to environment
[17:02:19.750] - copied ‘cc’ to environment
[17:02:19.750] assign_globals() ... done
[17:02:19.751] plan(): Setting new future strategy stack:
[17:02:19.751] List of future strategies:
[17:02:19.751] 1. sequential:
[17:02:19.751]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.751]    - tweaked: FALSE
[17:02:19.751]    - call: NULL
[17:02:19.751] plan(): nbrOfWorkers() = 1
[17:02:19.752] plan(): Setting new future strategy stack:
[17:02:19.752] List of future strategies:
[17:02:19.752] 1. sequential:
[17:02:19.752]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.752]    - tweaked: FALSE
[17:02:19.752]    - call: future::plan("sequential")
[17:02:19.753] plan(): nbrOfWorkers() = 1
[17:02:19.753] SequentialFuture started (and completed)
[17:02:19.753] - Launch lazy future ... done
[17:02:19.753] run() for ‘SequentialFuture’ ... done
[17:02:19.753] run() for ‘Future’ ...
[17:02:19.753] - state: ‘created’
[17:02:19.753] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.754] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.754] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.754]   - Field: ‘label’
[17:02:19.754]   - Field: ‘local’
[17:02:19.754]   - Field: ‘owner’
[17:02:19.754]   - Field: ‘envir’
[17:02:19.754]   - Field: ‘packages’
[17:02:19.754]   - Field: ‘gc’
[17:02:19.755]   - Field: ‘conditions’
[17:02:19.755]   - Field: ‘expr’
[17:02:19.755]   - Field: ‘uuid’
[17:02:19.755]   - Field: ‘seed’
[17:02:19.755]   - Field: ‘version’
[17:02:19.755]   - Field: ‘result’
[17:02:19.755]   - Field: ‘asynchronous’
[17:02:19.755]   - Field: ‘calls’
[17:02:19.755]   - Field: ‘globals’
[17:02:19.755]   - Field: ‘stdout’
[17:02:19.755]   - Field: ‘earlySignal’
[17:02:19.756]   - Field: ‘lazy’
[17:02:19.756]   - Field: ‘state’
[17:02:19.756] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.756] - Launch lazy future ...
[17:02:19.756] Packages needed by the future expression (n = 0): <none>
[17:02:19.756] Packages needed by future strategies (n = 0): <none>
[17:02:19.757] {
[17:02:19.757]     {
[17:02:19.757]         {
[17:02:19.757]             ...future.startTime <- base::Sys.time()
[17:02:19.757]             {
[17:02:19.757]                 {
[17:02:19.757]                   {
[17:02:19.757]                     base::local({
[17:02:19.757]                       has_future <- base::requireNamespace("future", 
[17:02:19.757]                         quietly = TRUE)
[17:02:19.757]                       if (has_future) {
[17:02:19.757]                         ns <- base::getNamespace("future")
[17:02:19.757]                         version <- ns[[".package"]][["version"]]
[17:02:19.757]                         if (is.null(version)) 
[17:02:19.757]                           version <- utils::packageVersion("future")
[17:02:19.757]                       }
[17:02:19.757]                       else {
[17:02:19.757]                         version <- NULL
[17:02:19.757]                       }
[17:02:19.757]                       if (!has_future || version < "1.8.0") {
[17:02:19.757]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.757]                           "", base::R.version$version.string), 
[17:02:19.757]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.757]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.757]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.757]                             "release", "version")], collapse = " "), 
[17:02:19.757]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.757]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.757]                           info)
[17:02:19.757]                         info <- base::paste(info, collapse = "; ")
[17:02:19.757]                         if (!has_future) {
[17:02:19.757]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.757]                             info)
[17:02:19.757]                         }
[17:02:19.757]                         else {
[17:02:19.757]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.757]                             info, version)
[17:02:19.757]                         }
[17:02:19.757]                         base::stop(msg)
[17:02:19.757]                       }
[17:02:19.757]                     })
[17:02:19.757]                   }
[17:02:19.757]                   ...future.strategy.old <- future::plan("list")
[17:02:19.757]                   options(future.plan = NULL)
[17:02:19.757]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.757]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.757]                 }
[17:02:19.757]                 ...future.workdir <- getwd()
[17:02:19.757]             }
[17:02:19.757]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.757]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.757]         }
[17:02:19.757]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.757]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.757]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.757]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.757]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.757]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.757]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.757]             base::names(...future.oldOptions))
[17:02:19.757]     }
[17:02:19.757]     if (FALSE) {
[17:02:19.757]     }
[17:02:19.757]     else {
[17:02:19.757]         if (TRUE) {
[17:02:19.757]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.757]                 open = "w")
[17:02:19.757]         }
[17:02:19.757]         else {
[17:02:19.757]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.757]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.757]         }
[17:02:19.757]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.757]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.757]             base::sink(type = "output", split = FALSE)
[17:02:19.757]             base::close(...future.stdout)
[17:02:19.757]         }, add = TRUE)
[17:02:19.757]     }
[17:02:19.757]     ...future.frame <- base::sys.nframe()
[17:02:19.757]     ...future.conditions <- base::list()
[17:02:19.757]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.757]     if (FALSE) {
[17:02:19.757]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.757]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.757]     }
[17:02:19.757]     ...future.result <- base::tryCatch({
[17:02:19.757]         base::withCallingHandlers({
[17:02:19.757]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:02:19.757]                 rr, cc)))
[17:02:19.757]             future::FutureResult(value = ...future.value$value, 
[17:02:19.757]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.757]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.757]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.757]                     ...future.globalenv.names))
[17:02:19.757]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.757]         }, condition = base::local({
[17:02:19.757]             c <- base::c
[17:02:19.757]             inherits <- base::inherits
[17:02:19.757]             invokeRestart <- base::invokeRestart
[17:02:19.757]             length <- base::length
[17:02:19.757]             list <- base::list
[17:02:19.757]             seq.int <- base::seq.int
[17:02:19.757]             signalCondition <- base::signalCondition
[17:02:19.757]             sys.calls <- base::sys.calls
[17:02:19.757]             `[[` <- base::`[[`
[17:02:19.757]             `+` <- base::`+`
[17:02:19.757]             `<<-` <- base::`<<-`
[17:02:19.757]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.757]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.757]                   3L)]
[17:02:19.757]             }
[17:02:19.757]             function(cond) {
[17:02:19.757]                 is_error <- inherits(cond, "error")
[17:02:19.757]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.757]                   NULL)
[17:02:19.757]                 if (is_error) {
[17:02:19.757]                   sessionInformation <- function() {
[17:02:19.757]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.757]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.757]                       search = base::search(), system = base::Sys.info())
[17:02:19.757]                   }
[17:02:19.757]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.757]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.757]                     cond$call), session = sessionInformation(), 
[17:02:19.757]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.757]                   signalCondition(cond)
[17:02:19.757]                 }
[17:02:19.757]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.757]                 "immediateCondition"))) {
[17:02:19.757]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.757]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.757]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.757]                   if (TRUE && !signal) {
[17:02:19.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.757]                     {
[17:02:19.757]                       inherits <- base::inherits
[17:02:19.757]                       invokeRestart <- base::invokeRestart
[17:02:19.757]                       is.null <- base::is.null
[17:02:19.757]                       muffled <- FALSE
[17:02:19.757]                       if (inherits(cond, "message")) {
[17:02:19.757]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.757]                         if (muffled) 
[17:02:19.757]                           invokeRestart("muffleMessage")
[17:02:19.757]                       }
[17:02:19.757]                       else if (inherits(cond, "warning")) {
[17:02:19.757]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.757]                         if (muffled) 
[17:02:19.757]                           invokeRestart("muffleWarning")
[17:02:19.757]                       }
[17:02:19.757]                       else if (inherits(cond, "condition")) {
[17:02:19.757]                         if (!is.null(pattern)) {
[17:02:19.757]                           computeRestarts <- base::computeRestarts
[17:02:19.757]                           grepl <- base::grepl
[17:02:19.757]                           restarts <- computeRestarts(cond)
[17:02:19.757]                           for (restart in restarts) {
[17:02:19.757]                             name <- restart$name
[17:02:19.757]                             if (is.null(name)) 
[17:02:19.757]                               next
[17:02:19.757]                             if (!grepl(pattern, name)) 
[17:02:19.757]                               next
[17:02:19.757]                             invokeRestart(restart)
[17:02:19.757]                             muffled <- TRUE
[17:02:19.757]                             break
[17:02:19.757]                           }
[17:02:19.757]                         }
[17:02:19.757]                       }
[17:02:19.757]                       invisible(muffled)
[17:02:19.757]                     }
[17:02:19.757]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.757]                   }
[17:02:19.757]                 }
[17:02:19.757]                 else {
[17:02:19.757]                   if (TRUE) {
[17:02:19.757]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.757]                     {
[17:02:19.757]                       inherits <- base::inherits
[17:02:19.757]                       invokeRestart <- base::invokeRestart
[17:02:19.757]                       is.null <- base::is.null
[17:02:19.757]                       muffled <- FALSE
[17:02:19.757]                       if (inherits(cond, "message")) {
[17:02:19.757]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.757]                         if (muffled) 
[17:02:19.757]                           invokeRestart("muffleMessage")
[17:02:19.757]                       }
[17:02:19.757]                       else if (inherits(cond, "warning")) {
[17:02:19.757]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.757]                         if (muffled) 
[17:02:19.757]                           invokeRestart("muffleWarning")
[17:02:19.757]                       }
[17:02:19.757]                       else if (inherits(cond, "condition")) {
[17:02:19.757]                         if (!is.null(pattern)) {
[17:02:19.757]                           computeRestarts <- base::computeRestarts
[17:02:19.757]                           grepl <- base::grepl
[17:02:19.757]                           restarts <- computeRestarts(cond)
[17:02:19.757]                           for (restart in restarts) {
[17:02:19.757]                             name <- restart$name
[17:02:19.757]                             if (is.null(name)) 
[17:02:19.757]                               next
[17:02:19.757]                             if (!grepl(pattern, name)) 
[17:02:19.757]                               next
[17:02:19.757]                             invokeRestart(restart)
[17:02:19.757]                             muffled <- TRUE
[17:02:19.757]                             break
[17:02:19.757]                           }
[17:02:19.757]                         }
[17:02:19.757]                       }
[17:02:19.757]                       invisible(muffled)
[17:02:19.757]                     }
[17:02:19.757]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.757]                   }
[17:02:19.757]                 }
[17:02:19.757]             }
[17:02:19.757]         }))
[17:02:19.757]     }, error = function(ex) {
[17:02:19.757]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.757]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.757]                 ...future.rng), started = ...future.startTime, 
[17:02:19.757]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.757]             version = "1.8"), class = "FutureResult")
[17:02:19.757]     }, finally = {
[17:02:19.757]         if (!identical(...future.workdir, getwd())) 
[17:02:19.757]             setwd(...future.workdir)
[17:02:19.757]         {
[17:02:19.757]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.757]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.757]             }
[17:02:19.757]             base::options(...future.oldOptions)
[17:02:19.757]             if (.Platform$OS.type == "windows") {
[17:02:19.757]                 old_names <- names(...future.oldEnvVars)
[17:02:19.757]                 envs <- base::Sys.getenv()
[17:02:19.757]                 names <- names(envs)
[17:02:19.757]                 common <- intersect(names, old_names)
[17:02:19.757]                 added <- setdiff(names, old_names)
[17:02:19.757]                 removed <- setdiff(old_names, names)
[17:02:19.757]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.757]                   envs[common]]
[17:02:19.757]                 NAMES <- toupper(changed)
[17:02:19.757]                 args <- list()
[17:02:19.757]                 for (kk in seq_along(NAMES)) {
[17:02:19.757]                   name <- changed[[kk]]
[17:02:19.757]                   NAME <- NAMES[[kk]]
[17:02:19.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.757]                     next
[17:02:19.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.757]                 }
[17:02:19.757]                 NAMES <- toupper(added)
[17:02:19.757]                 for (kk in seq_along(NAMES)) {
[17:02:19.757]                   name <- added[[kk]]
[17:02:19.757]                   NAME <- NAMES[[kk]]
[17:02:19.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.757]                     next
[17:02:19.757]                   args[[name]] <- ""
[17:02:19.757]                 }
[17:02:19.757]                 NAMES <- toupper(removed)
[17:02:19.757]                 for (kk in seq_along(NAMES)) {
[17:02:19.757]                   name <- removed[[kk]]
[17:02:19.757]                   NAME <- NAMES[[kk]]
[17:02:19.757]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.757]                     next
[17:02:19.757]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.757]                 }
[17:02:19.757]                 if (length(args) > 0) 
[17:02:19.757]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.757]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.757]             }
[17:02:19.757]             else {
[17:02:19.757]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.757]             }
[17:02:19.757]             {
[17:02:19.757]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.757]                   0L) {
[17:02:19.757]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.757]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.757]                   base::options(opts)
[17:02:19.757]                 }
[17:02:19.757]                 {
[17:02:19.757]                   {
[17:02:19.757]                     NULL
[17:02:19.757]                     RNGkind("Mersenne-Twister")
[17:02:19.757]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.757]                       inherits = FALSE)
[17:02:19.757]                   }
[17:02:19.757]                   options(future.plan = NULL)
[17:02:19.757]                   if (is.na(NA_character_)) 
[17:02:19.757]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.757]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.757]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.757]                     .init = FALSE)
[17:02:19.757]                 }
[17:02:19.757]             }
[17:02:19.757]         }
[17:02:19.757]     })
[17:02:19.757]     if (TRUE) {
[17:02:19.757]         base::sink(type = "output", split = FALSE)
[17:02:19.757]         if (TRUE) {
[17:02:19.757]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.757]         }
[17:02:19.757]         else {
[17:02:19.757]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.757]         }
[17:02:19.757]         base::close(...future.stdout)
[17:02:19.757]         ...future.stdout <- NULL
[17:02:19.757]     }
[17:02:19.757]     ...future.result$conditions <- ...future.conditions
[17:02:19.757]     ...future.result$finished <- base::Sys.time()
[17:02:19.757]     ...future.result
[17:02:19.757] }
[17:02:19.758] assign_globals() ...
[17:02:19.758] List of 2
[17:02:19.758]  $ rr: int 1
[17:02:19.758]  $ cc: int 2
[17:02:19.758]  - attr(*, "where")=List of 2
[17:02:19.758]   ..$ rr:<environment: R_EmptyEnv> 
[17:02:19.758]   ..$ cc:<environment: R_EmptyEnv> 
[17:02:19.758]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:19.758]  - attr(*, "resolved")= logi FALSE
[17:02:19.758]  - attr(*, "total_size")= num 112
[17:02:19.758]  - attr(*, "already-done")= logi TRUE
[17:02:19.761] - copied ‘rr’ to environment
[17:02:19.761] - copied ‘cc’ to environment
[17:02:19.761] assign_globals() ... done
[17:02:19.762] plan(): Setting new future strategy stack:
[17:02:19.762] List of future strategies:
[17:02:19.762] 1. sequential:
[17:02:19.762]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.762]    - tweaked: FALSE
[17:02:19.762]    - call: NULL
[17:02:19.762] plan(): nbrOfWorkers() = 1
[17:02:19.763] plan(): Setting new future strategy stack:
[17:02:19.763] List of future strategies:
[17:02:19.763] 1. sequential:
[17:02:19.763]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.763]    - tweaked: FALSE
[17:02:19.763]    - call: future::plan("sequential")
[17:02:19.763] plan(): nbrOfWorkers() = 1
[17:02:19.764] SequentialFuture started (and completed)
[17:02:19.764] - Launch lazy future ... done
[17:02:19.764] run() for ‘SequentialFuture’ ... done
[17:02:19.764] run() for ‘Future’ ...
[17:02:19.764] - state: ‘created’
[17:02:19.764] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.764] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.765] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.765]   - Field: ‘label’
[17:02:19.765]   - Field: ‘local’
[17:02:19.765]   - Field: ‘owner’
[17:02:19.765]   - Field: ‘envir’
[17:02:19.765]   - Field: ‘packages’
[17:02:19.765]   - Field: ‘gc’
[17:02:19.765]   - Field: ‘conditions’
[17:02:19.765]   - Field: ‘expr’
[17:02:19.765]   - Field: ‘uuid’
[17:02:19.766]   - Field: ‘seed’
[17:02:19.766]   - Field: ‘version’
[17:02:19.766]   - Field: ‘result’
[17:02:19.766]   - Field: ‘asynchronous’
[17:02:19.766]   - Field: ‘calls’
[17:02:19.766]   - Field: ‘globals’
[17:02:19.766]   - Field: ‘stdout’
[17:02:19.766]   - Field: ‘earlySignal’
[17:02:19.766]   - Field: ‘lazy’
[17:02:19.766]   - Field: ‘state’
[17:02:19.766] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.766] - Launch lazy future ...
[17:02:19.767] Packages needed by the future expression (n = 0): <none>
[17:02:19.767] Packages needed by future strategies (n = 0): <none>
[17:02:19.767] {
[17:02:19.767]     {
[17:02:19.767]         {
[17:02:19.767]             ...future.startTime <- base::Sys.time()
[17:02:19.767]             {
[17:02:19.767]                 {
[17:02:19.767]                   {
[17:02:19.767]                     base::local({
[17:02:19.767]                       has_future <- base::requireNamespace("future", 
[17:02:19.767]                         quietly = TRUE)
[17:02:19.767]                       if (has_future) {
[17:02:19.767]                         ns <- base::getNamespace("future")
[17:02:19.767]                         version <- ns[[".package"]][["version"]]
[17:02:19.767]                         if (is.null(version)) 
[17:02:19.767]                           version <- utils::packageVersion("future")
[17:02:19.767]                       }
[17:02:19.767]                       else {
[17:02:19.767]                         version <- NULL
[17:02:19.767]                       }
[17:02:19.767]                       if (!has_future || version < "1.8.0") {
[17:02:19.767]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.767]                           "", base::R.version$version.string), 
[17:02:19.767]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.767]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.767]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.767]                             "release", "version")], collapse = " "), 
[17:02:19.767]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.767]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.767]                           info)
[17:02:19.767]                         info <- base::paste(info, collapse = "; ")
[17:02:19.767]                         if (!has_future) {
[17:02:19.767]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.767]                             info)
[17:02:19.767]                         }
[17:02:19.767]                         else {
[17:02:19.767]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.767]                             info, version)
[17:02:19.767]                         }
[17:02:19.767]                         base::stop(msg)
[17:02:19.767]                       }
[17:02:19.767]                     })
[17:02:19.767]                   }
[17:02:19.767]                   ...future.strategy.old <- future::plan("list")
[17:02:19.767]                   options(future.plan = NULL)
[17:02:19.767]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.767]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.767]                 }
[17:02:19.767]                 ...future.workdir <- getwd()
[17:02:19.767]             }
[17:02:19.767]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.767]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.767]         }
[17:02:19.767]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.767]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.767]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.767]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.767]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.767]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.767]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.767]             base::names(...future.oldOptions))
[17:02:19.767]     }
[17:02:19.767]     if (FALSE) {
[17:02:19.767]     }
[17:02:19.767]     else {
[17:02:19.767]         if (TRUE) {
[17:02:19.767]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.767]                 open = "w")
[17:02:19.767]         }
[17:02:19.767]         else {
[17:02:19.767]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.767]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.767]         }
[17:02:19.767]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.767]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.767]             base::sink(type = "output", split = FALSE)
[17:02:19.767]             base::close(...future.stdout)
[17:02:19.767]         }, add = TRUE)
[17:02:19.767]     }
[17:02:19.767]     ...future.frame <- base::sys.nframe()
[17:02:19.767]     ...future.conditions <- base::list()
[17:02:19.767]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.767]     if (FALSE) {
[17:02:19.767]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.767]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.767]     }
[17:02:19.767]     ...future.result <- base::tryCatch({
[17:02:19.767]         base::withCallingHandlers({
[17:02:19.767]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:02:19.767]                 rr, cc)))
[17:02:19.767]             future::FutureResult(value = ...future.value$value, 
[17:02:19.767]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.767]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.767]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.767]                     ...future.globalenv.names))
[17:02:19.767]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.767]         }, condition = base::local({
[17:02:19.767]             c <- base::c
[17:02:19.767]             inherits <- base::inherits
[17:02:19.767]             invokeRestart <- base::invokeRestart
[17:02:19.767]             length <- base::length
[17:02:19.767]             list <- base::list
[17:02:19.767]             seq.int <- base::seq.int
[17:02:19.767]             signalCondition <- base::signalCondition
[17:02:19.767]             sys.calls <- base::sys.calls
[17:02:19.767]             `[[` <- base::`[[`
[17:02:19.767]             `+` <- base::`+`
[17:02:19.767]             `<<-` <- base::`<<-`
[17:02:19.767]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.767]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.767]                   3L)]
[17:02:19.767]             }
[17:02:19.767]             function(cond) {
[17:02:19.767]                 is_error <- inherits(cond, "error")
[17:02:19.767]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.767]                   NULL)
[17:02:19.767]                 if (is_error) {
[17:02:19.767]                   sessionInformation <- function() {
[17:02:19.767]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.767]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.767]                       search = base::search(), system = base::Sys.info())
[17:02:19.767]                   }
[17:02:19.767]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.767]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.767]                     cond$call), session = sessionInformation(), 
[17:02:19.767]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.767]                   signalCondition(cond)
[17:02:19.767]                 }
[17:02:19.767]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.767]                 "immediateCondition"))) {
[17:02:19.767]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.767]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.767]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.767]                   if (TRUE && !signal) {
[17:02:19.767]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.767]                     {
[17:02:19.767]                       inherits <- base::inherits
[17:02:19.767]                       invokeRestart <- base::invokeRestart
[17:02:19.767]                       is.null <- base::is.null
[17:02:19.767]                       muffled <- FALSE
[17:02:19.767]                       if (inherits(cond, "message")) {
[17:02:19.767]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.767]                         if (muffled) 
[17:02:19.767]                           invokeRestart("muffleMessage")
[17:02:19.767]                       }
[17:02:19.767]                       else if (inherits(cond, "warning")) {
[17:02:19.767]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.767]                         if (muffled) 
[17:02:19.767]                           invokeRestart("muffleWarning")
[17:02:19.767]                       }
[17:02:19.767]                       else if (inherits(cond, "condition")) {
[17:02:19.767]                         if (!is.null(pattern)) {
[17:02:19.767]                           computeRestarts <- base::computeRestarts
[17:02:19.767]                           grepl <- base::grepl
[17:02:19.767]                           restarts <- computeRestarts(cond)
[17:02:19.767]                           for (restart in restarts) {
[17:02:19.767]                             name <- restart$name
[17:02:19.767]                             if (is.null(name)) 
[17:02:19.767]                               next
[17:02:19.767]                             if (!grepl(pattern, name)) 
[17:02:19.767]                               next
[17:02:19.767]                             invokeRestart(restart)
[17:02:19.767]                             muffled <- TRUE
[17:02:19.767]                             break
[17:02:19.767]                           }
[17:02:19.767]                         }
[17:02:19.767]                       }
[17:02:19.767]                       invisible(muffled)
[17:02:19.767]                     }
[17:02:19.767]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.767]                   }
[17:02:19.767]                 }
[17:02:19.767]                 else {
[17:02:19.767]                   if (TRUE) {
[17:02:19.767]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.767]                     {
[17:02:19.767]                       inherits <- base::inherits
[17:02:19.767]                       invokeRestart <- base::invokeRestart
[17:02:19.767]                       is.null <- base::is.null
[17:02:19.767]                       muffled <- FALSE
[17:02:19.767]                       if (inherits(cond, "message")) {
[17:02:19.767]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.767]                         if (muffled) 
[17:02:19.767]                           invokeRestart("muffleMessage")
[17:02:19.767]                       }
[17:02:19.767]                       else if (inherits(cond, "warning")) {
[17:02:19.767]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.767]                         if (muffled) 
[17:02:19.767]                           invokeRestart("muffleWarning")
[17:02:19.767]                       }
[17:02:19.767]                       else if (inherits(cond, "condition")) {
[17:02:19.767]                         if (!is.null(pattern)) {
[17:02:19.767]                           computeRestarts <- base::computeRestarts
[17:02:19.767]                           grepl <- base::grepl
[17:02:19.767]                           restarts <- computeRestarts(cond)
[17:02:19.767]                           for (restart in restarts) {
[17:02:19.767]                             name <- restart$name
[17:02:19.767]                             if (is.null(name)) 
[17:02:19.767]                               next
[17:02:19.767]                             if (!grepl(pattern, name)) 
[17:02:19.767]                               next
[17:02:19.767]                             invokeRestart(restart)
[17:02:19.767]                             muffled <- TRUE
[17:02:19.767]                             break
[17:02:19.767]                           }
[17:02:19.767]                         }
[17:02:19.767]                       }
[17:02:19.767]                       invisible(muffled)
[17:02:19.767]                     }
[17:02:19.767]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.767]                   }
[17:02:19.767]                 }
[17:02:19.767]             }
[17:02:19.767]         }))
[17:02:19.767]     }, error = function(ex) {
[17:02:19.767]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.767]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.767]                 ...future.rng), started = ...future.startTime, 
[17:02:19.767]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.767]             version = "1.8"), class = "FutureResult")
[17:02:19.767]     }, finally = {
[17:02:19.767]         if (!identical(...future.workdir, getwd())) 
[17:02:19.767]             setwd(...future.workdir)
[17:02:19.767]         {
[17:02:19.767]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.767]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.767]             }
[17:02:19.767]             base::options(...future.oldOptions)
[17:02:19.767]             if (.Platform$OS.type == "windows") {
[17:02:19.767]                 old_names <- names(...future.oldEnvVars)
[17:02:19.767]                 envs <- base::Sys.getenv()
[17:02:19.767]                 names <- names(envs)
[17:02:19.767]                 common <- intersect(names, old_names)
[17:02:19.767]                 added <- setdiff(names, old_names)
[17:02:19.767]                 removed <- setdiff(old_names, names)
[17:02:19.767]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.767]                   envs[common]]
[17:02:19.767]                 NAMES <- toupper(changed)
[17:02:19.767]                 args <- list()
[17:02:19.767]                 for (kk in seq_along(NAMES)) {
[17:02:19.767]                   name <- changed[[kk]]
[17:02:19.767]                   NAME <- NAMES[[kk]]
[17:02:19.767]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.767]                     next
[17:02:19.767]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.767]                 }
[17:02:19.767]                 NAMES <- toupper(added)
[17:02:19.767]                 for (kk in seq_along(NAMES)) {
[17:02:19.767]                   name <- added[[kk]]
[17:02:19.767]                   NAME <- NAMES[[kk]]
[17:02:19.767]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.767]                     next
[17:02:19.767]                   args[[name]] <- ""
[17:02:19.767]                 }
[17:02:19.767]                 NAMES <- toupper(removed)
[17:02:19.767]                 for (kk in seq_along(NAMES)) {
[17:02:19.767]                   name <- removed[[kk]]
[17:02:19.767]                   NAME <- NAMES[[kk]]
[17:02:19.767]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.767]                     next
[17:02:19.767]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.767]                 }
[17:02:19.767]                 if (length(args) > 0) 
[17:02:19.767]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.767]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.767]             }
[17:02:19.767]             else {
[17:02:19.767]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.767]             }
[17:02:19.767]             {
[17:02:19.767]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.767]                   0L) {
[17:02:19.767]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.767]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.767]                   base::options(opts)
[17:02:19.767]                 }
[17:02:19.767]                 {
[17:02:19.767]                   {
[17:02:19.767]                     NULL
[17:02:19.767]                     RNGkind("Mersenne-Twister")
[17:02:19.767]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.767]                       inherits = FALSE)
[17:02:19.767]                   }
[17:02:19.767]                   options(future.plan = NULL)
[17:02:19.767]                   if (is.na(NA_character_)) 
[17:02:19.767]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.767]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.767]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.767]                     .init = FALSE)
[17:02:19.767]                 }
[17:02:19.767]             }
[17:02:19.767]         }
[17:02:19.767]     })
[17:02:19.767]     if (TRUE) {
[17:02:19.767]         base::sink(type = "output", split = FALSE)
[17:02:19.767]         if (TRUE) {
[17:02:19.767]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.767]         }
[17:02:19.767]         else {
[17:02:19.767]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.767]         }
[17:02:19.767]         base::close(...future.stdout)
[17:02:19.767]         ...future.stdout <- NULL
[17:02:19.767]     }
[17:02:19.767]     ...future.result$conditions <- ...future.conditions
[17:02:19.767]     ...future.result$finished <- base::Sys.time()
[17:02:19.767]     ...future.result
[17:02:19.767] }
[17:02:19.769] assign_globals() ...
[17:02:19.769] List of 2
[17:02:19.769]  $ rr: int 2
[17:02:19.769]  $ cc: int 2
[17:02:19.769]  - attr(*, "where")=List of 2
[17:02:19.769]   ..$ rr:<environment: R_EmptyEnv> 
[17:02:19.769]   ..$ cc:<environment: R_EmptyEnv> 
[17:02:19.769]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:19.769]  - attr(*, "resolved")= logi FALSE
[17:02:19.769]  - attr(*, "total_size")= num 112
[17:02:19.769]  - attr(*, "already-done")= logi TRUE
[17:02:19.772] - copied ‘rr’ to environment
[17:02:19.772] - copied ‘cc’ to environment
[17:02:19.772] assign_globals() ... done
[17:02:19.772] plan(): Setting new future strategy stack:
[17:02:19.772] List of future strategies:
[17:02:19.772] 1. sequential:
[17:02:19.772]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.772]    - tweaked: FALSE
[17:02:19.772]    - call: NULL
[17:02:19.773] plan(): nbrOfWorkers() = 1
[17:02:19.775] plan(): Setting new future strategy stack:
[17:02:19.775] List of future strategies:
[17:02:19.775] 1. sequential:
[17:02:19.775]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.775]    - tweaked: FALSE
[17:02:19.775]    - call: future::plan("sequential")
[17:02:19.776] plan(): nbrOfWorkers() = 1
[17:02:19.776] SequentialFuture started (and completed)
[17:02:19.776] - Launch lazy future ... done
[17:02:19.776] run() for ‘SequentialFuture’ ... done
[17:02:19.776] run() for ‘Future’ ...
[17:02:19.776] - state: ‘created’
[17:02:19.777] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:19.777] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:19.777] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:19.777]   - Field: ‘label’
[17:02:19.777]   - Field: ‘local’
[17:02:19.777]   - Field: ‘owner’
[17:02:19.777]   - Field: ‘envir’
[17:02:19.778]   - Field: ‘packages’
[17:02:19.778]   - Field: ‘gc’
[17:02:19.778]   - Field: ‘conditions’
[17:02:19.778]   - Field: ‘expr’
[17:02:19.778]   - Field: ‘uuid’
[17:02:19.778]   - Field: ‘seed’
[17:02:19.778]   - Field: ‘version’
[17:02:19.778]   - Field: ‘result’
[17:02:19.778]   - Field: ‘asynchronous’
[17:02:19.778]   - Field: ‘calls’
[17:02:19.778]   - Field: ‘globals’
[17:02:19.779]   - Field: ‘stdout’
[17:02:19.779]   - Field: ‘earlySignal’
[17:02:19.779]   - Field: ‘lazy’
[17:02:19.779]   - Field: ‘state’
[17:02:19.779] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:19.779] - Launch lazy future ...
[17:02:19.779] Packages needed by the future expression (n = 0): <none>
[17:02:19.779] Packages needed by future strategies (n = 0): <none>
[17:02:19.780] {
[17:02:19.780]     {
[17:02:19.780]         {
[17:02:19.780]             ...future.startTime <- base::Sys.time()
[17:02:19.780]             {
[17:02:19.780]                 {
[17:02:19.780]                   {
[17:02:19.780]                     base::local({
[17:02:19.780]                       has_future <- base::requireNamespace("future", 
[17:02:19.780]                         quietly = TRUE)
[17:02:19.780]                       if (has_future) {
[17:02:19.780]                         ns <- base::getNamespace("future")
[17:02:19.780]                         version <- ns[[".package"]][["version"]]
[17:02:19.780]                         if (is.null(version)) 
[17:02:19.780]                           version <- utils::packageVersion("future")
[17:02:19.780]                       }
[17:02:19.780]                       else {
[17:02:19.780]                         version <- NULL
[17:02:19.780]                       }
[17:02:19.780]                       if (!has_future || version < "1.8.0") {
[17:02:19.780]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:19.780]                           "", base::R.version$version.string), 
[17:02:19.780]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:19.780]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:19.780]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:19.780]                             "release", "version")], collapse = " "), 
[17:02:19.780]                           hostname = base::Sys.info()[["nodename"]])
[17:02:19.780]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:19.780]                           info)
[17:02:19.780]                         info <- base::paste(info, collapse = "; ")
[17:02:19.780]                         if (!has_future) {
[17:02:19.780]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:19.780]                             info)
[17:02:19.780]                         }
[17:02:19.780]                         else {
[17:02:19.780]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:19.780]                             info, version)
[17:02:19.780]                         }
[17:02:19.780]                         base::stop(msg)
[17:02:19.780]                       }
[17:02:19.780]                     })
[17:02:19.780]                   }
[17:02:19.780]                   ...future.strategy.old <- future::plan("list")
[17:02:19.780]                   options(future.plan = NULL)
[17:02:19.780]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.780]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:19.780]                 }
[17:02:19.780]                 ...future.workdir <- getwd()
[17:02:19.780]             }
[17:02:19.780]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:19.780]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:19.780]         }
[17:02:19.780]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:19.780]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:19.780]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:19.780]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:19.780]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:19.780]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:19.780]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:19.780]             base::names(...future.oldOptions))
[17:02:19.780]     }
[17:02:19.780]     if (FALSE) {
[17:02:19.780]     }
[17:02:19.780]     else {
[17:02:19.780]         if (TRUE) {
[17:02:19.780]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:19.780]                 open = "w")
[17:02:19.780]         }
[17:02:19.780]         else {
[17:02:19.780]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:19.780]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:19.780]         }
[17:02:19.780]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:19.780]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:19.780]             base::sink(type = "output", split = FALSE)
[17:02:19.780]             base::close(...future.stdout)
[17:02:19.780]         }, add = TRUE)
[17:02:19.780]     }
[17:02:19.780]     ...future.frame <- base::sys.nframe()
[17:02:19.780]     ...future.conditions <- base::list()
[17:02:19.780]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:19.780]     if (FALSE) {
[17:02:19.780]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:19.780]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:19.780]     }
[17:02:19.780]     ...future.result <- base::tryCatch({
[17:02:19.780]         base::withCallingHandlers({
[17:02:19.780]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[17:02:19.780]                 rr, cc)))
[17:02:19.780]             future::FutureResult(value = ...future.value$value, 
[17:02:19.780]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.780]                   ...future.rng), globalenv = if (FALSE) 
[17:02:19.780]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:19.780]                     ...future.globalenv.names))
[17:02:19.780]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:19.780]         }, condition = base::local({
[17:02:19.780]             c <- base::c
[17:02:19.780]             inherits <- base::inherits
[17:02:19.780]             invokeRestart <- base::invokeRestart
[17:02:19.780]             length <- base::length
[17:02:19.780]             list <- base::list
[17:02:19.780]             seq.int <- base::seq.int
[17:02:19.780]             signalCondition <- base::signalCondition
[17:02:19.780]             sys.calls <- base::sys.calls
[17:02:19.780]             `[[` <- base::`[[`
[17:02:19.780]             `+` <- base::`+`
[17:02:19.780]             `<<-` <- base::`<<-`
[17:02:19.780]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:19.780]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:19.780]                   3L)]
[17:02:19.780]             }
[17:02:19.780]             function(cond) {
[17:02:19.780]                 is_error <- inherits(cond, "error")
[17:02:19.780]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:19.780]                   NULL)
[17:02:19.780]                 if (is_error) {
[17:02:19.780]                   sessionInformation <- function() {
[17:02:19.780]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:19.780]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:19.780]                       search = base::search(), system = base::Sys.info())
[17:02:19.780]                   }
[17:02:19.780]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.780]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:19.780]                     cond$call), session = sessionInformation(), 
[17:02:19.780]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:19.780]                   signalCondition(cond)
[17:02:19.780]                 }
[17:02:19.780]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:19.780]                 "immediateCondition"))) {
[17:02:19.780]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:19.780]                   ...future.conditions[[length(...future.conditions) + 
[17:02:19.780]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:19.780]                   if (TRUE && !signal) {
[17:02:19.780]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.780]                     {
[17:02:19.780]                       inherits <- base::inherits
[17:02:19.780]                       invokeRestart <- base::invokeRestart
[17:02:19.780]                       is.null <- base::is.null
[17:02:19.780]                       muffled <- FALSE
[17:02:19.780]                       if (inherits(cond, "message")) {
[17:02:19.780]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.780]                         if (muffled) 
[17:02:19.780]                           invokeRestart("muffleMessage")
[17:02:19.780]                       }
[17:02:19.780]                       else if (inherits(cond, "warning")) {
[17:02:19.780]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.780]                         if (muffled) 
[17:02:19.780]                           invokeRestart("muffleWarning")
[17:02:19.780]                       }
[17:02:19.780]                       else if (inherits(cond, "condition")) {
[17:02:19.780]                         if (!is.null(pattern)) {
[17:02:19.780]                           computeRestarts <- base::computeRestarts
[17:02:19.780]                           grepl <- base::grepl
[17:02:19.780]                           restarts <- computeRestarts(cond)
[17:02:19.780]                           for (restart in restarts) {
[17:02:19.780]                             name <- restart$name
[17:02:19.780]                             if (is.null(name)) 
[17:02:19.780]                               next
[17:02:19.780]                             if (!grepl(pattern, name)) 
[17:02:19.780]                               next
[17:02:19.780]                             invokeRestart(restart)
[17:02:19.780]                             muffled <- TRUE
[17:02:19.780]                             break
[17:02:19.780]                           }
[17:02:19.780]                         }
[17:02:19.780]                       }
[17:02:19.780]                       invisible(muffled)
[17:02:19.780]                     }
[17:02:19.780]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.780]                   }
[17:02:19.780]                 }
[17:02:19.780]                 else {
[17:02:19.780]                   if (TRUE) {
[17:02:19.780]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:19.780]                     {
[17:02:19.780]                       inherits <- base::inherits
[17:02:19.780]                       invokeRestart <- base::invokeRestart
[17:02:19.780]                       is.null <- base::is.null
[17:02:19.780]                       muffled <- FALSE
[17:02:19.780]                       if (inherits(cond, "message")) {
[17:02:19.780]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:19.780]                         if (muffled) 
[17:02:19.780]                           invokeRestart("muffleMessage")
[17:02:19.780]                       }
[17:02:19.780]                       else if (inherits(cond, "warning")) {
[17:02:19.780]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:19.780]                         if (muffled) 
[17:02:19.780]                           invokeRestart("muffleWarning")
[17:02:19.780]                       }
[17:02:19.780]                       else if (inherits(cond, "condition")) {
[17:02:19.780]                         if (!is.null(pattern)) {
[17:02:19.780]                           computeRestarts <- base::computeRestarts
[17:02:19.780]                           grepl <- base::grepl
[17:02:19.780]                           restarts <- computeRestarts(cond)
[17:02:19.780]                           for (restart in restarts) {
[17:02:19.780]                             name <- restart$name
[17:02:19.780]                             if (is.null(name)) 
[17:02:19.780]                               next
[17:02:19.780]                             if (!grepl(pattern, name)) 
[17:02:19.780]                               next
[17:02:19.780]                             invokeRestart(restart)
[17:02:19.780]                             muffled <- TRUE
[17:02:19.780]                             break
[17:02:19.780]                           }
[17:02:19.780]                         }
[17:02:19.780]                       }
[17:02:19.780]                       invisible(muffled)
[17:02:19.780]                     }
[17:02:19.780]                     muffleCondition(cond, pattern = "^muffle")
[17:02:19.780]                   }
[17:02:19.780]                 }
[17:02:19.780]             }
[17:02:19.780]         }))
[17:02:19.780]     }, error = function(ex) {
[17:02:19.780]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:19.780]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:19.780]                 ...future.rng), started = ...future.startTime, 
[17:02:19.780]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:19.780]             version = "1.8"), class = "FutureResult")
[17:02:19.780]     }, finally = {
[17:02:19.780]         if (!identical(...future.workdir, getwd())) 
[17:02:19.780]             setwd(...future.workdir)
[17:02:19.780]         {
[17:02:19.780]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:19.780]                 ...future.oldOptions$nwarnings <- NULL
[17:02:19.780]             }
[17:02:19.780]             base::options(...future.oldOptions)
[17:02:19.780]             if (.Platform$OS.type == "windows") {
[17:02:19.780]                 old_names <- names(...future.oldEnvVars)
[17:02:19.780]                 envs <- base::Sys.getenv()
[17:02:19.780]                 names <- names(envs)
[17:02:19.780]                 common <- intersect(names, old_names)
[17:02:19.780]                 added <- setdiff(names, old_names)
[17:02:19.780]                 removed <- setdiff(old_names, names)
[17:02:19.780]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:19.780]                   envs[common]]
[17:02:19.780]                 NAMES <- toupper(changed)
[17:02:19.780]                 args <- list()
[17:02:19.780]                 for (kk in seq_along(NAMES)) {
[17:02:19.780]                   name <- changed[[kk]]
[17:02:19.780]                   NAME <- NAMES[[kk]]
[17:02:19.780]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.780]                     next
[17:02:19.780]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.780]                 }
[17:02:19.780]                 NAMES <- toupper(added)
[17:02:19.780]                 for (kk in seq_along(NAMES)) {
[17:02:19.780]                   name <- added[[kk]]
[17:02:19.780]                   NAME <- NAMES[[kk]]
[17:02:19.780]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.780]                     next
[17:02:19.780]                   args[[name]] <- ""
[17:02:19.780]                 }
[17:02:19.780]                 NAMES <- toupper(removed)
[17:02:19.780]                 for (kk in seq_along(NAMES)) {
[17:02:19.780]                   name <- removed[[kk]]
[17:02:19.780]                   NAME <- NAMES[[kk]]
[17:02:19.780]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:19.780]                     next
[17:02:19.780]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:19.780]                 }
[17:02:19.780]                 if (length(args) > 0) 
[17:02:19.780]                   base::do.call(base::Sys.setenv, args = args)
[17:02:19.780]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:19.780]             }
[17:02:19.780]             else {
[17:02:19.780]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:19.780]             }
[17:02:19.780]             {
[17:02:19.780]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:19.780]                   0L) {
[17:02:19.780]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:19.780]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:19.780]                   base::options(opts)
[17:02:19.780]                 }
[17:02:19.780]                 {
[17:02:19.780]                   {
[17:02:19.780]                     NULL
[17:02:19.780]                     RNGkind("Mersenne-Twister")
[17:02:19.780]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:19.780]                       inherits = FALSE)
[17:02:19.780]                   }
[17:02:19.780]                   options(future.plan = NULL)
[17:02:19.780]                   if (is.na(NA_character_)) 
[17:02:19.780]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:19.780]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:19.780]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:19.780]                     .init = FALSE)
[17:02:19.780]                 }
[17:02:19.780]             }
[17:02:19.780]         }
[17:02:19.780]     })
[17:02:19.780]     if (TRUE) {
[17:02:19.780]         base::sink(type = "output", split = FALSE)
[17:02:19.780]         if (TRUE) {
[17:02:19.780]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:19.780]         }
[17:02:19.780]         else {
[17:02:19.780]             ...future.result["stdout"] <- base::list(NULL)
[17:02:19.780]         }
[17:02:19.780]         base::close(...future.stdout)
[17:02:19.780]         ...future.stdout <- NULL
[17:02:19.780]     }
[17:02:19.780]     ...future.result$conditions <- ...future.conditions
[17:02:19.780]     ...future.result$finished <- base::Sys.time()
[17:02:19.780]     ...future.result
[17:02:19.780] }
[17:02:19.781] assign_globals() ...
[17:02:19.781] List of 2
[17:02:19.781]  $ rr: int 3
[17:02:19.781]  $ cc: int 2
[17:02:19.781]  - attr(*, "where")=List of 2
[17:02:19.781]   ..$ rr:<environment: R_EmptyEnv> 
[17:02:19.781]   ..$ cc:<environment: R_EmptyEnv> 
[17:02:19.781]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:02:19.781]  - attr(*, "resolved")= logi FALSE
[17:02:19.781]  - attr(*, "total_size")= num 112
[17:02:19.781]  - attr(*, "already-done")= logi TRUE
[17:02:19.784] - copied ‘rr’ to environment
[17:02:19.784] - copied ‘cc’ to environment
[17:02:19.784] assign_globals() ... done
[17:02:19.785] plan(): Setting new future strategy stack:
[17:02:19.785] List of future strategies:
[17:02:19.785] 1. sequential:
[17:02:19.785]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.785]    - tweaked: FALSE
[17:02:19.785]    - call: NULL
[17:02:19.785] plan(): nbrOfWorkers() = 1
[17:02:19.786] plan(): Setting new future strategy stack:
[17:02:19.786] List of future strategies:
[17:02:19.786] 1. sequential:
[17:02:19.786]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.786]    - tweaked: FALSE
[17:02:19.786]    - call: future::plan("sequential")
[17:02:19.786] plan(): nbrOfWorkers() = 1
[17:02:19.787] SequentialFuture started (and completed)
[17:02:19.787] - Launch lazy future ... done
[17:02:19.787] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[17:02:19.788] plan(): Setting new future strategy stack:
[17:02:19.788] List of future strategies:
[17:02:19.788] 1. FutureStrategy:
[17:02:19.788]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:19.788]    - tweaked: FALSE
[17:02:19.788]    - call: future::plan(oplan)
[17:02:19.799] plan(): nbrOfWorkers() = 1
> 
