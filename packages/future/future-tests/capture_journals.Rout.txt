
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:01:47.300] plan(): Setting new future strategy stack:
[17:01:47.301] List of future strategies:
[17:01:47.301] 1. sequential:
[17:01:47.301]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:47.301]    - tweaked: FALSE
[17:01:47.301]    - call: future::plan("sequential")
[17:01:47.312] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[17:01:47.327] plan(): Setting new future strategy stack:
[17:01:47.327] List of future strategies:
[17:01:47.327] 1. multisession:
[17:01:47.327]    - args: function (..., workers = 2, envir = parent.frame())
[17:01:47.327]    - tweaked: TRUE
[17:01:47.327]    - call: plan(multisession, workers = 2)
[17:01:47.338] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:01:47.338] multisession:
[17:01:47.338] - args: function (..., workers = 2, envir = parent.frame())
[17:01:47.338] - tweaked: TRUE
[17:01:47.338] - call: plan(multisession, workers = 2)
[17:01:47.339] getGlobalsAndPackages() ...
[17:01:47.339] Not searching for globals
[17:01:47.340] - globals: [0] <none>
[17:01:47.340] getGlobalsAndPackages() ... DONE
[17:01:47.340] [local output] makeClusterPSOCK() ...
[17:01:47.373] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:01:47.374] [local output] Base port: 11996
[17:01:47.374] [local output] Getting setup options for 2 cluster nodes ...
[17:01:47.374] [local output]  - Node 1 of 2 ...
[17:01:47.375] [local output] localMachine=TRUE => revtunnel=FALSE

[17:01:47.375] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpbgg97B/worker.rank=1.parallelly.parent=38976.98407869dcb7.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpbgg97B/worker.rank=1.parallelly.parent=38976.98407869dcb7.pid")'’
[17:01:47.563] - Possible to infer worker's PID: TRUE
[17:01:47.564] [local output] Rscript port: 11996

[17:01:47.564] [local output]  - Node 2 of 2 ...
[17:01:47.564] [local output] localMachine=TRUE => revtunnel=FALSE

[17:01:47.565] [local output] Rscript port: 11996

[17:01:47.565] [local output] Getting setup options for 2 cluster nodes ... done
[17:01:47.565] [local output]  - Parallel setup requested for some PSOCK nodes
[17:01:47.566] [local output] Setting up PSOCK nodes in parallel
[17:01:47.566] List of 36
[17:01:47.566]  $ worker          : chr "localhost"
[17:01:47.566]   ..- attr(*, "localhost")= logi TRUE
[17:01:47.566]  $ master          : chr "localhost"
[17:01:47.566]  $ port            : int 11996
[17:01:47.566]  $ connectTimeout  : num 120
[17:01:47.566]  $ timeout         : num 2592000
[17:01:47.566]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:01:47.566]  $ homogeneous     : logi TRUE
[17:01:47.566]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:01:47.566]  $ rscript_envs    : NULL
[17:01:47.566]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:01:47.566]  $ rscript_startup : NULL
[17:01:47.566]  $ rscript_sh      : chr "sh"
[17:01:47.566]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:01:47.566]  $ methods         : logi TRUE
[17:01:47.566]  $ socketOptions   : chr "no-delay"
[17:01:47.566]  $ useXDR          : logi FALSE
[17:01:47.566]  $ outfile         : chr "/dev/null"
[17:01:47.566]  $ renice          : int NA
[17:01:47.566]  $ rshcmd          : NULL
[17:01:47.566]  $ user            : chr(0) 
[17:01:47.566]  $ revtunnel       : logi FALSE
[17:01:47.566]  $ rshlogfile      : NULL
[17:01:47.566]  $ rshopts         : chr(0) 
[17:01:47.566]  $ rank            : int 1
[17:01:47.566]  $ manual          : logi FALSE
[17:01:47.566]  $ dryrun          : logi FALSE
[17:01:47.566]  $ quiet           : logi FALSE
[17:01:47.566]  $ setup_strategy  : chr "parallel"
[17:01:47.566]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:01:47.566]  $ pidfile         : chr "/tmp/Rtmpbgg97B/worker.rank=1.parallelly.parent=38976.98407869dcb7.pid"
[17:01:47.566]  $ rshcmd_label    : NULL
[17:01:47.566]  $ rsh_call        : NULL
[17:01:47.566]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:01:47.566]  $ localMachine    : logi TRUE
[17:01:47.566]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:01:47.566]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:01:47.566]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:01:47.566]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:01:47.566]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:01:47.566]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:01:47.566]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:01:47.566]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:01:47.566]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:01:47.566]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:01:47.566]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:01:47.566]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:01:47.566]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:01:47.566]  $ arguments       :List of 28
[17:01:47.566]   ..$ worker          : chr "localhost"
[17:01:47.566]   ..$ master          : NULL
[17:01:47.566]   ..$ port            : int 11996
[17:01:47.566]   ..$ connectTimeout  : num 120
[17:01:47.566]   ..$ timeout         : num 2592000
[17:01:47.566]   ..$ rscript         : NULL
[17:01:47.566]   ..$ homogeneous     : NULL
[17:01:47.566]   ..$ rscript_args    : NULL
[17:01:47.566]   ..$ rscript_envs    : NULL
[17:01:47.566]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:01:47.566]   ..$ rscript_startup : NULL
[17:01:47.566]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:01:47.566]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:01:47.566]   ..$ methods         : logi TRUE
[17:01:47.566]   ..$ socketOptions   : chr "no-delay"
[17:01:47.566]   ..$ useXDR          : logi FALSE
[17:01:47.566]   ..$ outfile         : chr "/dev/null"
[17:01:47.566]   ..$ renice          : int NA
[17:01:47.566]   ..$ rshcmd          : NULL
[17:01:47.566]   ..$ user            : NULL
[17:01:47.566]   ..$ revtunnel       : logi NA
[17:01:47.566]   ..$ rshlogfile      : NULL
[17:01:47.566]   ..$ rshopts         : NULL
[17:01:47.566]   ..$ rank            : int 1
[17:01:47.566]   ..$ manual          : logi FALSE
[17:01:47.566]   ..$ dryrun          : logi FALSE
[17:01:47.566]   ..$ quiet           : logi FALSE
[17:01:47.566]   ..$ setup_strategy  : chr "parallel"
[17:01:47.566]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:01:47.585] [local output] System call to launch all workers:
[17:01:47.585] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpbgg97B/worker.rank=1.parallelly.parent=38976.98407869dcb7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11996 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:01:47.585] [local output] Starting PSOCK main server
[17:01:47.590] [local output] Workers launched
[17:01:47.591] [local output] Waiting for workers to connect back
[17:01:47.591]  - [local output] 0 workers out of 2 ready
[17:01:47.836]  - [local output] 0 workers out of 2 ready
[17:01:47.837]  - [local output] 1 workers out of 2 ready
[17:01:47.839]  - [local output] 1 workers out of 2 ready
[17:01:47.839]  - [local output] 2 workers out of 2 ready
[17:01:47.840] [local output] Launching of workers completed
[17:01:47.840] [local output] Collecting session information from workers
[17:01:47.841] [local output]  - Worker #1 of 2
[17:01:47.841] [local output]  - Worker #2 of 2
[17:01:47.841] [local output] makeClusterPSOCK() ... done
[17:01:47.854] Packages needed by the future expression (n = 0): <none>
[17:01:47.855] Packages needed by future strategies (n = 0): <none>
[17:01:47.855] {
[17:01:47.855]     {
[17:01:47.855]         {
[17:01:47.855]             ...future.startTime <- base::Sys.time()
[17:01:47.855]             {
[17:01:47.855]                 {
[17:01:47.855]                   {
[17:01:47.855]                     {
[17:01:47.855]                       base::local({
[17:01:47.855]                         has_future <- base::requireNamespace("future", 
[17:01:47.855]                           quietly = TRUE)
[17:01:47.855]                         if (has_future) {
[17:01:47.855]                           ns <- base::getNamespace("future")
[17:01:47.855]                           version <- ns[[".package"]][["version"]]
[17:01:47.855]                           if (is.null(version)) 
[17:01:47.855]                             version <- utils::packageVersion("future")
[17:01:47.855]                         }
[17:01:47.855]                         else {
[17:01:47.855]                           version <- NULL
[17:01:47.855]                         }
[17:01:47.855]                         if (!has_future || version < "1.8.0") {
[17:01:47.855]                           info <- base::c(r_version = base::gsub("R version ", 
[17:01:47.855]                             "", base::R.version$version.string), 
[17:01:47.855]                             platform = base::sprintf("%s (%s-bit)", 
[17:01:47.855]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:47.855]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:47.855]                               "release", "version")], collapse = " "), 
[17:01:47.855]                             hostname = base::Sys.info()[["nodename"]])
[17:01:47.855]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:01:47.855]                             info)
[17:01:47.855]                           info <- base::paste(info, collapse = "; ")
[17:01:47.855]                           if (!has_future) {
[17:01:47.855]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:47.855]                               info)
[17:01:47.855]                           }
[17:01:47.855]                           else {
[17:01:47.855]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:47.855]                               info, version)
[17:01:47.855]                           }
[17:01:47.855]                           base::stop(msg)
[17:01:47.855]                         }
[17:01:47.855]                       })
[17:01:47.855]                     }
[17:01:47.855]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:01:47.855]                     base::options(mc.cores = 1L)
[17:01:47.855]                   }
[17:01:47.855]                   ...future.strategy.old <- future::plan("list")
[17:01:47.855]                   options(future.plan = NULL)
[17:01:47.855]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:47.855]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:47.855]                 }
[17:01:47.855]                 ...future.workdir <- getwd()
[17:01:47.855]             }
[17:01:47.855]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:47.855]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:47.855]         }
[17:01:47.855]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:47.855]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:47.855]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:47.855]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:47.855]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:47.855]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:47.855]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:47.855]             base::names(...future.oldOptions))
[17:01:47.855]     }
[17:01:47.855]     if (FALSE) {
[17:01:47.855]     }
[17:01:47.855]     else {
[17:01:47.855]         if (TRUE) {
[17:01:47.855]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:47.855]                 open = "w")
[17:01:47.855]         }
[17:01:47.855]         else {
[17:01:47.855]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:47.855]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:47.855]         }
[17:01:47.855]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:47.855]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:47.855]             base::sink(type = "output", split = FALSE)
[17:01:47.855]             base::close(...future.stdout)
[17:01:47.855]         }, add = TRUE)
[17:01:47.855]     }
[17:01:47.855]     ...future.frame <- base::sys.nframe()
[17:01:47.855]     ...future.conditions <- base::list()
[17:01:47.855]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:47.855]     if (FALSE) {
[17:01:47.855]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:47.855]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:47.855]     }
[17:01:47.855]     ...future.result <- base::tryCatch({
[17:01:47.855]         base::withCallingHandlers({
[17:01:47.855]             ...future.value <- base::withVisible(base::local({
[17:01:47.855]                 ...future.makeSendCondition <- base::local({
[17:01:47.855]                   sendCondition <- NULL
[17:01:47.855]                   function(frame = 1L) {
[17:01:47.855]                     if (is.function(sendCondition)) 
[17:01:47.855]                       return(sendCondition)
[17:01:47.855]                     ns <- getNamespace("parallel")
[17:01:47.855]                     if (exists("sendData", mode = "function", 
[17:01:47.855]                       envir = ns)) {
[17:01:47.855]                       parallel_sendData <- get("sendData", mode = "function", 
[17:01:47.855]                         envir = ns)
[17:01:47.855]                       envir <- sys.frame(frame)
[17:01:47.855]                       master <- NULL
[17:01:47.855]                       while (!identical(envir, .GlobalEnv) && 
[17:01:47.855]                         !identical(envir, emptyenv())) {
[17:01:47.855]                         if (exists("master", mode = "list", envir = envir, 
[17:01:47.855]                           inherits = FALSE)) {
[17:01:47.855]                           master <- get("master", mode = "list", 
[17:01:47.855]                             envir = envir, inherits = FALSE)
[17:01:47.855]                           if (inherits(master, c("SOCKnode", 
[17:01:47.855]                             "SOCK0node"))) {
[17:01:47.855]                             sendCondition <<- function(cond) {
[17:01:47.855]                               data <- list(type = "VALUE", value = cond, 
[17:01:47.855]                                 success = TRUE)
[17:01:47.855]                               parallel_sendData(master, data)
[17:01:47.855]                             }
[17:01:47.855]                             return(sendCondition)
[17:01:47.855]                           }
[17:01:47.855]                         }
[17:01:47.855]                         frame <- frame + 1L
[17:01:47.855]                         envir <- sys.frame(frame)
[17:01:47.855]                       }
[17:01:47.855]                     }
[17:01:47.855]                     sendCondition <<- function(cond) NULL
[17:01:47.855]                   }
[17:01:47.855]                 })
[17:01:47.855]                 withCallingHandlers({
[17:01:47.855]                   NA
[17:01:47.855]                 }, immediateCondition = function(cond) {
[17:01:47.855]                   sendCondition <- ...future.makeSendCondition()
[17:01:47.855]                   sendCondition(cond)
[17:01:47.855]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:47.855]                   {
[17:01:47.855]                     inherits <- base::inherits
[17:01:47.855]                     invokeRestart <- base::invokeRestart
[17:01:47.855]                     is.null <- base::is.null
[17:01:47.855]                     muffled <- FALSE
[17:01:47.855]                     if (inherits(cond, "message")) {
[17:01:47.855]                       muffled <- grepl(pattern, "muffleMessage")
[17:01:47.855]                       if (muffled) 
[17:01:47.855]                         invokeRestart("muffleMessage")
[17:01:47.855]                     }
[17:01:47.855]                     else if (inherits(cond, "warning")) {
[17:01:47.855]                       muffled <- grepl(pattern, "muffleWarning")
[17:01:47.855]                       if (muffled) 
[17:01:47.855]                         invokeRestart("muffleWarning")
[17:01:47.855]                     }
[17:01:47.855]                     else if (inherits(cond, "condition")) {
[17:01:47.855]                       if (!is.null(pattern)) {
[17:01:47.855]                         computeRestarts <- base::computeRestarts
[17:01:47.855]                         grepl <- base::grepl
[17:01:47.855]                         restarts <- computeRestarts(cond)
[17:01:47.855]                         for (restart in restarts) {
[17:01:47.855]                           name <- restart$name
[17:01:47.855]                           if (is.null(name)) 
[17:01:47.855]                             next
[17:01:47.855]                           if (!grepl(pattern, name)) 
[17:01:47.855]                             next
[17:01:47.855]                           invokeRestart(restart)
[17:01:47.855]                           muffled <- TRUE
[17:01:47.855]                           break
[17:01:47.855]                         }
[17:01:47.855]                       }
[17:01:47.855]                     }
[17:01:47.855]                     invisible(muffled)
[17:01:47.855]                   }
[17:01:47.855]                   muffleCondition(cond)
[17:01:47.855]                 })
[17:01:47.855]             }))
[17:01:47.855]             future::FutureResult(value = ...future.value$value, 
[17:01:47.855]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:47.855]                   ...future.rng), globalenv = if (FALSE) 
[17:01:47.855]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:47.855]                     ...future.globalenv.names))
[17:01:47.855]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:47.855]         }, condition = base::local({
[17:01:47.855]             c <- base::c
[17:01:47.855]             inherits <- base::inherits
[17:01:47.855]             invokeRestart <- base::invokeRestart
[17:01:47.855]             length <- base::length
[17:01:47.855]             list <- base::list
[17:01:47.855]             seq.int <- base::seq.int
[17:01:47.855]             signalCondition <- base::signalCondition
[17:01:47.855]             sys.calls <- base::sys.calls
[17:01:47.855]             `[[` <- base::`[[`
[17:01:47.855]             `+` <- base::`+`
[17:01:47.855]             `<<-` <- base::`<<-`
[17:01:47.855]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:47.855]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:47.855]                   3L)]
[17:01:47.855]             }
[17:01:47.855]             function(cond) {
[17:01:47.855]                 is_error <- inherits(cond, "error")
[17:01:47.855]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:47.855]                   NULL)
[17:01:47.855]                 if (is_error) {
[17:01:47.855]                   sessionInformation <- function() {
[17:01:47.855]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:47.855]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:47.855]                       search = base::search(), system = base::Sys.info())
[17:01:47.855]                   }
[17:01:47.855]                   ...future.conditions[[length(...future.conditions) + 
[17:01:47.855]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:47.855]                     cond$call), session = sessionInformation(), 
[17:01:47.855]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:47.855]                   signalCondition(cond)
[17:01:47.855]                 }
[17:01:47.855]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:47.855]                 "immediateCondition"))) {
[17:01:47.855]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:47.855]                   ...future.conditions[[length(...future.conditions) + 
[17:01:47.855]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:47.855]                   if (TRUE && !signal) {
[17:01:47.855]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:47.855]                     {
[17:01:47.855]                       inherits <- base::inherits
[17:01:47.855]                       invokeRestart <- base::invokeRestart
[17:01:47.855]                       is.null <- base::is.null
[17:01:47.855]                       muffled <- FALSE
[17:01:47.855]                       if (inherits(cond, "message")) {
[17:01:47.855]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:47.855]                         if (muffled) 
[17:01:47.855]                           invokeRestart("muffleMessage")
[17:01:47.855]                       }
[17:01:47.855]                       else if (inherits(cond, "warning")) {
[17:01:47.855]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:47.855]                         if (muffled) 
[17:01:47.855]                           invokeRestart("muffleWarning")
[17:01:47.855]                       }
[17:01:47.855]                       else if (inherits(cond, "condition")) {
[17:01:47.855]                         if (!is.null(pattern)) {
[17:01:47.855]                           computeRestarts <- base::computeRestarts
[17:01:47.855]                           grepl <- base::grepl
[17:01:47.855]                           restarts <- computeRestarts(cond)
[17:01:47.855]                           for (restart in restarts) {
[17:01:47.855]                             name <- restart$name
[17:01:47.855]                             if (is.null(name)) 
[17:01:47.855]                               next
[17:01:47.855]                             if (!grepl(pattern, name)) 
[17:01:47.855]                               next
[17:01:47.855]                             invokeRestart(restart)
[17:01:47.855]                             muffled <- TRUE
[17:01:47.855]                             break
[17:01:47.855]                           }
[17:01:47.855]                         }
[17:01:47.855]                       }
[17:01:47.855]                       invisible(muffled)
[17:01:47.855]                     }
[17:01:47.855]                     muffleCondition(cond, pattern = "^muffle")
[17:01:47.855]                   }
[17:01:47.855]                 }
[17:01:47.855]                 else {
[17:01:47.855]                   if (TRUE) {
[17:01:47.855]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:47.855]                     {
[17:01:47.855]                       inherits <- base::inherits
[17:01:47.855]                       invokeRestart <- base::invokeRestart
[17:01:47.855]                       is.null <- base::is.null
[17:01:47.855]                       muffled <- FALSE
[17:01:47.855]                       if (inherits(cond, "message")) {
[17:01:47.855]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:47.855]                         if (muffled) 
[17:01:47.855]                           invokeRestart("muffleMessage")
[17:01:47.855]                       }
[17:01:47.855]                       else if (inherits(cond, "warning")) {
[17:01:47.855]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:47.855]                         if (muffled) 
[17:01:47.855]                           invokeRestart("muffleWarning")
[17:01:47.855]                       }
[17:01:47.855]                       else if (inherits(cond, "condition")) {
[17:01:47.855]                         if (!is.null(pattern)) {
[17:01:47.855]                           computeRestarts <- base::computeRestarts
[17:01:47.855]                           grepl <- base::grepl
[17:01:47.855]                           restarts <- computeRestarts(cond)
[17:01:47.855]                           for (restart in restarts) {
[17:01:47.855]                             name <- restart$name
[17:01:47.855]                             if (is.null(name)) 
[17:01:47.855]                               next
[17:01:47.855]                             if (!grepl(pattern, name)) 
[17:01:47.855]                               next
[17:01:47.855]                             invokeRestart(restart)
[17:01:47.855]                             muffled <- TRUE
[17:01:47.855]                             break
[17:01:47.855]                           }
[17:01:47.855]                         }
[17:01:47.855]                       }
[17:01:47.855]                       invisible(muffled)
[17:01:47.855]                     }
[17:01:47.855]                     muffleCondition(cond, pattern = "^muffle")
[17:01:47.855]                   }
[17:01:47.855]                 }
[17:01:47.855]             }
[17:01:47.855]         }))
[17:01:47.855]     }, error = function(ex) {
[17:01:47.855]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:47.855]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:47.855]                 ...future.rng), started = ...future.startTime, 
[17:01:47.855]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:47.855]             version = "1.8"), class = "FutureResult")
[17:01:47.855]     }, finally = {
[17:01:47.855]         if (!identical(...future.workdir, getwd())) 
[17:01:47.855]             setwd(...future.workdir)
[17:01:47.855]         {
[17:01:47.855]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:47.855]                 ...future.oldOptions$nwarnings <- NULL
[17:01:47.855]             }
[17:01:47.855]             base::options(...future.oldOptions)
[17:01:47.855]             if (.Platform$OS.type == "windows") {
[17:01:47.855]                 old_names <- names(...future.oldEnvVars)
[17:01:47.855]                 envs <- base::Sys.getenv()
[17:01:47.855]                 names <- names(envs)
[17:01:47.855]                 common <- intersect(names, old_names)
[17:01:47.855]                 added <- setdiff(names, old_names)
[17:01:47.855]                 removed <- setdiff(old_names, names)
[17:01:47.855]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:47.855]                   envs[common]]
[17:01:47.855]                 NAMES <- toupper(changed)
[17:01:47.855]                 args <- list()
[17:01:47.855]                 for (kk in seq_along(NAMES)) {
[17:01:47.855]                   name <- changed[[kk]]
[17:01:47.855]                   NAME <- NAMES[[kk]]
[17:01:47.855]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:47.855]                     next
[17:01:47.855]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:47.855]                 }
[17:01:47.855]                 NAMES <- toupper(added)
[17:01:47.855]                 for (kk in seq_along(NAMES)) {
[17:01:47.855]                   name <- added[[kk]]
[17:01:47.855]                   NAME <- NAMES[[kk]]
[17:01:47.855]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:47.855]                     next
[17:01:47.855]                   args[[name]] <- ""
[17:01:47.855]                 }
[17:01:47.855]                 NAMES <- toupper(removed)
[17:01:47.855]                 for (kk in seq_along(NAMES)) {
[17:01:47.855]                   name <- removed[[kk]]
[17:01:47.855]                   NAME <- NAMES[[kk]]
[17:01:47.855]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:47.855]                     next
[17:01:47.855]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:47.855]                 }
[17:01:47.855]                 if (length(args) > 0) 
[17:01:47.855]                   base::do.call(base::Sys.setenv, args = args)
[17:01:47.855]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:47.855]             }
[17:01:47.855]             else {
[17:01:47.855]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:47.855]             }
[17:01:47.855]             {
[17:01:47.855]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:47.855]                   0L) {
[17:01:47.855]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:47.855]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:47.855]                   base::options(opts)
[17:01:47.855]                 }
[17:01:47.855]                 {
[17:01:47.855]                   {
[17:01:47.855]                     base::options(mc.cores = ...future.mc.cores.old)
[17:01:47.855]                     NULL
[17:01:47.855]                   }
[17:01:47.855]                   options(future.plan = NULL)
[17:01:47.855]                   if (is.na(NA_character_)) 
[17:01:47.855]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:47.855]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:47.855]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:47.855]                     .init = FALSE)
[17:01:47.855]                 }
[17:01:47.855]             }
[17:01:47.855]         }
[17:01:47.855]     })
[17:01:47.855]     if (TRUE) {
[17:01:47.855]         base::sink(type = "output", split = FALSE)
[17:01:47.855]         if (TRUE) {
[17:01:47.855]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:47.855]         }
[17:01:47.855]         else {
[17:01:47.855]             ...future.result["stdout"] <- base::list(NULL)
[17:01:47.855]         }
[17:01:47.855]         base::close(...future.stdout)
[17:01:47.855]         ...future.stdout <- NULL
[17:01:47.855]     }
[17:01:47.855]     ...future.result$conditions <- ...future.conditions
[17:01:47.855]     ...future.result$finished <- base::Sys.time()
[17:01:47.855]     ...future.result
[17:01:47.855] }
[17:01:47.909] MultisessionFuture started
[17:01:47.909] result() for ClusterFuture ...
[17:01:47.910] receiveMessageFromWorker() for ClusterFuture ...
[17:01:47.910] - Validating connection of MultisessionFuture
[17:01:47.942] - received message: FutureResult
[17:01:47.942] - Received FutureResult
[17:01:47.945] - Erased future from FutureRegistry
[17:01:47.945] result() for ClusterFuture ...
[17:01:47.945] - result already collected: FutureResult
[17:01:47.945] result() for ClusterFuture ... done
[17:01:47.945] receiveMessageFromWorker() for ClusterFuture ... done
[17:01:47.945] result() for ClusterFuture ... done
[17:01:47.946] result() for ClusterFuture ...
[17:01:47.946] - result already collected: FutureResult
[17:01:47.946] result() for ClusterFuture ... done
[17:01:47.946] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:01:47.946] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[17:01:47.947] getGlobalsAndPackages() ...
[17:01:47.947] Searching for globals...
[17:01:47.953] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:01:47.953] Searching for globals ... DONE
[17:01:47.953] Resolving globals: FALSE
[17:01:47.955] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:01:47.955] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:01:47.955] - globals: [2] ‘slow_fcn’, ‘x’
[17:01:47.956] 
[17:01:47.956] getGlobalsAndPackages() ... DONE
[17:01:47.957] run() for ‘Future’ ...
[17:01:47.958] - state: ‘created’
[17:01:47.958] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:01:47.969] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:01:47.969] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:01:47.969]   - Field: ‘node’
[17:01:47.969]   - Field: ‘label’
[17:01:47.969]   - Field: ‘local’
[17:01:47.969]   - Field: ‘owner’
[17:01:47.969]   - Field: ‘envir’
[17:01:47.969]   - Field: ‘workers’
[17:01:47.969]   - Field: ‘packages’
[17:01:47.970]   - Field: ‘gc’
[17:01:47.970]   - Field: ‘conditions’
[17:01:47.970]   - Field: ‘persistent’
[17:01:47.970]   - Field: ‘expr’
[17:01:47.970]   - Field: ‘uuid’
[17:01:47.970]   - Field: ‘seed’
[17:01:47.970]   - Field: ‘version’
[17:01:47.970]   - Field: ‘result’
[17:01:47.970]   - Field: ‘asynchronous’
[17:01:47.971]   - Field: ‘calls’
[17:01:47.971]   - Field: ‘globals’
[17:01:47.971]   - Field: ‘stdout’
[17:01:47.971]   - Field: ‘earlySignal’
[17:01:47.971]   - Field: ‘lazy’
[17:01:47.971]   - Field: ‘state’
[17:01:47.971] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:01:47.971] - Launch lazy future ...
[17:01:47.972] Packages needed by the future expression (n = 0): <none>
[17:01:47.972] Packages needed by future strategies (n = 0): <none>
[17:01:47.972] {
[17:01:47.972]     {
[17:01:47.972]         {
[17:01:47.972]             ...future.startTime <- base::Sys.time()
[17:01:47.972]             {
[17:01:47.972]                 {
[17:01:47.972]                   {
[17:01:47.972]                     {
[17:01:47.972]                       base::local({
[17:01:47.972]                         has_future <- base::requireNamespace("future", 
[17:01:47.972]                           quietly = TRUE)
[17:01:47.972]                         if (has_future) {
[17:01:47.972]                           ns <- base::getNamespace("future")
[17:01:47.972]                           version <- ns[[".package"]][["version"]]
[17:01:47.972]                           if (is.null(version)) 
[17:01:47.972]                             version <- utils::packageVersion("future")
[17:01:47.972]                         }
[17:01:47.972]                         else {
[17:01:47.972]                           version <- NULL
[17:01:47.972]                         }
[17:01:47.972]                         if (!has_future || version < "1.8.0") {
[17:01:47.972]                           info <- base::c(r_version = base::gsub("R version ", 
[17:01:47.972]                             "", base::R.version$version.string), 
[17:01:47.972]                             platform = base::sprintf("%s (%s-bit)", 
[17:01:47.972]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:47.972]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:47.972]                               "release", "version")], collapse = " "), 
[17:01:47.972]                             hostname = base::Sys.info()[["nodename"]])
[17:01:47.972]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:01:47.972]                             info)
[17:01:47.972]                           info <- base::paste(info, collapse = "; ")
[17:01:47.972]                           if (!has_future) {
[17:01:47.972]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:47.972]                               info)
[17:01:47.972]                           }
[17:01:47.972]                           else {
[17:01:47.972]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:47.972]                               info, version)
[17:01:47.972]                           }
[17:01:47.972]                           base::stop(msg)
[17:01:47.972]                         }
[17:01:47.972]                       })
[17:01:47.972]                     }
[17:01:47.972]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:01:47.972]                     base::options(mc.cores = 1L)
[17:01:47.972]                   }
[17:01:47.972]                   ...future.strategy.old <- future::plan("list")
[17:01:47.972]                   options(future.plan = NULL)
[17:01:47.972]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:47.972]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:47.972]                 }
[17:01:47.972]                 ...future.workdir <- getwd()
[17:01:47.972]             }
[17:01:47.972]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:47.972]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:47.972]         }
[17:01:47.972]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:47.972]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:47.972]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:47.972]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:47.972]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:47.972]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:47.972]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:47.972]             base::names(...future.oldOptions))
[17:01:47.972]     }
[17:01:47.972]     if (FALSE) {
[17:01:47.972]     }
[17:01:47.972]     else {
[17:01:47.972]         if (TRUE) {
[17:01:47.972]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:47.972]                 open = "w")
[17:01:47.972]         }
[17:01:47.972]         else {
[17:01:47.972]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:47.972]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:47.972]         }
[17:01:47.972]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:47.972]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:47.972]             base::sink(type = "output", split = FALSE)
[17:01:47.972]             base::close(...future.stdout)
[17:01:47.972]         }, add = TRUE)
[17:01:47.972]     }
[17:01:47.972]     ...future.frame <- base::sys.nframe()
[17:01:47.972]     ...future.conditions <- base::list()
[17:01:47.972]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:47.972]     if (FALSE) {
[17:01:47.972]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:47.972]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:47.972]     }
[17:01:47.972]     ...future.result <- base::tryCatch({
[17:01:47.972]         base::withCallingHandlers({
[17:01:47.972]             ...future.value <- base::withVisible(base::local({
[17:01:47.972]                 ...future.makeSendCondition <- base::local({
[17:01:47.972]                   sendCondition <- NULL
[17:01:47.972]                   function(frame = 1L) {
[17:01:47.972]                     if (is.function(sendCondition)) 
[17:01:47.972]                       return(sendCondition)
[17:01:47.972]                     ns <- getNamespace("parallel")
[17:01:47.972]                     if (exists("sendData", mode = "function", 
[17:01:47.972]                       envir = ns)) {
[17:01:47.972]                       parallel_sendData <- get("sendData", mode = "function", 
[17:01:47.972]                         envir = ns)
[17:01:47.972]                       envir <- sys.frame(frame)
[17:01:47.972]                       master <- NULL
[17:01:47.972]                       while (!identical(envir, .GlobalEnv) && 
[17:01:47.972]                         !identical(envir, emptyenv())) {
[17:01:47.972]                         if (exists("master", mode = "list", envir = envir, 
[17:01:47.972]                           inherits = FALSE)) {
[17:01:47.972]                           master <- get("master", mode = "list", 
[17:01:47.972]                             envir = envir, inherits = FALSE)
[17:01:47.972]                           if (inherits(master, c("SOCKnode", 
[17:01:47.972]                             "SOCK0node"))) {
[17:01:47.972]                             sendCondition <<- function(cond) {
[17:01:47.972]                               data <- list(type = "VALUE", value = cond, 
[17:01:47.972]                                 success = TRUE)
[17:01:47.972]                               parallel_sendData(master, data)
[17:01:47.972]                             }
[17:01:47.972]                             return(sendCondition)
[17:01:47.972]                           }
[17:01:47.972]                         }
[17:01:47.972]                         frame <- frame + 1L
[17:01:47.972]                         envir <- sys.frame(frame)
[17:01:47.972]                       }
[17:01:47.972]                     }
[17:01:47.972]                     sendCondition <<- function(cond) NULL
[17:01:47.972]                   }
[17:01:47.972]                 })
[17:01:47.972]                 withCallingHandlers({
[17:01:47.972]                   slow_fcn(x)
[17:01:47.972]                 }, immediateCondition = function(cond) {
[17:01:47.972]                   sendCondition <- ...future.makeSendCondition()
[17:01:47.972]                   sendCondition(cond)
[17:01:47.972]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:47.972]                   {
[17:01:47.972]                     inherits <- base::inherits
[17:01:47.972]                     invokeRestart <- base::invokeRestart
[17:01:47.972]                     is.null <- base::is.null
[17:01:47.972]                     muffled <- FALSE
[17:01:47.972]                     if (inherits(cond, "message")) {
[17:01:47.972]                       muffled <- grepl(pattern, "muffleMessage")
[17:01:47.972]                       if (muffled) 
[17:01:47.972]                         invokeRestart("muffleMessage")
[17:01:47.972]                     }
[17:01:47.972]                     else if (inherits(cond, "warning")) {
[17:01:47.972]                       muffled <- grepl(pattern, "muffleWarning")
[17:01:47.972]                       if (muffled) 
[17:01:47.972]                         invokeRestart("muffleWarning")
[17:01:47.972]                     }
[17:01:47.972]                     else if (inherits(cond, "condition")) {
[17:01:47.972]                       if (!is.null(pattern)) {
[17:01:47.972]                         computeRestarts <- base::computeRestarts
[17:01:47.972]                         grepl <- base::grepl
[17:01:47.972]                         restarts <- computeRestarts(cond)
[17:01:47.972]                         for (restart in restarts) {
[17:01:47.972]                           name <- restart$name
[17:01:47.972]                           if (is.null(name)) 
[17:01:47.972]                             next
[17:01:47.972]                           if (!grepl(pattern, name)) 
[17:01:47.972]                             next
[17:01:47.972]                           invokeRestart(restart)
[17:01:47.972]                           muffled <- TRUE
[17:01:47.972]                           break
[17:01:47.972]                         }
[17:01:47.972]                       }
[17:01:47.972]                     }
[17:01:47.972]                     invisible(muffled)
[17:01:47.972]                   }
[17:01:47.972]                   muffleCondition(cond)
[17:01:47.972]                 })
[17:01:47.972]             }))
[17:01:47.972]             future::FutureResult(value = ...future.value$value, 
[17:01:47.972]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:47.972]                   ...future.rng), globalenv = if (FALSE) 
[17:01:47.972]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:47.972]                     ...future.globalenv.names))
[17:01:47.972]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:47.972]         }, condition = base::local({
[17:01:47.972]             c <- base::c
[17:01:47.972]             inherits <- base::inherits
[17:01:47.972]             invokeRestart <- base::invokeRestart
[17:01:47.972]             length <- base::length
[17:01:47.972]             list <- base::list
[17:01:47.972]             seq.int <- base::seq.int
[17:01:47.972]             signalCondition <- base::signalCondition
[17:01:47.972]             sys.calls <- base::sys.calls
[17:01:47.972]             `[[` <- base::`[[`
[17:01:47.972]             `+` <- base::`+`
[17:01:47.972]             `<<-` <- base::`<<-`
[17:01:47.972]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:47.972]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:47.972]                   3L)]
[17:01:47.972]             }
[17:01:47.972]             function(cond) {
[17:01:47.972]                 is_error <- inherits(cond, "error")
[17:01:47.972]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:47.972]                   NULL)
[17:01:47.972]                 if (is_error) {
[17:01:47.972]                   sessionInformation <- function() {
[17:01:47.972]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:47.972]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:47.972]                       search = base::search(), system = base::Sys.info())
[17:01:47.972]                   }
[17:01:47.972]                   ...future.conditions[[length(...future.conditions) + 
[17:01:47.972]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:47.972]                     cond$call), session = sessionInformation(), 
[17:01:47.972]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:47.972]                   signalCondition(cond)
[17:01:47.972]                 }
[17:01:47.972]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:47.972]                 "immediateCondition"))) {
[17:01:47.972]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:47.972]                   ...future.conditions[[length(...future.conditions) + 
[17:01:47.972]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:47.972]                   if (TRUE && !signal) {
[17:01:47.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:47.972]                     {
[17:01:47.972]                       inherits <- base::inherits
[17:01:47.972]                       invokeRestart <- base::invokeRestart
[17:01:47.972]                       is.null <- base::is.null
[17:01:47.972]                       muffled <- FALSE
[17:01:47.972]                       if (inherits(cond, "message")) {
[17:01:47.972]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:47.972]                         if (muffled) 
[17:01:47.972]                           invokeRestart("muffleMessage")
[17:01:47.972]                       }
[17:01:47.972]                       else if (inherits(cond, "warning")) {
[17:01:47.972]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:47.972]                         if (muffled) 
[17:01:47.972]                           invokeRestart("muffleWarning")
[17:01:47.972]                       }
[17:01:47.972]                       else if (inherits(cond, "condition")) {
[17:01:47.972]                         if (!is.null(pattern)) {
[17:01:47.972]                           computeRestarts <- base::computeRestarts
[17:01:47.972]                           grepl <- base::grepl
[17:01:47.972]                           restarts <- computeRestarts(cond)
[17:01:47.972]                           for (restart in restarts) {
[17:01:47.972]                             name <- restart$name
[17:01:47.972]                             if (is.null(name)) 
[17:01:47.972]                               next
[17:01:47.972]                             if (!grepl(pattern, name)) 
[17:01:47.972]                               next
[17:01:47.972]                             invokeRestart(restart)
[17:01:47.972]                             muffled <- TRUE
[17:01:47.972]                             break
[17:01:47.972]                           }
[17:01:47.972]                         }
[17:01:47.972]                       }
[17:01:47.972]                       invisible(muffled)
[17:01:47.972]                     }
[17:01:47.972]                     muffleCondition(cond, pattern = "^muffle")
[17:01:47.972]                   }
[17:01:47.972]                 }
[17:01:47.972]                 else {
[17:01:47.972]                   if (TRUE) {
[17:01:47.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:47.972]                     {
[17:01:47.972]                       inherits <- base::inherits
[17:01:47.972]                       invokeRestart <- base::invokeRestart
[17:01:47.972]                       is.null <- base::is.null
[17:01:47.972]                       muffled <- FALSE
[17:01:47.972]                       if (inherits(cond, "message")) {
[17:01:47.972]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:47.972]                         if (muffled) 
[17:01:47.972]                           invokeRestart("muffleMessage")
[17:01:47.972]                       }
[17:01:47.972]                       else if (inherits(cond, "warning")) {
[17:01:47.972]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:47.972]                         if (muffled) 
[17:01:47.972]                           invokeRestart("muffleWarning")
[17:01:47.972]                       }
[17:01:47.972]                       else if (inherits(cond, "condition")) {
[17:01:47.972]                         if (!is.null(pattern)) {
[17:01:47.972]                           computeRestarts <- base::computeRestarts
[17:01:47.972]                           grepl <- base::grepl
[17:01:47.972]                           restarts <- computeRestarts(cond)
[17:01:47.972]                           for (restart in restarts) {
[17:01:47.972]                             name <- restart$name
[17:01:47.972]                             if (is.null(name)) 
[17:01:47.972]                               next
[17:01:47.972]                             if (!grepl(pattern, name)) 
[17:01:47.972]                               next
[17:01:47.972]                             invokeRestart(restart)
[17:01:47.972]                             muffled <- TRUE
[17:01:47.972]                             break
[17:01:47.972]                           }
[17:01:47.972]                         }
[17:01:47.972]                       }
[17:01:47.972]                       invisible(muffled)
[17:01:47.972]                     }
[17:01:47.972]                     muffleCondition(cond, pattern = "^muffle")
[17:01:47.972]                   }
[17:01:47.972]                 }
[17:01:47.972]             }
[17:01:47.972]         }))
[17:01:47.972]     }, error = function(ex) {
[17:01:47.972]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:47.972]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:47.972]                 ...future.rng), started = ...future.startTime, 
[17:01:47.972]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:47.972]             version = "1.8"), class = "FutureResult")
[17:01:47.972]     }, finally = {
[17:01:47.972]         if (!identical(...future.workdir, getwd())) 
[17:01:47.972]             setwd(...future.workdir)
[17:01:47.972]         {
[17:01:47.972]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:47.972]                 ...future.oldOptions$nwarnings <- NULL
[17:01:47.972]             }
[17:01:47.972]             base::options(...future.oldOptions)
[17:01:47.972]             if (.Platform$OS.type == "windows") {
[17:01:47.972]                 old_names <- names(...future.oldEnvVars)
[17:01:47.972]                 envs <- base::Sys.getenv()
[17:01:47.972]                 names <- names(envs)
[17:01:47.972]                 common <- intersect(names, old_names)
[17:01:47.972]                 added <- setdiff(names, old_names)
[17:01:47.972]                 removed <- setdiff(old_names, names)
[17:01:47.972]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:47.972]                   envs[common]]
[17:01:47.972]                 NAMES <- toupper(changed)
[17:01:47.972]                 args <- list()
[17:01:47.972]                 for (kk in seq_along(NAMES)) {
[17:01:47.972]                   name <- changed[[kk]]
[17:01:47.972]                   NAME <- NAMES[[kk]]
[17:01:47.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:47.972]                     next
[17:01:47.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:47.972]                 }
[17:01:47.972]                 NAMES <- toupper(added)
[17:01:47.972]                 for (kk in seq_along(NAMES)) {
[17:01:47.972]                   name <- added[[kk]]
[17:01:47.972]                   NAME <- NAMES[[kk]]
[17:01:47.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:47.972]                     next
[17:01:47.972]                   args[[name]] <- ""
[17:01:47.972]                 }
[17:01:47.972]                 NAMES <- toupper(removed)
[17:01:47.972]                 for (kk in seq_along(NAMES)) {
[17:01:47.972]                   name <- removed[[kk]]
[17:01:47.972]                   NAME <- NAMES[[kk]]
[17:01:47.972]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:47.972]                     next
[17:01:47.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:47.972]                 }
[17:01:47.972]                 if (length(args) > 0) 
[17:01:47.972]                   base::do.call(base::Sys.setenv, args = args)
[17:01:47.972]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:47.972]             }
[17:01:47.972]             else {
[17:01:47.972]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:47.972]             }
[17:01:47.972]             {
[17:01:47.972]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:47.972]                   0L) {
[17:01:47.972]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:47.972]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:47.972]                   base::options(opts)
[17:01:47.972]                 }
[17:01:47.972]                 {
[17:01:47.972]                   {
[17:01:47.972]                     base::options(mc.cores = ...future.mc.cores.old)
[17:01:47.972]                     NULL
[17:01:47.972]                   }
[17:01:47.972]                   options(future.plan = NULL)
[17:01:47.972]                   if (is.na(NA_character_)) 
[17:01:47.972]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:47.972]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:47.972]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:47.972]                     .init = FALSE)
[17:01:47.972]                 }
[17:01:47.972]             }
[17:01:47.972]         }
[17:01:47.972]     })
[17:01:47.972]     if (TRUE) {
[17:01:47.972]         base::sink(type = "output", split = FALSE)
[17:01:47.972]         if (TRUE) {
[17:01:47.972]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:47.972]         }
[17:01:47.972]         else {
[17:01:47.972]             ...future.result["stdout"] <- base::list(NULL)
[17:01:47.972]         }
[17:01:47.972]         base::close(...future.stdout)
[17:01:47.972]         ...future.stdout <- NULL
[17:01:47.972]     }
[17:01:47.972]     ...future.result$conditions <- ...future.conditions
[17:01:47.972]     ...future.result$finished <- base::Sys.time()
[17:01:47.972]     ...future.result
[17:01:47.972] }
[17:01:47.978] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[17:01:47.978] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[17:01:47.979] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[17:01:47.979] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:01:47.979] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:01:47.979] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[17:01:47.981] MultisessionFuture started
[17:01:47.982] - Launch lazy future ... done
[17:01:47.982] run() for ‘MultisessionFuture’ ... done
[17:01:47.984] getGlobalsAndPackages() ...
[17:01:47.984] Searching for globals...
[17:01:47.988] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:01:47.989] Searching for globals ... DONE
[17:01:47.989] Resolving globals: FALSE
[17:01:47.989] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:01:47.989] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:01:47.990] - globals: [2] ‘slow_fcn’, ‘x’
[17:01:47.990] 
[17:01:47.990] getGlobalsAndPackages() ... DONE
[17:01:47.990] run() for ‘Future’ ...
[17:01:47.990] - state: ‘created’
[17:01:47.991] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:01:48.001] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:01:48.001] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:01:48.001]   - Field: ‘node’
[17:01:48.001]   - Field: ‘label’
[17:01:48.001]   - Field: ‘local’
[17:01:48.001]   - Field: ‘owner’
[17:01:48.001]   - Field: ‘envir’
[17:01:48.002]   - Field: ‘workers’
[17:01:48.002]   - Field: ‘packages’
[17:01:48.002]   - Field: ‘gc’
[17:01:48.002]   - Field: ‘conditions’
[17:01:48.002]   - Field: ‘persistent’
[17:01:48.002]   - Field: ‘expr’
[17:01:48.002]   - Field: ‘uuid’
[17:01:48.002]   - Field: ‘seed’
[17:01:48.002]   - Field: ‘version’
[17:01:48.002]   - Field: ‘result’
[17:01:48.002]   - Field: ‘asynchronous’
[17:01:48.003]   - Field: ‘calls’
[17:01:48.003]   - Field: ‘globals’
[17:01:48.003]   - Field: ‘stdout’
[17:01:48.003]   - Field: ‘earlySignal’
[17:01:48.003]   - Field: ‘lazy’
[17:01:48.003]   - Field: ‘state’
[17:01:48.003] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:01:48.003] - Launch lazy future ...
[17:01:48.003] Packages needed by the future expression (n = 0): <none>
[17:01:48.004] Packages needed by future strategies (n = 0): <none>
[17:01:48.004] {
[17:01:48.004]     {
[17:01:48.004]         {
[17:01:48.004]             ...future.startTime <- base::Sys.time()
[17:01:48.004]             {
[17:01:48.004]                 {
[17:01:48.004]                   {
[17:01:48.004]                     {
[17:01:48.004]                       base::local({
[17:01:48.004]                         has_future <- base::requireNamespace("future", 
[17:01:48.004]                           quietly = TRUE)
[17:01:48.004]                         if (has_future) {
[17:01:48.004]                           ns <- base::getNamespace("future")
[17:01:48.004]                           version <- ns[[".package"]][["version"]]
[17:01:48.004]                           if (is.null(version)) 
[17:01:48.004]                             version <- utils::packageVersion("future")
[17:01:48.004]                         }
[17:01:48.004]                         else {
[17:01:48.004]                           version <- NULL
[17:01:48.004]                         }
[17:01:48.004]                         if (!has_future || version < "1.8.0") {
[17:01:48.004]                           info <- base::c(r_version = base::gsub("R version ", 
[17:01:48.004]                             "", base::R.version$version.string), 
[17:01:48.004]                             platform = base::sprintf("%s (%s-bit)", 
[17:01:48.004]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:48.004]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:48.004]                               "release", "version")], collapse = " "), 
[17:01:48.004]                             hostname = base::Sys.info()[["nodename"]])
[17:01:48.004]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:01:48.004]                             info)
[17:01:48.004]                           info <- base::paste(info, collapse = "; ")
[17:01:48.004]                           if (!has_future) {
[17:01:48.004]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:48.004]                               info)
[17:01:48.004]                           }
[17:01:48.004]                           else {
[17:01:48.004]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:48.004]                               info, version)
[17:01:48.004]                           }
[17:01:48.004]                           base::stop(msg)
[17:01:48.004]                         }
[17:01:48.004]                       })
[17:01:48.004]                     }
[17:01:48.004]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:01:48.004]                     base::options(mc.cores = 1L)
[17:01:48.004]                   }
[17:01:48.004]                   ...future.strategy.old <- future::plan("list")
[17:01:48.004]                   options(future.plan = NULL)
[17:01:48.004]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:48.004]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:48.004]                 }
[17:01:48.004]                 ...future.workdir <- getwd()
[17:01:48.004]             }
[17:01:48.004]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:48.004]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:48.004]         }
[17:01:48.004]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:48.004]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:48.004]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:48.004]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:48.004]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:48.004]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:48.004]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:48.004]             base::names(...future.oldOptions))
[17:01:48.004]     }
[17:01:48.004]     if (FALSE) {
[17:01:48.004]     }
[17:01:48.004]     else {
[17:01:48.004]         if (TRUE) {
[17:01:48.004]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:48.004]                 open = "w")
[17:01:48.004]         }
[17:01:48.004]         else {
[17:01:48.004]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:48.004]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:48.004]         }
[17:01:48.004]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:48.004]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:48.004]             base::sink(type = "output", split = FALSE)
[17:01:48.004]             base::close(...future.stdout)
[17:01:48.004]         }, add = TRUE)
[17:01:48.004]     }
[17:01:48.004]     ...future.frame <- base::sys.nframe()
[17:01:48.004]     ...future.conditions <- base::list()
[17:01:48.004]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:48.004]     if (FALSE) {
[17:01:48.004]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:48.004]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:48.004]     }
[17:01:48.004]     ...future.result <- base::tryCatch({
[17:01:48.004]         base::withCallingHandlers({
[17:01:48.004]             ...future.value <- base::withVisible(base::local({
[17:01:48.004]                 ...future.makeSendCondition <- base::local({
[17:01:48.004]                   sendCondition <- NULL
[17:01:48.004]                   function(frame = 1L) {
[17:01:48.004]                     if (is.function(sendCondition)) 
[17:01:48.004]                       return(sendCondition)
[17:01:48.004]                     ns <- getNamespace("parallel")
[17:01:48.004]                     if (exists("sendData", mode = "function", 
[17:01:48.004]                       envir = ns)) {
[17:01:48.004]                       parallel_sendData <- get("sendData", mode = "function", 
[17:01:48.004]                         envir = ns)
[17:01:48.004]                       envir <- sys.frame(frame)
[17:01:48.004]                       master <- NULL
[17:01:48.004]                       while (!identical(envir, .GlobalEnv) && 
[17:01:48.004]                         !identical(envir, emptyenv())) {
[17:01:48.004]                         if (exists("master", mode = "list", envir = envir, 
[17:01:48.004]                           inherits = FALSE)) {
[17:01:48.004]                           master <- get("master", mode = "list", 
[17:01:48.004]                             envir = envir, inherits = FALSE)
[17:01:48.004]                           if (inherits(master, c("SOCKnode", 
[17:01:48.004]                             "SOCK0node"))) {
[17:01:48.004]                             sendCondition <<- function(cond) {
[17:01:48.004]                               data <- list(type = "VALUE", value = cond, 
[17:01:48.004]                                 success = TRUE)
[17:01:48.004]                               parallel_sendData(master, data)
[17:01:48.004]                             }
[17:01:48.004]                             return(sendCondition)
[17:01:48.004]                           }
[17:01:48.004]                         }
[17:01:48.004]                         frame <- frame + 1L
[17:01:48.004]                         envir <- sys.frame(frame)
[17:01:48.004]                       }
[17:01:48.004]                     }
[17:01:48.004]                     sendCondition <<- function(cond) NULL
[17:01:48.004]                   }
[17:01:48.004]                 })
[17:01:48.004]                 withCallingHandlers({
[17:01:48.004]                   slow_fcn(x)
[17:01:48.004]                 }, immediateCondition = function(cond) {
[17:01:48.004]                   sendCondition <- ...future.makeSendCondition()
[17:01:48.004]                   sendCondition(cond)
[17:01:48.004]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:48.004]                   {
[17:01:48.004]                     inherits <- base::inherits
[17:01:48.004]                     invokeRestart <- base::invokeRestart
[17:01:48.004]                     is.null <- base::is.null
[17:01:48.004]                     muffled <- FALSE
[17:01:48.004]                     if (inherits(cond, "message")) {
[17:01:48.004]                       muffled <- grepl(pattern, "muffleMessage")
[17:01:48.004]                       if (muffled) 
[17:01:48.004]                         invokeRestart("muffleMessage")
[17:01:48.004]                     }
[17:01:48.004]                     else if (inherits(cond, "warning")) {
[17:01:48.004]                       muffled <- grepl(pattern, "muffleWarning")
[17:01:48.004]                       if (muffled) 
[17:01:48.004]                         invokeRestart("muffleWarning")
[17:01:48.004]                     }
[17:01:48.004]                     else if (inherits(cond, "condition")) {
[17:01:48.004]                       if (!is.null(pattern)) {
[17:01:48.004]                         computeRestarts <- base::computeRestarts
[17:01:48.004]                         grepl <- base::grepl
[17:01:48.004]                         restarts <- computeRestarts(cond)
[17:01:48.004]                         for (restart in restarts) {
[17:01:48.004]                           name <- restart$name
[17:01:48.004]                           if (is.null(name)) 
[17:01:48.004]                             next
[17:01:48.004]                           if (!grepl(pattern, name)) 
[17:01:48.004]                             next
[17:01:48.004]                           invokeRestart(restart)
[17:01:48.004]                           muffled <- TRUE
[17:01:48.004]                           break
[17:01:48.004]                         }
[17:01:48.004]                       }
[17:01:48.004]                     }
[17:01:48.004]                     invisible(muffled)
[17:01:48.004]                   }
[17:01:48.004]                   muffleCondition(cond)
[17:01:48.004]                 })
[17:01:48.004]             }))
[17:01:48.004]             future::FutureResult(value = ...future.value$value, 
[17:01:48.004]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:48.004]                   ...future.rng), globalenv = if (FALSE) 
[17:01:48.004]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:48.004]                     ...future.globalenv.names))
[17:01:48.004]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:48.004]         }, condition = base::local({
[17:01:48.004]             c <- base::c
[17:01:48.004]             inherits <- base::inherits
[17:01:48.004]             invokeRestart <- base::invokeRestart
[17:01:48.004]             length <- base::length
[17:01:48.004]             list <- base::list
[17:01:48.004]             seq.int <- base::seq.int
[17:01:48.004]             signalCondition <- base::signalCondition
[17:01:48.004]             sys.calls <- base::sys.calls
[17:01:48.004]             `[[` <- base::`[[`
[17:01:48.004]             `+` <- base::`+`
[17:01:48.004]             `<<-` <- base::`<<-`
[17:01:48.004]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:48.004]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:48.004]                   3L)]
[17:01:48.004]             }
[17:01:48.004]             function(cond) {
[17:01:48.004]                 is_error <- inherits(cond, "error")
[17:01:48.004]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:48.004]                   NULL)
[17:01:48.004]                 if (is_error) {
[17:01:48.004]                   sessionInformation <- function() {
[17:01:48.004]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:48.004]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:48.004]                       search = base::search(), system = base::Sys.info())
[17:01:48.004]                   }
[17:01:48.004]                   ...future.conditions[[length(...future.conditions) + 
[17:01:48.004]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:48.004]                     cond$call), session = sessionInformation(), 
[17:01:48.004]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:48.004]                   signalCondition(cond)
[17:01:48.004]                 }
[17:01:48.004]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:48.004]                 "immediateCondition"))) {
[17:01:48.004]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:48.004]                   ...future.conditions[[length(...future.conditions) + 
[17:01:48.004]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:48.004]                   if (TRUE && !signal) {
[17:01:48.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:48.004]                     {
[17:01:48.004]                       inherits <- base::inherits
[17:01:48.004]                       invokeRestart <- base::invokeRestart
[17:01:48.004]                       is.null <- base::is.null
[17:01:48.004]                       muffled <- FALSE
[17:01:48.004]                       if (inherits(cond, "message")) {
[17:01:48.004]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:48.004]                         if (muffled) 
[17:01:48.004]                           invokeRestart("muffleMessage")
[17:01:48.004]                       }
[17:01:48.004]                       else if (inherits(cond, "warning")) {
[17:01:48.004]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:48.004]                         if (muffled) 
[17:01:48.004]                           invokeRestart("muffleWarning")
[17:01:48.004]                       }
[17:01:48.004]                       else if (inherits(cond, "condition")) {
[17:01:48.004]                         if (!is.null(pattern)) {
[17:01:48.004]                           computeRestarts <- base::computeRestarts
[17:01:48.004]                           grepl <- base::grepl
[17:01:48.004]                           restarts <- computeRestarts(cond)
[17:01:48.004]                           for (restart in restarts) {
[17:01:48.004]                             name <- restart$name
[17:01:48.004]                             if (is.null(name)) 
[17:01:48.004]                               next
[17:01:48.004]                             if (!grepl(pattern, name)) 
[17:01:48.004]                               next
[17:01:48.004]                             invokeRestart(restart)
[17:01:48.004]                             muffled <- TRUE
[17:01:48.004]                             break
[17:01:48.004]                           }
[17:01:48.004]                         }
[17:01:48.004]                       }
[17:01:48.004]                       invisible(muffled)
[17:01:48.004]                     }
[17:01:48.004]                     muffleCondition(cond, pattern = "^muffle")
[17:01:48.004]                   }
[17:01:48.004]                 }
[17:01:48.004]                 else {
[17:01:48.004]                   if (TRUE) {
[17:01:48.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:48.004]                     {
[17:01:48.004]                       inherits <- base::inherits
[17:01:48.004]                       invokeRestart <- base::invokeRestart
[17:01:48.004]                       is.null <- base::is.null
[17:01:48.004]                       muffled <- FALSE
[17:01:48.004]                       if (inherits(cond, "message")) {
[17:01:48.004]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:48.004]                         if (muffled) 
[17:01:48.004]                           invokeRestart("muffleMessage")
[17:01:48.004]                       }
[17:01:48.004]                       else if (inherits(cond, "warning")) {
[17:01:48.004]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:48.004]                         if (muffled) 
[17:01:48.004]                           invokeRestart("muffleWarning")
[17:01:48.004]                       }
[17:01:48.004]                       else if (inherits(cond, "condition")) {
[17:01:48.004]                         if (!is.null(pattern)) {
[17:01:48.004]                           computeRestarts <- base::computeRestarts
[17:01:48.004]                           grepl <- base::grepl
[17:01:48.004]                           restarts <- computeRestarts(cond)
[17:01:48.004]                           for (restart in restarts) {
[17:01:48.004]                             name <- restart$name
[17:01:48.004]                             if (is.null(name)) 
[17:01:48.004]                               next
[17:01:48.004]                             if (!grepl(pattern, name)) 
[17:01:48.004]                               next
[17:01:48.004]                             invokeRestart(restart)
[17:01:48.004]                             muffled <- TRUE
[17:01:48.004]                             break
[17:01:48.004]                           }
[17:01:48.004]                         }
[17:01:48.004]                       }
[17:01:48.004]                       invisible(muffled)
[17:01:48.004]                     }
[17:01:48.004]                     muffleCondition(cond, pattern = "^muffle")
[17:01:48.004]                   }
[17:01:48.004]                 }
[17:01:48.004]             }
[17:01:48.004]         }))
[17:01:48.004]     }, error = function(ex) {
[17:01:48.004]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:48.004]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:48.004]                 ...future.rng), started = ...future.startTime, 
[17:01:48.004]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:48.004]             version = "1.8"), class = "FutureResult")
[17:01:48.004]     }, finally = {
[17:01:48.004]         if (!identical(...future.workdir, getwd())) 
[17:01:48.004]             setwd(...future.workdir)
[17:01:48.004]         {
[17:01:48.004]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:48.004]                 ...future.oldOptions$nwarnings <- NULL
[17:01:48.004]             }
[17:01:48.004]             base::options(...future.oldOptions)
[17:01:48.004]             if (.Platform$OS.type == "windows") {
[17:01:48.004]                 old_names <- names(...future.oldEnvVars)
[17:01:48.004]                 envs <- base::Sys.getenv()
[17:01:48.004]                 names <- names(envs)
[17:01:48.004]                 common <- intersect(names, old_names)
[17:01:48.004]                 added <- setdiff(names, old_names)
[17:01:48.004]                 removed <- setdiff(old_names, names)
[17:01:48.004]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:48.004]                   envs[common]]
[17:01:48.004]                 NAMES <- toupper(changed)
[17:01:48.004]                 args <- list()
[17:01:48.004]                 for (kk in seq_along(NAMES)) {
[17:01:48.004]                   name <- changed[[kk]]
[17:01:48.004]                   NAME <- NAMES[[kk]]
[17:01:48.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:48.004]                     next
[17:01:48.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:48.004]                 }
[17:01:48.004]                 NAMES <- toupper(added)
[17:01:48.004]                 for (kk in seq_along(NAMES)) {
[17:01:48.004]                   name <- added[[kk]]
[17:01:48.004]                   NAME <- NAMES[[kk]]
[17:01:48.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:48.004]                     next
[17:01:48.004]                   args[[name]] <- ""
[17:01:48.004]                 }
[17:01:48.004]                 NAMES <- toupper(removed)
[17:01:48.004]                 for (kk in seq_along(NAMES)) {
[17:01:48.004]                   name <- removed[[kk]]
[17:01:48.004]                   NAME <- NAMES[[kk]]
[17:01:48.004]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:48.004]                     next
[17:01:48.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:48.004]                 }
[17:01:48.004]                 if (length(args) > 0) 
[17:01:48.004]                   base::do.call(base::Sys.setenv, args = args)
[17:01:48.004]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:48.004]             }
[17:01:48.004]             else {
[17:01:48.004]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:48.004]             }
[17:01:48.004]             {
[17:01:48.004]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:48.004]                   0L) {
[17:01:48.004]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:48.004]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:48.004]                   base::options(opts)
[17:01:48.004]                 }
[17:01:48.004]                 {
[17:01:48.004]                   {
[17:01:48.004]                     base::options(mc.cores = ...future.mc.cores.old)
[17:01:48.004]                     NULL
[17:01:48.004]                   }
[17:01:48.004]                   options(future.plan = NULL)
[17:01:48.004]                   if (is.na(NA_character_)) 
[17:01:48.004]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:48.004]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:48.004]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:48.004]                     .init = FALSE)
[17:01:48.004]                 }
[17:01:48.004]             }
[17:01:48.004]         }
[17:01:48.004]     })
[17:01:48.004]     if (TRUE) {
[17:01:48.004]         base::sink(type = "output", split = FALSE)
[17:01:48.004]         if (TRUE) {
[17:01:48.004]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:48.004]         }
[17:01:48.004]         else {
[17:01:48.004]             ...future.result["stdout"] <- base::list(NULL)
[17:01:48.004]         }
[17:01:48.004]         base::close(...future.stdout)
[17:01:48.004]         ...future.stdout <- NULL
[17:01:48.004]     }
[17:01:48.004]     ...future.result$conditions <- ...future.conditions
[17:01:48.004]     ...future.result$finished <- base::Sys.time()
[17:01:48.004]     ...future.result
[17:01:48.004] }
[17:01:48.057] Exporting 2 global objects (1.20 KiB) to cluster node #2 ...
[17:01:48.057] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ...
[17:01:48.058] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ... DONE
[17:01:48.058] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[17:01:48.058] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[17:01:48.058] Exporting 2 global objects (1.20 KiB) to cluster node #2 ... DONE
[17:01:48.059] MultisessionFuture started
[17:01:48.060] - Launch lazy future ... done
[17:01:48.060] run() for ‘MultisessionFuture’ ... done
[17:01:48.060] getGlobalsAndPackages() ...
[17:01:48.060] Searching for globals...
[17:01:48.062] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[17:01:48.062] Searching for globals ... DONE
[17:01:48.062] Resolving globals: FALSE
[17:01:48.062] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[17:01:48.063] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[17:01:48.063] - globals: [2] ‘slow_fcn’, ‘x’
[17:01:48.063] 
[17:01:48.063] getGlobalsAndPackages() ... DONE
[17:01:48.064] run() for ‘Future’ ...
[17:01:48.064] - state: ‘created’
[17:01:48.064] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:01:48.075] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:01:48.075] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:01:48.075]   - Field: ‘node’
[17:01:48.075]   - Field: ‘label’
[17:01:48.075]   - Field: ‘local’
[17:01:48.075]   - Field: ‘owner’
[17:01:48.075]   - Field: ‘envir’
[17:01:48.075]   - Field: ‘workers’
[17:01:48.075]   - Field: ‘packages’
[17:01:48.075]   - Field: ‘gc’
[17:01:48.076]   - Field: ‘conditions’
[17:01:48.076]   - Field: ‘persistent’
[17:01:48.076]   - Field: ‘expr’
[17:01:48.076]   - Field: ‘uuid’
[17:01:48.076]   - Field: ‘seed’
[17:01:48.076]   - Field: ‘version’
[17:01:48.076]   - Field: ‘result’
[17:01:48.076]   - Field: ‘asynchronous’
[17:01:48.076]   - Field: ‘calls’
[17:01:48.076]   - Field: ‘globals’
[17:01:48.076]   - Field: ‘stdout’
[17:01:48.076]   - Field: ‘earlySignal’
[17:01:48.077]   - Field: ‘lazy’
[17:01:48.077]   - Field: ‘state’
[17:01:48.077] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:01:48.077] - Launch lazy future ...
[17:01:48.077] Packages needed by the future expression (n = 0): <none>
[17:01:48.077] Packages needed by future strategies (n = 0): <none>
[17:01:48.078] {
[17:01:48.078]     {
[17:01:48.078]         {
[17:01:48.078]             ...future.startTime <- base::Sys.time()
[17:01:48.078]             {
[17:01:48.078]                 {
[17:01:48.078]                   {
[17:01:48.078]                     {
[17:01:48.078]                       base::local({
[17:01:48.078]                         has_future <- base::requireNamespace("future", 
[17:01:48.078]                           quietly = TRUE)
[17:01:48.078]                         if (has_future) {
[17:01:48.078]                           ns <- base::getNamespace("future")
[17:01:48.078]                           version <- ns[[".package"]][["version"]]
[17:01:48.078]                           if (is.null(version)) 
[17:01:48.078]                             version <- utils::packageVersion("future")
[17:01:48.078]                         }
[17:01:48.078]                         else {
[17:01:48.078]                           version <- NULL
[17:01:48.078]                         }
[17:01:48.078]                         if (!has_future || version < "1.8.0") {
[17:01:48.078]                           info <- base::c(r_version = base::gsub("R version ", 
[17:01:48.078]                             "", base::R.version$version.string), 
[17:01:48.078]                             platform = base::sprintf("%s (%s-bit)", 
[17:01:48.078]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:01:48.078]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:01:48.078]                               "release", "version")], collapse = " "), 
[17:01:48.078]                             hostname = base::Sys.info()[["nodename"]])
[17:01:48.078]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:01:48.078]                             info)
[17:01:48.078]                           info <- base::paste(info, collapse = "; ")
[17:01:48.078]                           if (!has_future) {
[17:01:48.078]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:01:48.078]                               info)
[17:01:48.078]                           }
[17:01:48.078]                           else {
[17:01:48.078]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:01:48.078]                               info, version)
[17:01:48.078]                           }
[17:01:48.078]                           base::stop(msg)
[17:01:48.078]                         }
[17:01:48.078]                       })
[17:01:48.078]                     }
[17:01:48.078]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:01:48.078]                     base::options(mc.cores = 1L)
[17:01:48.078]                   }
[17:01:48.078]                   ...future.strategy.old <- future::plan("list")
[17:01:48.078]                   options(future.plan = NULL)
[17:01:48.078]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:01:48.078]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:01:48.078]                 }
[17:01:48.078]                 ...future.workdir <- getwd()
[17:01:48.078]             }
[17:01:48.078]             ...future.oldOptions <- base::as.list(base::.Options)
[17:01:48.078]             ...future.oldEnvVars <- base::Sys.getenv()
[17:01:48.078]         }
[17:01:48.078]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:01:48.078]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:01:48.078]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:01:48.078]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:01:48.078]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:01:48.078]             future.stdout.windows.reencode = NULL, width = 80L)
[17:01:48.078]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:01:48.078]             base::names(...future.oldOptions))
[17:01:48.078]     }
[17:01:48.078]     if (FALSE) {
[17:01:48.078]     }
[17:01:48.078]     else {
[17:01:48.078]         if (TRUE) {
[17:01:48.078]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:01:48.078]                 open = "w")
[17:01:48.078]         }
[17:01:48.078]         else {
[17:01:48.078]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:01:48.078]                 windows = "NUL", "/dev/null"), open = "w")
[17:01:48.078]         }
[17:01:48.078]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:01:48.078]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:01:48.078]             base::sink(type = "output", split = FALSE)
[17:01:48.078]             base::close(...future.stdout)
[17:01:48.078]         }, add = TRUE)
[17:01:48.078]     }
[17:01:48.078]     ...future.frame <- base::sys.nframe()
[17:01:48.078]     ...future.conditions <- base::list()
[17:01:48.078]     ...future.rng <- base::globalenv()$.Random.seed
[17:01:48.078]     if (FALSE) {
[17:01:48.078]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:01:48.078]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:01:48.078]     }
[17:01:48.078]     ...future.result <- base::tryCatch({
[17:01:48.078]         base::withCallingHandlers({
[17:01:48.078]             ...future.value <- base::withVisible(base::local({
[17:01:48.078]                 ...future.makeSendCondition <- base::local({
[17:01:48.078]                   sendCondition <- NULL
[17:01:48.078]                   function(frame = 1L) {
[17:01:48.078]                     if (is.function(sendCondition)) 
[17:01:48.078]                       return(sendCondition)
[17:01:48.078]                     ns <- getNamespace("parallel")
[17:01:48.078]                     if (exists("sendData", mode = "function", 
[17:01:48.078]                       envir = ns)) {
[17:01:48.078]                       parallel_sendData <- get("sendData", mode = "function", 
[17:01:48.078]                         envir = ns)
[17:01:48.078]                       envir <- sys.frame(frame)
[17:01:48.078]                       master <- NULL
[17:01:48.078]                       while (!identical(envir, .GlobalEnv) && 
[17:01:48.078]                         !identical(envir, emptyenv())) {
[17:01:48.078]                         if (exists("master", mode = "list", envir = envir, 
[17:01:48.078]                           inherits = FALSE)) {
[17:01:48.078]                           master <- get("master", mode = "list", 
[17:01:48.078]                             envir = envir, inherits = FALSE)
[17:01:48.078]                           if (inherits(master, c("SOCKnode", 
[17:01:48.078]                             "SOCK0node"))) {
[17:01:48.078]                             sendCondition <<- function(cond) {
[17:01:48.078]                               data <- list(type = "VALUE", value = cond, 
[17:01:48.078]                                 success = TRUE)
[17:01:48.078]                               parallel_sendData(master, data)
[17:01:48.078]                             }
[17:01:48.078]                             return(sendCondition)
[17:01:48.078]                           }
[17:01:48.078]                         }
[17:01:48.078]                         frame <- frame + 1L
[17:01:48.078]                         envir <- sys.frame(frame)
[17:01:48.078]                       }
[17:01:48.078]                     }
[17:01:48.078]                     sendCondition <<- function(cond) NULL
[17:01:48.078]                   }
[17:01:48.078]                 })
[17:01:48.078]                 withCallingHandlers({
[17:01:48.078]                   slow_fcn(x)
[17:01:48.078]                 }, immediateCondition = function(cond) {
[17:01:48.078]                   sendCondition <- ...future.makeSendCondition()
[17:01:48.078]                   sendCondition(cond)
[17:01:48.078]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:48.078]                   {
[17:01:48.078]                     inherits <- base::inherits
[17:01:48.078]                     invokeRestart <- base::invokeRestart
[17:01:48.078]                     is.null <- base::is.null
[17:01:48.078]                     muffled <- FALSE
[17:01:48.078]                     if (inherits(cond, "message")) {
[17:01:48.078]                       muffled <- grepl(pattern, "muffleMessage")
[17:01:48.078]                       if (muffled) 
[17:01:48.078]                         invokeRestart("muffleMessage")
[17:01:48.078]                     }
[17:01:48.078]                     else if (inherits(cond, "warning")) {
[17:01:48.078]                       muffled <- grepl(pattern, "muffleWarning")
[17:01:48.078]                       if (muffled) 
[17:01:48.078]                         invokeRestart("muffleWarning")
[17:01:48.078]                     }
[17:01:48.078]                     else if (inherits(cond, "condition")) {
[17:01:48.078]                       if (!is.null(pattern)) {
[17:01:48.078]                         computeRestarts <- base::computeRestarts
[17:01:48.078]                         grepl <- base::grepl
[17:01:48.078]                         restarts <- computeRestarts(cond)
[17:01:48.078]                         for (restart in restarts) {
[17:01:48.078]                           name <- restart$name
[17:01:48.078]                           if (is.null(name)) 
[17:01:48.078]                             next
[17:01:48.078]                           if (!grepl(pattern, name)) 
[17:01:48.078]                             next
[17:01:48.078]                           invokeRestart(restart)
[17:01:48.078]                           muffled <- TRUE
[17:01:48.078]                           break
[17:01:48.078]                         }
[17:01:48.078]                       }
[17:01:48.078]                     }
[17:01:48.078]                     invisible(muffled)
[17:01:48.078]                   }
[17:01:48.078]                   muffleCondition(cond)
[17:01:48.078]                 })
[17:01:48.078]             }))
[17:01:48.078]             future::FutureResult(value = ...future.value$value, 
[17:01:48.078]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:48.078]                   ...future.rng), globalenv = if (FALSE) 
[17:01:48.078]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:01:48.078]                     ...future.globalenv.names))
[17:01:48.078]                 else NULL, started = ...future.startTime, version = "1.8")
[17:01:48.078]         }, condition = base::local({
[17:01:48.078]             c <- base::c
[17:01:48.078]             inherits <- base::inherits
[17:01:48.078]             invokeRestart <- base::invokeRestart
[17:01:48.078]             length <- base::length
[17:01:48.078]             list <- base::list
[17:01:48.078]             seq.int <- base::seq.int
[17:01:48.078]             signalCondition <- base::signalCondition
[17:01:48.078]             sys.calls <- base::sys.calls
[17:01:48.078]             `[[` <- base::`[[`
[17:01:48.078]             `+` <- base::`+`
[17:01:48.078]             `<<-` <- base::`<<-`
[17:01:48.078]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:01:48.078]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:01:48.078]                   3L)]
[17:01:48.078]             }
[17:01:48.078]             function(cond) {
[17:01:48.078]                 is_error <- inherits(cond, "error")
[17:01:48.078]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:01:48.078]                   NULL)
[17:01:48.078]                 if (is_error) {
[17:01:48.078]                   sessionInformation <- function() {
[17:01:48.078]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:01:48.078]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:01:48.078]                       search = base::search(), system = base::Sys.info())
[17:01:48.078]                   }
[17:01:48.078]                   ...future.conditions[[length(...future.conditions) + 
[17:01:48.078]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:01:48.078]                     cond$call), session = sessionInformation(), 
[17:01:48.078]                     timestamp = base::Sys.time(), signaled = 0L)
[17:01:48.078]                   signalCondition(cond)
[17:01:48.078]                 }
[17:01:48.078]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:01:48.078]                 "immediateCondition"))) {
[17:01:48.078]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:01:48.078]                   ...future.conditions[[length(...future.conditions) + 
[17:01:48.078]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:01:48.078]                   if (TRUE && !signal) {
[17:01:48.078]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:48.078]                     {
[17:01:48.078]                       inherits <- base::inherits
[17:01:48.078]                       invokeRestart <- base::invokeRestart
[17:01:48.078]                       is.null <- base::is.null
[17:01:48.078]                       muffled <- FALSE
[17:01:48.078]                       if (inherits(cond, "message")) {
[17:01:48.078]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:48.078]                         if (muffled) 
[17:01:48.078]                           invokeRestart("muffleMessage")
[17:01:48.078]                       }
[17:01:48.078]                       else if (inherits(cond, "warning")) {
[17:01:48.078]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:48.078]                         if (muffled) 
[17:01:48.078]                           invokeRestart("muffleWarning")
[17:01:48.078]                       }
[17:01:48.078]                       else if (inherits(cond, "condition")) {
[17:01:48.078]                         if (!is.null(pattern)) {
[17:01:48.078]                           computeRestarts <- base::computeRestarts
[17:01:48.078]                           grepl <- base::grepl
[17:01:48.078]                           restarts <- computeRestarts(cond)
[17:01:48.078]                           for (restart in restarts) {
[17:01:48.078]                             name <- restart$name
[17:01:48.078]                             if (is.null(name)) 
[17:01:48.078]                               next
[17:01:48.078]                             if (!grepl(pattern, name)) 
[17:01:48.078]                               next
[17:01:48.078]                             invokeRestart(restart)
[17:01:48.078]                             muffled <- TRUE
[17:01:48.078]                             break
[17:01:48.078]                           }
[17:01:48.078]                         }
[17:01:48.078]                       }
[17:01:48.078]                       invisible(muffled)
[17:01:48.078]                     }
[17:01:48.078]                     muffleCondition(cond, pattern = "^muffle")
[17:01:48.078]                   }
[17:01:48.078]                 }
[17:01:48.078]                 else {
[17:01:48.078]                   if (TRUE) {
[17:01:48.078]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:01:48.078]                     {
[17:01:48.078]                       inherits <- base::inherits
[17:01:48.078]                       invokeRestart <- base::invokeRestart
[17:01:48.078]                       is.null <- base::is.null
[17:01:48.078]                       muffled <- FALSE
[17:01:48.078]                       if (inherits(cond, "message")) {
[17:01:48.078]                         muffled <- grepl(pattern, "muffleMessage")
[17:01:48.078]                         if (muffled) 
[17:01:48.078]                           invokeRestart("muffleMessage")
[17:01:48.078]                       }
[17:01:48.078]                       else if (inherits(cond, "warning")) {
[17:01:48.078]                         muffled <- grepl(pattern, "muffleWarning")
[17:01:48.078]                         if (muffled) 
[17:01:48.078]                           invokeRestart("muffleWarning")
[17:01:48.078]                       }
[17:01:48.078]                       else if (inherits(cond, "condition")) {
[17:01:48.078]                         if (!is.null(pattern)) {
[17:01:48.078]                           computeRestarts <- base::computeRestarts
[17:01:48.078]                           grepl <- base::grepl
[17:01:48.078]                           restarts <- computeRestarts(cond)
[17:01:48.078]                           for (restart in restarts) {
[17:01:48.078]                             name <- restart$name
[17:01:48.078]                             if (is.null(name)) 
[17:01:48.078]                               next
[17:01:48.078]                             if (!grepl(pattern, name)) 
[17:01:48.078]                               next
[17:01:48.078]                             invokeRestart(restart)
[17:01:48.078]                             muffled <- TRUE
[17:01:48.078]                             break
[17:01:48.078]                           }
[17:01:48.078]                         }
[17:01:48.078]                       }
[17:01:48.078]                       invisible(muffled)
[17:01:48.078]                     }
[17:01:48.078]                     muffleCondition(cond, pattern = "^muffle")
[17:01:48.078]                   }
[17:01:48.078]                 }
[17:01:48.078]             }
[17:01:48.078]         }))
[17:01:48.078]     }, error = function(ex) {
[17:01:48.078]         base::structure(base::list(value = NULL, visible = NULL, 
[17:01:48.078]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:01:48.078]                 ...future.rng), started = ...future.startTime, 
[17:01:48.078]             finished = Sys.time(), session_uuid = NA_character_, 
[17:01:48.078]             version = "1.8"), class = "FutureResult")
[17:01:48.078]     }, finally = {
[17:01:48.078]         if (!identical(...future.workdir, getwd())) 
[17:01:48.078]             setwd(...future.workdir)
[17:01:48.078]         {
[17:01:48.078]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:01:48.078]                 ...future.oldOptions$nwarnings <- NULL
[17:01:48.078]             }
[17:01:48.078]             base::options(...future.oldOptions)
[17:01:48.078]             if (.Platform$OS.type == "windows") {
[17:01:48.078]                 old_names <- names(...future.oldEnvVars)
[17:01:48.078]                 envs <- base::Sys.getenv()
[17:01:48.078]                 names <- names(envs)
[17:01:48.078]                 common <- intersect(names, old_names)
[17:01:48.078]                 added <- setdiff(names, old_names)
[17:01:48.078]                 removed <- setdiff(old_names, names)
[17:01:48.078]                 changed <- common[...future.oldEnvVars[common] != 
[17:01:48.078]                   envs[common]]
[17:01:48.078]                 NAMES <- toupper(changed)
[17:01:48.078]                 args <- list()
[17:01:48.078]                 for (kk in seq_along(NAMES)) {
[17:01:48.078]                   name <- changed[[kk]]
[17:01:48.078]                   NAME <- NAMES[[kk]]
[17:01:48.078]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:48.078]                     next
[17:01:48.078]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:48.078]                 }
[17:01:48.078]                 NAMES <- toupper(added)
[17:01:48.078]                 for (kk in seq_along(NAMES)) {
[17:01:48.078]                   name <- added[[kk]]
[17:01:48.078]                   NAME <- NAMES[[kk]]
[17:01:48.078]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:48.078]                     next
[17:01:48.078]                   args[[name]] <- ""
[17:01:48.078]                 }
[17:01:48.078]                 NAMES <- toupper(removed)
[17:01:48.078]                 for (kk in seq_along(NAMES)) {
[17:01:48.078]                   name <- removed[[kk]]
[17:01:48.078]                   NAME <- NAMES[[kk]]
[17:01:48.078]                   if (name != NAME && is.element(NAME, old_names)) 
[17:01:48.078]                     next
[17:01:48.078]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:01:48.078]                 }
[17:01:48.078]                 if (length(args) > 0) 
[17:01:48.078]                   base::do.call(base::Sys.setenv, args = args)
[17:01:48.078]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:01:48.078]             }
[17:01:48.078]             else {
[17:01:48.078]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:01:48.078]             }
[17:01:48.078]             {
[17:01:48.078]                 if (base::length(...future.futureOptionsAdded) > 
[17:01:48.078]                   0L) {
[17:01:48.078]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:01:48.078]                   base::names(opts) <- ...future.futureOptionsAdded
[17:01:48.078]                   base::options(opts)
[17:01:48.078]                 }
[17:01:48.078]                 {
[17:01:48.078]                   {
[17:01:48.078]                     base::options(mc.cores = ...future.mc.cores.old)
[17:01:48.078]                     NULL
[17:01:48.078]                   }
[17:01:48.078]                   options(future.plan = NULL)
[17:01:48.078]                   if (is.na(NA_character_)) 
[17:01:48.078]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:01:48.078]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:01:48.078]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:01:48.078]                     .init = FALSE)
[17:01:48.078]                 }
[17:01:48.078]             }
[17:01:48.078]         }
[17:01:48.078]     })
[17:01:48.078]     if (TRUE) {
[17:01:48.078]         base::sink(type = "output", split = FALSE)
[17:01:48.078]         if (TRUE) {
[17:01:48.078]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:01:48.078]         }
[17:01:48.078]         else {
[17:01:48.078]             ...future.result["stdout"] <- base::list(NULL)
[17:01:48.078]         }
[17:01:48.078]         base::close(...future.stdout)
[17:01:48.078]         ...future.stdout <- NULL
[17:01:48.078]     }
[17:01:48.078]     ...future.result$conditions <- ...future.conditions
[17:01:48.078]     ...future.result$finished <- base::Sys.time()
[17:01:48.078]     ...future.result
[17:01:48.078] }
[17:01:48.080] Poll #1 (0): usedNodes() = 2, workers = 2
[17:01:48.112] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[17:01:48.151] Poll #3 (0.07 secs): usedNodes() = 2, workers = 2
[17:01:48.183] Poll #4 (0.1 secs): usedNodes() = 2, workers = 2
[17:01:48.215] Poll #5 (0.14 secs): usedNodes() = 2, workers = 2
[17:01:48.247] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[17:01:48.279] Poll #7 (0.2 secs): usedNodes() = 2, workers = 2
[17:01:48.311] Poll #8 (0.23 secs): usedNodes() = 2, workers = 2
[17:01:48.343] Poll #9 (0.26 secs): usedNodes() = 2, workers = 2
[17:01:48.375] Poll #10 (0.3 secs): usedNodes() = 2, workers = 2
[17:01:48.408] Poll #11 (0.33 secs): usedNodes() = 2, workers = 2
[17:01:48.440] Poll #12 (0.36 secs): usedNodes() = 2, workers = 2
[17:01:48.473] Poll #13 (0.39 secs): usedNodes() = 2, workers = 2
[17:01:48.506] Poll #14 (0.43 secs): usedNodes() = 2, workers = 2
[17:01:48.539] Poll #15 (0.46 secs): usedNodes() = 2, workers = 2
[17:01:48.572] Poll #16 (0.49 secs): usedNodes() = 2, workers = 2
[17:01:48.605] Poll #17 (0.53 secs): usedNodes() = 2, workers = 2
[17:01:48.639] Poll #18 (0.56 secs): usedNodes() = 2, workers = 2
[17:01:48.672] Poll #19 (0.59 secs): usedNodes() = 2, workers = 2
[17:01:48.706] Poll #20 (0.63 secs): usedNodes() = 2, workers = 2
[17:01:48.740] Poll #21 (0.66 secs): usedNodes() = 2, workers = 2
[17:01:48.774] Poll #22 (0.69 secs): usedNodes() = 2, workers = 2
[17:01:48.808] Poll #23 (0.73 secs): usedNodes() = 2, workers = 2
[17:01:48.821] receiveMessageFromWorker() for ClusterFuture ...
[17:01:48.821] - Validating connection of MultisessionFuture
[17:01:48.822] - received message: FutureResult
[17:01:48.822] - Received FutureResult
[17:01:48.822] - Erased future from FutureRegistry
[17:01:48.823] result() for ClusterFuture ...
[17:01:48.823] - result already collected: FutureResult
[17:01:48.823] result() for ClusterFuture ... done
[17:01:48.827] receiveMessageFromWorker() for ClusterFuture ... done
[17:01:48.827] result() for ClusterFuture ...
[17:01:48.828] - result already collected: FutureResult
[17:01:48.828] result() for ClusterFuture ... done
[17:01:48.828] result() for ClusterFuture ...
[17:01:48.828] - result already collected: FutureResult
[17:01:48.828] result() for ClusterFuture ... done
[17:01:48.830] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[17:01:48.830] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[17:01:48.831] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[17:01:48.831] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[17:01:48.831] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[17:01:48.831] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[17:01:48.832] MultisessionFuture started
[17:01:48.833] - Launch lazy future ... done
[17:01:48.833] run() for ‘MultisessionFuture’ ... done
[17:01:48.834] resolve() on list ...
[17:01:48.834]  recursive: 0
[17:01:48.835]  length: 3
[17:01:48.835] 
[17:01:48.835] Future #1
[17:01:48.835] result() for ClusterFuture ...
[17:01:48.835] - result already collected: FutureResult
[17:01:48.835] result() for ClusterFuture ... done
[17:01:48.835] result() for ClusterFuture ...
[17:01:48.836] - result already collected: FutureResult
[17:01:48.836] result() for ClusterFuture ... done
[17:01:48.836] signalConditionsASAP(MultisessionFuture, pos=1) ...
[17:01:48.836] - nx: 3
[17:01:48.836] - relay: TRUE
[17:01:48.836] - stdout: TRUE
[17:01:48.836] - signal: TRUE
[17:01:48.837] - resignal: FALSE
[17:01:48.837] - force: TRUE
[17:01:48.837] - relayed: [n=3] FALSE, FALSE, FALSE
[17:01:48.837] - queued futures: [n=3] FALSE, FALSE, FALSE
[17:01:48.837]  - until=1
[17:01:48.837]  - relaying element #1
[17:01:48.837] result() for ClusterFuture ...
[17:01:48.837] - result already collected: FutureResult
[17:01:48.838] result() for ClusterFuture ... done
[17:01:48.838] result() for ClusterFuture ...
[17:01:48.838] - result already collected: FutureResult
[17:01:48.838] result() for ClusterFuture ... done
[17:01:48.838] result() for ClusterFuture ...
[17:01:48.838] - result already collected: FutureResult
[17:01:48.838] result() for ClusterFuture ... done
[17:01:48.838] result() for ClusterFuture ...
[17:01:48.839] - result already collected: FutureResult
[17:01:48.839] result() for ClusterFuture ... done
[17:01:48.839] - relayed: [n=3] TRUE, FALSE, FALSE
[17:01:48.839] - queued futures: [n=3] TRUE, FALSE, FALSE
[17:01:48.839] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[17:01:48.839]  length: 2 (resolved future 1)
[17:01:49.094] receiveMessageFromWorker() for ClusterFuture ...
[17:01:49.094] - Validating connection of MultisessionFuture
[17:01:49.095] - received message: FutureResult
[17:01:49.095] - Received FutureResult
[17:01:49.096] - Erased future from FutureRegistry
[17:01:49.096] result() for ClusterFuture ...
[17:01:49.096] - result already collected: FutureResult
[17:01:49.096] result() for ClusterFuture ... done
[17:01:49.098] receiveMessageFromWorker() for ClusterFuture ... done
[17:01:49.098] Future #2
[17:01:49.098] result() for ClusterFuture ...
[17:01:49.098] - result already collected: FutureResult
[17:01:49.098] result() for ClusterFuture ... done
[17:01:49.098] result() for ClusterFuture ...
[17:01:49.098] - result already collected: FutureResult
[17:01:49.098] result() for ClusterFuture ... done
[17:01:49.098] signalConditionsASAP(MultisessionFuture, pos=2) ...
[17:01:49.098] - nx: 3
[17:01:49.099] - relay: TRUE
[17:01:49.099] - stdout: TRUE
[17:01:49.099] - signal: TRUE
[17:01:49.099] - resignal: FALSE
[17:01:49.099] - force: TRUE
[17:01:49.099] - relayed: [n=3] TRUE, FALSE, FALSE
[17:01:49.099] - queued futures: [n=3] TRUE, FALSE, FALSE
[17:01:49.099]  - until=2
[17:01:49.099]  - relaying element #2
[17:01:49.099] result() for ClusterFuture ...
[17:01:49.099] - result already collected: FutureResult
[17:01:49.100] result() for ClusterFuture ... done
[17:01:49.100] result() for ClusterFuture ...
[17:01:49.100] - result already collected: FutureResult
[17:01:49.100] result() for ClusterFuture ... done
[17:01:49.100] result() for ClusterFuture ...
[17:01:49.100] - result already collected: FutureResult
[17:01:49.100] result() for ClusterFuture ... done
[17:01:49.100] result() for ClusterFuture ...
[17:01:49.100] - result already collected: FutureResult
[17:01:49.100] result() for ClusterFuture ... done
[17:01:49.100] - relayed: [n=3] TRUE, TRUE, FALSE
[17:01:49.101] - queued futures: [n=3] TRUE, TRUE, FALSE
[17:01:49.101] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[17:01:49.101]  length: 1 (resolved future 2)
[17:01:50.349] receiveMessageFromWorker() for ClusterFuture ...
[17:01:50.349] - Validating connection of MultisessionFuture
[17:01:50.349] - received message: FutureResult
[17:01:50.350] - Received FutureResult
[17:01:50.350] - Erased future from FutureRegistry
[17:01:50.350] result() for ClusterFuture ...
[17:01:50.350] - result already collected: FutureResult
[17:01:50.350] result() for ClusterFuture ... done
[17:01:50.352] receiveMessageFromWorker() for ClusterFuture ... done
[17:01:50.352] Future #3
[17:01:50.353] result() for ClusterFuture ...
[17:01:50.353] - result already collected: FutureResult
[17:01:50.353] result() for ClusterFuture ... done
[17:01:50.353] result() for ClusterFuture ...
[17:01:50.353] - result already collected: FutureResult
[17:01:50.353] result() for ClusterFuture ... done
[17:01:50.353] signalConditionsASAP(MultisessionFuture, pos=3) ...
[17:01:50.353] - nx: 3
[17:01:50.353] - relay: TRUE
[17:01:50.353] - stdout: TRUE
[17:01:50.354] - signal: TRUE
[17:01:50.354] - resignal: FALSE
[17:01:50.354] - force: TRUE
[17:01:50.354] - relayed: [n=3] TRUE, TRUE, FALSE
[17:01:50.354] - queued futures: [n=3] TRUE, TRUE, FALSE
[17:01:50.354]  - until=3
[17:01:50.354]  - relaying element #3
[17:01:50.354] result() for ClusterFuture ...
[17:01:50.354] - result already collected: FutureResult
[17:01:50.354] result() for ClusterFuture ... done
[17:01:50.354] result() for ClusterFuture ...
[17:01:50.354] - result already collected: FutureResult
[17:01:50.355] result() for ClusterFuture ... done
[17:01:50.355] result() for ClusterFuture ...
[17:01:50.355] - result already collected: FutureResult
[17:01:50.355] result() for ClusterFuture ... done
[17:01:50.355] result() for ClusterFuture ...
[17:01:50.355] - result already collected: FutureResult
[17:01:50.355] result() for ClusterFuture ... done
[17:01:50.355] - relayed: [n=3] TRUE, TRUE, TRUE
[17:01:50.355] - queued futures: [n=3] TRUE, TRUE, TRUE
[17:01:50.355] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[17:01:50.356]  length: 0 (resolved future 3)
[17:01:50.356] Relaying remaining futures
[17:01:50.356] signalConditionsASAP(NULL, pos=0) ...
[17:01:50.356] - nx: 3
[17:01:50.356] - relay: TRUE
[17:01:50.356] - stdout: TRUE
[17:01:50.356] - signal: TRUE
[17:01:50.356] - resignal: FALSE
[17:01:50.356] - force: TRUE
[17:01:50.356] - relayed: [n=3] TRUE, TRUE, TRUE
[17:01:50.356] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[17:01:50.356] - relayed: [n=3] TRUE, TRUE, TRUE
[17:01:50.357] - queued futures: [n=3] TRUE, TRUE, TRUE
[17:01:50.357] signalConditionsASAP(NULL, pos=0) ... done
[17:01:50.357] resolve() on list ... DONE
[17:01:50.357] result() for ClusterFuture ...
[17:01:50.357] - result already collected: FutureResult
[17:01:50.357] result() for ClusterFuture ... done
[17:01:50.357] result() for ClusterFuture ...
[17:01:50.357] - result already collected: FutureResult
[17:01:50.357] result() for ClusterFuture ... done
[17:01:50.357] result() for ClusterFuture ...
[17:01:50.357] - result already collected: FutureResult
[17:01:50.357] result() for ClusterFuture ... done
[17:01:50.358] result() for ClusterFuture ...
[17:01:50.358] - result already collected: FutureResult
[17:01:50.358] result() for ClusterFuture ... done
[17:01:50.358] result() for ClusterFuture ...
[17:01:50.358] - result already collected: FutureResult
[17:01:50.358] result() for ClusterFuture ... done
[17:01:50.358] result() for ClusterFuture ...
[17:01:50.358] - result already collected: FutureResult
[17:01:50.358] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-25 17:01:47 0.00000000 secs
6         launch   overhead   <NA> 2024-11-25 17:01:47 0.02496147 secs
2      getWorker   overhead launch 2024-11-25 17:01:47 0.02811146 secs
3    eraseWorker   overhead launch 2024-11-25 17:01:47 0.02972603 secs
4 attachPackages   overhead launch 2024-11-25 17:01:47 0.03085566 secs
5  exportGlobals   overhead launch 2024-11-25 17:01:47 0.03153181 secs
9       evaluate evaluation   <NA> 2024-11-25 17:01:47 0.03476858 secs
7  receiveResult   overhead gather 2024-11-25 17:01:48 0.87501884 secs
8         gather   overhead   <NA> 2024-11-25 17:01:48 0.87603521 secs
           duration future_label                          future_uuid
1 9.588718e-03 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
6 9.481668e-03 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
2 2.381802e-04 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
3 4.785061e-04 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
4 4.291534e-05 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
5 1.571417e-03 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
9 8.360415e-01 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
7 1.950264e-04 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
8 2.710819e-04 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
                          session_uuid
1 6b576c21-b247-85dd-4051-e6950337e24b
6 6b576c21-b247-85dd-4051-e6950337e24b
2 6b576c21-b247-85dd-4051-e6950337e24b
3 6b576c21-b247-85dd-4051-e6950337e24b
4 6b576c21-b247-85dd-4051-e6950337e24b
5 6b576c21-b247-85dd-4051-e6950337e24b
9 cc17e604-e139-c617-da1a-8980a0ad7337
7 6b576c21-b247-85dd-4051-e6950337e24b
8 6b576c21-b247-85dd-4051-e6950337e24b

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-25 17:01:47 0.00000000 secs
6         launch   overhead   <NA> 2024-11-25 17:01:48 0.01952910 secs
2      getWorker   overhead launch 2024-11-25 17:01:48 0.02230906 secs
3    eraseWorker   overhead launch 2024-11-25 17:01:48 0.02299142 secs
4 attachPackages   overhead launch 2024-11-25 17:01:48 0.07297158 secs
5  exportGlobals   overhead launch 2024-11-25 17:01:48 0.07349086 secs
9       evaluate evaluation   <NA> 2024-11-25 17:01:48 0.07604432 secs
7  receiveResult   overhead gather 2024-11-25 17:01:49 1.11086440 secs
8         gather   overhead   <NA> 2024-11-25 17:01:49 1.11198950 secs
           duration future_label                          future_uuid
1 6.335497e-03 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
6 5.631232e-02 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
2 1.320839e-04 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
3 4.926872e-02 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
4 4.410744e-05 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
5 1.289129e-03 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
9 1.034229e+00 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
7 2.362728e-04 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
8 2.701283e-04 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
                          session_uuid
1 6b576c21-b247-85dd-4051-e6950337e24b
6 6b576c21-b247-85dd-4051-e6950337e24b
2 6b576c21-b247-85dd-4051-e6950337e24b
3 6b576c21-b247-85dd-4051-e6950337e24b
4 6b576c21-b247-85dd-4051-e6950337e24b
5 6b576c21-b247-85dd-4051-e6950337e24b
9 67bbe3d5-4e26-dc24-de16-f84dfe423535
7 6b576c21-b247-85dd-4051-e6950337e24b
8 6b576c21-b247-85dd-4051-e6950337e24b

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2024-11-25 17:01:48 0.00000000 secs
6         launch   overhead   <NA> 2024-11-25 17:01:48 0.01668763 secs
2      getWorker   overhead launch 2024-11-25 17:01:48 0.01948714 secs
3    eraseWorker   overhead launch 2024-11-25 17:01:48 0.76844001 secs
4 attachPackages   overhead launch 2024-11-25 17:01:48 0.76933217 secs
5  exportGlobals   overhead launch 2024-11-25 17:01:48 0.76984072 secs
9       evaluate evaluation   <NA> 2024-11-25 17:01:48 0.77266073 secs
7  receiveResult   overhead gather 2024-11-25 17:01:50 2.28901219 secs
8         gather   overhead   <NA> 2024-11-25 17:01:50 2.29004478 secs
           duration future_label                          future_uuid
1 3.144264e-03 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
6 7.555981e-01 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
2 7.484741e-01 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
3 3.943443e-04 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
4 3.576279e-05 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
5 1.356363e-03 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
9 1.507447e+00 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
7 2.000332e-04 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
8 2.763271e-04 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
                          session_uuid
1 6b576c21-b247-85dd-4051-e6950337e24b
6 6b576c21-b247-85dd-4051-e6950337e24b
2 6b576c21-b247-85dd-4051-e6950337e24b
3 6b576c21-b247-85dd-4051-e6950337e24b
4 6b576c21-b247-85dd-4051-e6950337e24b
5 6b576c21-b247-85dd-4051-e6950337e24b
9 cc17e604-e139-c617-da1a-8980a0ad7337
7 6b576c21-b247-85dd-4051-e6950337e24b
8 6b576c21-b247-85dd-4051-e6950337e24b

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[17:01:50.365] plan(): Setting new future strategy stack:
[17:01:50.365] List of future strategies:
[17:01:50.365] 1. sequential:
[17:01:50.365]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:01:50.365]    - tweaked: FALSE
[17:01:50.365]    - call: plan(sequential)
[17:01:50.366] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2024-11-25 17:01:47 0.00000000 secs
6          launch   overhead   <NA> 2024-11-25 17:01:47 0.02496147 secs
2       getWorker   overhead launch 2024-11-25 17:01:47 0.02811146 secs
3     eraseWorker   overhead launch 2024-11-25 17:01:47 0.02972603 secs
4  attachPackages   overhead launch 2024-11-25 17:01:47 0.03085566 secs
5   exportGlobals   overhead launch 2024-11-25 17:01:47 0.03153181 secs
9        evaluate evaluation   <NA> 2024-11-25 17:01:47 0.03476858 secs
7   receiveResult   overhead gather 2024-11-25 17:01:48 0.87501884 secs
8          gather   overhead   <NA> 2024-11-25 17:01:48 0.87603521 secs
11         create   overhead   <NA> 2024-11-25 17:01:47 0.00000000 secs
61         launch   overhead   <NA> 2024-11-25 17:01:48 0.01952910 secs
21      getWorker   overhead launch 2024-11-25 17:01:48 0.02230906 secs
31    eraseWorker   overhead launch 2024-11-25 17:01:48 0.02299142 secs
41 attachPackages   overhead launch 2024-11-25 17:01:48 0.07297158 secs
51  exportGlobals   overhead launch 2024-11-25 17:01:48 0.07349086 secs
91       evaluate evaluation   <NA> 2024-11-25 17:01:48 0.07604432 secs
71  receiveResult   overhead gather 2024-11-25 17:01:49 1.11086440 secs
81         gather   overhead   <NA> 2024-11-25 17:01:49 1.11198950 secs
12         create   overhead   <NA> 2024-11-25 17:01:48 0.00000000 secs
62         launch   overhead   <NA> 2024-11-25 17:01:48 0.01668763 secs
22      getWorker   overhead launch 2024-11-25 17:01:48 0.01948714 secs
32    eraseWorker   overhead launch 2024-11-25 17:01:48 0.76844001 secs
42 attachPackages   overhead launch 2024-11-25 17:01:48 0.76933217 secs
52  exportGlobals   overhead launch 2024-11-25 17:01:48 0.76984072 secs
92       evaluate evaluation   <NA> 2024-11-25 17:01:48 0.77266073 secs
72  receiveResult   overhead gather 2024-11-25 17:01:50 2.28901219 secs
82         gather   overhead   <NA> 2024-11-25 17:01:50 2.29004478 secs
            duration future_label                          future_uuid
1  9.588718e-03 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
6  9.481668e-03 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
2  2.381802e-04 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
3  4.785061e-04 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
4  4.291534e-05 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
5  1.571417e-03 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
9  8.360415e-01 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
7  1.950264e-04 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
8  2.710819e-04 secs         <NA> 64f41abe-aa8b-b576-0925-4670a7380960
11 6.335497e-03 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
61 5.631232e-02 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
21 1.320839e-04 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
31 4.926872e-02 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
41 4.410744e-05 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
51 1.289129e-03 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
91 1.034229e+00 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
71 2.362728e-04 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
81 2.701283e-04 secs         <NA> 57bfecc3-98df-5ff9-e422-d2b78aeb3e1e
12 3.144264e-03 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
62 7.555981e-01 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
22 7.484741e-01 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
32 3.943443e-04 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
42 3.576279e-05 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
52 1.356363e-03 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
92 1.507447e+00 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
72 2.000332e-04 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
82 2.763271e-04 secs         <NA> 6eacba8b-c7df-4306-c6af-84e85c422441
                           session_uuid
1  6b576c21-b247-85dd-4051-e6950337e24b
6  6b576c21-b247-85dd-4051-e6950337e24b
2  6b576c21-b247-85dd-4051-e6950337e24b
3  6b576c21-b247-85dd-4051-e6950337e24b
4  6b576c21-b247-85dd-4051-e6950337e24b
5  6b576c21-b247-85dd-4051-e6950337e24b
9  cc17e604-e139-c617-da1a-8980a0ad7337
7  6b576c21-b247-85dd-4051-e6950337e24b
8  6b576c21-b247-85dd-4051-e6950337e24b
11 6b576c21-b247-85dd-4051-e6950337e24b
61 6b576c21-b247-85dd-4051-e6950337e24b
21 6b576c21-b247-85dd-4051-e6950337e24b
31 6b576c21-b247-85dd-4051-e6950337e24b
41 6b576c21-b247-85dd-4051-e6950337e24b
51 6b576c21-b247-85dd-4051-e6950337e24b
91 67bbe3d5-4e26-dc24-de16-f84dfe423535
71 6b576c21-b247-85dd-4051-e6950337e24b
81 6b576c21-b247-85dd-4051-e6950337e24b
12 6b576c21-b247-85dd-4051-e6950337e24b
62 6b576c21-b247-85dd-4051-e6950337e24b
22 6b576c21-b247-85dd-4051-e6950337e24b
32 6b576c21-b247-85dd-4051-e6950337e24b
42 6b576c21-b247-85dd-4051-e6950337e24b
52 6b576c21-b247-85dd-4051-e6950337e24b
92 cc17e604-e139-c617-da1a-8980a0ad7337
72 6b576c21-b247-85dd-4051-e6950337e24b
82 6b576c21-b247-85dd-4051-e6950337e24b
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8360415 secs      0.9540516 0.01934147 secs     0.02207158
2    mean 1.1259059 secs      0.7893917 0.28042603 secs     0.19661142
3  median 1.0342288 secs      0.9298448 0.06291795 secs     0.05656768
4     max 1.5074475 secs      0.6581817 0.75901866 secs     0.33140273
5   total 3.3777177 secs      0.7893917 0.84127808 secs     0.19661142
        duration       walltime
1 0.8763063 secs 0.8763063 secs
2 1.4262957 secs 1.4262957 secs
3 1.1122596 secs 1.1122596 secs
4 2.2903211 secs 2.2903211 secs
5 4.2788870 secs 4.2788870 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
