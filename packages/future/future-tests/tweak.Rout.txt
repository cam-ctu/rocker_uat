
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[17:04:25.434] plan(): Setting new future strategy stack:
[17:04:25.434] List of future strategies:
[17:04:25.434] 1. sequential:
[17:04:25.434]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:25.434]    - tweaked: FALSE
[17:04:25.434]    - call: future::plan("sequential")
[17:04:25.446] plan(): nbrOfWorkers() = 1
> 
> message("*** Tweaking future strategies ...")
*** Tweaking future strategies ...
> 
> message("*** y <- tweak(future::sequential) ...")
*** y <- tweak(future::sequential) ...
> sequential2 <- future::tweak(future::sequential)
> print(args(sequential2))
function (..., envir = parent.frame()) 
NULL
> stopifnot(identical(sequential2, future::sequential))
> stopifnot(!inherits(sequential2, "tweaked"))
> 
> 
> message("*** y <- tweak(future::sequential, abc = FALSE) ...")
*** y <- tweak(future::sequential, abc = FALSE) ...
> sequential2 <- future::tweak(future::sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> message("*** y <- tweak('sequential', abc = FALSE) ...")
*** y <- tweak('sequential', abc = FALSE) ...
> sequential2 <- future::tweak("sequential", abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> library("future")
[17:04:25.464] Option 'future.startup.script': TRUE
[17:04:25.464] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[17:04:25.464] Future startup scripts found: <none>
> 
> message("*** y <- tweak(sequential, abc = FALSE) ...")
*** y <- tweak(sequential, abc = FALSE) ...
> sequential2 <- future::tweak(sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> message("*** y <- tweak('sequential', abc = FALSE) ...")
*** y <- tweak('sequential', abc = FALSE) ...
> sequential2 <- future::tweak('sequential', abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> message("*** y <- tweak('sequential', abc = FALSE, abc = 1, def = TRUE) ...")
*** y <- tweak('sequential', abc = FALSE, abc = 1, def = TRUE) ...
> res <- tryCatch({
+   sequential2 <- future::tweak('sequential', abc = FALSE, abc = 1, def = TRUE)
+ }, warning = function(w) {
+   w
+ })
> stopifnot(inherits(res, "warning"))
> sequential2 <- future::tweak('sequential', abc = FALSE, abc = 1, def = TRUE)
Warning: Detected 2 unknown future arguments: ‘abc’, ‘def’
> print(args(sequential2))
function (..., abc = FALSE, def = TRUE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> 
> message("*** y <- tweak(cluster, rscript_startup = quote(...)) ...")
*** y <- tweak(cluster, rscript_startup = quote(...)) ...
> cl <- 42L
> cluster2 <- tweak(cluster, workers = cl, rscript_startup = quote(options(abc = 42L)))
> print(args(cluster2))
function (..., workers = 42L, rscript_startup = quote(options(abc = 42L)), 
    envir = parent.frame()) 
NULL
> stopifnot(!identical(cluster2, future::cluster))
> stopifnot(inherits(cluster2, "tweaked"))
> formals2 <- formals(cluster2)
> stopifnot(identical(formals2$workers, cl))
> stopifnot("rscript_startup" %in% names(formals2))
> rscript_startup <- formals2$rscript_startup
> stopifnot(!is.null(rscript_startup),
+           is.language(rscript_startup), is.call(rscript_startup))
> value <- eval(rscript_startup)
> stopifnot(is.language(value), is.call(value))
> 
> 
> message("*** plan() - tweak without introducting package dependencies ...")
*** plan() - tweak without introducting package dependencies ...
> 
> ## Requires a auxillary package that is available and not already loaded
> if (!covr_testing && requireNamespace("grid")) {
+   local({
+     cl <- makeClusterPSOCK(1L)
+     on.exit(parallel:::stopCluster(cl))
+     ns0 <- unlist(parallel::clusterEvalQ(cl, loadedNamespaces()))
+ 
+     ## When using futures, the 'future' package is loaded on the worker
+     ns0 <- c(ns0, c("tools", "parallelly",
+                     "codetools", "digest", "globals", "listenv", "future"))
+     if (!is.element("grid", ns0)) {
+       ## Assert that a global copy from a package does not trigger
+       ## that package from being loaded on the worker
+       dummy <- grid::depth
+       oplan <- future::plan(future::cluster, workers = cl)
+       on.exit(future::plan(oplan), add = TRUE)
+       ns <- unlist(parallel::clusterEvalQ(cl, loadedNamespaces()))
+       diff <- setdiff(ns, ns0)
+       if ("covr" %in% diff) diff <- setdiff(diff, c("lazyeval", "rex", "covr"))
+       if (length(diff) > 0) {
+         print(loadedNamespaces())
+         stop("plan() with a tweak() causes new packages to be loaded: ", sQuote(paste(diff, collapse = ", ")))
+       }
+     }
+   })
+ }
Loading required namespace: grid
[17:04:25.481] [local output] makeClusterPSOCK() ...
[17:04:25.516] [local output] Workers: [n = 1] ‘localhost’
[17:04:25.517] [local output] Base port: 11067
[17:04:25.518] [local output] Getting setup options for 1 cluster nodes ...
[17:04:25.518] [local output]  - Node 1 of 1 ...
[17:04:25.518] [local output] localMachine=TRUE => revtunnel=FALSE

[17:04:25.519] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpRHCR2m/worker.rank=1.parallelly.parent=50640.c5d031f4e3a6.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpRHCR2m/worker.rank=1.parallelly.parent=50640.c5d031f4e3a6.pid")'’
[17:04:25.709] - Possible to infer worker's PID: TRUE
[17:04:25.710] [local output] Rscript port: 11067

[17:04:25.710] [local output] Getting setup options for 1 cluster nodes ... done
[17:04:25.710] [local output]  - Parallel setup requested for some PSOCK nodes
[17:04:25.711] [local output] Setting up PSOCK nodes in parallel
[17:04:25.711] List of 36
[17:04:25.711]  $ worker          : chr "localhost"
[17:04:25.711]   ..- attr(*, "localhost")= logi TRUE
[17:04:25.711]  $ master          : chr "localhost"
[17:04:25.711]  $ port            : int 11067
[17:04:25.711]  $ connectTimeout  : num 120
[17:04:25.711]  $ timeout         : num 2592000
[17:04:25.711]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:04:25.711]  $ homogeneous     : logi TRUE
[17:04:25.711]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:04:25.711]  $ rscript_envs    : NULL
[17:04:25.711]  $ rscript_libs    : NULL
[17:04:25.711]  $ rscript_startup : NULL
[17:04:25.711]  $ rscript_sh      : chr "sh"
[17:04:25.711]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:04:25.711]  $ methods         : logi TRUE
[17:04:25.711]  $ socketOptions   : chr "no-delay"
[17:04:25.711]  $ useXDR          : logi FALSE
[17:04:25.711]  $ outfile         : chr "/dev/null"
[17:04:25.711]  $ renice          : int NA
[17:04:25.711]  $ rshcmd          : NULL
[17:04:25.711]  $ user            : chr(0) 
[17:04:25.711]  $ revtunnel       : logi FALSE
[17:04:25.711]  $ rshlogfile      : NULL
[17:04:25.711]  $ rshopts         : chr(0) 
[17:04:25.711]  $ rank            : int 1
[17:04:25.711]  $ manual          : logi FALSE
[17:04:25.711]  $ dryrun          : logi FALSE
[17:04:25.711]  $ quiet           : logi FALSE
[17:04:25.711]  $ setup_strategy  : chr "parallel"
[17:04:25.711]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:04:25.711]  $ pidfile         : chr "/tmp/RtmpRHCR2m/worker.rank=1.parallelly.parent=50640.c5d031f4e3a6.pid"
[17:04:25.711]  $ rshcmd_label    : NULL
[17:04:25.711]  $ rsh_call        : NULL
[17:04:25.711]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:04:25.711]  $ localMachine    : logi TRUE
[17:04:25.711]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:04:25.711]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:04:25.711]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:04:25.711]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:04:25.711]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:04:25.711]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:04:25.711]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:04:25.711]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:04:25.711]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:04:25.711]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:04:25.711]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:04:25.711]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:04:25.711]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:04:25.711]  $ arguments       :List of 28
[17:04:25.711]   ..$ worker          : chr "localhost"
[17:04:25.711]   ..$ master          : NULL
[17:04:25.711]   ..$ port            : int 11067
[17:04:25.711]   ..$ connectTimeout  : num 120
[17:04:25.711]   ..$ timeout         : num 2592000
[17:04:25.711]   ..$ rscript         : NULL
[17:04:25.711]   ..$ homogeneous     : NULL
[17:04:25.711]   ..$ rscript_args    : NULL
[17:04:25.711]   ..$ rscript_envs    : NULL
[17:04:25.711]   ..$ rscript_libs    : NULL
[17:04:25.711]   ..$ rscript_startup : NULL
[17:04:25.711]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:04:25.711]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:04:25.711]   ..$ methods         : logi TRUE
[17:04:25.711]   ..$ socketOptions   : chr "no-delay"
[17:04:25.711]   ..$ useXDR          : logi FALSE
[17:04:25.711]   ..$ outfile         : chr "/dev/null"
[17:04:25.711]   ..$ renice          : int NA
[17:04:25.711]   ..$ rshcmd          : NULL
[17:04:25.711]   ..$ user            : NULL
[17:04:25.711]   ..$ revtunnel       : logi NA
[17:04:25.711]   ..$ rshlogfile      : NULL
[17:04:25.711]   ..$ rshopts         : NULL
[17:04:25.711]   ..$ rank            : int 1
[17:04:25.711]   ..$ manual          : logi FALSE
[17:04:25.711]   ..$ dryrun          : logi FALSE
[17:04:25.711]   ..$ quiet           : logi FALSE
[17:04:25.711]   ..$ setup_strategy  : chr "parallel"
[17:04:25.711]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:04:25.729] [local output] System call to launch all workers:
[17:04:25.729] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpRHCR2m/worker.rank=1.parallelly.parent=50640.c5d031f4e3a6.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11067 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:04:25.729] [local output] Starting PSOCK main server
[17:04:25.735] [local output] Workers launched
[17:04:25.735] [local output] Waiting for workers to connect back
[17:04:25.735]  - [local output] 0 workers out of 1 ready
[17:04:25.929]  - [local output] 0 workers out of 1 ready
[17:04:25.930]  - [local output] 1 workers out of 1 ready
[17:04:25.930] [local output] Launching of workers completed
[17:04:25.930] [local output] Collecting session information from workers
[17:04:25.931] [local output]  - Worker #1 of 1
[17:04:25.931] [local output] makeClusterPSOCK() ... done
[17:04:25.932] plan(): Setting new future strategy stack:
[17:04:25.932] List of future strategies:
[17:04:25.932] 1. cluster:
[17:04:25.932]    - args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[17:04:25.932]    - tweaked: TRUE
[17:04:25.932]    - call: future::plan(future::cluster, workers = cl)
[17:04:25.948] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:04:25.948] cluster:
[17:04:25.948] - args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[17:04:25.948] - tweaked: TRUE
[17:04:25.948] - call: future::plan(future::cluster, workers = cl)
[17:04:25.951] getGlobalsAndPackages() ...
[17:04:25.951] Not searching for globals
[17:04:25.952] - globals: [0] <none>
[17:04:25.952] getGlobalsAndPackages() ... DONE
[17:04:25.959] Packages needed by the future expression (n = 0): <none>
[17:04:25.959] Packages needed by future strategies (n = 0): <none>
[17:04:25.960] {
[17:04:25.960]     {
[17:04:25.960]         {
[17:04:25.960]             ...future.startTime <- base::Sys.time()
[17:04:25.960]             {
[17:04:25.960]                 {
[17:04:25.960]                   {
[17:04:25.960]                     base::local({
[17:04:25.960]                       has_future <- base::requireNamespace("future", 
[17:04:25.960]                         quietly = TRUE)
[17:04:25.960]                       if (has_future) {
[17:04:25.960]                         ns <- base::getNamespace("future")
[17:04:25.960]                         version <- ns[[".package"]][["version"]]
[17:04:25.960]                         if (is.null(version)) 
[17:04:25.960]                           version <- utils::packageVersion("future")
[17:04:25.960]                       }
[17:04:25.960]                       else {
[17:04:25.960]                         version <- NULL
[17:04:25.960]                       }
[17:04:25.960]                       if (!has_future || version < "1.8.0") {
[17:04:25.960]                         info <- base::c(r_version = base::gsub("R version ", 
[17:04:25.960]                           "", base::R.version$version.string), 
[17:04:25.960]                           platform = base::sprintf("%s (%s-bit)", 
[17:04:25.960]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:25.960]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:25.960]                             "release", "version")], collapse = " "), 
[17:04:25.960]                           hostname = base::Sys.info()[["nodename"]])
[17:04:25.960]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:04:25.960]                           info)
[17:04:25.960]                         info <- base::paste(info, collapse = "; ")
[17:04:25.960]                         if (!has_future) {
[17:04:25.960]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:25.960]                             info)
[17:04:25.960]                         }
[17:04:25.960]                         else {
[17:04:25.960]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:25.960]                             info, version)
[17:04:25.960]                         }
[17:04:25.960]                         base::stop(msg)
[17:04:25.960]                       }
[17:04:25.960]                     })
[17:04:25.960]                   }
[17:04:25.960]                   ...future.strategy.old <- future::plan("list")
[17:04:25.960]                   options(future.plan = NULL)
[17:04:25.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:25.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:25.960]                 }
[17:04:25.960]                 ...future.workdir <- getwd()
[17:04:25.960]             }
[17:04:25.960]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:25.960]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:25.960]         }
[17:04:25.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:25.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:25.960]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:25.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:25.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:25.960]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:25.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:25.960]             base::names(...future.oldOptions))
[17:04:25.960]     }
[17:04:25.960]     if (FALSE) {
[17:04:25.960]     }
[17:04:25.960]     else {
[17:04:25.960]         if (TRUE) {
[17:04:25.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:25.960]                 open = "w")
[17:04:25.960]         }
[17:04:25.960]         else {
[17:04:25.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:25.960]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:25.960]         }
[17:04:25.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:25.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:25.960]             base::sink(type = "output", split = FALSE)
[17:04:25.960]             base::close(...future.stdout)
[17:04:25.960]         }, add = TRUE)
[17:04:25.960]     }
[17:04:25.960]     ...future.frame <- base::sys.nframe()
[17:04:25.960]     ...future.conditions <- base::list()
[17:04:25.960]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:25.960]     if (FALSE) {
[17:04:25.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:25.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:25.960]     }
[17:04:25.960]     ...future.result <- base::tryCatch({
[17:04:25.960]         base::withCallingHandlers({
[17:04:25.960]             ...future.value <- base::withVisible(base::local({
[17:04:25.960]                 ...future.makeSendCondition <- base::local({
[17:04:25.960]                   sendCondition <- NULL
[17:04:25.960]                   function(frame = 1L) {
[17:04:25.960]                     if (is.function(sendCondition)) 
[17:04:25.960]                       return(sendCondition)
[17:04:25.960]                     ns <- getNamespace("parallel")
[17:04:25.960]                     if (exists("sendData", mode = "function", 
[17:04:25.960]                       envir = ns)) {
[17:04:25.960]                       parallel_sendData <- get("sendData", mode = "function", 
[17:04:25.960]                         envir = ns)
[17:04:25.960]                       envir <- sys.frame(frame)
[17:04:25.960]                       master <- NULL
[17:04:25.960]                       while (!identical(envir, .GlobalEnv) && 
[17:04:25.960]                         !identical(envir, emptyenv())) {
[17:04:25.960]                         if (exists("master", mode = "list", envir = envir, 
[17:04:25.960]                           inherits = FALSE)) {
[17:04:25.960]                           master <- get("master", mode = "list", 
[17:04:25.960]                             envir = envir, inherits = FALSE)
[17:04:25.960]                           if (inherits(master, c("SOCKnode", 
[17:04:25.960]                             "SOCK0node"))) {
[17:04:25.960]                             sendCondition <<- function(cond) {
[17:04:25.960]                               data <- list(type = "VALUE", value = cond, 
[17:04:25.960]                                 success = TRUE)
[17:04:25.960]                               parallel_sendData(master, data)
[17:04:25.960]                             }
[17:04:25.960]                             return(sendCondition)
[17:04:25.960]                           }
[17:04:25.960]                         }
[17:04:25.960]                         frame <- frame + 1L
[17:04:25.960]                         envir <- sys.frame(frame)
[17:04:25.960]                       }
[17:04:25.960]                     }
[17:04:25.960]                     sendCondition <<- function(cond) NULL
[17:04:25.960]                   }
[17:04:25.960]                 })
[17:04:25.960]                 withCallingHandlers({
[17:04:25.960]                   NA
[17:04:25.960]                 }, immediateCondition = function(cond) {
[17:04:25.960]                   sendCondition <- ...future.makeSendCondition()
[17:04:25.960]                   sendCondition(cond)
[17:04:25.960]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:25.960]                   {
[17:04:25.960]                     inherits <- base::inherits
[17:04:25.960]                     invokeRestart <- base::invokeRestart
[17:04:25.960]                     is.null <- base::is.null
[17:04:25.960]                     muffled <- FALSE
[17:04:25.960]                     if (inherits(cond, "message")) {
[17:04:25.960]                       muffled <- grepl(pattern, "muffleMessage")
[17:04:25.960]                       if (muffled) 
[17:04:25.960]                         invokeRestart("muffleMessage")
[17:04:25.960]                     }
[17:04:25.960]                     else if (inherits(cond, "warning")) {
[17:04:25.960]                       muffled <- grepl(pattern, "muffleWarning")
[17:04:25.960]                       if (muffled) 
[17:04:25.960]                         invokeRestart("muffleWarning")
[17:04:25.960]                     }
[17:04:25.960]                     else if (inherits(cond, "condition")) {
[17:04:25.960]                       if (!is.null(pattern)) {
[17:04:25.960]                         computeRestarts <- base::computeRestarts
[17:04:25.960]                         grepl <- base::grepl
[17:04:25.960]                         restarts <- computeRestarts(cond)
[17:04:25.960]                         for (restart in restarts) {
[17:04:25.960]                           name <- restart$name
[17:04:25.960]                           if (is.null(name)) 
[17:04:25.960]                             next
[17:04:25.960]                           if (!grepl(pattern, name)) 
[17:04:25.960]                             next
[17:04:25.960]                           invokeRestart(restart)
[17:04:25.960]                           muffled <- TRUE
[17:04:25.960]                           break
[17:04:25.960]                         }
[17:04:25.960]                       }
[17:04:25.960]                     }
[17:04:25.960]                     invisible(muffled)
[17:04:25.960]                   }
[17:04:25.960]                   muffleCondition(cond)
[17:04:25.960]                 })
[17:04:25.960]             }))
[17:04:25.960]             future::FutureResult(value = ...future.value$value, 
[17:04:25.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:25.960]                   ...future.rng), globalenv = if (FALSE) 
[17:04:25.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:25.960]                     ...future.globalenv.names))
[17:04:25.960]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:25.960]         }, condition = base::local({
[17:04:25.960]             c <- base::c
[17:04:25.960]             inherits <- base::inherits
[17:04:25.960]             invokeRestart <- base::invokeRestart
[17:04:25.960]             length <- base::length
[17:04:25.960]             list <- base::list
[17:04:25.960]             seq.int <- base::seq.int
[17:04:25.960]             signalCondition <- base::signalCondition
[17:04:25.960]             sys.calls <- base::sys.calls
[17:04:25.960]             `[[` <- base::`[[`
[17:04:25.960]             `+` <- base::`+`
[17:04:25.960]             `<<-` <- base::`<<-`
[17:04:25.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:25.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:25.960]                   3L)]
[17:04:25.960]             }
[17:04:25.960]             function(cond) {
[17:04:25.960]                 is_error <- inherits(cond, "error")
[17:04:25.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:25.960]                   NULL)
[17:04:25.960]                 if (is_error) {
[17:04:25.960]                   sessionInformation <- function() {
[17:04:25.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:25.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:25.960]                       search = base::search(), system = base::Sys.info())
[17:04:25.960]                   }
[17:04:25.960]                   ...future.conditions[[length(...future.conditions) + 
[17:04:25.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:25.960]                     cond$call), session = sessionInformation(), 
[17:04:25.960]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:25.960]                   signalCondition(cond)
[17:04:25.960]                 }
[17:04:25.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:25.960]                 "immediateCondition"))) {
[17:04:25.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:25.960]                   ...future.conditions[[length(...future.conditions) + 
[17:04:25.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:25.960]                   if (TRUE && !signal) {
[17:04:25.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:25.960]                     {
[17:04:25.960]                       inherits <- base::inherits
[17:04:25.960]                       invokeRestart <- base::invokeRestart
[17:04:25.960]                       is.null <- base::is.null
[17:04:25.960]                       muffled <- FALSE
[17:04:25.960]                       if (inherits(cond, "message")) {
[17:04:25.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:25.960]                         if (muffled) 
[17:04:25.960]                           invokeRestart("muffleMessage")
[17:04:25.960]                       }
[17:04:25.960]                       else if (inherits(cond, "warning")) {
[17:04:25.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:25.960]                         if (muffled) 
[17:04:25.960]                           invokeRestart("muffleWarning")
[17:04:25.960]                       }
[17:04:25.960]                       else if (inherits(cond, "condition")) {
[17:04:25.960]                         if (!is.null(pattern)) {
[17:04:25.960]                           computeRestarts <- base::computeRestarts
[17:04:25.960]                           grepl <- base::grepl
[17:04:25.960]                           restarts <- computeRestarts(cond)
[17:04:25.960]                           for (restart in restarts) {
[17:04:25.960]                             name <- restart$name
[17:04:25.960]                             if (is.null(name)) 
[17:04:25.960]                               next
[17:04:25.960]                             if (!grepl(pattern, name)) 
[17:04:25.960]                               next
[17:04:25.960]                             invokeRestart(restart)
[17:04:25.960]                             muffled <- TRUE
[17:04:25.960]                             break
[17:04:25.960]                           }
[17:04:25.960]                         }
[17:04:25.960]                       }
[17:04:25.960]                       invisible(muffled)
[17:04:25.960]                     }
[17:04:25.960]                     muffleCondition(cond, pattern = "^muffle")
[17:04:25.960]                   }
[17:04:25.960]                 }
[17:04:25.960]                 else {
[17:04:25.960]                   if (TRUE) {
[17:04:25.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:25.960]                     {
[17:04:25.960]                       inherits <- base::inherits
[17:04:25.960]                       invokeRestart <- base::invokeRestart
[17:04:25.960]                       is.null <- base::is.null
[17:04:25.960]                       muffled <- FALSE
[17:04:25.960]                       if (inherits(cond, "message")) {
[17:04:25.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:25.960]                         if (muffled) 
[17:04:25.960]                           invokeRestart("muffleMessage")
[17:04:25.960]                       }
[17:04:25.960]                       else if (inherits(cond, "warning")) {
[17:04:25.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:25.960]                         if (muffled) 
[17:04:25.960]                           invokeRestart("muffleWarning")
[17:04:25.960]                       }
[17:04:25.960]                       else if (inherits(cond, "condition")) {
[17:04:25.960]                         if (!is.null(pattern)) {
[17:04:25.960]                           computeRestarts <- base::computeRestarts
[17:04:25.960]                           grepl <- base::grepl
[17:04:25.960]                           restarts <- computeRestarts(cond)
[17:04:25.960]                           for (restart in restarts) {
[17:04:25.960]                             name <- restart$name
[17:04:25.960]                             if (is.null(name)) 
[17:04:25.960]                               next
[17:04:25.960]                             if (!grepl(pattern, name)) 
[17:04:25.960]                               next
[17:04:25.960]                             invokeRestart(restart)
[17:04:25.960]                             muffled <- TRUE
[17:04:25.960]                             break
[17:04:25.960]                           }
[17:04:25.960]                         }
[17:04:25.960]                       }
[17:04:25.960]                       invisible(muffled)
[17:04:25.960]                     }
[17:04:25.960]                     muffleCondition(cond, pattern = "^muffle")
[17:04:25.960]                   }
[17:04:25.960]                 }
[17:04:25.960]             }
[17:04:25.960]         }))
[17:04:25.960]     }, error = function(ex) {
[17:04:25.960]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:25.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:25.960]                 ...future.rng), started = ...future.startTime, 
[17:04:25.960]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:25.960]             version = "1.8"), class = "FutureResult")
[17:04:25.960]     }, finally = {
[17:04:25.960]         if (!identical(...future.workdir, getwd())) 
[17:04:25.960]             setwd(...future.workdir)
[17:04:25.960]         {
[17:04:25.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:25.960]                 ...future.oldOptions$nwarnings <- NULL
[17:04:25.960]             }
[17:04:25.960]             base::options(...future.oldOptions)
[17:04:25.960]             if (.Platform$OS.type == "windows") {
[17:04:25.960]                 old_names <- names(...future.oldEnvVars)
[17:04:25.960]                 envs <- base::Sys.getenv()
[17:04:25.960]                 names <- names(envs)
[17:04:25.960]                 common <- intersect(names, old_names)
[17:04:25.960]                 added <- setdiff(names, old_names)
[17:04:25.960]                 removed <- setdiff(old_names, names)
[17:04:25.960]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:25.960]                   envs[common]]
[17:04:25.960]                 NAMES <- toupper(changed)
[17:04:25.960]                 args <- list()
[17:04:25.960]                 for (kk in seq_along(NAMES)) {
[17:04:25.960]                   name <- changed[[kk]]
[17:04:25.960]                   NAME <- NAMES[[kk]]
[17:04:25.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:25.960]                     next
[17:04:25.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:25.960]                 }
[17:04:25.960]                 NAMES <- toupper(added)
[17:04:25.960]                 for (kk in seq_along(NAMES)) {
[17:04:25.960]                   name <- added[[kk]]
[17:04:25.960]                   NAME <- NAMES[[kk]]
[17:04:25.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:25.960]                     next
[17:04:25.960]                   args[[name]] <- ""
[17:04:25.960]                 }
[17:04:25.960]                 NAMES <- toupper(removed)
[17:04:25.960]                 for (kk in seq_along(NAMES)) {
[17:04:25.960]                   name <- removed[[kk]]
[17:04:25.960]                   NAME <- NAMES[[kk]]
[17:04:25.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:25.960]                     next
[17:04:25.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:25.960]                 }
[17:04:25.960]                 if (length(args) > 0) 
[17:04:25.960]                   base::do.call(base::Sys.setenv, args = args)
[17:04:25.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:25.960]             }
[17:04:25.960]             else {
[17:04:25.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:25.960]             }
[17:04:25.960]             {
[17:04:25.960]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:25.960]                   0L) {
[17:04:25.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:25.960]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:25.960]                   base::options(opts)
[17:04:25.960]                 }
[17:04:25.960]                 {
[17:04:25.960]                   NULL
[17:04:25.960]                   options(future.plan = NULL)
[17:04:25.960]                   if (is.na(NA_character_)) 
[17:04:25.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:25.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:04:25.960]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:25.960]                     .init = FALSE)
[17:04:25.960]                 }
[17:04:25.960]             }
[17:04:25.960]         }
[17:04:25.960]     })
[17:04:25.960]     if (TRUE) {
[17:04:25.960]         base::sink(type = "output", split = FALSE)
[17:04:25.960]         if (TRUE) {
[17:04:25.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:25.960]         }
[17:04:25.960]         else {
[17:04:25.960]             ...future.result["stdout"] <- base::list(NULL)
[17:04:25.960]         }
[17:04:25.960]         base::close(...future.stdout)
[17:04:25.960]         ...future.stdout <- NULL
[17:04:25.960]     }
[17:04:25.960]     ...future.result$conditions <- ...future.conditions
[17:04:25.960]     ...future.result$finished <- base::Sys.time()
[17:04:25.960]     ...future.result
[17:04:25.960] }
[17:04:26.013] ClusterFuture started
[17:04:26.014] result() for ClusterFuture ...
[17:04:26.015] receiveMessageFromWorker() for ClusterFuture ...
[17:04:26.015] - Validating connection of ClusterFuture
[17:04:26.047] - received message: FutureResult
[17:04:26.048] - Received FutureResult
[17:04:26.051] - Erased future from FutureRegistry
[17:04:26.051] result() for ClusterFuture ...
[17:04:26.051] - result already collected: FutureResult
[17:04:26.051] result() for ClusterFuture ... done
[17:04:26.051] receiveMessageFromWorker() for ClusterFuture ... done
[17:04:26.052] result() for ClusterFuture ... done
[17:04:26.052] result() for ClusterFuture ...
[17:04:26.052] - result already collected: FutureResult
[17:04:26.052] result() for ClusterFuture ... done
[17:04:26.052] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:04:26.052] plan(): nbrOfWorkers() = 1
[17:04:26.053] plan(): Setting new future strategy stack:
[17:04:26.053] List of future strategies:
[17:04:26.053] 1. sequential:
[17:04:26.053]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.053]    - tweaked: FALSE
[17:04:26.053]    - call: future::plan("sequential")
[17:04:26.054] plan(): nbrOfWorkers() = 1
> 
> message("*** plan() - tweak without introducting package dependencies ... DONE")
*** plan() - tweak without introducting package dependencies ... DONE
> 
> 
> message("*** y %<-% { expr } %tweak% tweaks ...")
*** y %<-% { expr } %tweak% tweaks ...
> 
> plan(sequential)
[17:04:26.055] plan(): Setting new future strategy stack:
[17:04:26.055] List of future strategies:
[17:04:26.055] 1. sequential:
[17:04:26.055]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.055]    - tweaked: FALSE
[17:04:26.055]    - call: plan(sequential)
[17:04:26.055] plan(): nbrOfWorkers() = 1
> 
> a <- 0
> x %<-% { a <- 1; a }
[17:04:26.057] getGlobalsAndPackages() ...
[17:04:26.058] Searching for globals...
[17:04:26.068] - globals found: [2] ‘{’, ‘<-’
[17:04:26.068] Searching for globals ... DONE
[17:04:26.069] Resolving globals: FALSE
[17:04:26.069] 
[17:04:26.069] 
[17:04:26.069] getGlobalsAndPackages() ... DONE
[17:04:26.070] run() for ‘Future’ ...
[17:04:26.070] - state: ‘created’
[17:04:26.070] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:04:26.070] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:04:26.070] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:04:26.071]   - Field: ‘label’
[17:04:26.071]   - Field: ‘local’
[17:04:26.071]   - Field: ‘owner’
[17:04:26.071]   - Field: ‘envir’
[17:04:26.071]   - Field: ‘packages’
[17:04:26.071]   - Field: ‘gc’
[17:04:26.071]   - Field: ‘conditions’
[17:04:26.071]   - Field: ‘expr’
[17:04:26.071]   - Field: ‘uuid’
[17:04:26.071]   - Field: ‘seed’
[17:04:26.071]   - Field: ‘version’
[17:04:26.072]   - Field: ‘result’
[17:04:26.072]   - Field: ‘asynchronous’
[17:04:26.072]   - Field: ‘calls’
[17:04:26.072]   - Field: ‘globals’
[17:04:26.072]   - Field: ‘stdout’
[17:04:26.072]   - Field: ‘earlySignal’
[17:04:26.072]   - Field: ‘lazy’
[17:04:26.072]   - Field: ‘state’
[17:04:26.072] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:04:26.072] - Launch lazy future ...
[17:04:26.073] Packages needed by the future expression (n = 0): <none>
[17:04:26.073] Packages needed by future strategies (n = 0): <none>
[17:04:26.073] {
[17:04:26.073]     {
[17:04:26.073]         {
[17:04:26.073]             ...future.startTime <- base::Sys.time()
[17:04:26.073]             {
[17:04:26.073]                 {
[17:04:26.073]                   {
[17:04:26.073]                     base::local({
[17:04:26.073]                       has_future <- base::requireNamespace("future", 
[17:04:26.073]                         quietly = TRUE)
[17:04:26.073]                       if (has_future) {
[17:04:26.073]                         ns <- base::getNamespace("future")
[17:04:26.073]                         version <- ns[[".package"]][["version"]]
[17:04:26.073]                         if (is.null(version)) 
[17:04:26.073]                           version <- utils::packageVersion("future")
[17:04:26.073]                       }
[17:04:26.073]                       else {
[17:04:26.073]                         version <- NULL
[17:04:26.073]                       }
[17:04:26.073]                       if (!has_future || version < "1.8.0") {
[17:04:26.073]                         info <- base::c(r_version = base::gsub("R version ", 
[17:04:26.073]                           "", base::R.version$version.string), 
[17:04:26.073]                           platform = base::sprintf("%s (%s-bit)", 
[17:04:26.073]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:26.073]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:26.073]                             "release", "version")], collapse = " "), 
[17:04:26.073]                           hostname = base::Sys.info()[["nodename"]])
[17:04:26.073]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:04:26.073]                           info)
[17:04:26.073]                         info <- base::paste(info, collapse = "; ")
[17:04:26.073]                         if (!has_future) {
[17:04:26.073]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:26.073]                             info)
[17:04:26.073]                         }
[17:04:26.073]                         else {
[17:04:26.073]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:26.073]                             info, version)
[17:04:26.073]                         }
[17:04:26.073]                         base::stop(msg)
[17:04:26.073]                       }
[17:04:26.073]                     })
[17:04:26.073]                   }
[17:04:26.073]                   ...future.strategy.old <- future::plan("list")
[17:04:26.073]                   options(future.plan = NULL)
[17:04:26.073]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:26.073]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:26.073]                 }
[17:04:26.073]                 ...future.workdir <- getwd()
[17:04:26.073]             }
[17:04:26.073]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:26.073]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:26.073]         }
[17:04:26.073]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:26.073]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:26.073]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:26.073]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:26.073]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:26.073]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:26.073]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:26.073]             base::names(...future.oldOptions))
[17:04:26.073]     }
[17:04:26.073]     if (FALSE) {
[17:04:26.073]     }
[17:04:26.073]     else {
[17:04:26.073]         if (TRUE) {
[17:04:26.073]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:26.073]                 open = "w")
[17:04:26.073]         }
[17:04:26.073]         else {
[17:04:26.073]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:26.073]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:26.073]         }
[17:04:26.073]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:26.073]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:26.073]             base::sink(type = "output", split = FALSE)
[17:04:26.073]             base::close(...future.stdout)
[17:04:26.073]         }, add = TRUE)
[17:04:26.073]     }
[17:04:26.073]     ...future.frame <- base::sys.nframe()
[17:04:26.073]     ...future.conditions <- base::list()
[17:04:26.073]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:26.073]     if (FALSE) {
[17:04:26.073]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:26.073]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:26.073]     }
[17:04:26.073]     ...future.result <- base::tryCatch({
[17:04:26.073]         base::withCallingHandlers({
[17:04:26.073]             ...future.value <- base::withVisible(base::local({
[17:04:26.073]                 a <- 1
[17:04:26.073]                 a
[17:04:26.073]             }))
[17:04:26.073]             future::FutureResult(value = ...future.value$value, 
[17:04:26.073]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:26.073]                   ...future.rng), globalenv = if (FALSE) 
[17:04:26.073]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:26.073]                     ...future.globalenv.names))
[17:04:26.073]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:26.073]         }, condition = base::local({
[17:04:26.073]             c <- base::c
[17:04:26.073]             inherits <- base::inherits
[17:04:26.073]             invokeRestart <- base::invokeRestart
[17:04:26.073]             length <- base::length
[17:04:26.073]             list <- base::list
[17:04:26.073]             seq.int <- base::seq.int
[17:04:26.073]             signalCondition <- base::signalCondition
[17:04:26.073]             sys.calls <- base::sys.calls
[17:04:26.073]             `[[` <- base::`[[`
[17:04:26.073]             `+` <- base::`+`
[17:04:26.073]             `<<-` <- base::`<<-`
[17:04:26.073]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:26.073]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:26.073]                   3L)]
[17:04:26.073]             }
[17:04:26.073]             function(cond) {
[17:04:26.073]                 is_error <- inherits(cond, "error")
[17:04:26.073]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:26.073]                   NULL)
[17:04:26.073]                 if (is_error) {
[17:04:26.073]                   sessionInformation <- function() {
[17:04:26.073]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:26.073]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:26.073]                       search = base::search(), system = base::Sys.info())
[17:04:26.073]                   }
[17:04:26.073]                   ...future.conditions[[length(...future.conditions) + 
[17:04:26.073]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:26.073]                     cond$call), session = sessionInformation(), 
[17:04:26.073]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:26.073]                   signalCondition(cond)
[17:04:26.073]                 }
[17:04:26.073]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:26.073]                 "immediateCondition"))) {
[17:04:26.073]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:26.073]                   ...future.conditions[[length(...future.conditions) + 
[17:04:26.073]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:26.073]                   if (TRUE && !signal) {
[17:04:26.073]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:26.073]                     {
[17:04:26.073]                       inherits <- base::inherits
[17:04:26.073]                       invokeRestart <- base::invokeRestart
[17:04:26.073]                       is.null <- base::is.null
[17:04:26.073]                       muffled <- FALSE
[17:04:26.073]                       if (inherits(cond, "message")) {
[17:04:26.073]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:26.073]                         if (muffled) 
[17:04:26.073]                           invokeRestart("muffleMessage")
[17:04:26.073]                       }
[17:04:26.073]                       else if (inherits(cond, "warning")) {
[17:04:26.073]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:26.073]                         if (muffled) 
[17:04:26.073]                           invokeRestart("muffleWarning")
[17:04:26.073]                       }
[17:04:26.073]                       else if (inherits(cond, "condition")) {
[17:04:26.073]                         if (!is.null(pattern)) {
[17:04:26.073]                           computeRestarts <- base::computeRestarts
[17:04:26.073]                           grepl <- base::grepl
[17:04:26.073]                           restarts <- computeRestarts(cond)
[17:04:26.073]                           for (restart in restarts) {
[17:04:26.073]                             name <- restart$name
[17:04:26.073]                             if (is.null(name)) 
[17:04:26.073]                               next
[17:04:26.073]                             if (!grepl(pattern, name)) 
[17:04:26.073]                               next
[17:04:26.073]                             invokeRestart(restart)
[17:04:26.073]                             muffled <- TRUE
[17:04:26.073]                             break
[17:04:26.073]                           }
[17:04:26.073]                         }
[17:04:26.073]                       }
[17:04:26.073]                       invisible(muffled)
[17:04:26.073]                     }
[17:04:26.073]                     muffleCondition(cond, pattern = "^muffle")
[17:04:26.073]                   }
[17:04:26.073]                 }
[17:04:26.073]                 else {
[17:04:26.073]                   if (TRUE) {
[17:04:26.073]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:26.073]                     {
[17:04:26.073]                       inherits <- base::inherits
[17:04:26.073]                       invokeRestart <- base::invokeRestart
[17:04:26.073]                       is.null <- base::is.null
[17:04:26.073]                       muffled <- FALSE
[17:04:26.073]                       if (inherits(cond, "message")) {
[17:04:26.073]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:26.073]                         if (muffled) 
[17:04:26.073]                           invokeRestart("muffleMessage")
[17:04:26.073]                       }
[17:04:26.073]                       else if (inherits(cond, "warning")) {
[17:04:26.073]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:26.073]                         if (muffled) 
[17:04:26.073]                           invokeRestart("muffleWarning")
[17:04:26.073]                       }
[17:04:26.073]                       else if (inherits(cond, "condition")) {
[17:04:26.073]                         if (!is.null(pattern)) {
[17:04:26.073]                           computeRestarts <- base::computeRestarts
[17:04:26.073]                           grepl <- base::grepl
[17:04:26.073]                           restarts <- computeRestarts(cond)
[17:04:26.073]                           for (restart in restarts) {
[17:04:26.073]                             name <- restart$name
[17:04:26.073]                             if (is.null(name)) 
[17:04:26.073]                               next
[17:04:26.073]                             if (!grepl(pattern, name)) 
[17:04:26.073]                               next
[17:04:26.073]                             invokeRestart(restart)
[17:04:26.073]                             muffled <- TRUE
[17:04:26.073]                             break
[17:04:26.073]                           }
[17:04:26.073]                         }
[17:04:26.073]                       }
[17:04:26.073]                       invisible(muffled)
[17:04:26.073]                     }
[17:04:26.073]                     muffleCondition(cond, pattern = "^muffle")
[17:04:26.073]                   }
[17:04:26.073]                 }
[17:04:26.073]             }
[17:04:26.073]         }))
[17:04:26.073]     }, error = function(ex) {
[17:04:26.073]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:26.073]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:26.073]                 ...future.rng), started = ...future.startTime, 
[17:04:26.073]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:26.073]             version = "1.8"), class = "FutureResult")
[17:04:26.073]     }, finally = {
[17:04:26.073]         if (!identical(...future.workdir, getwd())) 
[17:04:26.073]             setwd(...future.workdir)
[17:04:26.073]         {
[17:04:26.073]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:26.073]                 ...future.oldOptions$nwarnings <- NULL
[17:04:26.073]             }
[17:04:26.073]             base::options(...future.oldOptions)
[17:04:26.073]             if (.Platform$OS.type == "windows") {
[17:04:26.073]                 old_names <- names(...future.oldEnvVars)
[17:04:26.073]                 envs <- base::Sys.getenv()
[17:04:26.073]                 names <- names(envs)
[17:04:26.073]                 common <- intersect(names, old_names)
[17:04:26.073]                 added <- setdiff(names, old_names)
[17:04:26.073]                 removed <- setdiff(old_names, names)
[17:04:26.073]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:26.073]                   envs[common]]
[17:04:26.073]                 NAMES <- toupper(changed)
[17:04:26.073]                 args <- list()
[17:04:26.073]                 for (kk in seq_along(NAMES)) {
[17:04:26.073]                   name <- changed[[kk]]
[17:04:26.073]                   NAME <- NAMES[[kk]]
[17:04:26.073]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.073]                     next
[17:04:26.073]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:26.073]                 }
[17:04:26.073]                 NAMES <- toupper(added)
[17:04:26.073]                 for (kk in seq_along(NAMES)) {
[17:04:26.073]                   name <- added[[kk]]
[17:04:26.073]                   NAME <- NAMES[[kk]]
[17:04:26.073]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.073]                     next
[17:04:26.073]                   args[[name]] <- ""
[17:04:26.073]                 }
[17:04:26.073]                 NAMES <- toupper(removed)
[17:04:26.073]                 for (kk in seq_along(NAMES)) {
[17:04:26.073]                   name <- removed[[kk]]
[17:04:26.073]                   NAME <- NAMES[[kk]]
[17:04:26.073]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.073]                     next
[17:04:26.073]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:26.073]                 }
[17:04:26.073]                 if (length(args) > 0) 
[17:04:26.073]                   base::do.call(base::Sys.setenv, args = args)
[17:04:26.073]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:26.073]             }
[17:04:26.073]             else {
[17:04:26.073]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:26.073]             }
[17:04:26.073]             {
[17:04:26.073]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:26.073]                   0L) {
[17:04:26.073]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:26.073]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:26.073]                   base::options(opts)
[17:04:26.073]                 }
[17:04:26.073]                 {
[17:04:26.073]                   {
[17:04:26.073]                     NULL
[17:04:26.073]                     RNGkind("Mersenne-Twister")
[17:04:26.073]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:04:26.073]                       inherits = FALSE)
[17:04:26.073]                   }
[17:04:26.073]                   options(future.plan = NULL)
[17:04:26.073]                   if (is.na(NA_character_)) 
[17:04:26.073]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:26.073]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:04:26.073]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:26.073]                     .init = FALSE)
[17:04:26.073]                 }
[17:04:26.073]             }
[17:04:26.073]         }
[17:04:26.073]     })
[17:04:26.073]     if (TRUE) {
[17:04:26.073]         base::sink(type = "output", split = FALSE)
[17:04:26.073]         if (TRUE) {
[17:04:26.073]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:26.073]         }
[17:04:26.073]         else {
[17:04:26.073]             ...future.result["stdout"] <- base::list(NULL)
[17:04:26.073]         }
[17:04:26.073]         base::close(...future.stdout)
[17:04:26.073]         ...future.stdout <- NULL
[17:04:26.073]     }
[17:04:26.073]     ...future.result$conditions <- ...future.conditions
[17:04:26.073]     ...future.result$finished <- base::Sys.time()
[17:04:26.073]     ...future.result
[17:04:26.073] }
[17:04:26.075] plan(): Setting new future strategy stack:
[17:04:26.075] List of future strategies:
[17:04:26.075] 1. sequential:
[17:04:26.075]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.075]    - tweaked: FALSE
[17:04:26.075]    - call: NULL
[17:04:26.076] plan(): nbrOfWorkers() = 1
[17:04:26.077] plan(): Setting new future strategy stack:
[17:04:26.077] List of future strategies:
[17:04:26.077] 1. sequential:
[17:04:26.077]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.077]    - tweaked: FALSE
[17:04:26.077]    - call: plan(sequential)
[17:04:26.077] plan(): nbrOfWorkers() = 1
[17:04:26.078] SequentialFuture started (and completed)
[17:04:26.078] - Launch lazy future ... done
[17:04:26.078] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> 
> plan(sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
[17:04:26.079] plan(): Setting new future strategy stack:
[17:04:26.079] List of future strategies:
[17:04:26.079] 1. sequential:
[17:04:26.079]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[17:04:26.079]    - tweaked: TRUE
[17:04:26.079]    - call: plan(sequential, abc = FALSE)
[17:04:26.079] plan(): nbrOfWorkers() = 1
> 
> a <- 0
> x %<-% { a <- 1; a }
[17:04:26.080] getGlobalsAndPackages() ...
[17:04:26.080] Searching for globals...
[17:04:26.081] - globals found: [2] ‘{’, ‘<-’
[17:04:26.081] Searching for globals ... DONE
[17:04:26.081] Resolving globals: FALSE
[17:04:26.081] 
[17:04:26.081] 
[17:04:26.081] getGlobalsAndPackages() ... DONE
[17:04:26.082] run() for ‘Future’ ...
[17:04:26.082] - state: ‘created’
[17:04:26.082] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:04:26.082] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:04:26.082] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:04:26.082]   - Field: ‘label’
[17:04:26.082]   - Field: ‘local’
[17:04:26.082]   - Field: ‘owner’
[17:04:26.083]   - Field: ‘envir’
[17:04:26.083]   - Field: ‘packages’
[17:04:26.083]   - Field: ‘gc’
[17:04:26.083]   - Field: ‘conditions’
[17:04:26.083]   - Field: ‘expr’
[17:04:26.083]   - Field: ‘uuid’
[17:04:26.083]   - Field: ‘seed’
[17:04:26.083]   - Field: ‘version’
[17:04:26.083]   - Field: ‘result’
[17:04:26.083]   - Field: ‘asynchronous’
[17:04:26.084]   - Field: ‘calls’
[17:04:26.084]   - Field: ‘abc’
[17:04:26.084]   - Field: ‘globals’
[17:04:26.084]   - Field: ‘stdout’
[17:04:26.084]   - Field: ‘earlySignal’
[17:04:26.084]   - Field: ‘lazy’
[17:04:26.084]   - Field: ‘state’
[17:04:26.084] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:04:26.084] - Launch lazy future ...
[17:04:26.084] Packages needed by the future expression (n = 0): <none>
[17:04:26.085] Packages needed by future strategies (n = 0): <none>
[17:04:26.085] {
[17:04:26.085]     {
[17:04:26.085]         {
[17:04:26.085]             ...future.startTime <- base::Sys.time()
[17:04:26.085]             {
[17:04:26.085]                 {
[17:04:26.085]                   {
[17:04:26.085]                     base::local({
[17:04:26.085]                       has_future <- base::requireNamespace("future", 
[17:04:26.085]                         quietly = TRUE)
[17:04:26.085]                       if (has_future) {
[17:04:26.085]                         ns <- base::getNamespace("future")
[17:04:26.085]                         version <- ns[[".package"]][["version"]]
[17:04:26.085]                         if (is.null(version)) 
[17:04:26.085]                           version <- utils::packageVersion("future")
[17:04:26.085]                       }
[17:04:26.085]                       else {
[17:04:26.085]                         version <- NULL
[17:04:26.085]                       }
[17:04:26.085]                       if (!has_future || version < "1.8.0") {
[17:04:26.085]                         info <- base::c(r_version = base::gsub("R version ", 
[17:04:26.085]                           "", base::R.version$version.string), 
[17:04:26.085]                           platform = base::sprintf("%s (%s-bit)", 
[17:04:26.085]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:26.085]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:26.085]                             "release", "version")], collapse = " "), 
[17:04:26.085]                           hostname = base::Sys.info()[["nodename"]])
[17:04:26.085]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:04:26.085]                           info)
[17:04:26.085]                         info <- base::paste(info, collapse = "; ")
[17:04:26.085]                         if (!has_future) {
[17:04:26.085]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:26.085]                             info)
[17:04:26.085]                         }
[17:04:26.085]                         else {
[17:04:26.085]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:26.085]                             info, version)
[17:04:26.085]                         }
[17:04:26.085]                         base::stop(msg)
[17:04:26.085]                       }
[17:04:26.085]                     })
[17:04:26.085]                   }
[17:04:26.085]                   ...future.strategy.old <- future::plan("list")
[17:04:26.085]                   options(future.plan = NULL)
[17:04:26.085]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:26.085]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:26.085]                 }
[17:04:26.085]                 ...future.workdir <- getwd()
[17:04:26.085]             }
[17:04:26.085]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:26.085]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:26.085]         }
[17:04:26.085]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:26.085]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:26.085]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:26.085]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:26.085]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:26.085]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:26.085]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:26.085]             base::names(...future.oldOptions))
[17:04:26.085]     }
[17:04:26.085]     if (FALSE) {
[17:04:26.085]     }
[17:04:26.085]     else {
[17:04:26.085]         if (TRUE) {
[17:04:26.085]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:26.085]                 open = "w")
[17:04:26.085]         }
[17:04:26.085]         else {
[17:04:26.085]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:26.085]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:26.085]         }
[17:04:26.085]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:26.085]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:26.085]             base::sink(type = "output", split = FALSE)
[17:04:26.085]             base::close(...future.stdout)
[17:04:26.085]         }, add = TRUE)
[17:04:26.085]     }
[17:04:26.085]     ...future.frame <- base::sys.nframe()
[17:04:26.085]     ...future.conditions <- base::list()
[17:04:26.085]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:26.085]     if (FALSE) {
[17:04:26.085]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:26.085]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:26.085]     }
[17:04:26.085]     ...future.result <- base::tryCatch({
[17:04:26.085]         base::withCallingHandlers({
[17:04:26.085]             ...future.value <- base::withVisible(base::local({
[17:04:26.085]                 a <- 1
[17:04:26.085]                 a
[17:04:26.085]             }))
[17:04:26.085]             future::FutureResult(value = ...future.value$value, 
[17:04:26.085]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:26.085]                   ...future.rng), globalenv = if (FALSE) 
[17:04:26.085]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:26.085]                     ...future.globalenv.names))
[17:04:26.085]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:26.085]         }, condition = base::local({
[17:04:26.085]             c <- base::c
[17:04:26.085]             inherits <- base::inherits
[17:04:26.085]             invokeRestart <- base::invokeRestart
[17:04:26.085]             length <- base::length
[17:04:26.085]             list <- base::list
[17:04:26.085]             seq.int <- base::seq.int
[17:04:26.085]             signalCondition <- base::signalCondition
[17:04:26.085]             sys.calls <- base::sys.calls
[17:04:26.085]             `[[` <- base::`[[`
[17:04:26.085]             `+` <- base::`+`
[17:04:26.085]             `<<-` <- base::`<<-`
[17:04:26.085]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:26.085]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:26.085]                   3L)]
[17:04:26.085]             }
[17:04:26.085]             function(cond) {
[17:04:26.085]                 is_error <- inherits(cond, "error")
[17:04:26.085]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:26.085]                   NULL)
[17:04:26.085]                 if (is_error) {
[17:04:26.085]                   sessionInformation <- function() {
[17:04:26.085]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:26.085]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:26.085]                       search = base::search(), system = base::Sys.info())
[17:04:26.085]                   }
[17:04:26.085]                   ...future.conditions[[length(...future.conditions) + 
[17:04:26.085]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:26.085]                     cond$call), session = sessionInformation(), 
[17:04:26.085]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:26.085]                   signalCondition(cond)
[17:04:26.085]                 }
[17:04:26.085]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:26.085]                 "immediateCondition"))) {
[17:04:26.085]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:26.085]                   ...future.conditions[[length(...future.conditions) + 
[17:04:26.085]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:26.085]                   if (TRUE && !signal) {
[17:04:26.085]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:26.085]                     {
[17:04:26.085]                       inherits <- base::inherits
[17:04:26.085]                       invokeRestart <- base::invokeRestart
[17:04:26.085]                       is.null <- base::is.null
[17:04:26.085]                       muffled <- FALSE
[17:04:26.085]                       if (inherits(cond, "message")) {
[17:04:26.085]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:26.085]                         if (muffled) 
[17:04:26.085]                           invokeRestart("muffleMessage")
[17:04:26.085]                       }
[17:04:26.085]                       else if (inherits(cond, "warning")) {
[17:04:26.085]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:26.085]                         if (muffled) 
[17:04:26.085]                           invokeRestart("muffleWarning")
[17:04:26.085]                       }
[17:04:26.085]                       else if (inherits(cond, "condition")) {
[17:04:26.085]                         if (!is.null(pattern)) {
[17:04:26.085]                           computeRestarts <- base::computeRestarts
[17:04:26.085]                           grepl <- base::grepl
[17:04:26.085]                           restarts <- computeRestarts(cond)
[17:04:26.085]                           for (restart in restarts) {
[17:04:26.085]                             name <- restart$name
[17:04:26.085]                             if (is.null(name)) 
[17:04:26.085]                               next
[17:04:26.085]                             if (!grepl(pattern, name)) 
[17:04:26.085]                               next
[17:04:26.085]                             invokeRestart(restart)
[17:04:26.085]                             muffled <- TRUE
[17:04:26.085]                             break
[17:04:26.085]                           }
[17:04:26.085]                         }
[17:04:26.085]                       }
[17:04:26.085]                       invisible(muffled)
[17:04:26.085]                     }
[17:04:26.085]                     muffleCondition(cond, pattern = "^muffle")
[17:04:26.085]                   }
[17:04:26.085]                 }
[17:04:26.085]                 else {
[17:04:26.085]                   if (TRUE) {
[17:04:26.085]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:26.085]                     {
[17:04:26.085]                       inherits <- base::inherits
[17:04:26.085]                       invokeRestart <- base::invokeRestart
[17:04:26.085]                       is.null <- base::is.null
[17:04:26.085]                       muffled <- FALSE
[17:04:26.085]                       if (inherits(cond, "message")) {
[17:04:26.085]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:26.085]                         if (muffled) 
[17:04:26.085]                           invokeRestart("muffleMessage")
[17:04:26.085]                       }
[17:04:26.085]                       else if (inherits(cond, "warning")) {
[17:04:26.085]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:26.085]                         if (muffled) 
[17:04:26.085]                           invokeRestart("muffleWarning")
[17:04:26.085]                       }
[17:04:26.085]                       else if (inherits(cond, "condition")) {
[17:04:26.085]                         if (!is.null(pattern)) {
[17:04:26.085]                           computeRestarts <- base::computeRestarts
[17:04:26.085]                           grepl <- base::grepl
[17:04:26.085]                           restarts <- computeRestarts(cond)
[17:04:26.085]                           for (restart in restarts) {
[17:04:26.085]                             name <- restart$name
[17:04:26.085]                             if (is.null(name)) 
[17:04:26.085]                               next
[17:04:26.085]                             if (!grepl(pattern, name)) 
[17:04:26.085]                               next
[17:04:26.085]                             invokeRestart(restart)
[17:04:26.085]                             muffled <- TRUE
[17:04:26.085]                             break
[17:04:26.085]                           }
[17:04:26.085]                         }
[17:04:26.085]                       }
[17:04:26.085]                       invisible(muffled)
[17:04:26.085]                     }
[17:04:26.085]                     muffleCondition(cond, pattern = "^muffle")
[17:04:26.085]                   }
[17:04:26.085]                 }
[17:04:26.085]             }
[17:04:26.085]         }))
[17:04:26.085]     }, error = function(ex) {
[17:04:26.085]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:26.085]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:26.085]                 ...future.rng), started = ...future.startTime, 
[17:04:26.085]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:26.085]             version = "1.8"), class = "FutureResult")
[17:04:26.085]     }, finally = {
[17:04:26.085]         if (!identical(...future.workdir, getwd())) 
[17:04:26.085]             setwd(...future.workdir)
[17:04:26.085]         {
[17:04:26.085]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:26.085]                 ...future.oldOptions$nwarnings <- NULL
[17:04:26.085]             }
[17:04:26.085]             base::options(...future.oldOptions)
[17:04:26.085]             if (.Platform$OS.type == "windows") {
[17:04:26.085]                 old_names <- names(...future.oldEnvVars)
[17:04:26.085]                 envs <- base::Sys.getenv()
[17:04:26.085]                 names <- names(envs)
[17:04:26.085]                 common <- intersect(names, old_names)
[17:04:26.085]                 added <- setdiff(names, old_names)
[17:04:26.085]                 removed <- setdiff(old_names, names)
[17:04:26.085]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:26.085]                   envs[common]]
[17:04:26.085]                 NAMES <- toupper(changed)
[17:04:26.085]                 args <- list()
[17:04:26.085]                 for (kk in seq_along(NAMES)) {
[17:04:26.085]                   name <- changed[[kk]]
[17:04:26.085]                   NAME <- NAMES[[kk]]
[17:04:26.085]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.085]                     next
[17:04:26.085]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:26.085]                 }
[17:04:26.085]                 NAMES <- toupper(added)
[17:04:26.085]                 for (kk in seq_along(NAMES)) {
[17:04:26.085]                   name <- added[[kk]]
[17:04:26.085]                   NAME <- NAMES[[kk]]
[17:04:26.085]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.085]                     next
[17:04:26.085]                   args[[name]] <- ""
[17:04:26.085]                 }
[17:04:26.085]                 NAMES <- toupper(removed)
[17:04:26.085]                 for (kk in seq_along(NAMES)) {
[17:04:26.085]                   name <- removed[[kk]]
[17:04:26.085]                   NAME <- NAMES[[kk]]
[17:04:26.085]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.085]                     next
[17:04:26.085]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:26.085]                 }
[17:04:26.085]                 if (length(args) > 0) 
[17:04:26.085]                   base::do.call(base::Sys.setenv, args = args)
[17:04:26.085]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:26.085]             }
[17:04:26.085]             else {
[17:04:26.085]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:26.085]             }
[17:04:26.085]             {
[17:04:26.085]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:26.085]                   0L) {
[17:04:26.085]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:26.085]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:26.085]                   base::options(opts)
[17:04:26.085]                 }
[17:04:26.085]                 {
[17:04:26.085]                   {
[17:04:26.085]                     NULL
[17:04:26.085]                     RNGkind("Mersenne-Twister")
[17:04:26.085]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:04:26.085]                       inherits = FALSE)
[17:04:26.085]                   }
[17:04:26.085]                   options(future.plan = NULL)
[17:04:26.085]                   if (is.na(NA_character_)) 
[17:04:26.085]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:26.085]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:04:26.085]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:26.085]                     .init = FALSE)
[17:04:26.085]                 }
[17:04:26.085]             }
[17:04:26.085]         }
[17:04:26.085]     })
[17:04:26.085]     if (TRUE) {
[17:04:26.085]         base::sink(type = "output", split = FALSE)
[17:04:26.085]         if (TRUE) {
[17:04:26.085]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:26.085]         }
[17:04:26.085]         else {
[17:04:26.085]             ...future.result["stdout"] <- base::list(NULL)
[17:04:26.085]         }
[17:04:26.085]         base::close(...future.stdout)
[17:04:26.085]         ...future.stdout <- NULL
[17:04:26.085]     }
[17:04:26.085]     ...future.result$conditions <- ...future.conditions
[17:04:26.085]     ...future.result$finished <- base::Sys.time()
[17:04:26.085]     ...future.result
[17:04:26.085] }
[17:04:26.087] plan(): Setting new future strategy stack:
[17:04:26.087] List of future strategies:
[17:04:26.087] 1. sequential:
[17:04:26.087]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.087]    - tweaked: FALSE
[17:04:26.087]    - call: NULL
[17:04:26.087] plan(): nbrOfWorkers() = 1
[17:04:26.088] plan(): Setting new future strategy stack:
[17:04:26.088] List of future strategies:
[17:04:26.088] 1. sequential:
[17:04:26.088]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[17:04:26.088]    - tweaked: TRUE
[17:04:26.088]    - call: plan(sequential, abc = FALSE)
[17:04:26.089] plan(): nbrOfWorkers() = 1
[17:04:26.089] SequentialFuture started (and completed)
[17:04:26.089] - Launch lazy future ... done
[17:04:26.089] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> x %<-% { a <- 2; a } %tweak% list(abc = TRUE)
[17:04:26.090] plan(): Setting new future strategy stack:
[17:04:26.090] List of future strategies:
[17:04:26.090] 1. sequential:
[17:04:26.090]    - args: function (..., abc = TRUE, envir = parent.frame(), workers = "<NULL>")
[17:04:26.090]    - tweaked: TRUE
[17:04:26.090]    - call: plan(sequential, abc = FALSE)
[17:04:26.090] plan(): nbrOfWorkers() = 1
[17:04:26.090] getGlobalsAndPackages() ...
[17:04:26.090] Searching for globals...
[17:04:26.091] - globals found: [2] ‘{’, ‘<-’
[17:04:26.092] Searching for globals ... DONE
[17:04:26.092] Resolving globals: FALSE
[17:04:26.092] 
[17:04:26.092] 
[17:04:26.092] getGlobalsAndPackages() ... DONE
[17:04:26.092] run() for ‘Future’ ...
[17:04:26.093] - state: ‘created’
[17:04:26.093] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘tweaked’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:04:26.093] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:04:26.093] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:04:26.093]   - Field: ‘label’
[17:04:26.093]   - Field: ‘local’
[17:04:26.093]   - Field: ‘owner’
[17:04:26.093]   - Field: ‘envir’
[17:04:26.094]   - Field: ‘packages’
[17:04:26.094]   - Field: ‘gc’
[17:04:26.094]   - Field: ‘conditions’
[17:04:26.094]   - Field: ‘expr’
[17:04:26.094]   - Field: ‘uuid’
[17:04:26.094]   - Field: ‘seed’
[17:04:26.094]   - Field: ‘version’
[17:04:26.094]   - Field: ‘result’
[17:04:26.094]   - Field: ‘asynchronous’
[17:04:26.094]   - Field: ‘calls’
[17:04:26.094]   - Field: ‘abc’
[17:04:26.095]   - Field: ‘globals’
[17:04:26.095]   - Field: ‘stdout’
[17:04:26.095]   - Field: ‘earlySignal’
[17:04:26.095]   - Field: ‘lazy’
[17:04:26.095]   - Field: ‘state’
[17:04:26.095] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:04:26.095] - Launch lazy future ...
[17:04:26.095] Packages needed by the future expression (n = 0): <none>
[17:04:26.095] Packages needed by future strategies (n = 0): <none>
[17:04:26.096] {
[17:04:26.096]     {
[17:04:26.096]         {
[17:04:26.096]             ...future.startTime <- base::Sys.time()
[17:04:26.096]             {
[17:04:26.096]                 {
[17:04:26.096]                   {
[17:04:26.096]                     base::local({
[17:04:26.096]                       has_future <- base::requireNamespace("future", 
[17:04:26.096]                         quietly = TRUE)
[17:04:26.096]                       if (has_future) {
[17:04:26.096]                         ns <- base::getNamespace("future")
[17:04:26.096]                         version <- ns[[".package"]][["version"]]
[17:04:26.096]                         if (is.null(version)) 
[17:04:26.096]                           version <- utils::packageVersion("future")
[17:04:26.096]                       }
[17:04:26.096]                       else {
[17:04:26.096]                         version <- NULL
[17:04:26.096]                       }
[17:04:26.096]                       if (!has_future || version < "1.8.0") {
[17:04:26.096]                         info <- base::c(r_version = base::gsub("R version ", 
[17:04:26.096]                           "", base::R.version$version.string), 
[17:04:26.096]                           platform = base::sprintf("%s (%s-bit)", 
[17:04:26.096]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:26.096]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:26.096]                             "release", "version")], collapse = " "), 
[17:04:26.096]                           hostname = base::Sys.info()[["nodename"]])
[17:04:26.096]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:04:26.096]                           info)
[17:04:26.096]                         info <- base::paste(info, collapse = "; ")
[17:04:26.096]                         if (!has_future) {
[17:04:26.096]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:26.096]                             info)
[17:04:26.096]                         }
[17:04:26.096]                         else {
[17:04:26.096]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:26.096]                             info, version)
[17:04:26.096]                         }
[17:04:26.096]                         base::stop(msg)
[17:04:26.096]                       }
[17:04:26.096]                     })
[17:04:26.096]                   }
[17:04:26.096]                   ...future.strategy.old <- future::plan("list")
[17:04:26.096]                   options(future.plan = NULL)
[17:04:26.096]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:26.096]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:04:26.096]                 }
[17:04:26.096]                 ...future.workdir <- getwd()
[17:04:26.096]             }
[17:04:26.096]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:26.096]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:26.096]         }
[17:04:26.096]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:26.096]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:26.096]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:26.096]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:26.096]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:26.096]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:26.096]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:26.096]             base::names(...future.oldOptions))
[17:04:26.096]     }
[17:04:26.096]     if (FALSE) {
[17:04:26.096]     }
[17:04:26.096]     else {
[17:04:26.096]         if (TRUE) {
[17:04:26.096]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:26.096]                 open = "w")
[17:04:26.096]         }
[17:04:26.096]         else {
[17:04:26.096]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:26.096]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:26.096]         }
[17:04:26.096]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:26.096]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:26.096]             base::sink(type = "output", split = FALSE)
[17:04:26.096]             base::close(...future.stdout)
[17:04:26.096]         }, add = TRUE)
[17:04:26.096]     }
[17:04:26.096]     ...future.frame <- base::sys.nframe()
[17:04:26.096]     ...future.conditions <- base::list()
[17:04:26.096]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:26.096]     if (FALSE) {
[17:04:26.096]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:26.096]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:26.096]     }
[17:04:26.096]     ...future.result <- base::tryCatch({
[17:04:26.096]         base::withCallingHandlers({
[17:04:26.096]             ...future.value <- base::withVisible(base::local({
[17:04:26.096]                 a <- 2
[17:04:26.096]                 a
[17:04:26.096]             }))
[17:04:26.096]             future::FutureResult(value = ...future.value$value, 
[17:04:26.096]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:26.096]                   ...future.rng), globalenv = if (FALSE) 
[17:04:26.096]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:26.096]                     ...future.globalenv.names))
[17:04:26.096]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:26.096]         }, condition = base::local({
[17:04:26.096]             c <- base::c
[17:04:26.096]             inherits <- base::inherits
[17:04:26.096]             invokeRestart <- base::invokeRestart
[17:04:26.096]             length <- base::length
[17:04:26.096]             list <- base::list
[17:04:26.096]             seq.int <- base::seq.int
[17:04:26.096]             signalCondition <- base::signalCondition
[17:04:26.096]             sys.calls <- base::sys.calls
[17:04:26.096]             `[[` <- base::`[[`
[17:04:26.096]             `+` <- base::`+`
[17:04:26.096]             `<<-` <- base::`<<-`
[17:04:26.096]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:26.096]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:26.096]                   3L)]
[17:04:26.096]             }
[17:04:26.096]             function(cond) {
[17:04:26.096]                 is_error <- inherits(cond, "error")
[17:04:26.096]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:26.096]                   NULL)
[17:04:26.096]                 if (is_error) {
[17:04:26.096]                   sessionInformation <- function() {
[17:04:26.096]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:26.096]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:26.096]                       search = base::search(), system = base::Sys.info())
[17:04:26.096]                   }
[17:04:26.096]                   ...future.conditions[[length(...future.conditions) + 
[17:04:26.096]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:26.096]                     cond$call), session = sessionInformation(), 
[17:04:26.096]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:26.096]                   signalCondition(cond)
[17:04:26.096]                 }
[17:04:26.096]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:26.096]                 "immediateCondition"))) {
[17:04:26.096]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:26.096]                   ...future.conditions[[length(...future.conditions) + 
[17:04:26.096]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:26.096]                   if (TRUE && !signal) {
[17:04:26.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:26.096]                     {
[17:04:26.096]                       inherits <- base::inherits
[17:04:26.096]                       invokeRestart <- base::invokeRestart
[17:04:26.096]                       is.null <- base::is.null
[17:04:26.096]                       muffled <- FALSE
[17:04:26.096]                       if (inherits(cond, "message")) {
[17:04:26.096]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:26.096]                         if (muffled) 
[17:04:26.096]                           invokeRestart("muffleMessage")
[17:04:26.096]                       }
[17:04:26.096]                       else if (inherits(cond, "warning")) {
[17:04:26.096]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:26.096]                         if (muffled) 
[17:04:26.096]                           invokeRestart("muffleWarning")
[17:04:26.096]                       }
[17:04:26.096]                       else if (inherits(cond, "condition")) {
[17:04:26.096]                         if (!is.null(pattern)) {
[17:04:26.096]                           computeRestarts <- base::computeRestarts
[17:04:26.096]                           grepl <- base::grepl
[17:04:26.096]                           restarts <- computeRestarts(cond)
[17:04:26.096]                           for (restart in restarts) {
[17:04:26.096]                             name <- restart$name
[17:04:26.096]                             if (is.null(name)) 
[17:04:26.096]                               next
[17:04:26.096]                             if (!grepl(pattern, name)) 
[17:04:26.096]                               next
[17:04:26.096]                             invokeRestart(restart)
[17:04:26.096]                             muffled <- TRUE
[17:04:26.096]                             break
[17:04:26.096]                           }
[17:04:26.096]                         }
[17:04:26.096]                       }
[17:04:26.096]                       invisible(muffled)
[17:04:26.096]                     }
[17:04:26.096]                     muffleCondition(cond, pattern = "^muffle")
[17:04:26.096]                   }
[17:04:26.096]                 }
[17:04:26.096]                 else {
[17:04:26.096]                   if (TRUE) {
[17:04:26.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:26.096]                     {
[17:04:26.096]                       inherits <- base::inherits
[17:04:26.096]                       invokeRestart <- base::invokeRestart
[17:04:26.096]                       is.null <- base::is.null
[17:04:26.096]                       muffled <- FALSE
[17:04:26.096]                       if (inherits(cond, "message")) {
[17:04:26.096]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:26.096]                         if (muffled) 
[17:04:26.096]                           invokeRestart("muffleMessage")
[17:04:26.096]                       }
[17:04:26.096]                       else if (inherits(cond, "warning")) {
[17:04:26.096]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:26.096]                         if (muffled) 
[17:04:26.096]                           invokeRestart("muffleWarning")
[17:04:26.096]                       }
[17:04:26.096]                       else if (inherits(cond, "condition")) {
[17:04:26.096]                         if (!is.null(pattern)) {
[17:04:26.096]                           computeRestarts <- base::computeRestarts
[17:04:26.096]                           grepl <- base::grepl
[17:04:26.096]                           restarts <- computeRestarts(cond)
[17:04:26.096]                           for (restart in restarts) {
[17:04:26.096]                             name <- restart$name
[17:04:26.096]                             if (is.null(name)) 
[17:04:26.096]                               next
[17:04:26.096]                             if (!grepl(pattern, name)) 
[17:04:26.096]                               next
[17:04:26.096]                             invokeRestart(restart)
[17:04:26.096]                             muffled <- TRUE
[17:04:26.096]                             break
[17:04:26.096]                           }
[17:04:26.096]                         }
[17:04:26.096]                       }
[17:04:26.096]                       invisible(muffled)
[17:04:26.096]                     }
[17:04:26.096]                     muffleCondition(cond, pattern = "^muffle")
[17:04:26.096]                   }
[17:04:26.096]                 }
[17:04:26.096]             }
[17:04:26.096]         }))
[17:04:26.096]     }, error = function(ex) {
[17:04:26.096]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:26.096]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:26.096]                 ...future.rng), started = ...future.startTime, 
[17:04:26.096]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:26.096]             version = "1.8"), class = "FutureResult")
[17:04:26.096]     }, finally = {
[17:04:26.096]         if (!identical(...future.workdir, getwd())) 
[17:04:26.096]             setwd(...future.workdir)
[17:04:26.096]         {
[17:04:26.096]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:26.096]                 ...future.oldOptions$nwarnings <- NULL
[17:04:26.096]             }
[17:04:26.096]             base::options(...future.oldOptions)
[17:04:26.096]             if (.Platform$OS.type == "windows") {
[17:04:26.096]                 old_names <- names(...future.oldEnvVars)
[17:04:26.096]                 envs <- base::Sys.getenv()
[17:04:26.096]                 names <- names(envs)
[17:04:26.096]                 common <- intersect(names, old_names)
[17:04:26.096]                 added <- setdiff(names, old_names)
[17:04:26.096]                 removed <- setdiff(old_names, names)
[17:04:26.096]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:26.096]                   envs[common]]
[17:04:26.096]                 NAMES <- toupper(changed)
[17:04:26.096]                 args <- list()
[17:04:26.096]                 for (kk in seq_along(NAMES)) {
[17:04:26.096]                   name <- changed[[kk]]
[17:04:26.096]                   NAME <- NAMES[[kk]]
[17:04:26.096]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.096]                     next
[17:04:26.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:26.096]                 }
[17:04:26.096]                 NAMES <- toupper(added)
[17:04:26.096]                 for (kk in seq_along(NAMES)) {
[17:04:26.096]                   name <- added[[kk]]
[17:04:26.096]                   NAME <- NAMES[[kk]]
[17:04:26.096]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.096]                     next
[17:04:26.096]                   args[[name]] <- ""
[17:04:26.096]                 }
[17:04:26.096]                 NAMES <- toupper(removed)
[17:04:26.096]                 for (kk in seq_along(NAMES)) {
[17:04:26.096]                   name <- removed[[kk]]
[17:04:26.096]                   NAME <- NAMES[[kk]]
[17:04:26.096]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.096]                     next
[17:04:26.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:26.096]                 }
[17:04:26.096]                 if (length(args) > 0) 
[17:04:26.096]                   base::do.call(base::Sys.setenv, args = args)
[17:04:26.096]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:26.096]             }
[17:04:26.096]             else {
[17:04:26.096]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:26.096]             }
[17:04:26.096]             {
[17:04:26.096]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:26.096]                   0L) {
[17:04:26.096]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:26.096]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:26.096]                   base::options(opts)
[17:04:26.096]                 }
[17:04:26.096]                 {
[17:04:26.096]                   {
[17:04:26.096]                     NULL
[17:04:26.096]                     RNGkind("Mersenne-Twister")
[17:04:26.096]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:04:26.096]                       inherits = FALSE)
[17:04:26.096]                   }
[17:04:26.096]                   options(future.plan = NULL)
[17:04:26.096]                   if (is.na(NA_character_)) 
[17:04:26.096]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:26.096]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:04:26.096]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:26.096]                     .init = FALSE)
[17:04:26.096]                 }
[17:04:26.096]             }
[17:04:26.096]         }
[17:04:26.096]     })
[17:04:26.096]     if (TRUE) {
[17:04:26.096]         base::sink(type = "output", split = FALSE)
[17:04:26.096]         if (TRUE) {
[17:04:26.096]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:26.096]         }
[17:04:26.096]         else {
[17:04:26.096]             ...future.result["stdout"] <- base::list(NULL)
[17:04:26.096]         }
[17:04:26.096]         base::close(...future.stdout)
[17:04:26.096]         ...future.stdout <- NULL
[17:04:26.096]     }
[17:04:26.096]     ...future.result$conditions <- ...future.conditions
[17:04:26.096]     ...future.result$finished <- base::Sys.time()
[17:04:26.096]     ...future.result
[17:04:26.096] }
[17:04:26.097] plan(): Setting new future strategy stack:
[17:04:26.098] List of future strategies:
[17:04:26.098] 1. sequential:
[17:04:26.098]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.098]    - tweaked: FALSE
[17:04:26.098]    - call: NULL
[17:04:26.098] plan(): nbrOfWorkers() = 1
[17:04:26.099] plan(): Setting new future strategy stack:
[17:04:26.099] List of future strategies:
[17:04:26.099] 1. sequential:
[17:04:26.099]    - args: function (..., abc = TRUE, envir = parent.frame(), workers = "<NULL>")
[17:04:26.099]    - tweaked: TRUE
[17:04:26.099]    - call: plan(sequential, abc = FALSE)
[17:04:26.099] plan(): nbrOfWorkers() = 1
[17:04:26.099] SequentialFuture started (and completed)
[17:04:26.100] - Launch lazy future ... done
[17:04:26.100] run() for ‘SequentialFuture’ ... done
[17:04:26.100] plan(): Setting new future strategy stack:
[17:04:26.100] List of future strategies:
[17:04:26.100] 1. sequential:
[17:04:26.100]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[17:04:26.100]    - tweaked: TRUE
[17:04:26.100]    - call: plan(sequential, abc = FALSE)
[17:04:26.100] plan(): nbrOfWorkers() = 1
> print(x)
[1] 2
> stopifnot(a == 0, x == 2)
> 
> 
> # Preserve nested futures
> plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
Warning: Detected 1 unknown future arguments: ‘abc’
[17:04:26.101] plan(): Setting new future strategy stack:
[17:04:26.101] List of future strategies:
[17:04:26.101] 1. sequential:
[17:04:26.101]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.101]    - tweaked: FALSE
[17:04:26.101]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[17:04:26.101] 2. sequential:
[17:04:26.101]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[17:04:26.101]    - tweaked: TRUE
[17:04:26.101]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[17:04:26.102] plan(): nbrOfWorkers() = 1
> a <- 0
> 
> x %<-% {
+   stopifnot(identical(names(plan("list")), "B"))
+   a <- 1
+   a
+ }
[17:04:26.102] getGlobalsAndPackages() ...
[17:04:26.102] Searching for globals...
[17:04:26.106] - globals found: [6] ‘{’, ‘stopifnot’, ‘identical’, ‘names’, ‘plan’, ‘<-’
[17:04:26.106] Searching for globals ... DONE
[17:04:26.106] Resolving globals: FALSE
[17:04:26.107] The total size of the 1 globals is 403.23 KiB (412912 bytes)
[17:04:26.108] The total size of the 1 globals exported for future expression (‘{; stopifnot(identical(names(plan("list")), "B")); a <- 1; a; }’) is 403.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘plan’ (403.23 KiB of class ‘function’)
[17:04:26.108] - globals: [1] ‘plan’
[17:04:26.108] 
[17:04:26.108] getGlobalsAndPackages() ... DONE
[17:04:26.108] run() for ‘Future’ ...
[17:04:26.108] - state: ‘created’
[17:04:26.108] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:04:26.109] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:04:26.109] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:04:26.109]   - Field: ‘label’
[17:04:26.109]   - Field: ‘local’
[17:04:26.109]   - Field: ‘owner’
[17:04:26.109]   - Field: ‘envir’
[17:04:26.109]   - Field: ‘packages’
[17:04:26.109]   - Field: ‘gc’
[17:04:26.109]   - Field: ‘conditions’
[17:04:26.109]   - Field: ‘expr’
[17:04:26.110]   - Field: ‘uuid’
[17:04:26.110]   - Field: ‘seed’
[17:04:26.110]   - Field: ‘version’
[17:04:26.110]   - Field: ‘result’
[17:04:26.110]   - Field: ‘asynchronous’
[17:04:26.110]   - Field: ‘calls’
[17:04:26.110]   - Field: ‘globals’
[17:04:26.110]   - Field: ‘stdout’
[17:04:26.110]   - Field: ‘earlySignal’
[17:04:26.110]   - Field: ‘lazy’
[17:04:26.110]   - Field: ‘state’
[17:04:26.111] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:04:26.111] - Launch lazy future ...
[17:04:26.111] Packages needed by the future expression (n = 0): <none>
[17:04:26.111] Packages needed by future strategies (n = 0): 
[17:04:26.111] {
[17:04:26.111]     {
[17:04:26.111]         {
[17:04:26.111]             ...future.startTime <- base::Sys.time()
[17:04:26.111]             {
[17:04:26.111]                 {
[17:04:26.111]                   {
[17:04:26.111]                     base::local({
[17:04:26.111]                       has_future <- base::requireNamespace("future", 
[17:04:26.111]                         quietly = TRUE)
[17:04:26.111]                       if (has_future) {
[17:04:26.111]                         ns <- base::getNamespace("future")
[17:04:26.111]                         version <- ns[[".package"]][["version"]]
[17:04:26.111]                         if (is.null(version)) 
[17:04:26.111]                           version <- utils::packageVersion("future")
[17:04:26.111]                       }
[17:04:26.111]                       else {
[17:04:26.111]                         version <- NULL
[17:04:26.111]                       }
[17:04:26.111]                       if (!has_future || version < "1.8.0") {
[17:04:26.111]                         info <- base::c(r_version = base::gsub("R version ", 
[17:04:26.111]                           "", base::R.version$version.string), 
[17:04:26.111]                           platform = base::sprintf("%s (%s-bit)", 
[17:04:26.111]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:04:26.111]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:04:26.111]                             "release", "version")], collapse = " "), 
[17:04:26.111]                           hostname = base::Sys.info()[["nodename"]])
[17:04:26.111]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:04:26.111]                           info)
[17:04:26.111]                         info <- base::paste(info, collapse = "; ")
[17:04:26.111]                         if (!has_future) {
[17:04:26.111]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:04:26.111]                             info)
[17:04:26.111]                         }
[17:04:26.111]                         else {
[17:04:26.111]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:04:26.111]                             info, version)
[17:04:26.111]                         }
[17:04:26.111]                         base::stop(msg)
[17:04:26.111]                       }
[17:04:26.111]                     })
[17:04:26.111]                   }
[17:04:26.111]                   ...future.strategy.old <- future::plan("list")
[17:04:26.111]                   options(future.plan = NULL)
[17:04:26.111]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:04:26.111]                   future::plan(list(B = function (..., abc = FALSE, 
[17:04:26.111]                     envir = parent.frame()) 
[17:04:26.111]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[17:04:26.111]                     .init = FALSE)
[17:04:26.111]                 }
[17:04:26.111]                 ...future.workdir <- getwd()
[17:04:26.111]             }
[17:04:26.111]             ...future.oldOptions <- base::as.list(base::.Options)
[17:04:26.111]             ...future.oldEnvVars <- base::Sys.getenv()
[17:04:26.111]         }
[17:04:26.111]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:04:26.111]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:04:26.111]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:04:26.111]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:04:26.111]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:04:26.111]             future.stdout.windows.reencode = NULL, width = 80L)
[17:04:26.111]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:04:26.111]             base::names(...future.oldOptions))
[17:04:26.111]     }
[17:04:26.111]     if (FALSE) {
[17:04:26.111]     }
[17:04:26.111]     else {
[17:04:26.111]         if (TRUE) {
[17:04:26.111]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:04:26.111]                 open = "w")
[17:04:26.111]         }
[17:04:26.111]         else {
[17:04:26.111]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:04:26.111]                 windows = "NUL", "/dev/null"), open = "w")
[17:04:26.111]         }
[17:04:26.111]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:04:26.111]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:04:26.111]             base::sink(type = "output", split = FALSE)
[17:04:26.111]             base::close(...future.stdout)
[17:04:26.111]         }, add = TRUE)
[17:04:26.111]     }
[17:04:26.111]     ...future.frame <- base::sys.nframe()
[17:04:26.111]     ...future.conditions <- base::list()
[17:04:26.111]     ...future.rng <- base::globalenv()$.Random.seed
[17:04:26.111]     if (FALSE) {
[17:04:26.111]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:04:26.111]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:04:26.111]     }
[17:04:26.111]     ...future.result <- base::tryCatch({
[17:04:26.111]         base::withCallingHandlers({
[17:04:26.111]             ...future.value <- base::withVisible(base::local({
[17:04:26.111]                 stopifnot(identical(names(plan("list")), "B"))
[17:04:26.111]                 a <- 1
[17:04:26.111]                 a
[17:04:26.111]             }))
[17:04:26.111]             future::FutureResult(value = ...future.value$value, 
[17:04:26.111]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:26.111]                   ...future.rng), globalenv = if (FALSE) 
[17:04:26.111]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:04:26.111]                     ...future.globalenv.names))
[17:04:26.111]                 else NULL, started = ...future.startTime, version = "1.8")
[17:04:26.111]         }, condition = base::local({
[17:04:26.111]             c <- base::c
[17:04:26.111]             inherits <- base::inherits
[17:04:26.111]             invokeRestart <- base::invokeRestart
[17:04:26.111]             length <- base::length
[17:04:26.111]             list <- base::list
[17:04:26.111]             seq.int <- base::seq.int
[17:04:26.111]             signalCondition <- base::signalCondition
[17:04:26.111]             sys.calls <- base::sys.calls
[17:04:26.111]             `[[` <- base::`[[`
[17:04:26.111]             `+` <- base::`+`
[17:04:26.111]             `<<-` <- base::`<<-`
[17:04:26.111]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:04:26.111]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:04:26.111]                   3L)]
[17:04:26.111]             }
[17:04:26.111]             function(cond) {
[17:04:26.111]                 is_error <- inherits(cond, "error")
[17:04:26.111]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:04:26.111]                   NULL)
[17:04:26.111]                 if (is_error) {
[17:04:26.111]                   sessionInformation <- function() {
[17:04:26.111]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:04:26.111]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:04:26.111]                       search = base::search(), system = base::Sys.info())
[17:04:26.111]                   }
[17:04:26.111]                   ...future.conditions[[length(...future.conditions) + 
[17:04:26.111]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:04:26.111]                     cond$call), session = sessionInformation(), 
[17:04:26.111]                     timestamp = base::Sys.time(), signaled = 0L)
[17:04:26.111]                   signalCondition(cond)
[17:04:26.111]                 }
[17:04:26.111]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:04:26.111]                 "immediateCondition"))) {
[17:04:26.111]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:04:26.111]                   ...future.conditions[[length(...future.conditions) + 
[17:04:26.111]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:04:26.111]                   if (TRUE && !signal) {
[17:04:26.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:26.111]                     {
[17:04:26.111]                       inherits <- base::inherits
[17:04:26.111]                       invokeRestart <- base::invokeRestart
[17:04:26.111]                       is.null <- base::is.null
[17:04:26.111]                       muffled <- FALSE
[17:04:26.111]                       if (inherits(cond, "message")) {
[17:04:26.111]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:26.111]                         if (muffled) 
[17:04:26.111]                           invokeRestart("muffleMessage")
[17:04:26.111]                       }
[17:04:26.111]                       else if (inherits(cond, "warning")) {
[17:04:26.111]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:26.111]                         if (muffled) 
[17:04:26.111]                           invokeRestart("muffleWarning")
[17:04:26.111]                       }
[17:04:26.111]                       else if (inherits(cond, "condition")) {
[17:04:26.111]                         if (!is.null(pattern)) {
[17:04:26.111]                           computeRestarts <- base::computeRestarts
[17:04:26.111]                           grepl <- base::grepl
[17:04:26.111]                           restarts <- computeRestarts(cond)
[17:04:26.111]                           for (restart in restarts) {
[17:04:26.111]                             name <- restart$name
[17:04:26.111]                             if (is.null(name)) 
[17:04:26.111]                               next
[17:04:26.111]                             if (!grepl(pattern, name)) 
[17:04:26.111]                               next
[17:04:26.111]                             invokeRestart(restart)
[17:04:26.111]                             muffled <- TRUE
[17:04:26.111]                             break
[17:04:26.111]                           }
[17:04:26.111]                         }
[17:04:26.111]                       }
[17:04:26.111]                       invisible(muffled)
[17:04:26.111]                     }
[17:04:26.111]                     muffleCondition(cond, pattern = "^muffle")
[17:04:26.111]                   }
[17:04:26.111]                 }
[17:04:26.111]                 else {
[17:04:26.111]                   if (TRUE) {
[17:04:26.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:04:26.111]                     {
[17:04:26.111]                       inherits <- base::inherits
[17:04:26.111]                       invokeRestart <- base::invokeRestart
[17:04:26.111]                       is.null <- base::is.null
[17:04:26.111]                       muffled <- FALSE
[17:04:26.111]                       if (inherits(cond, "message")) {
[17:04:26.111]                         muffled <- grepl(pattern, "muffleMessage")
[17:04:26.111]                         if (muffled) 
[17:04:26.111]                           invokeRestart("muffleMessage")
[17:04:26.111]                       }
[17:04:26.111]                       else if (inherits(cond, "warning")) {
[17:04:26.111]                         muffled <- grepl(pattern, "muffleWarning")
[17:04:26.111]                         if (muffled) 
[17:04:26.111]                           invokeRestart("muffleWarning")
[17:04:26.111]                       }
[17:04:26.111]                       else if (inherits(cond, "condition")) {
[17:04:26.111]                         if (!is.null(pattern)) {
[17:04:26.111]                           computeRestarts <- base::computeRestarts
[17:04:26.111]                           grepl <- base::grepl
[17:04:26.111]                           restarts <- computeRestarts(cond)
[17:04:26.111]                           for (restart in restarts) {
[17:04:26.111]                             name <- restart$name
[17:04:26.111]                             if (is.null(name)) 
[17:04:26.111]                               next
[17:04:26.111]                             if (!grepl(pattern, name)) 
[17:04:26.111]                               next
[17:04:26.111]                             invokeRestart(restart)
[17:04:26.111]                             muffled <- TRUE
[17:04:26.111]                             break
[17:04:26.111]                           }
[17:04:26.111]                         }
[17:04:26.111]                       }
[17:04:26.111]                       invisible(muffled)
[17:04:26.111]                     }
[17:04:26.111]                     muffleCondition(cond, pattern = "^muffle")
[17:04:26.111]                   }
[17:04:26.111]                 }
[17:04:26.111]             }
[17:04:26.111]         }))
[17:04:26.111]     }, error = function(ex) {
[17:04:26.111]         base::structure(base::list(value = NULL, visible = NULL, 
[17:04:26.111]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:04:26.111]                 ...future.rng), started = ...future.startTime, 
[17:04:26.111]             finished = Sys.time(), session_uuid = NA_character_, 
[17:04:26.111]             version = "1.8"), class = "FutureResult")
[17:04:26.111]     }, finally = {
[17:04:26.111]         if (!identical(...future.workdir, getwd())) 
[17:04:26.111]             setwd(...future.workdir)
[17:04:26.111]         {
[17:04:26.111]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:04:26.111]                 ...future.oldOptions$nwarnings <- NULL
[17:04:26.111]             }
[17:04:26.111]             base::options(...future.oldOptions)
[17:04:26.111]             if (.Platform$OS.type == "windows") {
[17:04:26.111]                 old_names <- names(...future.oldEnvVars)
[17:04:26.111]                 envs <- base::Sys.getenv()
[17:04:26.111]                 names <- names(envs)
[17:04:26.111]                 common <- intersect(names, old_names)
[17:04:26.111]                 added <- setdiff(names, old_names)
[17:04:26.111]                 removed <- setdiff(old_names, names)
[17:04:26.111]                 changed <- common[...future.oldEnvVars[common] != 
[17:04:26.111]                   envs[common]]
[17:04:26.111]                 NAMES <- toupper(changed)
[17:04:26.111]                 args <- list()
[17:04:26.111]                 for (kk in seq_along(NAMES)) {
[17:04:26.111]                   name <- changed[[kk]]
[17:04:26.111]                   NAME <- NAMES[[kk]]
[17:04:26.111]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.111]                     next
[17:04:26.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:26.111]                 }
[17:04:26.111]                 NAMES <- toupper(added)
[17:04:26.111]                 for (kk in seq_along(NAMES)) {
[17:04:26.111]                   name <- added[[kk]]
[17:04:26.111]                   NAME <- NAMES[[kk]]
[17:04:26.111]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.111]                     next
[17:04:26.111]                   args[[name]] <- ""
[17:04:26.111]                 }
[17:04:26.111]                 NAMES <- toupper(removed)
[17:04:26.111]                 for (kk in seq_along(NAMES)) {
[17:04:26.111]                   name <- removed[[kk]]
[17:04:26.111]                   NAME <- NAMES[[kk]]
[17:04:26.111]                   if (name != NAME && is.element(NAME, old_names)) 
[17:04:26.111]                     next
[17:04:26.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:04:26.111]                 }
[17:04:26.111]                 if (length(args) > 0) 
[17:04:26.111]                   base::do.call(base::Sys.setenv, args = args)
[17:04:26.111]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:04:26.111]             }
[17:04:26.111]             else {
[17:04:26.111]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:04:26.111]             }
[17:04:26.111]             {
[17:04:26.111]                 if (base::length(...future.futureOptionsAdded) > 
[17:04:26.111]                   0L) {
[17:04:26.111]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:04:26.111]                   base::names(opts) <- ...future.futureOptionsAdded
[17:04:26.111]                   base::options(opts)
[17:04:26.111]                 }
[17:04:26.111]                 {
[17:04:26.111]                   {
[17:04:26.111]                     NULL
[17:04:26.111]                     RNGkind("Mersenne-Twister")
[17:04:26.111]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:04:26.111]                       inherits = FALSE)
[17:04:26.111]                   }
[17:04:26.111]                   options(future.plan = NULL)
[17:04:26.111]                   if (is.na(NA_character_)) 
[17:04:26.111]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:04:26.111]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:04:26.111]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:04:26.111]                     .init = FALSE)
[17:04:26.111]                 }
[17:04:26.111]             }
[17:04:26.111]         }
[17:04:26.111]     })
[17:04:26.111]     if (TRUE) {
[17:04:26.111]         base::sink(type = "output", split = FALSE)
[17:04:26.111]         if (TRUE) {
[17:04:26.111]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:04:26.111]         }
[17:04:26.111]         else {
[17:04:26.111]             ...future.result["stdout"] <- base::list(NULL)
[17:04:26.111]         }
[17:04:26.111]         base::close(...future.stdout)
[17:04:26.111]         ...future.stdout <- NULL
[17:04:26.111]     }
[17:04:26.111]     ...future.result$conditions <- ...future.conditions
[17:04:26.111]     ...future.result$finished <- base::Sys.time()
[17:04:26.111]     ...future.result
[17:04:26.111] }
[17:04:26.113] assign_globals() ...
[17:04:26.113] List of 1
[17:04:26.113]  $ plan:function (strategy = NULL, ..., substitute = TRUE, .skip = FALSE, .call = TRUE, 
[17:04:26.113]     .cleanup = TRUE, .init = TRUE)  
[17:04:26.113]  - attr(*, "where")=List of 1
[17:04:26.113]   ..$ plan:<environment: R_EmptyEnv> 
[17:04:26.113]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:04:26.113]  - attr(*, "resolved")= logi FALSE
[17:04:26.113]  - attr(*, "total_size")= num 412912
[17:04:26.113]  - attr(*, "already-done")= logi TRUE
[17:04:26.116] - copied ‘plan’ to environment
[17:04:26.116] assign_globals() ... done
[17:04:26.116] plan(): Setting new future strategy stack:
[17:04:26.116] List of future strategies:
[17:04:26.116] 1. sequential:
[17:04:26.116]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[17:04:26.116]    - tweaked: TRUE
[17:04:26.116]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[17:04:26.117] plan(): nbrOfWorkers() = 1
[17:04:26.117] plan(): Setting new future strategy stack:
[17:04:26.117] List of future strategies:
[17:04:26.117] 1. sequential:
[17:04:26.117]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.117]    - tweaked: FALSE
[17:04:26.117]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[17:04:26.117] 2. sequential:
[17:04:26.117]    - args: function (..., abc = FALSE, envir = parent.frame(), workers = "<NULL>")
[17:04:26.117]    - tweaked: TRUE
[17:04:26.117]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[17:04:26.118] plan(): nbrOfWorkers() = 1
[17:04:26.118] SequentialFuture started (and completed)
[17:04:26.118] - Launch lazy future ... done
[17:04:26.118] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> 
> message("*** y %<-% { expr } %tweak% tweaks ... DONE")
*** y %<-% { expr } %tweak% tweaks ... DONE
> 
> 
> message("*** tweak() - abc = TRUE ...")
*** tweak() - abc = TRUE ...
> 
> res <- tryCatch(tweak(multisession, gc = TRUE), condition = identity)
> stopifnot(inherits(res, "tweaked"))
> 
> ## Argument 'gc' is unknown
> res <- tryCatch(tweak(sequential, abc = TRUE), condition = identity)
> stopifnot(inherits(res, "warning"))
> 
> res <- tryCatch(tweak(multicore, abc = TRUE), condition = identity)
> stopifnot(inherits(res, "warning"))
> 
> message("*** tweak() - abc = TRUE ... DONE")
*** tweak() - abc = TRUE ... DONE
> 
> 
> message("*** tweak() - odds and ends ...")
*** tweak() - odds and ends ...
> 
> ## BUG: getGlobalsAndPackages(Formula::Formula(~ x)) would produce
> ## "the condition has length > 1" warnings.
> ## https://github.com/HenrikBengtsson/future/issues/395
> length.Formula <- function(x) c(1L, 1L)
> expr <- structure(y ~ x, class = "Formula")
> stopifnot(length(length(expr)) == 2L)
> gp <- future::getGlobalsAndPackages(expr)
[17:04:26.120] getGlobalsAndPackages() ...
[17:04:26.120] Searching for globals...
[17:04:26.122] - globals found: [4] ‘{’, ‘y’, ‘x’, ‘~’
[17:04:26.122] Searching for globals ... DONE
[17:04:26.122] Resolving globals: FALSE
[17:04:26.123] The total size of the 1 globals is 56 bytes (56 bytes)
[17:04:26.123] The total size of the 1 globals exported for future expression (‘y ~ x’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (56 bytes of class ‘numeric’)
[17:04:26.123] - globals: [1] ‘x’
[17:04:26.123] 
[17:04:26.123] getGlobalsAndPackages() ... DONE
> stopifnot(
+   !inherits(gp, "error"),
+   is.list(gp),
+   all(c("expr", "globals", "packages") %in% names(gp))
+ )
> 
> message("*** tweak() - odds and ends ... DONE")
*** tweak() - odds and ends ... DONE
> 
> 
> message("*** tweak() - exceptions ...")
*** tweak() - exceptions ...
> 
> res <- try(tweak("<unknown-future-strategy>"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(base::eval), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, "unnamed-argument"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> ## Arguments that must not be tweaked
> res <- try(tweak(sequential, lazy = TRUE), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, asynchronous = FALSE), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, seed = 42L), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** tweak() - exceptions ... DONE")
*** tweak() - exceptions ... DONE
> 
> 
> message("*** Tweaking future strategies ... DONE")
*** Tweaking future strategies ... DONE
> 
> source("incl/end.R")
[17:04:26.164] plan(): Setting new future strategy stack:
[17:04:26.164] List of future strategies:
[17:04:26.164] 1. FutureStrategy:
[17:04:26.164]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:04:26.164]    - tweaked: FALSE
[17:04:26.164]    - call: future::plan(oplan)
[17:04:26.164] plan(): nbrOfWorkers() = 1
> 
