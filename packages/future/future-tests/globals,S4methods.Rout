
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:04:44.737] plan(): Setting new future strategy stack:
[18:04:44.738] List of future strategies:
[18:04:44.738] 1. sequential:
[18:04:44.738]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:44.738]    - tweaked: FALSE
[18:04:44.738]    - call: future::plan("sequential")
[18:04:44.761] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[18:04:44.828] plan(): Setting new future strategy stack:
[18:04:44.828] List of future strategies:
[18:04:44.828] 1. sequential:
[18:04:44.828]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:44.828]    - tweaked: FALSE
[18:04:44.828]    - call: plan(strategy)
[18:04:44.857] plan(): nbrOfWorkers() = 1
[18:04:44.858] getGlobalsAndPackages() ...
[18:04:44.858] Searching for globals...
[18:04:44.869] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[18:04:44.870] Searching for globals ... DONE
[18:04:44.870] Resolving globals: FALSE
[18:04:44.872] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[18:04:44.873] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[18:04:44.873] - globals: [1] ‘my_fcn’
[18:04:44.873] 
[18:04:44.873] getGlobalsAndPackages() ... DONE
[18:04:44.875] run() for ‘Future’ ...
[18:04:44.875] - state: ‘created’
[18:04:44.876] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:44.876] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:44.877] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:44.877]   - Field: ‘label’
[18:04:44.877]   - Field: ‘local’
[18:04:44.877]   - Field: ‘owner’
[18:04:44.877]   - Field: ‘envir’
[18:04:44.878]   - Field: ‘packages’
[18:04:44.878]   - Field: ‘gc’
[18:04:44.878]   - Field: ‘conditions’
[18:04:44.878]   - Field: ‘expr’
[18:04:44.878]   - Field: ‘uuid’
[18:04:44.879]   - Field: ‘seed’
[18:04:44.879]   - Field: ‘version’
[18:04:44.879]   - Field: ‘result’
[18:04:44.879]   - Field: ‘asynchronous’
[18:04:44.879]   - Field: ‘calls’
[18:04:44.880]   - Field: ‘globals’
[18:04:44.880]   - Field: ‘stdout’
[18:04:44.880]   - Field: ‘earlySignal’
[18:04:44.880]   - Field: ‘lazy’
[18:04:44.880]   - Field: ‘state’
[18:04:44.880] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:44.881] - Launch lazy future ...
[18:04:44.882] Packages needed by the future expression (n = 0): <none>
[18:04:44.882] Packages needed by future strategies (n = 0): <none>
[18:04:44.884] {
[18:04:44.884]     {
[18:04:44.884]         {
[18:04:44.884]             ...future.startTime <- base::Sys.time()
[18:04:44.884]             {
[18:04:44.884]                 {
[18:04:44.884]                   {
[18:04:44.884]                     base::local({
[18:04:44.884]                       has_future <- base::requireNamespace("future", 
[18:04:44.884]                         quietly = TRUE)
[18:04:44.884]                       if (has_future) {
[18:04:44.884]                         ns <- base::getNamespace("future")
[18:04:44.884]                         version <- ns[[".package"]][["version"]]
[18:04:44.884]                         if (is.null(version)) 
[18:04:44.884]                           version <- utils::packageVersion("future")
[18:04:44.884]                       }
[18:04:44.884]                       else {
[18:04:44.884]                         version <- NULL
[18:04:44.884]                       }
[18:04:44.884]                       if (!has_future || version < "1.8.0") {
[18:04:44.884]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:44.884]                           "", base::R.version$version.string), 
[18:04:44.884]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:44.884]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:44.884]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:44.884]                             "release", "version")], collapse = " "), 
[18:04:44.884]                           hostname = base::Sys.info()[["nodename"]])
[18:04:44.884]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:44.884]                           info)
[18:04:44.884]                         info <- base::paste(info, collapse = "; ")
[18:04:44.884]                         if (!has_future) {
[18:04:44.884]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:44.884]                             info)
[18:04:44.884]                         }
[18:04:44.884]                         else {
[18:04:44.884]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:44.884]                             info, version)
[18:04:44.884]                         }
[18:04:44.884]                         base::stop(msg)
[18:04:44.884]                       }
[18:04:44.884]                     })
[18:04:44.884]                   }
[18:04:44.884]                   ...future.strategy.old <- future::plan("list")
[18:04:44.884]                   options(future.plan = NULL)
[18:04:44.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:44.884]                 }
[18:04:44.884]                 ...future.workdir <- getwd()
[18:04:44.884]             }
[18:04:44.884]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:44.884]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:44.884]         }
[18:04:44.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:44.884]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:44.884]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:44.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:44.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:44.884]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:44.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:44.884]             base::names(...future.oldOptions))
[18:04:44.884]     }
[18:04:44.884]     if (FALSE) {
[18:04:44.884]     }
[18:04:44.884]     else {
[18:04:44.884]         if (TRUE) {
[18:04:44.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:44.884]                 open = "w")
[18:04:44.884]         }
[18:04:44.884]         else {
[18:04:44.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:44.884]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:44.884]         }
[18:04:44.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:44.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:44.884]             base::sink(type = "output", split = FALSE)
[18:04:44.884]             base::close(...future.stdout)
[18:04:44.884]         }, add = TRUE)
[18:04:44.884]     }
[18:04:44.884]     ...future.frame <- base::sys.nframe()
[18:04:44.884]     ...future.conditions <- base::list()
[18:04:44.884]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:44.884]     if (FALSE) {
[18:04:44.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:44.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:44.884]     }
[18:04:44.884]     ...future.result <- base::tryCatch({
[18:04:44.884]         base::withCallingHandlers({
[18:04:44.884]             ...future.value <- base::withVisible(base::local({
[18:04:44.884]                 my_fcn
[18:04:44.884]             }))
[18:04:44.884]             future::FutureResult(value = ...future.value$value, 
[18:04:44.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.884]                   ...future.rng), globalenv = if (FALSE) 
[18:04:44.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:44.884]                     ...future.globalenv.names))
[18:04:44.884]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:44.884]         }, condition = base::local({
[18:04:44.884]             c <- base::c
[18:04:44.884]             inherits <- base::inherits
[18:04:44.884]             invokeRestart <- base::invokeRestart
[18:04:44.884]             length <- base::length
[18:04:44.884]             list <- base::list
[18:04:44.884]             seq.int <- base::seq.int
[18:04:44.884]             signalCondition <- base::signalCondition
[18:04:44.884]             sys.calls <- base::sys.calls
[18:04:44.884]             `[[` <- base::`[[`
[18:04:44.884]             `+` <- base::`+`
[18:04:44.884]             `<<-` <- base::`<<-`
[18:04:44.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:44.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:44.884]                   3L)]
[18:04:44.884]             }
[18:04:44.884]             function(cond) {
[18:04:44.884]                 is_error <- inherits(cond, "error")
[18:04:44.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:44.884]                   NULL)
[18:04:44.884]                 if (is_error) {
[18:04:44.884]                   sessionInformation <- function() {
[18:04:44.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:44.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:44.884]                       search = base::search(), system = base::Sys.info())
[18:04:44.884]                   }
[18:04:44.884]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:44.884]                     cond$call), session = sessionInformation(), 
[18:04:44.884]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:44.884]                   signalCondition(cond)
[18:04:44.884]                 }
[18:04:44.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:44.884]                 "immediateCondition"))) {
[18:04:44.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:44.884]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:44.884]                   if (TRUE && !signal) {
[18:04:44.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.884]                     {
[18:04:44.884]                       inherits <- base::inherits
[18:04:44.884]                       invokeRestart <- base::invokeRestart
[18:04:44.884]                       is.null <- base::is.null
[18:04:44.884]                       muffled <- FALSE
[18:04:44.884]                       if (inherits(cond, "message")) {
[18:04:44.884]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.884]                         if (muffled) 
[18:04:44.884]                           invokeRestart("muffleMessage")
[18:04:44.884]                       }
[18:04:44.884]                       else if (inherits(cond, "warning")) {
[18:04:44.884]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.884]                         if (muffled) 
[18:04:44.884]                           invokeRestart("muffleWarning")
[18:04:44.884]                       }
[18:04:44.884]                       else if (inherits(cond, "condition")) {
[18:04:44.884]                         if (!is.null(pattern)) {
[18:04:44.884]                           computeRestarts <- base::computeRestarts
[18:04:44.884]                           grepl <- base::grepl
[18:04:44.884]                           restarts <- computeRestarts(cond)
[18:04:44.884]                           for (restart in restarts) {
[18:04:44.884]                             name <- restart$name
[18:04:44.884]                             if (is.null(name)) 
[18:04:44.884]                               next
[18:04:44.884]                             if (!grepl(pattern, name)) 
[18:04:44.884]                               next
[18:04:44.884]                             invokeRestart(restart)
[18:04:44.884]                             muffled <- TRUE
[18:04:44.884]                             break
[18:04:44.884]                           }
[18:04:44.884]                         }
[18:04:44.884]                       }
[18:04:44.884]                       invisible(muffled)
[18:04:44.884]                     }
[18:04:44.884]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.884]                   }
[18:04:44.884]                 }
[18:04:44.884]                 else {
[18:04:44.884]                   if (TRUE) {
[18:04:44.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.884]                     {
[18:04:44.884]                       inherits <- base::inherits
[18:04:44.884]                       invokeRestart <- base::invokeRestart
[18:04:44.884]                       is.null <- base::is.null
[18:04:44.884]                       muffled <- FALSE
[18:04:44.884]                       if (inherits(cond, "message")) {
[18:04:44.884]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.884]                         if (muffled) 
[18:04:44.884]                           invokeRestart("muffleMessage")
[18:04:44.884]                       }
[18:04:44.884]                       else if (inherits(cond, "warning")) {
[18:04:44.884]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.884]                         if (muffled) 
[18:04:44.884]                           invokeRestart("muffleWarning")
[18:04:44.884]                       }
[18:04:44.884]                       else if (inherits(cond, "condition")) {
[18:04:44.884]                         if (!is.null(pattern)) {
[18:04:44.884]                           computeRestarts <- base::computeRestarts
[18:04:44.884]                           grepl <- base::grepl
[18:04:44.884]                           restarts <- computeRestarts(cond)
[18:04:44.884]                           for (restart in restarts) {
[18:04:44.884]                             name <- restart$name
[18:04:44.884]                             if (is.null(name)) 
[18:04:44.884]                               next
[18:04:44.884]                             if (!grepl(pattern, name)) 
[18:04:44.884]                               next
[18:04:44.884]                             invokeRestart(restart)
[18:04:44.884]                             muffled <- TRUE
[18:04:44.884]                             break
[18:04:44.884]                           }
[18:04:44.884]                         }
[18:04:44.884]                       }
[18:04:44.884]                       invisible(muffled)
[18:04:44.884]                     }
[18:04:44.884]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.884]                   }
[18:04:44.884]                 }
[18:04:44.884]             }
[18:04:44.884]         }))
[18:04:44.884]     }, error = function(ex) {
[18:04:44.884]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:44.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.884]                 ...future.rng), started = ...future.startTime, 
[18:04:44.884]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:44.884]             version = "1.8"), class = "FutureResult")
[18:04:44.884]     }, finally = {
[18:04:44.884]         if (!identical(...future.workdir, getwd())) 
[18:04:44.884]             setwd(...future.workdir)
[18:04:44.884]         {
[18:04:44.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:44.884]                 ...future.oldOptions$nwarnings <- NULL
[18:04:44.884]             }
[18:04:44.884]             base::options(...future.oldOptions)
[18:04:44.884]             if (.Platform$OS.type == "windows") {
[18:04:44.884]                 old_names <- names(...future.oldEnvVars)
[18:04:44.884]                 envs <- base::Sys.getenv()
[18:04:44.884]                 names <- names(envs)
[18:04:44.884]                 common <- intersect(names, old_names)
[18:04:44.884]                 added <- setdiff(names, old_names)
[18:04:44.884]                 removed <- setdiff(old_names, names)
[18:04:44.884]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:44.884]                   envs[common]]
[18:04:44.884]                 NAMES <- toupper(changed)
[18:04:44.884]                 args <- list()
[18:04:44.884]                 for (kk in seq_along(NAMES)) {
[18:04:44.884]                   name <- changed[[kk]]
[18:04:44.884]                   NAME <- NAMES[[kk]]
[18:04:44.884]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.884]                     next
[18:04:44.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.884]                 }
[18:04:44.884]                 NAMES <- toupper(added)
[18:04:44.884]                 for (kk in seq_along(NAMES)) {
[18:04:44.884]                   name <- added[[kk]]
[18:04:44.884]                   NAME <- NAMES[[kk]]
[18:04:44.884]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.884]                     next
[18:04:44.884]                   args[[name]] <- ""
[18:04:44.884]                 }
[18:04:44.884]                 NAMES <- toupper(removed)
[18:04:44.884]                 for (kk in seq_along(NAMES)) {
[18:04:44.884]                   name <- removed[[kk]]
[18:04:44.884]                   NAME <- NAMES[[kk]]
[18:04:44.884]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.884]                     next
[18:04:44.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.884]                 }
[18:04:44.884]                 if (length(args) > 0) 
[18:04:44.884]                   base::do.call(base::Sys.setenv, args = args)
[18:04:44.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:44.884]             }
[18:04:44.884]             else {
[18:04:44.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:44.884]             }
[18:04:44.884]             {
[18:04:44.884]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:44.884]                   0L) {
[18:04:44.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:44.884]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:44.884]                   base::options(opts)
[18:04:44.884]                 }
[18:04:44.884]                 {
[18:04:44.884]                   {
[18:04:44.884]                     NULL
[18:04:44.884]                     RNGkind("Mersenne-Twister")
[18:04:44.884]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:44.884]                       inherits = FALSE)
[18:04:44.884]                   }
[18:04:44.884]                   options(future.plan = NULL)
[18:04:44.884]                   if (is.na(NA_character_)) 
[18:04:44.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:44.884]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:44.884]                     .init = FALSE)
[18:04:44.884]                 }
[18:04:44.884]             }
[18:04:44.884]         }
[18:04:44.884]     })
[18:04:44.884]     if (TRUE) {
[18:04:44.884]         base::sink(type = "output", split = FALSE)
[18:04:44.884]         if (TRUE) {
[18:04:44.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:44.884]         }
[18:04:44.884]         else {
[18:04:44.884]             ...future.result["stdout"] <- base::list(NULL)
[18:04:44.884]         }
[18:04:44.884]         base::close(...future.stdout)
[18:04:44.884]         ...future.stdout <- NULL
[18:04:44.884]     }
[18:04:44.884]     ...future.result$conditions <- ...future.conditions
[18:04:44.884]     ...future.result$finished <- base::Sys.time()
[18:04:44.884]     ...future.result
[18:04:44.884] }
[18:04:44.887] assign_globals() ...
[18:04:44.887] List of 1
[18:04:44.887]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[18:04:44.887]   .. ..@ .Data     :function (x)  
[18:04:44.887]   .. ..@ generic   : chr "my_fcn"
[18:04:44.887]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[18:04:44.887]   .. ..@ package   : chr ".GlobalEnv"
[18:04:44.887]   .. ..@ group     : list()
[18:04:44.887]   .. ..@ valueClass: chr(0) 
[18:04:44.887]   .. ..@ signature : chr "x"
[18:04:44.887]   .. ..@ default   : NULL
[18:04:44.887]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[18:04:44.887]  - attr(*, "where")=List of 1
[18:04:44.887]   ..$ my_fcn:<environment: R_EmptyEnv> 
[18:04:44.887]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:44.887]  - attr(*, "resolved")= logi FALSE
[18:04:44.887]  - attr(*, "total_size")= num 3936
[18:04:44.887]  - attr(*, "already-done")= logi TRUE
[18:04:44.900] - reassign environment for ‘my_fcn’
[18:04:44.901] - copied ‘my_fcn’ to environment
[18:04:44.901] assign_globals() ... done
[18:04:44.901] plan(): Setting new future strategy stack:
[18:04:44.902] List of future strategies:
[18:04:44.902] 1. sequential:
[18:04:44.902]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:44.902]    - tweaked: FALSE
[18:04:44.902]    - call: NULL
[18:04:44.903] plan(): nbrOfWorkers() = 1
[18:04:44.905] plan(): Setting new future strategy stack:
[18:04:44.905] List of future strategies:
[18:04:44.905] 1. sequential:
[18:04:44.905]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:44.905]    - tweaked: FALSE
[18:04:44.905]    - call: plan(strategy)
[18:04:44.906] plan(): nbrOfWorkers() = 1
[18:04:44.906] SequentialFuture started (and completed)
[18:04:44.907] - Launch lazy future ... done
[18:04:44.907] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x586e7e32c180>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[18:04:44.908] getGlobalsAndPackages() ...
[18:04:44.912] Searching for globals...
[18:04:44.920] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[18:04:44.920] Searching for globals ... DONE
[18:04:44.921] Resolving globals: FALSE
[18:04:44.922] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[18:04:44.922] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[18:04:44.922] - globals: [1] ‘my_fcn’
[18:04:44.923] 
[18:04:44.923] getGlobalsAndPackages() ... DONE
[18:04:44.923] run() for ‘Future’ ...
[18:04:44.924] - state: ‘created’
[18:04:44.924] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:44.924] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:44.925] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:44.925]   - Field: ‘label’
[18:04:44.925]   - Field: ‘local’
[18:04:44.925]   - Field: ‘owner’
[18:04:44.925]   - Field: ‘envir’
[18:04:44.926]   - Field: ‘packages’
[18:04:44.926]   - Field: ‘gc’
[18:04:44.926]   - Field: ‘conditions’
[18:04:44.926]   - Field: ‘expr’
[18:04:44.926]   - Field: ‘uuid’
[18:04:44.927]   - Field: ‘seed’
[18:04:44.927]   - Field: ‘version’
[18:04:44.927]   - Field: ‘result’
[18:04:44.927]   - Field: ‘asynchronous’
[18:04:44.927]   - Field: ‘calls’
[18:04:44.928]   - Field: ‘globals’
[18:04:44.928]   - Field: ‘stdout’
[18:04:44.928]   - Field: ‘earlySignal’
[18:04:44.928]   - Field: ‘lazy’
[18:04:44.928]   - Field: ‘state’
[18:04:44.928] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:44.929] - Launch lazy future ...
[18:04:44.929] Packages needed by the future expression (n = 0): <none>
[18:04:44.929] Packages needed by future strategies (n = 0): <none>
[18:04:44.930] {
[18:04:44.930]     {
[18:04:44.930]         {
[18:04:44.930]             ...future.startTime <- base::Sys.time()
[18:04:44.930]             {
[18:04:44.930]                 {
[18:04:44.930]                   {
[18:04:44.930]                     base::local({
[18:04:44.930]                       has_future <- base::requireNamespace("future", 
[18:04:44.930]                         quietly = TRUE)
[18:04:44.930]                       if (has_future) {
[18:04:44.930]                         ns <- base::getNamespace("future")
[18:04:44.930]                         version <- ns[[".package"]][["version"]]
[18:04:44.930]                         if (is.null(version)) 
[18:04:44.930]                           version <- utils::packageVersion("future")
[18:04:44.930]                       }
[18:04:44.930]                       else {
[18:04:44.930]                         version <- NULL
[18:04:44.930]                       }
[18:04:44.930]                       if (!has_future || version < "1.8.0") {
[18:04:44.930]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:44.930]                           "", base::R.version$version.string), 
[18:04:44.930]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:44.930]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:44.930]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:44.930]                             "release", "version")], collapse = " "), 
[18:04:44.930]                           hostname = base::Sys.info()[["nodename"]])
[18:04:44.930]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:44.930]                           info)
[18:04:44.930]                         info <- base::paste(info, collapse = "; ")
[18:04:44.930]                         if (!has_future) {
[18:04:44.930]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:44.930]                             info)
[18:04:44.930]                         }
[18:04:44.930]                         else {
[18:04:44.930]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:44.930]                             info, version)
[18:04:44.930]                         }
[18:04:44.930]                         base::stop(msg)
[18:04:44.930]                       }
[18:04:44.930]                     })
[18:04:44.930]                   }
[18:04:44.930]                   ...future.strategy.old <- future::plan("list")
[18:04:44.930]                   options(future.plan = NULL)
[18:04:44.930]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.930]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:44.930]                 }
[18:04:44.930]                 ...future.workdir <- getwd()
[18:04:44.930]             }
[18:04:44.930]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:44.930]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:44.930]         }
[18:04:44.930]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:44.930]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:44.930]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:44.930]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:44.930]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:44.930]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:44.930]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:44.930]             base::names(...future.oldOptions))
[18:04:44.930]     }
[18:04:44.930]     if (FALSE) {
[18:04:44.930]     }
[18:04:44.930]     else {
[18:04:44.930]         if (TRUE) {
[18:04:44.930]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:44.930]                 open = "w")
[18:04:44.930]         }
[18:04:44.930]         else {
[18:04:44.930]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:44.930]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:44.930]         }
[18:04:44.930]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:44.930]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:44.930]             base::sink(type = "output", split = FALSE)
[18:04:44.930]             base::close(...future.stdout)
[18:04:44.930]         }, add = TRUE)
[18:04:44.930]     }
[18:04:44.930]     ...future.frame <- base::sys.nframe()
[18:04:44.930]     ...future.conditions <- base::list()
[18:04:44.930]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:44.930]     if (FALSE) {
[18:04:44.930]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:44.930]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:44.930]     }
[18:04:44.930]     ...future.result <- base::tryCatch({
[18:04:44.930]         base::withCallingHandlers({
[18:04:44.930]             ...future.value <- base::withVisible(base::local({
[18:04:44.930]                 my_fcn(3)
[18:04:44.930]             }))
[18:04:44.930]             future::FutureResult(value = ...future.value$value, 
[18:04:44.930]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.930]                   ...future.rng), globalenv = if (FALSE) 
[18:04:44.930]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:44.930]                     ...future.globalenv.names))
[18:04:44.930]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:44.930]         }, condition = base::local({
[18:04:44.930]             c <- base::c
[18:04:44.930]             inherits <- base::inherits
[18:04:44.930]             invokeRestart <- base::invokeRestart
[18:04:44.930]             length <- base::length
[18:04:44.930]             list <- base::list
[18:04:44.930]             seq.int <- base::seq.int
[18:04:44.930]             signalCondition <- base::signalCondition
[18:04:44.930]             sys.calls <- base::sys.calls
[18:04:44.930]             `[[` <- base::`[[`
[18:04:44.930]             `+` <- base::`+`
[18:04:44.930]             `<<-` <- base::`<<-`
[18:04:44.930]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:44.930]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:44.930]                   3L)]
[18:04:44.930]             }
[18:04:44.930]             function(cond) {
[18:04:44.930]                 is_error <- inherits(cond, "error")
[18:04:44.930]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:44.930]                   NULL)
[18:04:44.930]                 if (is_error) {
[18:04:44.930]                   sessionInformation <- function() {
[18:04:44.930]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:44.930]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:44.930]                       search = base::search(), system = base::Sys.info())
[18:04:44.930]                   }
[18:04:44.930]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.930]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:44.930]                     cond$call), session = sessionInformation(), 
[18:04:44.930]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:44.930]                   signalCondition(cond)
[18:04:44.930]                 }
[18:04:44.930]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:44.930]                 "immediateCondition"))) {
[18:04:44.930]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:44.930]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.930]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:44.930]                   if (TRUE && !signal) {
[18:04:44.930]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.930]                     {
[18:04:44.930]                       inherits <- base::inherits
[18:04:44.930]                       invokeRestart <- base::invokeRestart
[18:04:44.930]                       is.null <- base::is.null
[18:04:44.930]                       muffled <- FALSE
[18:04:44.930]                       if (inherits(cond, "message")) {
[18:04:44.930]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.930]                         if (muffled) 
[18:04:44.930]                           invokeRestart("muffleMessage")
[18:04:44.930]                       }
[18:04:44.930]                       else if (inherits(cond, "warning")) {
[18:04:44.930]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.930]                         if (muffled) 
[18:04:44.930]                           invokeRestart("muffleWarning")
[18:04:44.930]                       }
[18:04:44.930]                       else if (inherits(cond, "condition")) {
[18:04:44.930]                         if (!is.null(pattern)) {
[18:04:44.930]                           computeRestarts <- base::computeRestarts
[18:04:44.930]                           grepl <- base::grepl
[18:04:44.930]                           restarts <- computeRestarts(cond)
[18:04:44.930]                           for (restart in restarts) {
[18:04:44.930]                             name <- restart$name
[18:04:44.930]                             if (is.null(name)) 
[18:04:44.930]                               next
[18:04:44.930]                             if (!grepl(pattern, name)) 
[18:04:44.930]                               next
[18:04:44.930]                             invokeRestart(restart)
[18:04:44.930]                             muffled <- TRUE
[18:04:44.930]                             break
[18:04:44.930]                           }
[18:04:44.930]                         }
[18:04:44.930]                       }
[18:04:44.930]                       invisible(muffled)
[18:04:44.930]                     }
[18:04:44.930]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.930]                   }
[18:04:44.930]                 }
[18:04:44.930]                 else {
[18:04:44.930]                   if (TRUE) {
[18:04:44.930]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.930]                     {
[18:04:44.930]                       inherits <- base::inherits
[18:04:44.930]                       invokeRestart <- base::invokeRestart
[18:04:44.930]                       is.null <- base::is.null
[18:04:44.930]                       muffled <- FALSE
[18:04:44.930]                       if (inherits(cond, "message")) {
[18:04:44.930]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.930]                         if (muffled) 
[18:04:44.930]                           invokeRestart("muffleMessage")
[18:04:44.930]                       }
[18:04:44.930]                       else if (inherits(cond, "warning")) {
[18:04:44.930]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.930]                         if (muffled) 
[18:04:44.930]                           invokeRestart("muffleWarning")
[18:04:44.930]                       }
[18:04:44.930]                       else if (inherits(cond, "condition")) {
[18:04:44.930]                         if (!is.null(pattern)) {
[18:04:44.930]                           computeRestarts <- base::computeRestarts
[18:04:44.930]                           grepl <- base::grepl
[18:04:44.930]                           restarts <- computeRestarts(cond)
[18:04:44.930]                           for (restart in restarts) {
[18:04:44.930]                             name <- restart$name
[18:04:44.930]                             if (is.null(name)) 
[18:04:44.930]                               next
[18:04:44.930]                             if (!grepl(pattern, name)) 
[18:04:44.930]                               next
[18:04:44.930]                             invokeRestart(restart)
[18:04:44.930]                             muffled <- TRUE
[18:04:44.930]                             break
[18:04:44.930]                           }
[18:04:44.930]                         }
[18:04:44.930]                       }
[18:04:44.930]                       invisible(muffled)
[18:04:44.930]                     }
[18:04:44.930]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.930]                   }
[18:04:44.930]                 }
[18:04:44.930]             }
[18:04:44.930]         }))
[18:04:44.930]     }, error = function(ex) {
[18:04:44.930]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:44.930]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.930]                 ...future.rng), started = ...future.startTime, 
[18:04:44.930]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:44.930]             version = "1.8"), class = "FutureResult")
[18:04:44.930]     }, finally = {
[18:04:44.930]         if (!identical(...future.workdir, getwd())) 
[18:04:44.930]             setwd(...future.workdir)
[18:04:44.930]         {
[18:04:44.930]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:44.930]                 ...future.oldOptions$nwarnings <- NULL
[18:04:44.930]             }
[18:04:44.930]             base::options(...future.oldOptions)
[18:04:44.930]             if (.Platform$OS.type == "windows") {
[18:04:44.930]                 old_names <- names(...future.oldEnvVars)
[18:04:44.930]                 envs <- base::Sys.getenv()
[18:04:44.930]                 names <- names(envs)
[18:04:44.930]                 common <- intersect(names, old_names)
[18:04:44.930]                 added <- setdiff(names, old_names)
[18:04:44.930]                 removed <- setdiff(old_names, names)
[18:04:44.930]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:44.930]                   envs[common]]
[18:04:44.930]                 NAMES <- toupper(changed)
[18:04:44.930]                 args <- list()
[18:04:44.930]                 for (kk in seq_along(NAMES)) {
[18:04:44.930]                   name <- changed[[kk]]
[18:04:44.930]                   NAME <- NAMES[[kk]]
[18:04:44.930]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.930]                     next
[18:04:44.930]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.930]                 }
[18:04:44.930]                 NAMES <- toupper(added)
[18:04:44.930]                 for (kk in seq_along(NAMES)) {
[18:04:44.930]                   name <- added[[kk]]
[18:04:44.930]                   NAME <- NAMES[[kk]]
[18:04:44.930]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.930]                     next
[18:04:44.930]                   args[[name]] <- ""
[18:04:44.930]                 }
[18:04:44.930]                 NAMES <- toupper(removed)
[18:04:44.930]                 for (kk in seq_along(NAMES)) {
[18:04:44.930]                   name <- removed[[kk]]
[18:04:44.930]                   NAME <- NAMES[[kk]]
[18:04:44.930]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.930]                     next
[18:04:44.930]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.930]                 }
[18:04:44.930]                 if (length(args) > 0) 
[18:04:44.930]                   base::do.call(base::Sys.setenv, args = args)
[18:04:44.930]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:44.930]             }
[18:04:44.930]             else {
[18:04:44.930]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:44.930]             }
[18:04:44.930]             {
[18:04:44.930]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:44.930]                   0L) {
[18:04:44.930]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:44.930]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:44.930]                   base::options(opts)
[18:04:44.930]                 }
[18:04:44.930]                 {
[18:04:44.930]                   {
[18:04:44.930]                     NULL
[18:04:44.930]                     RNGkind("Mersenne-Twister")
[18:04:44.930]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:44.930]                       inherits = FALSE)
[18:04:44.930]                   }
[18:04:44.930]                   options(future.plan = NULL)
[18:04:44.930]                   if (is.na(NA_character_)) 
[18:04:44.930]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.930]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:44.930]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:44.930]                     .init = FALSE)
[18:04:44.930]                 }
[18:04:44.930]             }
[18:04:44.930]         }
[18:04:44.930]     })
[18:04:44.930]     if (TRUE) {
[18:04:44.930]         base::sink(type = "output", split = FALSE)
[18:04:44.930]         if (TRUE) {
[18:04:44.930]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:44.930]         }
[18:04:44.930]         else {
[18:04:44.930]             ...future.result["stdout"] <- base::list(NULL)
[18:04:44.930]         }
[18:04:44.930]         base::close(...future.stdout)
[18:04:44.930]         ...future.stdout <- NULL
[18:04:44.930]     }
[18:04:44.930]     ...future.result$conditions <- ...future.conditions
[18:04:44.930]     ...future.result$finished <- base::Sys.time()
[18:04:44.930]     ...future.result
[18:04:44.930] }
[18:04:44.933] assign_globals() ...
[18:04:44.933] List of 1
[18:04:44.933]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[18:04:44.933]   .. ..@ .Data     :function (x)  
[18:04:44.933]   .. ..@ generic   : chr "my_fcn"
[18:04:44.933]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[18:04:44.933]   .. ..@ package   : chr ".GlobalEnv"
[18:04:44.933]   .. ..@ group     : list()
[18:04:44.933]   .. ..@ valueClass: chr(0) 
[18:04:44.933]   .. ..@ signature : chr "x"
[18:04:44.933]   .. ..@ default   : NULL
[18:04:44.933]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[18:04:44.933]  - attr(*, "where")=List of 1
[18:04:44.933]   ..$ my_fcn:<environment: R_EmptyEnv> 
[18:04:44.933]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:44.933]  - attr(*, "resolved")= logi FALSE
[18:04:44.933]  - attr(*, "total_size")= num 3936
[18:04:44.933]  - attr(*, "already-done")= logi TRUE
[18:04:44.943] - reassign environment for ‘my_fcn’
[18:04:44.943] - copied ‘my_fcn’ to environment
[18:04:44.943] assign_globals() ... done
[18:04:44.944] plan(): Setting new future strategy stack:
[18:04:44.944] List of future strategies:
[18:04:44.944] 1. sequential:
[18:04:44.944]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:44.944]    - tweaked: FALSE
[18:04:44.944]    - call: NULL
[18:04:44.945] plan(): nbrOfWorkers() = 1
[18:04:44.948] plan(): Setting new future strategy stack:
[18:04:44.948] List of future strategies:
[18:04:44.948] 1. sequential:
[18:04:44.948]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:44.948]    - tweaked: FALSE
[18:04:44.948]    - call: plan(strategy)
[18:04:44.949] plan(): nbrOfWorkers() = 1
[18:04:44.949] SequentialFuture started (and completed)
[18:04:44.950] signalConditions() ...
[18:04:44.950]  - include = ‘immediateCondition’
[18:04:44.950]  - exclude = 
[18:04:44.950]  - resignal = FALSE
[18:04:44.950]  - Number of conditions: 1
[18:04:44.950] signalConditions() ... done
[18:04:44.951] - Launch lazy future ... done
[18:04:44.951] run() for ‘SequentialFuture’ ... done
[18:04:44.951] signalConditions() ...
[18:04:44.951]  - include = ‘immediateCondition’
[18:04:44.951]  - exclude = 
[18:04:44.952]  - resignal = FALSE
[18:04:44.952]  - Number of conditions: 1
[18:04:44.952] signalConditions() ... done
[18:04:44.952] Future state: ‘finished’
[18:04:44.953] signalConditions() ...
[18:04:44.953]  - include = ‘condition’
[18:04:44.953]  - exclude = ‘immediateCondition’
[18:04:44.953]  - resignal = TRUE
[18:04:44.953]  - Number of conditions: 1
[18:04:44.953]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:04:44.954] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multicore
[18:04:44.954] plan(): Setting new future strategy stack:
[18:04:44.955] List of future strategies:
[18:04:44.955] 1. multicore:
[18:04:44.955]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:44.955]    - tweaked: FALSE
[18:04:44.955]    - call: plan(strategy)
[18:04:44.961] plan(): nbrOfWorkers() = 2
[18:04:44.962] getGlobalsAndPackages() ...
[18:04:44.962] Searching for globals...
[18:04:44.969] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[18:04:44.969] Searching for globals ... DONE
[18:04:44.969] Resolving globals: FALSE
[18:04:44.970] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[18:04:44.971] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[18:04:44.971] - globals: [1] ‘my_fcn’
[18:04:44.971] 
[18:04:44.971] getGlobalsAndPackages() ... DONE
[18:04:44.972] run() for ‘Future’ ...
[18:04:44.972] - state: ‘created’
[18:04:44.972] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:44.979] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:44.979] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:44.980]   - Field: ‘label’
[18:04:44.980]   - Field: ‘local’
[18:04:44.980]   - Field: ‘owner’
[18:04:44.980]   - Field: ‘envir’
[18:04:44.980]   - Field: ‘workers’
[18:04:44.981]   - Field: ‘packages’
[18:04:44.981]   - Field: ‘gc’
[18:04:44.981]   - Field: ‘job’
[18:04:44.982]   - Field: ‘conditions’
[18:04:44.982]   - Field: ‘expr’
[18:04:44.982]   - Field: ‘uuid’
[18:04:44.982]   - Field: ‘seed’
[18:04:44.982]   - Field: ‘version’
[18:04:44.983]   - Field: ‘result’
[18:04:44.983]   - Field: ‘asynchronous’
[18:04:44.983]   - Field: ‘calls’
[18:04:44.983]   - Field: ‘globals’
[18:04:44.983]   - Field: ‘stdout’
[18:04:44.984]   - Field: ‘earlySignal’
[18:04:44.984]   - Field: ‘lazy’
[18:04:44.984]   - Field: ‘state’
[18:04:44.984] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:44.984] - Launch lazy future ...
[18:04:44.986] Packages needed by the future expression (n = 0): <none>
[18:04:44.986] Packages needed by future strategies (n = 0): <none>
[18:04:44.987] {
[18:04:44.987]     {
[18:04:44.987]         {
[18:04:44.987]             ...future.startTime <- base::Sys.time()
[18:04:44.987]             {
[18:04:44.987]                 {
[18:04:44.987]                   {
[18:04:44.987]                     {
[18:04:44.987]                       base::local({
[18:04:44.987]                         has_future <- base::requireNamespace("future", 
[18:04:44.987]                           quietly = TRUE)
[18:04:44.987]                         if (has_future) {
[18:04:44.987]                           ns <- base::getNamespace("future")
[18:04:44.987]                           version <- ns[[".package"]][["version"]]
[18:04:44.987]                           if (is.null(version)) 
[18:04:44.987]                             version <- utils::packageVersion("future")
[18:04:44.987]                         }
[18:04:44.987]                         else {
[18:04:44.987]                           version <- NULL
[18:04:44.987]                         }
[18:04:44.987]                         if (!has_future || version < "1.8.0") {
[18:04:44.987]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:44.987]                             "", base::R.version$version.string), 
[18:04:44.987]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:44.987]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:44.987]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:44.987]                               "release", "version")], collapse = " "), 
[18:04:44.987]                             hostname = base::Sys.info()[["nodename"]])
[18:04:44.987]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:44.987]                             info)
[18:04:44.987]                           info <- base::paste(info, collapse = "; ")
[18:04:44.987]                           if (!has_future) {
[18:04:44.987]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:44.987]                               info)
[18:04:44.987]                           }
[18:04:44.987]                           else {
[18:04:44.987]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:44.987]                               info, version)
[18:04:44.987]                           }
[18:04:44.987]                           base::stop(msg)
[18:04:44.987]                         }
[18:04:44.987]                       })
[18:04:44.987]                     }
[18:04:44.987]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:44.987]                     base::options(mc.cores = 1L)
[18:04:44.987]                   }
[18:04:44.987]                   ...future.strategy.old <- future::plan("list")
[18:04:44.987]                   options(future.plan = NULL)
[18:04:44.987]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.987]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:44.987]                 }
[18:04:44.987]                 ...future.workdir <- getwd()
[18:04:44.987]             }
[18:04:44.987]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:44.987]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:44.987]         }
[18:04:44.987]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:44.987]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:44.987]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:44.987]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:44.987]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:44.987]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:44.987]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:44.987]             base::names(...future.oldOptions))
[18:04:44.987]     }
[18:04:44.987]     if (FALSE) {
[18:04:44.987]     }
[18:04:44.987]     else {
[18:04:44.987]         if (TRUE) {
[18:04:44.987]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:44.987]                 open = "w")
[18:04:44.987]         }
[18:04:44.987]         else {
[18:04:44.987]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:44.987]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:44.987]         }
[18:04:44.987]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:44.987]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:44.987]             base::sink(type = "output", split = FALSE)
[18:04:44.987]             base::close(...future.stdout)
[18:04:44.987]         }, add = TRUE)
[18:04:44.987]     }
[18:04:44.987]     ...future.frame <- base::sys.nframe()
[18:04:44.987]     ...future.conditions <- base::list()
[18:04:44.987]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:44.987]     if (FALSE) {
[18:04:44.987]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:44.987]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:44.987]     }
[18:04:44.987]     ...future.result <- base::tryCatch({
[18:04:44.987]         base::withCallingHandlers({
[18:04:44.987]             ...future.value <- base::withVisible(base::local({
[18:04:44.987]                 withCallingHandlers({
[18:04:44.987]                   {
[18:04:44.987]                     my_fcn
[18:04:44.987]                   }
[18:04:44.987]                 }, immediateCondition = function(cond) {
[18:04:44.987]                   save_rds <- function (object, pathname, ...) 
[18:04:44.987]                   {
[18:04:44.987]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:44.987]                     if (file_test("-f", pathname_tmp)) {
[18:04:44.987]                       fi_tmp <- file.info(pathname_tmp)
[18:04:44.987]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:44.987]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:44.987]                         fi_tmp[["mtime"]])
[18:04:44.987]                     }
[18:04:44.987]                     tryCatch({
[18:04:44.987]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:44.987]                     }, error = function(ex) {
[18:04:44.987]                       msg <- conditionMessage(ex)
[18:04:44.987]                       fi_tmp <- file.info(pathname_tmp)
[18:04:44.987]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:44.987]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:44.987]                         fi_tmp[["mtime"]], msg)
[18:04:44.987]                       ex$message <- msg
[18:04:44.987]                       stop(ex)
[18:04:44.987]                     })
[18:04:44.987]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:44.987]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:44.987]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:44.987]                       fi_tmp <- file.info(pathname_tmp)
[18:04:44.987]                       fi <- file.info(pathname)
[18:04:44.987]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:44.987]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:44.987]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:44.987]                         fi[["size"]], fi[["mtime"]])
[18:04:44.987]                       stop(msg)
[18:04:44.987]                     }
[18:04:44.987]                     invisible(pathname)
[18:04:44.987]                   }
[18:04:44.987]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:44.987]                     rootPath = tempdir()) 
[18:04:44.987]                   {
[18:04:44.987]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:44.987]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:44.987]                       tmpdir = path, fileext = ".rds")
[18:04:44.987]                     save_rds(obj, file)
[18:04:44.987]                   }
[18:04:44.987]                   saveImmediateCondition(cond, path = "/tmp/RtmpwKrUCJ/.future/immediateConditions")
[18:04:44.987]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.987]                   {
[18:04:44.987]                     inherits <- base::inherits
[18:04:44.987]                     invokeRestart <- base::invokeRestart
[18:04:44.987]                     is.null <- base::is.null
[18:04:44.987]                     muffled <- FALSE
[18:04:44.987]                     if (inherits(cond, "message")) {
[18:04:44.987]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:44.987]                       if (muffled) 
[18:04:44.987]                         invokeRestart("muffleMessage")
[18:04:44.987]                     }
[18:04:44.987]                     else if (inherits(cond, "warning")) {
[18:04:44.987]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:44.987]                       if (muffled) 
[18:04:44.987]                         invokeRestart("muffleWarning")
[18:04:44.987]                     }
[18:04:44.987]                     else if (inherits(cond, "condition")) {
[18:04:44.987]                       if (!is.null(pattern)) {
[18:04:44.987]                         computeRestarts <- base::computeRestarts
[18:04:44.987]                         grepl <- base::grepl
[18:04:44.987]                         restarts <- computeRestarts(cond)
[18:04:44.987]                         for (restart in restarts) {
[18:04:44.987]                           name <- restart$name
[18:04:44.987]                           if (is.null(name)) 
[18:04:44.987]                             next
[18:04:44.987]                           if (!grepl(pattern, name)) 
[18:04:44.987]                             next
[18:04:44.987]                           invokeRestart(restart)
[18:04:44.987]                           muffled <- TRUE
[18:04:44.987]                           break
[18:04:44.987]                         }
[18:04:44.987]                       }
[18:04:44.987]                     }
[18:04:44.987]                     invisible(muffled)
[18:04:44.987]                   }
[18:04:44.987]                   muffleCondition(cond)
[18:04:44.987]                 })
[18:04:44.987]             }))
[18:04:44.987]             future::FutureResult(value = ...future.value$value, 
[18:04:44.987]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.987]                   ...future.rng), globalenv = if (FALSE) 
[18:04:44.987]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:44.987]                     ...future.globalenv.names))
[18:04:44.987]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:44.987]         }, condition = base::local({
[18:04:44.987]             c <- base::c
[18:04:44.987]             inherits <- base::inherits
[18:04:44.987]             invokeRestart <- base::invokeRestart
[18:04:44.987]             length <- base::length
[18:04:44.987]             list <- base::list
[18:04:44.987]             seq.int <- base::seq.int
[18:04:44.987]             signalCondition <- base::signalCondition
[18:04:44.987]             sys.calls <- base::sys.calls
[18:04:44.987]             `[[` <- base::`[[`
[18:04:44.987]             `+` <- base::`+`
[18:04:44.987]             `<<-` <- base::`<<-`
[18:04:44.987]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:44.987]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:44.987]                   3L)]
[18:04:44.987]             }
[18:04:44.987]             function(cond) {
[18:04:44.987]                 is_error <- inherits(cond, "error")
[18:04:44.987]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:44.987]                   NULL)
[18:04:44.987]                 if (is_error) {
[18:04:44.987]                   sessionInformation <- function() {
[18:04:44.987]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:44.987]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:44.987]                       search = base::search(), system = base::Sys.info())
[18:04:44.987]                   }
[18:04:44.987]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.987]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:44.987]                     cond$call), session = sessionInformation(), 
[18:04:44.987]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:44.987]                   signalCondition(cond)
[18:04:44.987]                 }
[18:04:44.987]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:44.987]                 "immediateCondition"))) {
[18:04:44.987]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:44.987]                   ...future.conditions[[length(...future.conditions) + 
[18:04:44.987]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:44.987]                   if (TRUE && !signal) {
[18:04:44.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.987]                     {
[18:04:44.987]                       inherits <- base::inherits
[18:04:44.987]                       invokeRestart <- base::invokeRestart
[18:04:44.987]                       is.null <- base::is.null
[18:04:44.987]                       muffled <- FALSE
[18:04:44.987]                       if (inherits(cond, "message")) {
[18:04:44.987]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.987]                         if (muffled) 
[18:04:44.987]                           invokeRestart("muffleMessage")
[18:04:44.987]                       }
[18:04:44.987]                       else if (inherits(cond, "warning")) {
[18:04:44.987]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.987]                         if (muffled) 
[18:04:44.987]                           invokeRestart("muffleWarning")
[18:04:44.987]                       }
[18:04:44.987]                       else if (inherits(cond, "condition")) {
[18:04:44.987]                         if (!is.null(pattern)) {
[18:04:44.987]                           computeRestarts <- base::computeRestarts
[18:04:44.987]                           grepl <- base::grepl
[18:04:44.987]                           restarts <- computeRestarts(cond)
[18:04:44.987]                           for (restart in restarts) {
[18:04:44.987]                             name <- restart$name
[18:04:44.987]                             if (is.null(name)) 
[18:04:44.987]                               next
[18:04:44.987]                             if (!grepl(pattern, name)) 
[18:04:44.987]                               next
[18:04:44.987]                             invokeRestart(restart)
[18:04:44.987]                             muffled <- TRUE
[18:04:44.987]                             break
[18:04:44.987]                           }
[18:04:44.987]                         }
[18:04:44.987]                       }
[18:04:44.987]                       invisible(muffled)
[18:04:44.987]                     }
[18:04:44.987]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.987]                   }
[18:04:44.987]                 }
[18:04:44.987]                 else {
[18:04:44.987]                   if (TRUE) {
[18:04:44.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:44.987]                     {
[18:04:44.987]                       inherits <- base::inherits
[18:04:44.987]                       invokeRestart <- base::invokeRestart
[18:04:44.987]                       is.null <- base::is.null
[18:04:44.987]                       muffled <- FALSE
[18:04:44.987]                       if (inherits(cond, "message")) {
[18:04:44.987]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:44.987]                         if (muffled) 
[18:04:44.987]                           invokeRestart("muffleMessage")
[18:04:44.987]                       }
[18:04:44.987]                       else if (inherits(cond, "warning")) {
[18:04:44.987]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:44.987]                         if (muffled) 
[18:04:44.987]                           invokeRestart("muffleWarning")
[18:04:44.987]                       }
[18:04:44.987]                       else if (inherits(cond, "condition")) {
[18:04:44.987]                         if (!is.null(pattern)) {
[18:04:44.987]                           computeRestarts <- base::computeRestarts
[18:04:44.987]                           grepl <- base::grepl
[18:04:44.987]                           restarts <- computeRestarts(cond)
[18:04:44.987]                           for (restart in restarts) {
[18:04:44.987]                             name <- restart$name
[18:04:44.987]                             if (is.null(name)) 
[18:04:44.987]                               next
[18:04:44.987]                             if (!grepl(pattern, name)) 
[18:04:44.987]                               next
[18:04:44.987]                             invokeRestart(restart)
[18:04:44.987]                             muffled <- TRUE
[18:04:44.987]                             break
[18:04:44.987]                           }
[18:04:44.987]                         }
[18:04:44.987]                       }
[18:04:44.987]                       invisible(muffled)
[18:04:44.987]                     }
[18:04:44.987]                     muffleCondition(cond, pattern = "^muffle")
[18:04:44.987]                   }
[18:04:44.987]                 }
[18:04:44.987]             }
[18:04:44.987]         }))
[18:04:44.987]     }, error = function(ex) {
[18:04:44.987]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:44.987]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:44.987]                 ...future.rng), started = ...future.startTime, 
[18:04:44.987]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:44.987]             version = "1.8"), class = "FutureResult")
[18:04:44.987]     }, finally = {
[18:04:44.987]         if (!identical(...future.workdir, getwd())) 
[18:04:44.987]             setwd(...future.workdir)
[18:04:44.987]         {
[18:04:44.987]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:44.987]                 ...future.oldOptions$nwarnings <- NULL
[18:04:44.987]             }
[18:04:44.987]             base::options(...future.oldOptions)
[18:04:44.987]             if (.Platform$OS.type == "windows") {
[18:04:44.987]                 old_names <- names(...future.oldEnvVars)
[18:04:44.987]                 envs <- base::Sys.getenv()
[18:04:44.987]                 names <- names(envs)
[18:04:44.987]                 common <- intersect(names, old_names)
[18:04:44.987]                 added <- setdiff(names, old_names)
[18:04:44.987]                 removed <- setdiff(old_names, names)
[18:04:44.987]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:44.987]                   envs[common]]
[18:04:44.987]                 NAMES <- toupper(changed)
[18:04:44.987]                 args <- list()
[18:04:44.987]                 for (kk in seq_along(NAMES)) {
[18:04:44.987]                   name <- changed[[kk]]
[18:04:44.987]                   NAME <- NAMES[[kk]]
[18:04:44.987]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.987]                     next
[18:04:44.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.987]                 }
[18:04:44.987]                 NAMES <- toupper(added)
[18:04:44.987]                 for (kk in seq_along(NAMES)) {
[18:04:44.987]                   name <- added[[kk]]
[18:04:44.987]                   NAME <- NAMES[[kk]]
[18:04:44.987]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.987]                     next
[18:04:44.987]                   args[[name]] <- ""
[18:04:44.987]                 }
[18:04:44.987]                 NAMES <- toupper(removed)
[18:04:44.987]                 for (kk in seq_along(NAMES)) {
[18:04:44.987]                   name <- removed[[kk]]
[18:04:44.987]                   NAME <- NAMES[[kk]]
[18:04:44.987]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:44.987]                     next
[18:04:44.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:44.987]                 }
[18:04:44.987]                 if (length(args) > 0) 
[18:04:44.987]                   base::do.call(base::Sys.setenv, args = args)
[18:04:44.987]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:44.987]             }
[18:04:44.987]             else {
[18:04:44.987]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:44.987]             }
[18:04:44.987]             {
[18:04:44.987]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:44.987]                   0L) {
[18:04:44.987]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:44.987]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:44.987]                   base::options(opts)
[18:04:44.987]                 }
[18:04:44.987]                 {
[18:04:44.987]                   {
[18:04:44.987]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:44.987]                     NULL
[18:04:44.987]                   }
[18:04:44.987]                   options(future.plan = NULL)
[18:04:44.987]                   if (is.na(NA_character_)) 
[18:04:44.987]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:44.987]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:44.987]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:44.987]                     .init = FALSE)
[18:04:44.987]                 }
[18:04:44.987]             }
[18:04:44.987]         }
[18:04:44.987]     })
[18:04:44.987]     if (TRUE) {
[18:04:44.987]         base::sink(type = "output", split = FALSE)
[18:04:44.987]         if (TRUE) {
[18:04:44.987]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:44.987]         }
[18:04:44.987]         else {
[18:04:44.987]             ...future.result["stdout"] <- base::list(NULL)
[18:04:44.987]         }
[18:04:44.987]         base::close(...future.stdout)
[18:04:44.987]         ...future.stdout <- NULL
[18:04:44.987]     }
[18:04:44.987]     ...future.result$conditions <- ...future.conditions
[18:04:44.987]     ...future.result$finished <- base::Sys.time()
[18:04:44.987]     ...future.result
[18:04:44.987] }
[18:04:44.991] assign_globals() ...
[18:04:44.992] List of 1
[18:04:44.992]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[18:04:44.992]   .. ..@ .Data     :function (x)  
[18:04:44.992]   .. ..@ generic   : chr "my_fcn"
[18:04:44.992]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[18:04:44.992]   .. ..@ package   : chr ".GlobalEnv"
[18:04:44.992]   .. ..@ group     : list()
[18:04:44.992]   .. ..@ valueClass: chr(0) 
[18:04:44.992]   .. ..@ signature : chr "x"
[18:04:44.992]   .. ..@ default   : NULL
[18:04:44.992]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[18:04:44.992]  - attr(*, "where")=List of 1
[18:04:44.992]   ..$ my_fcn:<environment: R_EmptyEnv> 
[18:04:44.992]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:44.992]  - attr(*, "resolved")= logi FALSE
[18:04:44.992]  - attr(*, "total_size")= num 3936
[18:04:44.992]  - attr(*, "already-done")= logi TRUE
[18:04:45.001] - reassign environment for ‘my_fcn’
[18:04:45.001] - copied ‘my_fcn’ to environment
[18:04:45.002] assign_globals() ... done
[18:04:45.002] requestCore(): workers = 2
[18:04:45.006] MulticoreFuture started
[18:04:45.007] - Launch lazy future ... done
[18:04:45.007] run() for ‘MulticoreFuture’ ... done
[18:04:45.008] plan(): Setting new future strategy stack:
[18:04:45.009] result() for MulticoreFuture ...
[18:04:45.008] List of future strategies:
[18:04:45.008] 1. sequential:
[18:04:45.008]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:45.008]    - tweaked: FALSE
[18:04:45.008]    - call: NULL
[18:04:45.011] plan(): nbrOfWorkers() = 1
[18:04:45.015] plan(): Setting new future strategy stack:
[18:04:45.015] List of future strategies:
[18:04:45.015] 1. multicore:
[18:04:45.015]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:45.015]    - tweaked: FALSE
[18:04:45.015]    - call: plan(strategy)
[18:04:45.024] plan(): nbrOfWorkers() = 2
[18:04:45.035] result() for MulticoreFuture ...
[18:04:45.036] result() for MulticoreFuture ... done
[18:04:45.036] result() for MulticoreFuture ... done
[18:04:45.036] result() for MulticoreFuture ...
[18:04:45.036] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x586e7e175810>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[18:04:45.037] getGlobalsAndPackages() ...
[18:04:45.038] Searching for globals...
[18:04:45.044] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[18:04:45.044] Searching for globals ... DONE
[18:04:45.044] Resolving globals: FALSE
[18:04:45.046] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[18:04:45.047] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[18:04:45.047] - globals: [1] ‘my_fcn’
[18:04:45.047] 
[18:04:45.048] getGlobalsAndPackages() ... DONE
[18:04:45.048] run() for ‘Future’ ...
[18:04:45.049] - state: ‘created’
[18:04:45.049] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:45.056] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:45.057] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:45.057]   - Field: ‘label’
[18:04:45.061]   - Field: ‘local’
[18:04:45.061]   - Field: ‘owner’
[18:04:45.062]   - Field: ‘envir’
[18:04:45.062]   - Field: ‘workers’
[18:04:45.062]   - Field: ‘packages’
[18:04:45.062]   - Field: ‘gc’
[18:04:45.063]   - Field: ‘job’
[18:04:45.063]   - Field: ‘conditions’
[18:04:45.063]   - Field: ‘expr’
[18:04:45.064]   - Field: ‘uuid’
[18:04:45.064]   - Field: ‘seed’
[18:04:45.064]   - Field: ‘version’
[18:04:45.064]   - Field: ‘result’
[18:04:45.065]   - Field: ‘asynchronous’
[18:04:45.065]   - Field: ‘calls’
[18:04:45.065]   - Field: ‘globals’
[18:04:45.065]   - Field: ‘stdout’
[18:04:45.066]   - Field: ‘earlySignal’
[18:04:45.066]   - Field: ‘lazy’
[18:04:45.066]   - Field: ‘state’
[18:04:45.066] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:45.067] - Launch lazy future ...
[18:04:45.067] Packages needed by the future expression (n = 0): <none>
[18:04:45.068] Packages needed by future strategies (n = 0): <none>
[18:04:45.069] {
[18:04:45.069]     {
[18:04:45.069]         {
[18:04:45.069]             ...future.startTime <- base::Sys.time()
[18:04:45.069]             {
[18:04:45.069]                 {
[18:04:45.069]                   {
[18:04:45.069]                     {
[18:04:45.069]                       base::local({
[18:04:45.069]                         has_future <- base::requireNamespace("future", 
[18:04:45.069]                           quietly = TRUE)
[18:04:45.069]                         if (has_future) {
[18:04:45.069]                           ns <- base::getNamespace("future")
[18:04:45.069]                           version <- ns[[".package"]][["version"]]
[18:04:45.069]                           if (is.null(version)) 
[18:04:45.069]                             version <- utils::packageVersion("future")
[18:04:45.069]                         }
[18:04:45.069]                         else {
[18:04:45.069]                           version <- NULL
[18:04:45.069]                         }
[18:04:45.069]                         if (!has_future || version < "1.8.0") {
[18:04:45.069]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:45.069]                             "", base::R.version$version.string), 
[18:04:45.069]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:45.069]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:45.069]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:45.069]                               "release", "version")], collapse = " "), 
[18:04:45.069]                             hostname = base::Sys.info()[["nodename"]])
[18:04:45.069]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:45.069]                             info)
[18:04:45.069]                           info <- base::paste(info, collapse = "; ")
[18:04:45.069]                           if (!has_future) {
[18:04:45.069]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:45.069]                               info)
[18:04:45.069]                           }
[18:04:45.069]                           else {
[18:04:45.069]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:45.069]                               info, version)
[18:04:45.069]                           }
[18:04:45.069]                           base::stop(msg)
[18:04:45.069]                         }
[18:04:45.069]                       })
[18:04:45.069]                     }
[18:04:45.069]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:45.069]                     base::options(mc.cores = 1L)
[18:04:45.069]                   }
[18:04:45.069]                   ...future.strategy.old <- future::plan("list")
[18:04:45.069]                   options(future.plan = NULL)
[18:04:45.069]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:45.069]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:45.069]                 }
[18:04:45.069]                 ...future.workdir <- getwd()
[18:04:45.069]             }
[18:04:45.069]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:45.069]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:45.069]         }
[18:04:45.069]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:45.069]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:45.069]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:45.069]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:45.069]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:45.069]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:45.069]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:45.069]             base::names(...future.oldOptions))
[18:04:45.069]     }
[18:04:45.069]     if (FALSE) {
[18:04:45.069]     }
[18:04:45.069]     else {
[18:04:45.069]         if (TRUE) {
[18:04:45.069]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:45.069]                 open = "w")
[18:04:45.069]         }
[18:04:45.069]         else {
[18:04:45.069]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:45.069]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:45.069]         }
[18:04:45.069]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:45.069]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:45.069]             base::sink(type = "output", split = FALSE)
[18:04:45.069]             base::close(...future.stdout)
[18:04:45.069]         }, add = TRUE)
[18:04:45.069]     }
[18:04:45.069]     ...future.frame <- base::sys.nframe()
[18:04:45.069]     ...future.conditions <- base::list()
[18:04:45.069]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:45.069]     if (FALSE) {
[18:04:45.069]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:45.069]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:45.069]     }
[18:04:45.069]     ...future.result <- base::tryCatch({
[18:04:45.069]         base::withCallingHandlers({
[18:04:45.069]             ...future.value <- base::withVisible(base::local({
[18:04:45.069]                 withCallingHandlers({
[18:04:45.069]                   {
[18:04:45.069]                     my_fcn(3)
[18:04:45.069]                   }
[18:04:45.069]                 }, immediateCondition = function(cond) {
[18:04:45.069]                   save_rds <- function (object, pathname, ...) 
[18:04:45.069]                   {
[18:04:45.069]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:45.069]                     if (file_test("-f", pathname_tmp)) {
[18:04:45.069]                       fi_tmp <- file.info(pathname_tmp)
[18:04:45.069]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:45.069]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:45.069]                         fi_tmp[["mtime"]])
[18:04:45.069]                     }
[18:04:45.069]                     tryCatch({
[18:04:45.069]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:45.069]                     }, error = function(ex) {
[18:04:45.069]                       msg <- conditionMessage(ex)
[18:04:45.069]                       fi_tmp <- file.info(pathname_tmp)
[18:04:45.069]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:45.069]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:45.069]                         fi_tmp[["mtime"]], msg)
[18:04:45.069]                       ex$message <- msg
[18:04:45.069]                       stop(ex)
[18:04:45.069]                     })
[18:04:45.069]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:45.069]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:45.069]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:45.069]                       fi_tmp <- file.info(pathname_tmp)
[18:04:45.069]                       fi <- file.info(pathname)
[18:04:45.069]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:45.069]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:45.069]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:45.069]                         fi[["size"]], fi[["mtime"]])
[18:04:45.069]                       stop(msg)
[18:04:45.069]                     }
[18:04:45.069]                     invisible(pathname)
[18:04:45.069]                   }
[18:04:45.069]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:45.069]                     rootPath = tempdir()) 
[18:04:45.069]                   {
[18:04:45.069]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:45.069]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:45.069]                       tmpdir = path, fileext = ".rds")
[18:04:45.069]                     save_rds(obj, file)
[18:04:45.069]                   }
[18:04:45.069]                   saveImmediateCondition(cond, path = "/tmp/RtmpwKrUCJ/.future/immediateConditions")
[18:04:45.069]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:45.069]                   {
[18:04:45.069]                     inherits <- base::inherits
[18:04:45.069]                     invokeRestart <- base::invokeRestart
[18:04:45.069]                     is.null <- base::is.null
[18:04:45.069]                     muffled <- FALSE
[18:04:45.069]                     if (inherits(cond, "message")) {
[18:04:45.069]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:45.069]                       if (muffled) 
[18:04:45.069]                         invokeRestart("muffleMessage")
[18:04:45.069]                     }
[18:04:45.069]                     else if (inherits(cond, "warning")) {
[18:04:45.069]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:45.069]                       if (muffled) 
[18:04:45.069]                         invokeRestart("muffleWarning")
[18:04:45.069]                     }
[18:04:45.069]                     else if (inherits(cond, "condition")) {
[18:04:45.069]                       if (!is.null(pattern)) {
[18:04:45.069]                         computeRestarts <- base::computeRestarts
[18:04:45.069]                         grepl <- base::grepl
[18:04:45.069]                         restarts <- computeRestarts(cond)
[18:04:45.069]                         for (restart in restarts) {
[18:04:45.069]                           name <- restart$name
[18:04:45.069]                           if (is.null(name)) 
[18:04:45.069]                             next
[18:04:45.069]                           if (!grepl(pattern, name)) 
[18:04:45.069]                             next
[18:04:45.069]                           invokeRestart(restart)
[18:04:45.069]                           muffled <- TRUE
[18:04:45.069]                           break
[18:04:45.069]                         }
[18:04:45.069]                       }
[18:04:45.069]                     }
[18:04:45.069]                     invisible(muffled)
[18:04:45.069]                   }
[18:04:45.069]                   muffleCondition(cond)
[18:04:45.069]                 })
[18:04:45.069]             }))
[18:04:45.069]             future::FutureResult(value = ...future.value$value, 
[18:04:45.069]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:45.069]                   ...future.rng), globalenv = if (FALSE) 
[18:04:45.069]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:45.069]                     ...future.globalenv.names))
[18:04:45.069]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:45.069]         }, condition = base::local({
[18:04:45.069]             c <- base::c
[18:04:45.069]             inherits <- base::inherits
[18:04:45.069]             invokeRestart <- base::invokeRestart
[18:04:45.069]             length <- base::length
[18:04:45.069]             list <- base::list
[18:04:45.069]             seq.int <- base::seq.int
[18:04:45.069]             signalCondition <- base::signalCondition
[18:04:45.069]             sys.calls <- base::sys.calls
[18:04:45.069]             `[[` <- base::`[[`
[18:04:45.069]             `+` <- base::`+`
[18:04:45.069]             `<<-` <- base::`<<-`
[18:04:45.069]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:45.069]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:45.069]                   3L)]
[18:04:45.069]             }
[18:04:45.069]             function(cond) {
[18:04:45.069]                 is_error <- inherits(cond, "error")
[18:04:45.069]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:45.069]                   NULL)
[18:04:45.069]                 if (is_error) {
[18:04:45.069]                   sessionInformation <- function() {
[18:04:45.069]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:45.069]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:45.069]                       search = base::search(), system = base::Sys.info())
[18:04:45.069]                   }
[18:04:45.069]                   ...future.conditions[[length(...future.conditions) + 
[18:04:45.069]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:45.069]                     cond$call), session = sessionInformation(), 
[18:04:45.069]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:45.069]                   signalCondition(cond)
[18:04:45.069]                 }
[18:04:45.069]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:45.069]                 "immediateCondition"))) {
[18:04:45.069]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:45.069]                   ...future.conditions[[length(...future.conditions) + 
[18:04:45.069]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:45.069]                   if (TRUE && !signal) {
[18:04:45.069]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:45.069]                     {
[18:04:45.069]                       inherits <- base::inherits
[18:04:45.069]                       invokeRestart <- base::invokeRestart
[18:04:45.069]                       is.null <- base::is.null
[18:04:45.069]                       muffled <- FALSE
[18:04:45.069]                       if (inherits(cond, "message")) {
[18:04:45.069]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:45.069]                         if (muffled) 
[18:04:45.069]                           invokeRestart("muffleMessage")
[18:04:45.069]                       }
[18:04:45.069]                       else if (inherits(cond, "warning")) {
[18:04:45.069]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:45.069]                         if (muffled) 
[18:04:45.069]                           invokeRestart("muffleWarning")
[18:04:45.069]                       }
[18:04:45.069]                       else if (inherits(cond, "condition")) {
[18:04:45.069]                         if (!is.null(pattern)) {
[18:04:45.069]                           computeRestarts <- base::computeRestarts
[18:04:45.069]                           grepl <- base::grepl
[18:04:45.069]                           restarts <- computeRestarts(cond)
[18:04:45.069]                           for (restart in restarts) {
[18:04:45.069]                             name <- restart$name
[18:04:45.069]                             if (is.null(name)) 
[18:04:45.069]                               next
[18:04:45.069]                             if (!grepl(pattern, name)) 
[18:04:45.069]                               next
[18:04:45.069]                             invokeRestart(restart)
[18:04:45.069]                             muffled <- TRUE
[18:04:45.069]                             break
[18:04:45.069]                           }
[18:04:45.069]                         }
[18:04:45.069]                       }
[18:04:45.069]                       invisible(muffled)
[18:04:45.069]                     }
[18:04:45.069]                     muffleCondition(cond, pattern = "^muffle")
[18:04:45.069]                   }
[18:04:45.069]                 }
[18:04:45.069]                 else {
[18:04:45.069]                   if (TRUE) {
[18:04:45.069]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:45.069]                     {
[18:04:45.069]                       inherits <- base::inherits
[18:04:45.069]                       invokeRestart <- base::invokeRestart
[18:04:45.069]                       is.null <- base::is.null
[18:04:45.069]                       muffled <- FALSE
[18:04:45.069]                       if (inherits(cond, "message")) {
[18:04:45.069]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:45.069]                         if (muffled) 
[18:04:45.069]                           invokeRestart("muffleMessage")
[18:04:45.069]                       }
[18:04:45.069]                       else if (inherits(cond, "warning")) {
[18:04:45.069]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:45.069]                         if (muffled) 
[18:04:45.069]                           invokeRestart("muffleWarning")
[18:04:45.069]                       }
[18:04:45.069]                       else if (inherits(cond, "condition")) {
[18:04:45.069]                         if (!is.null(pattern)) {
[18:04:45.069]                           computeRestarts <- base::computeRestarts
[18:04:45.069]                           grepl <- base::grepl
[18:04:45.069]                           restarts <- computeRestarts(cond)
[18:04:45.069]                           for (restart in restarts) {
[18:04:45.069]                             name <- restart$name
[18:04:45.069]                             if (is.null(name)) 
[18:04:45.069]                               next
[18:04:45.069]                             if (!grepl(pattern, name)) 
[18:04:45.069]                               next
[18:04:45.069]                             invokeRestart(restart)
[18:04:45.069]                             muffled <- TRUE
[18:04:45.069]                             break
[18:04:45.069]                           }
[18:04:45.069]                         }
[18:04:45.069]                       }
[18:04:45.069]                       invisible(muffled)
[18:04:45.069]                     }
[18:04:45.069]                     muffleCondition(cond, pattern = "^muffle")
[18:04:45.069]                   }
[18:04:45.069]                 }
[18:04:45.069]             }
[18:04:45.069]         }))
[18:04:45.069]     }, error = function(ex) {
[18:04:45.069]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:45.069]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:45.069]                 ...future.rng), started = ...future.startTime, 
[18:04:45.069]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:45.069]             version = "1.8"), class = "FutureResult")
[18:04:45.069]     }, finally = {
[18:04:45.069]         if (!identical(...future.workdir, getwd())) 
[18:04:45.069]             setwd(...future.workdir)
[18:04:45.069]         {
[18:04:45.069]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:45.069]                 ...future.oldOptions$nwarnings <- NULL
[18:04:45.069]             }
[18:04:45.069]             base::options(...future.oldOptions)
[18:04:45.069]             if (.Platform$OS.type == "windows") {
[18:04:45.069]                 old_names <- names(...future.oldEnvVars)
[18:04:45.069]                 envs <- base::Sys.getenv()
[18:04:45.069]                 names <- names(envs)
[18:04:45.069]                 common <- intersect(names, old_names)
[18:04:45.069]                 added <- setdiff(names, old_names)
[18:04:45.069]                 removed <- setdiff(old_names, names)
[18:04:45.069]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:45.069]                   envs[common]]
[18:04:45.069]                 NAMES <- toupper(changed)
[18:04:45.069]                 args <- list()
[18:04:45.069]                 for (kk in seq_along(NAMES)) {
[18:04:45.069]                   name <- changed[[kk]]
[18:04:45.069]                   NAME <- NAMES[[kk]]
[18:04:45.069]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:45.069]                     next
[18:04:45.069]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:45.069]                 }
[18:04:45.069]                 NAMES <- toupper(added)
[18:04:45.069]                 for (kk in seq_along(NAMES)) {
[18:04:45.069]                   name <- added[[kk]]
[18:04:45.069]                   NAME <- NAMES[[kk]]
[18:04:45.069]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:45.069]                     next
[18:04:45.069]                   args[[name]] <- ""
[18:04:45.069]                 }
[18:04:45.069]                 NAMES <- toupper(removed)
[18:04:45.069]                 for (kk in seq_along(NAMES)) {
[18:04:45.069]                   name <- removed[[kk]]
[18:04:45.069]                   NAME <- NAMES[[kk]]
[18:04:45.069]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:45.069]                     next
[18:04:45.069]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:45.069]                 }
[18:04:45.069]                 if (length(args) > 0) 
[18:04:45.069]                   base::do.call(base::Sys.setenv, args = args)
[18:04:45.069]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:45.069]             }
[18:04:45.069]             else {
[18:04:45.069]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:45.069]             }
[18:04:45.069]             {
[18:04:45.069]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:45.069]                   0L) {
[18:04:45.069]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:45.069]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:45.069]                   base::options(opts)
[18:04:45.069]                 }
[18:04:45.069]                 {
[18:04:45.069]                   {
[18:04:45.069]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:45.069]                     NULL
[18:04:45.069]                   }
[18:04:45.069]                   options(future.plan = NULL)
[18:04:45.069]                   if (is.na(NA_character_)) 
[18:04:45.069]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:45.069]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:45.069]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:45.069]                     .init = FALSE)
[18:04:45.069]                 }
[18:04:45.069]             }
[18:04:45.069]         }
[18:04:45.069]     })
[18:04:45.069]     if (TRUE) {
[18:04:45.069]         base::sink(type = "output", split = FALSE)
[18:04:45.069]         if (TRUE) {
[18:04:45.069]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:45.069]         }
[18:04:45.069]         else {
[18:04:45.069]             ...future.result["stdout"] <- base::list(NULL)
[18:04:45.069]         }
[18:04:45.069]         base::close(...future.stdout)
[18:04:45.069]         ...future.stdout <- NULL
[18:04:45.069]     }
[18:04:45.069]     ...future.result$conditions <- ...future.conditions
[18:04:45.069]     ...future.result$finished <- base::Sys.time()
[18:04:45.069]     ...future.result
[18:04:45.069] }
[18:04:45.073] assign_globals() ...
[18:04:45.074] List of 1
[18:04:45.074]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[18:04:45.074]   .. ..@ .Data     :function (x)  
[18:04:45.074]   .. ..@ generic   : chr "my_fcn"
[18:04:45.074]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[18:04:45.074]   .. ..@ package   : chr ".GlobalEnv"
[18:04:45.074]   .. ..@ group     : list()
[18:04:45.074]   .. ..@ valueClass: chr(0) 
[18:04:45.074]   .. ..@ signature : chr "x"
[18:04:45.074]   .. ..@ default   : NULL
[18:04:45.074]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[18:04:45.074]  - attr(*, "where")=List of 1
[18:04:45.074]   ..$ my_fcn:<environment: R_EmptyEnv> 
[18:04:45.074]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:45.074]  - attr(*, "resolved")= logi FALSE
[18:04:45.074]  - attr(*, "total_size")= num 3936
[18:04:45.074]  - attr(*, "already-done")= logi TRUE
[18:04:45.086] - reassign environment for ‘my_fcn’
[18:04:45.087] - copied ‘my_fcn’ to environment
[18:04:45.087] assign_globals() ... done
[18:04:45.087] requestCore(): workers = 2
[18:04:45.091] MulticoreFuture started
[18:04:45.092] - Launch lazy future ... done
[18:04:45.092] run() for ‘MulticoreFuture’ ... done
[18:04:45.093] result() for MulticoreFuture ...
[18:04:45.095] plan(): Setting new future strategy stack:
[18:04:45.096] List of future strategies:
[18:04:45.096] 1. sequential:
[18:04:45.096]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:45.096]    - tweaked: FALSE
[18:04:45.096]    - call: NULL
[18:04:45.098] plan(): nbrOfWorkers() = 1
[18:04:45.103] plan(): Setting new future strategy stack:
[18:04:45.104] List of future strategies:
[18:04:45.104] 1. multicore:
[18:04:45.104]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:45.104]    - tweaked: FALSE
[18:04:45.104]    - call: plan(strategy)
[18:04:45.116] plan(): nbrOfWorkers() = 2
[18:04:45.139] result() for MulticoreFuture ...
[18:04:45.139] result() for MulticoreFuture ... done
[18:04:45.139] signalConditions() ...
[18:04:45.140]  - include = ‘immediateCondition’
[18:04:45.140]  - exclude = 
[18:04:45.140]  - resignal = FALSE
[18:04:45.140]  - Number of conditions: 1
[18:04:45.141] signalConditions() ... done
[18:04:45.141] result() for MulticoreFuture ... done
[18:04:45.141] result() for MulticoreFuture ...
[18:04:45.142] result() for MulticoreFuture ... done
[18:04:45.142] signalConditions() ...
[18:04:45.142]  - include = ‘immediateCondition’
[18:04:45.142]  - exclude = 
[18:04:45.142]  - resignal = FALSE
[18:04:45.143]  - Number of conditions: 1
[18:04:45.143] signalConditions() ... done
[18:04:45.143] Future state: ‘finished’
[18:04:45.143] result() for MulticoreFuture ...
[18:04:45.144] result() for MulticoreFuture ... done
[18:04:45.144] signalConditions() ...
[18:04:45.144]  - include = ‘condition’
[18:04:45.144]  - exclude = ‘immediateCondition’
[18:04:45.145]  - resignal = TRUE
[18:04:45.145]  - Number of conditions: 1
[18:04:45.145]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:04:45.145] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multisession
[18:04:45.146] plan(): Setting new future strategy stack:
[18:04:45.147] List of future strategies:
[18:04:45.147] 1. multisession:
[18:04:45.147]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:04:45.147]    - tweaked: FALSE
[18:04:45.147]    - call: plan(strategy)
[18:04:45.147] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:04:45.148] multisession:
[18:04:45.148] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:04:45.148] - tweaked: FALSE
[18:04:45.148] - call: plan(strategy)
[18:04:45.158] getGlobalsAndPackages() ...
[18:04:45.159] Not searching for globals
[18:04:45.159] - globals: [0] <none>
[18:04:45.159] getGlobalsAndPackages() ... DONE
[18:04:45.160] [local output] makeClusterPSOCK() ...
[18:04:45.230] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:04:45.232] [local output] Base port: 11981
[18:04:45.232] [local output] Getting setup options for 2 cluster nodes ...
[18:04:45.232] [local output]  - Node 1 of 2 ...
[18:04:45.233] [local output] localMachine=TRUE => revtunnel=FALSE

[18:04:45.234] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwKrUCJ/worker.rank=1.parallelly.parent=324401.4f331212453d5.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpwKrUCJ/worker.rank=1.parallelly.parent=324401.4f331212453d5.pid")'’
[18:04:45.496] - Possible to infer worker's PID: TRUE
[18:04:45.496] [local output] Rscript port: 11981

[18:04:45.497] [local output]  - Node 2 of 2 ...
[18:04:45.497] [local output] localMachine=TRUE => revtunnel=FALSE

[18:04:45.498] [local output] Rscript port: 11981

[18:04:45.499] [local output] Getting setup options for 2 cluster nodes ... done
[18:04:45.499] [local output]  - Parallel setup requested for some PSOCK nodes
[18:04:45.500] [local output] Setting up PSOCK nodes in parallel
[18:04:45.501] List of 36
[18:04:45.501]  $ worker          : chr "localhost"
[18:04:45.501]   ..- attr(*, "localhost")= logi TRUE
[18:04:45.501]  $ master          : chr "localhost"
[18:04:45.501]  $ port            : int 11981
[18:04:45.501]  $ connectTimeout  : num 120
[18:04:45.501]  $ timeout         : num 2592000
[18:04:45.501]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:04:45.501]  $ homogeneous     : logi TRUE
[18:04:45.501]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:04:45.501]  $ rscript_envs    : NULL
[18:04:45.501]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:04:45.501]  $ rscript_startup : NULL
[18:04:45.501]  $ rscript_sh      : chr "sh"
[18:04:45.501]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:04:45.501]  $ methods         : logi TRUE
[18:04:45.501]  $ socketOptions   : chr "no-delay"
[18:04:45.501]  $ useXDR          : logi FALSE
[18:04:45.501]  $ outfile         : chr "/dev/null"
[18:04:45.501]  $ renice          : int NA
[18:04:45.501]  $ rshcmd          : NULL
[18:04:45.501]  $ user            : chr(0) 
[18:04:45.501]  $ revtunnel       : logi FALSE
[18:04:45.501]  $ rshlogfile      : NULL
[18:04:45.501]  $ rshopts         : chr(0) 
[18:04:45.501]  $ rank            : int 1
[18:04:45.501]  $ manual          : logi FALSE
[18:04:45.501]  $ dryrun          : logi FALSE
[18:04:45.501]  $ quiet           : logi FALSE
[18:04:45.501]  $ setup_strategy  : chr "parallel"
[18:04:45.501]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:04:45.501]  $ pidfile         : chr "/tmp/RtmpwKrUCJ/worker.rank=1.parallelly.parent=324401.4f331212453d5.pid"
[18:04:45.501]  $ rshcmd_label    : NULL
[18:04:45.501]  $ rsh_call        : NULL
[18:04:45.501]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:04:45.501]  $ localMachine    : logi TRUE
[18:04:45.501]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:04:45.501]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:04:45.501]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:04:45.501]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:04:45.501]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:04:45.501]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:04:45.501]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:04:45.501]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:04:45.501]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:04:45.501]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:04:45.501]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:04:45.501]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:04:45.501]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:04:45.501]  $ arguments       :List of 28
[18:04:45.501]   ..$ worker          : chr "localhost"
[18:04:45.501]   ..$ master          : NULL
[18:04:45.501]   ..$ port            : int 11981
[18:04:45.501]   ..$ connectTimeout  : num 120
[18:04:45.501]   ..$ timeout         : num 2592000
[18:04:45.501]   ..$ rscript         : NULL
[18:04:45.501]   ..$ homogeneous     : NULL
[18:04:45.501]   ..$ rscript_args    : NULL
[18:04:45.501]   ..$ rscript_envs    : NULL
[18:04:45.501]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:04:45.501]   ..$ rscript_startup : NULL
[18:04:45.501]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:04:45.501]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:04:45.501]   ..$ methods         : logi TRUE
[18:04:45.501]   ..$ socketOptions   : chr "no-delay"
[18:04:45.501]   ..$ useXDR          : logi FALSE
[18:04:45.501]   ..$ outfile         : chr "/dev/null"
[18:04:45.501]   ..$ renice          : int NA
[18:04:45.501]   ..$ rshcmd          : NULL
[18:04:45.501]   ..$ user            : NULL
[18:04:45.501]   ..$ revtunnel       : logi NA
[18:04:45.501]   ..$ rshlogfile      : NULL
[18:04:45.501]   ..$ rshopts         : NULL
[18:04:45.501]   ..$ rank            : int 1
[18:04:45.501]   ..$ manual          : logi FALSE
[18:04:45.501]   ..$ dryrun          : logi FALSE
[18:04:45.501]   ..$ quiet           : logi FALSE
[18:04:45.501]   ..$ setup_strategy  : chr "parallel"
[18:04:45.501]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:04:45.534] [local output] System call to launch all workers:
[18:04:45.535] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpwKrUCJ/worker.rank=1.parallelly.parent=324401.4f331212453d5.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11981 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:04:45.535] [local output] Starting PSOCK main server
[18:04:45.544] [local output] Workers launched
[18:04:45.544] [local output] Waiting for workers to connect back
[18:04:45.544]  - [local output] 0 workers out of 2 ready
[18:04:45.905]  - [local output] 0 workers out of 2 ready
[18:04:45.905]  - [local output] 1 workers out of 2 ready
[18:04:45.908]  - [local output] 1 workers out of 2 ready
[18:04:45.909]  - [local output] 2 workers out of 2 ready
[18:04:45.909] [local output] Launching of workers completed
[18:04:45.909] [local output] Collecting session information from workers
[18:04:45.911] [local output]  - Worker #1 of 2
[18:04:45.912] [local output]  - Worker #2 of 2
[18:04:45.912] [local output] makeClusterPSOCK() ... done
[18:04:45.933] Packages needed by the future expression (n = 0): <none>
[18:04:45.933] Packages needed by future strategies (n = 0): <none>
[18:04:45.934] {
[18:04:45.934]     {
[18:04:45.934]         {
[18:04:45.934]             ...future.startTime <- base::Sys.time()
[18:04:45.934]             {
[18:04:45.934]                 {
[18:04:45.934]                   {
[18:04:45.934]                     {
[18:04:45.934]                       base::local({
[18:04:45.934]                         has_future <- base::requireNamespace("future", 
[18:04:45.934]                           quietly = TRUE)
[18:04:45.934]                         if (has_future) {
[18:04:45.934]                           ns <- base::getNamespace("future")
[18:04:45.934]                           version <- ns[[".package"]][["version"]]
[18:04:45.934]                           if (is.null(version)) 
[18:04:45.934]                             version <- utils::packageVersion("future")
[18:04:45.934]                         }
[18:04:45.934]                         else {
[18:04:45.934]                           version <- NULL
[18:04:45.934]                         }
[18:04:45.934]                         if (!has_future || version < "1.8.0") {
[18:04:45.934]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:45.934]                             "", base::R.version$version.string), 
[18:04:45.934]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:45.934]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:45.934]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:45.934]                               "release", "version")], collapse = " "), 
[18:04:45.934]                             hostname = base::Sys.info()[["nodename"]])
[18:04:45.934]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:45.934]                             info)
[18:04:45.934]                           info <- base::paste(info, collapse = "; ")
[18:04:45.934]                           if (!has_future) {
[18:04:45.934]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:45.934]                               info)
[18:04:45.934]                           }
[18:04:45.934]                           else {
[18:04:45.934]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:45.934]                               info, version)
[18:04:45.934]                           }
[18:04:45.934]                           base::stop(msg)
[18:04:45.934]                         }
[18:04:45.934]                       })
[18:04:45.934]                     }
[18:04:45.934]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:45.934]                     base::options(mc.cores = 1L)
[18:04:45.934]                   }
[18:04:45.934]                   ...future.strategy.old <- future::plan("list")
[18:04:45.934]                   options(future.plan = NULL)
[18:04:45.934]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:45.934]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:45.934]                 }
[18:04:45.934]                 ...future.workdir <- getwd()
[18:04:45.934]             }
[18:04:45.934]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:45.934]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:45.934]         }
[18:04:45.934]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:45.934]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:45.934]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:45.934]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:45.934]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:45.934]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:45.934]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:45.934]             base::names(...future.oldOptions))
[18:04:45.934]     }
[18:04:45.934]     if (FALSE) {
[18:04:45.934]     }
[18:04:45.934]     else {
[18:04:45.934]         if (TRUE) {
[18:04:45.934]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:45.934]                 open = "w")
[18:04:45.934]         }
[18:04:45.934]         else {
[18:04:45.934]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:45.934]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:45.934]         }
[18:04:45.934]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:45.934]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:45.934]             base::sink(type = "output", split = FALSE)
[18:04:45.934]             base::close(...future.stdout)
[18:04:45.934]         }, add = TRUE)
[18:04:45.934]     }
[18:04:45.934]     ...future.frame <- base::sys.nframe()
[18:04:45.934]     ...future.conditions <- base::list()
[18:04:45.934]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:45.934]     if (FALSE) {
[18:04:45.934]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:45.934]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:45.934]     }
[18:04:45.934]     ...future.result <- base::tryCatch({
[18:04:45.934]         base::withCallingHandlers({
[18:04:45.934]             ...future.value <- base::withVisible(base::local({
[18:04:45.934]                 ...future.makeSendCondition <- base::local({
[18:04:45.934]                   sendCondition <- NULL
[18:04:45.934]                   function(frame = 1L) {
[18:04:45.934]                     if (is.function(sendCondition)) 
[18:04:45.934]                       return(sendCondition)
[18:04:45.934]                     ns <- getNamespace("parallel")
[18:04:45.934]                     if (exists("sendData", mode = "function", 
[18:04:45.934]                       envir = ns)) {
[18:04:45.934]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:45.934]                         envir = ns)
[18:04:45.934]                       envir <- sys.frame(frame)
[18:04:45.934]                       master <- NULL
[18:04:45.934]                       while (!identical(envir, .GlobalEnv) && 
[18:04:45.934]                         !identical(envir, emptyenv())) {
[18:04:45.934]                         if (exists("master", mode = "list", envir = envir, 
[18:04:45.934]                           inherits = FALSE)) {
[18:04:45.934]                           master <- get("master", mode = "list", 
[18:04:45.934]                             envir = envir, inherits = FALSE)
[18:04:45.934]                           if (inherits(master, c("SOCKnode", 
[18:04:45.934]                             "SOCK0node"))) {
[18:04:45.934]                             sendCondition <<- function(cond) {
[18:04:45.934]                               data <- list(type = "VALUE", value = cond, 
[18:04:45.934]                                 success = TRUE)
[18:04:45.934]                               parallel_sendData(master, data)
[18:04:45.934]                             }
[18:04:45.934]                             return(sendCondition)
[18:04:45.934]                           }
[18:04:45.934]                         }
[18:04:45.934]                         frame <- frame + 1L
[18:04:45.934]                         envir <- sys.frame(frame)
[18:04:45.934]                       }
[18:04:45.934]                     }
[18:04:45.934]                     sendCondition <<- function(cond) NULL
[18:04:45.934]                   }
[18:04:45.934]                 })
[18:04:45.934]                 withCallingHandlers({
[18:04:45.934]                   NA
[18:04:45.934]                 }, immediateCondition = function(cond) {
[18:04:45.934]                   sendCondition <- ...future.makeSendCondition()
[18:04:45.934]                   sendCondition(cond)
[18:04:45.934]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:45.934]                   {
[18:04:45.934]                     inherits <- base::inherits
[18:04:45.934]                     invokeRestart <- base::invokeRestart
[18:04:45.934]                     is.null <- base::is.null
[18:04:45.934]                     muffled <- FALSE
[18:04:45.934]                     if (inherits(cond, "message")) {
[18:04:45.934]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:45.934]                       if (muffled) 
[18:04:45.934]                         invokeRestart("muffleMessage")
[18:04:45.934]                     }
[18:04:45.934]                     else if (inherits(cond, "warning")) {
[18:04:45.934]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:45.934]                       if (muffled) 
[18:04:45.934]                         invokeRestart("muffleWarning")
[18:04:45.934]                     }
[18:04:45.934]                     else if (inherits(cond, "condition")) {
[18:04:45.934]                       if (!is.null(pattern)) {
[18:04:45.934]                         computeRestarts <- base::computeRestarts
[18:04:45.934]                         grepl <- base::grepl
[18:04:45.934]                         restarts <- computeRestarts(cond)
[18:04:45.934]                         for (restart in restarts) {
[18:04:45.934]                           name <- restart$name
[18:04:45.934]                           if (is.null(name)) 
[18:04:45.934]                             next
[18:04:45.934]                           if (!grepl(pattern, name)) 
[18:04:45.934]                             next
[18:04:45.934]                           invokeRestart(restart)
[18:04:45.934]                           muffled <- TRUE
[18:04:45.934]                           break
[18:04:45.934]                         }
[18:04:45.934]                       }
[18:04:45.934]                     }
[18:04:45.934]                     invisible(muffled)
[18:04:45.934]                   }
[18:04:45.934]                   muffleCondition(cond)
[18:04:45.934]                 })
[18:04:45.934]             }))
[18:04:45.934]             future::FutureResult(value = ...future.value$value, 
[18:04:45.934]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:45.934]                   ...future.rng), globalenv = if (FALSE) 
[18:04:45.934]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:45.934]                     ...future.globalenv.names))
[18:04:45.934]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:45.934]         }, condition = base::local({
[18:04:45.934]             c <- base::c
[18:04:45.934]             inherits <- base::inherits
[18:04:45.934]             invokeRestart <- base::invokeRestart
[18:04:45.934]             length <- base::length
[18:04:45.934]             list <- base::list
[18:04:45.934]             seq.int <- base::seq.int
[18:04:45.934]             signalCondition <- base::signalCondition
[18:04:45.934]             sys.calls <- base::sys.calls
[18:04:45.934]             `[[` <- base::`[[`
[18:04:45.934]             `+` <- base::`+`
[18:04:45.934]             `<<-` <- base::`<<-`
[18:04:45.934]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:45.934]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:45.934]                   3L)]
[18:04:45.934]             }
[18:04:45.934]             function(cond) {
[18:04:45.934]                 is_error <- inherits(cond, "error")
[18:04:45.934]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:45.934]                   NULL)
[18:04:45.934]                 if (is_error) {
[18:04:45.934]                   sessionInformation <- function() {
[18:04:45.934]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:45.934]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:45.934]                       search = base::search(), system = base::Sys.info())
[18:04:45.934]                   }
[18:04:45.934]                   ...future.conditions[[length(...future.conditions) + 
[18:04:45.934]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:45.934]                     cond$call), session = sessionInformation(), 
[18:04:45.934]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:45.934]                   signalCondition(cond)
[18:04:45.934]                 }
[18:04:45.934]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:45.934]                 "immediateCondition"))) {
[18:04:45.934]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:45.934]                   ...future.conditions[[length(...future.conditions) + 
[18:04:45.934]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:45.934]                   if (TRUE && !signal) {
[18:04:45.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:45.934]                     {
[18:04:45.934]                       inherits <- base::inherits
[18:04:45.934]                       invokeRestart <- base::invokeRestart
[18:04:45.934]                       is.null <- base::is.null
[18:04:45.934]                       muffled <- FALSE
[18:04:45.934]                       if (inherits(cond, "message")) {
[18:04:45.934]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:45.934]                         if (muffled) 
[18:04:45.934]                           invokeRestart("muffleMessage")
[18:04:45.934]                       }
[18:04:45.934]                       else if (inherits(cond, "warning")) {
[18:04:45.934]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:45.934]                         if (muffled) 
[18:04:45.934]                           invokeRestart("muffleWarning")
[18:04:45.934]                       }
[18:04:45.934]                       else if (inherits(cond, "condition")) {
[18:04:45.934]                         if (!is.null(pattern)) {
[18:04:45.934]                           computeRestarts <- base::computeRestarts
[18:04:45.934]                           grepl <- base::grepl
[18:04:45.934]                           restarts <- computeRestarts(cond)
[18:04:45.934]                           for (restart in restarts) {
[18:04:45.934]                             name <- restart$name
[18:04:45.934]                             if (is.null(name)) 
[18:04:45.934]                               next
[18:04:45.934]                             if (!grepl(pattern, name)) 
[18:04:45.934]                               next
[18:04:45.934]                             invokeRestart(restart)
[18:04:45.934]                             muffled <- TRUE
[18:04:45.934]                             break
[18:04:45.934]                           }
[18:04:45.934]                         }
[18:04:45.934]                       }
[18:04:45.934]                       invisible(muffled)
[18:04:45.934]                     }
[18:04:45.934]                     muffleCondition(cond, pattern = "^muffle")
[18:04:45.934]                   }
[18:04:45.934]                 }
[18:04:45.934]                 else {
[18:04:45.934]                   if (TRUE) {
[18:04:45.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:45.934]                     {
[18:04:45.934]                       inherits <- base::inherits
[18:04:45.934]                       invokeRestart <- base::invokeRestart
[18:04:45.934]                       is.null <- base::is.null
[18:04:45.934]                       muffled <- FALSE
[18:04:45.934]                       if (inherits(cond, "message")) {
[18:04:45.934]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:45.934]                         if (muffled) 
[18:04:45.934]                           invokeRestart("muffleMessage")
[18:04:45.934]                       }
[18:04:45.934]                       else if (inherits(cond, "warning")) {
[18:04:45.934]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:45.934]                         if (muffled) 
[18:04:45.934]                           invokeRestart("muffleWarning")
[18:04:45.934]                       }
[18:04:45.934]                       else if (inherits(cond, "condition")) {
[18:04:45.934]                         if (!is.null(pattern)) {
[18:04:45.934]                           computeRestarts <- base::computeRestarts
[18:04:45.934]                           grepl <- base::grepl
[18:04:45.934]                           restarts <- computeRestarts(cond)
[18:04:45.934]                           for (restart in restarts) {
[18:04:45.934]                             name <- restart$name
[18:04:45.934]                             if (is.null(name)) 
[18:04:45.934]                               next
[18:04:45.934]                             if (!grepl(pattern, name)) 
[18:04:45.934]                               next
[18:04:45.934]                             invokeRestart(restart)
[18:04:45.934]                             muffled <- TRUE
[18:04:45.934]                             break
[18:04:45.934]                           }
[18:04:45.934]                         }
[18:04:45.934]                       }
[18:04:45.934]                       invisible(muffled)
[18:04:45.934]                     }
[18:04:45.934]                     muffleCondition(cond, pattern = "^muffle")
[18:04:45.934]                   }
[18:04:45.934]                 }
[18:04:45.934]             }
[18:04:45.934]         }))
[18:04:45.934]     }, error = function(ex) {
[18:04:45.934]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:45.934]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:45.934]                 ...future.rng), started = ...future.startTime, 
[18:04:45.934]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:45.934]             version = "1.8"), class = "FutureResult")
[18:04:45.934]     }, finally = {
[18:04:45.934]         if (!identical(...future.workdir, getwd())) 
[18:04:45.934]             setwd(...future.workdir)
[18:04:45.934]         {
[18:04:45.934]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:45.934]                 ...future.oldOptions$nwarnings <- NULL
[18:04:45.934]             }
[18:04:45.934]             base::options(...future.oldOptions)
[18:04:45.934]             if (.Platform$OS.type == "windows") {
[18:04:45.934]                 old_names <- names(...future.oldEnvVars)
[18:04:45.934]                 envs <- base::Sys.getenv()
[18:04:45.934]                 names <- names(envs)
[18:04:45.934]                 common <- intersect(names, old_names)
[18:04:45.934]                 added <- setdiff(names, old_names)
[18:04:45.934]                 removed <- setdiff(old_names, names)
[18:04:45.934]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:45.934]                   envs[common]]
[18:04:45.934]                 NAMES <- toupper(changed)
[18:04:45.934]                 args <- list()
[18:04:45.934]                 for (kk in seq_along(NAMES)) {
[18:04:45.934]                   name <- changed[[kk]]
[18:04:45.934]                   NAME <- NAMES[[kk]]
[18:04:45.934]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:45.934]                     next
[18:04:45.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:45.934]                 }
[18:04:45.934]                 NAMES <- toupper(added)
[18:04:45.934]                 for (kk in seq_along(NAMES)) {
[18:04:45.934]                   name <- added[[kk]]
[18:04:45.934]                   NAME <- NAMES[[kk]]
[18:04:45.934]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:45.934]                     next
[18:04:45.934]                   args[[name]] <- ""
[18:04:45.934]                 }
[18:04:45.934]                 NAMES <- toupper(removed)
[18:04:45.934]                 for (kk in seq_along(NAMES)) {
[18:04:45.934]                   name <- removed[[kk]]
[18:04:45.934]                   NAME <- NAMES[[kk]]
[18:04:45.934]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:45.934]                     next
[18:04:45.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:45.934]                 }
[18:04:45.934]                 if (length(args) > 0) 
[18:04:45.934]                   base::do.call(base::Sys.setenv, args = args)
[18:04:45.934]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:45.934]             }
[18:04:45.934]             else {
[18:04:45.934]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:45.934]             }
[18:04:45.934]             {
[18:04:45.934]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:45.934]                   0L) {
[18:04:45.934]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:45.934]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:45.934]                   base::options(opts)
[18:04:45.934]                 }
[18:04:45.934]                 {
[18:04:45.934]                   {
[18:04:45.934]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:45.934]                     NULL
[18:04:45.934]                   }
[18:04:45.934]                   options(future.plan = NULL)
[18:04:45.934]                   if (is.na(NA_character_)) 
[18:04:45.934]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:45.934]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:45.934]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:45.934]                     .init = FALSE)
[18:04:45.934]                 }
[18:04:45.934]             }
[18:04:45.934]         }
[18:04:45.934]     })
[18:04:45.934]     if (TRUE) {
[18:04:45.934]         base::sink(type = "output", split = FALSE)
[18:04:45.934]         if (TRUE) {
[18:04:45.934]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:45.934]         }
[18:04:45.934]         else {
[18:04:45.934]             ...future.result["stdout"] <- base::list(NULL)
[18:04:45.934]         }
[18:04:45.934]         base::close(...future.stdout)
[18:04:45.934]         ...future.stdout <- NULL
[18:04:45.934]     }
[18:04:45.934]     ...future.result$conditions <- ...future.conditions
[18:04:45.934]     ...future.result$finished <- base::Sys.time()
[18:04:45.934]     ...future.result
[18:04:45.934] }
[18:04:46.035] MultisessionFuture started
[18:04:46.035] result() for ClusterFuture ...
[18:04:46.036] receiveMessageFromWorker() for ClusterFuture ...
[18:04:46.037] - Validating connection of MultisessionFuture
[18:04:46.098] - received message: FutureResult
[18:04:46.099] - Received FutureResult
[18:04:46.099] - Erased future from FutureRegistry
[18:04:46.100] result() for ClusterFuture ...
[18:04:46.100] - result already collected: FutureResult
[18:04:46.100] result() for ClusterFuture ... done
[18:04:46.101] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:46.101] result() for ClusterFuture ... done
[18:04:46.101] result() for ClusterFuture ...
[18:04:46.102] - result already collected: FutureResult
[18:04:46.102] result() for ClusterFuture ... done
[18:04:46.103] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:04:46.111] plan(): nbrOfWorkers() = 2
[18:04:46.111] getGlobalsAndPackages() ...
[18:04:46.112] Searching for globals...
[18:04:46.120] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[18:04:46.120] Searching for globals ... DONE
[18:04:46.120] Resolving globals: FALSE
[18:04:46.122] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[18:04:46.123] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[18:04:46.124] - globals: [1] ‘my_fcn’
[18:04:46.124] 
[18:04:46.124] getGlobalsAndPackages() ... DONE
[18:04:46.125] run() for ‘Future’ ...
[18:04:46.125] - state: ‘created’
[18:04:46.126] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:46.162] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:46.163] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:46.163]   - Field: ‘node’
[18:04:46.163]   - Field: ‘label’
[18:04:46.164]   - Field: ‘local’
[18:04:46.164]   - Field: ‘owner’
[18:04:46.164]   - Field: ‘envir’
[18:04:46.165]   - Field: ‘workers’
[18:04:46.165]   - Field: ‘packages’
[18:04:46.165]   - Field: ‘gc’
[18:04:46.166]   - Field: ‘conditions’
[18:04:46.166]   - Field: ‘persistent’
[18:04:46.166]   - Field: ‘expr’
[18:04:46.167]   - Field: ‘uuid’
[18:04:46.167]   - Field: ‘seed’
[18:04:46.167]   - Field: ‘version’
[18:04:46.167]   - Field: ‘result’
[18:04:46.168]   - Field: ‘asynchronous’
[18:04:46.168]   - Field: ‘calls’
[18:04:46.168]   - Field: ‘globals’
[18:04:46.169]   - Field: ‘stdout’
[18:04:46.169]   - Field: ‘earlySignal’
[18:04:46.169]   - Field: ‘lazy’
[18:04:46.170]   - Field: ‘state’
[18:04:46.170] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:46.170] - Launch lazy future ...
[18:04:46.171] Packages needed by the future expression (n = 0): <none>
[18:04:46.171] Packages needed by future strategies (n = 0): <none>
[18:04:46.173] {
[18:04:46.173]     {
[18:04:46.173]         {
[18:04:46.173]             ...future.startTime <- base::Sys.time()
[18:04:46.173]             {
[18:04:46.173]                 {
[18:04:46.173]                   {
[18:04:46.173]                     {
[18:04:46.173]                       base::local({
[18:04:46.173]                         has_future <- base::requireNamespace("future", 
[18:04:46.173]                           quietly = TRUE)
[18:04:46.173]                         if (has_future) {
[18:04:46.173]                           ns <- base::getNamespace("future")
[18:04:46.173]                           version <- ns[[".package"]][["version"]]
[18:04:46.173]                           if (is.null(version)) 
[18:04:46.173]                             version <- utils::packageVersion("future")
[18:04:46.173]                         }
[18:04:46.173]                         else {
[18:04:46.173]                           version <- NULL
[18:04:46.173]                         }
[18:04:46.173]                         if (!has_future || version < "1.8.0") {
[18:04:46.173]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:46.173]                             "", base::R.version$version.string), 
[18:04:46.173]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:46.173]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:46.173]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:46.173]                               "release", "version")], collapse = " "), 
[18:04:46.173]                             hostname = base::Sys.info()[["nodename"]])
[18:04:46.173]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:46.173]                             info)
[18:04:46.173]                           info <- base::paste(info, collapse = "; ")
[18:04:46.173]                           if (!has_future) {
[18:04:46.173]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:46.173]                               info)
[18:04:46.173]                           }
[18:04:46.173]                           else {
[18:04:46.173]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:46.173]                               info, version)
[18:04:46.173]                           }
[18:04:46.173]                           base::stop(msg)
[18:04:46.173]                         }
[18:04:46.173]                       })
[18:04:46.173]                     }
[18:04:46.173]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:46.173]                     base::options(mc.cores = 1L)
[18:04:46.173]                   }
[18:04:46.173]                   ...future.strategy.old <- future::plan("list")
[18:04:46.173]                   options(future.plan = NULL)
[18:04:46.173]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:46.173]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:46.173]                 }
[18:04:46.173]                 ...future.workdir <- getwd()
[18:04:46.173]             }
[18:04:46.173]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:46.173]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:46.173]         }
[18:04:46.173]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:46.173]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:46.173]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:46.173]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:46.173]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:46.173]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:46.173]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:46.173]             base::names(...future.oldOptions))
[18:04:46.173]     }
[18:04:46.173]     if (FALSE) {
[18:04:46.173]     }
[18:04:46.173]     else {
[18:04:46.173]         if (TRUE) {
[18:04:46.173]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:46.173]                 open = "w")
[18:04:46.173]         }
[18:04:46.173]         else {
[18:04:46.173]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:46.173]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:46.173]         }
[18:04:46.173]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:46.173]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:46.173]             base::sink(type = "output", split = FALSE)
[18:04:46.173]             base::close(...future.stdout)
[18:04:46.173]         }, add = TRUE)
[18:04:46.173]     }
[18:04:46.173]     ...future.frame <- base::sys.nframe()
[18:04:46.173]     ...future.conditions <- base::list()
[18:04:46.173]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:46.173]     if (FALSE) {
[18:04:46.173]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:46.173]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:46.173]     }
[18:04:46.173]     ...future.result <- base::tryCatch({
[18:04:46.173]         base::withCallingHandlers({
[18:04:46.173]             ...future.value <- base::withVisible(base::local({
[18:04:46.173]                 ...future.makeSendCondition <- base::local({
[18:04:46.173]                   sendCondition <- NULL
[18:04:46.173]                   function(frame = 1L) {
[18:04:46.173]                     if (is.function(sendCondition)) 
[18:04:46.173]                       return(sendCondition)
[18:04:46.173]                     ns <- getNamespace("parallel")
[18:04:46.173]                     if (exists("sendData", mode = "function", 
[18:04:46.173]                       envir = ns)) {
[18:04:46.173]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:46.173]                         envir = ns)
[18:04:46.173]                       envir <- sys.frame(frame)
[18:04:46.173]                       master <- NULL
[18:04:46.173]                       while (!identical(envir, .GlobalEnv) && 
[18:04:46.173]                         !identical(envir, emptyenv())) {
[18:04:46.173]                         if (exists("master", mode = "list", envir = envir, 
[18:04:46.173]                           inherits = FALSE)) {
[18:04:46.173]                           master <- get("master", mode = "list", 
[18:04:46.173]                             envir = envir, inherits = FALSE)
[18:04:46.173]                           if (inherits(master, c("SOCKnode", 
[18:04:46.173]                             "SOCK0node"))) {
[18:04:46.173]                             sendCondition <<- function(cond) {
[18:04:46.173]                               data <- list(type = "VALUE", value = cond, 
[18:04:46.173]                                 success = TRUE)
[18:04:46.173]                               parallel_sendData(master, data)
[18:04:46.173]                             }
[18:04:46.173]                             return(sendCondition)
[18:04:46.173]                           }
[18:04:46.173]                         }
[18:04:46.173]                         frame <- frame + 1L
[18:04:46.173]                         envir <- sys.frame(frame)
[18:04:46.173]                       }
[18:04:46.173]                     }
[18:04:46.173]                     sendCondition <<- function(cond) NULL
[18:04:46.173]                   }
[18:04:46.173]                 })
[18:04:46.173]                 withCallingHandlers({
[18:04:46.173]                   {
[18:04:46.173]                     my_fcn
[18:04:46.173]                   }
[18:04:46.173]                 }, immediateCondition = function(cond) {
[18:04:46.173]                   sendCondition <- ...future.makeSendCondition()
[18:04:46.173]                   sendCondition(cond)
[18:04:46.173]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:46.173]                   {
[18:04:46.173]                     inherits <- base::inherits
[18:04:46.173]                     invokeRestart <- base::invokeRestart
[18:04:46.173]                     is.null <- base::is.null
[18:04:46.173]                     muffled <- FALSE
[18:04:46.173]                     if (inherits(cond, "message")) {
[18:04:46.173]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:46.173]                       if (muffled) 
[18:04:46.173]                         invokeRestart("muffleMessage")
[18:04:46.173]                     }
[18:04:46.173]                     else if (inherits(cond, "warning")) {
[18:04:46.173]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:46.173]                       if (muffled) 
[18:04:46.173]                         invokeRestart("muffleWarning")
[18:04:46.173]                     }
[18:04:46.173]                     else if (inherits(cond, "condition")) {
[18:04:46.173]                       if (!is.null(pattern)) {
[18:04:46.173]                         computeRestarts <- base::computeRestarts
[18:04:46.173]                         grepl <- base::grepl
[18:04:46.173]                         restarts <- computeRestarts(cond)
[18:04:46.173]                         for (restart in restarts) {
[18:04:46.173]                           name <- restart$name
[18:04:46.173]                           if (is.null(name)) 
[18:04:46.173]                             next
[18:04:46.173]                           if (!grepl(pattern, name)) 
[18:04:46.173]                             next
[18:04:46.173]                           invokeRestart(restart)
[18:04:46.173]                           muffled <- TRUE
[18:04:46.173]                           break
[18:04:46.173]                         }
[18:04:46.173]                       }
[18:04:46.173]                     }
[18:04:46.173]                     invisible(muffled)
[18:04:46.173]                   }
[18:04:46.173]                   muffleCondition(cond)
[18:04:46.173]                 })
[18:04:46.173]             }))
[18:04:46.173]             future::FutureResult(value = ...future.value$value, 
[18:04:46.173]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:46.173]                   ...future.rng), globalenv = if (FALSE) 
[18:04:46.173]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:46.173]                     ...future.globalenv.names))
[18:04:46.173]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:46.173]         }, condition = base::local({
[18:04:46.173]             c <- base::c
[18:04:46.173]             inherits <- base::inherits
[18:04:46.173]             invokeRestart <- base::invokeRestart
[18:04:46.173]             length <- base::length
[18:04:46.173]             list <- base::list
[18:04:46.173]             seq.int <- base::seq.int
[18:04:46.173]             signalCondition <- base::signalCondition
[18:04:46.173]             sys.calls <- base::sys.calls
[18:04:46.173]             `[[` <- base::`[[`
[18:04:46.173]             `+` <- base::`+`
[18:04:46.173]             `<<-` <- base::`<<-`
[18:04:46.173]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:46.173]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:46.173]                   3L)]
[18:04:46.173]             }
[18:04:46.173]             function(cond) {
[18:04:46.173]                 is_error <- inherits(cond, "error")
[18:04:46.173]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:46.173]                   NULL)
[18:04:46.173]                 if (is_error) {
[18:04:46.173]                   sessionInformation <- function() {
[18:04:46.173]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:46.173]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:46.173]                       search = base::search(), system = base::Sys.info())
[18:04:46.173]                   }
[18:04:46.173]                   ...future.conditions[[length(...future.conditions) + 
[18:04:46.173]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:46.173]                     cond$call), session = sessionInformation(), 
[18:04:46.173]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:46.173]                   signalCondition(cond)
[18:04:46.173]                 }
[18:04:46.173]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:46.173]                 "immediateCondition"))) {
[18:04:46.173]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:46.173]                   ...future.conditions[[length(...future.conditions) + 
[18:04:46.173]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:46.173]                   if (TRUE && !signal) {
[18:04:46.173]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:46.173]                     {
[18:04:46.173]                       inherits <- base::inherits
[18:04:46.173]                       invokeRestart <- base::invokeRestart
[18:04:46.173]                       is.null <- base::is.null
[18:04:46.173]                       muffled <- FALSE
[18:04:46.173]                       if (inherits(cond, "message")) {
[18:04:46.173]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:46.173]                         if (muffled) 
[18:04:46.173]                           invokeRestart("muffleMessage")
[18:04:46.173]                       }
[18:04:46.173]                       else if (inherits(cond, "warning")) {
[18:04:46.173]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:46.173]                         if (muffled) 
[18:04:46.173]                           invokeRestart("muffleWarning")
[18:04:46.173]                       }
[18:04:46.173]                       else if (inherits(cond, "condition")) {
[18:04:46.173]                         if (!is.null(pattern)) {
[18:04:46.173]                           computeRestarts <- base::computeRestarts
[18:04:46.173]                           grepl <- base::grepl
[18:04:46.173]                           restarts <- computeRestarts(cond)
[18:04:46.173]                           for (restart in restarts) {
[18:04:46.173]                             name <- restart$name
[18:04:46.173]                             if (is.null(name)) 
[18:04:46.173]                               next
[18:04:46.173]                             if (!grepl(pattern, name)) 
[18:04:46.173]                               next
[18:04:46.173]                             invokeRestart(restart)
[18:04:46.173]                             muffled <- TRUE
[18:04:46.173]                             break
[18:04:46.173]                           }
[18:04:46.173]                         }
[18:04:46.173]                       }
[18:04:46.173]                       invisible(muffled)
[18:04:46.173]                     }
[18:04:46.173]                     muffleCondition(cond, pattern = "^muffle")
[18:04:46.173]                   }
[18:04:46.173]                 }
[18:04:46.173]                 else {
[18:04:46.173]                   if (TRUE) {
[18:04:46.173]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:46.173]                     {
[18:04:46.173]                       inherits <- base::inherits
[18:04:46.173]                       invokeRestart <- base::invokeRestart
[18:04:46.173]                       is.null <- base::is.null
[18:04:46.173]                       muffled <- FALSE
[18:04:46.173]                       if (inherits(cond, "message")) {
[18:04:46.173]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:46.173]                         if (muffled) 
[18:04:46.173]                           invokeRestart("muffleMessage")
[18:04:46.173]                       }
[18:04:46.173]                       else if (inherits(cond, "warning")) {
[18:04:46.173]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:46.173]                         if (muffled) 
[18:04:46.173]                           invokeRestart("muffleWarning")
[18:04:46.173]                       }
[18:04:46.173]                       else if (inherits(cond, "condition")) {
[18:04:46.173]                         if (!is.null(pattern)) {
[18:04:46.173]                           computeRestarts <- base::computeRestarts
[18:04:46.173]                           grepl <- base::grepl
[18:04:46.173]                           restarts <- computeRestarts(cond)
[18:04:46.173]                           for (restart in restarts) {
[18:04:46.173]                             name <- restart$name
[18:04:46.173]                             if (is.null(name)) 
[18:04:46.173]                               next
[18:04:46.173]                             if (!grepl(pattern, name)) 
[18:04:46.173]                               next
[18:04:46.173]                             invokeRestart(restart)
[18:04:46.173]                             muffled <- TRUE
[18:04:46.173]                             break
[18:04:46.173]                           }
[18:04:46.173]                         }
[18:04:46.173]                       }
[18:04:46.173]                       invisible(muffled)
[18:04:46.173]                     }
[18:04:46.173]                     muffleCondition(cond, pattern = "^muffle")
[18:04:46.173]                   }
[18:04:46.173]                 }
[18:04:46.173]             }
[18:04:46.173]         }))
[18:04:46.173]     }, error = function(ex) {
[18:04:46.173]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:46.173]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:46.173]                 ...future.rng), started = ...future.startTime, 
[18:04:46.173]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:46.173]             version = "1.8"), class = "FutureResult")
[18:04:46.173]     }, finally = {
[18:04:46.173]         if (!identical(...future.workdir, getwd())) 
[18:04:46.173]             setwd(...future.workdir)
[18:04:46.173]         {
[18:04:46.173]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:46.173]                 ...future.oldOptions$nwarnings <- NULL
[18:04:46.173]             }
[18:04:46.173]             base::options(...future.oldOptions)
[18:04:46.173]             if (.Platform$OS.type == "windows") {
[18:04:46.173]                 old_names <- names(...future.oldEnvVars)
[18:04:46.173]                 envs <- base::Sys.getenv()
[18:04:46.173]                 names <- names(envs)
[18:04:46.173]                 common <- intersect(names, old_names)
[18:04:46.173]                 added <- setdiff(names, old_names)
[18:04:46.173]                 removed <- setdiff(old_names, names)
[18:04:46.173]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:46.173]                   envs[common]]
[18:04:46.173]                 NAMES <- toupper(changed)
[18:04:46.173]                 args <- list()
[18:04:46.173]                 for (kk in seq_along(NAMES)) {
[18:04:46.173]                   name <- changed[[kk]]
[18:04:46.173]                   NAME <- NAMES[[kk]]
[18:04:46.173]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:46.173]                     next
[18:04:46.173]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:46.173]                 }
[18:04:46.173]                 NAMES <- toupper(added)
[18:04:46.173]                 for (kk in seq_along(NAMES)) {
[18:04:46.173]                   name <- added[[kk]]
[18:04:46.173]                   NAME <- NAMES[[kk]]
[18:04:46.173]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:46.173]                     next
[18:04:46.173]                   args[[name]] <- ""
[18:04:46.173]                 }
[18:04:46.173]                 NAMES <- toupper(removed)
[18:04:46.173]                 for (kk in seq_along(NAMES)) {
[18:04:46.173]                   name <- removed[[kk]]
[18:04:46.173]                   NAME <- NAMES[[kk]]
[18:04:46.173]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:46.173]                     next
[18:04:46.173]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:46.173]                 }
[18:04:46.173]                 if (length(args) > 0) 
[18:04:46.173]                   base::do.call(base::Sys.setenv, args = args)
[18:04:46.173]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:46.173]             }
[18:04:46.173]             else {
[18:04:46.173]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:46.173]             }
[18:04:46.173]             {
[18:04:46.173]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:46.173]                   0L) {
[18:04:46.173]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:46.173]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:46.173]                   base::options(opts)
[18:04:46.173]                 }
[18:04:46.173]                 {
[18:04:46.173]                   {
[18:04:46.173]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:46.173]                     NULL
[18:04:46.173]                   }
[18:04:46.173]                   options(future.plan = NULL)
[18:04:46.173]                   if (is.na(NA_character_)) 
[18:04:46.173]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:46.173]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:46.173]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:46.173]                     .init = FALSE)
[18:04:46.173]                 }
[18:04:46.173]             }
[18:04:46.173]         }
[18:04:46.173]     })
[18:04:46.173]     if (TRUE) {
[18:04:46.173]         base::sink(type = "output", split = FALSE)
[18:04:46.173]         if (TRUE) {
[18:04:46.173]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:46.173]         }
[18:04:46.173]         else {
[18:04:46.173]             ...future.result["stdout"] <- base::list(NULL)
[18:04:46.173]         }
[18:04:46.173]         base::close(...future.stdout)
[18:04:46.173]         ...future.stdout <- NULL
[18:04:46.173]     }
[18:04:46.173]     ...future.result$conditions <- ...future.conditions
[18:04:46.173]     ...future.result$finished <- base::Sys.time()
[18:04:46.173]     ...future.result
[18:04:46.173] }
[18:04:46.180] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[18:04:46.180] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[18:04:46.181] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[18:04:46.181] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[18:04:46.183] MultisessionFuture started
[18:04:46.183] - Launch lazy future ... done
[18:04:46.183] run() for ‘MultisessionFuture’ ... done
[18:04:46.183] result() for ClusterFuture ...
[18:04:46.184] receiveMessageFromWorker() for ClusterFuture ...
[18:04:46.185] - Validating connection of MultisessionFuture
[18:04:46.226] - received message: FutureResult
[18:04:46.226] - Received FutureResult
[18:04:46.227] - Erased future from FutureRegistry
[18:04:46.227] result() for ClusterFuture ...
[18:04:46.227] - result already collected: FutureResult
[18:04:46.228] result() for ClusterFuture ... done
[18:04:46.228] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:46.228] result() for ClusterFuture ... done
[18:04:46.228] result() for ClusterFuture ...
[18:04:46.229] - result already collected: FutureResult
[18:04:46.229] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x586e7fd4e410>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[18:04:46.230] getGlobalsAndPackages() ...
[18:04:46.230] Searching for globals...
[18:04:46.236] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[18:04:46.237] Searching for globals ... DONE
[18:04:46.237] Resolving globals: FALSE
[18:04:46.238] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[18:04:46.239] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[18:04:46.240] - globals: [1] ‘my_fcn’
[18:04:46.240] 
[18:04:46.240] getGlobalsAndPackages() ... DONE
[18:04:46.241] run() for ‘Future’ ...
[18:04:46.241] - state: ‘created’
[18:04:46.242] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:46.268] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:46.268] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:46.268]   - Field: ‘node’
[18:04:46.269]   - Field: ‘label’
[18:04:46.269]   - Field: ‘local’
[18:04:46.269]   - Field: ‘owner’
[18:04:46.269]   - Field: ‘envir’
[18:04:46.270]   - Field: ‘workers’
[18:04:46.270]   - Field: ‘packages’
[18:04:46.270]   - Field: ‘gc’
[18:04:46.270]   - Field: ‘conditions’
[18:04:46.271]   - Field: ‘persistent’
[18:04:46.271]   - Field: ‘expr’
[18:04:46.271]   - Field: ‘uuid’
[18:04:46.271]   - Field: ‘seed’
[18:04:46.272]   - Field: ‘version’
[18:04:46.272]   - Field: ‘result’
[18:04:46.272]   - Field: ‘asynchronous’
[18:04:46.272]   - Field: ‘calls’
[18:04:46.273]   - Field: ‘globals’
[18:04:46.273]   - Field: ‘stdout’
[18:04:46.273]   - Field: ‘earlySignal’
[18:04:46.273]   - Field: ‘lazy’
[18:04:46.274]   - Field: ‘state’
[18:04:46.274] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:46.274] - Launch lazy future ...
[18:04:46.275] Packages needed by the future expression (n = 0): <none>
[18:04:46.275] Packages needed by future strategies (n = 0): <none>
[18:04:46.276] {
[18:04:46.276]     {
[18:04:46.276]         {
[18:04:46.276]             ...future.startTime <- base::Sys.time()
[18:04:46.276]             {
[18:04:46.276]                 {
[18:04:46.276]                   {
[18:04:46.276]                     {
[18:04:46.276]                       base::local({
[18:04:46.276]                         has_future <- base::requireNamespace("future", 
[18:04:46.276]                           quietly = TRUE)
[18:04:46.276]                         if (has_future) {
[18:04:46.276]                           ns <- base::getNamespace("future")
[18:04:46.276]                           version <- ns[[".package"]][["version"]]
[18:04:46.276]                           if (is.null(version)) 
[18:04:46.276]                             version <- utils::packageVersion("future")
[18:04:46.276]                         }
[18:04:46.276]                         else {
[18:04:46.276]                           version <- NULL
[18:04:46.276]                         }
[18:04:46.276]                         if (!has_future || version < "1.8.0") {
[18:04:46.276]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:46.276]                             "", base::R.version$version.string), 
[18:04:46.276]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:46.276]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:46.276]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:46.276]                               "release", "version")], collapse = " "), 
[18:04:46.276]                             hostname = base::Sys.info()[["nodename"]])
[18:04:46.276]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:46.276]                             info)
[18:04:46.276]                           info <- base::paste(info, collapse = "; ")
[18:04:46.276]                           if (!has_future) {
[18:04:46.276]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:46.276]                               info)
[18:04:46.276]                           }
[18:04:46.276]                           else {
[18:04:46.276]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:46.276]                               info, version)
[18:04:46.276]                           }
[18:04:46.276]                           base::stop(msg)
[18:04:46.276]                         }
[18:04:46.276]                       })
[18:04:46.276]                     }
[18:04:46.276]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:46.276]                     base::options(mc.cores = 1L)
[18:04:46.276]                   }
[18:04:46.276]                   ...future.strategy.old <- future::plan("list")
[18:04:46.276]                   options(future.plan = NULL)
[18:04:46.276]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:46.276]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:46.276]                 }
[18:04:46.276]                 ...future.workdir <- getwd()
[18:04:46.276]             }
[18:04:46.276]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:46.276]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:46.276]         }
[18:04:46.276]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:46.276]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:46.276]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:46.276]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:46.276]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:46.276]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:46.276]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:46.276]             base::names(...future.oldOptions))
[18:04:46.276]     }
[18:04:46.276]     if (FALSE) {
[18:04:46.276]     }
[18:04:46.276]     else {
[18:04:46.276]         if (TRUE) {
[18:04:46.276]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:46.276]                 open = "w")
[18:04:46.276]         }
[18:04:46.276]         else {
[18:04:46.276]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:46.276]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:46.276]         }
[18:04:46.276]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:46.276]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:46.276]             base::sink(type = "output", split = FALSE)
[18:04:46.276]             base::close(...future.stdout)
[18:04:46.276]         }, add = TRUE)
[18:04:46.276]     }
[18:04:46.276]     ...future.frame <- base::sys.nframe()
[18:04:46.276]     ...future.conditions <- base::list()
[18:04:46.276]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:46.276]     if (FALSE) {
[18:04:46.276]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:46.276]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:46.276]     }
[18:04:46.276]     ...future.result <- base::tryCatch({
[18:04:46.276]         base::withCallingHandlers({
[18:04:46.276]             ...future.value <- base::withVisible(base::local({
[18:04:46.276]                 ...future.makeSendCondition <- base::local({
[18:04:46.276]                   sendCondition <- NULL
[18:04:46.276]                   function(frame = 1L) {
[18:04:46.276]                     if (is.function(sendCondition)) 
[18:04:46.276]                       return(sendCondition)
[18:04:46.276]                     ns <- getNamespace("parallel")
[18:04:46.276]                     if (exists("sendData", mode = "function", 
[18:04:46.276]                       envir = ns)) {
[18:04:46.276]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:46.276]                         envir = ns)
[18:04:46.276]                       envir <- sys.frame(frame)
[18:04:46.276]                       master <- NULL
[18:04:46.276]                       while (!identical(envir, .GlobalEnv) && 
[18:04:46.276]                         !identical(envir, emptyenv())) {
[18:04:46.276]                         if (exists("master", mode = "list", envir = envir, 
[18:04:46.276]                           inherits = FALSE)) {
[18:04:46.276]                           master <- get("master", mode = "list", 
[18:04:46.276]                             envir = envir, inherits = FALSE)
[18:04:46.276]                           if (inherits(master, c("SOCKnode", 
[18:04:46.276]                             "SOCK0node"))) {
[18:04:46.276]                             sendCondition <<- function(cond) {
[18:04:46.276]                               data <- list(type = "VALUE", value = cond, 
[18:04:46.276]                                 success = TRUE)
[18:04:46.276]                               parallel_sendData(master, data)
[18:04:46.276]                             }
[18:04:46.276]                             return(sendCondition)
[18:04:46.276]                           }
[18:04:46.276]                         }
[18:04:46.276]                         frame <- frame + 1L
[18:04:46.276]                         envir <- sys.frame(frame)
[18:04:46.276]                       }
[18:04:46.276]                     }
[18:04:46.276]                     sendCondition <<- function(cond) NULL
[18:04:46.276]                   }
[18:04:46.276]                 })
[18:04:46.276]                 withCallingHandlers({
[18:04:46.276]                   {
[18:04:46.276]                     my_fcn(3)
[18:04:46.276]                   }
[18:04:46.276]                 }, immediateCondition = function(cond) {
[18:04:46.276]                   sendCondition <- ...future.makeSendCondition()
[18:04:46.276]                   sendCondition(cond)
[18:04:46.276]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:46.276]                   {
[18:04:46.276]                     inherits <- base::inherits
[18:04:46.276]                     invokeRestart <- base::invokeRestart
[18:04:46.276]                     is.null <- base::is.null
[18:04:46.276]                     muffled <- FALSE
[18:04:46.276]                     if (inherits(cond, "message")) {
[18:04:46.276]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:46.276]                       if (muffled) 
[18:04:46.276]                         invokeRestart("muffleMessage")
[18:04:46.276]                     }
[18:04:46.276]                     else if (inherits(cond, "warning")) {
[18:04:46.276]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:46.276]                       if (muffled) 
[18:04:46.276]                         invokeRestart("muffleWarning")
[18:04:46.276]                     }
[18:04:46.276]                     else if (inherits(cond, "condition")) {
[18:04:46.276]                       if (!is.null(pattern)) {
[18:04:46.276]                         computeRestarts <- base::computeRestarts
[18:04:46.276]                         grepl <- base::grepl
[18:04:46.276]                         restarts <- computeRestarts(cond)
[18:04:46.276]                         for (restart in restarts) {
[18:04:46.276]                           name <- restart$name
[18:04:46.276]                           if (is.null(name)) 
[18:04:46.276]                             next
[18:04:46.276]                           if (!grepl(pattern, name)) 
[18:04:46.276]                             next
[18:04:46.276]                           invokeRestart(restart)
[18:04:46.276]                           muffled <- TRUE
[18:04:46.276]                           break
[18:04:46.276]                         }
[18:04:46.276]                       }
[18:04:46.276]                     }
[18:04:46.276]                     invisible(muffled)
[18:04:46.276]                   }
[18:04:46.276]                   muffleCondition(cond)
[18:04:46.276]                 })
[18:04:46.276]             }))
[18:04:46.276]             future::FutureResult(value = ...future.value$value, 
[18:04:46.276]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:46.276]                   ...future.rng), globalenv = if (FALSE) 
[18:04:46.276]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:46.276]                     ...future.globalenv.names))
[18:04:46.276]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:46.276]         }, condition = base::local({
[18:04:46.276]             c <- base::c
[18:04:46.276]             inherits <- base::inherits
[18:04:46.276]             invokeRestart <- base::invokeRestart
[18:04:46.276]             length <- base::length
[18:04:46.276]             list <- base::list
[18:04:46.276]             seq.int <- base::seq.int
[18:04:46.276]             signalCondition <- base::signalCondition
[18:04:46.276]             sys.calls <- base::sys.calls
[18:04:46.276]             `[[` <- base::`[[`
[18:04:46.276]             `+` <- base::`+`
[18:04:46.276]             `<<-` <- base::`<<-`
[18:04:46.276]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:46.276]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:46.276]                   3L)]
[18:04:46.276]             }
[18:04:46.276]             function(cond) {
[18:04:46.276]                 is_error <- inherits(cond, "error")
[18:04:46.276]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:46.276]                   NULL)
[18:04:46.276]                 if (is_error) {
[18:04:46.276]                   sessionInformation <- function() {
[18:04:46.276]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:46.276]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:46.276]                       search = base::search(), system = base::Sys.info())
[18:04:46.276]                   }
[18:04:46.276]                   ...future.conditions[[length(...future.conditions) + 
[18:04:46.276]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:46.276]                     cond$call), session = sessionInformation(), 
[18:04:46.276]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:46.276]                   signalCondition(cond)
[18:04:46.276]                 }
[18:04:46.276]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:46.276]                 "immediateCondition"))) {
[18:04:46.276]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:46.276]                   ...future.conditions[[length(...future.conditions) + 
[18:04:46.276]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:46.276]                   if (TRUE && !signal) {
[18:04:46.276]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:46.276]                     {
[18:04:46.276]                       inherits <- base::inherits
[18:04:46.276]                       invokeRestart <- base::invokeRestart
[18:04:46.276]                       is.null <- base::is.null
[18:04:46.276]                       muffled <- FALSE
[18:04:46.276]                       if (inherits(cond, "message")) {
[18:04:46.276]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:46.276]                         if (muffled) 
[18:04:46.276]                           invokeRestart("muffleMessage")
[18:04:46.276]                       }
[18:04:46.276]                       else if (inherits(cond, "warning")) {
[18:04:46.276]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:46.276]                         if (muffled) 
[18:04:46.276]                           invokeRestart("muffleWarning")
[18:04:46.276]                       }
[18:04:46.276]                       else if (inherits(cond, "condition")) {
[18:04:46.276]                         if (!is.null(pattern)) {
[18:04:46.276]                           computeRestarts <- base::computeRestarts
[18:04:46.276]                           grepl <- base::grepl
[18:04:46.276]                           restarts <- computeRestarts(cond)
[18:04:46.276]                           for (restart in restarts) {
[18:04:46.276]                             name <- restart$name
[18:04:46.276]                             if (is.null(name)) 
[18:04:46.276]                               next
[18:04:46.276]                             if (!grepl(pattern, name)) 
[18:04:46.276]                               next
[18:04:46.276]                             invokeRestart(restart)
[18:04:46.276]                             muffled <- TRUE
[18:04:46.276]                             break
[18:04:46.276]                           }
[18:04:46.276]                         }
[18:04:46.276]                       }
[18:04:46.276]                       invisible(muffled)
[18:04:46.276]                     }
[18:04:46.276]                     muffleCondition(cond, pattern = "^muffle")
[18:04:46.276]                   }
[18:04:46.276]                 }
[18:04:46.276]                 else {
[18:04:46.276]                   if (TRUE) {
[18:04:46.276]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:46.276]                     {
[18:04:46.276]                       inherits <- base::inherits
[18:04:46.276]                       invokeRestart <- base::invokeRestart
[18:04:46.276]                       is.null <- base::is.null
[18:04:46.276]                       muffled <- FALSE
[18:04:46.276]                       if (inherits(cond, "message")) {
[18:04:46.276]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:46.276]                         if (muffled) 
[18:04:46.276]                           invokeRestart("muffleMessage")
[18:04:46.276]                       }
[18:04:46.276]                       else if (inherits(cond, "warning")) {
[18:04:46.276]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:46.276]                         if (muffled) 
[18:04:46.276]                           invokeRestart("muffleWarning")
[18:04:46.276]                       }
[18:04:46.276]                       else if (inherits(cond, "condition")) {
[18:04:46.276]                         if (!is.null(pattern)) {
[18:04:46.276]                           computeRestarts <- base::computeRestarts
[18:04:46.276]                           grepl <- base::grepl
[18:04:46.276]                           restarts <- computeRestarts(cond)
[18:04:46.276]                           for (restart in restarts) {
[18:04:46.276]                             name <- restart$name
[18:04:46.276]                             if (is.null(name)) 
[18:04:46.276]                               next
[18:04:46.276]                             if (!grepl(pattern, name)) 
[18:04:46.276]                               next
[18:04:46.276]                             invokeRestart(restart)
[18:04:46.276]                             muffled <- TRUE
[18:04:46.276]                             break
[18:04:46.276]                           }
[18:04:46.276]                         }
[18:04:46.276]                       }
[18:04:46.276]                       invisible(muffled)
[18:04:46.276]                     }
[18:04:46.276]                     muffleCondition(cond, pattern = "^muffle")
[18:04:46.276]                   }
[18:04:46.276]                 }
[18:04:46.276]             }
[18:04:46.276]         }))
[18:04:46.276]     }, error = function(ex) {
[18:04:46.276]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:46.276]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:46.276]                 ...future.rng), started = ...future.startTime, 
[18:04:46.276]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:46.276]             version = "1.8"), class = "FutureResult")
[18:04:46.276]     }, finally = {
[18:04:46.276]         if (!identical(...future.workdir, getwd())) 
[18:04:46.276]             setwd(...future.workdir)
[18:04:46.276]         {
[18:04:46.276]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:46.276]                 ...future.oldOptions$nwarnings <- NULL
[18:04:46.276]             }
[18:04:46.276]             base::options(...future.oldOptions)
[18:04:46.276]             if (.Platform$OS.type == "windows") {
[18:04:46.276]                 old_names <- names(...future.oldEnvVars)
[18:04:46.276]                 envs <- base::Sys.getenv()
[18:04:46.276]                 names <- names(envs)
[18:04:46.276]                 common <- intersect(names, old_names)
[18:04:46.276]                 added <- setdiff(names, old_names)
[18:04:46.276]                 removed <- setdiff(old_names, names)
[18:04:46.276]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:46.276]                   envs[common]]
[18:04:46.276]                 NAMES <- toupper(changed)
[18:04:46.276]                 args <- list()
[18:04:46.276]                 for (kk in seq_along(NAMES)) {
[18:04:46.276]                   name <- changed[[kk]]
[18:04:46.276]                   NAME <- NAMES[[kk]]
[18:04:46.276]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:46.276]                     next
[18:04:46.276]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:46.276]                 }
[18:04:46.276]                 NAMES <- toupper(added)
[18:04:46.276]                 for (kk in seq_along(NAMES)) {
[18:04:46.276]                   name <- added[[kk]]
[18:04:46.276]                   NAME <- NAMES[[kk]]
[18:04:46.276]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:46.276]                     next
[18:04:46.276]                   args[[name]] <- ""
[18:04:46.276]                 }
[18:04:46.276]                 NAMES <- toupper(removed)
[18:04:46.276]                 for (kk in seq_along(NAMES)) {
[18:04:46.276]                   name <- removed[[kk]]
[18:04:46.276]                   NAME <- NAMES[[kk]]
[18:04:46.276]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:46.276]                     next
[18:04:46.276]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:46.276]                 }
[18:04:46.276]                 if (length(args) > 0) 
[18:04:46.276]                   base::do.call(base::Sys.setenv, args = args)
[18:04:46.276]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:46.276]             }
[18:04:46.276]             else {
[18:04:46.276]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:46.276]             }
[18:04:46.276]             {
[18:04:46.276]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:46.276]                   0L) {
[18:04:46.276]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:46.276]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:46.276]                   base::options(opts)
[18:04:46.276]                 }
[18:04:46.276]                 {
[18:04:46.276]                   {
[18:04:46.276]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:46.276]                     NULL
[18:04:46.276]                   }
[18:04:46.276]                   options(future.plan = NULL)
[18:04:46.276]                   if (is.na(NA_character_)) 
[18:04:46.276]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:46.276]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:46.276]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:46.276]                     .init = FALSE)
[18:04:46.276]                 }
[18:04:46.276]             }
[18:04:46.276]         }
[18:04:46.276]     })
[18:04:46.276]     if (TRUE) {
[18:04:46.276]         base::sink(type = "output", split = FALSE)
[18:04:46.276]         if (TRUE) {
[18:04:46.276]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:46.276]         }
[18:04:46.276]         else {
[18:04:46.276]             ...future.result["stdout"] <- base::list(NULL)
[18:04:46.276]         }
[18:04:46.276]         base::close(...future.stdout)
[18:04:46.276]         ...future.stdout <- NULL
[18:04:46.276]     }
[18:04:46.276]     ...future.result$conditions <- ...future.conditions
[18:04:46.276]     ...future.result$finished <- base::Sys.time()
[18:04:46.276]     ...future.result
[18:04:46.276] }
[18:04:46.281] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[18:04:46.282] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[18:04:46.283] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[18:04:46.283] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[18:04:46.284] MultisessionFuture started
[18:04:46.284] - Launch lazy future ... done
[18:04:46.284] run() for ‘MultisessionFuture’ ... done
[18:04:46.285] result() for ClusterFuture ...
[18:04:46.285] receiveMessageFromWorker() for ClusterFuture ...
[18:04:46.285] - Validating connection of MultisessionFuture
[18:04:46.334] - received message: FutureResult
[18:04:46.334] - Received FutureResult
[18:04:46.335] - Erased future from FutureRegistry
[18:04:46.335] result() for ClusterFuture ...
[18:04:46.335] - result already collected: FutureResult
[18:04:46.335] result() for ClusterFuture ... done
[18:04:46.336] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:46.336] result() for ClusterFuture ... done
[18:04:46.337] result() for ClusterFuture ...
[18:04:46.337] - result already collected: FutureResult
[18:04:46.337] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[18:04:46.339] plan(): Setting new future strategy stack:
[18:04:46.339] List of future strategies:
[18:04:46.339] 1. FutureStrategy:
[18:04:46.339]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:46.339]    - tweaked: FALSE
[18:04:46.339]    - call: future::plan(oplan)
[18:04:46.344] plan(): nbrOfWorkers() = 1
> 
