
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:47:00.918] plan(): Setting new future strategy stack:
[17:47:00.918] List of future strategies:
[17:47:00.918] 1. sequential:
[17:47:00.918]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:00.918]    - tweaked: FALSE
[17:47:00.918]    - call: future::plan("sequential")
[17:47:00.929] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[17:47:00.964] plan(): Setting new future strategy stack:
[17:47:00.964] List of future strategies:
[17:47:00.964] 1. sequential:
[17:47:00.964]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:00.964]    - tweaked: FALSE
[17:47:00.964]    - call: plan(strategy)
[17:47:00.977] plan(): nbrOfWorkers() = 1
[17:47:00.978] getGlobalsAndPackages() ...
[17:47:00.978] Searching for globals...
[17:47:00.984] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:47:00.984] Searching for globals ... DONE
[17:47:00.984] Resolving globals: FALSE
[17:47:00.985] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:47:00.985] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:47:00.985] - globals: [1] ‘my_fcn’
[17:47:00.985] 
[17:47:00.986] getGlobalsAndPackages() ... DONE
[17:47:00.986] run() for ‘Future’ ...
[17:47:00.987] - state: ‘created’
[17:47:00.987] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:47:00.987] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:00.987] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:47:00.987]   - Field: ‘label’
[17:47:00.987]   - Field: ‘local’
[17:47:00.988]   - Field: ‘owner’
[17:47:00.988]   - Field: ‘envir’
[17:47:00.988]   - Field: ‘packages’
[17:47:00.988]   - Field: ‘gc’
[17:47:00.988]   - Field: ‘conditions’
[17:47:00.988]   - Field: ‘expr’
[17:47:00.988]   - Field: ‘uuid’
[17:47:00.988]   - Field: ‘seed’
[17:47:00.988]   - Field: ‘version’
[17:47:00.988]   - Field: ‘result’
[17:47:00.988]   - Field: ‘asynchronous’
[17:47:00.989]   - Field: ‘calls’
[17:47:00.989]   - Field: ‘globals’
[17:47:00.989]   - Field: ‘stdout’
[17:47:00.989]   - Field: ‘earlySignal’
[17:47:00.989]   - Field: ‘lazy’
[17:47:00.989]   - Field: ‘state’
[17:47:00.989] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:47:00.989] - Launch lazy future ...
[17:47:00.990] Packages needed by the future expression (n = 0): <none>
[17:47:00.990] Packages needed by future strategies (n = 0): <none>
[17:47:00.991] {
[17:47:00.991]     {
[17:47:00.991]         {
[17:47:00.991]             ...future.startTime <- base::Sys.time()
[17:47:00.991]             {
[17:47:00.991]                 {
[17:47:00.991]                   {
[17:47:00.991]                     base::local({
[17:47:00.991]                       has_future <- base::requireNamespace("future", 
[17:47:00.991]                         quietly = TRUE)
[17:47:00.991]                       if (has_future) {
[17:47:00.991]                         ns <- base::getNamespace("future")
[17:47:00.991]                         version <- ns[[".package"]][["version"]]
[17:47:00.991]                         if (is.null(version)) 
[17:47:00.991]                           version <- utils::packageVersion("future")
[17:47:00.991]                       }
[17:47:00.991]                       else {
[17:47:00.991]                         version <- NULL
[17:47:00.991]                       }
[17:47:00.991]                       if (!has_future || version < "1.8.0") {
[17:47:00.991]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:00.991]                           "", base::R.version$version.string), 
[17:47:00.991]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:00.991]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:00.991]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:00.991]                             "release", "version")], collapse = " "), 
[17:47:00.991]                           hostname = base::Sys.info()[["nodename"]])
[17:47:00.991]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:00.991]                           info)
[17:47:00.991]                         info <- base::paste(info, collapse = "; ")
[17:47:00.991]                         if (!has_future) {
[17:47:00.991]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:00.991]                             info)
[17:47:00.991]                         }
[17:47:00.991]                         else {
[17:47:00.991]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:00.991]                             info, version)
[17:47:00.991]                         }
[17:47:00.991]                         base::stop(msg)
[17:47:00.991]                       }
[17:47:00.991]                     })
[17:47:00.991]                   }
[17:47:00.991]                   ...future.strategy.old <- future::plan("list")
[17:47:00.991]                   options(future.plan = NULL)
[17:47:00.991]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.991]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:00.991]                 }
[17:47:00.991]                 ...future.workdir <- getwd()
[17:47:00.991]             }
[17:47:00.991]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:00.991]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:00.991]         }
[17:47:00.991]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:00.991]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:00.991]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:00.991]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:00.991]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:00.991]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:00.991]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:00.991]             base::names(...future.oldOptions))
[17:47:00.991]     }
[17:47:00.991]     if (FALSE) {
[17:47:00.991]     }
[17:47:00.991]     else {
[17:47:00.991]         if (TRUE) {
[17:47:00.991]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:00.991]                 open = "w")
[17:47:00.991]         }
[17:47:00.991]         else {
[17:47:00.991]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:00.991]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:00.991]         }
[17:47:00.991]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:00.991]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:00.991]             base::sink(type = "output", split = FALSE)
[17:47:00.991]             base::close(...future.stdout)
[17:47:00.991]         }, add = TRUE)
[17:47:00.991]     }
[17:47:00.991]     ...future.frame <- base::sys.nframe()
[17:47:00.991]     ...future.conditions <- base::list()
[17:47:00.991]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:00.991]     if (FALSE) {
[17:47:00.991]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:00.991]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:00.991]     }
[17:47:00.991]     ...future.result <- base::tryCatch({
[17:47:00.991]         base::withCallingHandlers({
[17:47:00.991]             ...future.value <- base::withVisible(base::local({
[17:47:00.991]                 my_fcn
[17:47:00.991]             }))
[17:47:00.991]             future::FutureResult(value = ...future.value$value, 
[17:47:00.991]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.991]                   ...future.rng), globalenv = if (FALSE) 
[17:47:00.991]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:00.991]                     ...future.globalenv.names))
[17:47:00.991]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:00.991]         }, condition = base::local({
[17:47:00.991]             c <- base::c
[17:47:00.991]             inherits <- base::inherits
[17:47:00.991]             invokeRestart <- base::invokeRestart
[17:47:00.991]             length <- base::length
[17:47:00.991]             list <- base::list
[17:47:00.991]             seq.int <- base::seq.int
[17:47:00.991]             signalCondition <- base::signalCondition
[17:47:00.991]             sys.calls <- base::sys.calls
[17:47:00.991]             `[[` <- base::`[[`
[17:47:00.991]             `+` <- base::`+`
[17:47:00.991]             `<<-` <- base::`<<-`
[17:47:00.991]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:00.991]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:00.991]                   3L)]
[17:47:00.991]             }
[17:47:00.991]             function(cond) {
[17:47:00.991]                 is_error <- inherits(cond, "error")
[17:47:00.991]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:00.991]                   NULL)
[17:47:00.991]                 if (is_error) {
[17:47:00.991]                   sessionInformation <- function() {
[17:47:00.991]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:00.991]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:00.991]                       search = base::search(), system = base::Sys.info())
[17:47:00.991]                   }
[17:47:00.991]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.991]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:00.991]                     cond$call), session = sessionInformation(), 
[17:47:00.991]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:00.991]                   signalCondition(cond)
[17:47:00.991]                 }
[17:47:00.991]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:00.991]                 "immediateCondition"))) {
[17:47:00.991]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:00.991]                   ...future.conditions[[length(...future.conditions) + 
[17:47:00.991]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:00.991]                   if (TRUE && !signal) {
[17:47:00.991]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.991]                     {
[17:47:00.991]                       inherits <- base::inherits
[17:47:00.991]                       invokeRestart <- base::invokeRestart
[17:47:00.991]                       is.null <- base::is.null
[17:47:00.991]                       muffled <- FALSE
[17:47:00.991]                       if (inherits(cond, "message")) {
[17:47:00.991]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.991]                         if (muffled) 
[17:47:00.991]                           invokeRestart("muffleMessage")
[17:47:00.991]                       }
[17:47:00.991]                       else if (inherits(cond, "warning")) {
[17:47:00.991]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.991]                         if (muffled) 
[17:47:00.991]                           invokeRestart("muffleWarning")
[17:47:00.991]                       }
[17:47:00.991]                       else if (inherits(cond, "condition")) {
[17:47:00.991]                         if (!is.null(pattern)) {
[17:47:00.991]                           computeRestarts <- base::computeRestarts
[17:47:00.991]                           grepl <- base::grepl
[17:47:00.991]                           restarts <- computeRestarts(cond)
[17:47:00.991]                           for (restart in restarts) {
[17:47:00.991]                             name <- restart$name
[17:47:00.991]                             if (is.null(name)) 
[17:47:00.991]                               next
[17:47:00.991]                             if (!grepl(pattern, name)) 
[17:47:00.991]                               next
[17:47:00.991]                             invokeRestart(restart)
[17:47:00.991]                             muffled <- TRUE
[17:47:00.991]                             break
[17:47:00.991]                           }
[17:47:00.991]                         }
[17:47:00.991]                       }
[17:47:00.991]                       invisible(muffled)
[17:47:00.991]                     }
[17:47:00.991]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.991]                   }
[17:47:00.991]                 }
[17:47:00.991]                 else {
[17:47:00.991]                   if (TRUE) {
[17:47:00.991]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:00.991]                     {
[17:47:00.991]                       inherits <- base::inherits
[17:47:00.991]                       invokeRestart <- base::invokeRestart
[17:47:00.991]                       is.null <- base::is.null
[17:47:00.991]                       muffled <- FALSE
[17:47:00.991]                       if (inherits(cond, "message")) {
[17:47:00.991]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:00.991]                         if (muffled) 
[17:47:00.991]                           invokeRestart("muffleMessage")
[17:47:00.991]                       }
[17:47:00.991]                       else if (inherits(cond, "warning")) {
[17:47:00.991]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:00.991]                         if (muffled) 
[17:47:00.991]                           invokeRestart("muffleWarning")
[17:47:00.991]                       }
[17:47:00.991]                       else if (inherits(cond, "condition")) {
[17:47:00.991]                         if (!is.null(pattern)) {
[17:47:00.991]                           computeRestarts <- base::computeRestarts
[17:47:00.991]                           grepl <- base::grepl
[17:47:00.991]                           restarts <- computeRestarts(cond)
[17:47:00.991]                           for (restart in restarts) {
[17:47:00.991]                             name <- restart$name
[17:47:00.991]                             if (is.null(name)) 
[17:47:00.991]                               next
[17:47:00.991]                             if (!grepl(pattern, name)) 
[17:47:00.991]                               next
[17:47:00.991]                             invokeRestart(restart)
[17:47:00.991]                             muffled <- TRUE
[17:47:00.991]                             break
[17:47:00.991]                           }
[17:47:00.991]                         }
[17:47:00.991]                       }
[17:47:00.991]                       invisible(muffled)
[17:47:00.991]                     }
[17:47:00.991]                     muffleCondition(cond, pattern = "^muffle")
[17:47:00.991]                   }
[17:47:00.991]                 }
[17:47:00.991]             }
[17:47:00.991]         }))
[17:47:00.991]     }, error = function(ex) {
[17:47:00.991]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:00.991]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:00.991]                 ...future.rng), started = ...future.startTime, 
[17:47:00.991]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:00.991]             version = "1.8"), class = "FutureResult")
[17:47:00.991]     }, finally = {
[17:47:00.991]         if (!identical(...future.workdir, getwd())) 
[17:47:00.991]             setwd(...future.workdir)
[17:47:00.991]         {
[17:47:00.991]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:00.991]                 ...future.oldOptions$nwarnings <- NULL
[17:47:00.991]             }
[17:47:00.991]             base::options(...future.oldOptions)
[17:47:00.991]             if (.Platform$OS.type == "windows") {
[17:47:00.991]                 old_names <- names(...future.oldEnvVars)
[17:47:00.991]                 envs <- base::Sys.getenv()
[17:47:00.991]                 names <- names(envs)
[17:47:00.991]                 common <- intersect(names, old_names)
[17:47:00.991]                 added <- setdiff(names, old_names)
[17:47:00.991]                 removed <- setdiff(old_names, names)
[17:47:00.991]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:00.991]                   envs[common]]
[17:47:00.991]                 NAMES <- toupper(changed)
[17:47:00.991]                 args <- list()
[17:47:00.991]                 for (kk in seq_along(NAMES)) {
[17:47:00.991]                   name <- changed[[kk]]
[17:47:00.991]                   NAME <- NAMES[[kk]]
[17:47:00.991]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.991]                     next
[17:47:00.991]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.991]                 }
[17:47:00.991]                 NAMES <- toupper(added)
[17:47:00.991]                 for (kk in seq_along(NAMES)) {
[17:47:00.991]                   name <- added[[kk]]
[17:47:00.991]                   NAME <- NAMES[[kk]]
[17:47:00.991]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.991]                     next
[17:47:00.991]                   args[[name]] <- ""
[17:47:00.991]                 }
[17:47:00.991]                 NAMES <- toupper(removed)
[17:47:00.991]                 for (kk in seq_along(NAMES)) {
[17:47:00.991]                   name <- removed[[kk]]
[17:47:00.991]                   NAME <- NAMES[[kk]]
[17:47:00.991]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:00.991]                     next
[17:47:00.991]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:00.991]                 }
[17:47:00.991]                 if (length(args) > 0) 
[17:47:00.991]                   base::do.call(base::Sys.setenv, args = args)
[17:47:00.991]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:00.991]             }
[17:47:00.991]             else {
[17:47:00.991]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:00.991]             }
[17:47:00.991]             {
[17:47:00.991]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:00.991]                   0L) {
[17:47:00.991]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:00.991]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:00.991]                   base::options(opts)
[17:47:00.991]                 }
[17:47:00.991]                 {
[17:47:00.991]                   {
[17:47:00.991]                     NULL
[17:47:00.991]                     RNGkind("Mersenne-Twister")
[17:47:00.991]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:00.991]                       inherits = FALSE)
[17:47:00.991]                   }
[17:47:00.991]                   options(future.plan = NULL)
[17:47:00.991]                   if (is.na(NA_character_)) 
[17:47:00.991]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:00.991]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:00.991]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:00.991]                     .init = FALSE)
[17:47:00.991]                 }
[17:47:00.991]             }
[17:47:00.991]         }
[17:47:00.991]     })
[17:47:00.991]     if (TRUE) {
[17:47:00.991]         base::sink(type = "output", split = FALSE)
[17:47:00.991]         if (TRUE) {
[17:47:00.991]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:00.991]         }
[17:47:00.991]         else {
[17:47:00.991]             ...future.result["stdout"] <- base::list(NULL)
[17:47:00.991]         }
[17:47:00.991]         base::close(...future.stdout)
[17:47:00.991]         ...future.stdout <- NULL
[17:47:00.991]     }
[17:47:00.991]     ...future.result$conditions <- ...future.conditions
[17:47:00.991]     ...future.result$finished <- base::Sys.time()
[17:47:00.991]     ...future.result
[17:47:00.991] }
[17:47:00.992] assign_globals() ...
[17:47:00.993] List of 1
[17:47:00.993]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:47:00.993]   .. ..@ .Data     :function (x)  
[17:47:00.993]   .. ..@ generic   : chr "my_fcn"
[17:47:00.993]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:47:00.993]   .. ..@ package   : chr ".GlobalEnv"
[17:47:00.993]   .. ..@ group     : list()
[17:47:00.993]   .. ..@ valueClass: chr(0) 
[17:47:00.993]   .. ..@ signature : chr "x"
[17:47:00.993]   .. ..@ default   : NULL
[17:47:00.993]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:47:00.993]  - attr(*, "where")=List of 1
[17:47:00.993]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:47:00.993]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:00.993]  - attr(*, "resolved")= logi FALSE
[17:47:00.993]  - attr(*, "total_size")= num 3936
[17:47:00.993]  - attr(*, "already-done")= logi TRUE
[17:47:00.999] - reassign environment for ‘my_fcn’
[17:47:00.999] - copied ‘my_fcn’ to environment
[17:47:01.000] assign_globals() ... done
[17:47:01.000] plan(): Setting new future strategy stack:
[17:47:01.000] List of future strategies:
[17:47:01.000] 1. sequential:
[17:47:01.000]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:01.000]    - tweaked: FALSE
[17:47:01.000]    - call: NULL
[17:47:01.000] plan(): nbrOfWorkers() = 1
[17:47:01.001] plan(): Setting new future strategy stack:
[17:47:01.002] List of future strategies:
[17:47:01.002] 1. sequential:
[17:47:01.002]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:01.002]    - tweaked: FALSE
[17:47:01.002]    - call: plan(strategy)
[17:47:01.002] plan(): nbrOfWorkers() = 1
[17:47:01.002] SequentialFuture started (and completed)
[17:47:01.003] - Launch lazy future ... done
[17:47:01.003] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55c25659e9d0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:47:01.003] getGlobalsAndPackages() ...
[17:47:01.006] Searching for globals...
[17:47:01.010] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:47:01.010] Searching for globals ... DONE
[17:47:01.010] Resolving globals: FALSE
[17:47:01.011] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:47:01.011] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:47:01.011] - globals: [1] ‘my_fcn’
[17:47:01.011] 
[17:47:01.011] getGlobalsAndPackages() ... DONE
[17:47:01.012] run() for ‘Future’ ...
[17:47:01.012] - state: ‘created’
[17:47:01.012] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:47:01.012] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:01.012] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:47:01.012]   - Field: ‘label’
[17:47:01.013]   - Field: ‘local’
[17:47:01.013]   - Field: ‘owner’
[17:47:01.013]   - Field: ‘envir’
[17:47:01.013]   - Field: ‘packages’
[17:47:01.013]   - Field: ‘gc’
[17:47:01.013]   - Field: ‘conditions’
[17:47:01.013]   - Field: ‘expr’
[17:47:01.013]   - Field: ‘uuid’
[17:47:01.013]   - Field: ‘seed’
[17:47:01.013]   - Field: ‘version’
[17:47:01.013]   - Field: ‘result’
[17:47:01.014]   - Field: ‘asynchronous’
[17:47:01.014]   - Field: ‘calls’
[17:47:01.014]   - Field: ‘globals’
[17:47:01.014]   - Field: ‘stdout’
[17:47:01.014]   - Field: ‘earlySignal’
[17:47:01.014]   - Field: ‘lazy’
[17:47:01.014]   - Field: ‘state’
[17:47:01.014] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:47:01.014] - Launch lazy future ...
[17:47:01.014] Packages needed by the future expression (n = 0): <none>
[17:47:01.015] Packages needed by future strategies (n = 0): <none>
[17:47:01.015] {
[17:47:01.015]     {
[17:47:01.015]         {
[17:47:01.015]             ...future.startTime <- base::Sys.time()
[17:47:01.015]             {
[17:47:01.015]                 {
[17:47:01.015]                   {
[17:47:01.015]                     base::local({
[17:47:01.015]                       has_future <- base::requireNamespace("future", 
[17:47:01.015]                         quietly = TRUE)
[17:47:01.015]                       if (has_future) {
[17:47:01.015]                         ns <- base::getNamespace("future")
[17:47:01.015]                         version <- ns[[".package"]][["version"]]
[17:47:01.015]                         if (is.null(version)) 
[17:47:01.015]                           version <- utils::packageVersion("future")
[17:47:01.015]                       }
[17:47:01.015]                       else {
[17:47:01.015]                         version <- NULL
[17:47:01.015]                       }
[17:47:01.015]                       if (!has_future || version < "1.8.0") {
[17:47:01.015]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:01.015]                           "", base::R.version$version.string), 
[17:47:01.015]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:01.015]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:01.015]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:01.015]                             "release", "version")], collapse = " "), 
[17:47:01.015]                           hostname = base::Sys.info()[["nodename"]])
[17:47:01.015]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:01.015]                           info)
[17:47:01.015]                         info <- base::paste(info, collapse = "; ")
[17:47:01.015]                         if (!has_future) {
[17:47:01.015]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:01.015]                             info)
[17:47:01.015]                         }
[17:47:01.015]                         else {
[17:47:01.015]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:01.015]                             info, version)
[17:47:01.015]                         }
[17:47:01.015]                         base::stop(msg)
[17:47:01.015]                       }
[17:47:01.015]                     })
[17:47:01.015]                   }
[17:47:01.015]                   ...future.strategy.old <- future::plan("list")
[17:47:01.015]                   options(future.plan = NULL)
[17:47:01.015]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.015]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:01.015]                 }
[17:47:01.015]                 ...future.workdir <- getwd()
[17:47:01.015]             }
[17:47:01.015]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:01.015]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:01.015]         }
[17:47:01.015]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:01.015]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:01.015]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:01.015]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:01.015]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:01.015]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:01.015]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:01.015]             base::names(...future.oldOptions))
[17:47:01.015]     }
[17:47:01.015]     if (FALSE) {
[17:47:01.015]     }
[17:47:01.015]     else {
[17:47:01.015]         if (TRUE) {
[17:47:01.015]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:01.015]                 open = "w")
[17:47:01.015]         }
[17:47:01.015]         else {
[17:47:01.015]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:01.015]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:01.015]         }
[17:47:01.015]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:01.015]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:01.015]             base::sink(type = "output", split = FALSE)
[17:47:01.015]             base::close(...future.stdout)
[17:47:01.015]         }, add = TRUE)
[17:47:01.015]     }
[17:47:01.015]     ...future.frame <- base::sys.nframe()
[17:47:01.015]     ...future.conditions <- base::list()
[17:47:01.015]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:01.015]     if (FALSE) {
[17:47:01.015]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:01.015]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:01.015]     }
[17:47:01.015]     ...future.result <- base::tryCatch({
[17:47:01.015]         base::withCallingHandlers({
[17:47:01.015]             ...future.value <- base::withVisible(base::local({
[17:47:01.015]                 my_fcn(3)
[17:47:01.015]             }))
[17:47:01.015]             future::FutureResult(value = ...future.value$value, 
[17:47:01.015]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.015]                   ...future.rng), globalenv = if (FALSE) 
[17:47:01.015]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:01.015]                     ...future.globalenv.names))
[17:47:01.015]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:01.015]         }, condition = base::local({
[17:47:01.015]             c <- base::c
[17:47:01.015]             inherits <- base::inherits
[17:47:01.015]             invokeRestart <- base::invokeRestart
[17:47:01.015]             length <- base::length
[17:47:01.015]             list <- base::list
[17:47:01.015]             seq.int <- base::seq.int
[17:47:01.015]             signalCondition <- base::signalCondition
[17:47:01.015]             sys.calls <- base::sys.calls
[17:47:01.015]             `[[` <- base::`[[`
[17:47:01.015]             `+` <- base::`+`
[17:47:01.015]             `<<-` <- base::`<<-`
[17:47:01.015]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:01.015]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:01.015]                   3L)]
[17:47:01.015]             }
[17:47:01.015]             function(cond) {
[17:47:01.015]                 is_error <- inherits(cond, "error")
[17:47:01.015]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:01.015]                   NULL)
[17:47:01.015]                 if (is_error) {
[17:47:01.015]                   sessionInformation <- function() {
[17:47:01.015]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:01.015]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:01.015]                       search = base::search(), system = base::Sys.info())
[17:47:01.015]                   }
[17:47:01.015]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.015]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:01.015]                     cond$call), session = sessionInformation(), 
[17:47:01.015]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:01.015]                   signalCondition(cond)
[17:47:01.015]                 }
[17:47:01.015]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:01.015]                 "immediateCondition"))) {
[17:47:01.015]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:01.015]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.015]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:01.015]                   if (TRUE && !signal) {
[17:47:01.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.015]                     {
[17:47:01.015]                       inherits <- base::inherits
[17:47:01.015]                       invokeRestart <- base::invokeRestart
[17:47:01.015]                       is.null <- base::is.null
[17:47:01.015]                       muffled <- FALSE
[17:47:01.015]                       if (inherits(cond, "message")) {
[17:47:01.015]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.015]                         if (muffled) 
[17:47:01.015]                           invokeRestart("muffleMessage")
[17:47:01.015]                       }
[17:47:01.015]                       else if (inherits(cond, "warning")) {
[17:47:01.015]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.015]                         if (muffled) 
[17:47:01.015]                           invokeRestart("muffleWarning")
[17:47:01.015]                       }
[17:47:01.015]                       else if (inherits(cond, "condition")) {
[17:47:01.015]                         if (!is.null(pattern)) {
[17:47:01.015]                           computeRestarts <- base::computeRestarts
[17:47:01.015]                           grepl <- base::grepl
[17:47:01.015]                           restarts <- computeRestarts(cond)
[17:47:01.015]                           for (restart in restarts) {
[17:47:01.015]                             name <- restart$name
[17:47:01.015]                             if (is.null(name)) 
[17:47:01.015]                               next
[17:47:01.015]                             if (!grepl(pattern, name)) 
[17:47:01.015]                               next
[17:47:01.015]                             invokeRestart(restart)
[17:47:01.015]                             muffled <- TRUE
[17:47:01.015]                             break
[17:47:01.015]                           }
[17:47:01.015]                         }
[17:47:01.015]                       }
[17:47:01.015]                       invisible(muffled)
[17:47:01.015]                     }
[17:47:01.015]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.015]                   }
[17:47:01.015]                 }
[17:47:01.015]                 else {
[17:47:01.015]                   if (TRUE) {
[17:47:01.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.015]                     {
[17:47:01.015]                       inherits <- base::inherits
[17:47:01.015]                       invokeRestart <- base::invokeRestart
[17:47:01.015]                       is.null <- base::is.null
[17:47:01.015]                       muffled <- FALSE
[17:47:01.015]                       if (inherits(cond, "message")) {
[17:47:01.015]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.015]                         if (muffled) 
[17:47:01.015]                           invokeRestart("muffleMessage")
[17:47:01.015]                       }
[17:47:01.015]                       else if (inherits(cond, "warning")) {
[17:47:01.015]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.015]                         if (muffled) 
[17:47:01.015]                           invokeRestart("muffleWarning")
[17:47:01.015]                       }
[17:47:01.015]                       else if (inherits(cond, "condition")) {
[17:47:01.015]                         if (!is.null(pattern)) {
[17:47:01.015]                           computeRestarts <- base::computeRestarts
[17:47:01.015]                           grepl <- base::grepl
[17:47:01.015]                           restarts <- computeRestarts(cond)
[17:47:01.015]                           for (restart in restarts) {
[17:47:01.015]                             name <- restart$name
[17:47:01.015]                             if (is.null(name)) 
[17:47:01.015]                               next
[17:47:01.015]                             if (!grepl(pattern, name)) 
[17:47:01.015]                               next
[17:47:01.015]                             invokeRestart(restart)
[17:47:01.015]                             muffled <- TRUE
[17:47:01.015]                             break
[17:47:01.015]                           }
[17:47:01.015]                         }
[17:47:01.015]                       }
[17:47:01.015]                       invisible(muffled)
[17:47:01.015]                     }
[17:47:01.015]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.015]                   }
[17:47:01.015]                 }
[17:47:01.015]             }
[17:47:01.015]         }))
[17:47:01.015]     }, error = function(ex) {
[17:47:01.015]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:01.015]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.015]                 ...future.rng), started = ...future.startTime, 
[17:47:01.015]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:01.015]             version = "1.8"), class = "FutureResult")
[17:47:01.015]     }, finally = {
[17:47:01.015]         if (!identical(...future.workdir, getwd())) 
[17:47:01.015]             setwd(...future.workdir)
[17:47:01.015]         {
[17:47:01.015]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:01.015]                 ...future.oldOptions$nwarnings <- NULL
[17:47:01.015]             }
[17:47:01.015]             base::options(...future.oldOptions)
[17:47:01.015]             if (.Platform$OS.type == "windows") {
[17:47:01.015]                 old_names <- names(...future.oldEnvVars)
[17:47:01.015]                 envs <- base::Sys.getenv()
[17:47:01.015]                 names <- names(envs)
[17:47:01.015]                 common <- intersect(names, old_names)
[17:47:01.015]                 added <- setdiff(names, old_names)
[17:47:01.015]                 removed <- setdiff(old_names, names)
[17:47:01.015]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:01.015]                   envs[common]]
[17:47:01.015]                 NAMES <- toupper(changed)
[17:47:01.015]                 args <- list()
[17:47:01.015]                 for (kk in seq_along(NAMES)) {
[17:47:01.015]                   name <- changed[[kk]]
[17:47:01.015]                   NAME <- NAMES[[kk]]
[17:47:01.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.015]                     next
[17:47:01.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.015]                 }
[17:47:01.015]                 NAMES <- toupper(added)
[17:47:01.015]                 for (kk in seq_along(NAMES)) {
[17:47:01.015]                   name <- added[[kk]]
[17:47:01.015]                   NAME <- NAMES[[kk]]
[17:47:01.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.015]                     next
[17:47:01.015]                   args[[name]] <- ""
[17:47:01.015]                 }
[17:47:01.015]                 NAMES <- toupper(removed)
[17:47:01.015]                 for (kk in seq_along(NAMES)) {
[17:47:01.015]                   name <- removed[[kk]]
[17:47:01.015]                   NAME <- NAMES[[kk]]
[17:47:01.015]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.015]                     next
[17:47:01.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.015]                 }
[17:47:01.015]                 if (length(args) > 0) 
[17:47:01.015]                   base::do.call(base::Sys.setenv, args = args)
[17:47:01.015]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:01.015]             }
[17:47:01.015]             else {
[17:47:01.015]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:01.015]             }
[17:47:01.015]             {
[17:47:01.015]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:01.015]                   0L) {
[17:47:01.015]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:01.015]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:01.015]                   base::options(opts)
[17:47:01.015]                 }
[17:47:01.015]                 {
[17:47:01.015]                   {
[17:47:01.015]                     NULL
[17:47:01.015]                     RNGkind("Mersenne-Twister")
[17:47:01.015]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:01.015]                       inherits = FALSE)
[17:47:01.015]                   }
[17:47:01.015]                   options(future.plan = NULL)
[17:47:01.015]                   if (is.na(NA_character_)) 
[17:47:01.015]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.015]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:01.015]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:01.015]                     .init = FALSE)
[17:47:01.015]                 }
[17:47:01.015]             }
[17:47:01.015]         }
[17:47:01.015]     })
[17:47:01.015]     if (TRUE) {
[17:47:01.015]         base::sink(type = "output", split = FALSE)
[17:47:01.015]         if (TRUE) {
[17:47:01.015]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:01.015]         }
[17:47:01.015]         else {
[17:47:01.015]             ...future.result["stdout"] <- base::list(NULL)
[17:47:01.015]         }
[17:47:01.015]         base::close(...future.stdout)
[17:47:01.015]         ...future.stdout <- NULL
[17:47:01.015]     }
[17:47:01.015]     ...future.result$conditions <- ...future.conditions
[17:47:01.015]     ...future.result$finished <- base::Sys.time()
[17:47:01.015]     ...future.result
[17:47:01.015] }
[17:47:01.017] assign_globals() ...
[17:47:01.017] List of 1
[17:47:01.017]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:47:01.017]   .. ..@ .Data     :function (x)  
[17:47:01.017]   .. ..@ generic   : chr "my_fcn"
[17:47:01.017]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:47:01.017]   .. ..@ package   : chr ".GlobalEnv"
[17:47:01.017]   .. ..@ group     : list()
[17:47:01.017]   .. ..@ valueClass: chr(0) 
[17:47:01.017]   .. ..@ signature : chr "x"
[17:47:01.017]   .. ..@ default   : NULL
[17:47:01.017]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:47:01.017]  - attr(*, "where")=List of 1
[17:47:01.017]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:47:01.017]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:01.017]  - attr(*, "resolved")= logi FALSE
[17:47:01.017]  - attr(*, "total_size")= num 3936
[17:47:01.017]  - attr(*, "already-done")= logi TRUE
[17:47:01.021] - reassign environment for ‘my_fcn’
[17:47:01.021] - copied ‘my_fcn’ to environment
[17:47:01.021] assign_globals() ... done
[17:47:01.022] plan(): Setting new future strategy stack:
[17:47:01.022] List of future strategies:
[17:47:01.022] 1. sequential:
[17:47:01.022]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:01.022]    - tweaked: FALSE
[17:47:01.022]    - call: NULL
[17:47:01.022] plan(): nbrOfWorkers() = 1
[17:47:01.024] plan(): Setting new future strategy stack:
[17:47:01.024] List of future strategies:
[17:47:01.024] 1. sequential:
[17:47:01.024]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:01.024]    - tweaked: FALSE
[17:47:01.024]    - call: plan(strategy)
[17:47:01.024] plan(): nbrOfWorkers() = 1
[17:47:01.024] SequentialFuture started (and completed)
[17:47:01.025] signalConditions() ...
[17:47:01.025]  - include = ‘immediateCondition’
[17:47:01.025]  - exclude = 
[17:47:01.025]  - resignal = FALSE
[17:47:01.025]  - Number of conditions: 1
[17:47:01.025] signalConditions() ... done
[17:47:01.025] - Launch lazy future ... done
[17:47:01.025] run() for ‘SequentialFuture’ ... done
[17:47:01.025] signalConditions() ...
[17:47:01.025]  - include = ‘immediateCondition’
[17:47:01.026]  - exclude = 
[17:47:01.026]  - resignal = FALSE
[17:47:01.026]  - Number of conditions: 1
[17:47:01.026] signalConditions() ... done
[17:47:01.026] Future state: ‘finished’
[17:47:01.026] signalConditions() ...
[17:47:01.026]  - include = ‘condition’
[17:47:01.026]  - exclude = ‘immediateCondition’
[17:47:01.026]  - resignal = TRUE
[17:47:01.026]  - Number of conditions: 1
[17:47:01.026]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:01.027] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multicore
[17:47:01.027] plan(): Setting new future strategy stack:
[17:47:01.027] List of future strategies:
[17:47:01.027] 1. multicore:
[17:47:01.027]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:01.027]    - tweaked: FALSE
[17:47:01.027]    - call: plan(strategy)
[17:47:01.031] plan(): nbrOfWorkers() = 2
[17:47:01.031] getGlobalsAndPackages() ...
[17:47:01.031] Searching for globals...
[17:47:01.035] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:47:01.035] Searching for globals ... DONE
[17:47:01.035] Resolving globals: FALSE
[17:47:01.036] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:47:01.036] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:47:01.036] - globals: [1] ‘my_fcn’
[17:47:01.037] 
[17:47:01.037] getGlobalsAndPackages() ... DONE
[17:47:01.037] run() for ‘Future’ ...
[17:47:01.037] - state: ‘created’
[17:47:01.037] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:47:01.041] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:01.041] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:47:01.041]   - Field: ‘label’
[17:47:01.041]   - Field: ‘local’
[17:47:01.041]   - Field: ‘owner’
[17:47:01.041]   - Field: ‘envir’
[17:47:01.041]   - Field: ‘workers’
[17:47:01.041]   - Field: ‘packages’
[17:47:01.042]   - Field: ‘gc’
[17:47:01.042]   - Field: ‘job’
[17:47:01.042]   - Field: ‘conditions’
[17:47:01.042]   - Field: ‘expr’
[17:47:01.042]   - Field: ‘uuid’
[17:47:01.042]   - Field: ‘seed’
[17:47:01.042]   - Field: ‘version’
[17:47:01.042]   - Field: ‘result’
[17:47:01.042]   - Field: ‘asynchronous’
[17:47:01.042]   - Field: ‘calls’
[17:47:01.042]   - Field: ‘globals’
[17:47:01.043]   - Field: ‘stdout’
[17:47:01.043]   - Field: ‘earlySignal’
[17:47:01.043]   - Field: ‘lazy’
[17:47:01.043]   - Field: ‘state’
[17:47:01.043] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:47:01.043] - Launch lazy future ...
[17:47:01.044] Packages needed by the future expression (n = 0): <none>
[17:47:01.044] Packages needed by future strategies (n = 0): <none>
[17:47:01.045] {
[17:47:01.045]     {
[17:47:01.045]         {
[17:47:01.045]             ...future.startTime <- base::Sys.time()
[17:47:01.045]             {
[17:47:01.045]                 {
[17:47:01.045]                   {
[17:47:01.045]                     {
[17:47:01.045]                       base::local({
[17:47:01.045]                         has_future <- base::requireNamespace("future", 
[17:47:01.045]                           quietly = TRUE)
[17:47:01.045]                         if (has_future) {
[17:47:01.045]                           ns <- base::getNamespace("future")
[17:47:01.045]                           version <- ns[[".package"]][["version"]]
[17:47:01.045]                           if (is.null(version)) 
[17:47:01.045]                             version <- utils::packageVersion("future")
[17:47:01.045]                         }
[17:47:01.045]                         else {
[17:47:01.045]                           version <- NULL
[17:47:01.045]                         }
[17:47:01.045]                         if (!has_future || version < "1.8.0") {
[17:47:01.045]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:01.045]                             "", base::R.version$version.string), 
[17:47:01.045]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:01.045]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:01.045]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:01.045]                               "release", "version")], collapse = " "), 
[17:47:01.045]                             hostname = base::Sys.info()[["nodename"]])
[17:47:01.045]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:01.045]                             info)
[17:47:01.045]                           info <- base::paste(info, collapse = "; ")
[17:47:01.045]                           if (!has_future) {
[17:47:01.045]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:01.045]                               info)
[17:47:01.045]                           }
[17:47:01.045]                           else {
[17:47:01.045]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:01.045]                               info, version)
[17:47:01.045]                           }
[17:47:01.045]                           base::stop(msg)
[17:47:01.045]                         }
[17:47:01.045]                       })
[17:47:01.045]                     }
[17:47:01.045]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:01.045]                     base::options(mc.cores = 1L)
[17:47:01.045]                   }
[17:47:01.045]                   ...future.strategy.old <- future::plan("list")
[17:47:01.045]                   options(future.plan = NULL)
[17:47:01.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:01.045]                 }
[17:47:01.045]                 ...future.workdir <- getwd()
[17:47:01.045]             }
[17:47:01.045]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:01.045]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:01.045]         }
[17:47:01.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:01.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:01.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:01.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:01.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:01.045]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:01.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:01.045]             base::names(...future.oldOptions))
[17:47:01.045]     }
[17:47:01.045]     if (FALSE) {
[17:47:01.045]     }
[17:47:01.045]     else {
[17:47:01.045]         if (TRUE) {
[17:47:01.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:01.045]                 open = "w")
[17:47:01.045]         }
[17:47:01.045]         else {
[17:47:01.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:01.045]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:01.045]         }
[17:47:01.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:01.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:01.045]             base::sink(type = "output", split = FALSE)
[17:47:01.045]             base::close(...future.stdout)
[17:47:01.045]         }, add = TRUE)
[17:47:01.045]     }
[17:47:01.045]     ...future.frame <- base::sys.nframe()
[17:47:01.045]     ...future.conditions <- base::list()
[17:47:01.045]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:01.045]     if (FALSE) {
[17:47:01.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:01.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:01.045]     }
[17:47:01.045]     ...future.result <- base::tryCatch({
[17:47:01.045]         base::withCallingHandlers({
[17:47:01.045]             ...future.value <- base::withVisible(base::local({
[17:47:01.045]                 withCallingHandlers({
[17:47:01.045]                   {
[17:47:01.045]                     my_fcn
[17:47:01.045]                   }
[17:47:01.045]                 }, immediateCondition = function(cond) {
[17:47:01.045]                   save_rds <- function (object, pathname, ...) 
[17:47:01.045]                   {
[17:47:01.045]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:01.045]                     if (file_test("-f", pathname_tmp)) {
[17:47:01.045]                       fi_tmp <- file.info(pathname_tmp)
[17:47:01.045]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:01.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:01.045]                         fi_tmp[["mtime"]])
[17:47:01.045]                     }
[17:47:01.045]                     tryCatch({
[17:47:01.045]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:01.045]                     }, error = function(ex) {
[17:47:01.045]                       msg <- conditionMessage(ex)
[17:47:01.045]                       fi_tmp <- file.info(pathname_tmp)
[17:47:01.045]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:01.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:01.045]                         fi_tmp[["mtime"]], msg)
[17:47:01.045]                       ex$message <- msg
[17:47:01.045]                       stop(ex)
[17:47:01.045]                     })
[17:47:01.045]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:01.045]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:01.045]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:01.045]                       fi_tmp <- file.info(pathname_tmp)
[17:47:01.045]                       fi <- file.info(pathname)
[17:47:01.045]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:01.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:01.045]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:01.045]                         fi[["size"]], fi[["mtime"]])
[17:47:01.045]                       stop(msg)
[17:47:01.045]                     }
[17:47:01.045]                     invisible(pathname)
[17:47:01.045]                   }
[17:47:01.045]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:01.045]                     rootPath = tempdir()) 
[17:47:01.045]                   {
[17:47:01.045]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:01.045]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:01.045]                       tmpdir = path, fileext = ".rds")
[17:47:01.045]                     save_rds(obj, file)
[17:47:01.045]                   }
[17:47:01.045]                   saveImmediateCondition(cond, path = "/tmp/RtmpxYE9yT/.future/immediateConditions")
[17:47:01.045]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.045]                   {
[17:47:01.045]                     inherits <- base::inherits
[17:47:01.045]                     invokeRestart <- base::invokeRestart
[17:47:01.045]                     is.null <- base::is.null
[17:47:01.045]                     muffled <- FALSE
[17:47:01.045]                     if (inherits(cond, "message")) {
[17:47:01.045]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:01.045]                       if (muffled) 
[17:47:01.045]                         invokeRestart("muffleMessage")
[17:47:01.045]                     }
[17:47:01.045]                     else if (inherits(cond, "warning")) {
[17:47:01.045]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:01.045]                       if (muffled) 
[17:47:01.045]                         invokeRestart("muffleWarning")
[17:47:01.045]                     }
[17:47:01.045]                     else if (inherits(cond, "condition")) {
[17:47:01.045]                       if (!is.null(pattern)) {
[17:47:01.045]                         computeRestarts <- base::computeRestarts
[17:47:01.045]                         grepl <- base::grepl
[17:47:01.045]                         restarts <- computeRestarts(cond)
[17:47:01.045]                         for (restart in restarts) {
[17:47:01.045]                           name <- restart$name
[17:47:01.045]                           if (is.null(name)) 
[17:47:01.045]                             next
[17:47:01.045]                           if (!grepl(pattern, name)) 
[17:47:01.045]                             next
[17:47:01.045]                           invokeRestart(restart)
[17:47:01.045]                           muffled <- TRUE
[17:47:01.045]                           break
[17:47:01.045]                         }
[17:47:01.045]                       }
[17:47:01.045]                     }
[17:47:01.045]                     invisible(muffled)
[17:47:01.045]                   }
[17:47:01.045]                   muffleCondition(cond)
[17:47:01.045]                 })
[17:47:01.045]             }))
[17:47:01.045]             future::FutureResult(value = ...future.value$value, 
[17:47:01.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.045]                   ...future.rng), globalenv = if (FALSE) 
[17:47:01.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:01.045]                     ...future.globalenv.names))
[17:47:01.045]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:01.045]         }, condition = base::local({
[17:47:01.045]             c <- base::c
[17:47:01.045]             inherits <- base::inherits
[17:47:01.045]             invokeRestart <- base::invokeRestart
[17:47:01.045]             length <- base::length
[17:47:01.045]             list <- base::list
[17:47:01.045]             seq.int <- base::seq.int
[17:47:01.045]             signalCondition <- base::signalCondition
[17:47:01.045]             sys.calls <- base::sys.calls
[17:47:01.045]             `[[` <- base::`[[`
[17:47:01.045]             `+` <- base::`+`
[17:47:01.045]             `<<-` <- base::`<<-`
[17:47:01.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:01.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:01.045]                   3L)]
[17:47:01.045]             }
[17:47:01.045]             function(cond) {
[17:47:01.045]                 is_error <- inherits(cond, "error")
[17:47:01.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:01.045]                   NULL)
[17:47:01.045]                 if (is_error) {
[17:47:01.045]                   sessionInformation <- function() {
[17:47:01.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:01.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:01.045]                       search = base::search(), system = base::Sys.info())
[17:47:01.045]                   }
[17:47:01.045]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:01.045]                     cond$call), session = sessionInformation(), 
[17:47:01.045]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:01.045]                   signalCondition(cond)
[17:47:01.045]                 }
[17:47:01.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:01.045]                 "immediateCondition"))) {
[17:47:01.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:01.045]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:01.045]                   if (TRUE && !signal) {
[17:47:01.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.045]                     {
[17:47:01.045]                       inherits <- base::inherits
[17:47:01.045]                       invokeRestart <- base::invokeRestart
[17:47:01.045]                       is.null <- base::is.null
[17:47:01.045]                       muffled <- FALSE
[17:47:01.045]                       if (inherits(cond, "message")) {
[17:47:01.045]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.045]                         if (muffled) 
[17:47:01.045]                           invokeRestart("muffleMessage")
[17:47:01.045]                       }
[17:47:01.045]                       else if (inherits(cond, "warning")) {
[17:47:01.045]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.045]                         if (muffled) 
[17:47:01.045]                           invokeRestart("muffleWarning")
[17:47:01.045]                       }
[17:47:01.045]                       else if (inherits(cond, "condition")) {
[17:47:01.045]                         if (!is.null(pattern)) {
[17:47:01.045]                           computeRestarts <- base::computeRestarts
[17:47:01.045]                           grepl <- base::grepl
[17:47:01.045]                           restarts <- computeRestarts(cond)
[17:47:01.045]                           for (restart in restarts) {
[17:47:01.045]                             name <- restart$name
[17:47:01.045]                             if (is.null(name)) 
[17:47:01.045]                               next
[17:47:01.045]                             if (!grepl(pattern, name)) 
[17:47:01.045]                               next
[17:47:01.045]                             invokeRestart(restart)
[17:47:01.045]                             muffled <- TRUE
[17:47:01.045]                             break
[17:47:01.045]                           }
[17:47:01.045]                         }
[17:47:01.045]                       }
[17:47:01.045]                       invisible(muffled)
[17:47:01.045]                     }
[17:47:01.045]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.045]                   }
[17:47:01.045]                 }
[17:47:01.045]                 else {
[17:47:01.045]                   if (TRUE) {
[17:47:01.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.045]                     {
[17:47:01.045]                       inherits <- base::inherits
[17:47:01.045]                       invokeRestart <- base::invokeRestart
[17:47:01.045]                       is.null <- base::is.null
[17:47:01.045]                       muffled <- FALSE
[17:47:01.045]                       if (inherits(cond, "message")) {
[17:47:01.045]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.045]                         if (muffled) 
[17:47:01.045]                           invokeRestart("muffleMessage")
[17:47:01.045]                       }
[17:47:01.045]                       else if (inherits(cond, "warning")) {
[17:47:01.045]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.045]                         if (muffled) 
[17:47:01.045]                           invokeRestart("muffleWarning")
[17:47:01.045]                       }
[17:47:01.045]                       else if (inherits(cond, "condition")) {
[17:47:01.045]                         if (!is.null(pattern)) {
[17:47:01.045]                           computeRestarts <- base::computeRestarts
[17:47:01.045]                           grepl <- base::grepl
[17:47:01.045]                           restarts <- computeRestarts(cond)
[17:47:01.045]                           for (restart in restarts) {
[17:47:01.045]                             name <- restart$name
[17:47:01.045]                             if (is.null(name)) 
[17:47:01.045]                               next
[17:47:01.045]                             if (!grepl(pattern, name)) 
[17:47:01.045]                               next
[17:47:01.045]                             invokeRestart(restart)
[17:47:01.045]                             muffled <- TRUE
[17:47:01.045]                             break
[17:47:01.045]                           }
[17:47:01.045]                         }
[17:47:01.045]                       }
[17:47:01.045]                       invisible(muffled)
[17:47:01.045]                     }
[17:47:01.045]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.045]                   }
[17:47:01.045]                 }
[17:47:01.045]             }
[17:47:01.045]         }))
[17:47:01.045]     }, error = function(ex) {
[17:47:01.045]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:01.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.045]                 ...future.rng), started = ...future.startTime, 
[17:47:01.045]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:01.045]             version = "1.8"), class = "FutureResult")
[17:47:01.045]     }, finally = {
[17:47:01.045]         if (!identical(...future.workdir, getwd())) 
[17:47:01.045]             setwd(...future.workdir)
[17:47:01.045]         {
[17:47:01.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:01.045]                 ...future.oldOptions$nwarnings <- NULL
[17:47:01.045]             }
[17:47:01.045]             base::options(...future.oldOptions)
[17:47:01.045]             if (.Platform$OS.type == "windows") {
[17:47:01.045]                 old_names <- names(...future.oldEnvVars)
[17:47:01.045]                 envs <- base::Sys.getenv()
[17:47:01.045]                 names <- names(envs)
[17:47:01.045]                 common <- intersect(names, old_names)
[17:47:01.045]                 added <- setdiff(names, old_names)
[17:47:01.045]                 removed <- setdiff(old_names, names)
[17:47:01.045]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:01.045]                   envs[common]]
[17:47:01.045]                 NAMES <- toupper(changed)
[17:47:01.045]                 args <- list()
[17:47:01.045]                 for (kk in seq_along(NAMES)) {
[17:47:01.045]                   name <- changed[[kk]]
[17:47:01.045]                   NAME <- NAMES[[kk]]
[17:47:01.045]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.045]                     next
[17:47:01.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.045]                 }
[17:47:01.045]                 NAMES <- toupper(added)
[17:47:01.045]                 for (kk in seq_along(NAMES)) {
[17:47:01.045]                   name <- added[[kk]]
[17:47:01.045]                   NAME <- NAMES[[kk]]
[17:47:01.045]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.045]                     next
[17:47:01.045]                   args[[name]] <- ""
[17:47:01.045]                 }
[17:47:01.045]                 NAMES <- toupper(removed)
[17:47:01.045]                 for (kk in seq_along(NAMES)) {
[17:47:01.045]                   name <- removed[[kk]]
[17:47:01.045]                   NAME <- NAMES[[kk]]
[17:47:01.045]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.045]                     next
[17:47:01.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.045]                 }
[17:47:01.045]                 if (length(args) > 0) 
[17:47:01.045]                   base::do.call(base::Sys.setenv, args = args)
[17:47:01.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:01.045]             }
[17:47:01.045]             else {
[17:47:01.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:01.045]             }
[17:47:01.045]             {
[17:47:01.045]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:01.045]                   0L) {
[17:47:01.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:01.045]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:01.045]                   base::options(opts)
[17:47:01.045]                 }
[17:47:01.045]                 {
[17:47:01.045]                   {
[17:47:01.045]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:01.045]                     NULL
[17:47:01.045]                   }
[17:47:01.045]                   options(future.plan = NULL)
[17:47:01.045]                   if (is.na(NA_character_)) 
[17:47:01.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:01.045]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:01.045]                     .init = FALSE)
[17:47:01.045]                 }
[17:47:01.045]             }
[17:47:01.045]         }
[17:47:01.045]     })
[17:47:01.045]     if (TRUE) {
[17:47:01.045]         base::sink(type = "output", split = FALSE)
[17:47:01.045]         if (TRUE) {
[17:47:01.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:01.045]         }
[17:47:01.045]         else {
[17:47:01.045]             ...future.result["stdout"] <- base::list(NULL)
[17:47:01.045]         }
[17:47:01.045]         base::close(...future.stdout)
[17:47:01.045]         ...future.stdout <- NULL
[17:47:01.045]     }
[17:47:01.045]     ...future.result$conditions <- ...future.conditions
[17:47:01.045]     ...future.result$finished <- base::Sys.time()
[17:47:01.045]     ...future.result
[17:47:01.045] }
[17:47:01.047] assign_globals() ...
[17:47:01.047] List of 1
[17:47:01.047]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:47:01.047]   .. ..@ .Data     :function (x)  
[17:47:01.047]   .. ..@ generic   : chr "my_fcn"
[17:47:01.047]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:47:01.047]   .. ..@ package   : chr ".GlobalEnv"
[17:47:01.047]   .. ..@ group     : list()
[17:47:01.047]   .. ..@ valueClass: chr(0) 
[17:47:01.047]   .. ..@ signature : chr "x"
[17:47:01.047]   .. ..@ default   : NULL
[17:47:01.047]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:47:01.047]  - attr(*, "where")=List of 1
[17:47:01.047]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:47:01.047]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:01.047]  - attr(*, "resolved")= logi FALSE
[17:47:01.047]  - attr(*, "total_size")= num 3936
[17:47:01.047]  - attr(*, "already-done")= logi TRUE
[17:47:01.052] - reassign environment for ‘my_fcn’
[17:47:01.052] - copied ‘my_fcn’ to environment
[17:47:01.052] assign_globals() ... done
[17:47:01.052] requestCore(): workers = 2
[17:47:01.055] MulticoreFuture started
[17:47:01.055] - Launch lazy future ... done
[17:47:01.056] run() for ‘MulticoreFuture’ ... done
[17:47:01.056] plan(): Setting new future strategy stack:
[17:47:01.056] List of future strategies:
[17:47:01.056] 1. sequential:
[17:47:01.056]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:01.056]    - tweaked: FALSE
[17:47:01.056]    - call: NULL
[17:47:01.057] result() for MulticoreFuture ...
[17:47:01.057] plan(): nbrOfWorkers() = 1
[17:47:01.059] plan(): Setting new future strategy stack:
[17:47:01.059] List of future strategies:
[17:47:01.059] 1. multicore:
[17:47:01.059]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:01.059]    - tweaked: FALSE
[17:47:01.059]    - call: plan(strategy)
[17:47:01.064] plan(): nbrOfWorkers() = 2
[17:47:01.070] result() for MulticoreFuture ...
[17:47:01.070] result() for MulticoreFuture ... done
[17:47:01.071] result() for MulticoreFuture ... done
[17:47:01.071] result() for MulticoreFuture ...
[17:47:01.071] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55c2563e54d0>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:47:01.071] getGlobalsAndPackages() ...
[17:47:01.072] Searching for globals...
[17:47:01.074] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:47:01.075] Searching for globals ... DONE
[17:47:01.075] Resolving globals: FALSE
[17:47:01.075] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:47:01.076] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:47:01.076] - globals: [1] ‘my_fcn’
[17:47:01.076] 
[17:47:01.076] getGlobalsAndPackages() ... DONE
[17:47:01.077] run() for ‘Future’ ...
[17:47:01.077] - state: ‘created’
[17:47:01.077] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:47:01.081] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:01.081] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:47:01.081]   - Field: ‘label’
[17:47:01.084]   - Field: ‘local’
[17:47:01.084]   - Field: ‘owner’
[17:47:01.084]   - Field: ‘envir’
[17:47:01.084]   - Field: ‘workers’
[17:47:01.084]   - Field: ‘packages’
[17:47:01.085]   - Field: ‘gc’
[17:47:01.085]   - Field: ‘job’
[17:47:01.085]   - Field: ‘conditions’
[17:47:01.085]   - Field: ‘expr’
[17:47:01.085]   - Field: ‘uuid’
[17:47:01.085]   - Field: ‘seed’
[17:47:01.085]   - Field: ‘version’
[17:47:01.085]   - Field: ‘result’
[17:47:01.086]   - Field: ‘asynchronous’
[17:47:01.086]   - Field: ‘calls’
[17:47:01.086]   - Field: ‘globals’
[17:47:01.086]   - Field: ‘stdout’
[17:47:01.086]   - Field: ‘earlySignal’
[17:47:01.086]   - Field: ‘lazy’
[17:47:01.086]   - Field: ‘state’
[17:47:01.086] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:47:01.086] - Launch lazy future ...
[17:47:01.087] Packages needed by the future expression (n = 0): <none>
[17:47:01.087] Packages needed by future strategies (n = 0): <none>
[17:47:01.088] {
[17:47:01.088]     {
[17:47:01.088]         {
[17:47:01.088]             ...future.startTime <- base::Sys.time()
[17:47:01.088]             {
[17:47:01.088]                 {
[17:47:01.088]                   {
[17:47:01.088]                     {
[17:47:01.088]                       base::local({
[17:47:01.088]                         has_future <- base::requireNamespace("future", 
[17:47:01.088]                           quietly = TRUE)
[17:47:01.088]                         if (has_future) {
[17:47:01.088]                           ns <- base::getNamespace("future")
[17:47:01.088]                           version <- ns[[".package"]][["version"]]
[17:47:01.088]                           if (is.null(version)) 
[17:47:01.088]                             version <- utils::packageVersion("future")
[17:47:01.088]                         }
[17:47:01.088]                         else {
[17:47:01.088]                           version <- NULL
[17:47:01.088]                         }
[17:47:01.088]                         if (!has_future || version < "1.8.0") {
[17:47:01.088]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:01.088]                             "", base::R.version$version.string), 
[17:47:01.088]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:01.088]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:01.088]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:01.088]                               "release", "version")], collapse = " "), 
[17:47:01.088]                             hostname = base::Sys.info()[["nodename"]])
[17:47:01.088]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:01.088]                             info)
[17:47:01.088]                           info <- base::paste(info, collapse = "; ")
[17:47:01.088]                           if (!has_future) {
[17:47:01.088]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:01.088]                               info)
[17:47:01.088]                           }
[17:47:01.088]                           else {
[17:47:01.088]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:01.088]                               info, version)
[17:47:01.088]                           }
[17:47:01.088]                           base::stop(msg)
[17:47:01.088]                         }
[17:47:01.088]                       })
[17:47:01.088]                     }
[17:47:01.088]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:01.088]                     base::options(mc.cores = 1L)
[17:47:01.088]                   }
[17:47:01.088]                   ...future.strategy.old <- future::plan("list")
[17:47:01.088]                   options(future.plan = NULL)
[17:47:01.088]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.088]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:01.088]                 }
[17:47:01.088]                 ...future.workdir <- getwd()
[17:47:01.088]             }
[17:47:01.088]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:01.088]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:01.088]         }
[17:47:01.088]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:01.088]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:01.088]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:01.088]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:01.088]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:01.088]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:01.088]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:01.088]             base::names(...future.oldOptions))
[17:47:01.088]     }
[17:47:01.088]     if (FALSE) {
[17:47:01.088]     }
[17:47:01.088]     else {
[17:47:01.088]         if (TRUE) {
[17:47:01.088]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:01.088]                 open = "w")
[17:47:01.088]         }
[17:47:01.088]         else {
[17:47:01.088]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:01.088]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:01.088]         }
[17:47:01.088]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:01.088]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:01.088]             base::sink(type = "output", split = FALSE)
[17:47:01.088]             base::close(...future.stdout)
[17:47:01.088]         }, add = TRUE)
[17:47:01.088]     }
[17:47:01.088]     ...future.frame <- base::sys.nframe()
[17:47:01.088]     ...future.conditions <- base::list()
[17:47:01.088]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:01.088]     if (FALSE) {
[17:47:01.088]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:01.088]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:01.088]     }
[17:47:01.088]     ...future.result <- base::tryCatch({
[17:47:01.088]         base::withCallingHandlers({
[17:47:01.088]             ...future.value <- base::withVisible(base::local({
[17:47:01.088]                 withCallingHandlers({
[17:47:01.088]                   {
[17:47:01.088]                     my_fcn(3)
[17:47:01.088]                   }
[17:47:01.088]                 }, immediateCondition = function(cond) {
[17:47:01.088]                   save_rds <- function (object, pathname, ...) 
[17:47:01.088]                   {
[17:47:01.088]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:01.088]                     if (file_test("-f", pathname_tmp)) {
[17:47:01.088]                       fi_tmp <- file.info(pathname_tmp)
[17:47:01.088]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:01.088]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:01.088]                         fi_tmp[["mtime"]])
[17:47:01.088]                     }
[17:47:01.088]                     tryCatch({
[17:47:01.088]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:01.088]                     }, error = function(ex) {
[17:47:01.088]                       msg <- conditionMessage(ex)
[17:47:01.088]                       fi_tmp <- file.info(pathname_tmp)
[17:47:01.088]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:01.088]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:01.088]                         fi_tmp[["mtime"]], msg)
[17:47:01.088]                       ex$message <- msg
[17:47:01.088]                       stop(ex)
[17:47:01.088]                     })
[17:47:01.088]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:01.088]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:01.088]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:01.088]                       fi_tmp <- file.info(pathname_tmp)
[17:47:01.088]                       fi <- file.info(pathname)
[17:47:01.088]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:01.088]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:01.088]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:01.088]                         fi[["size"]], fi[["mtime"]])
[17:47:01.088]                       stop(msg)
[17:47:01.088]                     }
[17:47:01.088]                     invisible(pathname)
[17:47:01.088]                   }
[17:47:01.088]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:01.088]                     rootPath = tempdir()) 
[17:47:01.088]                   {
[17:47:01.088]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:01.088]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:01.088]                       tmpdir = path, fileext = ".rds")
[17:47:01.088]                     save_rds(obj, file)
[17:47:01.088]                   }
[17:47:01.088]                   saveImmediateCondition(cond, path = "/tmp/RtmpxYE9yT/.future/immediateConditions")
[17:47:01.088]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.088]                   {
[17:47:01.088]                     inherits <- base::inherits
[17:47:01.088]                     invokeRestart <- base::invokeRestart
[17:47:01.088]                     is.null <- base::is.null
[17:47:01.088]                     muffled <- FALSE
[17:47:01.088]                     if (inherits(cond, "message")) {
[17:47:01.088]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:01.088]                       if (muffled) 
[17:47:01.088]                         invokeRestart("muffleMessage")
[17:47:01.088]                     }
[17:47:01.088]                     else if (inherits(cond, "warning")) {
[17:47:01.088]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:01.088]                       if (muffled) 
[17:47:01.088]                         invokeRestart("muffleWarning")
[17:47:01.088]                     }
[17:47:01.088]                     else if (inherits(cond, "condition")) {
[17:47:01.088]                       if (!is.null(pattern)) {
[17:47:01.088]                         computeRestarts <- base::computeRestarts
[17:47:01.088]                         grepl <- base::grepl
[17:47:01.088]                         restarts <- computeRestarts(cond)
[17:47:01.088]                         for (restart in restarts) {
[17:47:01.088]                           name <- restart$name
[17:47:01.088]                           if (is.null(name)) 
[17:47:01.088]                             next
[17:47:01.088]                           if (!grepl(pattern, name)) 
[17:47:01.088]                             next
[17:47:01.088]                           invokeRestart(restart)
[17:47:01.088]                           muffled <- TRUE
[17:47:01.088]                           break
[17:47:01.088]                         }
[17:47:01.088]                       }
[17:47:01.088]                     }
[17:47:01.088]                     invisible(muffled)
[17:47:01.088]                   }
[17:47:01.088]                   muffleCondition(cond)
[17:47:01.088]                 })
[17:47:01.088]             }))
[17:47:01.088]             future::FutureResult(value = ...future.value$value, 
[17:47:01.088]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.088]                   ...future.rng), globalenv = if (FALSE) 
[17:47:01.088]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:01.088]                     ...future.globalenv.names))
[17:47:01.088]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:01.088]         }, condition = base::local({
[17:47:01.088]             c <- base::c
[17:47:01.088]             inherits <- base::inherits
[17:47:01.088]             invokeRestart <- base::invokeRestart
[17:47:01.088]             length <- base::length
[17:47:01.088]             list <- base::list
[17:47:01.088]             seq.int <- base::seq.int
[17:47:01.088]             signalCondition <- base::signalCondition
[17:47:01.088]             sys.calls <- base::sys.calls
[17:47:01.088]             `[[` <- base::`[[`
[17:47:01.088]             `+` <- base::`+`
[17:47:01.088]             `<<-` <- base::`<<-`
[17:47:01.088]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:01.088]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:01.088]                   3L)]
[17:47:01.088]             }
[17:47:01.088]             function(cond) {
[17:47:01.088]                 is_error <- inherits(cond, "error")
[17:47:01.088]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:01.088]                   NULL)
[17:47:01.088]                 if (is_error) {
[17:47:01.088]                   sessionInformation <- function() {
[17:47:01.088]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:01.088]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:01.088]                       search = base::search(), system = base::Sys.info())
[17:47:01.088]                   }
[17:47:01.088]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.088]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:01.088]                     cond$call), session = sessionInformation(), 
[17:47:01.088]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:01.088]                   signalCondition(cond)
[17:47:01.088]                 }
[17:47:01.088]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:01.088]                 "immediateCondition"))) {
[17:47:01.088]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:01.088]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.088]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:01.088]                   if (TRUE && !signal) {
[17:47:01.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.088]                     {
[17:47:01.088]                       inherits <- base::inherits
[17:47:01.088]                       invokeRestart <- base::invokeRestart
[17:47:01.088]                       is.null <- base::is.null
[17:47:01.088]                       muffled <- FALSE
[17:47:01.088]                       if (inherits(cond, "message")) {
[17:47:01.088]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.088]                         if (muffled) 
[17:47:01.088]                           invokeRestart("muffleMessage")
[17:47:01.088]                       }
[17:47:01.088]                       else if (inherits(cond, "warning")) {
[17:47:01.088]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.088]                         if (muffled) 
[17:47:01.088]                           invokeRestart("muffleWarning")
[17:47:01.088]                       }
[17:47:01.088]                       else if (inherits(cond, "condition")) {
[17:47:01.088]                         if (!is.null(pattern)) {
[17:47:01.088]                           computeRestarts <- base::computeRestarts
[17:47:01.088]                           grepl <- base::grepl
[17:47:01.088]                           restarts <- computeRestarts(cond)
[17:47:01.088]                           for (restart in restarts) {
[17:47:01.088]                             name <- restart$name
[17:47:01.088]                             if (is.null(name)) 
[17:47:01.088]                               next
[17:47:01.088]                             if (!grepl(pattern, name)) 
[17:47:01.088]                               next
[17:47:01.088]                             invokeRestart(restart)
[17:47:01.088]                             muffled <- TRUE
[17:47:01.088]                             break
[17:47:01.088]                           }
[17:47:01.088]                         }
[17:47:01.088]                       }
[17:47:01.088]                       invisible(muffled)
[17:47:01.088]                     }
[17:47:01.088]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.088]                   }
[17:47:01.088]                 }
[17:47:01.088]                 else {
[17:47:01.088]                   if (TRUE) {
[17:47:01.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.088]                     {
[17:47:01.088]                       inherits <- base::inherits
[17:47:01.088]                       invokeRestart <- base::invokeRestart
[17:47:01.088]                       is.null <- base::is.null
[17:47:01.088]                       muffled <- FALSE
[17:47:01.088]                       if (inherits(cond, "message")) {
[17:47:01.088]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.088]                         if (muffled) 
[17:47:01.088]                           invokeRestart("muffleMessage")
[17:47:01.088]                       }
[17:47:01.088]                       else if (inherits(cond, "warning")) {
[17:47:01.088]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.088]                         if (muffled) 
[17:47:01.088]                           invokeRestart("muffleWarning")
[17:47:01.088]                       }
[17:47:01.088]                       else if (inherits(cond, "condition")) {
[17:47:01.088]                         if (!is.null(pattern)) {
[17:47:01.088]                           computeRestarts <- base::computeRestarts
[17:47:01.088]                           grepl <- base::grepl
[17:47:01.088]                           restarts <- computeRestarts(cond)
[17:47:01.088]                           for (restart in restarts) {
[17:47:01.088]                             name <- restart$name
[17:47:01.088]                             if (is.null(name)) 
[17:47:01.088]                               next
[17:47:01.088]                             if (!grepl(pattern, name)) 
[17:47:01.088]                               next
[17:47:01.088]                             invokeRestart(restart)
[17:47:01.088]                             muffled <- TRUE
[17:47:01.088]                             break
[17:47:01.088]                           }
[17:47:01.088]                         }
[17:47:01.088]                       }
[17:47:01.088]                       invisible(muffled)
[17:47:01.088]                     }
[17:47:01.088]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.088]                   }
[17:47:01.088]                 }
[17:47:01.088]             }
[17:47:01.088]         }))
[17:47:01.088]     }, error = function(ex) {
[17:47:01.088]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:01.088]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.088]                 ...future.rng), started = ...future.startTime, 
[17:47:01.088]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:01.088]             version = "1.8"), class = "FutureResult")
[17:47:01.088]     }, finally = {
[17:47:01.088]         if (!identical(...future.workdir, getwd())) 
[17:47:01.088]             setwd(...future.workdir)
[17:47:01.088]         {
[17:47:01.088]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:01.088]                 ...future.oldOptions$nwarnings <- NULL
[17:47:01.088]             }
[17:47:01.088]             base::options(...future.oldOptions)
[17:47:01.088]             if (.Platform$OS.type == "windows") {
[17:47:01.088]                 old_names <- names(...future.oldEnvVars)
[17:47:01.088]                 envs <- base::Sys.getenv()
[17:47:01.088]                 names <- names(envs)
[17:47:01.088]                 common <- intersect(names, old_names)
[17:47:01.088]                 added <- setdiff(names, old_names)
[17:47:01.088]                 removed <- setdiff(old_names, names)
[17:47:01.088]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:01.088]                   envs[common]]
[17:47:01.088]                 NAMES <- toupper(changed)
[17:47:01.088]                 args <- list()
[17:47:01.088]                 for (kk in seq_along(NAMES)) {
[17:47:01.088]                   name <- changed[[kk]]
[17:47:01.088]                   NAME <- NAMES[[kk]]
[17:47:01.088]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.088]                     next
[17:47:01.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.088]                 }
[17:47:01.088]                 NAMES <- toupper(added)
[17:47:01.088]                 for (kk in seq_along(NAMES)) {
[17:47:01.088]                   name <- added[[kk]]
[17:47:01.088]                   NAME <- NAMES[[kk]]
[17:47:01.088]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.088]                     next
[17:47:01.088]                   args[[name]] <- ""
[17:47:01.088]                 }
[17:47:01.088]                 NAMES <- toupper(removed)
[17:47:01.088]                 for (kk in seq_along(NAMES)) {
[17:47:01.088]                   name <- removed[[kk]]
[17:47:01.088]                   NAME <- NAMES[[kk]]
[17:47:01.088]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.088]                     next
[17:47:01.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.088]                 }
[17:47:01.088]                 if (length(args) > 0) 
[17:47:01.088]                   base::do.call(base::Sys.setenv, args = args)
[17:47:01.088]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:01.088]             }
[17:47:01.088]             else {
[17:47:01.088]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:01.088]             }
[17:47:01.088]             {
[17:47:01.088]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:01.088]                   0L) {
[17:47:01.088]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:01.088]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:01.088]                   base::options(opts)
[17:47:01.088]                 }
[17:47:01.088]                 {
[17:47:01.088]                   {
[17:47:01.088]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:01.088]                     NULL
[17:47:01.088]                   }
[17:47:01.088]                   options(future.plan = NULL)
[17:47:01.088]                   if (is.na(NA_character_)) 
[17:47:01.088]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.088]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:01.088]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:01.088]                     .init = FALSE)
[17:47:01.088]                 }
[17:47:01.088]             }
[17:47:01.088]         }
[17:47:01.088]     })
[17:47:01.088]     if (TRUE) {
[17:47:01.088]         base::sink(type = "output", split = FALSE)
[17:47:01.088]         if (TRUE) {
[17:47:01.088]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:01.088]         }
[17:47:01.088]         else {
[17:47:01.088]             ...future.result["stdout"] <- base::list(NULL)
[17:47:01.088]         }
[17:47:01.088]         base::close(...future.stdout)
[17:47:01.088]         ...future.stdout <- NULL
[17:47:01.088]     }
[17:47:01.088]     ...future.result$conditions <- ...future.conditions
[17:47:01.088]     ...future.result$finished <- base::Sys.time()
[17:47:01.088]     ...future.result
[17:47:01.088] }
[17:47:01.090] assign_globals() ...
[17:47:01.090] List of 1
[17:47:01.090]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[17:47:01.090]   .. ..@ .Data     :function (x)  
[17:47:01.090]   .. ..@ generic   : chr "my_fcn"
[17:47:01.090]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[17:47:01.090]   .. ..@ package   : chr ".GlobalEnv"
[17:47:01.090]   .. ..@ group     : list()
[17:47:01.090]   .. ..@ valueClass: chr(0) 
[17:47:01.090]   .. ..@ signature : chr "x"
[17:47:01.090]   .. ..@ default   : NULL
[17:47:01.090]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[17:47:01.090]  - attr(*, "where")=List of 1
[17:47:01.090]   ..$ my_fcn:<environment: R_EmptyEnv> 
[17:47:01.090]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:01.090]  - attr(*, "resolved")= logi FALSE
[17:47:01.090]  - attr(*, "total_size")= num 3936
[17:47:01.090]  - attr(*, "already-done")= logi TRUE
[17:47:01.096] - reassign environment for ‘my_fcn’
[17:47:01.096] - copied ‘my_fcn’ to environment
[17:47:01.096] assign_globals() ... done
[17:47:01.096] requestCore(): workers = 2
[17:47:01.098] MulticoreFuture started
[17:47:01.099] - Launch lazy future ... done
[17:47:01.099] run() for ‘MulticoreFuture’ ... done
[17:47:01.099] result() for MulticoreFuture ...
[17:47:01.099] plan(): Setting new future strategy stack:
[17:47:01.100] List of future strategies:
[17:47:01.100] 1. sequential:
[17:47:01.100]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:01.100]    - tweaked: FALSE
[17:47:01.100]    - call: NULL
[17:47:01.101] plan(): nbrOfWorkers() = 1
[17:47:01.103] plan(): Setting new future strategy stack:
[17:47:01.103] List of future strategies:
[17:47:01.103] 1. multicore:
[17:47:01.103]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:01.103]    - tweaked: FALSE
[17:47:01.103]    - call: plan(strategy)
[17:47:01.108] plan(): nbrOfWorkers() = 2
[17:47:01.122] result() for MulticoreFuture ...
[17:47:01.122] result() for MulticoreFuture ... done
[17:47:01.122] signalConditions() ...
[17:47:01.122]  - include = ‘immediateCondition’
[17:47:01.122]  - exclude = 
[17:47:01.122]  - resignal = FALSE
[17:47:01.122]  - Number of conditions: 1
[17:47:01.123] signalConditions() ... done
[17:47:01.123] result() for MulticoreFuture ... done
[17:47:01.123] result() for MulticoreFuture ...
[17:47:01.123] result() for MulticoreFuture ... done
[17:47:01.123] signalConditions() ...
[17:47:01.123]  - include = ‘immediateCondition’
[17:47:01.123]  - exclude = 
[17:47:01.124]  - resignal = FALSE
[17:47:01.124]  - Number of conditions: 1
[17:47:01.124] signalConditions() ... done
[17:47:01.124] Future state: ‘finished’
[17:47:01.124] result() for MulticoreFuture ...
[17:47:01.124] result() for MulticoreFuture ... done
[17:47:01.124] signalConditions() ...
[17:47:01.124]  - include = ‘condition’
[17:47:01.124]  - exclude = ‘immediateCondition’
[17:47:01.125]  - resignal = TRUE
[17:47:01.125]  - Number of conditions: 1
[17:47:01.125]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:01.125] signalConditions() ... done
<simpleError: unable to find an inherited method for function ‘my_fcn’ for signature ‘x = "numeric"’>
Type of future: multisession
[17:47:01.125] plan(): Setting new future strategy stack:
[17:47:01.126] List of future strategies:
[17:47:01.126] 1. multisession:
[17:47:01.126]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:47:01.126]    - tweaked: FALSE
[17:47:01.126]    - call: plan(strategy)
[17:47:01.126] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:47:01.126] multisession:
[17:47:01.126] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:47:01.126] - tweaked: FALSE
[17:47:01.126] - call: plan(strategy)
[17:47:01.133] getGlobalsAndPackages() ...
[17:47:01.133] Not searching for globals
[17:47:01.133] - globals: [0] <none>
[17:47:01.133] getGlobalsAndPackages() ... DONE
[17:47:01.134] [local output] makeClusterPSOCK() ...
[17:47:01.183] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:47:01.184] [local output] Base port: 11130
[17:47:01.184] [local output] Getting setup options for 2 cluster nodes ...
[17:47:01.184] [local output]  - Node 1 of 2 ...
[17:47:01.185] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:01.185] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpxYE9yT/worker.rank=1.parallelly.parent=44008.abe82fd33d20.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpxYE9yT/worker.rank=1.parallelly.parent=44008.abe82fd33d20.pid")'’
[17:47:01.375] - Possible to infer worker's PID: TRUE
[17:47:01.375] [local output] Rscript port: 11130

[17:47:01.375] [local output]  - Node 2 of 2 ...
[17:47:01.376] [local output] localMachine=TRUE => revtunnel=FALSE

[17:47:01.376] [local output] Rscript port: 11130

[17:47:01.377] [local output] Getting setup options for 2 cluster nodes ... done
[17:47:01.377] [local output]  - Parallel setup requested for some PSOCK nodes
[17:47:01.377] [local output] Setting up PSOCK nodes in parallel
[17:47:01.377] List of 36
[17:47:01.377]  $ worker          : chr "localhost"
[17:47:01.377]   ..- attr(*, "localhost")= logi TRUE
[17:47:01.377]  $ master          : chr "localhost"
[17:47:01.377]  $ port            : int 11130
[17:47:01.377]  $ connectTimeout  : num 120
[17:47:01.377]  $ timeout         : num 2592000
[17:47:01.377]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:47:01.377]  $ homogeneous     : logi TRUE
[17:47:01.377]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:47:01.377]  $ rscript_envs    : NULL
[17:47:01.377]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:01.377]  $ rscript_startup : NULL
[17:47:01.377]  $ rscript_sh      : chr "sh"
[17:47:01.377]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:01.377]  $ methods         : logi TRUE
[17:47:01.377]  $ socketOptions   : chr "no-delay"
[17:47:01.377]  $ useXDR          : logi FALSE
[17:47:01.377]  $ outfile         : chr "/dev/null"
[17:47:01.377]  $ renice          : int NA
[17:47:01.377]  $ rshcmd          : NULL
[17:47:01.377]  $ user            : chr(0) 
[17:47:01.377]  $ revtunnel       : logi FALSE
[17:47:01.377]  $ rshlogfile      : NULL
[17:47:01.377]  $ rshopts         : chr(0) 
[17:47:01.377]  $ rank            : int 1
[17:47:01.377]  $ manual          : logi FALSE
[17:47:01.377]  $ dryrun          : logi FALSE
[17:47:01.377]  $ quiet           : logi FALSE
[17:47:01.377]  $ setup_strategy  : chr "parallel"
[17:47:01.377]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:01.377]  $ pidfile         : chr "/tmp/RtmpxYE9yT/worker.rank=1.parallelly.parent=44008.abe82fd33d20.pid"
[17:47:01.377]  $ rshcmd_label    : NULL
[17:47:01.377]  $ rsh_call        : NULL
[17:47:01.377]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:47:01.377]  $ localMachine    : logi TRUE
[17:47:01.377]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:47:01.377]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:47:01.377]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:47:01.377]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:47:01.377]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:47:01.377]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:47:01.377]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:47:01.377]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:47:01.377]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:47:01.377]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:47:01.377]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:47:01.377]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:47:01.377]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:47:01.377]  $ arguments       :List of 28
[17:47:01.377]   ..$ worker          : chr "localhost"
[17:47:01.377]   ..$ master          : NULL
[17:47:01.377]   ..$ port            : int 11130
[17:47:01.377]   ..$ connectTimeout  : num 120
[17:47:01.377]   ..$ timeout         : num 2592000
[17:47:01.377]   ..$ rscript         : NULL
[17:47:01.377]   ..$ homogeneous     : NULL
[17:47:01.377]   ..$ rscript_args    : NULL
[17:47:01.377]   ..$ rscript_envs    : NULL
[17:47:01.377]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:47:01.377]   ..$ rscript_startup : NULL
[17:47:01.377]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:47:01.377]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:47:01.377]   ..$ methods         : logi TRUE
[17:47:01.377]   ..$ socketOptions   : chr "no-delay"
[17:47:01.377]   ..$ useXDR          : logi FALSE
[17:47:01.377]   ..$ outfile         : chr "/dev/null"
[17:47:01.377]   ..$ renice          : int NA
[17:47:01.377]   ..$ rshcmd          : NULL
[17:47:01.377]   ..$ user            : NULL
[17:47:01.377]   ..$ revtunnel       : logi NA
[17:47:01.377]   ..$ rshlogfile      : NULL
[17:47:01.377]   ..$ rshopts         : NULL
[17:47:01.377]   ..$ rank            : int 1
[17:47:01.377]   ..$ manual          : logi FALSE
[17:47:01.377]   ..$ dryrun          : logi FALSE
[17:47:01.377]   ..$ quiet           : logi FALSE
[17:47:01.377]   ..$ setup_strategy  : chr "parallel"
[17:47:01.377]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:47:01.394] [local output] System call to launch all workers:
[17:47:01.394] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpxYE9yT/worker.rank=1.parallelly.parent=44008.abe82fd33d20.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11130 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:47:01.394] [local output] Starting PSOCK main server
[17:47:01.400] [local output] Workers launched
[17:47:01.400] [local output] Waiting for workers to connect back
[17:47:01.400]  - [local output] 0 workers out of 2 ready
[17:47:01.640]  - [local output] 0 workers out of 2 ready
[17:47:01.640]  - [local output] 1 workers out of 2 ready
[17:47:01.641]  - [local output] 1 workers out of 2 ready
[17:47:01.642]  - [local output] 2 workers out of 2 ready
[17:47:01.642] [local output] Launching of workers completed
[17:47:01.642] [local output] Collecting session information from workers
[17:47:01.643] [local output]  - Worker #1 of 2
[17:47:01.643] [local output]  - Worker #2 of 2
[17:47:01.644] [local output] makeClusterPSOCK() ... done
[17:47:01.655] Packages needed by the future expression (n = 0): <none>
[17:47:01.655] Packages needed by future strategies (n = 0): <none>
[17:47:01.656] {
[17:47:01.656]     {
[17:47:01.656]         {
[17:47:01.656]             ...future.startTime <- base::Sys.time()
[17:47:01.656]             {
[17:47:01.656]                 {
[17:47:01.656]                   {
[17:47:01.656]                     {
[17:47:01.656]                       base::local({
[17:47:01.656]                         has_future <- base::requireNamespace("future", 
[17:47:01.656]                           quietly = TRUE)
[17:47:01.656]                         if (has_future) {
[17:47:01.656]                           ns <- base::getNamespace("future")
[17:47:01.656]                           version <- ns[[".package"]][["version"]]
[17:47:01.656]                           if (is.null(version)) 
[17:47:01.656]                             version <- utils::packageVersion("future")
[17:47:01.656]                         }
[17:47:01.656]                         else {
[17:47:01.656]                           version <- NULL
[17:47:01.656]                         }
[17:47:01.656]                         if (!has_future || version < "1.8.0") {
[17:47:01.656]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:01.656]                             "", base::R.version$version.string), 
[17:47:01.656]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:01.656]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:01.656]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:01.656]                               "release", "version")], collapse = " "), 
[17:47:01.656]                             hostname = base::Sys.info()[["nodename"]])
[17:47:01.656]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:01.656]                             info)
[17:47:01.656]                           info <- base::paste(info, collapse = "; ")
[17:47:01.656]                           if (!has_future) {
[17:47:01.656]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:01.656]                               info)
[17:47:01.656]                           }
[17:47:01.656]                           else {
[17:47:01.656]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:01.656]                               info, version)
[17:47:01.656]                           }
[17:47:01.656]                           base::stop(msg)
[17:47:01.656]                         }
[17:47:01.656]                       })
[17:47:01.656]                     }
[17:47:01.656]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:01.656]                     base::options(mc.cores = 1L)
[17:47:01.656]                   }
[17:47:01.656]                   ...future.strategy.old <- future::plan("list")
[17:47:01.656]                   options(future.plan = NULL)
[17:47:01.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:01.656]                 }
[17:47:01.656]                 ...future.workdir <- getwd()
[17:47:01.656]             }
[17:47:01.656]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:01.656]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:01.656]         }
[17:47:01.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:01.656]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:01.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:01.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:01.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:01.656]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:01.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:01.656]             base::names(...future.oldOptions))
[17:47:01.656]     }
[17:47:01.656]     if (FALSE) {
[17:47:01.656]     }
[17:47:01.656]     else {
[17:47:01.656]         if (TRUE) {
[17:47:01.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:01.656]                 open = "w")
[17:47:01.656]         }
[17:47:01.656]         else {
[17:47:01.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:01.656]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:01.656]         }
[17:47:01.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:01.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:01.656]             base::sink(type = "output", split = FALSE)
[17:47:01.656]             base::close(...future.stdout)
[17:47:01.656]         }, add = TRUE)
[17:47:01.656]     }
[17:47:01.656]     ...future.frame <- base::sys.nframe()
[17:47:01.656]     ...future.conditions <- base::list()
[17:47:01.656]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:01.656]     if (FALSE) {
[17:47:01.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:01.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:01.656]     }
[17:47:01.656]     ...future.result <- base::tryCatch({
[17:47:01.656]         base::withCallingHandlers({
[17:47:01.656]             ...future.value <- base::withVisible(base::local({
[17:47:01.656]                 ...future.makeSendCondition <- base::local({
[17:47:01.656]                   sendCondition <- NULL
[17:47:01.656]                   function(frame = 1L) {
[17:47:01.656]                     if (is.function(sendCondition)) 
[17:47:01.656]                       return(sendCondition)
[17:47:01.656]                     ns <- getNamespace("parallel")
[17:47:01.656]                     if (exists("sendData", mode = "function", 
[17:47:01.656]                       envir = ns)) {
[17:47:01.656]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:01.656]                         envir = ns)
[17:47:01.656]                       envir <- sys.frame(frame)
[17:47:01.656]                       master <- NULL
[17:47:01.656]                       while (!identical(envir, .GlobalEnv) && 
[17:47:01.656]                         !identical(envir, emptyenv())) {
[17:47:01.656]                         if (exists("master", mode = "list", envir = envir, 
[17:47:01.656]                           inherits = FALSE)) {
[17:47:01.656]                           master <- get("master", mode = "list", 
[17:47:01.656]                             envir = envir, inherits = FALSE)
[17:47:01.656]                           if (inherits(master, c("SOCKnode", 
[17:47:01.656]                             "SOCK0node"))) {
[17:47:01.656]                             sendCondition <<- function(cond) {
[17:47:01.656]                               data <- list(type = "VALUE", value = cond, 
[17:47:01.656]                                 success = TRUE)
[17:47:01.656]                               parallel_sendData(master, data)
[17:47:01.656]                             }
[17:47:01.656]                             return(sendCondition)
[17:47:01.656]                           }
[17:47:01.656]                         }
[17:47:01.656]                         frame <- frame + 1L
[17:47:01.656]                         envir <- sys.frame(frame)
[17:47:01.656]                       }
[17:47:01.656]                     }
[17:47:01.656]                     sendCondition <<- function(cond) NULL
[17:47:01.656]                   }
[17:47:01.656]                 })
[17:47:01.656]                 withCallingHandlers({
[17:47:01.656]                   NA
[17:47:01.656]                 }, immediateCondition = function(cond) {
[17:47:01.656]                   sendCondition <- ...future.makeSendCondition()
[17:47:01.656]                   sendCondition(cond)
[17:47:01.656]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.656]                   {
[17:47:01.656]                     inherits <- base::inherits
[17:47:01.656]                     invokeRestart <- base::invokeRestart
[17:47:01.656]                     is.null <- base::is.null
[17:47:01.656]                     muffled <- FALSE
[17:47:01.656]                     if (inherits(cond, "message")) {
[17:47:01.656]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:01.656]                       if (muffled) 
[17:47:01.656]                         invokeRestart("muffleMessage")
[17:47:01.656]                     }
[17:47:01.656]                     else if (inherits(cond, "warning")) {
[17:47:01.656]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:01.656]                       if (muffled) 
[17:47:01.656]                         invokeRestart("muffleWarning")
[17:47:01.656]                     }
[17:47:01.656]                     else if (inherits(cond, "condition")) {
[17:47:01.656]                       if (!is.null(pattern)) {
[17:47:01.656]                         computeRestarts <- base::computeRestarts
[17:47:01.656]                         grepl <- base::grepl
[17:47:01.656]                         restarts <- computeRestarts(cond)
[17:47:01.656]                         for (restart in restarts) {
[17:47:01.656]                           name <- restart$name
[17:47:01.656]                           if (is.null(name)) 
[17:47:01.656]                             next
[17:47:01.656]                           if (!grepl(pattern, name)) 
[17:47:01.656]                             next
[17:47:01.656]                           invokeRestart(restart)
[17:47:01.656]                           muffled <- TRUE
[17:47:01.656]                           break
[17:47:01.656]                         }
[17:47:01.656]                       }
[17:47:01.656]                     }
[17:47:01.656]                     invisible(muffled)
[17:47:01.656]                   }
[17:47:01.656]                   muffleCondition(cond)
[17:47:01.656]                 })
[17:47:01.656]             }))
[17:47:01.656]             future::FutureResult(value = ...future.value$value, 
[17:47:01.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.656]                   ...future.rng), globalenv = if (FALSE) 
[17:47:01.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:01.656]                     ...future.globalenv.names))
[17:47:01.656]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:01.656]         }, condition = base::local({
[17:47:01.656]             c <- base::c
[17:47:01.656]             inherits <- base::inherits
[17:47:01.656]             invokeRestart <- base::invokeRestart
[17:47:01.656]             length <- base::length
[17:47:01.656]             list <- base::list
[17:47:01.656]             seq.int <- base::seq.int
[17:47:01.656]             signalCondition <- base::signalCondition
[17:47:01.656]             sys.calls <- base::sys.calls
[17:47:01.656]             `[[` <- base::`[[`
[17:47:01.656]             `+` <- base::`+`
[17:47:01.656]             `<<-` <- base::`<<-`
[17:47:01.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:01.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:01.656]                   3L)]
[17:47:01.656]             }
[17:47:01.656]             function(cond) {
[17:47:01.656]                 is_error <- inherits(cond, "error")
[17:47:01.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:01.656]                   NULL)
[17:47:01.656]                 if (is_error) {
[17:47:01.656]                   sessionInformation <- function() {
[17:47:01.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:01.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:01.656]                       search = base::search(), system = base::Sys.info())
[17:47:01.656]                   }
[17:47:01.656]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:01.656]                     cond$call), session = sessionInformation(), 
[17:47:01.656]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:01.656]                   signalCondition(cond)
[17:47:01.656]                 }
[17:47:01.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:01.656]                 "immediateCondition"))) {
[17:47:01.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:01.656]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:01.656]                   if (TRUE && !signal) {
[17:47:01.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.656]                     {
[17:47:01.656]                       inherits <- base::inherits
[17:47:01.656]                       invokeRestart <- base::invokeRestart
[17:47:01.656]                       is.null <- base::is.null
[17:47:01.656]                       muffled <- FALSE
[17:47:01.656]                       if (inherits(cond, "message")) {
[17:47:01.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.656]                         if (muffled) 
[17:47:01.656]                           invokeRestart("muffleMessage")
[17:47:01.656]                       }
[17:47:01.656]                       else if (inherits(cond, "warning")) {
[17:47:01.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.656]                         if (muffled) 
[17:47:01.656]                           invokeRestart("muffleWarning")
[17:47:01.656]                       }
[17:47:01.656]                       else if (inherits(cond, "condition")) {
[17:47:01.656]                         if (!is.null(pattern)) {
[17:47:01.656]                           computeRestarts <- base::computeRestarts
[17:47:01.656]                           grepl <- base::grepl
[17:47:01.656]                           restarts <- computeRestarts(cond)
[17:47:01.656]                           for (restart in restarts) {
[17:47:01.656]                             name <- restart$name
[17:47:01.656]                             if (is.null(name)) 
[17:47:01.656]                               next
[17:47:01.656]                             if (!grepl(pattern, name)) 
[17:47:01.656]                               next
[17:47:01.656]                             invokeRestart(restart)
[17:47:01.656]                             muffled <- TRUE
[17:47:01.656]                             break
[17:47:01.656]                           }
[17:47:01.656]                         }
[17:47:01.656]                       }
[17:47:01.656]                       invisible(muffled)
[17:47:01.656]                     }
[17:47:01.656]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.656]                   }
[17:47:01.656]                 }
[17:47:01.656]                 else {
[17:47:01.656]                   if (TRUE) {
[17:47:01.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.656]                     {
[17:47:01.656]                       inherits <- base::inherits
[17:47:01.656]                       invokeRestart <- base::invokeRestart
[17:47:01.656]                       is.null <- base::is.null
[17:47:01.656]                       muffled <- FALSE
[17:47:01.656]                       if (inherits(cond, "message")) {
[17:47:01.656]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.656]                         if (muffled) 
[17:47:01.656]                           invokeRestart("muffleMessage")
[17:47:01.656]                       }
[17:47:01.656]                       else if (inherits(cond, "warning")) {
[17:47:01.656]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.656]                         if (muffled) 
[17:47:01.656]                           invokeRestart("muffleWarning")
[17:47:01.656]                       }
[17:47:01.656]                       else if (inherits(cond, "condition")) {
[17:47:01.656]                         if (!is.null(pattern)) {
[17:47:01.656]                           computeRestarts <- base::computeRestarts
[17:47:01.656]                           grepl <- base::grepl
[17:47:01.656]                           restarts <- computeRestarts(cond)
[17:47:01.656]                           for (restart in restarts) {
[17:47:01.656]                             name <- restart$name
[17:47:01.656]                             if (is.null(name)) 
[17:47:01.656]                               next
[17:47:01.656]                             if (!grepl(pattern, name)) 
[17:47:01.656]                               next
[17:47:01.656]                             invokeRestart(restart)
[17:47:01.656]                             muffled <- TRUE
[17:47:01.656]                             break
[17:47:01.656]                           }
[17:47:01.656]                         }
[17:47:01.656]                       }
[17:47:01.656]                       invisible(muffled)
[17:47:01.656]                     }
[17:47:01.656]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.656]                   }
[17:47:01.656]                 }
[17:47:01.656]             }
[17:47:01.656]         }))
[17:47:01.656]     }, error = function(ex) {
[17:47:01.656]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:01.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.656]                 ...future.rng), started = ...future.startTime, 
[17:47:01.656]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:01.656]             version = "1.8"), class = "FutureResult")
[17:47:01.656]     }, finally = {
[17:47:01.656]         if (!identical(...future.workdir, getwd())) 
[17:47:01.656]             setwd(...future.workdir)
[17:47:01.656]         {
[17:47:01.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:01.656]                 ...future.oldOptions$nwarnings <- NULL
[17:47:01.656]             }
[17:47:01.656]             base::options(...future.oldOptions)
[17:47:01.656]             if (.Platform$OS.type == "windows") {
[17:47:01.656]                 old_names <- names(...future.oldEnvVars)
[17:47:01.656]                 envs <- base::Sys.getenv()
[17:47:01.656]                 names <- names(envs)
[17:47:01.656]                 common <- intersect(names, old_names)
[17:47:01.656]                 added <- setdiff(names, old_names)
[17:47:01.656]                 removed <- setdiff(old_names, names)
[17:47:01.656]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:01.656]                   envs[common]]
[17:47:01.656]                 NAMES <- toupper(changed)
[17:47:01.656]                 args <- list()
[17:47:01.656]                 for (kk in seq_along(NAMES)) {
[17:47:01.656]                   name <- changed[[kk]]
[17:47:01.656]                   NAME <- NAMES[[kk]]
[17:47:01.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.656]                     next
[17:47:01.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.656]                 }
[17:47:01.656]                 NAMES <- toupper(added)
[17:47:01.656]                 for (kk in seq_along(NAMES)) {
[17:47:01.656]                   name <- added[[kk]]
[17:47:01.656]                   NAME <- NAMES[[kk]]
[17:47:01.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.656]                     next
[17:47:01.656]                   args[[name]] <- ""
[17:47:01.656]                 }
[17:47:01.656]                 NAMES <- toupper(removed)
[17:47:01.656]                 for (kk in seq_along(NAMES)) {
[17:47:01.656]                   name <- removed[[kk]]
[17:47:01.656]                   NAME <- NAMES[[kk]]
[17:47:01.656]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.656]                     next
[17:47:01.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.656]                 }
[17:47:01.656]                 if (length(args) > 0) 
[17:47:01.656]                   base::do.call(base::Sys.setenv, args = args)
[17:47:01.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:01.656]             }
[17:47:01.656]             else {
[17:47:01.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:01.656]             }
[17:47:01.656]             {
[17:47:01.656]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:01.656]                   0L) {
[17:47:01.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:01.656]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:01.656]                   base::options(opts)
[17:47:01.656]                 }
[17:47:01.656]                 {
[17:47:01.656]                   {
[17:47:01.656]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:01.656]                     NULL
[17:47:01.656]                   }
[17:47:01.656]                   options(future.plan = NULL)
[17:47:01.656]                   if (is.na(NA_character_)) 
[17:47:01.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:01.656]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:01.656]                     .init = FALSE)
[17:47:01.656]                 }
[17:47:01.656]             }
[17:47:01.656]         }
[17:47:01.656]     })
[17:47:01.656]     if (TRUE) {
[17:47:01.656]         base::sink(type = "output", split = FALSE)
[17:47:01.656]         if (TRUE) {
[17:47:01.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:01.656]         }
[17:47:01.656]         else {
[17:47:01.656]             ...future.result["stdout"] <- base::list(NULL)
[17:47:01.656]         }
[17:47:01.656]         base::close(...future.stdout)
[17:47:01.656]         ...future.stdout <- NULL
[17:47:01.656]     }
[17:47:01.656]     ...future.result$conditions <- ...future.conditions
[17:47:01.656]     ...future.result$finished <- base::Sys.time()
[17:47:01.656]     ...future.result
[17:47:01.656] }
[17:47:01.708] MultisessionFuture started
[17:47:01.708] result() for ClusterFuture ...
[17:47:01.709] receiveMessageFromWorker() for ClusterFuture ...
[17:47:01.709] - Validating connection of MultisessionFuture
[17:47:01.740] - received message: FutureResult
[17:47:01.741] - Received FutureResult
[17:47:01.741] - Erased future from FutureRegistry
[17:47:01.741] result() for ClusterFuture ...
[17:47:01.741] - result already collected: FutureResult
[17:47:01.741] result() for ClusterFuture ... done
[17:47:01.741] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:01.741] result() for ClusterFuture ... done
[17:47:01.742] result() for ClusterFuture ...
[17:47:01.742] - result already collected: FutureResult
[17:47:01.742] result() for ClusterFuture ... done
[17:47:01.742] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:47:01.746] plan(): nbrOfWorkers() = 2
[17:47:01.746] getGlobalsAndPackages() ...
[17:47:01.746] Searching for globals...
[17:47:01.749] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:47:01.749] Searching for globals ... DONE
[17:47:01.749] Resolving globals: FALSE
[17:47:01.750] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:47:01.750] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:47:01.750] - globals: [1] ‘my_fcn’
[17:47:01.751] 
[17:47:01.751] getGlobalsAndPackages() ... DONE
[17:47:01.751] run() for ‘Future’ ...
[17:47:01.751] - state: ‘created’
[17:47:01.751] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:01.766] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:01.766] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:01.766]   - Field: ‘node’
[17:47:01.766]   - Field: ‘label’
[17:47:01.766]   - Field: ‘local’
[17:47:01.766]   - Field: ‘owner’
[17:47:01.766]   - Field: ‘envir’
[17:47:01.766]   - Field: ‘workers’
[17:47:01.766]   - Field: ‘packages’
[17:47:01.767]   - Field: ‘gc’
[17:47:01.767]   - Field: ‘conditions’
[17:47:01.767]   - Field: ‘persistent’
[17:47:01.767]   - Field: ‘expr’
[17:47:01.767]   - Field: ‘uuid’
[17:47:01.767]   - Field: ‘seed’
[17:47:01.767]   - Field: ‘version’
[17:47:01.767]   - Field: ‘result’
[17:47:01.768]   - Field: ‘asynchronous’
[17:47:01.768]   - Field: ‘calls’
[17:47:01.768]   - Field: ‘globals’
[17:47:01.768]   - Field: ‘stdout’
[17:47:01.768]   - Field: ‘earlySignal’
[17:47:01.768]   - Field: ‘lazy’
[17:47:01.768]   - Field: ‘state’
[17:47:01.768] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:01.768] - Launch lazy future ...
[17:47:01.769] Packages needed by the future expression (n = 0): <none>
[17:47:01.769] Packages needed by future strategies (n = 0): <none>
[17:47:01.769] {
[17:47:01.769]     {
[17:47:01.769]         {
[17:47:01.769]             ...future.startTime <- base::Sys.time()
[17:47:01.769]             {
[17:47:01.769]                 {
[17:47:01.769]                   {
[17:47:01.769]                     {
[17:47:01.769]                       base::local({
[17:47:01.769]                         has_future <- base::requireNamespace("future", 
[17:47:01.769]                           quietly = TRUE)
[17:47:01.769]                         if (has_future) {
[17:47:01.769]                           ns <- base::getNamespace("future")
[17:47:01.769]                           version <- ns[[".package"]][["version"]]
[17:47:01.769]                           if (is.null(version)) 
[17:47:01.769]                             version <- utils::packageVersion("future")
[17:47:01.769]                         }
[17:47:01.769]                         else {
[17:47:01.769]                           version <- NULL
[17:47:01.769]                         }
[17:47:01.769]                         if (!has_future || version < "1.8.0") {
[17:47:01.769]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:01.769]                             "", base::R.version$version.string), 
[17:47:01.769]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:01.769]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:01.769]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:01.769]                               "release", "version")], collapse = " "), 
[17:47:01.769]                             hostname = base::Sys.info()[["nodename"]])
[17:47:01.769]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:01.769]                             info)
[17:47:01.769]                           info <- base::paste(info, collapse = "; ")
[17:47:01.769]                           if (!has_future) {
[17:47:01.769]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:01.769]                               info)
[17:47:01.769]                           }
[17:47:01.769]                           else {
[17:47:01.769]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:01.769]                               info, version)
[17:47:01.769]                           }
[17:47:01.769]                           base::stop(msg)
[17:47:01.769]                         }
[17:47:01.769]                       })
[17:47:01.769]                     }
[17:47:01.769]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:01.769]                     base::options(mc.cores = 1L)
[17:47:01.769]                   }
[17:47:01.769]                   ...future.strategy.old <- future::plan("list")
[17:47:01.769]                   options(future.plan = NULL)
[17:47:01.769]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.769]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:01.769]                 }
[17:47:01.769]                 ...future.workdir <- getwd()
[17:47:01.769]             }
[17:47:01.769]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:01.769]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:01.769]         }
[17:47:01.769]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:01.769]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:01.769]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:01.769]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:01.769]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:01.769]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:01.769]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:01.769]             base::names(...future.oldOptions))
[17:47:01.769]     }
[17:47:01.769]     if (FALSE) {
[17:47:01.769]     }
[17:47:01.769]     else {
[17:47:01.769]         if (TRUE) {
[17:47:01.769]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:01.769]                 open = "w")
[17:47:01.769]         }
[17:47:01.769]         else {
[17:47:01.769]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:01.769]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:01.769]         }
[17:47:01.769]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:01.769]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:01.769]             base::sink(type = "output", split = FALSE)
[17:47:01.769]             base::close(...future.stdout)
[17:47:01.769]         }, add = TRUE)
[17:47:01.769]     }
[17:47:01.769]     ...future.frame <- base::sys.nframe()
[17:47:01.769]     ...future.conditions <- base::list()
[17:47:01.769]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:01.769]     if (FALSE) {
[17:47:01.769]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:01.769]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:01.769]     }
[17:47:01.769]     ...future.result <- base::tryCatch({
[17:47:01.769]         base::withCallingHandlers({
[17:47:01.769]             ...future.value <- base::withVisible(base::local({
[17:47:01.769]                 ...future.makeSendCondition <- base::local({
[17:47:01.769]                   sendCondition <- NULL
[17:47:01.769]                   function(frame = 1L) {
[17:47:01.769]                     if (is.function(sendCondition)) 
[17:47:01.769]                       return(sendCondition)
[17:47:01.769]                     ns <- getNamespace("parallel")
[17:47:01.769]                     if (exists("sendData", mode = "function", 
[17:47:01.769]                       envir = ns)) {
[17:47:01.769]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:01.769]                         envir = ns)
[17:47:01.769]                       envir <- sys.frame(frame)
[17:47:01.769]                       master <- NULL
[17:47:01.769]                       while (!identical(envir, .GlobalEnv) && 
[17:47:01.769]                         !identical(envir, emptyenv())) {
[17:47:01.769]                         if (exists("master", mode = "list", envir = envir, 
[17:47:01.769]                           inherits = FALSE)) {
[17:47:01.769]                           master <- get("master", mode = "list", 
[17:47:01.769]                             envir = envir, inherits = FALSE)
[17:47:01.769]                           if (inherits(master, c("SOCKnode", 
[17:47:01.769]                             "SOCK0node"))) {
[17:47:01.769]                             sendCondition <<- function(cond) {
[17:47:01.769]                               data <- list(type = "VALUE", value = cond, 
[17:47:01.769]                                 success = TRUE)
[17:47:01.769]                               parallel_sendData(master, data)
[17:47:01.769]                             }
[17:47:01.769]                             return(sendCondition)
[17:47:01.769]                           }
[17:47:01.769]                         }
[17:47:01.769]                         frame <- frame + 1L
[17:47:01.769]                         envir <- sys.frame(frame)
[17:47:01.769]                       }
[17:47:01.769]                     }
[17:47:01.769]                     sendCondition <<- function(cond) NULL
[17:47:01.769]                   }
[17:47:01.769]                 })
[17:47:01.769]                 withCallingHandlers({
[17:47:01.769]                   {
[17:47:01.769]                     my_fcn
[17:47:01.769]                   }
[17:47:01.769]                 }, immediateCondition = function(cond) {
[17:47:01.769]                   sendCondition <- ...future.makeSendCondition()
[17:47:01.769]                   sendCondition(cond)
[17:47:01.769]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.769]                   {
[17:47:01.769]                     inherits <- base::inherits
[17:47:01.769]                     invokeRestart <- base::invokeRestart
[17:47:01.769]                     is.null <- base::is.null
[17:47:01.769]                     muffled <- FALSE
[17:47:01.769]                     if (inherits(cond, "message")) {
[17:47:01.769]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:01.769]                       if (muffled) 
[17:47:01.769]                         invokeRestart("muffleMessage")
[17:47:01.769]                     }
[17:47:01.769]                     else if (inherits(cond, "warning")) {
[17:47:01.769]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:01.769]                       if (muffled) 
[17:47:01.769]                         invokeRestart("muffleWarning")
[17:47:01.769]                     }
[17:47:01.769]                     else if (inherits(cond, "condition")) {
[17:47:01.769]                       if (!is.null(pattern)) {
[17:47:01.769]                         computeRestarts <- base::computeRestarts
[17:47:01.769]                         grepl <- base::grepl
[17:47:01.769]                         restarts <- computeRestarts(cond)
[17:47:01.769]                         for (restart in restarts) {
[17:47:01.769]                           name <- restart$name
[17:47:01.769]                           if (is.null(name)) 
[17:47:01.769]                             next
[17:47:01.769]                           if (!grepl(pattern, name)) 
[17:47:01.769]                             next
[17:47:01.769]                           invokeRestart(restart)
[17:47:01.769]                           muffled <- TRUE
[17:47:01.769]                           break
[17:47:01.769]                         }
[17:47:01.769]                       }
[17:47:01.769]                     }
[17:47:01.769]                     invisible(muffled)
[17:47:01.769]                   }
[17:47:01.769]                   muffleCondition(cond)
[17:47:01.769]                 })
[17:47:01.769]             }))
[17:47:01.769]             future::FutureResult(value = ...future.value$value, 
[17:47:01.769]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.769]                   ...future.rng), globalenv = if (FALSE) 
[17:47:01.769]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:01.769]                     ...future.globalenv.names))
[17:47:01.769]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:01.769]         }, condition = base::local({
[17:47:01.769]             c <- base::c
[17:47:01.769]             inherits <- base::inherits
[17:47:01.769]             invokeRestart <- base::invokeRestart
[17:47:01.769]             length <- base::length
[17:47:01.769]             list <- base::list
[17:47:01.769]             seq.int <- base::seq.int
[17:47:01.769]             signalCondition <- base::signalCondition
[17:47:01.769]             sys.calls <- base::sys.calls
[17:47:01.769]             `[[` <- base::`[[`
[17:47:01.769]             `+` <- base::`+`
[17:47:01.769]             `<<-` <- base::`<<-`
[17:47:01.769]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:01.769]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:01.769]                   3L)]
[17:47:01.769]             }
[17:47:01.769]             function(cond) {
[17:47:01.769]                 is_error <- inherits(cond, "error")
[17:47:01.769]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:01.769]                   NULL)
[17:47:01.769]                 if (is_error) {
[17:47:01.769]                   sessionInformation <- function() {
[17:47:01.769]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:01.769]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:01.769]                       search = base::search(), system = base::Sys.info())
[17:47:01.769]                   }
[17:47:01.769]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.769]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:01.769]                     cond$call), session = sessionInformation(), 
[17:47:01.769]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:01.769]                   signalCondition(cond)
[17:47:01.769]                 }
[17:47:01.769]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:01.769]                 "immediateCondition"))) {
[17:47:01.769]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:01.769]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.769]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:01.769]                   if (TRUE && !signal) {
[17:47:01.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.769]                     {
[17:47:01.769]                       inherits <- base::inherits
[17:47:01.769]                       invokeRestart <- base::invokeRestart
[17:47:01.769]                       is.null <- base::is.null
[17:47:01.769]                       muffled <- FALSE
[17:47:01.769]                       if (inherits(cond, "message")) {
[17:47:01.769]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.769]                         if (muffled) 
[17:47:01.769]                           invokeRestart("muffleMessage")
[17:47:01.769]                       }
[17:47:01.769]                       else if (inherits(cond, "warning")) {
[17:47:01.769]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.769]                         if (muffled) 
[17:47:01.769]                           invokeRestart("muffleWarning")
[17:47:01.769]                       }
[17:47:01.769]                       else if (inherits(cond, "condition")) {
[17:47:01.769]                         if (!is.null(pattern)) {
[17:47:01.769]                           computeRestarts <- base::computeRestarts
[17:47:01.769]                           grepl <- base::grepl
[17:47:01.769]                           restarts <- computeRestarts(cond)
[17:47:01.769]                           for (restart in restarts) {
[17:47:01.769]                             name <- restart$name
[17:47:01.769]                             if (is.null(name)) 
[17:47:01.769]                               next
[17:47:01.769]                             if (!grepl(pattern, name)) 
[17:47:01.769]                               next
[17:47:01.769]                             invokeRestart(restart)
[17:47:01.769]                             muffled <- TRUE
[17:47:01.769]                             break
[17:47:01.769]                           }
[17:47:01.769]                         }
[17:47:01.769]                       }
[17:47:01.769]                       invisible(muffled)
[17:47:01.769]                     }
[17:47:01.769]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.769]                   }
[17:47:01.769]                 }
[17:47:01.769]                 else {
[17:47:01.769]                   if (TRUE) {
[17:47:01.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.769]                     {
[17:47:01.769]                       inherits <- base::inherits
[17:47:01.769]                       invokeRestart <- base::invokeRestart
[17:47:01.769]                       is.null <- base::is.null
[17:47:01.769]                       muffled <- FALSE
[17:47:01.769]                       if (inherits(cond, "message")) {
[17:47:01.769]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.769]                         if (muffled) 
[17:47:01.769]                           invokeRestart("muffleMessage")
[17:47:01.769]                       }
[17:47:01.769]                       else if (inherits(cond, "warning")) {
[17:47:01.769]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.769]                         if (muffled) 
[17:47:01.769]                           invokeRestart("muffleWarning")
[17:47:01.769]                       }
[17:47:01.769]                       else if (inherits(cond, "condition")) {
[17:47:01.769]                         if (!is.null(pattern)) {
[17:47:01.769]                           computeRestarts <- base::computeRestarts
[17:47:01.769]                           grepl <- base::grepl
[17:47:01.769]                           restarts <- computeRestarts(cond)
[17:47:01.769]                           for (restart in restarts) {
[17:47:01.769]                             name <- restart$name
[17:47:01.769]                             if (is.null(name)) 
[17:47:01.769]                               next
[17:47:01.769]                             if (!grepl(pattern, name)) 
[17:47:01.769]                               next
[17:47:01.769]                             invokeRestart(restart)
[17:47:01.769]                             muffled <- TRUE
[17:47:01.769]                             break
[17:47:01.769]                           }
[17:47:01.769]                         }
[17:47:01.769]                       }
[17:47:01.769]                       invisible(muffled)
[17:47:01.769]                     }
[17:47:01.769]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.769]                   }
[17:47:01.769]                 }
[17:47:01.769]             }
[17:47:01.769]         }))
[17:47:01.769]     }, error = function(ex) {
[17:47:01.769]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:01.769]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.769]                 ...future.rng), started = ...future.startTime, 
[17:47:01.769]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:01.769]             version = "1.8"), class = "FutureResult")
[17:47:01.769]     }, finally = {
[17:47:01.769]         if (!identical(...future.workdir, getwd())) 
[17:47:01.769]             setwd(...future.workdir)
[17:47:01.769]         {
[17:47:01.769]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:01.769]                 ...future.oldOptions$nwarnings <- NULL
[17:47:01.769]             }
[17:47:01.769]             base::options(...future.oldOptions)
[17:47:01.769]             if (.Platform$OS.type == "windows") {
[17:47:01.769]                 old_names <- names(...future.oldEnvVars)
[17:47:01.769]                 envs <- base::Sys.getenv()
[17:47:01.769]                 names <- names(envs)
[17:47:01.769]                 common <- intersect(names, old_names)
[17:47:01.769]                 added <- setdiff(names, old_names)
[17:47:01.769]                 removed <- setdiff(old_names, names)
[17:47:01.769]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:01.769]                   envs[common]]
[17:47:01.769]                 NAMES <- toupper(changed)
[17:47:01.769]                 args <- list()
[17:47:01.769]                 for (kk in seq_along(NAMES)) {
[17:47:01.769]                   name <- changed[[kk]]
[17:47:01.769]                   NAME <- NAMES[[kk]]
[17:47:01.769]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.769]                     next
[17:47:01.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.769]                 }
[17:47:01.769]                 NAMES <- toupper(added)
[17:47:01.769]                 for (kk in seq_along(NAMES)) {
[17:47:01.769]                   name <- added[[kk]]
[17:47:01.769]                   NAME <- NAMES[[kk]]
[17:47:01.769]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.769]                     next
[17:47:01.769]                   args[[name]] <- ""
[17:47:01.769]                 }
[17:47:01.769]                 NAMES <- toupper(removed)
[17:47:01.769]                 for (kk in seq_along(NAMES)) {
[17:47:01.769]                   name <- removed[[kk]]
[17:47:01.769]                   NAME <- NAMES[[kk]]
[17:47:01.769]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.769]                     next
[17:47:01.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.769]                 }
[17:47:01.769]                 if (length(args) > 0) 
[17:47:01.769]                   base::do.call(base::Sys.setenv, args = args)
[17:47:01.769]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:01.769]             }
[17:47:01.769]             else {
[17:47:01.769]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:01.769]             }
[17:47:01.769]             {
[17:47:01.769]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:01.769]                   0L) {
[17:47:01.769]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:01.769]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:01.769]                   base::options(opts)
[17:47:01.769]                 }
[17:47:01.769]                 {
[17:47:01.769]                   {
[17:47:01.769]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:01.769]                     NULL
[17:47:01.769]                   }
[17:47:01.769]                   options(future.plan = NULL)
[17:47:01.769]                   if (is.na(NA_character_)) 
[17:47:01.769]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.769]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:01.769]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:01.769]                     .init = FALSE)
[17:47:01.769]                 }
[17:47:01.769]             }
[17:47:01.769]         }
[17:47:01.769]     })
[17:47:01.769]     if (TRUE) {
[17:47:01.769]         base::sink(type = "output", split = FALSE)
[17:47:01.769]         if (TRUE) {
[17:47:01.769]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:01.769]         }
[17:47:01.769]         else {
[17:47:01.769]             ...future.result["stdout"] <- base::list(NULL)
[17:47:01.769]         }
[17:47:01.769]         base::close(...future.stdout)
[17:47:01.769]         ...future.stdout <- NULL
[17:47:01.769]     }
[17:47:01.769]     ...future.result$conditions <- ...future.conditions
[17:47:01.769]     ...future.result$finished <- base::Sys.time()
[17:47:01.769]     ...future.result
[17:47:01.769] }
[17:47:01.772] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[17:47:01.773] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[17:47:01.773] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[17:47:01.773] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[17:47:01.774] MultisessionFuture started
[17:47:01.774] - Launch lazy future ... done
[17:47:01.774] run() for ‘MultisessionFuture’ ... done
[17:47:01.774] result() for ClusterFuture ...
[17:47:01.775] receiveMessageFromWorker() for ClusterFuture ...
[17:47:01.775] - Validating connection of MultisessionFuture
[17:47:01.776] - received message: FutureResult
[17:47:01.776] - Received FutureResult
[17:47:01.776] - Erased future from FutureRegistry
[17:47:01.776] result() for ClusterFuture ...
[17:47:01.777] - result already collected: FutureResult
[17:47:01.777] result() for ClusterFuture ... done
[17:47:01.777] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:01.777] result() for ClusterFuture ... done
[17:47:01.777] result() for ClusterFuture ...
[17:47:01.777] - result already collected: FutureResult
[17:47:01.777] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x55c257fbc960>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[17:47:01.778] getGlobalsAndPackages() ...
[17:47:01.778] Searching for globals...
[17:47:01.781] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[17:47:01.781] Searching for globals ... DONE
[17:47:01.781] Resolving globals: FALSE
[17:47:01.781] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[17:47:01.782] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[17:47:01.782] - globals: [1] ‘my_fcn’
[17:47:01.782] 
[17:47:01.782] getGlobalsAndPackages() ... DONE
[17:47:01.783] run() for ‘Future’ ...
[17:47:01.783] - state: ‘created’
[17:47:01.783] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:47:01.797] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:01.797] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:47:01.797]   - Field: ‘node’
[17:47:01.797]   - Field: ‘label’
[17:47:01.798]   - Field: ‘local’
[17:47:01.798]   - Field: ‘owner’
[17:47:01.798]   - Field: ‘envir’
[17:47:01.798]   - Field: ‘workers’
[17:47:01.798]   - Field: ‘packages’
[17:47:01.798]   - Field: ‘gc’
[17:47:01.798]   - Field: ‘conditions’
[17:47:01.798]   - Field: ‘persistent’
[17:47:01.798]   - Field: ‘expr’
[17:47:01.798]   - Field: ‘uuid’
[17:47:01.799]   - Field: ‘seed’
[17:47:01.799]   - Field: ‘version’
[17:47:01.799]   - Field: ‘result’
[17:47:01.799]   - Field: ‘asynchronous’
[17:47:01.799]   - Field: ‘calls’
[17:47:01.799]   - Field: ‘globals’
[17:47:01.799]   - Field: ‘stdout’
[17:47:01.799]   - Field: ‘earlySignal’
[17:47:01.799]   - Field: ‘lazy’
[17:47:01.800]   - Field: ‘state’
[17:47:01.800] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:47:01.800] - Launch lazy future ...
[17:47:01.800] Packages needed by the future expression (n = 0): <none>
[17:47:01.800] Packages needed by future strategies (n = 0): <none>
[17:47:01.801] {
[17:47:01.801]     {
[17:47:01.801]         {
[17:47:01.801]             ...future.startTime <- base::Sys.time()
[17:47:01.801]             {
[17:47:01.801]                 {
[17:47:01.801]                   {
[17:47:01.801]                     {
[17:47:01.801]                       base::local({
[17:47:01.801]                         has_future <- base::requireNamespace("future", 
[17:47:01.801]                           quietly = TRUE)
[17:47:01.801]                         if (has_future) {
[17:47:01.801]                           ns <- base::getNamespace("future")
[17:47:01.801]                           version <- ns[[".package"]][["version"]]
[17:47:01.801]                           if (is.null(version)) 
[17:47:01.801]                             version <- utils::packageVersion("future")
[17:47:01.801]                         }
[17:47:01.801]                         else {
[17:47:01.801]                           version <- NULL
[17:47:01.801]                         }
[17:47:01.801]                         if (!has_future || version < "1.8.0") {
[17:47:01.801]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:01.801]                             "", base::R.version$version.string), 
[17:47:01.801]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:01.801]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:01.801]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:01.801]                               "release", "version")], collapse = " "), 
[17:47:01.801]                             hostname = base::Sys.info()[["nodename"]])
[17:47:01.801]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:01.801]                             info)
[17:47:01.801]                           info <- base::paste(info, collapse = "; ")
[17:47:01.801]                           if (!has_future) {
[17:47:01.801]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:01.801]                               info)
[17:47:01.801]                           }
[17:47:01.801]                           else {
[17:47:01.801]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:01.801]                               info, version)
[17:47:01.801]                           }
[17:47:01.801]                           base::stop(msg)
[17:47:01.801]                         }
[17:47:01.801]                       })
[17:47:01.801]                     }
[17:47:01.801]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:01.801]                     base::options(mc.cores = 1L)
[17:47:01.801]                   }
[17:47:01.801]                   ...future.strategy.old <- future::plan("list")
[17:47:01.801]                   options(future.plan = NULL)
[17:47:01.801]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.801]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:01.801]                 }
[17:47:01.801]                 ...future.workdir <- getwd()
[17:47:01.801]             }
[17:47:01.801]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:01.801]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:01.801]         }
[17:47:01.801]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:01.801]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:01.801]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:01.801]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:01.801]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:01.801]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:01.801]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:01.801]             base::names(...future.oldOptions))
[17:47:01.801]     }
[17:47:01.801]     if (FALSE) {
[17:47:01.801]     }
[17:47:01.801]     else {
[17:47:01.801]         if (TRUE) {
[17:47:01.801]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:01.801]                 open = "w")
[17:47:01.801]         }
[17:47:01.801]         else {
[17:47:01.801]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:01.801]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:01.801]         }
[17:47:01.801]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:01.801]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:01.801]             base::sink(type = "output", split = FALSE)
[17:47:01.801]             base::close(...future.stdout)
[17:47:01.801]         }, add = TRUE)
[17:47:01.801]     }
[17:47:01.801]     ...future.frame <- base::sys.nframe()
[17:47:01.801]     ...future.conditions <- base::list()
[17:47:01.801]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:01.801]     if (FALSE) {
[17:47:01.801]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:01.801]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:01.801]     }
[17:47:01.801]     ...future.result <- base::tryCatch({
[17:47:01.801]         base::withCallingHandlers({
[17:47:01.801]             ...future.value <- base::withVisible(base::local({
[17:47:01.801]                 ...future.makeSendCondition <- base::local({
[17:47:01.801]                   sendCondition <- NULL
[17:47:01.801]                   function(frame = 1L) {
[17:47:01.801]                     if (is.function(sendCondition)) 
[17:47:01.801]                       return(sendCondition)
[17:47:01.801]                     ns <- getNamespace("parallel")
[17:47:01.801]                     if (exists("sendData", mode = "function", 
[17:47:01.801]                       envir = ns)) {
[17:47:01.801]                       parallel_sendData <- get("sendData", mode = "function", 
[17:47:01.801]                         envir = ns)
[17:47:01.801]                       envir <- sys.frame(frame)
[17:47:01.801]                       master <- NULL
[17:47:01.801]                       while (!identical(envir, .GlobalEnv) && 
[17:47:01.801]                         !identical(envir, emptyenv())) {
[17:47:01.801]                         if (exists("master", mode = "list", envir = envir, 
[17:47:01.801]                           inherits = FALSE)) {
[17:47:01.801]                           master <- get("master", mode = "list", 
[17:47:01.801]                             envir = envir, inherits = FALSE)
[17:47:01.801]                           if (inherits(master, c("SOCKnode", 
[17:47:01.801]                             "SOCK0node"))) {
[17:47:01.801]                             sendCondition <<- function(cond) {
[17:47:01.801]                               data <- list(type = "VALUE", value = cond, 
[17:47:01.801]                                 success = TRUE)
[17:47:01.801]                               parallel_sendData(master, data)
[17:47:01.801]                             }
[17:47:01.801]                             return(sendCondition)
[17:47:01.801]                           }
[17:47:01.801]                         }
[17:47:01.801]                         frame <- frame + 1L
[17:47:01.801]                         envir <- sys.frame(frame)
[17:47:01.801]                       }
[17:47:01.801]                     }
[17:47:01.801]                     sendCondition <<- function(cond) NULL
[17:47:01.801]                   }
[17:47:01.801]                 })
[17:47:01.801]                 withCallingHandlers({
[17:47:01.801]                   {
[17:47:01.801]                     my_fcn(3)
[17:47:01.801]                   }
[17:47:01.801]                 }, immediateCondition = function(cond) {
[17:47:01.801]                   sendCondition <- ...future.makeSendCondition()
[17:47:01.801]                   sendCondition(cond)
[17:47:01.801]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.801]                   {
[17:47:01.801]                     inherits <- base::inherits
[17:47:01.801]                     invokeRestart <- base::invokeRestart
[17:47:01.801]                     is.null <- base::is.null
[17:47:01.801]                     muffled <- FALSE
[17:47:01.801]                     if (inherits(cond, "message")) {
[17:47:01.801]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:01.801]                       if (muffled) 
[17:47:01.801]                         invokeRestart("muffleMessage")
[17:47:01.801]                     }
[17:47:01.801]                     else if (inherits(cond, "warning")) {
[17:47:01.801]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:01.801]                       if (muffled) 
[17:47:01.801]                         invokeRestart("muffleWarning")
[17:47:01.801]                     }
[17:47:01.801]                     else if (inherits(cond, "condition")) {
[17:47:01.801]                       if (!is.null(pattern)) {
[17:47:01.801]                         computeRestarts <- base::computeRestarts
[17:47:01.801]                         grepl <- base::grepl
[17:47:01.801]                         restarts <- computeRestarts(cond)
[17:47:01.801]                         for (restart in restarts) {
[17:47:01.801]                           name <- restart$name
[17:47:01.801]                           if (is.null(name)) 
[17:47:01.801]                             next
[17:47:01.801]                           if (!grepl(pattern, name)) 
[17:47:01.801]                             next
[17:47:01.801]                           invokeRestart(restart)
[17:47:01.801]                           muffled <- TRUE
[17:47:01.801]                           break
[17:47:01.801]                         }
[17:47:01.801]                       }
[17:47:01.801]                     }
[17:47:01.801]                     invisible(muffled)
[17:47:01.801]                   }
[17:47:01.801]                   muffleCondition(cond)
[17:47:01.801]                 })
[17:47:01.801]             }))
[17:47:01.801]             future::FutureResult(value = ...future.value$value, 
[17:47:01.801]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.801]                   ...future.rng), globalenv = if (FALSE) 
[17:47:01.801]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:01.801]                     ...future.globalenv.names))
[17:47:01.801]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:01.801]         }, condition = base::local({
[17:47:01.801]             c <- base::c
[17:47:01.801]             inherits <- base::inherits
[17:47:01.801]             invokeRestart <- base::invokeRestart
[17:47:01.801]             length <- base::length
[17:47:01.801]             list <- base::list
[17:47:01.801]             seq.int <- base::seq.int
[17:47:01.801]             signalCondition <- base::signalCondition
[17:47:01.801]             sys.calls <- base::sys.calls
[17:47:01.801]             `[[` <- base::`[[`
[17:47:01.801]             `+` <- base::`+`
[17:47:01.801]             `<<-` <- base::`<<-`
[17:47:01.801]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:01.801]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:01.801]                   3L)]
[17:47:01.801]             }
[17:47:01.801]             function(cond) {
[17:47:01.801]                 is_error <- inherits(cond, "error")
[17:47:01.801]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:01.801]                   NULL)
[17:47:01.801]                 if (is_error) {
[17:47:01.801]                   sessionInformation <- function() {
[17:47:01.801]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:01.801]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:01.801]                       search = base::search(), system = base::Sys.info())
[17:47:01.801]                   }
[17:47:01.801]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.801]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:01.801]                     cond$call), session = sessionInformation(), 
[17:47:01.801]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:01.801]                   signalCondition(cond)
[17:47:01.801]                 }
[17:47:01.801]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:01.801]                 "immediateCondition"))) {
[17:47:01.801]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:01.801]                   ...future.conditions[[length(...future.conditions) + 
[17:47:01.801]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:01.801]                   if (TRUE && !signal) {
[17:47:01.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.801]                     {
[17:47:01.801]                       inherits <- base::inherits
[17:47:01.801]                       invokeRestart <- base::invokeRestart
[17:47:01.801]                       is.null <- base::is.null
[17:47:01.801]                       muffled <- FALSE
[17:47:01.801]                       if (inherits(cond, "message")) {
[17:47:01.801]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.801]                         if (muffled) 
[17:47:01.801]                           invokeRestart("muffleMessage")
[17:47:01.801]                       }
[17:47:01.801]                       else if (inherits(cond, "warning")) {
[17:47:01.801]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.801]                         if (muffled) 
[17:47:01.801]                           invokeRestart("muffleWarning")
[17:47:01.801]                       }
[17:47:01.801]                       else if (inherits(cond, "condition")) {
[17:47:01.801]                         if (!is.null(pattern)) {
[17:47:01.801]                           computeRestarts <- base::computeRestarts
[17:47:01.801]                           grepl <- base::grepl
[17:47:01.801]                           restarts <- computeRestarts(cond)
[17:47:01.801]                           for (restart in restarts) {
[17:47:01.801]                             name <- restart$name
[17:47:01.801]                             if (is.null(name)) 
[17:47:01.801]                               next
[17:47:01.801]                             if (!grepl(pattern, name)) 
[17:47:01.801]                               next
[17:47:01.801]                             invokeRestart(restart)
[17:47:01.801]                             muffled <- TRUE
[17:47:01.801]                             break
[17:47:01.801]                           }
[17:47:01.801]                         }
[17:47:01.801]                       }
[17:47:01.801]                       invisible(muffled)
[17:47:01.801]                     }
[17:47:01.801]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.801]                   }
[17:47:01.801]                 }
[17:47:01.801]                 else {
[17:47:01.801]                   if (TRUE) {
[17:47:01.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:01.801]                     {
[17:47:01.801]                       inherits <- base::inherits
[17:47:01.801]                       invokeRestart <- base::invokeRestart
[17:47:01.801]                       is.null <- base::is.null
[17:47:01.801]                       muffled <- FALSE
[17:47:01.801]                       if (inherits(cond, "message")) {
[17:47:01.801]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:01.801]                         if (muffled) 
[17:47:01.801]                           invokeRestart("muffleMessage")
[17:47:01.801]                       }
[17:47:01.801]                       else if (inherits(cond, "warning")) {
[17:47:01.801]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:01.801]                         if (muffled) 
[17:47:01.801]                           invokeRestart("muffleWarning")
[17:47:01.801]                       }
[17:47:01.801]                       else if (inherits(cond, "condition")) {
[17:47:01.801]                         if (!is.null(pattern)) {
[17:47:01.801]                           computeRestarts <- base::computeRestarts
[17:47:01.801]                           grepl <- base::grepl
[17:47:01.801]                           restarts <- computeRestarts(cond)
[17:47:01.801]                           for (restart in restarts) {
[17:47:01.801]                             name <- restart$name
[17:47:01.801]                             if (is.null(name)) 
[17:47:01.801]                               next
[17:47:01.801]                             if (!grepl(pattern, name)) 
[17:47:01.801]                               next
[17:47:01.801]                             invokeRestart(restart)
[17:47:01.801]                             muffled <- TRUE
[17:47:01.801]                             break
[17:47:01.801]                           }
[17:47:01.801]                         }
[17:47:01.801]                       }
[17:47:01.801]                       invisible(muffled)
[17:47:01.801]                     }
[17:47:01.801]                     muffleCondition(cond, pattern = "^muffle")
[17:47:01.801]                   }
[17:47:01.801]                 }
[17:47:01.801]             }
[17:47:01.801]         }))
[17:47:01.801]     }, error = function(ex) {
[17:47:01.801]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:01.801]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:01.801]                 ...future.rng), started = ...future.startTime, 
[17:47:01.801]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:01.801]             version = "1.8"), class = "FutureResult")
[17:47:01.801]     }, finally = {
[17:47:01.801]         if (!identical(...future.workdir, getwd())) 
[17:47:01.801]             setwd(...future.workdir)
[17:47:01.801]         {
[17:47:01.801]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:01.801]                 ...future.oldOptions$nwarnings <- NULL
[17:47:01.801]             }
[17:47:01.801]             base::options(...future.oldOptions)
[17:47:01.801]             if (.Platform$OS.type == "windows") {
[17:47:01.801]                 old_names <- names(...future.oldEnvVars)
[17:47:01.801]                 envs <- base::Sys.getenv()
[17:47:01.801]                 names <- names(envs)
[17:47:01.801]                 common <- intersect(names, old_names)
[17:47:01.801]                 added <- setdiff(names, old_names)
[17:47:01.801]                 removed <- setdiff(old_names, names)
[17:47:01.801]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:01.801]                   envs[common]]
[17:47:01.801]                 NAMES <- toupper(changed)
[17:47:01.801]                 args <- list()
[17:47:01.801]                 for (kk in seq_along(NAMES)) {
[17:47:01.801]                   name <- changed[[kk]]
[17:47:01.801]                   NAME <- NAMES[[kk]]
[17:47:01.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.801]                     next
[17:47:01.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.801]                 }
[17:47:01.801]                 NAMES <- toupper(added)
[17:47:01.801]                 for (kk in seq_along(NAMES)) {
[17:47:01.801]                   name <- added[[kk]]
[17:47:01.801]                   NAME <- NAMES[[kk]]
[17:47:01.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.801]                     next
[17:47:01.801]                   args[[name]] <- ""
[17:47:01.801]                 }
[17:47:01.801]                 NAMES <- toupper(removed)
[17:47:01.801]                 for (kk in seq_along(NAMES)) {
[17:47:01.801]                   name <- removed[[kk]]
[17:47:01.801]                   NAME <- NAMES[[kk]]
[17:47:01.801]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:01.801]                     next
[17:47:01.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:01.801]                 }
[17:47:01.801]                 if (length(args) > 0) 
[17:47:01.801]                   base::do.call(base::Sys.setenv, args = args)
[17:47:01.801]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:01.801]             }
[17:47:01.801]             else {
[17:47:01.801]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:01.801]             }
[17:47:01.801]             {
[17:47:01.801]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:01.801]                   0L) {
[17:47:01.801]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:01.801]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:01.801]                   base::options(opts)
[17:47:01.801]                 }
[17:47:01.801]                 {
[17:47:01.801]                   {
[17:47:01.801]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:01.801]                     NULL
[17:47:01.801]                   }
[17:47:01.801]                   options(future.plan = NULL)
[17:47:01.801]                   if (is.na(NA_character_)) 
[17:47:01.801]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:01.801]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:01.801]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:01.801]                     .init = FALSE)
[17:47:01.801]                 }
[17:47:01.801]             }
[17:47:01.801]         }
[17:47:01.801]     })
[17:47:01.801]     if (TRUE) {
[17:47:01.801]         base::sink(type = "output", split = FALSE)
[17:47:01.801]         if (TRUE) {
[17:47:01.801]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:01.801]         }
[17:47:01.801]         else {
[17:47:01.801]             ...future.result["stdout"] <- base::list(NULL)
[17:47:01.801]         }
[17:47:01.801]         base::close(...future.stdout)
[17:47:01.801]         ...future.stdout <- NULL
[17:47:01.801]     }
[17:47:01.801]     ...future.result$conditions <- ...future.conditions
[17:47:01.801]     ...future.result$finished <- base::Sys.time()
[17:47:01.801]     ...future.result
[17:47:01.801] }
[17:47:01.804] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[17:47:01.804] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[17:47:01.804] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[17:47:01.804] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[17:47:01.805] MultisessionFuture started
[17:47:01.805] - Launch lazy future ... done
[17:47:01.805] run() for ‘MultisessionFuture’ ... done
[17:47:01.805] result() for ClusterFuture ...
[17:47:01.805] receiveMessageFromWorker() for ClusterFuture ...
[17:47:01.806] - Validating connection of MultisessionFuture
[17:47:01.811] - received message: FutureResult
[17:47:01.811] - Received FutureResult
[17:47:01.811] - Erased future from FutureRegistry
[17:47:01.812] result() for ClusterFuture ...
[17:47:01.812] - result already collected: FutureResult
[17:47:01.812] result() for ClusterFuture ... done
[17:47:01.812] receiveMessageFromWorker() for ClusterFuture ... done
[17:47:01.812] result() for ClusterFuture ... done
[17:47:01.812] result() for ClusterFuture ...
[17:47:01.812] - result already collected: FutureResult
[17:47:01.812] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[17:47:01.813] plan(): Setting new future strategy stack:
[17:47:01.813] List of future strategies:
[17:47:01.813] 1. FutureStrategy:
[17:47:01.813]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:01.813]    - tweaked: FALSE
[17:47:01.813]    - call: future::plan(oplan)
[17:47:01.814] plan(): nbrOfWorkers() = 1
> 
