
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:03:07.226] plan(): Setting new future strategy stack:
[17:03:07.227] List of future strategies:
[17:03:07.227] 1. sequential:
[17:03:07.227]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:07.227]    - tweaked: FALSE
[17:03:07.227]    - call: future::plan("sequential")
[17:03:07.238] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[17:03:07.260] plan(): Setting new future strategy stack:
[17:03:07.260] List of future strategies:
[17:03:07.260] 1. sequential:
[17:03:07.260]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:07.260]    - tweaked: FALSE
[17:03:07.260]    - call: plan(strategy)
[17:03:07.271] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[17:03:07.305] plan(): Setting new future strategy stack:
[17:03:07.305] List of future strategies:
[17:03:07.305] 1. multisession:
[17:03:07.305]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:07.305]    - tweaked: FALSE
[17:03:07.305]    - call: plan(strategy)
[17:03:07.305] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:07.305] multisession:
[17:03:07.305] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:03:07.305] - tweaked: FALSE
[17:03:07.305] - call: plan(strategy)
[17:03:07.311] getGlobalsAndPackages() ...
[17:03:07.311] Not searching for globals
[17:03:07.311] - globals: [0] <none>
[17:03:07.312] getGlobalsAndPackages() ... DONE
[17:03:07.312] [local output] makeClusterPSOCK() ...
[17:03:07.346] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:07.348] [local output] Base port: 11623
[17:03:07.348] [local output] Getting setup options for 2 cluster nodes ...
[17:03:07.348] [local output]  - Node 1 of 2 ...
[17:03:07.348] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:07.349] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a241ead5b6.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a241ead5b6.pid")'’
[17:03:07.539] - Possible to infer worker's PID: TRUE
[17:03:07.540] [local output] Rscript port: 11623

[17:03:07.540] [local output]  - Node 2 of 2 ...
[17:03:07.541] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:07.541] [local output] Rscript port: 11623

[17:03:07.541] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:07.542] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:07.542] [local output] Setting up PSOCK nodes in parallel
[17:03:07.542] List of 36
[17:03:07.542]  $ worker          : chr "localhost"
[17:03:07.542]   ..- attr(*, "localhost")= logi TRUE
[17:03:07.542]  $ master          : chr "localhost"
[17:03:07.542]  $ port            : int 11623
[17:03:07.542]  $ connectTimeout  : num 120
[17:03:07.542]  $ timeout         : num 2592000
[17:03:07.542]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:07.542]  $ homogeneous     : logi TRUE
[17:03:07.542]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:07.542]  $ rscript_envs    : NULL
[17:03:07.542]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:07.542]  $ rscript_startup : NULL
[17:03:07.542]  $ rscript_sh      : chr "sh"
[17:03:07.542]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:07.542]  $ methods         : logi TRUE
[17:03:07.542]  $ socketOptions   : chr "no-delay"
[17:03:07.542]  $ useXDR          : logi FALSE
[17:03:07.542]  $ outfile         : chr "/dev/null"
[17:03:07.542]  $ renice          : int NA
[17:03:07.542]  $ rshcmd          : NULL
[17:03:07.542]  $ user            : chr(0) 
[17:03:07.542]  $ revtunnel       : logi FALSE
[17:03:07.542]  $ rshlogfile      : NULL
[17:03:07.542]  $ rshopts         : chr(0) 
[17:03:07.542]  $ rank            : int 1
[17:03:07.542]  $ manual          : logi FALSE
[17:03:07.542]  $ dryrun          : logi FALSE
[17:03:07.542]  $ quiet           : logi FALSE
[17:03:07.542]  $ setup_strategy  : chr "parallel"
[17:03:07.542]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:07.542]  $ pidfile         : chr "/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a241ead5b6.pid"
[17:03:07.542]  $ rshcmd_label    : NULL
[17:03:07.542]  $ rsh_call        : NULL
[17:03:07.542]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:07.542]  $ localMachine    : logi TRUE
[17:03:07.542]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:07.542]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:07.542]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:07.542]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:07.542]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:07.542]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:07.542]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:07.542]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:07.542]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:07.542]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:07.542]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:07.542]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:07.542]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:07.542]  $ arguments       :List of 28
[17:03:07.542]   ..$ worker          : chr "localhost"
[17:03:07.542]   ..$ master          : NULL
[17:03:07.542]   ..$ port            : int 11623
[17:03:07.542]   ..$ connectTimeout  : num 120
[17:03:07.542]   ..$ timeout         : num 2592000
[17:03:07.542]   ..$ rscript         : NULL
[17:03:07.542]   ..$ homogeneous     : NULL
[17:03:07.542]   ..$ rscript_args    : NULL
[17:03:07.542]   ..$ rscript_envs    : NULL
[17:03:07.542]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:03:07.542]   ..$ rscript_startup : NULL
[17:03:07.542]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:07.542]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:07.542]   ..$ methods         : logi TRUE
[17:03:07.542]   ..$ socketOptions   : chr "no-delay"
[17:03:07.542]   ..$ useXDR          : logi FALSE
[17:03:07.542]   ..$ outfile         : chr "/dev/null"
[17:03:07.542]   ..$ renice          : int NA
[17:03:07.542]   ..$ rshcmd          : NULL
[17:03:07.542]   ..$ user            : NULL
[17:03:07.542]   ..$ revtunnel       : logi NA
[17:03:07.542]   ..$ rshlogfile      : NULL
[17:03:07.542]   ..$ rshopts         : NULL
[17:03:07.542]   ..$ rank            : int 1
[17:03:07.542]   ..$ manual          : logi FALSE
[17:03:07.542]   ..$ dryrun          : logi FALSE
[17:03:07.542]   ..$ quiet           : logi FALSE
[17:03:07.542]   ..$ setup_strategy  : chr "parallel"
[17:03:07.542]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:07.561] [local output] System call to launch all workers:
[17:03:07.561] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a241ead5b6.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11623 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:07.561] [local output] Starting PSOCK main server
[17:03:07.567] [local output] Workers launched
[17:03:07.567] [local output] Waiting for workers to connect back
[17:03:07.567]  - [local output] 0 workers out of 2 ready
[17:03:07.860]  - [local output] 0 workers out of 2 ready
[17:03:07.861]  - [local output] 1 workers out of 2 ready
[17:03:07.868]  - [local output] 1 workers out of 2 ready
[17:03:07.868]  - [local output] 2 workers out of 2 ready
[17:03:07.868] [local output] Launching of workers completed
[17:03:07.869] [local output] Collecting session information from workers
[17:03:07.869] [local output]  - Worker #1 of 2
[17:03:07.870] [local output]  - Worker #2 of 2
[17:03:07.870] [local output] makeClusterPSOCK() ... done
[17:03:07.882] Packages needed by the future expression (n = 0): <none>
[17:03:07.882] Packages needed by future strategies (n = 0): <none>
[17:03:07.883] {
[17:03:07.883]     {
[17:03:07.883]         {
[17:03:07.883]             ...future.startTime <- base::Sys.time()
[17:03:07.883]             {
[17:03:07.883]                 {
[17:03:07.883]                   {
[17:03:07.883]                     {
[17:03:07.883]                       base::local({
[17:03:07.883]                         has_future <- base::requireNamespace("future", 
[17:03:07.883]                           quietly = TRUE)
[17:03:07.883]                         if (has_future) {
[17:03:07.883]                           ns <- base::getNamespace("future")
[17:03:07.883]                           version <- ns[[".package"]][["version"]]
[17:03:07.883]                           if (is.null(version)) 
[17:03:07.883]                             version <- utils::packageVersion("future")
[17:03:07.883]                         }
[17:03:07.883]                         else {
[17:03:07.883]                           version <- NULL
[17:03:07.883]                         }
[17:03:07.883]                         if (!has_future || version < "1.8.0") {
[17:03:07.883]                           info <- base::c(r_version = base::gsub("R version ", 
[17:03:07.883]                             "", base::R.version$version.string), 
[17:03:07.883]                             platform = base::sprintf("%s (%s-bit)", 
[17:03:07.883]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:07.883]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:07.883]                               "release", "version")], collapse = " "), 
[17:03:07.883]                             hostname = base::Sys.info()[["nodename"]])
[17:03:07.883]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:03:07.883]                             info)
[17:03:07.883]                           info <- base::paste(info, collapse = "; ")
[17:03:07.883]                           if (!has_future) {
[17:03:07.883]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:07.883]                               info)
[17:03:07.883]                           }
[17:03:07.883]                           else {
[17:03:07.883]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:07.883]                               info, version)
[17:03:07.883]                           }
[17:03:07.883]                           base::stop(msg)
[17:03:07.883]                         }
[17:03:07.883]                       })
[17:03:07.883]                     }
[17:03:07.883]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:03:07.883]                     base::options(mc.cores = 1L)
[17:03:07.883]                   }
[17:03:07.883]                   ...future.strategy.old <- future::plan("list")
[17:03:07.883]                   options(future.plan = NULL)
[17:03:07.883]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:07.883]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:07.883]                 }
[17:03:07.883]                 ...future.workdir <- getwd()
[17:03:07.883]             }
[17:03:07.883]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:07.883]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:07.883]         }
[17:03:07.883]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:07.883]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:07.883]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:07.883]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:07.883]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:07.883]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:07.883]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:07.883]             base::names(...future.oldOptions))
[17:03:07.883]     }
[17:03:07.883]     if (FALSE) {
[17:03:07.883]     }
[17:03:07.883]     else {
[17:03:07.883]         if (TRUE) {
[17:03:07.883]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:07.883]                 open = "w")
[17:03:07.883]         }
[17:03:07.883]         else {
[17:03:07.883]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:07.883]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:07.883]         }
[17:03:07.883]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:07.883]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:07.883]             base::sink(type = "output", split = FALSE)
[17:03:07.883]             base::close(...future.stdout)
[17:03:07.883]         }, add = TRUE)
[17:03:07.883]     }
[17:03:07.883]     ...future.frame <- base::sys.nframe()
[17:03:07.883]     ...future.conditions <- base::list()
[17:03:07.883]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:07.883]     if (FALSE) {
[17:03:07.883]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:07.883]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:07.883]     }
[17:03:07.883]     ...future.result <- base::tryCatch({
[17:03:07.883]         base::withCallingHandlers({
[17:03:07.883]             ...future.value <- base::withVisible(base::local({
[17:03:07.883]                 ...future.makeSendCondition <- base::local({
[17:03:07.883]                   sendCondition <- NULL
[17:03:07.883]                   function(frame = 1L) {
[17:03:07.883]                     if (is.function(sendCondition)) 
[17:03:07.883]                       return(sendCondition)
[17:03:07.883]                     ns <- getNamespace("parallel")
[17:03:07.883]                     if (exists("sendData", mode = "function", 
[17:03:07.883]                       envir = ns)) {
[17:03:07.883]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:07.883]                         envir = ns)
[17:03:07.883]                       envir <- sys.frame(frame)
[17:03:07.883]                       master <- NULL
[17:03:07.883]                       while (!identical(envir, .GlobalEnv) && 
[17:03:07.883]                         !identical(envir, emptyenv())) {
[17:03:07.883]                         if (exists("master", mode = "list", envir = envir, 
[17:03:07.883]                           inherits = FALSE)) {
[17:03:07.883]                           master <- get("master", mode = "list", 
[17:03:07.883]                             envir = envir, inherits = FALSE)
[17:03:07.883]                           if (inherits(master, c("SOCKnode", 
[17:03:07.883]                             "SOCK0node"))) {
[17:03:07.883]                             sendCondition <<- function(cond) {
[17:03:07.883]                               data <- list(type = "VALUE", value = cond, 
[17:03:07.883]                                 success = TRUE)
[17:03:07.883]                               parallel_sendData(master, data)
[17:03:07.883]                             }
[17:03:07.883]                             return(sendCondition)
[17:03:07.883]                           }
[17:03:07.883]                         }
[17:03:07.883]                         frame <- frame + 1L
[17:03:07.883]                         envir <- sys.frame(frame)
[17:03:07.883]                       }
[17:03:07.883]                     }
[17:03:07.883]                     sendCondition <<- function(cond) NULL
[17:03:07.883]                   }
[17:03:07.883]                 })
[17:03:07.883]                 withCallingHandlers({
[17:03:07.883]                   NA
[17:03:07.883]                 }, immediateCondition = function(cond) {
[17:03:07.883]                   sendCondition <- ...future.makeSendCondition()
[17:03:07.883]                   sendCondition(cond)
[17:03:07.883]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:07.883]                   {
[17:03:07.883]                     inherits <- base::inherits
[17:03:07.883]                     invokeRestart <- base::invokeRestart
[17:03:07.883]                     is.null <- base::is.null
[17:03:07.883]                     muffled <- FALSE
[17:03:07.883]                     if (inherits(cond, "message")) {
[17:03:07.883]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:07.883]                       if (muffled) 
[17:03:07.883]                         invokeRestart("muffleMessage")
[17:03:07.883]                     }
[17:03:07.883]                     else if (inherits(cond, "warning")) {
[17:03:07.883]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:07.883]                       if (muffled) 
[17:03:07.883]                         invokeRestart("muffleWarning")
[17:03:07.883]                     }
[17:03:07.883]                     else if (inherits(cond, "condition")) {
[17:03:07.883]                       if (!is.null(pattern)) {
[17:03:07.883]                         computeRestarts <- base::computeRestarts
[17:03:07.883]                         grepl <- base::grepl
[17:03:07.883]                         restarts <- computeRestarts(cond)
[17:03:07.883]                         for (restart in restarts) {
[17:03:07.883]                           name <- restart$name
[17:03:07.883]                           if (is.null(name)) 
[17:03:07.883]                             next
[17:03:07.883]                           if (!grepl(pattern, name)) 
[17:03:07.883]                             next
[17:03:07.883]                           invokeRestart(restart)
[17:03:07.883]                           muffled <- TRUE
[17:03:07.883]                           break
[17:03:07.883]                         }
[17:03:07.883]                       }
[17:03:07.883]                     }
[17:03:07.883]                     invisible(muffled)
[17:03:07.883]                   }
[17:03:07.883]                   muffleCondition(cond)
[17:03:07.883]                 })
[17:03:07.883]             }))
[17:03:07.883]             future::FutureResult(value = ...future.value$value, 
[17:03:07.883]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:07.883]                   ...future.rng), globalenv = if (FALSE) 
[17:03:07.883]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:07.883]                     ...future.globalenv.names))
[17:03:07.883]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:07.883]         }, condition = base::local({
[17:03:07.883]             c <- base::c
[17:03:07.883]             inherits <- base::inherits
[17:03:07.883]             invokeRestart <- base::invokeRestart
[17:03:07.883]             length <- base::length
[17:03:07.883]             list <- base::list
[17:03:07.883]             seq.int <- base::seq.int
[17:03:07.883]             signalCondition <- base::signalCondition
[17:03:07.883]             sys.calls <- base::sys.calls
[17:03:07.883]             `[[` <- base::`[[`
[17:03:07.883]             `+` <- base::`+`
[17:03:07.883]             `<<-` <- base::`<<-`
[17:03:07.883]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:07.883]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:07.883]                   3L)]
[17:03:07.883]             }
[17:03:07.883]             function(cond) {
[17:03:07.883]                 is_error <- inherits(cond, "error")
[17:03:07.883]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:07.883]                   NULL)
[17:03:07.883]                 if (is_error) {
[17:03:07.883]                   sessionInformation <- function() {
[17:03:07.883]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:07.883]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:07.883]                       search = base::search(), system = base::Sys.info())
[17:03:07.883]                   }
[17:03:07.883]                   ...future.conditions[[length(...future.conditions) + 
[17:03:07.883]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:07.883]                     cond$call), session = sessionInformation(), 
[17:03:07.883]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:07.883]                   signalCondition(cond)
[17:03:07.883]                 }
[17:03:07.883]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:07.883]                 "immediateCondition"))) {
[17:03:07.883]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:07.883]                   ...future.conditions[[length(...future.conditions) + 
[17:03:07.883]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:07.883]                   if (TRUE && !signal) {
[17:03:07.883]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:07.883]                     {
[17:03:07.883]                       inherits <- base::inherits
[17:03:07.883]                       invokeRestart <- base::invokeRestart
[17:03:07.883]                       is.null <- base::is.null
[17:03:07.883]                       muffled <- FALSE
[17:03:07.883]                       if (inherits(cond, "message")) {
[17:03:07.883]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:07.883]                         if (muffled) 
[17:03:07.883]                           invokeRestart("muffleMessage")
[17:03:07.883]                       }
[17:03:07.883]                       else if (inherits(cond, "warning")) {
[17:03:07.883]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:07.883]                         if (muffled) 
[17:03:07.883]                           invokeRestart("muffleWarning")
[17:03:07.883]                       }
[17:03:07.883]                       else if (inherits(cond, "condition")) {
[17:03:07.883]                         if (!is.null(pattern)) {
[17:03:07.883]                           computeRestarts <- base::computeRestarts
[17:03:07.883]                           grepl <- base::grepl
[17:03:07.883]                           restarts <- computeRestarts(cond)
[17:03:07.883]                           for (restart in restarts) {
[17:03:07.883]                             name <- restart$name
[17:03:07.883]                             if (is.null(name)) 
[17:03:07.883]                               next
[17:03:07.883]                             if (!grepl(pattern, name)) 
[17:03:07.883]                               next
[17:03:07.883]                             invokeRestart(restart)
[17:03:07.883]                             muffled <- TRUE
[17:03:07.883]                             break
[17:03:07.883]                           }
[17:03:07.883]                         }
[17:03:07.883]                       }
[17:03:07.883]                       invisible(muffled)
[17:03:07.883]                     }
[17:03:07.883]                     muffleCondition(cond, pattern = "^muffle")
[17:03:07.883]                   }
[17:03:07.883]                 }
[17:03:07.883]                 else {
[17:03:07.883]                   if (TRUE) {
[17:03:07.883]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:07.883]                     {
[17:03:07.883]                       inherits <- base::inherits
[17:03:07.883]                       invokeRestart <- base::invokeRestart
[17:03:07.883]                       is.null <- base::is.null
[17:03:07.883]                       muffled <- FALSE
[17:03:07.883]                       if (inherits(cond, "message")) {
[17:03:07.883]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:07.883]                         if (muffled) 
[17:03:07.883]                           invokeRestart("muffleMessage")
[17:03:07.883]                       }
[17:03:07.883]                       else if (inherits(cond, "warning")) {
[17:03:07.883]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:07.883]                         if (muffled) 
[17:03:07.883]                           invokeRestart("muffleWarning")
[17:03:07.883]                       }
[17:03:07.883]                       else if (inherits(cond, "condition")) {
[17:03:07.883]                         if (!is.null(pattern)) {
[17:03:07.883]                           computeRestarts <- base::computeRestarts
[17:03:07.883]                           grepl <- base::grepl
[17:03:07.883]                           restarts <- computeRestarts(cond)
[17:03:07.883]                           for (restart in restarts) {
[17:03:07.883]                             name <- restart$name
[17:03:07.883]                             if (is.null(name)) 
[17:03:07.883]                               next
[17:03:07.883]                             if (!grepl(pattern, name)) 
[17:03:07.883]                               next
[17:03:07.883]                             invokeRestart(restart)
[17:03:07.883]                             muffled <- TRUE
[17:03:07.883]                             break
[17:03:07.883]                           }
[17:03:07.883]                         }
[17:03:07.883]                       }
[17:03:07.883]                       invisible(muffled)
[17:03:07.883]                     }
[17:03:07.883]                     muffleCondition(cond, pattern = "^muffle")
[17:03:07.883]                   }
[17:03:07.883]                 }
[17:03:07.883]             }
[17:03:07.883]         }))
[17:03:07.883]     }, error = function(ex) {
[17:03:07.883]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:07.883]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:07.883]                 ...future.rng), started = ...future.startTime, 
[17:03:07.883]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:07.883]             version = "1.8"), class = "FutureResult")
[17:03:07.883]     }, finally = {
[17:03:07.883]         if (!identical(...future.workdir, getwd())) 
[17:03:07.883]             setwd(...future.workdir)
[17:03:07.883]         {
[17:03:07.883]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:07.883]                 ...future.oldOptions$nwarnings <- NULL
[17:03:07.883]             }
[17:03:07.883]             base::options(...future.oldOptions)
[17:03:07.883]             if (.Platform$OS.type == "windows") {
[17:03:07.883]                 old_names <- names(...future.oldEnvVars)
[17:03:07.883]                 envs <- base::Sys.getenv()
[17:03:07.883]                 names <- names(envs)
[17:03:07.883]                 common <- intersect(names, old_names)
[17:03:07.883]                 added <- setdiff(names, old_names)
[17:03:07.883]                 removed <- setdiff(old_names, names)
[17:03:07.883]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:07.883]                   envs[common]]
[17:03:07.883]                 NAMES <- toupper(changed)
[17:03:07.883]                 args <- list()
[17:03:07.883]                 for (kk in seq_along(NAMES)) {
[17:03:07.883]                   name <- changed[[kk]]
[17:03:07.883]                   NAME <- NAMES[[kk]]
[17:03:07.883]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:07.883]                     next
[17:03:07.883]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:07.883]                 }
[17:03:07.883]                 NAMES <- toupper(added)
[17:03:07.883]                 for (kk in seq_along(NAMES)) {
[17:03:07.883]                   name <- added[[kk]]
[17:03:07.883]                   NAME <- NAMES[[kk]]
[17:03:07.883]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:07.883]                     next
[17:03:07.883]                   args[[name]] <- ""
[17:03:07.883]                 }
[17:03:07.883]                 NAMES <- toupper(removed)
[17:03:07.883]                 for (kk in seq_along(NAMES)) {
[17:03:07.883]                   name <- removed[[kk]]
[17:03:07.883]                   NAME <- NAMES[[kk]]
[17:03:07.883]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:07.883]                     next
[17:03:07.883]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:07.883]                 }
[17:03:07.883]                 if (length(args) > 0) 
[17:03:07.883]                   base::do.call(base::Sys.setenv, args = args)
[17:03:07.883]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:07.883]             }
[17:03:07.883]             else {
[17:03:07.883]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:07.883]             }
[17:03:07.883]             {
[17:03:07.883]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:07.883]                   0L) {
[17:03:07.883]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:07.883]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:07.883]                   base::options(opts)
[17:03:07.883]                 }
[17:03:07.883]                 {
[17:03:07.883]                   {
[17:03:07.883]                     base::options(mc.cores = ...future.mc.cores.old)
[17:03:07.883]                     NULL
[17:03:07.883]                   }
[17:03:07.883]                   options(future.plan = NULL)
[17:03:07.883]                   if (is.na(NA_character_)) 
[17:03:07.883]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:07.883]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:07.883]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:07.883]                     .init = FALSE)
[17:03:07.883]                 }
[17:03:07.883]             }
[17:03:07.883]         }
[17:03:07.883]     })
[17:03:07.883]     if (TRUE) {
[17:03:07.883]         base::sink(type = "output", split = FALSE)
[17:03:07.883]         if (TRUE) {
[17:03:07.883]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:07.883]         }
[17:03:07.883]         else {
[17:03:07.883]             ...future.result["stdout"] <- base::list(NULL)
[17:03:07.883]         }
[17:03:07.883]         base::close(...future.stdout)
[17:03:07.883]         ...future.stdout <- NULL
[17:03:07.883]     }
[17:03:07.883]     ...future.result$conditions <- ...future.conditions
[17:03:07.883]     ...future.result$finished <- base::Sys.time()
[17:03:07.883]     ...future.result
[17:03:07.883] }
[17:03:07.935] MultisessionFuture started
[17:03:07.936] result() for ClusterFuture ...
[17:03:07.937] receiveMessageFromWorker() for ClusterFuture ...
[17:03:07.937] - Validating connection of MultisessionFuture
[17:03:07.969] - received message: FutureResult
[17:03:07.969] - Received FutureResult
[17:03:07.971] - Erased future from FutureRegistry
[17:03:07.972] result() for ClusterFuture ...
[17:03:07.972] - result already collected: FutureResult
[17:03:07.972] result() for ClusterFuture ... done
[17:03:07.972] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:07.972] result() for ClusterFuture ... done
[17:03:07.972] result() for ClusterFuture ...
[17:03:07.972] - result already collected: FutureResult
[17:03:07.972] result() for ClusterFuture ... done
[17:03:07.973] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:07.976] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[17:03:07.986] getGlobalsAndPackages() ...
[17:03:07.986] 
[17:03:07.986] - globals: [0] <none>
[17:03:07.987] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[17:03:08.004] getGlobalsAndPackages() ...
[17:03:08.004] 
[17:03:08.004] - globals: [0] <none>
[17:03:08.004] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[17:03:08.016] plan(): Setting new future strategy stack:
[17:03:08.016] List of future strategies:
[17:03:08.016] 1. multisession:
[17:03:08.016]    - args: function (..., workers = 1L, envir = parent.frame())
[17:03:08.016]    - tweaked: TRUE
[17:03:08.016]    - call: plan(strategy, workers = 1L)
[17:03:08.017] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:08.017] multisession:
[17:03:08.017] - args: function (..., workers = 1L, envir = parent.frame())
[17:03:08.017] - tweaked: TRUE
[17:03:08.017] - call: plan(strategy, workers = 1L)
[17:03:08.017] getGlobalsAndPackages() ...
[17:03:08.018] Not searching for globals
[17:03:08.018] - globals: [0] <none>
[17:03:08.018] getGlobalsAndPackages() ... DONE
[17:03:08.019] Packages needed by the future expression (n = 0): <none>
[17:03:08.019] Packages needed by future strategies (n = 0): <none>
[17:03:08.020] {
[17:03:08.020]     {
[17:03:08.020]         {
[17:03:08.020]             ...future.startTime <- base::Sys.time()
[17:03:08.020]             {
[17:03:08.020]                 {
[17:03:08.020]                   {
[17:03:08.020]                     base::local({
[17:03:08.020]                       has_future <- base::requireNamespace("future", 
[17:03:08.020]                         quietly = TRUE)
[17:03:08.020]                       if (has_future) {
[17:03:08.020]                         ns <- base::getNamespace("future")
[17:03:08.020]                         version <- ns[[".package"]][["version"]]
[17:03:08.020]                         if (is.null(version)) 
[17:03:08.020]                           version <- utils::packageVersion("future")
[17:03:08.020]                       }
[17:03:08.020]                       else {
[17:03:08.020]                         version <- NULL
[17:03:08.020]                       }
[17:03:08.020]                       if (!has_future || version < "1.8.0") {
[17:03:08.020]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:08.020]                           "", base::R.version$version.string), 
[17:03:08.020]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:08.020]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:08.020]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:08.020]                             "release", "version")], collapse = " "), 
[17:03:08.020]                           hostname = base::Sys.info()[["nodename"]])
[17:03:08.020]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:08.020]                           info)
[17:03:08.020]                         info <- base::paste(info, collapse = "; ")
[17:03:08.020]                         if (!has_future) {
[17:03:08.020]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:08.020]                             info)
[17:03:08.020]                         }
[17:03:08.020]                         else {
[17:03:08.020]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:08.020]                             info, version)
[17:03:08.020]                         }
[17:03:08.020]                         base::stop(msg)
[17:03:08.020]                       }
[17:03:08.020]                     })
[17:03:08.020]                   }
[17:03:08.020]                   ...future.strategy.old <- future::plan("list")
[17:03:08.020]                   options(future.plan = NULL)
[17:03:08.020]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:08.020]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:08.020]                 }
[17:03:08.020]                 ...future.workdir <- getwd()
[17:03:08.020]             }
[17:03:08.020]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:08.020]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:08.020]         }
[17:03:08.020]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:08.020]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:08.020]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:08.020]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:08.020]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:08.020]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:08.020]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:08.020]             base::names(...future.oldOptions))
[17:03:08.020]     }
[17:03:08.020]     if (FALSE) {
[17:03:08.020]     }
[17:03:08.020]     else {
[17:03:08.020]         if (TRUE) {
[17:03:08.020]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:08.020]                 open = "w")
[17:03:08.020]         }
[17:03:08.020]         else {
[17:03:08.020]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:08.020]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:08.020]         }
[17:03:08.020]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:08.020]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:08.020]             base::sink(type = "output", split = FALSE)
[17:03:08.020]             base::close(...future.stdout)
[17:03:08.020]         }, add = TRUE)
[17:03:08.020]     }
[17:03:08.020]     ...future.frame <- base::sys.nframe()
[17:03:08.020]     ...future.conditions <- base::list()
[17:03:08.020]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:08.020]     if (FALSE) {
[17:03:08.020]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:08.020]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:08.020]     }
[17:03:08.020]     ...future.result <- base::tryCatch({
[17:03:08.020]         base::withCallingHandlers({
[17:03:08.020]             ...future.value <- base::withVisible(base::local(NA))
[17:03:08.020]             future::FutureResult(value = ...future.value$value, 
[17:03:08.020]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:08.020]                   ...future.rng), globalenv = if (FALSE) 
[17:03:08.020]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:08.020]                     ...future.globalenv.names))
[17:03:08.020]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:08.020]         }, condition = base::local({
[17:03:08.020]             c <- base::c
[17:03:08.020]             inherits <- base::inherits
[17:03:08.020]             invokeRestart <- base::invokeRestart
[17:03:08.020]             length <- base::length
[17:03:08.020]             list <- base::list
[17:03:08.020]             seq.int <- base::seq.int
[17:03:08.020]             signalCondition <- base::signalCondition
[17:03:08.020]             sys.calls <- base::sys.calls
[17:03:08.020]             `[[` <- base::`[[`
[17:03:08.020]             `+` <- base::`+`
[17:03:08.020]             `<<-` <- base::`<<-`
[17:03:08.020]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:08.020]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:08.020]                   3L)]
[17:03:08.020]             }
[17:03:08.020]             function(cond) {
[17:03:08.020]                 is_error <- inherits(cond, "error")
[17:03:08.020]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:08.020]                   NULL)
[17:03:08.020]                 if (is_error) {
[17:03:08.020]                   sessionInformation <- function() {
[17:03:08.020]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:08.020]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:08.020]                       search = base::search(), system = base::Sys.info())
[17:03:08.020]                   }
[17:03:08.020]                   ...future.conditions[[length(...future.conditions) + 
[17:03:08.020]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:08.020]                     cond$call), session = sessionInformation(), 
[17:03:08.020]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:08.020]                   signalCondition(cond)
[17:03:08.020]                 }
[17:03:08.020]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:08.020]                 "immediateCondition"))) {
[17:03:08.020]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:08.020]                   ...future.conditions[[length(...future.conditions) + 
[17:03:08.020]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:08.020]                   if (TRUE && !signal) {
[17:03:08.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.020]                     {
[17:03:08.020]                       inherits <- base::inherits
[17:03:08.020]                       invokeRestart <- base::invokeRestart
[17:03:08.020]                       is.null <- base::is.null
[17:03:08.020]                       muffled <- FALSE
[17:03:08.020]                       if (inherits(cond, "message")) {
[17:03:08.020]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:08.020]                         if (muffled) 
[17:03:08.020]                           invokeRestart("muffleMessage")
[17:03:08.020]                       }
[17:03:08.020]                       else if (inherits(cond, "warning")) {
[17:03:08.020]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:08.020]                         if (muffled) 
[17:03:08.020]                           invokeRestart("muffleWarning")
[17:03:08.020]                       }
[17:03:08.020]                       else if (inherits(cond, "condition")) {
[17:03:08.020]                         if (!is.null(pattern)) {
[17:03:08.020]                           computeRestarts <- base::computeRestarts
[17:03:08.020]                           grepl <- base::grepl
[17:03:08.020]                           restarts <- computeRestarts(cond)
[17:03:08.020]                           for (restart in restarts) {
[17:03:08.020]                             name <- restart$name
[17:03:08.020]                             if (is.null(name)) 
[17:03:08.020]                               next
[17:03:08.020]                             if (!grepl(pattern, name)) 
[17:03:08.020]                               next
[17:03:08.020]                             invokeRestart(restart)
[17:03:08.020]                             muffled <- TRUE
[17:03:08.020]                             break
[17:03:08.020]                           }
[17:03:08.020]                         }
[17:03:08.020]                       }
[17:03:08.020]                       invisible(muffled)
[17:03:08.020]                     }
[17:03:08.020]                     muffleCondition(cond, pattern = "^muffle")
[17:03:08.020]                   }
[17:03:08.020]                 }
[17:03:08.020]                 else {
[17:03:08.020]                   if (TRUE) {
[17:03:08.020]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.020]                     {
[17:03:08.020]                       inherits <- base::inherits
[17:03:08.020]                       invokeRestart <- base::invokeRestart
[17:03:08.020]                       is.null <- base::is.null
[17:03:08.020]                       muffled <- FALSE
[17:03:08.020]                       if (inherits(cond, "message")) {
[17:03:08.020]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:08.020]                         if (muffled) 
[17:03:08.020]                           invokeRestart("muffleMessage")
[17:03:08.020]                       }
[17:03:08.020]                       else if (inherits(cond, "warning")) {
[17:03:08.020]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:08.020]                         if (muffled) 
[17:03:08.020]                           invokeRestart("muffleWarning")
[17:03:08.020]                       }
[17:03:08.020]                       else if (inherits(cond, "condition")) {
[17:03:08.020]                         if (!is.null(pattern)) {
[17:03:08.020]                           computeRestarts <- base::computeRestarts
[17:03:08.020]                           grepl <- base::grepl
[17:03:08.020]                           restarts <- computeRestarts(cond)
[17:03:08.020]                           for (restart in restarts) {
[17:03:08.020]                             name <- restart$name
[17:03:08.020]                             if (is.null(name)) 
[17:03:08.020]                               next
[17:03:08.020]                             if (!grepl(pattern, name)) 
[17:03:08.020]                               next
[17:03:08.020]                             invokeRestart(restart)
[17:03:08.020]                             muffled <- TRUE
[17:03:08.020]                             break
[17:03:08.020]                           }
[17:03:08.020]                         }
[17:03:08.020]                       }
[17:03:08.020]                       invisible(muffled)
[17:03:08.020]                     }
[17:03:08.020]                     muffleCondition(cond, pattern = "^muffle")
[17:03:08.020]                   }
[17:03:08.020]                 }
[17:03:08.020]             }
[17:03:08.020]         }))
[17:03:08.020]     }, error = function(ex) {
[17:03:08.020]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:08.020]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:08.020]                 ...future.rng), started = ...future.startTime, 
[17:03:08.020]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:08.020]             version = "1.8"), class = "FutureResult")
[17:03:08.020]     }, finally = {
[17:03:08.020]         if (!identical(...future.workdir, getwd())) 
[17:03:08.020]             setwd(...future.workdir)
[17:03:08.020]         {
[17:03:08.020]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:08.020]                 ...future.oldOptions$nwarnings <- NULL
[17:03:08.020]             }
[17:03:08.020]             base::options(...future.oldOptions)
[17:03:08.020]             if (.Platform$OS.type == "windows") {
[17:03:08.020]                 old_names <- names(...future.oldEnvVars)
[17:03:08.020]                 envs <- base::Sys.getenv()
[17:03:08.020]                 names <- names(envs)
[17:03:08.020]                 common <- intersect(names, old_names)
[17:03:08.020]                 added <- setdiff(names, old_names)
[17:03:08.020]                 removed <- setdiff(old_names, names)
[17:03:08.020]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:08.020]                   envs[common]]
[17:03:08.020]                 NAMES <- toupper(changed)
[17:03:08.020]                 args <- list()
[17:03:08.020]                 for (kk in seq_along(NAMES)) {
[17:03:08.020]                   name <- changed[[kk]]
[17:03:08.020]                   NAME <- NAMES[[kk]]
[17:03:08.020]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.020]                     next
[17:03:08.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:08.020]                 }
[17:03:08.020]                 NAMES <- toupper(added)
[17:03:08.020]                 for (kk in seq_along(NAMES)) {
[17:03:08.020]                   name <- added[[kk]]
[17:03:08.020]                   NAME <- NAMES[[kk]]
[17:03:08.020]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.020]                     next
[17:03:08.020]                   args[[name]] <- ""
[17:03:08.020]                 }
[17:03:08.020]                 NAMES <- toupper(removed)
[17:03:08.020]                 for (kk in seq_along(NAMES)) {
[17:03:08.020]                   name <- removed[[kk]]
[17:03:08.020]                   NAME <- NAMES[[kk]]
[17:03:08.020]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.020]                     next
[17:03:08.020]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:08.020]                 }
[17:03:08.020]                 if (length(args) > 0) 
[17:03:08.020]                   base::do.call(base::Sys.setenv, args = args)
[17:03:08.020]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:08.020]             }
[17:03:08.020]             else {
[17:03:08.020]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:08.020]             }
[17:03:08.020]             {
[17:03:08.020]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:08.020]                   0L) {
[17:03:08.020]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:08.020]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:08.020]                   base::options(opts)
[17:03:08.020]                 }
[17:03:08.020]                 {
[17:03:08.020]                   {
[17:03:08.020]                     NULL
[17:03:08.020]                     RNGkind("Mersenne-Twister")
[17:03:08.020]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:08.020]                       inherits = FALSE)
[17:03:08.020]                   }
[17:03:08.020]                   options(future.plan = NULL)
[17:03:08.020]                   if (is.na(NA_character_)) 
[17:03:08.020]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:08.020]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:08.020]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:08.020]                     .init = FALSE)
[17:03:08.020]                 }
[17:03:08.020]             }
[17:03:08.020]         }
[17:03:08.020]     })
[17:03:08.020]     if (TRUE) {
[17:03:08.020]         base::sink(type = "output", split = FALSE)
[17:03:08.020]         if (TRUE) {
[17:03:08.020]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:08.020]         }
[17:03:08.020]         else {
[17:03:08.020]             ...future.result["stdout"] <- base::list(NULL)
[17:03:08.020]         }
[17:03:08.020]         base::close(...future.stdout)
[17:03:08.020]         ...future.stdout <- NULL
[17:03:08.020]     }
[17:03:08.020]     ...future.result$conditions <- ...future.conditions
[17:03:08.020]     ...future.result$finished <- base::Sys.time()
[17:03:08.020]     ...future.result
[17:03:08.020] }
[17:03:08.022] plan(): Setting new future strategy stack:
[17:03:08.022] List of future strategies:
[17:03:08.022] 1. sequential:
[17:03:08.022]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:08.022]    - tweaked: FALSE
[17:03:08.022]    - call: NULL
[17:03:08.022] plan(): nbrOfWorkers() = 1
[17:03:08.024] plan(): Setting new future strategy stack:
[17:03:08.024] List of future strategies:
[17:03:08.024] 1. multisession:
[17:03:08.024]    - args: function (..., workers = 1L, envir = parent.frame())
[17:03:08.024]    - tweaked: TRUE
[17:03:08.024]    - call: plan(strategy, workers = 1L)
[17:03:08.024] plan(): nbrOfWorkers() = 1
[17:03:08.025] SequentialFuture started (and completed)
[17:03:08.025] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:08.025] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[17:03:08.026] getGlobalsAndPackages() ...
[17:03:08.026] Searching for globals...
[17:03:08.028] 
[17:03:08.028] Searching for globals ... DONE
[17:03:08.029] - globals: [0] <none>
[17:03:08.029] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[17:03:08.029] getGlobalsAndPackages() ...
[17:03:08.029] Searching for globals...
[17:03:08.030] 
[17:03:08.030] Searching for globals ... DONE
[17:03:08.030] - globals: [0] <none>
[17:03:08.030] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[17:03:08.031] plan(): Setting new future strategy stack:
[17:03:08.031] List of future strategies:
[17:03:08.031] 1. multisession:
[17:03:08.031]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:03:08.031]    - tweaked: TRUE
[17:03:08.031]    - call: plan(strategy, workers = allButOneCore)
[17:03:08.032] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:08.032] multisession:
[17:03:08.032] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:03:08.032] - tweaked: TRUE
[17:03:08.032] - call: plan(strategy, workers = allButOneCore)
[17:03:08.036] getGlobalsAndPackages() ...
[17:03:08.036] Not searching for globals
[17:03:08.039] - globals: [0] <none>
[17:03:08.039] getGlobalsAndPackages() ... DONE
[17:03:08.040] Packages needed by the future expression (n = 0): <none>
[17:03:08.040] Packages needed by future strategies (n = 0): <none>
[17:03:08.040] {
[17:03:08.040]     {
[17:03:08.040]         {
[17:03:08.040]             ...future.startTime <- base::Sys.time()
[17:03:08.040]             {
[17:03:08.040]                 {
[17:03:08.040]                   {
[17:03:08.040]                     base::local({
[17:03:08.040]                       has_future <- base::requireNamespace("future", 
[17:03:08.040]                         quietly = TRUE)
[17:03:08.040]                       if (has_future) {
[17:03:08.040]                         ns <- base::getNamespace("future")
[17:03:08.040]                         version <- ns[[".package"]][["version"]]
[17:03:08.040]                         if (is.null(version)) 
[17:03:08.040]                           version <- utils::packageVersion("future")
[17:03:08.040]                       }
[17:03:08.040]                       else {
[17:03:08.040]                         version <- NULL
[17:03:08.040]                       }
[17:03:08.040]                       if (!has_future || version < "1.8.0") {
[17:03:08.040]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:08.040]                           "", base::R.version$version.string), 
[17:03:08.040]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:08.040]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:08.040]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:08.040]                             "release", "version")], collapse = " "), 
[17:03:08.040]                           hostname = base::Sys.info()[["nodename"]])
[17:03:08.040]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:08.040]                           info)
[17:03:08.040]                         info <- base::paste(info, collapse = "; ")
[17:03:08.040]                         if (!has_future) {
[17:03:08.040]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:08.040]                             info)
[17:03:08.040]                         }
[17:03:08.040]                         else {
[17:03:08.040]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:08.040]                             info, version)
[17:03:08.040]                         }
[17:03:08.040]                         base::stop(msg)
[17:03:08.040]                       }
[17:03:08.040]                     })
[17:03:08.040]                   }
[17:03:08.040]                   ...future.strategy.old <- future::plan("list")
[17:03:08.040]                   options(future.plan = NULL)
[17:03:08.040]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:08.040]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:08.040]                 }
[17:03:08.040]                 ...future.workdir <- getwd()
[17:03:08.040]             }
[17:03:08.040]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:08.040]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:08.040]         }
[17:03:08.040]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:08.040]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:08.040]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:08.040]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:08.040]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:08.040]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:08.040]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:08.040]             base::names(...future.oldOptions))
[17:03:08.040]     }
[17:03:08.040]     if (FALSE) {
[17:03:08.040]     }
[17:03:08.040]     else {
[17:03:08.040]         if (TRUE) {
[17:03:08.040]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:08.040]                 open = "w")
[17:03:08.040]         }
[17:03:08.040]         else {
[17:03:08.040]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:08.040]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:08.040]         }
[17:03:08.040]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:08.040]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:08.040]             base::sink(type = "output", split = FALSE)
[17:03:08.040]             base::close(...future.stdout)
[17:03:08.040]         }, add = TRUE)
[17:03:08.040]     }
[17:03:08.040]     ...future.frame <- base::sys.nframe()
[17:03:08.040]     ...future.conditions <- base::list()
[17:03:08.040]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:08.040]     if (FALSE) {
[17:03:08.040]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:08.040]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:08.040]     }
[17:03:08.040]     ...future.result <- base::tryCatch({
[17:03:08.040]         base::withCallingHandlers({
[17:03:08.040]             ...future.value <- base::withVisible(base::local(NA))
[17:03:08.040]             future::FutureResult(value = ...future.value$value, 
[17:03:08.040]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:08.040]                   ...future.rng), globalenv = if (FALSE) 
[17:03:08.040]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:08.040]                     ...future.globalenv.names))
[17:03:08.040]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:08.040]         }, condition = base::local({
[17:03:08.040]             c <- base::c
[17:03:08.040]             inherits <- base::inherits
[17:03:08.040]             invokeRestart <- base::invokeRestart
[17:03:08.040]             length <- base::length
[17:03:08.040]             list <- base::list
[17:03:08.040]             seq.int <- base::seq.int
[17:03:08.040]             signalCondition <- base::signalCondition
[17:03:08.040]             sys.calls <- base::sys.calls
[17:03:08.040]             `[[` <- base::`[[`
[17:03:08.040]             `+` <- base::`+`
[17:03:08.040]             `<<-` <- base::`<<-`
[17:03:08.040]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:08.040]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:08.040]                   3L)]
[17:03:08.040]             }
[17:03:08.040]             function(cond) {
[17:03:08.040]                 is_error <- inherits(cond, "error")
[17:03:08.040]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:08.040]                   NULL)
[17:03:08.040]                 if (is_error) {
[17:03:08.040]                   sessionInformation <- function() {
[17:03:08.040]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:08.040]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:08.040]                       search = base::search(), system = base::Sys.info())
[17:03:08.040]                   }
[17:03:08.040]                   ...future.conditions[[length(...future.conditions) + 
[17:03:08.040]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:08.040]                     cond$call), session = sessionInformation(), 
[17:03:08.040]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:08.040]                   signalCondition(cond)
[17:03:08.040]                 }
[17:03:08.040]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:08.040]                 "immediateCondition"))) {
[17:03:08.040]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:08.040]                   ...future.conditions[[length(...future.conditions) + 
[17:03:08.040]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:08.040]                   if (TRUE && !signal) {
[17:03:08.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.040]                     {
[17:03:08.040]                       inherits <- base::inherits
[17:03:08.040]                       invokeRestart <- base::invokeRestart
[17:03:08.040]                       is.null <- base::is.null
[17:03:08.040]                       muffled <- FALSE
[17:03:08.040]                       if (inherits(cond, "message")) {
[17:03:08.040]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:08.040]                         if (muffled) 
[17:03:08.040]                           invokeRestart("muffleMessage")
[17:03:08.040]                       }
[17:03:08.040]                       else if (inherits(cond, "warning")) {
[17:03:08.040]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:08.040]                         if (muffled) 
[17:03:08.040]                           invokeRestart("muffleWarning")
[17:03:08.040]                       }
[17:03:08.040]                       else if (inherits(cond, "condition")) {
[17:03:08.040]                         if (!is.null(pattern)) {
[17:03:08.040]                           computeRestarts <- base::computeRestarts
[17:03:08.040]                           grepl <- base::grepl
[17:03:08.040]                           restarts <- computeRestarts(cond)
[17:03:08.040]                           for (restart in restarts) {
[17:03:08.040]                             name <- restart$name
[17:03:08.040]                             if (is.null(name)) 
[17:03:08.040]                               next
[17:03:08.040]                             if (!grepl(pattern, name)) 
[17:03:08.040]                               next
[17:03:08.040]                             invokeRestart(restart)
[17:03:08.040]                             muffled <- TRUE
[17:03:08.040]                             break
[17:03:08.040]                           }
[17:03:08.040]                         }
[17:03:08.040]                       }
[17:03:08.040]                       invisible(muffled)
[17:03:08.040]                     }
[17:03:08.040]                     muffleCondition(cond, pattern = "^muffle")
[17:03:08.040]                   }
[17:03:08.040]                 }
[17:03:08.040]                 else {
[17:03:08.040]                   if (TRUE) {
[17:03:08.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.040]                     {
[17:03:08.040]                       inherits <- base::inherits
[17:03:08.040]                       invokeRestart <- base::invokeRestart
[17:03:08.040]                       is.null <- base::is.null
[17:03:08.040]                       muffled <- FALSE
[17:03:08.040]                       if (inherits(cond, "message")) {
[17:03:08.040]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:08.040]                         if (muffled) 
[17:03:08.040]                           invokeRestart("muffleMessage")
[17:03:08.040]                       }
[17:03:08.040]                       else if (inherits(cond, "warning")) {
[17:03:08.040]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:08.040]                         if (muffled) 
[17:03:08.040]                           invokeRestart("muffleWarning")
[17:03:08.040]                       }
[17:03:08.040]                       else if (inherits(cond, "condition")) {
[17:03:08.040]                         if (!is.null(pattern)) {
[17:03:08.040]                           computeRestarts <- base::computeRestarts
[17:03:08.040]                           grepl <- base::grepl
[17:03:08.040]                           restarts <- computeRestarts(cond)
[17:03:08.040]                           for (restart in restarts) {
[17:03:08.040]                             name <- restart$name
[17:03:08.040]                             if (is.null(name)) 
[17:03:08.040]                               next
[17:03:08.040]                             if (!grepl(pattern, name)) 
[17:03:08.040]                               next
[17:03:08.040]                             invokeRestart(restart)
[17:03:08.040]                             muffled <- TRUE
[17:03:08.040]                             break
[17:03:08.040]                           }
[17:03:08.040]                         }
[17:03:08.040]                       }
[17:03:08.040]                       invisible(muffled)
[17:03:08.040]                     }
[17:03:08.040]                     muffleCondition(cond, pattern = "^muffle")
[17:03:08.040]                   }
[17:03:08.040]                 }
[17:03:08.040]             }
[17:03:08.040]         }))
[17:03:08.040]     }, error = function(ex) {
[17:03:08.040]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:08.040]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:08.040]                 ...future.rng), started = ...future.startTime, 
[17:03:08.040]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:08.040]             version = "1.8"), class = "FutureResult")
[17:03:08.040]     }, finally = {
[17:03:08.040]         if (!identical(...future.workdir, getwd())) 
[17:03:08.040]             setwd(...future.workdir)
[17:03:08.040]         {
[17:03:08.040]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:08.040]                 ...future.oldOptions$nwarnings <- NULL
[17:03:08.040]             }
[17:03:08.040]             base::options(...future.oldOptions)
[17:03:08.040]             if (.Platform$OS.type == "windows") {
[17:03:08.040]                 old_names <- names(...future.oldEnvVars)
[17:03:08.040]                 envs <- base::Sys.getenv()
[17:03:08.040]                 names <- names(envs)
[17:03:08.040]                 common <- intersect(names, old_names)
[17:03:08.040]                 added <- setdiff(names, old_names)
[17:03:08.040]                 removed <- setdiff(old_names, names)
[17:03:08.040]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:08.040]                   envs[common]]
[17:03:08.040]                 NAMES <- toupper(changed)
[17:03:08.040]                 args <- list()
[17:03:08.040]                 for (kk in seq_along(NAMES)) {
[17:03:08.040]                   name <- changed[[kk]]
[17:03:08.040]                   NAME <- NAMES[[kk]]
[17:03:08.040]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.040]                     next
[17:03:08.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:08.040]                 }
[17:03:08.040]                 NAMES <- toupper(added)
[17:03:08.040]                 for (kk in seq_along(NAMES)) {
[17:03:08.040]                   name <- added[[kk]]
[17:03:08.040]                   NAME <- NAMES[[kk]]
[17:03:08.040]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.040]                     next
[17:03:08.040]                   args[[name]] <- ""
[17:03:08.040]                 }
[17:03:08.040]                 NAMES <- toupper(removed)
[17:03:08.040]                 for (kk in seq_along(NAMES)) {
[17:03:08.040]                   name <- removed[[kk]]
[17:03:08.040]                   NAME <- NAMES[[kk]]
[17:03:08.040]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.040]                     next
[17:03:08.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:08.040]                 }
[17:03:08.040]                 if (length(args) > 0) 
[17:03:08.040]                   base::do.call(base::Sys.setenv, args = args)
[17:03:08.040]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:08.040]             }
[17:03:08.040]             else {
[17:03:08.040]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:08.040]             }
[17:03:08.040]             {
[17:03:08.040]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:08.040]                   0L) {
[17:03:08.040]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:08.040]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:08.040]                   base::options(opts)
[17:03:08.040]                 }
[17:03:08.040]                 {
[17:03:08.040]                   {
[17:03:08.040]                     NULL
[17:03:08.040]                     RNGkind("Mersenne-Twister")
[17:03:08.040]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:03:08.040]                       inherits = FALSE)
[17:03:08.040]                   }
[17:03:08.040]                   options(future.plan = NULL)
[17:03:08.040]                   if (is.na(NA_character_)) 
[17:03:08.040]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:08.040]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:08.040]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:08.040]                     .init = FALSE)
[17:03:08.040]                 }
[17:03:08.040]             }
[17:03:08.040]         }
[17:03:08.040]     })
[17:03:08.040]     if (TRUE) {
[17:03:08.040]         base::sink(type = "output", split = FALSE)
[17:03:08.040]         if (TRUE) {
[17:03:08.040]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:08.040]         }
[17:03:08.040]         else {
[17:03:08.040]             ...future.result["stdout"] <- base::list(NULL)
[17:03:08.040]         }
[17:03:08.040]         base::close(...future.stdout)
[17:03:08.040]         ...future.stdout <- NULL
[17:03:08.040]     }
[17:03:08.040]     ...future.result$conditions <- ...future.conditions
[17:03:08.040]     ...future.result$finished <- base::Sys.time()
[17:03:08.040]     ...future.result
[17:03:08.040] }
[17:03:08.042] plan(): Setting new future strategy stack:
[17:03:08.042] List of future strategies:
[17:03:08.042] 1. sequential:
[17:03:08.042]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:08.042]    - tweaked: FALSE
[17:03:08.042]    - call: NULL
[17:03:08.043] plan(): nbrOfWorkers() = 1
[17:03:08.044] plan(): Setting new future strategy stack:
[17:03:08.044] List of future strategies:
[17:03:08.044] 1. multisession:
[17:03:08.044]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[17:03:08.044]    - tweaked: TRUE
[17:03:08.044]    - call: plan(strategy, workers = allButOneCore)
[17:03:08.049] plan(): nbrOfWorkers() = 1
[17:03:08.049] SequentialFuture started (and completed)
[17:03:08.050] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:08.052] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[17:03:08.061] getGlobalsAndPackages() ...
[17:03:08.061] Searching for globals...
[17:03:08.061] 
[17:03:08.062] Searching for globals ... DONE
[17:03:08.062] - globals: [0] <none>
[17:03:08.062] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[17:03:08.068] getGlobalsAndPackages() ...
[17:03:08.068] Searching for globals...
[17:03:08.068] 
[17:03:08.068] Searching for globals ... DONE
[17:03:08.068] - globals: [0] <none>
[17:03:08.068] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[17:03:08.072] plan(): Setting new future strategy stack:
[17:03:08.072] List of future strategies:
[17:03:08.072] 1. multicore:
[17:03:08.072]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:03:08.072]    - tweaked: FALSE
[17:03:08.072]    - call: plan(strategy)
[17:03:08.076] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[17:03:08.085] plan(): Setting new future strategy stack:
[17:03:08.085] List of future strategies:
[17:03:08.085] 1. multicore:
[17:03:08.085]    - args: function (..., workers = 1L, envir = parent.frame())
[17:03:08.085]    - tweaked: TRUE
[17:03:08.085]    - call: plan(strategy, workers = 1L)
[17:03:08.086] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[17:03:08.087] plan(): Setting new future strategy stack:
[17:03:08.087] List of future strategies:
[17:03:08.087] 1. multicore:
[17:03:08.087]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x560ac5ed1a98>>", envir = parent.frame())
[17:03:08.087]    - tweaked: TRUE
[17:03:08.087]    - call: plan(strategy, workers = allButOneCore)
[17:03:08.090] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[17:03:08.100] plan(): Setting new future strategy stack:
[17:03:08.100] List of future strategies:
[17:03:08.100] 1. cluster:
[17:03:08.100]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[17:03:08.100]    - tweaked: TRUE
[17:03:08.100]    - call: plan(cluster, workers = workers)
[17:03:08.100] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:08.100] cluster:
[17:03:08.100] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[17:03:08.100] - tweaked: TRUE
[17:03:08.100] - call: plan(cluster, workers = workers)
[17:03:08.101] getGlobalsAndPackages() ...
[17:03:08.101] Not searching for globals
[17:03:08.101] - globals: [0] <none>
[17:03:08.101] getGlobalsAndPackages() ... DONE
[17:03:08.102] [local output] makeClusterPSOCK() ...
[17:03:08.102] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:08.103] [local output] Base port: 11102
[17:03:08.103] [local output] Getting setup options for 2 cluster nodes ...
[17:03:08.103] [local output]  - Node 1 of 2 ...
[17:03:08.103] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:08.104] [local output] Rscript port: 11102

[17:03:08.104] [local output]  - Node 2 of 2 ...
[17:03:08.104] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:08.105] [local output] Rscript port: 11102

[17:03:08.105] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:08.105] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:08.105] [local output] Setting up PSOCK nodes in parallel
[17:03:08.106] List of 36
[17:03:08.106]  $ worker          : chr "localhost"
[17:03:08.106]   ..- attr(*, "localhost")= logi TRUE
[17:03:08.106]  $ master          : chr "localhost"
[17:03:08.106]  $ port            : int 11102
[17:03:08.106]  $ connectTimeout  : num 120
[17:03:08.106]  $ timeout         : num 2592000
[17:03:08.106]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:08.106]  $ homogeneous     : logi TRUE
[17:03:08.106]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:08.106]  $ rscript_envs    : NULL
[17:03:08.106]  $ rscript_libs    : NULL
[17:03:08.106]  $ rscript_startup : NULL
[17:03:08.106]  $ rscript_sh      : chr "sh"
[17:03:08.106]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:08.106]  $ methods         : logi TRUE
[17:03:08.106]  $ socketOptions   : chr "no-delay"
[17:03:08.106]  $ useXDR          : logi FALSE
[17:03:08.106]  $ outfile         : chr "/dev/null"
[17:03:08.106]  $ renice          : int NA
[17:03:08.106]  $ rshcmd          : NULL
[17:03:08.106]  $ user            : chr(0) 
[17:03:08.106]  $ revtunnel       : logi FALSE
[17:03:08.106]  $ rshlogfile      : NULL
[17:03:08.106]  $ rshopts         : chr(0) 
[17:03:08.106]  $ rank            : int 1
[17:03:08.106]  $ manual          : logi FALSE
[17:03:08.106]  $ dryrun          : logi FALSE
[17:03:08.106]  $ quiet           : logi FALSE
[17:03:08.106]  $ setup_strategy  : chr "parallel"
[17:03:08.106]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:08.106]  $ pidfile         : chr "/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a24acc7419.pid"
[17:03:08.106]  $ rshcmd_label    : NULL
[17:03:08.106]  $ rsh_call        : NULL
[17:03:08.106]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:08.106]  $ localMachine    : logi TRUE
[17:03:08.106]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:08.106]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:08.106]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:08.106]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:08.106]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:08.106]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:08.106]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:08.106]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:08.106]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:08.106]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:08.106]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:08.106]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:08.106]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:08.106]  $ arguments       :List of 28
[17:03:08.106]   ..$ worker          : chr "localhost"
[17:03:08.106]   ..$ master          : NULL
[17:03:08.106]   ..$ port            : int 11102
[17:03:08.106]   ..$ connectTimeout  : num 120
[17:03:08.106]   ..$ timeout         : num 2592000
[17:03:08.106]   ..$ rscript         : NULL
[17:03:08.106]   ..$ homogeneous     : NULL
[17:03:08.106]   ..$ rscript_args    : NULL
[17:03:08.106]   ..$ rscript_envs    : NULL
[17:03:08.106]   ..$ rscript_libs    : NULL
[17:03:08.106]   ..$ rscript_startup : NULL
[17:03:08.106]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:08.106]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:08.106]   ..$ methods         : logi TRUE
[17:03:08.106]   ..$ socketOptions   : chr "no-delay"
[17:03:08.106]   ..$ useXDR          : logi FALSE
[17:03:08.106]   ..$ outfile         : chr "/dev/null"
[17:03:08.106]   ..$ renice          : int NA
[17:03:08.106]   ..$ rshcmd          : NULL
[17:03:08.106]   ..$ user            : NULL
[17:03:08.106]   ..$ revtunnel       : logi NA
[17:03:08.106]   ..$ rshlogfile      : NULL
[17:03:08.106]   ..$ rshopts         : NULL
[17:03:08.106]   ..$ rank            : int 1
[17:03:08.106]   ..$ manual          : logi FALSE
[17:03:08.106]   ..$ dryrun          : logi FALSE
[17:03:08.106]   ..$ quiet           : logi FALSE
[17:03:08.106]   ..$ setup_strategy  : chr "parallel"
[17:03:08.106]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:08.122] [local output] System call to launch all workers:
[17:03:08.122] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a24acc7419.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11102 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:08.122] [local output] Starting PSOCK main server
[17:03:08.124] [local output] Workers launched
[17:03:08.124] [local output] Waiting for workers to connect back
[17:03:08.124]  - [local output] 0 workers out of 2 ready
[17:03:08.362]  - [local output] 0 workers out of 2 ready
[17:03:08.362]  - [local output] 1 workers out of 2 ready
[17:03:08.363]  - [local output] 2 workers out of 2 ready
[17:03:08.363] [local output] Launching of workers completed
[17:03:08.363] [local output] Collecting session information from workers
[17:03:08.364] [local output]  - Worker #1 of 2
[17:03:08.364] [local output]  - Worker #2 of 2
[17:03:08.364] [local output] makeClusterPSOCK() ... done
[17:03:08.375] Packages needed by the future expression (n = 0): <none>
[17:03:08.375] Packages needed by future strategies (n = 0): <none>
[17:03:08.377] {
[17:03:08.377]     {
[17:03:08.377]         {
[17:03:08.377]             ...future.startTime <- base::Sys.time()
[17:03:08.377]             {
[17:03:08.377]                 {
[17:03:08.377]                   {
[17:03:08.377]                     base::local({
[17:03:08.377]                       has_future <- base::requireNamespace("future", 
[17:03:08.377]                         quietly = TRUE)
[17:03:08.377]                       if (has_future) {
[17:03:08.377]                         ns <- base::getNamespace("future")
[17:03:08.377]                         version <- ns[[".package"]][["version"]]
[17:03:08.377]                         if (is.null(version)) 
[17:03:08.377]                           version <- utils::packageVersion("future")
[17:03:08.377]                       }
[17:03:08.377]                       else {
[17:03:08.377]                         version <- NULL
[17:03:08.377]                       }
[17:03:08.377]                       if (!has_future || version < "1.8.0") {
[17:03:08.377]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:08.377]                           "", base::R.version$version.string), 
[17:03:08.377]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:08.377]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:08.377]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:08.377]                             "release", "version")], collapse = " "), 
[17:03:08.377]                           hostname = base::Sys.info()[["nodename"]])
[17:03:08.377]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:08.377]                           info)
[17:03:08.377]                         info <- base::paste(info, collapse = "; ")
[17:03:08.377]                         if (!has_future) {
[17:03:08.377]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:08.377]                             info)
[17:03:08.377]                         }
[17:03:08.377]                         else {
[17:03:08.377]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:08.377]                             info, version)
[17:03:08.377]                         }
[17:03:08.377]                         base::stop(msg)
[17:03:08.377]                       }
[17:03:08.377]                     })
[17:03:08.377]                   }
[17:03:08.377]                   ...future.strategy.old <- future::plan("list")
[17:03:08.377]                   options(future.plan = NULL)
[17:03:08.377]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:08.377]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:08.377]                 }
[17:03:08.377]                 ...future.workdir <- getwd()
[17:03:08.377]             }
[17:03:08.377]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:08.377]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:08.377]         }
[17:03:08.377]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:08.377]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:08.377]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:08.377]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:08.377]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:08.377]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:08.377]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:08.377]             base::names(...future.oldOptions))
[17:03:08.377]     }
[17:03:08.377]     if (FALSE) {
[17:03:08.377]     }
[17:03:08.377]     else {
[17:03:08.377]         if (TRUE) {
[17:03:08.377]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:08.377]                 open = "w")
[17:03:08.377]         }
[17:03:08.377]         else {
[17:03:08.377]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:08.377]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:08.377]         }
[17:03:08.377]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:08.377]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:08.377]             base::sink(type = "output", split = FALSE)
[17:03:08.377]             base::close(...future.stdout)
[17:03:08.377]         }, add = TRUE)
[17:03:08.377]     }
[17:03:08.377]     ...future.frame <- base::sys.nframe()
[17:03:08.377]     ...future.conditions <- base::list()
[17:03:08.377]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:08.377]     if (FALSE) {
[17:03:08.377]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:08.377]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:08.377]     }
[17:03:08.377]     ...future.result <- base::tryCatch({
[17:03:08.377]         base::withCallingHandlers({
[17:03:08.377]             ...future.value <- base::withVisible(base::local({
[17:03:08.377]                 ...future.makeSendCondition <- base::local({
[17:03:08.377]                   sendCondition <- NULL
[17:03:08.377]                   function(frame = 1L) {
[17:03:08.377]                     if (is.function(sendCondition)) 
[17:03:08.377]                       return(sendCondition)
[17:03:08.377]                     ns <- getNamespace("parallel")
[17:03:08.377]                     if (exists("sendData", mode = "function", 
[17:03:08.377]                       envir = ns)) {
[17:03:08.377]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:08.377]                         envir = ns)
[17:03:08.377]                       envir <- sys.frame(frame)
[17:03:08.377]                       master <- NULL
[17:03:08.377]                       while (!identical(envir, .GlobalEnv) && 
[17:03:08.377]                         !identical(envir, emptyenv())) {
[17:03:08.377]                         if (exists("master", mode = "list", envir = envir, 
[17:03:08.377]                           inherits = FALSE)) {
[17:03:08.377]                           master <- get("master", mode = "list", 
[17:03:08.377]                             envir = envir, inherits = FALSE)
[17:03:08.377]                           if (inherits(master, c("SOCKnode", 
[17:03:08.377]                             "SOCK0node"))) {
[17:03:08.377]                             sendCondition <<- function(cond) {
[17:03:08.377]                               data <- list(type = "VALUE", value = cond, 
[17:03:08.377]                                 success = TRUE)
[17:03:08.377]                               parallel_sendData(master, data)
[17:03:08.377]                             }
[17:03:08.377]                             return(sendCondition)
[17:03:08.377]                           }
[17:03:08.377]                         }
[17:03:08.377]                         frame <- frame + 1L
[17:03:08.377]                         envir <- sys.frame(frame)
[17:03:08.377]                       }
[17:03:08.377]                     }
[17:03:08.377]                     sendCondition <<- function(cond) NULL
[17:03:08.377]                   }
[17:03:08.377]                 })
[17:03:08.377]                 withCallingHandlers({
[17:03:08.377]                   NA
[17:03:08.377]                 }, immediateCondition = function(cond) {
[17:03:08.377]                   sendCondition <- ...future.makeSendCondition()
[17:03:08.377]                   sendCondition(cond)
[17:03:08.377]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.377]                   {
[17:03:08.377]                     inherits <- base::inherits
[17:03:08.377]                     invokeRestart <- base::invokeRestart
[17:03:08.377]                     is.null <- base::is.null
[17:03:08.377]                     muffled <- FALSE
[17:03:08.377]                     if (inherits(cond, "message")) {
[17:03:08.377]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:08.377]                       if (muffled) 
[17:03:08.377]                         invokeRestart("muffleMessage")
[17:03:08.377]                     }
[17:03:08.377]                     else if (inherits(cond, "warning")) {
[17:03:08.377]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:08.377]                       if (muffled) 
[17:03:08.377]                         invokeRestart("muffleWarning")
[17:03:08.377]                     }
[17:03:08.377]                     else if (inherits(cond, "condition")) {
[17:03:08.377]                       if (!is.null(pattern)) {
[17:03:08.377]                         computeRestarts <- base::computeRestarts
[17:03:08.377]                         grepl <- base::grepl
[17:03:08.377]                         restarts <- computeRestarts(cond)
[17:03:08.377]                         for (restart in restarts) {
[17:03:08.377]                           name <- restart$name
[17:03:08.377]                           if (is.null(name)) 
[17:03:08.377]                             next
[17:03:08.377]                           if (!grepl(pattern, name)) 
[17:03:08.377]                             next
[17:03:08.377]                           invokeRestart(restart)
[17:03:08.377]                           muffled <- TRUE
[17:03:08.377]                           break
[17:03:08.377]                         }
[17:03:08.377]                       }
[17:03:08.377]                     }
[17:03:08.377]                     invisible(muffled)
[17:03:08.377]                   }
[17:03:08.377]                   muffleCondition(cond)
[17:03:08.377]                 })
[17:03:08.377]             }))
[17:03:08.377]             future::FutureResult(value = ...future.value$value, 
[17:03:08.377]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:08.377]                   ...future.rng), globalenv = if (FALSE) 
[17:03:08.377]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:08.377]                     ...future.globalenv.names))
[17:03:08.377]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:08.377]         }, condition = base::local({
[17:03:08.377]             c <- base::c
[17:03:08.377]             inherits <- base::inherits
[17:03:08.377]             invokeRestart <- base::invokeRestart
[17:03:08.377]             length <- base::length
[17:03:08.377]             list <- base::list
[17:03:08.377]             seq.int <- base::seq.int
[17:03:08.377]             signalCondition <- base::signalCondition
[17:03:08.377]             sys.calls <- base::sys.calls
[17:03:08.377]             `[[` <- base::`[[`
[17:03:08.377]             `+` <- base::`+`
[17:03:08.377]             `<<-` <- base::`<<-`
[17:03:08.377]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:08.377]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:08.377]                   3L)]
[17:03:08.377]             }
[17:03:08.377]             function(cond) {
[17:03:08.377]                 is_error <- inherits(cond, "error")
[17:03:08.377]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:08.377]                   NULL)
[17:03:08.377]                 if (is_error) {
[17:03:08.377]                   sessionInformation <- function() {
[17:03:08.377]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:08.377]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:08.377]                       search = base::search(), system = base::Sys.info())
[17:03:08.377]                   }
[17:03:08.377]                   ...future.conditions[[length(...future.conditions) + 
[17:03:08.377]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:08.377]                     cond$call), session = sessionInformation(), 
[17:03:08.377]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:08.377]                   signalCondition(cond)
[17:03:08.377]                 }
[17:03:08.377]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:08.377]                 "immediateCondition"))) {
[17:03:08.377]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:08.377]                   ...future.conditions[[length(...future.conditions) + 
[17:03:08.377]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:08.377]                   if (TRUE && !signal) {
[17:03:08.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.377]                     {
[17:03:08.377]                       inherits <- base::inherits
[17:03:08.377]                       invokeRestart <- base::invokeRestart
[17:03:08.377]                       is.null <- base::is.null
[17:03:08.377]                       muffled <- FALSE
[17:03:08.377]                       if (inherits(cond, "message")) {
[17:03:08.377]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:08.377]                         if (muffled) 
[17:03:08.377]                           invokeRestart("muffleMessage")
[17:03:08.377]                       }
[17:03:08.377]                       else if (inherits(cond, "warning")) {
[17:03:08.377]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:08.377]                         if (muffled) 
[17:03:08.377]                           invokeRestart("muffleWarning")
[17:03:08.377]                       }
[17:03:08.377]                       else if (inherits(cond, "condition")) {
[17:03:08.377]                         if (!is.null(pattern)) {
[17:03:08.377]                           computeRestarts <- base::computeRestarts
[17:03:08.377]                           grepl <- base::grepl
[17:03:08.377]                           restarts <- computeRestarts(cond)
[17:03:08.377]                           for (restart in restarts) {
[17:03:08.377]                             name <- restart$name
[17:03:08.377]                             if (is.null(name)) 
[17:03:08.377]                               next
[17:03:08.377]                             if (!grepl(pattern, name)) 
[17:03:08.377]                               next
[17:03:08.377]                             invokeRestart(restart)
[17:03:08.377]                             muffled <- TRUE
[17:03:08.377]                             break
[17:03:08.377]                           }
[17:03:08.377]                         }
[17:03:08.377]                       }
[17:03:08.377]                       invisible(muffled)
[17:03:08.377]                     }
[17:03:08.377]                     muffleCondition(cond, pattern = "^muffle")
[17:03:08.377]                   }
[17:03:08.377]                 }
[17:03:08.377]                 else {
[17:03:08.377]                   if (TRUE) {
[17:03:08.377]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.377]                     {
[17:03:08.377]                       inherits <- base::inherits
[17:03:08.377]                       invokeRestart <- base::invokeRestart
[17:03:08.377]                       is.null <- base::is.null
[17:03:08.377]                       muffled <- FALSE
[17:03:08.377]                       if (inherits(cond, "message")) {
[17:03:08.377]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:08.377]                         if (muffled) 
[17:03:08.377]                           invokeRestart("muffleMessage")
[17:03:08.377]                       }
[17:03:08.377]                       else if (inherits(cond, "warning")) {
[17:03:08.377]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:08.377]                         if (muffled) 
[17:03:08.377]                           invokeRestart("muffleWarning")
[17:03:08.377]                       }
[17:03:08.377]                       else if (inherits(cond, "condition")) {
[17:03:08.377]                         if (!is.null(pattern)) {
[17:03:08.377]                           computeRestarts <- base::computeRestarts
[17:03:08.377]                           grepl <- base::grepl
[17:03:08.377]                           restarts <- computeRestarts(cond)
[17:03:08.377]                           for (restart in restarts) {
[17:03:08.377]                             name <- restart$name
[17:03:08.377]                             if (is.null(name)) 
[17:03:08.377]                               next
[17:03:08.377]                             if (!grepl(pattern, name)) 
[17:03:08.377]                               next
[17:03:08.377]                             invokeRestart(restart)
[17:03:08.377]                             muffled <- TRUE
[17:03:08.377]                             break
[17:03:08.377]                           }
[17:03:08.377]                         }
[17:03:08.377]                       }
[17:03:08.377]                       invisible(muffled)
[17:03:08.377]                     }
[17:03:08.377]                     muffleCondition(cond, pattern = "^muffle")
[17:03:08.377]                   }
[17:03:08.377]                 }
[17:03:08.377]             }
[17:03:08.377]         }))
[17:03:08.377]     }, error = function(ex) {
[17:03:08.377]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:08.377]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:08.377]                 ...future.rng), started = ...future.startTime, 
[17:03:08.377]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:08.377]             version = "1.8"), class = "FutureResult")
[17:03:08.377]     }, finally = {
[17:03:08.377]         if (!identical(...future.workdir, getwd())) 
[17:03:08.377]             setwd(...future.workdir)
[17:03:08.377]         {
[17:03:08.377]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:08.377]                 ...future.oldOptions$nwarnings <- NULL
[17:03:08.377]             }
[17:03:08.377]             base::options(...future.oldOptions)
[17:03:08.377]             if (.Platform$OS.type == "windows") {
[17:03:08.377]                 old_names <- names(...future.oldEnvVars)
[17:03:08.377]                 envs <- base::Sys.getenv()
[17:03:08.377]                 names <- names(envs)
[17:03:08.377]                 common <- intersect(names, old_names)
[17:03:08.377]                 added <- setdiff(names, old_names)
[17:03:08.377]                 removed <- setdiff(old_names, names)
[17:03:08.377]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:08.377]                   envs[common]]
[17:03:08.377]                 NAMES <- toupper(changed)
[17:03:08.377]                 args <- list()
[17:03:08.377]                 for (kk in seq_along(NAMES)) {
[17:03:08.377]                   name <- changed[[kk]]
[17:03:08.377]                   NAME <- NAMES[[kk]]
[17:03:08.377]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.377]                     next
[17:03:08.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:08.377]                 }
[17:03:08.377]                 NAMES <- toupper(added)
[17:03:08.377]                 for (kk in seq_along(NAMES)) {
[17:03:08.377]                   name <- added[[kk]]
[17:03:08.377]                   NAME <- NAMES[[kk]]
[17:03:08.377]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.377]                     next
[17:03:08.377]                   args[[name]] <- ""
[17:03:08.377]                 }
[17:03:08.377]                 NAMES <- toupper(removed)
[17:03:08.377]                 for (kk in seq_along(NAMES)) {
[17:03:08.377]                   name <- removed[[kk]]
[17:03:08.377]                   NAME <- NAMES[[kk]]
[17:03:08.377]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.377]                     next
[17:03:08.377]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:08.377]                 }
[17:03:08.377]                 if (length(args) > 0) 
[17:03:08.377]                   base::do.call(base::Sys.setenv, args = args)
[17:03:08.377]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:08.377]             }
[17:03:08.377]             else {
[17:03:08.377]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:08.377]             }
[17:03:08.377]             {
[17:03:08.377]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:08.377]                   0L) {
[17:03:08.377]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:08.377]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:08.377]                   base::options(opts)
[17:03:08.377]                 }
[17:03:08.377]                 {
[17:03:08.377]                   NULL
[17:03:08.377]                   options(future.plan = NULL)
[17:03:08.377]                   if (is.na(NA_character_)) 
[17:03:08.377]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:08.377]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:08.377]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:08.377]                     .init = FALSE)
[17:03:08.377]                 }
[17:03:08.377]             }
[17:03:08.377]         }
[17:03:08.377]     })
[17:03:08.377]     if (TRUE) {
[17:03:08.377]         base::sink(type = "output", split = FALSE)
[17:03:08.377]         if (TRUE) {
[17:03:08.377]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:08.377]         }
[17:03:08.377]         else {
[17:03:08.377]             ...future.result["stdout"] <- base::list(NULL)
[17:03:08.377]         }
[17:03:08.377]         base::close(...future.stdout)
[17:03:08.377]         ...future.stdout <- NULL
[17:03:08.377]     }
[17:03:08.377]     ...future.result$conditions <- ...future.conditions
[17:03:08.377]     ...future.result$finished <- base::Sys.time()
[17:03:08.377]     ...future.result
[17:03:08.377] }
[17:03:08.431] ClusterFuture started
[17:03:08.432] result() for ClusterFuture ...
[17:03:08.432] receiveMessageFromWorker() for ClusterFuture ...
[17:03:08.432] - Validating connection of ClusterFuture
[17:03:08.465] - received message: FutureResult
[17:03:08.465] - Received FutureResult
[17:03:08.465] - Erased future from FutureRegistry
[17:03:08.466] result() for ClusterFuture ...
[17:03:08.466] - result already collected: FutureResult
[17:03:08.466] result() for ClusterFuture ... done
[17:03:08.466] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:08.466] result() for ClusterFuture ... done
[17:03:08.466] result() for ClusterFuture ...
[17:03:08.466] - result already collected: FutureResult
[17:03:08.466] result() for ClusterFuture ... done
[17:03:08.466] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:08.467] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[17:03:08.467] plan(): Setting new future strategy stack:
[17:03:08.467] List of future strategies:
[17:03:08.467] 1. cluster:
[17:03:08.467]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[17:03:08.467]    - tweaked: TRUE
[17:03:08.467]    - call: plan(cluster, workers = allButOneWorker)
[17:03:08.468] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:08.468] cluster:
[17:03:08.468] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[17:03:08.468] - tweaked: TRUE
[17:03:08.468] - call: plan(cluster, workers = allButOneWorker)
[17:03:08.469] getGlobalsAndPackages() ...
[17:03:08.470] Not searching for globals
[17:03:08.470] - globals: [0] <none>
[17:03:08.470] getGlobalsAndPackages() ... DONE
[17:03:08.477] [local output] makeClusterPSOCK() ...
[17:03:08.477] [local output] Workers: [n = 1] ‘localhost’
[17:03:08.478] [local output] Base port: 11936
[17:03:08.478] [local output] Getting setup options for 1 cluster nodes ...
[17:03:08.478] [local output]  - Node 1 of 1 ...
[17:03:08.479] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:08.479] [local output] Rscript port: 11936

[17:03:08.480] [local output] Getting setup options for 1 cluster nodes ... done
[17:03:08.480] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:08.480] [local output] Setting up PSOCK nodes in parallel
[17:03:08.480] List of 36
[17:03:08.480]  $ worker          : chr "localhost"
[17:03:08.480]   ..- attr(*, "localhost")= logi TRUE
[17:03:08.480]  $ master          : chr "localhost"
[17:03:08.480]  $ port            : int 11936
[17:03:08.480]  $ connectTimeout  : num 120
[17:03:08.480]  $ timeout         : num 2592000
[17:03:08.480]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:08.480]  $ homogeneous     : logi TRUE
[17:03:08.480]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:08.480]  $ rscript_envs    : NULL
[17:03:08.480]  $ rscript_libs    : NULL
[17:03:08.480]  $ rscript_startup : NULL
[17:03:08.480]  $ rscript_sh      : chr "sh"
[17:03:08.480]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:08.480]  $ methods         : logi TRUE
[17:03:08.480]  $ socketOptions   : chr "no-delay"
[17:03:08.480]  $ useXDR          : logi FALSE
[17:03:08.480]  $ outfile         : chr "/dev/null"
[17:03:08.480]  $ renice          : int NA
[17:03:08.480]  $ rshcmd          : NULL
[17:03:08.480]  $ user            : chr(0) 
[17:03:08.480]  $ revtunnel       : logi FALSE
[17:03:08.480]  $ rshlogfile      : NULL
[17:03:08.480]  $ rshopts         : chr(0) 
[17:03:08.480]  $ rank            : int 1
[17:03:08.480]  $ manual          : logi FALSE
[17:03:08.480]  $ dryrun          : logi FALSE
[17:03:08.480]  $ quiet           : logi FALSE
[17:03:08.480]  $ setup_strategy  : chr "parallel"
[17:03:08.480]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:08.480]  $ pidfile         : chr "/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a22f8e6c31.pid"
[17:03:08.480]  $ rshcmd_label    : NULL
[17:03:08.480]  $ rsh_call        : NULL
[17:03:08.480]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:08.480]  $ localMachine    : logi TRUE
[17:03:08.480]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:08.480]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:08.480]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:08.480]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:08.480]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:08.480]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:08.480]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:08.480]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:08.480]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:08.480]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:08.480]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:08.480]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:08.480]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:08.480]  $ arguments       :List of 28
[17:03:08.480]   ..$ worker          : chr "localhost"
[17:03:08.480]   ..$ master          : NULL
[17:03:08.480]   ..$ port            : int 11936
[17:03:08.480]   ..$ connectTimeout  : num 120
[17:03:08.480]   ..$ timeout         : num 2592000
[17:03:08.480]   ..$ rscript         : NULL
[17:03:08.480]   ..$ homogeneous     : NULL
[17:03:08.480]   ..$ rscript_args    : NULL
[17:03:08.480]   ..$ rscript_envs    : NULL
[17:03:08.480]   ..$ rscript_libs    : NULL
[17:03:08.480]   ..$ rscript_startup : NULL
[17:03:08.480]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:08.480]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:08.480]   ..$ methods         : logi TRUE
[17:03:08.480]   ..$ socketOptions   : chr "no-delay"
[17:03:08.480]   ..$ useXDR          : logi FALSE
[17:03:08.480]   ..$ outfile         : chr "/dev/null"
[17:03:08.480]   ..$ renice          : int NA
[17:03:08.480]   ..$ rshcmd          : NULL
[17:03:08.480]   ..$ user            : NULL
[17:03:08.480]   ..$ revtunnel       : logi NA
[17:03:08.480]   ..$ rshlogfile      : NULL
[17:03:08.480]   ..$ rshopts         : NULL
[17:03:08.480]   ..$ rank            : int 1
[17:03:08.480]   ..$ manual          : logi FALSE
[17:03:08.480]   ..$ dryrun          : logi FALSE
[17:03:08.480]   ..$ quiet           : logi FALSE
[17:03:08.480]   ..$ setup_strategy  : chr "parallel"
[17:03:08.480]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:08.497] [local output] System call to launch all workers:
[17:03:08.497] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a22f8e6c31.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11936 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:08.497] [local output] Starting PSOCK main server
[17:03:08.498] [local output] Workers launched
[17:03:08.499] [local output] Waiting for workers to connect back
[17:03:08.499]  - [local output] 0 workers out of 1 ready
[17:03:08.694]  - [local output] 0 workers out of 1 ready
[17:03:08.694]  - [local output] 1 workers out of 1 ready
[17:03:08.694] [local output] Launching of workers completed
[17:03:08.694] [local output] Collecting session information from workers
[17:03:08.695] [local output]  - Worker #1 of 1
[17:03:08.695] [local output] makeClusterPSOCK() ... done
[17:03:08.701] Packages needed by the future expression (n = 0): <none>
[17:03:08.702] Packages needed by future strategies (n = 0): <none>
[17:03:08.702] {
[17:03:08.702]     {
[17:03:08.702]         {
[17:03:08.702]             ...future.startTime <- base::Sys.time()
[17:03:08.702]             {
[17:03:08.702]                 {
[17:03:08.702]                   {
[17:03:08.702]                     base::local({
[17:03:08.702]                       has_future <- base::requireNamespace("future", 
[17:03:08.702]                         quietly = TRUE)
[17:03:08.702]                       if (has_future) {
[17:03:08.702]                         ns <- base::getNamespace("future")
[17:03:08.702]                         version <- ns[[".package"]][["version"]]
[17:03:08.702]                         if (is.null(version)) 
[17:03:08.702]                           version <- utils::packageVersion("future")
[17:03:08.702]                       }
[17:03:08.702]                       else {
[17:03:08.702]                         version <- NULL
[17:03:08.702]                       }
[17:03:08.702]                       if (!has_future || version < "1.8.0") {
[17:03:08.702]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:08.702]                           "", base::R.version$version.string), 
[17:03:08.702]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:08.702]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:08.702]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:08.702]                             "release", "version")], collapse = " "), 
[17:03:08.702]                           hostname = base::Sys.info()[["nodename"]])
[17:03:08.702]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:08.702]                           info)
[17:03:08.702]                         info <- base::paste(info, collapse = "; ")
[17:03:08.702]                         if (!has_future) {
[17:03:08.702]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:08.702]                             info)
[17:03:08.702]                         }
[17:03:08.702]                         else {
[17:03:08.702]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:08.702]                             info, version)
[17:03:08.702]                         }
[17:03:08.702]                         base::stop(msg)
[17:03:08.702]                       }
[17:03:08.702]                     })
[17:03:08.702]                   }
[17:03:08.702]                   ...future.strategy.old <- future::plan("list")
[17:03:08.702]                   options(future.plan = NULL)
[17:03:08.702]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:08.702]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:08.702]                 }
[17:03:08.702]                 ...future.workdir <- getwd()
[17:03:08.702]             }
[17:03:08.702]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:08.702]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:08.702]         }
[17:03:08.702]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:08.702]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:08.702]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:08.702]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:08.702]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:08.702]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:08.702]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:08.702]             base::names(...future.oldOptions))
[17:03:08.702]     }
[17:03:08.702]     if (FALSE) {
[17:03:08.702]     }
[17:03:08.702]     else {
[17:03:08.702]         if (TRUE) {
[17:03:08.702]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:08.702]                 open = "w")
[17:03:08.702]         }
[17:03:08.702]         else {
[17:03:08.702]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:08.702]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:08.702]         }
[17:03:08.702]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:08.702]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:08.702]             base::sink(type = "output", split = FALSE)
[17:03:08.702]             base::close(...future.stdout)
[17:03:08.702]         }, add = TRUE)
[17:03:08.702]     }
[17:03:08.702]     ...future.frame <- base::sys.nframe()
[17:03:08.702]     ...future.conditions <- base::list()
[17:03:08.702]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:08.702]     if (FALSE) {
[17:03:08.702]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:08.702]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:08.702]     }
[17:03:08.702]     ...future.result <- base::tryCatch({
[17:03:08.702]         base::withCallingHandlers({
[17:03:08.702]             ...future.value <- base::withVisible(base::local({
[17:03:08.702]                 ...future.makeSendCondition <- base::local({
[17:03:08.702]                   sendCondition <- NULL
[17:03:08.702]                   function(frame = 1L) {
[17:03:08.702]                     if (is.function(sendCondition)) 
[17:03:08.702]                       return(sendCondition)
[17:03:08.702]                     ns <- getNamespace("parallel")
[17:03:08.702]                     if (exists("sendData", mode = "function", 
[17:03:08.702]                       envir = ns)) {
[17:03:08.702]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:08.702]                         envir = ns)
[17:03:08.702]                       envir <- sys.frame(frame)
[17:03:08.702]                       master <- NULL
[17:03:08.702]                       while (!identical(envir, .GlobalEnv) && 
[17:03:08.702]                         !identical(envir, emptyenv())) {
[17:03:08.702]                         if (exists("master", mode = "list", envir = envir, 
[17:03:08.702]                           inherits = FALSE)) {
[17:03:08.702]                           master <- get("master", mode = "list", 
[17:03:08.702]                             envir = envir, inherits = FALSE)
[17:03:08.702]                           if (inherits(master, c("SOCKnode", 
[17:03:08.702]                             "SOCK0node"))) {
[17:03:08.702]                             sendCondition <<- function(cond) {
[17:03:08.702]                               data <- list(type = "VALUE", value = cond, 
[17:03:08.702]                                 success = TRUE)
[17:03:08.702]                               parallel_sendData(master, data)
[17:03:08.702]                             }
[17:03:08.702]                             return(sendCondition)
[17:03:08.702]                           }
[17:03:08.702]                         }
[17:03:08.702]                         frame <- frame + 1L
[17:03:08.702]                         envir <- sys.frame(frame)
[17:03:08.702]                       }
[17:03:08.702]                     }
[17:03:08.702]                     sendCondition <<- function(cond) NULL
[17:03:08.702]                   }
[17:03:08.702]                 })
[17:03:08.702]                 withCallingHandlers({
[17:03:08.702]                   NA
[17:03:08.702]                 }, immediateCondition = function(cond) {
[17:03:08.702]                   sendCondition <- ...future.makeSendCondition()
[17:03:08.702]                   sendCondition(cond)
[17:03:08.702]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.702]                   {
[17:03:08.702]                     inherits <- base::inherits
[17:03:08.702]                     invokeRestart <- base::invokeRestart
[17:03:08.702]                     is.null <- base::is.null
[17:03:08.702]                     muffled <- FALSE
[17:03:08.702]                     if (inherits(cond, "message")) {
[17:03:08.702]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:08.702]                       if (muffled) 
[17:03:08.702]                         invokeRestart("muffleMessage")
[17:03:08.702]                     }
[17:03:08.702]                     else if (inherits(cond, "warning")) {
[17:03:08.702]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:08.702]                       if (muffled) 
[17:03:08.702]                         invokeRestart("muffleWarning")
[17:03:08.702]                     }
[17:03:08.702]                     else if (inherits(cond, "condition")) {
[17:03:08.702]                       if (!is.null(pattern)) {
[17:03:08.702]                         computeRestarts <- base::computeRestarts
[17:03:08.702]                         grepl <- base::grepl
[17:03:08.702]                         restarts <- computeRestarts(cond)
[17:03:08.702]                         for (restart in restarts) {
[17:03:08.702]                           name <- restart$name
[17:03:08.702]                           if (is.null(name)) 
[17:03:08.702]                             next
[17:03:08.702]                           if (!grepl(pattern, name)) 
[17:03:08.702]                             next
[17:03:08.702]                           invokeRestart(restart)
[17:03:08.702]                           muffled <- TRUE
[17:03:08.702]                           break
[17:03:08.702]                         }
[17:03:08.702]                       }
[17:03:08.702]                     }
[17:03:08.702]                     invisible(muffled)
[17:03:08.702]                   }
[17:03:08.702]                   muffleCondition(cond)
[17:03:08.702]                 })
[17:03:08.702]             }))
[17:03:08.702]             future::FutureResult(value = ...future.value$value, 
[17:03:08.702]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:08.702]                   ...future.rng), globalenv = if (FALSE) 
[17:03:08.702]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:08.702]                     ...future.globalenv.names))
[17:03:08.702]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:08.702]         }, condition = base::local({
[17:03:08.702]             c <- base::c
[17:03:08.702]             inherits <- base::inherits
[17:03:08.702]             invokeRestart <- base::invokeRestart
[17:03:08.702]             length <- base::length
[17:03:08.702]             list <- base::list
[17:03:08.702]             seq.int <- base::seq.int
[17:03:08.702]             signalCondition <- base::signalCondition
[17:03:08.702]             sys.calls <- base::sys.calls
[17:03:08.702]             `[[` <- base::`[[`
[17:03:08.702]             `+` <- base::`+`
[17:03:08.702]             `<<-` <- base::`<<-`
[17:03:08.702]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:08.702]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:08.702]                   3L)]
[17:03:08.702]             }
[17:03:08.702]             function(cond) {
[17:03:08.702]                 is_error <- inherits(cond, "error")
[17:03:08.702]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:08.702]                   NULL)
[17:03:08.702]                 if (is_error) {
[17:03:08.702]                   sessionInformation <- function() {
[17:03:08.702]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:08.702]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:08.702]                       search = base::search(), system = base::Sys.info())
[17:03:08.702]                   }
[17:03:08.702]                   ...future.conditions[[length(...future.conditions) + 
[17:03:08.702]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:08.702]                     cond$call), session = sessionInformation(), 
[17:03:08.702]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:08.702]                   signalCondition(cond)
[17:03:08.702]                 }
[17:03:08.702]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:08.702]                 "immediateCondition"))) {
[17:03:08.702]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:08.702]                   ...future.conditions[[length(...future.conditions) + 
[17:03:08.702]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:08.702]                   if (TRUE && !signal) {
[17:03:08.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.702]                     {
[17:03:08.702]                       inherits <- base::inherits
[17:03:08.702]                       invokeRestart <- base::invokeRestart
[17:03:08.702]                       is.null <- base::is.null
[17:03:08.702]                       muffled <- FALSE
[17:03:08.702]                       if (inherits(cond, "message")) {
[17:03:08.702]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:08.702]                         if (muffled) 
[17:03:08.702]                           invokeRestart("muffleMessage")
[17:03:08.702]                       }
[17:03:08.702]                       else if (inherits(cond, "warning")) {
[17:03:08.702]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:08.702]                         if (muffled) 
[17:03:08.702]                           invokeRestart("muffleWarning")
[17:03:08.702]                       }
[17:03:08.702]                       else if (inherits(cond, "condition")) {
[17:03:08.702]                         if (!is.null(pattern)) {
[17:03:08.702]                           computeRestarts <- base::computeRestarts
[17:03:08.702]                           grepl <- base::grepl
[17:03:08.702]                           restarts <- computeRestarts(cond)
[17:03:08.702]                           for (restart in restarts) {
[17:03:08.702]                             name <- restart$name
[17:03:08.702]                             if (is.null(name)) 
[17:03:08.702]                               next
[17:03:08.702]                             if (!grepl(pattern, name)) 
[17:03:08.702]                               next
[17:03:08.702]                             invokeRestart(restart)
[17:03:08.702]                             muffled <- TRUE
[17:03:08.702]                             break
[17:03:08.702]                           }
[17:03:08.702]                         }
[17:03:08.702]                       }
[17:03:08.702]                       invisible(muffled)
[17:03:08.702]                     }
[17:03:08.702]                     muffleCondition(cond, pattern = "^muffle")
[17:03:08.702]                   }
[17:03:08.702]                 }
[17:03:08.702]                 else {
[17:03:08.702]                   if (TRUE) {
[17:03:08.702]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:08.702]                     {
[17:03:08.702]                       inherits <- base::inherits
[17:03:08.702]                       invokeRestart <- base::invokeRestart
[17:03:08.702]                       is.null <- base::is.null
[17:03:08.702]                       muffled <- FALSE
[17:03:08.702]                       if (inherits(cond, "message")) {
[17:03:08.702]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:08.702]                         if (muffled) 
[17:03:08.702]                           invokeRestart("muffleMessage")
[17:03:08.702]                       }
[17:03:08.702]                       else if (inherits(cond, "warning")) {
[17:03:08.702]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:08.702]                         if (muffled) 
[17:03:08.702]                           invokeRestart("muffleWarning")
[17:03:08.702]                       }
[17:03:08.702]                       else if (inherits(cond, "condition")) {
[17:03:08.702]                         if (!is.null(pattern)) {
[17:03:08.702]                           computeRestarts <- base::computeRestarts
[17:03:08.702]                           grepl <- base::grepl
[17:03:08.702]                           restarts <- computeRestarts(cond)
[17:03:08.702]                           for (restart in restarts) {
[17:03:08.702]                             name <- restart$name
[17:03:08.702]                             if (is.null(name)) 
[17:03:08.702]                               next
[17:03:08.702]                             if (!grepl(pattern, name)) 
[17:03:08.702]                               next
[17:03:08.702]                             invokeRestart(restart)
[17:03:08.702]                             muffled <- TRUE
[17:03:08.702]                             break
[17:03:08.702]                           }
[17:03:08.702]                         }
[17:03:08.702]                       }
[17:03:08.702]                       invisible(muffled)
[17:03:08.702]                     }
[17:03:08.702]                     muffleCondition(cond, pattern = "^muffle")
[17:03:08.702]                   }
[17:03:08.702]                 }
[17:03:08.702]             }
[17:03:08.702]         }))
[17:03:08.702]     }, error = function(ex) {
[17:03:08.702]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:08.702]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:08.702]                 ...future.rng), started = ...future.startTime, 
[17:03:08.702]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:08.702]             version = "1.8"), class = "FutureResult")
[17:03:08.702]     }, finally = {
[17:03:08.702]         if (!identical(...future.workdir, getwd())) 
[17:03:08.702]             setwd(...future.workdir)
[17:03:08.702]         {
[17:03:08.702]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:08.702]                 ...future.oldOptions$nwarnings <- NULL
[17:03:08.702]             }
[17:03:08.702]             base::options(...future.oldOptions)
[17:03:08.702]             if (.Platform$OS.type == "windows") {
[17:03:08.702]                 old_names <- names(...future.oldEnvVars)
[17:03:08.702]                 envs <- base::Sys.getenv()
[17:03:08.702]                 names <- names(envs)
[17:03:08.702]                 common <- intersect(names, old_names)
[17:03:08.702]                 added <- setdiff(names, old_names)
[17:03:08.702]                 removed <- setdiff(old_names, names)
[17:03:08.702]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:08.702]                   envs[common]]
[17:03:08.702]                 NAMES <- toupper(changed)
[17:03:08.702]                 args <- list()
[17:03:08.702]                 for (kk in seq_along(NAMES)) {
[17:03:08.702]                   name <- changed[[kk]]
[17:03:08.702]                   NAME <- NAMES[[kk]]
[17:03:08.702]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.702]                     next
[17:03:08.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:08.702]                 }
[17:03:08.702]                 NAMES <- toupper(added)
[17:03:08.702]                 for (kk in seq_along(NAMES)) {
[17:03:08.702]                   name <- added[[kk]]
[17:03:08.702]                   NAME <- NAMES[[kk]]
[17:03:08.702]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.702]                     next
[17:03:08.702]                   args[[name]] <- ""
[17:03:08.702]                 }
[17:03:08.702]                 NAMES <- toupper(removed)
[17:03:08.702]                 for (kk in seq_along(NAMES)) {
[17:03:08.702]                   name <- removed[[kk]]
[17:03:08.702]                   NAME <- NAMES[[kk]]
[17:03:08.702]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:08.702]                     next
[17:03:08.702]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:08.702]                 }
[17:03:08.702]                 if (length(args) > 0) 
[17:03:08.702]                   base::do.call(base::Sys.setenv, args = args)
[17:03:08.702]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:08.702]             }
[17:03:08.702]             else {
[17:03:08.702]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:08.702]             }
[17:03:08.702]             {
[17:03:08.702]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:08.702]                   0L) {
[17:03:08.702]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:08.702]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:08.702]                   base::options(opts)
[17:03:08.702]                 }
[17:03:08.702]                 {
[17:03:08.702]                   NULL
[17:03:08.702]                   options(future.plan = NULL)
[17:03:08.702]                   if (is.na(NA_character_)) 
[17:03:08.702]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:08.702]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:08.702]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:08.702]                     .init = FALSE)
[17:03:08.702]                 }
[17:03:08.702]             }
[17:03:08.702]         }
[17:03:08.702]     })
[17:03:08.702]     if (TRUE) {
[17:03:08.702]         base::sink(type = "output", split = FALSE)
[17:03:08.702]         if (TRUE) {
[17:03:08.702]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:08.702]         }
[17:03:08.702]         else {
[17:03:08.702]             ...future.result["stdout"] <- base::list(NULL)
[17:03:08.702]         }
[17:03:08.702]         base::close(...future.stdout)
[17:03:08.702]         ...future.stdout <- NULL
[17:03:08.702]     }
[17:03:08.702]     ...future.result$conditions <- ...future.conditions
[17:03:08.702]     ...future.result$finished <- base::Sys.time()
[17:03:08.702]     ...future.result
[17:03:08.702] }
[17:03:08.756] ClusterFuture started
[17:03:08.757] result() for ClusterFuture ...
[17:03:08.757] receiveMessageFromWorker() for ClusterFuture ...
[17:03:08.757] - Validating connection of ClusterFuture
[17:03:08.789] - received message: FutureResult
[17:03:08.790] - Received FutureResult
[17:03:08.790] - Erased future from FutureRegistry
[17:03:08.790] result() for ClusterFuture ...
[17:03:08.790] - result already collected: FutureResult
[17:03:08.790] result() for ClusterFuture ... done
[17:03:08.790] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:08.790] result() for ClusterFuture ... done
[17:03:08.790] result() for ClusterFuture ...
[17:03:08.790] - result already collected: FutureResult
[17:03:08.791] result() for ClusterFuture ... done
[17:03:08.791] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:08.797] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
[17:03:08.802] [local output] makeClusterPSOCK() ...
[17:03:08.805] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:03:08.805] [local output] Base port: 11789
[17:03:08.805] [local output] Getting setup options for 2 cluster nodes ...
[17:03:08.806] [local output]  - Node 1 of 2 ...
[17:03:08.806] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:08.807] [local output] Rscript port: 11789

[17:03:08.807] [local output]  - Node 2 of 2 ...
[17:03:08.807] [local output] localMachine=TRUE => revtunnel=FALSE

[17:03:08.808] [local output] Rscript port: 11789

[17:03:08.808] [local output] Getting setup options for 2 cluster nodes ... done
[17:03:08.808] [local output]  - Parallel setup requested for some PSOCK nodes
[17:03:08.808] [local output] Setting up PSOCK nodes in parallel
[17:03:08.808] List of 36
[17:03:08.808]  $ worker          : chr "localhost"
[17:03:08.808]   ..- attr(*, "localhost")= logi TRUE
[17:03:08.808]  $ master          : chr "localhost"
[17:03:08.808]  $ port            : int 11789
[17:03:08.808]  $ connectTimeout  : num 120
[17:03:08.808]  $ timeout         : num 2592000
[17:03:08.808]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:03:08.808]  $ homogeneous     : logi TRUE
[17:03:08.808]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:03:08.808]  $ rscript_envs    : NULL
[17:03:08.808]  $ rscript_libs    : NULL
[17:03:08.808]  $ rscript_startup : NULL
[17:03:08.808]  $ rscript_sh      : chr "sh"
[17:03:08.808]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:08.808]  $ methods         : logi TRUE
[17:03:08.808]  $ socketOptions   : chr "no-delay"
[17:03:08.808]  $ useXDR          : logi FALSE
[17:03:08.808]  $ outfile         : chr "/dev/null"
[17:03:08.808]  $ renice          : int NA
[17:03:08.808]  $ rshcmd          : NULL
[17:03:08.808]  $ user            : chr(0) 
[17:03:08.808]  $ revtunnel       : logi FALSE
[17:03:08.808]  $ rshlogfile      : NULL
[17:03:08.808]  $ rshopts         : chr(0) 
[17:03:08.808]  $ rank            : int 1
[17:03:08.808]  $ manual          : logi FALSE
[17:03:08.808]  $ dryrun          : logi FALSE
[17:03:08.808]  $ quiet           : logi FALSE
[17:03:08.808]  $ setup_strategy  : chr "parallel"
[17:03:08.808]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:08.808]  $ pidfile         : chr "/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a26bf53ee0.pid"
[17:03:08.808]  $ rshcmd_label    : NULL
[17:03:08.808]  $ rsh_call        : NULL
[17:03:08.808]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:03:08.808]  $ localMachine    : logi TRUE
[17:03:08.808]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:03:08.808]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:03:08.808]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:03:08.808]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:03:08.808]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:03:08.808]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:03:08.808]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:03:08.808]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:03:08.808]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:03:08.808]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:03:08.808]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:03:08.808]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:03:08.808]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:03:08.808]  $ arguments       :List of 28
[17:03:08.808]   ..$ worker          : chr "localhost"
[17:03:08.808]   ..$ master          : NULL
[17:03:08.808]   ..$ port            : int 11789
[17:03:08.808]   ..$ connectTimeout  : num 120
[17:03:08.808]   ..$ timeout         : num 2592000
[17:03:08.808]   ..$ rscript         : NULL
[17:03:08.808]   ..$ homogeneous     : NULL
[17:03:08.808]   ..$ rscript_args    : NULL
[17:03:08.808]   ..$ rscript_envs    : NULL
[17:03:08.808]   ..$ rscript_libs    : NULL
[17:03:08.808]   ..$ rscript_startup : NULL
[17:03:08.808]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:03:08.808]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:03:08.808]   ..$ methods         : logi TRUE
[17:03:08.808]   ..$ socketOptions   : chr "no-delay"
[17:03:08.808]   ..$ useXDR          : logi FALSE
[17:03:08.808]   ..$ outfile         : chr "/dev/null"
[17:03:08.808]   ..$ renice          : int NA
[17:03:08.808]   ..$ rshcmd          : NULL
[17:03:08.808]   ..$ user            : NULL
[17:03:08.808]   ..$ revtunnel       : logi NA
[17:03:08.808]   ..$ rshlogfile      : NULL
[17:03:08.808]   ..$ rshopts         : NULL
[17:03:08.808]   ..$ rank            : int 1
[17:03:08.808]   ..$ manual          : logi FALSE
[17:03:08.808]   ..$ dryrun          : logi FALSE
[17:03:08.808]   ..$ quiet           : logi FALSE
[17:03:08.808]   ..$ setup_strategy  : chr "parallel"
[17:03:08.808]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:03:08.826] [local output] System call to launch all workers:
[17:03:08.826] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpaqh7mt/worker.rank=1.parallelly.parent=45986.b3a26bf53ee0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11789 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:03:08.827] [local output] Starting PSOCK main server
[17:03:08.828] [local output] Workers launched
[17:03:08.828] [local output] Waiting for workers to connect back
[17:03:08.829]  - [local output] 0 workers out of 2 ready
[17:03:09.073]  - [local output] 0 workers out of 2 ready
[17:03:09.074]  - [local output] 1 workers out of 2 ready
[17:03:09.078]  - [local output] 1 workers out of 2 ready
[17:03:09.078]  - [local output] 2 workers out of 2 ready
[17:03:09.079] [local output] Launching of workers completed
[17:03:09.079] [local output] Collecting session information from workers
[17:03:09.079] [local output]  - Worker #1 of 2
[17:03:09.080] [local output]  - Worker #2 of 2
[17:03:09.080] [local output] makeClusterPSOCK() ... done
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[17:03:09.084] plan(): Setting new future strategy stack:
[17:03:09.084] List of future strategies:
[17:03:09.084] 1. cluster:
[17:03:09.084]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[17:03:09.084]    - tweaked: TRUE
[17:03:09.084]    - call: plan(cluster, workers = workers)
[17:03:09.086] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:03:09.086] cluster:
[17:03:09.086] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.0 (2024-04-24), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[17:03:09.086] - tweaked: TRUE
[17:03:09.086] - call: plan(cluster, workers = workers)
[17:03:09.088] getGlobalsAndPackages() ...
[17:03:09.088] Not searching for globals
[17:03:09.088] - globals: [0] <none>
[17:03:09.088] getGlobalsAndPackages() ... DONE
[17:03:09.099] Packages needed by the future expression (n = 0): <none>
[17:03:09.099] Packages needed by future strategies (n = 0): <none>
[17:03:09.100] {
[17:03:09.100]     {
[17:03:09.100]         {
[17:03:09.100]             ...future.startTime <- base::Sys.time()
[17:03:09.100]             {
[17:03:09.100]                 {
[17:03:09.100]                   {
[17:03:09.100]                     base::local({
[17:03:09.100]                       has_future <- base::requireNamespace("future", 
[17:03:09.100]                         quietly = TRUE)
[17:03:09.100]                       if (has_future) {
[17:03:09.100]                         ns <- base::getNamespace("future")
[17:03:09.100]                         version <- ns[[".package"]][["version"]]
[17:03:09.100]                         if (is.null(version)) 
[17:03:09.100]                           version <- utils::packageVersion("future")
[17:03:09.100]                       }
[17:03:09.100]                       else {
[17:03:09.100]                         version <- NULL
[17:03:09.100]                       }
[17:03:09.100]                       if (!has_future || version < "1.8.0") {
[17:03:09.100]                         info <- base::c(r_version = base::gsub("R version ", 
[17:03:09.100]                           "", base::R.version$version.string), 
[17:03:09.100]                           platform = base::sprintf("%s (%s-bit)", 
[17:03:09.100]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:03:09.100]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:03:09.100]                             "release", "version")], collapse = " "), 
[17:03:09.100]                           hostname = base::Sys.info()[["nodename"]])
[17:03:09.100]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:03:09.100]                           info)
[17:03:09.100]                         info <- base::paste(info, collapse = "; ")
[17:03:09.100]                         if (!has_future) {
[17:03:09.100]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:03:09.100]                             info)
[17:03:09.100]                         }
[17:03:09.100]                         else {
[17:03:09.100]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:03:09.100]                             info, version)
[17:03:09.100]                         }
[17:03:09.100]                         base::stop(msg)
[17:03:09.100]                       }
[17:03:09.100]                     })
[17:03:09.100]                   }
[17:03:09.100]                   ...future.strategy.old <- future::plan("list")
[17:03:09.100]                   options(future.plan = NULL)
[17:03:09.100]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:03:09.100]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:03:09.100]                 }
[17:03:09.100]                 ...future.workdir <- getwd()
[17:03:09.100]             }
[17:03:09.100]             ...future.oldOptions <- base::as.list(base::.Options)
[17:03:09.100]             ...future.oldEnvVars <- base::Sys.getenv()
[17:03:09.100]         }
[17:03:09.100]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:03:09.100]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:03:09.100]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:03:09.100]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:03:09.100]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:03:09.100]             future.stdout.windows.reencode = NULL, width = 80L)
[17:03:09.100]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:03:09.100]             base::names(...future.oldOptions))
[17:03:09.100]     }
[17:03:09.100]     if (FALSE) {
[17:03:09.100]     }
[17:03:09.100]     else {
[17:03:09.100]         if (TRUE) {
[17:03:09.100]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:03:09.100]                 open = "w")
[17:03:09.100]         }
[17:03:09.100]         else {
[17:03:09.100]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:03:09.100]                 windows = "NUL", "/dev/null"), open = "w")
[17:03:09.100]         }
[17:03:09.100]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:03:09.100]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:03:09.100]             base::sink(type = "output", split = FALSE)
[17:03:09.100]             base::close(...future.stdout)
[17:03:09.100]         }, add = TRUE)
[17:03:09.100]     }
[17:03:09.100]     ...future.frame <- base::sys.nframe()
[17:03:09.100]     ...future.conditions <- base::list()
[17:03:09.100]     ...future.rng <- base::globalenv()$.Random.seed
[17:03:09.100]     if (FALSE) {
[17:03:09.100]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:03:09.100]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:03:09.100]     }
[17:03:09.100]     ...future.result <- base::tryCatch({
[17:03:09.100]         base::withCallingHandlers({
[17:03:09.100]             ...future.value <- base::withVisible(base::local({
[17:03:09.100]                 ...future.makeSendCondition <- base::local({
[17:03:09.100]                   sendCondition <- NULL
[17:03:09.100]                   function(frame = 1L) {
[17:03:09.100]                     if (is.function(sendCondition)) 
[17:03:09.100]                       return(sendCondition)
[17:03:09.100]                     ns <- getNamespace("parallel")
[17:03:09.100]                     if (exists("sendData", mode = "function", 
[17:03:09.100]                       envir = ns)) {
[17:03:09.100]                       parallel_sendData <- get("sendData", mode = "function", 
[17:03:09.100]                         envir = ns)
[17:03:09.100]                       envir <- sys.frame(frame)
[17:03:09.100]                       master <- NULL
[17:03:09.100]                       while (!identical(envir, .GlobalEnv) && 
[17:03:09.100]                         !identical(envir, emptyenv())) {
[17:03:09.100]                         if (exists("master", mode = "list", envir = envir, 
[17:03:09.100]                           inherits = FALSE)) {
[17:03:09.100]                           master <- get("master", mode = "list", 
[17:03:09.100]                             envir = envir, inherits = FALSE)
[17:03:09.100]                           if (inherits(master, c("SOCKnode", 
[17:03:09.100]                             "SOCK0node"))) {
[17:03:09.100]                             sendCondition <<- function(cond) {
[17:03:09.100]                               data <- list(type = "VALUE", value = cond, 
[17:03:09.100]                                 success = TRUE)
[17:03:09.100]                               parallel_sendData(master, data)
[17:03:09.100]                             }
[17:03:09.100]                             return(sendCondition)
[17:03:09.100]                           }
[17:03:09.100]                         }
[17:03:09.100]                         frame <- frame + 1L
[17:03:09.100]                         envir <- sys.frame(frame)
[17:03:09.100]                       }
[17:03:09.100]                     }
[17:03:09.100]                     sendCondition <<- function(cond) NULL
[17:03:09.100]                   }
[17:03:09.100]                 })
[17:03:09.100]                 withCallingHandlers({
[17:03:09.100]                   NA
[17:03:09.100]                 }, immediateCondition = function(cond) {
[17:03:09.100]                   sendCondition <- ...future.makeSendCondition()
[17:03:09.100]                   sendCondition(cond)
[17:03:09.100]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:09.100]                   {
[17:03:09.100]                     inherits <- base::inherits
[17:03:09.100]                     invokeRestart <- base::invokeRestart
[17:03:09.100]                     is.null <- base::is.null
[17:03:09.100]                     muffled <- FALSE
[17:03:09.100]                     if (inherits(cond, "message")) {
[17:03:09.100]                       muffled <- grepl(pattern, "muffleMessage")
[17:03:09.100]                       if (muffled) 
[17:03:09.100]                         invokeRestart("muffleMessage")
[17:03:09.100]                     }
[17:03:09.100]                     else if (inherits(cond, "warning")) {
[17:03:09.100]                       muffled <- grepl(pattern, "muffleWarning")
[17:03:09.100]                       if (muffled) 
[17:03:09.100]                         invokeRestart("muffleWarning")
[17:03:09.100]                     }
[17:03:09.100]                     else if (inherits(cond, "condition")) {
[17:03:09.100]                       if (!is.null(pattern)) {
[17:03:09.100]                         computeRestarts <- base::computeRestarts
[17:03:09.100]                         grepl <- base::grepl
[17:03:09.100]                         restarts <- computeRestarts(cond)
[17:03:09.100]                         for (restart in restarts) {
[17:03:09.100]                           name <- restart$name
[17:03:09.100]                           if (is.null(name)) 
[17:03:09.100]                             next
[17:03:09.100]                           if (!grepl(pattern, name)) 
[17:03:09.100]                             next
[17:03:09.100]                           invokeRestart(restart)
[17:03:09.100]                           muffled <- TRUE
[17:03:09.100]                           break
[17:03:09.100]                         }
[17:03:09.100]                       }
[17:03:09.100]                     }
[17:03:09.100]                     invisible(muffled)
[17:03:09.100]                   }
[17:03:09.100]                   muffleCondition(cond)
[17:03:09.100]                 })
[17:03:09.100]             }))
[17:03:09.100]             future::FutureResult(value = ...future.value$value, 
[17:03:09.100]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:09.100]                   ...future.rng), globalenv = if (FALSE) 
[17:03:09.100]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:03:09.100]                     ...future.globalenv.names))
[17:03:09.100]                 else NULL, started = ...future.startTime, version = "1.8")
[17:03:09.100]         }, condition = base::local({
[17:03:09.100]             c <- base::c
[17:03:09.100]             inherits <- base::inherits
[17:03:09.100]             invokeRestart <- base::invokeRestart
[17:03:09.100]             length <- base::length
[17:03:09.100]             list <- base::list
[17:03:09.100]             seq.int <- base::seq.int
[17:03:09.100]             signalCondition <- base::signalCondition
[17:03:09.100]             sys.calls <- base::sys.calls
[17:03:09.100]             `[[` <- base::`[[`
[17:03:09.100]             `+` <- base::`+`
[17:03:09.100]             `<<-` <- base::`<<-`
[17:03:09.100]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:03:09.100]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:03:09.100]                   3L)]
[17:03:09.100]             }
[17:03:09.100]             function(cond) {
[17:03:09.100]                 is_error <- inherits(cond, "error")
[17:03:09.100]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:03:09.100]                   NULL)
[17:03:09.100]                 if (is_error) {
[17:03:09.100]                   sessionInformation <- function() {
[17:03:09.100]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:03:09.100]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:03:09.100]                       search = base::search(), system = base::Sys.info())
[17:03:09.100]                   }
[17:03:09.100]                   ...future.conditions[[length(...future.conditions) + 
[17:03:09.100]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:03:09.100]                     cond$call), session = sessionInformation(), 
[17:03:09.100]                     timestamp = base::Sys.time(), signaled = 0L)
[17:03:09.100]                   signalCondition(cond)
[17:03:09.100]                 }
[17:03:09.100]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:03:09.100]                 "immediateCondition"))) {
[17:03:09.100]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:03:09.100]                   ...future.conditions[[length(...future.conditions) + 
[17:03:09.100]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:03:09.100]                   if (TRUE && !signal) {
[17:03:09.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:09.100]                     {
[17:03:09.100]                       inherits <- base::inherits
[17:03:09.100]                       invokeRestart <- base::invokeRestart
[17:03:09.100]                       is.null <- base::is.null
[17:03:09.100]                       muffled <- FALSE
[17:03:09.100]                       if (inherits(cond, "message")) {
[17:03:09.100]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:09.100]                         if (muffled) 
[17:03:09.100]                           invokeRestart("muffleMessage")
[17:03:09.100]                       }
[17:03:09.100]                       else if (inherits(cond, "warning")) {
[17:03:09.100]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:09.100]                         if (muffled) 
[17:03:09.100]                           invokeRestart("muffleWarning")
[17:03:09.100]                       }
[17:03:09.100]                       else if (inherits(cond, "condition")) {
[17:03:09.100]                         if (!is.null(pattern)) {
[17:03:09.100]                           computeRestarts <- base::computeRestarts
[17:03:09.100]                           grepl <- base::grepl
[17:03:09.100]                           restarts <- computeRestarts(cond)
[17:03:09.100]                           for (restart in restarts) {
[17:03:09.100]                             name <- restart$name
[17:03:09.100]                             if (is.null(name)) 
[17:03:09.100]                               next
[17:03:09.100]                             if (!grepl(pattern, name)) 
[17:03:09.100]                               next
[17:03:09.100]                             invokeRestart(restart)
[17:03:09.100]                             muffled <- TRUE
[17:03:09.100]                             break
[17:03:09.100]                           }
[17:03:09.100]                         }
[17:03:09.100]                       }
[17:03:09.100]                       invisible(muffled)
[17:03:09.100]                     }
[17:03:09.100]                     muffleCondition(cond, pattern = "^muffle")
[17:03:09.100]                   }
[17:03:09.100]                 }
[17:03:09.100]                 else {
[17:03:09.100]                   if (TRUE) {
[17:03:09.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:03:09.100]                     {
[17:03:09.100]                       inherits <- base::inherits
[17:03:09.100]                       invokeRestart <- base::invokeRestart
[17:03:09.100]                       is.null <- base::is.null
[17:03:09.100]                       muffled <- FALSE
[17:03:09.100]                       if (inherits(cond, "message")) {
[17:03:09.100]                         muffled <- grepl(pattern, "muffleMessage")
[17:03:09.100]                         if (muffled) 
[17:03:09.100]                           invokeRestart("muffleMessage")
[17:03:09.100]                       }
[17:03:09.100]                       else if (inherits(cond, "warning")) {
[17:03:09.100]                         muffled <- grepl(pattern, "muffleWarning")
[17:03:09.100]                         if (muffled) 
[17:03:09.100]                           invokeRestart("muffleWarning")
[17:03:09.100]                       }
[17:03:09.100]                       else if (inherits(cond, "condition")) {
[17:03:09.100]                         if (!is.null(pattern)) {
[17:03:09.100]                           computeRestarts <- base::computeRestarts
[17:03:09.100]                           grepl <- base::grepl
[17:03:09.100]                           restarts <- computeRestarts(cond)
[17:03:09.100]                           for (restart in restarts) {
[17:03:09.100]                             name <- restart$name
[17:03:09.100]                             if (is.null(name)) 
[17:03:09.100]                               next
[17:03:09.100]                             if (!grepl(pattern, name)) 
[17:03:09.100]                               next
[17:03:09.100]                             invokeRestart(restart)
[17:03:09.100]                             muffled <- TRUE
[17:03:09.100]                             break
[17:03:09.100]                           }
[17:03:09.100]                         }
[17:03:09.100]                       }
[17:03:09.100]                       invisible(muffled)
[17:03:09.100]                     }
[17:03:09.100]                     muffleCondition(cond, pattern = "^muffle")
[17:03:09.100]                   }
[17:03:09.100]                 }
[17:03:09.100]             }
[17:03:09.100]         }))
[17:03:09.100]     }, error = function(ex) {
[17:03:09.100]         base::structure(base::list(value = NULL, visible = NULL, 
[17:03:09.100]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:03:09.100]                 ...future.rng), started = ...future.startTime, 
[17:03:09.100]             finished = Sys.time(), session_uuid = NA_character_, 
[17:03:09.100]             version = "1.8"), class = "FutureResult")
[17:03:09.100]     }, finally = {
[17:03:09.100]         if (!identical(...future.workdir, getwd())) 
[17:03:09.100]             setwd(...future.workdir)
[17:03:09.100]         {
[17:03:09.100]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:03:09.100]                 ...future.oldOptions$nwarnings <- NULL
[17:03:09.100]             }
[17:03:09.100]             base::options(...future.oldOptions)
[17:03:09.100]             if (.Platform$OS.type == "windows") {
[17:03:09.100]                 old_names <- names(...future.oldEnvVars)
[17:03:09.100]                 envs <- base::Sys.getenv()
[17:03:09.100]                 names <- names(envs)
[17:03:09.100]                 common <- intersect(names, old_names)
[17:03:09.100]                 added <- setdiff(names, old_names)
[17:03:09.100]                 removed <- setdiff(old_names, names)
[17:03:09.100]                 changed <- common[...future.oldEnvVars[common] != 
[17:03:09.100]                   envs[common]]
[17:03:09.100]                 NAMES <- toupper(changed)
[17:03:09.100]                 args <- list()
[17:03:09.100]                 for (kk in seq_along(NAMES)) {
[17:03:09.100]                   name <- changed[[kk]]
[17:03:09.100]                   NAME <- NAMES[[kk]]
[17:03:09.100]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:09.100]                     next
[17:03:09.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:09.100]                 }
[17:03:09.100]                 NAMES <- toupper(added)
[17:03:09.100]                 for (kk in seq_along(NAMES)) {
[17:03:09.100]                   name <- added[[kk]]
[17:03:09.100]                   NAME <- NAMES[[kk]]
[17:03:09.100]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:09.100]                     next
[17:03:09.100]                   args[[name]] <- ""
[17:03:09.100]                 }
[17:03:09.100]                 NAMES <- toupper(removed)
[17:03:09.100]                 for (kk in seq_along(NAMES)) {
[17:03:09.100]                   name <- removed[[kk]]
[17:03:09.100]                   NAME <- NAMES[[kk]]
[17:03:09.100]                   if (name != NAME && is.element(NAME, old_names)) 
[17:03:09.100]                     next
[17:03:09.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:03:09.100]                 }
[17:03:09.100]                 if (length(args) > 0) 
[17:03:09.100]                   base::do.call(base::Sys.setenv, args = args)
[17:03:09.100]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:03:09.100]             }
[17:03:09.100]             else {
[17:03:09.100]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:03:09.100]             }
[17:03:09.100]             {
[17:03:09.100]                 if (base::length(...future.futureOptionsAdded) > 
[17:03:09.100]                   0L) {
[17:03:09.100]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:03:09.100]                   base::names(opts) <- ...future.futureOptionsAdded
[17:03:09.100]                   base::options(opts)
[17:03:09.100]                 }
[17:03:09.100]                 {
[17:03:09.100]                   NULL
[17:03:09.100]                   options(future.plan = NULL)
[17:03:09.100]                   if (is.na(NA_character_)) 
[17:03:09.100]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:03:09.100]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:03:09.100]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:03:09.100]                     .init = FALSE)
[17:03:09.100]                 }
[17:03:09.100]             }
[17:03:09.100]         }
[17:03:09.100]     })
[17:03:09.100]     if (TRUE) {
[17:03:09.100]         base::sink(type = "output", split = FALSE)
[17:03:09.100]         if (TRUE) {
[17:03:09.100]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:03:09.100]         }
[17:03:09.100]         else {
[17:03:09.100]             ...future.result["stdout"] <- base::list(NULL)
[17:03:09.100]         }
[17:03:09.100]         base::close(...future.stdout)
[17:03:09.100]         ...future.stdout <- NULL
[17:03:09.100]     }
[17:03:09.100]     ...future.result$conditions <- ...future.conditions
[17:03:09.100]     ...future.result$finished <- base::Sys.time()
[17:03:09.100]     ...future.result
[17:03:09.100] }
[17:03:09.152] ClusterFuture started
[17:03:09.152] result() for ClusterFuture ...
[17:03:09.152] receiveMessageFromWorker() for ClusterFuture ...
[17:03:09.153] - Validating connection of ClusterFuture
[17:03:09.185] - received message: FutureResult
[17:03:09.185] - Received FutureResult
[17:03:09.185] - Erased future from FutureRegistry
[17:03:09.185] result() for ClusterFuture ...
[17:03:09.185] - result already collected: FutureResult
[17:03:09.185] result() for ClusterFuture ... done
[17:03:09.185] receiveMessageFromWorker() for ClusterFuture ... done
[17:03:09.186] result() for ClusterFuture ... done
[17:03:09.186] result() for ClusterFuture ...
[17:03:09.186] - result already collected: FutureResult
[17:03:09.186] result() for ClusterFuture ... done
[17:03:09.186] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:03:09.186] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[17:03:09.187] plan(): Setting new future strategy stack:
[17:03:09.187] List of future strategies:
[17:03:09.187] 1. FutureStrategy:
[17:03:09.187]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:03:09.187]    - tweaked: FALSE
[17:03:09.187]    - call: future::plan(oplan)
[17:03:09.188] plan(): nbrOfWorkers() = 1
> 
