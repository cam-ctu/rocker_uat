
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:56.850] plan(): Setting new future strategy stack:
[18:03:56.851] List of future strategies:
[18:03:56.851] 1. sequential:
[18:03:56.851]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:56.851]    - tweaked: FALSE
[18:03:56.851]    - call: future::plan("sequential")
[18:03:56.876] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[18:03:56.900] getGlobalsAndPackages() ...
[18:03:56.900] Searching for globals...
[18:03:56.906] - globals found: [1] ‘{’
[18:03:56.906] Searching for globals ... DONE
[18:03:56.907] Resolving globals: FALSE
[18:03:56.908] 
[18:03:56.908] 
[18:03:56.908] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[18:03:56.909] resolved() for ‘Future’ ...
[18:03:56.910] - state: ‘created’
[18:03:56.910] - run: TRUE
[18:03:56.910] - run() ...
[18:03:56.910] run() for ‘Future’ ...
[18:03:56.911] - state: ‘created’
[18:03:56.911] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:56.912] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:56.912] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:56.912]   - Field: ‘label’
[18:03:56.913]   - Field: ‘local’
[18:03:56.913]   - Field: ‘owner’
[18:03:56.913]   - Field: ‘envir’
[18:03:56.913]   - Field: ‘packages’
[18:03:56.913]   - Field: ‘gc’
[18:03:56.914]   - Field: ‘conditions’
[18:03:56.914]   - Field: ‘expr’
[18:03:56.914]   - Field: ‘uuid’
[18:03:56.914]   - Field: ‘seed’
[18:03:56.914]   - Field: ‘version’
[18:03:56.915]   - Field: ‘result’
[18:03:56.915]   - Field: ‘asynchronous’
[18:03:56.915]   - Field: ‘calls’
[18:03:56.915]   - Field: ‘globals’
[18:03:56.915]   - Field: ‘stdout’
[18:03:56.916]   - Field: ‘earlySignal’
[18:03:56.916]   - Field: ‘lazy’
[18:03:56.916]   - Field: ‘state’
[18:03:56.916] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:56.916] - Launch lazy future ...
[18:03:56.918] Packages needed by the future expression (n = 0): <none>
[18:03:56.918] Packages needed by future strategies (n = 0): <none>
[18:03:56.920] {
[18:03:56.920]     {
[18:03:56.920]         {
[18:03:56.920]             ...future.startTime <- base::Sys.time()
[18:03:56.920]             {
[18:03:56.920]                 {
[18:03:56.920]                   {
[18:03:56.920]                     base::local({
[18:03:56.920]                       has_future <- base::requireNamespace("future", 
[18:03:56.920]                         quietly = TRUE)
[18:03:56.920]                       if (has_future) {
[18:03:56.920]                         ns <- base::getNamespace("future")
[18:03:56.920]                         version <- ns[[".package"]][["version"]]
[18:03:56.920]                         if (is.null(version)) 
[18:03:56.920]                           version <- utils::packageVersion("future")
[18:03:56.920]                       }
[18:03:56.920]                       else {
[18:03:56.920]                         version <- NULL
[18:03:56.920]                       }
[18:03:56.920]                       if (!has_future || version < "1.8.0") {
[18:03:56.920]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:56.920]                           "", base::R.version$version.string), 
[18:03:56.920]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:56.920]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:56.920]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:56.920]                             "release", "version")], collapse = " "), 
[18:03:56.920]                           hostname = base::Sys.info()[["nodename"]])
[18:03:56.920]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:56.920]                           info)
[18:03:56.920]                         info <- base::paste(info, collapse = "; ")
[18:03:56.920]                         if (!has_future) {
[18:03:56.920]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:56.920]                             info)
[18:03:56.920]                         }
[18:03:56.920]                         else {
[18:03:56.920]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:56.920]                             info, version)
[18:03:56.920]                         }
[18:03:56.920]                         base::stop(msg)
[18:03:56.920]                       }
[18:03:56.920]                     })
[18:03:56.920]                   }
[18:03:56.920]                   ...future.strategy.old <- future::plan("list")
[18:03:56.920]                   options(future.plan = NULL)
[18:03:56.920]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:56.920]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:56.920]                 }
[18:03:56.920]                 ...future.workdir <- getwd()
[18:03:56.920]             }
[18:03:56.920]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:56.920]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:56.920]         }
[18:03:56.920]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:56.920]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:56.920]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:56.920]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:56.920]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:56.920]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:56.920]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:56.920]             base::names(...future.oldOptions))
[18:03:56.920]     }
[18:03:56.920]     if (FALSE) {
[18:03:56.920]     }
[18:03:56.920]     else {
[18:03:56.920]         if (TRUE) {
[18:03:56.920]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:56.920]                 open = "w")
[18:03:56.920]         }
[18:03:56.920]         else {
[18:03:56.920]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:56.920]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:56.920]         }
[18:03:56.920]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:56.920]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:56.920]             base::sink(type = "output", split = FALSE)
[18:03:56.920]             base::close(...future.stdout)
[18:03:56.920]         }, add = TRUE)
[18:03:56.920]     }
[18:03:56.920]     ...future.frame <- base::sys.nframe()
[18:03:56.920]     ...future.conditions <- base::list()
[18:03:56.920]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:56.920]     if (FALSE) {
[18:03:56.920]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:56.920]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:56.920]     }
[18:03:56.920]     ...future.result <- base::tryCatch({
[18:03:56.920]         base::withCallingHandlers({
[18:03:56.920]             ...future.value <- base::withVisible(base::local({
[18:03:56.920]                 42L
[18:03:56.920]             }))
[18:03:56.920]             future::FutureResult(value = ...future.value$value, 
[18:03:56.920]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:56.920]                   ...future.rng), globalenv = if (FALSE) 
[18:03:56.920]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:56.920]                     ...future.globalenv.names))
[18:03:56.920]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:56.920]         }, condition = base::local({
[18:03:56.920]             c <- base::c
[18:03:56.920]             inherits <- base::inherits
[18:03:56.920]             invokeRestart <- base::invokeRestart
[18:03:56.920]             length <- base::length
[18:03:56.920]             list <- base::list
[18:03:56.920]             seq.int <- base::seq.int
[18:03:56.920]             signalCondition <- base::signalCondition
[18:03:56.920]             sys.calls <- base::sys.calls
[18:03:56.920]             `[[` <- base::`[[`
[18:03:56.920]             `+` <- base::`+`
[18:03:56.920]             `<<-` <- base::`<<-`
[18:03:56.920]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:56.920]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:56.920]                   3L)]
[18:03:56.920]             }
[18:03:56.920]             function(cond) {
[18:03:56.920]                 is_error <- inherits(cond, "error")
[18:03:56.920]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:56.920]                   NULL)
[18:03:56.920]                 if (is_error) {
[18:03:56.920]                   sessionInformation <- function() {
[18:03:56.920]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:56.920]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:56.920]                       search = base::search(), system = base::Sys.info())
[18:03:56.920]                   }
[18:03:56.920]                   ...future.conditions[[length(...future.conditions) + 
[18:03:56.920]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:56.920]                     cond$call), session = sessionInformation(), 
[18:03:56.920]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:56.920]                   signalCondition(cond)
[18:03:56.920]                 }
[18:03:56.920]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:56.920]                 "immediateCondition"))) {
[18:03:56.920]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:56.920]                   ...future.conditions[[length(...future.conditions) + 
[18:03:56.920]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:56.920]                   if (TRUE && !signal) {
[18:03:56.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:56.920]                     {
[18:03:56.920]                       inherits <- base::inherits
[18:03:56.920]                       invokeRestart <- base::invokeRestart
[18:03:56.920]                       is.null <- base::is.null
[18:03:56.920]                       muffled <- FALSE
[18:03:56.920]                       if (inherits(cond, "message")) {
[18:03:56.920]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:56.920]                         if (muffled) 
[18:03:56.920]                           invokeRestart("muffleMessage")
[18:03:56.920]                       }
[18:03:56.920]                       else if (inherits(cond, "warning")) {
[18:03:56.920]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:56.920]                         if (muffled) 
[18:03:56.920]                           invokeRestart("muffleWarning")
[18:03:56.920]                       }
[18:03:56.920]                       else if (inherits(cond, "condition")) {
[18:03:56.920]                         if (!is.null(pattern)) {
[18:03:56.920]                           computeRestarts <- base::computeRestarts
[18:03:56.920]                           grepl <- base::grepl
[18:03:56.920]                           restarts <- computeRestarts(cond)
[18:03:56.920]                           for (restart in restarts) {
[18:03:56.920]                             name <- restart$name
[18:03:56.920]                             if (is.null(name)) 
[18:03:56.920]                               next
[18:03:56.920]                             if (!grepl(pattern, name)) 
[18:03:56.920]                               next
[18:03:56.920]                             invokeRestart(restart)
[18:03:56.920]                             muffled <- TRUE
[18:03:56.920]                             break
[18:03:56.920]                           }
[18:03:56.920]                         }
[18:03:56.920]                       }
[18:03:56.920]                       invisible(muffled)
[18:03:56.920]                     }
[18:03:56.920]                     muffleCondition(cond, pattern = "^muffle")
[18:03:56.920]                   }
[18:03:56.920]                 }
[18:03:56.920]                 else {
[18:03:56.920]                   if (TRUE) {
[18:03:56.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:56.920]                     {
[18:03:56.920]                       inherits <- base::inherits
[18:03:56.920]                       invokeRestart <- base::invokeRestart
[18:03:56.920]                       is.null <- base::is.null
[18:03:56.920]                       muffled <- FALSE
[18:03:56.920]                       if (inherits(cond, "message")) {
[18:03:56.920]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:56.920]                         if (muffled) 
[18:03:56.920]                           invokeRestart("muffleMessage")
[18:03:56.920]                       }
[18:03:56.920]                       else if (inherits(cond, "warning")) {
[18:03:56.920]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:56.920]                         if (muffled) 
[18:03:56.920]                           invokeRestart("muffleWarning")
[18:03:56.920]                       }
[18:03:56.920]                       else if (inherits(cond, "condition")) {
[18:03:56.920]                         if (!is.null(pattern)) {
[18:03:56.920]                           computeRestarts <- base::computeRestarts
[18:03:56.920]                           grepl <- base::grepl
[18:03:56.920]                           restarts <- computeRestarts(cond)
[18:03:56.920]                           for (restart in restarts) {
[18:03:56.920]                             name <- restart$name
[18:03:56.920]                             if (is.null(name)) 
[18:03:56.920]                               next
[18:03:56.920]                             if (!grepl(pattern, name)) 
[18:03:56.920]                               next
[18:03:56.920]                             invokeRestart(restart)
[18:03:56.920]                             muffled <- TRUE
[18:03:56.920]                             break
[18:03:56.920]                           }
[18:03:56.920]                         }
[18:03:56.920]                       }
[18:03:56.920]                       invisible(muffled)
[18:03:56.920]                     }
[18:03:56.920]                     muffleCondition(cond, pattern = "^muffle")
[18:03:56.920]                   }
[18:03:56.920]                 }
[18:03:56.920]             }
[18:03:56.920]         }))
[18:03:56.920]     }, error = function(ex) {
[18:03:56.920]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:56.920]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:56.920]                 ...future.rng), started = ...future.startTime, 
[18:03:56.920]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:56.920]             version = "1.8"), class = "FutureResult")
[18:03:56.920]     }, finally = {
[18:03:56.920]         if (!identical(...future.workdir, getwd())) 
[18:03:56.920]             setwd(...future.workdir)
[18:03:56.920]         {
[18:03:56.920]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:56.920]                 ...future.oldOptions$nwarnings <- NULL
[18:03:56.920]             }
[18:03:56.920]             base::options(...future.oldOptions)
[18:03:56.920]             if (.Platform$OS.type == "windows") {
[18:03:56.920]                 old_names <- names(...future.oldEnvVars)
[18:03:56.920]                 envs <- base::Sys.getenv()
[18:03:56.920]                 names <- names(envs)
[18:03:56.920]                 common <- intersect(names, old_names)
[18:03:56.920]                 added <- setdiff(names, old_names)
[18:03:56.920]                 removed <- setdiff(old_names, names)
[18:03:56.920]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:56.920]                   envs[common]]
[18:03:56.920]                 NAMES <- toupper(changed)
[18:03:56.920]                 args <- list()
[18:03:56.920]                 for (kk in seq_along(NAMES)) {
[18:03:56.920]                   name <- changed[[kk]]
[18:03:56.920]                   NAME <- NAMES[[kk]]
[18:03:56.920]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.920]                     next
[18:03:56.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:56.920]                 }
[18:03:56.920]                 NAMES <- toupper(added)
[18:03:56.920]                 for (kk in seq_along(NAMES)) {
[18:03:56.920]                   name <- added[[kk]]
[18:03:56.920]                   NAME <- NAMES[[kk]]
[18:03:56.920]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.920]                     next
[18:03:56.920]                   args[[name]] <- ""
[18:03:56.920]                 }
[18:03:56.920]                 NAMES <- toupper(removed)
[18:03:56.920]                 for (kk in seq_along(NAMES)) {
[18:03:56.920]                   name <- removed[[kk]]
[18:03:56.920]                   NAME <- NAMES[[kk]]
[18:03:56.920]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.920]                     next
[18:03:56.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:56.920]                 }
[18:03:56.920]                 if (length(args) > 0) 
[18:03:56.920]                   base::do.call(base::Sys.setenv, args = args)
[18:03:56.920]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:56.920]             }
[18:03:56.920]             else {
[18:03:56.920]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:56.920]             }
[18:03:56.920]             {
[18:03:56.920]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:56.920]                   0L) {
[18:03:56.920]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:56.920]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:56.920]                   base::options(opts)
[18:03:56.920]                 }
[18:03:56.920]                 {
[18:03:56.920]                   {
[18:03:56.920]                     NULL
[18:03:56.920]                     RNGkind("Mersenne-Twister")
[18:03:56.920]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:56.920]                       inherits = FALSE)
[18:03:56.920]                   }
[18:03:56.920]                   options(future.plan = NULL)
[18:03:56.920]                   if (is.na(NA_character_)) 
[18:03:56.920]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:56.920]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:56.920]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:56.920]                     .init = FALSE)
[18:03:56.920]                 }
[18:03:56.920]             }
[18:03:56.920]         }
[18:03:56.920]     })
[18:03:56.920]     if (TRUE) {
[18:03:56.920]         base::sink(type = "output", split = FALSE)
[18:03:56.920]         if (TRUE) {
[18:03:56.920]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:56.920]         }
[18:03:56.920]         else {
[18:03:56.920]             ...future.result["stdout"] <- base::list(NULL)
[18:03:56.920]         }
[18:03:56.920]         base::close(...future.stdout)
[18:03:56.920]         ...future.stdout <- NULL
[18:03:56.920]     }
[18:03:56.920]     ...future.result$conditions <- ...future.conditions
[18:03:56.920]     ...future.result$finished <- base::Sys.time()
[18:03:56.920]     ...future.result
[18:03:56.920] }
[18:03:56.924] plan(): Setting new future strategy stack:
[18:03:56.924] List of future strategies:
[18:03:56.924] 1. sequential:
[18:03:56.924]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:56.924]    - tweaked: FALSE
[18:03:56.924]    - call: NULL
[18:03:56.925] plan(): nbrOfWorkers() = 1
[18:03:56.928] plan(): Setting new future strategy stack:
[18:03:56.928] List of future strategies:
[18:03:56.928] 1. sequential:
[18:03:56.928]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:56.928]    - tweaked: FALSE
[18:03:56.928]    - call: future::plan("sequential")
[18:03:56.929] plan(): nbrOfWorkers() = 1
[18:03:56.929] SequentialFuture started (and completed)
[18:03:56.930] - Launch lazy future ... done
[18:03:56.930] run() for ‘SequentialFuture’ ... done
[18:03:56.931] - run() ... done
[18:03:56.931] - resolved() ...
[18:03:56.931] resolved() for ‘SequentialFuture’ ...
[18:03:56.931] - state: ‘finished’
[18:03:56.931] - run: TRUE
[18:03:56.932] - result: ‘FutureResult’
[18:03:56.932] resolved() for ‘SequentialFuture’ ... done
[18:03:56.932] - resolved: TRUE
[18:03:56.932] - resolved() ... done
[18:03:56.933] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[18:03:56.934] getGlobalsAndPackages() ...
[18:03:56.934] Searching for globals...
[18:03:56.935] 
[18:03:56.935] Searching for globals ... DONE
[18:03:56.935] - globals: [0] <none>
[18:03:56.935] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 94ee1829-b41b-bbce-6de1-ba6a2df35289
Class: ‘Future’, ‘environment’
> y <- value(f)
[18:03:56.937] run() for ‘Future’ ...
[18:03:56.938] - state: ‘created’
[18:03:56.938] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:56.938] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:56.939] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:56.939]   - Field: ‘label’
[18:03:56.939]   - Field: ‘local’
[18:03:56.939]   - Field: ‘owner’
[18:03:56.940]   - Field: ‘envir’
[18:03:56.940]   - Field: ‘packages’
[18:03:56.940]   - Field: ‘gc’
[18:03:56.940]   - Field: ‘conditions’
[18:03:56.941]   - Field: ‘expr’
[18:03:56.941]   - Field: ‘uuid’
[18:03:56.941]   - Field: ‘seed’
[18:03:56.941]   - Field: ‘version’
[18:03:56.941]   - Field: ‘result’
[18:03:56.942]   - Field: ‘asynchronous’
[18:03:56.942]   - Field: ‘calls’
[18:03:56.942]   - Field: ‘globals’
[18:03:56.942]   - Field: ‘stdout’
[18:03:56.943]   - Field: ‘earlySignal’
[18:03:56.943]   - Field: ‘lazy’
[18:03:56.943]   - Field: ‘state’
[18:03:56.943] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:56.943] - Launch lazy future ...
[18:03:56.944] Packages needed by the future expression (n = 0): <none>
[18:03:56.944] Packages needed by future strategies (n = 0): <none>
[18:03:56.945] {
[18:03:56.945]     {
[18:03:56.945]         {
[18:03:56.945]             ...future.startTime <- base::Sys.time()
[18:03:56.945]             {
[18:03:56.945]                 {
[18:03:56.945]                   {
[18:03:56.945]                     base::local({
[18:03:56.945]                       has_future <- base::requireNamespace("future", 
[18:03:56.945]                         quietly = TRUE)
[18:03:56.945]                       if (has_future) {
[18:03:56.945]                         ns <- base::getNamespace("future")
[18:03:56.945]                         version <- ns[[".package"]][["version"]]
[18:03:56.945]                         if (is.null(version)) 
[18:03:56.945]                           version <- utils::packageVersion("future")
[18:03:56.945]                       }
[18:03:56.945]                       else {
[18:03:56.945]                         version <- NULL
[18:03:56.945]                       }
[18:03:56.945]                       if (!has_future || version < "1.8.0") {
[18:03:56.945]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:56.945]                           "", base::R.version$version.string), 
[18:03:56.945]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:56.945]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:56.945]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:56.945]                             "release", "version")], collapse = " "), 
[18:03:56.945]                           hostname = base::Sys.info()[["nodename"]])
[18:03:56.945]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:56.945]                           info)
[18:03:56.945]                         info <- base::paste(info, collapse = "; ")
[18:03:56.945]                         if (!has_future) {
[18:03:56.945]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:56.945]                             info)
[18:03:56.945]                         }
[18:03:56.945]                         else {
[18:03:56.945]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:56.945]                             info, version)
[18:03:56.945]                         }
[18:03:56.945]                         base::stop(msg)
[18:03:56.945]                       }
[18:03:56.945]                     })
[18:03:56.945]                   }
[18:03:56.945]                   ...future.strategy.old <- future::plan("list")
[18:03:56.945]                   options(future.plan = NULL)
[18:03:56.945]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:56.945]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:56.945]                 }
[18:03:56.945]                 ...future.workdir <- getwd()
[18:03:56.945]             }
[18:03:56.945]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:56.945]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:56.945]         }
[18:03:56.945]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:56.945]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:56.945]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:56.945]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:56.945]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:56.945]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:56.945]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:56.945]             base::names(...future.oldOptions))
[18:03:56.945]     }
[18:03:56.945]     if (FALSE) {
[18:03:56.945]     }
[18:03:56.945]     else {
[18:03:56.945]         if (TRUE) {
[18:03:56.945]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:56.945]                 open = "w")
[18:03:56.945]         }
[18:03:56.945]         else {
[18:03:56.945]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:56.945]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:56.945]         }
[18:03:56.945]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:56.945]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:56.945]             base::sink(type = "output", split = FALSE)
[18:03:56.945]             base::close(...future.stdout)
[18:03:56.945]         }, add = TRUE)
[18:03:56.945]     }
[18:03:56.945]     ...future.frame <- base::sys.nframe()
[18:03:56.945]     ...future.conditions <- base::list()
[18:03:56.945]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:56.945]     if (FALSE) {
[18:03:56.945]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:56.945]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:56.945]     }
[18:03:56.945]     ...future.result <- base::tryCatch({
[18:03:56.945]         base::withCallingHandlers({
[18:03:56.945]             ...future.value <- base::withVisible(base::local(42L))
[18:03:56.945]             future::FutureResult(value = ...future.value$value, 
[18:03:56.945]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:56.945]                   ...future.rng), globalenv = if (FALSE) 
[18:03:56.945]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:56.945]                     ...future.globalenv.names))
[18:03:56.945]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:56.945]         }, condition = base::local({
[18:03:56.945]             c <- base::c
[18:03:56.945]             inherits <- base::inherits
[18:03:56.945]             invokeRestart <- base::invokeRestart
[18:03:56.945]             length <- base::length
[18:03:56.945]             list <- base::list
[18:03:56.945]             seq.int <- base::seq.int
[18:03:56.945]             signalCondition <- base::signalCondition
[18:03:56.945]             sys.calls <- base::sys.calls
[18:03:56.945]             `[[` <- base::`[[`
[18:03:56.945]             `+` <- base::`+`
[18:03:56.945]             `<<-` <- base::`<<-`
[18:03:56.945]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:56.945]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:56.945]                   3L)]
[18:03:56.945]             }
[18:03:56.945]             function(cond) {
[18:03:56.945]                 is_error <- inherits(cond, "error")
[18:03:56.945]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:56.945]                   NULL)
[18:03:56.945]                 if (is_error) {
[18:03:56.945]                   sessionInformation <- function() {
[18:03:56.945]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:56.945]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:56.945]                       search = base::search(), system = base::Sys.info())
[18:03:56.945]                   }
[18:03:56.945]                   ...future.conditions[[length(...future.conditions) + 
[18:03:56.945]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:56.945]                     cond$call), session = sessionInformation(), 
[18:03:56.945]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:56.945]                   signalCondition(cond)
[18:03:56.945]                 }
[18:03:56.945]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:56.945]                 "immediateCondition"))) {
[18:03:56.945]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:56.945]                   ...future.conditions[[length(...future.conditions) + 
[18:03:56.945]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:56.945]                   if (TRUE && !signal) {
[18:03:56.945]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:56.945]                     {
[18:03:56.945]                       inherits <- base::inherits
[18:03:56.945]                       invokeRestart <- base::invokeRestart
[18:03:56.945]                       is.null <- base::is.null
[18:03:56.945]                       muffled <- FALSE
[18:03:56.945]                       if (inherits(cond, "message")) {
[18:03:56.945]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:56.945]                         if (muffled) 
[18:03:56.945]                           invokeRestart("muffleMessage")
[18:03:56.945]                       }
[18:03:56.945]                       else if (inherits(cond, "warning")) {
[18:03:56.945]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:56.945]                         if (muffled) 
[18:03:56.945]                           invokeRestart("muffleWarning")
[18:03:56.945]                       }
[18:03:56.945]                       else if (inherits(cond, "condition")) {
[18:03:56.945]                         if (!is.null(pattern)) {
[18:03:56.945]                           computeRestarts <- base::computeRestarts
[18:03:56.945]                           grepl <- base::grepl
[18:03:56.945]                           restarts <- computeRestarts(cond)
[18:03:56.945]                           for (restart in restarts) {
[18:03:56.945]                             name <- restart$name
[18:03:56.945]                             if (is.null(name)) 
[18:03:56.945]                               next
[18:03:56.945]                             if (!grepl(pattern, name)) 
[18:03:56.945]                               next
[18:03:56.945]                             invokeRestart(restart)
[18:03:56.945]                             muffled <- TRUE
[18:03:56.945]                             break
[18:03:56.945]                           }
[18:03:56.945]                         }
[18:03:56.945]                       }
[18:03:56.945]                       invisible(muffled)
[18:03:56.945]                     }
[18:03:56.945]                     muffleCondition(cond, pattern = "^muffle")
[18:03:56.945]                   }
[18:03:56.945]                 }
[18:03:56.945]                 else {
[18:03:56.945]                   if (TRUE) {
[18:03:56.945]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:56.945]                     {
[18:03:56.945]                       inherits <- base::inherits
[18:03:56.945]                       invokeRestart <- base::invokeRestart
[18:03:56.945]                       is.null <- base::is.null
[18:03:56.945]                       muffled <- FALSE
[18:03:56.945]                       if (inherits(cond, "message")) {
[18:03:56.945]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:56.945]                         if (muffled) 
[18:03:56.945]                           invokeRestart("muffleMessage")
[18:03:56.945]                       }
[18:03:56.945]                       else if (inherits(cond, "warning")) {
[18:03:56.945]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:56.945]                         if (muffled) 
[18:03:56.945]                           invokeRestart("muffleWarning")
[18:03:56.945]                       }
[18:03:56.945]                       else if (inherits(cond, "condition")) {
[18:03:56.945]                         if (!is.null(pattern)) {
[18:03:56.945]                           computeRestarts <- base::computeRestarts
[18:03:56.945]                           grepl <- base::grepl
[18:03:56.945]                           restarts <- computeRestarts(cond)
[18:03:56.945]                           for (restart in restarts) {
[18:03:56.945]                             name <- restart$name
[18:03:56.945]                             if (is.null(name)) 
[18:03:56.945]                               next
[18:03:56.945]                             if (!grepl(pattern, name)) 
[18:03:56.945]                               next
[18:03:56.945]                             invokeRestart(restart)
[18:03:56.945]                             muffled <- TRUE
[18:03:56.945]                             break
[18:03:56.945]                           }
[18:03:56.945]                         }
[18:03:56.945]                       }
[18:03:56.945]                       invisible(muffled)
[18:03:56.945]                     }
[18:03:56.945]                     muffleCondition(cond, pattern = "^muffle")
[18:03:56.945]                   }
[18:03:56.945]                 }
[18:03:56.945]             }
[18:03:56.945]         }))
[18:03:56.945]     }, error = function(ex) {
[18:03:56.945]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:56.945]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:56.945]                 ...future.rng), started = ...future.startTime, 
[18:03:56.945]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:56.945]             version = "1.8"), class = "FutureResult")
[18:03:56.945]     }, finally = {
[18:03:56.945]         if (!identical(...future.workdir, getwd())) 
[18:03:56.945]             setwd(...future.workdir)
[18:03:56.945]         {
[18:03:56.945]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:56.945]                 ...future.oldOptions$nwarnings <- NULL
[18:03:56.945]             }
[18:03:56.945]             base::options(...future.oldOptions)
[18:03:56.945]             if (.Platform$OS.type == "windows") {
[18:03:56.945]                 old_names <- names(...future.oldEnvVars)
[18:03:56.945]                 envs <- base::Sys.getenv()
[18:03:56.945]                 names <- names(envs)
[18:03:56.945]                 common <- intersect(names, old_names)
[18:03:56.945]                 added <- setdiff(names, old_names)
[18:03:56.945]                 removed <- setdiff(old_names, names)
[18:03:56.945]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:56.945]                   envs[common]]
[18:03:56.945]                 NAMES <- toupper(changed)
[18:03:56.945]                 args <- list()
[18:03:56.945]                 for (kk in seq_along(NAMES)) {
[18:03:56.945]                   name <- changed[[kk]]
[18:03:56.945]                   NAME <- NAMES[[kk]]
[18:03:56.945]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.945]                     next
[18:03:56.945]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:56.945]                 }
[18:03:56.945]                 NAMES <- toupper(added)
[18:03:56.945]                 for (kk in seq_along(NAMES)) {
[18:03:56.945]                   name <- added[[kk]]
[18:03:56.945]                   NAME <- NAMES[[kk]]
[18:03:56.945]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.945]                     next
[18:03:56.945]                   args[[name]] <- ""
[18:03:56.945]                 }
[18:03:56.945]                 NAMES <- toupper(removed)
[18:03:56.945]                 for (kk in seq_along(NAMES)) {
[18:03:56.945]                   name <- removed[[kk]]
[18:03:56.945]                   NAME <- NAMES[[kk]]
[18:03:56.945]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.945]                     next
[18:03:56.945]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:56.945]                 }
[18:03:56.945]                 if (length(args) > 0) 
[18:03:56.945]                   base::do.call(base::Sys.setenv, args = args)
[18:03:56.945]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:56.945]             }
[18:03:56.945]             else {
[18:03:56.945]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:56.945]             }
[18:03:56.945]             {
[18:03:56.945]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:56.945]                   0L) {
[18:03:56.945]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:56.945]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:56.945]                   base::options(opts)
[18:03:56.945]                 }
[18:03:56.945]                 {
[18:03:56.945]                   {
[18:03:56.945]                     NULL
[18:03:56.945]                     RNGkind("Mersenne-Twister")
[18:03:56.945]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:56.945]                       inherits = FALSE)
[18:03:56.945]                   }
[18:03:56.945]                   options(future.plan = NULL)
[18:03:56.945]                   if (is.na(NA_character_)) 
[18:03:56.945]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:56.945]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:56.945]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:56.945]                     .init = FALSE)
[18:03:56.945]                 }
[18:03:56.945]             }
[18:03:56.945]         }
[18:03:56.945]     })
[18:03:56.945]     if (TRUE) {
[18:03:56.945]         base::sink(type = "output", split = FALSE)
[18:03:56.945]         if (TRUE) {
[18:03:56.945]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:56.945]         }
[18:03:56.945]         else {
[18:03:56.945]             ...future.result["stdout"] <- base::list(NULL)
[18:03:56.945]         }
[18:03:56.945]         base::close(...future.stdout)
[18:03:56.945]         ...future.stdout <- NULL
[18:03:56.945]     }
[18:03:56.945]     ...future.result$conditions <- ...future.conditions
[18:03:56.945]     ...future.result$finished <- base::Sys.time()
[18:03:56.945]     ...future.result
[18:03:56.945] }
[18:03:56.949] plan(): Setting new future strategy stack:
[18:03:56.949] List of future strategies:
[18:03:56.949] 1. sequential:
[18:03:56.949]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:56.949]    - tweaked: FALSE
[18:03:56.949]    - call: NULL
[18:03:56.951] plan(): nbrOfWorkers() = 1
[18:03:56.953] plan(): Setting new future strategy stack:
[18:03:56.953] List of future strategies:
[18:03:56.953] 1. sequential:
[18:03:56.953]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:56.953]    - tweaked: FALSE
[18:03:56.953]    - call: future::plan("sequential")
[18:03:56.954] plan(): nbrOfWorkers() = 1
[18:03:56.954] SequentialFuture started (and completed)
[18:03:56.955] - Launch lazy future ... done
[18:03:56.955] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[18:03:56.956] getGlobalsAndPackages() ...
[18:03:56.956] Searching for globals...
[18:03:56.957] - globals found: [1] ‘{’
[18:03:56.958] Searching for globals ... DONE
[18:03:56.958] Resolving globals: FALSE
[18:03:56.958] 
[18:03:56.959] 
[18:03:56.959] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[18:03:56.959] resolved() for ‘Future’ ...
[18:03:56.960] - state: ‘created’
[18:03:56.960] - run: TRUE
[18:03:56.960] - run() ...
[18:03:56.960] run() for ‘Future’ ...
[18:03:56.960] - state: ‘created’
[18:03:56.961] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:56.961] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:56.962] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:56.962]   - Field: ‘label’
[18:03:56.962]   - Field: ‘local’
[18:03:56.962]   - Field: ‘owner’
[18:03:56.962]   - Field: ‘envir’
[18:03:56.963]   - Field: ‘packages’
[18:03:56.963]   - Field: ‘gc’
[18:03:56.963]   - Field: ‘conditions’
[18:03:56.963]   - Field: ‘expr’
[18:03:56.964]   - Field: ‘uuid’
[18:03:56.964]   - Field: ‘seed’
[18:03:56.964]   - Field: ‘version’
[18:03:56.964]   - Field: ‘result’
[18:03:56.964]   - Field: ‘asynchronous’
[18:03:56.965]   - Field: ‘calls’
[18:03:56.965]   - Field: ‘globals’
[18:03:56.965]   - Field: ‘stdout’
[18:03:56.965]   - Field: ‘earlySignal’
[18:03:56.965]   - Field: ‘lazy’
[18:03:56.966]   - Field: ‘state’
[18:03:56.966] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:56.966] - Launch lazy future ...
[18:03:56.966] Packages needed by the future expression (n = 0): <none>
[18:03:56.967] Packages needed by future strategies (n = 0): <none>
[18:03:56.968] {
[18:03:56.968]     {
[18:03:56.968]         {
[18:03:56.968]             ...future.startTime <- base::Sys.time()
[18:03:56.968]             {
[18:03:56.968]                 {
[18:03:56.968]                   {
[18:03:56.968]                     base::local({
[18:03:56.968]                       has_future <- base::requireNamespace("future", 
[18:03:56.968]                         quietly = TRUE)
[18:03:56.968]                       if (has_future) {
[18:03:56.968]                         ns <- base::getNamespace("future")
[18:03:56.968]                         version <- ns[[".package"]][["version"]]
[18:03:56.968]                         if (is.null(version)) 
[18:03:56.968]                           version <- utils::packageVersion("future")
[18:03:56.968]                       }
[18:03:56.968]                       else {
[18:03:56.968]                         version <- NULL
[18:03:56.968]                       }
[18:03:56.968]                       if (!has_future || version < "1.8.0") {
[18:03:56.968]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:56.968]                           "", base::R.version$version.string), 
[18:03:56.968]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:56.968]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:56.968]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:56.968]                             "release", "version")], collapse = " "), 
[18:03:56.968]                           hostname = base::Sys.info()[["nodename"]])
[18:03:56.968]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:56.968]                           info)
[18:03:56.968]                         info <- base::paste(info, collapse = "; ")
[18:03:56.968]                         if (!has_future) {
[18:03:56.968]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:56.968]                             info)
[18:03:56.968]                         }
[18:03:56.968]                         else {
[18:03:56.968]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:56.968]                             info, version)
[18:03:56.968]                         }
[18:03:56.968]                         base::stop(msg)
[18:03:56.968]                       }
[18:03:56.968]                     })
[18:03:56.968]                   }
[18:03:56.968]                   ...future.strategy.old <- future::plan("list")
[18:03:56.968]                   options(future.plan = NULL)
[18:03:56.968]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:56.968]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:56.968]                 }
[18:03:56.968]                 ...future.workdir <- getwd()
[18:03:56.968]             }
[18:03:56.968]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:56.968]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:56.968]         }
[18:03:56.968]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:56.968]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:56.968]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:56.968]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:56.968]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:56.968]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:56.968]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:56.968]             base::names(...future.oldOptions))
[18:03:56.968]     }
[18:03:56.968]     if (FALSE) {
[18:03:56.968]     }
[18:03:56.968]     else {
[18:03:56.968]         if (TRUE) {
[18:03:56.968]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:56.968]                 open = "w")
[18:03:56.968]         }
[18:03:56.968]         else {
[18:03:56.968]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:56.968]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:56.968]         }
[18:03:56.968]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:56.968]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:56.968]             base::sink(type = "output", split = FALSE)
[18:03:56.968]             base::close(...future.stdout)
[18:03:56.968]         }, add = TRUE)
[18:03:56.968]     }
[18:03:56.968]     ...future.frame <- base::sys.nframe()
[18:03:56.968]     ...future.conditions <- base::list()
[18:03:56.968]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:56.968]     if (FALSE) {
[18:03:56.968]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:56.968]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:56.968]     }
[18:03:56.968]     ...future.result <- base::tryCatch({
[18:03:56.968]         base::withCallingHandlers({
[18:03:56.968]             ...future.value <- base::withVisible(base::local({
[18:03:56.968]                 42L
[18:03:56.968]             }))
[18:03:56.968]             future::FutureResult(value = ...future.value$value, 
[18:03:56.968]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:56.968]                   ...future.rng), globalenv = if (FALSE) 
[18:03:56.968]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:56.968]                     ...future.globalenv.names))
[18:03:56.968]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:56.968]         }, condition = base::local({
[18:03:56.968]             c <- base::c
[18:03:56.968]             inherits <- base::inherits
[18:03:56.968]             invokeRestart <- base::invokeRestart
[18:03:56.968]             length <- base::length
[18:03:56.968]             list <- base::list
[18:03:56.968]             seq.int <- base::seq.int
[18:03:56.968]             signalCondition <- base::signalCondition
[18:03:56.968]             sys.calls <- base::sys.calls
[18:03:56.968]             `[[` <- base::`[[`
[18:03:56.968]             `+` <- base::`+`
[18:03:56.968]             `<<-` <- base::`<<-`
[18:03:56.968]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:56.968]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:56.968]                   3L)]
[18:03:56.968]             }
[18:03:56.968]             function(cond) {
[18:03:56.968]                 is_error <- inherits(cond, "error")
[18:03:56.968]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:56.968]                   NULL)
[18:03:56.968]                 if (is_error) {
[18:03:56.968]                   sessionInformation <- function() {
[18:03:56.968]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:56.968]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:56.968]                       search = base::search(), system = base::Sys.info())
[18:03:56.968]                   }
[18:03:56.968]                   ...future.conditions[[length(...future.conditions) + 
[18:03:56.968]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:56.968]                     cond$call), session = sessionInformation(), 
[18:03:56.968]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:56.968]                   signalCondition(cond)
[18:03:56.968]                 }
[18:03:56.968]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:56.968]                 "immediateCondition"))) {
[18:03:56.968]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:56.968]                   ...future.conditions[[length(...future.conditions) + 
[18:03:56.968]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:56.968]                   if (TRUE && !signal) {
[18:03:56.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:56.968]                     {
[18:03:56.968]                       inherits <- base::inherits
[18:03:56.968]                       invokeRestart <- base::invokeRestart
[18:03:56.968]                       is.null <- base::is.null
[18:03:56.968]                       muffled <- FALSE
[18:03:56.968]                       if (inherits(cond, "message")) {
[18:03:56.968]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:56.968]                         if (muffled) 
[18:03:56.968]                           invokeRestart("muffleMessage")
[18:03:56.968]                       }
[18:03:56.968]                       else if (inherits(cond, "warning")) {
[18:03:56.968]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:56.968]                         if (muffled) 
[18:03:56.968]                           invokeRestart("muffleWarning")
[18:03:56.968]                       }
[18:03:56.968]                       else if (inherits(cond, "condition")) {
[18:03:56.968]                         if (!is.null(pattern)) {
[18:03:56.968]                           computeRestarts <- base::computeRestarts
[18:03:56.968]                           grepl <- base::grepl
[18:03:56.968]                           restarts <- computeRestarts(cond)
[18:03:56.968]                           for (restart in restarts) {
[18:03:56.968]                             name <- restart$name
[18:03:56.968]                             if (is.null(name)) 
[18:03:56.968]                               next
[18:03:56.968]                             if (!grepl(pattern, name)) 
[18:03:56.968]                               next
[18:03:56.968]                             invokeRestart(restart)
[18:03:56.968]                             muffled <- TRUE
[18:03:56.968]                             break
[18:03:56.968]                           }
[18:03:56.968]                         }
[18:03:56.968]                       }
[18:03:56.968]                       invisible(muffled)
[18:03:56.968]                     }
[18:03:56.968]                     muffleCondition(cond, pattern = "^muffle")
[18:03:56.968]                   }
[18:03:56.968]                 }
[18:03:56.968]                 else {
[18:03:56.968]                   if (TRUE) {
[18:03:56.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:56.968]                     {
[18:03:56.968]                       inherits <- base::inherits
[18:03:56.968]                       invokeRestart <- base::invokeRestart
[18:03:56.968]                       is.null <- base::is.null
[18:03:56.968]                       muffled <- FALSE
[18:03:56.968]                       if (inherits(cond, "message")) {
[18:03:56.968]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:56.968]                         if (muffled) 
[18:03:56.968]                           invokeRestart("muffleMessage")
[18:03:56.968]                       }
[18:03:56.968]                       else if (inherits(cond, "warning")) {
[18:03:56.968]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:56.968]                         if (muffled) 
[18:03:56.968]                           invokeRestart("muffleWarning")
[18:03:56.968]                       }
[18:03:56.968]                       else if (inherits(cond, "condition")) {
[18:03:56.968]                         if (!is.null(pattern)) {
[18:03:56.968]                           computeRestarts <- base::computeRestarts
[18:03:56.968]                           grepl <- base::grepl
[18:03:56.968]                           restarts <- computeRestarts(cond)
[18:03:56.968]                           for (restart in restarts) {
[18:03:56.968]                             name <- restart$name
[18:03:56.968]                             if (is.null(name)) 
[18:03:56.968]                               next
[18:03:56.968]                             if (!grepl(pattern, name)) 
[18:03:56.968]                               next
[18:03:56.968]                             invokeRestart(restart)
[18:03:56.968]                             muffled <- TRUE
[18:03:56.968]                             break
[18:03:56.968]                           }
[18:03:56.968]                         }
[18:03:56.968]                       }
[18:03:56.968]                       invisible(muffled)
[18:03:56.968]                     }
[18:03:56.968]                     muffleCondition(cond, pattern = "^muffle")
[18:03:56.968]                   }
[18:03:56.968]                 }
[18:03:56.968]             }
[18:03:56.968]         }))
[18:03:56.968]     }, error = function(ex) {
[18:03:56.968]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:56.968]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:56.968]                 ...future.rng), started = ...future.startTime, 
[18:03:56.968]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:56.968]             version = "1.8"), class = "FutureResult")
[18:03:56.968]     }, finally = {
[18:03:56.968]         if (!identical(...future.workdir, getwd())) 
[18:03:56.968]             setwd(...future.workdir)
[18:03:56.968]         {
[18:03:56.968]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:56.968]                 ...future.oldOptions$nwarnings <- NULL
[18:03:56.968]             }
[18:03:56.968]             base::options(...future.oldOptions)
[18:03:56.968]             if (.Platform$OS.type == "windows") {
[18:03:56.968]                 old_names <- names(...future.oldEnvVars)
[18:03:56.968]                 envs <- base::Sys.getenv()
[18:03:56.968]                 names <- names(envs)
[18:03:56.968]                 common <- intersect(names, old_names)
[18:03:56.968]                 added <- setdiff(names, old_names)
[18:03:56.968]                 removed <- setdiff(old_names, names)
[18:03:56.968]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:56.968]                   envs[common]]
[18:03:56.968]                 NAMES <- toupper(changed)
[18:03:56.968]                 args <- list()
[18:03:56.968]                 for (kk in seq_along(NAMES)) {
[18:03:56.968]                   name <- changed[[kk]]
[18:03:56.968]                   NAME <- NAMES[[kk]]
[18:03:56.968]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.968]                     next
[18:03:56.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:56.968]                 }
[18:03:56.968]                 NAMES <- toupper(added)
[18:03:56.968]                 for (kk in seq_along(NAMES)) {
[18:03:56.968]                   name <- added[[kk]]
[18:03:56.968]                   NAME <- NAMES[[kk]]
[18:03:56.968]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.968]                     next
[18:03:56.968]                   args[[name]] <- ""
[18:03:56.968]                 }
[18:03:56.968]                 NAMES <- toupper(removed)
[18:03:56.968]                 for (kk in seq_along(NAMES)) {
[18:03:56.968]                   name <- removed[[kk]]
[18:03:56.968]                   NAME <- NAMES[[kk]]
[18:03:56.968]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.968]                     next
[18:03:56.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:56.968]                 }
[18:03:56.968]                 if (length(args) > 0) 
[18:03:56.968]                   base::do.call(base::Sys.setenv, args = args)
[18:03:56.968]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:56.968]             }
[18:03:56.968]             else {
[18:03:56.968]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:56.968]             }
[18:03:56.968]             {
[18:03:56.968]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:56.968]                   0L) {
[18:03:56.968]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:56.968]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:56.968]                   base::options(opts)
[18:03:56.968]                 }
[18:03:56.968]                 {
[18:03:56.968]                   {
[18:03:56.968]                     NULL
[18:03:56.968]                     RNGkind("Mersenne-Twister")
[18:03:56.968]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:56.968]                       inherits = FALSE)
[18:03:56.968]                   }
[18:03:56.968]                   options(future.plan = NULL)
[18:03:56.968]                   if (is.na(NA_character_)) 
[18:03:56.968]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:56.968]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:56.968]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:56.968]                     .init = FALSE)
[18:03:56.968]                 }
[18:03:56.968]             }
[18:03:56.968]         }
[18:03:56.968]     })
[18:03:56.968]     if (TRUE) {
[18:03:56.968]         base::sink(type = "output", split = FALSE)
[18:03:56.968]         if (TRUE) {
[18:03:56.968]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:56.968]         }
[18:03:56.968]         else {
[18:03:56.968]             ...future.result["stdout"] <- base::list(NULL)
[18:03:56.968]         }
[18:03:56.968]         base::close(...future.stdout)
[18:03:56.968]         ...future.stdout <- NULL
[18:03:56.968]     }
[18:03:56.968]     ...future.result$conditions <- ...future.conditions
[18:03:56.968]     ...future.result$finished <- base::Sys.time()
[18:03:56.968]     ...future.result
[18:03:56.968] }
[18:03:56.971] plan(): Setting new future strategy stack:
[18:03:56.971] List of future strategies:
[18:03:56.971] 1. sequential:
[18:03:56.971]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:56.971]    - tweaked: FALSE
[18:03:56.971]    - call: NULL
[18:03:56.973] plan(): nbrOfWorkers() = 1
[18:03:56.974] plan(): Setting new future strategy stack:
[18:03:56.975] List of future strategies:
[18:03:56.975] 1. sequential:
[18:03:56.975]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:56.975]    - tweaked: FALSE
[18:03:56.975]    - call: future::plan("sequential")
[18:03:56.978] plan(): nbrOfWorkers() = 1
[18:03:56.978] SequentialFuture started (and completed)
[18:03:56.978] - Launch lazy future ... done
[18:03:56.979] run() for ‘SequentialFuture’ ... done
[18:03:56.979] - run() ... done
[18:03:56.979] - resolved() ...
[18:03:56.979] resolved() for ‘SequentialFuture’ ...
[18:03:56.980] - state: ‘finished’
[18:03:56.980] - run: TRUE
[18:03:56.980] - result: ‘FutureResult’
[18:03:56.980] resolved() for ‘SequentialFuture’ ... done
[18:03:56.980] - resolved: TRUE
[18:03:56.981] - resolved() ... done
[18:03:56.981] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[18:03:56.981] getGlobalsAndPackages() ...
[18:03:56.982] Searching for globals...
[18:03:56.982] 
[18:03:56.983] Searching for globals ... DONE
[18:03:56.983] - globals: [0] <none>
[18:03:56.983] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 94ee1829-b41b-bbce-6de1-ba6a2df35289
Class: ‘Future’, ‘environment’
> y <- value(f)
[18:03:56.985] run() for ‘Future’ ...
[18:03:56.986] - state: ‘created’
[18:03:56.986] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:56.987] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:56.987] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:56.987]   - Field: ‘label’
[18:03:56.987]   - Field: ‘local’
[18:03:56.988]   - Field: ‘owner’
[18:03:56.988]   - Field: ‘envir’
[18:03:56.992]   - Field: ‘packages’
[18:03:56.992]   - Field: ‘gc’
[18:03:56.993]   - Field: ‘conditions’
[18:03:56.993]   - Field: ‘expr’
[18:03:56.993]   - Field: ‘uuid’
[18:03:56.993]   - Field: ‘seed’
[18:03:56.993]   - Field: ‘version’
[18:03:56.994]   - Field: ‘result’
[18:03:56.994]   - Field: ‘asynchronous’
[18:03:56.994]   - Field: ‘calls’
[18:03:56.994]   - Field: ‘globals’
[18:03:56.994]   - Field: ‘stdout’
[18:03:56.995]   - Field: ‘earlySignal’
[18:03:56.995]   - Field: ‘lazy’
[18:03:56.995]   - Field: ‘state’
[18:03:56.995] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:56.995] - Launch lazy future ...
[18:03:56.996] Packages needed by the future expression (n = 0): <none>
[18:03:56.996] Packages needed by future strategies (n = 0): <none>
[18:03:56.997] {
[18:03:56.997]     {
[18:03:56.997]         {
[18:03:56.997]             ...future.startTime <- base::Sys.time()
[18:03:56.997]             {
[18:03:56.997]                 {
[18:03:56.997]                   {
[18:03:56.997]                     base::local({
[18:03:56.997]                       has_future <- base::requireNamespace("future", 
[18:03:56.997]                         quietly = TRUE)
[18:03:56.997]                       if (has_future) {
[18:03:56.997]                         ns <- base::getNamespace("future")
[18:03:56.997]                         version <- ns[[".package"]][["version"]]
[18:03:56.997]                         if (is.null(version)) 
[18:03:56.997]                           version <- utils::packageVersion("future")
[18:03:56.997]                       }
[18:03:56.997]                       else {
[18:03:56.997]                         version <- NULL
[18:03:56.997]                       }
[18:03:56.997]                       if (!has_future || version < "1.8.0") {
[18:03:56.997]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:56.997]                           "", base::R.version$version.string), 
[18:03:56.997]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:56.997]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:56.997]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:56.997]                             "release", "version")], collapse = " "), 
[18:03:56.997]                           hostname = base::Sys.info()[["nodename"]])
[18:03:56.997]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:56.997]                           info)
[18:03:56.997]                         info <- base::paste(info, collapse = "; ")
[18:03:56.997]                         if (!has_future) {
[18:03:56.997]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:56.997]                             info)
[18:03:56.997]                         }
[18:03:56.997]                         else {
[18:03:56.997]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:56.997]                             info, version)
[18:03:56.997]                         }
[18:03:56.997]                         base::stop(msg)
[18:03:56.997]                       }
[18:03:56.997]                     })
[18:03:56.997]                   }
[18:03:56.997]                   ...future.strategy.old <- future::plan("list")
[18:03:56.997]                   options(future.plan = NULL)
[18:03:56.997]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:56.997]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:56.997]                 }
[18:03:56.997]                 ...future.workdir <- getwd()
[18:03:56.997]             }
[18:03:56.997]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:56.997]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:56.997]         }
[18:03:56.997]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:56.997]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:56.997]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:56.997]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:56.997]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:56.997]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:56.997]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:56.997]             base::names(...future.oldOptions))
[18:03:56.997]     }
[18:03:56.997]     if (FALSE) {
[18:03:56.997]     }
[18:03:56.997]     else {
[18:03:56.997]         if (TRUE) {
[18:03:56.997]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:56.997]                 open = "w")
[18:03:56.997]         }
[18:03:56.997]         else {
[18:03:56.997]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:56.997]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:56.997]         }
[18:03:56.997]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:56.997]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:56.997]             base::sink(type = "output", split = FALSE)
[18:03:56.997]             base::close(...future.stdout)
[18:03:56.997]         }, add = TRUE)
[18:03:56.997]     }
[18:03:56.997]     ...future.frame <- base::sys.nframe()
[18:03:56.997]     ...future.conditions <- base::list()
[18:03:56.997]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:56.997]     if (FALSE) {
[18:03:56.997]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:56.997]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:56.997]     }
[18:03:56.997]     ...future.result <- base::tryCatch({
[18:03:56.997]         base::withCallingHandlers({
[18:03:56.997]             ...future.value <- base::withVisible(base::local(42L))
[18:03:56.997]             future::FutureResult(value = ...future.value$value, 
[18:03:56.997]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:56.997]                   ...future.rng), globalenv = if (FALSE) 
[18:03:56.997]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:56.997]                     ...future.globalenv.names))
[18:03:56.997]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:56.997]         }, condition = base::local({
[18:03:56.997]             c <- base::c
[18:03:56.997]             inherits <- base::inherits
[18:03:56.997]             invokeRestart <- base::invokeRestart
[18:03:56.997]             length <- base::length
[18:03:56.997]             list <- base::list
[18:03:56.997]             seq.int <- base::seq.int
[18:03:56.997]             signalCondition <- base::signalCondition
[18:03:56.997]             sys.calls <- base::sys.calls
[18:03:56.997]             `[[` <- base::`[[`
[18:03:56.997]             `+` <- base::`+`
[18:03:56.997]             `<<-` <- base::`<<-`
[18:03:56.997]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:56.997]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:56.997]                   3L)]
[18:03:56.997]             }
[18:03:56.997]             function(cond) {
[18:03:56.997]                 is_error <- inherits(cond, "error")
[18:03:56.997]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:56.997]                   NULL)
[18:03:56.997]                 if (is_error) {
[18:03:56.997]                   sessionInformation <- function() {
[18:03:56.997]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:56.997]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:56.997]                       search = base::search(), system = base::Sys.info())
[18:03:56.997]                   }
[18:03:56.997]                   ...future.conditions[[length(...future.conditions) + 
[18:03:56.997]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:56.997]                     cond$call), session = sessionInformation(), 
[18:03:56.997]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:56.997]                   signalCondition(cond)
[18:03:56.997]                 }
[18:03:56.997]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:56.997]                 "immediateCondition"))) {
[18:03:56.997]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:56.997]                   ...future.conditions[[length(...future.conditions) + 
[18:03:56.997]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:56.997]                   if (TRUE && !signal) {
[18:03:56.997]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:56.997]                     {
[18:03:56.997]                       inherits <- base::inherits
[18:03:56.997]                       invokeRestart <- base::invokeRestart
[18:03:56.997]                       is.null <- base::is.null
[18:03:56.997]                       muffled <- FALSE
[18:03:56.997]                       if (inherits(cond, "message")) {
[18:03:56.997]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:56.997]                         if (muffled) 
[18:03:56.997]                           invokeRestart("muffleMessage")
[18:03:56.997]                       }
[18:03:56.997]                       else if (inherits(cond, "warning")) {
[18:03:56.997]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:56.997]                         if (muffled) 
[18:03:56.997]                           invokeRestart("muffleWarning")
[18:03:56.997]                       }
[18:03:56.997]                       else if (inherits(cond, "condition")) {
[18:03:56.997]                         if (!is.null(pattern)) {
[18:03:56.997]                           computeRestarts <- base::computeRestarts
[18:03:56.997]                           grepl <- base::grepl
[18:03:56.997]                           restarts <- computeRestarts(cond)
[18:03:56.997]                           for (restart in restarts) {
[18:03:56.997]                             name <- restart$name
[18:03:56.997]                             if (is.null(name)) 
[18:03:56.997]                               next
[18:03:56.997]                             if (!grepl(pattern, name)) 
[18:03:56.997]                               next
[18:03:56.997]                             invokeRestart(restart)
[18:03:56.997]                             muffled <- TRUE
[18:03:56.997]                             break
[18:03:56.997]                           }
[18:03:56.997]                         }
[18:03:56.997]                       }
[18:03:56.997]                       invisible(muffled)
[18:03:56.997]                     }
[18:03:56.997]                     muffleCondition(cond, pattern = "^muffle")
[18:03:56.997]                   }
[18:03:56.997]                 }
[18:03:56.997]                 else {
[18:03:56.997]                   if (TRUE) {
[18:03:56.997]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:56.997]                     {
[18:03:56.997]                       inherits <- base::inherits
[18:03:56.997]                       invokeRestart <- base::invokeRestart
[18:03:56.997]                       is.null <- base::is.null
[18:03:56.997]                       muffled <- FALSE
[18:03:56.997]                       if (inherits(cond, "message")) {
[18:03:56.997]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:56.997]                         if (muffled) 
[18:03:56.997]                           invokeRestart("muffleMessage")
[18:03:56.997]                       }
[18:03:56.997]                       else if (inherits(cond, "warning")) {
[18:03:56.997]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:56.997]                         if (muffled) 
[18:03:56.997]                           invokeRestart("muffleWarning")
[18:03:56.997]                       }
[18:03:56.997]                       else if (inherits(cond, "condition")) {
[18:03:56.997]                         if (!is.null(pattern)) {
[18:03:56.997]                           computeRestarts <- base::computeRestarts
[18:03:56.997]                           grepl <- base::grepl
[18:03:56.997]                           restarts <- computeRestarts(cond)
[18:03:56.997]                           for (restart in restarts) {
[18:03:56.997]                             name <- restart$name
[18:03:56.997]                             if (is.null(name)) 
[18:03:56.997]                               next
[18:03:56.997]                             if (!grepl(pattern, name)) 
[18:03:56.997]                               next
[18:03:56.997]                             invokeRestart(restart)
[18:03:56.997]                             muffled <- TRUE
[18:03:56.997]                             break
[18:03:56.997]                           }
[18:03:56.997]                         }
[18:03:56.997]                       }
[18:03:56.997]                       invisible(muffled)
[18:03:56.997]                     }
[18:03:56.997]                     muffleCondition(cond, pattern = "^muffle")
[18:03:56.997]                   }
[18:03:56.997]                 }
[18:03:56.997]             }
[18:03:56.997]         }))
[18:03:56.997]     }, error = function(ex) {
[18:03:56.997]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:56.997]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:56.997]                 ...future.rng), started = ...future.startTime, 
[18:03:56.997]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:56.997]             version = "1.8"), class = "FutureResult")
[18:03:56.997]     }, finally = {
[18:03:56.997]         if (!identical(...future.workdir, getwd())) 
[18:03:56.997]             setwd(...future.workdir)
[18:03:56.997]         {
[18:03:56.997]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:56.997]                 ...future.oldOptions$nwarnings <- NULL
[18:03:56.997]             }
[18:03:56.997]             base::options(...future.oldOptions)
[18:03:56.997]             if (.Platform$OS.type == "windows") {
[18:03:56.997]                 old_names <- names(...future.oldEnvVars)
[18:03:56.997]                 envs <- base::Sys.getenv()
[18:03:56.997]                 names <- names(envs)
[18:03:56.997]                 common <- intersect(names, old_names)
[18:03:56.997]                 added <- setdiff(names, old_names)
[18:03:56.997]                 removed <- setdiff(old_names, names)
[18:03:56.997]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:56.997]                   envs[common]]
[18:03:56.997]                 NAMES <- toupper(changed)
[18:03:56.997]                 args <- list()
[18:03:56.997]                 for (kk in seq_along(NAMES)) {
[18:03:56.997]                   name <- changed[[kk]]
[18:03:56.997]                   NAME <- NAMES[[kk]]
[18:03:56.997]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.997]                     next
[18:03:56.997]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:56.997]                 }
[18:03:56.997]                 NAMES <- toupper(added)
[18:03:56.997]                 for (kk in seq_along(NAMES)) {
[18:03:56.997]                   name <- added[[kk]]
[18:03:56.997]                   NAME <- NAMES[[kk]]
[18:03:56.997]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.997]                     next
[18:03:56.997]                   args[[name]] <- ""
[18:03:56.997]                 }
[18:03:56.997]                 NAMES <- toupper(removed)
[18:03:56.997]                 for (kk in seq_along(NAMES)) {
[18:03:56.997]                   name <- removed[[kk]]
[18:03:56.997]                   NAME <- NAMES[[kk]]
[18:03:56.997]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:56.997]                     next
[18:03:56.997]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:56.997]                 }
[18:03:56.997]                 if (length(args) > 0) 
[18:03:56.997]                   base::do.call(base::Sys.setenv, args = args)
[18:03:56.997]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:56.997]             }
[18:03:56.997]             else {
[18:03:56.997]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:56.997]             }
[18:03:56.997]             {
[18:03:56.997]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:56.997]                   0L) {
[18:03:56.997]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:56.997]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:56.997]                   base::options(opts)
[18:03:56.997]                 }
[18:03:56.997]                 {
[18:03:56.997]                   {
[18:03:56.997]                     NULL
[18:03:56.997]                     RNGkind("Mersenne-Twister")
[18:03:56.997]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:56.997]                       inherits = FALSE)
[18:03:56.997]                   }
[18:03:56.997]                   options(future.plan = NULL)
[18:03:56.997]                   if (is.na(NA_character_)) 
[18:03:56.997]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:56.997]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:56.997]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:56.997]                     .init = FALSE)
[18:03:56.997]                 }
[18:03:56.997]             }
[18:03:56.997]         }
[18:03:56.997]     })
[18:03:56.997]     if (TRUE) {
[18:03:56.997]         base::sink(type = "output", split = FALSE)
[18:03:56.997]         if (TRUE) {
[18:03:56.997]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:56.997]         }
[18:03:56.997]         else {
[18:03:56.997]             ...future.result["stdout"] <- base::list(NULL)
[18:03:56.997]         }
[18:03:56.997]         base::close(...future.stdout)
[18:03:56.997]         ...future.stdout <- NULL
[18:03:56.997]     }
[18:03:56.997]     ...future.result$conditions <- ...future.conditions
[18:03:56.997]     ...future.result$finished <- base::Sys.time()
[18:03:56.997]     ...future.result
[18:03:56.997] }
[18:03:57.001] plan(): Setting new future strategy stack:
[18:03:57.002] List of future strategies:
[18:03:57.002] 1. sequential:
[18:03:57.002]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.002]    - tweaked: FALSE
[18:03:57.002]    - call: NULL
[18:03:57.003] plan(): nbrOfWorkers() = 1
[18:03:57.005] plan(): Setting new future strategy stack:
[18:03:57.005] List of future strategies:
[18:03:57.005] 1. sequential:
[18:03:57.005]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.005]    - tweaked: FALSE
[18:03:57.005]    - call: future::plan("sequential")
[18:03:57.006] plan(): nbrOfWorkers() = 1
[18:03:57.006] SequentialFuture started (and completed)
[18:03:57.007] - Launch lazy future ... done
[18:03:57.007] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[18:03:57.008] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[18:03:57.009] plan(): Setting new future strategy stack:
[18:03:57.009] List of future strategies:
[18:03:57.009] 1. FutureStrategy:
[18:03:57.009]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:57.009]    - tweaked: FALSE
[18:03:57.009]    - call: future::plan(oplan)
[18:03:57.034] plan(): nbrOfWorkers() = 1
> 
