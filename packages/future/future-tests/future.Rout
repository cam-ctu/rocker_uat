
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:35.191] plan(): Setting new future strategy stack:
[17:46:35.192] List of future strategies:
[17:46:35.192] 1. sequential:
[17:46:35.192]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.192]    - tweaked: FALSE
[17:46:35.192]    - call: future::plan("sequential")
[17:46:35.202] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[17:46:35.216] getGlobalsAndPackages() ...
[17:46:35.216] Searching for globals...
[17:46:35.219] - globals found: [1] ‘{’
[17:46:35.219] Searching for globals ... DONE
[17:46:35.219] Resolving globals: FALSE
[17:46:35.220] 
[17:46:35.220] 
[17:46:35.220] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[17:46:35.220] resolved() for ‘Future’ ...
[17:46:35.220] - state: ‘created’
[17:46:35.221] - run: TRUE
[17:46:35.221] - run() ...
[17:46:35.221] run() for ‘Future’ ...
[17:46:35.221] - state: ‘created’
[17:46:35.221] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.221] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.222] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.222]   - Field: ‘label’
[17:46:35.222]   - Field: ‘local’
[17:46:35.222]   - Field: ‘owner’
[17:46:35.222]   - Field: ‘envir’
[17:46:35.222]   - Field: ‘packages’
[17:46:35.222]   - Field: ‘gc’
[17:46:35.222]   - Field: ‘conditions’
[17:46:35.222]   - Field: ‘expr’
[17:46:35.222]   - Field: ‘uuid’
[17:46:35.222]   - Field: ‘seed’
[17:46:35.223]   - Field: ‘version’
[17:46:35.223]   - Field: ‘result’
[17:46:35.223]   - Field: ‘asynchronous’
[17:46:35.223]   - Field: ‘calls’
[17:46:35.223]   - Field: ‘globals’
[17:46:35.223]   - Field: ‘stdout’
[17:46:35.223]   - Field: ‘earlySignal’
[17:46:35.223]   - Field: ‘lazy’
[17:46:35.223]   - Field: ‘state’
[17:46:35.223] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.223] - Launch lazy future ...
[17:46:35.224] Packages needed by the future expression (n = 0): <none>
[17:46:35.224] Packages needed by future strategies (n = 0): <none>
[17:46:35.225] {
[17:46:35.225]     {
[17:46:35.225]         {
[17:46:35.225]             ...future.startTime <- base::Sys.time()
[17:46:35.225]             {
[17:46:35.225]                 {
[17:46:35.225]                   {
[17:46:35.225]                     base::local({
[17:46:35.225]                       has_future <- base::requireNamespace("future", 
[17:46:35.225]                         quietly = TRUE)
[17:46:35.225]                       if (has_future) {
[17:46:35.225]                         ns <- base::getNamespace("future")
[17:46:35.225]                         version <- ns[[".package"]][["version"]]
[17:46:35.225]                         if (is.null(version)) 
[17:46:35.225]                           version <- utils::packageVersion("future")
[17:46:35.225]                       }
[17:46:35.225]                       else {
[17:46:35.225]                         version <- NULL
[17:46:35.225]                       }
[17:46:35.225]                       if (!has_future || version < "1.8.0") {
[17:46:35.225]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.225]                           "", base::R.version$version.string), 
[17:46:35.225]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.225]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.225]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.225]                             "release", "version")], collapse = " "), 
[17:46:35.225]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.225]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.225]                           info)
[17:46:35.225]                         info <- base::paste(info, collapse = "; ")
[17:46:35.225]                         if (!has_future) {
[17:46:35.225]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.225]                             info)
[17:46:35.225]                         }
[17:46:35.225]                         else {
[17:46:35.225]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.225]                             info, version)
[17:46:35.225]                         }
[17:46:35.225]                         base::stop(msg)
[17:46:35.225]                       }
[17:46:35.225]                     })
[17:46:35.225]                   }
[17:46:35.225]                   ...future.strategy.old <- future::plan("list")
[17:46:35.225]                   options(future.plan = NULL)
[17:46:35.225]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.225]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.225]                 }
[17:46:35.225]                 ...future.workdir <- getwd()
[17:46:35.225]             }
[17:46:35.225]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.225]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.225]         }
[17:46:35.225]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.225]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.225]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.225]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.225]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.225]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.225]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.225]             base::names(...future.oldOptions))
[17:46:35.225]     }
[17:46:35.225]     if (FALSE) {
[17:46:35.225]     }
[17:46:35.225]     else {
[17:46:35.225]         if (TRUE) {
[17:46:35.225]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.225]                 open = "w")
[17:46:35.225]         }
[17:46:35.225]         else {
[17:46:35.225]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.225]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.225]         }
[17:46:35.225]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.225]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.225]             base::sink(type = "output", split = FALSE)
[17:46:35.225]             base::close(...future.stdout)
[17:46:35.225]         }, add = TRUE)
[17:46:35.225]     }
[17:46:35.225]     ...future.frame <- base::sys.nframe()
[17:46:35.225]     ...future.conditions <- base::list()
[17:46:35.225]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.225]     if (FALSE) {
[17:46:35.225]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.225]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.225]     }
[17:46:35.225]     ...future.result <- base::tryCatch({
[17:46:35.225]         base::withCallingHandlers({
[17:46:35.225]             ...future.value <- base::withVisible(base::local({
[17:46:35.225]                 42L
[17:46:35.225]             }))
[17:46:35.225]             future::FutureResult(value = ...future.value$value, 
[17:46:35.225]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.225]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.225]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.225]                     ...future.globalenv.names))
[17:46:35.225]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.225]         }, condition = base::local({
[17:46:35.225]             c <- base::c
[17:46:35.225]             inherits <- base::inherits
[17:46:35.225]             invokeRestart <- base::invokeRestart
[17:46:35.225]             length <- base::length
[17:46:35.225]             list <- base::list
[17:46:35.225]             seq.int <- base::seq.int
[17:46:35.225]             signalCondition <- base::signalCondition
[17:46:35.225]             sys.calls <- base::sys.calls
[17:46:35.225]             `[[` <- base::`[[`
[17:46:35.225]             `+` <- base::`+`
[17:46:35.225]             `<<-` <- base::`<<-`
[17:46:35.225]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.225]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.225]                   3L)]
[17:46:35.225]             }
[17:46:35.225]             function(cond) {
[17:46:35.225]                 is_error <- inherits(cond, "error")
[17:46:35.225]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.225]                   NULL)
[17:46:35.225]                 if (is_error) {
[17:46:35.225]                   sessionInformation <- function() {
[17:46:35.225]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.225]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.225]                       search = base::search(), system = base::Sys.info())
[17:46:35.225]                   }
[17:46:35.225]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.225]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.225]                     cond$call), session = sessionInformation(), 
[17:46:35.225]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.225]                   signalCondition(cond)
[17:46:35.225]                 }
[17:46:35.225]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.225]                 "immediateCondition"))) {
[17:46:35.225]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.225]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.225]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.225]                   if (TRUE && !signal) {
[17:46:35.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.225]                     {
[17:46:35.225]                       inherits <- base::inherits
[17:46:35.225]                       invokeRestart <- base::invokeRestart
[17:46:35.225]                       is.null <- base::is.null
[17:46:35.225]                       muffled <- FALSE
[17:46:35.225]                       if (inherits(cond, "message")) {
[17:46:35.225]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.225]                         if (muffled) 
[17:46:35.225]                           invokeRestart("muffleMessage")
[17:46:35.225]                       }
[17:46:35.225]                       else if (inherits(cond, "warning")) {
[17:46:35.225]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.225]                         if (muffled) 
[17:46:35.225]                           invokeRestart("muffleWarning")
[17:46:35.225]                       }
[17:46:35.225]                       else if (inherits(cond, "condition")) {
[17:46:35.225]                         if (!is.null(pattern)) {
[17:46:35.225]                           computeRestarts <- base::computeRestarts
[17:46:35.225]                           grepl <- base::grepl
[17:46:35.225]                           restarts <- computeRestarts(cond)
[17:46:35.225]                           for (restart in restarts) {
[17:46:35.225]                             name <- restart$name
[17:46:35.225]                             if (is.null(name)) 
[17:46:35.225]                               next
[17:46:35.225]                             if (!grepl(pattern, name)) 
[17:46:35.225]                               next
[17:46:35.225]                             invokeRestart(restart)
[17:46:35.225]                             muffled <- TRUE
[17:46:35.225]                             break
[17:46:35.225]                           }
[17:46:35.225]                         }
[17:46:35.225]                       }
[17:46:35.225]                       invisible(muffled)
[17:46:35.225]                     }
[17:46:35.225]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.225]                   }
[17:46:35.225]                 }
[17:46:35.225]                 else {
[17:46:35.225]                   if (TRUE) {
[17:46:35.225]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.225]                     {
[17:46:35.225]                       inherits <- base::inherits
[17:46:35.225]                       invokeRestart <- base::invokeRestart
[17:46:35.225]                       is.null <- base::is.null
[17:46:35.225]                       muffled <- FALSE
[17:46:35.225]                       if (inherits(cond, "message")) {
[17:46:35.225]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.225]                         if (muffled) 
[17:46:35.225]                           invokeRestart("muffleMessage")
[17:46:35.225]                       }
[17:46:35.225]                       else if (inherits(cond, "warning")) {
[17:46:35.225]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.225]                         if (muffled) 
[17:46:35.225]                           invokeRestart("muffleWarning")
[17:46:35.225]                       }
[17:46:35.225]                       else if (inherits(cond, "condition")) {
[17:46:35.225]                         if (!is.null(pattern)) {
[17:46:35.225]                           computeRestarts <- base::computeRestarts
[17:46:35.225]                           grepl <- base::grepl
[17:46:35.225]                           restarts <- computeRestarts(cond)
[17:46:35.225]                           for (restart in restarts) {
[17:46:35.225]                             name <- restart$name
[17:46:35.225]                             if (is.null(name)) 
[17:46:35.225]                               next
[17:46:35.225]                             if (!grepl(pattern, name)) 
[17:46:35.225]                               next
[17:46:35.225]                             invokeRestart(restart)
[17:46:35.225]                             muffled <- TRUE
[17:46:35.225]                             break
[17:46:35.225]                           }
[17:46:35.225]                         }
[17:46:35.225]                       }
[17:46:35.225]                       invisible(muffled)
[17:46:35.225]                     }
[17:46:35.225]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.225]                   }
[17:46:35.225]                 }
[17:46:35.225]             }
[17:46:35.225]         }))
[17:46:35.225]     }, error = function(ex) {
[17:46:35.225]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.225]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.225]                 ...future.rng), started = ...future.startTime, 
[17:46:35.225]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.225]             version = "1.8"), class = "FutureResult")
[17:46:35.225]     }, finally = {
[17:46:35.225]         if (!identical(...future.workdir, getwd())) 
[17:46:35.225]             setwd(...future.workdir)
[17:46:35.225]         {
[17:46:35.225]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.225]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.225]             }
[17:46:35.225]             base::options(...future.oldOptions)
[17:46:35.225]             if (.Platform$OS.type == "windows") {
[17:46:35.225]                 old_names <- names(...future.oldEnvVars)
[17:46:35.225]                 envs <- base::Sys.getenv()
[17:46:35.225]                 names <- names(envs)
[17:46:35.225]                 common <- intersect(names, old_names)
[17:46:35.225]                 added <- setdiff(names, old_names)
[17:46:35.225]                 removed <- setdiff(old_names, names)
[17:46:35.225]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.225]                   envs[common]]
[17:46:35.225]                 NAMES <- toupper(changed)
[17:46:35.225]                 args <- list()
[17:46:35.225]                 for (kk in seq_along(NAMES)) {
[17:46:35.225]                   name <- changed[[kk]]
[17:46:35.225]                   NAME <- NAMES[[kk]]
[17:46:35.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.225]                     next
[17:46:35.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.225]                 }
[17:46:35.225]                 NAMES <- toupper(added)
[17:46:35.225]                 for (kk in seq_along(NAMES)) {
[17:46:35.225]                   name <- added[[kk]]
[17:46:35.225]                   NAME <- NAMES[[kk]]
[17:46:35.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.225]                     next
[17:46:35.225]                   args[[name]] <- ""
[17:46:35.225]                 }
[17:46:35.225]                 NAMES <- toupper(removed)
[17:46:35.225]                 for (kk in seq_along(NAMES)) {
[17:46:35.225]                   name <- removed[[kk]]
[17:46:35.225]                   NAME <- NAMES[[kk]]
[17:46:35.225]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.225]                     next
[17:46:35.225]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.225]                 }
[17:46:35.225]                 if (length(args) > 0) 
[17:46:35.225]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.225]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.225]             }
[17:46:35.225]             else {
[17:46:35.225]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.225]             }
[17:46:35.225]             {
[17:46:35.225]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.225]                   0L) {
[17:46:35.225]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.225]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.225]                   base::options(opts)
[17:46:35.225]                 }
[17:46:35.225]                 {
[17:46:35.225]                   {
[17:46:35.225]                     NULL
[17:46:35.225]                     RNGkind("Mersenne-Twister")
[17:46:35.225]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.225]                       inherits = FALSE)
[17:46:35.225]                   }
[17:46:35.225]                   options(future.plan = NULL)
[17:46:35.225]                   if (is.na(NA_character_)) 
[17:46:35.225]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.225]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.225]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.225]                     .init = FALSE)
[17:46:35.225]                 }
[17:46:35.225]             }
[17:46:35.225]         }
[17:46:35.225]     })
[17:46:35.225]     if (TRUE) {
[17:46:35.225]         base::sink(type = "output", split = FALSE)
[17:46:35.225]         if (TRUE) {
[17:46:35.225]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.225]         }
[17:46:35.225]         else {
[17:46:35.225]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.225]         }
[17:46:35.225]         base::close(...future.stdout)
[17:46:35.225]         ...future.stdout <- NULL
[17:46:35.225]     }
[17:46:35.225]     ...future.result$conditions <- ...future.conditions
[17:46:35.225]     ...future.result$finished <- base::Sys.time()
[17:46:35.225]     ...future.result
[17:46:35.225] }
[17:46:35.227] plan(): Setting new future strategy stack:
[17:46:35.227] List of future strategies:
[17:46:35.227] 1. sequential:
[17:46:35.227]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.227]    - tweaked: FALSE
[17:46:35.227]    - call: NULL
[17:46:35.227] plan(): nbrOfWorkers() = 1
[17:46:35.228] plan(): Setting new future strategy stack:
[17:46:35.229] List of future strategies:
[17:46:35.229] 1. sequential:
[17:46:35.229]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.229]    - tweaked: FALSE
[17:46:35.229]    - call: future::plan("sequential")
[17:46:35.229] plan(): nbrOfWorkers() = 1
[17:46:35.229] SequentialFuture started (and completed)
[17:46:35.230] - Launch lazy future ... done
[17:46:35.230] run() for ‘SequentialFuture’ ... done
[17:46:35.230] - run() ... done
[17:46:35.230] - resolved() ...
[17:46:35.230] resolved() for ‘SequentialFuture’ ...
[17:46:35.230] - state: ‘finished’
[17:46:35.230] - run: TRUE
[17:46:35.230] - result: ‘FutureResult’
[17:46:35.230] resolved() for ‘SequentialFuture’ ... done
[17:46:35.230] - resolved: TRUE
[17:46:35.231] - resolved() ... done
[17:46:35.231] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[17:46:35.231] getGlobalsAndPackages() ...
[17:46:35.231] Searching for globals...
[17:46:35.232] 
[17:46:35.232] Searching for globals ... DONE
[17:46:35.232] - globals: [0] <none>
[17:46:35.232] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: aab89ca8-a763-5f58-ba3a-65d2ae0998c9
Class: ‘Future’, ‘environment’
> y <- value(f)
[17:46:35.233] run() for ‘Future’ ...
[17:46:35.233] - state: ‘created’
[17:46:35.233] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.233] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.233] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.234]   - Field: ‘label’
[17:46:35.234]   - Field: ‘local’
[17:46:35.234]   - Field: ‘owner’
[17:46:35.234]   - Field: ‘envir’
[17:46:35.234]   - Field: ‘packages’
[17:46:35.234]   - Field: ‘gc’
[17:46:35.234]   - Field: ‘conditions’
[17:46:35.234]   - Field: ‘expr’
[17:46:35.234]   - Field: ‘uuid’
[17:46:35.234]   - Field: ‘seed’
[17:46:35.234]   - Field: ‘version’
[17:46:35.234]   - Field: ‘result’
[17:46:35.235]   - Field: ‘asynchronous’
[17:46:35.235]   - Field: ‘calls’
[17:46:35.235]   - Field: ‘globals’
[17:46:35.235]   - Field: ‘stdout’
[17:46:35.235]   - Field: ‘earlySignal’
[17:46:35.235]   - Field: ‘lazy’
[17:46:35.235]   - Field: ‘state’
[17:46:35.235] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.235] - Launch lazy future ...
[17:46:35.236] Packages needed by the future expression (n = 0): <none>
[17:46:35.236] Packages needed by future strategies (n = 0): <none>
[17:46:35.236] {
[17:46:35.236]     {
[17:46:35.236]         {
[17:46:35.236]             ...future.startTime <- base::Sys.time()
[17:46:35.236]             {
[17:46:35.236]                 {
[17:46:35.236]                   {
[17:46:35.236]                     base::local({
[17:46:35.236]                       has_future <- base::requireNamespace("future", 
[17:46:35.236]                         quietly = TRUE)
[17:46:35.236]                       if (has_future) {
[17:46:35.236]                         ns <- base::getNamespace("future")
[17:46:35.236]                         version <- ns[[".package"]][["version"]]
[17:46:35.236]                         if (is.null(version)) 
[17:46:35.236]                           version <- utils::packageVersion("future")
[17:46:35.236]                       }
[17:46:35.236]                       else {
[17:46:35.236]                         version <- NULL
[17:46:35.236]                       }
[17:46:35.236]                       if (!has_future || version < "1.8.0") {
[17:46:35.236]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.236]                           "", base::R.version$version.string), 
[17:46:35.236]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.236]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.236]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.236]                             "release", "version")], collapse = " "), 
[17:46:35.236]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.236]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.236]                           info)
[17:46:35.236]                         info <- base::paste(info, collapse = "; ")
[17:46:35.236]                         if (!has_future) {
[17:46:35.236]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.236]                             info)
[17:46:35.236]                         }
[17:46:35.236]                         else {
[17:46:35.236]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.236]                             info, version)
[17:46:35.236]                         }
[17:46:35.236]                         base::stop(msg)
[17:46:35.236]                       }
[17:46:35.236]                     })
[17:46:35.236]                   }
[17:46:35.236]                   ...future.strategy.old <- future::plan("list")
[17:46:35.236]                   options(future.plan = NULL)
[17:46:35.236]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.236]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.236]                 }
[17:46:35.236]                 ...future.workdir <- getwd()
[17:46:35.236]             }
[17:46:35.236]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.236]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.236]         }
[17:46:35.236]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.236]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.236]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.236]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.236]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.236]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.236]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.236]             base::names(...future.oldOptions))
[17:46:35.236]     }
[17:46:35.236]     if (FALSE) {
[17:46:35.236]     }
[17:46:35.236]     else {
[17:46:35.236]         if (TRUE) {
[17:46:35.236]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.236]                 open = "w")
[17:46:35.236]         }
[17:46:35.236]         else {
[17:46:35.236]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.236]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.236]         }
[17:46:35.236]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.236]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.236]             base::sink(type = "output", split = FALSE)
[17:46:35.236]             base::close(...future.stdout)
[17:46:35.236]         }, add = TRUE)
[17:46:35.236]     }
[17:46:35.236]     ...future.frame <- base::sys.nframe()
[17:46:35.236]     ...future.conditions <- base::list()
[17:46:35.236]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.236]     if (FALSE) {
[17:46:35.236]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.236]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.236]     }
[17:46:35.236]     ...future.result <- base::tryCatch({
[17:46:35.236]         base::withCallingHandlers({
[17:46:35.236]             ...future.value <- base::withVisible(base::local(42L))
[17:46:35.236]             future::FutureResult(value = ...future.value$value, 
[17:46:35.236]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.236]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.236]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.236]                     ...future.globalenv.names))
[17:46:35.236]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.236]         }, condition = base::local({
[17:46:35.236]             c <- base::c
[17:46:35.236]             inherits <- base::inherits
[17:46:35.236]             invokeRestart <- base::invokeRestart
[17:46:35.236]             length <- base::length
[17:46:35.236]             list <- base::list
[17:46:35.236]             seq.int <- base::seq.int
[17:46:35.236]             signalCondition <- base::signalCondition
[17:46:35.236]             sys.calls <- base::sys.calls
[17:46:35.236]             `[[` <- base::`[[`
[17:46:35.236]             `+` <- base::`+`
[17:46:35.236]             `<<-` <- base::`<<-`
[17:46:35.236]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.236]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.236]                   3L)]
[17:46:35.236]             }
[17:46:35.236]             function(cond) {
[17:46:35.236]                 is_error <- inherits(cond, "error")
[17:46:35.236]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.236]                   NULL)
[17:46:35.236]                 if (is_error) {
[17:46:35.236]                   sessionInformation <- function() {
[17:46:35.236]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.236]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.236]                       search = base::search(), system = base::Sys.info())
[17:46:35.236]                   }
[17:46:35.236]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.236]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.236]                     cond$call), session = sessionInformation(), 
[17:46:35.236]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.236]                   signalCondition(cond)
[17:46:35.236]                 }
[17:46:35.236]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.236]                 "immediateCondition"))) {
[17:46:35.236]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.236]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.236]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.236]                   if (TRUE && !signal) {
[17:46:35.236]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.236]                     {
[17:46:35.236]                       inherits <- base::inherits
[17:46:35.236]                       invokeRestart <- base::invokeRestart
[17:46:35.236]                       is.null <- base::is.null
[17:46:35.236]                       muffled <- FALSE
[17:46:35.236]                       if (inherits(cond, "message")) {
[17:46:35.236]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.236]                         if (muffled) 
[17:46:35.236]                           invokeRestart("muffleMessage")
[17:46:35.236]                       }
[17:46:35.236]                       else if (inherits(cond, "warning")) {
[17:46:35.236]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.236]                         if (muffled) 
[17:46:35.236]                           invokeRestart("muffleWarning")
[17:46:35.236]                       }
[17:46:35.236]                       else if (inherits(cond, "condition")) {
[17:46:35.236]                         if (!is.null(pattern)) {
[17:46:35.236]                           computeRestarts <- base::computeRestarts
[17:46:35.236]                           grepl <- base::grepl
[17:46:35.236]                           restarts <- computeRestarts(cond)
[17:46:35.236]                           for (restart in restarts) {
[17:46:35.236]                             name <- restart$name
[17:46:35.236]                             if (is.null(name)) 
[17:46:35.236]                               next
[17:46:35.236]                             if (!grepl(pattern, name)) 
[17:46:35.236]                               next
[17:46:35.236]                             invokeRestart(restart)
[17:46:35.236]                             muffled <- TRUE
[17:46:35.236]                             break
[17:46:35.236]                           }
[17:46:35.236]                         }
[17:46:35.236]                       }
[17:46:35.236]                       invisible(muffled)
[17:46:35.236]                     }
[17:46:35.236]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.236]                   }
[17:46:35.236]                 }
[17:46:35.236]                 else {
[17:46:35.236]                   if (TRUE) {
[17:46:35.236]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.236]                     {
[17:46:35.236]                       inherits <- base::inherits
[17:46:35.236]                       invokeRestart <- base::invokeRestart
[17:46:35.236]                       is.null <- base::is.null
[17:46:35.236]                       muffled <- FALSE
[17:46:35.236]                       if (inherits(cond, "message")) {
[17:46:35.236]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.236]                         if (muffled) 
[17:46:35.236]                           invokeRestart("muffleMessage")
[17:46:35.236]                       }
[17:46:35.236]                       else if (inherits(cond, "warning")) {
[17:46:35.236]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.236]                         if (muffled) 
[17:46:35.236]                           invokeRestart("muffleWarning")
[17:46:35.236]                       }
[17:46:35.236]                       else if (inherits(cond, "condition")) {
[17:46:35.236]                         if (!is.null(pattern)) {
[17:46:35.236]                           computeRestarts <- base::computeRestarts
[17:46:35.236]                           grepl <- base::grepl
[17:46:35.236]                           restarts <- computeRestarts(cond)
[17:46:35.236]                           for (restart in restarts) {
[17:46:35.236]                             name <- restart$name
[17:46:35.236]                             if (is.null(name)) 
[17:46:35.236]                               next
[17:46:35.236]                             if (!grepl(pattern, name)) 
[17:46:35.236]                               next
[17:46:35.236]                             invokeRestart(restart)
[17:46:35.236]                             muffled <- TRUE
[17:46:35.236]                             break
[17:46:35.236]                           }
[17:46:35.236]                         }
[17:46:35.236]                       }
[17:46:35.236]                       invisible(muffled)
[17:46:35.236]                     }
[17:46:35.236]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.236]                   }
[17:46:35.236]                 }
[17:46:35.236]             }
[17:46:35.236]         }))
[17:46:35.236]     }, error = function(ex) {
[17:46:35.236]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.236]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.236]                 ...future.rng), started = ...future.startTime, 
[17:46:35.236]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.236]             version = "1.8"), class = "FutureResult")
[17:46:35.236]     }, finally = {
[17:46:35.236]         if (!identical(...future.workdir, getwd())) 
[17:46:35.236]             setwd(...future.workdir)
[17:46:35.236]         {
[17:46:35.236]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.236]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.236]             }
[17:46:35.236]             base::options(...future.oldOptions)
[17:46:35.236]             if (.Platform$OS.type == "windows") {
[17:46:35.236]                 old_names <- names(...future.oldEnvVars)
[17:46:35.236]                 envs <- base::Sys.getenv()
[17:46:35.236]                 names <- names(envs)
[17:46:35.236]                 common <- intersect(names, old_names)
[17:46:35.236]                 added <- setdiff(names, old_names)
[17:46:35.236]                 removed <- setdiff(old_names, names)
[17:46:35.236]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.236]                   envs[common]]
[17:46:35.236]                 NAMES <- toupper(changed)
[17:46:35.236]                 args <- list()
[17:46:35.236]                 for (kk in seq_along(NAMES)) {
[17:46:35.236]                   name <- changed[[kk]]
[17:46:35.236]                   NAME <- NAMES[[kk]]
[17:46:35.236]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.236]                     next
[17:46:35.236]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.236]                 }
[17:46:35.236]                 NAMES <- toupper(added)
[17:46:35.236]                 for (kk in seq_along(NAMES)) {
[17:46:35.236]                   name <- added[[kk]]
[17:46:35.236]                   NAME <- NAMES[[kk]]
[17:46:35.236]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.236]                     next
[17:46:35.236]                   args[[name]] <- ""
[17:46:35.236]                 }
[17:46:35.236]                 NAMES <- toupper(removed)
[17:46:35.236]                 for (kk in seq_along(NAMES)) {
[17:46:35.236]                   name <- removed[[kk]]
[17:46:35.236]                   NAME <- NAMES[[kk]]
[17:46:35.236]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.236]                     next
[17:46:35.236]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.236]                 }
[17:46:35.236]                 if (length(args) > 0) 
[17:46:35.236]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.236]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.236]             }
[17:46:35.236]             else {
[17:46:35.236]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.236]             }
[17:46:35.236]             {
[17:46:35.236]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.236]                   0L) {
[17:46:35.236]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.236]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.236]                   base::options(opts)
[17:46:35.236]                 }
[17:46:35.236]                 {
[17:46:35.236]                   {
[17:46:35.236]                     NULL
[17:46:35.236]                     RNGkind("Mersenne-Twister")
[17:46:35.236]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.236]                       inherits = FALSE)
[17:46:35.236]                   }
[17:46:35.236]                   options(future.plan = NULL)
[17:46:35.236]                   if (is.na(NA_character_)) 
[17:46:35.236]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.236]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.236]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.236]                     .init = FALSE)
[17:46:35.236]                 }
[17:46:35.236]             }
[17:46:35.236]         }
[17:46:35.236]     })
[17:46:35.236]     if (TRUE) {
[17:46:35.236]         base::sink(type = "output", split = FALSE)
[17:46:35.236]         if (TRUE) {
[17:46:35.236]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.236]         }
[17:46:35.236]         else {
[17:46:35.236]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.236]         }
[17:46:35.236]         base::close(...future.stdout)
[17:46:35.236]         ...future.stdout <- NULL
[17:46:35.236]     }
[17:46:35.236]     ...future.result$conditions <- ...future.conditions
[17:46:35.236]     ...future.result$finished <- base::Sys.time()
[17:46:35.236]     ...future.result
[17:46:35.236] }
[17:46:35.238] plan(): Setting new future strategy stack:
[17:46:35.238] List of future strategies:
[17:46:35.238] 1. sequential:
[17:46:35.238]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.238]    - tweaked: FALSE
[17:46:35.238]    - call: NULL
[17:46:35.238] plan(): nbrOfWorkers() = 1
[17:46:35.239] plan(): Setting new future strategy stack:
[17:46:35.239] List of future strategies:
[17:46:35.239] 1. sequential:
[17:46:35.239]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.239]    - tweaked: FALSE
[17:46:35.239]    - call: future::plan("sequential")
[17:46:35.239] plan(): nbrOfWorkers() = 1
[17:46:35.240] SequentialFuture started (and completed)
[17:46:35.240] - Launch lazy future ... done
[17:46:35.240] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[17:46:35.240] getGlobalsAndPackages() ...
[17:46:35.240] Searching for globals...
[17:46:35.241] - globals found: [1] ‘{’
[17:46:35.241] Searching for globals ... DONE
[17:46:35.241] Resolving globals: FALSE
[17:46:35.241] 
[17:46:35.241] 
[17:46:35.241] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[17:46:35.242] resolved() for ‘Future’ ...
[17:46:35.242] - state: ‘created’
[17:46:35.242] - run: TRUE
[17:46:35.242] - run() ...
[17:46:35.242] run() for ‘Future’ ...
[17:46:35.242] - state: ‘created’
[17:46:35.242] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.243] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.243] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.243]   - Field: ‘label’
[17:46:35.243]   - Field: ‘local’
[17:46:35.243]   - Field: ‘owner’
[17:46:35.243]   - Field: ‘envir’
[17:46:35.243]   - Field: ‘packages’
[17:46:35.243]   - Field: ‘gc’
[17:46:35.243]   - Field: ‘conditions’
[17:46:35.243]   - Field: ‘expr’
[17:46:35.244]   - Field: ‘uuid’
[17:46:35.244]   - Field: ‘seed’
[17:46:35.244]   - Field: ‘version’
[17:46:35.244]   - Field: ‘result’
[17:46:35.244]   - Field: ‘asynchronous’
[17:46:35.244]   - Field: ‘calls’
[17:46:35.244]   - Field: ‘globals’
[17:46:35.244]   - Field: ‘stdout’
[17:46:35.244]   - Field: ‘earlySignal’
[17:46:35.244]   - Field: ‘lazy’
[17:46:35.244]   - Field: ‘state’
[17:46:35.244] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.245] - Launch lazy future ...
[17:46:35.245] Packages needed by the future expression (n = 0): <none>
[17:46:35.245] Packages needed by future strategies (n = 0): <none>
[17:46:35.245] {
[17:46:35.245]     {
[17:46:35.245]         {
[17:46:35.245]             ...future.startTime <- base::Sys.time()
[17:46:35.245]             {
[17:46:35.245]                 {
[17:46:35.245]                   {
[17:46:35.245]                     base::local({
[17:46:35.245]                       has_future <- base::requireNamespace("future", 
[17:46:35.245]                         quietly = TRUE)
[17:46:35.245]                       if (has_future) {
[17:46:35.245]                         ns <- base::getNamespace("future")
[17:46:35.245]                         version <- ns[[".package"]][["version"]]
[17:46:35.245]                         if (is.null(version)) 
[17:46:35.245]                           version <- utils::packageVersion("future")
[17:46:35.245]                       }
[17:46:35.245]                       else {
[17:46:35.245]                         version <- NULL
[17:46:35.245]                       }
[17:46:35.245]                       if (!has_future || version < "1.8.0") {
[17:46:35.245]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.245]                           "", base::R.version$version.string), 
[17:46:35.245]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.245]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.245]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.245]                             "release", "version")], collapse = " "), 
[17:46:35.245]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.245]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.245]                           info)
[17:46:35.245]                         info <- base::paste(info, collapse = "; ")
[17:46:35.245]                         if (!has_future) {
[17:46:35.245]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.245]                             info)
[17:46:35.245]                         }
[17:46:35.245]                         else {
[17:46:35.245]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.245]                             info, version)
[17:46:35.245]                         }
[17:46:35.245]                         base::stop(msg)
[17:46:35.245]                       }
[17:46:35.245]                     })
[17:46:35.245]                   }
[17:46:35.245]                   ...future.strategy.old <- future::plan("list")
[17:46:35.245]                   options(future.plan = NULL)
[17:46:35.245]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.245]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.245]                 }
[17:46:35.245]                 ...future.workdir <- getwd()
[17:46:35.245]             }
[17:46:35.245]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.245]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.245]         }
[17:46:35.245]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.245]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.245]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.245]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.245]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.245]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.245]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.245]             base::names(...future.oldOptions))
[17:46:35.245]     }
[17:46:35.245]     if (FALSE) {
[17:46:35.245]     }
[17:46:35.245]     else {
[17:46:35.245]         if (TRUE) {
[17:46:35.245]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.245]                 open = "w")
[17:46:35.245]         }
[17:46:35.245]         else {
[17:46:35.245]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.245]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.245]         }
[17:46:35.245]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.245]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.245]             base::sink(type = "output", split = FALSE)
[17:46:35.245]             base::close(...future.stdout)
[17:46:35.245]         }, add = TRUE)
[17:46:35.245]     }
[17:46:35.245]     ...future.frame <- base::sys.nframe()
[17:46:35.245]     ...future.conditions <- base::list()
[17:46:35.245]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.245]     if (FALSE) {
[17:46:35.245]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.245]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.245]     }
[17:46:35.245]     ...future.result <- base::tryCatch({
[17:46:35.245]         base::withCallingHandlers({
[17:46:35.245]             ...future.value <- base::withVisible(base::local({
[17:46:35.245]                 42L
[17:46:35.245]             }))
[17:46:35.245]             future::FutureResult(value = ...future.value$value, 
[17:46:35.245]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.245]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.245]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.245]                     ...future.globalenv.names))
[17:46:35.245]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.245]         }, condition = base::local({
[17:46:35.245]             c <- base::c
[17:46:35.245]             inherits <- base::inherits
[17:46:35.245]             invokeRestart <- base::invokeRestart
[17:46:35.245]             length <- base::length
[17:46:35.245]             list <- base::list
[17:46:35.245]             seq.int <- base::seq.int
[17:46:35.245]             signalCondition <- base::signalCondition
[17:46:35.245]             sys.calls <- base::sys.calls
[17:46:35.245]             `[[` <- base::`[[`
[17:46:35.245]             `+` <- base::`+`
[17:46:35.245]             `<<-` <- base::`<<-`
[17:46:35.245]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.245]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.245]                   3L)]
[17:46:35.245]             }
[17:46:35.245]             function(cond) {
[17:46:35.245]                 is_error <- inherits(cond, "error")
[17:46:35.245]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.245]                   NULL)
[17:46:35.245]                 if (is_error) {
[17:46:35.245]                   sessionInformation <- function() {
[17:46:35.245]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.245]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.245]                       search = base::search(), system = base::Sys.info())
[17:46:35.245]                   }
[17:46:35.245]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.245]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.245]                     cond$call), session = sessionInformation(), 
[17:46:35.245]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.245]                   signalCondition(cond)
[17:46:35.245]                 }
[17:46:35.245]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.245]                 "immediateCondition"))) {
[17:46:35.245]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.245]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.245]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.245]                   if (TRUE && !signal) {
[17:46:35.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.245]                     {
[17:46:35.245]                       inherits <- base::inherits
[17:46:35.245]                       invokeRestart <- base::invokeRestart
[17:46:35.245]                       is.null <- base::is.null
[17:46:35.245]                       muffled <- FALSE
[17:46:35.245]                       if (inherits(cond, "message")) {
[17:46:35.245]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.245]                         if (muffled) 
[17:46:35.245]                           invokeRestart("muffleMessage")
[17:46:35.245]                       }
[17:46:35.245]                       else if (inherits(cond, "warning")) {
[17:46:35.245]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.245]                         if (muffled) 
[17:46:35.245]                           invokeRestart("muffleWarning")
[17:46:35.245]                       }
[17:46:35.245]                       else if (inherits(cond, "condition")) {
[17:46:35.245]                         if (!is.null(pattern)) {
[17:46:35.245]                           computeRestarts <- base::computeRestarts
[17:46:35.245]                           grepl <- base::grepl
[17:46:35.245]                           restarts <- computeRestarts(cond)
[17:46:35.245]                           for (restart in restarts) {
[17:46:35.245]                             name <- restart$name
[17:46:35.245]                             if (is.null(name)) 
[17:46:35.245]                               next
[17:46:35.245]                             if (!grepl(pattern, name)) 
[17:46:35.245]                               next
[17:46:35.245]                             invokeRestart(restart)
[17:46:35.245]                             muffled <- TRUE
[17:46:35.245]                             break
[17:46:35.245]                           }
[17:46:35.245]                         }
[17:46:35.245]                       }
[17:46:35.245]                       invisible(muffled)
[17:46:35.245]                     }
[17:46:35.245]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.245]                   }
[17:46:35.245]                 }
[17:46:35.245]                 else {
[17:46:35.245]                   if (TRUE) {
[17:46:35.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.245]                     {
[17:46:35.245]                       inherits <- base::inherits
[17:46:35.245]                       invokeRestart <- base::invokeRestart
[17:46:35.245]                       is.null <- base::is.null
[17:46:35.245]                       muffled <- FALSE
[17:46:35.245]                       if (inherits(cond, "message")) {
[17:46:35.245]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.245]                         if (muffled) 
[17:46:35.245]                           invokeRestart("muffleMessage")
[17:46:35.245]                       }
[17:46:35.245]                       else if (inherits(cond, "warning")) {
[17:46:35.245]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.245]                         if (muffled) 
[17:46:35.245]                           invokeRestart("muffleWarning")
[17:46:35.245]                       }
[17:46:35.245]                       else if (inherits(cond, "condition")) {
[17:46:35.245]                         if (!is.null(pattern)) {
[17:46:35.245]                           computeRestarts <- base::computeRestarts
[17:46:35.245]                           grepl <- base::grepl
[17:46:35.245]                           restarts <- computeRestarts(cond)
[17:46:35.245]                           for (restart in restarts) {
[17:46:35.245]                             name <- restart$name
[17:46:35.245]                             if (is.null(name)) 
[17:46:35.245]                               next
[17:46:35.245]                             if (!grepl(pattern, name)) 
[17:46:35.245]                               next
[17:46:35.245]                             invokeRestart(restart)
[17:46:35.245]                             muffled <- TRUE
[17:46:35.245]                             break
[17:46:35.245]                           }
[17:46:35.245]                         }
[17:46:35.245]                       }
[17:46:35.245]                       invisible(muffled)
[17:46:35.245]                     }
[17:46:35.245]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.245]                   }
[17:46:35.245]                 }
[17:46:35.245]             }
[17:46:35.245]         }))
[17:46:35.245]     }, error = function(ex) {
[17:46:35.245]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.245]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.245]                 ...future.rng), started = ...future.startTime, 
[17:46:35.245]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.245]             version = "1.8"), class = "FutureResult")
[17:46:35.245]     }, finally = {
[17:46:35.245]         if (!identical(...future.workdir, getwd())) 
[17:46:35.245]             setwd(...future.workdir)
[17:46:35.245]         {
[17:46:35.245]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.245]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.245]             }
[17:46:35.245]             base::options(...future.oldOptions)
[17:46:35.245]             if (.Platform$OS.type == "windows") {
[17:46:35.245]                 old_names <- names(...future.oldEnvVars)
[17:46:35.245]                 envs <- base::Sys.getenv()
[17:46:35.245]                 names <- names(envs)
[17:46:35.245]                 common <- intersect(names, old_names)
[17:46:35.245]                 added <- setdiff(names, old_names)
[17:46:35.245]                 removed <- setdiff(old_names, names)
[17:46:35.245]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.245]                   envs[common]]
[17:46:35.245]                 NAMES <- toupper(changed)
[17:46:35.245]                 args <- list()
[17:46:35.245]                 for (kk in seq_along(NAMES)) {
[17:46:35.245]                   name <- changed[[kk]]
[17:46:35.245]                   NAME <- NAMES[[kk]]
[17:46:35.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.245]                     next
[17:46:35.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.245]                 }
[17:46:35.245]                 NAMES <- toupper(added)
[17:46:35.245]                 for (kk in seq_along(NAMES)) {
[17:46:35.245]                   name <- added[[kk]]
[17:46:35.245]                   NAME <- NAMES[[kk]]
[17:46:35.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.245]                     next
[17:46:35.245]                   args[[name]] <- ""
[17:46:35.245]                 }
[17:46:35.245]                 NAMES <- toupper(removed)
[17:46:35.245]                 for (kk in seq_along(NAMES)) {
[17:46:35.245]                   name <- removed[[kk]]
[17:46:35.245]                   NAME <- NAMES[[kk]]
[17:46:35.245]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.245]                     next
[17:46:35.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.245]                 }
[17:46:35.245]                 if (length(args) > 0) 
[17:46:35.245]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.245]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.245]             }
[17:46:35.245]             else {
[17:46:35.245]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.245]             }
[17:46:35.245]             {
[17:46:35.245]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.245]                   0L) {
[17:46:35.245]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.245]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.245]                   base::options(opts)
[17:46:35.245]                 }
[17:46:35.245]                 {
[17:46:35.245]                   {
[17:46:35.245]                     NULL
[17:46:35.245]                     RNGkind("Mersenne-Twister")
[17:46:35.245]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.245]                       inherits = FALSE)
[17:46:35.245]                   }
[17:46:35.245]                   options(future.plan = NULL)
[17:46:35.245]                   if (is.na(NA_character_)) 
[17:46:35.245]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.245]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.245]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.245]                     .init = FALSE)
[17:46:35.245]                 }
[17:46:35.245]             }
[17:46:35.245]         }
[17:46:35.245]     })
[17:46:35.245]     if (TRUE) {
[17:46:35.245]         base::sink(type = "output", split = FALSE)
[17:46:35.245]         if (TRUE) {
[17:46:35.245]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.245]         }
[17:46:35.245]         else {
[17:46:35.245]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.245]         }
[17:46:35.245]         base::close(...future.stdout)
[17:46:35.245]         ...future.stdout <- NULL
[17:46:35.245]     }
[17:46:35.245]     ...future.result$conditions <- ...future.conditions
[17:46:35.245]     ...future.result$finished <- base::Sys.time()
[17:46:35.245]     ...future.result
[17:46:35.245] }
[17:46:35.247] plan(): Setting new future strategy stack:
[17:46:35.247] List of future strategies:
[17:46:35.247] 1. sequential:
[17:46:35.247]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.247]    - tweaked: FALSE
[17:46:35.247]    - call: NULL
[17:46:35.247] plan(): nbrOfWorkers() = 1
[17:46:35.248] plan(): Setting new future strategy stack:
[17:46:35.248] List of future strategies:
[17:46:35.248] 1. sequential:
[17:46:35.248]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.248]    - tweaked: FALSE
[17:46:35.248]    - call: future::plan("sequential")
[17:46:35.249] plan(): nbrOfWorkers() = 1
[17:46:35.249] SequentialFuture started (and completed)
[17:46:35.249] - Launch lazy future ... done
[17:46:35.249] run() for ‘SequentialFuture’ ... done
[17:46:35.249] - run() ... done
[17:46:35.249] - resolved() ...
[17:46:35.249] resolved() for ‘SequentialFuture’ ...
[17:46:35.249] - state: ‘finished’
[17:46:35.249] - run: TRUE
[17:46:35.250] - result: ‘FutureResult’
[17:46:35.250] resolved() for ‘SequentialFuture’ ... done
[17:46:35.250] - resolved: TRUE
[17:46:35.250] - resolved() ... done
[17:46:35.250] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[17:46:35.250] getGlobalsAndPackages() ...
[17:46:35.250] Searching for globals...
[17:46:35.251] 
[17:46:35.251] Searching for globals ... DONE
[17:46:35.251] - globals: [0] <none>
[17:46:35.251] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: aab89ca8-a763-5f58-ba3a-65d2ae0998c9
Class: ‘Future’, ‘environment’
> y <- value(f)
[17:46:35.251] run() for ‘Future’ ...
[17:46:35.252] - state: ‘created’
[17:46:35.252] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:35.252] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:35.252] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:35.252]   - Field: ‘label’
[17:46:35.252]   - Field: ‘local’
[17:46:35.252]   - Field: ‘owner’
[17:46:35.252]   - Field: ‘envir’
[17:46:35.254]   - Field: ‘packages’
[17:46:35.255]   - Field: ‘gc’
[17:46:35.255]   - Field: ‘conditions’
[17:46:35.255]   - Field: ‘expr’
[17:46:35.255]   - Field: ‘uuid’
[17:46:35.255]   - Field: ‘seed’
[17:46:35.255]   - Field: ‘version’
[17:46:35.255]   - Field: ‘result’
[17:46:35.255]   - Field: ‘asynchronous’
[17:46:35.255]   - Field: ‘calls’
[17:46:35.255]   - Field: ‘globals’
[17:46:35.255]   - Field: ‘stdout’
[17:46:35.256]   - Field: ‘earlySignal’
[17:46:35.256]   - Field: ‘lazy’
[17:46:35.256]   - Field: ‘state’
[17:46:35.256] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:35.256] - Launch lazy future ...
[17:46:35.256] Packages needed by the future expression (n = 0): <none>
[17:46:35.256] Packages needed by future strategies (n = 0): <none>
[17:46:35.257] {
[17:46:35.257]     {
[17:46:35.257]         {
[17:46:35.257]             ...future.startTime <- base::Sys.time()
[17:46:35.257]             {
[17:46:35.257]                 {
[17:46:35.257]                   {
[17:46:35.257]                     base::local({
[17:46:35.257]                       has_future <- base::requireNamespace("future", 
[17:46:35.257]                         quietly = TRUE)
[17:46:35.257]                       if (has_future) {
[17:46:35.257]                         ns <- base::getNamespace("future")
[17:46:35.257]                         version <- ns[[".package"]][["version"]]
[17:46:35.257]                         if (is.null(version)) 
[17:46:35.257]                           version <- utils::packageVersion("future")
[17:46:35.257]                       }
[17:46:35.257]                       else {
[17:46:35.257]                         version <- NULL
[17:46:35.257]                       }
[17:46:35.257]                       if (!has_future || version < "1.8.0") {
[17:46:35.257]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:35.257]                           "", base::R.version$version.string), 
[17:46:35.257]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:35.257]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:35.257]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:35.257]                             "release", "version")], collapse = " "), 
[17:46:35.257]                           hostname = base::Sys.info()[["nodename"]])
[17:46:35.257]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:35.257]                           info)
[17:46:35.257]                         info <- base::paste(info, collapse = "; ")
[17:46:35.257]                         if (!has_future) {
[17:46:35.257]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:35.257]                             info)
[17:46:35.257]                         }
[17:46:35.257]                         else {
[17:46:35.257]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:35.257]                             info, version)
[17:46:35.257]                         }
[17:46:35.257]                         base::stop(msg)
[17:46:35.257]                       }
[17:46:35.257]                     })
[17:46:35.257]                   }
[17:46:35.257]                   ...future.strategy.old <- future::plan("list")
[17:46:35.257]                   options(future.plan = NULL)
[17:46:35.257]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.257]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:35.257]                 }
[17:46:35.257]                 ...future.workdir <- getwd()
[17:46:35.257]             }
[17:46:35.257]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:35.257]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:35.257]         }
[17:46:35.257]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:35.257]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:35.257]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:35.257]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:35.257]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:35.257]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:35.257]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:35.257]             base::names(...future.oldOptions))
[17:46:35.257]     }
[17:46:35.257]     if (FALSE) {
[17:46:35.257]     }
[17:46:35.257]     else {
[17:46:35.257]         if (TRUE) {
[17:46:35.257]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:35.257]                 open = "w")
[17:46:35.257]         }
[17:46:35.257]         else {
[17:46:35.257]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:35.257]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:35.257]         }
[17:46:35.257]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:35.257]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:35.257]             base::sink(type = "output", split = FALSE)
[17:46:35.257]             base::close(...future.stdout)
[17:46:35.257]         }, add = TRUE)
[17:46:35.257]     }
[17:46:35.257]     ...future.frame <- base::sys.nframe()
[17:46:35.257]     ...future.conditions <- base::list()
[17:46:35.257]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:35.257]     if (FALSE) {
[17:46:35.257]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:35.257]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:35.257]     }
[17:46:35.257]     ...future.result <- base::tryCatch({
[17:46:35.257]         base::withCallingHandlers({
[17:46:35.257]             ...future.value <- base::withVisible(base::local(42L))
[17:46:35.257]             future::FutureResult(value = ...future.value$value, 
[17:46:35.257]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.257]                   ...future.rng), globalenv = if (FALSE) 
[17:46:35.257]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:35.257]                     ...future.globalenv.names))
[17:46:35.257]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:35.257]         }, condition = base::local({
[17:46:35.257]             c <- base::c
[17:46:35.257]             inherits <- base::inherits
[17:46:35.257]             invokeRestart <- base::invokeRestart
[17:46:35.257]             length <- base::length
[17:46:35.257]             list <- base::list
[17:46:35.257]             seq.int <- base::seq.int
[17:46:35.257]             signalCondition <- base::signalCondition
[17:46:35.257]             sys.calls <- base::sys.calls
[17:46:35.257]             `[[` <- base::`[[`
[17:46:35.257]             `+` <- base::`+`
[17:46:35.257]             `<<-` <- base::`<<-`
[17:46:35.257]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:35.257]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:35.257]                   3L)]
[17:46:35.257]             }
[17:46:35.257]             function(cond) {
[17:46:35.257]                 is_error <- inherits(cond, "error")
[17:46:35.257]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:35.257]                   NULL)
[17:46:35.257]                 if (is_error) {
[17:46:35.257]                   sessionInformation <- function() {
[17:46:35.257]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:35.257]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:35.257]                       search = base::search(), system = base::Sys.info())
[17:46:35.257]                   }
[17:46:35.257]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.257]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:35.257]                     cond$call), session = sessionInformation(), 
[17:46:35.257]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:35.257]                   signalCondition(cond)
[17:46:35.257]                 }
[17:46:35.257]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:35.257]                 "immediateCondition"))) {
[17:46:35.257]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:35.257]                   ...future.conditions[[length(...future.conditions) + 
[17:46:35.257]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:35.257]                   if (TRUE && !signal) {
[17:46:35.257]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.257]                     {
[17:46:35.257]                       inherits <- base::inherits
[17:46:35.257]                       invokeRestart <- base::invokeRestart
[17:46:35.257]                       is.null <- base::is.null
[17:46:35.257]                       muffled <- FALSE
[17:46:35.257]                       if (inherits(cond, "message")) {
[17:46:35.257]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.257]                         if (muffled) 
[17:46:35.257]                           invokeRestart("muffleMessage")
[17:46:35.257]                       }
[17:46:35.257]                       else if (inherits(cond, "warning")) {
[17:46:35.257]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.257]                         if (muffled) 
[17:46:35.257]                           invokeRestart("muffleWarning")
[17:46:35.257]                       }
[17:46:35.257]                       else if (inherits(cond, "condition")) {
[17:46:35.257]                         if (!is.null(pattern)) {
[17:46:35.257]                           computeRestarts <- base::computeRestarts
[17:46:35.257]                           grepl <- base::grepl
[17:46:35.257]                           restarts <- computeRestarts(cond)
[17:46:35.257]                           for (restart in restarts) {
[17:46:35.257]                             name <- restart$name
[17:46:35.257]                             if (is.null(name)) 
[17:46:35.257]                               next
[17:46:35.257]                             if (!grepl(pattern, name)) 
[17:46:35.257]                               next
[17:46:35.257]                             invokeRestart(restart)
[17:46:35.257]                             muffled <- TRUE
[17:46:35.257]                             break
[17:46:35.257]                           }
[17:46:35.257]                         }
[17:46:35.257]                       }
[17:46:35.257]                       invisible(muffled)
[17:46:35.257]                     }
[17:46:35.257]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.257]                   }
[17:46:35.257]                 }
[17:46:35.257]                 else {
[17:46:35.257]                   if (TRUE) {
[17:46:35.257]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:35.257]                     {
[17:46:35.257]                       inherits <- base::inherits
[17:46:35.257]                       invokeRestart <- base::invokeRestart
[17:46:35.257]                       is.null <- base::is.null
[17:46:35.257]                       muffled <- FALSE
[17:46:35.257]                       if (inherits(cond, "message")) {
[17:46:35.257]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:35.257]                         if (muffled) 
[17:46:35.257]                           invokeRestart("muffleMessage")
[17:46:35.257]                       }
[17:46:35.257]                       else if (inherits(cond, "warning")) {
[17:46:35.257]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:35.257]                         if (muffled) 
[17:46:35.257]                           invokeRestart("muffleWarning")
[17:46:35.257]                       }
[17:46:35.257]                       else if (inherits(cond, "condition")) {
[17:46:35.257]                         if (!is.null(pattern)) {
[17:46:35.257]                           computeRestarts <- base::computeRestarts
[17:46:35.257]                           grepl <- base::grepl
[17:46:35.257]                           restarts <- computeRestarts(cond)
[17:46:35.257]                           for (restart in restarts) {
[17:46:35.257]                             name <- restart$name
[17:46:35.257]                             if (is.null(name)) 
[17:46:35.257]                               next
[17:46:35.257]                             if (!grepl(pattern, name)) 
[17:46:35.257]                               next
[17:46:35.257]                             invokeRestart(restart)
[17:46:35.257]                             muffled <- TRUE
[17:46:35.257]                             break
[17:46:35.257]                           }
[17:46:35.257]                         }
[17:46:35.257]                       }
[17:46:35.257]                       invisible(muffled)
[17:46:35.257]                     }
[17:46:35.257]                     muffleCondition(cond, pattern = "^muffle")
[17:46:35.257]                   }
[17:46:35.257]                 }
[17:46:35.257]             }
[17:46:35.257]         }))
[17:46:35.257]     }, error = function(ex) {
[17:46:35.257]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:35.257]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:35.257]                 ...future.rng), started = ...future.startTime, 
[17:46:35.257]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:35.257]             version = "1.8"), class = "FutureResult")
[17:46:35.257]     }, finally = {
[17:46:35.257]         if (!identical(...future.workdir, getwd())) 
[17:46:35.257]             setwd(...future.workdir)
[17:46:35.257]         {
[17:46:35.257]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:35.257]                 ...future.oldOptions$nwarnings <- NULL
[17:46:35.257]             }
[17:46:35.257]             base::options(...future.oldOptions)
[17:46:35.257]             if (.Platform$OS.type == "windows") {
[17:46:35.257]                 old_names <- names(...future.oldEnvVars)
[17:46:35.257]                 envs <- base::Sys.getenv()
[17:46:35.257]                 names <- names(envs)
[17:46:35.257]                 common <- intersect(names, old_names)
[17:46:35.257]                 added <- setdiff(names, old_names)
[17:46:35.257]                 removed <- setdiff(old_names, names)
[17:46:35.257]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:35.257]                   envs[common]]
[17:46:35.257]                 NAMES <- toupper(changed)
[17:46:35.257]                 args <- list()
[17:46:35.257]                 for (kk in seq_along(NAMES)) {
[17:46:35.257]                   name <- changed[[kk]]
[17:46:35.257]                   NAME <- NAMES[[kk]]
[17:46:35.257]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.257]                     next
[17:46:35.257]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.257]                 }
[17:46:35.257]                 NAMES <- toupper(added)
[17:46:35.257]                 for (kk in seq_along(NAMES)) {
[17:46:35.257]                   name <- added[[kk]]
[17:46:35.257]                   NAME <- NAMES[[kk]]
[17:46:35.257]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.257]                     next
[17:46:35.257]                   args[[name]] <- ""
[17:46:35.257]                 }
[17:46:35.257]                 NAMES <- toupper(removed)
[17:46:35.257]                 for (kk in seq_along(NAMES)) {
[17:46:35.257]                   name <- removed[[kk]]
[17:46:35.257]                   NAME <- NAMES[[kk]]
[17:46:35.257]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:35.257]                     next
[17:46:35.257]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:35.257]                 }
[17:46:35.257]                 if (length(args) > 0) 
[17:46:35.257]                   base::do.call(base::Sys.setenv, args = args)
[17:46:35.257]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:35.257]             }
[17:46:35.257]             else {
[17:46:35.257]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:35.257]             }
[17:46:35.257]             {
[17:46:35.257]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:35.257]                   0L) {
[17:46:35.257]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:35.257]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:35.257]                   base::options(opts)
[17:46:35.257]                 }
[17:46:35.257]                 {
[17:46:35.257]                   {
[17:46:35.257]                     NULL
[17:46:35.257]                     RNGkind("Mersenne-Twister")
[17:46:35.257]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:35.257]                       inherits = FALSE)
[17:46:35.257]                   }
[17:46:35.257]                   options(future.plan = NULL)
[17:46:35.257]                   if (is.na(NA_character_)) 
[17:46:35.257]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:35.257]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:35.257]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:35.257]                     .init = FALSE)
[17:46:35.257]                 }
[17:46:35.257]             }
[17:46:35.257]         }
[17:46:35.257]     })
[17:46:35.257]     if (TRUE) {
[17:46:35.257]         base::sink(type = "output", split = FALSE)
[17:46:35.257]         if (TRUE) {
[17:46:35.257]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:35.257]         }
[17:46:35.257]         else {
[17:46:35.257]             ...future.result["stdout"] <- base::list(NULL)
[17:46:35.257]         }
[17:46:35.257]         base::close(...future.stdout)
[17:46:35.257]         ...future.stdout <- NULL
[17:46:35.257]     }
[17:46:35.257]     ...future.result$conditions <- ...future.conditions
[17:46:35.257]     ...future.result$finished <- base::Sys.time()
[17:46:35.257]     ...future.result
[17:46:35.257] }
[17:46:35.258] plan(): Setting new future strategy stack:
[17:46:35.258] List of future strategies:
[17:46:35.258] 1. sequential:
[17:46:35.258]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.258]    - tweaked: FALSE
[17:46:35.258]    - call: NULL
[17:46:35.259] plan(): nbrOfWorkers() = 1
[17:46:35.259] plan(): Setting new future strategy stack:
[17:46:35.260] List of future strategies:
[17:46:35.260] 1. sequential:
[17:46:35.260]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.260]    - tweaked: FALSE
[17:46:35.260]    - call: future::plan("sequential")
[17:46:35.260] plan(): nbrOfWorkers() = 1
[17:46:35.260] SequentialFuture started (and completed)
[17:46:35.260] - Launch lazy future ... done
[17:46:35.260] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[17:46:35.261] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[17:46:35.262] plan(): Setting new future strategy stack:
[17:46:35.262] List of future strategies:
[17:46:35.262] 1. FutureStrategy:
[17:46:35.262]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:35.262]    - tweaked: FALSE
[17:46:35.262]    - call: future::plan(oplan)
[17:46:35.272] plan(): nbrOfWorkers() = 1
> 
