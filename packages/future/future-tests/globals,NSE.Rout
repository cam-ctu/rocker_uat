
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:57.876] plan(): Setting new future strategy stack:
[17:46:57.876] List of future strategies:
[17:46:57.876] 1. sequential:
[17:46:57.876]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.876]    - tweaked: FALSE
[17:46:57.876]    - call: future::plan("sequential")
[17:46:57.887] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals w/ non-standard evaluation (NSE) ...")
*** Globals w/ non-standard evaluation (NSE) ...
> 
> data <- data.frame(x = 1:5, y = 1:5)
> v0 <- subset(data, x < 3)$y
> 
> for (strategy in supportedStrategies()) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("- Strategy: %s ...", strategy))
+   
+   plan(strategy)
+ 
+   ## Assert option is passed on to future
+   options(future.globals.onMissing = "error")
+   opt1 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt1, "error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   opt2 %<-% getOption("future.globals.onMissing")
+   stopifnot(identical(opt2, "ignore"))
+ 
+   options(future.globals.onMissing = "error")
+   res <- try({ v1 %<-% subset(data, x < 3)$y }, silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ 
+   options(future.globals.onMissing = "ignore")
+   v2 %<-% subset(data, x < 3)$y
+   stopifnot(identical(v2, v0))
+ 
+   ## Nested futures (requires option is passed on to future)
+   plan(list(sequential, strategy))
+   options(future.globals.onMissing = "ignore")
+   v3 %<-% {
+     a %<-% subset(data, x < 3)$y
+     a
+   } %lazy% TRUE
+   stopifnot(identical(v3, v0))
+ 
+   message(sprintf("- Strategy: %s ... DONE", strategy))
+ }
- Strategy: sequential ...
[17:46:57.919] plan(): Setting new future strategy stack:
[17:46:57.919] List of future strategies:
[17:46:57.919] 1. sequential:
[17:46:57.919]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.919]    - tweaked: FALSE
[17:46:57.919]    - call: plan(strategy)
[17:46:57.932] plan(): nbrOfWorkers() = 1
[17:46:57.934] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:46:57.934] Searching for globals...
[17:46:57.938] - globals found: [1] ‘getOption’
[17:46:57.938] Searching for globals ... DONE
[17:46:57.938] Resolving globals: FALSE
[17:46:57.938] 
[17:46:57.938] 
[17:46:57.938] getGlobalsAndPackages() ... DONE
[17:46:57.939] run() for ‘Future’ ...
[17:46:57.939] - state: ‘created’
[17:46:57.939] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:57.940] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:57.940] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:57.940]   - Field: ‘label’
[17:46:57.940]   - Field: ‘local’
[17:46:57.940]   - Field: ‘owner’
[17:46:57.940]   - Field: ‘envir’
[17:46:57.940]   - Field: ‘packages’
[17:46:57.940]   - Field: ‘gc’
[17:46:57.941]   - Field: ‘conditions’
[17:46:57.941]   - Field: ‘expr’
[17:46:57.941]   - Field: ‘uuid’
[17:46:57.941]   - Field: ‘seed’
[17:46:57.941]   - Field: ‘version’
[17:46:57.941]   - Field: ‘result’
[17:46:57.941]   - Field: ‘asynchronous’
[17:46:57.941]   - Field: ‘calls’
[17:46:57.941]   - Field: ‘globals’
[17:46:57.941]   - Field: ‘stdout’
[17:46:57.941]   - Field: ‘earlySignal’
[17:46:57.941]   - Field: ‘lazy’
[17:46:57.942]   - Field: ‘state’
[17:46:57.942] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:57.942] - Launch lazy future ...
[17:46:57.942] Packages needed by the future expression (n = 0): <none>
[17:46:57.943] Packages needed by future strategies (n = 0): <none>
[17:46:57.943] {
[17:46:57.943]     {
[17:46:57.943]         {
[17:46:57.943]             ...future.startTime <- base::Sys.time()
[17:46:57.943]             {
[17:46:57.943]                 {
[17:46:57.943]                   {
[17:46:57.943]                     base::local({
[17:46:57.943]                       has_future <- base::requireNamespace("future", 
[17:46:57.943]                         quietly = TRUE)
[17:46:57.943]                       if (has_future) {
[17:46:57.943]                         ns <- base::getNamespace("future")
[17:46:57.943]                         version <- ns[[".package"]][["version"]]
[17:46:57.943]                         if (is.null(version)) 
[17:46:57.943]                           version <- utils::packageVersion("future")
[17:46:57.943]                       }
[17:46:57.943]                       else {
[17:46:57.943]                         version <- NULL
[17:46:57.943]                       }
[17:46:57.943]                       if (!has_future || version < "1.8.0") {
[17:46:57.943]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:57.943]                           "", base::R.version$version.string), 
[17:46:57.943]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:57.943]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:57.943]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:57.943]                             "release", "version")], collapse = " "), 
[17:46:57.943]                           hostname = base::Sys.info()[["nodename"]])
[17:46:57.943]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:57.943]                           info)
[17:46:57.943]                         info <- base::paste(info, collapse = "; ")
[17:46:57.943]                         if (!has_future) {
[17:46:57.943]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:57.943]                             info)
[17:46:57.943]                         }
[17:46:57.943]                         else {
[17:46:57.943]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:57.943]                             info, version)
[17:46:57.943]                         }
[17:46:57.943]                         base::stop(msg)
[17:46:57.943]                       }
[17:46:57.943]                     })
[17:46:57.943]                   }
[17:46:57.943]                   ...future.strategy.old <- future::plan("list")
[17:46:57.943]                   options(future.plan = NULL)
[17:46:57.943]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:57.943]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:57.943]                 }
[17:46:57.943]                 ...future.workdir <- getwd()
[17:46:57.943]             }
[17:46:57.943]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:57.943]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:57.943]         }
[17:46:57.943]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:46:57.943]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:57.943]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:46:57.943]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:57.943]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:57.943]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:57.943]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:57.943]             base::names(...future.oldOptions))
[17:46:57.943]     }
[17:46:57.943]     if (FALSE) {
[17:46:57.943]     }
[17:46:57.943]     else {
[17:46:57.943]         if (TRUE) {
[17:46:57.943]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:57.943]                 open = "w")
[17:46:57.943]         }
[17:46:57.943]         else {
[17:46:57.943]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:57.943]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:57.943]         }
[17:46:57.943]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:57.943]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:57.943]             base::sink(type = "output", split = FALSE)
[17:46:57.943]             base::close(...future.stdout)
[17:46:57.943]         }, add = TRUE)
[17:46:57.943]     }
[17:46:57.943]     ...future.frame <- base::sys.nframe()
[17:46:57.943]     ...future.conditions <- base::list()
[17:46:57.943]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:57.943]     if (FALSE) {
[17:46:57.943]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:57.943]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:57.943]     }
[17:46:57.943]     ...future.result <- base::tryCatch({
[17:46:57.943]         base::withCallingHandlers({
[17:46:57.943]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[17:46:57.943]             future::FutureResult(value = ...future.value$value, 
[17:46:57.943]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:57.943]                   ...future.rng), globalenv = if (FALSE) 
[17:46:57.943]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:57.943]                     ...future.globalenv.names))
[17:46:57.943]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:57.943]         }, condition = base::local({
[17:46:57.943]             c <- base::c
[17:46:57.943]             inherits <- base::inherits
[17:46:57.943]             invokeRestart <- base::invokeRestart
[17:46:57.943]             length <- base::length
[17:46:57.943]             list <- base::list
[17:46:57.943]             seq.int <- base::seq.int
[17:46:57.943]             signalCondition <- base::signalCondition
[17:46:57.943]             sys.calls <- base::sys.calls
[17:46:57.943]             `[[` <- base::`[[`
[17:46:57.943]             `+` <- base::`+`
[17:46:57.943]             `<<-` <- base::`<<-`
[17:46:57.943]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:57.943]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:57.943]                   3L)]
[17:46:57.943]             }
[17:46:57.943]             function(cond) {
[17:46:57.943]                 is_error <- inherits(cond, "error")
[17:46:57.943]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:57.943]                   NULL)
[17:46:57.943]                 if (is_error) {
[17:46:57.943]                   sessionInformation <- function() {
[17:46:57.943]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:57.943]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:57.943]                       search = base::search(), system = base::Sys.info())
[17:46:57.943]                   }
[17:46:57.943]                   ...future.conditions[[length(...future.conditions) + 
[17:46:57.943]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:57.943]                     cond$call), session = sessionInformation(), 
[17:46:57.943]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:57.943]                   signalCondition(cond)
[17:46:57.943]                 }
[17:46:57.943]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:57.943]                 "immediateCondition"))) {
[17:46:57.943]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:57.943]                   ...future.conditions[[length(...future.conditions) + 
[17:46:57.943]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:57.943]                   if (TRUE && !signal) {
[17:46:57.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:57.943]                     {
[17:46:57.943]                       inherits <- base::inherits
[17:46:57.943]                       invokeRestart <- base::invokeRestart
[17:46:57.943]                       is.null <- base::is.null
[17:46:57.943]                       muffled <- FALSE
[17:46:57.943]                       if (inherits(cond, "message")) {
[17:46:57.943]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:57.943]                         if (muffled) 
[17:46:57.943]                           invokeRestart("muffleMessage")
[17:46:57.943]                       }
[17:46:57.943]                       else if (inherits(cond, "warning")) {
[17:46:57.943]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:57.943]                         if (muffled) 
[17:46:57.943]                           invokeRestart("muffleWarning")
[17:46:57.943]                       }
[17:46:57.943]                       else if (inherits(cond, "condition")) {
[17:46:57.943]                         if (!is.null(pattern)) {
[17:46:57.943]                           computeRestarts <- base::computeRestarts
[17:46:57.943]                           grepl <- base::grepl
[17:46:57.943]                           restarts <- computeRestarts(cond)
[17:46:57.943]                           for (restart in restarts) {
[17:46:57.943]                             name <- restart$name
[17:46:57.943]                             if (is.null(name)) 
[17:46:57.943]                               next
[17:46:57.943]                             if (!grepl(pattern, name)) 
[17:46:57.943]                               next
[17:46:57.943]                             invokeRestart(restart)
[17:46:57.943]                             muffled <- TRUE
[17:46:57.943]                             break
[17:46:57.943]                           }
[17:46:57.943]                         }
[17:46:57.943]                       }
[17:46:57.943]                       invisible(muffled)
[17:46:57.943]                     }
[17:46:57.943]                     muffleCondition(cond, pattern = "^muffle")
[17:46:57.943]                   }
[17:46:57.943]                 }
[17:46:57.943]                 else {
[17:46:57.943]                   if (TRUE) {
[17:46:57.943]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:57.943]                     {
[17:46:57.943]                       inherits <- base::inherits
[17:46:57.943]                       invokeRestart <- base::invokeRestart
[17:46:57.943]                       is.null <- base::is.null
[17:46:57.943]                       muffled <- FALSE
[17:46:57.943]                       if (inherits(cond, "message")) {
[17:46:57.943]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:57.943]                         if (muffled) 
[17:46:57.943]                           invokeRestart("muffleMessage")
[17:46:57.943]                       }
[17:46:57.943]                       else if (inherits(cond, "warning")) {
[17:46:57.943]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:57.943]                         if (muffled) 
[17:46:57.943]                           invokeRestart("muffleWarning")
[17:46:57.943]                       }
[17:46:57.943]                       else if (inherits(cond, "condition")) {
[17:46:57.943]                         if (!is.null(pattern)) {
[17:46:57.943]                           computeRestarts <- base::computeRestarts
[17:46:57.943]                           grepl <- base::grepl
[17:46:57.943]                           restarts <- computeRestarts(cond)
[17:46:57.943]                           for (restart in restarts) {
[17:46:57.943]                             name <- restart$name
[17:46:57.943]                             if (is.null(name)) 
[17:46:57.943]                               next
[17:46:57.943]                             if (!grepl(pattern, name)) 
[17:46:57.943]                               next
[17:46:57.943]                             invokeRestart(restart)
[17:46:57.943]                             muffled <- TRUE
[17:46:57.943]                             break
[17:46:57.943]                           }
[17:46:57.943]                         }
[17:46:57.943]                       }
[17:46:57.943]                       invisible(muffled)
[17:46:57.943]                     }
[17:46:57.943]                     muffleCondition(cond, pattern = "^muffle")
[17:46:57.943]                   }
[17:46:57.943]                 }
[17:46:57.943]             }
[17:46:57.943]         }))
[17:46:57.943]     }, error = function(ex) {
[17:46:57.943]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:57.943]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:57.943]                 ...future.rng), started = ...future.startTime, 
[17:46:57.943]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:57.943]             version = "1.8"), class = "FutureResult")
[17:46:57.943]     }, finally = {
[17:46:57.943]         if (!identical(...future.workdir, getwd())) 
[17:46:57.943]             setwd(...future.workdir)
[17:46:57.943]         {
[17:46:57.943]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:57.943]                 ...future.oldOptions$nwarnings <- NULL
[17:46:57.943]             }
[17:46:57.943]             base::options(...future.oldOptions)
[17:46:57.943]             if (.Platform$OS.type == "windows") {
[17:46:57.943]                 old_names <- names(...future.oldEnvVars)
[17:46:57.943]                 envs <- base::Sys.getenv()
[17:46:57.943]                 names <- names(envs)
[17:46:57.943]                 common <- intersect(names, old_names)
[17:46:57.943]                 added <- setdiff(names, old_names)
[17:46:57.943]                 removed <- setdiff(old_names, names)
[17:46:57.943]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:57.943]                   envs[common]]
[17:46:57.943]                 NAMES <- toupper(changed)
[17:46:57.943]                 args <- list()
[17:46:57.943]                 for (kk in seq_along(NAMES)) {
[17:46:57.943]                   name <- changed[[kk]]
[17:46:57.943]                   NAME <- NAMES[[kk]]
[17:46:57.943]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.943]                     next
[17:46:57.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:57.943]                 }
[17:46:57.943]                 NAMES <- toupper(added)
[17:46:57.943]                 for (kk in seq_along(NAMES)) {
[17:46:57.943]                   name <- added[[kk]]
[17:46:57.943]                   NAME <- NAMES[[kk]]
[17:46:57.943]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.943]                     next
[17:46:57.943]                   args[[name]] <- ""
[17:46:57.943]                 }
[17:46:57.943]                 NAMES <- toupper(removed)
[17:46:57.943]                 for (kk in seq_along(NAMES)) {
[17:46:57.943]                   name <- removed[[kk]]
[17:46:57.943]                   NAME <- NAMES[[kk]]
[17:46:57.943]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.943]                     next
[17:46:57.943]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:57.943]                 }
[17:46:57.943]                 if (length(args) > 0) 
[17:46:57.943]                   base::do.call(base::Sys.setenv, args = args)
[17:46:57.943]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:57.943]             }
[17:46:57.943]             else {
[17:46:57.943]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:57.943]             }
[17:46:57.943]             {
[17:46:57.943]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:57.943]                   0L) {
[17:46:57.943]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:57.943]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:57.943]                   base::options(opts)
[17:46:57.943]                 }
[17:46:57.943]                 {
[17:46:57.943]                   {
[17:46:57.943]                     NULL
[17:46:57.943]                     RNGkind("Mersenne-Twister")
[17:46:57.943]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:57.943]                       inherits = FALSE)
[17:46:57.943]                   }
[17:46:57.943]                   options(future.plan = NULL)
[17:46:57.943]                   if (is.na(NA_character_)) 
[17:46:57.943]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:57.943]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:57.943]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:57.943]                     .init = FALSE)
[17:46:57.943]                 }
[17:46:57.943]             }
[17:46:57.943]         }
[17:46:57.943]     })
[17:46:57.943]     if (TRUE) {
[17:46:57.943]         base::sink(type = "output", split = FALSE)
[17:46:57.943]         if (TRUE) {
[17:46:57.943]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:57.943]         }
[17:46:57.943]         else {
[17:46:57.943]             ...future.result["stdout"] <- base::list(NULL)
[17:46:57.943]         }
[17:46:57.943]         base::close(...future.stdout)
[17:46:57.943]         ...future.stdout <- NULL
[17:46:57.943]     }
[17:46:57.943]     ...future.result$conditions <- ...future.conditions
[17:46:57.943]     ...future.result$finished <- base::Sys.time()
[17:46:57.943]     ...future.result
[17:46:57.943] }
[17:46:57.945] plan(): Setting new future strategy stack:
[17:46:57.945] List of future strategies:
[17:46:57.945] 1. sequential:
[17:46:57.945]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.945]    - tweaked: FALSE
[17:46:57.945]    - call: NULL
[17:46:57.946] plan(): nbrOfWorkers() = 1
[17:46:57.947] plan(): Setting new future strategy stack:
[17:46:57.947] List of future strategies:
[17:46:57.947] 1. sequential:
[17:46:57.947]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.947]    - tweaked: FALSE
[17:46:57.947]    - call: plan(strategy)
[17:46:57.947] plan(): nbrOfWorkers() = 1
[17:46:57.948] SequentialFuture started (and completed)
[17:46:57.948] - Launch lazy future ... done
[17:46:57.948] run() for ‘SequentialFuture’ ... done
[17:46:57.949] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:57.949] Searching for globals...
[17:46:57.949] - globals found: [1] ‘getOption’
[17:46:57.949] Searching for globals ... DONE
[17:46:57.950] Resolving globals: FALSE
[17:46:57.950] 
[17:46:57.950] 
[17:46:57.950] getGlobalsAndPackages() ... DONE
[17:46:57.950] run() for ‘Future’ ...
[17:46:57.950] - state: ‘created’
[17:46:57.950] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:57.951] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:57.951] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:57.951]   - Field: ‘label’
[17:46:57.951]   - Field: ‘local’
[17:46:57.951]   - Field: ‘owner’
[17:46:57.951]   - Field: ‘envir’
[17:46:57.951]   - Field: ‘packages’
[17:46:57.951]   - Field: ‘gc’
[17:46:57.951]   - Field: ‘conditions’
[17:46:57.952]   - Field: ‘expr’
[17:46:57.952]   - Field: ‘uuid’
[17:46:57.952]   - Field: ‘seed’
[17:46:57.952]   - Field: ‘version’
[17:46:57.952]   - Field: ‘result’
[17:46:57.952]   - Field: ‘asynchronous’
[17:46:57.952]   - Field: ‘calls’
[17:46:57.952]   - Field: ‘globals’
[17:46:57.952]   - Field: ‘stdout’
[17:46:57.952]   - Field: ‘earlySignal’
[17:46:57.952]   - Field: ‘lazy’
[17:46:57.952]   - Field: ‘state’
[17:46:57.953] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:57.953] - Launch lazy future ...
[17:46:57.953] Packages needed by the future expression (n = 0): <none>
[17:46:57.953] Packages needed by future strategies (n = 0): <none>
[17:46:57.953] {
[17:46:57.953]     {
[17:46:57.953]         {
[17:46:57.953]             ...future.startTime <- base::Sys.time()
[17:46:57.953]             {
[17:46:57.953]                 {
[17:46:57.953]                   {
[17:46:57.953]                     base::local({
[17:46:57.953]                       has_future <- base::requireNamespace("future", 
[17:46:57.953]                         quietly = TRUE)
[17:46:57.953]                       if (has_future) {
[17:46:57.953]                         ns <- base::getNamespace("future")
[17:46:57.953]                         version <- ns[[".package"]][["version"]]
[17:46:57.953]                         if (is.null(version)) 
[17:46:57.953]                           version <- utils::packageVersion("future")
[17:46:57.953]                       }
[17:46:57.953]                       else {
[17:46:57.953]                         version <- NULL
[17:46:57.953]                       }
[17:46:57.953]                       if (!has_future || version < "1.8.0") {
[17:46:57.953]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:57.953]                           "", base::R.version$version.string), 
[17:46:57.953]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:57.953]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:57.953]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:57.953]                             "release", "version")], collapse = " "), 
[17:46:57.953]                           hostname = base::Sys.info()[["nodename"]])
[17:46:57.953]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:57.953]                           info)
[17:46:57.953]                         info <- base::paste(info, collapse = "; ")
[17:46:57.953]                         if (!has_future) {
[17:46:57.953]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:57.953]                             info)
[17:46:57.953]                         }
[17:46:57.953]                         else {
[17:46:57.953]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:57.953]                             info, version)
[17:46:57.953]                         }
[17:46:57.953]                         base::stop(msg)
[17:46:57.953]                       }
[17:46:57.953]                     })
[17:46:57.953]                   }
[17:46:57.953]                   ...future.strategy.old <- future::plan("list")
[17:46:57.953]                   options(future.plan = NULL)
[17:46:57.953]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:57.953]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:57.953]                 }
[17:46:57.953]                 ...future.workdir <- getwd()
[17:46:57.953]             }
[17:46:57.953]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:57.953]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:57.953]         }
[17:46:57.953]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:57.953]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:57.953]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:57.953]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:57.953]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:57.953]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:57.953]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:57.953]             base::names(...future.oldOptions))
[17:46:57.953]     }
[17:46:57.953]     if (FALSE) {
[17:46:57.953]     }
[17:46:57.953]     else {
[17:46:57.953]         if (TRUE) {
[17:46:57.953]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:57.953]                 open = "w")
[17:46:57.953]         }
[17:46:57.953]         else {
[17:46:57.953]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:57.953]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:57.953]         }
[17:46:57.953]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:57.953]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:57.953]             base::sink(type = "output", split = FALSE)
[17:46:57.953]             base::close(...future.stdout)
[17:46:57.953]         }, add = TRUE)
[17:46:57.953]     }
[17:46:57.953]     ...future.frame <- base::sys.nframe()
[17:46:57.953]     ...future.conditions <- base::list()
[17:46:57.953]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:57.953]     if (FALSE) {
[17:46:57.953]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:57.953]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:57.953]     }
[17:46:57.953]     ...future.result <- base::tryCatch({
[17:46:57.953]         base::withCallingHandlers({
[17:46:57.953]             ...future.value <- base::withVisible(base::local(getOption("future.globals.onMissing")))
[17:46:57.953]             future::FutureResult(value = ...future.value$value, 
[17:46:57.953]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:57.953]                   ...future.rng), globalenv = if (FALSE) 
[17:46:57.953]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:57.953]                     ...future.globalenv.names))
[17:46:57.953]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:57.953]         }, condition = base::local({
[17:46:57.953]             c <- base::c
[17:46:57.953]             inherits <- base::inherits
[17:46:57.953]             invokeRestart <- base::invokeRestart
[17:46:57.953]             length <- base::length
[17:46:57.953]             list <- base::list
[17:46:57.953]             seq.int <- base::seq.int
[17:46:57.953]             signalCondition <- base::signalCondition
[17:46:57.953]             sys.calls <- base::sys.calls
[17:46:57.953]             `[[` <- base::`[[`
[17:46:57.953]             `+` <- base::`+`
[17:46:57.953]             `<<-` <- base::`<<-`
[17:46:57.953]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:57.953]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:57.953]                   3L)]
[17:46:57.953]             }
[17:46:57.953]             function(cond) {
[17:46:57.953]                 is_error <- inherits(cond, "error")
[17:46:57.953]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:57.953]                   NULL)
[17:46:57.953]                 if (is_error) {
[17:46:57.953]                   sessionInformation <- function() {
[17:46:57.953]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:57.953]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:57.953]                       search = base::search(), system = base::Sys.info())
[17:46:57.953]                   }
[17:46:57.953]                   ...future.conditions[[length(...future.conditions) + 
[17:46:57.953]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:57.953]                     cond$call), session = sessionInformation(), 
[17:46:57.953]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:57.953]                   signalCondition(cond)
[17:46:57.953]                 }
[17:46:57.953]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:57.953]                 "immediateCondition"))) {
[17:46:57.953]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:57.953]                   ...future.conditions[[length(...future.conditions) + 
[17:46:57.953]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:57.953]                   if (TRUE && !signal) {
[17:46:57.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:57.953]                     {
[17:46:57.953]                       inherits <- base::inherits
[17:46:57.953]                       invokeRestart <- base::invokeRestart
[17:46:57.953]                       is.null <- base::is.null
[17:46:57.953]                       muffled <- FALSE
[17:46:57.953]                       if (inherits(cond, "message")) {
[17:46:57.953]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:57.953]                         if (muffled) 
[17:46:57.953]                           invokeRestart("muffleMessage")
[17:46:57.953]                       }
[17:46:57.953]                       else if (inherits(cond, "warning")) {
[17:46:57.953]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:57.953]                         if (muffled) 
[17:46:57.953]                           invokeRestart("muffleWarning")
[17:46:57.953]                       }
[17:46:57.953]                       else if (inherits(cond, "condition")) {
[17:46:57.953]                         if (!is.null(pattern)) {
[17:46:57.953]                           computeRestarts <- base::computeRestarts
[17:46:57.953]                           grepl <- base::grepl
[17:46:57.953]                           restarts <- computeRestarts(cond)
[17:46:57.953]                           for (restart in restarts) {
[17:46:57.953]                             name <- restart$name
[17:46:57.953]                             if (is.null(name)) 
[17:46:57.953]                               next
[17:46:57.953]                             if (!grepl(pattern, name)) 
[17:46:57.953]                               next
[17:46:57.953]                             invokeRestart(restart)
[17:46:57.953]                             muffled <- TRUE
[17:46:57.953]                             break
[17:46:57.953]                           }
[17:46:57.953]                         }
[17:46:57.953]                       }
[17:46:57.953]                       invisible(muffled)
[17:46:57.953]                     }
[17:46:57.953]                     muffleCondition(cond, pattern = "^muffle")
[17:46:57.953]                   }
[17:46:57.953]                 }
[17:46:57.953]                 else {
[17:46:57.953]                   if (TRUE) {
[17:46:57.953]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:57.953]                     {
[17:46:57.953]                       inherits <- base::inherits
[17:46:57.953]                       invokeRestart <- base::invokeRestart
[17:46:57.953]                       is.null <- base::is.null
[17:46:57.953]                       muffled <- FALSE
[17:46:57.953]                       if (inherits(cond, "message")) {
[17:46:57.953]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:57.953]                         if (muffled) 
[17:46:57.953]                           invokeRestart("muffleMessage")
[17:46:57.953]                       }
[17:46:57.953]                       else if (inherits(cond, "warning")) {
[17:46:57.953]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:57.953]                         if (muffled) 
[17:46:57.953]                           invokeRestart("muffleWarning")
[17:46:57.953]                       }
[17:46:57.953]                       else if (inherits(cond, "condition")) {
[17:46:57.953]                         if (!is.null(pattern)) {
[17:46:57.953]                           computeRestarts <- base::computeRestarts
[17:46:57.953]                           grepl <- base::grepl
[17:46:57.953]                           restarts <- computeRestarts(cond)
[17:46:57.953]                           for (restart in restarts) {
[17:46:57.953]                             name <- restart$name
[17:46:57.953]                             if (is.null(name)) 
[17:46:57.953]                               next
[17:46:57.953]                             if (!grepl(pattern, name)) 
[17:46:57.953]                               next
[17:46:57.953]                             invokeRestart(restart)
[17:46:57.953]                             muffled <- TRUE
[17:46:57.953]                             break
[17:46:57.953]                           }
[17:46:57.953]                         }
[17:46:57.953]                       }
[17:46:57.953]                       invisible(muffled)
[17:46:57.953]                     }
[17:46:57.953]                     muffleCondition(cond, pattern = "^muffle")
[17:46:57.953]                   }
[17:46:57.953]                 }
[17:46:57.953]             }
[17:46:57.953]         }))
[17:46:57.953]     }, error = function(ex) {
[17:46:57.953]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:57.953]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:57.953]                 ...future.rng), started = ...future.startTime, 
[17:46:57.953]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:57.953]             version = "1.8"), class = "FutureResult")
[17:46:57.953]     }, finally = {
[17:46:57.953]         if (!identical(...future.workdir, getwd())) 
[17:46:57.953]             setwd(...future.workdir)
[17:46:57.953]         {
[17:46:57.953]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:57.953]                 ...future.oldOptions$nwarnings <- NULL
[17:46:57.953]             }
[17:46:57.953]             base::options(...future.oldOptions)
[17:46:57.953]             if (.Platform$OS.type == "windows") {
[17:46:57.953]                 old_names <- names(...future.oldEnvVars)
[17:46:57.953]                 envs <- base::Sys.getenv()
[17:46:57.953]                 names <- names(envs)
[17:46:57.953]                 common <- intersect(names, old_names)
[17:46:57.953]                 added <- setdiff(names, old_names)
[17:46:57.953]                 removed <- setdiff(old_names, names)
[17:46:57.953]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:57.953]                   envs[common]]
[17:46:57.953]                 NAMES <- toupper(changed)
[17:46:57.953]                 args <- list()
[17:46:57.953]                 for (kk in seq_along(NAMES)) {
[17:46:57.953]                   name <- changed[[kk]]
[17:46:57.953]                   NAME <- NAMES[[kk]]
[17:46:57.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.953]                     next
[17:46:57.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:57.953]                 }
[17:46:57.953]                 NAMES <- toupper(added)
[17:46:57.953]                 for (kk in seq_along(NAMES)) {
[17:46:57.953]                   name <- added[[kk]]
[17:46:57.953]                   NAME <- NAMES[[kk]]
[17:46:57.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.953]                     next
[17:46:57.953]                   args[[name]] <- ""
[17:46:57.953]                 }
[17:46:57.953]                 NAMES <- toupper(removed)
[17:46:57.953]                 for (kk in seq_along(NAMES)) {
[17:46:57.953]                   name <- removed[[kk]]
[17:46:57.953]                   NAME <- NAMES[[kk]]
[17:46:57.953]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.953]                     next
[17:46:57.953]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:57.953]                 }
[17:46:57.953]                 if (length(args) > 0) 
[17:46:57.953]                   base::do.call(base::Sys.setenv, args = args)
[17:46:57.953]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:57.953]             }
[17:46:57.953]             else {
[17:46:57.953]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:57.953]             }
[17:46:57.953]             {
[17:46:57.953]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:57.953]                   0L) {
[17:46:57.953]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:57.953]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:57.953]                   base::options(opts)
[17:46:57.953]                 }
[17:46:57.953]                 {
[17:46:57.953]                   {
[17:46:57.953]                     NULL
[17:46:57.953]                     RNGkind("Mersenne-Twister")
[17:46:57.953]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:57.953]                       inherits = FALSE)
[17:46:57.953]                   }
[17:46:57.953]                   options(future.plan = NULL)
[17:46:57.953]                   if (is.na(NA_character_)) 
[17:46:57.953]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:57.953]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:57.953]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:57.953]                     .init = FALSE)
[17:46:57.953]                 }
[17:46:57.953]             }
[17:46:57.953]         }
[17:46:57.953]     })
[17:46:57.953]     if (TRUE) {
[17:46:57.953]         base::sink(type = "output", split = FALSE)
[17:46:57.953]         if (TRUE) {
[17:46:57.953]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:57.953]         }
[17:46:57.953]         else {
[17:46:57.953]             ...future.result["stdout"] <- base::list(NULL)
[17:46:57.953]         }
[17:46:57.953]         base::close(...future.stdout)
[17:46:57.953]         ...future.stdout <- NULL
[17:46:57.953]     }
[17:46:57.953]     ...future.result$conditions <- ...future.conditions
[17:46:57.953]     ...future.result$finished <- base::Sys.time()
[17:46:57.953]     ...future.result
[17:46:57.953] }
[17:46:57.955] plan(): Setting new future strategy stack:
[17:46:57.955] List of future strategies:
[17:46:57.955] 1. sequential:
[17:46:57.955]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.955]    - tweaked: FALSE
[17:46:57.955]    - call: NULL
[17:46:57.956] plan(): nbrOfWorkers() = 1
[17:46:57.956] plan(): Setting new future strategy stack:
[17:46:57.956] List of future strategies:
[17:46:57.956] 1. sequential:
[17:46:57.956]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.956]    - tweaked: FALSE
[17:46:57.956]    - call: plan(strategy)
[17:46:57.957] plan(): nbrOfWorkers() = 1
[17:46:57.957] SequentialFuture started (and completed)
[17:46:57.957] - Launch lazy future ... done
[17:46:57.957] run() for ‘SequentialFuture’ ... done
[17:46:57.958] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:46:57.958] Searching for globals...
[17:46:57.959] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:57.959] Searching for globals...
[17:46:57.960] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:46:57.960] Searching for globals ... DONE
[17:46:57.960] Resolving globals: FALSE
[17:46:57.961] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:57.962] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:57.962] - globals: [1] ‘data’
[17:46:57.962] 
[17:46:57.962] getGlobalsAndPackages() ... DONE
[17:46:57.962] run() for ‘Future’ ...
[17:46:57.962] - state: ‘created’
[17:46:57.962] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:57.963] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:57.963] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:57.963]   - Field: ‘label’
[17:46:57.963]   - Field: ‘local’
[17:46:57.963]   - Field: ‘owner’
[17:46:57.963]   - Field: ‘envir’
[17:46:57.963]   - Field: ‘packages’
[17:46:57.963]   - Field: ‘gc’
[17:46:57.963]   - Field: ‘conditions’
[17:46:57.964]   - Field: ‘expr’
[17:46:57.964]   - Field: ‘uuid’
[17:46:57.964]   - Field: ‘seed’
[17:46:57.964]   - Field: ‘version’
[17:46:57.964]   - Field: ‘result’
[17:46:57.964]   - Field: ‘asynchronous’
[17:46:57.966]   - Field: ‘calls’
[17:46:57.966]   - Field: ‘globals’
[17:46:57.967]   - Field: ‘stdout’
[17:46:57.967]   - Field: ‘earlySignal’
[17:46:57.967]   - Field: ‘lazy’
[17:46:57.967]   - Field: ‘state’
[17:46:57.967] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:57.967] - Launch lazy future ...
[17:46:57.967] Packages needed by the future expression (n = 0): <none>
[17:46:57.967] Packages needed by future strategies (n = 0): <none>
[17:46:57.968] {
[17:46:57.968]     {
[17:46:57.968]         {
[17:46:57.968]             ...future.startTime <- base::Sys.time()
[17:46:57.968]             {
[17:46:57.968]                 {
[17:46:57.968]                   {
[17:46:57.968]                     base::local({
[17:46:57.968]                       has_future <- base::requireNamespace("future", 
[17:46:57.968]                         quietly = TRUE)
[17:46:57.968]                       if (has_future) {
[17:46:57.968]                         ns <- base::getNamespace("future")
[17:46:57.968]                         version <- ns[[".package"]][["version"]]
[17:46:57.968]                         if (is.null(version)) 
[17:46:57.968]                           version <- utils::packageVersion("future")
[17:46:57.968]                       }
[17:46:57.968]                       else {
[17:46:57.968]                         version <- NULL
[17:46:57.968]                       }
[17:46:57.968]                       if (!has_future || version < "1.8.0") {
[17:46:57.968]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:57.968]                           "", base::R.version$version.string), 
[17:46:57.968]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:57.968]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:57.968]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:57.968]                             "release", "version")], collapse = " "), 
[17:46:57.968]                           hostname = base::Sys.info()[["nodename"]])
[17:46:57.968]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:57.968]                           info)
[17:46:57.968]                         info <- base::paste(info, collapse = "; ")
[17:46:57.968]                         if (!has_future) {
[17:46:57.968]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:57.968]                             info)
[17:46:57.968]                         }
[17:46:57.968]                         else {
[17:46:57.968]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:57.968]                             info, version)
[17:46:57.968]                         }
[17:46:57.968]                         base::stop(msg)
[17:46:57.968]                       }
[17:46:57.968]                     })
[17:46:57.968]                   }
[17:46:57.968]                   ...future.strategy.old <- future::plan("list")
[17:46:57.968]                   options(future.plan = NULL)
[17:46:57.968]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:57.968]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:57.968]                 }
[17:46:57.968]                 ...future.workdir <- getwd()
[17:46:57.968]             }
[17:46:57.968]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:57.968]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:57.968]         }
[17:46:57.968]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:57.968]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:57.968]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:57.968]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:57.968]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:57.968]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:57.968]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:57.968]             base::names(...future.oldOptions))
[17:46:57.968]     }
[17:46:57.968]     if (FALSE) {
[17:46:57.968]     }
[17:46:57.968]     else {
[17:46:57.968]         if (TRUE) {
[17:46:57.968]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:57.968]                 open = "w")
[17:46:57.968]         }
[17:46:57.968]         else {
[17:46:57.968]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:57.968]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:57.968]         }
[17:46:57.968]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:57.968]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:57.968]             base::sink(type = "output", split = FALSE)
[17:46:57.968]             base::close(...future.stdout)
[17:46:57.968]         }, add = TRUE)
[17:46:57.968]     }
[17:46:57.968]     ...future.frame <- base::sys.nframe()
[17:46:57.968]     ...future.conditions <- base::list()
[17:46:57.968]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:57.968]     if (FALSE) {
[17:46:57.968]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:57.968]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:57.968]     }
[17:46:57.968]     ...future.result <- base::tryCatch({
[17:46:57.968]         base::withCallingHandlers({
[17:46:57.968]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:46:57.968]                 x < 3)$y))
[17:46:57.968]             future::FutureResult(value = ...future.value$value, 
[17:46:57.968]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:57.968]                   ...future.rng), globalenv = if (FALSE) 
[17:46:57.968]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:57.968]                     ...future.globalenv.names))
[17:46:57.968]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:57.968]         }, condition = base::local({
[17:46:57.968]             c <- base::c
[17:46:57.968]             inherits <- base::inherits
[17:46:57.968]             invokeRestart <- base::invokeRestart
[17:46:57.968]             length <- base::length
[17:46:57.968]             list <- base::list
[17:46:57.968]             seq.int <- base::seq.int
[17:46:57.968]             signalCondition <- base::signalCondition
[17:46:57.968]             sys.calls <- base::sys.calls
[17:46:57.968]             `[[` <- base::`[[`
[17:46:57.968]             `+` <- base::`+`
[17:46:57.968]             `<<-` <- base::`<<-`
[17:46:57.968]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:57.968]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:57.968]                   3L)]
[17:46:57.968]             }
[17:46:57.968]             function(cond) {
[17:46:57.968]                 is_error <- inherits(cond, "error")
[17:46:57.968]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:57.968]                   NULL)
[17:46:57.968]                 if (is_error) {
[17:46:57.968]                   sessionInformation <- function() {
[17:46:57.968]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:57.968]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:57.968]                       search = base::search(), system = base::Sys.info())
[17:46:57.968]                   }
[17:46:57.968]                   ...future.conditions[[length(...future.conditions) + 
[17:46:57.968]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:57.968]                     cond$call), session = sessionInformation(), 
[17:46:57.968]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:57.968]                   signalCondition(cond)
[17:46:57.968]                 }
[17:46:57.968]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:57.968]                 "immediateCondition"))) {
[17:46:57.968]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:57.968]                   ...future.conditions[[length(...future.conditions) + 
[17:46:57.968]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:57.968]                   if (TRUE && !signal) {
[17:46:57.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:57.968]                     {
[17:46:57.968]                       inherits <- base::inherits
[17:46:57.968]                       invokeRestart <- base::invokeRestart
[17:46:57.968]                       is.null <- base::is.null
[17:46:57.968]                       muffled <- FALSE
[17:46:57.968]                       if (inherits(cond, "message")) {
[17:46:57.968]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:57.968]                         if (muffled) 
[17:46:57.968]                           invokeRestart("muffleMessage")
[17:46:57.968]                       }
[17:46:57.968]                       else if (inherits(cond, "warning")) {
[17:46:57.968]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:57.968]                         if (muffled) 
[17:46:57.968]                           invokeRestart("muffleWarning")
[17:46:57.968]                       }
[17:46:57.968]                       else if (inherits(cond, "condition")) {
[17:46:57.968]                         if (!is.null(pattern)) {
[17:46:57.968]                           computeRestarts <- base::computeRestarts
[17:46:57.968]                           grepl <- base::grepl
[17:46:57.968]                           restarts <- computeRestarts(cond)
[17:46:57.968]                           for (restart in restarts) {
[17:46:57.968]                             name <- restart$name
[17:46:57.968]                             if (is.null(name)) 
[17:46:57.968]                               next
[17:46:57.968]                             if (!grepl(pattern, name)) 
[17:46:57.968]                               next
[17:46:57.968]                             invokeRestart(restart)
[17:46:57.968]                             muffled <- TRUE
[17:46:57.968]                             break
[17:46:57.968]                           }
[17:46:57.968]                         }
[17:46:57.968]                       }
[17:46:57.968]                       invisible(muffled)
[17:46:57.968]                     }
[17:46:57.968]                     muffleCondition(cond, pattern = "^muffle")
[17:46:57.968]                   }
[17:46:57.968]                 }
[17:46:57.968]                 else {
[17:46:57.968]                   if (TRUE) {
[17:46:57.968]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:57.968]                     {
[17:46:57.968]                       inherits <- base::inherits
[17:46:57.968]                       invokeRestart <- base::invokeRestart
[17:46:57.968]                       is.null <- base::is.null
[17:46:57.968]                       muffled <- FALSE
[17:46:57.968]                       if (inherits(cond, "message")) {
[17:46:57.968]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:57.968]                         if (muffled) 
[17:46:57.968]                           invokeRestart("muffleMessage")
[17:46:57.968]                       }
[17:46:57.968]                       else if (inherits(cond, "warning")) {
[17:46:57.968]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:57.968]                         if (muffled) 
[17:46:57.968]                           invokeRestart("muffleWarning")
[17:46:57.968]                       }
[17:46:57.968]                       else if (inherits(cond, "condition")) {
[17:46:57.968]                         if (!is.null(pattern)) {
[17:46:57.968]                           computeRestarts <- base::computeRestarts
[17:46:57.968]                           grepl <- base::grepl
[17:46:57.968]                           restarts <- computeRestarts(cond)
[17:46:57.968]                           for (restart in restarts) {
[17:46:57.968]                             name <- restart$name
[17:46:57.968]                             if (is.null(name)) 
[17:46:57.968]                               next
[17:46:57.968]                             if (!grepl(pattern, name)) 
[17:46:57.968]                               next
[17:46:57.968]                             invokeRestart(restart)
[17:46:57.968]                             muffled <- TRUE
[17:46:57.968]                             break
[17:46:57.968]                           }
[17:46:57.968]                         }
[17:46:57.968]                       }
[17:46:57.968]                       invisible(muffled)
[17:46:57.968]                     }
[17:46:57.968]                     muffleCondition(cond, pattern = "^muffle")
[17:46:57.968]                   }
[17:46:57.968]                 }
[17:46:57.968]             }
[17:46:57.968]         }))
[17:46:57.968]     }, error = function(ex) {
[17:46:57.968]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:57.968]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:57.968]                 ...future.rng), started = ...future.startTime, 
[17:46:57.968]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:57.968]             version = "1.8"), class = "FutureResult")
[17:46:57.968]     }, finally = {
[17:46:57.968]         if (!identical(...future.workdir, getwd())) 
[17:46:57.968]             setwd(...future.workdir)
[17:46:57.968]         {
[17:46:57.968]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:57.968]                 ...future.oldOptions$nwarnings <- NULL
[17:46:57.968]             }
[17:46:57.968]             base::options(...future.oldOptions)
[17:46:57.968]             if (.Platform$OS.type == "windows") {
[17:46:57.968]                 old_names <- names(...future.oldEnvVars)
[17:46:57.968]                 envs <- base::Sys.getenv()
[17:46:57.968]                 names <- names(envs)
[17:46:57.968]                 common <- intersect(names, old_names)
[17:46:57.968]                 added <- setdiff(names, old_names)
[17:46:57.968]                 removed <- setdiff(old_names, names)
[17:46:57.968]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:57.968]                   envs[common]]
[17:46:57.968]                 NAMES <- toupper(changed)
[17:46:57.968]                 args <- list()
[17:46:57.968]                 for (kk in seq_along(NAMES)) {
[17:46:57.968]                   name <- changed[[kk]]
[17:46:57.968]                   NAME <- NAMES[[kk]]
[17:46:57.968]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.968]                     next
[17:46:57.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:57.968]                 }
[17:46:57.968]                 NAMES <- toupper(added)
[17:46:57.968]                 for (kk in seq_along(NAMES)) {
[17:46:57.968]                   name <- added[[kk]]
[17:46:57.968]                   NAME <- NAMES[[kk]]
[17:46:57.968]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.968]                     next
[17:46:57.968]                   args[[name]] <- ""
[17:46:57.968]                 }
[17:46:57.968]                 NAMES <- toupper(removed)
[17:46:57.968]                 for (kk in seq_along(NAMES)) {
[17:46:57.968]                   name <- removed[[kk]]
[17:46:57.968]                   NAME <- NAMES[[kk]]
[17:46:57.968]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.968]                     next
[17:46:57.968]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:57.968]                 }
[17:46:57.968]                 if (length(args) > 0) 
[17:46:57.968]                   base::do.call(base::Sys.setenv, args = args)
[17:46:57.968]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:57.968]             }
[17:46:57.968]             else {
[17:46:57.968]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:57.968]             }
[17:46:57.968]             {
[17:46:57.968]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:57.968]                   0L) {
[17:46:57.968]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:57.968]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:57.968]                   base::options(opts)
[17:46:57.968]                 }
[17:46:57.968]                 {
[17:46:57.968]                   {
[17:46:57.968]                     NULL
[17:46:57.968]                     RNGkind("Mersenne-Twister")
[17:46:57.968]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:57.968]                       inherits = FALSE)
[17:46:57.968]                   }
[17:46:57.968]                   options(future.plan = NULL)
[17:46:57.968]                   if (is.na(NA_character_)) 
[17:46:57.968]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:57.968]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:57.968]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:57.968]                     .init = FALSE)
[17:46:57.968]                 }
[17:46:57.968]             }
[17:46:57.968]         }
[17:46:57.968]     })
[17:46:57.968]     if (TRUE) {
[17:46:57.968]         base::sink(type = "output", split = FALSE)
[17:46:57.968]         if (TRUE) {
[17:46:57.968]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:57.968]         }
[17:46:57.968]         else {
[17:46:57.968]             ...future.result["stdout"] <- base::list(NULL)
[17:46:57.968]         }
[17:46:57.968]         base::close(...future.stdout)
[17:46:57.968]         ...future.stdout <- NULL
[17:46:57.968]     }
[17:46:57.968]     ...future.result$conditions <- ...future.conditions
[17:46:57.968]     ...future.result$finished <- base::Sys.time()
[17:46:57.968]     ...future.result
[17:46:57.968] }
[17:46:57.969] assign_globals() ...
[17:46:57.969] List of 1
[17:46:57.969]  $ data:'data.frame':	5 obs. of  2 variables:
[17:46:57.969]   ..$ x: int [1:5] 1 2 3 4 5
[17:46:57.969]   ..$ y: int [1:5] 1 2 3 4 5
[17:46:57.969]  - attr(*, "where")=List of 1
[17:46:57.969]   ..$ data:<environment: R_EmptyEnv> 
[17:46:57.969]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:57.969]  - attr(*, "resolved")= logi FALSE
[17:46:57.969]  - attr(*, "total_size")= num 160
[17:46:57.969]  - attr(*, "already-done")= logi TRUE
[17:46:57.975] - copied ‘data’ to environment
[17:46:57.975] assign_globals() ... done
[17:46:57.975] plan(): Setting new future strategy stack:
[17:46:57.975] List of future strategies:
[17:46:57.975] 1. sequential:
[17:46:57.975]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.975]    - tweaked: FALSE
[17:46:57.975]    - call: NULL
[17:46:57.976] plan(): nbrOfWorkers() = 1
[17:46:57.976] plan(): Setting new future strategy stack:
[17:46:57.977] List of future strategies:
[17:46:57.977] 1. sequential:
[17:46:57.977]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.977]    - tweaked: FALSE
[17:46:57.977]    - call: plan(strategy)
[17:46:57.977] plan(): nbrOfWorkers() = 1
[17:46:57.977] SequentialFuture started (and completed)
[17:46:57.977] - Launch lazy future ... done
[17:46:57.977] run() for ‘SequentialFuture’ ... done
[17:46:57.978] plan(): Setting new future strategy stack:
[17:46:57.978] List of future strategies:
[17:46:57.978] 1. sequential:
[17:46:57.978]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.978]    - tweaked: FALSE
[17:46:57.978]    - call: plan(list(sequential, strategy))
[17:46:57.978] 2. sequential:
[17:46:57.978]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.978]    - tweaked: FALSE
[17:46:57.978]    - call: plan(list(sequential, strategy))
[17:46:57.978] plan(): nbrOfWorkers() = 1
[17:46:57.979] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:57.979] Searching for globals...
[17:46:57.983] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:46:57.984] Searching for globals ... DONE
[17:46:57.984] Resolving globals: FALSE
[17:46:57.984] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:57.985] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:57.985] - globals: [1] ‘data’
[17:46:57.985] - packages: [1] ‘future’
[17:46:57.985] getGlobalsAndPackages() ... DONE
[17:46:57.985] run() for ‘Future’ ...
[17:46:57.985] - state: ‘created’
[17:46:57.985] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:57.986] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:57.986] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:57.986]   - Field: ‘label’
[17:46:57.986]   - Field: ‘local’
[17:46:57.986]   - Field: ‘owner’
[17:46:57.986]   - Field: ‘envir’
[17:46:57.986]   - Field: ‘packages’
[17:46:57.986]   - Field: ‘gc’
[17:46:57.986]   - Field: ‘conditions’
[17:46:57.987]   - Field: ‘expr’
[17:46:57.987]   - Field: ‘uuid’
[17:46:57.987]   - Field: ‘seed’
[17:46:57.987]   - Field: ‘version’
[17:46:57.987]   - Field: ‘result’
[17:46:57.987]   - Field: ‘asynchronous’
[17:46:57.987]   - Field: ‘calls’
[17:46:57.987]   - Field: ‘globals’
[17:46:57.987]   - Field: ‘stdout’
[17:46:57.987]   - Field: ‘earlySignal’
[17:46:57.987]   - Field: ‘lazy’
[17:46:57.988]   - Field: ‘state’
[17:46:57.988] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:57.988] - Launch lazy future ...
[17:46:57.988] Packages needed by the future expression (n = 1): ‘future’
[17:46:57.988] Packages needed by future strategies (n = 1): ‘future’
[17:46:57.988] {
[17:46:57.988]     {
[17:46:57.988]         {
[17:46:57.988]             ...future.startTime <- base::Sys.time()
[17:46:57.988]             {
[17:46:57.988]                 {
[17:46:57.988]                   {
[17:46:57.988]                     {
[17:46:57.988]                       base::local({
[17:46:57.988]                         has_future <- base::requireNamespace("future", 
[17:46:57.988]                           quietly = TRUE)
[17:46:57.988]                         if (has_future) {
[17:46:57.988]                           ns <- base::getNamespace("future")
[17:46:57.988]                           version <- ns[[".package"]][["version"]]
[17:46:57.988]                           if (is.null(version)) 
[17:46:57.988]                             version <- utils::packageVersion("future")
[17:46:57.988]                         }
[17:46:57.988]                         else {
[17:46:57.988]                           version <- NULL
[17:46:57.988]                         }
[17:46:57.988]                         if (!has_future || version < "1.8.0") {
[17:46:57.988]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:57.988]                             "", base::R.version$version.string), 
[17:46:57.988]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:57.988]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:57.988]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:57.988]                               "release", "version")], collapse = " "), 
[17:46:57.988]                             hostname = base::Sys.info()[["nodename"]])
[17:46:57.988]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:57.988]                             info)
[17:46:57.988]                           info <- base::paste(info, collapse = "; ")
[17:46:57.988]                           if (!has_future) {
[17:46:57.988]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:57.988]                               info)
[17:46:57.988]                           }
[17:46:57.988]                           else {
[17:46:57.988]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:57.988]                               info, version)
[17:46:57.988]                           }
[17:46:57.988]                           base::stop(msg)
[17:46:57.988]                         }
[17:46:57.988]                       })
[17:46:57.988]                     }
[17:46:57.988]                     base::local({
[17:46:57.988]                       for (pkg in "future") {
[17:46:57.988]                         base::loadNamespace(pkg)
[17:46:57.988]                         base::library(pkg, character.only = TRUE)
[17:46:57.988]                       }
[17:46:57.988]                     })
[17:46:57.988]                   }
[17:46:57.988]                   ...future.strategy.old <- future::plan("list")
[17:46:57.988]                   options(future.plan = NULL)
[17:46:57.988]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:57.988]                   future::plan(list(function (..., envir = parent.frame()) 
[17:46:57.988]                   {
[17:46:57.988]                     future <- SequentialFuture(..., envir = envir)
[17:46:57.988]                     if (!future$lazy) 
[17:46:57.988]                       future <- run(future)
[17:46:57.988]                     invisible(future)
[17:46:57.988]                   }), .cleanup = FALSE, .init = FALSE)
[17:46:57.988]                 }
[17:46:57.988]                 ...future.workdir <- getwd()
[17:46:57.988]             }
[17:46:57.988]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:57.988]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:57.988]         }
[17:46:57.988]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:57.988]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:57.988]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:57.988]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:57.988]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:57.988]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:57.988]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:57.988]             base::names(...future.oldOptions))
[17:46:57.988]     }
[17:46:57.988]     if (FALSE) {
[17:46:57.988]     }
[17:46:57.988]     else {
[17:46:57.988]         if (TRUE) {
[17:46:57.988]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:57.988]                 open = "w")
[17:46:57.988]         }
[17:46:57.988]         else {
[17:46:57.988]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:57.988]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:57.988]         }
[17:46:57.988]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:57.988]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:57.988]             base::sink(type = "output", split = FALSE)
[17:46:57.988]             base::close(...future.stdout)
[17:46:57.988]         }, add = TRUE)
[17:46:57.988]     }
[17:46:57.988]     ...future.frame <- base::sys.nframe()
[17:46:57.988]     ...future.conditions <- base::list()
[17:46:57.988]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:57.988]     if (FALSE) {
[17:46:57.988]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:57.988]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:57.988]     }
[17:46:57.988]     ...future.result <- base::tryCatch({
[17:46:57.988]         base::withCallingHandlers({
[17:46:57.988]             ...future.value <- base::withVisible(base::local({
[17:46:57.988]                 a %<-% subset(data, x < 3)$y
[17:46:57.988]                 a
[17:46:57.988]             }))
[17:46:57.988]             future::FutureResult(value = ...future.value$value, 
[17:46:57.988]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:57.988]                   ...future.rng), globalenv = if (FALSE) 
[17:46:57.988]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:57.988]                     ...future.globalenv.names))
[17:46:57.988]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:57.988]         }, condition = base::local({
[17:46:57.988]             c <- base::c
[17:46:57.988]             inherits <- base::inherits
[17:46:57.988]             invokeRestart <- base::invokeRestart
[17:46:57.988]             length <- base::length
[17:46:57.988]             list <- base::list
[17:46:57.988]             seq.int <- base::seq.int
[17:46:57.988]             signalCondition <- base::signalCondition
[17:46:57.988]             sys.calls <- base::sys.calls
[17:46:57.988]             `[[` <- base::`[[`
[17:46:57.988]             `+` <- base::`+`
[17:46:57.988]             `<<-` <- base::`<<-`
[17:46:57.988]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:57.988]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:57.988]                   3L)]
[17:46:57.988]             }
[17:46:57.988]             function(cond) {
[17:46:57.988]                 is_error <- inherits(cond, "error")
[17:46:57.988]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:57.988]                   NULL)
[17:46:57.988]                 if (is_error) {
[17:46:57.988]                   sessionInformation <- function() {
[17:46:57.988]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:57.988]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:57.988]                       search = base::search(), system = base::Sys.info())
[17:46:57.988]                   }
[17:46:57.988]                   ...future.conditions[[length(...future.conditions) + 
[17:46:57.988]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:57.988]                     cond$call), session = sessionInformation(), 
[17:46:57.988]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:57.988]                   signalCondition(cond)
[17:46:57.988]                 }
[17:46:57.988]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:57.988]                 "immediateCondition"))) {
[17:46:57.988]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:57.988]                   ...future.conditions[[length(...future.conditions) + 
[17:46:57.988]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:57.988]                   if (TRUE && !signal) {
[17:46:57.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:57.988]                     {
[17:46:57.988]                       inherits <- base::inherits
[17:46:57.988]                       invokeRestart <- base::invokeRestart
[17:46:57.988]                       is.null <- base::is.null
[17:46:57.988]                       muffled <- FALSE
[17:46:57.988]                       if (inherits(cond, "message")) {
[17:46:57.988]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:57.988]                         if (muffled) 
[17:46:57.988]                           invokeRestart("muffleMessage")
[17:46:57.988]                       }
[17:46:57.988]                       else if (inherits(cond, "warning")) {
[17:46:57.988]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:57.988]                         if (muffled) 
[17:46:57.988]                           invokeRestart("muffleWarning")
[17:46:57.988]                       }
[17:46:57.988]                       else if (inherits(cond, "condition")) {
[17:46:57.988]                         if (!is.null(pattern)) {
[17:46:57.988]                           computeRestarts <- base::computeRestarts
[17:46:57.988]                           grepl <- base::grepl
[17:46:57.988]                           restarts <- computeRestarts(cond)
[17:46:57.988]                           for (restart in restarts) {
[17:46:57.988]                             name <- restart$name
[17:46:57.988]                             if (is.null(name)) 
[17:46:57.988]                               next
[17:46:57.988]                             if (!grepl(pattern, name)) 
[17:46:57.988]                               next
[17:46:57.988]                             invokeRestart(restart)
[17:46:57.988]                             muffled <- TRUE
[17:46:57.988]                             break
[17:46:57.988]                           }
[17:46:57.988]                         }
[17:46:57.988]                       }
[17:46:57.988]                       invisible(muffled)
[17:46:57.988]                     }
[17:46:57.988]                     muffleCondition(cond, pattern = "^muffle")
[17:46:57.988]                   }
[17:46:57.988]                 }
[17:46:57.988]                 else {
[17:46:57.988]                   if (TRUE) {
[17:46:57.988]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:57.988]                     {
[17:46:57.988]                       inherits <- base::inherits
[17:46:57.988]                       invokeRestart <- base::invokeRestart
[17:46:57.988]                       is.null <- base::is.null
[17:46:57.988]                       muffled <- FALSE
[17:46:57.988]                       if (inherits(cond, "message")) {
[17:46:57.988]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:57.988]                         if (muffled) 
[17:46:57.988]                           invokeRestart("muffleMessage")
[17:46:57.988]                       }
[17:46:57.988]                       else if (inherits(cond, "warning")) {
[17:46:57.988]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:57.988]                         if (muffled) 
[17:46:57.988]                           invokeRestart("muffleWarning")
[17:46:57.988]                       }
[17:46:57.988]                       else if (inherits(cond, "condition")) {
[17:46:57.988]                         if (!is.null(pattern)) {
[17:46:57.988]                           computeRestarts <- base::computeRestarts
[17:46:57.988]                           grepl <- base::grepl
[17:46:57.988]                           restarts <- computeRestarts(cond)
[17:46:57.988]                           for (restart in restarts) {
[17:46:57.988]                             name <- restart$name
[17:46:57.988]                             if (is.null(name)) 
[17:46:57.988]                               next
[17:46:57.988]                             if (!grepl(pattern, name)) 
[17:46:57.988]                               next
[17:46:57.988]                             invokeRestart(restart)
[17:46:57.988]                             muffled <- TRUE
[17:46:57.988]                             break
[17:46:57.988]                           }
[17:46:57.988]                         }
[17:46:57.988]                       }
[17:46:57.988]                       invisible(muffled)
[17:46:57.988]                     }
[17:46:57.988]                     muffleCondition(cond, pattern = "^muffle")
[17:46:57.988]                   }
[17:46:57.988]                 }
[17:46:57.988]             }
[17:46:57.988]         }))
[17:46:57.988]     }, error = function(ex) {
[17:46:57.988]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:57.988]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:57.988]                 ...future.rng), started = ...future.startTime, 
[17:46:57.988]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:57.988]             version = "1.8"), class = "FutureResult")
[17:46:57.988]     }, finally = {
[17:46:57.988]         if (!identical(...future.workdir, getwd())) 
[17:46:57.988]             setwd(...future.workdir)
[17:46:57.988]         {
[17:46:57.988]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:57.988]                 ...future.oldOptions$nwarnings <- NULL
[17:46:57.988]             }
[17:46:57.988]             base::options(...future.oldOptions)
[17:46:57.988]             if (.Platform$OS.type == "windows") {
[17:46:57.988]                 old_names <- names(...future.oldEnvVars)
[17:46:57.988]                 envs <- base::Sys.getenv()
[17:46:57.988]                 names <- names(envs)
[17:46:57.988]                 common <- intersect(names, old_names)
[17:46:57.988]                 added <- setdiff(names, old_names)
[17:46:57.988]                 removed <- setdiff(old_names, names)
[17:46:57.988]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:57.988]                   envs[common]]
[17:46:57.988]                 NAMES <- toupper(changed)
[17:46:57.988]                 args <- list()
[17:46:57.988]                 for (kk in seq_along(NAMES)) {
[17:46:57.988]                   name <- changed[[kk]]
[17:46:57.988]                   NAME <- NAMES[[kk]]
[17:46:57.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.988]                     next
[17:46:57.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:57.988]                 }
[17:46:57.988]                 NAMES <- toupper(added)
[17:46:57.988]                 for (kk in seq_along(NAMES)) {
[17:46:57.988]                   name <- added[[kk]]
[17:46:57.988]                   NAME <- NAMES[[kk]]
[17:46:57.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.988]                     next
[17:46:57.988]                   args[[name]] <- ""
[17:46:57.988]                 }
[17:46:57.988]                 NAMES <- toupper(removed)
[17:46:57.988]                 for (kk in seq_along(NAMES)) {
[17:46:57.988]                   name <- removed[[kk]]
[17:46:57.988]                   NAME <- NAMES[[kk]]
[17:46:57.988]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:57.988]                     next
[17:46:57.988]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:57.988]                 }
[17:46:57.988]                 if (length(args) > 0) 
[17:46:57.988]                   base::do.call(base::Sys.setenv, args = args)
[17:46:57.988]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:57.988]             }
[17:46:57.988]             else {
[17:46:57.988]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:57.988]             }
[17:46:57.988]             {
[17:46:57.988]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:57.988]                   0L) {
[17:46:57.988]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:57.988]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:57.988]                   base::options(opts)
[17:46:57.988]                 }
[17:46:57.988]                 {
[17:46:57.988]                   {
[17:46:57.988]                     NULL
[17:46:57.988]                     RNGkind("Mersenne-Twister")
[17:46:57.988]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:57.988]                       inherits = FALSE)
[17:46:57.988]                   }
[17:46:57.988]                   options(future.plan = NULL)
[17:46:57.988]                   if (is.na(NA_character_)) 
[17:46:57.988]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:57.988]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:57.988]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:57.988]                     .init = FALSE)
[17:46:57.988]                 }
[17:46:57.988]             }
[17:46:57.988]         }
[17:46:57.988]     })
[17:46:57.988]     if (TRUE) {
[17:46:57.988]         base::sink(type = "output", split = FALSE)
[17:46:57.988]         if (TRUE) {
[17:46:57.988]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:57.988]         }
[17:46:57.988]         else {
[17:46:57.988]             ...future.result["stdout"] <- base::list(NULL)
[17:46:57.988]         }
[17:46:57.988]         base::close(...future.stdout)
[17:46:57.988]         ...future.stdout <- NULL
[17:46:57.988]     }
[17:46:57.988]     ...future.result$conditions <- ...future.conditions
[17:46:57.988]     ...future.result$finished <- base::Sys.time()
[17:46:57.988]     ...future.result
[17:46:57.988] }
[17:46:57.990] assign_globals() ...
[17:46:57.990] List of 1
[17:46:57.990]  $ data:'data.frame':	5 obs. of  2 variables:
[17:46:57.990]   ..$ x: int [1:5] 1 2 3 4 5
[17:46:57.990]   ..$ y: int [1:5] 1 2 3 4 5
[17:46:57.990]  - attr(*, "where")=List of 1
[17:46:57.990]   ..$ data:<environment: R_EmptyEnv> 
[17:46:57.990]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:57.990]  - attr(*, "resolved")= logi FALSE
[17:46:57.990]  - attr(*, "total_size")= num 160
[17:46:57.990]  - attr(*, "already-done")= logi TRUE
[17:46:57.993] - copied ‘data’ to environment
[17:46:57.993] assign_globals() ... done
[17:46:57.994] plan(): Setting new future strategy stack:
[17:46:57.994] List of future strategies:
[17:46:57.994] 1. sequential:
[17:46:57.994]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:57.994]    - tweaked: FALSE
[17:46:57.994]    - call: plan(list(sequential, strategy))
[17:46:57.994] plan(): nbrOfWorkers() = 1
[17:46:58.025] plan(): Setting new future strategy stack:
[17:46:58.025] List of future strategies:
[17:46:58.025] 1. sequential:
[17:46:58.025]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.025]    - tweaked: FALSE
[17:46:58.025]    - call: plan(list(sequential, strategy))
[17:46:58.025] 2. sequential:
[17:46:58.025]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.025]    - tweaked: FALSE
[17:46:58.025]    - call: plan(list(sequential, strategy))
[17:46:58.026] plan(): nbrOfWorkers() = 1
[17:46:58.026] SequentialFuture started (and completed)
[17:46:58.026] signalConditions() ...
[17:46:58.026]  - include = ‘immediateCondition’
[17:46:58.026]  - exclude = 
[17:46:58.027]  - resignal = FALSE
[17:46:58.027]  - Number of conditions: 53
[17:46:58.027] signalConditions() ... done
[17:46:58.027] - Launch lazy future ... done
[17:46:58.027] run() for ‘SequentialFuture’ ... done
[17:46:58.027] signalConditions() ...
[17:46:58.027]  - include = ‘immediateCondition’
[17:46:58.027]  - exclude = 
[17:46:58.027]  - resignal = FALSE
[17:46:58.027]  - Number of conditions: 53
[17:46:58.028] signalConditions() ... done
[17:46:58.028] Future state: ‘finished’
[17:46:58.028] signalConditions() ...
[17:46:58.028]  - include = ‘condition’
[17:46:58.028]  - exclude = ‘immediateCondition’
[17:46:58.028]  - resignal = TRUE
[17:46:58.028]  - Number of conditions: 53
[17:46:58.028]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:57.995] getGlobalsAndPackages() ...
[17:46:58.028]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.028]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.010] Searching for globals...
[17:46:58.029]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.011] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:46:58.029]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.011] Searching for globals ... DONE
[17:46:58.029]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.011] Resolving globals: FALSE
[17:46:58.029]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.011] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:58.029]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.012] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:58.029]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.012] - globals: [1] ‘data’
[17:46:58.029]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.012] 
[17:46:58.029]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.012] getGlobalsAndPackages() ... DONE
[17:46:58.030]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.012] run() for ‘Future’ ...
[17:46:58.030]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.012] - state: ‘created’
[17:46:58.030]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.012] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:58.030]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.013] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:58.030]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.013] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:58.030]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.013]   - Field: ‘label’
[17:46:58.030]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.013]   - Field: ‘local’
[17:46:58.030]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.013]   - Field: ‘owner’
[17:46:58.031]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.013]   - Field: ‘envir’
[17:46:58.031]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.013]   - Field: ‘packages’
[17:46:58.031]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.013]   - Field: ‘gc’
[17:46:58.031]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘conditions’
[17:46:58.031]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘expr’
[17:46:58.031]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘uuid’
[17:46:58.031]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘seed’
[17:46:58.032]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘version’
[17:46:58.032]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘result’
[17:46:58.032]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘asynchronous’
[17:46:58.032]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘calls’
[17:46:58.032]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘globals’
[17:46:58.032]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.014]   - Field: ‘stdout’
[17:46:58.032]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.015]   - Field: ‘earlySignal’
[17:46:58.032]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.015]   - Field: ‘lazy’
[17:46:58.032]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.015]   - Field: ‘state’
[17:46:58.033]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.015] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:58.033]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.015] - Launch lazy future ...
[17:46:58.033]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.015] Packages needed by the future expression (n = 0): <none>
[17:46:58.033]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.015] Packages needed by future strategies (n = 0): <none>
[17:46:58.033]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.016] {
[17:46:58.016]     {
[17:46:58.016]         {
[17:46:58.016]             ...future.startTime <- base::Sys.time()
[17:46:58.016]             {
[17:46:58.016]                 {
[17:46:58.016]                   {
[17:46:58.016]                     base::local({
[17:46:58.016]                       has_future <- base::requireNamespace("future", 
[17:46:58.016]                         quietly = TRUE)
[17:46:58.016]                       if (has_future) {
[17:46:58.016]                         ns <- base::getNamespace("future")
[17:46:58.016]                         version <- ns[[".package"]][["version"]]
[17:46:58.016]                         if (is.null(version)) 
[17:46:58.016]                           version <- utils::packageVersion("future")
[17:46:58.016]                       }
[17:46:58.016]                       else {
[17:46:58.016]                         version <- NULL
[17:46:58.016]                       }
[17:46:58.016]                       if (!has_future || version < "1.8.0") {
[17:46:58.016]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.016]                           "", base::R.version$version.string), 
[17:46:58.016]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:58.016]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.016]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.016]                             "release", "version")], collapse = " "), 
[17:46:58.016]                           hostname = base::Sys.info()[["nodename"]])
[17:46:58.016]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.016]                           info)
[17:46:58.016]                         info <- base::paste(info, collapse = "; ")
[17:46:58.016]                         if (!has_future) {
[17:46:58.016]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.016]                             info)
[17:46:58.016]                         }
[17:46:58.016]                         else {
[17:46:58.016]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.016]                             info, version)
[17:46:58.016]                         }
[17:46:58.016]                         base::stop(msg)
[17:46:58.016]                       }
[17:46:58.016]                     })
[17:46:58.016]                   }
[17:46:58.016]                   ...future.strategy.old <- future::plan("list")
[17:46:58.016]                   options(future.plan = NULL)
[17:46:58.016]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.016]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.016]                 }
[17:46:58.016]                 ...future.workdir <- getwd()
[17:46:58.016]             }
[17:46:58.016]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.016]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.016]         }
[17:46:58.016]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.016]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.016]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.016]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.016]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.016]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.016]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.016]             base::names(...future.oldOptions))
[17:46:58.016]     }
[17:46:58.016]     if (FALSE) {
[17:46:58.016]     }
[17:46:58.016]     else {
[17:46:58.016]         if (TRUE) {
[17:46:58.016]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.016]                 open = "w")
[17:46:58.016]         }
[17:46:58.016]         else {
[17:46:58.016]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.016]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.016]         }
[17:46:58.016]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.016]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.016]             base::sink(type = "output", split = FALSE)
[17:46:58.016]             base::close(...future.stdout)
[17:46:58.016]         }, add = TRUE)
[17:46:58.016]     }
[17:46:58.016]     ...future.frame <- base::sys.nframe()
[17:46:58.016]     ...future.conditions <- base::list()
[17:46:58.016]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.016]     if (FALSE) {
[17:46:58.016]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.016]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.016]     }
[17:46:58.016]     ...future.result <- base::tryCatch({
[17:46:58.016]         base::withCallingHandlers({
[17:46:58.016]             ...future.value <- base::withVisible(base::local(subset(data, 
[17:46:58.016]                 x < 3)$y))
[17:46:58.016]             future::FutureResult(value = ...future.value$value, 
[17:46:58.016]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.016]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.016]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.016]                     ...future.globalenv.names))
[17:46:58.016]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.016]         }, condition = base::local({
[17:46:58.016]             c <- base::c
[17:46:58.016]             inherits <- base::inherits
[17:46:58.016]             invokeRestart <- base::invokeRestart
[17:46:58.016]             length <- base::length
[17:46:58.016]             list <- base::list
[17:46:58.016]             seq.int <- base::seq.int
[17:46:58.016]             signalCondition <- base::signalCondition
[17:46:58.016]             sys.calls <- base::sys.calls
[17:46:58.016]             `[[` <- base::`[[`
[17:46:58.016]             `+` <- base::`+`
[17:46:58.016]             `<<-` <- base::`<<-`
[17:46:58.016]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.016]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.016]                   3L)]
[17:46:58.016]             }
[17:46:58.016]             function(cond) {
[17:46:58.016]                 is_error <- inherits(cond, "error")
[17:46:58.016]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.016]                   NULL)
[17:46:58.016]                 if (is_error) {
[17:46:58.016]                   sessionInformation <- function() {
[17:46:58.016]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.016]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.016]                       search = base::search(), system = base::Sys.info())
[17:46:58.016]                   }
[17:46:58.016]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.016]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.016]                     cond$call), session = sessionInformation(), 
[17:46:58.016]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.016]                   signalCondition(cond)
[17:46:58.016]                 }
[17:46:58.016]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.016]                 "immediateCondition"))) {
[17:46:58.016]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.016]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.016]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.016]                   if (TRUE && !signal) {
[17:46:58.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.016]                     {
[17:46:58.016]                       inherits <- base::inherits
[17:46:58.016]                       invokeRestart <- base::invokeRestart
[17:46:58.016]                       is.null <- base::is.null
[17:46:58.016]                       muffled <- FALSE
[17:46:58.016]                       if (inherits(cond, "message")) {
[17:46:58.016]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.016]                         if (muffled) 
[17:46:58.016]                           invokeRestart("muffleMessage")
[17:46:58.016]                       }
[17:46:58.016]                       else if (inherits(cond, "warning")) {
[17:46:58.016]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.016]                         if (muffled) 
[17:46:58.016]                           invokeRestart("muffleWarning")
[17:46:58.016]                       }
[17:46:58.016]                       else if (inherits(cond, "condition")) {
[17:46:58.016]                         if (!is.null(pattern)) {
[17:46:58.016]                           computeRestarts <- base::computeRestarts
[17:46:58.016]                           grepl <- base::grepl
[17:46:58.016]                           restarts <- computeRestarts(cond)
[17:46:58.016]                           for (restart in restarts) {
[17:46:58.016]                             name <- restart$name
[17:46:58.016]                             if (is.null(name)) 
[17:46:58.016]                               next
[17:46:58.016]                             if (!grepl(pattern, name)) 
[17:46:58.016]                               next
[17:46:58.016]                             invokeRestart(restart)
[17:46:58.016]                             muffled <- TRUE
[17:46:58.016]                             break
[17:46:58.016]                           }
[17:46:58.016]                         }
[17:46:58.016]                       }
[17:46:58.016]                       invisible(muffled)
[17:46:58.016]                     }
[17:46:58.016]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.016]                   }
[17:46:58.016]                 }
[17:46:58.016]                 else {
[17:46:58.016]                   if (TRUE) {
[17:46:58.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.016]                     {
[17:46:58.016]                       inherits <- base::inherits
[17:46:58.016]                       invokeRestart <- base::invokeRestart
[17:46:58.016]                       is.null <- base::is.null
[17:46:58.016]                       muffled <- FALSE
[17:46:58.016]                       if (inherits(cond, "message")) {
[17:46:58.016]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.016]                         if (muffled) 
[17:46:58.016]                           invokeRestart("muffleMessage")
[17:46:58.016]                       }
[17:46:58.016]                       else if (inherits(cond, "warning")) {
[17:46:58.016]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.016]                         if (muffled) 
[17:46:58.016]                           invokeRestart("muffleWarning")
[17:46:58.016]                       }
[17:46:58.016]                       else if (inherits(cond, "condition")) {
[17:46:58.016]                         if (!is.null(pattern)) {
[17:46:58.016]                           computeRestarts <- base::computeRestarts
[17:46:58.016]                           grepl <- base::grepl
[17:46:58.016]                           restarts <- computeRestarts(cond)
[17:46:58.016]                           for (restart in restarts) {
[17:46:58.016]                             name <- restart$name
[17:46:58.016]                             if (is.null(name)) 
[17:46:58.016]                               next
[17:46:58.016]                             if (!grepl(pattern, name)) 
[17:46:58.016]                               next
[17:46:58.016]                             invokeRestart(restart)
[17:46:58.016]                             muffled <- TRUE
[17:46:58.016]                             break
[17:46:58.016]                           }
[17:46:58.016]                         }
[17:46:58.016]                       }
[17:46:58.016]                       invisible(muffled)
[17:46:58.016]                     }
[17:46:58.016]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.016]                   }
[17:46:58.016]                 }
[17:46:58.016]             }
[17:46:58.016]         }))
[17:46:58.016]     }, error = function(ex) {
[17:46:58.016]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.016]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.016]                 ...future.rng), started = ...future.startTime, 
[17:46:58.016]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.016]             version = "1.8"), class = "FutureResult")
[17:46:58.016]     }, finally = {
[17:46:58.016]         if (!identical(...future.workdir, getwd())) 
[17:46:58.016]             setwd(...future.workdir)
[17:46:58.016]         {
[17:46:58.016]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.016]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.016]             }
[17:46:58.016]             base::options(...future.oldOptions)
[17:46:58.016]             if (.Platform$OS.type == "windows") {
[17:46:58.016]                 old_names <- names(...future.oldEnvVars)
[17:46:58.016]                 envs <- base::Sys.getenv()
[17:46:58.016]                 names <- names(envs)
[17:46:58.016]                 common <- intersect(names, old_names)
[17:46:58.016]                 added <- setdiff(names, old_names)
[17:46:58.016]                 removed <- setdiff(old_names, names)
[17:46:58.016]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.016]                   envs[common]]
[17:46:58.016]                 NAMES <- toupper(changed)
[17:46:58.016]                 args <- list()
[17:46:58.016]                 for (kk in seq_along(NAMES)) {
[17:46:58.016]                   name <- changed[[kk]]
[17:46:58.016]                   NAME <- NAMES[[kk]]
[17:46:58.016]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.016]                     next
[17:46:58.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.016]                 }
[17:46:58.016]                 NAMES <- toupper(added)
[17:46:58.016]                 for (kk in seq_along(NAMES)) {
[17:46:58.016]                   name <- added[[kk]]
[17:46:58.016]                   NAME <- NAMES[[kk]]
[17:46:58.016]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.016]                     next
[17:46:58.016]                   args[[name]] <- ""
[17:46:58.016]                 }
[17:46:58.016]                 NAMES <- toupper(removed)
[17:46:58.016]                 for (kk in seq_along(NAMES)) {
[17:46:58.016]                   name <- removed[[kk]]
[17:46:58.016]                   NAME <- NAMES[[kk]]
[17:46:58.016]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.016]                     next
[17:46:58.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.016]                 }
[17:46:58.016]                 if (length(args) > 0) 
[17:46:58.016]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.016]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.016]             }
[17:46:58.016]             else {
[17:46:58.016]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.016]             }
[17:46:58.016]             {
[17:46:58.016]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.016]                   0L) {
[17:46:58.016]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.016]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.016]                   base::options(opts)
[17:46:58.016]                 }
[17:46:58.016]                 {
[17:46:58.016]                   {
[17:46:58.016]                     NULL
[17:46:58.016]                     RNGkind("Mersenne-Twister")
[17:46:58.016]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:58.016]                       inherits = FALSE)
[17:46:58.016]                   }
[17:46:58.016]                   options(future.plan = NULL)
[17:46:58.016]                   if (is.na(NA_character_)) 
[17:46:58.016]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.016]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.016]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.016]                     .init = FALSE)
[17:46:58.016]                 }
[17:46:58.016]             }
[17:46:58.016]         }
[17:46:58.016]     })
[17:46:58.016]     if (TRUE) {
[17:46:58.016]         base::sink(type = "output", split = FALSE)
[17:46:58.016]         if (TRUE) {
[17:46:58.016]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.016]         }
[17:46:58.016]         else {
[17:46:58.016]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.016]         }
[17:46:58.016]         base::close(...future.stdout)
[17:46:58.016]         ...future.stdout <- NULL
[17:46:58.016]     }
[17:46:58.016]     ...future.result$conditions <- ...future.conditions
[17:46:58.016]     ...future.result$finished <- base::Sys.time()
[17:46:58.016]     ...future.result
[17:46:58.016] }
[17:46:58.033]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.017] assign_globals() ...
[17:46:58.033]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.017] List of 1
[17:46:58.017]  $ data:'data.frame':	5 obs. of  2 variables:
[17:46:58.017]   ..$ x: int [1:5] 1 2 3 4 5
[17:46:58.017]   ..$ y: int [1:5] 1 2 3 4 5
[17:46:58.017]  - attr(*, "where")=List of 1
[17:46:58.017]   ..$ data:<environment: R_EmptyEnv> 
[17:46:58.017]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:58.017]  - attr(*, "resolved")= logi FALSE
[17:46:58.017]  - attr(*, "total_size")= num 160
[17:46:58.017]  - attr(*, "already-done")= logi TRUE
[17:46:58.034]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.022] - copied ‘data’ to environment
[17:46:58.034]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.022] assign_globals() ... done
[17:46:58.034]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.022] plan(): Setting new future strategy stack:
[17:46:58.034]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.022] List of future strategies:
[17:46:58.022] 1. sequential:
[17:46:58.022]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.022]    - tweaked: FALSE
[17:46:58.022]    - call: NULL
[17:46:58.034]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.023] plan(): nbrOfWorkers() = 1
[17:46:58.034]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.024] plan(): Setting new future strategy stack:
[17:46:58.034]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.024] List of future strategies:
[17:46:58.024] 1. sequential:
[17:46:58.024]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.024]    - tweaked: FALSE
[17:46:58.024]    - call: plan(list(sequential, strategy))
[17:46:58.034]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.024] plan(): nbrOfWorkers() = 1
[17:46:58.035]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.025] SequentialFuture started (and completed)
[17:46:58.035]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.025] - Launch lazy future ... done
[17:46:58.035]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.025] run() for ‘SequentialFuture’ ... done
[17:46:58.035] signalConditions() ... done
- Strategy: sequential ... DONE
- Strategy: multicore ...
[17:46:58.035] plan(): Setting new future strategy stack:
[17:46:58.035] List of future strategies:
[17:46:58.035] 1. multicore:
[17:46:58.035]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:58.035]    - tweaked: FALSE
[17:46:58.035]    - call: plan(strategy)
[17:46:58.039] plan(): nbrOfWorkers() = 2
[17:46:58.039] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:46:58.040] Searching for globals...
[17:46:58.040] - globals found: [1] ‘getOption’
[17:46:58.040] Searching for globals ... DONE
[17:46:58.040] Resolving globals: FALSE
[17:46:58.041] 
[17:46:58.041] 
[17:46:58.041] getGlobalsAndPackages() ... DONE
[17:46:58.041] run() for ‘Future’ ...
[17:46:58.041] - state: ‘created’
[17:46:58.041] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:58.045] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:58.045] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:58.045]   - Field: ‘label’
[17:46:58.045]   - Field: ‘local’
[17:46:58.045]   - Field: ‘owner’
[17:46:58.045]   - Field: ‘envir’
[17:46:58.045]   - Field: ‘workers’
[17:46:58.046]   - Field: ‘packages’
[17:46:58.046]   - Field: ‘gc’
[17:46:58.046]   - Field: ‘job’
[17:46:58.046]   - Field: ‘conditions’
[17:46:58.046]   - Field: ‘expr’
[17:46:58.046]   - Field: ‘uuid’
[17:46:58.046]   - Field: ‘seed’
[17:46:58.046]   - Field: ‘version’
[17:46:58.046]   - Field: ‘result’
[17:46:58.046]   - Field: ‘asynchronous’
[17:46:58.046]   - Field: ‘calls’
[17:46:58.046]   - Field: ‘globals’
[17:46:58.047]   - Field: ‘stdout’
[17:46:58.047]   - Field: ‘earlySignal’
[17:46:58.047]   - Field: ‘lazy’
[17:46:58.047]   - Field: ‘state’
[17:46:58.047] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:58.047] - Launch lazy future ...
[17:46:58.048] Packages needed by the future expression (n = 0): <none>
[17:46:58.048] Packages needed by future strategies (n = 0): <none>
[17:46:58.049] {
[17:46:58.049]     {
[17:46:58.049]         {
[17:46:58.049]             ...future.startTime <- base::Sys.time()
[17:46:58.049]             {
[17:46:58.049]                 {
[17:46:58.049]                   {
[17:46:58.049]                     {
[17:46:58.049]                       base::local({
[17:46:58.049]                         has_future <- base::requireNamespace("future", 
[17:46:58.049]                           quietly = TRUE)
[17:46:58.049]                         if (has_future) {
[17:46:58.049]                           ns <- base::getNamespace("future")
[17:46:58.049]                           version <- ns[[".package"]][["version"]]
[17:46:58.049]                           if (is.null(version)) 
[17:46:58.049]                             version <- utils::packageVersion("future")
[17:46:58.049]                         }
[17:46:58.049]                         else {
[17:46:58.049]                           version <- NULL
[17:46:58.049]                         }
[17:46:58.049]                         if (!has_future || version < "1.8.0") {
[17:46:58.049]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.049]                             "", base::R.version$version.string), 
[17:46:58.049]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.049]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.049]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.049]                               "release", "version")], collapse = " "), 
[17:46:58.049]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.049]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.049]                             info)
[17:46:58.049]                           info <- base::paste(info, collapse = "; ")
[17:46:58.049]                           if (!has_future) {
[17:46:58.049]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.049]                               info)
[17:46:58.049]                           }
[17:46:58.049]                           else {
[17:46:58.049]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.049]                               info, version)
[17:46:58.049]                           }
[17:46:58.049]                           base::stop(msg)
[17:46:58.049]                         }
[17:46:58.049]                       })
[17:46:58.049]                     }
[17:46:58.049]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:58.049]                     base::options(mc.cores = 1L)
[17:46:58.049]                   }
[17:46:58.049]                   ...future.strategy.old <- future::plan("list")
[17:46:58.049]                   options(future.plan = NULL)
[17:46:58.049]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.049]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.049]                 }
[17:46:58.049]                 ...future.workdir <- getwd()
[17:46:58.049]             }
[17:46:58.049]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.049]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.049]         }
[17:46:58.049]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:46:58.049]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.049]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:46:58.049]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.049]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.049]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.049]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.049]             base::names(...future.oldOptions))
[17:46:58.049]     }
[17:46:58.049]     if (FALSE) {
[17:46:58.049]     }
[17:46:58.049]     else {
[17:46:58.049]         if (TRUE) {
[17:46:58.049]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.049]                 open = "w")
[17:46:58.049]         }
[17:46:58.049]         else {
[17:46:58.049]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.049]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.049]         }
[17:46:58.049]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.049]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.049]             base::sink(type = "output", split = FALSE)
[17:46:58.049]             base::close(...future.stdout)
[17:46:58.049]         }, add = TRUE)
[17:46:58.049]     }
[17:46:58.049]     ...future.frame <- base::sys.nframe()
[17:46:58.049]     ...future.conditions <- base::list()
[17:46:58.049]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.049]     if (FALSE) {
[17:46:58.049]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.049]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.049]     }
[17:46:58.049]     ...future.result <- base::tryCatch({
[17:46:58.049]         base::withCallingHandlers({
[17:46:58.049]             ...future.value <- base::withVisible(base::local({
[17:46:58.049]                 withCallingHandlers({
[17:46:58.049]                   getOption("future.globals.onMissing")
[17:46:58.049]                 }, immediateCondition = function(cond) {
[17:46:58.049]                   save_rds <- function (object, pathname, ...) 
[17:46:58.049]                   {
[17:46:58.049]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:58.049]                     if (file_test("-f", pathname_tmp)) {
[17:46:58.049]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.049]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:58.049]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.049]                         fi_tmp[["mtime"]])
[17:46:58.049]                     }
[17:46:58.049]                     tryCatch({
[17:46:58.049]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:58.049]                     }, error = function(ex) {
[17:46:58.049]                       msg <- conditionMessage(ex)
[17:46:58.049]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.049]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:58.049]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.049]                         fi_tmp[["mtime"]], msg)
[17:46:58.049]                       ex$message <- msg
[17:46:58.049]                       stop(ex)
[17:46:58.049]                     })
[17:46:58.049]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:58.049]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:58.049]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:58.049]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.049]                       fi <- file.info(pathname)
[17:46:58.049]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:58.049]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.049]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:58.049]                         fi[["size"]], fi[["mtime"]])
[17:46:58.049]                       stop(msg)
[17:46:58.049]                     }
[17:46:58.049]                     invisible(pathname)
[17:46:58.049]                   }
[17:46:58.049]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:58.049]                     rootPath = tempdir()) 
[17:46:58.049]                   {
[17:46:58.049]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:58.049]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:58.049]                       tmpdir = path, fileext = ".rds")
[17:46:58.049]                     save_rds(obj, file)
[17:46:58.049]                   }
[17:46:58.049]                   saveImmediateCondition(cond, path = "/tmp/RtmpJEWZHY/.future/immediateConditions")
[17:46:58.049]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.049]                   {
[17:46:58.049]                     inherits <- base::inherits
[17:46:58.049]                     invokeRestart <- base::invokeRestart
[17:46:58.049]                     is.null <- base::is.null
[17:46:58.049]                     muffled <- FALSE
[17:46:58.049]                     if (inherits(cond, "message")) {
[17:46:58.049]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:58.049]                       if (muffled) 
[17:46:58.049]                         invokeRestart("muffleMessage")
[17:46:58.049]                     }
[17:46:58.049]                     else if (inherits(cond, "warning")) {
[17:46:58.049]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:58.049]                       if (muffled) 
[17:46:58.049]                         invokeRestart("muffleWarning")
[17:46:58.049]                     }
[17:46:58.049]                     else if (inherits(cond, "condition")) {
[17:46:58.049]                       if (!is.null(pattern)) {
[17:46:58.049]                         computeRestarts <- base::computeRestarts
[17:46:58.049]                         grepl <- base::grepl
[17:46:58.049]                         restarts <- computeRestarts(cond)
[17:46:58.049]                         for (restart in restarts) {
[17:46:58.049]                           name <- restart$name
[17:46:58.049]                           if (is.null(name)) 
[17:46:58.049]                             next
[17:46:58.049]                           if (!grepl(pattern, name)) 
[17:46:58.049]                             next
[17:46:58.049]                           invokeRestart(restart)
[17:46:58.049]                           muffled <- TRUE
[17:46:58.049]                           break
[17:46:58.049]                         }
[17:46:58.049]                       }
[17:46:58.049]                     }
[17:46:58.049]                     invisible(muffled)
[17:46:58.049]                   }
[17:46:58.049]                   muffleCondition(cond)
[17:46:58.049]                 })
[17:46:58.049]             }))
[17:46:58.049]             future::FutureResult(value = ...future.value$value, 
[17:46:58.049]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.049]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.049]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.049]                     ...future.globalenv.names))
[17:46:58.049]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.049]         }, condition = base::local({
[17:46:58.049]             c <- base::c
[17:46:58.049]             inherits <- base::inherits
[17:46:58.049]             invokeRestart <- base::invokeRestart
[17:46:58.049]             length <- base::length
[17:46:58.049]             list <- base::list
[17:46:58.049]             seq.int <- base::seq.int
[17:46:58.049]             signalCondition <- base::signalCondition
[17:46:58.049]             sys.calls <- base::sys.calls
[17:46:58.049]             `[[` <- base::`[[`
[17:46:58.049]             `+` <- base::`+`
[17:46:58.049]             `<<-` <- base::`<<-`
[17:46:58.049]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.049]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.049]                   3L)]
[17:46:58.049]             }
[17:46:58.049]             function(cond) {
[17:46:58.049]                 is_error <- inherits(cond, "error")
[17:46:58.049]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.049]                   NULL)
[17:46:58.049]                 if (is_error) {
[17:46:58.049]                   sessionInformation <- function() {
[17:46:58.049]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.049]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.049]                       search = base::search(), system = base::Sys.info())
[17:46:58.049]                   }
[17:46:58.049]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.049]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.049]                     cond$call), session = sessionInformation(), 
[17:46:58.049]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.049]                   signalCondition(cond)
[17:46:58.049]                 }
[17:46:58.049]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.049]                 "immediateCondition"))) {
[17:46:58.049]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.049]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.049]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.049]                   if (TRUE && !signal) {
[17:46:58.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.049]                     {
[17:46:58.049]                       inherits <- base::inherits
[17:46:58.049]                       invokeRestart <- base::invokeRestart
[17:46:58.049]                       is.null <- base::is.null
[17:46:58.049]                       muffled <- FALSE
[17:46:58.049]                       if (inherits(cond, "message")) {
[17:46:58.049]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.049]                         if (muffled) 
[17:46:58.049]                           invokeRestart("muffleMessage")
[17:46:58.049]                       }
[17:46:58.049]                       else if (inherits(cond, "warning")) {
[17:46:58.049]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.049]                         if (muffled) 
[17:46:58.049]                           invokeRestart("muffleWarning")
[17:46:58.049]                       }
[17:46:58.049]                       else if (inherits(cond, "condition")) {
[17:46:58.049]                         if (!is.null(pattern)) {
[17:46:58.049]                           computeRestarts <- base::computeRestarts
[17:46:58.049]                           grepl <- base::grepl
[17:46:58.049]                           restarts <- computeRestarts(cond)
[17:46:58.049]                           for (restart in restarts) {
[17:46:58.049]                             name <- restart$name
[17:46:58.049]                             if (is.null(name)) 
[17:46:58.049]                               next
[17:46:58.049]                             if (!grepl(pattern, name)) 
[17:46:58.049]                               next
[17:46:58.049]                             invokeRestart(restart)
[17:46:58.049]                             muffled <- TRUE
[17:46:58.049]                             break
[17:46:58.049]                           }
[17:46:58.049]                         }
[17:46:58.049]                       }
[17:46:58.049]                       invisible(muffled)
[17:46:58.049]                     }
[17:46:58.049]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.049]                   }
[17:46:58.049]                 }
[17:46:58.049]                 else {
[17:46:58.049]                   if (TRUE) {
[17:46:58.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.049]                     {
[17:46:58.049]                       inherits <- base::inherits
[17:46:58.049]                       invokeRestart <- base::invokeRestart
[17:46:58.049]                       is.null <- base::is.null
[17:46:58.049]                       muffled <- FALSE
[17:46:58.049]                       if (inherits(cond, "message")) {
[17:46:58.049]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.049]                         if (muffled) 
[17:46:58.049]                           invokeRestart("muffleMessage")
[17:46:58.049]                       }
[17:46:58.049]                       else if (inherits(cond, "warning")) {
[17:46:58.049]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.049]                         if (muffled) 
[17:46:58.049]                           invokeRestart("muffleWarning")
[17:46:58.049]                       }
[17:46:58.049]                       else if (inherits(cond, "condition")) {
[17:46:58.049]                         if (!is.null(pattern)) {
[17:46:58.049]                           computeRestarts <- base::computeRestarts
[17:46:58.049]                           grepl <- base::grepl
[17:46:58.049]                           restarts <- computeRestarts(cond)
[17:46:58.049]                           for (restart in restarts) {
[17:46:58.049]                             name <- restart$name
[17:46:58.049]                             if (is.null(name)) 
[17:46:58.049]                               next
[17:46:58.049]                             if (!grepl(pattern, name)) 
[17:46:58.049]                               next
[17:46:58.049]                             invokeRestart(restart)
[17:46:58.049]                             muffled <- TRUE
[17:46:58.049]                             break
[17:46:58.049]                           }
[17:46:58.049]                         }
[17:46:58.049]                       }
[17:46:58.049]                       invisible(muffled)
[17:46:58.049]                     }
[17:46:58.049]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.049]                   }
[17:46:58.049]                 }
[17:46:58.049]             }
[17:46:58.049]         }))
[17:46:58.049]     }, error = function(ex) {
[17:46:58.049]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.049]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.049]                 ...future.rng), started = ...future.startTime, 
[17:46:58.049]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.049]             version = "1.8"), class = "FutureResult")
[17:46:58.049]     }, finally = {
[17:46:58.049]         if (!identical(...future.workdir, getwd())) 
[17:46:58.049]             setwd(...future.workdir)
[17:46:58.049]         {
[17:46:58.049]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.049]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.049]             }
[17:46:58.049]             base::options(...future.oldOptions)
[17:46:58.049]             if (.Platform$OS.type == "windows") {
[17:46:58.049]                 old_names <- names(...future.oldEnvVars)
[17:46:58.049]                 envs <- base::Sys.getenv()
[17:46:58.049]                 names <- names(envs)
[17:46:58.049]                 common <- intersect(names, old_names)
[17:46:58.049]                 added <- setdiff(names, old_names)
[17:46:58.049]                 removed <- setdiff(old_names, names)
[17:46:58.049]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.049]                   envs[common]]
[17:46:58.049]                 NAMES <- toupper(changed)
[17:46:58.049]                 args <- list()
[17:46:58.049]                 for (kk in seq_along(NAMES)) {
[17:46:58.049]                   name <- changed[[kk]]
[17:46:58.049]                   NAME <- NAMES[[kk]]
[17:46:58.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.049]                     next
[17:46:58.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.049]                 }
[17:46:58.049]                 NAMES <- toupper(added)
[17:46:58.049]                 for (kk in seq_along(NAMES)) {
[17:46:58.049]                   name <- added[[kk]]
[17:46:58.049]                   NAME <- NAMES[[kk]]
[17:46:58.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.049]                     next
[17:46:58.049]                   args[[name]] <- ""
[17:46:58.049]                 }
[17:46:58.049]                 NAMES <- toupper(removed)
[17:46:58.049]                 for (kk in seq_along(NAMES)) {
[17:46:58.049]                   name <- removed[[kk]]
[17:46:58.049]                   NAME <- NAMES[[kk]]
[17:46:58.049]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.049]                     next
[17:46:58.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.049]                 }
[17:46:58.049]                 if (length(args) > 0) 
[17:46:58.049]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.049]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.049]             }
[17:46:58.049]             else {
[17:46:58.049]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.049]             }
[17:46:58.049]             {
[17:46:58.049]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.049]                   0L) {
[17:46:58.049]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.049]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.049]                   base::options(opts)
[17:46:58.049]                 }
[17:46:58.049]                 {
[17:46:58.049]                   {
[17:46:58.049]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:58.049]                     NULL
[17:46:58.049]                   }
[17:46:58.049]                   options(future.plan = NULL)
[17:46:58.049]                   if (is.na(NA_character_)) 
[17:46:58.049]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.049]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.049]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.049]                     .init = FALSE)
[17:46:58.049]                 }
[17:46:58.049]             }
[17:46:58.049]         }
[17:46:58.049]     })
[17:46:58.049]     if (TRUE) {
[17:46:58.049]         base::sink(type = "output", split = FALSE)
[17:46:58.049]         if (TRUE) {
[17:46:58.049]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.049]         }
[17:46:58.049]         else {
[17:46:58.049]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.049]         }
[17:46:58.049]         base::close(...future.stdout)
[17:46:58.049]         ...future.stdout <- NULL
[17:46:58.049]     }
[17:46:58.049]     ...future.result$conditions <- ...future.conditions
[17:46:58.049]     ...future.result$finished <- base::Sys.time()
[17:46:58.049]     ...future.result
[17:46:58.049] }
[17:46:58.051] requestCore(): workers = 2
[17:46:58.054] MulticoreFuture started
[17:46:58.059] - Launch lazy future ... done
[17:46:58.059] plan(): Setting new future strategy stack:
[17:46:58.059] run() for ‘MulticoreFuture’ ... done
[17:46:58.060] List of future strategies:
[17:46:58.060] 1. sequential:
[17:46:58.060]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.060]    - tweaked: FALSE
[17:46:58.060]    - call: NULL
[17:46:58.061] plan(): nbrOfWorkers() = 1
[17:46:58.061] result() for MulticoreFuture ...
[17:46:58.063] plan(): Setting new future strategy stack:
[17:46:58.063] List of future strategies:
[17:46:58.063] 1. multicore:
[17:46:58.063]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:58.063]    - tweaked: FALSE
[17:46:58.063]    - call: plan(strategy)
[17:46:58.068] plan(): nbrOfWorkers() = 2
[17:46:58.073] result() for MulticoreFuture ...
[17:46:58.073] result() for MulticoreFuture ... done
[17:46:58.073] result() for MulticoreFuture ... done
[17:46:58.073] result() for MulticoreFuture ...
[17:46:58.073] result() for MulticoreFuture ... done
[17:46:58.073] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.074] Searching for globals...
[17:46:58.074] - globals found: [1] ‘getOption’
[17:46:58.075] Searching for globals ... DONE
[17:46:58.075] Resolving globals: FALSE
[17:46:58.075] 
[17:46:58.075] 
[17:46:58.075] getGlobalsAndPackages() ... DONE
[17:46:58.076] run() for ‘Future’ ...
[17:46:58.076] - state: ‘created’
[17:46:58.076] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:58.080] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:58.080] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:58.080]   - Field: ‘label’
[17:46:58.080]   - Field: ‘local’
[17:46:58.080]   - Field: ‘owner’
[17:46:58.080]   - Field: ‘envir’
[17:46:58.080]   - Field: ‘workers’
[17:46:58.081]   - Field: ‘packages’
[17:46:58.081]   - Field: ‘gc’
[17:46:58.081]   - Field: ‘job’
[17:46:58.081]   - Field: ‘conditions’
[17:46:58.081]   - Field: ‘expr’
[17:46:58.081]   - Field: ‘uuid’
[17:46:58.081]   - Field: ‘seed’
[17:46:58.081]   - Field: ‘version’
[17:46:58.081]   - Field: ‘result’
[17:46:58.081]   - Field: ‘asynchronous’
[17:46:58.082]   - Field: ‘calls’
[17:46:58.082]   - Field: ‘globals’
[17:46:58.082]   - Field: ‘stdout’
[17:46:58.082]   - Field: ‘earlySignal’
[17:46:58.082]   - Field: ‘lazy’
[17:46:58.082]   - Field: ‘state’
[17:46:58.082] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:58.082] - Launch lazy future ...
[17:46:58.083] Packages needed by the future expression (n = 0): <none>
[17:46:58.083] Packages needed by future strategies (n = 0): <none>
[17:46:58.083] {
[17:46:58.083]     {
[17:46:58.083]         {
[17:46:58.083]             ...future.startTime <- base::Sys.time()
[17:46:58.083]             {
[17:46:58.083]                 {
[17:46:58.083]                   {
[17:46:58.083]                     {
[17:46:58.083]                       base::local({
[17:46:58.083]                         has_future <- base::requireNamespace("future", 
[17:46:58.083]                           quietly = TRUE)
[17:46:58.083]                         if (has_future) {
[17:46:58.083]                           ns <- base::getNamespace("future")
[17:46:58.083]                           version <- ns[[".package"]][["version"]]
[17:46:58.083]                           if (is.null(version)) 
[17:46:58.083]                             version <- utils::packageVersion("future")
[17:46:58.083]                         }
[17:46:58.083]                         else {
[17:46:58.083]                           version <- NULL
[17:46:58.083]                         }
[17:46:58.083]                         if (!has_future || version < "1.8.0") {
[17:46:58.083]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.083]                             "", base::R.version$version.string), 
[17:46:58.083]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.083]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.083]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.083]                               "release", "version")], collapse = " "), 
[17:46:58.083]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.083]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.083]                             info)
[17:46:58.083]                           info <- base::paste(info, collapse = "; ")
[17:46:58.083]                           if (!has_future) {
[17:46:58.083]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.083]                               info)
[17:46:58.083]                           }
[17:46:58.083]                           else {
[17:46:58.083]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.083]                               info, version)
[17:46:58.083]                           }
[17:46:58.083]                           base::stop(msg)
[17:46:58.083]                         }
[17:46:58.083]                       })
[17:46:58.083]                     }
[17:46:58.083]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:58.083]                     base::options(mc.cores = 1L)
[17:46:58.083]                   }
[17:46:58.083]                   ...future.strategy.old <- future::plan("list")
[17:46:58.083]                   options(future.plan = NULL)
[17:46:58.083]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.083]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.083]                 }
[17:46:58.083]                 ...future.workdir <- getwd()
[17:46:58.083]             }
[17:46:58.083]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.083]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.083]         }
[17:46:58.083]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.083]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.083]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.083]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.083]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.083]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.083]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.083]             base::names(...future.oldOptions))
[17:46:58.083]     }
[17:46:58.083]     if (FALSE) {
[17:46:58.083]     }
[17:46:58.083]     else {
[17:46:58.083]         if (TRUE) {
[17:46:58.083]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.083]                 open = "w")
[17:46:58.083]         }
[17:46:58.083]         else {
[17:46:58.083]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.083]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.083]         }
[17:46:58.083]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.083]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.083]             base::sink(type = "output", split = FALSE)
[17:46:58.083]             base::close(...future.stdout)
[17:46:58.083]         }, add = TRUE)
[17:46:58.083]     }
[17:46:58.083]     ...future.frame <- base::sys.nframe()
[17:46:58.083]     ...future.conditions <- base::list()
[17:46:58.083]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.083]     if (FALSE) {
[17:46:58.083]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.083]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.083]     }
[17:46:58.083]     ...future.result <- base::tryCatch({
[17:46:58.083]         base::withCallingHandlers({
[17:46:58.083]             ...future.value <- base::withVisible(base::local({
[17:46:58.083]                 withCallingHandlers({
[17:46:58.083]                   getOption("future.globals.onMissing")
[17:46:58.083]                 }, immediateCondition = function(cond) {
[17:46:58.083]                   save_rds <- function (object, pathname, ...) 
[17:46:58.083]                   {
[17:46:58.083]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:58.083]                     if (file_test("-f", pathname_tmp)) {
[17:46:58.083]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.083]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:58.083]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.083]                         fi_tmp[["mtime"]])
[17:46:58.083]                     }
[17:46:58.083]                     tryCatch({
[17:46:58.083]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:58.083]                     }, error = function(ex) {
[17:46:58.083]                       msg <- conditionMessage(ex)
[17:46:58.083]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.083]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:58.083]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.083]                         fi_tmp[["mtime"]], msg)
[17:46:58.083]                       ex$message <- msg
[17:46:58.083]                       stop(ex)
[17:46:58.083]                     })
[17:46:58.083]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:58.083]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:58.083]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:58.083]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.083]                       fi <- file.info(pathname)
[17:46:58.083]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:58.083]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.083]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:58.083]                         fi[["size"]], fi[["mtime"]])
[17:46:58.083]                       stop(msg)
[17:46:58.083]                     }
[17:46:58.083]                     invisible(pathname)
[17:46:58.083]                   }
[17:46:58.083]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:58.083]                     rootPath = tempdir()) 
[17:46:58.083]                   {
[17:46:58.083]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:58.083]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:58.083]                       tmpdir = path, fileext = ".rds")
[17:46:58.083]                     save_rds(obj, file)
[17:46:58.083]                   }
[17:46:58.083]                   saveImmediateCondition(cond, path = "/tmp/RtmpJEWZHY/.future/immediateConditions")
[17:46:58.083]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.083]                   {
[17:46:58.083]                     inherits <- base::inherits
[17:46:58.083]                     invokeRestart <- base::invokeRestart
[17:46:58.083]                     is.null <- base::is.null
[17:46:58.083]                     muffled <- FALSE
[17:46:58.083]                     if (inherits(cond, "message")) {
[17:46:58.083]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:58.083]                       if (muffled) 
[17:46:58.083]                         invokeRestart("muffleMessage")
[17:46:58.083]                     }
[17:46:58.083]                     else if (inherits(cond, "warning")) {
[17:46:58.083]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:58.083]                       if (muffled) 
[17:46:58.083]                         invokeRestart("muffleWarning")
[17:46:58.083]                     }
[17:46:58.083]                     else if (inherits(cond, "condition")) {
[17:46:58.083]                       if (!is.null(pattern)) {
[17:46:58.083]                         computeRestarts <- base::computeRestarts
[17:46:58.083]                         grepl <- base::grepl
[17:46:58.083]                         restarts <- computeRestarts(cond)
[17:46:58.083]                         for (restart in restarts) {
[17:46:58.083]                           name <- restart$name
[17:46:58.083]                           if (is.null(name)) 
[17:46:58.083]                             next
[17:46:58.083]                           if (!grepl(pattern, name)) 
[17:46:58.083]                             next
[17:46:58.083]                           invokeRestart(restart)
[17:46:58.083]                           muffled <- TRUE
[17:46:58.083]                           break
[17:46:58.083]                         }
[17:46:58.083]                       }
[17:46:58.083]                     }
[17:46:58.083]                     invisible(muffled)
[17:46:58.083]                   }
[17:46:58.083]                   muffleCondition(cond)
[17:46:58.083]                 })
[17:46:58.083]             }))
[17:46:58.083]             future::FutureResult(value = ...future.value$value, 
[17:46:58.083]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.083]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.083]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.083]                     ...future.globalenv.names))
[17:46:58.083]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.083]         }, condition = base::local({
[17:46:58.083]             c <- base::c
[17:46:58.083]             inherits <- base::inherits
[17:46:58.083]             invokeRestart <- base::invokeRestart
[17:46:58.083]             length <- base::length
[17:46:58.083]             list <- base::list
[17:46:58.083]             seq.int <- base::seq.int
[17:46:58.083]             signalCondition <- base::signalCondition
[17:46:58.083]             sys.calls <- base::sys.calls
[17:46:58.083]             `[[` <- base::`[[`
[17:46:58.083]             `+` <- base::`+`
[17:46:58.083]             `<<-` <- base::`<<-`
[17:46:58.083]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.083]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.083]                   3L)]
[17:46:58.083]             }
[17:46:58.083]             function(cond) {
[17:46:58.083]                 is_error <- inherits(cond, "error")
[17:46:58.083]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.083]                   NULL)
[17:46:58.083]                 if (is_error) {
[17:46:58.083]                   sessionInformation <- function() {
[17:46:58.083]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.083]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.083]                       search = base::search(), system = base::Sys.info())
[17:46:58.083]                   }
[17:46:58.083]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.083]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.083]                     cond$call), session = sessionInformation(), 
[17:46:58.083]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.083]                   signalCondition(cond)
[17:46:58.083]                 }
[17:46:58.083]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.083]                 "immediateCondition"))) {
[17:46:58.083]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.083]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.083]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.083]                   if (TRUE && !signal) {
[17:46:58.083]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.083]                     {
[17:46:58.083]                       inherits <- base::inherits
[17:46:58.083]                       invokeRestart <- base::invokeRestart
[17:46:58.083]                       is.null <- base::is.null
[17:46:58.083]                       muffled <- FALSE
[17:46:58.083]                       if (inherits(cond, "message")) {
[17:46:58.083]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.083]                         if (muffled) 
[17:46:58.083]                           invokeRestart("muffleMessage")
[17:46:58.083]                       }
[17:46:58.083]                       else if (inherits(cond, "warning")) {
[17:46:58.083]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.083]                         if (muffled) 
[17:46:58.083]                           invokeRestart("muffleWarning")
[17:46:58.083]                       }
[17:46:58.083]                       else if (inherits(cond, "condition")) {
[17:46:58.083]                         if (!is.null(pattern)) {
[17:46:58.083]                           computeRestarts <- base::computeRestarts
[17:46:58.083]                           grepl <- base::grepl
[17:46:58.083]                           restarts <- computeRestarts(cond)
[17:46:58.083]                           for (restart in restarts) {
[17:46:58.083]                             name <- restart$name
[17:46:58.083]                             if (is.null(name)) 
[17:46:58.083]                               next
[17:46:58.083]                             if (!grepl(pattern, name)) 
[17:46:58.083]                               next
[17:46:58.083]                             invokeRestart(restart)
[17:46:58.083]                             muffled <- TRUE
[17:46:58.083]                             break
[17:46:58.083]                           }
[17:46:58.083]                         }
[17:46:58.083]                       }
[17:46:58.083]                       invisible(muffled)
[17:46:58.083]                     }
[17:46:58.083]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.083]                   }
[17:46:58.083]                 }
[17:46:58.083]                 else {
[17:46:58.083]                   if (TRUE) {
[17:46:58.083]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.083]                     {
[17:46:58.083]                       inherits <- base::inherits
[17:46:58.083]                       invokeRestart <- base::invokeRestart
[17:46:58.083]                       is.null <- base::is.null
[17:46:58.083]                       muffled <- FALSE
[17:46:58.083]                       if (inherits(cond, "message")) {
[17:46:58.083]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.083]                         if (muffled) 
[17:46:58.083]                           invokeRestart("muffleMessage")
[17:46:58.083]                       }
[17:46:58.083]                       else if (inherits(cond, "warning")) {
[17:46:58.083]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.083]                         if (muffled) 
[17:46:58.083]                           invokeRestart("muffleWarning")
[17:46:58.083]                       }
[17:46:58.083]                       else if (inherits(cond, "condition")) {
[17:46:58.083]                         if (!is.null(pattern)) {
[17:46:58.083]                           computeRestarts <- base::computeRestarts
[17:46:58.083]                           grepl <- base::grepl
[17:46:58.083]                           restarts <- computeRestarts(cond)
[17:46:58.083]                           for (restart in restarts) {
[17:46:58.083]                             name <- restart$name
[17:46:58.083]                             if (is.null(name)) 
[17:46:58.083]                               next
[17:46:58.083]                             if (!grepl(pattern, name)) 
[17:46:58.083]                               next
[17:46:58.083]                             invokeRestart(restart)
[17:46:58.083]                             muffled <- TRUE
[17:46:58.083]                             break
[17:46:58.083]                           }
[17:46:58.083]                         }
[17:46:58.083]                       }
[17:46:58.083]                       invisible(muffled)
[17:46:58.083]                     }
[17:46:58.083]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.083]                   }
[17:46:58.083]                 }
[17:46:58.083]             }
[17:46:58.083]         }))
[17:46:58.083]     }, error = function(ex) {
[17:46:58.083]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.083]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.083]                 ...future.rng), started = ...future.startTime, 
[17:46:58.083]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.083]             version = "1.8"), class = "FutureResult")
[17:46:58.083]     }, finally = {
[17:46:58.083]         if (!identical(...future.workdir, getwd())) 
[17:46:58.083]             setwd(...future.workdir)
[17:46:58.083]         {
[17:46:58.083]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.083]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.083]             }
[17:46:58.083]             base::options(...future.oldOptions)
[17:46:58.083]             if (.Platform$OS.type == "windows") {
[17:46:58.083]                 old_names <- names(...future.oldEnvVars)
[17:46:58.083]                 envs <- base::Sys.getenv()
[17:46:58.083]                 names <- names(envs)
[17:46:58.083]                 common <- intersect(names, old_names)
[17:46:58.083]                 added <- setdiff(names, old_names)
[17:46:58.083]                 removed <- setdiff(old_names, names)
[17:46:58.083]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.083]                   envs[common]]
[17:46:58.083]                 NAMES <- toupper(changed)
[17:46:58.083]                 args <- list()
[17:46:58.083]                 for (kk in seq_along(NAMES)) {
[17:46:58.083]                   name <- changed[[kk]]
[17:46:58.083]                   NAME <- NAMES[[kk]]
[17:46:58.083]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.083]                     next
[17:46:58.083]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.083]                 }
[17:46:58.083]                 NAMES <- toupper(added)
[17:46:58.083]                 for (kk in seq_along(NAMES)) {
[17:46:58.083]                   name <- added[[kk]]
[17:46:58.083]                   NAME <- NAMES[[kk]]
[17:46:58.083]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.083]                     next
[17:46:58.083]                   args[[name]] <- ""
[17:46:58.083]                 }
[17:46:58.083]                 NAMES <- toupper(removed)
[17:46:58.083]                 for (kk in seq_along(NAMES)) {
[17:46:58.083]                   name <- removed[[kk]]
[17:46:58.083]                   NAME <- NAMES[[kk]]
[17:46:58.083]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.083]                     next
[17:46:58.083]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.083]                 }
[17:46:58.083]                 if (length(args) > 0) 
[17:46:58.083]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.083]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.083]             }
[17:46:58.083]             else {
[17:46:58.083]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.083]             }
[17:46:58.083]             {
[17:46:58.083]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.083]                   0L) {
[17:46:58.083]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.083]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.083]                   base::options(opts)
[17:46:58.083]                 }
[17:46:58.083]                 {
[17:46:58.083]                   {
[17:46:58.083]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:58.083]                     NULL
[17:46:58.083]                   }
[17:46:58.083]                   options(future.plan = NULL)
[17:46:58.083]                   if (is.na(NA_character_)) 
[17:46:58.083]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.083]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.083]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.083]                     .init = FALSE)
[17:46:58.083]                 }
[17:46:58.083]             }
[17:46:58.083]         }
[17:46:58.083]     })
[17:46:58.083]     if (TRUE) {
[17:46:58.083]         base::sink(type = "output", split = FALSE)
[17:46:58.083]         if (TRUE) {
[17:46:58.083]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.083]         }
[17:46:58.083]         else {
[17:46:58.083]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.083]         }
[17:46:58.083]         base::close(...future.stdout)
[17:46:58.083]         ...future.stdout <- NULL
[17:46:58.083]     }
[17:46:58.083]     ...future.result$conditions <- ...future.conditions
[17:46:58.083]     ...future.result$finished <- base::Sys.time()
[17:46:58.083]     ...future.result
[17:46:58.083] }
[17:46:58.086] requestCore(): workers = 2
[17:46:58.087] MulticoreFuture started
[17:46:58.088] - Launch lazy future ... done
[17:46:58.088] run() for ‘MulticoreFuture’ ... done
[17:46:58.088] result() for MulticoreFuture ...
[17:46:58.089] plan(): Setting new future strategy stack:
[17:46:58.089] List of future strategies:
[17:46:58.089] 1. sequential:
[17:46:58.089]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.089]    - tweaked: FALSE
[17:46:58.089]    - call: NULL
[17:46:58.090] plan(): nbrOfWorkers() = 1
[17:46:58.092] plan(): Setting new future strategy stack:
[17:46:58.092] List of future strategies:
[17:46:58.092] 1. multicore:
[17:46:58.092]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:58.092]    - tweaked: FALSE
[17:46:58.092]    - call: plan(strategy)
[17:46:58.097] plan(): nbrOfWorkers() = 2
[17:46:58.098] result() for MulticoreFuture ...
[17:46:58.098] result() for MulticoreFuture ... done
[17:46:58.098] result() for MulticoreFuture ... done
[17:46:58.098] result() for MulticoreFuture ...
[17:46:58.098] result() for MulticoreFuture ... done
[17:46:58.099] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:46:58.099] Searching for globals...
[17:46:58.101] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.101] Searching for globals...
[17:46:58.102] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:46:58.102] Searching for globals ... DONE
[17:46:58.103] Resolving globals: FALSE
[17:46:58.103] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:58.104] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:58.104] - globals: [1] ‘data’
[17:46:58.104] 
[17:46:58.104] getGlobalsAndPackages() ... DONE
[17:46:58.104] run() for ‘Future’ ...
[17:46:58.105] - state: ‘created’
[17:46:58.105] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:58.109] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:58.109] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:58.109]   - Field: ‘label’
[17:46:58.109]   - Field: ‘local’
[17:46:58.109]   - Field: ‘owner’
[17:46:58.109]   - Field: ‘envir’
[17:46:58.110]   - Field: ‘workers’
[17:46:58.110]   - Field: ‘packages’
[17:46:58.110]   - Field: ‘gc’
[17:46:58.110]   - Field: ‘job’
[17:46:58.110]   - Field: ‘conditions’
[17:46:58.110]   - Field: ‘expr’
[17:46:58.110]   - Field: ‘uuid’
[17:46:58.110]   - Field: ‘seed’
[17:46:58.110]   - Field: ‘version’
[17:46:58.111]   - Field: ‘result’
[17:46:58.111]   - Field: ‘asynchronous’
[17:46:58.111]   - Field: ‘calls’
[17:46:58.111]   - Field: ‘globals’
[17:46:58.111]   - Field: ‘stdout’
[17:46:58.111]   - Field: ‘earlySignal’
[17:46:58.111]   - Field: ‘lazy’
[17:46:58.111]   - Field: ‘state’
[17:46:58.111] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:58.112] - Launch lazy future ...
[17:46:58.112] Packages needed by the future expression (n = 0): <none>
[17:46:58.112] Packages needed by future strategies (n = 0): <none>
[17:46:58.113] {
[17:46:58.113]     {
[17:46:58.113]         {
[17:46:58.113]             ...future.startTime <- base::Sys.time()
[17:46:58.113]             {
[17:46:58.113]                 {
[17:46:58.113]                   {
[17:46:58.113]                     {
[17:46:58.113]                       base::local({
[17:46:58.113]                         has_future <- base::requireNamespace("future", 
[17:46:58.113]                           quietly = TRUE)
[17:46:58.113]                         if (has_future) {
[17:46:58.113]                           ns <- base::getNamespace("future")
[17:46:58.113]                           version <- ns[[".package"]][["version"]]
[17:46:58.113]                           if (is.null(version)) 
[17:46:58.113]                             version <- utils::packageVersion("future")
[17:46:58.113]                         }
[17:46:58.113]                         else {
[17:46:58.113]                           version <- NULL
[17:46:58.113]                         }
[17:46:58.113]                         if (!has_future || version < "1.8.0") {
[17:46:58.113]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.113]                             "", base::R.version$version.string), 
[17:46:58.113]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.113]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.113]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.113]                               "release", "version")], collapse = " "), 
[17:46:58.113]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.113]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.113]                             info)
[17:46:58.113]                           info <- base::paste(info, collapse = "; ")
[17:46:58.113]                           if (!has_future) {
[17:46:58.113]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.113]                               info)
[17:46:58.113]                           }
[17:46:58.113]                           else {
[17:46:58.113]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.113]                               info, version)
[17:46:58.113]                           }
[17:46:58.113]                           base::stop(msg)
[17:46:58.113]                         }
[17:46:58.113]                       })
[17:46:58.113]                     }
[17:46:58.113]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:58.113]                     base::options(mc.cores = 1L)
[17:46:58.113]                   }
[17:46:58.113]                   ...future.strategy.old <- future::plan("list")
[17:46:58.113]                   options(future.plan = NULL)
[17:46:58.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.113]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.113]                 }
[17:46:58.113]                 ...future.workdir <- getwd()
[17:46:58.113]             }
[17:46:58.113]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.113]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.113]         }
[17:46:58.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.113]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.113]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.113]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.113]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.113]             base::names(...future.oldOptions))
[17:46:58.113]     }
[17:46:58.113]     if (FALSE) {
[17:46:58.113]     }
[17:46:58.113]     else {
[17:46:58.113]         if (TRUE) {
[17:46:58.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.113]                 open = "w")
[17:46:58.113]         }
[17:46:58.113]         else {
[17:46:58.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.113]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.113]         }
[17:46:58.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.113]             base::sink(type = "output", split = FALSE)
[17:46:58.113]             base::close(...future.stdout)
[17:46:58.113]         }, add = TRUE)
[17:46:58.113]     }
[17:46:58.113]     ...future.frame <- base::sys.nframe()
[17:46:58.113]     ...future.conditions <- base::list()
[17:46:58.113]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.113]     if (FALSE) {
[17:46:58.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.113]     }
[17:46:58.113]     ...future.result <- base::tryCatch({
[17:46:58.113]         base::withCallingHandlers({
[17:46:58.113]             ...future.value <- base::withVisible(base::local({
[17:46:58.113]                 withCallingHandlers({
[17:46:58.113]                   subset(data, x < 3)$y
[17:46:58.113]                 }, immediateCondition = function(cond) {
[17:46:58.113]                   save_rds <- function (object, pathname, ...) 
[17:46:58.113]                   {
[17:46:58.113]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:58.113]                     if (file_test("-f", pathname_tmp)) {
[17:46:58.113]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.113]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:58.113]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.113]                         fi_tmp[["mtime"]])
[17:46:58.113]                     }
[17:46:58.113]                     tryCatch({
[17:46:58.113]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:58.113]                     }, error = function(ex) {
[17:46:58.113]                       msg <- conditionMessage(ex)
[17:46:58.113]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.113]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:58.113]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.113]                         fi_tmp[["mtime"]], msg)
[17:46:58.113]                       ex$message <- msg
[17:46:58.113]                       stop(ex)
[17:46:58.113]                     })
[17:46:58.113]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:58.113]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:58.113]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:58.113]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.113]                       fi <- file.info(pathname)
[17:46:58.113]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:58.113]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.113]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:58.113]                         fi[["size"]], fi[["mtime"]])
[17:46:58.113]                       stop(msg)
[17:46:58.113]                     }
[17:46:58.113]                     invisible(pathname)
[17:46:58.113]                   }
[17:46:58.113]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:58.113]                     rootPath = tempdir()) 
[17:46:58.113]                   {
[17:46:58.113]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:58.113]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:58.113]                       tmpdir = path, fileext = ".rds")
[17:46:58.113]                     save_rds(obj, file)
[17:46:58.113]                   }
[17:46:58.113]                   saveImmediateCondition(cond, path = "/tmp/RtmpJEWZHY/.future/immediateConditions")
[17:46:58.113]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.113]                   {
[17:46:58.113]                     inherits <- base::inherits
[17:46:58.113]                     invokeRestart <- base::invokeRestart
[17:46:58.113]                     is.null <- base::is.null
[17:46:58.113]                     muffled <- FALSE
[17:46:58.113]                     if (inherits(cond, "message")) {
[17:46:58.113]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:58.113]                       if (muffled) 
[17:46:58.113]                         invokeRestart("muffleMessage")
[17:46:58.113]                     }
[17:46:58.113]                     else if (inherits(cond, "warning")) {
[17:46:58.113]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:58.113]                       if (muffled) 
[17:46:58.113]                         invokeRestart("muffleWarning")
[17:46:58.113]                     }
[17:46:58.113]                     else if (inherits(cond, "condition")) {
[17:46:58.113]                       if (!is.null(pattern)) {
[17:46:58.113]                         computeRestarts <- base::computeRestarts
[17:46:58.113]                         grepl <- base::grepl
[17:46:58.113]                         restarts <- computeRestarts(cond)
[17:46:58.113]                         for (restart in restarts) {
[17:46:58.113]                           name <- restart$name
[17:46:58.113]                           if (is.null(name)) 
[17:46:58.113]                             next
[17:46:58.113]                           if (!grepl(pattern, name)) 
[17:46:58.113]                             next
[17:46:58.113]                           invokeRestart(restart)
[17:46:58.113]                           muffled <- TRUE
[17:46:58.113]                           break
[17:46:58.113]                         }
[17:46:58.113]                       }
[17:46:58.113]                     }
[17:46:58.113]                     invisible(muffled)
[17:46:58.113]                   }
[17:46:58.113]                   muffleCondition(cond)
[17:46:58.113]                 })
[17:46:58.113]             }))
[17:46:58.113]             future::FutureResult(value = ...future.value$value, 
[17:46:58.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.113]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.113]                     ...future.globalenv.names))
[17:46:58.113]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.113]         }, condition = base::local({
[17:46:58.113]             c <- base::c
[17:46:58.113]             inherits <- base::inherits
[17:46:58.113]             invokeRestart <- base::invokeRestart
[17:46:58.113]             length <- base::length
[17:46:58.113]             list <- base::list
[17:46:58.113]             seq.int <- base::seq.int
[17:46:58.113]             signalCondition <- base::signalCondition
[17:46:58.113]             sys.calls <- base::sys.calls
[17:46:58.113]             `[[` <- base::`[[`
[17:46:58.113]             `+` <- base::`+`
[17:46:58.113]             `<<-` <- base::`<<-`
[17:46:58.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.113]                   3L)]
[17:46:58.113]             }
[17:46:58.113]             function(cond) {
[17:46:58.113]                 is_error <- inherits(cond, "error")
[17:46:58.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.113]                   NULL)
[17:46:58.113]                 if (is_error) {
[17:46:58.113]                   sessionInformation <- function() {
[17:46:58.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.113]                       search = base::search(), system = base::Sys.info())
[17:46:58.113]                   }
[17:46:58.113]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.113]                     cond$call), session = sessionInformation(), 
[17:46:58.113]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.113]                   signalCondition(cond)
[17:46:58.113]                 }
[17:46:58.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.113]                 "immediateCondition"))) {
[17:46:58.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.113]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.113]                   if (TRUE && !signal) {
[17:46:58.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.113]                     {
[17:46:58.113]                       inherits <- base::inherits
[17:46:58.113]                       invokeRestart <- base::invokeRestart
[17:46:58.113]                       is.null <- base::is.null
[17:46:58.113]                       muffled <- FALSE
[17:46:58.113]                       if (inherits(cond, "message")) {
[17:46:58.113]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.113]                         if (muffled) 
[17:46:58.113]                           invokeRestart("muffleMessage")
[17:46:58.113]                       }
[17:46:58.113]                       else if (inherits(cond, "warning")) {
[17:46:58.113]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.113]                         if (muffled) 
[17:46:58.113]                           invokeRestart("muffleWarning")
[17:46:58.113]                       }
[17:46:58.113]                       else if (inherits(cond, "condition")) {
[17:46:58.113]                         if (!is.null(pattern)) {
[17:46:58.113]                           computeRestarts <- base::computeRestarts
[17:46:58.113]                           grepl <- base::grepl
[17:46:58.113]                           restarts <- computeRestarts(cond)
[17:46:58.113]                           for (restart in restarts) {
[17:46:58.113]                             name <- restart$name
[17:46:58.113]                             if (is.null(name)) 
[17:46:58.113]                               next
[17:46:58.113]                             if (!grepl(pattern, name)) 
[17:46:58.113]                               next
[17:46:58.113]                             invokeRestart(restart)
[17:46:58.113]                             muffled <- TRUE
[17:46:58.113]                             break
[17:46:58.113]                           }
[17:46:58.113]                         }
[17:46:58.113]                       }
[17:46:58.113]                       invisible(muffled)
[17:46:58.113]                     }
[17:46:58.113]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.113]                   }
[17:46:58.113]                 }
[17:46:58.113]                 else {
[17:46:58.113]                   if (TRUE) {
[17:46:58.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.113]                     {
[17:46:58.113]                       inherits <- base::inherits
[17:46:58.113]                       invokeRestart <- base::invokeRestart
[17:46:58.113]                       is.null <- base::is.null
[17:46:58.113]                       muffled <- FALSE
[17:46:58.113]                       if (inherits(cond, "message")) {
[17:46:58.113]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.113]                         if (muffled) 
[17:46:58.113]                           invokeRestart("muffleMessage")
[17:46:58.113]                       }
[17:46:58.113]                       else if (inherits(cond, "warning")) {
[17:46:58.113]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.113]                         if (muffled) 
[17:46:58.113]                           invokeRestart("muffleWarning")
[17:46:58.113]                       }
[17:46:58.113]                       else if (inherits(cond, "condition")) {
[17:46:58.113]                         if (!is.null(pattern)) {
[17:46:58.113]                           computeRestarts <- base::computeRestarts
[17:46:58.113]                           grepl <- base::grepl
[17:46:58.113]                           restarts <- computeRestarts(cond)
[17:46:58.113]                           for (restart in restarts) {
[17:46:58.113]                             name <- restart$name
[17:46:58.113]                             if (is.null(name)) 
[17:46:58.113]                               next
[17:46:58.113]                             if (!grepl(pattern, name)) 
[17:46:58.113]                               next
[17:46:58.113]                             invokeRestart(restart)
[17:46:58.113]                             muffled <- TRUE
[17:46:58.113]                             break
[17:46:58.113]                           }
[17:46:58.113]                         }
[17:46:58.113]                       }
[17:46:58.113]                       invisible(muffled)
[17:46:58.113]                     }
[17:46:58.113]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.113]                   }
[17:46:58.113]                 }
[17:46:58.113]             }
[17:46:58.113]         }))
[17:46:58.113]     }, error = function(ex) {
[17:46:58.113]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.113]                 ...future.rng), started = ...future.startTime, 
[17:46:58.113]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.113]             version = "1.8"), class = "FutureResult")
[17:46:58.113]     }, finally = {
[17:46:58.113]         if (!identical(...future.workdir, getwd())) 
[17:46:58.113]             setwd(...future.workdir)
[17:46:58.113]         {
[17:46:58.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.113]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.113]             }
[17:46:58.113]             base::options(...future.oldOptions)
[17:46:58.113]             if (.Platform$OS.type == "windows") {
[17:46:58.113]                 old_names <- names(...future.oldEnvVars)
[17:46:58.113]                 envs <- base::Sys.getenv()
[17:46:58.113]                 names <- names(envs)
[17:46:58.113]                 common <- intersect(names, old_names)
[17:46:58.113]                 added <- setdiff(names, old_names)
[17:46:58.113]                 removed <- setdiff(old_names, names)
[17:46:58.113]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.113]                   envs[common]]
[17:46:58.113]                 NAMES <- toupper(changed)
[17:46:58.113]                 args <- list()
[17:46:58.113]                 for (kk in seq_along(NAMES)) {
[17:46:58.113]                   name <- changed[[kk]]
[17:46:58.113]                   NAME <- NAMES[[kk]]
[17:46:58.113]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.113]                     next
[17:46:58.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.113]                 }
[17:46:58.113]                 NAMES <- toupper(added)
[17:46:58.113]                 for (kk in seq_along(NAMES)) {
[17:46:58.113]                   name <- added[[kk]]
[17:46:58.113]                   NAME <- NAMES[[kk]]
[17:46:58.113]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.113]                     next
[17:46:58.113]                   args[[name]] <- ""
[17:46:58.113]                 }
[17:46:58.113]                 NAMES <- toupper(removed)
[17:46:58.113]                 for (kk in seq_along(NAMES)) {
[17:46:58.113]                   name <- removed[[kk]]
[17:46:58.113]                   NAME <- NAMES[[kk]]
[17:46:58.113]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.113]                     next
[17:46:58.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.113]                 }
[17:46:58.113]                 if (length(args) > 0) 
[17:46:58.113]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.113]             }
[17:46:58.113]             else {
[17:46:58.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.113]             }
[17:46:58.113]             {
[17:46:58.113]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.113]                   0L) {
[17:46:58.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.113]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.113]                   base::options(opts)
[17:46:58.113]                 }
[17:46:58.113]                 {
[17:46:58.113]                   {
[17:46:58.113]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:58.113]                     NULL
[17:46:58.113]                   }
[17:46:58.113]                   options(future.plan = NULL)
[17:46:58.113]                   if (is.na(NA_character_)) 
[17:46:58.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.113]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.113]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.113]                     .init = FALSE)
[17:46:58.113]                 }
[17:46:58.113]             }
[17:46:58.113]         }
[17:46:58.113]     })
[17:46:58.113]     if (TRUE) {
[17:46:58.113]         base::sink(type = "output", split = FALSE)
[17:46:58.113]         if (TRUE) {
[17:46:58.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.113]         }
[17:46:58.113]         else {
[17:46:58.113]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.113]         }
[17:46:58.113]         base::close(...future.stdout)
[17:46:58.113]         ...future.stdout <- NULL
[17:46:58.113]     }
[17:46:58.113]     ...future.result$conditions <- ...future.conditions
[17:46:58.113]     ...future.result$finished <- base::Sys.time()
[17:46:58.113]     ...future.result
[17:46:58.113] }
[17:46:58.115] assign_globals() ...
[17:46:58.115] List of 1
[17:46:58.115]  $ data:'data.frame':	5 obs. of  2 variables:
[17:46:58.115]   ..$ x: int [1:5] 1 2 3 4 5
[17:46:58.115]   ..$ y: int [1:5] 1 2 3 4 5
[17:46:58.115]  - attr(*, "where")=List of 1
[17:46:58.115]   ..$ data:<environment: R_EmptyEnv> 
[17:46:58.115]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:58.115]  - attr(*, "resolved")= logi FALSE
[17:46:58.115]  - attr(*, "total_size")= num 160
[17:46:58.115]  - attr(*, "already-done")= logi TRUE
[17:46:58.121] - copied ‘data’ to environment
[17:46:58.122] assign_globals() ... done
[17:46:58.122] requestCore(): workers = 2
[17:46:58.124] MulticoreFuture started
[17:46:58.124] - Launch lazy future ... done
[17:46:58.125] run() for ‘MulticoreFuture’ ... done
[17:46:58.125] result() for MulticoreFuture ...
[17:46:58.125] plan(): Setting new future strategy stack:
[17:46:58.125] List of future strategies:
[17:46:58.125] 1. sequential:
[17:46:58.125]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.125]    - tweaked: FALSE
[17:46:58.125]    - call: NULL
[17:46:58.127] plan(): nbrOfWorkers() = 1
[17:46:58.129] plan(): Setting new future strategy stack:
[17:46:58.129] List of future strategies:
[17:46:58.129] 1. multicore:
[17:46:58.129]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:58.129]    - tweaked: FALSE
[17:46:58.129]    - call: plan(strategy)
[17:46:58.134] plan(): nbrOfWorkers() = 2
[17:46:58.135] result() for MulticoreFuture ...
[17:46:58.136] result() for MulticoreFuture ... done
[17:46:58.136] result() for MulticoreFuture ... done
[17:46:58.136] result() for MulticoreFuture ...
[17:46:58.136] result() for MulticoreFuture ... done
[17:46:58.136] plan(): Setting new future strategy stack:
[17:46:58.136] List of future strategies:
[17:46:58.136] 1. sequential:
[17:46:58.136]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.136]    - tweaked: FALSE
[17:46:58.136]    - call: plan(list(sequential, strategy))
[17:46:58.136] 2. multicore:
[17:46:58.136]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:58.136]    - tweaked: FALSE
[17:46:58.136]    - call: plan(list(sequential, strategy))
[17:46:58.137] plan(): nbrOfWorkers() = 1
[17:46:58.138] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.138] Searching for globals...
[17:46:58.142] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:46:58.142] Searching for globals ... DONE
[17:46:58.142] Resolving globals: FALSE
[17:46:58.143] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:58.143] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:58.144] - globals: [1] ‘data’
[17:46:58.144] - packages: [1] ‘future’
[17:46:58.144] getGlobalsAndPackages() ... DONE
[17:46:58.144] run() for ‘Future’ ...
[17:46:58.144] - state: ‘created’
[17:46:58.145] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:58.145] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:58.145] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:58.145]   - Field: ‘label’
[17:46:58.145]   - Field: ‘local’
[17:46:58.145]   - Field: ‘owner’
[17:46:58.146]   - Field: ‘envir’
[17:46:58.146]   - Field: ‘packages’
[17:46:58.146]   - Field: ‘gc’
[17:46:58.146]   - Field: ‘conditions’
[17:46:58.146]   - Field: ‘expr’
[17:46:58.146]   - Field: ‘uuid’
[17:46:58.146]   - Field: ‘seed’
[17:46:58.146]   - Field: ‘version’
[17:46:58.146]   - Field: ‘result’
[17:46:58.147]   - Field: ‘asynchronous’
[17:46:58.147]   - Field: ‘calls’
[17:46:58.147]   - Field: ‘globals’
[17:46:58.147]   - Field: ‘stdout’
[17:46:58.147]   - Field: ‘earlySignal’
[17:46:58.147]   - Field: ‘lazy’
[17:46:58.147]   - Field: ‘state’
[17:46:58.147] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:58.147] - Launch lazy future ...
[17:46:58.148] Packages needed by the future expression (n = 1): ‘future’
[17:46:58.148] Packages needed by future strategies (n = 1): ‘future’
[17:46:58.148] {
[17:46:58.148]     {
[17:46:58.148]         {
[17:46:58.148]             ...future.startTime <- base::Sys.time()
[17:46:58.148]             {
[17:46:58.148]                 {
[17:46:58.148]                   {
[17:46:58.148]                     {
[17:46:58.148]                       base::local({
[17:46:58.148]                         has_future <- base::requireNamespace("future", 
[17:46:58.148]                           quietly = TRUE)
[17:46:58.148]                         if (has_future) {
[17:46:58.148]                           ns <- base::getNamespace("future")
[17:46:58.148]                           version <- ns[[".package"]][["version"]]
[17:46:58.148]                           if (is.null(version)) 
[17:46:58.148]                             version <- utils::packageVersion("future")
[17:46:58.148]                         }
[17:46:58.148]                         else {
[17:46:58.148]                           version <- NULL
[17:46:58.148]                         }
[17:46:58.148]                         if (!has_future || version < "1.8.0") {
[17:46:58.148]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.148]                             "", base::R.version$version.string), 
[17:46:58.148]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.148]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.148]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.148]                               "release", "version")], collapse = " "), 
[17:46:58.148]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.148]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.148]                             info)
[17:46:58.148]                           info <- base::paste(info, collapse = "; ")
[17:46:58.148]                           if (!has_future) {
[17:46:58.148]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.148]                               info)
[17:46:58.148]                           }
[17:46:58.148]                           else {
[17:46:58.148]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.148]                               info, version)
[17:46:58.148]                           }
[17:46:58.148]                           base::stop(msg)
[17:46:58.148]                         }
[17:46:58.148]                       })
[17:46:58.148]                     }
[17:46:58.148]                     base::local({
[17:46:58.148]                       for (pkg in "future") {
[17:46:58.148]                         base::loadNamespace(pkg)
[17:46:58.148]                         base::library(pkg, character.only = TRUE)
[17:46:58.148]                       }
[17:46:58.148]                     })
[17:46:58.148]                   }
[17:46:58.148]                   ...future.strategy.old <- future::plan("list")
[17:46:58.148]                   options(future.plan = NULL)
[17:46:58.148]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.148]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[17:46:58.148]                     envir = parent.frame()) 
[17:46:58.148]                   {
[17:46:58.148]                     default_workers <- missing(workers)
[17:46:58.148]                     if (is.function(workers)) 
[17:46:58.148]                       workers <- workers()
[17:46:58.148]                     workers <- structure(as.integer(workers), 
[17:46:58.148]                       class = class(workers))
[17:46:58.148]                     stop_if_not(is.finite(workers), workers >= 
[17:46:58.148]                       1L)
[17:46:58.148]                     if ((workers == 1L && !inherits(workers, 
[17:46:58.148]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[17:46:58.148]                       if (default_workers) 
[17:46:58.148]                         supportsMulticore(warn = TRUE)
[17:46:58.148]                       return(sequential(..., envir = envir))
[17:46:58.148]                     }
[17:46:58.148]                     oopts <- options(mc.cores = workers)
[17:46:58.148]                     on.exit(options(oopts))
[17:46:58.148]                     future <- MulticoreFuture(..., workers = workers, 
[17:46:58.148]                       envir = envir)
[17:46:58.148]                     if (!future$lazy) 
[17:46:58.148]                       future <- run(future)
[17:46:58.148]                     invisible(future)
[17:46:58.148]                   }), .cleanup = FALSE, .init = FALSE)
[17:46:58.148]                 }
[17:46:58.148]                 ...future.workdir <- getwd()
[17:46:58.148]             }
[17:46:58.148]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.148]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.148]         }
[17:46:58.148]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.148]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.148]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.148]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.148]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.148]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.148]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.148]             base::names(...future.oldOptions))
[17:46:58.148]     }
[17:46:58.148]     if (FALSE) {
[17:46:58.148]     }
[17:46:58.148]     else {
[17:46:58.148]         if (TRUE) {
[17:46:58.148]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.148]                 open = "w")
[17:46:58.148]         }
[17:46:58.148]         else {
[17:46:58.148]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.148]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.148]         }
[17:46:58.148]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.148]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.148]             base::sink(type = "output", split = FALSE)
[17:46:58.148]             base::close(...future.stdout)
[17:46:58.148]         }, add = TRUE)
[17:46:58.148]     }
[17:46:58.148]     ...future.frame <- base::sys.nframe()
[17:46:58.148]     ...future.conditions <- base::list()
[17:46:58.148]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.148]     if (FALSE) {
[17:46:58.148]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.148]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.148]     }
[17:46:58.148]     ...future.result <- base::tryCatch({
[17:46:58.148]         base::withCallingHandlers({
[17:46:58.148]             ...future.value <- base::withVisible(base::local({
[17:46:58.148]                 a %<-% subset(data, x < 3)$y
[17:46:58.148]                 a
[17:46:58.148]             }))
[17:46:58.148]             future::FutureResult(value = ...future.value$value, 
[17:46:58.148]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.148]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.148]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.148]                     ...future.globalenv.names))
[17:46:58.148]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.148]         }, condition = base::local({
[17:46:58.148]             c <- base::c
[17:46:58.148]             inherits <- base::inherits
[17:46:58.148]             invokeRestart <- base::invokeRestart
[17:46:58.148]             length <- base::length
[17:46:58.148]             list <- base::list
[17:46:58.148]             seq.int <- base::seq.int
[17:46:58.148]             signalCondition <- base::signalCondition
[17:46:58.148]             sys.calls <- base::sys.calls
[17:46:58.148]             `[[` <- base::`[[`
[17:46:58.148]             `+` <- base::`+`
[17:46:58.148]             `<<-` <- base::`<<-`
[17:46:58.148]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.148]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.148]                   3L)]
[17:46:58.148]             }
[17:46:58.148]             function(cond) {
[17:46:58.148]                 is_error <- inherits(cond, "error")
[17:46:58.148]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.148]                   NULL)
[17:46:58.148]                 if (is_error) {
[17:46:58.148]                   sessionInformation <- function() {
[17:46:58.148]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.148]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.148]                       search = base::search(), system = base::Sys.info())
[17:46:58.148]                   }
[17:46:58.148]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.148]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.148]                     cond$call), session = sessionInformation(), 
[17:46:58.148]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.148]                   signalCondition(cond)
[17:46:58.148]                 }
[17:46:58.148]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.148]                 "immediateCondition"))) {
[17:46:58.148]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.148]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.148]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.148]                   if (TRUE && !signal) {
[17:46:58.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.148]                     {
[17:46:58.148]                       inherits <- base::inherits
[17:46:58.148]                       invokeRestart <- base::invokeRestart
[17:46:58.148]                       is.null <- base::is.null
[17:46:58.148]                       muffled <- FALSE
[17:46:58.148]                       if (inherits(cond, "message")) {
[17:46:58.148]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.148]                         if (muffled) 
[17:46:58.148]                           invokeRestart("muffleMessage")
[17:46:58.148]                       }
[17:46:58.148]                       else if (inherits(cond, "warning")) {
[17:46:58.148]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.148]                         if (muffled) 
[17:46:58.148]                           invokeRestart("muffleWarning")
[17:46:58.148]                       }
[17:46:58.148]                       else if (inherits(cond, "condition")) {
[17:46:58.148]                         if (!is.null(pattern)) {
[17:46:58.148]                           computeRestarts <- base::computeRestarts
[17:46:58.148]                           grepl <- base::grepl
[17:46:58.148]                           restarts <- computeRestarts(cond)
[17:46:58.148]                           for (restart in restarts) {
[17:46:58.148]                             name <- restart$name
[17:46:58.148]                             if (is.null(name)) 
[17:46:58.148]                               next
[17:46:58.148]                             if (!grepl(pattern, name)) 
[17:46:58.148]                               next
[17:46:58.148]                             invokeRestart(restart)
[17:46:58.148]                             muffled <- TRUE
[17:46:58.148]                             break
[17:46:58.148]                           }
[17:46:58.148]                         }
[17:46:58.148]                       }
[17:46:58.148]                       invisible(muffled)
[17:46:58.148]                     }
[17:46:58.148]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.148]                   }
[17:46:58.148]                 }
[17:46:58.148]                 else {
[17:46:58.148]                   if (TRUE) {
[17:46:58.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.148]                     {
[17:46:58.148]                       inherits <- base::inherits
[17:46:58.148]                       invokeRestart <- base::invokeRestart
[17:46:58.148]                       is.null <- base::is.null
[17:46:58.148]                       muffled <- FALSE
[17:46:58.148]                       if (inherits(cond, "message")) {
[17:46:58.148]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.148]                         if (muffled) 
[17:46:58.148]                           invokeRestart("muffleMessage")
[17:46:58.148]                       }
[17:46:58.148]                       else if (inherits(cond, "warning")) {
[17:46:58.148]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.148]                         if (muffled) 
[17:46:58.148]                           invokeRestart("muffleWarning")
[17:46:58.148]                       }
[17:46:58.148]                       else if (inherits(cond, "condition")) {
[17:46:58.148]                         if (!is.null(pattern)) {
[17:46:58.148]                           computeRestarts <- base::computeRestarts
[17:46:58.148]                           grepl <- base::grepl
[17:46:58.148]                           restarts <- computeRestarts(cond)
[17:46:58.148]                           for (restart in restarts) {
[17:46:58.148]                             name <- restart$name
[17:46:58.148]                             if (is.null(name)) 
[17:46:58.148]                               next
[17:46:58.148]                             if (!grepl(pattern, name)) 
[17:46:58.148]                               next
[17:46:58.148]                             invokeRestart(restart)
[17:46:58.148]                             muffled <- TRUE
[17:46:58.148]                             break
[17:46:58.148]                           }
[17:46:58.148]                         }
[17:46:58.148]                       }
[17:46:58.148]                       invisible(muffled)
[17:46:58.148]                     }
[17:46:58.148]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.148]                   }
[17:46:58.148]                 }
[17:46:58.148]             }
[17:46:58.148]         }))
[17:46:58.148]     }, error = function(ex) {
[17:46:58.148]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.148]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.148]                 ...future.rng), started = ...future.startTime, 
[17:46:58.148]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.148]             version = "1.8"), class = "FutureResult")
[17:46:58.148]     }, finally = {
[17:46:58.148]         if (!identical(...future.workdir, getwd())) 
[17:46:58.148]             setwd(...future.workdir)
[17:46:58.148]         {
[17:46:58.148]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.148]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.148]             }
[17:46:58.148]             base::options(...future.oldOptions)
[17:46:58.148]             if (.Platform$OS.type == "windows") {
[17:46:58.148]                 old_names <- names(...future.oldEnvVars)
[17:46:58.148]                 envs <- base::Sys.getenv()
[17:46:58.148]                 names <- names(envs)
[17:46:58.148]                 common <- intersect(names, old_names)
[17:46:58.148]                 added <- setdiff(names, old_names)
[17:46:58.148]                 removed <- setdiff(old_names, names)
[17:46:58.148]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.148]                   envs[common]]
[17:46:58.148]                 NAMES <- toupper(changed)
[17:46:58.148]                 args <- list()
[17:46:58.148]                 for (kk in seq_along(NAMES)) {
[17:46:58.148]                   name <- changed[[kk]]
[17:46:58.148]                   NAME <- NAMES[[kk]]
[17:46:58.148]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.148]                     next
[17:46:58.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.148]                 }
[17:46:58.148]                 NAMES <- toupper(added)
[17:46:58.148]                 for (kk in seq_along(NAMES)) {
[17:46:58.148]                   name <- added[[kk]]
[17:46:58.148]                   NAME <- NAMES[[kk]]
[17:46:58.148]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.148]                     next
[17:46:58.148]                   args[[name]] <- ""
[17:46:58.148]                 }
[17:46:58.148]                 NAMES <- toupper(removed)
[17:46:58.148]                 for (kk in seq_along(NAMES)) {
[17:46:58.148]                   name <- removed[[kk]]
[17:46:58.148]                   NAME <- NAMES[[kk]]
[17:46:58.148]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.148]                     next
[17:46:58.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.148]                 }
[17:46:58.148]                 if (length(args) > 0) 
[17:46:58.148]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.148]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.148]             }
[17:46:58.148]             else {
[17:46:58.148]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.148]             }
[17:46:58.148]             {
[17:46:58.148]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.148]                   0L) {
[17:46:58.148]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.148]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.148]                   base::options(opts)
[17:46:58.148]                 }
[17:46:58.148]                 {
[17:46:58.148]                   {
[17:46:58.148]                     NULL
[17:46:58.148]                     RNGkind("Mersenne-Twister")
[17:46:58.148]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:58.148]                       inherits = FALSE)
[17:46:58.148]                   }
[17:46:58.148]                   options(future.plan = NULL)
[17:46:58.148]                   if (is.na(NA_character_)) 
[17:46:58.148]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.148]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.148]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.148]                     .init = FALSE)
[17:46:58.148]                 }
[17:46:58.148]             }
[17:46:58.148]         }
[17:46:58.148]     })
[17:46:58.148]     if (TRUE) {
[17:46:58.148]         base::sink(type = "output", split = FALSE)
[17:46:58.148]         if (TRUE) {
[17:46:58.148]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.148]         }
[17:46:58.148]         else {
[17:46:58.148]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.148]         }
[17:46:58.148]         base::close(...future.stdout)
[17:46:58.148]         ...future.stdout <- NULL
[17:46:58.148]     }
[17:46:58.148]     ...future.result$conditions <- ...future.conditions
[17:46:58.148]     ...future.result$finished <- base::Sys.time()
[17:46:58.148]     ...future.result
[17:46:58.148] }
[17:46:58.151] assign_globals() ...
[17:46:58.151] List of 1
[17:46:58.151]  $ data:'data.frame':	5 obs. of  2 variables:
[17:46:58.151]   ..$ x: int [1:5] 1 2 3 4 5
[17:46:58.151]   ..$ y: int [1:5] 1 2 3 4 5
[17:46:58.151]  - attr(*, "where")=List of 1
[17:46:58.151]   ..$ data:<environment: R_EmptyEnv> 
[17:46:58.151]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:58.151]  - attr(*, "resolved")= logi FALSE
[17:46:58.151]  - attr(*, "total_size")= num 160
[17:46:58.151]  - attr(*, "already-done")= logi TRUE
[17:46:58.154] - copied ‘data’ to environment
[17:46:58.155] assign_globals() ... done
[17:46:58.155] plan(): Setting new future strategy stack:
[17:46:58.155] List of future strategies:
[17:46:58.155] 1. multicore:
[17:46:58.155]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:58.155]    - tweaked: FALSE
[17:46:58.155]    - call: plan(list(sequential, strategy))
[17:46:58.159] plan(): nbrOfWorkers() = 2
[17:46:58.209] plan(): Setting new future strategy stack:
[17:46:58.209] List of future strategies:
[17:46:58.209] 1. sequential:
[17:46:58.209]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.209]    - tweaked: FALSE
[17:46:58.209]    - call: plan(list(sequential, strategy))
[17:46:58.209] 2. multicore:
[17:46:58.209]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:58.209]    - tweaked: FALSE
[17:46:58.209]    - call: plan(list(sequential, strategy))
[17:46:58.210] plan(): nbrOfWorkers() = 1
[17:46:58.210] SequentialFuture started (and completed)
[17:46:58.210] signalConditions() ...
[17:46:58.210]  - include = ‘immediateCondition’
[17:46:58.210]  - exclude = 
[17:46:58.211]  - resignal = FALSE
[17:46:58.211]  - Number of conditions: 56
[17:46:58.211] signalConditions() ... done
[17:46:58.211] - Launch lazy future ... done
[17:46:58.211] run() for ‘SequentialFuture’ ... done
[17:46:58.211] signalConditions() ...
[17:46:58.211]  - include = ‘immediateCondition’
[17:46:58.212]  - exclude = 
[17:46:58.212]  - resignal = FALSE
[17:46:58.212]  - Number of conditions: 56
[17:46:58.212] signalConditions() ... done
[17:46:58.212] Future state: ‘finished’
[17:46:58.212] signalConditions() ...
[17:46:58.212]  - include = ‘condition’
[17:46:58.213]  - exclude = ‘immediateCondition’
[17:46:58.213]  - resignal = TRUE
[17:46:58.213]  - Number of conditions: 56
[17:46:58.213]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.160] getGlobalsAndPackages() ...
[17:46:58.213]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.213]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.176] Searching for globals...
[17:46:58.213]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.177] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:46:58.214]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.177] Searching for globals ... DONE
[17:46:58.214]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.177] Resolving globals: FALSE
[17:46:58.214]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.178] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:58.214]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.178] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:58.214]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.178] - globals: [1] ‘data’
[17:46:58.214]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.178] 
[17:46:58.215]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.178] getGlobalsAndPackages() ... DONE
[17:46:58.215]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.179] run() for ‘Future’ ...
[17:46:58.215]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.179] - state: ‘created’
[17:46:58.215]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.179] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:58.215]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.183] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:58.215]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.183] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:58.216]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.183]   - Field: ‘label’
[17:46:58.216]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.183]   - Field: ‘local’
[17:46:58.216]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.183]   - Field: ‘owner’
[17:46:58.216]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.183]   - Field: ‘envir’
[17:46:58.216]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.183]   - Field: ‘workers’
[17:46:58.216]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.183]   - Field: ‘packages’
[17:46:58.217]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘gc’
[17:46:58.217]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘job’
[17:46:58.217]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘conditions’
[17:46:58.217]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘expr’
[17:46:58.217]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘uuid’
[17:46:58.217]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘seed’
[17:46:58.218]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘version’
[17:46:58.218]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘result’
[17:46:58.218]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘asynchronous’
[17:46:58.218]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.184]   - Field: ‘calls’
[17:46:58.218]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.185]   - Field: ‘globals’
[17:46:58.218]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.185]   - Field: ‘stdout’
[17:46:58.218]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.185]   - Field: ‘earlySignal’
[17:46:58.219]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.185]   - Field: ‘lazy’
[17:46:58.219]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.185]   - Field: ‘state’
[17:46:58.219]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.185] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:58.219]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.185] - Launch lazy future ...
[17:46:58.219]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.185] Packages needed by the future expression (n = 0): <none>
[17:46:58.219]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.186] Packages needed by future strategies (n = 0): <none>
[17:46:58.220]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.186] {
[17:46:58.186]     {
[17:46:58.186]         {
[17:46:58.186]             ...future.startTime <- base::Sys.time()
[17:46:58.186]             {
[17:46:58.186]                 {
[17:46:58.186]                   {
[17:46:58.186]                     {
[17:46:58.186]                       base::local({
[17:46:58.186]                         has_future <- base::requireNamespace("future", 
[17:46:58.186]                           quietly = TRUE)
[17:46:58.186]                         if (has_future) {
[17:46:58.186]                           ns <- base::getNamespace("future")
[17:46:58.186]                           version <- ns[[".package"]][["version"]]
[17:46:58.186]                           if (is.null(version)) 
[17:46:58.186]                             version <- utils::packageVersion("future")
[17:46:58.186]                         }
[17:46:58.186]                         else {
[17:46:58.186]                           version <- NULL
[17:46:58.186]                         }
[17:46:58.186]                         if (!has_future || version < "1.8.0") {
[17:46:58.186]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.186]                             "", base::R.version$version.string), 
[17:46:58.186]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.186]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.186]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.186]                               "release", "version")], collapse = " "), 
[17:46:58.186]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.186]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.186]                             info)
[17:46:58.186]                           info <- base::paste(info, collapse = "; ")
[17:46:58.186]                           if (!has_future) {
[17:46:58.186]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.186]                               info)
[17:46:58.186]                           }
[17:46:58.186]                           else {
[17:46:58.186]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.186]                               info, version)
[17:46:58.186]                           }
[17:46:58.186]                           base::stop(msg)
[17:46:58.186]                         }
[17:46:58.186]                       })
[17:46:58.186]                     }
[17:46:58.186]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:58.186]                     base::options(mc.cores = 1L)
[17:46:58.186]                   }
[17:46:58.186]                   ...future.strategy.old <- future::plan("list")
[17:46:58.186]                   options(future.plan = NULL)
[17:46:58.186]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.186]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.186]                 }
[17:46:58.186]                 ...future.workdir <- getwd()
[17:46:58.186]             }
[17:46:58.186]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.186]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.186]         }
[17:46:58.186]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.186]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.186]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.186]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.186]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.186]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.186]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.186]             base::names(...future.oldOptions))
[17:46:58.186]     }
[17:46:58.186]     if (FALSE) {
[17:46:58.186]     }
[17:46:58.186]     else {
[17:46:58.186]         if (TRUE) {
[17:46:58.186]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.186]                 open = "w")
[17:46:58.186]         }
[17:46:58.186]         else {
[17:46:58.186]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.186]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.186]         }
[17:46:58.186]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.186]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.186]             base::sink(type = "output", split = FALSE)
[17:46:58.186]             base::close(...future.stdout)
[17:46:58.186]         }, add = TRUE)
[17:46:58.186]     }
[17:46:58.186]     ...future.frame <- base::sys.nframe()
[17:46:58.186]     ...future.conditions <- base::list()
[17:46:58.186]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.186]     if (FALSE) {
[17:46:58.186]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.186]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.186]     }
[17:46:58.186]     ...future.result <- base::tryCatch({
[17:46:58.186]         base::withCallingHandlers({
[17:46:58.186]             ...future.value <- base::withVisible(base::local({
[17:46:58.186]                 withCallingHandlers({
[17:46:58.186]                   subset(data, x < 3)$y
[17:46:58.186]                 }, immediateCondition = function(cond) {
[17:46:58.186]                   save_rds <- function (object, pathname, ...) 
[17:46:58.186]                   {
[17:46:58.186]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:58.186]                     if (file_test("-f", pathname_tmp)) {
[17:46:58.186]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.186]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:58.186]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.186]                         fi_tmp[["mtime"]])
[17:46:58.186]                     }
[17:46:58.186]                     tryCatch({
[17:46:58.186]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:58.186]                     }, error = function(ex) {
[17:46:58.186]                       msg <- conditionMessage(ex)
[17:46:58.186]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.186]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:58.186]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.186]                         fi_tmp[["mtime"]], msg)
[17:46:58.186]                       ex$message <- msg
[17:46:58.186]                       stop(ex)
[17:46:58.186]                     })
[17:46:58.186]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:58.186]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:58.186]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:58.186]                       fi_tmp <- file.info(pathname_tmp)
[17:46:58.186]                       fi <- file.info(pathname)
[17:46:58.186]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:58.186]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:58.186]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:58.186]                         fi[["size"]], fi[["mtime"]])
[17:46:58.186]                       stop(msg)
[17:46:58.186]                     }
[17:46:58.186]                     invisible(pathname)
[17:46:58.186]                   }
[17:46:58.186]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:58.186]                     rootPath = tempdir()) 
[17:46:58.186]                   {
[17:46:58.186]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:58.186]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:58.186]                       tmpdir = path, fileext = ".rds")
[17:46:58.186]                     save_rds(obj, file)
[17:46:58.186]                   }
[17:46:58.186]                   saveImmediateCondition(cond, path = "/tmp/RtmpJEWZHY/.future/immediateConditions")
[17:46:58.186]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.186]                   {
[17:46:58.186]                     inherits <- base::inherits
[17:46:58.186]                     invokeRestart <- base::invokeRestart
[17:46:58.186]                     is.null <- base::is.null
[17:46:58.186]                     muffled <- FALSE
[17:46:58.186]                     if (inherits(cond, "message")) {
[17:46:58.186]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:58.186]                       if (muffled) 
[17:46:58.186]                         invokeRestart("muffleMessage")
[17:46:58.186]                     }
[17:46:58.186]                     else if (inherits(cond, "warning")) {
[17:46:58.186]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:58.186]                       if (muffled) 
[17:46:58.186]                         invokeRestart("muffleWarning")
[17:46:58.186]                     }
[17:46:58.186]                     else if (inherits(cond, "condition")) {
[17:46:58.186]                       if (!is.null(pattern)) {
[17:46:58.186]                         computeRestarts <- base::computeRestarts
[17:46:58.186]                         grepl <- base::grepl
[17:46:58.186]                         restarts <- computeRestarts(cond)
[17:46:58.186]                         for (restart in restarts) {
[17:46:58.186]                           name <- restart$name
[17:46:58.186]                           if (is.null(name)) 
[17:46:58.186]                             next
[17:46:58.186]                           if (!grepl(pattern, name)) 
[17:46:58.186]                             next
[17:46:58.186]                           invokeRestart(restart)
[17:46:58.186]                           muffled <- TRUE
[17:46:58.186]                           break
[17:46:58.186]                         }
[17:46:58.186]                       }
[17:46:58.186]                     }
[17:46:58.186]                     invisible(muffled)
[17:46:58.186]                   }
[17:46:58.186]                   muffleCondition(cond)
[17:46:58.186]                 })
[17:46:58.186]             }))
[17:46:58.186]             future::FutureResult(value = ...future.value$value, 
[17:46:58.186]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.186]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.186]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.186]                     ...future.globalenv.names))
[17:46:58.186]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.186]         }, condition = base::local({
[17:46:58.186]             c <- base::c
[17:46:58.186]             inherits <- base::inherits
[17:46:58.186]             invokeRestart <- base::invokeRestart
[17:46:58.186]             length <- base::length
[17:46:58.186]             list <- base::list
[17:46:58.186]             seq.int <- base::seq.int
[17:46:58.186]             signalCondition <- base::signalCondition
[17:46:58.186]             sys.calls <- base::sys.calls
[17:46:58.186]             `[[` <- base::`[[`
[17:46:58.186]             `+` <- base::`+`
[17:46:58.186]             `<<-` <- base::`<<-`
[17:46:58.186]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.186]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.186]                   3L)]
[17:46:58.186]             }
[17:46:58.186]             function(cond) {
[17:46:58.186]                 is_error <- inherits(cond, "error")
[17:46:58.186]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.186]                   NULL)
[17:46:58.186]                 if (is_error) {
[17:46:58.186]                   sessionInformation <- function() {
[17:46:58.186]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.186]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.186]                       search = base::search(), system = base::Sys.info())
[17:46:58.186]                   }
[17:46:58.186]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.186]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.186]                     cond$call), session = sessionInformation(), 
[17:46:58.186]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.186]                   signalCondition(cond)
[17:46:58.186]                 }
[17:46:58.186]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.186]                 "immediateCondition"))) {
[17:46:58.186]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.186]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.186]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.186]                   if (TRUE && !signal) {
[17:46:58.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.186]                     {
[17:46:58.186]                       inherits <- base::inherits
[17:46:58.186]                       invokeRestart <- base::invokeRestart
[17:46:58.186]                       is.null <- base::is.null
[17:46:58.186]                       muffled <- FALSE
[17:46:58.186]                       if (inherits(cond, "message")) {
[17:46:58.186]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.186]                         if (muffled) 
[17:46:58.186]                           invokeRestart("muffleMessage")
[17:46:58.186]                       }
[17:46:58.186]                       else if (inherits(cond, "warning")) {
[17:46:58.186]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.186]                         if (muffled) 
[17:46:58.186]                           invokeRestart("muffleWarning")
[17:46:58.186]                       }
[17:46:58.186]                       else if (inherits(cond, "condition")) {
[17:46:58.186]                         if (!is.null(pattern)) {
[17:46:58.186]                           computeRestarts <- base::computeRestarts
[17:46:58.186]                           grepl <- base::grepl
[17:46:58.186]                           restarts <- computeRestarts(cond)
[17:46:58.186]                           for (restart in restarts) {
[17:46:58.186]                             name <- restart$name
[17:46:58.186]                             if (is.null(name)) 
[17:46:58.186]                               next
[17:46:58.186]                             if (!grepl(pattern, name)) 
[17:46:58.186]                               next
[17:46:58.186]                             invokeRestart(restart)
[17:46:58.186]                             muffled <- TRUE
[17:46:58.186]                             break
[17:46:58.186]                           }
[17:46:58.186]                         }
[17:46:58.186]                       }
[17:46:58.186]                       invisible(muffled)
[17:46:58.186]                     }
[17:46:58.186]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.186]                   }
[17:46:58.186]                 }
[17:46:58.186]                 else {
[17:46:58.186]                   if (TRUE) {
[17:46:58.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.186]                     {
[17:46:58.186]                       inherits <- base::inherits
[17:46:58.186]                       invokeRestart <- base::invokeRestart
[17:46:58.186]                       is.null <- base::is.null
[17:46:58.186]                       muffled <- FALSE
[17:46:58.186]                       if (inherits(cond, "message")) {
[17:46:58.186]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.186]                         if (muffled) 
[17:46:58.186]                           invokeRestart("muffleMessage")
[17:46:58.186]                       }
[17:46:58.186]                       else if (inherits(cond, "warning")) {
[17:46:58.186]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.186]                         if (muffled) 
[17:46:58.186]                           invokeRestart("muffleWarning")
[17:46:58.186]                       }
[17:46:58.186]                       else if (inherits(cond, "condition")) {
[17:46:58.186]                         if (!is.null(pattern)) {
[17:46:58.186]                           computeRestarts <- base::computeRestarts
[17:46:58.186]                           grepl <- base::grepl
[17:46:58.186]                           restarts <- computeRestarts(cond)
[17:46:58.186]                           for (restart in restarts) {
[17:46:58.186]                             name <- restart$name
[17:46:58.186]                             if (is.null(name)) 
[17:46:58.186]                               next
[17:46:58.186]                             if (!grepl(pattern, name)) 
[17:46:58.186]                               next
[17:46:58.186]                             invokeRestart(restart)
[17:46:58.186]                             muffled <- TRUE
[17:46:58.186]                             break
[17:46:58.186]                           }
[17:46:58.186]                         }
[17:46:58.186]                       }
[17:46:58.186]                       invisible(muffled)
[17:46:58.186]                     }
[17:46:58.186]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.186]                   }
[17:46:58.186]                 }
[17:46:58.186]             }
[17:46:58.186]         }))
[17:46:58.186]     }, error = function(ex) {
[17:46:58.186]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.186]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.186]                 ...future.rng), started = ...future.startTime, 
[17:46:58.186]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.186]             version = "1.8"), class = "FutureResult")
[17:46:58.186]     }, finally = {
[17:46:58.186]         if (!identical(...future.workdir, getwd())) 
[17:46:58.186]             setwd(...future.workdir)
[17:46:58.186]         {
[17:46:58.186]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.186]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.186]             }
[17:46:58.186]             base::options(...future.oldOptions)
[17:46:58.186]             if (.Platform$OS.type == "windows") {
[17:46:58.186]                 old_names <- names(...future.oldEnvVars)
[17:46:58.186]                 envs <- base::Sys.getenv()
[17:46:58.186]                 names <- names(envs)
[17:46:58.186]                 common <- intersect(names, old_names)
[17:46:58.186]                 added <- setdiff(names, old_names)
[17:46:58.186]                 removed <- setdiff(old_names, names)
[17:46:58.186]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.186]                   envs[common]]
[17:46:58.186]                 NAMES <- toupper(changed)
[17:46:58.186]                 args <- list()
[17:46:58.186]                 for (kk in seq_along(NAMES)) {
[17:46:58.186]                   name <- changed[[kk]]
[17:46:58.186]                   NAME <- NAMES[[kk]]
[17:46:58.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.186]                     next
[17:46:58.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.186]                 }
[17:46:58.186]                 NAMES <- toupper(added)
[17:46:58.186]                 for (kk in seq_along(NAMES)) {
[17:46:58.186]                   name <- added[[kk]]
[17:46:58.186]                   NAME <- NAMES[[kk]]
[17:46:58.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.186]                     next
[17:46:58.186]                   args[[name]] <- ""
[17:46:58.186]                 }
[17:46:58.186]                 NAMES <- toupper(removed)
[17:46:58.186]                 for (kk in seq_along(NAMES)) {
[17:46:58.186]                   name <- removed[[kk]]
[17:46:58.186]                   NAME <- NAMES[[kk]]
[17:46:58.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.186]                     next
[17:46:58.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.186]                 }
[17:46:58.186]                 if (length(args) > 0) 
[17:46:58.186]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.186]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.186]             }
[17:46:58.186]             else {
[17:46:58.186]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.186]             }
[17:46:58.186]             {
[17:46:58.186]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.186]                   0L) {
[17:46:58.186]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.186]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.186]                   base::options(opts)
[17:46:58.186]                 }
[17:46:58.186]                 {
[17:46:58.186]                   {
[17:46:58.186]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:58.186]                     NULL
[17:46:58.186]                   }
[17:46:58.186]                   options(future.plan = NULL)
[17:46:58.186]                   if (is.na(NA_character_)) 
[17:46:58.186]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.186]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.186]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.186]                     .init = FALSE)
[17:46:58.186]                 }
[17:46:58.186]             }
[17:46:58.186]         }
[17:46:58.186]     })
[17:46:58.186]     if (TRUE) {
[17:46:58.186]         base::sink(type = "output", split = FALSE)
[17:46:58.186]         if (TRUE) {
[17:46:58.186]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.186]         }
[17:46:58.186]         else {
[17:46:58.186]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.186]         }
[17:46:58.186]         base::close(...future.stdout)
[17:46:58.186]         ...future.stdout <- NULL
[17:46:58.186]     }
[17:46:58.186]     ...future.result$conditions <- ...future.conditions
[17:46:58.186]     ...future.result$finished <- base::Sys.time()
[17:46:58.186]     ...future.result
[17:46:58.186] }
[17:46:58.220]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.188] assign_globals() ...
[17:46:58.220]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.188] List of 1
[17:46:58.188]  $ data:'data.frame':	5 obs. of  2 variables:
[17:46:58.188]   ..$ x: int [1:5] 1 2 3 4 5
[17:46:58.188]   ..$ y: int [1:5] 1 2 3 4 5
[17:46:58.188]  - attr(*, "where")=List of 1
[17:46:58.188]   ..$ data:<environment: R_EmptyEnv> 
[17:46:58.188]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:58.188]  - attr(*, "resolved")= logi FALSE
[17:46:58.188]  - attr(*, "total_size")= num 160
[17:46:58.188]  - attr(*, "already-done")= logi TRUE
[17:46:58.220]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.193] - copied ‘data’ to environment
[17:46:58.220]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.193] assign_globals() ... done
[17:46:58.220]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.193] requestCore(): workers = 2
[17:46:58.221]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.195] MulticoreFuture started
[17:46:58.221]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.196] - Launch lazy future ... done
[17:46:58.221]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.196] run() for ‘MulticoreFuture’ ... done
[17:46:58.221]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.197] result() for MulticoreFuture ...
[17:46:58.221]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.207] result() for MulticoreFuture ...
[17:46:58.221]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.207] result() for MulticoreFuture ... done
[17:46:58.222]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.208] result() for MulticoreFuture ... done
[17:46:58.222]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.208] result() for MulticoreFuture ...
[17:46:58.222]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.208] result() for MulticoreFuture ... done
[17:46:58.222] signalConditions() ... done
- Strategy: multicore ... DONE
- Strategy: multisession ...
[17:46:58.223] plan(): Setting new future strategy stack:
[17:46:58.223] List of future strategies:
[17:46:58.223] 1. multisession:
[17:46:58.223]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:58.223]    - tweaked: FALSE
[17:46:58.223]    - call: plan(strategy)
[17:46:58.223] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:46:58.223] multisession:
[17:46:58.223] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:58.223] - tweaked: FALSE
[17:46:58.223] - call: plan(strategy)
[17:46:58.229] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.230] Not searching for globals
[17:46:58.230] - globals: [0] <none>
[17:46:58.230] getGlobalsAndPackages() ... DONE
[17:46:58.231] [local output] makeClusterPSOCK() ...
[17:46:58.273] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:46:58.275] [local output] Base port: 11425
[17:46:58.275] [local output] Getting setup options for 2 cluster nodes ...
[17:46:58.275] [local output]  - Node 1 of 2 ...
[17:46:58.275] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:58.276] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJEWZHY/worker.rank=1.parallelly.parent=43589.aa4564dd9f53.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpJEWZHY/worker.rank=1.parallelly.parent=43589.aa4564dd9f53.pid")'’
[17:46:58.463] - Possible to infer worker's PID: TRUE
[17:46:58.464] [local output] Rscript port: 11425

[17:46:58.464] [local output]  - Node 2 of 2 ...
[17:46:58.464] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:58.465] [local output] Rscript port: 11425

[17:46:58.465] [local output] Getting setup options for 2 cluster nodes ... done
[17:46:58.465] [local output]  - Parallel setup requested for some PSOCK nodes
[17:46:58.466] [local output] Setting up PSOCK nodes in parallel
[17:46:58.466] List of 36
[17:46:58.466]  $ worker          : chr "localhost"
[17:46:58.466]   ..- attr(*, "localhost")= logi TRUE
[17:46:58.466]  $ master          : chr "localhost"
[17:46:58.466]  $ port            : int 11425
[17:46:58.466]  $ connectTimeout  : num 120
[17:46:58.466]  $ timeout         : num 2592000
[17:46:58.466]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:46:58.466]  $ homogeneous     : logi TRUE
[17:46:58.466]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:46:58.466]  $ rscript_envs    : NULL
[17:46:58.466]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:58.466]  $ rscript_startup : NULL
[17:46:58.466]  $ rscript_sh      : chr "sh"
[17:46:58.466]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:58.466]  $ methods         : logi TRUE
[17:46:58.466]  $ socketOptions   : chr "no-delay"
[17:46:58.466]  $ useXDR          : logi FALSE
[17:46:58.466]  $ outfile         : chr "/dev/null"
[17:46:58.466]  $ renice          : int NA
[17:46:58.466]  $ rshcmd          : NULL
[17:46:58.466]  $ user            : chr(0) 
[17:46:58.466]  $ revtunnel       : logi FALSE
[17:46:58.466]  $ rshlogfile      : NULL
[17:46:58.466]  $ rshopts         : chr(0) 
[17:46:58.466]  $ rank            : int 1
[17:46:58.466]  $ manual          : logi FALSE
[17:46:58.466]  $ dryrun          : logi FALSE
[17:46:58.466]  $ quiet           : logi FALSE
[17:46:58.466]  $ setup_strategy  : chr "parallel"
[17:46:58.466]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:58.466]  $ pidfile         : chr "/tmp/RtmpJEWZHY/worker.rank=1.parallelly.parent=43589.aa4564dd9f53.pid"
[17:46:58.466]  $ rshcmd_label    : NULL
[17:46:58.466]  $ rsh_call        : NULL
[17:46:58.466]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:58.466]  $ localMachine    : logi TRUE
[17:46:58.466]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:46:58.466]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:46:58.466]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:46:58.466]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:46:58.466]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:46:58.466]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:46:58.466]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:46:58.466]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:46:58.466]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:46:58.466]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:46:58.466]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:46:58.466]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:46:58.466]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:46:58.466]  $ arguments       :List of 28
[17:46:58.466]   ..$ worker          : chr "localhost"
[17:46:58.466]   ..$ master          : NULL
[17:46:58.466]   ..$ port            : int 11425
[17:46:58.466]   ..$ connectTimeout  : num 120
[17:46:58.466]   ..$ timeout         : num 2592000
[17:46:58.466]   ..$ rscript         : NULL
[17:46:58.466]   ..$ homogeneous     : NULL
[17:46:58.466]   ..$ rscript_args    : NULL
[17:46:58.466]   ..$ rscript_envs    : NULL
[17:46:58.466]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:58.466]   ..$ rscript_startup : NULL
[17:46:58.466]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:46:58.466]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:58.466]   ..$ methods         : logi TRUE
[17:46:58.466]   ..$ socketOptions   : chr "no-delay"
[17:46:58.466]   ..$ useXDR          : logi FALSE
[17:46:58.466]   ..$ outfile         : chr "/dev/null"
[17:46:58.466]   ..$ renice          : int NA
[17:46:58.466]   ..$ rshcmd          : NULL
[17:46:58.466]   ..$ user            : NULL
[17:46:58.466]   ..$ revtunnel       : logi NA
[17:46:58.466]   ..$ rshlogfile      : NULL
[17:46:58.466]   ..$ rshopts         : NULL
[17:46:58.466]   ..$ rank            : int 1
[17:46:58.466]   ..$ manual          : logi FALSE
[17:46:58.466]   ..$ dryrun          : logi FALSE
[17:46:58.466]   ..$ quiet           : logi FALSE
[17:46:58.466]   ..$ setup_strategy  : chr "parallel"
[17:46:58.466]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:46:58.482] [local output] System call to launch all workers:
[17:46:58.482] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJEWZHY/worker.rank=1.parallelly.parent=43589.aa4564dd9f53.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11425 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:46:58.483] [local output] Starting PSOCK main server
[17:46:58.488] [local output] Workers launched
[17:46:58.488] [local output] Waiting for workers to connect back
[17:46:58.489]  - [local output] 0 workers out of 2 ready
[17:46:58.771]  - [local output] 0 workers out of 2 ready
[17:46:58.771]  - [local output] 1 workers out of 2 ready
[17:46:58.772]  - [local output] 2 workers out of 2 ready
[17:46:58.772] [local output] Launching of workers completed
[17:46:58.772] [local output] Collecting session information from workers
[17:46:58.773] [local output]  - Worker #1 of 2
[17:46:58.773] [local output]  - Worker #2 of 2
[17:46:58.774] [local output] makeClusterPSOCK() ... done
[17:46:58.786] Packages needed by the future expression (n = 0): <none>
[17:46:58.786] Packages needed by future strategies (n = 0): <none>
[17:46:58.787] {
[17:46:58.787]     {
[17:46:58.787]         {
[17:46:58.787]             ...future.startTime <- base::Sys.time()
[17:46:58.787]             {
[17:46:58.787]                 {
[17:46:58.787]                   {
[17:46:58.787]                     {
[17:46:58.787]                       base::local({
[17:46:58.787]                         has_future <- base::requireNamespace("future", 
[17:46:58.787]                           quietly = TRUE)
[17:46:58.787]                         if (has_future) {
[17:46:58.787]                           ns <- base::getNamespace("future")
[17:46:58.787]                           version <- ns[[".package"]][["version"]]
[17:46:58.787]                           if (is.null(version)) 
[17:46:58.787]                             version <- utils::packageVersion("future")
[17:46:58.787]                         }
[17:46:58.787]                         else {
[17:46:58.787]                           version <- NULL
[17:46:58.787]                         }
[17:46:58.787]                         if (!has_future || version < "1.8.0") {
[17:46:58.787]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.787]                             "", base::R.version$version.string), 
[17:46:58.787]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.787]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.787]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.787]                               "release", "version")], collapse = " "), 
[17:46:58.787]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.787]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.787]                             info)
[17:46:58.787]                           info <- base::paste(info, collapse = "; ")
[17:46:58.787]                           if (!has_future) {
[17:46:58.787]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.787]                               info)
[17:46:58.787]                           }
[17:46:58.787]                           else {
[17:46:58.787]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.787]                               info, version)
[17:46:58.787]                           }
[17:46:58.787]                           base::stop(msg)
[17:46:58.787]                         }
[17:46:58.787]                       })
[17:46:58.787]                     }
[17:46:58.787]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:58.787]                     base::options(mc.cores = 1L)
[17:46:58.787]                   }
[17:46:58.787]                   ...future.strategy.old <- future::plan("list")
[17:46:58.787]                   options(future.plan = NULL)
[17:46:58.787]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.787]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.787]                 }
[17:46:58.787]                 ...future.workdir <- getwd()
[17:46:58.787]             }
[17:46:58.787]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.787]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.787]         }
[17:46:58.787]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.787]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.787]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.787]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.787]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.787]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.787]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.787]             base::names(...future.oldOptions))
[17:46:58.787]     }
[17:46:58.787]     if (FALSE) {
[17:46:58.787]     }
[17:46:58.787]     else {
[17:46:58.787]         if (TRUE) {
[17:46:58.787]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.787]                 open = "w")
[17:46:58.787]         }
[17:46:58.787]         else {
[17:46:58.787]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.787]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.787]         }
[17:46:58.787]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.787]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.787]             base::sink(type = "output", split = FALSE)
[17:46:58.787]             base::close(...future.stdout)
[17:46:58.787]         }, add = TRUE)
[17:46:58.787]     }
[17:46:58.787]     ...future.frame <- base::sys.nframe()
[17:46:58.787]     ...future.conditions <- base::list()
[17:46:58.787]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.787]     if (FALSE) {
[17:46:58.787]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.787]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.787]     }
[17:46:58.787]     ...future.result <- base::tryCatch({
[17:46:58.787]         base::withCallingHandlers({
[17:46:58.787]             ...future.value <- base::withVisible(base::local({
[17:46:58.787]                 ...future.makeSendCondition <- base::local({
[17:46:58.787]                   sendCondition <- NULL
[17:46:58.787]                   function(frame = 1L) {
[17:46:58.787]                     if (is.function(sendCondition)) 
[17:46:58.787]                       return(sendCondition)
[17:46:58.787]                     ns <- getNamespace("parallel")
[17:46:58.787]                     if (exists("sendData", mode = "function", 
[17:46:58.787]                       envir = ns)) {
[17:46:58.787]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:58.787]                         envir = ns)
[17:46:58.787]                       envir <- sys.frame(frame)
[17:46:58.787]                       master <- NULL
[17:46:58.787]                       while (!identical(envir, .GlobalEnv) && 
[17:46:58.787]                         !identical(envir, emptyenv())) {
[17:46:58.787]                         if (exists("master", mode = "list", envir = envir, 
[17:46:58.787]                           inherits = FALSE)) {
[17:46:58.787]                           master <- get("master", mode = "list", 
[17:46:58.787]                             envir = envir, inherits = FALSE)
[17:46:58.787]                           if (inherits(master, c("SOCKnode", 
[17:46:58.787]                             "SOCK0node"))) {
[17:46:58.787]                             sendCondition <<- function(cond) {
[17:46:58.787]                               data <- list(type = "VALUE", value = cond, 
[17:46:58.787]                                 success = TRUE)
[17:46:58.787]                               parallel_sendData(master, data)
[17:46:58.787]                             }
[17:46:58.787]                             return(sendCondition)
[17:46:58.787]                           }
[17:46:58.787]                         }
[17:46:58.787]                         frame <- frame + 1L
[17:46:58.787]                         envir <- sys.frame(frame)
[17:46:58.787]                       }
[17:46:58.787]                     }
[17:46:58.787]                     sendCondition <<- function(cond) NULL
[17:46:58.787]                   }
[17:46:58.787]                 })
[17:46:58.787]                 withCallingHandlers({
[17:46:58.787]                   NA
[17:46:58.787]                 }, immediateCondition = function(cond) {
[17:46:58.787]                   sendCondition <- ...future.makeSendCondition()
[17:46:58.787]                   sendCondition(cond)
[17:46:58.787]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.787]                   {
[17:46:58.787]                     inherits <- base::inherits
[17:46:58.787]                     invokeRestart <- base::invokeRestart
[17:46:58.787]                     is.null <- base::is.null
[17:46:58.787]                     muffled <- FALSE
[17:46:58.787]                     if (inherits(cond, "message")) {
[17:46:58.787]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:58.787]                       if (muffled) 
[17:46:58.787]                         invokeRestart("muffleMessage")
[17:46:58.787]                     }
[17:46:58.787]                     else if (inherits(cond, "warning")) {
[17:46:58.787]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:58.787]                       if (muffled) 
[17:46:58.787]                         invokeRestart("muffleWarning")
[17:46:58.787]                     }
[17:46:58.787]                     else if (inherits(cond, "condition")) {
[17:46:58.787]                       if (!is.null(pattern)) {
[17:46:58.787]                         computeRestarts <- base::computeRestarts
[17:46:58.787]                         grepl <- base::grepl
[17:46:58.787]                         restarts <- computeRestarts(cond)
[17:46:58.787]                         for (restart in restarts) {
[17:46:58.787]                           name <- restart$name
[17:46:58.787]                           if (is.null(name)) 
[17:46:58.787]                             next
[17:46:58.787]                           if (!grepl(pattern, name)) 
[17:46:58.787]                             next
[17:46:58.787]                           invokeRestart(restart)
[17:46:58.787]                           muffled <- TRUE
[17:46:58.787]                           break
[17:46:58.787]                         }
[17:46:58.787]                       }
[17:46:58.787]                     }
[17:46:58.787]                     invisible(muffled)
[17:46:58.787]                   }
[17:46:58.787]                   muffleCondition(cond)
[17:46:58.787]                 })
[17:46:58.787]             }))
[17:46:58.787]             future::FutureResult(value = ...future.value$value, 
[17:46:58.787]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.787]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.787]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.787]                     ...future.globalenv.names))
[17:46:58.787]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.787]         }, condition = base::local({
[17:46:58.787]             c <- base::c
[17:46:58.787]             inherits <- base::inherits
[17:46:58.787]             invokeRestart <- base::invokeRestart
[17:46:58.787]             length <- base::length
[17:46:58.787]             list <- base::list
[17:46:58.787]             seq.int <- base::seq.int
[17:46:58.787]             signalCondition <- base::signalCondition
[17:46:58.787]             sys.calls <- base::sys.calls
[17:46:58.787]             `[[` <- base::`[[`
[17:46:58.787]             `+` <- base::`+`
[17:46:58.787]             `<<-` <- base::`<<-`
[17:46:58.787]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.787]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.787]                   3L)]
[17:46:58.787]             }
[17:46:58.787]             function(cond) {
[17:46:58.787]                 is_error <- inherits(cond, "error")
[17:46:58.787]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.787]                   NULL)
[17:46:58.787]                 if (is_error) {
[17:46:58.787]                   sessionInformation <- function() {
[17:46:58.787]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.787]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.787]                       search = base::search(), system = base::Sys.info())
[17:46:58.787]                   }
[17:46:58.787]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.787]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.787]                     cond$call), session = sessionInformation(), 
[17:46:58.787]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.787]                   signalCondition(cond)
[17:46:58.787]                 }
[17:46:58.787]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.787]                 "immediateCondition"))) {
[17:46:58.787]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.787]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.787]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.787]                   if (TRUE && !signal) {
[17:46:58.787]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.787]                     {
[17:46:58.787]                       inherits <- base::inherits
[17:46:58.787]                       invokeRestart <- base::invokeRestart
[17:46:58.787]                       is.null <- base::is.null
[17:46:58.787]                       muffled <- FALSE
[17:46:58.787]                       if (inherits(cond, "message")) {
[17:46:58.787]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.787]                         if (muffled) 
[17:46:58.787]                           invokeRestart("muffleMessage")
[17:46:58.787]                       }
[17:46:58.787]                       else if (inherits(cond, "warning")) {
[17:46:58.787]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.787]                         if (muffled) 
[17:46:58.787]                           invokeRestart("muffleWarning")
[17:46:58.787]                       }
[17:46:58.787]                       else if (inherits(cond, "condition")) {
[17:46:58.787]                         if (!is.null(pattern)) {
[17:46:58.787]                           computeRestarts <- base::computeRestarts
[17:46:58.787]                           grepl <- base::grepl
[17:46:58.787]                           restarts <- computeRestarts(cond)
[17:46:58.787]                           for (restart in restarts) {
[17:46:58.787]                             name <- restart$name
[17:46:58.787]                             if (is.null(name)) 
[17:46:58.787]                               next
[17:46:58.787]                             if (!grepl(pattern, name)) 
[17:46:58.787]                               next
[17:46:58.787]                             invokeRestart(restart)
[17:46:58.787]                             muffled <- TRUE
[17:46:58.787]                             break
[17:46:58.787]                           }
[17:46:58.787]                         }
[17:46:58.787]                       }
[17:46:58.787]                       invisible(muffled)
[17:46:58.787]                     }
[17:46:58.787]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.787]                   }
[17:46:58.787]                 }
[17:46:58.787]                 else {
[17:46:58.787]                   if (TRUE) {
[17:46:58.787]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.787]                     {
[17:46:58.787]                       inherits <- base::inherits
[17:46:58.787]                       invokeRestart <- base::invokeRestart
[17:46:58.787]                       is.null <- base::is.null
[17:46:58.787]                       muffled <- FALSE
[17:46:58.787]                       if (inherits(cond, "message")) {
[17:46:58.787]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.787]                         if (muffled) 
[17:46:58.787]                           invokeRestart("muffleMessage")
[17:46:58.787]                       }
[17:46:58.787]                       else if (inherits(cond, "warning")) {
[17:46:58.787]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.787]                         if (muffled) 
[17:46:58.787]                           invokeRestart("muffleWarning")
[17:46:58.787]                       }
[17:46:58.787]                       else if (inherits(cond, "condition")) {
[17:46:58.787]                         if (!is.null(pattern)) {
[17:46:58.787]                           computeRestarts <- base::computeRestarts
[17:46:58.787]                           grepl <- base::grepl
[17:46:58.787]                           restarts <- computeRestarts(cond)
[17:46:58.787]                           for (restart in restarts) {
[17:46:58.787]                             name <- restart$name
[17:46:58.787]                             if (is.null(name)) 
[17:46:58.787]                               next
[17:46:58.787]                             if (!grepl(pattern, name)) 
[17:46:58.787]                               next
[17:46:58.787]                             invokeRestart(restart)
[17:46:58.787]                             muffled <- TRUE
[17:46:58.787]                             break
[17:46:58.787]                           }
[17:46:58.787]                         }
[17:46:58.787]                       }
[17:46:58.787]                       invisible(muffled)
[17:46:58.787]                     }
[17:46:58.787]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.787]                   }
[17:46:58.787]                 }
[17:46:58.787]             }
[17:46:58.787]         }))
[17:46:58.787]     }, error = function(ex) {
[17:46:58.787]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.787]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.787]                 ...future.rng), started = ...future.startTime, 
[17:46:58.787]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.787]             version = "1.8"), class = "FutureResult")
[17:46:58.787]     }, finally = {
[17:46:58.787]         if (!identical(...future.workdir, getwd())) 
[17:46:58.787]             setwd(...future.workdir)
[17:46:58.787]         {
[17:46:58.787]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.787]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.787]             }
[17:46:58.787]             base::options(...future.oldOptions)
[17:46:58.787]             if (.Platform$OS.type == "windows") {
[17:46:58.787]                 old_names <- names(...future.oldEnvVars)
[17:46:58.787]                 envs <- base::Sys.getenv()
[17:46:58.787]                 names <- names(envs)
[17:46:58.787]                 common <- intersect(names, old_names)
[17:46:58.787]                 added <- setdiff(names, old_names)
[17:46:58.787]                 removed <- setdiff(old_names, names)
[17:46:58.787]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.787]                   envs[common]]
[17:46:58.787]                 NAMES <- toupper(changed)
[17:46:58.787]                 args <- list()
[17:46:58.787]                 for (kk in seq_along(NAMES)) {
[17:46:58.787]                   name <- changed[[kk]]
[17:46:58.787]                   NAME <- NAMES[[kk]]
[17:46:58.787]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.787]                     next
[17:46:58.787]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.787]                 }
[17:46:58.787]                 NAMES <- toupper(added)
[17:46:58.787]                 for (kk in seq_along(NAMES)) {
[17:46:58.787]                   name <- added[[kk]]
[17:46:58.787]                   NAME <- NAMES[[kk]]
[17:46:58.787]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.787]                     next
[17:46:58.787]                   args[[name]] <- ""
[17:46:58.787]                 }
[17:46:58.787]                 NAMES <- toupper(removed)
[17:46:58.787]                 for (kk in seq_along(NAMES)) {
[17:46:58.787]                   name <- removed[[kk]]
[17:46:58.787]                   NAME <- NAMES[[kk]]
[17:46:58.787]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.787]                     next
[17:46:58.787]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.787]                 }
[17:46:58.787]                 if (length(args) > 0) 
[17:46:58.787]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.787]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.787]             }
[17:46:58.787]             else {
[17:46:58.787]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.787]             }
[17:46:58.787]             {
[17:46:58.787]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.787]                   0L) {
[17:46:58.787]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.787]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.787]                   base::options(opts)
[17:46:58.787]                 }
[17:46:58.787]                 {
[17:46:58.787]                   {
[17:46:58.787]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:58.787]                     NULL
[17:46:58.787]                   }
[17:46:58.787]                   options(future.plan = NULL)
[17:46:58.787]                   if (is.na(NA_character_)) 
[17:46:58.787]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.787]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.787]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.787]                     .init = FALSE)
[17:46:58.787]                 }
[17:46:58.787]             }
[17:46:58.787]         }
[17:46:58.787]     })
[17:46:58.787]     if (TRUE) {
[17:46:58.787]         base::sink(type = "output", split = FALSE)
[17:46:58.787]         if (TRUE) {
[17:46:58.787]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.787]         }
[17:46:58.787]         else {
[17:46:58.787]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.787]         }
[17:46:58.787]         base::close(...future.stdout)
[17:46:58.787]         ...future.stdout <- NULL
[17:46:58.787]     }
[17:46:58.787]     ...future.result$conditions <- ...future.conditions
[17:46:58.787]     ...future.result$finished <- base::Sys.time()
[17:46:58.787]     ...future.result
[17:46:58.787] }
[17:46:58.839] MultisessionFuture started
[17:46:58.840] result() for ClusterFuture ...
[17:46:58.840] receiveMessageFromWorker() for ClusterFuture ...
[17:46:58.840] - Validating connection of MultisessionFuture
[17:46:58.873] - received message: FutureResult
[17:46:58.873] - Received FutureResult
[17:46:58.873] - Erased future from FutureRegistry
[17:46:58.874] result() for ClusterFuture ...
[17:46:58.874] - result already collected: FutureResult
[17:46:58.874] result() for ClusterFuture ... done
[17:46:58.874] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:58.874] result() for ClusterFuture ... done
[17:46:58.874] result() for ClusterFuture ...
[17:46:58.874] - result already collected: FutureResult
[17:46:58.874] result() for ClusterFuture ... done
[17:46:58.875] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:46:58.878] plan(): nbrOfWorkers() = 2
[17:46:58.879] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:46:58.879] Searching for globals...
[17:46:58.880] - globals found: [1] ‘getOption’
[17:46:58.880] Searching for globals ... DONE
[17:46:58.880] Resolving globals: FALSE
[17:46:58.880] 
[17:46:58.881] 
[17:46:58.881] getGlobalsAndPackages() ... DONE
[17:46:58.881] run() for ‘Future’ ...
[17:46:58.881] - state: ‘created’
[17:46:58.881] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:58.895] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:58.896] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:58.896]   - Field: ‘node’
[17:46:58.896]   - Field: ‘label’
[17:46:58.896]   - Field: ‘local’
[17:46:58.896]   - Field: ‘owner’
[17:46:58.896]   - Field: ‘envir’
[17:46:58.896]   - Field: ‘workers’
[17:46:58.896]   - Field: ‘packages’
[17:46:58.896]   - Field: ‘gc’
[17:46:58.896]   - Field: ‘conditions’
[17:46:58.897]   - Field: ‘persistent’
[17:46:58.897]   - Field: ‘expr’
[17:46:58.897]   - Field: ‘uuid’
[17:46:58.897]   - Field: ‘seed’
[17:46:58.897]   - Field: ‘version’
[17:46:58.897]   - Field: ‘result’
[17:46:58.897]   - Field: ‘asynchronous’
[17:46:58.897]   - Field: ‘calls’
[17:46:58.898]   - Field: ‘globals’
[17:46:58.898]   - Field: ‘stdout’
[17:46:58.898]   - Field: ‘earlySignal’
[17:46:58.898]   - Field: ‘lazy’
[17:46:58.898]   - Field: ‘state’
[17:46:58.898] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:58.898] - Launch lazy future ...
[17:46:58.899] Packages needed by the future expression (n = 0): <none>
[17:46:58.899] Packages needed by future strategies (n = 0): <none>
[17:46:58.899] {
[17:46:58.899]     {
[17:46:58.899]         {
[17:46:58.899]             ...future.startTime <- base::Sys.time()
[17:46:58.899]             {
[17:46:58.899]                 {
[17:46:58.899]                   {
[17:46:58.899]                     {
[17:46:58.899]                       base::local({
[17:46:58.899]                         has_future <- base::requireNamespace("future", 
[17:46:58.899]                           quietly = TRUE)
[17:46:58.899]                         if (has_future) {
[17:46:58.899]                           ns <- base::getNamespace("future")
[17:46:58.899]                           version <- ns[[".package"]][["version"]]
[17:46:58.899]                           if (is.null(version)) 
[17:46:58.899]                             version <- utils::packageVersion("future")
[17:46:58.899]                         }
[17:46:58.899]                         else {
[17:46:58.899]                           version <- NULL
[17:46:58.899]                         }
[17:46:58.899]                         if (!has_future || version < "1.8.0") {
[17:46:58.899]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.899]                             "", base::R.version$version.string), 
[17:46:58.899]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.899]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.899]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.899]                               "release", "version")], collapse = " "), 
[17:46:58.899]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.899]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.899]                             info)
[17:46:58.899]                           info <- base::paste(info, collapse = "; ")
[17:46:58.899]                           if (!has_future) {
[17:46:58.899]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.899]                               info)
[17:46:58.899]                           }
[17:46:58.899]                           else {
[17:46:58.899]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.899]                               info, version)
[17:46:58.899]                           }
[17:46:58.899]                           base::stop(msg)
[17:46:58.899]                         }
[17:46:58.899]                       })
[17:46:58.899]                     }
[17:46:58.899]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:58.899]                     base::options(mc.cores = 1L)
[17:46:58.899]                   }
[17:46:58.899]                   ...future.strategy.old <- future::plan("list")
[17:46:58.899]                   options(future.plan = NULL)
[17:46:58.899]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.899]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.899]                 }
[17:46:58.899]                 ...future.workdir <- getwd()
[17:46:58.899]             }
[17:46:58.899]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.899]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.899]         }
[17:46:58.899]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[17:46:58.899]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.899]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[17:46:58.899]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.899]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.899]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.899]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.899]             base::names(...future.oldOptions))
[17:46:58.899]     }
[17:46:58.899]     if (FALSE) {
[17:46:58.899]     }
[17:46:58.899]     else {
[17:46:58.899]         if (TRUE) {
[17:46:58.899]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.899]                 open = "w")
[17:46:58.899]         }
[17:46:58.899]         else {
[17:46:58.899]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.899]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.899]         }
[17:46:58.899]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.899]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.899]             base::sink(type = "output", split = FALSE)
[17:46:58.899]             base::close(...future.stdout)
[17:46:58.899]         }, add = TRUE)
[17:46:58.899]     }
[17:46:58.899]     ...future.frame <- base::sys.nframe()
[17:46:58.899]     ...future.conditions <- base::list()
[17:46:58.899]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.899]     if (FALSE) {
[17:46:58.899]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.899]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.899]     }
[17:46:58.899]     ...future.result <- base::tryCatch({
[17:46:58.899]         base::withCallingHandlers({
[17:46:58.899]             ...future.value <- base::withVisible(base::local({
[17:46:58.899]                 ...future.makeSendCondition <- base::local({
[17:46:58.899]                   sendCondition <- NULL
[17:46:58.899]                   function(frame = 1L) {
[17:46:58.899]                     if (is.function(sendCondition)) 
[17:46:58.899]                       return(sendCondition)
[17:46:58.899]                     ns <- getNamespace("parallel")
[17:46:58.899]                     if (exists("sendData", mode = "function", 
[17:46:58.899]                       envir = ns)) {
[17:46:58.899]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:58.899]                         envir = ns)
[17:46:58.899]                       envir <- sys.frame(frame)
[17:46:58.899]                       master <- NULL
[17:46:58.899]                       while (!identical(envir, .GlobalEnv) && 
[17:46:58.899]                         !identical(envir, emptyenv())) {
[17:46:58.899]                         if (exists("master", mode = "list", envir = envir, 
[17:46:58.899]                           inherits = FALSE)) {
[17:46:58.899]                           master <- get("master", mode = "list", 
[17:46:58.899]                             envir = envir, inherits = FALSE)
[17:46:58.899]                           if (inherits(master, c("SOCKnode", 
[17:46:58.899]                             "SOCK0node"))) {
[17:46:58.899]                             sendCondition <<- function(cond) {
[17:46:58.899]                               data <- list(type = "VALUE", value = cond, 
[17:46:58.899]                                 success = TRUE)
[17:46:58.899]                               parallel_sendData(master, data)
[17:46:58.899]                             }
[17:46:58.899]                             return(sendCondition)
[17:46:58.899]                           }
[17:46:58.899]                         }
[17:46:58.899]                         frame <- frame + 1L
[17:46:58.899]                         envir <- sys.frame(frame)
[17:46:58.899]                       }
[17:46:58.899]                     }
[17:46:58.899]                     sendCondition <<- function(cond) NULL
[17:46:58.899]                   }
[17:46:58.899]                 })
[17:46:58.899]                 withCallingHandlers({
[17:46:58.899]                   getOption("future.globals.onMissing")
[17:46:58.899]                 }, immediateCondition = function(cond) {
[17:46:58.899]                   sendCondition <- ...future.makeSendCondition()
[17:46:58.899]                   sendCondition(cond)
[17:46:58.899]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.899]                   {
[17:46:58.899]                     inherits <- base::inherits
[17:46:58.899]                     invokeRestart <- base::invokeRestart
[17:46:58.899]                     is.null <- base::is.null
[17:46:58.899]                     muffled <- FALSE
[17:46:58.899]                     if (inherits(cond, "message")) {
[17:46:58.899]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:58.899]                       if (muffled) 
[17:46:58.899]                         invokeRestart("muffleMessage")
[17:46:58.899]                     }
[17:46:58.899]                     else if (inherits(cond, "warning")) {
[17:46:58.899]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:58.899]                       if (muffled) 
[17:46:58.899]                         invokeRestart("muffleWarning")
[17:46:58.899]                     }
[17:46:58.899]                     else if (inherits(cond, "condition")) {
[17:46:58.899]                       if (!is.null(pattern)) {
[17:46:58.899]                         computeRestarts <- base::computeRestarts
[17:46:58.899]                         grepl <- base::grepl
[17:46:58.899]                         restarts <- computeRestarts(cond)
[17:46:58.899]                         for (restart in restarts) {
[17:46:58.899]                           name <- restart$name
[17:46:58.899]                           if (is.null(name)) 
[17:46:58.899]                             next
[17:46:58.899]                           if (!grepl(pattern, name)) 
[17:46:58.899]                             next
[17:46:58.899]                           invokeRestart(restart)
[17:46:58.899]                           muffled <- TRUE
[17:46:58.899]                           break
[17:46:58.899]                         }
[17:46:58.899]                       }
[17:46:58.899]                     }
[17:46:58.899]                     invisible(muffled)
[17:46:58.899]                   }
[17:46:58.899]                   muffleCondition(cond)
[17:46:58.899]                 })
[17:46:58.899]             }))
[17:46:58.899]             future::FutureResult(value = ...future.value$value, 
[17:46:58.899]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.899]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.899]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.899]                     ...future.globalenv.names))
[17:46:58.899]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.899]         }, condition = base::local({
[17:46:58.899]             c <- base::c
[17:46:58.899]             inherits <- base::inherits
[17:46:58.899]             invokeRestart <- base::invokeRestart
[17:46:58.899]             length <- base::length
[17:46:58.899]             list <- base::list
[17:46:58.899]             seq.int <- base::seq.int
[17:46:58.899]             signalCondition <- base::signalCondition
[17:46:58.899]             sys.calls <- base::sys.calls
[17:46:58.899]             `[[` <- base::`[[`
[17:46:58.899]             `+` <- base::`+`
[17:46:58.899]             `<<-` <- base::`<<-`
[17:46:58.899]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.899]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.899]                   3L)]
[17:46:58.899]             }
[17:46:58.899]             function(cond) {
[17:46:58.899]                 is_error <- inherits(cond, "error")
[17:46:58.899]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.899]                   NULL)
[17:46:58.899]                 if (is_error) {
[17:46:58.899]                   sessionInformation <- function() {
[17:46:58.899]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.899]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.899]                       search = base::search(), system = base::Sys.info())
[17:46:58.899]                   }
[17:46:58.899]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.899]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.899]                     cond$call), session = sessionInformation(), 
[17:46:58.899]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.899]                   signalCondition(cond)
[17:46:58.899]                 }
[17:46:58.899]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.899]                 "immediateCondition"))) {
[17:46:58.899]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.899]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.899]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.899]                   if (TRUE && !signal) {
[17:46:58.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.899]                     {
[17:46:58.899]                       inherits <- base::inherits
[17:46:58.899]                       invokeRestart <- base::invokeRestart
[17:46:58.899]                       is.null <- base::is.null
[17:46:58.899]                       muffled <- FALSE
[17:46:58.899]                       if (inherits(cond, "message")) {
[17:46:58.899]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.899]                         if (muffled) 
[17:46:58.899]                           invokeRestart("muffleMessage")
[17:46:58.899]                       }
[17:46:58.899]                       else if (inherits(cond, "warning")) {
[17:46:58.899]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.899]                         if (muffled) 
[17:46:58.899]                           invokeRestart("muffleWarning")
[17:46:58.899]                       }
[17:46:58.899]                       else if (inherits(cond, "condition")) {
[17:46:58.899]                         if (!is.null(pattern)) {
[17:46:58.899]                           computeRestarts <- base::computeRestarts
[17:46:58.899]                           grepl <- base::grepl
[17:46:58.899]                           restarts <- computeRestarts(cond)
[17:46:58.899]                           for (restart in restarts) {
[17:46:58.899]                             name <- restart$name
[17:46:58.899]                             if (is.null(name)) 
[17:46:58.899]                               next
[17:46:58.899]                             if (!grepl(pattern, name)) 
[17:46:58.899]                               next
[17:46:58.899]                             invokeRestart(restart)
[17:46:58.899]                             muffled <- TRUE
[17:46:58.899]                             break
[17:46:58.899]                           }
[17:46:58.899]                         }
[17:46:58.899]                       }
[17:46:58.899]                       invisible(muffled)
[17:46:58.899]                     }
[17:46:58.899]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.899]                   }
[17:46:58.899]                 }
[17:46:58.899]                 else {
[17:46:58.899]                   if (TRUE) {
[17:46:58.899]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.899]                     {
[17:46:58.899]                       inherits <- base::inherits
[17:46:58.899]                       invokeRestart <- base::invokeRestart
[17:46:58.899]                       is.null <- base::is.null
[17:46:58.899]                       muffled <- FALSE
[17:46:58.899]                       if (inherits(cond, "message")) {
[17:46:58.899]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.899]                         if (muffled) 
[17:46:58.899]                           invokeRestart("muffleMessage")
[17:46:58.899]                       }
[17:46:58.899]                       else if (inherits(cond, "warning")) {
[17:46:58.899]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.899]                         if (muffled) 
[17:46:58.899]                           invokeRestart("muffleWarning")
[17:46:58.899]                       }
[17:46:58.899]                       else if (inherits(cond, "condition")) {
[17:46:58.899]                         if (!is.null(pattern)) {
[17:46:58.899]                           computeRestarts <- base::computeRestarts
[17:46:58.899]                           grepl <- base::grepl
[17:46:58.899]                           restarts <- computeRestarts(cond)
[17:46:58.899]                           for (restart in restarts) {
[17:46:58.899]                             name <- restart$name
[17:46:58.899]                             if (is.null(name)) 
[17:46:58.899]                               next
[17:46:58.899]                             if (!grepl(pattern, name)) 
[17:46:58.899]                               next
[17:46:58.899]                             invokeRestart(restart)
[17:46:58.899]                             muffled <- TRUE
[17:46:58.899]                             break
[17:46:58.899]                           }
[17:46:58.899]                         }
[17:46:58.899]                       }
[17:46:58.899]                       invisible(muffled)
[17:46:58.899]                     }
[17:46:58.899]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.899]                   }
[17:46:58.899]                 }
[17:46:58.899]             }
[17:46:58.899]         }))
[17:46:58.899]     }, error = function(ex) {
[17:46:58.899]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.899]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.899]                 ...future.rng), started = ...future.startTime, 
[17:46:58.899]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.899]             version = "1.8"), class = "FutureResult")
[17:46:58.899]     }, finally = {
[17:46:58.899]         if (!identical(...future.workdir, getwd())) 
[17:46:58.899]             setwd(...future.workdir)
[17:46:58.899]         {
[17:46:58.899]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.899]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.899]             }
[17:46:58.899]             base::options(...future.oldOptions)
[17:46:58.899]             if (.Platform$OS.type == "windows") {
[17:46:58.899]                 old_names <- names(...future.oldEnvVars)
[17:46:58.899]                 envs <- base::Sys.getenv()
[17:46:58.899]                 names <- names(envs)
[17:46:58.899]                 common <- intersect(names, old_names)
[17:46:58.899]                 added <- setdiff(names, old_names)
[17:46:58.899]                 removed <- setdiff(old_names, names)
[17:46:58.899]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.899]                   envs[common]]
[17:46:58.899]                 NAMES <- toupper(changed)
[17:46:58.899]                 args <- list()
[17:46:58.899]                 for (kk in seq_along(NAMES)) {
[17:46:58.899]                   name <- changed[[kk]]
[17:46:58.899]                   NAME <- NAMES[[kk]]
[17:46:58.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.899]                     next
[17:46:58.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.899]                 }
[17:46:58.899]                 NAMES <- toupper(added)
[17:46:58.899]                 for (kk in seq_along(NAMES)) {
[17:46:58.899]                   name <- added[[kk]]
[17:46:58.899]                   NAME <- NAMES[[kk]]
[17:46:58.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.899]                     next
[17:46:58.899]                   args[[name]] <- ""
[17:46:58.899]                 }
[17:46:58.899]                 NAMES <- toupper(removed)
[17:46:58.899]                 for (kk in seq_along(NAMES)) {
[17:46:58.899]                   name <- removed[[kk]]
[17:46:58.899]                   NAME <- NAMES[[kk]]
[17:46:58.899]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.899]                     next
[17:46:58.899]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.899]                 }
[17:46:58.899]                 if (length(args) > 0) 
[17:46:58.899]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.899]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.899]             }
[17:46:58.899]             else {
[17:46:58.899]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.899]             }
[17:46:58.899]             {
[17:46:58.899]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.899]                   0L) {
[17:46:58.899]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.899]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.899]                   base::options(opts)
[17:46:58.899]                 }
[17:46:58.899]                 {
[17:46:58.899]                   {
[17:46:58.899]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:58.899]                     NULL
[17:46:58.899]                   }
[17:46:58.899]                   options(future.plan = NULL)
[17:46:58.899]                   if (is.na(NA_character_)) 
[17:46:58.899]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.899]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.899]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.899]                     .init = FALSE)
[17:46:58.899]                 }
[17:46:58.899]             }
[17:46:58.899]         }
[17:46:58.899]     })
[17:46:58.899]     if (TRUE) {
[17:46:58.899]         base::sink(type = "output", split = FALSE)
[17:46:58.899]         if (TRUE) {
[17:46:58.899]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.899]         }
[17:46:58.899]         else {
[17:46:58.899]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.899]         }
[17:46:58.899]         base::close(...future.stdout)
[17:46:58.899]         ...future.stdout <- NULL
[17:46:58.899]     }
[17:46:58.899]     ...future.result$conditions <- ...future.conditions
[17:46:58.899]     ...future.result$finished <- base::Sys.time()
[17:46:58.899]     ...future.result
[17:46:58.899] }
[17:46:58.903] MultisessionFuture started
[17:46:58.903] - Launch lazy future ... done
[17:46:58.903] run() for ‘MultisessionFuture’ ... done
[17:46:58.903] result() for ClusterFuture ...
[17:46:58.903] receiveMessageFromWorker() for ClusterFuture ...
[17:46:58.903] - Validating connection of MultisessionFuture
[17:46:58.904] - received message: FutureResult
[17:46:58.904] - Received FutureResult
[17:46:58.905] - Erased future from FutureRegistry
[17:46:58.905] result() for ClusterFuture ...
[17:46:58.905] - result already collected: FutureResult
[17:46:58.905] result() for ClusterFuture ... done
[17:46:58.905] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:58.905] result() for ClusterFuture ... done
[17:46:58.905] result() for ClusterFuture ...
[17:46:58.905] - result already collected: FutureResult
[17:46:58.905] result() for ClusterFuture ... done
[17:46:58.906] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.906] Searching for globals...
[17:46:58.907] - globals found: [1] ‘getOption’
[17:46:58.907] Searching for globals ... DONE
[17:46:58.907] Resolving globals: FALSE
[17:46:58.907] 
[17:46:58.907] 
[17:46:58.907] getGlobalsAndPackages() ... DONE
[17:46:58.908] run() for ‘Future’ ...
[17:46:58.908] - state: ‘created’
[17:46:58.908] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:58.923] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:58.923] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:58.923]   - Field: ‘node’
[17:46:58.923]   - Field: ‘label’
[17:46:58.923]   - Field: ‘local’
[17:46:58.923]   - Field: ‘owner’
[17:46:58.923]   - Field: ‘envir’
[17:46:58.924]   - Field: ‘workers’
[17:46:58.924]   - Field: ‘packages’
[17:46:58.924]   - Field: ‘gc’
[17:46:58.924]   - Field: ‘conditions’
[17:46:58.924]   - Field: ‘persistent’
[17:46:58.924]   - Field: ‘expr’
[17:46:58.924]   - Field: ‘uuid’
[17:46:58.924]   - Field: ‘seed’
[17:46:58.924]   - Field: ‘version’
[17:46:58.925]   - Field: ‘result’
[17:46:58.925]   - Field: ‘asynchronous’
[17:46:58.925]   - Field: ‘calls’
[17:46:58.925]   - Field: ‘globals’
[17:46:58.925]   - Field: ‘stdout’
[17:46:58.925]   - Field: ‘earlySignal’
[17:46:58.925]   - Field: ‘lazy’
[17:46:58.925]   - Field: ‘state’
[17:46:58.925] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:58.926] - Launch lazy future ...
[17:46:58.926] Packages needed by the future expression (n = 0): <none>
[17:46:58.926] Packages needed by future strategies (n = 0): <none>
[17:46:58.927] {
[17:46:58.927]     {
[17:46:58.927]         {
[17:46:58.927]             ...future.startTime <- base::Sys.time()
[17:46:58.927]             {
[17:46:58.927]                 {
[17:46:58.927]                   {
[17:46:58.927]                     {
[17:46:58.927]                       base::local({
[17:46:58.927]                         has_future <- base::requireNamespace("future", 
[17:46:58.927]                           quietly = TRUE)
[17:46:58.927]                         if (has_future) {
[17:46:58.927]                           ns <- base::getNamespace("future")
[17:46:58.927]                           version <- ns[[".package"]][["version"]]
[17:46:58.927]                           if (is.null(version)) 
[17:46:58.927]                             version <- utils::packageVersion("future")
[17:46:58.927]                         }
[17:46:58.927]                         else {
[17:46:58.927]                           version <- NULL
[17:46:58.927]                         }
[17:46:58.927]                         if (!has_future || version < "1.8.0") {
[17:46:58.927]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.927]                             "", base::R.version$version.string), 
[17:46:58.927]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.927]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.927]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.927]                               "release", "version")], collapse = " "), 
[17:46:58.927]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.927]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.927]                             info)
[17:46:58.927]                           info <- base::paste(info, collapse = "; ")
[17:46:58.927]                           if (!has_future) {
[17:46:58.927]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.927]                               info)
[17:46:58.927]                           }
[17:46:58.927]                           else {
[17:46:58.927]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.927]                               info, version)
[17:46:58.927]                           }
[17:46:58.927]                           base::stop(msg)
[17:46:58.927]                         }
[17:46:58.927]                       })
[17:46:58.927]                     }
[17:46:58.927]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:58.927]                     base::options(mc.cores = 1L)
[17:46:58.927]                   }
[17:46:58.927]                   ...future.strategy.old <- future::plan("list")
[17:46:58.927]                   options(future.plan = NULL)
[17:46:58.927]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.927]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.927]                 }
[17:46:58.927]                 ...future.workdir <- getwd()
[17:46:58.927]             }
[17:46:58.927]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.927]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.927]         }
[17:46:58.927]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.927]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.927]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.927]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.927]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.927]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.927]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.927]             base::names(...future.oldOptions))
[17:46:58.927]     }
[17:46:58.927]     if (FALSE) {
[17:46:58.927]     }
[17:46:58.927]     else {
[17:46:58.927]         if (TRUE) {
[17:46:58.927]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.927]                 open = "w")
[17:46:58.927]         }
[17:46:58.927]         else {
[17:46:58.927]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.927]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.927]         }
[17:46:58.927]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.927]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.927]             base::sink(type = "output", split = FALSE)
[17:46:58.927]             base::close(...future.stdout)
[17:46:58.927]         }, add = TRUE)
[17:46:58.927]     }
[17:46:58.927]     ...future.frame <- base::sys.nframe()
[17:46:58.927]     ...future.conditions <- base::list()
[17:46:58.927]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.927]     if (FALSE) {
[17:46:58.927]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.927]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.927]     }
[17:46:58.927]     ...future.result <- base::tryCatch({
[17:46:58.927]         base::withCallingHandlers({
[17:46:58.927]             ...future.value <- base::withVisible(base::local({
[17:46:58.927]                 ...future.makeSendCondition <- base::local({
[17:46:58.927]                   sendCondition <- NULL
[17:46:58.927]                   function(frame = 1L) {
[17:46:58.927]                     if (is.function(sendCondition)) 
[17:46:58.927]                       return(sendCondition)
[17:46:58.927]                     ns <- getNamespace("parallel")
[17:46:58.927]                     if (exists("sendData", mode = "function", 
[17:46:58.927]                       envir = ns)) {
[17:46:58.927]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:58.927]                         envir = ns)
[17:46:58.927]                       envir <- sys.frame(frame)
[17:46:58.927]                       master <- NULL
[17:46:58.927]                       while (!identical(envir, .GlobalEnv) && 
[17:46:58.927]                         !identical(envir, emptyenv())) {
[17:46:58.927]                         if (exists("master", mode = "list", envir = envir, 
[17:46:58.927]                           inherits = FALSE)) {
[17:46:58.927]                           master <- get("master", mode = "list", 
[17:46:58.927]                             envir = envir, inherits = FALSE)
[17:46:58.927]                           if (inherits(master, c("SOCKnode", 
[17:46:58.927]                             "SOCK0node"))) {
[17:46:58.927]                             sendCondition <<- function(cond) {
[17:46:58.927]                               data <- list(type = "VALUE", value = cond, 
[17:46:58.927]                                 success = TRUE)
[17:46:58.927]                               parallel_sendData(master, data)
[17:46:58.927]                             }
[17:46:58.927]                             return(sendCondition)
[17:46:58.927]                           }
[17:46:58.927]                         }
[17:46:58.927]                         frame <- frame + 1L
[17:46:58.927]                         envir <- sys.frame(frame)
[17:46:58.927]                       }
[17:46:58.927]                     }
[17:46:58.927]                     sendCondition <<- function(cond) NULL
[17:46:58.927]                   }
[17:46:58.927]                 })
[17:46:58.927]                 withCallingHandlers({
[17:46:58.927]                   getOption("future.globals.onMissing")
[17:46:58.927]                 }, immediateCondition = function(cond) {
[17:46:58.927]                   sendCondition <- ...future.makeSendCondition()
[17:46:58.927]                   sendCondition(cond)
[17:46:58.927]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.927]                   {
[17:46:58.927]                     inherits <- base::inherits
[17:46:58.927]                     invokeRestart <- base::invokeRestart
[17:46:58.927]                     is.null <- base::is.null
[17:46:58.927]                     muffled <- FALSE
[17:46:58.927]                     if (inherits(cond, "message")) {
[17:46:58.927]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:58.927]                       if (muffled) 
[17:46:58.927]                         invokeRestart("muffleMessage")
[17:46:58.927]                     }
[17:46:58.927]                     else if (inherits(cond, "warning")) {
[17:46:58.927]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:58.927]                       if (muffled) 
[17:46:58.927]                         invokeRestart("muffleWarning")
[17:46:58.927]                     }
[17:46:58.927]                     else if (inherits(cond, "condition")) {
[17:46:58.927]                       if (!is.null(pattern)) {
[17:46:58.927]                         computeRestarts <- base::computeRestarts
[17:46:58.927]                         grepl <- base::grepl
[17:46:58.927]                         restarts <- computeRestarts(cond)
[17:46:58.927]                         for (restart in restarts) {
[17:46:58.927]                           name <- restart$name
[17:46:58.927]                           if (is.null(name)) 
[17:46:58.927]                             next
[17:46:58.927]                           if (!grepl(pattern, name)) 
[17:46:58.927]                             next
[17:46:58.927]                           invokeRestart(restart)
[17:46:58.927]                           muffled <- TRUE
[17:46:58.927]                           break
[17:46:58.927]                         }
[17:46:58.927]                       }
[17:46:58.927]                     }
[17:46:58.927]                     invisible(muffled)
[17:46:58.927]                   }
[17:46:58.927]                   muffleCondition(cond)
[17:46:58.927]                 })
[17:46:58.927]             }))
[17:46:58.927]             future::FutureResult(value = ...future.value$value, 
[17:46:58.927]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.927]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.927]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.927]                     ...future.globalenv.names))
[17:46:58.927]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.927]         }, condition = base::local({
[17:46:58.927]             c <- base::c
[17:46:58.927]             inherits <- base::inherits
[17:46:58.927]             invokeRestart <- base::invokeRestart
[17:46:58.927]             length <- base::length
[17:46:58.927]             list <- base::list
[17:46:58.927]             seq.int <- base::seq.int
[17:46:58.927]             signalCondition <- base::signalCondition
[17:46:58.927]             sys.calls <- base::sys.calls
[17:46:58.927]             `[[` <- base::`[[`
[17:46:58.927]             `+` <- base::`+`
[17:46:58.927]             `<<-` <- base::`<<-`
[17:46:58.927]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.927]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.927]                   3L)]
[17:46:58.927]             }
[17:46:58.927]             function(cond) {
[17:46:58.927]                 is_error <- inherits(cond, "error")
[17:46:58.927]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.927]                   NULL)
[17:46:58.927]                 if (is_error) {
[17:46:58.927]                   sessionInformation <- function() {
[17:46:58.927]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.927]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.927]                       search = base::search(), system = base::Sys.info())
[17:46:58.927]                   }
[17:46:58.927]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.927]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.927]                     cond$call), session = sessionInformation(), 
[17:46:58.927]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.927]                   signalCondition(cond)
[17:46:58.927]                 }
[17:46:58.927]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.927]                 "immediateCondition"))) {
[17:46:58.927]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.927]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.927]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.927]                   if (TRUE && !signal) {
[17:46:58.927]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.927]                     {
[17:46:58.927]                       inherits <- base::inherits
[17:46:58.927]                       invokeRestart <- base::invokeRestart
[17:46:58.927]                       is.null <- base::is.null
[17:46:58.927]                       muffled <- FALSE
[17:46:58.927]                       if (inherits(cond, "message")) {
[17:46:58.927]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.927]                         if (muffled) 
[17:46:58.927]                           invokeRestart("muffleMessage")
[17:46:58.927]                       }
[17:46:58.927]                       else if (inherits(cond, "warning")) {
[17:46:58.927]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.927]                         if (muffled) 
[17:46:58.927]                           invokeRestart("muffleWarning")
[17:46:58.927]                       }
[17:46:58.927]                       else if (inherits(cond, "condition")) {
[17:46:58.927]                         if (!is.null(pattern)) {
[17:46:58.927]                           computeRestarts <- base::computeRestarts
[17:46:58.927]                           grepl <- base::grepl
[17:46:58.927]                           restarts <- computeRestarts(cond)
[17:46:58.927]                           for (restart in restarts) {
[17:46:58.927]                             name <- restart$name
[17:46:58.927]                             if (is.null(name)) 
[17:46:58.927]                               next
[17:46:58.927]                             if (!grepl(pattern, name)) 
[17:46:58.927]                               next
[17:46:58.927]                             invokeRestart(restart)
[17:46:58.927]                             muffled <- TRUE
[17:46:58.927]                             break
[17:46:58.927]                           }
[17:46:58.927]                         }
[17:46:58.927]                       }
[17:46:58.927]                       invisible(muffled)
[17:46:58.927]                     }
[17:46:58.927]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.927]                   }
[17:46:58.927]                 }
[17:46:58.927]                 else {
[17:46:58.927]                   if (TRUE) {
[17:46:58.927]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.927]                     {
[17:46:58.927]                       inherits <- base::inherits
[17:46:58.927]                       invokeRestart <- base::invokeRestart
[17:46:58.927]                       is.null <- base::is.null
[17:46:58.927]                       muffled <- FALSE
[17:46:58.927]                       if (inherits(cond, "message")) {
[17:46:58.927]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.927]                         if (muffled) 
[17:46:58.927]                           invokeRestart("muffleMessage")
[17:46:58.927]                       }
[17:46:58.927]                       else if (inherits(cond, "warning")) {
[17:46:58.927]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.927]                         if (muffled) 
[17:46:58.927]                           invokeRestart("muffleWarning")
[17:46:58.927]                       }
[17:46:58.927]                       else if (inherits(cond, "condition")) {
[17:46:58.927]                         if (!is.null(pattern)) {
[17:46:58.927]                           computeRestarts <- base::computeRestarts
[17:46:58.927]                           grepl <- base::grepl
[17:46:58.927]                           restarts <- computeRestarts(cond)
[17:46:58.927]                           for (restart in restarts) {
[17:46:58.927]                             name <- restart$name
[17:46:58.927]                             if (is.null(name)) 
[17:46:58.927]                               next
[17:46:58.927]                             if (!grepl(pattern, name)) 
[17:46:58.927]                               next
[17:46:58.927]                             invokeRestart(restart)
[17:46:58.927]                             muffled <- TRUE
[17:46:58.927]                             break
[17:46:58.927]                           }
[17:46:58.927]                         }
[17:46:58.927]                       }
[17:46:58.927]                       invisible(muffled)
[17:46:58.927]                     }
[17:46:58.927]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.927]                   }
[17:46:58.927]                 }
[17:46:58.927]             }
[17:46:58.927]         }))
[17:46:58.927]     }, error = function(ex) {
[17:46:58.927]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.927]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.927]                 ...future.rng), started = ...future.startTime, 
[17:46:58.927]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.927]             version = "1.8"), class = "FutureResult")
[17:46:58.927]     }, finally = {
[17:46:58.927]         if (!identical(...future.workdir, getwd())) 
[17:46:58.927]             setwd(...future.workdir)
[17:46:58.927]         {
[17:46:58.927]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.927]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.927]             }
[17:46:58.927]             base::options(...future.oldOptions)
[17:46:58.927]             if (.Platform$OS.type == "windows") {
[17:46:58.927]                 old_names <- names(...future.oldEnvVars)
[17:46:58.927]                 envs <- base::Sys.getenv()
[17:46:58.927]                 names <- names(envs)
[17:46:58.927]                 common <- intersect(names, old_names)
[17:46:58.927]                 added <- setdiff(names, old_names)
[17:46:58.927]                 removed <- setdiff(old_names, names)
[17:46:58.927]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.927]                   envs[common]]
[17:46:58.927]                 NAMES <- toupper(changed)
[17:46:58.927]                 args <- list()
[17:46:58.927]                 for (kk in seq_along(NAMES)) {
[17:46:58.927]                   name <- changed[[kk]]
[17:46:58.927]                   NAME <- NAMES[[kk]]
[17:46:58.927]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.927]                     next
[17:46:58.927]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.927]                 }
[17:46:58.927]                 NAMES <- toupper(added)
[17:46:58.927]                 for (kk in seq_along(NAMES)) {
[17:46:58.927]                   name <- added[[kk]]
[17:46:58.927]                   NAME <- NAMES[[kk]]
[17:46:58.927]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.927]                     next
[17:46:58.927]                   args[[name]] <- ""
[17:46:58.927]                 }
[17:46:58.927]                 NAMES <- toupper(removed)
[17:46:58.927]                 for (kk in seq_along(NAMES)) {
[17:46:58.927]                   name <- removed[[kk]]
[17:46:58.927]                   NAME <- NAMES[[kk]]
[17:46:58.927]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.927]                     next
[17:46:58.927]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.927]                 }
[17:46:58.927]                 if (length(args) > 0) 
[17:46:58.927]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.927]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.927]             }
[17:46:58.927]             else {
[17:46:58.927]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.927]             }
[17:46:58.927]             {
[17:46:58.927]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.927]                   0L) {
[17:46:58.927]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.927]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.927]                   base::options(opts)
[17:46:58.927]                 }
[17:46:58.927]                 {
[17:46:58.927]                   {
[17:46:58.927]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:58.927]                     NULL
[17:46:58.927]                   }
[17:46:58.927]                   options(future.plan = NULL)
[17:46:58.927]                   if (is.na(NA_character_)) 
[17:46:58.927]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.927]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.927]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.927]                     .init = FALSE)
[17:46:58.927]                 }
[17:46:58.927]             }
[17:46:58.927]         }
[17:46:58.927]     })
[17:46:58.927]     if (TRUE) {
[17:46:58.927]         base::sink(type = "output", split = FALSE)
[17:46:58.927]         if (TRUE) {
[17:46:58.927]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.927]         }
[17:46:58.927]         else {
[17:46:58.927]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.927]         }
[17:46:58.927]         base::close(...future.stdout)
[17:46:58.927]         ...future.stdout <- NULL
[17:46:58.927]     }
[17:46:58.927]     ...future.result$conditions <- ...future.conditions
[17:46:58.927]     ...future.result$finished <- base::Sys.time()
[17:46:58.927]     ...future.result
[17:46:58.927] }
[17:46:58.930] MultisessionFuture started
[17:46:58.930] - Launch lazy future ... done
[17:46:58.930] run() for ‘MultisessionFuture’ ... done
[17:46:58.930] result() for ClusterFuture ...
[17:46:58.930] receiveMessageFromWorker() for ClusterFuture ...
[17:46:58.930] - Validating connection of MultisessionFuture
[17:46:58.935] - received message: FutureResult
[17:46:58.935] - Received FutureResult
[17:46:58.935] - Erased future from FutureRegistry
[17:46:58.935] result() for ClusterFuture ...
[17:46:58.936] - result already collected: FutureResult
[17:46:58.936] result() for ClusterFuture ... done
[17:46:58.936] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:58.936] result() for ClusterFuture ... done
[17:46:58.936] result() for ClusterFuture ...
[17:46:58.936] - result already collected: FutureResult
[17:46:58.936] result() for ClusterFuture ... done
[17:46:58.937] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[17:46:58.937] Searching for globals...
[17:46:58.938] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.939] Searching for globals...
[17:46:58.940] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:46:58.940] Searching for globals ... DONE
[17:46:58.940] Resolving globals: FALSE
[17:46:58.941] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:58.941] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:58.941] - globals: [1] ‘data’
[17:46:58.941] 
[17:46:58.941] getGlobalsAndPackages() ... DONE
[17:46:58.942] run() for ‘Future’ ...
[17:46:58.942] - state: ‘created’
[17:46:58.942] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:58.956] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:58.956] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:58.956]   - Field: ‘node’
[17:46:58.956]   - Field: ‘label’
[17:46:58.957]   - Field: ‘local’
[17:46:58.957]   - Field: ‘owner’
[17:46:58.957]   - Field: ‘envir’
[17:46:58.957]   - Field: ‘workers’
[17:46:58.957]   - Field: ‘packages’
[17:46:58.957]   - Field: ‘gc’
[17:46:58.957]   - Field: ‘conditions’
[17:46:58.957]   - Field: ‘persistent’
[17:46:58.957]   - Field: ‘expr’
[17:46:58.957]   - Field: ‘uuid’
[17:46:58.958]   - Field: ‘seed’
[17:46:58.958]   - Field: ‘version’
[17:46:58.958]   - Field: ‘result’
[17:46:58.958]   - Field: ‘asynchronous’
[17:46:58.958]   - Field: ‘calls’
[17:46:58.958]   - Field: ‘globals’
[17:46:58.958]   - Field: ‘stdout’
[17:46:58.958]   - Field: ‘earlySignal’
[17:46:58.958]   - Field: ‘lazy’
[17:46:58.959]   - Field: ‘state’
[17:46:58.959] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:58.959] - Launch lazy future ...
[17:46:58.959] Packages needed by the future expression (n = 0): <none>
[17:46:58.959] Packages needed by future strategies (n = 0): <none>
[17:46:58.960] {
[17:46:58.960]     {
[17:46:58.960]         {
[17:46:58.960]             ...future.startTime <- base::Sys.time()
[17:46:58.960]             {
[17:46:58.960]                 {
[17:46:58.960]                   {
[17:46:58.960]                     {
[17:46:58.960]                       base::local({
[17:46:58.960]                         has_future <- base::requireNamespace("future", 
[17:46:58.960]                           quietly = TRUE)
[17:46:58.960]                         if (has_future) {
[17:46:58.960]                           ns <- base::getNamespace("future")
[17:46:58.960]                           version <- ns[[".package"]][["version"]]
[17:46:58.960]                           if (is.null(version)) 
[17:46:58.960]                             version <- utils::packageVersion("future")
[17:46:58.960]                         }
[17:46:58.960]                         else {
[17:46:58.960]                           version <- NULL
[17:46:58.960]                         }
[17:46:58.960]                         if (!has_future || version < "1.8.0") {
[17:46:58.960]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.960]                             "", base::R.version$version.string), 
[17:46:58.960]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.960]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.960]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.960]                               "release", "version")], collapse = " "), 
[17:46:58.960]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.960]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.960]                             info)
[17:46:58.960]                           info <- base::paste(info, collapse = "; ")
[17:46:58.960]                           if (!has_future) {
[17:46:58.960]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.960]                               info)
[17:46:58.960]                           }
[17:46:58.960]                           else {
[17:46:58.960]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.960]                               info, version)
[17:46:58.960]                           }
[17:46:58.960]                           base::stop(msg)
[17:46:58.960]                         }
[17:46:58.960]                       })
[17:46:58.960]                     }
[17:46:58.960]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:58.960]                     base::options(mc.cores = 1L)
[17:46:58.960]                   }
[17:46:58.960]                   ...future.strategy.old <- future::plan("list")
[17:46:58.960]                   options(future.plan = NULL)
[17:46:58.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:58.960]                 }
[17:46:58.960]                 ...future.workdir <- getwd()
[17:46:58.960]             }
[17:46:58.960]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.960]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.960]         }
[17:46:58.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.960]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.960]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.960]             base::names(...future.oldOptions))
[17:46:58.960]     }
[17:46:58.960]     if (FALSE) {
[17:46:58.960]     }
[17:46:58.960]     else {
[17:46:58.960]         if (TRUE) {
[17:46:58.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.960]                 open = "w")
[17:46:58.960]         }
[17:46:58.960]         else {
[17:46:58.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.960]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.960]         }
[17:46:58.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.960]             base::sink(type = "output", split = FALSE)
[17:46:58.960]             base::close(...future.stdout)
[17:46:58.960]         }, add = TRUE)
[17:46:58.960]     }
[17:46:58.960]     ...future.frame <- base::sys.nframe()
[17:46:58.960]     ...future.conditions <- base::list()
[17:46:58.960]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.960]     if (FALSE) {
[17:46:58.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.960]     }
[17:46:58.960]     ...future.result <- base::tryCatch({
[17:46:58.960]         base::withCallingHandlers({
[17:46:58.960]             ...future.value <- base::withVisible(base::local({
[17:46:58.960]                 ...future.makeSendCondition <- base::local({
[17:46:58.960]                   sendCondition <- NULL
[17:46:58.960]                   function(frame = 1L) {
[17:46:58.960]                     if (is.function(sendCondition)) 
[17:46:58.960]                       return(sendCondition)
[17:46:58.960]                     ns <- getNamespace("parallel")
[17:46:58.960]                     if (exists("sendData", mode = "function", 
[17:46:58.960]                       envir = ns)) {
[17:46:58.960]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:58.960]                         envir = ns)
[17:46:58.960]                       envir <- sys.frame(frame)
[17:46:58.960]                       master <- NULL
[17:46:58.960]                       while (!identical(envir, .GlobalEnv) && 
[17:46:58.960]                         !identical(envir, emptyenv())) {
[17:46:58.960]                         if (exists("master", mode = "list", envir = envir, 
[17:46:58.960]                           inherits = FALSE)) {
[17:46:58.960]                           master <- get("master", mode = "list", 
[17:46:58.960]                             envir = envir, inherits = FALSE)
[17:46:58.960]                           if (inherits(master, c("SOCKnode", 
[17:46:58.960]                             "SOCK0node"))) {
[17:46:58.960]                             sendCondition <<- function(cond) {
[17:46:58.960]                               data <- list(type = "VALUE", value = cond, 
[17:46:58.960]                                 success = TRUE)
[17:46:58.960]                               parallel_sendData(master, data)
[17:46:58.960]                             }
[17:46:58.960]                             return(sendCondition)
[17:46:58.960]                           }
[17:46:58.960]                         }
[17:46:58.960]                         frame <- frame + 1L
[17:46:58.960]                         envir <- sys.frame(frame)
[17:46:58.960]                       }
[17:46:58.960]                     }
[17:46:58.960]                     sendCondition <<- function(cond) NULL
[17:46:58.960]                   }
[17:46:58.960]                 })
[17:46:58.960]                 withCallingHandlers({
[17:46:58.960]                   subset(data, x < 3)$y
[17:46:58.960]                 }, immediateCondition = function(cond) {
[17:46:58.960]                   sendCondition <- ...future.makeSendCondition()
[17:46:58.960]                   sendCondition(cond)
[17:46:58.960]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.960]                   {
[17:46:58.960]                     inherits <- base::inherits
[17:46:58.960]                     invokeRestart <- base::invokeRestart
[17:46:58.960]                     is.null <- base::is.null
[17:46:58.960]                     muffled <- FALSE
[17:46:58.960]                     if (inherits(cond, "message")) {
[17:46:58.960]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:58.960]                       if (muffled) 
[17:46:58.960]                         invokeRestart("muffleMessage")
[17:46:58.960]                     }
[17:46:58.960]                     else if (inherits(cond, "warning")) {
[17:46:58.960]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:58.960]                       if (muffled) 
[17:46:58.960]                         invokeRestart("muffleWarning")
[17:46:58.960]                     }
[17:46:58.960]                     else if (inherits(cond, "condition")) {
[17:46:58.960]                       if (!is.null(pattern)) {
[17:46:58.960]                         computeRestarts <- base::computeRestarts
[17:46:58.960]                         grepl <- base::grepl
[17:46:58.960]                         restarts <- computeRestarts(cond)
[17:46:58.960]                         for (restart in restarts) {
[17:46:58.960]                           name <- restart$name
[17:46:58.960]                           if (is.null(name)) 
[17:46:58.960]                             next
[17:46:58.960]                           if (!grepl(pattern, name)) 
[17:46:58.960]                             next
[17:46:58.960]                           invokeRestart(restart)
[17:46:58.960]                           muffled <- TRUE
[17:46:58.960]                           break
[17:46:58.960]                         }
[17:46:58.960]                       }
[17:46:58.960]                     }
[17:46:58.960]                     invisible(muffled)
[17:46:58.960]                   }
[17:46:58.960]                   muffleCondition(cond)
[17:46:58.960]                 })
[17:46:58.960]             }))
[17:46:58.960]             future::FutureResult(value = ...future.value$value, 
[17:46:58.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.960]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.960]                     ...future.globalenv.names))
[17:46:58.960]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.960]         }, condition = base::local({
[17:46:58.960]             c <- base::c
[17:46:58.960]             inherits <- base::inherits
[17:46:58.960]             invokeRestart <- base::invokeRestart
[17:46:58.960]             length <- base::length
[17:46:58.960]             list <- base::list
[17:46:58.960]             seq.int <- base::seq.int
[17:46:58.960]             signalCondition <- base::signalCondition
[17:46:58.960]             sys.calls <- base::sys.calls
[17:46:58.960]             `[[` <- base::`[[`
[17:46:58.960]             `+` <- base::`+`
[17:46:58.960]             `<<-` <- base::`<<-`
[17:46:58.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.960]                   3L)]
[17:46:58.960]             }
[17:46:58.960]             function(cond) {
[17:46:58.960]                 is_error <- inherits(cond, "error")
[17:46:58.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.960]                   NULL)
[17:46:58.960]                 if (is_error) {
[17:46:58.960]                   sessionInformation <- function() {
[17:46:58.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.960]                       search = base::search(), system = base::Sys.info())
[17:46:58.960]                   }
[17:46:58.960]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.960]                     cond$call), session = sessionInformation(), 
[17:46:58.960]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.960]                   signalCondition(cond)
[17:46:58.960]                 }
[17:46:58.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.960]                 "immediateCondition"))) {
[17:46:58.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.960]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.960]                   if (TRUE && !signal) {
[17:46:58.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.960]                     {
[17:46:58.960]                       inherits <- base::inherits
[17:46:58.960]                       invokeRestart <- base::invokeRestart
[17:46:58.960]                       is.null <- base::is.null
[17:46:58.960]                       muffled <- FALSE
[17:46:58.960]                       if (inherits(cond, "message")) {
[17:46:58.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.960]                         if (muffled) 
[17:46:58.960]                           invokeRestart("muffleMessage")
[17:46:58.960]                       }
[17:46:58.960]                       else if (inherits(cond, "warning")) {
[17:46:58.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.960]                         if (muffled) 
[17:46:58.960]                           invokeRestart("muffleWarning")
[17:46:58.960]                       }
[17:46:58.960]                       else if (inherits(cond, "condition")) {
[17:46:58.960]                         if (!is.null(pattern)) {
[17:46:58.960]                           computeRestarts <- base::computeRestarts
[17:46:58.960]                           grepl <- base::grepl
[17:46:58.960]                           restarts <- computeRestarts(cond)
[17:46:58.960]                           for (restart in restarts) {
[17:46:58.960]                             name <- restart$name
[17:46:58.960]                             if (is.null(name)) 
[17:46:58.960]                               next
[17:46:58.960]                             if (!grepl(pattern, name)) 
[17:46:58.960]                               next
[17:46:58.960]                             invokeRestart(restart)
[17:46:58.960]                             muffled <- TRUE
[17:46:58.960]                             break
[17:46:58.960]                           }
[17:46:58.960]                         }
[17:46:58.960]                       }
[17:46:58.960]                       invisible(muffled)
[17:46:58.960]                     }
[17:46:58.960]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.960]                   }
[17:46:58.960]                 }
[17:46:58.960]                 else {
[17:46:58.960]                   if (TRUE) {
[17:46:58.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.960]                     {
[17:46:58.960]                       inherits <- base::inherits
[17:46:58.960]                       invokeRestart <- base::invokeRestart
[17:46:58.960]                       is.null <- base::is.null
[17:46:58.960]                       muffled <- FALSE
[17:46:58.960]                       if (inherits(cond, "message")) {
[17:46:58.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.960]                         if (muffled) 
[17:46:58.960]                           invokeRestart("muffleMessage")
[17:46:58.960]                       }
[17:46:58.960]                       else if (inherits(cond, "warning")) {
[17:46:58.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.960]                         if (muffled) 
[17:46:58.960]                           invokeRestart("muffleWarning")
[17:46:58.960]                       }
[17:46:58.960]                       else if (inherits(cond, "condition")) {
[17:46:58.960]                         if (!is.null(pattern)) {
[17:46:58.960]                           computeRestarts <- base::computeRestarts
[17:46:58.960]                           grepl <- base::grepl
[17:46:58.960]                           restarts <- computeRestarts(cond)
[17:46:58.960]                           for (restart in restarts) {
[17:46:58.960]                             name <- restart$name
[17:46:58.960]                             if (is.null(name)) 
[17:46:58.960]                               next
[17:46:58.960]                             if (!grepl(pattern, name)) 
[17:46:58.960]                               next
[17:46:58.960]                             invokeRestart(restart)
[17:46:58.960]                             muffled <- TRUE
[17:46:58.960]                             break
[17:46:58.960]                           }
[17:46:58.960]                         }
[17:46:58.960]                       }
[17:46:58.960]                       invisible(muffled)
[17:46:58.960]                     }
[17:46:58.960]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.960]                   }
[17:46:58.960]                 }
[17:46:58.960]             }
[17:46:58.960]         }))
[17:46:58.960]     }, error = function(ex) {
[17:46:58.960]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.960]                 ...future.rng), started = ...future.startTime, 
[17:46:58.960]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.960]             version = "1.8"), class = "FutureResult")
[17:46:58.960]     }, finally = {
[17:46:58.960]         if (!identical(...future.workdir, getwd())) 
[17:46:58.960]             setwd(...future.workdir)
[17:46:58.960]         {
[17:46:58.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.960]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.960]             }
[17:46:58.960]             base::options(...future.oldOptions)
[17:46:58.960]             if (.Platform$OS.type == "windows") {
[17:46:58.960]                 old_names <- names(...future.oldEnvVars)
[17:46:58.960]                 envs <- base::Sys.getenv()
[17:46:58.960]                 names <- names(envs)
[17:46:58.960]                 common <- intersect(names, old_names)
[17:46:58.960]                 added <- setdiff(names, old_names)
[17:46:58.960]                 removed <- setdiff(old_names, names)
[17:46:58.960]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.960]                   envs[common]]
[17:46:58.960]                 NAMES <- toupper(changed)
[17:46:58.960]                 args <- list()
[17:46:58.960]                 for (kk in seq_along(NAMES)) {
[17:46:58.960]                   name <- changed[[kk]]
[17:46:58.960]                   NAME <- NAMES[[kk]]
[17:46:58.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.960]                     next
[17:46:58.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.960]                 }
[17:46:58.960]                 NAMES <- toupper(added)
[17:46:58.960]                 for (kk in seq_along(NAMES)) {
[17:46:58.960]                   name <- added[[kk]]
[17:46:58.960]                   NAME <- NAMES[[kk]]
[17:46:58.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.960]                     next
[17:46:58.960]                   args[[name]] <- ""
[17:46:58.960]                 }
[17:46:58.960]                 NAMES <- toupper(removed)
[17:46:58.960]                 for (kk in seq_along(NAMES)) {
[17:46:58.960]                   name <- removed[[kk]]
[17:46:58.960]                   NAME <- NAMES[[kk]]
[17:46:58.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.960]                     next
[17:46:58.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.960]                 }
[17:46:58.960]                 if (length(args) > 0) 
[17:46:58.960]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.960]             }
[17:46:58.960]             else {
[17:46:58.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.960]             }
[17:46:58.960]             {
[17:46:58.960]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.960]                   0L) {
[17:46:58.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.960]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.960]                   base::options(opts)
[17:46:58.960]                 }
[17:46:58.960]                 {
[17:46:58.960]                   {
[17:46:58.960]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:58.960]                     NULL
[17:46:58.960]                   }
[17:46:58.960]                   options(future.plan = NULL)
[17:46:58.960]                   if (is.na(NA_character_)) 
[17:46:58.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.960]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.960]                     .init = FALSE)
[17:46:58.960]                 }
[17:46:58.960]             }
[17:46:58.960]         }
[17:46:58.960]     })
[17:46:58.960]     if (TRUE) {
[17:46:58.960]         base::sink(type = "output", split = FALSE)
[17:46:58.960]         if (TRUE) {
[17:46:58.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.960]         }
[17:46:58.960]         else {
[17:46:58.960]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.960]         }
[17:46:58.960]         base::close(...future.stdout)
[17:46:58.960]         ...future.stdout <- NULL
[17:46:58.960]     }
[17:46:58.960]     ...future.result$conditions <- ...future.conditions
[17:46:58.960]     ...future.result$finished <- base::Sys.time()
[17:46:58.960]     ...future.result
[17:46:58.960] }
[17:46:58.963] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[17:46:58.963] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[17:46:58.963] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[17:46:58.964] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[17:46:58.964] MultisessionFuture started
[17:46:58.964] - Launch lazy future ... done
[17:46:58.964] run() for ‘MultisessionFuture’ ... done
[17:46:58.965] result() for ClusterFuture ...
[17:46:58.965] receiveMessageFromWorker() for ClusterFuture ...
[17:46:58.965] - Validating connection of MultisessionFuture
[17:46:58.966] - received message: FutureResult
[17:46:58.966] - Received FutureResult
[17:46:58.966] - Erased future from FutureRegistry
[17:46:58.966] result() for ClusterFuture ...
[17:46:58.966] - result already collected: FutureResult
[17:46:58.966] result() for ClusterFuture ... done
[17:46:58.966] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:58.967] result() for ClusterFuture ... done
[17:46:58.967] result() for ClusterFuture ...
[17:46:58.967] - result already collected: FutureResult
[17:46:58.967] result() for ClusterFuture ... done
[17:46:58.967] plan(): Setting new future strategy stack:
[17:46:58.967] List of future strategies:
[17:46:58.967] 1. sequential:
[17:46:58.967]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:58.967]    - tweaked: FALSE
[17:46:58.967]    - call: plan(list(sequential, strategy))
[17:46:58.967] 2. multisession:
[17:46:58.967]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:58.967]    - tweaked: FALSE
[17:46:58.967]    - call: plan(list(sequential, strategy))
[17:46:58.968] plan(): nbrOfWorkers() = 1
[17:46:58.969] getGlobalsAndPackages() ...
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:58.969] Searching for globals...
[17:46:58.976] - globals found: [8] ‘{’, ‘<-’, ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’, ‘%<-%’
[17:46:58.977] Searching for globals ... DONE
[17:46:58.977] Resolving globals: FALSE
[17:46:58.977] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:58.978] The total size of the 1 globals exported for future expression (‘{; a %<-% subset(data, x < 3)$y; a; }’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:58.978] - globals: [1] ‘data’
[17:46:58.978] - packages: [1] ‘future’
[17:46:58.978] getGlobalsAndPackages() ... DONE
[17:46:58.979] run() for ‘Future’ ...
[17:46:58.979] - state: ‘created’
[17:46:58.979] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:58.979] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:58.979] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:58.980]   - Field: ‘label’
[17:46:58.980]   - Field: ‘local’
[17:46:58.980]   - Field: ‘owner’
[17:46:58.980]   - Field: ‘envir’
[17:46:58.980]   - Field: ‘packages’
[17:46:58.980]   - Field: ‘gc’
[17:46:58.980]   - Field: ‘conditions’
[17:46:58.980]   - Field: ‘expr’
[17:46:58.980]   - Field: ‘uuid’
[17:46:58.980]   - Field: ‘seed’
[17:46:58.980]   - Field: ‘version’
[17:46:58.981]   - Field: ‘result’
[17:46:58.981]   - Field: ‘asynchronous’
[17:46:58.981]   - Field: ‘calls’
[17:46:58.981]   - Field: ‘globals’
[17:46:58.981]   - Field: ‘stdout’
[17:46:58.981]   - Field: ‘earlySignal’
[17:46:58.981]   - Field: ‘lazy’
[17:46:58.981]   - Field: ‘state’
[17:46:58.981] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:58.981] - Launch lazy future ...
[17:46:58.982] Packages needed by the future expression (n = 1): ‘future’
[17:46:58.982] Packages needed by future strategies (n = 1): ‘future’
[17:46:58.982] {
[17:46:58.982]     {
[17:46:58.982]         {
[17:46:58.982]             ...future.startTime <- base::Sys.time()
[17:46:58.982]             {
[17:46:58.982]                 {
[17:46:58.982]                   {
[17:46:58.982]                     {
[17:46:58.982]                       base::local({
[17:46:58.982]                         has_future <- base::requireNamespace("future", 
[17:46:58.982]                           quietly = TRUE)
[17:46:58.982]                         if (has_future) {
[17:46:58.982]                           ns <- base::getNamespace("future")
[17:46:58.982]                           version <- ns[[".package"]][["version"]]
[17:46:58.982]                           if (is.null(version)) 
[17:46:58.982]                             version <- utils::packageVersion("future")
[17:46:58.982]                         }
[17:46:58.982]                         else {
[17:46:58.982]                           version <- NULL
[17:46:58.982]                         }
[17:46:58.982]                         if (!has_future || version < "1.8.0") {
[17:46:58.982]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:58.982]                             "", base::R.version$version.string), 
[17:46:58.982]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:58.982]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:58.982]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:58.982]                               "release", "version")], collapse = " "), 
[17:46:58.982]                             hostname = base::Sys.info()[["nodename"]])
[17:46:58.982]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:58.982]                             info)
[17:46:58.982]                           info <- base::paste(info, collapse = "; ")
[17:46:58.982]                           if (!has_future) {
[17:46:58.982]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:58.982]                               info)
[17:46:58.982]                           }
[17:46:58.982]                           else {
[17:46:58.982]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:58.982]                               info, version)
[17:46:58.982]                           }
[17:46:58.982]                           base::stop(msg)
[17:46:58.982]                         }
[17:46:58.982]                       })
[17:46:58.982]                     }
[17:46:58.982]                     base::local({
[17:46:58.982]                       for (pkg in "future") {
[17:46:58.982]                         base::loadNamespace(pkg)
[17:46:58.982]                         base::library(pkg, character.only = TRUE)
[17:46:58.982]                       }
[17:46:58.982]                     })
[17:46:58.982]                   }
[17:46:58.982]                   ...future.strategy.old <- future::plan("list")
[17:46:58.982]                   options(future.plan = NULL)
[17:46:58.982]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.982]                   future::plan(list(function (..., workers = availableCores(), 
[17:46:58.982]                     lazy = FALSE, rscript_libs = .libPaths(), 
[17:46:58.982]                     envir = parent.frame()) 
[17:46:58.982]                   {
[17:46:58.982]                     if (is.function(workers)) 
[17:46:58.982]                       workers <- workers()
[17:46:58.982]                     workers <- structure(as.integer(workers), 
[17:46:58.982]                       class = class(workers))
[17:46:58.982]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[17:46:58.982]                       workers >= 1)
[17:46:58.982]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[17:46:58.982]                       return(sequential(..., lazy = TRUE, envir = envir))
[17:46:58.982]                     }
[17:46:58.982]                     future <- MultisessionFuture(..., workers = workers, 
[17:46:58.982]                       lazy = lazy, rscript_libs = rscript_libs, 
[17:46:58.982]                       envir = envir)
[17:46:58.982]                     if (!future$lazy) 
[17:46:58.982]                       future <- run(future)
[17:46:58.982]                     invisible(future)
[17:46:58.982]                   }), .cleanup = FALSE, .init = FALSE)
[17:46:58.982]                 }
[17:46:58.982]                 ...future.workdir <- getwd()
[17:46:58.982]             }
[17:46:58.982]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:58.982]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:58.982]         }
[17:46:58.982]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:58.982]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:58.982]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:58.982]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:58.982]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:58.982]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:58.982]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:58.982]             base::names(...future.oldOptions))
[17:46:58.982]     }
[17:46:58.982]     if (FALSE) {
[17:46:58.982]     }
[17:46:58.982]     else {
[17:46:58.982]         if (TRUE) {
[17:46:58.982]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:58.982]                 open = "w")
[17:46:58.982]         }
[17:46:58.982]         else {
[17:46:58.982]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:58.982]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:58.982]         }
[17:46:58.982]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:58.982]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:58.982]             base::sink(type = "output", split = FALSE)
[17:46:58.982]             base::close(...future.stdout)
[17:46:58.982]         }, add = TRUE)
[17:46:58.982]     }
[17:46:58.982]     ...future.frame <- base::sys.nframe()
[17:46:58.982]     ...future.conditions <- base::list()
[17:46:58.982]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:58.982]     if (FALSE) {
[17:46:58.982]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:58.982]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:58.982]     }
[17:46:58.982]     ...future.result <- base::tryCatch({
[17:46:58.982]         base::withCallingHandlers({
[17:46:58.982]             ...future.value <- base::withVisible(base::local({
[17:46:58.982]                 a %<-% subset(data, x < 3)$y
[17:46:58.982]                 a
[17:46:58.982]             }))
[17:46:58.982]             future::FutureResult(value = ...future.value$value, 
[17:46:58.982]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.982]                   ...future.rng), globalenv = if (FALSE) 
[17:46:58.982]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:58.982]                     ...future.globalenv.names))
[17:46:58.982]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:58.982]         }, condition = base::local({
[17:46:58.982]             c <- base::c
[17:46:58.982]             inherits <- base::inherits
[17:46:58.982]             invokeRestart <- base::invokeRestart
[17:46:58.982]             length <- base::length
[17:46:58.982]             list <- base::list
[17:46:58.982]             seq.int <- base::seq.int
[17:46:58.982]             signalCondition <- base::signalCondition
[17:46:58.982]             sys.calls <- base::sys.calls
[17:46:58.982]             `[[` <- base::`[[`
[17:46:58.982]             `+` <- base::`+`
[17:46:58.982]             `<<-` <- base::`<<-`
[17:46:58.982]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:58.982]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:58.982]                   3L)]
[17:46:58.982]             }
[17:46:58.982]             function(cond) {
[17:46:58.982]                 is_error <- inherits(cond, "error")
[17:46:58.982]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:58.982]                   NULL)
[17:46:58.982]                 if (is_error) {
[17:46:58.982]                   sessionInformation <- function() {
[17:46:58.982]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:58.982]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:58.982]                       search = base::search(), system = base::Sys.info())
[17:46:58.982]                   }
[17:46:58.982]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.982]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:58.982]                     cond$call), session = sessionInformation(), 
[17:46:58.982]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:58.982]                   signalCondition(cond)
[17:46:58.982]                 }
[17:46:58.982]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:58.982]                 "immediateCondition"))) {
[17:46:58.982]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:58.982]                   ...future.conditions[[length(...future.conditions) + 
[17:46:58.982]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:58.982]                   if (TRUE && !signal) {
[17:46:58.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.982]                     {
[17:46:58.982]                       inherits <- base::inherits
[17:46:58.982]                       invokeRestart <- base::invokeRestart
[17:46:58.982]                       is.null <- base::is.null
[17:46:58.982]                       muffled <- FALSE
[17:46:58.982]                       if (inherits(cond, "message")) {
[17:46:58.982]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.982]                         if (muffled) 
[17:46:58.982]                           invokeRestart("muffleMessage")
[17:46:58.982]                       }
[17:46:58.982]                       else if (inherits(cond, "warning")) {
[17:46:58.982]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.982]                         if (muffled) 
[17:46:58.982]                           invokeRestart("muffleWarning")
[17:46:58.982]                       }
[17:46:58.982]                       else if (inherits(cond, "condition")) {
[17:46:58.982]                         if (!is.null(pattern)) {
[17:46:58.982]                           computeRestarts <- base::computeRestarts
[17:46:58.982]                           grepl <- base::grepl
[17:46:58.982]                           restarts <- computeRestarts(cond)
[17:46:58.982]                           for (restart in restarts) {
[17:46:58.982]                             name <- restart$name
[17:46:58.982]                             if (is.null(name)) 
[17:46:58.982]                               next
[17:46:58.982]                             if (!grepl(pattern, name)) 
[17:46:58.982]                               next
[17:46:58.982]                             invokeRestart(restart)
[17:46:58.982]                             muffled <- TRUE
[17:46:58.982]                             break
[17:46:58.982]                           }
[17:46:58.982]                         }
[17:46:58.982]                       }
[17:46:58.982]                       invisible(muffled)
[17:46:58.982]                     }
[17:46:58.982]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.982]                   }
[17:46:58.982]                 }
[17:46:58.982]                 else {
[17:46:58.982]                   if (TRUE) {
[17:46:58.982]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:58.982]                     {
[17:46:58.982]                       inherits <- base::inherits
[17:46:58.982]                       invokeRestart <- base::invokeRestart
[17:46:58.982]                       is.null <- base::is.null
[17:46:58.982]                       muffled <- FALSE
[17:46:58.982]                       if (inherits(cond, "message")) {
[17:46:58.982]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:58.982]                         if (muffled) 
[17:46:58.982]                           invokeRestart("muffleMessage")
[17:46:58.982]                       }
[17:46:58.982]                       else if (inherits(cond, "warning")) {
[17:46:58.982]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:58.982]                         if (muffled) 
[17:46:58.982]                           invokeRestart("muffleWarning")
[17:46:58.982]                       }
[17:46:58.982]                       else if (inherits(cond, "condition")) {
[17:46:58.982]                         if (!is.null(pattern)) {
[17:46:58.982]                           computeRestarts <- base::computeRestarts
[17:46:58.982]                           grepl <- base::grepl
[17:46:58.982]                           restarts <- computeRestarts(cond)
[17:46:58.982]                           for (restart in restarts) {
[17:46:58.982]                             name <- restart$name
[17:46:58.982]                             if (is.null(name)) 
[17:46:58.982]                               next
[17:46:58.982]                             if (!grepl(pattern, name)) 
[17:46:58.982]                               next
[17:46:58.982]                             invokeRestart(restart)
[17:46:58.982]                             muffled <- TRUE
[17:46:58.982]                             break
[17:46:58.982]                           }
[17:46:58.982]                         }
[17:46:58.982]                       }
[17:46:58.982]                       invisible(muffled)
[17:46:58.982]                     }
[17:46:58.982]                     muffleCondition(cond, pattern = "^muffle")
[17:46:58.982]                   }
[17:46:58.982]                 }
[17:46:58.982]             }
[17:46:58.982]         }))
[17:46:58.982]     }, error = function(ex) {
[17:46:58.982]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:58.982]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:58.982]                 ...future.rng), started = ...future.startTime, 
[17:46:58.982]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:58.982]             version = "1.8"), class = "FutureResult")
[17:46:58.982]     }, finally = {
[17:46:58.982]         if (!identical(...future.workdir, getwd())) 
[17:46:58.982]             setwd(...future.workdir)
[17:46:58.982]         {
[17:46:58.982]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:58.982]                 ...future.oldOptions$nwarnings <- NULL
[17:46:58.982]             }
[17:46:58.982]             base::options(...future.oldOptions)
[17:46:58.982]             if (.Platform$OS.type == "windows") {
[17:46:58.982]                 old_names <- names(...future.oldEnvVars)
[17:46:58.982]                 envs <- base::Sys.getenv()
[17:46:58.982]                 names <- names(envs)
[17:46:58.982]                 common <- intersect(names, old_names)
[17:46:58.982]                 added <- setdiff(names, old_names)
[17:46:58.982]                 removed <- setdiff(old_names, names)
[17:46:58.982]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:58.982]                   envs[common]]
[17:46:58.982]                 NAMES <- toupper(changed)
[17:46:58.982]                 args <- list()
[17:46:58.982]                 for (kk in seq_along(NAMES)) {
[17:46:58.982]                   name <- changed[[kk]]
[17:46:58.982]                   NAME <- NAMES[[kk]]
[17:46:58.982]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.982]                     next
[17:46:58.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.982]                 }
[17:46:58.982]                 NAMES <- toupper(added)
[17:46:58.982]                 for (kk in seq_along(NAMES)) {
[17:46:58.982]                   name <- added[[kk]]
[17:46:58.982]                   NAME <- NAMES[[kk]]
[17:46:58.982]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.982]                     next
[17:46:58.982]                   args[[name]] <- ""
[17:46:58.982]                 }
[17:46:58.982]                 NAMES <- toupper(removed)
[17:46:58.982]                 for (kk in seq_along(NAMES)) {
[17:46:58.982]                   name <- removed[[kk]]
[17:46:58.982]                   NAME <- NAMES[[kk]]
[17:46:58.982]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:58.982]                     next
[17:46:58.982]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:58.982]                 }
[17:46:58.982]                 if (length(args) > 0) 
[17:46:58.982]                   base::do.call(base::Sys.setenv, args = args)
[17:46:58.982]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:58.982]             }
[17:46:58.982]             else {
[17:46:58.982]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:58.982]             }
[17:46:58.982]             {
[17:46:58.982]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:58.982]                   0L) {
[17:46:58.982]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:58.982]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:58.982]                   base::options(opts)
[17:46:58.982]                 }
[17:46:58.982]                 {
[17:46:58.982]                   {
[17:46:58.982]                     NULL
[17:46:58.982]                     RNGkind("Mersenne-Twister")
[17:46:58.982]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:58.982]                       inherits = FALSE)
[17:46:58.982]                   }
[17:46:58.982]                   options(future.plan = NULL)
[17:46:58.982]                   if (is.na(NA_character_)) 
[17:46:58.982]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:58.982]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:58.982]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:58.982]                     .init = FALSE)
[17:46:58.982]                 }
[17:46:58.982]             }
[17:46:58.982]         }
[17:46:58.982]     })
[17:46:58.982]     if (TRUE) {
[17:46:58.982]         base::sink(type = "output", split = FALSE)
[17:46:58.982]         if (TRUE) {
[17:46:58.982]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:58.982]         }
[17:46:58.982]         else {
[17:46:58.982]             ...future.result["stdout"] <- base::list(NULL)
[17:46:58.982]         }
[17:46:58.982]         base::close(...future.stdout)
[17:46:58.982]         ...future.stdout <- NULL
[17:46:58.982]     }
[17:46:58.982]     ...future.result$conditions <- ...future.conditions
[17:46:58.982]     ...future.result$finished <- base::Sys.time()
[17:46:58.982]     ...future.result
[17:46:58.982] }
[17:46:58.984] assign_globals() ...
[17:46:58.984] List of 1
[17:46:58.984]  $ data:'data.frame':	5 obs. of  2 variables:
[17:46:58.984]   ..$ x: int [1:5] 1 2 3 4 5
[17:46:58.984]   ..$ y: int [1:5] 1 2 3 4 5
[17:46:58.984]  - attr(*, "where")=List of 1
[17:46:58.984]   ..$ data:<environment: R_EmptyEnv> 
[17:46:58.984]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:58.984]  - attr(*, "resolved")= logi FALSE
[17:46:58.984]  - attr(*, "total_size")= num 160
[17:46:58.984]  - attr(*, "already-done")= logi TRUE
[17:46:58.987] - copied ‘data’ to environment
[17:46:58.987] assign_globals() ... done
[17:46:58.988] plan(): Setting new future strategy stack:
[17:46:58.988] List of future strategies:
[17:46:58.988] 1. multisession:
[17:46:58.988]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:58.988]    - tweaked: FALSE
[17:46:58.988]    - call: plan(list(sequential, strategy))
[17:46:58.991] plan(): nbrOfWorkers() = 2
[17:46:59.389] plan(): Setting new future strategy stack:
[17:46:59.389] List of future strategies:
[17:46:59.389] 1. sequential:
[17:46:59.389]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:59.389]    - tweaked: FALSE
[17:46:59.389]    - call: plan(list(sequential, strategy))
[17:46:59.389] 2. multisession:
[17:46:59.389]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:59.389]    - tweaked: FALSE
[17:46:59.389]    - call: plan(list(sequential, strategy))
[17:46:59.389] plan(): nbrOfWorkers() = 1
[17:46:59.389] SequentialFuture started (and completed)
[17:46:59.390] signalConditions() ...
[17:46:59.390]  - include = ‘immediateCondition’
[17:46:59.390]  - exclude = 
[17:46:59.390]  - resignal = FALSE
[17:46:59.390]  - Number of conditions: 93
[17:46:59.390] signalConditions() ... done
[17:46:59.390] - Launch lazy future ... done
[17:46:59.390] run() for ‘SequentialFuture’ ... done
[17:46:59.390] signalConditions() ...
[17:46:59.390]  - include = ‘immediateCondition’
[17:46:59.391]  - exclude = 
[17:46:59.391]  - resignal = FALSE
[17:46:59.391]  - Number of conditions: 93
[17:46:59.391] signalConditions() ... done
[17:46:59.391] Future state: ‘finished’
[17:46:59.391] signalConditions() ...
[17:46:59.391]  - include = ‘condition’
[17:46:59.391]  - exclude = ‘immediateCondition’
[17:46:59.391]  - resignal = TRUE
[17:46:59.391]  - Number of conditions: 93
[17:46:59.392]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:58.992] getGlobalsAndPackages() ...
[17:46:59.392]  - Condition #2: ‘deprecatedWarning’, ‘warning’, ‘condition’
Warning in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,  :
  R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘ignore’
[17:46:59.392]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.005] Searching for globals...
[17:46:59.392]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.006] - globals found: [5] ‘$’, ‘subset’, ‘data’, ‘<’, ‘x’
[17:46:59.392]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.006] Searching for globals ... DONE
[17:46:59.392]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.006] Resolving globals: FALSE
[17:46:59.392]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.007] The total size of the 1 globals is 160 bytes (160 bytes)
[17:46:59.392]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.007] The total size of the 1 globals exported for future expression (‘subset(data, x < 3)$y’) is 160 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (160 bytes of class ‘list’)
[17:46:59.393]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.007] - globals: [1] ‘data’
[17:46:59.393]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.007] 
[17:46:59.393]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.007] getGlobalsAndPackages() ... DONE
[17:46:59.393]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.008] run() for ‘Future’ ...
[17:46:59.393]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.008] - state: ‘created’
[17:46:59.393]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.008] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:59.393]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.011] [local output] makeClusterPSOCK() ...
[17:46:59.393]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.014] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:46:59.394]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.015] [local output] Base port: 11901
[17:46:59.394]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.015] [local output] Getting setup options for 2 cluster nodes ...
[17:46:59.394]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.015] [local output]  - Node 1 of 2 ...
[17:46:59.394]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.016] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:59.394]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.016] [local output] Rscript port: 11901

[17:46:59.394]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.016] [local output]  - Node 2 of 2 ...
[17:46:59.394]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.017] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:59.394]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.017] [local output] Rscript port: 11901

[17:46:59.395]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.018] [local output] Getting setup options for 2 cluster nodes ... done
[17:46:59.395]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.018] [local output]  - Parallel setup requested for some PSOCK nodes
[17:46:59.395]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.018] [local output] Setting up PSOCK nodes in parallel
[17:46:59.395]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.018] List of 36
[17:46:59.018]  $ worker          : chr "localhost"
[17:46:59.018]   ..- attr(*, "localhost")= logi TRUE
[17:46:59.018]  $ master          : chr "localhost"
[17:46:59.018]  $ port            : int 11901
[17:46:59.018]  $ connectTimeout  : num 120
[17:46:59.018]  $ timeout         : num 2592000
[17:46:59.018]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:46:59.018]  $ homogeneous     : logi TRUE
[17:46:59.018]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:46:59.018]  $ rscript_envs    : NULL
[17:46:59.018]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:59.018]  $ rscript_startup : NULL
[17:46:59.018]  $ rscript_sh      : chr "sh"
[17:46:59.018]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:59.018]  $ methods         : logi TRUE
[17:46:59.018]  $ socketOptions   : chr "no-delay"
[17:46:59.018]  $ useXDR          : logi FALSE
[17:46:59.018]  $ outfile         : chr "/dev/null"
[17:46:59.018]  $ renice          : int NA
[17:46:59.018]  $ rshcmd          : NULL
[17:46:59.018]  $ user            : chr(0) 
[17:46:59.018]  $ revtunnel       : logi FALSE
[17:46:59.018]  $ rshlogfile      : NULL
[17:46:59.018]  $ rshopts         : chr(0) 
[17:46:59.018]  $ rank            : int 1
[17:46:59.018]  $ manual          : logi FALSE
[17:46:59.018]  $ dryrun          : logi FALSE
[17:46:59.018]  $ quiet           : logi FALSE
[17:46:59.018]  $ setup_strategy  : chr "parallel"
[17:46:59.018]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:59.018]  $ pidfile         : chr "/tmp/RtmpJEWZHY/worker.rank=1.parallelly.parent=43589.aa4544680abf.pid"
[17:46:59.018]  $ rshcmd_label    : NULL
[17:46:59.018]  $ rsh_call        : NULL
[17:46:59.018]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:59.018]  $ localMachine    : logi TRUE
[17:46:59.018]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:46:59.018]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:46:59.018]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:46:59.018]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:46:59.018]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:46:59.018]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:46:59.018]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:46:59.018]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:46:59.018]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:46:59.018]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:46:59.018]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:46:59.018]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:46:59.018]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:46:59.018]  $ arguments       :List of 28
[17:46:59.018]   ..$ worker          : chr "localhost"
[17:46:59.018]   ..$ master          : NULL
[17:46:59.018]   ..$ port            : int 11901
[17:46:59.018]   ..$ connectTimeout  : num 120
[17:46:59.018]   ..$ timeout         : num 2592000
[17:46:59.018]   ..$ rscript         : NULL
[17:46:59.018]   ..$ homogeneous     : NULL
[17:46:59.018]   ..$ rscript_args    : NULL
[17:46:59.018]   ..$ rscript_envs    : NULL
[17:46:59.018]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:59.018]   ..$ rscript_startup : NULL
[17:46:59.018]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:46:59.018]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:59.018]   ..$ methods         : logi TRUE
[17:46:59.018]   ..$ socketOptions   : chr "no-delay"
[17:46:59.018]   ..$ useXDR          : logi FALSE
[17:46:59.018]   ..$ outfile         : chr "/dev/null"
[17:46:59.018]   ..$ renice          : int NA
[17:46:59.018]   ..$ rshcmd          : NULL
[17:46:59.018]   ..$ user            : NULL
[17:46:59.018]   ..$ revtunnel       : logi NA
[17:46:59.018]   ..$ rshlogfile      : NULL
[17:46:59.018]   ..$ rshopts         : NULL
[17:46:59.018]   ..$ rank            : int 1
[17:46:59.018]   ..$ manual          : logi FALSE
[17:46:59.018]   ..$ dryrun          : logi FALSE
[17:46:59.018]   ..$ quiet           : logi FALSE
[17:46:59.018]   ..$ setup_strategy  : chr "parallel"
[17:46:59.018]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:46:59.395]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.035] [local output] System call to launch all workers:
[17:46:59.395]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.035] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJEWZHY/worker.rank=1.parallelly.parent=43589.aa4544680abf.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11901 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:46:59.395]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.035] [local output] Starting PSOCK main server
[17:46:59.395]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.036] [local output] Workers launched
[17:46:59.396]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.036] [local output] Waiting for workers to connect back
[17:46:59.396]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.037]  - [local output] 0 workers out of 2 ready
[17:46:59.396]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.273]  - [local output] 0 workers out of 2 ready
[17:46:59.396]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.274]  - [local output] 1 workers out of 2 ready
[17:46:59.396]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.284]  - [local output] 1 workers out of 2 ready
[17:46:59.396]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.285]  - [local output] 2 workers out of 2 ready
[17:46:59.396]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.285] [local output] Launching of workers completed
[17:46:59.396]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.285] [local output] Collecting session information from workers
[17:46:59.397]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.286] [local output]  - Worker #1 of 2
[17:46:59.397]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.286] [local output]  - Worker #2 of 2
[17:46:59.397]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.287] [local output] makeClusterPSOCK() ... done
[17:46:59.397]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.297] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:59.397]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.297] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:59.397]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.297]   - Field: ‘node’
[17:46:59.397]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.297]   - Field: ‘label’
[17:46:59.397]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.297]   - Field: ‘local’
[17:46:59.398]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.297]   - Field: ‘owner’
[17:46:59.398]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.297]   - Field: ‘envir’
[17:46:59.398]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.297]   - Field: ‘workers’
[17:46:59.398]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘packages’
[17:46:59.398]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘gc’
[17:46:59.398]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘conditions’
[17:46:59.398]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘persistent’
[17:46:59.399]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘expr’
[17:46:59.399]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘uuid’
[17:46:59.399]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘seed’
[17:46:59.399]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘version’
[17:46:59.399]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘result’
[17:46:59.399]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.298]   - Field: ‘asynchronous’
[17:46:59.399]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.299]   - Field: ‘calls’
[17:46:59.399]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.299]   - Field: ‘globals’
[17:46:59.400]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.299]   - Field: ‘stdout’
[17:46:59.400]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.299]   - Field: ‘earlySignal’
[17:46:59.400]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.299]   - Field: ‘lazy’
[17:46:59.400]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.299]   - Field: ‘state’
[17:46:59.400]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.299] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:59.400]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.299] - Launch lazy future ...
[17:46:59.400]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.300] Packages needed by the future expression (n = 0): <none>
[17:46:59.400]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.300] Packages needed by future strategies (n = 0): <none>
[17:46:59.401]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.300] {
[17:46:59.300]     {
[17:46:59.300]         {
[17:46:59.300]             ...future.startTime <- base::Sys.time()
[17:46:59.300]             {
[17:46:59.300]                 {
[17:46:59.300]                   {
[17:46:59.300]                     {
[17:46:59.300]                       base::local({
[17:46:59.300]                         has_future <- base::requireNamespace("future", 
[17:46:59.300]                           quietly = TRUE)
[17:46:59.300]                         if (has_future) {
[17:46:59.300]                           ns <- base::getNamespace("future")
[17:46:59.300]                           version <- ns[[".package"]][["version"]]
[17:46:59.300]                           if (is.null(version)) 
[17:46:59.300]                             version <- utils::packageVersion("future")
[17:46:59.300]                         }
[17:46:59.300]                         else {
[17:46:59.300]                           version <- NULL
[17:46:59.300]                         }
[17:46:59.300]                         if (!has_future || version < "1.8.0") {
[17:46:59.300]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:59.300]                             "", base::R.version$version.string), 
[17:46:59.300]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:59.300]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:59.300]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:59.300]                               "release", "version")], collapse = " "), 
[17:46:59.300]                             hostname = base::Sys.info()[["nodename"]])
[17:46:59.300]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:59.300]                             info)
[17:46:59.300]                           info <- base::paste(info, collapse = "; ")
[17:46:59.300]                           if (!has_future) {
[17:46:59.300]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:59.300]                               info)
[17:46:59.300]                           }
[17:46:59.300]                           else {
[17:46:59.300]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:59.300]                               info, version)
[17:46:59.300]                           }
[17:46:59.300]                           base::stop(msg)
[17:46:59.300]                         }
[17:46:59.300]                       })
[17:46:59.300]                     }
[17:46:59.300]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:59.300]                     base::options(mc.cores = 1L)
[17:46:59.300]                   }
[17:46:59.300]                   ...future.strategy.old <- future::plan("list")
[17:46:59.300]                   options(future.plan = NULL)
[17:46:59.300]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:59.300]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:59.300]                 }
[17:46:59.300]                 ...future.workdir <- getwd()
[17:46:59.300]             }
[17:46:59.300]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:59.300]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:59.300]         }
[17:46:59.300]         base::options(future.startup.script = FALSE, future.globals.onMissing = "ignore", 
[17:46:59.300]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:59.300]             future.globals.onMissing = "ignore", future.globals.onReference = NULL, 
[17:46:59.300]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:59.300]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:59.300]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:59.300]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:59.300]             base::names(...future.oldOptions))
[17:46:59.300]     }
[17:46:59.300]     if (FALSE) {
[17:46:59.300]     }
[17:46:59.300]     else {
[17:46:59.300]         if (TRUE) {
[17:46:59.300]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:59.300]                 open = "w")
[17:46:59.300]         }
[17:46:59.300]         else {
[17:46:59.300]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:59.300]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:59.300]         }
[17:46:59.300]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:59.300]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:59.300]             base::sink(type = "output", split = FALSE)
[17:46:59.300]             base::close(...future.stdout)
[17:46:59.300]         }, add = TRUE)
[17:46:59.300]     }
[17:46:59.300]     ...future.frame <- base::sys.nframe()
[17:46:59.300]     ...future.conditions <- base::list()
[17:46:59.300]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:59.300]     if (FALSE) {
[17:46:59.300]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:59.300]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:59.300]     }
[17:46:59.300]     ...future.result <- base::tryCatch({
[17:46:59.300]         base::withCallingHandlers({
[17:46:59.300]             ...future.value <- base::withVisible(base::local({
[17:46:59.300]                 ...future.makeSendCondition <- base::local({
[17:46:59.300]                   sendCondition <- NULL
[17:46:59.300]                   function(frame = 1L) {
[17:46:59.300]                     if (is.function(sendCondition)) 
[17:46:59.300]                       return(sendCondition)
[17:46:59.300]                     ns <- getNamespace("parallel")
[17:46:59.300]                     if (exists("sendData", mode = "function", 
[17:46:59.300]                       envir = ns)) {
[17:46:59.300]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:59.300]                         envir = ns)
[17:46:59.300]                       envir <- sys.frame(frame)
[17:46:59.300]                       master <- NULL
[17:46:59.300]                       while (!identical(envir, .GlobalEnv) && 
[17:46:59.300]                         !identical(envir, emptyenv())) {
[17:46:59.300]                         if (exists("master", mode = "list", envir = envir, 
[17:46:59.300]                           inherits = FALSE)) {
[17:46:59.300]                           master <- get("master", mode = "list", 
[17:46:59.300]                             envir = envir, inherits = FALSE)
[17:46:59.300]                           if (inherits(master, c("SOCKnode", 
[17:46:59.300]                             "SOCK0node"))) {
[17:46:59.300]                             sendCondition <<- function(cond) {
[17:46:59.300]                               data <- list(type = "VALUE", value = cond, 
[17:46:59.300]                                 success = TRUE)
[17:46:59.300]                               parallel_sendData(master, data)
[17:46:59.300]                             }
[17:46:59.300]                             return(sendCondition)
[17:46:59.300]                           }
[17:46:59.300]                         }
[17:46:59.300]                         frame <- frame + 1L
[17:46:59.300]                         envir <- sys.frame(frame)
[17:46:59.300]                       }
[17:46:59.300]                     }
[17:46:59.300]                     sendCondition <<- function(cond) NULL
[17:46:59.300]                   }
[17:46:59.300]                 })
[17:46:59.300]                 withCallingHandlers({
[17:46:59.300]                   subset(data, x < 3)$y
[17:46:59.300]                 }, immediateCondition = function(cond) {
[17:46:59.300]                   sendCondition <- ...future.makeSendCondition()
[17:46:59.300]                   sendCondition(cond)
[17:46:59.300]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:59.300]                   {
[17:46:59.300]                     inherits <- base::inherits
[17:46:59.300]                     invokeRestart <- base::invokeRestart
[17:46:59.300]                     is.null <- base::is.null
[17:46:59.300]                     muffled <- FALSE
[17:46:59.300]                     if (inherits(cond, "message")) {
[17:46:59.300]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:59.300]                       if (muffled) 
[17:46:59.300]                         invokeRestart("muffleMessage")
[17:46:59.300]                     }
[17:46:59.300]                     else if (inherits(cond, "warning")) {
[17:46:59.300]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:59.300]                       if (muffled) 
[17:46:59.300]                         invokeRestart("muffleWarning")
[17:46:59.300]                     }
[17:46:59.300]                     else if (inherits(cond, "condition")) {
[17:46:59.300]                       if (!is.null(pattern)) {
[17:46:59.300]                         computeRestarts <- base::computeRestarts
[17:46:59.300]                         grepl <- base::grepl
[17:46:59.300]                         restarts <- computeRestarts(cond)
[17:46:59.300]                         for (restart in restarts) {
[17:46:59.300]                           name <- restart$name
[17:46:59.300]                           if (is.null(name)) 
[17:46:59.300]                             next
[17:46:59.300]                           if (!grepl(pattern, name)) 
[17:46:59.300]                             next
[17:46:59.300]                           invokeRestart(restart)
[17:46:59.300]                           muffled <- TRUE
[17:46:59.300]                           break
[17:46:59.300]                         }
[17:46:59.300]                       }
[17:46:59.300]                     }
[17:46:59.300]                     invisible(muffled)
[17:46:59.300]                   }
[17:46:59.300]                   muffleCondition(cond)
[17:46:59.300]                 })
[17:46:59.300]             }))
[17:46:59.300]             future::FutureResult(value = ...future.value$value, 
[17:46:59.300]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:59.300]                   ...future.rng), globalenv = if (FALSE) 
[17:46:59.300]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:59.300]                     ...future.globalenv.names))
[17:46:59.300]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:59.300]         }, condition = base::local({
[17:46:59.300]             c <- base::c
[17:46:59.300]             inherits <- base::inherits
[17:46:59.300]             invokeRestart <- base::invokeRestart
[17:46:59.300]             length <- base::length
[17:46:59.300]             list <- base::list
[17:46:59.300]             seq.int <- base::seq.int
[17:46:59.300]             signalCondition <- base::signalCondition
[17:46:59.300]             sys.calls <- base::sys.calls
[17:46:59.300]             `[[` <- base::`[[`
[17:46:59.300]             `+` <- base::`+`
[17:46:59.300]             `<<-` <- base::`<<-`
[17:46:59.300]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:59.300]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:59.300]                   3L)]
[17:46:59.300]             }
[17:46:59.300]             function(cond) {
[17:46:59.300]                 is_error <- inherits(cond, "error")
[17:46:59.300]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:59.300]                   NULL)
[17:46:59.300]                 if (is_error) {
[17:46:59.300]                   sessionInformation <- function() {
[17:46:59.300]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:59.300]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:59.300]                       search = base::search(), system = base::Sys.info())
[17:46:59.300]                   }
[17:46:59.300]                   ...future.conditions[[length(...future.conditions) + 
[17:46:59.300]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:59.300]                     cond$call), session = sessionInformation(), 
[17:46:59.300]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:59.300]                   signalCondition(cond)
[17:46:59.300]                 }
[17:46:59.300]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:59.300]                 "immediateCondition"))) {
[17:46:59.300]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:59.300]                   ...future.conditions[[length(...future.conditions) + 
[17:46:59.300]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:59.300]                   if (TRUE && !signal) {
[17:46:59.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:59.300]                     {
[17:46:59.300]                       inherits <- base::inherits
[17:46:59.300]                       invokeRestart <- base::invokeRestart
[17:46:59.300]                       is.null <- base::is.null
[17:46:59.300]                       muffled <- FALSE
[17:46:59.300]                       if (inherits(cond, "message")) {
[17:46:59.300]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:59.300]                         if (muffled) 
[17:46:59.300]                           invokeRestart("muffleMessage")
[17:46:59.300]                       }
[17:46:59.300]                       else if (inherits(cond, "warning")) {
[17:46:59.300]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:59.300]                         if (muffled) 
[17:46:59.300]                           invokeRestart("muffleWarning")
[17:46:59.300]                       }
[17:46:59.300]                       else if (inherits(cond, "condition")) {
[17:46:59.300]                         if (!is.null(pattern)) {
[17:46:59.300]                           computeRestarts <- base::computeRestarts
[17:46:59.300]                           grepl <- base::grepl
[17:46:59.300]                           restarts <- computeRestarts(cond)
[17:46:59.300]                           for (restart in restarts) {
[17:46:59.300]                             name <- restart$name
[17:46:59.300]                             if (is.null(name)) 
[17:46:59.300]                               next
[17:46:59.300]                             if (!grepl(pattern, name)) 
[17:46:59.300]                               next
[17:46:59.300]                             invokeRestart(restart)
[17:46:59.300]                             muffled <- TRUE
[17:46:59.300]                             break
[17:46:59.300]                           }
[17:46:59.300]                         }
[17:46:59.300]                       }
[17:46:59.300]                       invisible(muffled)
[17:46:59.300]                     }
[17:46:59.300]                     muffleCondition(cond, pattern = "^muffle")
[17:46:59.300]                   }
[17:46:59.300]                 }
[17:46:59.300]                 else {
[17:46:59.300]                   if (TRUE) {
[17:46:59.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:59.300]                     {
[17:46:59.300]                       inherits <- base::inherits
[17:46:59.300]                       invokeRestart <- base::invokeRestart
[17:46:59.300]                       is.null <- base::is.null
[17:46:59.300]                       muffled <- FALSE
[17:46:59.300]                       if (inherits(cond, "message")) {
[17:46:59.300]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:59.300]                         if (muffled) 
[17:46:59.300]                           invokeRestart("muffleMessage")
[17:46:59.300]                       }
[17:46:59.300]                       else if (inherits(cond, "warning")) {
[17:46:59.300]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:59.300]                         if (muffled) 
[17:46:59.300]                           invokeRestart("muffleWarning")
[17:46:59.300]                       }
[17:46:59.300]                       else if (inherits(cond, "condition")) {
[17:46:59.300]                         if (!is.null(pattern)) {
[17:46:59.300]                           computeRestarts <- base::computeRestarts
[17:46:59.300]                           grepl <- base::grepl
[17:46:59.300]                           restarts <- computeRestarts(cond)
[17:46:59.300]                           for (restart in restarts) {
[17:46:59.300]                             name <- restart$name
[17:46:59.300]                             if (is.null(name)) 
[17:46:59.300]                               next
[17:46:59.300]                             if (!grepl(pattern, name)) 
[17:46:59.300]                               next
[17:46:59.300]                             invokeRestart(restart)
[17:46:59.300]                             muffled <- TRUE
[17:46:59.300]                             break
[17:46:59.300]                           }
[17:46:59.300]                         }
[17:46:59.300]                       }
[17:46:59.300]                       invisible(muffled)
[17:46:59.300]                     }
[17:46:59.300]                     muffleCondition(cond, pattern = "^muffle")
[17:46:59.300]                   }
[17:46:59.300]                 }
[17:46:59.300]             }
[17:46:59.300]         }))
[17:46:59.300]     }, error = function(ex) {
[17:46:59.300]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:59.300]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:59.300]                 ...future.rng), started = ...future.startTime, 
[17:46:59.300]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:59.300]             version = "1.8"), class = "FutureResult")
[17:46:59.300]     }, finally = {
[17:46:59.300]         if (!identical(...future.workdir, getwd())) 
[17:46:59.300]             setwd(...future.workdir)
[17:46:59.300]         {
[17:46:59.300]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:59.300]                 ...future.oldOptions$nwarnings <- NULL
[17:46:59.300]             }
[17:46:59.300]             base::options(...future.oldOptions)
[17:46:59.300]             if (.Platform$OS.type == "windows") {
[17:46:59.300]                 old_names <- names(...future.oldEnvVars)
[17:46:59.300]                 envs <- base::Sys.getenv()
[17:46:59.300]                 names <- names(envs)
[17:46:59.300]                 common <- intersect(names, old_names)
[17:46:59.300]                 added <- setdiff(names, old_names)
[17:46:59.300]                 removed <- setdiff(old_names, names)
[17:46:59.300]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:59.300]                   envs[common]]
[17:46:59.300]                 NAMES <- toupper(changed)
[17:46:59.300]                 args <- list()
[17:46:59.300]                 for (kk in seq_along(NAMES)) {
[17:46:59.300]                   name <- changed[[kk]]
[17:46:59.300]                   NAME <- NAMES[[kk]]
[17:46:59.300]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:59.300]                     next
[17:46:59.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:59.300]                 }
[17:46:59.300]                 NAMES <- toupper(added)
[17:46:59.300]                 for (kk in seq_along(NAMES)) {
[17:46:59.300]                   name <- added[[kk]]
[17:46:59.300]                   NAME <- NAMES[[kk]]
[17:46:59.300]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:59.300]                     next
[17:46:59.300]                   args[[name]] <- ""
[17:46:59.300]                 }
[17:46:59.300]                 NAMES <- toupper(removed)
[17:46:59.300]                 for (kk in seq_along(NAMES)) {
[17:46:59.300]                   name <- removed[[kk]]
[17:46:59.300]                   NAME <- NAMES[[kk]]
[17:46:59.300]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:59.300]                     next
[17:46:59.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:59.300]                 }
[17:46:59.300]                 if (length(args) > 0) 
[17:46:59.300]                   base::do.call(base::Sys.setenv, args = args)
[17:46:59.300]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:59.300]             }
[17:46:59.300]             else {
[17:46:59.300]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:59.300]             }
[17:46:59.300]             {
[17:46:59.300]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:59.300]                   0L) {
[17:46:59.300]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:59.300]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:59.300]                   base::options(opts)
[17:46:59.300]                 }
[17:46:59.300]                 {
[17:46:59.300]                   {
[17:46:59.300]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:59.300]                     NULL
[17:46:59.300]                   }
[17:46:59.300]                   options(future.plan = NULL)
[17:46:59.300]                   if (is.na(NA_character_)) 
[17:46:59.300]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:59.300]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:59.300]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:59.300]                     .init = FALSE)
[17:46:59.300]                 }
[17:46:59.300]             }
[17:46:59.300]         }
[17:46:59.300]     })
[17:46:59.300]     if (TRUE) {
[17:46:59.300]         base::sink(type = "output", split = FALSE)
[17:46:59.300]         if (TRUE) {
[17:46:59.300]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:59.300]         }
[17:46:59.300]         else {
[17:46:59.300]             ...future.result["stdout"] <- base::list(NULL)
[17:46:59.300]         }
[17:46:59.300]         base::close(...future.stdout)
[17:46:59.300]         ...future.stdout <- NULL
[17:46:59.300]     }
[17:46:59.300]     ...future.result$conditions <- ...future.conditions
[17:46:59.300]     ...future.result$finished <- base::Sys.time()
[17:46:59.300]     ...future.result
[17:46:59.300] }
[17:46:59.401]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.351] Exporting 1 global objects (160 bytes) to cluster node #1 ...
[17:46:59.401]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.351] Exporting ‘data’ (160 bytes) to cluster node #1 ...
[17:46:59.401]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.352] Exporting ‘data’ (160 bytes) to cluster node #1 ... DONE
[17:46:59.401]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.352] Exporting 1 global objects (160 bytes) to cluster node #1 ... DONE
[17:46:59.401]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.353] MultisessionFuture started
[17:46:59.401]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.353] - Launch lazy future ... done
[17:46:59.401]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.353] run() for ‘MultisessionFuture’ ... done
[17:46:59.402]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.353] result() for ClusterFuture ...
[17:46:59.402]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.353] receiveMessageFromWorker() for ClusterFuture ...
[17:46:59.402]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.353] - Validating connection of MultisessionFuture
[17:46:59.402]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.385] - received message: FutureResult
[17:46:59.402]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.385] - Received FutureResult
[17:46:59.402]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.385] - Erased future from FutureRegistry
[17:46:59.402]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.387] result() for ClusterFuture ...
[17:46:59.402]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.388] - result already collected: FutureResult
[17:46:59.403]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.388] result() for ClusterFuture ... done
[17:46:59.403]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.388] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:59.403]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.388] result() for ClusterFuture ... done
[17:46:59.403]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.388] result() for ClusterFuture ...
[17:46:59.403]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.388] - result already collected: FutureResult
[17:46:59.403]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[17:46:59.388] result() for ClusterFuture ... done
[17:46:59.403] signalConditions() ... done
- Strategy: multisession ... DONE
> 
> 
> message("*** Globals w/ non-standard evaluation (NSE) ... DONE")
*** Globals w/ non-standard evaluation (NSE) ... DONE
> 
> source("incl/end.R")
[17:46:59.404] plan(): Setting new future strategy stack:
[17:46:59.404] List of future strategies:
[17:46:59.404] 1. FutureStrategy:
[17:46:59.404]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:59.404]    - tweaked: FALSE
[17:46:59.404]    - call: future::plan(oplan)
[17:46:59.405] plan(): nbrOfWorkers() = 1
> 
