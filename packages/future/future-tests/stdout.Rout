
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:07:06.779] plan(): Setting new future strategy stack:
[18:07:06.780] List of future strategies:
[18:07:06.780] 1. sequential:
[18:07:06.780]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:06.780]    - tweaked: FALSE
[18:07:06.780]    - call: future::plan("sequential")
[18:07:06.803] plan(): nbrOfWorkers() = 1
> 
> message("*** Standard output ...")
*** Standard output ...
> 
> truth_rows <- utils::capture.output({
+   print(1:50)
+   str(1:50)
+   cat(letters, sep = "-")
+   cat(1:6, collapse = "\n")
+   write.table(datasets::iris[1:10,], sep = "\t")
+ })
> truth <- paste0(paste(truth_rows, collapse = "\n"), "\n")
> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"
> 
> for (cores in seq_len(min(2L, availCores))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("%s ...", strategy))
+     plan(strategy)
+ 
+     for (stdout in c(TRUE, FALSE, NA)) {
+       message(sprintf("- stdout = %s", stdout))
+ 
+       f <- future({
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       }, stdout = stdout)
+       r <- result(f)
+       str(r)
+       stopifnot(value(f) == 42L)
+       if (is.na(stdout)) {
+         stopifnot(is.null(r$stdout) || r$stdout == "")
+       } else if (stdout) {
+         print(r)
+         stopifnot(identical(r$stdout, truth))
+       } else {
+         stopifnot(is.null(r$stdout))
+       }
+ 
+       v %<-% {
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       } %stdout% stdout
+       out <- utils::capture.output(y <- v)
+       stopifnot(y == 42L)
+       if (is.na(stdout)) {
+         ## Single-core multisession => sequential
+         if (cores > 1L || strategy != "multisession") {
+           stopifnot(out == "")
+         }
+       } else if (stdout) {
+         print(out)
+         stopifnot(identical(out, truth_rows))
+       } else {
+         stopifnot(out == "")
+       }
+ 
+       message("- stdout = structure(TRUE, drop = TRUE)")
+       f <- future(print(42), stdout = structure(TRUE, drop = TRUE))
+       r <- result(f)
+       stopifnot(inherits(r$stdout, "character"))
+       v <- value(f)
+       r <- result(f)
+       stopifnot(is.null(r$stdout))
+     } ## for (stdout ...)
+ 
+     message(sprintf("%s ... done", strategy))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... done", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
sequential ...
[18:07:06.898] plan(): Setting new future strategy stack:
[18:07:06.898] List of future strategies:
[18:07:06.898] 1. sequential:
[18:07:06.898]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:06.898]    - tweaked: FALSE
[18:07:06.898]    - call: plan(strategy)
[18:07:06.923] plan(): nbrOfWorkers() = 1
- stdout = TRUE
[18:07:06.924] getGlobalsAndPackages() ...
[18:07:06.924] Searching for globals...
[18:07:06.944] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:06.944] Searching for globals ... DONE
[18:07:06.944] Resolving globals: FALSE
[18:07:06.946] 
[18:07:06.946] - packages: [1] ‘utils’
[18:07:06.946] getGlobalsAndPackages() ... DONE
[18:07:06.948] run() for ‘Future’ ...
[18:07:06.948] - state: ‘created’
[18:07:06.948] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:06.949] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:06.949] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:06.949]   - Field: ‘label’
[18:07:06.950]   - Field: ‘local’
[18:07:06.950]   - Field: ‘owner’
[18:07:06.950]   - Field: ‘envir’
[18:07:06.950]   - Field: ‘packages’
[18:07:06.951]   - Field: ‘gc’
[18:07:06.951]   - Field: ‘conditions’
[18:07:06.951]   - Field: ‘expr’
[18:07:06.951]   - Field: ‘uuid’
[18:07:06.951]   - Field: ‘seed’
[18:07:06.952]   - Field: ‘version’
[18:07:06.952]   - Field: ‘result’
[18:07:06.952]   - Field: ‘asynchronous’
[18:07:06.952]   - Field: ‘calls’
[18:07:06.952]   - Field: ‘globals’
[18:07:06.953]   - Field: ‘stdout’
[18:07:06.953]   - Field: ‘earlySignal’
[18:07:06.953]   - Field: ‘lazy’
[18:07:06.953]   - Field: ‘state’
[18:07:06.953] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:06.954] - Launch lazy future ...
[18:07:06.955] Packages needed by the future expression (n = 1): ‘utils’
[18:07:06.955] Packages needed by future strategies (n = 0): <none>
[18:07:06.957] {
[18:07:06.957]     {
[18:07:06.957]         {
[18:07:06.957]             ...future.startTime <- base::Sys.time()
[18:07:06.957]             {
[18:07:06.957]                 {
[18:07:06.957]                   {
[18:07:06.957]                     {
[18:07:06.957]                       base::local({
[18:07:06.957]                         has_future <- base::requireNamespace("future", 
[18:07:06.957]                           quietly = TRUE)
[18:07:06.957]                         if (has_future) {
[18:07:06.957]                           ns <- base::getNamespace("future")
[18:07:06.957]                           version <- ns[[".package"]][["version"]]
[18:07:06.957]                           if (is.null(version)) 
[18:07:06.957]                             version <- utils::packageVersion("future")
[18:07:06.957]                         }
[18:07:06.957]                         else {
[18:07:06.957]                           version <- NULL
[18:07:06.957]                         }
[18:07:06.957]                         if (!has_future || version < "1.8.0") {
[18:07:06.957]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:06.957]                             "", base::R.version$version.string), 
[18:07:06.957]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:06.957]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:06.957]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:06.957]                               "release", "version")], collapse = " "), 
[18:07:06.957]                             hostname = base::Sys.info()[["nodename"]])
[18:07:06.957]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:06.957]                             info)
[18:07:06.957]                           info <- base::paste(info, collapse = "; ")
[18:07:06.957]                           if (!has_future) {
[18:07:06.957]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:06.957]                               info)
[18:07:06.957]                           }
[18:07:06.957]                           else {
[18:07:06.957]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:06.957]                               info, version)
[18:07:06.957]                           }
[18:07:06.957]                           base::stop(msg)
[18:07:06.957]                         }
[18:07:06.957]                       })
[18:07:06.957]                     }
[18:07:06.957]                     base::local({
[18:07:06.957]                       for (pkg in "utils") {
[18:07:06.957]                         base::loadNamespace(pkg)
[18:07:06.957]                         base::library(pkg, character.only = TRUE)
[18:07:06.957]                       }
[18:07:06.957]                     })
[18:07:06.957]                   }
[18:07:06.957]                   ...future.strategy.old <- future::plan("list")
[18:07:06.957]                   options(future.plan = NULL)
[18:07:06.957]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:06.957]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:06.957]                 }
[18:07:06.957]                 ...future.workdir <- getwd()
[18:07:06.957]             }
[18:07:06.957]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:06.957]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:06.957]         }
[18:07:06.957]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:06.957]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:06.957]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:06.957]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:06.957]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:06.957]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:06.957]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:06.957]             base::names(...future.oldOptions))
[18:07:06.957]     }
[18:07:06.957]     if (FALSE) {
[18:07:06.957]     }
[18:07:06.957]     else {
[18:07:06.957]         if (TRUE) {
[18:07:06.957]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:06.957]                 open = "w")
[18:07:06.957]         }
[18:07:06.957]         else {
[18:07:06.957]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:06.957]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:06.957]         }
[18:07:06.957]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:06.957]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:06.957]             base::sink(type = "output", split = FALSE)
[18:07:06.957]             base::close(...future.stdout)
[18:07:06.957]         }, add = TRUE)
[18:07:06.957]     }
[18:07:06.957]     ...future.frame <- base::sys.nframe()
[18:07:06.957]     ...future.conditions <- base::list()
[18:07:06.957]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:06.957]     if (FALSE) {
[18:07:06.957]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:06.957]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:06.957]     }
[18:07:06.957]     ...future.result <- base::tryCatch({
[18:07:06.957]         base::withCallingHandlers({
[18:07:06.957]             ...future.value <- base::withVisible(base::local({
[18:07:06.957]                 print(1:50)
[18:07:06.957]                 str(1:50)
[18:07:06.957]                 cat(letters, sep = "-")
[18:07:06.957]                 cat(1:6, collapse = "\n")
[18:07:06.957]                 write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:06.957]                 42L
[18:07:06.957]             }))
[18:07:06.957]             future::FutureResult(value = ...future.value$value, 
[18:07:06.957]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:06.957]                   ...future.rng), globalenv = if (FALSE) 
[18:07:06.957]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:06.957]                     ...future.globalenv.names))
[18:07:06.957]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:06.957]         }, condition = base::local({
[18:07:06.957]             c <- base::c
[18:07:06.957]             inherits <- base::inherits
[18:07:06.957]             invokeRestart <- base::invokeRestart
[18:07:06.957]             length <- base::length
[18:07:06.957]             list <- base::list
[18:07:06.957]             seq.int <- base::seq.int
[18:07:06.957]             signalCondition <- base::signalCondition
[18:07:06.957]             sys.calls <- base::sys.calls
[18:07:06.957]             `[[` <- base::`[[`
[18:07:06.957]             `+` <- base::`+`
[18:07:06.957]             `<<-` <- base::`<<-`
[18:07:06.957]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:06.957]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:06.957]                   3L)]
[18:07:06.957]             }
[18:07:06.957]             function(cond) {
[18:07:06.957]                 is_error <- inherits(cond, "error")
[18:07:06.957]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:06.957]                   NULL)
[18:07:06.957]                 if (is_error) {
[18:07:06.957]                   sessionInformation <- function() {
[18:07:06.957]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:06.957]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:06.957]                       search = base::search(), system = base::Sys.info())
[18:07:06.957]                   }
[18:07:06.957]                   ...future.conditions[[length(...future.conditions) + 
[18:07:06.957]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:06.957]                     cond$call), session = sessionInformation(), 
[18:07:06.957]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:06.957]                   signalCondition(cond)
[18:07:06.957]                 }
[18:07:06.957]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:06.957]                 "immediateCondition"))) {
[18:07:06.957]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:06.957]                   ...future.conditions[[length(...future.conditions) + 
[18:07:06.957]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:06.957]                   if (TRUE && !signal) {
[18:07:06.957]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:06.957]                     {
[18:07:06.957]                       inherits <- base::inherits
[18:07:06.957]                       invokeRestart <- base::invokeRestart
[18:07:06.957]                       is.null <- base::is.null
[18:07:06.957]                       muffled <- FALSE
[18:07:06.957]                       if (inherits(cond, "message")) {
[18:07:06.957]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:06.957]                         if (muffled) 
[18:07:06.957]                           invokeRestart("muffleMessage")
[18:07:06.957]                       }
[18:07:06.957]                       else if (inherits(cond, "warning")) {
[18:07:06.957]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:06.957]                         if (muffled) 
[18:07:06.957]                           invokeRestart("muffleWarning")
[18:07:06.957]                       }
[18:07:06.957]                       else if (inherits(cond, "condition")) {
[18:07:06.957]                         if (!is.null(pattern)) {
[18:07:06.957]                           computeRestarts <- base::computeRestarts
[18:07:06.957]                           grepl <- base::grepl
[18:07:06.957]                           restarts <- computeRestarts(cond)
[18:07:06.957]                           for (restart in restarts) {
[18:07:06.957]                             name <- restart$name
[18:07:06.957]                             if (is.null(name)) 
[18:07:06.957]                               next
[18:07:06.957]                             if (!grepl(pattern, name)) 
[18:07:06.957]                               next
[18:07:06.957]                             invokeRestart(restart)
[18:07:06.957]                             muffled <- TRUE
[18:07:06.957]                             break
[18:07:06.957]                           }
[18:07:06.957]                         }
[18:07:06.957]                       }
[18:07:06.957]                       invisible(muffled)
[18:07:06.957]                     }
[18:07:06.957]                     muffleCondition(cond, pattern = "^muffle")
[18:07:06.957]                   }
[18:07:06.957]                 }
[18:07:06.957]                 else {
[18:07:06.957]                   if (TRUE) {
[18:07:06.957]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:06.957]                     {
[18:07:06.957]                       inherits <- base::inherits
[18:07:06.957]                       invokeRestart <- base::invokeRestart
[18:07:06.957]                       is.null <- base::is.null
[18:07:06.957]                       muffled <- FALSE
[18:07:06.957]                       if (inherits(cond, "message")) {
[18:07:06.957]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:06.957]                         if (muffled) 
[18:07:06.957]                           invokeRestart("muffleMessage")
[18:07:06.957]                       }
[18:07:06.957]                       else if (inherits(cond, "warning")) {
[18:07:06.957]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:06.957]                         if (muffled) 
[18:07:06.957]                           invokeRestart("muffleWarning")
[18:07:06.957]                       }
[18:07:06.957]                       else if (inherits(cond, "condition")) {
[18:07:06.957]                         if (!is.null(pattern)) {
[18:07:06.957]                           computeRestarts <- base::computeRestarts
[18:07:06.957]                           grepl <- base::grepl
[18:07:06.957]                           restarts <- computeRestarts(cond)
[18:07:06.957]                           for (restart in restarts) {
[18:07:06.957]                             name <- restart$name
[18:07:06.957]                             if (is.null(name)) 
[18:07:06.957]                               next
[18:07:06.957]                             if (!grepl(pattern, name)) 
[18:07:06.957]                               next
[18:07:06.957]                             invokeRestart(restart)
[18:07:06.957]                             muffled <- TRUE
[18:07:06.957]                             break
[18:07:06.957]                           }
[18:07:06.957]                         }
[18:07:06.957]                       }
[18:07:06.957]                       invisible(muffled)
[18:07:06.957]                     }
[18:07:06.957]                     muffleCondition(cond, pattern = "^muffle")
[18:07:06.957]                   }
[18:07:06.957]                 }
[18:07:06.957]             }
[18:07:06.957]         }))
[18:07:06.957]     }, error = function(ex) {
[18:07:06.957]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:06.957]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:06.957]                 ...future.rng), started = ...future.startTime, 
[18:07:06.957]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:06.957]             version = "1.8"), class = "FutureResult")
[18:07:06.957]     }, finally = {
[18:07:06.957]         if (!identical(...future.workdir, getwd())) 
[18:07:06.957]             setwd(...future.workdir)
[18:07:06.957]         {
[18:07:06.957]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:06.957]                 ...future.oldOptions$nwarnings <- NULL
[18:07:06.957]             }
[18:07:06.957]             base::options(...future.oldOptions)
[18:07:06.957]             if (.Platform$OS.type == "windows") {
[18:07:06.957]                 old_names <- names(...future.oldEnvVars)
[18:07:06.957]                 envs <- base::Sys.getenv()
[18:07:06.957]                 names <- names(envs)
[18:07:06.957]                 common <- intersect(names, old_names)
[18:07:06.957]                 added <- setdiff(names, old_names)
[18:07:06.957]                 removed <- setdiff(old_names, names)
[18:07:06.957]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:06.957]                   envs[common]]
[18:07:06.957]                 NAMES <- toupper(changed)
[18:07:06.957]                 args <- list()
[18:07:06.957]                 for (kk in seq_along(NAMES)) {
[18:07:06.957]                   name <- changed[[kk]]
[18:07:06.957]                   NAME <- NAMES[[kk]]
[18:07:06.957]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.957]                     next
[18:07:06.957]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:06.957]                 }
[18:07:06.957]                 NAMES <- toupper(added)
[18:07:06.957]                 for (kk in seq_along(NAMES)) {
[18:07:06.957]                   name <- added[[kk]]
[18:07:06.957]                   NAME <- NAMES[[kk]]
[18:07:06.957]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.957]                     next
[18:07:06.957]                   args[[name]] <- ""
[18:07:06.957]                 }
[18:07:06.957]                 NAMES <- toupper(removed)
[18:07:06.957]                 for (kk in seq_along(NAMES)) {
[18:07:06.957]                   name <- removed[[kk]]
[18:07:06.957]                   NAME <- NAMES[[kk]]
[18:07:06.957]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:06.957]                     next
[18:07:06.957]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:06.957]                 }
[18:07:06.957]                 if (length(args) > 0) 
[18:07:06.957]                   base::do.call(base::Sys.setenv, args = args)
[18:07:06.957]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:06.957]             }
[18:07:06.957]             else {
[18:07:06.957]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:06.957]             }
[18:07:06.957]             {
[18:07:06.957]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:06.957]                   0L) {
[18:07:06.957]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:06.957]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:06.957]                   base::options(opts)
[18:07:06.957]                 }
[18:07:06.957]                 {
[18:07:06.957]                   {
[18:07:06.957]                     NULL
[18:07:06.957]                     RNGkind("Mersenne-Twister")
[18:07:06.957]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:06.957]                       inherits = FALSE)
[18:07:06.957]                   }
[18:07:06.957]                   options(future.plan = NULL)
[18:07:06.957]                   if (is.na(NA_character_)) 
[18:07:06.957]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:06.957]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:06.957]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:06.957]                     .init = FALSE)
[18:07:06.957]                 }
[18:07:06.957]             }
[18:07:06.957]         }
[18:07:06.957]     })
[18:07:06.957]     if (TRUE) {
[18:07:06.957]         base::sink(type = "output", split = FALSE)
[18:07:06.957]         if (TRUE) {
[18:07:06.957]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:06.957]         }
[18:07:06.957]         else {
[18:07:06.957]             ...future.result["stdout"] <- base::list(NULL)
[18:07:06.957]         }
[18:07:06.957]         base::close(...future.stdout)
[18:07:06.957]         ...future.stdout <- NULL
[18:07:06.957]     }
[18:07:06.957]     ...future.result$conditions <- ...future.conditions
[18:07:06.957]     ...future.result$finished <- base::Sys.time()
[18:07:06.957]     ...future.result
[18:07:06.957] }
[18:07:06.961] plan(): Setting new future strategy stack:
[18:07:06.962] List of future strategies:
[18:07:06.962] 1. sequential:
[18:07:06.962]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:06.962]    - tweaked: FALSE
[18:07:06.962]    - call: NULL
[18:07:06.962] plan(): nbrOfWorkers() = 1
[18:07:06.966] plan(): Setting new future strategy stack:
[18:07:06.966] List of future strategies:
[18:07:06.966] 1. sequential:
[18:07:06.966]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:06.966]    - tweaked: FALSE
[18:07:06.966]    - call: plan(strategy)
[18:07:06.967] plan(): nbrOfWorkers() = 1
[18:07:06.967] SequentialFuture started (and completed)
[18:07:06.968] - Launch lazy future ... done
[18:07:06.968] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:06"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:06"
 $ session_uuid: chr "14e633d8-3f80-f468-f704-67f254f4429f"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331263
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:06"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.006778955 secs (started 2024-11-21 18:07:06.96109)
version: 1.8
[18:07:06.987] getGlobalsAndPackages() ...
[18:07:06.987] Searching for globals...
[18:07:06.994] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:06.994] Searching for globals ... DONE
[18:07:06.994] Resolving globals: FALSE
[18:07:06.995] 
[18:07:06.996] - packages: [1] ‘utils’
[18:07:06.996] getGlobalsAndPackages() ... DONE
[18:07:06.996] run() for ‘Future’ ...
[18:07:06.996] - state: ‘created’
[18:07:06.997] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:06.997] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:06.997] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:06.998]   - Field: ‘label’
[18:07:06.998]   - Field: ‘local’
[18:07:06.998]   - Field: ‘owner’
[18:07:06.998]   - Field: ‘envir’
[18:07:06.999]   - Field: ‘packages’
[18:07:06.999]   - Field: ‘gc’
[18:07:06.999]   - Field: ‘conditions’
[18:07:06.999]   - Field: ‘expr’
[18:07:06.999]   - Field: ‘uuid’
[18:07:06.999]   - Field: ‘seed’
[18:07:07.000]   - Field: ‘version’
[18:07:07.000]   - Field: ‘result’
[18:07:07.000]   - Field: ‘asynchronous’
[18:07:07.000]   - Field: ‘calls’
[18:07:07.000]   - Field: ‘globals’
[18:07:07.001]   - Field: ‘stdout’
[18:07:07.001]   - Field: ‘earlySignal’
[18:07:07.001]   - Field: ‘lazy’
[18:07:07.001]   - Field: ‘state’
[18:07:07.001] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:07.002] - Launch lazy future ...
[18:07:07.002] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.005] Packages needed by future strategies (n = 0): <none>
[18:07:07.006] {
[18:07:07.006]     {
[18:07:07.006]         {
[18:07:07.006]             ...future.startTime <- base::Sys.time()
[18:07:07.006]             {
[18:07:07.006]                 {
[18:07:07.006]                   {
[18:07:07.006]                     {
[18:07:07.006]                       base::local({
[18:07:07.006]                         has_future <- base::requireNamespace("future", 
[18:07:07.006]                           quietly = TRUE)
[18:07:07.006]                         if (has_future) {
[18:07:07.006]                           ns <- base::getNamespace("future")
[18:07:07.006]                           version <- ns[[".package"]][["version"]]
[18:07:07.006]                           if (is.null(version)) 
[18:07:07.006]                             version <- utils::packageVersion("future")
[18:07:07.006]                         }
[18:07:07.006]                         else {
[18:07:07.006]                           version <- NULL
[18:07:07.006]                         }
[18:07:07.006]                         if (!has_future || version < "1.8.0") {
[18:07:07.006]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.006]                             "", base::R.version$version.string), 
[18:07:07.006]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:07.006]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.006]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.006]                               "release", "version")], collapse = " "), 
[18:07:07.006]                             hostname = base::Sys.info()[["nodename"]])
[18:07:07.006]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.006]                             info)
[18:07:07.006]                           info <- base::paste(info, collapse = "; ")
[18:07:07.006]                           if (!has_future) {
[18:07:07.006]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.006]                               info)
[18:07:07.006]                           }
[18:07:07.006]                           else {
[18:07:07.006]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.006]                               info, version)
[18:07:07.006]                           }
[18:07:07.006]                           base::stop(msg)
[18:07:07.006]                         }
[18:07:07.006]                       })
[18:07:07.006]                     }
[18:07:07.006]                     base::local({
[18:07:07.006]                       for (pkg in "utils") {
[18:07:07.006]                         base::loadNamespace(pkg)
[18:07:07.006]                         base::library(pkg, character.only = TRUE)
[18:07:07.006]                       }
[18:07:07.006]                     })
[18:07:07.006]                   }
[18:07:07.006]                   ...future.strategy.old <- future::plan("list")
[18:07:07.006]                   options(future.plan = NULL)
[18:07:07.006]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.006]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.006]                 }
[18:07:07.006]                 ...future.workdir <- getwd()
[18:07:07.006]             }
[18:07:07.006]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.006]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.006]         }
[18:07:07.006]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.006]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.006]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.006]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.006]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.006]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.006]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.006]             base::names(...future.oldOptions))
[18:07:07.006]     }
[18:07:07.006]     if (FALSE) {
[18:07:07.006]     }
[18:07:07.006]     else {
[18:07:07.006]         if (TRUE) {
[18:07:07.006]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.006]                 open = "w")
[18:07:07.006]         }
[18:07:07.006]         else {
[18:07:07.006]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.006]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.006]         }
[18:07:07.006]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.006]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.006]             base::sink(type = "output", split = FALSE)
[18:07:07.006]             base::close(...future.stdout)
[18:07:07.006]         }, add = TRUE)
[18:07:07.006]     }
[18:07:07.006]     ...future.frame <- base::sys.nframe()
[18:07:07.006]     ...future.conditions <- base::list()
[18:07:07.006]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.006]     if (FALSE) {
[18:07:07.006]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.006]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.006]     }
[18:07:07.006]     ...future.result <- base::tryCatch({
[18:07:07.006]         base::withCallingHandlers({
[18:07:07.006]             ...future.value <- base::withVisible(base::local({
[18:07:07.006]                 print(1:50)
[18:07:07.006]                 str(1:50)
[18:07:07.006]                 cat(letters, sep = "-")
[18:07:07.006]                 cat(1:6, collapse = "\n")
[18:07:07.006]                 write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.006]                 42L
[18:07:07.006]             }))
[18:07:07.006]             future::FutureResult(value = ...future.value$value, 
[18:07:07.006]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.006]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.006]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.006]                     ...future.globalenv.names))
[18:07:07.006]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.006]         }, condition = base::local({
[18:07:07.006]             c <- base::c
[18:07:07.006]             inherits <- base::inherits
[18:07:07.006]             invokeRestart <- base::invokeRestart
[18:07:07.006]             length <- base::length
[18:07:07.006]             list <- base::list
[18:07:07.006]             seq.int <- base::seq.int
[18:07:07.006]             signalCondition <- base::signalCondition
[18:07:07.006]             sys.calls <- base::sys.calls
[18:07:07.006]             `[[` <- base::`[[`
[18:07:07.006]             `+` <- base::`+`
[18:07:07.006]             `<<-` <- base::`<<-`
[18:07:07.006]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.006]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.006]                   3L)]
[18:07:07.006]             }
[18:07:07.006]             function(cond) {
[18:07:07.006]                 is_error <- inherits(cond, "error")
[18:07:07.006]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.006]                   NULL)
[18:07:07.006]                 if (is_error) {
[18:07:07.006]                   sessionInformation <- function() {
[18:07:07.006]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.006]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.006]                       search = base::search(), system = base::Sys.info())
[18:07:07.006]                   }
[18:07:07.006]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.006]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.006]                     cond$call), session = sessionInformation(), 
[18:07:07.006]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.006]                   signalCondition(cond)
[18:07:07.006]                 }
[18:07:07.006]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.006]                 "immediateCondition"))) {
[18:07:07.006]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.006]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.006]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.006]                   if (TRUE && !signal) {
[18:07:07.006]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.006]                     {
[18:07:07.006]                       inherits <- base::inherits
[18:07:07.006]                       invokeRestart <- base::invokeRestart
[18:07:07.006]                       is.null <- base::is.null
[18:07:07.006]                       muffled <- FALSE
[18:07:07.006]                       if (inherits(cond, "message")) {
[18:07:07.006]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.006]                         if (muffled) 
[18:07:07.006]                           invokeRestart("muffleMessage")
[18:07:07.006]                       }
[18:07:07.006]                       else if (inherits(cond, "warning")) {
[18:07:07.006]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.006]                         if (muffled) 
[18:07:07.006]                           invokeRestart("muffleWarning")
[18:07:07.006]                       }
[18:07:07.006]                       else if (inherits(cond, "condition")) {
[18:07:07.006]                         if (!is.null(pattern)) {
[18:07:07.006]                           computeRestarts <- base::computeRestarts
[18:07:07.006]                           grepl <- base::grepl
[18:07:07.006]                           restarts <- computeRestarts(cond)
[18:07:07.006]                           for (restart in restarts) {
[18:07:07.006]                             name <- restart$name
[18:07:07.006]                             if (is.null(name)) 
[18:07:07.006]                               next
[18:07:07.006]                             if (!grepl(pattern, name)) 
[18:07:07.006]                               next
[18:07:07.006]                             invokeRestart(restart)
[18:07:07.006]                             muffled <- TRUE
[18:07:07.006]                             break
[18:07:07.006]                           }
[18:07:07.006]                         }
[18:07:07.006]                       }
[18:07:07.006]                       invisible(muffled)
[18:07:07.006]                     }
[18:07:07.006]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.006]                   }
[18:07:07.006]                 }
[18:07:07.006]                 else {
[18:07:07.006]                   if (TRUE) {
[18:07:07.006]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.006]                     {
[18:07:07.006]                       inherits <- base::inherits
[18:07:07.006]                       invokeRestart <- base::invokeRestart
[18:07:07.006]                       is.null <- base::is.null
[18:07:07.006]                       muffled <- FALSE
[18:07:07.006]                       if (inherits(cond, "message")) {
[18:07:07.006]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.006]                         if (muffled) 
[18:07:07.006]                           invokeRestart("muffleMessage")
[18:07:07.006]                       }
[18:07:07.006]                       else if (inherits(cond, "warning")) {
[18:07:07.006]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.006]                         if (muffled) 
[18:07:07.006]                           invokeRestart("muffleWarning")
[18:07:07.006]                       }
[18:07:07.006]                       else if (inherits(cond, "condition")) {
[18:07:07.006]                         if (!is.null(pattern)) {
[18:07:07.006]                           computeRestarts <- base::computeRestarts
[18:07:07.006]                           grepl <- base::grepl
[18:07:07.006]                           restarts <- computeRestarts(cond)
[18:07:07.006]                           for (restart in restarts) {
[18:07:07.006]                             name <- restart$name
[18:07:07.006]                             if (is.null(name)) 
[18:07:07.006]                               next
[18:07:07.006]                             if (!grepl(pattern, name)) 
[18:07:07.006]                               next
[18:07:07.006]                             invokeRestart(restart)
[18:07:07.006]                             muffled <- TRUE
[18:07:07.006]                             break
[18:07:07.006]                           }
[18:07:07.006]                         }
[18:07:07.006]                       }
[18:07:07.006]                       invisible(muffled)
[18:07:07.006]                     }
[18:07:07.006]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.006]                   }
[18:07:07.006]                 }
[18:07:07.006]             }
[18:07:07.006]         }))
[18:07:07.006]     }, error = function(ex) {
[18:07:07.006]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.006]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.006]                 ...future.rng), started = ...future.startTime, 
[18:07:07.006]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.006]             version = "1.8"), class = "FutureResult")
[18:07:07.006]     }, finally = {
[18:07:07.006]         if (!identical(...future.workdir, getwd())) 
[18:07:07.006]             setwd(...future.workdir)
[18:07:07.006]         {
[18:07:07.006]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.006]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.006]             }
[18:07:07.006]             base::options(...future.oldOptions)
[18:07:07.006]             if (.Platform$OS.type == "windows") {
[18:07:07.006]                 old_names <- names(...future.oldEnvVars)
[18:07:07.006]                 envs <- base::Sys.getenv()
[18:07:07.006]                 names <- names(envs)
[18:07:07.006]                 common <- intersect(names, old_names)
[18:07:07.006]                 added <- setdiff(names, old_names)
[18:07:07.006]                 removed <- setdiff(old_names, names)
[18:07:07.006]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.006]                   envs[common]]
[18:07:07.006]                 NAMES <- toupper(changed)
[18:07:07.006]                 args <- list()
[18:07:07.006]                 for (kk in seq_along(NAMES)) {
[18:07:07.006]                   name <- changed[[kk]]
[18:07:07.006]                   NAME <- NAMES[[kk]]
[18:07:07.006]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.006]                     next
[18:07:07.006]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.006]                 }
[18:07:07.006]                 NAMES <- toupper(added)
[18:07:07.006]                 for (kk in seq_along(NAMES)) {
[18:07:07.006]                   name <- added[[kk]]
[18:07:07.006]                   NAME <- NAMES[[kk]]
[18:07:07.006]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.006]                     next
[18:07:07.006]                   args[[name]] <- ""
[18:07:07.006]                 }
[18:07:07.006]                 NAMES <- toupper(removed)
[18:07:07.006]                 for (kk in seq_along(NAMES)) {
[18:07:07.006]                   name <- removed[[kk]]
[18:07:07.006]                   NAME <- NAMES[[kk]]
[18:07:07.006]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.006]                     next
[18:07:07.006]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.006]                 }
[18:07:07.006]                 if (length(args) > 0) 
[18:07:07.006]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.006]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.006]             }
[18:07:07.006]             else {
[18:07:07.006]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.006]             }
[18:07:07.006]             {
[18:07:07.006]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.006]                   0L) {
[18:07:07.006]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.006]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.006]                   base::options(opts)
[18:07:07.006]                 }
[18:07:07.006]                 {
[18:07:07.006]                   {
[18:07:07.006]                     NULL
[18:07:07.006]                     RNGkind("Mersenne-Twister")
[18:07:07.006]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:07.006]                       inherits = FALSE)
[18:07:07.006]                   }
[18:07:07.006]                   options(future.plan = NULL)
[18:07:07.006]                   if (is.na(NA_character_)) 
[18:07:07.006]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.006]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.006]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.006]                     .init = FALSE)
[18:07:07.006]                 }
[18:07:07.006]             }
[18:07:07.006]         }
[18:07:07.006]     })
[18:07:07.006]     if (TRUE) {
[18:07:07.006]         base::sink(type = "output", split = FALSE)
[18:07:07.006]         if (TRUE) {
[18:07:07.006]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.006]         }
[18:07:07.006]         else {
[18:07:07.006]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.006]         }
[18:07:07.006]         base::close(...future.stdout)
[18:07:07.006]         ...future.stdout <- NULL
[18:07:07.006]     }
[18:07:07.006]     ...future.result$conditions <- ...future.conditions
[18:07:07.006]     ...future.result$finished <- base::Sys.time()
[18:07:07.006]     ...future.result
[18:07:07.006] }
[18:07:07.010] plan(): Setting new future strategy stack:
[18:07:07.010] List of future strategies:
[18:07:07.010] 1. sequential:
[18:07:07.010]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.010]    - tweaked: FALSE
[18:07:07.010]    - call: NULL
[18:07:07.011] plan(): nbrOfWorkers() = 1
[18:07:07.014] plan(): Setting new future strategy stack:
[18:07:07.014] List of future strategies:
[18:07:07.014] 1. sequential:
[18:07:07.014]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.014]    - tweaked: FALSE
[18:07:07.014]    - call: plan(strategy)
[18:07:07.015] plan(): nbrOfWorkers() = 1
[18:07:07.015] SequentialFuture started (and completed)
[18:07:07.015] - Launch lazy future ... done
[18:07:07.016] run() for ‘SequentialFuture’ ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[18:07:07.017] getGlobalsAndPackages() ...
[18:07:07.017] Searching for globals...
[18:07:07.018] - globals found: [1] ‘print’
[18:07:07.018] Searching for globals ... DONE
[18:07:07.018] Resolving globals: FALSE
[18:07:07.019] 
[18:07:07.019] 
[18:07:07.019] getGlobalsAndPackages() ... DONE
[18:07:07.020] run() for ‘Future’ ...
[18:07:07.020] - state: ‘created’
[18:07:07.020] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:07.021] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:07.021] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:07.021]   - Field: ‘label’
[18:07:07.021]   - Field: ‘local’
[18:07:07.021]   - Field: ‘owner’
[18:07:07.022]   - Field: ‘envir’
[18:07:07.022]   - Field: ‘packages’
[18:07:07.022]   - Field: ‘gc’
[18:07:07.022]   - Field: ‘conditions’
[18:07:07.022]   - Field: ‘expr’
[18:07:07.023]   - Field: ‘uuid’
[18:07:07.023]   - Field: ‘seed’
[18:07:07.023]   - Field: ‘version’
[18:07:07.023]   - Field: ‘result’
[18:07:07.023]   - Field: ‘asynchronous’
[18:07:07.024]   - Field: ‘calls’
[18:07:07.024]   - Field: ‘globals’
[18:07:07.024]   - Field: ‘stdout’
[18:07:07.024]   - Field: ‘earlySignal’
[18:07:07.024]   - Field: ‘lazy’
[18:07:07.024]   - Field: ‘state’
[18:07:07.025] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:07.025] - Launch lazy future ...
[18:07:07.025] Packages needed by the future expression (n = 0): <none>
[18:07:07.025] Packages needed by future strategies (n = 0): <none>
[18:07:07.026] {
[18:07:07.026]     {
[18:07:07.026]         {
[18:07:07.026]             ...future.startTime <- base::Sys.time()
[18:07:07.026]             {
[18:07:07.026]                 {
[18:07:07.026]                   {
[18:07:07.026]                     base::local({
[18:07:07.026]                       has_future <- base::requireNamespace("future", 
[18:07:07.026]                         quietly = TRUE)
[18:07:07.026]                       if (has_future) {
[18:07:07.026]                         ns <- base::getNamespace("future")
[18:07:07.026]                         version <- ns[[".package"]][["version"]]
[18:07:07.026]                         if (is.null(version)) 
[18:07:07.026]                           version <- utils::packageVersion("future")
[18:07:07.026]                       }
[18:07:07.026]                       else {
[18:07:07.026]                         version <- NULL
[18:07:07.026]                       }
[18:07:07.026]                       if (!has_future || version < "1.8.0") {
[18:07:07.026]                         info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.026]                           "", base::R.version$version.string), 
[18:07:07.026]                           platform = base::sprintf("%s (%s-bit)", 
[18:07:07.026]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.026]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.026]                             "release", "version")], collapse = " "), 
[18:07:07.026]                           hostname = base::Sys.info()[["nodename"]])
[18:07:07.026]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.026]                           info)
[18:07:07.026]                         info <- base::paste(info, collapse = "; ")
[18:07:07.026]                         if (!has_future) {
[18:07:07.026]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.026]                             info)
[18:07:07.026]                         }
[18:07:07.026]                         else {
[18:07:07.026]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.026]                             info, version)
[18:07:07.026]                         }
[18:07:07.026]                         base::stop(msg)
[18:07:07.026]                       }
[18:07:07.026]                     })
[18:07:07.026]                   }
[18:07:07.026]                   ...future.strategy.old <- future::plan("list")
[18:07:07.026]                   options(future.plan = NULL)
[18:07:07.026]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.026]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.026]                 }
[18:07:07.026]                 ...future.workdir <- getwd()
[18:07:07.026]             }
[18:07:07.026]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.026]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.026]         }
[18:07:07.026]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.026]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.026]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.026]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.026]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.026]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.026]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.026]             base::names(...future.oldOptions))
[18:07:07.026]     }
[18:07:07.026]     if (FALSE) {
[18:07:07.026]     }
[18:07:07.026]     else {
[18:07:07.026]         if (TRUE) {
[18:07:07.026]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.026]                 open = "w")
[18:07:07.026]         }
[18:07:07.026]         else {
[18:07:07.026]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.026]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.026]         }
[18:07:07.026]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.026]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.026]             base::sink(type = "output", split = FALSE)
[18:07:07.026]             base::close(...future.stdout)
[18:07:07.026]         }, add = TRUE)
[18:07:07.026]     }
[18:07:07.026]     ...future.frame <- base::sys.nframe()
[18:07:07.026]     ...future.conditions <- base::list()
[18:07:07.026]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.026]     if (FALSE) {
[18:07:07.026]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.026]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.026]     }
[18:07:07.026]     ...future.result <- base::tryCatch({
[18:07:07.026]         base::withCallingHandlers({
[18:07:07.026]             ...future.value <- base::withVisible(base::local(print(42)))
[18:07:07.026]             future::FutureResult(value = ...future.value$value, 
[18:07:07.026]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.026]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.026]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.026]                     ...future.globalenv.names))
[18:07:07.026]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.026]         }, condition = base::local({
[18:07:07.026]             c <- base::c
[18:07:07.026]             inherits <- base::inherits
[18:07:07.026]             invokeRestart <- base::invokeRestart
[18:07:07.026]             length <- base::length
[18:07:07.026]             list <- base::list
[18:07:07.026]             seq.int <- base::seq.int
[18:07:07.026]             signalCondition <- base::signalCondition
[18:07:07.026]             sys.calls <- base::sys.calls
[18:07:07.026]             `[[` <- base::`[[`
[18:07:07.026]             `+` <- base::`+`
[18:07:07.026]             `<<-` <- base::`<<-`
[18:07:07.026]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.026]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.026]                   3L)]
[18:07:07.026]             }
[18:07:07.026]             function(cond) {
[18:07:07.026]                 is_error <- inherits(cond, "error")
[18:07:07.026]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.026]                   NULL)
[18:07:07.026]                 if (is_error) {
[18:07:07.026]                   sessionInformation <- function() {
[18:07:07.026]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.026]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.026]                       search = base::search(), system = base::Sys.info())
[18:07:07.026]                   }
[18:07:07.026]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.026]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.026]                     cond$call), session = sessionInformation(), 
[18:07:07.026]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.026]                   signalCondition(cond)
[18:07:07.026]                 }
[18:07:07.026]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.026]                 "immediateCondition"))) {
[18:07:07.026]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.026]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.026]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.026]                   if (TRUE && !signal) {
[18:07:07.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.026]                     {
[18:07:07.026]                       inherits <- base::inherits
[18:07:07.026]                       invokeRestart <- base::invokeRestart
[18:07:07.026]                       is.null <- base::is.null
[18:07:07.026]                       muffled <- FALSE
[18:07:07.026]                       if (inherits(cond, "message")) {
[18:07:07.026]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.026]                         if (muffled) 
[18:07:07.026]                           invokeRestart("muffleMessage")
[18:07:07.026]                       }
[18:07:07.026]                       else if (inherits(cond, "warning")) {
[18:07:07.026]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.026]                         if (muffled) 
[18:07:07.026]                           invokeRestart("muffleWarning")
[18:07:07.026]                       }
[18:07:07.026]                       else if (inherits(cond, "condition")) {
[18:07:07.026]                         if (!is.null(pattern)) {
[18:07:07.026]                           computeRestarts <- base::computeRestarts
[18:07:07.026]                           grepl <- base::grepl
[18:07:07.026]                           restarts <- computeRestarts(cond)
[18:07:07.026]                           for (restart in restarts) {
[18:07:07.026]                             name <- restart$name
[18:07:07.026]                             if (is.null(name)) 
[18:07:07.026]                               next
[18:07:07.026]                             if (!grepl(pattern, name)) 
[18:07:07.026]                               next
[18:07:07.026]                             invokeRestart(restart)
[18:07:07.026]                             muffled <- TRUE
[18:07:07.026]                             break
[18:07:07.026]                           }
[18:07:07.026]                         }
[18:07:07.026]                       }
[18:07:07.026]                       invisible(muffled)
[18:07:07.026]                     }
[18:07:07.026]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.026]                   }
[18:07:07.026]                 }
[18:07:07.026]                 else {
[18:07:07.026]                   if (TRUE) {
[18:07:07.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.026]                     {
[18:07:07.026]                       inherits <- base::inherits
[18:07:07.026]                       invokeRestart <- base::invokeRestart
[18:07:07.026]                       is.null <- base::is.null
[18:07:07.026]                       muffled <- FALSE
[18:07:07.026]                       if (inherits(cond, "message")) {
[18:07:07.026]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.026]                         if (muffled) 
[18:07:07.026]                           invokeRestart("muffleMessage")
[18:07:07.026]                       }
[18:07:07.026]                       else if (inherits(cond, "warning")) {
[18:07:07.026]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.026]                         if (muffled) 
[18:07:07.026]                           invokeRestart("muffleWarning")
[18:07:07.026]                       }
[18:07:07.026]                       else if (inherits(cond, "condition")) {
[18:07:07.026]                         if (!is.null(pattern)) {
[18:07:07.026]                           computeRestarts <- base::computeRestarts
[18:07:07.026]                           grepl <- base::grepl
[18:07:07.026]                           restarts <- computeRestarts(cond)
[18:07:07.026]                           for (restart in restarts) {
[18:07:07.026]                             name <- restart$name
[18:07:07.026]                             if (is.null(name)) 
[18:07:07.026]                               next
[18:07:07.026]                             if (!grepl(pattern, name)) 
[18:07:07.026]                               next
[18:07:07.026]                             invokeRestart(restart)
[18:07:07.026]                             muffled <- TRUE
[18:07:07.026]                             break
[18:07:07.026]                           }
[18:07:07.026]                         }
[18:07:07.026]                       }
[18:07:07.026]                       invisible(muffled)
[18:07:07.026]                     }
[18:07:07.026]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.026]                   }
[18:07:07.026]                 }
[18:07:07.026]             }
[18:07:07.026]         }))
[18:07:07.026]     }, error = function(ex) {
[18:07:07.026]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.026]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.026]                 ...future.rng), started = ...future.startTime, 
[18:07:07.026]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.026]             version = "1.8"), class = "FutureResult")
[18:07:07.026]     }, finally = {
[18:07:07.026]         if (!identical(...future.workdir, getwd())) 
[18:07:07.026]             setwd(...future.workdir)
[18:07:07.026]         {
[18:07:07.026]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.026]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.026]             }
[18:07:07.026]             base::options(...future.oldOptions)
[18:07:07.026]             if (.Platform$OS.type == "windows") {
[18:07:07.026]                 old_names <- names(...future.oldEnvVars)
[18:07:07.026]                 envs <- base::Sys.getenv()
[18:07:07.026]                 names <- names(envs)
[18:07:07.026]                 common <- intersect(names, old_names)
[18:07:07.026]                 added <- setdiff(names, old_names)
[18:07:07.026]                 removed <- setdiff(old_names, names)
[18:07:07.026]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.026]                   envs[common]]
[18:07:07.026]                 NAMES <- toupper(changed)
[18:07:07.026]                 args <- list()
[18:07:07.026]                 for (kk in seq_along(NAMES)) {
[18:07:07.026]                   name <- changed[[kk]]
[18:07:07.026]                   NAME <- NAMES[[kk]]
[18:07:07.026]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.026]                     next
[18:07:07.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.026]                 }
[18:07:07.026]                 NAMES <- toupper(added)
[18:07:07.026]                 for (kk in seq_along(NAMES)) {
[18:07:07.026]                   name <- added[[kk]]
[18:07:07.026]                   NAME <- NAMES[[kk]]
[18:07:07.026]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.026]                     next
[18:07:07.026]                   args[[name]] <- ""
[18:07:07.026]                 }
[18:07:07.026]                 NAMES <- toupper(removed)
[18:07:07.026]                 for (kk in seq_along(NAMES)) {
[18:07:07.026]                   name <- removed[[kk]]
[18:07:07.026]                   NAME <- NAMES[[kk]]
[18:07:07.026]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.026]                     next
[18:07:07.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.026]                 }
[18:07:07.026]                 if (length(args) > 0) 
[18:07:07.026]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.026]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.026]             }
[18:07:07.026]             else {
[18:07:07.026]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.026]             }
[18:07:07.026]             {
[18:07:07.026]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.026]                   0L) {
[18:07:07.026]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.026]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.026]                   base::options(opts)
[18:07:07.026]                 }
[18:07:07.026]                 {
[18:07:07.026]                   {
[18:07:07.026]                     NULL
[18:07:07.026]                     RNGkind("Mersenne-Twister")
[18:07:07.026]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:07.026]                       inherits = FALSE)
[18:07:07.026]                   }
[18:07:07.026]                   options(future.plan = NULL)
[18:07:07.026]                   if (is.na(NA_character_)) 
[18:07:07.026]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.026]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.026]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.026]                     .init = FALSE)
[18:07:07.026]                 }
[18:07:07.026]             }
[18:07:07.026]         }
[18:07:07.026]     })
[18:07:07.026]     if (TRUE) {
[18:07:07.026]         base::sink(type = "output", split = FALSE)
[18:07:07.026]         if (TRUE) {
[18:07:07.026]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.026]         }
[18:07:07.026]         else {
[18:07:07.026]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.026]         }
[18:07:07.026]         base::close(...future.stdout)
[18:07:07.026]         ...future.stdout <- NULL
[18:07:07.026]     }
[18:07:07.026]     ...future.result$conditions <- ...future.conditions
[18:07:07.026]     ...future.result$finished <- base::Sys.time()
[18:07:07.026]     ...future.result
[18:07:07.026] }
[18:07:07.030] plan(): Setting new future strategy stack:
[18:07:07.030] List of future strategies:
[18:07:07.030] 1. sequential:
[18:07:07.030]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.030]    - tweaked: FALSE
[18:07:07.030]    - call: NULL
[18:07:07.031] plan(): nbrOfWorkers() = 1
[18:07:07.033] plan(): Setting new future strategy stack:
[18:07:07.033] List of future strategies:
[18:07:07.033] 1. sequential:
[18:07:07.033]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.033]    - tweaked: FALSE
[18:07:07.033]    - call: plan(strategy)
[18:07:07.034] plan(): nbrOfWorkers() = 1
[18:07:07.034] SequentialFuture started (and completed)
[18:07:07.034] - Launch lazy future ... done
[18:07:07.034] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = FALSE
[18:07:07.035] getGlobalsAndPackages() ...
[18:07:07.035] Searching for globals...
[18:07:07.041] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.042] Searching for globals ... DONE
[18:07:07.042] Resolving globals: FALSE
[18:07:07.043] 
[18:07:07.043] - packages: [1] ‘utils’
[18:07:07.043] getGlobalsAndPackages() ... DONE
[18:07:07.044] run() for ‘Future’ ...
[18:07:07.044] - state: ‘created’
[18:07:07.044] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:07.045] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:07.045] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:07.045]   - Field: ‘label’
[18:07:07.045]   - Field: ‘local’
[18:07:07.046]   - Field: ‘owner’
[18:07:07.046]   - Field: ‘envir’
[18:07:07.046]   - Field: ‘packages’
[18:07:07.046]   - Field: ‘gc’
[18:07:07.046]   - Field: ‘conditions’
[18:07:07.047]   - Field: ‘expr’
[18:07:07.047]   - Field: ‘uuid’
[18:07:07.047]   - Field: ‘seed’
[18:07:07.047]   - Field: ‘version’
[18:07:07.047]   - Field: ‘result’
[18:07:07.048]   - Field: ‘asynchronous’
[18:07:07.048]   - Field: ‘calls’
[18:07:07.048]   - Field: ‘globals’
[18:07:07.048]   - Field: ‘stdout’
[18:07:07.048]   - Field: ‘earlySignal’
[18:07:07.048]   - Field: ‘lazy’
[18:07:07.049]   - Field: ‘state’
[18:07:07.049] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:07.049] - Launch lazy future ...
[18:07:07.049] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.050] Packages needed by future strategies (n = 0): <none>
[18:07:07.051] {
[18:07:07.051]     {
[18:07:07.051]         {
[18:07:07.051]             ...future.startTime <- base::Sys.time()
[18:07:07.051]             {
[18:07:07.051]                 {
[18:07:07.051]                   {
[18:07:07.051]                     {
[18:07:07.051]                       base::local({
[18:07:07.051]                         has_future <- base::requireNamespace("future", 
[18:07:07.051]                           quietly = TRUE)
[18:07:07.051]                         if (has_future) {
[18:07:07.051]                           ns <- base::getNamespace("future")
[18:07:07.051]                           version <- ns[[".package"]][["version"]]
[18:07:07.051]                           if (is.null(version)) 
[18:07:07.051]                             version <- utils::packageVersion("future")
[18:07:07.051]                         }
[18:07:07.051]                         else {
[18:07:07.051]                           version <- NULL
[18:07:07.051]                         }
[18:07:07.051]                         if (!has_future || version < "1.8.0") {
[18:07:07.051]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.051]                             "", base::R.version$version.string), 
[18:07:07.051]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:07.051]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.051]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.051]                               "release", "version")], collapse = " "), 
[18:07:07.051]                             hostname = base::Sys.info()[["nodename"]])
[18:07:07.051]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.051]                             info)
[18:07:07.051]                           info <- base::paste(info, collapse = "; ")
[18:07:07.051]                           if (!has_future) {
[18:07:07.051]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.051]                               info)
[18:07:07.051]                           }
[18:07:07.051]                           else {
[18:07:07.051]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.051]                               info, version)
[18:07:07.051]                           }
[18:07:07.051]                           base::stop(msg)
[18:07:07.051]                         }
[18:07:07.051]                       })
[18:07:07.051]                     }
[18:07:07.051]                     base::local({
[18:07:07.051]                       for (pkg in "utils") {
[18:07:07.051]                         base::loadNamespace(pkg)
[18:07:07.051]                         base::library(pkg, character.only = TRUE)
[18:07:07.051]                       }
[18:07:07.051]                     })
[18:07:07.051]                   }
[18:07:07.051]                   ...future.strategy.old <- future::plan("list")
[18:07:07.051]                   options(future.plan = NULL)
[18:07:07.051]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.051]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.051]                 }
[18:07:07.051]                 ...future.workdir <- getwd()
[18:07:07.051]             }
[18:07:07.051]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.051]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.051]         }
[18:07:07.051]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.051]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.051]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.051]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.051]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.051]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.051]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.051]             base::names(...future.oldOptions))
[18:07:07.051]     }
[18:07:07.051]     if (FALSE) {
[18:07:07.051]     }
[18:07:07.051]     else {
[18:07:07.051]         if (FALSE) {
[18:07:07.051]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.051]                 open = "w")
[18:07:07.051]         }
[18:07:07.051]         else {
[18:07:07.051]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.051]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.051]         }
[18:07:07.051]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.051]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.051]             base::sink(type = "output", split = FALSE)
[18:07:07.051]             base::close(...future.stdout)
[18:07:07.051]         }, add = TRUE)
[18:07:07.051]     }
[18:07:07.051]     ...future.frame <- base::sys.nframe()
[18:07:07.051]     ...future.conditions <- base::list()
[18:07:07.051]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.051]     if (FALSE) {
[18:07:07.051]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.051]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.051]     }
[18:07:07.051]     ...future.result <- base::tryCatch({
[18:07:07.051]         base::withCallingHandlers({
[18:07:07.051]             ...future.value <- base::withVisible(base::local({
[18:07:07.051]                 print(1:50)
[18:07:07.051]                 str(1:50)
[18:07:07.051]                 cat(letters, sep = "-")
[18:07:07.051]                 cat(1:6, collapse = "\n")
[18:07:07.051]                 write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.051]                 42L
[18:07:07.051]             }))
[18:07:07.051]             future::FutureResult(value = ...future.value$value, 
[18:07:07.051]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.051]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.051]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.051]                     ...future.globalenv.names))
[18:07:07.051]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.051]         }, condition = base::local({
[18:07:07.051]             c <- base::c
[18:07:07.051]             inherits <- base::inherits
[18:07:07.051]             invokeRestart <- base::invokeRestart
[18:07:07.051]             length <- base::length
[18:07:07.051]             list <- base::list
[18:07:07.051]             seq.int <- base::seq.int
[18:07:07.051]             signalCondition <- base::signalCondition
[18:07:07.051]             sys.calls <- base::sys.calls
[18:07:07.051]             `[[` <- base::`[[`
[18:07:07.051]             `+` <- base::`+`
[18:07:07.051]             `<<-` <- base::`<<-`
[18:07:07.051]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.051]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.051]                   3L)]
[18:07:07.051]             }
[18:07:07.051]             function(cond) {
[18:07:07.051]                 is_error <- inherits(cond, "error")
[18:07:07.051]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.051]                   NULL)
[18:07:07.051]                 if (is_error) {
[18:07:07.051]                   sessionInformation <- function() {
[18:07:07.051]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.051]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.051]                       search = base::search(), system = base::Sys.info())
[18:07:07.051]                   }
[18:07:07.051]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.051]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.051]                     cond$call), session = sessionInformation(), 
[18:07:07.051]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.051]                   signalCondition(cond)
[18:07:07.051]                 }
[18:07:07.051]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.051]                 "immediateCondition"))) {
[18:07:07.051]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.051]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.051]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.051]                   if (TRUE && !signal) {
[18:07:07.051]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.051]                     {
[18:07:07.051]                       inherits <- base::inherits
[18:07:07.051]                       invokeRestart <- base::invokeRestart
[18:07:07.051]                       is.null <- base::is.null
[18:07:07.051]                       muffled <- FALSE
[18:07:07.051]                       if (inherits(cond, "message")) {
[18:07:07.051]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.051]                         if (muffled) 
[18:07:07.051]                           invokeRestart("muffleMessage")
[18:07:07.051]                       }
[18:07:07.051]                       else if (inherits(cond, "warning")) {
[18:07:07.051]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.051]                         if (muffled) 
[18:07:07.051]                           invokeRestart("muffleWarning")
[18:07:07.051]                       }
[18:07:07.051]                       else if (inherits(cond, "condition")) {
[18:07:07.051]                         if (!is.null(pattern)) {
[18:07:07.051]                           computeRestarts <- base::computeRestarts
[18:07:07.051]                           grepl <- base::grepl
[18:07:07.051]                           restarts <- computeRestarts(cond)
[18:07:07.051]                           for (restart in restarts) {
[18:07:07.051]                             name <- restart$name
[18:07:07.051]                             if (is.null(name)) 
[18:07:07.051]                               next
[18:07:07.051]                             if (!grepl(pattern, name)) 
[18:07:07.051]                               next
[18:07:07.051]                             invokeRestart(restart)
[18:07:07.051]                             muffled <- TRUE
[18:07:07.051]                             break
[18:07:07.051]                           }
[18:07:07.051]                         }
[18:07:07.051]                       }
[18:07:07.051]                       invisible(muffled)
[18:07:07.051]                     }
[18:07:07.051]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.051]                   }
[18:07:07.051]                 }
[18:07:07.051]                 else {
[18:07:07.051]                   if (TRUE) {
[18:07:07.051]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.051]                     {
[18:07:07.051]                       inherits <- base::inherits
[18:07:07.051]                       invokeRestart <- base::invokeRestart
[18:07:07.051]                       is.null <- base::is.null
[18:07:07.051]                       muffled <- FALSE
[18:07:07.051]                       if (inherits(cond, "message")) {
[18:07:07.051]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.051]                         if (muffled) 
[18:07:07.051]                           invokeRestart("muffleMessage")
[18:07:07.051]                       }
[18:07:07.051]                       else if (inherits(cond, "warning")) {
[18:07:07.051]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.051]                         if (muffled) 
[18:07:07.051]                           invokeRestart("muffleWarning")
[18:07:07.051]                       }
[18:07:07.051]                       else if (inherits(cond, "condition")) {
[18:07:07.051]                         if (!is.null(pattern)) {
[18:07:07.051]                           computeRestarts <- base::computeRestarts
[18:07:07.051]                           grepl <- base::grepl
[18:07:07.051]                           restarts <- computeRestarts(cond)
[18:07:07.051]                           for (restart in restarts) {
[18:07:07.051]                             name <- restart$name
[18:07:07.051]                             if (is.null(name)) 
[18:07:07.051]                               next
[18:07:07.051]                             if (!grepl(pattern, name)) 
[18:07:07.051]                               next
[18:07:07.051]                             invokeRestart(restart)
[18:07:07.051]                             muffled <- TRUE
[18:07:07.051]                             break
[18:07:07.051]                           }
[18:07:07.051]                         }
[18:07:07.051]                       }
[18:07:07.051]                       invisible(muffled)
[18:07:07.051]                     }
[18:07:07.051]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.051]                   }
[18:07:07.051]                 }
[18:07:07.051]             }
[18:07:07.051]         }))
[18:07:07.051]     }, error = function(ex) {
[18:07:07.051]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.051]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.051]                 ...future.rng), started = ...future.startTime, 
[18:07:07.051]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.051]             version = "1.8"), class = "FutureResult")
[18:07:07.051]     }, finally = {
[18:07:07.051]         if (!identical(...future.workdir, getwd())) 
[18:07:07.051]             setwd(...future.workdir)
[18:07:07.051]         {
[18:07:07.051]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.051]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.051]             }
[18:07:07.051]             base::options(...future.oldOptions)
[18:07:07.051]             if (.Platform$OS.type == "windows") {
[18:07:07.051]                 old_names <- names(...future.oldEnvVars)
[18:07:07.051]                 envs <- base::Sys.getenv()
[18:07:07.051]                 names <- names(envs)
[18:07:07.051]                 common <- intersect(names, old_names)
[18:07:07.051]                 added <- setdiff(names, old_names)
[18:07:07.051]                 removed <- setdiff(old_names, names)
[18:07:07.051]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.051]                   envs[common]]
[18:07:07.051]                 NAMES <- toupper(changed)
[18:07:07.051]                 args <- list()
[18:07:07.051]                 for (kk in seq_along(NAMES)) {
[18:07:07.051]                   name <- changed[[kk]]
[18:07:07.051]                   NAME <- NAMES[[kk]]
[18:07:07.051]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.051]                     next
[18:07:07.051]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.051]                 }
[18:07:07.051]                 NAMES <- toupper(added)
[18:07:07.051]                 for (kk in seq_along(NAMES)) {
[18:07:07.051]                   name <- added[[kk]]
[18:07:07.051]                   NAME <- NAMES[[kk]]
[18:07:07.051]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.051]                     next
[18:07:07.051]                   args[[name]] <- ""
[18:07:07.051]                 }
[18:07:07.051]                 NAMES <- toupper(removed)
[18:07:07.051]                 for (kk in seq_along(NAMES)) {
[18:07:07.051]                   name <- removed[[kk]]
[18:07:07.051]                   NAME <- NAMES[[kk]]
[18:07:07.051]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.051]                     next
[18:07:07.051]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.051]                 }
[18:07:07.051]                 if (length(args) > 0) 
[18:07:07.051]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.051]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.051]             }
[18:07:07.051]             else {
[18:07:07.051]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.051]             }
[18:07:07.051]             {
[18:07:07.051]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.051]                   0L) {
[18:07:07.051]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.051]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.051]                   base::options(opts)
[18:07:07.051]                 }
[18:07:07.051]                 {
[18:07:07.051]                   {
[18:07:07.051]                     NULL
[18:07:07.051]                     RNGkind("Mersenne-Twister")
[18:07:07.051]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:07.051]                       inherits = FALSE)
[18:07:07.051]                   }
[18:07:07.051]                   options(future.plan = NULL)
[18:07:07.051]                   if (is.na(NA_character_)) 
[18:07:07.051]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.051]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.051]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.051]                     .init = FALSE)
[18:07:07.051]                 }
[18:07:07.051]             }
[18:07:07.051]         }
[18:07:07.051]     })
[18:07:07.051]     if (TRUE) {
[18:07:07.051]         base::sink(type = "output", split = FALSE)
[18:07:07.051]         if (FALSE) {
[18:07:07.051]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.051]         }
[18:07:07.051]         else {
[18:07:07.051]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.051]         }
[18:07:07.051]         base::close(...future.stdout)
[18:07:07.051]         ...future.stdout <- NULL
[18:07:07.051]     }
[18:07:07.051]     ...future.result$conditions <- ...future.conditions
[18:07:07.051]     ...future.result$finished <- base::Sys.time()
[18:07:07.051]     ...future.result
[18:07:07.051] }
[18:07:07.054] plan(): Setting new future strategy stack:
[18:07:07.055] List of future strategies:
[18:07:07.055] 1. sequential:
[18:07:07.055]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.055]    - tweaked: FALSE
[18:07:07.055]    - call: NULL
[18:07:07.055] plan(): nbrOfWorkers() = 1
[18:07:07.058] plan(): Setting new future strategy stack:
[18:07:07.058] List of future strategies:
[18:07:07.058] 1. sequential:
[18:07:07.058]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.058]    - tweaked: FALSE
[18:07:07.058]    - call: plan(strategy)
[18:07:07.059] plan(): nbrOfWorkers() = 1
[18:07:07.060] SequentialFuture started (and completed)
[18:07:07.060] - Launch lazy future ... done
[18:07:07.060] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ session_uuid: chr "14e633d8-3f80-f468-f704-67f254f4429f"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331263
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:06"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[18:07:07.078] getGlobalsAndPackages() ...
[18:07:07.078] Searching for globals...
[18:07:07.084] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.084] Searching for globals ... DONE
[18:07:07.085] Resolving globals: FALSE
[18:07:07.085] 
[18:07:07.086] - packages: [1] ‘utils’
[18:07:07.086] getGlobalsAndPackages() ... DONE
[18:07:07.086] run() for ‘Future’ ...
[18:07:07.087] - state: ‘created’
[18:07:07.087] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:07.087] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:07.088] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:07.088]   - Field: ‘label’
[18:07:07.088]   - Field: ‘local’
[18:07:07.088]   - Field: ‘owner’
[18:07:07.088]   - Field: ‘envir’
[18:07:07.089]   - Field: ‘packages’
[18:07:07.089]   - Field: ‘gc’
[18:07:07.089]   - Field: ‘conditions’
[18:07:07.089]   - Field: ‘expr’
[18:07:07.089]   - Field: ‘uuid’
[18:07:07.090]   - Field: ‘seed’
[18:07:07.090]   - Field: ‘version’
[18:07:07.090]   - Field: ‘result’
[18:07:07.090]   - Field: ‘asynchronous’
[18:07:07.090]   - Field: ‘calls’
[18:07:07.091]   - Field: ‘globals’
[18:07:07.091]   - Field: ‘stdout’
[18:07:07.091]   - Field: ‘earlySignal’
[18:07:07.091]   - Field: ‘lazy’
[18:07:07.091]   - Field: ‘state’
[18:07:07.092] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:07.092] - Launch lazy future ...
[18:07:07.092] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.092] Packages needed by future strategies (n = 0): <none>
[18:07:07.093] {
[18:07:07.093]     {
[18:07:07.093]         {
[18:07:07.093]             ...future.startTime <- base::Sys.time()
[18:07:07.093]             {
[18:07:07.093]                 {
[18:07:07.093]                   {
[18:07:07.093]                     {
[18:07:07.093]                       base::local({
[18:07:07.093]                         has_future <- base::requireNamespace("future", 
[18:07:07.093]                           quietly = TRUE)
[18:07:07.093]                         if (has_future) {
[18:07:07.093]                           ns <- base::getNamespace("future")
[18:07:07.093]                           version <- ns[[".package"]][["version"]]
[18:07:07.093]                           if (is.null(version)) 
[18:07:07.093]                             version <- utils::packageVersion("future")
[18:07:07.093]                         }
[18:07:07.093]                         else {
[18:07:07.093]                           version <- NULL
[18:07:07.093]                         }
[18:07:07.093]                         if (!has_future || version < "1.8.0") {
[18:07:07.093]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.093]                             "", base::R.version$version.string), 
[18:07:07.093]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:07.093]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.093]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.093]                               "release", "version")], collapse = " "), 
[18:07:07.093]                             hostname = base::Sys.info()[["nodename"]])
[18:07:07.093]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.093]                             info)
[18:07:07.093]                           info <- base::paste(info, collapse = "; ")
[18:07:07.093]                           if (!has_future) {
[18:07:07.093]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.093]                               info)
[18:07:07.093]                           }
[18:07:07.093]                           else {
[18:07:07.093]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.093]                               info, version)
[18:07:07.093]                           }
[18:07:07.093]                           base::stop(msg)
[18:07:07.093]                         }
[18:07:07.093]                       })
[18:07:07.093]                     }
[18:07:07.093]                     base::local({
[18:07:07.093]                       for (pkg in "utils") {
[18:07:07.093]                         base::loadNamespace(pkg)
[18:07:07.093]                         base::library(pkg, character.only = TRUE)
[18:07:07.093]                       }
[18:07:07.093]                     })
[18:07:07.093]                   }
[18:07:07.093]                   ...future.strategy.old <- future::plan("list")
[18:07:07.093]                   options(future.plan = NULL)
[18:07:07.093]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.093]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.093]                 }
[18:07:07.093]                 ...future.workdir <- getwd()
[18:07:07.093]             }
[18:07:07.093]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.093]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.093]         }
[18:07:07.093]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.093]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.093]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.093]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.093]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.093]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.093]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.093]             base::names(...future.oldOptions))
[18:07:07.093]     }
[18:07:07.093]     if (FALSE) {
[18:07:07.093]     }
[18:07:07.093]     else {
[18:07:07.093]         if (FALSE) {
[18:07:07.093]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.093]                 open = "w")
[18:07:07.093]         }
[18:07:07.093]         else {
[18:07:07.093]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.093]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.093]         }
[18:07:07.093]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.093]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.093]             base::sink(type = "output", split = FALSE)
[18:07:07.093]             base::close(...future.stdout)
[18:07:07.093]         }, add = TRUE)
[18:07:07.093]     }
[18:07:07.093]     ...future.frame <- base::sys.nframe()
[18:07:07.093]     ...future.conditions <- base::list()
[18:07:07.093]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.093]     if (FALSE) {
[18:07:07.093]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.093]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.093]     }
[18:07:07.093]     ...future.result <- base::tryCatch({
[18:07:07.093]         base::withCallingHandlers({
[18:07:07.093]             ...future.value <- base::withVisible(base::local({
[18:07:07.093]                 print(1:50)
[18:07:07.093]                 str(1:50)
[18:07:07.093]                 cat(letters, sep = "-")
[18:07:07.093]                 cat(1:6, collapse = "\n")
[18:07:07.093]                 write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.093]                 42L
[18:07:07.093]             }))
[18:07:07.093]             future::FutureResult(value = ...future.value$value, 
[18:07:07.093]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.093]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.093]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.093]                     ...future.globalenv.names))
[18:07:07.093]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.093]         }, condition = base::local({
[18:07:07.093]             c <- base::c
[18:07:07.093]             inherits <- base::inherits
[18:07:07.093]             invokeRestart <- base::invokeRestart
[18:07:07.093]             length <- base::length
[18:07:07.093]             list <- base::list
[18:07:07.093]             seq.int <- base::seq.int
[18:07:07.093]             signalCondition <- base::signalCondition
[18:07:07.093]             sys.calls <- base::sys.calls
[18:07:07.093]             `[[` <- base::`[[`
[18:07:07.093]             `+` <- base::`+`
[18:07:07.093]             `<<-` <- base::`<<-`
[18:07:07.093]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.093]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.093]                   3L)]
[18:07:07.093]             }
[18:07:07.093]             function(cond) {
[18:07:07.093]                 is_error <- inherits(cond, "error")
[18:07:07.093]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.093]                   NULL)
[18:07:07.093]                 if (is_error) {
[18:07:07.093]                   sessionInformation <- function() {
[18:07:07.093]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.093]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.093]                       search = base::search(), system = base::Sys.info())
[18:07:07.093]                   }
[18:07:07.093]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.093]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.093]                     cond$call), session = sessionInformation(), 
[18:07:07.093]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.093]                   signalCondition(cond)
[18:07:07.093]                 }
[18:07:07.093]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.093]                 "immediateCondition"))) {
[18:07:07.093]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.093]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.093]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.093]                   if (TRUE && !signal) {
[18:07:07.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.093]                     {
[18:07:07.093]                       inherits <- base::inherits
[18:07:07.093]                       invokeRestart <- base::invokeRestart
[18:07:07.093]                       is.null <- base::is.null
[18:07:07.093]                       muffled <- FALSE
[18:07:07.093]                       if (inherits(cond, "message")) {
[18:07:07.093]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.093]                         if (muffled) 
[18:07:07.093]                           invokeRestart("muffleMessage")
[18:07:07.093]                       }
[18:07:07.093]                       else if (inherits(cond, "warning")) {
[18:07:07.093]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.093]                         if (muffled) 
[18:07:07.093]                           invokeRestart("muffleWarning")
[18:07:07.093]                       }
[18:07:07.093]                       else if (inherits(cond, "condition")) {
[18:07:07.093]                         if (!is.null(pattern)) {
[18:07:07.093]                           computeRestarts <- base::computeRestarts
[18:07:07.093]                           grepl <- base::grepl
[18:07:07.093]                           restarts <- computeRestarts(cond)
[18:07:07.093]                           for (restart in restarts) {
[18:07:07.093]                             name <- restart$name
[18:07:07.093]                             if (is.null(name)) 
[18:07:07.093]                               next
[18:07:07.093]                             if (!grepl(pattern, name)) 
[18:07:07.093]                               next
[18:07:07.093]                             invokeRestart(restart)
[18:07:07.093]                             muffled <- TRUE
[18:07:07.093]                             break
[18:07:07.093]                           }
[18:07:07.093]                         }
[18:07:07.093]                       }
[18:07:07.093]                       invisible(muffled)
[18:07:07.093]                     }
[18:07:07.093]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.093]                   }
[18:07:07.093]                 }
[18:07:07.093]                 else {
[18:07:07.093]                   if (TRUE) {
[18:07:07.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.093]                     {
[18:07:07.093]                       inherits <- base::inherits
[18:07:07.093]                       invokeRestart <- base::invokeRestart
[18:07:07.093]                       is.null <- base::is.null
[18:07:07.093]                       muffled <- FALSE
[18:07:07.093]                       if (inherits(cond, "message")) {
[18:07:07.093]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.093]                         if (muffled) 
[18:07:07.093]                           invokeRestart("muffleMessage")
[18:07:07.093]                       }
[18:07:07.093]                       else if (inherits(cond, "warning")) {
[18:07:07.093]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.093]                         if (muffled) 
[18:07:07.093]                           invokeRestart("muffleWarning")
[18:07:07.093]                       }
[18:07:07.093]                       else if (inherits(cond, "condition")) {
[18:07:07.093]                         if (!is.null(pattern)) {
[18:07:07.093]                           computeRestarts <- base::computeRestarts
[18:07:07.093]                           grepl <- base::grepl
[18:07:07.093]                           restarts <- computeRestarts(cond)
[18:07:07.093]                           for (restart in restarts) {
[18:07:07.093]                             name <- restart$name
[18:07:07.093]                             if (is.null(name)) 
[18:07:07.093]                               next
[18:07:07.093]                             if (!grepl(pattern, name)) 
[18:07:07.093]                               next
[18:07:07.093]                             invokeRestart(restart)
[18:07:07.093]                             muffled <- TRUE
[18:07:07.093]                             break
[18:07:07.093]                           }
[18:07:07.093]                         }
[18:07:07.093]                       }
[18:07:07.093]                       invisible(muffled)
[18:07:07.093]                     }
[18:07:07.093]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.093]                   }
[18:07:07.093]                 }
[18:07:07.093]             }
[18:07:07.093]         }))
[18:07:07.093]     }, error = function(ex) {
[18:07:07.093]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.093]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.093]                 ...future.rng), started = ...future.startTime, 
[18:07:07.093]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.093]             version = "1.8"), class = "FutureResult")
[18:07:07.093]     }, finally = {
[18:07:07.093]         if (!identical(...future.workdir, getwd())) 
[18:07:07.093]             setwd(...future.workdir)
[18:07:07.093]         {
[18:07:07.093]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.093]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.093]             }
[18:07:07.093]             base::options(...future.oldOptions)
[18:07:07.093]             if (.Platform$OS.type == "windows") {
[18:07:07.093]                 old_names <- names(...future.oldEnvVars)
[18:07:07.093]                 envs <- base::Sys.getenv()
[18:07:07.093]                 names <- names(envs)
[18:07:07.093]                 common <- intersect(names, old_names)
[18:07:07.093]                 added <- setdiff(names, old_names)
[18:07:07.093]                 removed <- setdiff(old_names, names)
[18:07:07.093]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.093]                   envs[common]]
[18:07:07.093]                 NAMES <- toupper(changed)
[18:07:07.093]                 args <- list()
[18:07:07.093]                 for (kk in seq_along(NAMES)) {
[18:07:07.093]                   name <- changed[[kk]]
[18:07:07.093]                   NAME <- NAMES[[kk]]
[18:07:07.093]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.093]                     next
[18:07:07.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.093]                 }
[18:07:07.093]                 NAMES <- toupper(added)
[18:07:07.093]                 for (kk in seq_along(NAMES)) {
[18:07:07.093]                   name <- added[[kk]]
[18:07:07.093]                   NAME <- NAMES[[kk]]
[18:07:07.093]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.093]                     next
[18:07:07.093]                   args[[name]] <- ""
[18:07:07.093]                 }
[18:07:07.093]                 NAMES <- toupper(removed)
[18:07:07.093]                 for (kk in seq_along(NAMES)) {
[18:07:07.093]                   name <- removed[[kk]]
[18:07:07.093]                   NAME <- NAMES[[kk]]
[18:07:07.093]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.093]                     next
[18:07:07.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.093]                 }
[18:07:07.093]                 if (length(args) > 0) 
[18:07:07.093]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.093]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.093]             }
[18:07:07.093]             else {
[18:07:07.093]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.093]             }
[18:07:07.093]             {
[18:07:07.093]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.093]                   0L) {
[18:07:07.093]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.093]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.093]                   base::options(opts)
[18:07:07.093]                 }
[18:07:07.093]                 {
[18:07:07.093]                   {
[18:07:07.093]                     NULL
[18:07:07.093]                     RNGkind("Mersenne-Twister")
[18:07:07.093]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:07.093]                       inherits = FALSE)
[18:07:07.093]                   }
[18:07:07.093]                   options(future.plan = NULL)
[18:07:07.093]                   if (is.na(NA_character_)) 
[18:07:07.093]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.093]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.093]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.093]                     .init = FALSE)
[18:07:07.093]                 }
[18:07:07.093]             }
[18:07:07.093]         }
[18:07:07.093]     })
[18:07:07.093]     if (TRUE) {
[18:07:07.093]         base::sink(type = "output", split = FALSE)
[18:07:07.093]         if (FALSE) {
[18:07:07.093]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.093]         }
[18:07:07.093]         else {
[18:07:07.093]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.093]         }
[18:07:07.093]         base::close(...future.stdout)
[18:07:07.093]         ...future.stdout <- NULL
[18:07:07.093]     }
[18:07:07.093]     ...future.result$conditions <- ...future.conditions
[18:07:07.093]     ...future.result$finished <- base::Sys.time()
[18:07:07.093]     ...future.result
[18:07:07.093] }
[18:07:07.097] plan(): Setting new future strategy stack:
[18:07:07.097] List of future strategies:
[18:07:07.097] 1. sequential:
[18:07:07.097]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.097]    - tweaked: FALSE
[18:07:07.097]    - call: NULL
[18:07:07.098] plan(): nbrOfWorkers() = 1
[18:07:07.101] plan(): Setting new future strategy stack:
[18:07:07.101] List of future strategies:
[18:07:07.101] 1. sequential:
[18:07:07.101]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.101]    - tweaked: FALSE
[18:07:07.101]    - call: plan(strategy)
[18:07:07.102] plan(): nbrOfWorkers() = 1
[18:07:07.102] SequentialFuture started (and completed)
[18:07:07.103] - Launch lazy future ... done
[18:07:07.103] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[18:07:07.104] getGlobalsAndPackages() ...
[18:07:07.104] Searching for globals...
[18:07:07.105] - globals found: [1] ‘print’
[18:07:07.105] Searching for globals ... DONE
[18:07:07.105] Resolving globals: FALSE
[18:07:07.106] 
[18:07:07.106] 
[18:07:07.106] getGlobalsAndPackages() ... DONE
[18:07:07.106] run() for ‘Future’ ...
[18:07:07.107] - state: ‘created’
[18:07:07.107] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:07.107] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:07.108] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:07.108]   - Field: ‘label’
[18:07:07.108]   - Field: ‘local’
[18:07:07.108]   - Field: ‘owner’
[18:07:07.108]   - Field: ‘envir’
[18:07:07.109]   - Field: ‘packages’
[18:07:07.109]   - Field: ‘gc’
[18:07:07.109]   - Field: ‘conditions’
[18:07:07.109]   - Field: ‘expr’
[18:07:07.109]   - Field: ‘uuid’
[18:07:07.110]   - Field: ‘seed’
[18:07:07.110]   - Field: ‘version’
[18:07:07.110]   - Field: ‘result’
[18:07:07.110]   - Field: ‘asynchronous’
[18:07:07.110]   - Field: ‘calls’
[18:07:07.111]   - Field: ‘globals’
[18:07:07.111]   - Field: ‘stdout’
[18:07:07.111]   - Field: ‘earlySignal’
[18:07:07.111]   - Field: ‘lazy’
[18:07:07.111]   - Field: ‘state’
[18:07:07.112] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:07.112] - Launch lazy future ...
[18:07:07.112] Packages needed by the future expression (n = 0): <none>
[18:07:07.112] Packages needed by future strategies (n = 0): <none>
[18:07:07.113] {
[18:07:07.113]     {
[18:07:07.113]         {
[18:07:07.113]             ...future.startTime <- base::Sys.time()
[18:07:07.113]             {
[18:07:07.113]                 {
[18:07:07.113]                   {
[18:07:07.113]                     base::local({
[18:07:07.113]                       has_future <- base::requireNamespace("future", 
[18:07:07.113]                         quietly = TRUE)
[18:07:07.113]                       if (has_future) {
[18:07:07.113]                         ns <- base::getNamespace("future")
[18:07:07.113]                         version <- ns[[".package"]][["version"]]
[18:07:07.113]                         if (is.null(version)) 
[18:07:07.113]                           version <- utils::packageVersion("future")
[18:07:07.113]                       }
[18:07:07.113]                       else {
[18:07:07.113]                         version <- NULL
[18:07:07.113]                       }
[18:07:07.113]                       if (!has_future || version < "1.8.0") {
[18:07:07.113]                         info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.113]                           "", base::R.version$version.string), 
[18:07:07.113]                           platform = base::sprintf("%s (%s-bit)", 
[18:07:07.113]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.113]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.113]                             "release", "version")], collapse = " "), 
[18:07:07.113]                           hostname = base::Sys.info()[["nodename"]])
[18:07:07.113]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.113]                           info)
[18:07:07.113]                         info <- base::paste(info, collapse = "; ")
[18:07:07.113]                         if (!has_future) {
[18:07:07.113]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.113]                             info)
[18:07:07.113]                         }
[18:07:07.113]                         else {
[18:07:07.113]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.113]                             info, version)
[18:07:07.113]                         }
[18:07:07.113]                         base::stop(msg)
[18:07:07.113]                       }
[18:07:07.113]                     })
[18:07:07.113]                   }
[18:07:07.113]                   ...future.strategy.old <- future::plan("list")
[18:07:07.113]                   options(future.plan = NULL)
[18:07:07.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.113]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.113]                 }
[18:07:07.113]                 ...future.workdir <- getwd()
[18:07:07.113]             }
[18:07:07.113]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.113]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.113]         }
[18:07:07.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.113]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.113]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.113]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.113]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.113]             base::names(...future.oldOptions))
[18:07:07.113]     }
[18:07:07.113]     if (FALSE) {
[18:07:07.113]     }
[18:07:07.113]     else {
[18:07:07.113]         if (TRUE) {
[18:07:07.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.113]                 open = "w")
[18:07:07.113]         }
[18:07:07.113]         else {
[18:07:07.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.113]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.113]         }
[18:07:07.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.113]             base::sink(type = "output", split = FALSE)
[18:07:07.113]             base::close(...future.stdout)
[18:07:07.113]         }, add = TRUE)
[18:07:07.113]     }
[18:07:07.113]     ...future.frame <- base::sys.nframe()
[18:07:07.113]     ...future.conditions <- base::list()
[18:07:07.113]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.113]     if (FALSE) {
[18:07:07.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.113]     }
[18:07:07.113]     ...future.result <- base::tryCatch({
[18:07:07.113]         base::withCallingHandlers({
[18:07:07.113]             ...future.value <- base::withVisible(base::local(print(42)))
[18:07:07.113]             future::FutureResult(value = ...future.value$value, 
[18:07:07.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.113]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.113]                     ...future.globalenv.names))
[18:07:07.113]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.113]         }, condition = base::local({
[18:07:07.113]             c <- base::c
[18:07:07.113]             inherits <- base::inherits
[18:07:07.113]             invokeRestart <- base::invokeRestart
[18:07:07.113]             length <- base::length
[18:07:07.113]             list <- base::list
[18:07:07.113]             seq.int <- base::seq.int
[18:07:07.113]             signalCondition <- base::signalCondition
[18:07:07.113]             sys.calls <- base::sys.calls
[18:07:07.113]             `[[` <- base::`[[`
[18:07:07.113]             `+` <- base::`+`
[18:07:07.113]             `<<-` <- base::`<<-`
[18:07:07.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.113]                   3L)]
[18:07:07.113]             }
[18:07:07.113]             function(cond) {
[18:07:07.113]                 is_error <- inherits(cond, "error")
[18:07:07.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.113]                   NULL)
[18:07:07.113]                 if (is_error) {
[18:07:07.113]                   sessionInformation <- function() {
[18:07:07.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.113]                       search = base::search(), system = base::Sys.info())
[18:07:07.113]                   }
[18:07:07.113]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.113]                     cond$call), session = sessionInformation(), 
[18:07:07.113]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.113]                   signalCondition(cond)
[18:07:07.113]                 }
[18:07:07.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.113]                 "immediateCondition"))) {
[18:07:07.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.113]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.113]                   if (TRUE && !signal) {
[18:07:07.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.113]                     {
[18:07:07.113]                       inherits <- base::inherits
[18:07:07.113]                       invokeRestart <- base::invokeRestart
[18:07:07.113]                       is.null <- base::is.null
[18:07:07.113]                       muffled <- FALSE
[18:07:07.113]                       if (inherits(cond, "message")) {
[18:07:07.113]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.113]                         if (muffled) 
[18:07:07.113]                           invokeRestart("muffleMessage")
[18:07:07.113]                       }
[18:07:07.113]                       else if (inherits(cond, "warning")) {
[18:07:07.113]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.113]                         if (muffled) 
[18:07:07.113]                           invokeRestart("muffleWarning")
[18:07:07.113]                       }
[18:07:07.113]                       else if (inherits(cond, "condition")) {
[18:07:07.113]                         if (!is.null(pattern)) {
[18:07:07.113]                           computeRestarts <- base::computeRestarts
[18:07:07.113]                           grepl <- base::grepl
[18:07:07.113]                           restarts <- computeRestarts(cond)
[18:07:07.113]                           for (restart in restarts) {
[18:07:07.113]                             name <- restart$name
[18:07:07.113]                             if (is.null(name)) 
[18:07:07.113]                               next
[18:07:07.113]                             if (!grepl(pattern, name)) 
[18:07:07.113]                               next
[18:07:07.113]                             invokeRestart(restart)
[18:07:07.113]                             muffled <- TRUE
[18:07:07.113]                             break
[18:07:07.113]                           }
[18:07:07.113]                         }
[18:07:07.113]                       }
[18:07:07.113]                       invisible(muffled)
[18:07:07.113]                     }
[18:07:07.113]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.113]                   }
[18:07:07.113]                 }
[18:07:07.113]                 else {
[18:07:07.113]                   if (TRUE) {
[18:07:07.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.113]                     {
[18:07:07.113]                       inherits <- base::inherits
[18:07:07.113]                       invokeRestart <- base::invokeRestart
[18:07:07.113]                       is.null <- base::is.null
[18:07:07.113]                       muffled <- FALSE
[18:07:07.113]                       if (inherits(cond, "message")) {
[18:07:07.113]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.113]                         if (muffled) 
[18:07:07.113]                           invokeRestart("muffleMessage")
[18:07:07.113]                       }
[18:07:07.113]                       else if (inherits(cond, "warning")) {
[18:07:07.113]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.113]                         if (muffled) 
[18:07:07.113]                           invokeRestart("muffleWarning")
[18:07:07.113]                       }
[18:07:07.113]                       else if (inherits(cond, "condition")) {
[18:07:07.113]                         if (!is.null(pattern)) {
[18:07:07.113]                           computeRestarts <- base::computeRestarts
[18:07:07.113]                           grepl <- base::grepl
[18:07:07.113]                           restarts <- computeRestarts(cond)
[18:07:07.113]                           for (restart in restarts) {
[18:07:07.113]                             name <- restart$name
[18:07:07.113]                             if (is.null(name)) 
[18:07:07.113]                               next
[18:07:07.113]                             if (!grepl(pattern, name)) 
[18:07:07.113]                               next
[18:07:07.113]                             invokeRestart(restart)
[18:07:07.113]                             muffled <- TRUE
[18:07:07.113]                             break
[18:07:07.113]                           }
[18:07:07.113]                         }
[18:07:07.113]                       }
[18:07:07.113]                       invisible(muffled)
[18:07:07.113]                     }
[18:07:07.113]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.113]                   }
[18:07:07.113]                 }
[18:07:07.113]             }
[18:07:07.113]         }))
[18:07:07.113]     }, error = function(ex) {
[18:07:07.113]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.113]                 ...future.rng), started = ...future.startTime, 
[18:07:07.113]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.113]             version = "1.8"), class = "FutureResult")
[18:07:07.113]     }, finally = {
[18:07:07.113]         if (!identical(...future.workdir, getwd())) 
[18:07:07.113]             setwd(...future.workdir)
[18:07:07.113]         {
[18:07:07.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.113]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.113]             }
[18:07:07.113]             base::options(...future.oldOptions)
[18:07:07.113]             if (.Platform$OS.type == "windows") {
[18:07:07.113]                 old_names <- names(...future.oldEnvVars)
[18:07:07.113]                 envs <- base::Sys.getenv()
[18:07:07.113]                 names <- names(envs)
[18:07:07.113]                 common <- intersect(names, old_names)
[18:07:07.113]                 added <- setdiff(names, old_names)
[18:07:07.113]                 removed <- setdiff(old_names, names)
[18:07:07.113]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.113]                   envs[common]]
[18:07:07.113]                 NAMES <- toupper(changed)
[18:07:07.113]                 args <- list()
[18:07:07.113]                 for (kk in seq_along(NAMES)) {
[18:07:07.113]                   name <- changed[[kk]]
[18:07:07.113]                   NAME <- NAMES[[kk]]
[18:07:07.113]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.113]                     next
[18:07:07.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.113]                 }
[18:07:07.113]                 NAMES <- toupper(added)
[18:07:07.113]                 for (kk in seq_along(NAMES)) {
[18:07:07.113]                   name <- added[[kk]]
[18:07:07.113]                   NAME <- NAMES[[kk]]
[18:07:07.113]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.113]                     next
[18:07:07.113]                   args[[name]] <- ""
[18:07:07.113]                 }
[18:07:07.113]                 NAMES <- toupper(removed)
[18:07:07.113]                 for (kk in seq_along(NAMES)) {
[18:07:07.113]                   name <- removed[[kk]]
[18:07:07.113]                   NAME <- NAMES[[kk]]
[18:07:07.113]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.113]                     next
[18:07:07.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.113]                 }
[18:07:07.113]                 if (length(args) > 0) 
[18:07:07.113]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.113]             }
[18:07:07.113]             else {
[18:07:07.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.113]             }
[18:07:07.113]             {
[18:07:07.113]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.113]                   0L) {
[18:07:07.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.113]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.113]                   base::options(opts)
[18:07:07.113]                 }
[18:07:07.113]                 {
[18:07:07.113]                   {
[18:07:07.113]                     NULL
[18:07:07.113]                     RNGkind("Mersenne-Twister")
[18:07:07.113]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:07.113]                       inherits = FALSE)
[18:07:07.113]                   }
[18:07:07.113]                   options(future.plan = NULL)
[18:07:07.113]                   if (is.na(NA_character_)) 
[18:07:07.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.113]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.113]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.113]                     .init = FALSE)
[18:07:07.113]                 }
[18:07:07.113]             }
[18:07:07.113]         }
[18:07:07.113]     })
[18:07:07.113]     if (TRUE) {
[18:07:07.113]         base::sink(type = "output", split = FALSE)
[18:07:07.113]         if (TRUE) {
[18:07:07.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.113]         }
[18:07:07.113]         else {
[18:07:07.113]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.113]         }
[18:07:07.113]         base::close(...future.stdout)
[18:07:07.113]         ...future.stdout <- NULL
[18:07:07.113]     }
[18:07:07.113]     ...future.result$conditions <- ...future.conditions
[18:07:07.113]     ...future.result$finished <- base::Sys.time()
[18:07:07.113]     ...future.result
[18:07:07.113] }
[18:07:07.117] plan(): Setting new future strategy stack:
[18:07:07.117] List of future strategies:
[18:07:07.117] 1. sequential:
[18:07:07.117]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.117]    - tweaked: FALSE
[18:07:07.117]    - call: NULL
[18:07:07.118] plan(): nbrOfWorkers() = 1
[18:07:07.119] plan(): Setting new future strategy stack:
[18:07:07.119] List of future strategies:
[18:07:07.119] 1. sequential:
[18:07:07.119]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.119]    - tweaked: FALSE
[18:07:07.119]    - call: plan(strategy)
[18:07:07.120] plan(): nbrOfWorkers() = 1
[18:07:07.121] SequentialFuture started (and completed)
[18:07:07.121] - Launch lazy future ... done
[18:07:07.121] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = NA
[18:07:07.122] getGlobalsAndPackages() ...
[18:07:07.122] Searching for globals...
[18:07:07.130] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.130] Searching for globals ... DONE
[18:07:07.131] Resolving globals: FALSE
[18:07:07.132] 
[18:07:07.132] - packages: [1] ‘utils’
[18:07:07.132] getGlobalsAndPackages() ... DONE
[18:07:07.133] run() for ‘Future’ ...
[18:07:07.133] - state: ‘created’
[18:07:07.133] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:07.134] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:07.134] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:07.134]   - Field: ‘label’
[18:07:07.134]   - Field: ‘local’
[18:07:07.134]   - Field: ‘owner’
[18:07:07.135]   - Field: ‘envir’
[18:07:07.135]   - Field: ‘packages’
[18:07:07.135]   - Field: ‘gc’
[18:07:07.135]   - Field: ‘conditions’
[18:07:07.135]   - Field: ‘expr’
[18:07:07.136]   - Field: ‘uuid’
[18:07:07.136]   - Field: ‘seed’
[18:07:07.136]   - Field: ‘version’
[18:07:07.136]   - Field: ‘result’
[18:07:07.136]   - Field: ‘asynchronous’
[18:07:07.137]   - Field: ‘calls’
[18:07:07.137]   - Field: ‘globals’
[18:07:07.137]   - Field: ‘stdout’
[18:07:07.137]   - Field: ‘earlySignal’
[18:07:07.137]   - Field: ‘lazy’
[18:07:07.138]   - Field: ‘state’
[18:07:07.138] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:07.138] - Launch lazy future ...
[18:07:07.138] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.139] Packages needed by future strategies (n = 0): <none>
[18:07:07.139] {
[18:07:07.139]     {
[18:07:07.139]         {
[18:07:07.139]             ...future.startTime <- base::Sys.time()
[18:07:07.139]             {
[18:07:07.139]                 {
[18:07:07.139]                   {
[18:07:07.139]                     {
[18:07:07.139]                       base::local({
[18:07:07.139]                         has_future <- base::requireNamespace("future", 
[18:07:07.139]                           quietly = TRUE)
[18:07:07.139]                         if (has_future) {
[18:07:07.139]                           ns <- base::getNamespace("future")
[18:07:07.139]                           version <- ns[[".package"]][["version"]]
[18:07:07.139]                           if (is.null(version)) 
[18:07:07.139]                             version <- utils::packageVersion("future")
[18:07:07.139]                         }
[18:07:07.139]                         else {
[18:07:07.139]                           version <- NULL
[18:07:07.139]                         }
[18:07:07.139]                         if (!has_future || version < "1.8.0") {
[18:07:07.139]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.139]                             "", base::R.version$version.string), 
[18:07:07.139]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:07.139]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.139]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.139]                               "release", "version")], collapse = " "), 
[18:07:07.139]                             hostname = base::Sys.info()[["nodename"]])
[18:07:07.139]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.139]                             info)
[18:07:07.139]                           info <- base::paste(info, collapse = "; ")
[18:07:07.139]                           if (!has_future) {
[18:07:07.139]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.139]                               info)
[18:07:07.139]                           }
[18:07:07.139]                           else {
[18:07:07.139]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.139]                               info, version)
[18:07:07.139]                           }
[18:07:07.139]                           base::stop(msg)
[18:07:07.139]                         }
[18:07:07.139]                       })
[18:07:07.139]                     }
[18:07:07.139]                     base::local({
[18:07:07.139]                       for (pkg in "utils") {
[18:07:07.139]                         base::loadNamespace(pkg)
[18:07:07.139]                         base::library(pkg, character.only = TRUE)
[18:07:07.139]                       }
[18:07:07.139]                     })
[18:07:07.139]                   }
[18:07:07.139]                   ...future.strategy.old <- future::plan("list")
[18:07:07.139]                   options(future.plan = NULL)
[18:07:07.139]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.139]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.139]                 }
[18:07:07.139]                 ...future.workdir <- getwd()
[18:07:07.139]             }
[18:07:07.139]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.139]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.139]         }
[18:07:07.139]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.139]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.139]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.139]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.139]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.139]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.139]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.139]             base::names(...future.oldOptions))
[18:07:07.139]     }
[18:07:07.139]     if (TRUE) {
[18:07:07.139]     }
[18:07:07.139]     else {
[18:07:07.139]         if (NA) {
[18:07:07.139]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.139]                 open = "w")
[18:07:07.139]         }
[18:07:07.139]         else {
[18:07:07.139]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.139]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.139]         }
[18:07:07.139]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.139]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.139]             base::sink(type = "output", split = FALSE)
[18:07:07.139]             base::close(...future.stdout)
[18:07:07.139]         }, add = TRUE)
[18:07:07.139]     }
[18:07:07.139]     ...future.frame <- base::sys.nframe()
[18:07:07.139]     ...future.conditions <- base::list()
[18:07:07.139]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.139]     if (FALSE) {
[18:07:07.139]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.139]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.139]     }
[18:07:07.139]     ...future.result <- base::tryCatch({
[18:07:07.139]         base::withCallingHandlers({
[18:07:07.139]             ...future.value <- base::withVisible(base::local({
[18:07:07.139]                 print(1:50)
[18:07:07.139]                 str(1:50)
[18:07:07.139]                 cat(letters, sep = "-")
[18:07:07.139]                 cat(1:6, collapse = "\n")
[18:07:07.139]                 write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.139]                 42L
[18:07:07.139]             }))
[18:07:07.139]             future::FutureResult(value = ...future.value$value, 
[18:07:07.139]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.139]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.139]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.139]                     ...future.globalenv.names))
[18:07:07.139]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.139]         }, condition = base::local({
[18:07:07.139]             c <- base::c
[18:07:07.139]             inherits <- base::inherits
[18:07:07.139]             invokeRestart <- base::invokeRestart
[18:07:07.139]             length <- base::length
[18:07:07.139]             list <- base::list
[18:07:07.139]             seq.int <- base::seq.int
[18:07:07.139]             signalCondition <- base::signalCondition
[18:07:07.139]             sys.calls <- base::sys.calls
[18:07:07.139]             `[[` <- base::`[[`
[18:07:07.139]             `+` <- base::`+`
[18:07:07.139]             `<<-` <- base::`<<-`
[18:07:07.139]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.139]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.139]                   3L)]
[18:07:07.139]             }
[18:07:07.139]             function(cond) {
[18:07:07.139]                 is_error <- inherits(cond, "error")
[18:07:07.139]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.139]                   NULL)
[18:07:07.139]                 if (is_error) {
[18:07:07.139]                   sessionInformation <- function() {
[18:07:07.139]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.139]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.139]                       search = base::search(), system = base::Sys.info())
[18:07:07.139]                   }
[18:07:07.139]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.139]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.139]                     cond$call), session = sessionInformation(), 
[18:07:07.139]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.139]                   signalCondition(cond)
[18:07:07.139]                 }
[18:07:07.139]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.139]                 "immediateCondition"))) {
[18:07:07.139]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.139]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.139]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.139]                   if (TRUE && !signal) {
[18:07:07.139]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.139]                     {
[18:07:07.139]                       inherits <- base::inherits
[18:07:07.139]                       invokeRestart <- base::invokeRestart
[18:07:07.139]                       is.null <- base::is.null
[18:07:07.139]                       muffled <- FALSE
[18:07:07.139]                       if (inherits(cond, "message")) {
[18:07:07.139]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.139]                         if (muffled) 
[18:07:07.139]                           invokeRestart("muffleMessage")
[18:07:07.139]                       }
[18:07:07.139]                       else if (inherits(cond, "warning")) {
[18:07:07.139]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.139]                         if (muffled) 
[18:07:07.139]                           invokeRestart("muffleWarning")
[18:07:07.139]                       }
[18:07:07.139]                       else if (inherits(cond, "condition")) {
[18:07:07.139]                         if (!is.null(pattern)) {
[18:07:07.139]                           computeRestarts <- base::computeRestarts
[18:07:07.139]                           grepl <- base::grepl
[18:07:07.139]                           restarts <- computeRestarts(cond)
[18:07:07.139]                           for (restart in restarts) {
[18:07:07.139]                             name <- restart$name
[18:07:07.139]                             if (is.null(name)) 
[18:07:07.139]                               next
[18:07:07.139]                             if (!grepl(pattern, name)) 
[18:07:07.139]                               next
[18:07:07.139]                             invokeRestart(restart)
[18:07:07.139]                             muffled <- TRUE
[18:07:07.139]                             break
[18:07:07.139]                           }
[18:07:07.139]                         }
[18:07:07.139]                       }
[18:07:07.139]                       invisible(muffled)
[18:07:07.139]                     }
[18:07:07.139]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.139]                   }
[18:07:07.139]                 }
[18:07:07.139]                 else {
[18:07:07.139]                   if (TRUE) {
[18:07:07.139]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.139]                     {
[18:07:07.139]                       inherits <- base::inherits
[18:07:07.139]                       invokeRestart <- base::invokeRestart
[18:07:07.139]                       is.null <- base::is.null
[18:07:07.139]                       muffled <- FALSE
[18:07:07.139]                       if (inherits(cond, "message")) {
[18:07:07.139]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.139]                         if (muffled) 
[18:07:07.139]                           invokeRestart("muffleMessage")
[18:07:07.139]                       }
[18:07:07.139]                       else if (inherits(cond, "warning")) {
[18:07:07.139]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.139]                         if (muffled) 
[18:07:07.139]                           invokeRestart("muffleWarning")
[18:07:07.139]                       }
[18:07:07.139]                       else if (inherits(cond, "condition")) {
[18:07:07.139]                         if (!is.null(pattern)) {
[18:07:07.139]                           computeRestarts <- base::computeRestarts
[18:07:07.139]                           grepl <- base::grepl
[18:07:07.139]                           restarts <- computeRestarts(cond)
[18:07:07.139]                           for (restart in restarts) {
[18:07:07.139]                             name <- restart$name
[18:07:07.139]                             if (is.null(name)) 
[18:07:07.139]                               next
[18:07:07.139]                             if (!grepl(pattern, name)) 
[18:07:07.139]                               next
[18:07:07.139]                             invokeRestart(restart)
[18:07:07.139]                             muffled <- TRUE
[18:07:07.139]                             break
[18:07:07.139]                           }
[18:07:07.139]                         }
[18:07:07.139]                       }
[18:07:07.139]                       invisible(muffled)
[18:07:07.139]                     }
[18:07:07.139]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.139]                   }
[18:07:07.139]                 }
[18:07:07.139]             }
[18:07:07.139]         }))
[18:07:07.139]     }, error = function(ex) {
[18:07:07.139]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.139]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.139]                 ...future.rng), started = ...future.startTime, 
[18:07:07.139]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.139]             version = "1.8"), class = "FutureResult")
[18:07:07.139]     }, finally = {
[18:07:07.139]         if (!identical(...future.workdir, getwd())) 
[18:07:07.139]             setwd(...future.workdir)
[18:07:07.139]         {
[18:07:07.139]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.139]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.139]             }
[18:07:07.139]             base::options(...future.oldOptions)
[18:07:07.139]             if (.Platform$OS.type == "windows") {
[18:07:07.139]                 old_names <- names(...future.oldEnvVars)
[18:07:07.139]                 envs <- base::Sys.getenv()
[18:07:07.139]                 names <- names(envs)
[18:07:07.139]                 common <- intersect(names, old_names)
[18:07:07.139]                 added <- setdiff(names, old_names)
[18:07:07.139]                 removed <- setdiff(old_names, names)
[18:07:07.139]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.139]                   envs[common]]
[18:07:07.139]                 NAMES <- toupper(changed)
[18:07:07.139]                 args <- list()
[18:07:07.139]                 for (kk in seq_along(NAMES)) {
[18:07:07.139]                   name <- changed[[kk]]
[18:07:07.139]                   NAME <- NAMES[[kk]]
[18:07:07.139]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.139]                     next
[18:07:07.139]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.139]                 }
[18:07:07.139]                 NAMES <- toupper(added)
[18:07:07.139]                 for (kk in seq_along(NAMES)) {
[18:07:07.139]                   name <- added[[kk]]
[18:07:07.139]                   NAME <- NAMES[[kk]]
[18:07:07.139]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.139]                     next
[18:07:07.139]                   args[[name]] <- ""
[18:07:07.139]                 }
[18:07:07.139]                 NAMES <- toupper(removed)
[18:07:07.139]                 for (kk in seq_along(NAMES)) {
[18:07:07.139]                   name <- removed[[kk]]
[18:07:07.139]                   NAME <- NAMES[[kk]]
[18:07:07.139]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.139]                     next
[18:07:07.139]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.139]                 }
[18:07:07.139]                 if (length(args) > 0) 
[18:07:07.139]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.139]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.139]             }
[18:07:07.139]             else {
[18:07:07.139]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.139]             }
[18:07:07.139]             {
[18:07:07.139]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.139]                   0L) {
[18:07:07.139]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.139]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.139]                   base::options(opts)
[18:07:07.139]                 }
[18:07:07.139]                 {
[18:07:07.139]                   {
[18:07:07.139]                     NULL
[18:07:07.139]                     RNGkind("Mersenne-Twister")
[18:07:07.139]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:07.139]                       inherits = FALSE)
[18:07:07.139]                   }
[18:07:07.139]                   options(future.plan = NULL)
[18:07:07.139]                   if (is.na(NA_character_)) 
[18:07:07.139]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.139]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.139]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.139]                     .init = FALSE)
[18:07:07.139]                 }
[18:07:07.139]             }
[18:07:07.139]         }
[18:07:07.139]     })
[18:07:07.139]     if (FALSE) {
[18:07:07.139]         base::sink(type = "output", split = FALSE)
[18:07:07.139]         if (NA) {
[18:07:07.139]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.139]         }
[18:07:07.139]         else {
[18:07:07.139]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.139]         }
[18:07:07.139]         base::close(...future.stdout)
[18:07:07.139]         ...future.stdout <- NULL
[18:07:07.139]     }
[18:07:07.139]     ...future.result$conditions <- ...future.conditions
[18:07:07.139]     ...future.result$finished <- base::Sys.time()
[18:07:07.139]     ...future.result
[18:07:07.139] }
[18:07:07.143] plan(): Setting new future strategy stack:
[18:07:07.143] List of future strategies:
[18:07:07.143] 1. sequential:
[18:07:07.143]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.143]    - tweaked: FALSE
[18:07:07.143]    - call: NULL
[18:07:07.144] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[18:07:07.147] plan(): Setting new future strategy stack:
[18:07:07.147] List of future strategies:
[18:07:07.147] 1. sequential:
[18:07:07.147]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.147]    - tweaked: FALSE
[18:07:07.147]    - call: plan(strategy)
[18:07:07.148] plan(): nbrOfWorkers() = 1
[18:07:07.149] SequentialFuture started (and completed)
[18:07:07.149] - Launch lazy future ... done
[18:07:07.149] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ session_uuid: chr "14e633d8-3f80-f468-f704-67f254f4429f"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331263
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:06"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[18:07:07.164] getGlobalsAndPackages() ...
[18:07:07.164] Searching for globals...
[18:07:07.170] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.171] Searching for globals ... DONE
[18:07:07.171] Resolving globals: FALSE
[18:07:07.172] 
[18:07:07.172] - packages: [1] ‘utils’
[18:07:07.173] getGlobalsAndPackages() ... DONE
[18:07:07.173] run() for ‘Future’ ...
[18:07:07.173] - state: ‘created’
[18:07:07.174] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:07.174] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:07.175] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:07.175]   - Field: ‘label’
[18:07:07.175]   - Field: ‘local’
[18:07:07.175]   - Field: ‘owner’
[18:07:07.175]   - Field: ‘envir’
[18:07:07.176]   - Field: ‘packages’
[18:07:07.176]   - Field: ‘gc’
[18:07:07.176]   - Field: ‘conditions’
[18:07:07.176]   - Field: ‘expr’
[18:07:07.176]   - Field: ‘uuid’
[18:07:07.177]   - Field: ‘seed’
[18:07:07.177]   - Field: ‘version’
[18:07:07.177]   - Field: ‘result’
[18:07:07.177]   - Field: ‘asynchronous’
[18:07:07.177]   - Field: ‘calls’
[18:07:07.178]   - Field: ‘globals’
[18:07:07.178]   - Field: ‘stdout’
[18:07:07.178]   - Field: ‘earlySignal’
[18:07:07.178]   - Field: ‘lazy’
[18:07:07.181]   - Field: ‘state’
[18:07:07.181] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:07.181] - Launch lazy future ...
[18:07:07.182] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.182] Packages needed by future strategies (n = 0): <none>
[18:07:07.183] {
[18:07:07.183]     {
[18:07:07.183]         {
[18:07:07.183]             ...future.startTime <- base::Sys.time()
[18:07:07.183]             {
[18:07:07.183]                 {
[18:07:07.183]                   {
[18:07:07.183]                     {
[18:07:07.183]                       base::local({
[18:07:07.183]                         has_future <- base::requireNamespace("future", 
[18:07:07.183]                           quietly = TRUE)
[18:07:07.183]                         if (has_future) {
[18:07:07.183]                           ns <- base::getNamespace("future")
[18:07:07.183]                           version <- ns[[".package"]][["version"]]
[18:07:07.183]                           if (is.null(version)) 
[18:07:07.183]                             version <- utils::packageVersion("future")
[18:07:07.183]                         }
[18:07:07.183]                         else {
[18:07:07.183]                           version <- NULL
[18:07:07.183]                         }
[18:07:07.183]                         if (!has_future || version < "1.8.0") {
[18:07:07.183]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.183]                             "", base::R.version$version.string), 
[18:07:07.183]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:07.183]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.183]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.183]                               "release", "version")], collapse = " "), 
[18:07:07.183]                             hostname = base::Sys.info()[["nodename"]])
[18:07:07.183]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.183]                             info)
[18:07:07.183]                           info <- base::paste(info, collapse = "; ")
[18:07:07.183]                           if (!has_future) {
[18:07:07.183]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.183]                               info)
[18:07:07.183]                           }
[18:07:07.183]                           else {
[18:07:07.183]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.183]                               info, version)
[18:07:07.183]                           }
[18:07:07.183]                           base::stop(msg)
[18:07:07.183]                         }
[18:07:07.183]                       })
[18:07:07.183]                     }
[18:07:07.183]                     base::local({
[18:07:07.183]                       for (pkg in "utils") {
[18:07:07.183]                         base::loadNamespace(pkg)
[18:07:07.183]                         base::library(pkg, character.only = TRUE)
[18:07:07.183]                       }
[18:07:07.183]                     })
[18:07:07.183]                   }
[18:07:07.183]                   ...future.strategy.old <- future::plan("list")
[18:07:07.183]                   options(future.plan = NULL)
[18:07:07.183]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.183]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.183]                 }
[18:07:07.183]                 ...future.workdir <- getwd()
[18:07:07.183]             }
[18:07:07.183]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.183]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.183]         }
[18:07:07.183]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.183]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.183]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.183]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.183]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.183]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.183]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.183]             base::names(...future.oldOptions))
[18:07:07.183]     }
[18:07:07.183]     if (TRUE) {
[18:07:07.183]     }
[18:07:07.183]     else {
[18:07:07.183]         if (NA) {
[18:07:07.183]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.183]                 open = "w")
[18:07:07.183]         }
[18:07:07.183]         else {
[18:07:07.183]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.183]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.183]         }
[18:07:07.183]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.183]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.183]             base::sink(type = "output", split = FALSE)
[18:07:07.183]             base::close(...future.stdout)
[18:07:07.183]         }, add = TRUE)
[18:07:07.183]     }
[18:07:07.183]     ...future.frame <- base::sys.nframe()
[18:07:07.183]     ...future.conditions <- base::list()
[18:07:07.183]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.183]     if (FALSE) {
[18:07:07.183]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.183]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.183]     }
[18:07:07.183]     ...future.result <- base::tryCatch({
[18:07:07.183]         base::withCallingHandlers({
[18:07:07.183]             ...future.value <- base::withVisible(base::local({
[18:07:07.183]                 print(1:50)
[18:07:07.183]                 str(1:50)
[18:07:07.183]                 cat(letters, sep = "-")
[18:07:07.183]                 cat(1:6, collapse = "\n")
[18:07:07.183]                 write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.183]                 42L
[18:07:07.183]             }))
[18:07:07.183]             future::FutureResult(value = ...future.value$value, 
[18:07:07.183]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.183]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.183]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.183]                     ...future.globalenv.names))
[18:07:07.183]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.183]         }, condition = base::local({
[18:07:07.183]             c <- base::c
[18:07:07.183]             inherits <- base::inherits
[18:07:07.183]             invokeRestart <- base::invokeRestart
[18:07:07.183]             length <- base::length
[18:07:07.183]             list <- base::list
[18:07:07.183]             seq.int <- base::seq.int
[18:07:07.183]             signalCondition <- base::signalCondition
[18:07:07.183]             sys.calls <- base::sys.calls
[18:07:07.183]             `[[` <- base::`[[`
[18:07:07.183]             `+` <- base::`+`
[18:07:07.183]             `<<-` <- base::`<<-`
[18:07:07.183]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.183]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.183]                   3L)]
[18:07:07.183]             }
[18:07:07.183]             function(cond) {
[18:07:07.183]                 is_error <- inherits(cond, "error")
[18:07:07.183]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.183]                   NULL)
[18:07:07.183]                 if (is_error) {
[18:07:07.183]                   sessionInformation <- function() {
[18:07:07.183]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.183]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.183]                       search = base::search(), system = base::Sys.info())
[18:07:07.183]                   }
[18:07:07.183]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.183]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.183]                     cond$call), session = sessionInformation(), 
[18:07:07.183]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.183]                   signalCondition(cond)
[18:07:07.183]                 }
[18:07:07.183]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.183]                 "immediateCondition"))) {
[18:07:07.183]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.183]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.183]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.183]                   if (TRUE && !signal) {
[18:07:07.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.183]                     {
[18:07:07.183]                       inherits <- base::inherits
[18:07:07.183]                       invokeRestart <- base::invokeRestart
[18:07:07.183]                       is.null <- base::is.null
[18:07:07.183]                       muffled <- FALSE
[18:07:07.183]                       if (inherits(cond, "message")) {
[18:07:07.183]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.183]                         if (muffled) 
[18:07:07.183]                           invokeRestart("muffleMessage")
[18:07:07.183]                       }
[18:07:07.183]                       else if (inherits(cond, "warning")) {
[18:07:07.183]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.183]                         if (muffled) 
[18:07:07.183]                           invokeRestart("muffleWarning")
[18:07:07.183]                       }
[18:07:07.183]                       else if (inherits(cond, "condition")) {
[18:07:07.183]                         if (!is.null(pattern)) {
[18:07:07.183]                           computeRestarts <- base::computeRestarts
[18:07:07.183]                           grepl <- base::grepl
[18:07:07.183]                           restarts <- computeRestarts(cond)
[18:07:07.183]                           for (restart in restarts) {
[18:07:07.183]                             name <- restart$name
[18:07:07.183]                             if (is.null(name)) 
[18:07:07.183]                               next
[18:07:07.183]                             if (!grepl(pattern, name)) 
[18:07:07.183]                               next
[18:07:07.183]                             invokeRestart(restart)
[18:07:07.183]                             muffled <- TRUE
[18:07:07.183]                             break
[18:07:07.183]                           }
[18:07:07.183]                         }
[18:07:07.183]                       }
[18:07:07.183]                       invisible(muffled)
[18:07:07.183]                     }
[18:07:07.183]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.183]                   }
[18:07:07.183]                 }
[18:07:07.183]                 else {
[18:07:07.183]                   if (TRUE) {
[18:07:07.183]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.183]                     {
[18:07:07.183]                       inherits <- base::inherits
[18:07:07.183]                       invokeRestart <- base::invokeRestart
[18:07:07.183]                       is.null <- base::is.null
[18:07:07.183]                       muffled <- FALSE
[18:07:07.183]                       if (inherits(cond, "message")) {
[18:07:07.183]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.183]                         if (muffled) 
[18:07:07.183]                           invokeRestart("muffleMessage")
[18:07:07.183]                       }
[18:07:07.183]                       else if (inherits(cond, "warning")) {
[18:07:07.183]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.183]                         if (muffled) 
[18:07:07.183]                           invokeRestart("muffleWarning")
[18:07:07.183]                       }
[18:07:07.183]                       else if (inherits(cond, "condition")) {
[18:07:07.183]                         if (!is.null(pattern)) {
[18:07:07.183]                           computeRestarts <- base::computeRestarts
[18:07:07.183]                           grepl <- base::grepl
[18:07:07.183]                           restarts <- computeRestarts(cond)
[18:07:07.183]                           for (restart in restarts) {
[18:07:07.183]                             name <- restart$name
[18:07:07.183]                             if (is.null(name)) 
[18:07:07.183]                               next
[18:07:07.183]                             if (!grepl(pattern, name)) 
[18:07:07.183]                               next
[18:07:07.183]                             invokeRestart(restart)
[18:07:07.183]                             muffled <- TRUE
[18:07:07.183]                             break
[18:07:07.183]                           }
[18:07:07.183]                         }
[18:07:07.183]                       }
[18:07:07.183]                       invisible(muffled)
[18:07:07.183]                     }
[18:07:07.183]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.183]                   }
[18:07:07.183]                 }
[18:07:07.183]             }
[18:07:07.183]         }))
[18:07:07.183]     }, error = function(ex) {
[18:07:07.183]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.183]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.183]                 ...future.rng), started = ...future.startTime, 
[18:07:07.183]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.183]             version = "1.8"), class = "FutureResult")
[18:07:07.183]     }, finally = {
[18:07:07.183]         if (!identical(...future.workdir, getwd())) 
[18:07:07.183]             setwd(...future.workdir)
[18:07:07.183]         {
[18:07:07.183]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.183]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.183]             }
[18:07:07.183]             base::options(...future.oldOptions)
[18:07:07.183]             if (.Platform$OS.type == "windows") {
[18:07:07.183]                 old_names <- names(...future.oldEnvVars)
[18:07:07.183]                 envs <- base::Sys.getenv()
[18:07:07.183]                 names <- names(envs)
[18:07:07.183]                 common <- intersect(names, old_names)
[18:07:07.183]                 added <- setdiff(names, old_names)
[18:07:07.183]                 removed <- setdiff(old_names, names)
[18:07:07.183]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.183]                   envs[common]]
[18:07:07.183]                 NAMES <- toupper(changed)
[18:07:07.183]                 args <- list()
[18:07:07.183]                 for (kk in seq_along(NAMES)) {
[18:07:07.183]                   name <- changed[[kk]]
[18:07:07.183]                   NAME <- NAMES[[kk]]
[18:07:07.183]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.183]                     next
[18:07:07.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.183]                 }
[18:07:07.183]                 NAMES <- toupper(added)
[18:07:07.183]                 for (kk in seq_along(NAMES)) {
[18:07:07.183]                   name <- added[[kk]]
[18:07:07.183]                   NAME <- NAMES[[kk]]
[18:07:07.183]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.183]                     next
[18:07:07.183]                   args[[name]] <- ""
[18:07:07.183]                 }
[18:07:07.183]                 NAMES <- toupper(removed)
[18:07:07.183]                 for (kk in seq_along(NAMES)) {
[18:07:07.183]                   name <- removed[[kk]]
[18:07:07.183]                   NAME <- NAMES[[kk]]
[18:07:07.183]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.183]                     next
[18:07:07.183]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.183]                 }
[18:07:07.183]                 if (length(args) > 0) 
[18:07:07.183]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.183]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.183]             }
[18:07:07.183]             else {
[18:07:07.183]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.183]             }
[18:07:07.183]             {
[18:07:07.183]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.183]                   0L) {
[18:07:07.183]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.183]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.183]                   base::options(opts)
[18:07:07.183]                 }
[18:07:07.183]                 {
[18:07:07.183]                   {
[18:07:07.183]                     NULL
[18:07:07.183]                     RNGkind("Mersenne-Twister")
[18:07:07.183]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:07.183]                       inherits = FALSE)
[18:07:07.183]                   }
[18:07:07.183]                   options(future.plan = NULL)
[18:07:07.183]                   if (is.na(NA_character_)) 
[18:07:07.183]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.183]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.183]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.183]                     .init = FALSE)
[18:07:07.183]                 }
[18:07:07.183]             }
[18:07:07.183]         }
[18:07:07.183]     })
[18:07:07.183]     if (FALSE) {
[18:07:07.183]         base::sink(type = "output", split = FALSE)
[18:07:07.183]         if (NA) {
[18:07:07.183]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.183]         }
[18:07:07.183]         else {
[18:07:07.183]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.183]         }
[18:07:07.183]         base::close(...future.stdout)
[18:07:07.183]         ...future.stdout <- NULL
[18:07:07.183]     }
[18:07:07.183]     ...future.result$conditions <- ...future.conditions
[18:07:07.183]     ...future.result$finished <- base::Sys.time()
[18:07:07.183]     ...future.result
[18:07:07.183] }
[18:07:07.188] plan(): Setting new future strategy stack:
[18:07:07.188] List of future strategies:
[18:07:07.188] 1. sequential:
[18:07:07.188]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.188]    - tweaked: FALSE
[18:07:07.188]    - call: NULL
[18:07:07.189] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[18:07:07.192] plan(): Setting new future strategy stack:
[18:07:07.192] List of future strategies:
[18:07:07.192] 1. sequential:
[18:07:07.192]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.192]    - tweaked: FALSE
[18:07:07.192]    - call: plan(strategy)
[18:07:07.193] plan(): nbrOfWorkers() = 1
[18:07:07.194] SequentialFuture started (and completed)
[18:07:07.194] - Launch lazy future ... done
[18:07:07.194] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[18:07:07.195] getGlobalsAndPackages() ...
[18:07:07.195] Searching for globals...
[18:07:07.196] - globals found: [1] ‘print’
[18:07:07.197] Searching for globals ... DONE
[18:07:07.197] Resolving globals: FALSE
[18:07:07.197] 
[18:07:07.198] 
[18:07:07.198] getGlobalsAndPackages() ... DONE
[18:07:07.198] run() for ‘Future’ ...
[18:07:07.199] - state: ‘created’
[18:07:07.199] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:07:07.199] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:07:07.200] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:07:07.200]   - Field: ‘label’
[18:07:07.200]   - Field: ‘local’
[18:07:07.200]   - Field: ‘owner’
[18:07:07.200]   - Field: ‘envir’
[18:07:07.201]   - Field: ‘packages’
[18:07:07.201]   - Field: ‘gc’
[18:07:07.201]   - Field: ‘conditions’
[18:07:07.201]   - Field: ‘expr’
[18:07:07.201]   - Field: ‘uuid’
[18:07:07.202]   - Field: ‘seed’
[18:07:07.202]   - Field: ‘version’
[18:07:07.202]   - Field: ‘result’
[18:07:07.202]   - Field: ‘asynchronous’
[18:07:07.202]   - Field: ‘calls’
[18:07:07.203]   - Field: ‘globals’
[18:07:07.203]   - Field: ‘stdout’
[18:07:07.203]   - Field: ‘earlySignal’
[18:07:07.203]   - Field: ‘lazy’
[18:07:07.203]   - Field: ‘state’
[18:07:07.204] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:07:07.204] - Launch lazy future ...
[18:07:07.204] Packages needed by the future expression (n = 0): <none>
[18:07:07.205] Packages needed by future strategies (n = 0): <none>
[18:07:07.205] {
[18:07:07.205]     {
[18:07:07.205]         {
[18:07:07.205]             ...future.startTime <- base::Sys.time()
[18:07:07.205]             {
[18:07:07.205]                 {
[18:07:07.205]                   {
[18:07:07.205]                     base::local({
[18:07:07.205]                       has_future <- base::requireNamespace("future", 
[18:07:07.205]                         quietly = TRUE)
[18:07:07.205]                       if (has_future) {
[18:07:07.205]                         ns <- base::getNamespace("future")
[18:07:07.205]                         version <- ns[[".package"]][["version"]]
[18:07:07.205]                         if (is.null(version)) 
[18:07:07.205]                           version <- utils::packageVersion("future")
[18:07:07.205]                       }
[18:07:07.205]                       else {
[18:07:07.205]                         version <- NULL
[18:07:07.205]                       }
[18:07:07.205]                       if (!has_future || version < "1.8.0") {
[18:07:07.205]                         info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.205]                           "", base::R.version$version.string), 
[18:07:07.205]                           platform = base::sprintf("%s (%s-bit)", 
[18:07:07.205]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.205]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.205]                             "release", "version")], collapse = " "), 
[18:07:07.205]                           hostname = base::Sys.info()[["nodename"]])
[18:07:07.205]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.205]                           info)
[18:07:07.205]                         info <- base::paste(info, collapse = "; ")
[18:07:07.205]                         if (!has_future) {
[18:07:07.205]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.205]                             info)
[18:07:07.205]                         }
[18:07:07.205]                         else {
[18:07:07.205]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.205]                             info, version)
[18:07:07.205]                         }
[18:07:07.205]                         base::stop(msg)
[18:07:07.205]                       }
[18:07:07.205]                     })
[18:07:07.205]                   }
[18:07:07.205]                   ...future.strategy.old <- future::plan("list")
[18:07:07.205]                   options(future.plan = NULL)
[18:07:07.205]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.205]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.205]                 }
[18:07:07.205]                 ...future.workdir <- getwd()
[18:07:07.205]             }
[18:07:07.205]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.205]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.205]         }
[18:07:07.205]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.205]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.205]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.205]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.205]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.205]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.205]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.205]             base::names(...future.oldOptions))
[18:07:07.205]     }
[18:07:07.205]     if (FALSE) {
[18:07:07.205]     }
[18:07:07.205]     else {
[18:07:07.205]         if (TRUE) {
[18:07:07.205]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.205]                 open = "w")
[18:07:07.205]         }
[18:07:07.205]         else {
[18:07:07.205]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.205]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.205]         }
[18:07:07.205]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.205]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.205]             base::sink(type = "output", split = FALSE)
[18:07:07.205]             base::close(...future.stdout)
[18:07:07.205]         }, add = TRUE)
[18:07:07.205]     }
[18:07:07.205]     ...future.frame <- base::sys.nframe()
[18:07:07.205]     ...future.conditions <- base::list()
[18:07:07.205]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.205]     if (FALSE) {
[18:07:07.205]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.205]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.205]     }
[18:07:07.205]     ...future.result <- base::tryCatch({
[18:07:07.205]         base::withCallingHandlers({
[18:07:07.205]             ...future.value <- base::withVisible(base::local(print(42)))
[18:07:07.205]             future::FutureResult(value = ...future.value$value, 
[18:07:07.205]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.205]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.205]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.205]                     ...future.globalenv.names))
[18:07:07.205]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.205]         }, condition = base::local({
[18:07:07.205]             c <- base::c
[18:07:07.205]             inherits <- base::inherits
[18:07:07.205]             invokeRestart <- base::invokeRestart
[18:07:07.205]             length <- base::length
[18:07:07.205]             list <- base::list
[18:07:07.205]             seq.int <- base::seq.int
[18:07:07.205]             signalCondition <- base::signalCondition
[18:07:07.205]             sys.calls <- base::sys.calls
[18:07:07.205]             `[[` <- base::`[[`
[18:07:07.205]             `+` <- base::`+`
[18:07:07.205]             `<<-` <- base::`<<-`
[18:07:07.205]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.205]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.205]                   3L)]
[18:07:07.205]             }
[18:07:07.205]             function(cond) {
[18:07:07.205]                 is_error <- inherits(cond, "error")
[18:07:07.205]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.205]                   NULL)
[18:07:07.205]                 if (is_error) {
[18:07:07.205]                   sessionInformation <- function() {
[18:07:07.205]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.205]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.205]                       search = base::search(), system = base::Sys.info())
[18:07:07.205]                   }
[18:07:07.205]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.205]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.205]                     cond$call), session = sessionInformation(), 
[18:07:07.205]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.205]                   signalCondition(cond)
[18:07:07.205]                 }
[18:07:07.205]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.205]                 "immediateCondition"))) {
[18:07:07.205]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.205]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.205]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.205]                   if (TRUE && !signal) {
[18:07:07.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.205]                     {
[18:07:07.205]                       inherits <- base::inherits
[18:07:07.205]                       invokeRestart <- base::invokeRestart
[18:07:07.205]                       is.null <- base::is.null
[18:07:07.205]                       muffled <- FALSE
[18:07:07.205]                       if (inherits(cond, "message")) {
[18:07:07.205]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.205]                         if (muffled) 
[18:07:07.205]                           invokeRestart("muffleMessage")
[18:07:07.205]                       }
[18:07:07.205]                       else if (inherits(cond, "warning")) {
[18:07:07.205]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.205]                         if (muffled) 
[18:07:07.205]                           invokeRestart("muffleWarning")
[18:07:07.205]                       }
[18:07:07.205]                       else if (inherits(cond, "condition")) {
[18:07:07.205]                         if (!is.null(pattern)) {
[18:07:07.205]                           computeRestarts <- base::computeRestarts
[18:07:07.205]                           grepl <- base::grepl
[18:07:07.205]                           restarts <- computeRestarts(cond)
[18:07:07.205]                           for (restart in restarts) {
[18:07:07.205]                             name <- restart$name
[18:07:07.205]                             if (is.null(name)) 
[18:07:07.205]                               next
[18:07:07.205]                             if (!grepl(pattern, name)) 
[18:07:07.205]                               next
[18:07:07.205]                             invokeRestart(restart)
[18:07:07.205]                             muffled <- TRUE
[18:07:07.205]                             break
[18:07:07.205]                           }
[18:07:07.205]                         }
[18:07:07.205]                       }
[18:07:07.205]                       invisible(muffled)
[18:07:07.205]                     }
[18:07:07.205]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.205]                   }
[18:07:07.205]                 }
[18:07:07.205]                 else {
[18:07:07.205]                   if (TRUE) {
[18:07:07.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.205]                     {
[18:07:07.205]                       inherits <- base::inherits
[18:07:07.205]                       invokeRestart <- base::invokeRestart
[18:07:07.205]                       is.null <- base::is.null
[18:07:07.205]                       muffled <- FALSE
[18:07:07.205]                       if (inherits(cond, "message")) {
[18:07:07.205]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.205]                         if (muffled) 
[18:07:07.205]                           invokeRestart("muffleMessage")
[18:07:07.205]                       }
[18:07:07.205]                       else if (inherits(cond, "warning")) {
[18:07:07.205]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.205]                         if (muffled) 
[18:07:07.205]                           invokeRestart("muffleWarning")
[18:07:07.205]                       }
[18:07:07.205]                       else if (inherits(cond, "condition")) {
[18:07:07.205]                         if (!is.null(pattern)) {
[18:07:07.205]                           computeRestarts <- base::computeRestarts
[18:07:07.205]                           grepl <- base::grepl
[18:07:07.205]                           restarts <- computeRestarts(cond)
[18:07:07.205]                           for (restart in restarts) {
[18:07:07.205]                             name <- restart$name
[18:07:07.205]                             if (is.null(name)) 
[18:07:07.205]                               next
[18:07:07.205]                             if (!grepl(pattern, name)) 
[18:07:07.205]                               next
[18:07:07.205]                             invokeRestart(restart)
[18:07:07.205]                             muffled <- TRUE
[18:07:07.205]                             break
[18:07:07.205]                           }
[18:07:07.205]                         }
[18:07:07.205]                       }
[18:07:07.205]                       invisible(muffled)
[18:07:07.205]                     }
[18:07:07.205]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.205]                   }
[18:07:07.205]                 }
[18:07:07.205]             }
[18:07:07.205]         }))
[18:07:07.205]     }, error = function(ex) {
[18:07:07.205]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.205]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.205]                 ...future.rng), started = ...future.startTime, 
[18:07:07.205]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.205]             version = "1.8"), class = "FutureResult")
[18:07:07.205]     }, finally = {
[18:07:07.205]         if (!identical(...future.workdir, getwd())) 
[18:07:07.205]             setwd(...future.workdir)
[18:07:07.205]         {
[18:07:07.205]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.205]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.205]             }
[18:07:07.205]             base::options(...future.oldOptions)
[18:07:07.205]             if (.Platform$OS.type == "windows") {
[18:07:07.205]                 old_names <- names(...future.oldEnvVars)
[18:07:07.205]                 envs <- base::Sys.getenv()
[18:07:07.205]                 names <- names(envs)
[18:07:07.205]                 common <- intersect(names, old_names)
[18:07:07.205]                 added <- setdiff(names, old_names)
[18:07:07.205]                 removed <- setdiff(old_names, names)
[18:07:07.205]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.205]                   envs[common]]
[18:07:07.205]                 NAMES <- toupper(changed)
[18:07:07.205]                 args <- list()
[18:07:07.205]                 for (kk in seq_along(NAMES)) {
[18:07:07.205]                   name <- changed[[kk]]
[18:07:07.205]                   NAME <- NAMES[[kk]]
[18:07:07.205]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.205]                     next
[18:07:07.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.205]                 }
[18:07:07.205]                 NAMES <- toupper(added)
[18:07:07.205]                 for (kk in seq_along(NAMES)) {
[18:07:07.205]                   name <- added[[kk]]
[18:07:07.205]                   NAME <- NAMES[[kk]]
[18:07:07.205]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.205]                     next
[18:07:07.205]                   args[[name]] <- ""
[18:07:07.205]                 }
[18:07:07.205]                 NAMES <- toupper(removed)
[18:07:07.205]                 for (kk in seq_along(NAMES)) {
[18:07:07.205]                   name <- removed[[kk]]
[18:07:07.205]                   NAME <- NAMES[[kk]]
[18:07:07.205]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.205]                     next
[18:07:07.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.205]                 }
[18:07:07.205]                 if (length(args) > 0) 
[18:07:07.205]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.205]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.205]             }
[18:07:07.205]             else {
[18:07:07.205]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.205]             }
[18:07:07.205]             {
[18:07:07.205]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.205]                   0L) {
[18:07:07.205]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.205]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.205]                   base::options(opts)
[18:07:07.205]                 }
[18:07:07.205]                 {
[18:07:07.205]                   {
[18:07:07.205]                     NULL
[18:07:07.205]                     RNGkind("Mersenne-Twister")
[18:07:07.205]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:07:07.205]                       inherits = FALSE)
[18:07:07.205]                   }
[18:07:07.205]                   options(future.plan = NULL)
[18:07:07.205]                   if (is.na(NA_character_)) 
[18:07:07.205]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.205]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.205]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.205]                     .init = FALSE)
[18:07:07.205]                 }
[18:07:07.205]             }
[18:07:07.205]         }
[18:07:07.205]     })
[18:07:07.205]     if (TRUE) {
[18:07:07.205]         base::sink(type = "output", split = FALSE)
[18:07:07.205]         if (TRUE) {
[18:07:07.205]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.205]         }
[18:07:07.205]         else {
[18:07:07.205]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.205]         }
[18:07:07.205]         base::close(...future.stdout)
[18:07:07.205]         ...future.stdout <- NULL
[18:07:07.205]     }
[18:07:07.205]     ...future.result$conditions <- ...future.conditions
[18:07:07.205]     ...future.result$finished <- base::Sys.time()
[18:07:07.205]     ...future.result
[18:07:07.205] }
[18:07:07.209] plan(): Setting new future strategy stack:
[18:07:07.209] List of future strategies:
[18:07:07.209] 1. sequential:
[18:07:07.209]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.209]    - tweaked: FALSE
[18:07:07.209]    - call: NULL
[18:07:07.210] plan(): nbrOfWorkers() = 1
[18:07:07.212] plan(): Setting new future strategy stack:
[18:07:07.212] List of future strategies:
[18:07:07.212] 1. sequential:
[18:07:07.212]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.212]    - tweaked: FALSE
[18:07:07.212]    - call: plan(strategy)
[18:07:07.213] plan(): nbrOfWorkers() = 1
[18:07:07.214] SequentialFuture started (and completed)
[18:07:07.214] - Launch lazy future ... done
[18:07:07.214] run() for ‘SequentialFuture’ ... done
[1] 42
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[18:07:07.226] plan(): Setting new future strategy stack:
[18:07:07.226] List of future strategies:
[18:07:07.226] 1. multicore:
[18:07:07.226]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.226]    - tweaked: FALSE
[18:07:07.226]    - call: plan(strategy)
[18:07:07.233] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[18:07:07.233] getGlobalsAndPackages() ...
[18:07:07.234] Searching for globals...
[18:07:07.240] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.241] Searching for globals ... DONE
[18:07:07.241] Resolving globals: FALSE
[18:07:07.242] 
[18:07:07.242] - packages: [1] ‘utils’
[18:07:07.242] getGlobalsAndPackages() ... DONE
[18:07:07.243] run() for ‘Future’ ...
[18:07:07.243] - state: ‘created’
[18:07:07.243] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.252] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.253] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.253]   - Field: ‘label’
[18:07:07.253]   - Field: ‘local’
[18:07:07.253]   - Field: ‘owner’
[18:07:07.254]   - Field: ‘envir’
[18:07:07.254]   - Field: ‘workers’
[18:07:07.254]   - Field: ‘packages’
[18:07:07.254]   - Field: ‘gc’
[18:07:07.254]   - Field: ‘job’
[18:07:07.255]   - Field: ‘conditions’
[18:07:07.255]   - Field: ‘expr’
[18:07:07.255]   - Field: ‘uuid’
[18:07:07.255]   - Field: ‘seed’
[18:07:07.255]   - Field: ‘version’
[18:07:07.256]   - Field: ‘result’
[18:07:07.256]   - Field: ‘asynchronous’
[18:07:07.256]   - Field: ‘calls’
[18:07:07.256]   - Field: ‘globals’
[18:07:07.256]   - Field: ‘stdout’
[18:07:07.257]   - Field: ‘earlySignal’
[18:07:07.257]   - Field: ‘lazy’
[18:07:07.257]   - Field: ‘state’
[18:07:07.257] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.257] - Launch lazy future ...
[18:07:07.259] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.259] Packages needed by future strategies (n = 0): <none>
[18:07:07.260] {
[18:07:07.260]     {
[18:07:07.260]         {
[18:07:07.260]             ...future.startTime <- base::Sys.time()
[18:07:07.260]             {
[18:07:07.260]                 {
[18:07:07.260]                   {
[18:07:07.260]                     {
[18:07:07.260]                       {
[18:07:07.260]                         base::local({
[18:07:07.260]                           has_future <- base::requireNamespace("future", 
[18:07:07.260]                             quietly = TRUE)
[18:07:07.260]                           if (has_future) {
[18:07:07.260]                             ns <- base::getNamespace("future")
[18:07:07.260]                             version <- ns[[".package"]][["version"]]
[18:07:07.260]                             if (is.null(version)) 
[18:07:07.260]                               version <- utils::packageVersion("future")
[18:07:07.260]                           }
[18:07:07.260]                           else {
[18:07:07.260]                             version <- NULL
[18:07:07.260]                           }
[18:07:07.260]                           if (!has_future || version < "1.8.0") {
[18:07:07.260]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.260]                               "", base::R.version$version.string), 
[18:07:07.260]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:07.260]                                 base::R.version$platform, 8 * 
[18:07:07.260]                                   base::.Machine$sizeof.pointer), 
[18:07:07.260]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.260]                                 "release", "version")], collapse = " "), 
[18:07:07.260]                               hostname = base::Sys.info()[["nodename"]])
[18:07:07.260]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.260]                               info)
[18:07:07.260]                             info <- base::paste(info, collapse = "; ")
[18:07:07.260]                             if (!has_future) {
[18:07:07.260]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.260]                                 info)
[18:07:07.260]                             }
[18:07:07.260]                             else {
[18:07:07.260]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.260]                                 info, version)
[18:07:07.260]                             }
[18:07:07.260]                             base::stop(msg)
[18:07:07.260]                           }
[18:07:07.260]                         })
[18:07:07.260]                       }
[18:07:07.260]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.260]                       base::options(mc.cores = 1L)
[18:07:07.260]                     }
[18:07:07.260]                     base::local({
[18:07:07.260]                       for (pkg in "utils") {
[18:07:07.260]                         base::loadNamespace(pkg)
[18:07:07.260]                         base::library(pkg, character.only = TRUE)
[18:07:07.260]                       }
[18:07:07.260]                     })
[18:07:07.260]                   }
[18:07:07.260]                   ...future.strategy.old <- future::plan("list")
[18:07:07.260]                   options(future.plan = NULL)
[18:07:07.260]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.260]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.260]                 }
[18:07:07.260]                 ...future.workdir <- getwd()
[18:07:07.260]             }
[18:07:07.260]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.260]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.260]         }
[18:07:07.260]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.260]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.260]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.260]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.260]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.260]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.260]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.260]             base::names(...future.oldOptions))
[18:07:07.260]     }
[18:07:07.260]     if (FALSE) {
[18:07:07.260]     }
[18:07:07.260]     else {
[18:07:07.260]         if (TRUE) {
[18:07:07.260]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.260]                 open = "w")
[18:07:07.260]         }
[18:07:07.260]         else {
[18:07:07.260]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.260]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.260]         }
[18:07:07.260]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.260]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.260]             base::sink(type = "output", split = FALSE)
[18:07:07.260]             base::close(...future.stdout)
[18:07:07.260]         }, add = TRUE)
[18:07:07.260]     }
[18:07:07.260]     ...future.frame <- base::sys.nframe()
[18:07:07.260]     ...future.conditions <- base::list()
[18:07:07.260]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.260]     if (FALSE) {
[18:07:07.260]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.260]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.260]     }
[18:07:07.260]     ...future.result <- base::tryCatch({
[18:07:07.260]         base::withCallingHandlers({
[18:07:07.260]             ...future.value <- base::withVisible(base::local({
[18:07:07.260]                 withCallingHandlers({
[18:07:07.260]                   {
[18:07:07.260]                     print(1:50)
[18:07:07.260]                     str(1:50)
[18:07:07.260]                     cat(letters, sep = "-")
[18:07:07.260]                     cat(1:6, collapse = "\n")
[18:07:07.260]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.260]                     42L
[18:07:07.260]                   }
[18:07:07.260]                 }, immediateCondition = function(cond) {
[18:07:07.260]                   save_rds <- function (object, pathname, ...) 
[18:07:07.260]                   {
[18:07:07.260]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.260]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.260]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.260]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.260]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.260]                         fi_tmp[["mtime"]])
[18:07:07.260]                     }
[18:07:07.260]                     tryCatch({
[18:07:07.260]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.260]                     }, error = function(ex) {
[18:07:07.260]                       msg <- conditionMessage(ex)
[18:07:07.260]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.260]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.260]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.260]                         fi_tmp[["mtime"]], msg)
[18:07:07.260]                       ex$message <- msg
[18:07:07.260]                       stop(ex)
[18:07:07.260]                     })
[18:07:07.260]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.260]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.260]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.260]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.260]                       fi <- file.info(pathname)
[18:07:07.260]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.260]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.260]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.260]                         fi[["size"]], fi[["mtime"]])
[18:07:07.260]                       stop(msg)
[18:07:07.260]                     }
[18:07:07.260]                     invisible(pathname)
[18:07:07.260]                   }
[18:07:07.260]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.260]                     rootPath = tempdir()) 
[18:07:07.260]                   {
[18:07:07.260]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.260]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.260]                       tmpdir = path, fileext = ".rds")
[18:07:07.260]                     save_rds(obj, file)
[18:07:07.260]                   }
[18:07:07.260]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.260]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.260]                   {
[18:07:07.260]                     inherits <- base::inherits
[18:07:07.260]                     invokeRestart <- base::invokeRestart
[18:07:07.260]                     is.null <- base::is.null
[18:07:07.260]                     muffled <- FALSE
[18:07:07.260]                     if (inherits(cond, "message")) {
[18:07:07.260]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.260]                       if (muffled) 
[18:07:07.260]                         invokeRestart("muffleMessage")
[18:07:07.260]                     }
[18:07:07.260]                     else if (inherits(cond, "warning")) {
[18:07:07.260]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.260]                       if (muffled) 
[18:07:07.260]                         invokeRestart("muffleWarning")
[18:07:07.260]                     }
[18:07:07.260]                     else if (inherits(cond, "condition")) {
[18:07:07.260]                       if (!is.null(pattern)) {
[18:07:07.260]                         computeRestarts <- base::computeRestarts
[18:07:07.260]                         grepl <- base::grepl
[18:07:07.260]                         restarts <- computeRestarts(cond)
[18:07:07.260]                         for (restart in restarts) {
[18:07:07.260]                           name <- restart$name
[18:07:07.260]                           if (is.null(name)) 
[18:07:07.260]                             next
[18:07:07.260]                           if (!grepl(pattern, name)) 
[18:07:07.260]                             next
[18:07:07.260]                           invokeRestart(restart)
[18:07:07.260]                           muffled <- TRUE
[18:07:07.260]                           break
[18:07:07.260]                         }
[18:07:07.260]                       }
[18:07:07.260]                     }
[18:07:07.260]                     invisible(muffled)
[18:07:07.260]                   }
[18:07:07.260]                   muffleCondition(cond)
[18:07:07.260]                 })
[18:07:07.260]             }))
[18:07:07.260]             future::FutureResult(value = ...future.value$value, 
[18:07:07.260]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.260]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.260]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.260]                     ...future.globalenv.names))
[18:07:07.260]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.260]         }, condition = base::local({
[18:07:07.260]             c <- base::c
[18:07:07.260]             inherits <- base::inherits
[18:07:07.260]             invokeRestart <- base::invokeRestart
[18:07:07.260]             length <- base::length
[18:07:07.260]             list <- base::list
[18:07:07.260]             seq.int <- base::seq.int
[18:07:07.260]             signalCondition <- base::signalCondition
[18:07:07.260]             sys.calls <- base::sys.calls
[18:07:07.260]             `[[` <- base::`[[`
[18:07:07.260]             `+` <- base::`+`
[18:07:07.260]             `<<-` <- base::`<<-`
[18:07:07.260]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.260]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.260]                   3L)]
[18:07:07.260]             }
[18:07:07.260]             function(cond) {
[18:07:07.260]                 is_error <- inherits(cond, "error")
[18:07:07.260]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.260]                   NULL)
[18:07:07.260]                 if (is_error) {
[18:07:07.260]                   sessionInformation <- function() {
[18:07:07.260]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.260]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.260]                       search = base::search(), system = base::Sys.info())
[18:07:07.260]                   }
[18:07:07.260]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.260]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.260]                     cond$call), session = sessionInformation(), 
[18:07:07.260]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.260]                   signalCondition(cond)
[18:07:07.260]                 }
[18:07:07.260]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.260]                 "immediateCondition"))) {
[18:07:07.260]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.260]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.260]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.260]                   if (TRUE && !signal) {
[18:07:07.260]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.260]                     {
[18:07:07.260]                       inherits <- base::inherits
[18:07:07.260]                       invokeRestart <- base::invokeRestart
[18:07:07.260]                       is.null <- base::is.null
[18:07:07.260]                       muffled <- FALSE
[18:07:07.260]                       if (inherits(cond, "message")) {
[18:07:07.260]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.260]                         if (muffled) 
[18:07:07.260]                           invokeRestart("muffleMessage")
[18:07:07.260]                       }
[18:07:07.260]                       else if (inherits(cond, "warning")) {
[18:07:07.260]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.260]                         if (muffled) 
[18:07:07.260]                           invokeRestart("muffleWarning")
[18:07:07.260]                       }
[18:07:07.260]                       else if (inherits(cond, "condition")) {
[18:07:07.260]                         if (!is.null(pattern)) {
[18:07:07.260]                           computeRestarts <- base::computeRestarts
[18:07:07.260]                           grepl <- base::grepl
[18:07:07.260]                           restarts <- computeRestarts(cond)
[18:07:07.260]                           for (restart in restarts) {
[18:07:07.260]                             name <- restart$name
[18:07:07.260]                             if (is.null(name)) 
[18:07:07.260]                               next
[18:07:07.260]                             if (!grepl(pattern, name)) 
[18:07:07.260]                               next
[18:07:07.260]                             invokeRestart(restart)
[18:07:07.260]                             muffled <- TRUE
[18:07:07.260]                             break
[18:07:07.260]                           }
[18:07:07.260]                         }
[18:07:07.260]                       }
[18:07:07.260]                       invisible(muffled)
[18:07:07.260]                     }
[18:07:07.260]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.260]                   }
[18:07:07.260]                 }
[18:07:07.260]                 else {
[18:07:07.260]                   if (TRUE) {
[18:07:07.260]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.260]                     {
[18:07:07.260]                       inherits <- base::inherits
[18:07:07.260]                       invokeRestart <- base::invokeRestart
[18:07:07.260]                       is.null <- base::is.null
[18:07:07.260]                       muffled <- FALSE
[18:07:07.260]                       if (inherits(cond, "message")) {
[18:07:07.260]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.260]                         if (muffled) 
[18:07:07.260]                           invokeRestart("muffleMessage")
[18:07:07.260]                       }
[18:07:07.260]                       else if (inherits(cond, "warning")) {
[18:07:07.260]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.260]                         if (muffled) 
[18:07:07.260]                           invokeRestart("muffleWarning")
[18:07:07.260]                       }
[18:07:07.260]                       else if (inherits(cond, "condition")) {
[18:07:07.260]                         if (!is.null(pattern)) {
[18:07:07.260]                           computeRestarts <- base::computeRestarts
[18:07:07.260]                           grepl <- base::grepl
[18:07:07.260]                           restarts <- computeRestarts(cond)
[18:07:07.260]                           for (restart in restarts) {
[18:07:07.260]                             name <- restart$name
[18:07:07.260]                             if (is.null(name)) 
[18:07:07.260]                               next
[18:07:07.260]                             if (!grepl(pattern, name)) 
[18:07:07.260]                               next
[18:07:07.260]                             invokeRestart(restart)
[18:07:07.260]                             muffled <- TRUE
[18:07:07.260]                             break
[18:07:07.260]                           }
[18:07:07.260]                         }
[18:07:07.260]                       }
[18:07:07.260]                       invisible(muffled)
[18:07:07.260]                     }
[18:07:07.260]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.260]                   }
[18:07:07.260]                 }
[18:07:07.260]             }
[18:07:07.260]         }))
[18:07:07.260]     }, error = function(ex) {
[18:07:07.260]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.260]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.260]                 ...future.rng), started = ...future.startTime, 
[18:07:07.260]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.260]             version = "1.8"), class = "FutureResult")
[18:07:07.260]     }, finally = {
[18:07:07.260]         if (!identical(...future.workdir, getwd())) 
[18:07:07.260]             setwd(...future.workdir)
[18:07:07.260]         {
[18:07:07.260]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.260]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.260]             }
[18:07:07.260]             base::options(...future.oldOptions)
[18:07:07.260]             if (.Platform$OS.type == "windows") {
[18:07:07.260]                 old_names <- names(...future.oldEnvVars)
[18:07:07.260]                 envs <- base::Sys.getenv()
[18:07:07.260]                 names <- names(envs)
[18:07:07.260]                 common <- intersect(names, old_names)
[18:07:07.260]                 added <- setdiff(names, old_names)
[18:07:07.260]                 removed <- setdiff(old_names, names)
[18:07:07.260]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.260]                   envs[common]]
[18:07:07.260]                 NAMES <- toupper(changed)
[18:07:07.260]                 args <- list()
[18:07:07.260]                 for (kk in seq_along(NAMES)) {
[18:07:07.260]                   name <- changed[[kk]]
[18:07:07.260]                   NAME <- NAMES[[kk]]
[18:07:07.260]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.260]                     next
[18:07:07.260]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.260]                 }
[18:07:07.260]                 NAMES <- toupper(added)
[18:07:07.260]                 for (kk in seq_along(NAMES)) {
[18:07:07.260]                   name <- added[[kk]]
[18:07:07.260]                   NAME <- NAMES[[kk]]
[18:07:07.260]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.260]                     next
[18:07:07.260]                   args[[name]] <- ""
[18:07:07.260]                 }
[18:07:07.260]                 NAMES <- toupper(removed)
[18:07:07.260]                 for (kk in seq_along(NAMES)) {
[18:07:07.260]                   name <- removed[[kk]]
[18:07:07.260]                   NAME <- NAMES[[kk]]
[18:07:07.260]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.260]                     next
[18:07:07.260]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.260]                 }
[18:07:07.260]                 if (length(args) > 0) 
[18:07:07.260]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.260]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.260]             }
[18:07:07.260]             else {
[18:07:07.260]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.260]             }
[18:07:07.260]             {
[18:07:07.260]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.260]                   0L) {
[18:07:07.260]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.260]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.260]                   base::options(opts)
[18:07:07.260]                 }
[18:07:07.260]                 {
[18:07:07.260]                   {
[18:07:07.260]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.260]                     NULL
[18:07:07.260]                   }
[18:07:07.260]                   options(future.plan = NULL)
[18:07:07.260]                   if (is.na(NA_character_)) 
[18:07:07.260]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.260]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.260]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.260]                     .init = FALSE)
[18:07:07.260]                 }
[18:07:07.260]             }
[18:07:07.260]         }
[18:07:07.260]     })
[18:07:07.260]     if (TRUE) {
[18:07:07.260]         base::sink(type = "output", split = FALSE)
[18:07:07.260]         if (TRUE) {
[18:07:07.260]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.260]         }
[18:07:07.260]         else {
[18:07:07.260]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.260]         }
[18:07:07.260]         base::close(...future.stdout)
[18:07:07.260]         ...future.stdout <- NULL
[18:07:07.260]     }
[18:07:07.260]     ...future.result$conditions <- ...future.conditions
[18:07:07.260]     ...future.result$finished <- base::Sys.time()
[18:07:07.260]     ...future.result
[18:07:07.260] }
[18:07:07.265] requestCore(): workers = 2
[18:07:07.269] MulticoreFuture started
[18:07:07.270] - Launch lazy future ... done
[18:07:07.270] run() for ‘MulticoreFuture’ ... done
[18:07:07.272] result() for MulticoreFuture ...
[18:07:07.275] plan(): Setting new future strategy stack:
[18:07:07.275] List of future strategies:
[18:07:07.275] 1. sequential:
[18:07:07.275]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.275]    - tweaked: FALSE
[18:07:07.275]    - call: NULL
[18:07:07.278] plan(): nbrOfWorkers() = 1
[18:07:07.285] plan(): Setting new future strategy stack:
[18:07:07.286] List of future strategies:
[18:07:07.286] 1. multicore:
[18:07:07.286]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.286]    - tweaked: FALSE
[18:07:07.286]    - call: plan(strategy)
[18:07:07.295] plan(): nbrOfWorkers() = 2
[18:07:07.308] result() for MulticoreFuture ...
[18:07:07.308] result() for MulticoreFuture ... done
[18:07:07.309] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ session_uuid: chr "4efe37d9-98aa-ae0e-a74f-55151c1044bf"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331291
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:07"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[18:07:07.327] result() for MulticoreFuture ...
[18:07:07.327] result() for MulticoreFuture ... done
[18:07:07.327] result() for MulticoreFuture ...
[18:07:07.327] result() for MulticoreFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.02586126 secs (started 2024-11-21 18:07:07.27067)
version: 1.8
[18:07:07.329] getGlobalsAndPackages() ...
[18:07:07.329] Searching for globals...
[18:07:07.337] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.337] Searching for globals ... DONE
[18:07:07.337] Resolving globals: FALSE
[18:07:07.339] 
[18:07:07.339] - packages: [1] ‘utils’
[18:07:07.339] getGlobalsAndPackages() ... DONE
[18:07:07.340] run() for ‘Future’ ...
[18:07:07.340] - state: ‘created’
[18:07:07.340] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.348] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.348] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.349]   - Field: ‘label’
[18:07:07.349]   - Field: ‘local’
[18:07:07.349]   - Field: ‘owner’
[18:07:07.349]   - Field: ‘envir’
[18:07:07.350]   - Field: ‘workers’
[18:07:07.350]   - Field: ‘packages’
[18:07:07.351]   - Field: ‘gc’
[18:07:07.354]   - Field: ‘job’
[18:07:07.354]   - Field: ‘conditions’
[18:07:07.355]   - Field: ‘expr’
[18:07:07.355]   - Field: ‘uuid’
[18:07:07.355]   - Field: ‘seed’
[18:07:07.355]   - Field: ‘version’
[18:07:07.356]   - Field: ‘result’
[18:07:07.356]   - Field: ‘asynchronous’
[18:07:07.356]   - Field: ‘calls’
[18:07:07.356]   - Field: ‘globals’
[18:07:07.357]   - Field: ‘stdout’
[18:07:07.357]   - Field: ‘earlySignal’
[18:07:07.357]   - Field: ‘lazy’
[18:07:07.357]   - Field: ‘state’
[18:07:07.358] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.358] - Launch lazy future ...
[18:07:07.358] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.359] Packages needed by future strategies (n = 0): <none>
[18:07:07.360] {
[18:07:07.360]     {
[18:07:07.360]         {
[18:07:07.360]             ...future.startTime <- base::Sys.time()
[18:07:07.360]             {
[18:07:07.360]                 {
[18:07:07.360]                   {
[18:07:07.360]                     {
[18:07:07.360]                       {
[18:07:07.360]                         base::local({
[18:07:07.360]                           has_future <- base::requireNamespace("future", 
[18:07:07.360]                             quietly = TRUE)
[18:07:07.360]                           if (has_future) {
[18:07:07.360]                             ns <- base::getNamespace("future")
[18:07:07.360]                             version <- ns[[".package"]][["version"]]
[18:07:07.360]                             if (is.null(version)) 
[18:07:07.360]                               version <- utils::packageVersion("future")
[18:07:07.360]                           }
[18:07:07.360]                           else {
[18:07:07.360]                             version <- NULL
[18:07:07.360]                           }
[18:07:07.360]                           if (!has_future || version < "1.8.0") {
[18:07:07.360]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.360]                               "", base::R.version$version.string), 
[18:07:07.360]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:07.360]                                 base::R.version$platform, 8 * 
[18:07:07.360]                                   base::.Machine$sizeof.pointer), 
[18:07:07.360]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.360]                                 "release", "version")], collapse = " "), 
[18:07:07.360]                               hostname = base::Sys.info()[["nodename"]])
[18:07:07.360]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.360]                               info)
[18:07:07.360]                             info <- base::paste(info, collapse = "; ")
[18:07:07.360]                             if (!has_future) {
[18:07:07.360]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.360]                                 info)
[18:07:07.360]                             }
[18:07:07.360]                             else {
[18:07:07.360]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.360]                                 info, version)
[18:07:07.360]                             }
[18:07:07.360]                             base::stop(msg)
[18:07:07.360]                           }
[18:07:07.360]                         })
[18:07:07.360]                       }
[18:07:07.360]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.360]                       base::options(mc.cores = 1L)
[18:07:07.360]                     }
[18:07:07.360]                     base::local({
[18:07:07.360]                       for (pkg in "utils") {
[18:07:07.360]                         base::loadNamespace(pkg)
[18:07:07.360]                         base::library(pkg, character.only = TRUE)
[18:07:07.360]                       }
[18:07:07.360]                     })
[18:07:07.360]                   }
[18:07:07.360]                   ...future.strategy.old <- future::plan("list")
[18:07:07.360]                   options(future.plan = NULL)
[18:07:07.360]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.360]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.360]                 }
[18:07:07.360]                 ...future.workdir <- getwd()
[18:07:07.360]             }
[18:07:07.360]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.360]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.360]         }
[18:07:07.360]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.360]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.360]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.360]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.360]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.360]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.360]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.360]             base::names(...future.oldOptions))
[18:07:07.360]     }
[18:07:07.360]     if (FALSE) {
[18:07:07.360]     }
[18:07:07.360]     else {
[18:07:07.360]         if (TRUE) {
[18:07:07.360]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.360]                 open = "w")
[18:07:07.360]         }
[18:07:07.360]         else {
[18:07:07.360]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.360]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.360]         }
[18:07:07.360]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.360]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.360]             base::sink(type = "output", split = FALSE)
[18:07:07.360]             base::close(...future.stdout)
[18:07:07.360]         }, add = TRUE)
[18:07:07.360]     }
[18:07:07.360]     ...future.frame <- base::sys.nframe()
[18:07:07.360]     ...future.conditions <- base::list()
[18:07:07.360]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.360]     if (FALSE) {
[18:07:07.360]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.360]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.360]     }
[18:07:07.360]     ...future.result <- base::tryCatch({
[18:07:07.360]         base::withCallingHandlers({
[18:07:07.360]             ...future.value <- base::withVisible(base::local({
[18:07:07.360]                 withCallingHandlers({
[18:07:07.360]                   {
[18:07:07.360]                     print(1:50)
[18:07:07.360]                     str(1:50)
[18:07:07.360]                     cat(letters, sep = "-")
[18:07:07.360]                     cat(1:6, collapse = "\n")
[18:07:07.360]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.360]                     42L
[18:07:07.360]                   }
[18:07:07.360]                 }, immediateCondition = function(cond) {
[18:07:07.360]                   save_rds <- function (object, pathname, ...) 
[18:07:07.360]                   {
[18:07:07.360]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.360]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.360]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.360]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.360]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.360]                         fi_tmp[["mtime"]])
[18:07:07.360]                     }
[18:07:07.360]                     tryCatch({
[18:07:07.360]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.360]                     }, error = function(ex) {
[18:07:07.360]                       msg <- conditionMessage(ex)
[18:07:07.360]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.360]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.360]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.360]                         fi_tmp[["mtime"]], msg)
[18:07:07.360]                       ex$message <- msg
[18:07:07.360]                       stop(ex)
[18:07:07.360]                     })
[18:07:07.360]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.360]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.360]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.360]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.360]                       fi <- file.info(pathname)
[18:07:07.360]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.360]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.360]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.360]                         fi[["size"]], fi[["mtime"]])
[18:07:07.360]                       stop(msg)
[18:07:07.360]                     }
[18:07:07.360]                     invisible(pathname)
[18:07:07.360]                   }
[18:07:07.360]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.360]                     rootPath = tempdir()) 
[18:07:07.360]                   {
[18:07:07.360]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.360]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.360]                       tmpdir = path, fileext = ".rds")
[18:07:07.360]                     save_rds(obj, file)
[18:07:07.360]                   }
[18:07:07.360]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.360]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.360]                   {
[18:07:07.360]                     inherits <- base::inherits
[18:07:07.360]                     invokeRestart <- base::invokeRestart
[18:07:07.360]                     is.null <- base::is.null
[18:07:07.360]                     muffled <- FALSE
[18:07:07.360]                     if (inherits(cond, "message")) {
[18:07:07.360]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.360]                       if (muffled) 
[18:07:07.360]                         invokeRestart("muffleMessage")
[18:07:07.360]                     }
[18:07:07.360]                     else if (inherits(cond, "warning")) {
[18:07:07.360]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.360]                       if (muffled) 
[18:07:07.360]                         invokeRestart("muffleWarning")
[18:07:07.360]                     }
[18:07:07.360]                     else if (inherits(cond, "condition")) {
[18:07:07.360]                       if (!is.null(pattern)) {
[18:07:07.360]                         computeRestarts <- base::computeRestarts
[18:07:07.360]                         grepl <- base::grepl
[18:07:07.360]                         restarts <- computeRestarts(cond)
[18:07:07.360]                         for (restart in restarts) {
[18:07:07.360]                           name <- restart$name
[18:07:07.360]                           if (is.null(name)) 
[18:07:07.360]                             next
[18:07:07.360]                           if (!grepl(pattern, name)) 
[18:07:07.360]                             next
[18:07:07.360]                           invokeRestart(restart)
[18:07:07.360]                           muffled <- TRUE
[18:07:07.360]                           break
[18:07:07.360]                         }
[18:07:07.360]                       }
[18:07:07.360]                     }
[18:07:07.360]                     invisible(muffled)
[18:07:07.360]                   }
[18:07:07.360]                   muffleCondition(cond)
[18:07:07.360]                 })
[18:07:07.360]             }))
[18:07:07.360]             future::FutureResult(value = ...future.value$value, 
[18:07:07.360]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.360]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.360]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.360]                     ...future.globalenv.names))
[18:07:07.360]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.360]         }, condition = base::local({
[18:07:07.360]             c <- base::c
[18:07:07.360]             inherits <- base::inherits
[18:07:07.360]             invokeRestart <- base::invokeRestart
[18:07:07.360]             length <- base::length
[18:07:07.360]             list <- base::list
[18:07:07.360]             seq.int <- base::seq.int
[18:07:07.360]             signalCondition <- base::signalCondition
[18:07:07.360]             sys.calls <- base::sys.calls
[18:07:07.360]             `[[` <- base::`[[`
[18:07:07.360]             `+` <- base::`+`
[18:07:07.360]             `<<-` <- base::`<<-`
[18:07:07.360]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.360]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.360]                   3L)]
[18:07:07.360]             }
[18:07:07.360]             function(cond) {
[18:07:07.360]                 is_error <- inherits(cond, "error")
[18:07:07.360]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.360]                   NULL)
[18:07:07.360]                 if (is_error) {
[18:07:07.360]                   sessionInformation <- function() {
[18:07:07.360]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.360]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.360]                       search = base::search(), system = base::Sys.info())
[18:07:07.360]                   }
[18:07:07.360]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.360]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.360]                     cond$call), session = sessionInformation(), 
[18:07:07.360]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.360]                   signalCondition(cond)
[18:07:07.360]                 }
[18:07:07.360]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.360]                 "immediateCondition"))) {
[18:07:07.360]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.360]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.360]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.360]                   if (TRUE && !signal) {
[18:07:07.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.360]                     {
[18:07:07.360]                       inherits <- base::inherits
[18:07:07.360]                       invokeRestart <- base::invokeRestart
[18:07:07.360]                       is.null <- base::is.null
[18:07:07.360]                       muffled <- FALSE
[18:07:07.360]                       if (inherits(cond, "message")) {
[18:07:07.360]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.360]                         if (muffled) 
[18:07:07.360]                           invokeRestart("muffleMessage")
[18:07:07.360]                       }
[18:07:07.360]                       else if (inherits(cond, "warning")) {
[18:07:07.360]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.360]                         if (muffled) 
[18:07:07.360]                           invokeRestart("muffleWarning")
[18:07:07.360]                       }
[18:07:07.360]                       else if (inherits(cond, "condition")) {
[18:07:07.360]                         if (!is.null(pattern)) {
[18:07:07.360]                           computeRestarts <- base::computeRestarts
[18:07:07.360]                           grepl <- base::grepl
[18:07:07.360]                           restarts <- computeRestarts(cond)
[18:07:07.360]                           for (restart in restarts) {
[18:07:07.360]                             name <- restart$name
[18:07:07.360]                             if (is.null(name)) 
[18:07:07.360]                               next
[18:07:07.360]                             if (!grepl(pattern, name)) 
[18:07:07.360]                               next
[18:07:07.360]                             invokeRestart(restart)
[18:07:07.360]                             muffled <- TRUE
[18:07:07.360]                             break
[18:07:07.360]                           }
[18:07:07.360]                         }
[18:07:07.360]                       }
[18:07:07.360]                       invisible(muffled)
[18:07:07.360]                     }
[18:07:07.360]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.360]                   }
[18:07:07.360]                 }
[18:07:07.360]                 else {
[18:07:07.360]                   if (TRUE) {
[18:07:07.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.360]                     {
[18:07:07.360]                       inherits <- base::inherits
[18:07:07.360]                       invokeRestart <- base::invokeRestart
[18:07:07.360]                       is.null <- base::is.null
[18:07:07.360]                       muffled <- FALSE
[18:07:07.360]                       if (inherits(cond, "message")) {
[18:07:07.360]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.360]                         if (muffled) 
[18:07:07.360]                           invokeRestart("muffleMessage")
[18:07:07.360]                       }
[18:07:07.360]                       else if (inherits(cond, "warning")) {
[18:07:07.360]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.360]                         if (muffled) 
[18:07:07.360]                           invokeRestart("muffleWarning")
[18:07:07.360]                       }
[18:07:07.360]                       else if (inherits(cond, "condition")) {
[18:07:07.360]                         if (!is.null(pattern)) {
[18:07:07.360]                           computeRestarts <- base::computeRestarts
[18:07:07.360]                           grepl <- base::grepl
[18:07:07.360]                           restarts <- computeRestarts(cond)
[18:07:07.360]                           for (restart in restarts) {
[18:07:07.360]                             name <- restart$name
[18:07:07.360]                             if (is.null(name)) 
[18:07:07.360]                               next
[18:07:07.360]                             if (!grepl(pattern, name)) 
[18:07:07.360]                               next
[18:07:07.360]                             invokeRestart(restart)
[18:07:07.360]                             muffled <- TRUE
[18:07:07.360]                             break
[18:07:07.360]                           }
[18:07:07.360]                         }
[18:07:07.360]                       }
[18:07:07.360]                       invisible(muffled)
[18:07:07.360]                     }
[18:07:07.360]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.360]                   }
[18:07:07.360]                 }
[18:07:07.360]             }
[18:07:07.360]         }))
[18:07:07.360]     }, error = function(ex) {
[18:07:07.360]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.360]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.360]                 ...future.rng), started = ...future.startTime, 
[18:07:07.360]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.360]             version = "1.8"), class = "FutureResult")
[18:07:07.360]     }, finally = {
[18:07:07.360]         if (!identical(...future.workdir, getwd())) 
[18:07:07.360]             setwd(...future.workdir)
[18:07:07.360]         {
[18:07:07.360]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.360]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.360]             }
[18:07:07.360]             base::options(...future.oldOptions)
[18:07:07.360]             if (.Platform$OS.type == "windows") {
[18:07:07.360]                 old_names <- names(...future.oldEnvVars)
[18:07:07.360]                 envs <- base::Sys.getenv()
[18:07:07.360]                 names <- names(envs)
[18:07:07.360]                 common <- intersect(names, old_names)
[18:07:07.360]                 added <- setdiff(names, old_names)
[18:07:07.360]                 removed <- setdiff(old_names, names)
[18:07:07.360]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.360]                   envs[common]]
[18:07:07.360]                 NAMES <- toupper(changed)
[18:07:07.360]                 args <- list()
[18:07:07.360]                 for (kk in seq_along(NAMES)) {
[18:07:07.360]                   name <- changed[[kk]]
[18:07:07.360]                   NAME <- NAMES[[kk]]
[18:07:07.360]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.360]                     next
[18:07:07.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.360]                 }
[18:07:07.360]                 NAMES <- toupper(added)
[18:07:07.360]                 for (kk in seq_along(NAMES)) {
[18:07:07.360]                   name <- added[[kk]]
[18:07:07.360]                   NAME <- NAMES[[kk]]
[18:07:07.360]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.360]                     next
[18:07:07.360]                   args[[name]] <- ""
[18:07:07.360]                 }
[18:07:07.360]                 NAMES <- toupper(removed)
[18:07:07.360]                 for (kk in seq_along(NAMES)) {
[18:07:07.360]                   name <- removed[[kk]]
[18:07:07.360]                   NAME <- NAMES[[kk]]
[18:07:07.360]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.360]                     next
[18:07:07.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.360]                 }
[18:07:07.360]                 if (length(args) > 0) 
[18:07:07.360]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.360]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.360]             }
[18:07:07.360]             else {
[18:07:07.360]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.360]             }
[18:07:07.360]             {
[18:07:07.360]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.360]                   0L) {
[18:07:07.360]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.360]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.360]                   base::options(opts)
[18:07:07.360]                 }
[18:07:07.360]                 {
[18:07:07.360]                   {
[18:07:07.360]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.360]                     NULL
[18:07:07.360]                   }
[18:07:07.360]                   options(future.plan = NULL)
[18:07:07.360]                   if (is.na(NA_character_)) 
[18:07:07.360]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.360]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.360]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.360]                     .init = FALSE)
[18:07:07.360]                 }
[18:07:07.360]             }
[18:07:07.360]         }
[18:07:07.360]     })
[18:07:07.360]     if (TRUE) {
[18:07:07.360]         base::sink(type = "output", split = FALSE)
[18:07:07.360]         if (TRUE) {
[18:07:07.360]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.360]         }
[18:07:07.360]         else {
[18:07:07.360]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.360]         }
[18:07:07.360]         base::close(...future.stdout)
[18:07:07.360]         ...future.stdout <- NULL
[18:07:07.360]     }
[18:07:07.360]     ...future.result$conditions <- ...future.conditions
[18:07:07.360]     ...future.result$finished <- base::Sys.time()
[18:07:07.360]     ...future.result
[18:07:07.360] }
[18:07:07.365] requestCore(): workers = 2
[18:07:07.368] MulticoreFuture started
[18:07:07.369] - Launch lazy future ... done
[18:07:07.369] run() for ‘MulticoreFuture’ ... done
[18:07:07.371] result() for MulticoreFuture ...
[18:07:07.374] plan(): Setting new future strategy stack:
[18:07:07.374] List of future strategies:
[18:07:07.374] 1. sequential:
[18:07:07.374]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.374]    - tweaked: FALSE
[18:07:07.374]    - call: NULL
[18:07:07.376] plan(): nbrOfWorkers() = 1
[18:07:07.383] plan(): Setting new future strategy stack:
[18:07:07.383] List of future strategies:
[18:07:07.383] 1. multicore:
[18:07:07.383]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.383]    - tweaked: FALSE
[18:07:07.383]    - call: plan(strategy)
[18:07:07.393] plan(): nbrOfWorkers() = 2
[18:07:07.394] result() for MulticoreFuture ...
[18:07:07.395] result() for MulticoreFuture ... done
[18:07:07.395] result() for MulticoreFuture ... done
[18:07:07.396] result() for MulticoreFuture ...
[18:07:07.396] result() for MulticoreFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[18:07:07.397] getGlobalsAndPackages() ...
[18:07:07.397] Searching for globals...
[18:07:07.399] - globals found: [1] ‘print’
[18:07:07.399] Searching for globals ... DONE
[18:07:07.399] Resolving globals: FALSE
[18:07:07.400] 
[18:07:07.400] 
[18:07:07.400] getGlobalsAndPackages() ... DONE
[18:07:07.401] run() for ‘Future’ ...
[18:07:07.402] - state: ‘created’
[18:07:07.402] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.409] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.410] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.410]   - Field: ‘label’
[18:07:07.410]   - Field: ‘local’
[18:07:07.411]   - Field: ‘owner’
[18:07:07.411]   - Field: ‘envir’
[18:07:07.411]   - Field: ‘workers’
[18:07:07.411]   - Field: ‘packages’
[18:07:07.412]   - Field: ‘gc’
[18:07:07.412]   - Field: ‘job’
[18:07:07.412]   - Field: ‘conditions’
[18:07:07.412]   - Field: ‘expr’
[18:07:07.412]   - Field: ‘uuid’
[18:07:07.413]   - Field: ‘seed’
[18:07:07.413]   - Field: ‘version’
[18:07:07.413]   - Field: ‘result’
[18:07:07.413]   - Field: ‘asynchronous’
[18:07:07.414]   - Field: ‘calls’
[18:07:07.414]   - Field: ‘globals’
[18:07:07.414]   - Field: ‘stdout’
[18:07:07.414]   - Field: ‘earlySignal’
[18:07:07.415]   - Field: ‘lazy’
[18:07:07.415]   - Field: ‘state’
[18:07:07.415] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.415] - Launch lazy future ...
[18:07:07.416] Packages needed by the future expression (n = 0): <none>
[18:07:07.416] Packages needed by future strategies (n = 0): <none>
[18:07:07.417] {
[18:07:07.417]     {
[18:07:07.417]         {
[18:07:07.417]             ...future.startTime <- base::Sys.time()
[18:07:07.417]             {
[18:07:07.417]                 {
[18:07:07.417]                   {
[18:07:07.417]                     {
[18:07:07.417]                       base::local({
[18:07:07.417]                         has_future <- base::requireNamespace("future", 
[18:07:07.417]                           quietly = TRUE)
[18:07:07.417]                         if (has_future) {
[18:07:07.417]                           ns <- base::getNamespace("future")
[18:07:07.417]                           version <- ns[[".package"]][["version"]]
[18:07:07.417]                           if (is.null(version)) 
[18:07:07.417]                             version <- utils::packageVersion("future")
[18:07:07.417]                         }
[18:07:07.417]                         else {
[18:07:07.417]                           version <- NULL
[18:07:07.417]                         }
[18:07:07.417]                         if (!has_future || version < "1.8.0") {
[18:07:07.417]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.417]                             "", base::R.version$version.string), 
[18:07:07.417]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:07.417]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.417]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.417]                               "release", "version")], collapse = " "), 
[18:07:07.417]                             hostname = base::Sys.info()[["nodename"]])
[18:07:07.417]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.417]                             info)
[18:07:07.417]                           info <- base::paste(info, collapse = "; ")
[18:07:07.417]                           if (!has_future) {
[18:07:07.417]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.417]                               info)
[18:07:07.417]                           }
[18:07:07.417]                           else {
[18:07:07.417]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.417]                               info, version)
[18:07:07.417]                           }
[18:07:07.417]                           base::stop(msg)
[18:07:07.417]                         }
[18:07:07.417]                       })
[18:07:07.417]                     }
[18:07:07.417]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.417]                     base::options(mc.cores = 1L)
[18:07:07.417]                   }
[18:07:07.417]                   ...future.strategy.old <- future::plan("list")
[18:07:07.417]                   options(future.plan = NULL)
[18:07:07.417]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.417]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.417]                 }
[18:07:07.417]                 ...future.workdir <- getwd()
[18:07:07.417]             }
[18:07:07.417]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.417]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.417]         }
[18:07:07.417]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.417]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.417]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.417]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.417]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.417]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.417]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.417]             base::names(...future.oldOptions))
[18:07:07.417]     }
[18:07:07.417]     if (FALSE) {
[18:07:07.417]     }
[18:07:07.417]     else {
[18:07:07.417]         if (TRUE) {
[18:07:07.417]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.417]                 open = "w")
[18:07:07.417]         }
[18:07:07.417]         else {
[18:07:07.417]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.417]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.417]         }
[18:07:07.417]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.417]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.417]             base::sink(type = "output", split = FALSE)
[18:07:07.417]             base::close(...future.stdout)
[18:07:07.417]         }, add = TRUE)
[18:07:07.417]     }
[18:07:07.417]     ...future.frame <- base::sys.nframe()
[18:07:07.417]     ...future.conditions <- base::list()
[18:07:07.417]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.417]     if (FALSE) {
[18:07:07.417]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.417]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.417]     }
[18:07:07.417]     ...future.result <- base::tryCatch({
[18:07:07.417]         base::withCallingHandlers({
[18:07:07.417]             ...future.value <- base::withVisible(base::local({
[18:07:07.417]                 withCallingHandlers({
[18:07:07.417]                   print(42)
[18:07:07.417]                 }, immediateCondition = function(cond) {
[18:07:07.417]                   save_rds <- function (object, pathname, ...) 
[18:07:07.417]                   {
[18:07:07.417]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.417]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.417]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.417]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.417]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.417]                         fi_tmp[["mtime"]])
[18:07:07.417]                     }
[18:07:07.417]                     tryCatch({
[18:07:07.417]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.417]                     }, error = function(ex) {
[18:07:07.417]                       msg <- conditionMessage(ex)
[18:07:07.417]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.417]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.417]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.417]                         fi_tmp[["mtime"]], msg)
[18:07:07.417]                       ex$message <- msg
[18:07:07.417]                       stop(ex)
[18:07:07.417]                     })
[18:07:07.417]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.417]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.417]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.417]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.417]                       fi <- file.info(pathname)
[18:07:07.417]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.417]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.417]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.417]                         fi[["size"]], fi[["mtime"]])
[18:07:07.417]                       stop(msg)
[18:07:07.417]                     }
[18:07:07.417]                     invisible(pathname)
[18:07:07.417]                   }
[18:07:07.417]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.417]                     rootPath = tempdir()) 
[18:07:07.417]                   {
[18:07:07.417]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.417]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.417]                       tmpdir = path, fileext = ".rds")
[18:07:07.417]                     save_rds(obj, file)
[18:07:07.417]                   }
[18:07:07.417]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.417]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.417]                   {
[18:07:07.417]                     inherits <- base::inherits
[18:07:07.417]                     invokeRestart <- base::invokeRestart
[18:07:07.417]                     is.null <- base::is.null
[18:07:07.417]                     muffled <- FALSE
[18:07:07.417]                     if (inherits(cond, "message")) {
[18:07:07.417]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.417]                       if (muffled) 
[18:07:07.417]                         invokeRestart("muffleMessage")
[18:07:07.417]                     }
[18:07:07.417]                     else if (inherits(cond, "warning")) {
[18:07:07.417]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.417]                       if (muffled) 
[18:07:07.417]                         invokeRestart("muffleWarning")
[18:07:07.417]                     }
[18:07:07.417]                     else if (inherits(cond, "condition")) {
[18:07:07.417]                       if (!is.null(pattern)) {
[18:07:07.417]                         computeRestarts <- base::computeRestarts
[18:07:07.417]                         grepl <- base::grepl
[18:07:07.417]                         restarts <- computeRestarts(cond)
[18:07:07.417]                         for (restart in restarts) {
[18:07:07.417]                           name <- restart$name
[18:07:07.417]                           if (is.null(name)) 
[18:07:07.417]                             next
[18:07:07.417]                           if (!grepl(pattern, name)) 
[18:07:07.417]                             next
[18:07:07.417]                           invokeRestart(restart)
[18:07:07.417]                           muffled <- TRUE
[18:07:07.417]                           break
[18:07:07.417]                         }
[18:07:07.417]                       }
[18:07:07.417]                     }
[18:07:07.417]                     invisible(muffled)
[18:07:07.417]                   }
[18:07:07.417]                   muffleCondition(cond)
[18:07:07.417]                 })
[18:07:07.417]             }))
[18:07:07.417]             future::FutureResult(value = ...future.value$value, 
[18:07:07.417]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.417]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.417]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.417]                     ...future.globalenv.names))
[18:07:07.417]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.417]         }, condition = base::local({
[18:07:07.417]             c <- base::c
[18:07:07.417]             inherits <- base::inherits
[18:07:07.417]             invokeRestart <- base::invokeRestart
[18:07:07.417]             length <- base::length
[18:07:07.417]             list <- base::list
[18:07:07.417]             seq.int <- base::seq.int
[18:07:07.417]             signalCondition <- base::signalCondition
[18:07:07.417]             sys.calls <- base::sys.calls
[18:07:07.417]             `[[` <- base::`[[`
[18:07:07.417]             `+` <- base::`+`
[18:07:07.417]             `<<-` <- base::`<<-`
[18:07:07.417]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.417]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.417]                   3L)]
[18:07:07.417]             }
[18:07:07.417]             function(cond) {
[18:07:07.417]                 is_error <- inherits(cond, "error")
[18:07:07.417]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.417]                   NULL)
[18:07:07.417]                 if (is_error) {
[18:07:07.417]                   sessionInformation <- function() {
[18:07:07.417]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.417]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.417]                       search = base::search(), system = base::Sys.info())
[18:07:07.417]                   }
[18:07:07.417]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.417]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.417]                     cond$call), session = sessionInformation(), 
[18:07:07.417]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.417]                   signalCondition(cond)
[18:07:07.417]                 }
[18:07:07.417]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.417]                 "immediateCondition"))) {
[18:07:07.417]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.417]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.417]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.417]                   if (TRUE && !signal) {
[18:07:07.417]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.417]                     {
[18:07:07.417]                       inherits <- base::inherits
[18:07:07.417]                       invokeRestart <- base::invokeRestart
[18:07:07.417]                       is.null <- base::is.null
[18:07:07.417]                       muffled <- FALSE
[18:07:07.417]                       if (inherits(cond, "message")) {
[18:07:07.417]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.417]                         if (muffled) 
[18:07:07.417]                           invokeRestart("muffleMessage")
[18:07:07.417]                       }
[18:07:07.417]                       else if (inherits(cond, "warning")) {
[18:07:07.417]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.417]                         if (muffled) 
[18:07:07.417]                           invokeRestart("muffleWarning")
[18:07:07.417]                       }
[18:07:07.417]                       else if (inherits(cond, "condition")) {
[18:07:07.417]                         if (!is.null(pattern)) {
[18:07:07.417]                           computeRestarts <- base::computeRestarts
[18:07:07.417]                           grepl <- base::grepl
[18:07:07.417]                           restarts <- computeRestarts(cond)
[18:07:07.417]                           for (restart in restarts) {
[18:07:07.417]                             name <- restart$name
[18:07:07.417]                             if (is.null(name)) 
[18:07:07.417]                               next
[18:07:07.417]                             if (!grepl(pattern, name)) 
[18:07:07.417]                               next
[18:07:07.417]                             invokeRestart(restart)
[18:07:07.417]                             muffled <- TRUE
[18:07:07.417]                             break
[18:07:07.417]                           }
[18:07:07.417]                         }
[18:07:07.417]                       }
[18:07:07.417]                       invisible(muffled)
[18:07:07.417]                     }
[18:07:07.417]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.417]                   }
[18:07:07.417]                 }
[18:07:07.417]                 else {
[18:07:07.417]                   if (TRUE) {
[18:07:07.417]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.417]                     {
[18:07:07.417]                       inherits <- base::inherits
[18:07:07.417]                       invokeRestart <- base::invokeRestart
[18:07:07.417]                       is.null <- base::is.null
[18:07:07.417]                       muffled <- FALSE
[18:07:07.417]                       if (inherits(cond, "message")) {
[18:07:07.417]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.417]                         if (muffled) 
[18:07:07.417]                           invokeRestart("muffleMessage")
[18:07:07.417]                       }
[18:07:07.417]                       else if (inherits(cond, "warning")) {
[18:07:07.417]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.417]                         if (muffled) 
[18:07:07.417]                           invokeRestart("muffleWarning")
[18:07:07.417]                       }
[18:07:07.417]                       else if (inherits(cond, "condition")) {
[18:07:07.417]                         if (!is.null(pattern)) {
[18:07:07.417]                           computeRestarts <- base::computeRestarts
[18:07:07.417]                           grepl <- base::grepl
[18:07:07.417]                           restarts <- computeRestarts(cond)
[18:07:07.417]                           for (restart in restarts) {
[18:07:07.417]                             name <- restart$name
[18:07:07.417]                             if (is.null(name)) 
[18:07:07.417]                               next
[18:07:07.417]                             if (!grepl(pattern, name)) 
[18:07:07.417]                               next
[18:07:07.417]                             invokeRestart(restart)
[18:07:07.417]                             muffled <- TRUE
[18:07:07.417]                             break
[18:07:07.417]                           }
[18:07:07.417]                         }
[18:07:07.417]                       }
[18:07:07.417]                       invisible(muffled)
[18:07:07.417]                     }
[18:07:07.417]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.417]                   }
[18:07:07.417]                 }
[18:07:07.417]             }
[18:07:07.417]         }))
[18:07:07.417]     }, error = function(ex) {
[18:07:07.417]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.417]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.417]                 ...future.rng), started = ...future.startTime, 
[18:07:07.417]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.417]             version = "1.8"), class = "FutureResult")
[18:07:07.417]     }, finally = {
[18:07:07.417]         if (!identical(...future.workdir, getwd())) 
[18:07:07.417]             setwd(...future.workdir)
[18:07:07.417]         {
[18:07:07.417]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.417]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.417]             }
[18:07:07.417]             base::options(...future.oldOptions)
[18:07:07.417]             if (.Platform$OS.type == "windows") {
[18:07:07.417]                 old_names <- names(...future.oldEnvVars)
[18:07:07.417]                 envs <- base::Sys.getenv()
[18:07:07.417]                 names <- names(envs)
[18:07:07.417]                 common <- intersect(names, old_names)
[18:07:07.417]                 added <- setdiff(names, old_names)
[18:07:07.417]                 removed <- setdiff(old_names, names)
[18:07:07.417]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.417]                   envs[common]]
[18:07:07.417]                 NAMES <- toupper(changed)
[18:07:07.417]                 args <- list()
[18:07:07.417]                 for (kk in seq_along(NAMES)) {
[18:07:07.417]                   name <- changed[[kk]]
[18:07:07.417]                   NAME <- NAMES[[kk]]
[18:07:07.417]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.417]                     next
[18:07:07.417]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.417]                 }
[18:07:07.417]                 NAMES <- toupper(added)
[18:07:07.417]                 for (kk in seq_along(NAMES)) {
[18:07:07.417]                   name <- added[[kk]]
[18:07:07.417]                   NAME <- NAMES[[kk]]
[18:07:07.417]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.417]                     next
[18:07:07.417]                   args[[name]] <- ""
[18:07:07.417]                 }
[18:07:07.417]                 NAMES <- toupper(removed)
[18:07:07.417]                 for (kk in seq_along(NAMES)) {
[18:07:07.417]                   name <- removed[[kk]]
[18:07:07.417]                   NAME <- NAMES[[kk]]
[18:07:07.417]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.417]                     next
[18:07:07.417]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.417]                 }
[18:07:07.417]                 if (length(args) > 0) 
[18:07:07.417]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.417]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.417]             }
[18:07:07.417]             else {
[18:07:07.417]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.417]             }
[18:07:07.417]             {
[18:07:07.417]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.417]                   0L) {
[18:07:07.417]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.417]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.417]                   base::options(opts)
[18:07:07.417]                 }
[18:07:07.417]                 {
[18:07:07.417]                   {
[18:07:07.417]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.417]                     NULL
[18:07:07.417]                   }
[18:07:07.417]                   options(future.plan = NULL)
[18:07:07.417]                   if (is.na(NA_character_)) 
[18:07:07.417]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.417]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.417]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.417]                     .init = FALSE)
[18:07:07.417]                 }
[18:07:07.417]             }
[18:07:07.417]         }
[18:07:07.417]     })
[18:07:07.417]     if (TRUE) {
[18:07:07.417]         base::sink(type = "output", split = FALSE)
[18:07:07.417]         if (TRUE) {
[18:07:07.417]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.417]         }
[18:07:07.417]         else {
[18:07:07.417]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.417]         }
[18:07:07.417]         base::close(...future.stdout)
[18:07:07.417]         ...future.stdout <- NULL
[18:07:07.417]     }
[18:07:07.417]     ...future.result$conditions <- ...future.conditions
[18:07:07.417]     ...future.result$finished <- base::Sys.time()
[18:07:07.417]     ...future.result
[18:07:07.417] }
[18:07:07.422] requestCore(): workers = 2
[18:07:07.425] MulticoreFuture started
[18:07:07.426] - Launch lazy future ... done
[18:07:07.427] run() for ‘MulticoreFuture’ ... done
[18:07:07.427] result() for MulticoreFuture ...
[18:07:07.427] plan(): Setting new future strategy stack:
[18:07:07.428] List of future strategies:
[18:07:07.428] 1. sequential:
[18:07:07.428]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.428]    - tweaked: FALSE
[18:07:07.428]    - call: NULL
[18:07:07.430] plan(): nbrOfWorkers() = 1
[18:07:07.435] plan(): Setting new future strategy stack:
[18:07:07.435] List of future strategies:
[18:07:07.435] 1. multicore:
[18:07:07.435]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.435]    - tweaked: FALSE
[18:07:07.435]    - call: plan(strategy)
[18:07:07.445] plan(): nbrOfWorkers() = 2
[18:07:07.446] result() for MulticoreFuture ...
[18:07:07.447] result() for MulticoreFuture ... done
[18:07:07.447] result() for MulticoreFuture ... done
[18:07:07.447] result() for MulticoreFuture ...
[18:07:07.448] result() for MulticoreFuture ... done
[18:07:07.448] result() for MulticoreFuture ...
[18:07:07.448] result() for MulticoreFuture ... done
[1] 42
[18:07:07.449] result() for MulticoreFuture ...
[18:07:07.449] result() for MulticoreFuture ... done
- stdout = FALSE
[18:07:07.449] getGlobalsAndPackages() ...
[18:07:07.449] Searching for globals...
[18:07:07.458] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.458] Searching for globals ... DONE
[18:07:07.458] Resolving globals: FALSE
[18:07:07.460] 
[18:07:07.460] - packages: [1] ‘utils’
[18:07:07.460] getGlobalsAndPackages() ... DONE
[18:07:07.461] run() for ‘Future’ ...
[18:07:07.461] - state: ‘created’
[18:07:07.461] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.469] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.469] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.469]   - Field: ‘label’
[18:07:07.469]   - Field: ‘local’
[18:07:07.470]   - Field: ‘owner’
[18:07:07.470]   - Field: ‘envir’
[18:07:07.470]   - Field: ‘workers’
[18:07:07.470]   - Field: ‘packages’
[18:07:07.471]   - Field: ‘gc’
[18:07:07.471]   - Field: ‘job’
[18:07:07.471]   - Field: ‘conditions’
[18:07:07.471]   - Field: ‘expr’
[18:07:07.472]   - Field: ‘uuid’
[18:07:07.472]   - Field: ‘seed’
[18:07:07.472]   - Field: ‘version’
[18:07:07.472]   - Field: ‘result’
[18:07:07.473]   - Field: ‘asynchronous’
[18:07:07.473]   - Field: ‘calls’
[18:07:07.473]   - Field: ‘globals’
[18:07:07.473]   - Field: ‘stdout’
[18:07:07.473]   - Field: ‘earlySignal’
[18:07:07.474]   - Field: ‘lazy’
[18:07:07.474]   - Field: ‘state’
[18:07:07.474] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.474] - Launch lazy future ...
[18:07:07.475] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.475] Packages needed by future strategies (n = 0): <none>
[18:07:07.477] {
[18:07:07.477]     {
[18:07:07.477]         {
[18:07:07.477]             ...future.startTime <- base::Sys.time()
[18:07:07.477]             {
[18:07:07.477]                 {
[18:07:07.477]                   {
[18:07:07.477]                     {
[18:07:07.477]                       {
[18:07:07.477]                         base::local({
[18:07:07.477]                           has_future <- base::requireNamespace("future", 
[18:07:07.477]                             quietly = TRUE)
[18:07:07.477]                           if (has_future) {
[18:07:07.477]                             ns <- base::getNamespace("future")
[18:07:07.477]                             version <- ns[[".package"]][["version"]]
[18:07:07.477]                             if (is.null(version)) 
[18:07:07.477]                               version <- utils::packageVersion("future")
[18:07:07.477]                           }
[18:07:07.477]                           else {
[18:07:07.477]                             version <- NULL
[18:07:07.477]                           }
[18:07:07.477]                           if (!has_future || version < "1.8.0") {
[18:07:07.477]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.477]                               "", base::R.version$version.string), 
[18:07:07.477]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:07.477]                                 base::R.version$platform, 8 * 
[18:07:07.477]                                   base::.Machine$sizeof.pointer), 
[18:07:07.477]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.477]                                 "release", "version")], collapse = " "), 
[18:07:07.477]                               hostname = base::Sys.info()[["nodename"]])
[18:07:07.477]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.477]                               info)
[18:07:07.477]                             info <- base::paste(info, collapse = "; ")
[18:07:07.477]                             if (!has_future) {
[18:07:07.477]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.477]                                 info)
[18:07:07.477]                             }
[18:07:07.477]                             else {
[18:07:07.477]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.477]                                 info, version)
[18:07:07.477]                             }
[18:07:07.477]                             base::stop(msg)
[18:07:07.477]                           }
[18:07:07.477]                         })
[18:07:07.477]                       }
[18:07:07.477]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.477]                       base::options(mc.cores = 1L)
[18:07:07.477]                     }
[18:07:07.477]                     base::local({
[18:07:07.477]                       for (pkg in "utils") {
[18:07:07.477]                         base::loadNamespace(pkg)
[18:07:07.477]                         base::library(pkg, character.only = TRUE)
[18:07:07.477]                       }
[18:07:07.477]                     })
[18:07:07.477]                   }
[18:07:07.477]                   ...future.strategy.old <- future::plan("list")
[18:07:07.477]                   options(future.plan = NULL)
[18:07:07.477]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.477]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.477]                 }
[18:07:07.477]                 ...future.workdir <- getwd()
[18:07:07.477]             }
[18:07:07.477]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.477]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.477]         }
[18:07:07.477]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.477]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.477]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.477]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.477]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.477]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.477]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.477]             base::names(...future.oldOptions))
[18:07:07.477]     }
[18:07:07.477]     if (FALSE) {
[18:07:07.477]     }
[18:07:07.477]     else {
[18:07:07.477]         if (FALSE) {
[18:07:07.477]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.477]                 open = "w")
[18:07:07.477]         }
[18:07:07.477]         else {
[18:07:07.477]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.477]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.477]         }
[18:07:07.477]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.477]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.477]             base::sink(type = "output", split = FALSE)
[18:07:07.477]             base::close(...future.stdout)
[18:07:07.477]         }, add = TRUE)
[18:07:07.477]     }
[18:07:07.477]     ...future.frame <- base::sys.nframe()
[18:07:07.477]     ...future.conditions <- base::list()
[18:07:07.477]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.477]     if (FALSE) {
[18:07:07.477]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.477]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.477]     }
[18:07:07.477]     ...future.result <- base::tryCatch({
[18:07:07.477]         base::withCallingHandlers({
[18:07:07.477]             ...future.value <- base::withVisible(base::local({
[18:07:07.477]                 withCallingHandlers({
[18:07:07.477]                   {
[18:07:07.477]                     print(1:50)
[18:07:07.477]                     str(1:50)
[18:07:07.477]                     cat(letters, sep = "-")
[18:07:07.477]                     cat(1:6, collapse = "\n")
[18:07:07.477]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.477]                     42L
[18:07:07.477]                   }
[18:07:07.477]                 }, immediateCondition = function(cond) {
[18:07:07.477]                   save_rds <- function (object, pathname, ...) 
[18:07:07.477]                   {
[18:07:07.477]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.477]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.477]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.477]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.477]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.477]                         fi_tmp[["mtime"]])
[18:07:07.477]                     }
[18:07:07.477]                     tryCatch({
[18:07:07.477]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.477]                     }, error = function(ex) {
[18:07:07.477]                       msg <- conditionMessage(ex)
[18:07:07.477]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.477]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.477]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.477]                         fi_tmp[["mtime"]], msg)
[18:07:07.477]                       ex$message <- msg
[18:07:07.477]                       stop(ex)
[18:07:07.477]                     })
[18:07:07.477]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.477]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.477]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.477]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.477]                       fi <- file.info(pathname)
[18:07:07.477]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.477]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.477]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.477]                         fi[["size"]], fi[["mtime"]])
[18:07:07.477]                       stop(msg)
[18:07:07.477]                     }
[18:07:07.477]                     invisible(pathname)
[18:07:07.477]                   }
[18:07:07.477]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.477]                     rootPath = tempdir()) 
[18:07:07.477]                   {
[18:07:07.477]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.477]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.477]                       tmpdir = path, fileext = ".rds")
[18:07:07.477]                     save_rds(obj, file)
[18:07:07.477]                   }
[18:07:07.477]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.477]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.477]                   {
[18:07:07.477]                     inherits <- base::inherits
[18:07:07.477]                     invokeRestart <- base::invokeRestart
[18:07:07.477]                     is.null <- base::is.null
[18:07:07.477]                     muffled <- FALSE
[18:07:07.477]                     if (inherits(cond, "message")) {
[18:07:07.477]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.477]                       if (muffled) 
[18:07:07.477]                         invokeRestart("muffleMessage")
[18:07:07.477]                     }
[18:07:07.477]                     else if (inherits(cond, "warning")) {
[18:07:07.477]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.477]                       if (muffled) 
[18:07:07.477]                         invokeRestart("muffleWarning")
[18:07:07.477]                     }
[18:07:07.477]                     else if (inherits(cond, "condition")) {
[18:07:07.477]                       if (!is.null(pattern)) {
[18:07:07.477]                         computeRestarts <- base::computeRestarts
[18:07:07.477]                         grepl <- base::grepl
[18:07:07.477]                         restarts <- computeRestarts(cond)
[18:07:07.477]                         for (restart in restarts) {
[18:07:07.477]                           name <- restart$name
[18:07:07.477]                           if (is.null(name)) 
[18:07:07.477]                             next
[18:07:07.477]                           if (!grepl(pattern, name)) 
[18:07:07.477]                             next
[18:07:07.477]                           invokeRestart(restart)
[18:07:07.477]                           muffled <- TRUE
[18:07:07.477]                           break
[18:07:07.477]                         }
[18:07:07.477]                       }
[18:07:07.477]                     }
[18:07:07.477]                     invisible(muffled)
[18:07:07.477]                   }
[18:07:07.477]                   muffleCondition(cond)
[18:07:07.477]                 })
[18:07:07.477]             }))
[18:07:07.477]             future::FutureResult(value = ...future.value$value, 
[18:07:07.477]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.477]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.477]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.477]                     ...future.globalenv.names))
[18:07:07.477]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.477]         }, condition = base::local({
[18:07:07.477]             c <- base::c
[18:07:07.477]             inherits <- base::inherits
[18:07:07.477]             invokeRestart <- base::invokeRestart
[18:07:07.477]             length <- base::length
[18:07:07.477]             list <- base::list
[18:07:07.477]             seq.int <- base::seq.int
[18:07:07.477]             signalCondition <- base::signalCondition
[18:07:07.477]             sys.calls <- base::sys.calls
[18:07:07.477]             `[[` <- base::`[[`
[18:07:07.477]             `+` <- base::`+`
[18:07:07.477]             `<<-` <- base::`<<-`
[18:07:07.477]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.477]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.477]                   3L)]
[18:07:07.477]             }
[18:07:07.477]             function(cond) {
[18:07:07.477]                 is_error <- inherits(cond, "error")
[18:07:07.477]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.477]                   NULL)
[18:07:07.477]                 if (is_error) {
[18:07:07.477]                   sessionInformation <- function() {
[18:07:07.477]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.477]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.477]                       search = base::search(), system = base::Sys.info())
[18:07:07.477]                   }
[18:07:07.477]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.477]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.477]                     cond$call), session = sessionInformation(), 
[18:07:07.477]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.477]                   signalCondition(cond)
[18:07:07.477]                 }
[18:07:07.477]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.477]                 "immediateCondition"))) {
[18:07:07.477]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.477]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.477]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.477]                   if (TRUE && !signal) {
[18:07:07.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.477]                     {
[18:07:07.477]                       inherits <- base::inherits
[18:07:07.477]                       invokeRestart <- base::invokeRestart
[18:07:07.477]                       is.null <- base::is.null
[18:07:07.477]                       muffled <- FALSE
[18:07:07.477]                       if (inherits(cond, "message")) {
[18:07:07.477]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.477]                         if (muffled) 
[18:07:07.477]                           invokeRestart("muffleMessage")
[18:07:07.477]                       }
[18:07:07.477]                       else if (inherits(cond, "warning")) {
[18:07:07.477]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.477]                         if (muffled) 
[18:07:07.477]                           invokeRestart("muffleWarning")
[18:07:07.477]                       }
[18:07:07.477]                       else if (inherits(cond, "condition")) {
[18:07:07.477]                         if (!is.null(pattern)) {
[18:07:07.477]                           computeRestarts <- base::computeRestarts
[18:07:07.477]                           grepl <- base::grepl
[18:07:07.477]                           restarts <- computeRestarts(cond)
[18:07:07.477]                           for (restart in restarts) {
[18:07:07.477]                             name <- restart$name
[18:07:07.477]                             if (is.null(name)) 
[18:07:07.477]                               next
[18:07:07.477]                             if (!grepl(pattern, name)) 
[18:07:07.477]                               next
[18:07:07.477]                             invokeRestart(restart)
[18:07:07.477]                             muffled <- TRUE
[18:07:07.477]                             break
[18:07:07.477]                           }
[18:07:07.477]                         }
[18:07:07.477]                       }
[18:07:07.477]                       invisible(muffled)
[18:07:07.477]                     }
[18:07:07.477]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.477]                   }
[18:07:07.477]                 }
[18:07:07.477]                 else {
[18:07:07.477]                   if (TRUE) {
[18:07:07.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.477]                     {
[18:07:07.477]                       inherits <- base::inherits
[18:07:07.477]                       invokeRestart <- base::invokeRestart
[18:07:07.477]                       is.null <- base::is.null
[18:07:07.477]                       muffled <- FALSE
[18:07:07.477]                       if (inherits(cond, "message")) {
[18:07:07.477]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.477]                         if (muffled) 
[18:07:07.477]                           invokeRestart("muffleMessage")
[18:07:07.477]                       }
[18:07:07.477]                       else if (inherits(cond, "warning")) {
[18:07:07.477]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.477]                         if (muffled) 
[18:07:07.477]                           invokeRestart("muffleWarning")
[18:07:07.477]                       }
[18:07:07.477]                       else if (inherits(cond, "condition")) {
[18:07:07.477]                         if (!is.null(pattern)) {
[18:07:07.477]                           computeRestarts <- base::computeRestarts
[18:07:07.477]                           grepl <- base::grepl
[18:07:07.477]                           restarts <- computeRestarts(cond)
[18:07:07.477]                           for (restart in restarts) {
[18:07:07.477]                             name <- restart$name
[18:07:07.477]                             if (is.null(name)) 
[18:07:07.477]                               next
[18:07:07.477]                             if (!grepl(pattern, name)) 
[18:07:07.477]                               next
[18:07:07.477]                             invokeRestart(restart)
[18:07:07.477]                             muffled <- TRUE
[18:07:07.477]                             break
[18:07:07.477]                           }
[18:07:07.477]                         }
[18:07:07.477]                       }
[18:07:07.477]                       invisible(muffled)
[18:07:07.477]                     }
[18:07:07.477]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.477]                   }
[18:07:07.477]                 }
[18:07:07.477]             }
[18:07:07.477]         }))
[18:07:07.477]     }, error = function(ex) {
[18:07:07.477]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.477]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.477]                 ...future.rng), started = ...future.startTime, 
[18:07:07.477]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.477]             version = "1.8"), class = "FutureResult")
[18:07:07.477]     }, finally = {
[18:07:07.477]         if (!identical(...future.workdir, getwd())) 
[18:07:07.477]             setwd(...future.workdir)
[18:07:07.477]         {
[18:07:07.477]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.477]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.477]             }
[18:07:07.477]             base::options(...future.oldOptions)
[18:07:07.477]             if (.Platform$OS.type == "windows") {
[18:07:07.477]                 old_names <- names(...future.oldEnvVars)
[18:07:07.477]                 envs <- base::Sys.getenv()
[18:07:07.477]                 names <- names(envs)
[18:07:07.477]                 common <- intersect(names, old_names)
[18:07:07.477]                 added <- setdiff(names, old_names)
[18:07:07.477]                 removed <- setdiff(old_names, names)
[18:07:07.477]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.477]                   envs[common]]
[18:07:07.477]                 NAMES <- toupper(changed)
[18:07:07.477]                 args <- list()
[18:07:07.477]                 for (kk in seq_along(NAMES)) {
[18:07:07.477]                   name <- changed[[kk]]
[18:07:07.477]                   NAME <- NAMES[[kk]]
[18:07:07.477]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.477]                     next
[18:07:07.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.477]                 }
[18:07:07.477]                 NAMES <- toupper(added)
[18:07:07.477]                 for (kk in seq_along(NAMES)) {
[18:07:07.477]                   name <- added[[kk]]
[18:07:07.477]                   NAME <- NAMES[[kk]]
[18:07:07.477]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.477]                     next
[18:07:07.477]                   args[[name]] <- ""
[18:07:07.477]                 }
[18:07:07.477]                 NAMES <- toupper(removed)
[18:07:07.477]                 for (kk in seq_along(NAMES)) {
[18:07:07.477]                   name <- removed[[kk]]
[18:07:07.477]                   NAME <- NAMES[[kk]]
[18:07:07.477]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.477]                     next
[18:07:07.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.477]                 }
[18:07:07.477]                 if (length(args) > 0) 
[18:07:07.477]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.477]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.477]             }
[18:07:07.477]             else {
[18:07:07.477]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.477]             }
[18:07:07.477]             {
[18:07:07.477]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.477]                   0L) {
[18:07:07.477]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.477]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.477]                   base::options(opts)
[18:07:07.477]                 }
[18:07:07.477]                 {
[18:07:07.477]                   {
[18:07:07.477]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.477]                     NULL
[18:07:07.477]                   }
[18:07:07.477]                   options(future.plan = NULL)
[18:07:07.477]                   if (is.na(NA_character_)) 
[18:07:07.477]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.477]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.477]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.477]                     .init = FALSE)
[18:07:07.477]                 }
[18:07:07.477]             }
[18:07:07.477]         }
[18:07:07.477]     })
[18:07:07.477]     if (TRUE) {
[18:07:07.477]         base::sink(type = "output", split = FALSE)
[18:07:07.477]         if (FALSE) {
[18:07:07.477]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.477]         }
[18:07:07.477]         else {
[18:07:07.477]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.477]         }
[18:07:07.477]         base::close(...future.stdout)
[18:07:07.477]         ...future.stdout <- NULL
[18:07:07.477]     }
[18:07:07.477]     ...future.result$conditions <- ...future.conditions
[18:07:07.477]     ...future.result$finished <- base::Sys.time()
[18:07:07.477]     ...future.result
[18:07:07.477] }
[18:07:07.481] requestCore(): workers = 2
[18:07:07.485] MulticoreFuture started
[18:07:07.486] - Launch lazy future ... done
[18:07:07.486] run() for ‘MulticoreFuture’ ... done
[18:07:07.487] result() for MulticoreFuture ...
[18:07:07.487] plan(): Setting new future strategy stack:
[18:07:07.488] List of future strategies:
[18:07:07.488] 1. sequential:
[18:07:07.488]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.488]    - tweaked: FALSE
[18:07:07.488]    - call: NULL
[18:07:07.490] plan(): nbrOfWorkers() = 1
[18:07:07.506] plan(): Setting new future strategy stack:
[18:07:07.507] List of future strategies:
[18:07:07.507] 1. multicore:
[18:07:07.507]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.507]    - tweaked: FALSE
[18:07:07.507]    - call: plan(strategy)
[18:07:07.516] plan(): nbrOfWorkers() = 2
[18:07:07.520] result() for MulticoreFuture ...
[18:07:07.521] result() for MulticoreFuture ... done
[18:07:07.521] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ session_uuid: chr "86fe56bc-ab92-dd01-99ed-cb985fc47919"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331308
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:07"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[18:07:07.548] result() for MulticoreFuture ...
[18:07:07.548] result() for MulticoreFuture ... done
[18:07:07.549] result() for MulticoreFuture ...
[18:07:07.549] result() for MulticoreFuture ... done
[18:07:07.550] getGlobalsAndPackages() ...
[18:07:07.550] Searching for globals...
[18:07:07.558] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.559] Searching for globals ... DONE
[18:07:07.559] Resolving globals: FALSE
[18:07:07.560] 
[18:07:07.560] - packages: [1] ‘utils’
[18:07:07.561] getGlobalsAndPackages() ... DONE
[18:07:07.561] run() for ‘Future’ ...
[18:07:07.562] - state: ‘created’
[18:07:07.562] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.569] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.569] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.570]   - Field: ‘label’
[18:07:07.570]   - Field: ‘local’
[18:07:07.570]   - Field: ‘owner’
[18:07:07.570]   - Field: ‘envir’
[18:07:07.571]   - Field: ‘workers’
[18:07:07.571]   - Field: ‘packages’
[18:07:07.571]   - Field: ‘gc’
[18:07:07.571]   - Field: ‘job’
[18:07:07.572]   - Field: ‘conditions’
[18:07:07.572]   - Field: ‘expr’
[18:07:07.572]   - Field: ‘uuid’
[18:07:07.572]   - Field: ‘seed’
[18:07:07.573]   - Field: ‘version’
[18:07:07.573]   - Field: ‘result’
[18:07:07.573]   - Field: ‘asynchronous’
[18:07:07.573]   - Field: ‘calls’
[18:07:07.574]   - Field: ‘globals’
[18:07:07.574]   - Field: ‘stdout’
[18:07:07.574]   - Field: ‘earlySignal’
[18:07:07.574]   - Field: ‘lazy’
[18:07:07.574]   - Field: ‘state’
[18:07:07.575] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.575] - Launch lazy future ...
[18:07:07.576] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.576] Packages needed by future strategies (n = 0): <none>
[18:07:07.577] {
[18:07:07.577]     {
[18:07:07.577]         {
[18:07:07.577]             ...future.startTime <- base::Sys.time()
[18:07:07.577]             {
[18:07:07.577]                 {
[18:07:07.577]                   {
[18:07:07.577]                     {
[18:07:07.577]                       {
[18:07:07.577]                         base::local({
[18:07:07.577]                           has_future <- base::requireNamespace("future", 
[18:07:07.577]                             quietly = TRUE)
[18:07:07.577]                           if (has_future) {
[18:07:07.577]                             ns <- base::getNamespace("future")
[18:07:07.577]                             version <- ns[[".package"]][["version"]]
[18:07:07.577]                             if (is.null(version)) 
[18:07:07.577]                               version <- utils::packageVersion("future")
[18:07:07.577]                           }
[18:07:07.577]                           else {
[18:07:07.577]                             version <- NULL
[18:07:07.577]                           }
[18:07:07.577]                           if (!has_future || version < "1.8.0") {
[18:07:07.577]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.577]                               "", base::R.version$version.string), 
[18:07:07.577]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:07.577]                                 base::R.version$platform, 8 * 
[18:07:07.577]                                   base::.Machine$sizeof.pointer), 
[18:07:07.577]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.577]                                 "release", "version")], collapse = " "), 
[18:07:07.577]                               hostname = base::Sys.info()[["nodename"]])
[18:07:07.577]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.577]                               info)
[18:07:07.577]                             info <- base::paste(info, collapse = "; ")
[18:07:07.577]                             if (!has_future) {
[18:07:07.577]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.577]                                 info)
[18:07:07.577]                             }
[18:07:07.577]                             else {
[18:07:07.577]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.577]                                 info, version)
[18:07:07.577]                             }
[18:07:07.577]                             base::stop(msg)
[18:07:07.577]                           }
[18:07:07.577]                         })
[18:07:07.577]                       }
[18:07:07.577]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.577]                       base::options(mc.cores = 1L)
[18:07:07.577]                     }
[18:07:07.577]                     base::local({
[18:07:07.577]                       for (pkg in "utils") {
[18:07:07.577]                         base::loadNamespace(pkg)
[18:07:07.577]                         base::library(pkg, character.only = TRUE)
[18:07:07.577]                       }
[18:07:07.577]                     })
[18:07:07.577]                   }
[18:07:07.577]                   ...future.strategy.old <- future::plan("list")
[18:07:07.577]                   options(future.plan = NULL)
[18:07:07.577]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.577]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.577]                 }
[18:07:07.577]                 ...future.workdir <- getwd()
[18:07:07.577]             }
[18:07:07.577]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.577]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.577]         }
[18:07:07.577]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.577]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.577]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.577]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.577]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.577]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.577]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.577]             base::names(...future.oldOptions))
[18:07:07.577]     }
[18:07:07.577]     if (FALSE) {
[18:07:07.577]     }
[18:07:07.577]     else {
[18:07:07.577]         if (FALSE) {
[18:07:07.577]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.577]                 open = "w")
[18:07:07.577]         }
[18:07:07.577]         else {
[18:07:07.577]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.577]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.577]         }
[18:07:07.577]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.577]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.577]             base::sink(type = "output", split = FALSE)
[18:07:07.577]             base::close(...future.stdout)
[18:07:07.577]         }, add = TRUE)
[18:07:07.577]     }
[18:07:07.577]     ...future.frame <- base::sys.nframe()
[18:07:07.577]     ...future.conditions <- base::list()
[18:07:07.577]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.577]     if (FALSE) {
[18:07:07.577]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.577]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.577]     }
[18:07:07.577]     ...future.result <- base::tryCatch({
[18:07:07.577]         base::withCallingHandlers({
[18:07:07.577]             ...future.value <- base::withVisible(base::local({
[18:07:07.577]                 withCallingHandlers({
[18:07:07.577]                   {
[18:07:07.577]                     print(1:50)
[18:07:07.577]                     str(1:50)
[18:07:07.577]                     cat(letters, sep = "-")
[18:07:07.577]                     cat(1:6, collapse = "\n")
[18:07:07.577]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.577]                     42L
[18:07:07.577]                   }
[18:07:07.577]                 }, immediateCondition = function(cond) {
[18:07:07.577]                   save_rds <- function (object, pathname, ...) 
[18:07:07.577]                   {
[18:07:07.577]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.577]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.577]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.577]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.577]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.577]                         fi_tmp[["mtime"]])
[18:07:07.577]                     }
[18:07:07.577]                     tryCatch({
[18:07:07.577]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.577]                     }, error = function(ex) {
[18:07:07.577]                       msg <- conditionMessage(ex)
[18:07:07.577]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.577]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.577]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.577]                         fi_tmp[["mtime"]], msg)
[18:07:07.577]                       ex$message <- msg
[18:07:07.577]                       stop(ex)
[18:07:07.577]                     })
[18:07:07.577]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.577]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.577]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.577]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.577]                       fi <- file.info(pathname)
[18:07:07.577]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.577]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.577]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.577]                         fi[["size"]], fi[["mtime"]])
[18:07:07.577]                       stop(msg)
[18:07:07.577]                     }
[18:07:07.577]                     invisible(pathname)
[18:07:07.577]                   }
[18:07:07.577]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.577]                     rootPath = tempdir()) 
[18:07:07.577]                   {
[18:07:07.577]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.577]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.577]                       tmpdir = path, fileext = ".rds")
[18:07:07.577]                     save_rds(obj, file)
[18:07:07.577]                   }
[18:07:07.577]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.577]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.577]                   {
[18:07:07.577]                     inherits <- base::inherits
[18:07:07.577]                     invokeRestart <- base::invokeRestart
[18:07:07.577]                     is.null <- base::is.null
[18:07:07.577]                     muffled <- FALSE
[18:07:07.577]                     if (inherits(cond, "message")) {
[18:07:07.577]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.577]                       if (muffled) 
[18:07:07.577]                         invokeRestart("muffleMessage")
[18:07:07.577]                     }
[18:07:07.577]                     else if (inherits(cond, "warning")) {
[18:07:07.577]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.577]                       if (muffled) 
[18:07:07.577]                         invokeRestart("muffleWarning")
[18:07:07.577]                     }
[18:07:07.577]                     else if (inherits(cond, "condition")) {
[18:07:07.577]                       if (!is.null(pattern)) {
[18:07:07.577]                         computeRestarts <- base::computeRestarts
[18:07:07.577]                         grepl <- base::grepl
[18:07:07.577]                         restarts <- computeRestarts(cond)
[18:07:07.577]                         for (restart in restarts) {
[18:07:07.577]                           name <- restart$name
[18:07:07.577]                           if (is.null(name)) 
[18:07:07.577]                             next
[18:07:07.577]                           if (!grepl(pattern, name)) 
[18:07:07.577]                             next
[18:07:07.577]                           invokeRestart(restart)
[18:07:07.577]                           muffled <- TRUE
[18:07:07.577]                           break
[18:07:07.577]                         }
[18:07:07.577]                       }
[18:07:07.577]                     }
[18:07:07.577]                     invisible(muffled)
[18:07:07.577]                   }
[18:07:07.577]                   muffleCondition(cond)
[18:07:07.577]                 })
[18:07:07.577]             }))
[18:07:07.577]             future::FutureResult(value = ...future.value$value, 
[18:07:07.577]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.577]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.577]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.577]                     ...future.globalenv.names))
[18:07:07.577]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.577]         }, condition = base::local({
[18:07:07.577]             c <- base::c
[18:07:07.577]             inherits <- base::inherits
[18:07:07.577]             invokeRestart <- base::invokeRestart
[18:07:07.577]             length <- base::length
[18:07:07.577]             list <- base::list
[18:07:07.577]             seq.int <- base::seq.int
[18:07:07.577]             signalCondition <- base::signalCondition
[18:07:07.577]             sys.calls <- base::sys.calls
[18:07:07.577]             `[[` <- base::`[[`
[18:07:07.577]             `+` <- base::`+`
[18:07:07.577]             `<<-` <- base::`<<-`
[18:07:07.577]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.577]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.577]                   3L)]
[18:07:07.577]             }
[18:07:07.577]             function(cond) {
[18:07:07.577]                 is_error <- inherits(cond, "error")
[18:07:07.577]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.577]                   NULL)
[18:07:07.577]                 if (is_error) {
[18:07:07.577]                   sessionInformation <- function() {
[18:07:07.577]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.577]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.577]                       search = base::search(), system = base::Sys.info())
[18:07:07.577]                   }
[18:07:07.577]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.577]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.577]                     cond$call), session = sessionInformation(), 
[18:07:07.577]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.577]                   signalCondition(cond)
[18:07:07.577]                 }
[18:07:07.577]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.577]                 "immediateCondition"))) {
[18:07:07.577]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.577]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.577]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.577]                   if (TRUE && !signal) {
[18:07:07.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.577]                     {
[18:07:07.577]                       inherits <- base::inherits
[18:07:07.577]                       invokeRestart <- base::invokeRestart
[18:07:07.577]                       is.null <- base::is.null
[18:07:07.577]                       muffled <- FALSE
[18:07:07.577]                       if (inherits(cond, "message")) {
[18:07:07.577]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.577]                         if (muffled) 
[18:07:07.577]                           invokeRestart("muffleMessage")
[18:07:07.577]                       }
[18:07:07.577]                       else if (inherits(cond, "warning")) {
[18:07:07.577]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.577]                         if (muffled) 
[18:07:07.577]                           invokeRestart("muffleWarning")
[18:07:07.577]                       }
[18:07:07.577]                       else if (inherits(cond, "condition")) {
[18:07:07.577]                         if (!is.null(pattern)) {
[18:07:07.577]                           computeRestarts <- base::computeRestarts
[18:07:07.577]                           grepl <- base::grepl
[18:07:07.577]                           restarts <- computeRestarts(cond)
[18:07:07.577]                           for (restart in restarts) {
[18:07:07.577]                             name <- restart$name
[18:07:07.577]                             if (is.null(name)) 
[18:07:07.577]                               next
[18:07:07.577]                             if (!grepl(pattern, name)) 
[18:07:07.577]                               next
[18:07:07.577]                             invokeRestart(restart)
[18:07:07.577]                             muffled <- TRUE
[18:07:07.577]                             break
[18:07:07.577]                           }
[18:07:07.577]                         }
[18:07:07.577]                       }
[18:07:07.577]                       invisible(muffled)
[18:07:07.577]                     }
[18:07:07.577]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.577]                   }
[18:07:07.577]                 }
[18:07:07.577]                 else {
[18:07:07.577]                   if (TRUE) {
[18:07:07.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.577]                     {
[18:07:07.577]                       inherits <- base::inherits
[18:07:07.577]                       invokeRestart <- base::invokeRestart
[18:07:07.577]                       is.null <- base::is.null
[18:07:07.577]                       muffled <- FALSE
[18:07:07.577]                       if (inherits(cond, "message")) {
[18:07:07.577]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.577]                         if (muffled) 
[18:07:07.577]                           invokeRestart("muffleMessage")
[18:07:07.577]                       }
[18:07:07.577]                       else if (inherits(cond, "warning")) {
[18:07:07.577]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.577]                         if (muffled) 
[18:07:07.577]                           invokeRestart("muffleWarning")
[18:07:07.577]                       }
[18:07:07.577]                       else if (inherits(cond, "condition")) {
[18:07:07.577]                         if (!is.null(pattern)) {
[18:07:07.577]                           computeRestarts <- base::computeRestarts
[18:07:07.577]                           grepl <- base::grepl
[18:07:07.577]                           restarts <- computeRestarts(cond)
[18:07:07.577]                           for (restart in restarts) {
[18:07:07.577]                             name <- restart$name
[18:07:07.577]                             if (is.null(name)) 
[18:07:07.577]                               next
[18:07:07.577]                             if (!grepl(pattern, name)) 
[18:07:07.577]                               next
[18:07:07.577]                             invokeRestart(restart)
[18:07:07.577]                             muffled <- TRUE
[18:07:07.577]                             break
[18:07:07.577]                           }
[18:07:07.577]                         }
[18:07:07.577]                       }
[18:07:07.577]                       invisible(muffled)
[18:07:07.577]                     }
[18:07:07.577]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.577]                   }
[18:07:07.577]                 }
[18:07:07.577]             }
[18:07:07.577]         }))
[18:07:07.577]     }, error = function(ex) {
[18:07:07.577]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.577]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.577]                 ...future.rng), started = ...future.startTime, 
[18:07:07.577]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.577]             version = "1.8"), class = "FutureResult")
[18:07:07.577]     }, finally = {
[18:07:07.577]         if (!identical(...future.workdir, getwd())) 
[18:07:07.577]             setwd(...future.workdir)
[18:07:07.577]         {
[18:07:07.577]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.577]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.577]             }
[18:07:07.577]             base::options(...future.oldOptions)
[18:07:07.577]             if (.Platform$OS.type == "windows") {
[18:07:07.577]                 old_names <- names(...future.oldEnvVars)
[18:07:07.577]                 envs <- base::Sys.getenv()
[18:07:07.577]                 names <- names(envs)
[18:07:07.577]                 common <- intersect(names, old_names)
[18:07:07.577]                 added <- setdiff(names, old_names)
[18:07:07.577]                 removed <- setdiff(old_names, names)
[18:07:07.577]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.577]                   envs[common]]
[18:07:07.577]                 NAMES <- toupper(changed)
[18:07:07.577]                 args <- list()
[18:07:07.577]                 for (kk in seq_along(NAMES)) {
[18:07:07.577]                   name <- changed[[kk]]
[18:07:07.577]                   NAME <- NAMES[[kk]]
[18:07:07.577]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.577]                     next
[18:07:07.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.577]                 }
[18:07:07.577]                 NAMES <- toupper(added)
[18:07:07.577]                 for (kk in seq_along(NAMES)) {
[18:07:07.577]                   name <- added[[kk]]
[18:07:07.577]                   NAME <- NAMES[[kk]]
[18:07:07.577]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.577]                     next
[18:07:07.577]                   args[[name]] <- ""
[18:07:07.577]                 }
[18:07:07.577]                 NAMES <- toupper(removed)
[18:07:07.577]                 for (kk in seq_along(NAMES)) {
[18:07:07.577]                   name <- removed[[kk]]
[18:07:07.577]                   NAME <- NAMES[[kk]]
[18:07:07.577]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.577]                     next
[18:07:07.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.577]                 }
[18:07:07.577]                 if (length(args) > 0) 
[18:07:07.577]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.577]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.577]             }
[18:07:07.577]             else {
[18:07:07.577]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.577]             }
[18:07:07.577]             {
[18:07:07.577]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.577]                   0L) {
[18:07:07.577]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.577]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.577]                   base::options(opts)
[18:07:07.577]                 }
[18:07:07.577]                 {
[18:07:07.577]                   {
[18:07:07.577]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.577]                     NULL
[18:07:07.577]                   }
[18:07:07.577]                   options(future.plan = NULL)
[18:07:07.577]                   if (is.na(NA_character_)) 
[18:07:07.577]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.577]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.577]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.577]                     .init = FALSE)
[18:07:07.577]                 }
[18:07:07.577]             }
[18:07:07.577]         }
[18:07:07.577]     })
[18:07:07.577]     if (TRUE) {
[18:07:07.577]         base::sink(type = "output", split = FALSE)
[18:07:07.577]         if (FALSE) {
[18:07:07.577]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.577]         }
[18:07:07.577]         else {
[18:07:07.577]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.577]         }
[18:07:07.577]         base::close(...future.stdout)
[18:07:07.577]         ...future.stdout <- NULL
[18:07:07.577]     }
[18:07:07.577]     ...future.result$conditions <- ...future.conditions
[18:07:07.577]     ...future.result$finished <- base::Sys.time()
[18:07:07.577]     ...future.result
[18:07:07.577] }
[18:07:07.582] requestCore(): workers = 2
[18:07:07.587] MulticoreFuture started
[18:07:07.588] - Launch lazy future ... done
[18:07:07.589] run() for ‘MulticoreFuture’ ... done
[18:07:07.592] result() for MulticoreFuture ...
[18:07:07.593] plan(): Setting new future strategy stack:
[18:07:07.593] List of future strategies:
[18:07:07.593] 1. sequential:
[18:07:07.593]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.593]    - tweaked: FALSE
[18:07:07.593]    - call: NULL
[18:07:07.596] plan(): nbrOfWorkers() = 1
[18:07:07.604] plan(): Setting new future strategy stack:
[18:07:07.604] List of future strategies:
[18:07:07.604] 1. multicore:
[18:07:07.604]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.604]    - tweaked: FALSE
[18:07:07.604]    - call: plan(strategy)
[18:07:07.614] plan(): nbrOfWorkers() = 2
[18:07:07.615] result() for MulticoreFuture ...
[18:07:07.616] result() for MulticoreFuture ... done
[18:07:07.617] result() for MulticoreFuture ... done
[18:07:07.618] result() for MulticoreFuture ...
[18:07:07.619] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[18:07:07.621] getGlobalsAndPackages() ...
[18:07:07.621] Searching for globals...
[18:07:07.623] - globals found: [1] ‘print’
[18:07:07.623] Searching for globals ... DONE
[18:07:07.623] Resolving globals: FALSE
[18:07:07.624] 
[18:07:07.624] 
[18:07:07.625] getGlobalsAndPackages() ... DONE
[18:07:07.625] run() for ‘Future’ ...
[18:07:07.626] - state: ‘created’
[18:07:07.626] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.633] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.634] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.634]   - Field: ‘label’
[18:07:07.634]   - Field: ‘local’
[18:07:07.635]   - Field: ‘owner’
[18:07:07.635]   - Field: ‘envir’
[18:07:07.635]   - Field: ‘workers’
[18:07:07.635]   - Field: ‘packages’
[18:07:07.636]   - Field: ‘gc’
[18:07:07.636]   - Field: ‘job’
[18:07:07.636]   - Field: ‘conditions’
[18:07:07.636]   - Field: ‘expr’
[18:07:07.637]   - Field: ‘uuid’
[18:07:07.637]   - Field: ‘seed’
[18:07:07.637]   - Field: ‘version’
[18:07:07.637]   - Field: ‘result’
[18:07:07.638]   - Field: ‘asynchronous’
[18:07:07.641]   - Field: ‘calls’
[18:07:07.641]   - Field: ‘globals’
[18:07:07.642]   - Field: ‘stdout’
[18:07:07.642]   - Field: ‘earlySignal’
[18:07:07.642]   - Field: ‘lazy’
[18:07:07.642]   - Field: ‘state’
[18:07:07.643] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.643] - Launch lazy future ...
[18:07:07.644] Packages needed by the future expression (n = 0): <none>
[18:07:07.644] Packages needed by future strategies (n = 0): <none>
[18:07:07.646] {
[18:07:07.646]     {
[18:07:07.646]         {
[18:07:07.646]             ...future.startTime <- base::Sys.time()
[18:07:07.646]             {
[18:07:07.646]                 {
[18:07:07.646]                   {
[18:07:07.646]                     {
[18:07:07.646]                       base::local({
[18:07:07.646]                         has_future <- base::requireNamespace("future", 
[18:07:07.646]                           quietly = TRUE)
[18:07:07.646]                         if (has_future) {
[18:07:07.646]                           ns <- base::getNamespace("future")
[18:07:07.646]                           version <- ns[[".package"]][["version"]]
[18:07:07.646]                           if (is.null(version)) 
[18:07:07.646]                             version <- utils::packageVersion("future")
[18:07:07.646]                         }
[18:07:07.646]                         else {
[18:07:07.646]                           version <- NULL
[18:07:07.646]                         }
[18:07:07.646]                         if (!has_future || version < "1.8.0") {
[18:07:07.646]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.646]                             "", base::R.version$version.string), 
[18:07:07.646]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:07.646]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.646]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.646]                               "release", "version")], collapse = " "), 
[18:07:07.646]                             hostname = base::Sys.info()[["nodename"]])
[18:07:07.646]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.646]                             info)
[18:07:07.646]                           info <- base::paste(info, collapse = "; ")
[18:07:07.646]                           if (!has_future) {
[18:07:07.646]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.646]                               info)
[18:07:07.646]                           }
[18:07:07.646]                           else {
[18:07:07.646]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.646]                               info, version)
[18:07:07.646]                           }
[18:07:07.646]                           base::stop(msg)
[18:07:07.646]                         }
[18:07:07.646]                       })
[18:07:07.646]                     }
[18:07:07.646]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.646]                     base::options(mc.cores = 1L)
[18:07:07.646]                   }
[18:07:07.646]                   ...future.strategy.old <- future::plan("list")
[18:07:07.646]                   options(future.plan = NULL)
[18:07:07.646]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.646]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.646]                 }
[18:07:07.646]                 ...future.workdir <- getwd()
[18:07:07.646]             }
[18:07:07.646]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.646]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.646]         }
[18:07:07.646]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.646]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.646]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.646]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.646]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.646]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.646]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.646]             base::names(...future.oldOptions))
[18:07:07.646]     }
[18:07:07.646]     if (FALSE) {
[18:07:07.646]     }
[18:07:07.646]     else {
[18:07:07.646]         if (TRUE) {
[18:07:07.646]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.646]                 open = "w")
[18:07:07.646]         }
[18:07:07.646]         else {
[18:07:07.646]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.646]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.646]         }
[18:07:07.646]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.646]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.646]             base::sink(type = "output", split = FALSE)
[18:07:07.646]             base::close(...future.stdout)
[18:07:07.646]         }, add = TRUE)
[18:07:07.646]     }
[18:07:07.646]     ...future.frame <- base::sys.nframe()
[18:07:07.646]     ...future.conditions <- base::list()
[18:07:07.646]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.646]     if (FALSE) {
[18:07:07.646]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.646]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.646]     }
[18:07:07.646]     ...future.result <- base::tryCatch({
[18:07:07.646]         base::withCallingHandlers({
[18:07:07.646]             ...future.value <- base::withVisible(base::local({
[18:07:07.646]                 withCallingHandlers({
[18:07:07.646]                   print(42)
[18:07:07.646]                 }, immediateCondition = function(cond) {
[18:07:07.646]                   save_rds <- function (object, pathname, ...) 
[18:07:07.646]                   {
[18:07:07.646]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.646]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.646]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.646]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.646]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.646]                         fi_tmp[["mtime"]])
[18:07:07.646]                     }
[18:07:07.646]                     tryCatch({
[18:07:07.646]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.646]                     }, error = function(ex) {
[18:07:07.646]                       msg <- conditionMessage(ex)
[18:07:07.646]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.646]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.646]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.646]                         fi_tmp[["mtime"]], msg)
[18:07:07.646]                       ex$message <- msg
[18:07:07.646]                       stop(ex)
[18:07:07.646]                     })
[18:07:07.646]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.646]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.646]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.646]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.646]                       fi <- file.info(pathname)
[18:07:07.646]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.646]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.646]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.646]                         fi[["size"]], fi[["mtime"]])
[18:07:07.646]                       stop(msg)
[18:07:07.646]                     }
[18:07:07.646]                     invisible(pathname)
[18:07:07.646]                   }
[18:07:07.646]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.646]                     rootPath = tempdir()) 
[18:07:07.646]                   {
[18:07:07.646]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.646]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.646]                       tmpdir = path, fileext = ".rds")
[18:07:07.646]                     save_rds(obj, file)
[18:07:07.646]                   }
[18:07:07.646]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.646]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.646]                   {
[18:07:07.646]                     inherits <- base::inherits
[18:07:07.646]                     invokeRestart <- base::invokeRestart
[18:07:07.646]                     is.null <- base::is.null
[18:07:07.646]                     muffled <- FALSE
[18:07:07.646]                     if (inherits(cond, "message")) {
[18:07:07.646]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.646]                       if (muffled) 
[18:07:07.646]                         invokeRestart("muffleMessage")
[18:07:07.646]                     }
[18:07:07.646]                     else if (inherits(cond, "warning")) {
[18:07:07.646]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.646]                       if (muffled) 
[18:07:07.646]                         invokeRestart("muffleWarning")
[18:07:07.646]                     }
[18:07:07.646]                     else if (inherits(cond, "condition")) {
[18:07:07.646]                       if (!is.null(pattern)) {
[18:07:07.646]                         computeRestarts <- base::computeRestarts
[18:07:07.646]                         grepl <- base::grepl
[18:07:07.646]                         restarts <- computeRestarts(cond)
[18:07:07.646]                         for (restart in restarts) {
[18:07:07.646]                           name <- restart$name
[18:07:07.646]                           if (is.null(name)) 
[18:07:07.646]                             next
[18:07:07.646]                           if (!grepl(pattern, name)) 
[18:07:07.646]                             next
[18:07:07.646]                           invokeRestart(restart)
[18:07:07.646]                           muffled <- TRUE
[18:07:07.646]                           break
[18:07:07.646]                         }
[18:07:07.646]                       }
[18:07:07.646]                     }
[18:07:07.646]                     invisible(muffled)
[18:07:07.646]                   }
[18:07:07.646]                   muffleCondition(cond)
[18:07:07.646]                 })
[18:07:07.646]             }))
[18:07:07.646]             future::FutureResult(value = ...future.value$value, 
[18:07:07.646]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.646]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.646]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.646]                     ...future.globalenv.names))
[18:07:07.646]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.646]         }, condition = base::local({
[18:07:07.646]             c <- base::c
[18:07:07.646]             inherits <- base::inherits
[18:07:07.646]             invokeRestart <- base::invokeRestart
[18:07:07.646]             length <- base::length
[18:07:07.646]             list <- base::list
[18:07:07.646]             seq.int <- base::seq.int
[18:07:07.646]             signalCondition <- base::signalCondition
[18:07:07.646]             sys.calls <- base::sys.calls
[18:07:07.646]             `[[` <- base::`[[`
[18:07:07.646]             `+` <- base::`+`
[18:07:07.646]             `<<-` <- base::`<<-`
[18:07:07.646]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.646]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.646]                   3L)]
[18:07:07.646]             }
[18:07:07.646]             function(cond) {
[18:07:07.646]                 is_error <- inherits(cond, "error")
[18:07:07.646]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.646]                   NULL)
[18:07:07.646]                 if (is_error) {
[18:07:07.646]                   sessionInformation <- function() {
[18:07:07.646]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.646]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.646]                       search = base::search(), system = base::Sys.info())
[18:07:07.646]                   }
[18:07:07.646]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.646]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.646]                     cond$call), session = sessionInformation(), 
[18:07:07.646]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.646]                   signalCondition(cond)
[18:07:07.646]                 }
[18:07:07.646]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.646]                 "immediateCondition"))) {
[18:07:07.646]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.646]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.646]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.646]                   if (TRUE && !signal) {
[18:07:07.646]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.646]                     {
[18:07:07.646]                       inherits <- base::inherits
[18:07:07.646]                       invokeRestart <- base::invokeRestart
[18:07:07.646]                       is.null <- base::is.null
[18:07:07.646]                       muffled <- FALSE
[18:07:07.646]                       if (inherits(cond, "message")) {
[18:07:07.646]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.646]                         if (muffled) 
[18:07:07.646]                           invokeRestart("muffleMessage")
[18:07:07.646]                       }
[18:07:07.646]                       else if (inherits(cond, "warning")) {
[18:07:07.646]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.646]                         if (muffled) 
[18:07:07.646]                           invokeRestart("muffleWarning")
[18:07:07.646]                       }
[18:07:07.646]                       else if (inherits(cond, "condition")) {
[18:07:07.646]                         if (!is.null(pattern)) {
[18:07:07.646]                           computeRestarts <- base::computeRestarts
[18:07:07.646]                           grepl <- base::grepl
[18:07:07.646]                           restarts <- computeRestarts(cond)
[18:07:07.646]                           for (restart in restarts) {
[18:07:07.646]                             name <- restart$name
[18:07:07.646]                             if (is.null(name)) 
[18:07:07.646]                               next
[18:07:07.646]                             if (!grepl(pattern, name)) 
[18:07:07.646]                               next
[18:07:07.646]                             invokeRestart(restart)
[18:07:07.646]                             muffled <- TRUE
[18:07:07.646]                             break
[18:07:07.646]                           }
[18:07:07.646]                         }
[18:07:07.646]                       }
[18:07:07.646]                       invisible(muffled)
[18:07:07.646]                     }
[18:07:07.646]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.646]                   }
[18:07:07.646]                 }
[18:07:07.646]                 else {
[18:07:07.646]                   if (TRUE) {
[18:07:07.646]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.646]                     {
[18:07:07.646]                       inherits <- base::inherits
[18:07:07.646]                       invokeRestart <- base::invokeRestart
[18:07:07.646]                       is.null <- base::is.null
[18:07:07.646]                       muffled <- FALSE
[18:07:07.646]                       if (inherits(cond, "message")) {
[18:07:07.646]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.646]                         if (muffled) 
[18:07:07.646]                           invokeRestart("muffleMessage")
[18:07:07.646]                       }
[18:07:07.646]                       else if (inherits(cond, "warning")) {
[18:07:07.646]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.646]                         if (muffled) 
[18:07:07.646]                           invokeRestart("muffleWarning")
[18:07:07.646]                       }
[18:07:07.646]                       else if (inherits(cond, "condition")) {
[18:07:07.646]                         if (!is.null(pattern)) {
[18:07:07.646]                           computeRestarts <- base::computeRestarts
[18:07:07.646]                           grepl <- base::grepl
[18:07:07.646]                           restarts <- computeRestarts(cond)
[18:07:07.646]                           for (restart in restarts) {
[18:07:07.646]                             name <- restart$name
[18:07:07.646]                             if (is.null(name)) 
[18:07:07.646]                               next
[18:07:07.646]                             if (!grepl(pattern, name)) 
[18:07:07.646]                               next
[18:07:07.646]                             invokeRestart(restart)
[18:07:07.646]                             muffled <- TRUE
[18:07:07.646]                             break
[18:07:07.646]                           }
[18:07:07.646]                         }
[18:07:07.646]                       }
[18:07:07.646]                       invisible(muffled)
[18:07:07.646]                     }
[18:07:07.646]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.646]                   }
[18:07:07.646]                 }
[18:07:07.646]             }
[18:07:07.646]         }))
[18:07:07.646]     }, error = function(ex) {
[18:07:07.646]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.646]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.646]                 ...future.rng), started = ...future.startTime, 
[18:07:07.646]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.646]             version = "1.8"), class = "FutureResult")
[18:07:07.646]     }, finally = {
[18:07:07.646]         if (!identical(...future.workdir, getwd())) 
[18:07:07.646]             setwd(...future.workdir)
[18:07:07.646]         {
[18:07:07.646]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.646]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.646]             }
[18:07:07.646]             base::options(...future.oldOptions)
[18:07:07.646]             if (.Platform$OS.type == "windows") {
[18:07:07.646]                 old_names <- names(...future.oldEnvVars)
[18:07:07.646]                 envs <- base::Sys.getenv()
[18:07:07.646]                 names <- names(envs)
[18:07:07.646]                 common <- intersect(names, old_names)
[18:07:07.646]                 added <- setdiff(names, old_names)
[18:07:07.646]                 removed <- setdiff(old_names, names)
[18:07:07.646]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.646]                   envs[common]]
[18:07:07.646]                 NAMES <- toupper(changed)
[18:07:07.646]                 args <- list()
[18:07:07.646]                 for (kk in seq_along(NAMES)) {
[18:07:07.646]                   name <- changed[[kk]]
[18:07:07.646]                   NAME <- NAMES[[kk]]
[18:07:07.646]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.646]                     next
[18:07:07.646]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.646]                 }
[18:07:07.646]                 NAMES <- toupper(added)
[18:07:07.646]                 for (kk in seq_along(NAMES)) {
[18:07:07.646]                   name <- added[[kk]]
[18:07:07.646]                   NAME <- NAMES[[kk]]
[18:07:07.646]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.646]                     next
[18:07:07.646]                   args[[name]] <- ""
[18:07:07.646]                 }
[18:07:07.646]                 NAMES <- toupper(removed)
[18:07:07.646]                 for (kk in seq_along(NAMES)) {
[18:07:07.646]                   name <- removed[[kk]]
[18:07:07.646]                   NAME <- NAMES[[kk]]
[18:07:07.646]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.646]                     next
[18:07:07.646]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.646]                 }
[18:07:07.646]                 if (length(args) > 0) 
[18:07:07.646]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.646]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.646]             }
[18:07:07.646]             else {
[18:07:07.646]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.646]             }
[18:07:07.646]             {
[18:07:07.646]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.646]                   0L) {
[18:07:07.646]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.646]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.646]                   base::options(opts)
[18:07:07.646]                 }
[18:07:07.646]                 {
[18:07:07.646]                   {
[18:07:07.646]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.646]                     NULL
[18:07:07.646]                   }
[18:07:07.646]                   options(future.plan = NULL)
[18:07:07.646]                   if (is.na(NA_character_)) 
[18:07:07.646]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.646]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.646]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.646]                     .init = FALSE)
[18:07:07.646]                 }
[18:07:07.646]             }
[18:07:07.646]         }
[18:07:07.646]     })
[18:07:07.646]     if (TRUE) {
[18:07:07.646]         base::sink(type = "output", split = FALSE)
[18:07:07.646]         if (TRUE) {
[18:07:07.646]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.646]         }
[18:07:07.646]         else {
[18:07:07.646]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.646]         }
[18:07:07.646]         base::close(...future.stdout)
[18:07:07.646]         ...future.stdout <- NULL
[18:07:07.646]     }
[18:07:07.646]     ...future.result$conditions <- ...future.conditions
[18:07:07.646]     ...future.result$finished <- base::Sys.time()
[18:07:07.646]     ...future.result
[18:07:07.646] }
[18:07:07.651] requestCore(): workers = 2
[18:07:07.655] MulticoreFuture started
[18:07:07.655] - Launch lazy future ... done
[18:07:07.659] run() for ‘MulticoreFuture’ ... done
[18:07:07.659] result() for MulticoreFuture ...
[18:07:07.661] plan(): Setting new future strategy stack:
[18:07:07.662] List of future strategies:
[18:07:07.662] 1. sequential:
[18:07:07.662]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.662]    - tweaked: FALSE
[18:07:07.662]    - call: NULL
[18:07:07.664] plan(): nbrOfWorkers() = 1
[18:07:07.669] plan(): Setting new future strategy stack:
[18:07:07.670] List of future strategies:
[18:07:07.670] 1. multicore:
[18:07:07.670]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.670]    - tweaked: FALSE
[18:07:07.670]    - call: plan(strategy)
[18:07:07.680] plan(): nbrOfWorkers() = 2
[18:07:07.681] result() for MulticoreFuture ...
[18:07:07.682] result() for MulticoreFuture ... done
[18:07:07.682] result() for MulticoreFuture ... done
[18:07:07.682] result() for MulticoreFuture ...
[18:07:07.683] result() for MulticoreFuture ... done
[18:07:07.686] result() for MulticoreFuture ...
[18:07:07.686] result() for MulticoreFuture ... done
[1] 42
[18:07:07.687] result() for MulticoreFuture ...
[18:07:07.687] result() for MulticoreFuture ... done
- stdout = NA
[18:07:07.688] getGlobalsAndPackages() ...
[18:07:07.688] Searching for globals...
[18:07:07.697] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.697] Searching for globals ... DONE
[18:07:07.698] Resolving globals: FALSE
[18:07:07.699] 
[18:07:07.699] - packages: [1] ‘utils’
[18:07:07.699] getGlobalsAndPackages() ... DONE
[18:07:07.700] run() for ‘Future’ ...
[18:07:07.700] - state: ‘created’
[18:07:07.701] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.708] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.709] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.709]   - Field: ‘label’
[18:07:07.709]   - Field: ‘local’
[18:07:07.709]   - Field: ‘owner’
[18:07:07.710]   - Field: ‘envir’
[18:07:07.710]   - Field: ‘workers’
[18:07:07.710]   - Field: ‘packages’
[18:07:07.711]   - Field: ‘gc’
[18:07:07.711]   - Field: ‘job’
[18:07:07.711]   - Field: ‘conditions’
[18:07:07.711]   - Field: ‘expr’
[18:07:07.712]   - Field: ‘uuid’
[18:07:07.712]   - Field: ‘seed’
[18:07:07.712]   - Field: ‘version’
[18:07:07.712]   - Field: ‘result’
[18:07:07.713]   - Field: ‘asynchronous’
[18:07:07.713]   - Field: ‘calls’
[18:07:07.713]   - Field: ‘globals’
[18:07:07.713]   - Field: ‘stdout’
[18:07:07.713]   - Field: ‘earlySignal’
[18:07:07.714]   - Field: ‘lazy’
[18:07:07.714]   - Field: ‘state’
[18:07:07.714] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.714] - Launch lazy future ...
[18:07:07.715] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.715] Packages needed by future strategies (n = 0): <none>
[18:07:07.717] {
[18:07:07.717]     {
[18:07:07.717]         {
[18:07:07.717]             ...future.startTime <- base::Sys.time()
[18:07:07.717]             {
[18:07:07.717]                 {
[18:07:07.717]                   {
[18:07:07.717]                     {
[18:07:07.717]                       {
[18:07:07.717]                         base::local({
[18:07:07.717]                           has_future <- base::requireNamespace("future", 
[18:07:07.717]                             quietly = TRUE)
[18:07:07.717]                           if (has_future) {
[18:07:07.717]                             ns <- base::getNamespace("future")
[18:07:07.717]                             version <- ns[[".package"]][["version"]]
[18:07:07.717]                             if (is.null(version)) 
[18:07:07.717]                               version <- utils::packageVersion("future")
[18:07:07.717]                           }
[18:07:07.717]                           else {
[18:07:07.717]                             version <- NULL
[18:07:07.717]                           }
[18:07:07.717]                           if (!has_future || version < "1.8.0") {
[18:07:07.717]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.717]                               "", base::R.version$version.string), 
[18:07:07.717]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:07.717]                                 base::R.version$platform, 8 * 
[18:07:07.717]                                   base::.Machine$sizeof.pointer), 
[18:07:07.717]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.717]                                 "release", "version")], collapse = " "), 
[18:07:07.717]                               hostname = base::Sys.info()[["nodename"]])
[18:07:07.717]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.717]                               info)
[18:07:07.717]                             info <- base::paste(info, collapse = "; ")
[18:07:07.717]                             if (!has_future) {
[18:07:07.717]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.717]                                 info)
[18:07:07.717]                             }
[18:07:07.717]                             else {
[18:07:07.717]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.717]                                 info, version)
[18:07:07.717]                             }
[18:07:07.717]                             base::stop(msg)
[18:07:07.717]                           }
[18:07:07.717]                         })
[18:07:07.717]                       }
[18:07:07.717]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.717]                       base::options(mc.cores = 1L)
[18:07:07.717]                     }
[18:07:07.717]                     base::local({
[18:07:07.717]                       for (pkg in "utils") {
[18:07:07.717]                         base::loadNamespace(pkg)
[18:07:07.717]                         base::library(pkg, character.only = TRUE)
[18:07:07.717]                       }
[18:07:07.717]                     })
[18:07:07.717]                   }
[18:07:07.717]                   ...future.strategy.old <- future::plan("list")
[18:07:07.717]                   options(future.plan = NULL)
[18:07:07.717]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.717]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.717]                 }
[18:07:07.717]                 ...future.workdir <- getwd()
[18:07:07.717]             }
[18:07:07.717]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.717]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.717]         }
[18:07:07.717]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.717]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.717]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.717]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.717]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.717]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.717]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.717]             base::names(...future.oldOptions))
[18:07:07.717]     }
[18:07:07.717]     if (TRUE) {
[18:07:07.717]     }
[18:07:07.717]     else {
[18:07:07.717]         if (NA) {
[18:07:07.717]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.717]                 open = "w")
[18:07:07.717]         }
[18:07:07.717]         else {
[18:07:07.717]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.717]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.717]         }
[18:07:07.717]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.717]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.717]             base::sink(type = "output", split = FALSE)
[18:07:07.717]             base::close(...future.stdout)
[18:07:07.717]         }, add = TRUE)
[18:07:07.717]     }
[18:07:07.717]     ...future.frame <- base::sys.nframe()
[18:07:07.717]     ...future.conditions <- base::list()
[18:07:07.717]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.717]     if (FALSE) {
[18:07:07.717]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.717]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.717]     }
[18:07:07.717]     ...future.result <- base::tryCatch({
[18:07:07.717]         base::withCallingHandlers({
[18:07:07.717]             ...future.value <- base::withVisible(base::local({
[18:07:07.717]                 withCallingHandlers({
[18:07:07.717]                   {
[18:07:07.717]                     print(1:50)
[18:07:07.717]                     str(1:50)
[18:07:07.717]                     cat(letters, sep = "-")
[18:07:07.717]                     cat(1:6, collapse = "\n")
[18:07:07.717]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.717]                     42L
[18:07:07.717]                   }
[18:07:07.717]                 }, immediateCondition = function(cond) {
[18:07:07.717]                   save_rds <- function (object, pathname, ...) 
[18:07:07.717]                   {
[18:07:07.717]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.717]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.717]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.717]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.717]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.717]                         fi_tmp[["mtime"]])
[18:07:07.717]                     }
[18:07:07.717]                     tryCatch({
[18:07:07.717]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.717]                     }, error = function(ex) {
[18:07:07.717]                       msg <- conditionMessage(ex)
[18:07:07.717]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.717]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.717]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.717]                         fi_tmp[["mtime"]], msg)
[18:07:07.717]                       ex$message <- msg
[18:07:07.717]                       stop(ex)
[18:07:07.717]                     })
[18:07:07.717]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.717]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.717]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.717]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.717]                       fi <- file.info(pathname)
[18:07:07.717]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.717]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.717]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.717]                         fi[["size"]], fi[["mtime"]])
[18:07:07.717]                       stop(msg)
[18:07:07.717]                     }
[18:07:07.717]                     invisible(pathname)
[18:07:07.717]                   }
[18:07:07.717]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.717]                     rootPath = tempdir()) 
[18:07:07.717]                   {
[18:07:07.717]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.717]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.717]                       tmpdir = path, fileext = ".rds")
[18:07:07.717]                     save_rds(obj, file)
[18:07:07.717]                   }
[18:07:07.717]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.717]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.717]                   {
[18:07:07.717]                     inherits <- base::inherits
[18:07:07.717]                     invokeRestart <- base::invokeRestart
[18:07:07.717]                     is.null <- base::is.null
[18:07:07.717]                     muffled <- FALSE
[18:07:07.717]                     if (inherits(cond, "message")) {
[18:07:07.717]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.717]                       if (muffled) 
[18:07:07.717]                         invokeRestart("muffleMessage")
[18:07:07.717]                     }
[18:07:07.717]                     else if (inherits(cond, "warning")) {
[18:07:07.717]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.717]                       if (muffled) 
[18:07:07.717]                         invokeRestart("muffleWarning")
[18:07:07.717]                     }
[18:07:07.717]                     else if (inherits(cond, "condition")) {
[18:07:07.717]                       if (!is.null(pattern)) {
[18:07:07.717]                         computeRestarts <- base::computeRestarts
[18:07:07.717]                         grepl <- base::grepl
[18:07:07.717]                         restarts <- computeRestarts(cond)
[18:07:07.717]                         for (restart in restarts) {
[18:07:07.717]                           name <- restart$name
[18:07:07.717]                           if (is.null(name)) 
[18:07:07.717]                             next
[18:07:07.717]                           if (!grepl(pattern, name)) 
[18:07:07.717]                             next
[18:07:07.717]                           invokeRestart(restart)
[18:07:07.717]                           muffled <- TRUE
[18:07:07.717]                           break
[18:07:07.717]                         }
[18:07:07.717]                       }
[18:07:07.717]                     }
[18:07:07.717]                     invisible(muffled)
[18:07:07.717]                   }
[18:07:07.717]                   muffleCondition(cond)
[18:07:07.717]                 })
[18:07:07.717]             }))
[18:07:07.717]             future::FutureResult(value = ...future.value$value, 
[18:07:07.717]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.717]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.717]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.717]                     ...future.globalenv.names))
[18:07:07.717]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.717]         }, condition = base::local({
[18:07:07.717]             c <- base::c
[18:07:07.717]             inherits <- base::inherits
[18:07:07.717]             invokeRestart <- base::invokeRestart
[18:07:07.717]             length <- base::length
[18:07:07.717]             list <- base::list
[18:07:07.717]             seq.int <- base::seq.int
[18:07:07.717]             signalCondition <- base::signalCondition
[18:07:07.717]             sys.calls <- base::sys.calls
[18:07:07.717]             `[[` <- base::`[[`
[18:07:07.717]             `+` <- base::`+`
[18:07:07.717]             `<<-` <- base::`<<-`
[18:07:07.717]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.717]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.717]                   3L)]
[18:07:07.717]             }
[18:07:07.717]             function(cond) {
[18:07:07.717]                 is_error <- inherits(cond, "error")
[18:07:07.717]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.717]                   NULL)
[18:07:07.717]                 if (is_error) {
[18:07:07.717]                   sessionInformation <- function() {
[18:07:07.717]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.717]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.717]                       search = base::search(), system = base::Sys.info())
[18:07:07.717]                   }
[18:07:07.717]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.717]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.717]                     cond$call), session = sessionInformation(), 
[18:07:07.717]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.717]                   signalCondition(cond)
[18:07:07.717]                 }
[18:07:07.717]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.717]                 "immediateCondition"))) {
[18:07:07.717]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.717]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.717]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.717]                   if (TRUE && !signal) {
[18:07:07.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.717]                     {
[18:07:07.717]                       inherits <- base::inherits
[18:07:07.717]                       invokeRestart <- base::invokeRestart
[18:07:07.717]                       is.null <- base::is.null
[18:07:07.717]                       muffled <- FALSE
[18:07:07.717]                       if (inherits(cond, "message")) {
[18:07:07.717]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.717]                         if (muffled) 
[18:07:07.717]                           invokeRestart("muffleMessage")
[18:07:07.717]                       }
[18:07:07.717]                       else if (inherits(cond, "warning")) {
[18:07:07.717]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.717]                         if (muffled) 
[18:07:07.717]                           invokeRestart("muffleWarning")
[18:07:07.717]                       }
[18:07:07.717]                       else if (inherits(cond, "condition")) {
[18:07:07.717]                         if (!is.null(pattern)) {
[18:07:07.717]                           computeRestarts <- base::computeRestarts
[18:07:07.717]                           grepl <- base::grepl
[18:07:07.717]                           restarts <- computeRestarts(cond)
[18:07:07.717]                           for (restart in restarts) {
[18:07:07.717]                             name <- restart$name
[18:07:07.717]                             if (is.null(name)) 
[18:07:07.717]                               next
[18:07:07.717]                             if (!grepl(pattern, name)) 
[18:07:07.717]                               next
[18:07:07.717]                             invokeRestart(restart)
[18:07:07.717]                             muffled <- TRUE
[18:07:07.717]                             break
[18:07:07.717]                           }
[18:07:07.717]                         }
[18:07:07.717]                       }
[18:07:07.717]                       invisible(muffled)
[18:07:07.717]                     }
[18:07:07.717]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.717]                   }
[18:07:07.717]                 }
[18:07:07.717]                 else {
[18:07:07.717]                   if (TRUE) {
[18:07:07.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.717]                     {
[18:07:07.717]                       inherits <- base::inherits
[18:07:07.717]                       invokeRestart <- base::invokeRestart
[18:07:07.717]                       is.null <- base::is.null
[18:07:07.717]                       muffled <- FALSE
[18:07:07.717]                       if (inherits(cond, "message")) {
[18:07:07.717]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.717]                         if (muffled) 
[18:07:07.717]                           invokeRestart("muffleMessage")
[18:07:07.717]                       }
[18:07:07.717]                       else if (inherits(cond, "warning")) {
[18:07:07.717]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.717]                         if (muffled) 
[18:07:07.717]                           invokeRestart("muffleWarning")
[18:07:07.717]                       }
[18:07:07.717]                       else if (inherits(cond, "condition")) {
[18:07:07.717]                         if (!is.null(pattern)) {
[18:07:07.717]                           computeRestarts <- base::computeRestarts
[18:07:07.717]                           grepl <- base::grepl
[18:07:07.717]                           restarts <- computeRestarts(cond)
[18:07:07.717]                           for (restart in restarts) {
[18:07:07.717]                             name <- restart$name
[18:07:07.717]                             if (is.null(name)) 
[18:07:07.717]                               next
[18:07:07.717]                             if (!grepl(pattern, name)) 
[18:07:07.717]                               next
[18:07:07.717]                             invokeRestart(restart)
[18:07:07.717]                             muffled <- TRUE
[18:07:07.717]                             break
[18:07:07.717]                           }
[18:07:07.717]                         }
[18:07:07.717]                       }
[18:07:07.717]                       invisible(muffled)
[18:07:07.717]                     }
[18:07:07.717]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.717]                   }
[18:07:07.717]                 }
[18:07:07.717]             }
[18:07:07.717]         }))
[18:07:07.717]     }, error = function(ex) {
[18:07:07.717]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.717]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.717]                 ...future.rng), started = ...future.startTime, 
[18:07:07.717]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.717]             version = "1.8"), class = "FutureResult")
[18:07:07.717]     }, finally = {
[18:07:07.717]         if (!identical(...future.workdir, getwd())) 
[18:07:07.717]             setwd(...future.workdir)
[18:07:07.717]         {
[18:07:07.717]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.717]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.717]             }
[18:07:07.717]             base::options(...future.oldOptions)
[18:07:07.717]             if (.Platform$OS.type == "windows") {
[18:07:07.717]                 old_names <- names(...future.oldEnvVars)
[18:07:07.717]                 envs <- base::Sys.getenv()
[18:07:07.717]                 names <- names(envs)
[18:07:07.717]                 common <- intersect(names, old_names)
[18:07:07.717]                 added <- setdiff(names, old_names)
[18:07:07.717]                 removed <- setdiff(old_names, names)
[18:07:07.717]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.717]                   envs[common]]
[18:07:07.717]                 NAMES <- toupper(changed)
[18:07:07.717]                 args <- list()
[18:07:07.717]                 for (kk in seq_along(NAMES)) {
[18:07:07.717]                   name <- changed[[kk]]
[18:07:07.717]                   NAME <- NAMES[[kk]]
[18:07:07.717]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.717]                     next
[18:07:07.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.717]                 }
[18:07:07.717]                 NAMES <- toupper(added)
[18:07:07.717]                 for (kk in seq_along(NAMES)) {
[18:07:07.717]                   name <- added[[kk]]
[18:07:07.717]                   NAME <- NAMES[[kk]]
[18:07:07.717]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.717]                     next
[18:07:07.717]                   args[[name]] <- ""
[18:07:07.717]                 }
[18:07:07.717]                 NAMES <- toupper(removed)
[18:07:07.717]                 for (kk in seq_along(NAMES)) {
[18:07:07.717]                   name <- removed[[kk]]
[18:07:07.717]                   NAME <- NAMES[[kk]]
[18:07:07.717]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.717]                     next
[18:07:07.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.717]                 }
[18:07:07.717]                 if (length(args) > 0) 
[18:07:07.717]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.717]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.717]             }
[18:07:07.717]             else {
[18:07:07.717]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.717]             }
[18:07:07.717]             {
[18:07:07.717]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.717]                   0L) {
[18:07:07.717]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.717]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.717]                   base::options(opts)
[18:07:07.717]                 }
[18:07:07.717]                 {
[18:07:07.717]                   {
[18:07:07.717]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.717]                     NULL
[18:07:07.717]                   }
[18:07:07.717]                   options(future.plan = NULL)
[18:07:07.717]                   if (is.na(NA_character_)) 
[18:07:07.717]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.717]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.717]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.717]                     .init = FALSE)
[18:07:07.717]                 }
[18:07:07.717]             }
[18:07:07.717]         }
[18:07:07.717]     })
[18:07:07.717]     if (FALSE) {
[18:07:07.717]         base::sink(type = "output", split = FALSE)
[18:07:07.717]         if (NA) {
[18:07:07.717]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.717]         }
[18:07:07.717]         else {
[18:07:07.717]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.717]         }
[18:07:07.717]         base::close(...future.stdout)
[18:07:07.717]         ...future.stdout <- NULL
[18:07:07.717]     }
[18:07:07.717]     ...future.result$conditions <- ...future.conditions
[18:07:07.717]     ...future.result$finished <- base::Sys.time()
[18:07:07.717]     ...future.result
[18:07:07.717] }
[18:07:07.722] requestCore(): workers = 2
[18:07:07.726] MulticoreFuture started
[18:07:07.726] - Launch lazy future ... done
[18:07:07.729] run() for ‘MulticoreFuture’ ... done
[18:07:07.730] result() for MulticoreFuture ...
[18:07:07.732] plan(): Setting new future strategy stack:
[18:07:07.733] List of future strategies:
[18:07:07.733] 1. sequential:
[18:07:07.733]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.733]    - tweaked: FALSE
[18:07:07.733]    - call: NULL
[18:07:07.735] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[18:07:07.742] plan(): Setting new future strategy stack:
[18:07:07.743] List of future strategies:
[18:07:07.743] 1. multicore:
[18:07:07.743]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.743]    - tweaked: FALSE
[18:07:07.743]    - call: plan(strategy)
[18:07:07.753] plan(): nbrOfWorkers() = 2
[18:07:07.755] result() for MulticoreFuture ...
[18:07:07.756] result() for MulticoreFuture ... done
[18:07:07.756] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:07"
 $ session_uuid: chr "f8e27fd1-04a8-d343-e2a7-f44c17e13ed1"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331323
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:07"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[18:07:07.779] result() for MulticoreFuture ...
[18:07:07.779] result() for MulticoreFuture ... done
[18:07:07.780] result() for MulticoreFuture ...
[18:07:07.780] result() for MulticoreFuture ... done
[18:07:07.781] getGlobalsAndPackages() ...
[18:07:07.781] Searching for globals...
[18:07:07.794] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:07.794] Searching for globals ... DONE
[18:07:07.794] Resolving globals: FALSE
[18:07:07.796] 
[18:07:07.796] - packages: [1] ‘utils’
[18:07:07.796] getGlobalsAndPackages() ... DONE
[18:07:07.797] run() for ‘Future’ ...
[18:07:07.797] - state: ‘created’
[18:07:07.797] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.804] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.804] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.805]   - Field: ‘label’
[18:07:07.805]   - Field: ‘local’
[18:07:07.805]   - Field: ‘owner’
[18:07:07.805]   - Field: ‘envir’
[18:07:07.806]   - Field: ‘workers’
[18:07:07.806]   - Field: ‘packages’
[18:07:07.806]   - Field: ‘gc’
[18:07:07.806]   - Field: ‘job’
[18:07:07.807]   - Field: ‘conditions’
[18:07:07.807]   - Field: ‘expr’
[18:07:07.807]   - Field: ‘uuid’
[18:07:07.807]   - Field: ‘seed’
[18:07:07.807]   - Field: ‘version’
[18:07:07.808]   - Field: ‘result’
[18:07:07.808]   - Field: ‘asynchronous’
[18:07:07.808]   - Field: ‘calls’
[18:07:07.808]   - Field: ‘globals’
[18:07:07.809]   - Field: ‘stdout’
[18:07:07.810]   - Field: ‘earlySignal’
[18:07:07.810]   - Field: ‘lazy’
[18:07:07.810]   - Field: ‘state’
[18:07:07.811] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.811] - Launch lazy future ...
[18:07:07.812] Packages needed by the future expression (n = 1): ‘utils’
[18:07:07.812] Packages needed by future strategies (n = 0): <none>
[18:07:07.813] {
[18:07:07.813]     {
[18:07:07.813]         {
[18:07:07.813]             ...future.startTime <- base::Sys.time()
[18:07:07.813]             {
[18:07:07.813]                 {
[18:07:07.813]                   {
[18:07:07.813]                     {
[18:07:07.813]                       {
[18:07:07.813]                         base::local({
[18:07:07.813]                           has_future <- base::requireNamespace("future", 
[18:07:07.813]                             quietly = TRUE)
[18:07:07.813]                           if (has_future) {
[18:07:07.813]                             ns <- base::getNamespace("future")
[18:07:07.813]                             version <- ns[[".package"]][["version"]]
[18:07:07.813]                             if (is.null(version)) 
[18:07:07.813]                               version <- utils::packageVersion("future")
[18:07:07.813]                           }
[18:07:07.813]                           else {
[18:07:07.813]                             version <- NULL
[18:07:07.813]                           }
[18:07:07.813]                           if (!has_future || version < "1.8.0") {
[18:07:07.813]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.813]                               "", base::R.version$version.string), 
[18:07:07.813]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:07.813]                                 base::R.version$platform, 8 * 
[18:07:07.813]                                   base::.Machine$sizeof.pointer), 
[18:07:07.813]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.813]                                 "release", "version")], collapse = " "), 
[18:07:07.813]                               hostname = base::Sys.info()[["nodename"]])
[18:07:07.813]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.813]                               info)
[18:07:07.813]                             info <- base::paste(info, collapse = "; ")
[18:07:07.813]                             if (!has_future) {
[18:07:07.813]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.813]                                 info)
[18:07:07.813]                             }
[18:07:07.813]                             else {
[18:07:07.813]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.813]                                 info, version)
[18:07:07.813]                             }
[18:07:07.813]                             base::stop(msg)
[18:07:07.813]                           }
[18:07:07.813]                         })
[18:07:07.813]                       }
[18:07:07.813]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.813]                       base::options(mc.cores = 1L)
[18:07:07.813]                     }
[18:07:07.813]                     base::local({
[18:07:07.813]                       for (pkg in "utils") {
[18:07:07.813]                         base::loadNamespace(pkg)
[18:07:07.813]                         base::library(pkg, character.only = TRUE)
[18:07:07.813]                       }
[18:07:07.813]                     })
[18:07:07.813]                   }
[18:07:07.813]                   ...future.strategy.old <- future::plan("list")
[18:07:07.813]                   options(future.plan = NULL)
[18:07:07.813]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.813]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.813]                 }
[18:07:07.813]                 ...future.workdir <- getwd()
[18:07:07.813]             }
[18:07:07.813]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.813]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.813]         }
[18:07:07.813]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.813]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.813]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.813]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.813]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.813]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.813]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.813]             base::names(...future.oldOptions))
[18:07:07.813]     }
[18:07:07.813]     if (TRUE) {
[18:07:07.813]     }
[18:07:07.813]     else {
[18:07:07.813]         if (NA) {
[18:07:07.813]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.813]                 open = "w")
[18:07:07.813]         }
[18:07:07.813]         else {
[18:07:07.813]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.813]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.813]         }
[18:07:07.813]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.813]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.813]             base::sink(type = "output", split = FALSE)
[18:07:07.813]             base::close(...future.stdout)
[18:07:07.813]         }, add = TRUE)
[18:07:07.813]     }
[18:07:07.813]     ...future.frame <- base::sys.nframe()
[18:07:07.813]     ...future.conditions <- base::list()
[18:07:07.813]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.813]     if (FALSE) {
[18:07:07.813]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.813]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.813]     }
[18:07:07.813]     ...future.result <- base::tryCatch({
[18:07:07.813]         base::withCallingHandlers({
[18:07:07.813]             ...future.value <- base::withVisible(base::local({
[18:07:07.813]                 withCallingHandlers({
[18:07:07.813]                   {
[18:07:07.813]                     print(1:50)
[18:07:07.813]                     str(1:50)
[18:07:07.813]                     cat(letters, sep = "-")
[18:07:07.813]                     cat(1:6, collapse = "\n")
[18:07:07.813]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:07.813]                     42L
[18:07:07.813]                   }
[18:07:07.813]                 }, immediateCondition = function(cond) {
[18:07:07.813]                   save_rds <- function (object, pathname, ...) 
[18:07:07.813]                   {
[18:07:07.813]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.813]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.813]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.813]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.813]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.813]                         fi_tmp[["mtime"]])
[18:07:07.813]                     }
[18:07:07.813]                     tryCatch({
[18:07:07.813]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.813]                     }, error = function(ex) {
[18:07:07.813]                       msg <- conditionMessage(ex)
[18:07:07.813]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.813]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.813]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.813]                         fi_tmp[["mtime"]], msg)
[18:07:07.813]                       ex$message <- msg
[18:07:07.813]                       stop(ex)
[18:07:07.813]                     })
[18:07:07.813]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.813]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.813]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.813]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.813]                       fi <- file.info(pathname)
[18:07:07.813]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.813]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.813]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.813]                         fi[["size"]], fi[["mtime"]])
[18:07:07.813]                       stop(msg)
[18:07:07.813]                     }
[18:07:07.813]                     invisible(pathname)
[18:07:07.813]                   }
[18:07:07.813]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.813]                     rootPath = tempdir()) 
[18:07:07.813]                   {
[18:07:07.813]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.813]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.813]                       tmpdir = path, fileext = ".rds")
[18:07:07.813]                     save_rds(obj, file)
[18:07:07.813]                   }
[18:07:07.813]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.813]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.813]                   {
[18:07:07.813]                     inherits <- base::inherits
[18:07:07.813]                     invokeRestart <- base::invokeRestart
[18:07:07.813]                     is.null <- base::is.null
[18:07:07.813]                     muffled <- FALSE
[18:07:07.813]                     if (inherits(cond, "message")) {
[18:07:07.813]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.813]                       if (muffled) 
[18:07:07.813]                         invokeRestart("muffleMessage")
[18:07:07.813]                     }
[18:07:07.813]                     else if (inherits(cond, "warning")) {
[18:07:07.813]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.813]                       if (muffled) 
[18:07:07.813]                         invokeRestart("muffleWarning")
[18:07:07.813]                     }
[18:07:07.813]                     else if (inherits(cond, "condition")) {
[18:07:07.813]                       if (!is.null(pattern)) {
[18:07:07.813]                         computeRestarts <- base::computeRestarts
[18:07:07.813]                         grepl <- base::grepl
[18:07:07.813]                         restarts <- computeRestarts(cond)
[18:07:07.813]                         for (restart in restarts) {
[18:07:07.813]                           name <- restart$name
[18:07:07.813]                           if (is.null(name)) 
[18:07:07.813]                             next
[18:07:07.813]                           if (!grepl(pattern, name)) 
[18:07:07.813]                             next
[18:07:07.813]                           invokeRestart(restart)
[18:07:07.813]                           muffled <- TRUE
[18:07:07.813]                           break
[18:07:07.813]                         }
[18:07:07.813]                       }
[18:07:07.813]                     }
[18:07:07.813]                     invisible(muffled)
[18:07:07.813]                   }
[18:07:07.813]                   muffleCondition(cond)
[18:07:07.813]                 })
[18:07:07.813]             }))
[18:07:07.813]             future::FutureResult(value = ...future.value$value, 
[18:07:07.813]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.813]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.813]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.813]                     ...future.globalenv.names))
[18:07:07.813]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.813]         }, condition = base::local({
[18:07:07.813]             c <- base::c
[18:07:07.813]             inherits <- base::inherits
[18:07:07.813]             invokeRestart <- base::invokeRestart
[18:07:07.813]             length <- base::length
[18:07:07.813]             list <- base::list
[18:07:07.813]             seq.int <- base::seq.int
[18:07:07.813]             signalCondition <- base::signalCondition
[18:07:07.813]             sys.calls <- base::sys.calls
[18:07:07.813]             `[[` <- base::`[[`
[18:07:07.813]             `+` <- base::`+`
[18:07:07.813]             `<<-` <- base::`<<-`
[18:07:07.813]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.813]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.813]                   3L)]
[18:07:07.813]             }
[18:07:07.813]             function(cond) {
[18:07:07.813]                 is_error <- inherits(cond, "error")
[18:07:07.813]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.813]                   NULL)
[18:07:07.813]                 if (is_error) {
[18:07:07.813]                   sessionInformation <- function() {
[18:07:07.813]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.813]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.813]                       search = base::search(), system = base::Sys.info())
[18:07:07.813]                   }
[18:07:07.813]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.813]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.813]                     cond$call), session = sessionInformation(), 
[18:07:07.813]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.813]                   signalCondition(cond)
[18:07:07.813]                 }
[18:07:07.813]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.813]                 "immediateCondition"))) {
[18:07:07.813]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.813]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.813]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.813]                   if (TRUE && !signal) {
[18:07:07.813]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.813]                     {
[18:07:07.813]                       inherits <- base::inherits
[18:07:07.813]                       invokeRestart <- base::invokeRestart
[18:07:07.813]                       is.null <- base::is.null
[18:07:07.813]                       muffled <- FALSE
[18:07:07.813]                       if (inherits(cond, "message")) {
[18:07:07.813]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.813]                         if (muffled) 
[18:07:07.813]                           invokeRestart("muffleMessage")
[18:07:07.813]                       }
[18:07:07.813]                       else if (inherits(cond, "warning")) {
[18:07:07.813]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.813]                         if (muffled) 
[18:07:07.813]                           invokeRestart("muffleWarning")
[18:07:07.813]                       }
[18:07:07.813]                       else if (inherits(cond, "condition")) {
[18:07:07.813]                         if (!is.null(pattern)) {
[18:07:07.813]                           computeRestarts <- base::computeRestarts
[18:07:07.813]                           grepl <- base::grepl
[18:07:07.813]                           restarts <- computeRestarts(cond)
[18:07:07.813]                           for (restart in restarts) {
[18:07:07.813]                             name <- restart$name
[18:07:07.813]                             if (is.null(name)) 
[18:07:07.813]                               next
[18:07:07.813]                             if (!grepl(pattern, name)) 
[18:07:07.813]                               next
[18:07:07.813]                             invokeRestart(restart)
[18:07:07.813]                             muffled <- TRUE
[18:07:07.813]                             break
[18:07:07.813]                           }
[18:07:07.813]                         }
[18:07:07.813]                       }
[18:07:07.813]                       invisible(muffled)
[18:07:07.813]                     }
[18:07:07.813]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.813]                   }
[18:07:07.813]                 }
[18:07:07.813]                 else {
[18:07:07.813]                   if (TRUE) {
[18:07:07.813]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.813]                     {
[18:07:07.813]                       inherits <- base::inherits
[18:07:07.813]                       invokeRestart <- base::invokeRestart
[18:07:07.813]                       is.null <- base::is.null
[18:07:07.813]                       muffled <- FALSE
[18:07:07.813]                       if (inherits(cond, "message")) {
[18:07:07.813]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.813]                         if (muffled) 
[18:07:07.813]                           invokeRestart("muffleMessage")
[18:07:07.813]                       }
[18:07:07.813]                       else if (inherits(cond, "warning")) {
[18:07:07.813]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.813]                         if (muffled) 
[18:07:07.813]                           invokeRestart("muffleWarning")
[18:07:07.813]                       }
[18:07:07.813]                       else if (inherits(cond, "condition")) {
[18:07:07.813]                         if (!is.null(pattern)) {
[18:07:07.813]                           computeRestarts <- base::computeRestarts
[18:07:07.813]                           grepl <- base::grepl
[18:07:07.813]                           restarts <- computeRestarts(cond)
[18:07:07.813]                           for (restart in restarts) {
[18:07:07.813]                             name <- restart$name
[18:07:07.813]                             if (is.null(name)) 
[18:07:07.813]                               next
[18:07:07.813]                             if (!grepl(pattern, name)) 
[18:07:07.813]                               next
[18:07:07.813]                             invokeRestart(restart)
[18:07:07.813]                             muffled <- TRUE
[18:07:07.813]                             break
[18:07:07.813]                           }
[18:07:07.813]                         }
[18:07:07.813]                       }
[18:07:07.813]                       invisible(muffled)
[18:07:07.813]                     }
[18:07:07.813]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.813]                   }
[18:07:07.813]                 }
[18:07:07.813]             }
[18:07:07.813]         }))
[18:07:07.813]     }, error = function(ex) {
[18:07:07.813]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.813]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.813]                 ...future.rng), started = ...future.startTime, 
[18:07:07.813]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.813]             version = "1.8"), class = "FutureResult")
[18:07:07.813]     }, finally = {
[18:07:07.813]         if (!identical(...future.workdir, getwd())) 
[18:07:07.813]             setwd(...future.workdir)
[18:07:07.813]         {
[18:07:07.813]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.813]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.813]             }
[18:07:07.813]             base::options(...future.oldOptions)
[18:07:07.813]             if (.Platform$OS.type == "windows") {
[18:07:07.813]                 old_names <- names(...future.oldEnvVars)
[18:07:07.813]                 envs <- base::Sys.getenv()
[18:07:07.813]                 names <- names(envs)
[18:07:07.813]                 common <- intersect(names, old_names)
[18:07:07.813]                 added <- setdiff(names, old_names)
[18:07:07.813]                 removed <- setdiff(old_names, names)
[18:07:07.813]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.813]                   envs[common]]
[18:07:07.813]                 NAMES <- toupper(changed)
[18:07:07.813]                 args <- list()
[18:07:07.813]                 for (kk in seq_along(NAMES)) {
[18:07:07.813]                   name <- changed[[kk]]
[18:07:07.813]                   NAME <- NAMES[[kk]]
[18:07:07.813]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.813]                     next
[18:07:07.813]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.813]                 }
[18:07:07.813]                 NAMES <- toupper(added)
[18:07:07.813]                 for (kk in seq_along(NAMES)) {
[18:07:07.813]                   name <- added[[kk]]
[18:07:07.813]                   NAME <- NAMES[[kk]]
[18:07:07.813]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.813]                     next
[18:07:07.813]                   args[[name]] <- ""
[18:07:07.813]                 }
[18:07:07.813]                 NAMES <- toupper(removed)
[18:07:07.813]                 for (kk in seq_along(NAMES)) {
[18:07:07.813]                   name <- removed[[kk]]
[18:07:07.813]                   NAME <- NAMES[[kk]]
[18:07:07.813]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.813]                     next
[18:07:07.813]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.813]                 }
[18:07:07.813]                 if (length(args) > 0) 
[18:07:07.813]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.813]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.813]             }
[18:07:07.813]             else {
[18:07:07.813]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.813]             }
[18:07:07.813]             {
[18:07:07.813]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.813]                   0L) {
[18:07:07.813]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.813]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.813]                   base::options(opts)
[18:07:07.813]                 }
[18:07:07.813]                 {
[18:07:07.813]                   {
[18:07:07.813]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.813]                     NULL
[18:07:07.813]                   }
[18:07:07.813]                   options(future.plan = NULL)
[18:07:07.813]                   if (is.na(NA_character_)) 
[18:07:07.813]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.813]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.813]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.813]                     .init = FALSE)
[18:07:07.813]                 }
[18:07:07.813]             }
[18:07:07.813]         }
[18:07:07.813]     })
[18:07:07.813]     if (FALSE) {
[18:07:07.813]         base::sink(type = "output", split = FALSE)
[18:07:07.813]         if (NA) {
[18:07:07.813]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.813]         }
[18:07:07.813]         else {
[18:07:07.813]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.813]         }
[18:07:07.813]         base::close(...future.stdout)
[18:07:07.813]         ...future.stdout <- NULL
[18:07:07.813]     }
[18:07:07.813]     ...future.result$conditions <- ...future.conditions
[18:07:07.813]     ...future.result$finished <- base::Sys.time()
[18:07:07.813]     ...future.result
[18:07:07.813] }
[18:07:07.818] requestCore(): workers = 2
[18:07:07.822] MulticoreFuture started
[18:07:07.824] - Launch lazy future ... done
[18:07:07.825] run() for ‘MulticoreFuture’ ... done
[18:07:07.827] plan(): Setting new future strategy stack:
[18:07:07.828] result() for MulticoreFuture ...
[18:07:07.830] List of future strategies:
[18:07:07.830] 1. sequential:
[18:07:07.830]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.830]    - tweaked: FALSE
[18:07:07.830]    - call: NULL
[18:07:07.832] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[18:07:07.840] plan(): Setting new future strategy stack:
[18:07:07.840] List of future strategies:
[18:07:07.840] 1. multicore:
[18:07:07.840]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.840]    - tweaked: FALSE
[18:07:07.840]    - call: plan(strategy)
[18:07:07.849] plan(): nbrOfWorkers() = 2
[18:07:07.852] result() for MulticoreFuture ...
[18:07:07.853] result() for MulticoreFuture ... done
[18:07:07.853] result() for MulticoreFuture ... done
[18:07:07.853] result() for MulticoreFuture ...
[18:07:07.854] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[18:07:07.855] getGlobalsAndPackages() ...
[18:07:07.855] Searching for globals...
[18:07:07.857] - globals found: [1] ‘print’
[18:07:07.857] Searching for globals ... DONE
[18:07:07.857] Resolving globals: FALSE
[18:07:07.858] 
[18:07:07.858] 
[18:07:07.859] getGlobalsAndPackages() ... DONE
[18:07:07.859] run() for ‘Future’ ...
[18:07:07.860] - state: ‘created’
[18:07:07.860] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:07:07.867] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:07.867] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:07:07.867]   - Field: ‘label’
[18:07:07.868]   - Field: ‘local’
[18:07:07.868]   - Field: ‘owner’
[18:07:07.868]   - Field: ‘envir’
[18:07:07.868]   - Field: ‘workers’
[18:07:07.869]   - Field: ‘packages’
[18:07:07.869]   - Field: ‘gc’
[18:07:07.869]   - Field: ‘job’
[18:07:07.869]   - Field: ‘conditions’
[18:07:07.870]   - Field: ‘expr’
[18:07:07.870]   - Field: ‘uuid’
[18:07:07.870]   - Field: ‘seed’
[18:07:07.870]   - Field: ‘version’
[18:07:07.871]   - Field: ‘result’
[18:07:07.871]   - Field: ‘asynchronous’
[18:07:07.871]   - Field: ‘calls’
[18:07:07.871]   - Field: ‘globals’
[18:07:07.872]   - Field: ‘stdout’
[18:07:07.872]   - Field: ‘earlySignal’
[18:07:07.872]   - Field: ‘lazy’
[18:07:07.872]   - Field: ‘state’
[18:07:07.872] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:07:07.873] - Launch lazy future ...
[18:07:07.873] Packages needed by the future expression (n = 0): <none>
[18:07:07.874] Packages needed by future strategies (n = 0): <none>
[18:07:07.875] {
[18:07:07.875]     {
[18:07:07.875]         {
[18:07:07.875]             ...future.startTime <- base::Sys.time()
[18:07:07.875]             {
[18:07:07.875]                 {
[18:07:07.875]                   {
[18:07:07.875]                     {
[18:07:07.875]                       base::local({
[18:07:07.875]                         has_future <- base::requireNamespace("future", 
[18:07:07.875]                           quietly = TRUE)
[18:07:07.875]                         if (has_future) {
[18:07:07.875]                           ns <- base::getNamespace("future")
[18:07:07.875]                           version <- ns[[".package"]][["version"]]
[18:07:07.875]                           if (is.null(version)) 
[18:07:07.875]                             version <- utils::packageVersion("future")
[18:07:07.875]                         }
[18:07:07.875]                         else {
[18:07:07.875]                           version <- NULL
[18:07:07.875]                         }
[18:07:07.875]                         if (!has_future || version < "1.8.0") {
[18:07:07.875]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:07.875]                             "", base::R.version$version.string), 
[18:07:07.875]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:07.875]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:07.875]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:07.875]                               "release", "version")], collapse = " "), 
[18:07:07.875]                             hostname = base::Sys.info()[["nodename"]])
[18:07:07.875]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:07.875]                             info)
[18:07:07.875]                           info <- base::paste(info, collapse = "; ")
[18:07:07.875]                           if (!has_future) {
[18:07:07.875]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:07.875]                               info)
[18:07:07.875]                           }
[18:07:07.875]                           else {
[18:07:07.875]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:07.875]                               info, version)
[18:07:07.875]                           }
[18:07:07.875]                           base::stop(msg)
[18:07:07.875]                         }
[18:07:07.875]                       })
[18:07:07.875]                     }
[18:07:07.875]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:07.875]                     base::options(mc.cores = 1L)
[18:07:07.875]                   }
[18:07:07.875]                   ...future.strategy.old <- future::plan("list")
[18:07:07.875]                   options(future.plan = NULL)
[18:07:07.875]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.875]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:07.875]                 }
[18:07:07.875]                 ...future.workdir <- getwd()
[18:07:07.875]             }
[18:07:07.875]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:07.875]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:07.875]         }
[18:07:07.875]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:07.875]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:07.875]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:07.875]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:07.875]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:07.875]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:07.875]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:07.875]             base::names(...future.oldOptions))
[18:07:07.875]     }
[18:07:07.875]     if (FALSE) {
[18:07:07.875]     }
[18:07:07.875]     else {
[18:07:07.875]         if (TRUE) {
[18:07:07.875]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:07.875]                 open = "w")
[18:07:07.875]         }
[18:07:07.875]         else {
[18:07:07.875]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:07.875]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:07.875]         }
[18:07:07.875]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:07.875]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:07.875]             base::sink(type = "output", split = FALSE)
[18:07:07.875]             base::close(...future.stdout)
[18:07:07.875]         }, add = TRUE)
[18:07:07.875]     }
[18:07:07.875]     ...future.frame <- base::sys.nframe()
[18:07:07.875]     ...future.conditions <- base::list()
[18:07:07.875]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:07.875]     if (FALSE) {
[18:07:07.875]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:07.875]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:07.875]     }
[18:07:07.875]     ...future.result <- base::tryCatch({
[18:07:07.875]         base::withCallingHandlers({
[18:07:07.875]             ...future.value <- base::withVisible(base::local({
[18:07:07.875]                 withCallingHandlers({
[18:07:07.875]                   print(42)
[18:07:07.875]                 }, immediateCondition = function(cond) {
[18:07:07.875]                   save_rds <- function (object, pathname, ...) 
[18:07:07.875]                   {
[18:07:07.875]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:07:07.875]                     if (file_test("-f", pathname_tmp)) {
[18:07:07.875]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.875]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:07:07.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.875]                         fi_tmp[["mtime"]])
[18:07:07.875]                     }
[18:07:07.875]                     tryCatch({
[18:07:07.875]                       saveRDS(object, file = pathname_tmp, ...)
[18:07:07.875]                     }, error = function(ex) {
[18:07:07.875]                       msg <- conditionMessage(ex)
[18:07:07.875]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.875]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:07:07.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.875]                         fi_tmp[["mtime"]], msg)
[18:07:07.875]                       ex$message <- msg
[18:07:07.875]                       stop(ex)
[18:07:07.875]                     })
[18:07:07.875]                     stopifnot(file_test("-f", pathname_tmp))
[18:07:07.875]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:07:07.875]                     if (!res || file_test("-f", pathname_tmp)) {
[18:07:07.875]                       fi_tmp <- file.info(pathname_tmp)
[18:07:07.875]                       fi <- file.info(pathname)
[18:07:07.875]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:07:07.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:07:07.875]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:07:07.875]                         fi[["size"]], fi[["mtime"]])
[18:07:07.875]                       stop(msg)
[18:07:07.875]                     }
[18:07:07.875]                     invisible(pathname)
[18:07:07.875]                   }
[18:07:07.875]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:07:07.875]                     rootPath = tempdir()) 
[18:07:07.875]                   {
[18:07:07.875]                     obj <- list(time = Sys.time(), condition = cond)
[18:07:07.875]                     file <- tempfile(pattern = class(cond)[1], 
[18:07:07.875]                       tmpdir = path, fileext = ".rds")
[18:07:07.875]                     save_rds(obj, file)
[18:07:07.875]                   }
[18:07:07.875]                   saveImmediateCondition(cond, path = "/tmp/RtmpdPFVwp/.future/immediateConditions")
[18:07:07.875]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.875]                   {
[18:07:07.875]                     inherits <- base::inherits
[18:07:07.875]                     invokeRestart <- base::invokeRestart
[18:07:07.875]                     is.null <- base::is.null
[18:07:07.875]                     muffled <- FALSE
[18:07:07.875]                     if (inherits(cond, "message")) {
[18:07:07.875]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:07.875]                       if (muffled) 
[18:07:07.875]                         invokeRestart("muffleMessage")
[18:07:07.875]                     }
[18:07:07.875]                     else if (inherits(cond, "warning")) {
[18:07:07.875]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:07.875]                       if (muffled) 
[18:07:07.875]                         invokeRestart("muffleWarning")
[18:07:07.875]                     }
[18:07:07.875]                     else if (inherits(cond, "condition")) {
[18:07:07.875]                       if (!is.null(pattern)) {
[18:07:07.875]                         computeRestarts <- base::computeRestarts
[18:07:07.875]                         grepl <- base::grepl
[18:07:07.875]                         restarts <- computeRestarts(cond)
[18:07:07.875]                         for (restart in restarts) {
[18:07:07.875]                           name <- restart$name
[18:07:07.875]                           if (is.null(name)) 
[18:07:07.875]                             next
[18:07:07.875]                           if (!grepl(pattern, name)) 
[18:07:07.875]                             next
[18:07:07.875]                           invokeRestart(restart)
[18:07:07.875]                           muffled <- TRUE
[18:07:07.875]                           break
[18:07:07.875]                         }
[18:07:07.875]                       }
[18:07:07.875]                     }
[18:07:07.875]                     invisible(muffled)
[18:07:07.875]                   }
[18:07:07.875]                   muffleCondition(cond)
[18:07:07.875]                 })
[18:07:07.875]             }))
[18:07:07.875]             future::FutureResult(value = ...future.value$value, 
[18:07:07.875]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.875]                   ...future.rng), globalenv = if (FALSE) 
[18:07:07.875]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:07.875]                     ...future.globalenv.names))
[18:07:07.875]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:07.875]         }, condition = base::local({
[18:07:07.875]             c <- base::c
[18:07:07.875]             inherits <- base::inherits
[18:07:07.875]             invokeRestart <- base::invokeRestart
[18:07:07.875]             length <- base::length
[18:07:07.875]             list <- base::list
[18:07:07.875]             seq.int <- base::seq.int
[18:07:07.875]             signalCondition <- base::signalCondition
[18:07:07.875]             sys.calls <- base::sys.calls
[18:07:07.875]             `[[` <- base::`[[`
[18:07:07.875]             `+` <- base::`+`
[18:07:07.875]             `<<-` <- base::`<<-`
[18:07:07.875]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:07.875]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:07.875]                   3L)]
[18:07:07.875]             }
[18:07:07.875]             function(cond) {
[18:07:07.875]                 is_error <- inherits(cond, "error")
[18:07:07.875]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:07.875]                   NULL)
[18:07:07.875]                 if (is_error) {
[18:07:07.875]                   sessionInformation <- function() {
[18:07:07.875]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:07.875]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:07.875]                       search = base::search(), system = base::Sys.info())
[18:07:07.875]                   }
[18:07:07.875]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.875]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:07.875]                     cond$call), session = sessionInformation(), 
[18:07:07.875]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:07.875]                   signalCondition(cond)
[18:07:07.875]                 }
[18:07:07.875]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:07.875]                 "immediateCondition"))) {
[18:07:07.875]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:07.875]                   ...future.conditions[[length(...future.conditions) + 
[18:07:07.875]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:07.875]                   if (TRUE && !signal) {
[18:07:07.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.875]                     {
[18:07:07.875]                       inherits <- base::inherits
[18:07:07.875]                       invokeRestart <- base::invokeRestart
[18:07:07.875]                       is.null <- base::is.null
[18:07:07.875]                       muffled <- FALSE
[18:07:07.875]                       if (inherits(cond, "message")) {
[18:07:07.875]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.875]                         if (muffled) 
[18:07:07.875]                           invokeRestart("muffleMessage")
[18:07:07.875]                       }
[18:07:07.875]                       else if (inherits(cond, "warning")) {
[18:07:07.875]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.875]                         if (muffled) 
[18:07:07.875]                           invokeRestart("muffleWarning")
[18:07:07.875]                       }
[18:07:07.875]                       else if (inherits(cond, "condition")) {
[18:07:07.875]                         if (!is.null(pattern)) {
[18:07:07.875]                           computeRestarts <- base::computeRestarts
[18:07:07.875]                           grepl <- base::grepl
[18:07:07.875]                           restarts <- computeRestarts(cond)
[18:07:07.875]                           for (restart in restarts) {
[18:07:07.875]                             name <- restart$name
[18:07:07.875]                             if (is.null(name)) 
[18:07:07.875]                               next
[18:07:07.875]                             if (!grepl(pattern, name)) 
[18:07:07.875]                               next
[18:07:07.875]                             invokeRestart(restart)
[18:07:07.875]                             muffled <- TRUE
[18:07:07.875]                             break
[18:07:07.875]                           }
[18:07:07.875]                         }
[18:07:07.875]                       }
[18:07:07.875]                       invisible(muffled)
[18:07:07.875]                     }
[18:07:07.875]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.875]                   }
[18:07:07.875]                 }
[18:07:07.875]                 else {
[18:07:07.875]                   if (TRUE) {
[18:07:07.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:07.875]                     {
[18:07:07.875]                       inherits <- base::inherits
[18:07:07.875]                       invokeRestart <- base::invokeRestart
[18:07:07.875]                       is.null <- base::is.null
[18:07:07.875]                       muffled <- FALSE
[18:07:07.875]                       if (inherits(cond, "message")) {
[18:07:07.875]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:07.875]                         if (muffled) 
[18:07:07.875]                           invokeRestart("muffleMessage")
[18:07:07.875]                       }
[18:07:07.875]                       else if (inherits(cond, "warning")) {
[18:07:07.875]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:07.875]                         if (muffled) 
[18:07:07.875]                           invokeRestart("muffleWarning")
[18:07:07.875]                       }
[18:07:07.875]                       else if (inherits(cond, "condition")) {
[18:07:07.875]                         if (!is.null(pattern)) {
[18:07:07.875]                           computeRestarts <- base::computeRestarts
[18:07:07.875]                           grepl <- base::grepl
[18:07:07.875]                           restarts <- computeRestarts(cond)
[18:07:07.875]                           for (restart in restarts) {
[18:07:07.875]                             name <- restart$name
[18:07:07.875]                             if (is.null(name)) 
[18:07:07.875]                               next
[18:07:07.875]                             if (!grepl(pattern, name)) 
[18:07:07.875]                               next
[18:07:07.875]                             invokeRestart(restart)
[18:07:07.875]                             muffled <- TRUE
[18:07:07.875]                             break
[18:07:07.875]                           }
[18:07:07.875]                         }
[18:07:07.875]                       }
[18:07:07.875]                       invisible(muffled)
[18:07:07.875]                     }
[18:07:07.875]                     muffleCondition(cond, pattern = "^muffle")
[18:07:07.875]                   }
[18:07:07.875]                 }
[18:07:07.875]             }
[18:07:07.875]         }))
[18:07:07.875]     }, error = function(ex) {
[18:07:07.875]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:07.875]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:07.875]                 ...future.rng), started = ...future.startTime, 
[18:07:07.875]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:07.875]             version = "1.8"), class = "FutureResult")
[18:07:07.875]     }, finally = {
[18:07:07.875]         if (!identical(...future.workdir, getwd())) 
[18:07:07.875]             setwd(...future.workdir)
[18:07:07.875]         {
[18:07:07.875]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:07.875]                 ...future.oldOptions$nwarnings <- NULL
[18:07:07.875]             }
[18:07:07.875]             base::options(...future.oldOptions)
[18:07:07.875]             if (.Platform$OS.type == "windows") {
[18:07:07.875]                 old_names <- names(...future.oldEnvVars)
[18:07:07.875]                 envs <- base::Sys.getenv()
[18:07:07.875]                 names <- names(envs)
[18:07:07.875]                 common <- intersect(names, old_names)
[18:07:07.875]                 added <- setdiff(names, old_names)
[18:07:07.875]                 removed <- setdiff(old_names, names)
[18:07:07.875]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:07.875]                   envs[common]]
[18:07:07.875]                 NAMES <- toupper(changed)
[18:07:07.875]                 args <- list()
[18:07:07.875]                 for (kk in seq_along(NAMES)) {
[18:07:07.875]                   name <- changed[[kk]]
[18:07:07.875]                   NAME <- NAMES[[kk]]
[18:07:07.875]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.875]                     next
[18:07:07.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.875]                 }
[18:07:07.875]                 NAMES <- toupper(added)
[18:07:07.875]                 for (kk in seq_along(NAMES)) {
[18:07:07.875]                   name <- added[[kk]]
[18:07:07.875]                   NAME <- NAMES[[kk]]
[18:07:07.875]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.875]                     next
[18:07:07.875]                   args[[name]] <- ""
[18:07:07.875]                 }
[18:07:07.875]                 NAMES <- toupper(removed)
[18:07:07.875]                 for (kk in seq_along(NAMES)) {
[18:07:07.875]                   name <- removed[[kk]]
[18:07:07.875]                   NAME <- NAMES[[kk]]
[18:07:07.875]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:07.875]                     next
[18:07:07.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:07.875]                 }
[18:07:07.875]                 if (length(args) > 0) 
[18:07:07.875]                   base::do.call(base::Sys.setenv, args = args)
[18:07:07.875]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:07.875]             }
[18:07:07.875]             else {
[18:07:07.875]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:07.875]             }
[18:07:07.875]             {
[18:07:07.875]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:07.875]                   0L) {
[18:07:07.875]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:07.875]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:07.875]                   base::options(opts)
[18:07:07.875]                 }
[18:07:07.875]                 {
[18:07:07.875]                   {
[18:07:07.875]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:07.875]                     NULL
[18:07:07.875]                   }
[18:07:07.875]                   options(future.plan = NULL)
[18:07:07.875]                   if (is.na(NA_character_)) 
[18:07:07.875]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:07.875]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:07.875]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:07.875]                     .init = FALSE)
[18:07:07.875]                 }
[18:07:07.875]             }
[18:07:07.875]         }
[18:07:07.875]     })
[18:07:07.875]     if (TRUE) {
[18:07:07.875]         base::sink(type = "output", split = FALSE)
[18:07:07.875]         if (TRUE) {
[18:07:07.875]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:07.875]         }
[18:07:07.875]         else {
[18:07:07.875]             ...future.result["stdout"] <- base::list(NULL)
[18:07:07.875]         }
[18:07:07.875]         base::close(...future.stdout)
[18:07:07.875]         ...future.stdout <- NULL
[18:07:07.875]     }
[18:07:07.875]     ...future.result$conditions <- ...future.conditions
[18:07:07.875]     ...future.result$finished <- base::Sys.time()
[18:07:07.875]     ...future.result
[18:07:07.875] }
[18:07:07.879] requestCore(): workers = 2
[18:07:07.883] MulticoreFuture started
[18:07:07.884] - Launch lazy future ... done
[18:07:07.884] run() for ‘MulticoreFuture’ ... done
[18:07:07.885] result() for MulticoreFuture ...
[18:07:07.885] plan(): Setting new future strategy stack:
[18:07:07.885] List of future strategies:
[18:07:07.885] 1. sequential:
[18:07:07.885]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:07.885]    - tweaked: FALSE
[18:07:07.885]    - call: NULL
[18:07:07.887] plan(): nbrOfWorkers() = 1
[18:07:07.891] plan(): Setting new future strategy stack:
[18:07:07.892] List of future strategies:
[18:07:07.892] 1. multicore:
[18:07:07.892]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:07:07.892]    - tweaked: FALSE
[18:07:07.892]    - call: plan(strategy)
[18:07:07.901] plan(): nbrOfWorkers() = 2
[18:07:07.902] result() for MulticoreFuture ...
[18:07:07.903] result() for MulticoreFuture ... done
[18:07:07.903] result() for MulticoreFuture ... done
[18:07:07.903] result() for MulticoreFuture ...
[18:07:07.904] result() for MulticoreFuture ... done
[18:07:07.904] result() for MulticoreFuture ...
[18:07:07.904] result() for MulticoreFuture ... done
[1] 42
[18:07:07.905] result() for MulticoreFuture ...
[18:07:07.905] result() for MulticoreFuture ... done
multicore ... done
multisession ...
[18:07:07.906] plan(): Setting new future strategy stack:
[18:07:07.906] List of future strategies:
[18:07:07.906] 1. multisession:
[18:07:07.906]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:07.906]    - tweaked: FALSE
[18:07:07.906]    - call: plan(strategy)
[18:07:07.907] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:07:07.907] multisession:
[18:07:07.907] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:07:07.907] - tweaked: FALSE
[18:07:07.907] - call: plan(strategy)
[18:07:07.919] getGlobalsAndPackages() ...
[18:07:07.919] Not searching for globals
[18:07:07.920] - globals: [0] <none>
[18:07:07.920] getGlobalsAndPackages() ... DONE
[18:07:07.921] [local output] makeClusterPSOCK() ...
[18:07:07.989] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:07:07.991] [local output] Base port: 11877
[18:07:07.991] [local output] Getting setup options for 2 cluster nodes ...
[18:07:07.991] [local output]  - Node 1 of 2 ...
[18:07:07.992] [local output] localMachine=TRUE => revtunnel=FALSE

[18:07:07.994] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpdPFVwp/worker.rank=1.parallelly.parent=331263.50dff4fd01df.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpdPFVwp/worker.rank=1.parallelly.parent=331263.50dff4fd01df.pid")'’
[18:07:08.265] - Possible to infer worker's PID: TRUE
[18:07:08.265] [local output] Rscript port: 11877

[18:07:08.266] [local output]  - Node 2 of 2 ...
[18:07:08.268] [local output] localMachine=TRUE => revtunnel=FALSE

[18:07:08.269] [local output] Rscript port: 11877

[18:07:08.270] [local output] Getting setup options for 2 cluster nodes ... done
[18:07:08.270] [local output]  - Parallel setup requested for some PSOCK nodes
[18:07:08.271] [local output] Setting up PSOCK nodes in parallel
[18:07:08.271] List of 36
[18:07:08.271]  $ worker          : chr "localhost"
[18:07:08.271]   ..- attr(*, "localhost")= logi TRUE
[18:07:08.271]  $ master          : chr "localhost"
[18:07:08.271]  $ port            : int 11877
[18:07:08.271]  $ connectTimeout  : num 120
[18:07:08.271]  $ timeout         : num 2592000
[18:07:08.271]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:07:08.271]  $ homogeneous     : logi TRUE
[18:07:08.271]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:07:08.271]  $ rscript_envs    : NULL
[18:07:08.271]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:07:08.271]  $ rscript_startup : NULL
[18:07:08.271]  $ rscript_sh      : chr "sh"
[18:07:08.271]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:07:08.271]  $ methods         : logi TRUE
[18:07:08.271]  $ socketOptions   : chr "no-delay"
[18:07:08.271]  $ useXDR          : logi FALSE
[18:07:08.271]  $ outfile         : chr "/dev/null"
[18:07:08.271]  $ renice          : int NA
[18:07:08.271]  $ rshcmd          : NULL
[18:07:08.271]  $ user            : chr(0) 
[18:07:08.271]  $ revtunnel       : logi FALSE
[18:07:08.271]  $ rshlogfile      : NULL
[18:07:08.271]  $ rshopts         : chr(0) 
[18:07:08.271]  $ rank            : int 1
[18:07:08.271]  $ manual          : logi FALSE
[18:07:08.271]  $ dryrun          : logi FALSE
[18:07:08.271]  $ quiet           : logi FALSE
[18:07:08.271]  $ setup_strategy  : chr "parallel"
[18:07:08.271]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:07:08.271]  $ pidfile         : chr "/tmp/RtmpdPFVwp/worker.rank=1.parallelly.parent=331263.50dff4fd01df.pid"
[18:07:08.271]  $ rshcmd_label    : NULL
[18:07:08.271]  $ rsh_call        : NULL
[18:07:08.271]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:07:08.271]  $ localMachine    : logi TRUE
[18:07:08.271]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:07:08.271]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:07:08.271]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:07:08.271]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:07:08.271]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:07:08.271]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:07:08.271]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:07:08.271]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:07:08.271]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:07:08.271]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:07:08.271]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:07:08.271]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:07:08.271]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:07:08.271]  $ arguments       :List of 28
[18:07:08.271]   ..$ worker          : chr "localhost"
[18:07:08.271]   ..$ master          : NULL
[18:07:08.271]   ..$ port            : int 11877
[18:07:08.271]   ..$ connectTimeout  : num 120
[18:07:08.271]   ..$ timeout         : num 2592000
[18:07:08.271]   ..$ rscript         : NULL
[18:07:08.271]   ..$ homogeneous     : NULL
[18:07:08.271]   ..$ rscript_args    : NULL
[18:07:08.271]   ..$ rscript_envs    : NULL
[18:07:08.271]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:07:08.271]   ..$ rscript_startup : NULL
[18:07:08.271]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:07:08.271]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:07:08.271]   ..$ methods         : logi TRUE
[18:07:08.271]   ..$ socketOptions   : chr "no-delay"
[18:07:08.271]   ..$ useXDR          : logi FALSE
[18:07:08.271]   ..$ outfile         : chr "/dev/null"
[18:07:08.271]   ..$ renice          : int NA
[18:07:08.271]   ..$ rshcmd          : NULL
[18:07:08.271]   ..$ user            : NULL
[18:07:08.271]   ..$ revtunnel       : logi NA
[18:07:08.271]   ..$ rshlogfile      : NULL
[18:07:08.271]   ..$ rshopts         : NULL
[18:07:08.271]   ..$ rank            : int 1
[18:07:08.271]   ..$ manual          : logi FALSE
[18:07:08.271]   ..$ dryrun          : logi FALSE
[18:07:08.271]   ..$ quiet           : logi FALSE
[18:07:08.271]   ..$ setup_strategy  : chr "parallel"
[18:07:08.271]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:07:08.305] [local output] System call to launch all workers:
[18:07:08.306] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpdPFVwp/worker.rank=1.parallelly.parent=331263.50dff4fd01df.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11877 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:07:08.306] [local output] Starting PSOCK main server
[18:07:08.316] [local output] Workers launched
[18:07:08.316] [local output] Waiting for workers to connect back
[18:07:08.316]  - [local output] 0 workers out of 2 ready
[18:07:08.654]  - [local output] 0 workers out of 2 ready
[18:07:08.655]  - [local output] 1 workers out of 2 ready
[18:07:08.720]  - [local output] 1 workers out of 2 ready
[18:07:08.720]  - [local output] 2 workers out of 2 ready
[18:07:08.720] [local output] Launching of workers completed
[18:07:08.721] [local output] Collecting session information from workers
[18:07:08.722] [local output]  - Worker #1 of 2
[18:07:08.723] [local output]  - Worker #2 of 2
[18:07:08.724] [local output] makeClusterPSOCK() ... done
[18:07:08.743] Packages needed by the future expression (n = 0): <none>
[18:07:08.744] Packages needed by future strategies (n = 0): <none>
[18:07:08.744] {
[18:07:08.744]     {
[18:07:08.744]         {
[18:07:08.744]             ...future.startTime <- base::Sys.time()
[18:07:08.744]             {
[18:07:08.744]                 {
[18:07:08.744]                   {
[18:07:08.744]                     {
[18:07:08.744]                       base::local({
[18:07:08.744]                         has_future <- base::requireNamespace("future", 
[18:07:08.744]                           quietly = TRUE)
[18:07:08.744]                         if (has_future) {
[18:07:08.744]                           ns <- base::getNamespace("future")
[18:07:08.744]                           version <- ns[[".package"]][["version"]]
[18:07:08.744]                           if (is.null(version)) 
[18:07:08.744]                             version <- utils::packageVersion("future")
[18:07:08.744]                         }
[18:07:08.744]                         else {
[18:07:08.744]                           version <- NULL
[18:07:08.744]                         }
[18:07:08.744]                         if (!has_future || version < "1.8.0") {
[18:07:08.744]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:08.744]                             "", base::R.version$version.string), 
[18:07:08.744]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:08.744]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:08.744]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:08.744]                               "release", "version")], collapse = " "), 
[18:07:08.744]                             hostname = base::Sys.info()[["nodename"]])
[18:07:08.744]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:08.744]                             info)
[18:07:08.744]                           info <- base::paste(info, collapse = "; ")
[18:07:08.744]                           if (!has_future) {
[18:07:08.744]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:08.744]                               info)
[18:07:08.744]                           }
[18:07:08.744]                           else {
[18:07:08.744]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:08.744]                               info, version)
[18:07:08.744]                           }
[18:07:08.744]                           base::stop(msg)
[18:07:08.744]                         }
[18:07:08.744]                       })
[18:07:08.744]                     }
[18:07:08.744]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:08.744]                     base::options(mc.cores = 1L)
[18:07:08.744]                   }
[18:07:08.744]                   ...future.strategy.old <- future::plan("list")
[18:07:08.744]                   options(future.plan = NULL)
[18:07:08.744]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:08.744]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:08.744]                 }
[18:07:08.744]                 ...future.workdir <- getwd()
[18:07:08.744]             }
[18:07:08.744]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:08.744]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:08.744]         }
[18:07:08.744]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:08.744]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:08.744]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:08.744]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:08.744]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:08.744]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:08.744]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:08.744]             base::names(...future.oldOptions))
[18:07:08.744]     }
[18:07:08.744]     if (FALSE) {
[18:07:08.744]     }
[18:07:08.744]     else {
[18:07:08.744]         if (TRUE) {
[18:07:08.744]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:08.744]                 open = "w")
[18:07:08.744]         }
[18:07:08.744]         else {
[18:07:08.744]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:08.744]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:08.744]         }
[18:07:08.744]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:08.744]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:08.744]             base::sink(type = "output", split = FALSE)
[18:07:08.744]             base::close(...future.stdout)
[18:07:08.744]         }, add = TRUE)
[18:07:08.744]     }
[18:07:08.744]     ...future.frame <- base::sys.nframe()
[18:07:08.744]     ...future.conditions <- base::list()
[18:07:08.744]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:08.744]     if (FALSE) {
[18:07:08.744]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:08.744]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:08.744]     }
[18:07:08.744]     ...future.result <- base::tryCatch({
[18:07:08.744]         base::withCallingHandlers({
[18:07:08.744]             ...future.value <- base::withVisible(base::local({
[18:07:08.744]                 ...future.makeSendCondition <- base::local({
[18:07:08.744]                   sendCondition <- NULL
[18:07:08.744]                   function(frame = 1L) {
[18:07:08.744]                     if (is.function(sendCondition)) 
[18:07:08.744]                       return(sendCondition)
[18:07:08.744]                     ns <- getNamespace("parallel")
[18:07:08.744]                     if (exists("sendData", mode = "function", 
[18:07:08.744]                       envir = ns)) {
[18:07:08.744]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:08.744]                         envir = ns)
[18:07:08.744]                       envir <- sys.frame(frame)
[18:07:08.744]                       master <- NULL
[18:07:08.744]                       while (!identical(envir, .GlobalEnv) && 
[18:07:08.744]                         !identical(envir, emptyenv())) {
[18:07:08.744]                         if (exists("master", mode = "list", envir = envir, 
[18:07:08.744]                           inherits = FALSE)) {
[18:07:08.744]                           master <- get("master", mode = "list", 
[18:07:08.744]                             envir = envir, inherits = FALSE)
[18:07:08.744]                           if (inherits(master, c("SOCKnode", 
[18:07:08.744]                             "SOCK0node"))) {
[18:07:08.744]                             sendCondition <<- function(cond) {
[18:07:08.744]                               data <- list(type = "VALUE", value = cond, 
[18:07:08.744]                                 success = TRUE)
[18:07:08.744]                               parallel_sendData(master, data)
[18:07:08.744]                             }
[18:07:08.744]                             return(sendCondition)
[18:07:08.744]                           }
[18:07:08.744]                         }
[18:07:08.744]                         frame <- frame + 1L
[18:07:08.744]                         envir <- sys.frame(frame)
[18:07:08.744]                       }
[18:07:08.744]                     }
[18:07:08.744]                     sendCondition <<- function(cond) NULL
[18:07:08.744]                   }
[18:07:08.744]                 })
[18:07:08.744]                 withCallingHandlers({
[18:07:08.744]                   NA
[18:07:08.744]                 }, immediateCondition = function(cond) {
[18:07:08.744]                   sendCondition <- ...future.makeSendCondition()
[18:07:08.744]                   sendCondition(cond)
[18:07:08.744]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:08.744]                   {
[18:07:08.744]                     inherits <- base::inherits
[18:07:08.744]                     invokeRestart <- base::invokeRestart
[18:07:08.744]                     is.null <- base::is.null
[18:07:08.744]                     muffled <- FALSE
[18:07:08.744]                     if (inherits(cond, "message")) {
[18:07:08.744]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:08.744]                       if (muffled) 
[18:07:08.744]                         invokeRestart("muffleMessage")
[18:07:08.744]                     }
[18:07:08.744]                     else if (inherits(cond, "warning")) {
[18:07:08.744]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:08.744]                       if (muffled) 
[18:07:08.744]                         invokeRestart("muffleWarning")
[18:07:08.744]                     }
[18:07:08.744]                     else if (inherits(cond, "condition")) {
[18:07:08.744]                       if (!is.null(pattern)) {
[18:07:08.744]                         computeRestarts <- base::computeRestarts
[18:07:08.744]                         grepl <- base::grepl
[18:07:08.744]                         restarts <- computeRestarts(cond)
[18:07:08.744]                         for (restart in restarts) {
[18:07:08.744]                           name <- restart$name
[18:07:08.744]                           if (is.null(name)) 
[18:07:08.744]                             next
[18:07:08.744]                           if (!grepl(pattern, name)) 
[18:07:08.744]                             next
[18:07:08.744]                           invokeRestart(restart)
[18:07:08.744]                           muffled <- TRUE
[18:07:08.744]                           break
[18:07:08.744]                         }
[18:07:08.744]                       }
[18:07:08.744]                     }
[18:07:08.744]                     invisible(muffled)
[18:07:08.744]                   }
[18:07:08.744]                   muffleCondition(cond)
[18:07:08.744]                 })
[18:07:08.744]             }))
[18:07:08.744]             future::FutureResult(value = ...future.value$value, 
[18:07:08.744]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:08.744]                   ...future.rng), globalenv = if (FALSE) 
[18:07:08.744]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:08.744]                     ...future.globalenv.names))
[18:07:08.744]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:08.744]         }, condition = base::local({
[18:07:08.744]             c <- base::c
[18:07:08.744]             inherits <- base::inherits
[18:07:08.744]             invokeRestart <- base::invokeRestart
[18:07:08.744]             length <- base::length
[18:07:08.744]             list <- base::list
[18:07:08.744]             seq.int <- base::seq.int
[18:07:08.744]             signalCondition <- base::signalCondition
[18:07:08.744]             sys.calls <- base::sys.calls
[18:07:08.744]             `[[` <- base::`[[`
[18:07:08.744]             `+` <- base::`+`
[18:07:08.744]             `<<-` <- base::`<<-`
[18:07:08.744]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:08.744]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:08.744]                   3L)]
[18:07:08.744]             }
[18:07:08.744]             function(cond) {
[18:07:08.744]                 is_error <- inherits(cond, "error")
[18:07:08.744]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:08.744]                   NULL)
[18:07:08.744]                 if (is_error) {
[18:07:08.744]                   sessionInformation <- function() {
[18:07:08.744]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:08.744]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:08.744]                       search = base::search(), system = base::Sys.info())
[18:07:08.744]                   }
[18:07:08.744]                   ...future.conditions[[length(...future.conditions) + 
[18:07:08.744]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:08.744]                     cond$call), session = sessionInformation(), 
[18:07:08.744]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:08.744]                   signalCondition(cond)
[18:07:08.744]                 }
[18:07:08.744]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:08.744]                 "immediateCondition"))) {
[18:07:08.744]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:08.744]                   ...future.conditions[[length(...future.conditions) + 
[18:07:08.744]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:08.744]                   if (TRUE && !signal) {
[18:07:08.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:08.744]                     {
[18:07:08.744]                       inherits <- base::inherits
[18:07:08.744]                       invokeRestart <- base::invokeRestart
[18:07:08.744]                       is.null <- base::is.null
[18:07:08.744]                       muffled <- FALSE
[18:07:08.744]                       if (inherits(cond, "message")) {
[18:07:08.744]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:08.744]                         if (muffled) 
[18:07:08.744]                           invokeRestart("muffleMessage")
[18:07:08.744]                       }
[18:07:08.744]                       else if (inherits(cond, "warning")) {
[18:07:08.744]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:08.744]                         if (muffled) 
[18:07:08.744]                           invokeRestart("muffleWarning")
[18:07:08.744]                       }
[18:07:08.744]                       else if (inherits(cond, "condition")) {
[18:07:08.744]                         if (!is.null(pattern)) {
[18:07:08.744]                           computeRestarts <- base::computeRestarts
[18:07:08.744]                           grepl <- base::grepl
[18:07:08.744]                           restarts <- computeRestarts(cond)
[18:07:08.744]                           for (restart in restarts) {
[18:07:08.744]                             name <- restart$name
[18:07:08.744]                             if (is.null(name)) 
[18:07:08.744]                               next
[18:07:08.744]                             if (!grepl(pattern, name)) 
[18:07:08.744]                               next
[18:07:08.744]                             invokeRestart(restart)
[18:07:08.744]                             muffled <- TRUE
[18:07:08.744]                             break
[18:07:08.744]                           }
[18:07:08.744]                         }
[18:07:08.744]                       }
[18:07:08.744]                       invisible(muffled)
[18:07:08.744]                     }
[18:07:08.744]                     muffleCondition(cond, pattern = "^muffle")
[18:07:08.744]                   }
[18:07:08.744]                 }
[18:07:08.744]                 else {
[18:07:08.744]                   if (TRUE) {
[18:07:08.744]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:08.744]                     {
[18:07:08.744]                       inherits <- base::inherits
[18:07:08.744]                       invokeRestart <- base::invokeRestart
[18:07:08.744]                       is.null <- base::is.null
[18:07:08.744]                       muffled <- FALSE
[18:07:08.744]                       if (inherits(cond, "message")) {
[18:07:08.744]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:08.744]                         if (muffled) 
[18:07:08.744]                           invokeRestart("muffleMessage")
[18:07:08.744]                       }
[18:07:08.744]                       else if (inherits(cond, "warning")) {
[18:07:08.744]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:08.744]                         if (muffled) 
[18:07:08.744]                           invokeRestart("muffleWarning")
[18:07:08.744]                       }
[18:07:08.744]                       else if (inherits(cond, "condition")) {
[18:07:08.744]                         if (!is.null(pattern)) {
[18:07:08.744]                           computeRestarts <- base::computeRestarts
[18:07:08.744]                           grepl <- base::grepl
[18:07:08.744]                           restarts <- computeRestarts(cond)
[18:07:08.744]                           for (restart in restarts) {
[18:07:08.744]                             name <- restart$name
[18:07:08.744]                             if (is.null(name)) 
[18:07:08.744]                               next
[18:07:08.744]                             if (!grepl(pattern, name)) 
[18:07:08.744]                               next
[18:07:08.744]                             invokeRestart(restart)
[18:07:08.744]                             muffled <- TRUE
[18:07:08.744]                             break
[18:07:08.744]                           }
[18:07:08.744]                         }
[18:07:08.744]                       }
[18:07:08.744]                       invisible(muffled)
[18:07:08.744]                     }
[18:07:08.744]                     muffleCondition(cond, pattern = "^muffle")
[18:07:08.744]                   }
[18:07:08.744]                 }
[18:07:08.744]             }
[18:07:08.744]         }))
[18:07:08.744]     }, error = function(ex) {
[18:07:08.744]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:08.744]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:08.744]                 ...future.rng), started = ...future.startTime, 
[18:07:08.744]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:08.744]             version = "1.8"), class = "FutureResult")
[18:07:08.744]     }, finally = {
[18:07:08.744]         if (!identical(...future.workdir, getwd())) 
[18:07:08.744]             setwd(...future.workdir)
[18:07:08.744]         {
[18:07:08.744]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:08.744]                 ...future.oldOptions$nwarnings <- NULL
[18:07:08.744]             }
[18:07:08.744]             base::options(...future.oldOptions)
[18:07:08.744]             if (.Platform$OS.type == "windows") {
[18:07:08.744]                 old_names <- names(...future.oldEnvVars)
[18:07:08.744]                 envs <- base::Sys.getenv()
[18:07:08.744]                 names <- names(envs)
[18:07:08.744]                 common <- intersect(names, old_names)
[18:07:08.744]                 added <- setdiff(names, old_names)
[18:07:08.744]                 removed <- setdiff(old_names, names)
[18:07:08.744]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:08.744]                   envs[common]]
[18:07:08.744]                 NAMES <- toupper(changed)
[18:07:08.744]                 args <- list()
[18:07:08.744]                 for (kk in seq_along(NAMES)) {
[18:07:08.744]                   name <- changed[[kk]]
[18:07:08.744]                   NAME <- NAMES[[kk]]
[18:07:08.744]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:08.744]                     next
[18:07:08.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:08.744]                 }
[18:07:08.744]                 NAMES <- toupper(added)
[18:07:08.744]                 for (kk in seq_along(NAMES)) {
[18:07:08.744]                   name <- added[[kk]]
[18:07:08.744]                   NAME <- NAMES[[kk]]
[18:07:08.744]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:08.744]                     next
[18:07:08.744]                   args[[name]] <- ""
[18:07:08.744]                 }
[18:07:08.744]                 NAMES <- toupper(removed)
[18:07:08.744]                 for (kk in seq_along(NAMES)) {
[18:07:08.744]                   name <- removed[[kk]]
[18:07:08.744]                   NAME <- NAMES[[kk]]
[18:07:08.744]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:08.744]                     next
[18:07:08.744]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:08.744]                 }
[18:07:08.744]                 if (length(args) > 0) 
[18:07:08.744]                   base::do.call(base::Sys.setenv, args = args)
[18:07:08.744]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:08.744]             }
[18:07:08.744]             else {
[18:07:08.744]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:08.744]             }
[18:07:08.744]             {
[18:07:08.744]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:08.744]                   0L) {
[18:07:08.744]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:08.744]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:08.744]                   base::options(opts)
[18:07:08.744]                 }
[18:07:08.744]                 {
[18:07:08.744]                   {
[18:07:08.744]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:08.744]                     NULL
[18:07:08.744]                   }
[18:07:08.744]                   options(future.plan = NULL)
[18:07:08.744]                   if (is.na(NA_character_)) 
[18:07:08.744]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:08.744]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:08.744]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:08.744]                     .init = FALSE)
[18:07:08.744]                 }
[18:07:08.744]             }
[18:07:08.744]         }
[18:07:08.744]     })
[18:07:08.744]     if (TRUE) {
[18:07:08.744]         base::sink(type = "output", split = FALSE)
[18:07:08.744]         if (TRUE) {
[18:07:08.744]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:08.744]         }
[18:07:08.744]         else {
[18:07:08.744]             ...future.result["stdout"] <- base::list(NULL)
[18:07:08.744]         }
[18:07:08.744]         base::close(...future.stdout)
[18:07:08.744]         ...future.stdout <- NULL
[18:07:08.744]     }
[18:07:08.744]     ...future.result$conditions <- ...future.conditions
[18:07:08.744]     ...future.result$finished <- base::Sys.time()
[18:07:08.744]     ...future.result
[18:07:08.744] }
[18:07:08.843] MultisessionFuture started
[18:07:08.843] result() for ClusterFuture ...
[18:07:08.846] receiveMessageFromWorker() for ClusterFuture ...
[18:07:08.847] - Validating connection of MultisessionFuture
[18:07:08.913] - received message: FutureResult
[18:07:08.914] - Received FutureResult
[18:07:08.914] - Erased future from FutureRegistry
[18:07:08.914] result() for ClusterFuture ...
[18:07:08.914] - result already collected: FutureResult
[18:07:08.914] result() for ClusterFuture ... done
[18:07:08.915] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:08.915] result() for ClusterFuture ... done
[18:07:08.915] result() for ClusterFuture ...
[18:07:08.915] - result already collected: FutureResult
[18:07:08.916] result() for ClusterFuture ... done
[18:07:08.916] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:07:08.922] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[18:07:08.922] getGlobalsAndPackages() ...
[18:07:08.923] Searching for globals...
[18:07:08.930] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:08.931] Searching for globals ... DONE
[18:07:08.931] Resolving globals: FALSE
[18:07:08.932] 
[18:07:08.932] - packages: [1] ‘utils’
[18:07:08.933] getGlobalsAndPackages() ... DONE
[18:07:08.933] run() for ‘Future’ ...
[18:07:08.933] - state: ‘created’
[18:07:08.934] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:08.958] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:08.959] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:08.959]   - Field: ‘node’
[18:07:08.959]   - Field: ‘label’
[18:07:08.959]   - Field: ‘local’
[18:07:08.959]   - Field: ‘owner’
[18:07:08.960]   - Field: ‘envir’
[18:07:08.960]   - Field: ‘workers’
[18:07:08.960]   - Field: ‘packages’
[18:07:08.961]   - Field: ‘gc’
[18:07:08.961]   - Field: ‘conditions’
[18:07:08.961]   - Field: ‘persistent’
[18:07:08.961]   - Field: ‘expr’
[18:07:08.962]   - Field: ‘uuid’
[18:07:08.962]   - Field: ‘seed’
[18:07:08.962]   - Field: ‘version’
[18:07:08.962]   - Field: ‘result’
[18:07:08.963]   - Field: ‘asynchronous’
[18:07:08.963]   - Field: ‘calls’
[18:07:08.963]   - Field: ‘globals’
[18:07:08.963]   - Field: ‘stdout’
[18:07:08.963]   - Field: ‘earlySignal’
[18:07:08.964]   - Field: ‘lazy’
[18:07:08.964]   - Field: ‘state’
[18:07:08.964] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:08.964] - Launch lazy future ...
[18:07:08.965] Packages needed by the future expression (n = 1): ‘utils’
[18:07:08.965] Packages needed by future strategies (n = 0): <none>
[18:07:08.967] {
[18:07:08.967]     {
[18:07:08.967]         {
[18:07:08.967]             ...future.startTime <- base::Sys.time()
[18:07:08.967]             {
[18:07:08.967]                 {
[18:07:08.967]                   {
[18:07:08.967]                     {
[18:07:08.967]                       {
[18:07:08.967]                         base::local({
[18:07:08.967]                           has_future <- base::requireNamespace("future", 
[18:07:08.967]                             quietly = TRUE)
[18:07:08.967]                           if (has_future) {
[18:07:08.967]                             ns <- base::getNamespace("future")
[18:07:08.967]                             version <- ns[[".package"]][["version"]]
[18:07:08.967]                             if (is.null(version)) 
[18:07:08.967]                               version <- utils::packageVersion("future")
[18:07:08.967]                           }
[18:07:08.967]                           else {
[18:07:08.967]                             version <- NULL
[18:07:08.967]                           }
[18:07:08.967]                           if (!has_future || version < "1.8.0") {
[18:07:08.967]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:08.967]                               "", base::R.version$version.string), 
[18:07:08.967]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:08.967]                                 base::R.version$platform, 8 * 
[18:07:08.967]                                   base::.Machine$sizeof.pointer), 
[18:07:08.967]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:08.967]                                 "release", "version")], collapse = " "), 
[18:07:08.967]                               hostname = base::Sys.info()[["nodename"]])
[18:07:08.967]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:08.967]                               info)
[18:07:08.967]                             info <- base::paste(info, collapse = "; ")
[18:07:08.967]                             if (!has_future) {
[18:07:08.967]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:08.967]                                 info)
[18:07:08.967]                             }
[18:07:08.967]                             else {
[18:07:08.967]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:08.967]                                 info, version)
[18:07:08.967]                             }
[18:07:08.967]                             base::stop(msg)
[18:07:08.967]                           }
[18:07:08.967]                         })
[18:07:08.967]                       }
[18:07:08.967]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:08.967]                       base::options(mc.cores = 1L)
[18:07:08.967]                     }
[18:07:08.967]                     base::local({
[18:07:08.967]                       for (pkg in "utils") {
[18:07:08.967]                         base::loadNamespace(pkg)
[18:07:08.967]                         base::library(pkg, character.only = TRUE)
[18:07:08.967]                       }
[18:07:08.967]                     })
[18:07:08.967]                   }
[18:07:08.967]                   ...future.strategy.old <- future::plan("list")
[18:07:08.967]                   options(future.plan = NULL)
[18:07:08.967]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:08.967]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:08.967]                 }
[18:07:08.967]                 ...future.workdir <- getwd()
[18:07:08.967]             }
[18:07:08.967]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:08.967]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:08.967]         }
[18:07:08.967]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:08.967]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:08.967]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:08.967]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:08.967]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:08.967]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:08.967]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:08.967]             base::names(...future.oldOptions))
[18:07:08.967]     }
[18:07:08.967]     if (FALSE) {
[18:07:08.967]     }
[18:07:08.967]     else {
[18:07:08.967]         if (TRUE) {
[18:07:08.967]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:08.967]                 open = "w")
[18:07:08.967]         }
[18:07:08.967]         else {
[18:07:08.967]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:08.967]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:08.967]         }
[18:07:08.967]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:08.967]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:08.967]             base::sink(type = "output", split = FALSE)
[18:07:08.967]             base::close(...future.stdout)
[18:07:08.967]         }, add = TRUE)
[18:07:08.967]     }
[18:07:08.967]     ...future.frame <- base::sys.nframe()
[18:07:08.967]     ...future.conditions <- base::list()
[18:07:08.967]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:08.967]     if (FALSE) {
[18:07:08.967]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:08.967]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:08.967]     }
[18:07:08.967]     ...future.result <- base::tryCatch({
[18:07:08.967]         base::withCallingHandlers({
[18:07:08.967]             ...future.value <- base::withVisible(base::local({
[18:07:08.967]                 ...future.makeSendCondition <- base::local({
[18:07:08.967]                   sendCondition <- NULL
[18:07:08.967]                   function(frame = 1L) {
[18:07:08.967]                     if (is.function(sendCondition)) 
[18:07:08.967]                       return(sendCondition)
[18:07:08.967]                     ns <- getNamespace("parallel")
[18:07:08.967]                     if (exists("sendData", mode = "function", 
[18:07:08.967]                       envir = ns)) {
[18:07:08.967]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:08.967]                         envir = ns)
[18:07:08.967]                       envir <- sys.frame(frame)
[18:07:08.967]                       master <- NULL
[18:07:08.967]                       while (!identical(envir, .GlobalEnv) && 
[18:07:08.967]                         !identical(envir, emptyenv())) {
[18:07:08.967]                         if (exists("master", mode = "list", envir = envir, 
[18:07:08.967]                           inherits = FALSE)) {
[18:07:08.967]                           master <- get("master", mode = "list", 
[18:07:08.967]                             envir = envir, inherits = FALSE)
[18:07:08.967]                           if (inherits(master, c("SOCKnode", 
[18:07:08.967]                             "SOCK0node"))) {
[18:07:08.967]                             sendCondition <<- function(cond) {
[18:07:08.967]                               data <- list(type = "VALUE", value = cond, 
[18:07:08.967]                                 success = TRUE)
[18:07:08.967]                               parallel_sendData(master, data)
[18:07:08.967]                             }
[18:07:08.967]                             return(sendCondition)
[18:07:08.967]                           }
[18:07:08.967]                         }
[18:07:08.967]                         frame <- frame + 1L
[18:07:08.967]                         envir <- sys.frame(frame)
[18:07:08.967]                       }
[18:07:08.967]                     }
[18:07:08.967]                     sendCondition <<- function(cond) NULL
[18:07:08.967]                   }
[18:07:08.967]                 })
[18:07:08.967]                 withCallingHandlers({
[18:07:08.967]                   {
[18:07:08.967]                     print(1:50)
[18:07:08.967]                     str(1:50)
[18:07:08.967]                     cat(letters, sep = "-")
[18:07:08.967]                     cat(1:6, collapse = "\n")
[18:07:08.967]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:08.967]                     42L
[18:07:08.967]                   }
[18:07:08.967]                 }, immediateCondition = function(cond) {
[18:07:08.967]                   sendCondition <- ...future.makeSendCondition()
[18:07:08.967]                   sendCondition(cond)
[18:07:08.967]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:08.967]                   {
[18:07:08.967]                     inherits <- base::inherits
[18:07:08.967]                     invokeRestart <- base::invokeRestart
[18:07:08.967]                     is.null <- base::is.null
[18:07:08.967]                     muffled <- FALSE
[18:07:08.967]                     if (inherits(cond, "message")) {
[18:07:08.967]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:08.967]                       if (muffled) 
[18:07:08.967]                         invokeRestart("muffleMessage")
[18:07:08.967]                     }
[18:07:08.967]                     else if (inherits(cond, "warning")) {
[18:07:08.967]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:08.967]                       if (muffled) 
[18:07:08.967]                         invokeRestart("muffleWarning")
[18:07:08.967]                     }
[18:07:08.967]                     else if (inherits(cond, "condition")) {
[18:07:08.967]                       if (!is.null(pattern)) {
[18:07:08.967]                         computeRestarts <- base::computeRestarts
[18:07:08.967]                         grepl <- base::grepl
[18:07:08.967]                         restarts <- computeRestarts(cond)
[18:07:08.967]                         for (restart in restarts) {
[18:07:08.967]                           name <- restart$name
[18:07:08.967]                           if (is.null(name)) 
[18:07:08.967]                             next
[18:07:08.967]                           if (!grepl(pattern, name)) 
[18:07:08.967]                             next
[18:07:08.967]                           invokeRestart(restart)
[18:07:08.967]                           muffled <- TRUE
[18:07:08.967]                           break
[18:07:08.967]                         }
[18:07:08.967]                       }
[18:07:08.967]                     }
[18:07:08.967]                     invisible(muffled)
[18:07:08.967]                   }
[18:07:08.967]                   muffleCondition(cond)
[18:07:08.967]                 })
[18:07:08.967]             }))
[18:07:08.967]             future::FutureResult(value = ...future.value$value, 
[18:07:08.967]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:08.967]                   ...future.rng), globalenv = if (FALSE) 
[18:07:08.967]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:08.967]                     ...future.globalenv.names))
[18:07:08.967]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:08.967]         }, condition = base::local({
[18:07:08.967]             c <- base::c
[18:07:08.967]             inherits <- base::inherits
[18:07:08.967]             invokeRestart <- base::invokeRestart
[18:07:08.967]             length <- base::length
[18:07:08.967]             list <- base::list
[18:07:08.967]             seq.int <- base::seq.int
[18:07:08.967]             signalCondition <- base::signalCondition
[18:07:08.967]             sys.calls <- base::sys.calls
[18:07:08.967]             `[[` <- base::`[[`
[18:07:08.967]             `+` <- base::`+`
[18:07:08.967]             `<<-` <- base::`<<-`
[18:07:08.967]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:08.967]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:08.967]                   3L)]
[18:07:08.967]             }
[18:07:08.967]             function(cond) {
[18:07:08.967]                 is_error <- inherits(cond, "error")
[18:07:08.967]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:08.967]                   NULL)
[18:07:08.967]                 if (is_error) {
[18:07:08.967]                   sessionInformation <- function() {
[18:07:08.967]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:08.967]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:08.967]                       search = base::search(), system = base::Sys.info())
[18:07:08.967]                   }
[18:07:08.967]                   ...future.conditions[[length(...future.conditions) + 
[18:07:08.967]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:08.967]                     cond$call), session = sessionInformation(), 
[18:07:08.967]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:08.967]                   signalCondition(cond)
[18:07:08.967]                 }
[18:07:08.967]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:08.967]                 "immediateCondition"))) {
[18:07:08.967]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:08.967]                   ...future.conditions[[length(...future.conditions) + 
[18:07:08.967]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:08.967]                   if (TRUE && !signal) {
[18:07:08.967]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:08.967]                     {
[18:07:08.967]                       inherits <- base::inherits
[18:07:08.967]                       invokeRestart <- base::invokeRestart
[18:07:08.967]                       is.null <- base::is.null
[18:07:08.967]                       muffled <- FALSE
[18:07:08.967]                       if (inherits(cond, "message")) {
[18:07:08.967]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:08.967]                         if (muffled) 
[18:07:08.967]                           invokeRestart("muffleMessage")
[18:07:08.967]                       }
[18:07:08.967]                       else if (inherits(cond, "warning")) {
[18:07:08.967]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:08.967]                         if (muffled) 
[18:07:08.967]                           invokeRestart("muffleWarning")
[18:07:08.967]                       }
[18:07:08.967]                       else if (inherits(cond, "condition")) {
[18:07:08.967]                         if (!is.null(pattern)) {
[18:07:08.967]                           computeRestarts <- base::computeRestarts
[18:07:08.967]                           grepl <- base::grepl
[18:07:08.967]                           restarts <- computeRestarts(cond)
[18:07:08.967]                           for (restart in restarts) {
[18:07:08.967]                             name <- restart$name
[18:07:08.967]                             if (is.null(name)) 
[18:07:08.967]                               next
[18:07:08.967]                             if (!grepl(pattern, name)) 
[18:07:08.967]                               next
[18:07:08.967]                             invokeRestart(restart)
[18:07:08.967]                             muffled <- TRUE
[18:07:08.967]                             break
[18:07:08.967]                           }
[18:07:08.967]                         }
[18:07:08.967]                       }
[18:07:08.967]                       invisible(muffled)
[18:07:08.967]                     }
[18:07:08.967]                     muffleCondition(cond, pattern = "^muffle")
[18:07:08.967]                   }
[18:07:08.967]                 }
[18:07:08.967]                 else {
[18:07:08.967]                   if (TRUE) {
[18:07:08.967]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:08.967]                     {
[18:07:08.967]                       inherits <- base::inherits
[18:07:08.967]                       invokeRestart <- base::invokeRestart
[18:07:08.967]                       is.null <- base::is.null
[18:07:08.967]                       muffled <- FALSE
[18:07:08.967]                       if (inherits(cond, "message")) {
[18:07:08.967]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:08.967]                         if (muffled) 
[18:07:08.967]                           invokeRestart("muffleMessage")
[18:07:08.967]                       }
[18:07:08.967]                       else if (inherits(cond, "warning")) {
[18:07:08.967]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:08.967]                         if (muffled) 
[18:07:08.967]                           invokeRestart("muffleWarning")
[18:07:08.967]                       }
[18:07:08.967]                       else if (inherits(cond, "condition")) {
[18:07:08.967]                         if (!is.null(pattern)) {
[18:07:08.967]                           computeRestarts <- base::computeRestarts
[18:07:08.967]                           grepl <- base::grepl
[18:07:08.967]                           restarts <- computeRestarts(cond)
[18:07:08.967]                           for (restart in restarts) {
[18:07:08.967]                             name <- restart$name
[18:07:08.967]                             if (is.null(name)) 
[18:07:08.967]                               next
[18:07:08.967]                             if (!grepl(pattern, name)) 
[18:07:08.967]                               next
[18:07:08.967]                             invokeRestart(restart)
[18:07:08.967]                             muffled <- TRUE
[18:07:08.967]                             break
[18:07:08.967]                           }
[18:07:08.967]                         }
[18:07:08.967]                       }
[18:07:08.967]                       invisible(muffled)
[18:07:08.967]                     }
[18:07:08.967]                     muffleCondition(cond, pattern = "^muffle")
[18:07:08.967]                   }
[18:07:08.967]                 }
[18:07:08.967]             }
[18:07:08.967]         }))
[18:07:08.967]     }, error = function(ex) {
[18:07:08.967]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:08.967]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:08.967]                 ...future.rng), started = ...future.startTime, 
[18:07:08.967]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:08.967]             version = "1.8"), class = "FutureResult")
[18:07:08.967]     }, finally = {
[18:07:08.967]         if (!identical(...future.workdir, getwd())) 
[18:07:08.967]             setwd(...future.workdir)
[18:07:08.967]         {
[18:07:08.967]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:08.967]                 ...future.oldOptions$nwarnings <- NULL
[18:07:08.967]             }
[18:07:08.967]             base::options(...future.oldOptions)
[18:07:08.967]             if (.Platform$OS.type == "windows") {
[18:07:08.967]                 old_names <- names(...future.oldEnvVars)
[18:07:08.967]                 envs <- base::Sys.getenv()
[18:07:08.967]                 names <- names(envs)
[18:07:08.967]                 common <- intersect(names, old_names)
[18:07:08.967]                 added <- setdiff(names, old_names)
[18:07:08.967]                 removed <- setdiff(old_names, names)
[18:07:08.967]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:08.967]                   envs[common]]
[18:07:08.967]                 NAMES <- toupper(changed)
[18:07:08.967]                 args <- list()
[18:07:08.967]                 for (kk in seq_along(NAMES)) {
[18:07:08.967]                   name <- changed[[kk]]
[18:07:08.967]                   NAME <- NAMES[[kk]]
[18:07:08.967]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:08.967]                     next
[18:07:08.967]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:08.967]                 }
[18:07:08.967]                 NAMES <- toupper(added)
[18:07:08.967]                 for (kk in seq_along(NAMES)) {
[18:07:08.967]                   name <- added[[kk]]
[18:07:08.967]                   NAME <- NAMES[[kk]]
[18:07:08.967]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:08.967]                     next
[18:07:08.967]                   args[[name]] <- ""
[18:07:08.967]                 }
[18:07:08.967]                 NAMES <- toupper(removed)
[18:07:08.967]                 for (kk in seq_along(NAMES)) {
[18:07:08.967]                   name <- removed[[kk]]
[18:07:08.967]                   NAME <- NAMES[[kk]]
[18:07:08.967]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:08.967]                     next
[18:07:08.967]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:08.967]                 }
[18:07:08.967]                 if (length(args) > 0) 
[18:07:08.967]                   base::do.call(base::Sys.setenv, args = args)
[18:07:08.967]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:08.967]             }
[18:07:08.967]             else {
[18:07:08.967]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:08.967]             }
[18:07:08.967]             {
[18:07:08.967]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:08.967]                   0L) {
[18:07:08.967]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:08.967]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:08.967]                   base::options(opts)
[18:07:08.967]                 }
[18:07:08.967]                 {
[18:07:08.967]                   {
[18:07:08.967]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:08.967]                     NULL
[18:07:08.967]                   }
[18:07:08.967]                   options(future.plan = NULL)
[18:07:08.967]                   if (is.na(NA_character_)) 
[18:07:08.967]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:08.967]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:08.967]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:08.967]                     .init = FALSE)
[18:07:08.967]                 }
[18:07:08.967]             }
[18:07:08.967]         }
[18:07:08.967]     })
[18:07:08.967]     if (TRUE) {
[18:07:08.967]         base::sink(type = "output", split = FALSE)
[18:07:08.967]         if (TRUE) {
[18:07:08.967]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:08.967]         }
[18:07:08.967]         else {
[18:07:08.967]             ...future.result["stdout"] <- base::list(NULL)
[18:07:08.967]         }
[18:07:08.967]         base::close(...future.stdout)
[18:07:08.967]         ...future.stdout <- NULL
[18:07:08.967]     }
[18:07:08.967]     ...future.result$conditions <- ...future.conditions
[18:07:08.967]     ...future.result$finished <- base::Sys.time()
[18:07:08.967]     ...future.result
[18:07:08.967] }
[18:07:08.973] MultisessionFuture started
[18:07:08.973] - Launch lazy future ... done
[18:07:08.974] run() for ‘MultisessionFuture’ ... done
[18:07:08.974] result() for ClusterFuture ...
[18:07:08.974] receiveMessageFromWorker() for ClusterFuture ...
[18:07:08.975] - Validating connection of MultisessionFuture
[18:07:09.032] - received message: FutureResult
[18:07:09.032] - Received FutureResult
[18:07:09.033] - Erased future from FutureRegistry
[18:07:09.033] result() for ClusterFuture ...
[18:07:09.033] - result already collected: FutureResult
[18:07:09.034] result() for ClusterFuture ... done
[18:07:09.034] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.034] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:09"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:09"
 $ session_uuid: chr "ae84f6b1-b3fd-1f6b-c137-b528d88a308b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331374
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:08"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[18:07:09.054] result() for ClusterFuture ...
[18:07:09.055] - result already collected: FutureResult
[18:07:09.055] result() for ClusterFuture ... done
[18:07:09.055] result() for ClusterFuture ...
[18:07:09.055] - result already collected: FutureResult
[18:07:09.056] result() for ClusterFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.017344 secs (started 2024-11-21 18:07:09.014712)
version: 1.8
[18:07:09.057] getGlobalsAndPackages() ...
[18:07:09.057] Searching for globals...
[18:07:09.066] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:09.066] Searching for globals ... DONE
[18:07:09.067] Resolving globals: FALSE
[18:07:09.068] 
[18:07:09.068] - packages: [1] ‘utils’
[18:07:09.069] getGlobalsAndPackages() ... DONE
[18:07:09.069] run() for ‘Future’ ...
[18:07:09.070] - state: ‘created’
[18:07:09.070] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:09.095] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:09.096] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:09.096]   - Field: ‘node’
[18:07:09.096]   - Field: ‘label’
[18:07:09.096]   - Field: ‘local’
[18:07:09.097]   - Field: ‘owner’
[18:07:09.097]   - Field: ‘envir’
[18:07:09.097]   - Field: ‘workers’
[18:07:09.097]   - Field: ‘packages’
[18:07:09.097]   - Field: ‘gc’
[18:07:09.098]   - Field: ‘conditions’
[18:07:09.098]   - Field: ‘persistent’
[18:07:09.098]   - Field: ‘expr’
[18:07:09.098]   - Field: ‘uuid’
[18:07:09.099]   - Field: ‘seed’
[18:07:09.099]   - Field: ‘version’
[18:07:09.099]   - Field: ‘result’
[18:07:09.099]   - Field: ‘asynchronous’
[18:07:09.100]   - Field: ‘calls’
[18:07:09.100]   - Field: ‘globals’
[18:07:09.100]   - Field: ‘stdout’
[18:07:09.100]   - Field: ‘earlySignal’
[18:07:09.100]   - Field: ‘lazy’
[18:07:09.101]   - Field: ‘state’
[18:07:09.101] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:09.101] - Launch lazy future ...
[18:07:09.102] Packages needed by the future expression (n = 1): ‘utils’
[18:07:09.102] Packages needed by future strategies (n = 0): <none>
[18:07:09.103] {
[18:07:09.103]     {
[18:07:09.103]         {
[18:07:09.103]             ...future.startTime <- base::Sys.time()
[18:07:09.103]             {
[18:07:09.103]                 {
[18:07:09.103]                   {
[18:07:09.103]                     {
[18:07:09.103]                       {
[18:07:09.103]                         base::local({
[18:07:09.103]                           has_future <- base::requireNamespace("future", 
[18:07:09.103]                             quietly = TRUE)
[18:07:09.103]                           if (has_future) {
[18:07:09.103]                             ns <- base::getNamespace("future")
[18:07:09.103]                             version <- ns[[".package"]][["version"]]
[18:07:09.103]                             if (is.null(version)) 
[18:07:09.103]                               version <- utils::packageVersion("future")
[18:07:09.103]                           }
[18:07:09.103]                           else {
[18:07:09.103]                             version <- NULL
[18:07:09.103]                           }
[18:07:09.103]                           if (!has_future || version < "1.8.0") {
[18:07:09.103]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:09.103]                               "", base::R.version$version.string), 
[18:07:09.103]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:09.103]                                 base::R.version$platform, 8 * 
[18:07:09.103]                                   base::.Machine$sizeof.pointer), 
[18:07:09.103]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:09.103]                                 "release", "version")], collapse = " "), 
[18:07:09.103]                               hostname = base::Sys.info()[["nodename"]])
[18:07:09.103]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:09.103]                               info)
[18:07:09.103]                             info <- base::paste(info, collapse = "; ")
[18:07:09.103]                             if (!has_future) {
[18:07:09.103]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:09.103]                                 info)
[18:07:09.103]                             }
[18:07:09.103]                             else {
[18:07:09.103]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:09.103]                                 info, version)
[18:07:09.103]                             }
[18:07:09.103]                             base::stop(msg)
[18:07:09.103]                           }
[18:07:09.103]                         })
[18:07:09.103]                       }
[18:07:09.103]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:09.103]                       base::options(mc.cores = 1L)
[18:07:09.103]                     }
[18:07:09.103]                     base::local({
[18:07:09.103]                       for (pkg in "utils") {
[18:07:09.103]                         base::loadNamespace(pkg)
[18:07:09.103]                         base::library(pkg, character.only = TRUE)
[18:07:09.103]                       }
[18:07:09.103]                     })
[18:07:09.103]                   }
[18:07:09.103]                   ...future.strategy.old <- future::plan("list")
[18:07:09.103]                   options(future.plan = NULL)
[18:07:09.103]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.103]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:09.103]                 }
[18:07:09.103]                 ...future.workdir <- getwd()
[18:07:09.103]             }
[18:07:09.103]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:09.103]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:09.103]         }
[18:07:09.103]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:09.103]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:09.103]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:09.103]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:09.103]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:09.103]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:09.103]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:09.103]             base::names(...future.oldOptions))
[18:07:09.103]     }
[18:07:09.103]     if (FALSE) {
[18:07:09.103]     }
[18:07:09.103]     else {
[18:07:09.103]         if (TRUE) {
[18:07:09.103]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:09.103]                 open = "w")
[18:07:09.103]         }
[18:07:09.103]         else {
[18:07:09.103]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:09.103]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:09.103]         }
[18:07:09.103]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:09.103]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:09.103]             base::sink(type = "output", split = FALSE)
[18:07:09.103]             base::close(...future.stdout)
[18:07:09.103]         }, add = TRUE)
[18:07:09.103]     }
[18:07:09.103]     ...future.frame <- base::sys.nframe()
[18:07:09.103]     ...future.conditions <- base::list()
[18:07:09.103]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:09.103]     if (FALSE) {
[18:07:09.103]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:09.103]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:09.103]     }
[18:07:09.103]     ...future.result <- base::tryCatch({
[18:07:09.103]         base::withCallingHandlers({
[18:07:09.103]             ...future.value <- base::withVisible(base::local({
[18:07:09.103]                 ...future.makeSendCondition <- base::local({
[18:07:09.103]                   sendCondition <- NULL
[18:07:09.103]                   function(frame = 1L) {
[18:07:09.103]                     if (is.function(sendCondition)) 
[18:07:09.103]                       return(sendCondition)
[18:07:09.103]                     ns <- getNamespace("parallel")
[18:07:09.103]                     if (exists("sendData", mode = "function", 
[18:07:09.103]                       envir = ns)) {
[18:07:09.103]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:09.103]                         envir = ns)
[18:07:09.103]                       envir <- sys.frame(frame)
[18:07:09.103]                       master <- NULL
[18:07:09.103]                       while (!identical(envir, .GlobalEnv) && 
[18:07:09.103]                         !identical(envir, emptyenv())) {
[18:07:09.103]                         if (exists("master", mode = "list", envir = envir, 
[18:07:09.103]                           inherits = FALSE)) {
[18:07:09.103]                           master <- get("master", mode = "list", 
[18:07:09.103]                             envir = envir, inherits = FALSE)
[18:07:09.103]                           if (inherits(master, c("SOCKnode", 
[18:07:09.103]                             "SOCK0node"))) {
[18:07:09.103]                             sendCondition <<- function(cond) {
[18:07:09.103]                               data <- list(type = "VALUE", value = cond, 
[18:07:09.103]                                 success = TRUE)
[18:07:09.103]                               parallel_sendData(master, data)
[18:07:09.103]                             }
[18:07:09.103]                             return(sendCondition)
[18:07:09.103]                           }
[18:07:09.103]                         }
[18:07:09.103]                         frame <- frame + 1L
[18:07:09.103]                         envir <- sys.frame(frame)
[18:07:09.103]                       }
[18:07:09.103]                     }
[18:07:09.103]                     sendCondition <<- function(cond) NULL
[18:07:09.103]                   }
[18:07:09.103]                 })
[18:07:09.103]                 withCallingHandlers({
[18:07:09.103]                   {
[18:07:09.103]                     print(1:50)
[18:07:09.103]                     str(1:50)
[18:07:09.103]                     cat(letters, sep = "-")
[18:07:09.103]                     cat(1:6, collapse = "\n")
[18:07:09.103]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:09.103]                     42L
[18:07:09.103]                   }
[18:07:09.103]                 }, immediateCondition = function(cond) {
[18:07:09.103]                   sendCondition <- ...future.makeSendCondition()
[18:07:09.103]                   sendCondition(cond)
[18:07:09.103]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.103]                   {
[18:07:09.103]                     inherits <- base::inherits
[18:07:09.103]                     invokeRestart <- base::invokeRestart
[18:07:09.103]                     is.null <- base::is.null
[18:07:09.103]                     muffled <- FALSE
[18:07:09.103]                     if (inherits(cond, "message")) {
[18:07:09.103]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:09.103]                       if (muffled) 
[18:07:09.103]                         invokeRestart("muffleMessage")
[18:07:09.103]                     }
[18:07:09.103]                     else if (inherits(cond, "warning")) {
[18:07:09.103]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:09.103]                       if (muffled) 
[18:07:09.103]                         invokeRestart("muffleWarning")
[18:07:09.103]                     }
[18:07:09.103]                     else if (inherits(cond, "condition")) {
[18:07:09.103]                       if (!is.null(pattern)) {
[18:07:09.103]                         computeRestarts <- base::computeRestarts
[18:07:09.103]                         grepl <- base::grepl
[18:07:09.103]                         restarts <- computeRestarts(cond)
[18:07:09.103]                         for (restart in restarts) {
[18:07:09.103]                           name <- restart$name
[18:07:09.103]                           if (is.null(name)) 
[18:07:09.103]                             next
[18:07:09.103]                           if (!grepl(pattern, name)) 
[18:07:09.103]                             next
[18:07:09.103]                           invokeRestart(restart)
[18:07:09.103]                           muffled <- TRUE
[18:07:09.103]                           break
[18:07:09.103]                         }
[18:07:09.103]                       }
[18:07:09.103]                     }
[18:07:09.103]                     invisible(muffled)
[18:07:09.103]                   }
[18:07:09.103]                   muffleCondition(cond)
[18:07:09.103]                 })
[18:07:09.103]             }))
[18:07:09.103]             future::FutureResult(value = ...future.value$value, 
[18:07:09.103]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.103]                   ...future.rng), globalenv = if (FALSE) 
[18:07:09.103]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:09.103]                     ...future.globalenv.names))
[18:07:09.103]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:09.103]         }, condition = base::local({
[18:07:09.103]             c <- base::c
[18:07:09.103]             inherits <- base::inherits
[18:07:09.103]             invokeRestart <- base::invokeRestart
[18:07:09.103]             length <- base::length
[18:07:09.103]             list <- base::list
[18:07:09.103]             seq.int <- base::seq.int
[18:07:09.103]             signalCondition <- base::signalCondition
[18:07:09.103]             sys.calls <- base::sys.calls
[18:07:09.103]             `[[` <- base::`[[`
[18:07:09.103]             `+` <- base::`+`
[18:07:09.103]             `<<-` <- base::`<<-`
[18:07:09.103]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:09.103]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:09.103]                   3L)]
[18:07:09.103]             }
[18:07:09.103]             function(cond) {
[18:07:09.103]                 is_error <- inherits(cond, "error")
[18:07:09.103]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:09.103]                   NULL)
[18:07:09.103]                 if (is_error) {
[18:07:09.103]                   sessionInformation <- function() {
[18:07:09.103]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:09.103]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:09.103]                       search = base::search(), system = base::Sys.info())
[18:07:09.103]                   }
[18:07:09.103]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.103]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:09.103]                     cond$call), session = sessionInformation(), 
[18:07:09.103]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:09.103]                   signalCondition(cond)
[18:07:09.103]                 }
[18:07:09.103]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:09.103]                 "immediateCondition"))) {
[18:07:09.103]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:09.103]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.103]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:09.103]                   if (TRUE && !signal) {
[18:07:09.103]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.103]                     {
[18:07:09.103]                       inherits <- base::inherits
[18:07:09.103]                       invokeRestart <- base::invokeRestart
[18:07:09.103]                       is.null <- base::is.null
[18:07:09.103]                       muffled <- FALSE
[18:07:09.103]                       if (inherits(cond, "message")) {
[18:07:09.103]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.103]                         if (muffled) 
[18:07:09.103]                           invokeRestart("muffleMessage")
[18:07:09.103]                       }
[18:07:09.103]                       else if (inherits(cond, "warning")) {
[18:07:09.103]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.103]                         if (muffled) 
[18:07:09.103]                           invokeRestart("muffleWarning")
[18:07:09.103]                       }
[18:07:09.103]                       else if (inherits(cond, "condition")) {
[18:07:09.103]                         if (!is.null(pattern)) {
[18:07:09.103]                           computeRestarts <- base::computeRestarts
[18:07:09.103]                           grepl <- base::grepl
[18:07:09.103]                           restarts <- computeRestarts(cond)
[18:07:09.103]                           for (restart in restarts) {
[18:07:09.103]                             name <- restart$name
[18:07:09.103]                             if (is.null(name)) 
[18:07:09.103]                               next
[18:07:09.103]                             if (!grepl(pattern, name)) 
[18:07:09.103]                               next
[18:07:09.103]                             invokeRestart(restart)
[18:07:09.103]                             muffled <- TRUE
[18:07:09.103]                             break
[18:07:09.103]                           }
[18:07:09.103]                         }
[18:07:09.103]                       }
[18:07:09.103]                       invisible(muffled)
[18:07:09.103]                     }
[18:07:09.103]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.103]                   }
[18:07:09.103]                 }
[18:07:09.103]                 else {
[18:07:09.103]                   if (TRUE) {
[18:07:09.103]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.103]                     {
[18:07:09.103]                       inherits <- base::inherits
[18:07:09.103]                       invokeRestart <- base::invokeRestart
[18:07:09.103]                       is.null <- base::is.null
[18:07:09.103]                       muffled <- FALSE
[18:07:09.103]                       if (inherits(cond, "message")) {
[18:07:09.103]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.103]                         if (muffled) 
[18:07:09.103]                           invokeRestart("muffleMessage")
[18:07:09.103]                       }
[18:07:09.103]                       else if (inherits(cond, "warning")) {
[18:07:09.103]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.103]                         if (muffled) 
[18:07:09.103]                           invokeRestart("muffleWarning")
[18:07:09.103]                       }
[18:07:09.103]                       else if (inherits(cond, "condition")) {
[18:07:09.103]                         if (!is.null(pattern)) {
[18:07:09.103]                           computeRestarts <- base::computeRestarts
[18:07:09.103]                           grepl <- base::grepl
[18:07:09.103]                           restarts <- computeRestarts(cond)
[18:07:09.103]                           for (restart in restarts) {
[18:07:09.103]                             name <- restart$name
[18:07:09.103]                             if (is.null(name)) 
[18:07:09.103]                               next
[18:07:09.103]                             if (!grepl(pattern, name)) 
[18:07:09.103]                               next
[18:07:09.103]                             invokeRestart(restart)
[18:07:09.103]                             muffled <- TRUE
[18:07:09.103]                             break
[18:07:09.103]                           }
[18:07:09.103]                         }
[18:07:09.103]                       }
[18:07:09.103]                       invisible(muffled)
[18:07:09.103]                     }
[18:07:09.103]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.103]                   }
[18:07:09.103]                 }
[18:07:09.103]             }
[18:07:09.103]         }))
[18:07:09.103]     }, error = function(ex) {
[18:07:09.103]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:09.103]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.103]                 ...future.rng), started = ...future.startTime, 
[18:07:09.103]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:09.103]             version = "1.8"), class = "FutureResult")
[18:07:09.103]     }, finally = {
[18:07:09.103]         if (!identical(...future.workdir, getwd())) 
[18:07:09.103]             setwd(...future.workdir)
[18:07:09.103]         {
[18:07:09.103]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:09.103]                 ...future.oldOptions$nwarnings <- NULL
[18:07:09.103]             }
[18:07:09.103]             base::options(...future.oldOptions)
[18:07:09.103]             if (.Platform$OS.type == "windows") {
[18:07:09.103]                 old_names <- names(...future.oldEnvVars)
[18:07:09.103]                 envs <- base::Sys.getenv()
[18:07:09.103]                 names <- names(envs)
[18:07:09.103]                 common <- intersect(names, old_names)
[18:07:09.103]                 added <- setdiff(names, old_names)
[18:07:09.103]                 removed <- setdiff(old_names, names)
[18:07:09.103]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:09.103]                   envs[common]]
[18:07:09.103]                 NAMES <- toupper(changed)
[18:07:09.103]                 args <- list()
[18:07:09.103]                 for (kk in seq_along(NAMES)) {
[18:07:09.103]                   name <- changed[[kk]]
[18:07:09.103]                   NAME <- NAMES[[kk]]
[18:07:09.103]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.103]                     next
[18:07:09.103]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.103]                 }
[18:07:09.103]                 NAMES <- toupper(added)
[18:07:09.103]                 for (kk in seq_along(NAMES)) {
[18:07:09.103]                   name <- added[[kk]]
[18:07:09.103]                   NAME <- NAMES[[kk]]
[18:07:09.103]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.103]                     next
[18:07:09.103]                   args[[name]] <- ""
[18:07:09.103]                 }
[18:07:09.103]                 NAMES <- toupper(removed)
[18:07:09.103]                 for (kk in seq_along(NAMES)) {
[18:07:09.103]                   name <- removed[[kk]]
[18:07:09.103]                   NAME <- NAMES[[kk]]
[18:07:09.103]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.103]                     next
[18:07:09.103]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.103]                 }
[18:07:09.103]                 if (length(args) > 0) 
[18:07:09.103]                   base::do.call(base::Sys.setenv, args = args)
[18:07:09.103]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:09.103]             }
[18:07:09.103]             else {
[18:07:09.103]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:09.103]             }
[18:07:09.103]             {
[18:07:09.103]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:09.103]                   0L) {
[18:07:09.103]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:09.103]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:09.103]                   base::options(opts)
[18:07:09.103]                 }
[18:07:09.103]                 {
[18:07:09.103]                   {
[18:07:09.103]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:09.103]                     NULL
[18:07:09.103]                   }
[18:07:09.103]                   options(future.plan = NULL)
[18:07:09.103]                   if (is.na(NA_character_)) 
[18:07:09.103]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.103]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:09.103]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:09.103]                     .init = FALSE)
[18:07:09.103]                 }
[18:07:09.103]             }
[18:07:09.103]         }
[18:07:09.103]     })
[18:07:09.103]     if (TRUE) {
[18:07:09.103]         base::sink(type = "output", split = FALSE)
[18:07:09.103]         if (TRUE) {
[18:07:09.103]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:09.103]         }
[18:07:09.103]         else {
[18:07:09.103]             ...future.result["stdout"] <- base::list(NULL)
[18:07:09.103]         }
[18:07:09.103]         base::close(...future.stdout)
[18:07:09.103]         ...future.stdout <- NULL
[18:07:09.103]     }
[18:07:09.103]     ...future.result$conditions <- ...future.conditions
[18:07:09.103]     ...future.result$finished <- base::Sys.time()
[18:07:09.103]     ...future.result
[18:07:09.103] }
[18:07:09.110] MultisessionFuture started
[18:07:09.110] - Launch lazy future ... done
[18:07:09.111] run() for ‘MultisessionFuture’ ... done
[18:07:09.112] result() for ClusterFuture ...
[18:07:09.112] receiveMessageFromWorker() for ClusterFuture ...
[18:07:09.113] - Validating connection of MultisessionFuture
[18:07:09.157] - received message: FutureResult
[18:07:09.157] - Received FutureResult
[18:07:09.158] - Erased future from FutureRegistry
[18:07:09.158] result() for ClusterFuture ...
[18:07:09.158] - result already collected: FutureResult
[18:07:09.158] result() for ClusterFuture ... done
[18:07:09.158] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.159] result() for ClusterFuture ... done
[18:07:09.159] result() for ClusterFuture ...
[18:07:09.159] - result already collected: FutureResult
[18:07:09.159] result() for ClusterFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[18:07:09.163] getGlobalsAndPackages() ...
[18:07:09.163] Searching for globals...
[18:07:09.164] - globals found: [1] ‘print’
[18:07:09.165] Searching for globals ... DONE
[18:07:09.165] Resolving globals: FALSE
[18:07:09.165] 
[18:07:09.165] 
[18:07:09.166] getGlobalsAndPackages() ... DONE
[18:07:09.166] run() for ‘Future’ ...
[18:07:09.166] - state: ‘created’
[18:07:09.167] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:09.190] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:09.190] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:09.190]   - Field: ‘node’
[18:07:09.191]   - Field: ‘label’
[18:07:09.191]   - Field: ‘local’
[18:07:09.191]   - Field: ‘owner’
[18:07:09.191]   - Field: ‘envir’
[18:07:09.192]   - Field: ‘workers’
[18:07:09.192]   - Field: ‘packages’
[18:07:09.192]   - Field: ‘gc’
[18:07:09.192]   - Field: ‘conditions’
[18:07:09.192]   - Field: ‘persistent’
[18:07:09.193]   - Field: ‘expr’
[18:07:09.193]   - Field: ‘uuid’
[18:07:09.193]   - Field: ‘seed’
[18:07:09.193]   - Field: ‘version’
[18:07:09.193]   - Field: ‘result’
[18:07:09.194]   - Field: ‘asynchronous’
[18:07:09.194]   - Field: ‘calls’
[18:07:09.194]   - Field: ‘globals’
[18:07:09.194]   - Field: ‘stdout’
[18:07:09.194]   - Field: ‘earlySignal’
[18:07:09.195]   - Field: ‘lazy’
[18:07:09.195]   - Field: ‘state’
[18:07:09.195] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:09.195] - Launch lazy future ...
[18:07:09.196] Packages needed by the future expression (n = 0): <none>
[18:07:09.196] Packages needed by future strategies (n = 0): <none>
[18:07:09.197] {
[18:07:09.197]     {
[18:07:09.197]         {
[18:07:09.197]             ...future.startTime <- base::Sys.time()
[18:07:09.197]             {
[18:07:09.197]                 {
[18:07:09.197]                   {
[18:07:09.197]                     {
[18:07:09.197]                       base::local({
[18:07:09.197]                         has_future <- base::requireNamespace("future", 
[18:07:09.197]                           quietly = TRUE)
[18:07:09.197]                         if (has_future) {
[18:07:09.197]                           ns <- base::getNamespace("future")
[18:07:09.197]                           version <- ns[[".package"]][["version"]]
[18:07:09.197]                           if (is.null(version)) 
[18:07:09.197]                             version <- utils::packageVersion("future")
[18:07:09.197]                         }
[18:07:09.197]                         else {
[18:07:09.197]                           version <- NULL
[18:07:09.197]                         }
[18:07:09.197]                         if (!has_future || version < "1.8.0") {
[18:07:09.197]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:09.197]                             "", base::R.version$version.string), 
[18:07:09.197]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:09.197]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:09.197]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:09.197]                               "release", "version")], collapse = " "), 
[18:07:09.197]                             hostname = base::Sys.info()[["nodename"]])
[18:07:09.197]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:09.197]                             info)
[18:07:09.197]                           info <- base::paste(info, collapse = "; ")
[18:07:09.197]                           if (!has_future) {
[18:07:09.197]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:09.197]                               info)
[18:07:09.197]                           }
[18:07:09.197]                           else {
[18:07:09.197]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:09.197]                               info, version)
[18:07:09.197]                           }
[18:07:09.197]                           base::stop(msg)
[18:07:09.197]                         }
[18:07:09.197]                       })
[18:07:09.197]                     }
[18:07:09.197]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:09.197]                     base::options(mc.cores = 1L)
[18:07:09.197]                   }
[18:07:09.197]                   ...future.strategy.old <- future::plan("list")
[18:07:09.197]                   options(future.plan = NULL)
[18:07:09.197]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.197]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:09.197]                 }
[18:07:09.197]                 ...future.workdir <- getwd()
[18:07:09.197]             }
[18:07:09.197]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:09.197]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:09.197]         }
[18:07:09.197]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:09.197]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:09.197]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:09.197]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:09.197]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:09.197]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:09.197]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:09.197]             base::names(...future.oldOptions))
[18:07:09.197]     }
[18:07:09.197]     if (FALSE) {
[18:07:09.197]     }
[18:07:09.197]     else {
[18:07:09.197]         if (TRUE) {
[18:07:09.197]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:09.197]                 open = "w")
[18:07:09.197]         }
[18:07:09.197]         else {
[18:07:09.197]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:09.197]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:09.197]         }
[18:07:09.197]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:09.197]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:09.197]             base::sink(type = "output", split = FALSE)
[18:07:09.197]             base::close(...future.stdout)
[18:07:09.197]         }, add = TRUE)
[18:07:09.197]     }
[18:07:09.197]     ...future.frame <- base::sys.nframe()
[18:07:09.197]     ...future.conditions <- base::list()
[18:07:09.197]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:09.197]     if (FALSE) {
[18:07:09.197]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:09.197]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:09.197]     }
[18:07:09.197]     ...future.result <- base::tryCatch({
[18:07:09.197]         base::withCallingHandlers({
[18:07:09.197]             ...future.value <- base::withVisible(base::local({
[18:07:09.197]                 ...future.makeSendCondition <- base::local({
[18:07:09.197]                   sendCondition <- NULL
[18:07:09.197]                   function(frame = 1L) {
[18:07:09.197]                     if (is.function(sendCondition)) 
[18:07:09.197]                       return(sendCondition)
[18:07:09.197]                     ns <- getNamespace("parallel")
[18:07:09.197]                     if (exists("sendData", mode = "function", 
[18:07:09.197]                       envir = ns)) {
[18:07:09.197]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:09.197]                         envir = ns)
[18:07:09.197]                       envir <- sys.frame(frame)
[18:07:09.197]                       master <- NULL
[18:07:09.197]                       while (!identical(envir, .GlobalEnv) && 
[18:07:09.197]                         !identical(envir, emptyenv())) {
[18:07:09.197]                         if (exists("master", mode = "list", envir = envir, 
[18:07:09.197]                           inherits = FALSE)) {
[18:07:09.197]                           master <- get("master", mode = "list", 
[18:07:09.197]                             envir = envir, inherits = FALSE)
[18:07:09.197]                           if (inherits(master, c("SOCKnode", 
[18:07:09.197]                             "SOCK0node"))) {
[18:07:09.197]                             sendCondition <<- function(cond) {
[18:07:09.197]                               data <- list(type = "VALUE", value = cond, 
[18:07:09.197]                                 success = TRUE)
[18:07:09.197]                               parallel_sendData(master, data)
[18:07:09.197]                             }
[18:07:09.197]                             return(sendCondition)
[18:07:09.197]                           }
[18:07:09.197]                         }
[18:07:09.197]                         frame <- frame + 1L
[18:07:09.197]                         envir <- sys.frame(frame)
[18:07:09.197]                       }
[18:07:09.197]                     }
[18:07:09.197]                     sendCondition <<- function(cond) NULL
[18:07:09.197]                   }
[18:07:09.197]                 })
[18:07:09.197]                 withCallingHandlers({
[18:07:09.197]                   print(42)
[18:07:09.197]                 }, immediateCondition = function(cond) {
[18:07:09.197]                   sendCondition <- ...future.makeSendCondition()
[18:07:09.197]                   sendCondition(cond)
[18:07:09.197]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.197]                   {
[18:07:09.197]                     inherits <- base::inherits
[18:07:09.197]                     invokeRestart <- base::invokeRestart
[18:07:09.197]                     is.null <- base::is.null
[18:07:09.197]                     muffled <- FALSE
[18:07:09.197]                     if (inherits(cond, "message")) {
[18:07:09.197]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:09.197]                       if (muffled) 
[18:07:09.197]                         invokeRestart("muffleMessage")
[18:07:09.197]                     }
[18:07:09.197]                     else if (inherits(cond, "warning")) {
[18:07:09.197]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:09.197]                       if (muffled) 
[18:07:09.197]                         invokeRestart("muffleWarning")
[18:07:09.197]                     }
[18:07:09.197]                     else if (inherits(cond, "condition")) {
[18:07:09.197]                       if (!is.null(pattern)) {
[18:07:09.197]                         computeRestarts <- base::computeRestarts
[18:07:09.197]                         grepl <- base::grepl
[18:07:09.197]                         restarts <- computeRestarts(cond)
[18:07:09.197]                         for (restart in restarts) {
[18:07:09.197]                           name <- restart$name
[18:07:09.197]                           if (is.null(name)) 
[18:07:09.197]                             next
[18:07:09.197]                           if (!grepl(pattern, name)) 
[18:07:09.197]                             next
[18:07:09.197]                           invokeRestart(restart)
[18:07:09.197]                           muffled <- TRUE
[18:07:09.197]                           break
[18:07:09.197]                         }
[18:07:09.197]                       }
[18:07:09.197]                     }
[18:07:09.197]                     invisible(muffled)
[18:07:09.197]                   }
[18:07:09.197]                   muffleCondition(cond)
[18:07:09.197]                 })
[18:07:09.197]             }))
[18:07:09.197]             future::FutureResult(value = ...future.value$value, 
[18:07:09.197]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.197]                   ...future.rng), globalenv = if (FALSE) 
[18:07:09.197]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:09.197]                     ...future.globalenv.names))
[18:07:09.197]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:09.197]         }, condition = base::local({
[18:07:09.197]             c <- base::c
[18:07:09.197]             inherits <- base::inherits
[18:07:09.197]             invokeRestart <- base::invokeRestart
[18:07:09.197]             length <- base::length
[18:07:09.197]             list <- base::list
[18:07:09.197]             seq.int <- base::seq.int
[18:07:09.197]             signalCondition <- base::signalCondition
[18:07:09.197]             sys.calls <- base::sys.calls
[18:07:09.197]             `[[` <- base::`[[`
[18:07:09.197]             `+` <- base::`+`
[18:07:09.197]             `<<-` <- base::`<<-`
[18:07:09.197]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:09.197]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:09.197]                   3L)]
[18:07:09.197]             }
[18:07:09.197]             function(cond) {
[18:07:09.197]                 is_error <- inherits(cond, "error")
[18:07:09.197]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:09.197]                   NULL)
[18:07:09.197]                 if (is_error) {
[18:07:09.197]                   sessionInformation <- function() {
[18:07:09.197]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:09.197]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:09.197]                       search = base::search(), system = base::Sys.info())
[18:07:09.197]                   }
[18:07:09.197]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.197]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:09.197]                     cond$call), session = sessionInformation(), 
[18:07:09.197]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:09.197]                   signalCondition(cond)
[18:07:09.197]                 }
[18:07:09.197]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:09.197]                 "immediateCondition"))) {
[18:07:09.197]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:09.197]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.197]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:09.197]                   if (TRUE && !signal) {
[18:07:09.197]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.197]                     {
[18:07:09.197]                       inherits <- base::inherits
[18:07:09.197]                       invokeRestart <- base::invokeRestart
[18:07:09.197]                       is.null <- base::is.null
[18:07:09.197]                       muffled <- FALSE
[18:07:09.197]                       if (inherits(cond, "message")) {
[18:07:09.197]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.197]                         if (muffled) 
[18:07:09.197]                           invokeRestart("muffleMessage")
[18:07:09.197]                       }
[18:07:09.197]                       else if (inherits(cond, "warning")) {
[18:07:09.197]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.197]                         if (muffled) 
[18:07:09.197]                           invokeRestart("muffleWarning")
[18:07:09.197]                       }
[18:07:09.197]                       else if (inherits(cond, "condition")) {
[18:07:09.197]                         if (!is.null(pattern)) {
[18:07:09.197]                           computeRestarts <- base::computeRestarts
[18:07:09.197]                           grepl <- base::grepl
[18:07:09.197]                           restarts <- computeRestarts(cond)
[18:07:09.197]                           for (restart in restarts) {
[18:07:09.197]                             name <- restart$name
[18:07:09.197]                             if (is.null(name)) 
[18:07:09.197]                               next
[18:07:09.197]                             if (!grepl(pattern, name)) 
[18:07:09.197]                               next
[18:07:09.197]                             invokeRestart(restart)
[18:07:09.197]                             muffled <- TRUE
[18:07:09.197]                             break
[18:07:09.197]                           }
[18:07:09.197]                         }
[18:07:09.197]                       }
[18:07:09.197]                       invisible(muffled)
[18:07:09.197]                     }
[18:07:09.197]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.197]                   }
[18:07:09.197]                 }
[18:07:09.197]                 else {
[18:07:09.197]                   if (TRUE) {
[18:07:09.197]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.197]                     {
[18:07:09.197]                       inherits <- base::inherits
[18:07:09.197]                       invokeRestart <- base::invokeRestart
[18:07:09.197]                       is.null <- base::is.null
[18:07:09.197]                       muffled <- FALSE
[18:07:09.197]                       if (inherits(cond, "message")) {
[18:07:09.197]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.197]                         if (muffled) 
[18:07:09.197]                           invokeRestart("muffleMessage")
[18:07:09.197]                       }
[18:07:09.197]                       else if (inherits(cond, "warning")) {
[18:07:09.197]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.197]                         if (muffled) 
[18:07:09.197]                           invokeRestart("muffleWarning")
[18:07:09.197]                       }
[18:07:09.197]                       else if (inherits(cond, "condition")) {
[18:07:09.197]                         if (!is.null(pattern)) {
[18:07:09.197]                           computeRestarts <- base::computeRestarts
[18:07:09.197]                           grepl <- base::grepl
[18:07:09.197]                           restarts <- computeRestarts(cond)
[18:07:09.197]                           for (restart in restarts) {
[18:07:09.197]                             name <- restart$name
[18:07:09.197]                             if (is.null(name)) 
[18:07:09.197]                               next
[18:07:09.197]                             if (!grepl(pattern, name)) 
[18:07:09.197]                               next
[18:07:09.197]                             invokeRestart(restart)
[18:07:09.197]                             muffled <- TRUE
[18:07:09.197]                             break
[18:07:09.197]                           }
[18:07:09.197]                         }
[18:07:09.197]                       }
[18:07:09.197]                       invisible(muffled)
[18:07:09.197]                     }
[18:07:09.197]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.197]                   }
[18:07:09.197]                 }
[18:07:09.197]             }
[18:07:09.197]         }))
[18:07:09.197]     }, error = function(ex) {
[18:07:09.197]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:09.197]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.197]                 ...future.rng), started = ...future.startTime, 
[18:07:09.197]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:09.197]             version = "1.8"), class = "FutureResult")
[18:07:09.197]     }, finally = {
[18:07:09.197]         if (!identical(...future.workdir, getwd())) 
[18:07:09.197]             setwd(...future.workdir)
[18:07:09.197]         {
[18:07:09.197]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:09.197]                 ...future.oldOptions$nwarnings <- NULL
[18:07:09.197]             }
[18:07:09.197]             base::options(...future.oldOptions)
[18:07:09.197]             if (.Platform$OS.type == "windows") {
[18:07:09.197]                 old_names <- names(...future.oldEnvVars)
[18:07:09.197]                 envs <- base::Sys.getenv()
[18:07:09.197]                 names <- names(envs)
[18:07:09.197]                 common <- intersect(names, old_names)
[18:07:09.197]                 added <- setdiff(names, old_names)
[18:07:09.197]                 removed <- setdiff(old_names, names)
[18:07:09.197]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:09.197]                   envs[common]]
[18:07:09.197]                 NAMES <- toupper(changed)
[18:07:09.197]                 args <- list()
[18:07:09.197]                 for (kk in seq_along(NAMES)) {
[18:07:09.197]                   name <- changed[[kk]]
[18:07:09.197]                   NAME <- NAMES[[kk]]
[18:07:09.197]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.197]                     next
[18:07:09.197]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.197]                 }
[18:07:09.197]                 NAMES <- toupper(added)
[18:07:09.197]                 for (kk in seq_along(NAMES)) {
[18:07:09.197]                   name <- added[[kk]]
[18:07:09.197]                   NAME <- NAMES[[kk]]
[18:07:09.197]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.197]                     next
[18:07:09.197]                   args[[name]] <- ""
[18:07:09.197]                 }
[18:07:09.197]                 NAMES <- toupper(removed)
[18:07:09.197]                 for (kk in seq_along(NAMES)) {
[18:07:09.197]                   name <- removed[[kk]]
[18:07:09.197]                   NAME <- NAMES[[kk]]
[18:07:09.197]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.197]                     next
[18:07:09.197]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.197]                 }
[18:07:09.197]                 if (length(args) > 0) 
[18:07:09.197]                   base::do.call(base::Sys.setenv, args = args)
[18:07:09.197]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:09.197]             }
[18:07:09.197]             else {
[18:07:09.197]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:09.197]             }
[18:07:09.197]             {
[18:07:09.197]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:09.197]                   0L) {
[18:07:09.197]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:09.197]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:09.197]                   base::options(opts)
[18:07:09.197]                 }
[18:07:09.197]                 {
[18:07:09.197]                   {
[18:07:09.197]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:09.197]                     NULL
[18:07:09.197]                   }
[18:07:09.197]                   options(future.plan = NULL)
[18:07:09.197]                   if (is.na(NA_character_)) 
[18:07:09.197]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.197]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:09.197]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:09.197]                     .init = FALSE)
[18:07:09.197]                 }
[18:07:09.197]             }
[18:07:09.197]         }
[18:07:09.197]     })
[18:07:09.197]     if (TRUE) {
[18:07:09.197]         base::sink(type = "output", split = FALSE)
[18:07:09.197]         if (TRUE) {
[18:07:09.197]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:09.197]         }
[18:07:09.197]         else {
[18:07:09.197]             ...future.result["stdout"] <- base::list(NULL)
[18:07:09.197]         }
[18:07:09.197]         base::close(...future.stdout)
[18:07:09.197]         ...future.stdout <- NULL
[18:07:09.197]     }
[18:07:09.197]     ...future.result$conditions <- ...future.conditions
[18:07:09.197]     ...future.result$finished <- base::Sys.time()
[18:07:09.197]     ...future.result
[18:07:09.197] }
[18:07:09.202] MultisessionFuture started
[18:07:09.202] - Launch lazy future ... done
[18:07:09.203] run() for ‘MultisessionFuture’ ... done
[18:07:09.203] result() for ClusterFuture ...
[18:07:09.203] receiveMessageFromWorker() for ClusterFuture ...
[18:07:09.203] - Validating connection of MultisessionFuture
[18:07:09.246] - received message: FutureResult
[18:07:09.247] - Received FutureResult
[18:07:09.247] - Erased future from FutureRegistry
[18:07:09.247] result() for ClusterFuture ...
[18:07:09.247] - result already collected: FutureResult
[18:07:09.248] result() for ClusterFuture ... done
[18:07:09.248] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.248] result() for ClusterFuture ... done
[18:07:09.248] result() for ClusterFuture ...
[18:07:09.248] - result already collected: FutureResult
[18:07:09.249] result() for ClusterFuture ... done
[18:07:09.249] result() for ClusterFuture ...
[18:07:09.249] - result already collected: FutureResult
[18:07:09.249] result() for ClusterFuture ... done
[1] 42
[18:07:09.249] result() for ClusterFuture ...
[18:07:09.250] - result already collected: FutureResult
[18:07:09.250] result() for ClusterFuture ... done
- stdout = FALSE
[18:07:09.250] getGlobalsAndPackages() ...
[18:07:09.250] Searching for globals...
[18:07:09.256] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:09.256] Searching for globals ... DONE
[18:07:09.257] Resolving globals: FALSE
[18:07:09.258] 
[18:07:09.258] - packages: [1] ‘utils’
[18:07:09.258] getGlobalsAndPackages() ... DONE
[18:07:09.259] run() for ‘Future’ ...
[18:07:09.259] - state: ‘created’
[18:07:09.259] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:09.281] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:09.282] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:09.282]   - Field: ‘node’
[18:07:09.282]   - Field: ‘label’
[18:07:09.282]   - Field: ‘local’
[18:07:09.282]   - Field: ‘owner’
[18:07:09.283]   - Field: ‘envir’
[18:07:09.283]   - Field: ‘workers’
[18:07:09.283]   - Field: ‘packages’
[18:07:09.283]   - Field: ‘gc’
[18:07:09.283]   - Field: ‘conditions’
[18:07:09.284]   - Field: ‘persistent’
[18:07:09.284]   - Field: ‘expr’
[18:07:09.284]   - Field: ‘uuid’
[18:07:09.284]   - Field: ‘seed’
[18:07:09.284]   - Field: ‘version’
[18:07:09.285]   - Field: ‘result’
[18:07:09.285]   - Field: ‘asynchronous’
[18:07:09.285]   - Field: ‘calls’
[18:07:09.285]   - Field: ‘globals’
[18:07:09.285]   - Field: ‘stdout’
[18:07:09.286]   - Field: ‘earlySignal’
[18:07:09.286]   - Field: ‘lazy’
[18:07:09.286]   - Field: ‘state’
[18:07:09.286] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:09.286] - Launch lazy future ...
[18:07:09.287] Packages needed by the future expression (n = 1): ‘utils’
[18:07:09.287] Packages needed by future strategies (n = 0): <none>
[18:07:09.288] {
[18:07:09.288]     {
[18:07:09.288]         {
[18:07:09.288]             ...future.startTime <- base::Sys.time()
[18:07:09.288]             {
[18:07:09.288]                 {
[18:07:09.288]                   {
[18:07:09.288]                     {
[18:07:09.288]                       {
[18:07:09.288]                         base::local({
[18:07:09.288]                           has_future <- base::requireNamespace("future", 
[18:07:09.288]                             quietly = TRUE)
[18:07:09.288]                           if (has_future) {
[18:07:09.288]                             ns <- base::getNamespace("future")
[18:07:09.288]                             version <- ns[[".package"]][["version"]]
[18:07:09.288]                             if (is.null(version)) 
[18:07:09.288]                               version <- utils::packageVersion("future")
[18:07:09.288]                           }
[18:07:09.288]                           else {
[18:07:09.288]                             version <- NULL
[18:07:09.288]                           }
[18:07:09.288]                           if (!has_future || version < "1.8.0") {
[18:07:09.288]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:09.288]                               "", base::R.version$version.string), 
[18:07:09.288]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:09.288]                                 base::R.version$platform, 8 * 
[18:07:09.288]                                   base::.Machine$sizeof.pointer), 
[18:07:09.288]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:09.288]                                 "release", "version")], collapse = " "), 
[18:07:09.288]                               hostname = base::Sys.info()[["nodename"]])
[18:07:09.288]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:09.288]                               info)
[18:07:09.288]                             info <- base::paste(info, collapse = "; ")
[18:07:09.288]                             if (!has_future) {
[18:07:09.288]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:09.288]                                 info)
[18:07:09.288]                             }
[18:07:09.288]                             else {
[18:07:09.288]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:09.288]                                 info, version)
[18:07:09.288]                             }
[18:07:09.288]                             base::stop(msg)
[18:07:09.288]                           }
[18:07:09.288]                         })
[18:07:09.288]                       }
[18:07:09.288]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:09.288]                       base::options(mc.cores = 1L)
[18:07:09.288]                     }
[18:07:09.288]                     base::local({
[18:07:09.288]                       for (pkg in "utils") {
[18:07:09.288]                         base::loadNamespace(pkg)
[18:07:09.288]                         base::library(pkg, character.only = TRUE)
[18:07:09.288]                       }
[18:07:09.288]                     })
[18:07:09.288]                   }
[18:07:09.288]                   ...future.strategy.old <- future::plan("list")
[18:07:09.288]                   options(future.plan = NULL)
[18:07:09.288]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.288]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:09.288]                 }
[18:07:09.288]                 ...future.workdir <- getwd()
[18:07:09.288]             }
[18:07:09.288]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:09.288]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:09.288]         }
[18:07:09.288]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:09.288]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:09.288]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:09.288]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:09.288]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:09.288]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:09.288]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:09.288]             base::names(...future.oldOptions))
[18:07:09.288]     }
[18:07:09.288]     if (FALSE) {
[18:07:09.288]     }
[18:07:09.288]     else {
[18:07:09.288]         if (FALSE) {
[18:07:09.288]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:09.288]                 open = "w")
[18:07:09.288]         }
[18:07:09.288]         else {
[18:07:09.288]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:09.288]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:09.288]         }
[18:07:09.288]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:09.288]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:09.288]             base::sink(type = "output", split = FALSE)
[18:07:09.288]             base::close(...future.stdout)
[18:07:09.288]         }, add = TRUE)
[18:07:09.288]     }
[18:07:09.288]     ...future.frame <- base::sys.nframe()
[18:07:09.288]     ...future.conditions <- base::list()
[18:07:09.288]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:09.288]     if (FALSE) {
[18:07:09.288]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:09.288]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:09.288]     }
[18:07:09.288]     ...future.result <- base::tryCatch({
[18:07:09.288]         base::withCallingHandlers({
[18:07:09.288]             ...future.value <- base::withVisible(base::local({
[18:07:09.288]                 ...future.makeSendCondition <- base::local({
[18:07:09.288]                   sendCondition <- NULL
[18:07:09.288]                   function(frame = 1L) {
[18:07:09.288]                     if (is.function(sendCondition)) 
[18:07:09.288]                       return(sendCondition)
[18:07:09.288]                     ns <- getNamespace("parallel")
[18:07:09.288]                     if (exists("sendData", mode = "function", 
[18:07:09.288]                       envir = ns)) {
[18:07:09.288]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:09.288]                         envir = ns)
[18:07:09.288]                       envir <- sys.frame(frame)
[18:07:09.288]                       master <- NULL
[18:07:09.288]                       while (!identical(envir, .GlobalEnv) && 
[18:07:09.288]                         !identical(envir, emptyenv())) {
[18:07:09.288]                         if (exists("master", mode = "list", envir = envir, 
[18:07:09.288]                           inherits = FALSE)) {
[18:07:09.288]                           master <- get("master", mode = "list", 
[18:07:09.288]                             envir = envir, inherits = FALSE)
[18:07:09.288]                           if (inherits(master, c("SOCKnode", 
[18:07:09.288]                             "SOCK0node"))) {
[18:07:09.288]                             sendCondition <<- function(cond) {
[18:07:09.288]                               data <- list(type = "VALUE", value = cond, 
[18:07:09.288]                                 success = TRUE)
[18:07:09.288]                               parallel_sendData(master, data)
[18:07:09.288]                             }
[18:07:09.288]                             return(sendCondition)
[18:07:09.288]                           }
[18:07:09.288]                         }
[18:07:09.288]                         frame <- frame + 1L
[18:07:09.288]                         envir <- sys.frame(frame)
[18:07:09.288]                       }
[18:07:09.288]                     }
[18:07:09.288]                     sendCondition <<- function(cond) NULL
[18:07:09.288]                   }
[18:07:09.288]                 })
[18:07:09.288]                 withCallingHandlers({
[18:07:09.288]                   {
[18:07:09.288]                     print(1:50)
[18:07:09.288]                     str(1:50)
[18:07:09.288]                     cat(letters, sep = "-")
[18:07:09.288]                     cat(1:6, collapse = "\n")
[18:07:09.288]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:09.288]                     42L
[18:07:09.288]                   }
[18:07:09.288]                 }, immediateCondition = function(cond) {
[18:07:09.288]                   sendCondition <- ...future.makeSendCondition()
[18:07:09.288]                   sendCondition(cond)
[18:07:09.288]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.288]                   {
[18:07:09.288]                     inherits <- base::inherits
[18:07:09.288]                     invokeRestart <- base::invokeRestart
[18:07:09.288]                     is.null <- base::is.null
[18:07:09.288]                     muffled <- FALSE
[18:07:09.288]                     if (inherits(cond, "message")) {
[18:07:09.288]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:09.288]                       if (muffled) 
[18:07:09.288]                         invokeRestart("muffleMessage")
[18:07:09.288]                     }
[18:07:09.288]                     else if (inherits(cond, "warning")) {
[18:07:09.288]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:09.288]                       if (muffled) 
[18:07:09.288]                         invokeRestart("muffleWarning")
[18:07:09.288]                     }
[18:07:09.288]                     else if (inherits(cond, "condition")) {
[18:07:09.288]                       if (!is.null(pattern)) {
[18:07:09.288]                         computeRestarts <- base::computeRestarts
[18:07:09.288]                         grepl <- base::grepl
[18:07:09.288]                         restarts <- computeRestarts(cond)
[18:07:09.288]                         for (restart in restarts) {
[18:07:09.288]                           name <- restart$name
[18:07:09.288]                           if (is.null(name)) 
[18:07:09.288]                             next
[18:07:09.288]                           if (!grepl(pattern, name)) 
[18:07:09.288]                             next
[18:07:09.288]                           invokeRestart(restart)
[18:07:09.288]                           muffled <- TRUE
[18:07:09.288]                           break
[18:07:09.288]                         }
[18:07:09.288]                       }
[18:07:09.288]                     }
[18:07:09.288]                     invisible(muffled)
[18:07:09.288]                   }
[18:07:09.288]                   muffleCondition(cond)
[18:07:09.288]                 })
[18:07:09.288]             }))
[18:07:09.288]             future::FutureResult(value = ...future.value$value, 
[18:07:09.288]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.288]                   ...future.rng), globalenv = if (FALSE) 
[18:07:09.288]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:09.288]                     ...future.globalenv.names))
[18:07:09.288]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:09.288]         }, condition = base::local({
[18:07:09.288]             c <- base::c
[18:07:09.288]             inherits <- base::inherits
[18:07:09.288]             invokeRestart <- base::invokeRestart
[18:07:09.288]             length <- base::length
[18:07:09.288]             list <- base::list
[18:07:09.288]             seq.int <- base::seq.int
[18:07:09.288]             signalCondition <- base::signalCondition
[18:07:09.288]             sys.calls <- base::sys.calls
[18:07:09.288]             `[[` <- base::`[[`
[18:07:09.288]             `+` <- base::`+`
[18:07:09.288]             `<<-` <- base::`<<-`
[18:07:09.288]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:09.288]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:09.288]                   3L)]
[18:07:09.288]             }
[18:07:09.288]             function(cond) {
[18:07:09.288]                 is_error <- inherits(cond, "error")
[18:07:09.288]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:09.288]                   NULL)
[18:07:09.288]                 if (is_error) {
[18:07:09.288]                   sessionInformation <- function() {
[18:07:09.288]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:09.288]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:09.288]                       search = base::search(), system = base::Sys.info())
[18:07:09.288]                   }
[18:07:09.288]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.288]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:09.288]                     cond$call), session = sessionInformation(), 
[18:07:09.288]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:09.288]                   signalCondition(cond)
[18:07:09.288]                 }
[18:07:09.288]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:09.288]                 "immediateCondition"))) {
[18:07:09.288]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:09.288]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.288]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:09.288]                   if (TRUE && !signal) {
[18:07:09.288]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.288]                     {
[18:07:09.288]                       inherits <- base::inherits
[18:07:09.288]                       invokeRestart <- base::invokeRestart
[18:07:09.288]                       is.null <- base::is.null
[18:07:09.288]                       muffled <- FALSE
[18:07:09.288]                       if (inherits(cond, "message")) {
[18:07:09.288]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.288]                         if (muffled) 
[18:07:09.288]                           invokeRestart("muffleMessage")
[18:07:09.288]                       }
[18:07:09.288]                       else if (inherits(cond, "warning")) {
[18:07:09.288]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.288]                         if (muffled) 
[18:07:09.288]                           invokeRestart("muffleWarning")
[18:07:09.288]                       }
[18:07:09.288]                       else if (inherits(cond, "condition")) {
[18:07:09.288]                         if (!is.null(pattern)) {
[18:07:09.288]                           computeRestarts <- base::computeRestarts
[18:07:09.288]                           grepl <- base::grepl
[18:07:09.288]                           restarts <- computeRestarts(cond)
[18:07:09.288]                           for (restart in restarts) {
[18:07:09.288]                             name <- restart$name
[18:07:09.288]                             if (is.null(name)) 
[18:07:09.288]                               next
[18:07:09.288]                             if (!grepl(pattern, name)) 
[18:07:09.288]                               next
[18:07:09.288]                             invokeRestart(restart)
[18:07:09.288]                             muffled <- TRUE
[18:07:09.288]                             break
[18:07:09.288]                           }
[18:07:09.288]                         }
[18:07:09.288]                       }
[18:07:09.288]                       invisible(muffled)
[18:07:09.288]                     }
[18:07:09.288]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.288]                   }
[18:07:09.288]                 }
[18:07:09.288]                 else {
[18:07:09.288]                   if (TRUE) {
[18:07:09.288]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.288]                     {
[18:07:09.288]                       inherits <- base::inherits
[18:07:09.288]                       invokeRestart <- base::invokeRestart
[18:07:09.288]                       is.null <- base::is.null
[18:07:09.288]                       muffled <- FALSE
[18:07:09.288]                       if (inherits(cond, "message")) {
[18:07:09.288]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.288]                         if (muffled) 
[18:07:09.288]                           invokeRestart("muffleMessage")
[18:07:09.288]                       }
[18:07:09.288]                       else if (inherits(cond, "warning")) {
[18:07:09.288]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.288]                         if (muffled) 
[18:07:09.288]                           invokeRestart("muffleWarning")
[18:07:09.288]                       }
[18:07:09.288]                       else if (inherits(cond, "condition")) {
[18:07:09.288]                         if (!is.null(pattern)) {
[18:07:09.288]                           computeRestarts <- base::computeRestarts
[18:07:09.288]                           grepl <- base::grepl
[18:07:09.288]                           restarts <- computeRestarts(cond)
[18:07:09.288]                           for (restart in restarts) {
[18:07:09.288]                             name <- restart$name
[18:07:09.288]                             if (is.null(name)) 
[18:07:09.288]                               next
[18:07:09.288]                             if (!grepl(pattern, name)) 
[18:07:09.288]                               next
[18:07:09.288]                             invokeRestart(restart)
[18:07:09.288]                             muffled <- TRUE
[18:07:09.288]                             break
[18:07:09.288]                           }
[18:07:09.288]                         }
[18:07:09.288]                       }
[18:07:09.288]                       invisible(muffled)
[18:07:09.288]                     }
[18:07:09.288]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.288]                   }
[18:07:09.288]                 }
[18:07:09.288]             }
[18:07:09.288]         }))
[18:07:09.288]     }, error = function(ex) {
[18:07:09.288]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:09.288]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.288]                 ...future.rng), started = ...future.startTime, 
[18:07:09.288]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:09.288]             version = "1.8"), class = "FutureResult")
[18:07:09.288]     }, finally = {
[18:07:09.288]         if (!identical(...future.workdir, getwd())) 
[18:07:09.288]             setwd(...future.workdir)
[18:07:09.288]         {
[18:07:09.288]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:09.288]                 ...future.oldOptions$nwarnings <- NULL
[18:07:09.288]             }
[18:07:09.288]             base::options(...future.oldOptions)
[18:07:09.288]             if (.Platform$OS.type == "windows") {
[18:07:09.288]                 old_names <- names(...future.oldEnvVars)
[18:07:09.288]                 envs <- base::Sys.getenv()
[18:07:09.288]                 names <- names(envs)
[18:07:09.288]                 common <- intersect(names, old_names)
[18:07:09.288]                 added <- setdiff(names, old_names)
[18:07:09.288]                 removed <- setdiff(old_names, names)
[18:07:09.288]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:09.288]                   envs[common]]
[18:07:09.288]                 NAMES <- toupper(changed)
[18:07:09.288]                 args <- list()
[18:07:09.288]                 for (kk in seq_along(NAMES)) {
[18:07:09.288]                   name <- changed[[kk]]
[18:07:09.288]                   NAME <- NAMES[[kk]]
[18:07:09.288]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.288]                     next
[18:07:09.288]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.288]                 }
[18:07:09.288]                 NAMES <- toupper(added)
[18:07:09.288]                 for (kk in seq_along(NAMES)) {
[18:07:09.288]                   name <- added[[kk]]
[18:07:09.288]                   NAME <- NAMES[[kk]]
[18:07:09.288]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.288]                     next
[18:07:09.288]                   args[[name]] <- ""
[18:07:09.288]                 }
[18:07:09.288]                 NAMES <- toupper(removed)
[18:07:09.288]                 for (kk in seq_along(NAMES)) {
[18:07:09.288]                   name <- removed[[kk]]
[18:07:09.288]                   NAME <- NAMES[[kk]]
[18:07:09.288]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.288]                     next
[18:07:09.288]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.288]                 }
[18:07:09.288]                 if (length(args) > 0) 
[18:07:09.288]                   base::do.call(base::Sys.setenv, args = args)
[18:07:09.288]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:09.288]             }
[18:07:09.288]             else {
[18:07:09.288]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:09.288]             }
[18:07:09.288]             {
[18:07:09.288]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:09.288]                   0L) {
[18:07:09.288]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:09.288]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:09.288]                   base::options(opts)
[18:07:09.288]                 }
[18:07:09.288]                 {
[18:07:09.288]                   {
[18:07:09.288]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:09.288]                     NULL
[18:07:09.288]                   }
[18:07:09.288]                   options(future.plan = NULL)
[18:07:09.288]                   if (is.na(NA_character_)) 
[18:07:09.288]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.288]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:09.288]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:09.288]                     .init = FALSE)
[18:07:09.288]                 }
[18:07:09.288]             }
[18:07:09.288]         }
[18:07:09.288]     })
[18:07:09.288]     if (TRUE) {
[18:07:09.288]         base::sink(type = "output", split = FALSE)
[18:07:09.288]         if (FALSE) {
[18:07:09.288]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:09.288]         }
[18:07:09.288]         else {
[18:07:09.288]             ...future.result["stdout"] <- base::list(NULL)
[18:07:09.288]         }
[18:07:09.288]         base::close(...future.stdout)
[18:07:09.288]         ...future.stdout <- NULL
[18:07:09.288]     }
[18:07:09.288]     ...future.result$conditions <- ...future.conditions
[18:07:09.288]     ...future.result$finished <- base::Sys.time()
[18:07:09.288]     ...future.result
[18:07:09.288] }
[18:07:09.294] MultisessionFuture started
[18:07:09.294] - Launch lazy future ... done
[18:07:09.295] run() for ‘MultisessionFuture’ ... done
[18:07:09.295] result() for ClusterFuture ...
[18:07:09.295] receiveMessageFromWorker() for ClusterFuture ...
[18:07:09.295] - Validating connection of MultisessionFuture
[18:07:09.341] - received message: FutureResult
[18:07:09.341] - Received FutureResult
[18:07:09.342] - Erased future from FutureRegistry
[18:07:09.342] result() for ClusterFuture ...
[18:07:09.342] - result already collected: FutureResult
[18:07:09.342] result() for ClusterFuture ... done
[18:07:09.342] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.343] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:09"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:09"
 $ session_uuid: chr "ae84f6b1-b3fd-1f6b-c137-b528d88a308b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331374
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:08"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[18:07:09.358] result() for ClusterFuture ...
[18:07:09.358] - result already collected: FutureResult
[18:07:09.359] result() for ClusterFuture ... done
[18:07:09.359] result() for ClusterFuture ...
[18:07:09.359] - result already collected: FutureResult
[18:07:09.359] result() for ClusterFuture ... done
[18:07:09.360] getGlobalsAndPackages() ...
[18:07:09.360] Searching for globals...
[18:07:09.366] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:09.366] Searching for globals ... DONE
[18:07:09.366] Resolving globals: FALSE
[18:07:09.368] 
[18:07:09.368] - packages: [1] ‘utils’
[18:07:09.368] getGlobalsAndPackages() ... DONE
[18:07:09.369] run() for ‘Future’ ...
[18:07:09.369] - state: ‘created’
[18:07:09.369] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:09.394] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:09.394] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:09.395]   - Field: ‘node’
[18:07:09.395]   - Field: ‘label’
[18:07:09.395]   - Field: ‘local’
[18:07:09.395]   - Field: ‘owner’
[18:07:09.396]   - Field: ‘envir’
[18:07:09.396]   - Field: ‘workers’
[18:07:09.396]   - Field: ‘packages’
[18:07:09.396]   - Field: ‘gc’
[18:07:09.396]   - Field: ‘conditions’
[18:07:09.397]   - Field: ‘persistent’
[18:07:09.397]   - Field: ‘expr’
[18:07:09.397]   - Field: ‘uuid’
[18:07:09.397]   - Field: ‘seed’
[18:07:09.397]   - Field: ‘version’
[18:07:09.398]   - Field: ‘result’
[18:07:09.398]   - Field: ‘asynchronous’
[18:07:09.398]   - Field: ‘calls’
[18:07:09.398]   - Field: ‘globals’
[18:07:09.398]   - Field: ‘stdout’
[18:07:09.399]   - Field: ‘earlySignal’
[18:07:09.399]   - Field: ‘lazy’
[18:07:09.399]   - Field: ‘state’
[18:07:09.399] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:09.399] - Launch lazy future ...
[18:07:09.400] Packages needed by the future expression (n = 1): ‘utils’
[18:07:09.400] Packages needed by future strategies (n = 0): <none>
[18:07:09.401] {
[18:07:09.401]     {
[18:07:09.401]         {
[18:07:09.401]             ...future.startTime <- base::Sys.time()
[18:07:09.401]             {
[18:07:09.401]                 {
[18:07:09.401]                   {
[18:07:09.401]                     {
[18:07:09.401]                       {
[18:07:09.401]                         base::local({
[18:07:09.401]                           has_future <- base::requireNamespace("future", 
[18:07:09.401]                             quietly = TRUE)
[18:07:09.401]                           if (has_future) {
[18:07:09.401]                             ns <- base::getNamespace("future")
[18:07:09.401]                             version <- ns[[".package"]][["version"]]
[18:07:09.401]                             if (is.null(version)) 
[18:07:09.401]                               version <- utils::packageVersion("future")
[18:07:09.401]                           }
[18:07:09.401]                           else {
[18:07:09.401]                             version <- NULL
[18:07:09.401]                           }
[18:07:09.401]                           if (!has_future || version < "1.8.0") {
[18:07:09.401]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:09.401]                               "", base::R.version$version.string), 
[18:07:09.401]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:09.401]                                 base::R.version$platform, 8 * 
[18:07:09.401]                                   base::.Machine$sizeof.pointer), 
[18:07:09.401]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:09.401]                                 "release", "version")], collapse = " "), 
[18:07:09.401]                               hostname = base::Sys.info()[["nodename"]])
[18:07:09.401]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:09.401]                               info)
[18:07:09.401]                             info <- base::paste(info, collapse = "; ")
[18:07:09.401]                             if (!has_future) {
[18:07:09.401]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:09.401]                                 info)
[18:07:09.401]                             }
[18:07:09.401]                             else {
[18:07:09.401]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:09.401]                                 info, version)
[18:07:09.401]                             }
[18:07:09.401]                             base::stop(msg)
[18:07:09.401]                           }
[18:07:09.401]                         })
[18:07:09.401]                       }
[18:07:09.401]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:09.401]                       base::options(mc.cores = 1L)
[18:07:09.401]                     }
[18:07:09.401]                     base::local({
[18:07:09.401]                       for (pkg in "utils") {
[18:07:09.401]                         base::loadNamespace(pkg)
[18:07:09.401]                         base::library(pkg, character.only = TRUE)
[18:07:09.401]                       }
[18:07:09.401]                     })
[18:07:09.401]                   }
[18:07:09.401]                   ...future.strategy.old <- future::plan("list")
[18:07:09.401]                   options(future.plan = NULL)
[18:07:09.401]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.401]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:09.401]                 }
[18:07:09.401]                 ...future.workdir <- getwd()
[18:07:09.401]             }
[18:07:09.401]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:09.401]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:09.401]         }
[18:07:09.401]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:09.401]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:09.401]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:09.401]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:09.401]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:09.401]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:09.401]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:09.401]             base::names(...future.oldOptions))
[18:07:09.401]     }
[18:07:09.401]     if (FALSE) {
[18:07:09.401]     }
[18:07:09.401]     else {
[18:07:09.401]         if (FALSE) {
[18:07:09.401]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:09.401]                 open = "w")
[18:07:09.401]         }
[18:07:09.401]         else {
[18:07:09.401]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:09.401]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:09.401]         }
[18:07:09.401]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:09.401]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:09.401]             base::sink(type = "output", split = FALSE)
[18:07:09.401]             base::close(...future.stdout)
[18:07:09.401]         }, add = TRUE)
[18:07:09.401]     }
[18:07:09.401]     ...future.frame <- base::sys.nframe()
[18:07:09.401]     ...future.conditions <- base::list()
[18:07:09.401]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:09.401]     if (FALSE) {
[18:07:09.401]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:09.401]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:09.401]     }
[18:07:09.401]     ...future.result <- base::tryCatch({
[18:07:09.401]         base::withCallingHandlers({
[18:07:09.401]             ...future.value <- base::withVisible(base::local({
[18:07:09.401]                 ...future.makeSendCondition <- base::local({
[18:07:09.401]                   sendCondition <- NULL
[18:07:09.401]                   function(frame = 1L) {
[18:07:09.401]                     if (is.function(sendCondition)) 
[18:07:09.401]                       return(sendCondition)
[18:07:09.401]                     ns <- getNamespace("parallel")
[18:07:09.401]                     if (exists("sendData", mode = "function", 
[18:07:09.401]                       envir = ns)) {
[18:07:09.401]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:09.401]                         envir = ns)
[18:07:09.401]                       envir <- sys.frame(frame)
[18:07:09.401]                       master <- NULL
[18:07:09.401]                       while (!identical(envir, .GlobalEnv) && 
[18:07:09.401]                         !identical(envir, emptyenv())) {
[18:07:09.401]                         if (exists("master", mode = "list", envir = envir, 
[18:07:09.401]                           inherits = FALSE)) {
[18:07:09.401]                           master <- get("master", mode = "list", 
[18:07:09.401]                             envir = envir, inherits = FALSE)
[18:07:09.401]                           if (inherits(master, c("SOCKnode", 
[18:07:09.401]                             "SOCK0node"))) {
[18:07:09.401]                             sendCondition <<- function(cond) {
[18:07:09.401]                               data <- list(type = "VALUE", value = cond, 
[18:07:09.401]                                 success = TRUE)
[18:07:09.401]                               parallel_sendData(master, data)
[18:07:09.401]                             }
[18:07:09.401]                             return(sendCondition)
[18:07:09.401]                           }
[18:07:09.401]                         }
[18:07:09.401]                         frame <- frame + 1L
[18:07:09.401]                         envir <- sys.frame(frame)
[18:07:09.401]                       }
[18:07:09.401]                     }
[18:07:09.401]                     sendCondition <<- function(cond) NULL
[18:07:09.401]                   }
[18:07:09.401]                 })
[18:07:09.401]                 withCallingHandlers({
[18:07:09.401]                   {
[18:07:09.401]                     print(1:50)
[18:07:09.401]                     str(1:50)
[18:07:09.401]                     cat(letters, sep = "-")
[18:07:09.401]                     cat(1:6, collapse = "\n")
[18:07:09.401]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:09.401]                     42L
[18:07:09.401]                   }
[18:07:09.401]                 }, immediateCondition = function(cond) {
[18:07:09.401]                   sendCondition <- ...future.makeSendCondition()
[18:07:09.401]                   sendCondition(cond)
[18:07:09.401]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.401]                   {
[18:07:09.401]                     inherits <- base::inherits
[18:07:09.401]                     invokeRestart <- base::invokeRestart
[18:07:09.401]                     is.null <- base::is.null
[18:07:09.401]                     muffled <- FALSE
[18:07:09.401]                     if (inherits(cond, "message")) {
[18:07:09.401]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:09.401]                       if (muffled) 
[18:07:09.401]                         invokeRestart("muffleMessage")
[18:07:09.401]                     }
[18:07:09.401]                     else if (inherits(cond, "warning")) {
[18:07:09.401]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:09.401]                       if (muffled) 
[18:07:09.401]                         invokeRestart("muffleWarning")
[18:07:09.401]                     }
[18:07:09.401]                     else if (inherits(cond, "condition")) {
[18:07:09.401]                       if (!is.null(pattern)) {
[18:07:09.401]                         computeRestarts <- base::computeRestarts
[18:07:09.401]                         grepl <- base::grepl
[18:07:09.401]                         restarts <- computeRestarts(cond)
[18:07:09.401]                         for (restart in restarts) {
[18:07:09.401]                           name <- restart$name
[18:07:09.401]                           if (is.null(name)) 
[18:07:09.401]                             next
[18:07:09.401]                           if (!grepl(pattern, name)) 
[18:07:09.401]                             next
[18:07:09.401]                           invokeRestart(restart)
[18:07:09.401]                           muffled <- TRUE
[18:07:09.401]                           break
[18:07:09.401]                         }
[18:07:09.401]                       }
[18:07:09.401]                     }
[18:07:09.401]                     invisible(muffled)
[18:07:09.401]                   }
[18:07:09.401]                   muffleCondition(cond)
[18:07:09.401]                 })
[18:07:09.401]             }))
[18:07:09.401]             future::FutureResult(value = ...future.value$value, 
[18:07:09.401]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.401]                   ...future.rng), globalenv = if (FALSE) 
[18:07:09.401]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:09.401]                     ...future.globalenv.names))
[18:07:09.401]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:09.401]         }, condition = base::local({
[18:07:09.401]             c <- base::c
[18:07:09.401]             inherits <- base::inherits
[18:07:09.401]             invokeRestart <- base::invokeRestart
[18:07:09.401]             length <- base::length
[18:07:09.401]             list <- base::list
[18:07:09.401]             seq.int <- base::seq.int
[18:07:09.401]             signalCondition <- base::signalCondition
[18:07:09.401]             sys.calls <- base::sys.calls
[18:07:09.401]             `[[` <- base::`[[`
[18:07:09.401]             `+` <- base::`+`
[18:07:09.401]             `<<-` <- base::`<<-`
[18:07:09.401]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:09.401]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:09.401]                   3L)]
[18:07:09.401]             }
[18:07:09.401]             function(cond) {
[18:07:09.401]                 is_error <- inherits(cond, "error")
[18:07:09.401]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:09.401]                   NULL)
[18:07:09.401]                 if (is_error) {
[18:07:09.401]                   sessionInformation <- function() {
[18:07:09.401]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:09.401]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:09.401]                       search = base::search(), system = base::Sys.info())
[18:07:09.401]                   }
[18:07:09.401]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.401]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:09.401]                     cond$call), session = sessionInformation(), 
[18:07:09.401]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:09.401]                   signalCondition(cond)
[18:07:09.401]                 }
[18:07:09.401]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:09.401]                 "immediateCondition"))) {
[18:07:09.401]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:09.401]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.401]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:09.401]                   if (TRUE && !signal) {
[18:07:09.401]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.401]                     {
[18:07:09.401]                       inherits <- base::inherits
[18:07:09.401]                       invokeRestart <- base::invokeRestart
[18:07:09.401]                       is.null <- base::is.null
[18:07:09.401]                       muffled <- FALSE
[18:07:09.401]                       if (inherits(cond, "message")) {
[18:07:09.401]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.401]                         if (muffled) 
[18:07:09.401]                           invokeRestart("muffleMessage")
[18:07:09.401]                       }
[18:07:09.401]                       else if (inherits(cond, "warning")) {
[18:07:09.401]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.401]                         if (muffled) 
[18:07:09.401]                           invokeRestart("muffleWarning")
[18:07:09.401]                       }
[18:07:09.401]                       else if (inherits(cond, "condition")) {
[18:07:09.401]                         if (!is.null(pattern)) {
[18:07:09.401]                           computeRestarts <- base::computeRestarts
[18:07:09.401]                           grepl <- base::grepl
[18:07:09.401]                           restarts <- computeRestarts(cond)
[18:07:09.401]                           for (restart in restarts) {
[18:07:09.401]                             name <- restart$name
[18:07:09.401]                             if (is.null(name)) 
[18:07:09.401]                               next
[18:07:09.401]                             if (!grepl(pattern, name)) 
[18:07:09.401]                               next
[18:07:09.401]                             invokeRestart(restart)
[18:07:09.401]                             muffled <- TRUE
[18:07:09.401]                             break
[18:07:09.401]                           }
[18:07:09.401]                         }
[18:07:09.401]                       }
[18:07:09.401]                       invisible(muffled)
[18:07:09.401]                     }
[18:07:09.401]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.401]                   }
[18:07:09.401]                 }
[18:07:09.401]                 else {
[18:07:09.401]                   if (TRUE) {
[18:07:09.401]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.401]                     {
[18:07:09.401]                       inherits <- base::inherits
[18:07:09.401]                       invokeRestart <- base::invokeRestart
[18:07:09.401]                       is.null <- base::is.null
[18:07:09.401]                       muffled <- FALSE
[18:07:09.401]                       if (inherits(cond, "message")) {
[18:07:09.401]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.401]                         if (muffled) 
[18:07:09.401]                           invokeRestart("muffleMessage")
[18:07:09.401]                       }
[18:07:09.401]                       else if (inherits(cond, "warning")) {
[18:07:09.401]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.401]                         if (muffled) 
[18:07:09.401]                           invokeRestart("muffleWarning")
[18:07:09.401]                       }
[18:07:09.401]                       else if (inherits(cond, "condition")) {
[18:07:09.401]                         if (!is.null(pattern)) {
[18:07:09.401]                           computeRestarts <- base::computeRestarts
[18:07:09.401]                           grepl <- base::grepl
[18:07:09.401]                           restarts <- computeRestarts(cond)
[18:07:09.401]                           for (restart in restarts) {
[18:07:09.401]                             name <- restart$name
[18:07:09.401]                             if (is.null(name)) 
[18:07:09.401]                               next
[18:07:09.401]                             if (!grepl(pattern, name)) 
[18:07:09.401]                               next
[18:07:09.401]                             invokeRestart(restart)
[18:07:09.401]                             muffled <- TRUE
[18:07:09.401]                             break
[18:07:09.401]                           }
[18:07:09.401]                         }
[18:07:09.401]                       }
[18:07:09.401]                       invisible(muffled)
[18:07:09.401]                     }
[18:07:09.401]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.401]                   }
[18:07:09.401]                 }
[18:07:09.401]             }
[18:07:09.401]         }))
[18:07:09.401]     }, error = function(ex) {
[18:07:09.401]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:09.401]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.401]                 ...future.rng), started = ...future.startTime, 
[18:07:09.401]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:09.401]             version = "1.8"), class = "FutureResult")
[18:07:09.401]     }, finally = {
[18:07:09.401]         if (!identical(...future.workdir, getwd())) 
[18:07:09.401]             setwd(...future.workdir)
[18:07:09.401]         {
[18:07:09.401]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:09.401]                 ...future.oldOptions$nwarnings <- NULL
[18:07:09.401]             }
[18:07:09.401]             base::options(...future.oldOptions)
[18:07:09.401]             if (.Platform$OS.type == "windows") {
[18:07:09.401]                 old_names <- names(...future.oldEnvVars)
[18:07:09.401]                 envs <- base::Sys.getenv()
[18:07:09.401]                 names <- names(envs)
[18:07:09.401]                 common <- intersect(names, old_names)
[18:07:09.401]                 added <- setdiff(names, old_names)
[18:07:09.401]                 removed <- setdiff(old_names, names)
[18:07:09.401]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:09.401]                   envs[common]]
[18:07:09.401]                 NAMES <- toupper(changed)
[18:07:09.401]                 args <- list()
[18:07:09.401]                 for (kk in seq_along(NAMES)) {
[18:07:09.401]                   name <- changed[[kk]]
[18:07:09.401]                   NAME <- NAMES[[kk]]
[18:07:09.401]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.401]                     next
[18:07:09.401]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.401]                 }
[18:07:09.401]                 NAMES <- toupper(added)
[18:07:09.401]                 for (kk in seq_along(NAMES)) {
[18:07:09.401]                   name <- added[[kk]]
[18:07:09.401]                   NAME <- NAMES[[kk]]
[18:07:09.401]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.401]                     next
[18:07:09.401]                   args[[name]] <- ""
[18:07:09.401]                 }
[18:07:09.401]                 NAMES <- toupper(removed)
[18:07:09.401]                 for (kk in seq_along(NAMES)) {
[18:07:09.401]                   name <- removed[[kk]]
[18:07:09.401]                   NAME <- NAMES[[kk]]
[18:07:09.401]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.401]                     next
[18:07:09.401]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.401]                 }
[18:07:09.401]                 if (length(args) > 0) 
[18:07:09.401]                   base::do.call(base::Sys.setenv, args = args)
[18:07:09.401]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:09.401]             }
[18:07:09.401]             else {
[18:07:09.401]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:09.401]             }
[18:07:09.401]             {
[18:07:09.401]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:09.401]                   0L) {
[18:07:09.401]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:09.401]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:09.401]                   base::options(opts)
[18:07:09.401]                 }
[18:07:09.401]                 {
[18:07:09.401]                   {
[18:07:09.401]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:09.401]                     NULL
[18:07:09.401]                   }
[18:07:09.401]                   options(future.plan = NULL)
[18:07:09.401]                   if (is.na(NA_character_)) 
[18:07:09.401]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.401]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:09.401]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:09.401]                     .init = FALSE)
[18:07:09.401]                 }
[18:07:09.401]             }
[18:07:09.401]         }
[18:07:09.401]     })
[18:07:09.401]     if (TRUE) {
[18:07:09.401]         base::sink(type = "output", split = FALSE)
[18:07:09.401]         if (FALSE) {
[18:07:09.401]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:09.401]         }
[18:07:09.401]         else {
[18:07:09.401]             ...future.result["stdout"] <- base::list(NULL)
[18:07:09.401]         }
[18:07:09.401]         base::close(...future.stdout)
[18:07:09.401]         ...future.stdout <- NULL
[18:07:09.401]     }
[18:07:09.401]     ...future.result$conditions <- ...future.conditions
[18:07:09.401]     ...future.result$finished <- base::Sys.time()
[18:07:09.401]     ...future.result
[18:07:09.401] }
[18:07:09.408] MultisessionFuture started
[18:07:09.408] - Launch lazy future ... done
[18:07:09.408] run() for ‘MultisessionFuture’ ... done
[18:07:09.409] result() for ClusterFuture ...
[18:07:09.413] receiveMessageFromWorker() for ClusterFuture ...
[18:07:09.413] - Validating connection of MultisessionFuture
[18:07:09.415] - received message: FutureResult
[18:07:09.415] - Received FutureResult
[18:07:09.415] - Erased future from FutureRegistry
[18:07:09.415] result() for ClusterFuture ...
[18:07:09.416] - result already collected: FutureResult
[18:07:09.416] result() for ClusterFuture ... done
[18:07:09.416] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.416] result() for ClusterFuture ... done
[18:07:09.416] result() for ClusterFuture ...
[18:07:09.417] - result already collected: FutureResult
[18:07:09.417] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[18:07:09.418] getGlobalsAndPackages() ...
[18:07:09.418] Searching for globals...
[18:07:09.419] - globals found: [1] ‘print’
[18:07:09.420] Searching for globals ... DONE
[18:07:09.420] Resolving globals: FALSE
[18:07:09.420] 
[18:07:09.420] 
[18:07:09.421] getGlobalsAndPackages() ... DONE
[18:07:09.421] run() for ‘Future’ ...
[18:07:09.421] - state: ‘created’
[18:07:09.422] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:09.446] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:09.446] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:09.447]   - Field: ‘node’
[18:07:09.447]   - Field: ‘label’
[18:07:09.447]   - Field: ‘local’
[18:07:09.447]   - Field: ‘owner’
[18:07:09.447]   - Field: ‘envir’
[18:07:09.448]   - Field: ‘workers’
[18:07:09.448]   - Field: ‘packages’
[18:07:09.448]   - Field: ‘gc’
[18:07:09.448]   - Field: ‘conditions’
[18:07:09.448]   - Field: ‘persistent’
[18:07:09.449]   - Field: ‘expr’
[18:07:09.449]   - Field: ‘uuid’
[18:07:09.449]   - Field: ‘seed’
[18:07:09.449]   - Field: ‘version’
[18:07:09.449]   - Field: ‘result’
[18:07:09.449]   - Field: ‘asynchronous’
[18:07:09.450]   - Field: ‘calls’
[18:07:09.450]   - Field: ‘globals’
[18:07:09.450]   - Field: ‘stdout’
[18:07:09.450]   - Field: ‘earlySignal’
[18:07:09.450]   - Field: ‘lazy’
[18:07:09.451]   - Field: ‘state’
[18:07:09.451] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:09.451] - Launch lazy future ...
[18:07:09.452] Packages needed by the future expression (n = 0): <none>
[18:07:09.452] Packages needed by future strategies (n = 0): <none>
[18:07:09.453] {
[18:07:09.453]     {
[18:07:09.453]         {
[18:07:09.453]             ...future.startTime <- base::Sys.time()
[18:07:09.453]             {
[18:07:09.453]                 {
[18:07:09.453]                   {
[18:07:09.453]                     {
[18:07:09.453]                       base::local({
[18:07:09.453]                         has_future <- base::requireNamespace("future", 
[18:07:09.453]                           quietly = TRUE)
[18:07:09.453]                         if (has_future) {
[18:07:09.453]                           ns <- base::getNamespace("future")
[18:07:09.453]                           version <- ns[[".package"]][["version"]]
[18:07:09.453]                           if (is.null(version)) 
[18:07:09.453]                             version <- utils::packageVersion("future")
[18:07:09.453]                         }
[18:07:09.453]                         else {
[18:07:09.453]                           version <- NULL
[18:07:09.453]                         }
[18:07:09.453]                         if (!has_future || version < "1.8.0") {
[18:07:09.453]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:09.453]                             "", base::R.version$version.string), 
[18:07:09.453]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:09.453]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:09.453]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:09.453]                               "release", "version")], collapse = " "), 
[18:07:09.453]                             hostname = base::Sys.info()[["nodename"]])
[18:07:09.453]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:09.453]                             info)
[18:07:09.453]                           info <- base::paste(info, collapse = "; ")
[18:07:09.453]                           if (!has_future) {
[18:07:09.453]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:09.453]                               info)
[18:07:09.453]                           }
[18:07:09.453]                           else {
[18:07:09.453]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:09.453]                               info, version)
[18:07:09.453]                           }
[18:07:09.453]                           base::stop(msg)
[18:07:09.453]                         }
[18:07:09.453]                       })
[18:07:09.453]                     }
[18:07:09.453]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:09.453]                     base::options(mc.cores = 1L)
[18:07:09.453]                   }
[18:07:09.453]                   ...future.strategy.old <- future::plan("list")
[18:07:09.453]                   options(future.plan = NULL)
[18:07:09.453]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.453]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:09.453]                 }
[18:07:09.453]                 ...future.workdir <- getwd()
[18:07:09.453]             }
[18:07:09.453]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:09.453]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:09.453]         }
[18:07:09.453]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:09.453]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:09.453]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:09.453]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:09.453]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:09.453]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:09.453]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:09.453]             base::names(...future.oldOptions))
[18:07:09.453]     }
[18:07:09.453]     if (FALSE) {
[18:07:09.453]     }
[18:07:09.453]     else {
[18:07:09.453]         if (TRUE) {
[18:07:09.453]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:09.453]                 open = "w")
[18:07:09.453]         }
[18:07:09.453]         else {
[18:07:09.453]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:09.453]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:09.453]         }
[18:07:09.453]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:09.453]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:09.453]             base::sink(type = "output", split = FALSE)
[18:07:09.453]             base::close(...future.stdout)
[18:07:09.453]         }, add = TRUE)
[18:07:09.453]     }
[18:07:09.453]     ...future.frame <- base::sys.nframe()
[18:07:09.453]     ...future.conditions <- base::list()
[18:07:09.453]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:09.453]     if (FALSE) {
[18:07:09.453]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:09.453]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:09.453]     }
[18:07:09.453]     ...future.result <- base::tryCatch({
[18:07:09.453]         base::withCallingHandlers({
[18:07:09.453]             ...future.value <- base::withVisible(base::local({
[18:07:09.453]                 ...future.makeSendCondition <- base::local({
[18:07:09.453]                   sendCondition <- NULL
[18:07:09.453]                   function(frame = 1L) {
[18:07:09.453]                     if (is.function(sendCondition)) 
[18:07:09.453]                       return(sendCondition)
[18:07:09.453]                     ns <- getNamespace("parallel")
[18:07:09.453]                     if (exists("sendData", mode = "function", 
[18:07:09.453]                       envir = ns)) {
[18:07:09.453]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:09.453]                         envir = ns)
[18:07:09.453]                       envir <- sys.frame(frame)
[18:07:09.453]                       master <- NULL
[18:07:09.453]                       while (!identical(envir, .GlobalEnv) && 
[18:07:09.453]                         !identical(envir, emptyenv())) {
[18:07:09.453]                         if (exists("master", mode = "list", envir = envir, 
[18:07:09.453]                           inherits = FALSE)) {
[18:07:09.453]                           master <- get("master", mode = "list", 
[18:07:09.453]                             envir = envir, inherits = FALSE)
[18:07:09.453]                           if (inherits(master, c("SOCKnode", 
[18:07:09.453]                             "SOCK0node"))) {
[18:07:09.453]                             sendCondition <<- function(cond) {
[18:07:09.453]                               data <- list(type = "VALUE", value = cond, 
[18:07:09.453]                                 success = TRUE)
[18:07:09.453]                               parallel_sendData(master, data)
[18:07:09.453]                             }
[18:07:09.453]                             return(sendCondition)
[18:07:09.453]                           }
[18:07:09.453]                         }
[18:07:09.453]                         frame <- frame + 1L
[18:07:09.453]                         envir <- sys.frame(frame)
[18:07:09.453]                       }
[18:07:09.453]                     }
[18:07:09.453]                     sendCondition <<- function(cond) NULL
[18:07:09.453]                   }
[18:07:09.453]                 })
[18:07:09.453]                 withCallingHandlers({
[18:07:09.453]                   print(42)
[18:07:09.453]                 }, immediateCondition = function(cond) {
[18:07:09.453]                   sendCondition <- ...future.makeSendCondition()
[18:07:09.453]                   sendCondition(cond)
[18:07:09.453]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.453]                   {
[18:07:09.453]                     inherits <- base::inherits
[18:07:09.453]                     invokeRestart <- base::invokeRestart
[18:07:09.453]                     is.null <- base::is.null
[18:07:09.453]                     muffled <- FALSE
[18:07:09.453]                     if (inherits(cond, "message")) {
[18:07:09.453]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:09.453]                       if (muffled) 
[18:07:09.453]                         invokeRestart("muffleMessage")
[18:07:09.453]                     }
[18:07:09.453]                     else if (inherits(cond, "warning")) {
[18:07:09.453]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:09.453]                       if (muffled) 
[18:07:09.453]                         invokeRestart("muffleWarning")
[18:07:09.453]                     }
[18:07:09.453]                     else if (inherits(cond, "condition")) {
[18:07:09.453]                       if (!is.null(pattern)) {
[18:07:09.453]                         computeRestarts <- base::computeRestarts
[18:07:09.453]                         grepl <- base::grepl
[18:07:09.453]                         restarts <- computeRestarts(cond)
[18:07:09.453]                         for (restart in restarts) {
[18:07:09.453]                           name <- restart$name
[18:07:09.453]                           if (is.null(name)) 
[18:07:09.453]                             next
[18:07:09.453]                           if (!grepl(pattern, name)) 
[18:07:09.453]                             next
[18:07:09.453]                           invokeRestart(restart)
[18:07:09.453]                           muffled <- TRUE
[18:07:09.453]                           break
[18:07:09.453]                         }
[18:07:09.453]                       }
[18:07:09.453]                     }
[18:07:09.453]                     invisible(muffled)
[18:07:09.453]                   }
[18:07:09.453]                   muffleCondition(cond)
[18:07:09.453]                 })
[18:07:09.453]             }))
[18:07:09.453]             future::FutureResult(value = ...future.value$value, 
[18:07:09.453]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.453]                   ...future.rng), globalenv = if (FALSE) 
[18:07:09.453]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:09.453]                     ...future.globalenv.names))
[18:07:09.453]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:09.453]         }, condition = base::local({
[18:07:09.453]             c <- base::c
[18:07:09.453]             inherits <- base::inherits
[18:07:09.453]             invokeRestart <- base::invokeRestart
[18:07:09.453]             length <- base::length
[18:07:09.453]             list <- base::list
[18:07:09.453]             seq.int <- base::seq.int
[18:07:09.453]             signalCondition <- base::signalCondition
[18:07:09.453]             sys.calls <- base::sys.calls
[18:07:09.453]             `[[` <- base::`[[`
[18:07:09.453]             `+` <- base::`+`
[18:07:09.453]             `<<-` <- base::`<<-`
[18:07:09.453]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:09.453]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:09.453]                   3L)]
[18:07:09.453]             }
[18:07:09.453]             function(cond) {
[18:07:09.453]                 is_error <- inherits(cond, "error")
[18:07:09.453]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:09.453]                   NULL)
[18:07:09.453]                 if (is_error) {
[18:07:09.453]                   sessionInformation <- function() {
[18:07:09.453]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:09.453]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:09.453]                       search = base::search(), system = base::Sys.info())
[18:07:09.453]                   }
[18:07:09.453]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.453]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:09.453]                     cond$call), session = sessionInformation(), 
[18:07:09.453]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:09.453]                   signalCondition(cond)
[18:07:09.453]                 }
[18:07:09.453]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:09.453]                 "immediateCondition"))) {
[18:07:09.453]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:09.453]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.453]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:09.453]                   if (TRUE && !signal) {
[18:07:09.453]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.453]                     {
[18:07:09.453]                       inherits <- base::inherits
[18:07:09.453]                       invokeRestart <- base::invokeRestart
[18:07:09.453]                       is.null <- base::is.null
[18:07:09.453]                       muffled <- FALSE
[18:07:09.453]                       if (inherits(cond, "message")) {
[18:07:09.453]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.453]                         if (muffled) 
[18:07:09.453]                           invokeRestart("muffleMessage")
[18:07:09.453]                       }
[18:07:09.453]                       else if (inherits(cond, "warning")) {
[18:07:09.453]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.453]                         if (muffled) 
[18:07:09.453]                           invokeRestart("muffleWarning")
[18:07:09.453]                       }
[18:07:09.453]                       else if (inherits(cond, "condition")) {
[18:07:09.453]                         if (!is.null(pattern)) {
[18:07:09.453]                           computeRestarts <- base::computeRestarts
[18:07:09.453]                           grepl <- base::grepl
[18:07:09.453]                           restarts <- computeRestarts(cond)
[18:07:09.453]                           for (restart in restarts) {
[18:07:09.453]                             name <- restart$name
[18:07:09.453]                             if (is.null(name)) 
[18:07:09.453]                               next
[18:07:09.453]                             if (!grepl(pattern, name)) 
[18:07:09.453]                               next
[18:07:09.453]                             invokeRestart(restart)
[18:07:09.453]                             muffled <- TRUE
[18:07:09.453]                             break
[18:07:09.453]                           }
[18:07:09.453]                         }
[18:07:09.453]                       }
[18:07:09.453]                       invisible(muffled)
[18:07:09.453]                     }
[18:07:09.453]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.453]                   }
[18:07:09.453]                 }
[18:07:09.453]                 else {
[18:07:09.453]                   if (TRUE) {
[18:07:09.453]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.453]                     {
[18:07:09.453]                       inherits <- base::inherits
[18:07:09.453]                       invokeRestart <- base::invokeRestart
[18:07:09.453]                       is.null <- base::is.null
[18:07:09.453]                       muffled <- FALSE
[18:07:09.453]                       if (inherits(cond, "message")) {
[18:07:09.453]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.453]                         if (muffled) 
[18:07:09.453]                           invokeRestart("muffleMessage")
[18:07:09.453]                       }
[18:07:09.453]                       else if (inherits(cond, "warning")) {
[18:07:09.453]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.453]                         if (muffled) 
[18:07:09.453]                           invokeRestart("muffleWarning")
[18:07:09.453]                       }
[18:07:09.453]                       else if (inherits(cond, "condition")) {
[18:07:09.453]                         if (!is.null(pattern)) {
[18:07:09.453]                           computeRestarts <- base::computeRestarts
[18:07:09.453]                           grepl <- base::grepl
[18:07:09.453]                           restarts <- computeRestarts(cond)
[18:07:09.453]                           for (restart in restarts) {
[18:07:09.453]                             name <- restart$name
[18:07:09.453]                             if (is.null(name)) 
[18:07:09.453]                               next
[18:07:09.453]                             if (!grepl(pattern, name)) 
[18:07:09.453]                               next
[18:07:09.453]                             invokeRestart(restart)
[18:07:09.453]                             muffled <- TRUE
[18:07:09.453]                             break
[18:07:09.453]                           }
[18:07:09.453]                         }
[18:07:09.453]                       }
[18:07:09.453]                       invisible(muffled)
[18:07:09.453]                     }
[18:07:09.453]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.453]                   }
[18:07:09.453]                 }
[18:07:09.453]             }
[18:07:09.453]         }))
[18:07:09.453]     }, error = function(ex) {
[18:07:09.453]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:09.453]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.453]                 ...future.rng), started = ...future.startTime, 
[18:07:09.453]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:09.453]             version = "1.8"), class = "FutureResult")
[18:07:09.453]     }, finally = {
[18:07:09.453]         if (!identical(...future.workdir, getwd())) 
[18:07:09.453]             setwd(...future.workdir)
[18:07:09.453]         {
[18:07:09.453]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:09.453]                 ...future.oldOptions$nwarnings <- NULL
[18:07:09.453]             }
[18:07:09.453]             base::options(...future.oldOptions)
[18:07:09.453]             if (.Platform$OS.type == "windows") {
[18:07:09.453]                 old_names <- names(...future.oldEnvVars)
[18:07:09.453]                 envs <- base::Sys.getenv()
[18:07:09.453]                 names <- names(envs)
[18:07:09.453]                 common <- intersect(names, old_names)
[18:07:09.453]                 added <- setdiff(names, old_names)
[18:07:09.453]                 removed <- setdiff(old_names, names)
[18:07:09.453]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:09.453]                   envs[common]]
[18:07:09.453]                 NAMES <- toupper(changed)
[18:07:09.453]                 args <- list()
[18:07:09.453]                 for (kk in seq_along(NAMES)) {
[18:07:09.453]                   name <- changed[[kk]]
[18:07:09.453]                   NAME <- NAMES[[kk]]
[18:07:09.453]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.453]                     next
[18:07:09.453]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.453]                 }
[18:07:09.453]                 NAMES <- toupper(added)
[18:07:09.453]                 for (kk in seq_along(NAMES)) {
[18:07:09.453]                   name <- added[[kk]]
[18:07:09.453]                   NAME <- NAMES[[kk]]
[18:07:09.453]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.453]                     next
[18:07:09.453]                   args[[name]] <- ""
[18:07:09.453]                 }
[18:07:09.453]                 NAMES <- toupper(removed)
[18:07:09.453]                 for (kk in seq_along(NAMES)) {
[18:07:09.453]                   name <- removed[[kk]]
[18:07:09.453]                   NAME <- NAMES[[kk]]
[18:07:09.453]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.453]                     next
[18:07:09.453]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.453]                 }
[18:07:09.453]                 if (length(args) > 0) 
[18:07:09.453]                   base::do.call(base::Sys.setenv, args = args)
[18:07:09.453]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:09.453]             }
[18:07:09.453]             else {
[18:07:09.453]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:09.453]             }
[18:07:09.453]             {
[18:07:09.453]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:09.453]                   0L) {
[18:07:09.453]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:09.453]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:09.453]                   base::options(opts)
[18:07:09.453]                 }
[18:07:09.453]                 {
[18:07:09.453]                   {
[18:07:09.453]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:09.453]                     NULL
[18:07:09.453]                   }
[18:07:09.453]                   options(future.plan = NULL)
[18:07:09.453]                   if (is.na(NA_character_)) 
[18:07:09.453]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.453]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:09.453]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:09.453]                     .init = FALSE)
[18:07:09.453]                 }
[18:07:09.453]             }
[18:07:09.453]         }
[18:07:09.453]     })
[18:07:09.453]     if (TRUE) {
[18:07:09.453]         base::sink(type = "output", split = FALSE)
[18:07:09.453]         if (TRUE) {
[18:07:09.453]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:09.453]         }
[18:07:09.453]         else {
[18:07:09.453]             ...future.result["stdout"] <- base::list(NULL)
[18:07:09.453]         }
[18:07:09.453]         base::close(...future.stdout)
[18:07:09.453]         ...future.stdout <- NULL
[18:07:09.453]     }
[18:07:09.453]     ...future.result$conditions <- ...future.conditions
[18:07:09.453]     ...future.result$finished <- base::Sys.time()
[18:07:09.453]     ...future.result
[18:07:09.453] }
[18:07:09.458] MultisessionFuture started
[18:07:09.459] - Launch lazy future ... done
[18:07:09.459] run() for ‘MultisessionFuture’ ... done
[18:07:09.459] result() for ClusterFuture ...
[18:07:09.459] receiveMessageFromWorker() for ClusterFuture ...
[18:07:09.460] - Validating connection of MultisessionFuture
[18:07:09.502] - received message: FutureResult
[18:07:09.503] - Received FutureResult
[18:07:09.503] - Erased future from FutureRegistry
[18:07:09.503] result() for ClusterFuture ...
[18:07:09.503] - result already collected: FutureResult
[18:07:09.504] result() for ClusterFuture ... done
[18:07:09.504] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.504] result() for ClusterFuture ... done
[18:07:09.504] result() for ClusterFuture ...
[18:07:09.504] - result already collected: FutureResult
[18:07:09.505] result() for ClusterFuture ... done
[18:07:09.505] result() for ClusterFuture ...
[18:07:09.505] - result already collected: FutureResult
[18:07:09.505] result() for ClusterFuture ... done
[1] 42
[18:07:09.505] result() for ClusterFuture ...
[18:07:09.506] - result already collected: FutureResult
[18:07:09.506] result() for ClusterFuture ... done
- stdout = NA
[18:07:09.506] getGlobalsAndPackages() ...
[18:07:09.506] Searching for globals...
[18:07:09.512] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:09.513] Searching for globals ... DONE
[18:07:09.513] Resolving globals: FALSE
[18:07:09.514] 
[18:07:09.514] - packages: [1] ‘utils’
[18:07:09.514] getGlobalsAndPackages() ... DONE
[18:07:09.515] run() for ‘Future’ ...
[18:07:09.515] - state: ‘created’
[18:07:09.515] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:09.540] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:09.541] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:09.541]   - Field: ‘node’
[18:07:09.541]   - Field: ‘label’
[18:07:09.541]   - Field: ‘local’
[18:07:09.542]   - Field: ‘owner’
[18:07:09.542]   - Field: ‘envir’
[18:07:09.542]   - Field: ‘workers’
[18:07:09.542]   - Field: ‘packages’
[18:07:09.542]   - Field: ‘gc’
[18:07:09.543]   - Field: ‘conditions’
[18:07:09.543]   - Field: ‘persistent’
[18:07:09.543]   - Field: ‘expr’
[18:07:09.543]   - Field: ‘uuid’
[18:07:09.543]   - Field: ‘seed’
[18:07:09.544]   - Field: ‘version’
[18:07:09.544]   - Field: ‘result’
[18:07:09.544]   - Field: ‘asynchronous’
[18:07:09.544]   - Field: ‘calls’
[18:07:09.544]   - Field: ‘globals’
[18:07:09.545]   - Field: ‘stdout’
[18:07:09.545]   - Field: ‘earlySignal’
[18:07:09.545]   - Field: ‘lazy’
[18:07:09.545]   - Field: ‘state’
[18:07:09.545] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:09.546] - Launch lazy future ...
[18:07:09.549] Packages needed by the future expression (n = 1): ‘utils’
[18:07:09.549] Packages needed by future strategies (n = 0): <none>
[18:07:09.550] {
[18:07:09.550]     {
[18:07:09.550]         {
[18:07:09.550]             ...future.startTime <- base::Sys.time()
[18:07:09.550]             {
[18:07:09.550]                 {
[18:07:09.550]                   {
[18:07:09.550]                     {
[18:07:09.550]                       {
[18:07:09.550]                         base::local({
[18:07:09.550]                           has_future <- base::requireNamespace("future", 
[18:07:09.550]                             quietly = TRUE)
[18:07:09.550]                           if (has_future) {
[18:07:09.550]                             ns <- base::getNamespace("future")
[18:07:09.550]                             version <- ns[[".package"]][["version"]]
[18:07:09.550]                             if (is.null(version)) 
[18:07:09.550]                               version <- utils::packageVersion("future")
[18:07:09.550]                           }
[18:07:09.550]                           else {
[18:07:09.550]                             version <- NULL
[18:07:09.550]                           }
[18:07:09.550]                           if (!has_future || version < "1.8.0") {
[18:07:09.550]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:09.550]                               "", base::R.version$version.string), 
[18:07:09.550]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:09.550]                                 base::R.version$platform, 8 * 
[18:07:09.550]                                   base::.Machine$sizeof.pointer), 
[18:07:09.550]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:09.550]                                 "release", "version")], collapse = " "), 
[18:07:09.550]                               hostname = base::Sys.info()[["nodename"]])
[18:07:09.550]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:09.550]                               info)
[18:07:09.550]                             info <- base::paste(info, collapse = "; ")
[18:07:09.550]                             if (!has_future) {
[18:07:09.550]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:09.550]                                 info)
[18:07:09.550]                             }
[18:07:09.550]                             else {
[18:07:09.550]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:09.550]                                 info, version)
[18:07:09.550]                             }
[18:07:09.550]                             base::stop(msg)
[18:07:09.550]                           }
[18:07:09.550]                         })
[18:07:09.550]                       }
[18:07:09.550]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:09.550]                       base::options(mc.cores = 1L)
[18:07:09.550]                     }
[18:07:09.550]                     base::local({
[18:07:09.550]                       for (pkg in "utils") {
[18:07:09.550]                         base::loadNamespace(pkg)
[18:07:09.550]                         base::library(pkg, character.only = TRUE)
[18:07:09.550]                       }
[18:07:09.550]                     })
[18:07:09.550]                   }
[18:07:09.550]                   ...future.strategy.old <- future::plan("list")
[18:07:09.550]                   options(future.plan = NULL)
[18:07:09.550]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.550]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:09.550]                 }
[18:07:09.550]                 ...future.workdir <- getwd()
[18:07:09.550]             }
[18:07:09.550]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:09.550]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:09.550]         }
[18:07:09.550]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:09.550]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:09.550]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:09.550]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:09.550]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:09.550]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:09.550]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:09.550]             base::names(...future.oldOptions))
[18:07:09.550]     }
[18:07:09.550]     if (TRUE) {
[18:07:09.550]     }
[18:07:09.550]     else {
[18:07:09.550]         if (NA) {
[18:07:09.550]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:09.550]                 open = "w")
[18:07:09.550]         }
[18:07:09.550]         else {
[18:07:09.550]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:09.550]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:09.550]         }
[18:07:09.550]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:09.550]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:09.550]             base::sink(type = "output", split = FALSE)
[18:07:09.550]             base::close(...future.stdout)
[18:07:09.550]         }, add = TRUE)
[18:07:09.550]     }
[18:07:09.550]     ...future.frame <- base::sys.nframe()
[18:07:09.550]     ...future.conditions <- base::list()
[18:07:09.550]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:09.550]     if (FALSE) {
[18:07:09.550]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:09.550]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:09.550]     }
[18:07:09.550]     ...future.result <- base::tryCatch({
[18:07:09.550]         base::withCallingHandlers({
[18:07:09.550]             ...future.value <- base::withVisible(base::local({
[18:07:09.550]                 ...future.makeSendCondition <- base::local({
[18:07:09.550]                   sendCondition <- NULL
[18:07:09.550]                   function(frame = 1L) {
[18:07:09.550]                     if (is.function(sendCondition)) 
[18:07:09.550]                       return(sendCondition)
[18:07:09.550]                     ns <- getNamespace("parallel")
[18:07:09.550]                     if (exists("sendData", mode = "function", 
[18:07:09.550]                       envir = ns)) {
[18:07:09.550]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:09.550]                         envir = ns)
[18:07:09.550]                       envir <- sys.frame(frame)
[18:07:09.550]                       master <- NULL
[18:07:09.550]                       while (!identical(envir, .GlobalEnv) && 
[18:07:09.550]                         !identical(envir, emptyenv())) {
[18:07:09.550]                         if (exists("master", mode = "list", envir = envir, 
[18:07:09.550]                           inherits = FALSE)) {
[18:07:09.550]                           master <- get("master", mode = "list", 
[18:07:09.550]                             envir = envir, inherits = FALSE)
[18:07:09.550]                           if (inherits(master, c("SOCKnode", 
[18:07:09.550]                             "SOCK0node"))) {
[18:07:09.550]                             sendCondition <<- function(cond) {
[18:07:09.550]                               data <- list(type = "VALUE", value = cond, 
[18:07:09.550]                                 success = TRUE)
[18:07:09.550]                               parallel_sendData(master, data)
[18:07:09.550]                             }
[18:07:09.550]                             return(sendCondition)
[18:07:09.550]                           }
[18:07:09.550]                         }
[18:07:09.550]                         frame <- frame + 1L
[18:07:09.550]                         envir <- sys.frame(frame)
[18:07:09.550]                       }
[18:07:09.550]                     }
[18:07:09.550]                     sendCondition <<- function(cond) NULL
[18:07:09.550]                   }
[18:07:09.550]                 })
[18:07:09.550]                 withCallingHandlers({
[18:07:09.550]                   {
[18:07:09.550]                     print(1:50)
[18:07:09.550]                     str(1:50)
[18:07:09.550]                     cat(letters, sep = "-")
[18:07:09.550]                     cat(1:6, collapse = "\n")
[18:07:09.550]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:09.550]                     42L
[18:07:09.550]                   }
[18:07:09.550]                 }, immediateCondition = function(cond) {
[18:07:09.550]                   sendCondition <- ...future.makeSendCondition()
[18:07:09.550]                   sendCondition(cond)
[18:07:09.550]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.550]                   {
[18:07:09.550]                     inherits <- base::inherits
[18:07:09.550]                     invokeRestart <- base::invokeRestart
[18:07:09.550]                     is.null <- base::is.null
[18:07:09.550]                     muffled <- FALSE
[18:07:09.550]                     if (inherits(cond, "message")) {
[18:07:09.550]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:09.550]                       if (muffled) 
[18:07:09.550]                         invokeRestart("muffleMessage")
[18:07:09.550]                     }
[18:07:09.550]                     else if (inherits(cond, "warning")) {
[18:07:09.550]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:09.550]                       if (muffled) 
[18:07:09.550]                         invokeRestart("muffleWarning")
[18:07:09.550]                     }
[18:07:09.550]                     else if (inherits(cond, "condition")) {
[18:07:09.550]                       if (!is.null(pattern)) {
[18:07:09.550]                         computeRestarts <- base::computeRestarts
[18:07:09.550]                         grepl <- base::grepl
[18:07:09.550]                         restarts <- computeRestarts(cond)
[18:07:09.550]                         for (restart in restarts) {
[18:07:09.550]                           name <- restart$name
[18:07:09.550]                           if (is.null(name)) 
[18:07:09.550]                             next
[18:07:09.550]                           if (!grepl(pattern, name)) 
[18:07:09.550]                             next
[18:07:09.550]                           invokeRestart(restart)
[18:07:09.550]                           muffled <- TRUE
[18:07:09.550]                           break
[18:07:09.550]                         }
[18:07:09.550]                       }
[18:07:09.550]                     }
[18:07:09.550]                     invisible(muffled)
[18:07:09.550]                   }
[18:07:09.550]                   muffleCondition(cond)
[18:07:09.550]                 })
[18:07:09.550]             }))
[18:07:09.550]             future::FutureResult(value = ...future.value$value, 
[18:07:09.550]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.550]                   ...future.rng), globalenv = if (FALSE) 
[18:07:09.550]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:09.550]                     ...future.globalenv.names))
[18:07:09.550]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:09.550]         }, condition = base::local({
[18:07:09.550]             c <- base::c
[18:07:09.550]             inherits <- base::inherits
[18:07:09.550]             invokeRestart <- base::invokeRestart
[18:07:09.550]             length <- base::length
[18:07:09.550]             list <- base::list
[18:07:09.550]             seq.int <- base::seq.int
[18:07:09.550]             signalCondition <- base::signalCondition
[18:07:09.550]             sys.calls <- base::sys.calls
[18:07:09.550]             `[[` <- base::`[[`
[18:07:09.550]             `+` <- base::`+`
[18:07:09.550]             `<<-` <- base::`<<-`
[18:07:09.550]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:09.550]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:09.550]                   3L)]
[18:07:09.550]             }
[18:07:09.550]             function(cond) {
[18:07:09.550]                 is_error <- inherits(cond, "error")
[18:07:09.550]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:09.550]                   NULL)
[18:07:09.550]                 if (is_error) {
[18:07:09.550]                   sessionInformation <- function() {
[18:07:09.550]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:09.550]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:09.550]                       search = base::search(), system = base::Sys.info())
[18:07:09.550]                   }
[18:07:09.550]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.550]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:09.550]                     cond$call), session = sessionInformation(), 
[18:07:09.550]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:09.550]                   signalCondition(cond)
[18:07:09.550]                 }
[18:07:09.550]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:09.550]                 "immediateCondition"))) {
[18:07:09.550]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:09.550]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.550]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:09.550]                   if (TRUE && !signal) {
[18:07:09.550]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.550]                     {
[18:07:09.550]                       inherits <- base::inherits
[18:07:09.550]                       invokeRestart <- base::invokeRestart
[18:07:09.550]                       is.null <- base::is.null
[18:07:09.550]                       muffled <- FALSE
[18:07:09.550]                       if (inherits(cond, "message")) {
[18:07:09.550]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.550]                         if (muffled) 
[18:07:09.550]                           invokeRestart("muffleMessage")
[18:07:09.550]                       }
[18:07:09.550]                       else if (inherits(cond, "warning")) {
[18:07:09.550]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.550]                         if (muffled) 
[18:07:09.550]                           invokeRestart("muffleWarning")
[18:07:09.550]                       }
[18:07:09.550]                       else if (inherits(cond, "condition")) {
[18:07:09.550]                         if (!is.null(pattern)) {
[18:07:09.550]                           computeRestarts <- base::computeRestarts
[18:07:09.550]                           grepl <- base::grepl
[18:07:09.550]                           restarts <- computeRestarts(cond)
[18:07:09.550]                           for (restart in restarts) {
[18:07:09.550]                             name <- restart$name
[18:07:09.550]                             if (is.null(name)) 
[18:07:09.550]                               next
[18:07:09.550]                             if (!grepl(pattern, name)) 
[18:07:09.550]                               next
[18:07:09.550]                             invokeRestart(restart)
[18:07:09.550]                             muffled <- TRUE
[18:07:09.550]                             break
[18:07:09.550]                           }
[18:07:09.550]                         }
[18:07:09.550]                       }
[18:07:09.550]                       invisible(muffled)
[18:07:09.550]                     }
[18:07:09.550]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.550]                   }
[18:07:09.550]                 }
[18:07:09.550]                 else {
[18:07:09.550]                   if (TRUE) {
[18:07:09.550]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.550]                     {
[18:07:09.550]                       inherits <- base::inherits
[18:07:09.550]                       invokeRestart <- base::invokeRestart
[18:07:09.550]                       is.null <- base::is.null
[18:07:09.550]                       muffled <- FALSE
[18:07:09.550]                       if (inherits(cond, "message")) {
[18:07:09.550]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.550]                         if (muffled) 
[18:07:09.550]                           invokeRestart("muffleMessage")
[18:07:09.550]                       }
[18:07:09.550]                       else if (inherits(cond, "warning")) {
[18:07:09.550]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.550]                         if (muffled) 
[18:07:09.550]                           invokeRestart("muffleWarning")
[18:07:09.550]                       }
[18:07:09.550]                       else if (inherits(cond, "condition")) {
[18:07:09.550]                         if (!is.null(pattern)) {
[18:07:09.550]                           computeRestarts <- base::computeRestarts
[18:07:09.550]                           grepl <- base::grepl
[18:07:09.550]                           restarts <- computeRestarts(cond)
[18:07:09.550]                           for (restart in restarts) {
[18:07:09.550]                             name <- restart$name
[18:07:09.550]                             if (is.null(name)) 
[18:07:09.550]                               next
[18:07:09.550]                             if (!grepl(pattern, name)) 
[18:07:09.550]                               next
[18:07:09.550]                             invokeRestart(restart)
[18:07:09.550]                             muffled <- TRUE
[18:07:09.550]                             break
[18:07:09.550]                           }
[18:07:09.550]                         }
[18:07:09.550]                       }
[18:07:09.550]                       invisible(muffled)
[18:07:09.550]                     }
[18:07:09.550]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.550]                   }
[18:07:09.550]                 }
[18:07:09.550]             }
[18:07:09.550]         }))
[18:07:09.550]     }, error = function(ex) {
[18:07:09.550]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:09.550]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.550]                 ...future.rng), started = ...future.startTime, 
[18:07:09.550]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:09.550]             version = "1.8"), class = "FutureResult")
[18:07:09.550]     }, finally = {
[18:07:09.550]         if (!identical(...future.workdir, getwd())) 
[18:07:09.550]             setwd(...future.workdir)
[18:07:09.550]         {
[18:07:09.550]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:09.550]                 ...future.oldOptions$nwarnings <- NULL
[18:07:09.550]             }
[18:07:09.550]             base::options(...future.oldOptions)
[18:07:09.550]             if (.Platform$OS.type == "windows") {
[18:07:09.550]                 old_names <- names(...future.oldEnvVars)
[18:07:09.550]                 envs <- base::Sys.getenv()
[18:07:09.550]                 names <- names(envs)
[18:07:09.550]                 common <- intersect(names, old_names)
[18:07:09.550]                 added <- setdiff(names, old_names)
[18:07:09.550]                 removed <- setdiff(old_names, names)
[18:07:09.550]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:09.550]                   envs[common]]
[18:07:09.550]                 NAMES <- toupper(changed)
[18:07:09.550]                 args <- list()
[18:07:09.550]                 for (kk in seq_along(NAMES)) {
[18:07:09.550]                   name <- changed[[kk]]
[18:07:09.550]                   NAME <- NAMES[[kk]]
[18:07:09.550]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.550]                     next
[18:07:09.550]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.550]                 }
[18:07:09.550]                 NAMES <- toupper(added)
[18:07:09.550]                 for (kk in seq_along(NAMES)) {
[18:07:09.550]                   name <- added[[kk]]
[18:07:09.550]                   NAME <- NAMES[[kk]]
[18:07:09.550]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.550]                     next
[18:07:09.550]                   args[[name]] <- ""
[18:07:09.550]                 }
[18:07:09.550]                 NAMES <- toupper(removed)
[18:07:09.550]                 for (kk in seq_along(NAMES)) {
[18:07:09.550]                   name <- removed[[kk]]
[18:07:09.550]                   NAME <- NAMES[[kk]]
[18:07:09.550]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.550]                     next
[18:07:09.550]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.550]                 }
[18:07:09.550]                 if (length(args) > 0) 
[18:07:09.550]                   base::do.call(base::Sys.setenv, args = args)
[18:07:09.550]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:09.550]             }
[18:07:09.550]             else {
[18:07:09.550]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:09.550]             }
[18:07:09.550]             {
[18:07:09.550]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:09.550]                   0L) {
[18:07:09.550]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:09.550]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:09.550]                   base::options(opts)
[18:07:09.550]                 }
[18:07:09.550]                 {
[18:07:09.550]                   {
[18:07:09.550]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:09.550]                     NULL
[18:07:09.550]                   }
[18:07:09.550]                   options(future.plan = NULL)
[18:07:09.550]                   if (is.na(NA_character_)) 
[18:07:09.550]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.550]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:09.550]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:09.550]                     .init = FALSE)
[18:07:09.550]                 }
[18:07:09.550]             }
[18:07:09.550]         }
[18:07:09.550]     })
[18:07:09.550]     if (FALSE) {
[18:07:09.550]         base::sink(type = "output", split = FALSE)
[18:07:09.550]         if (NA) {
[18:07:09.550]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:09.550]         }
[18:07:09.550]         else {
[18:07:09.550]             ...future.result["stdout"] <- base::list(NULL)
[18:07:09.550]         }
[18:07:09.550]         base::close(...future.stdout)
[18:07:09.550]         ...future.stdout <- NULL
[18:07:09.550]     }
[18:07:09.550]     ...future.result$conditions <- ...future.conditions
[18:07:09.550]     ...future.result$finished <- base::Sys.time()
[18:07:09.550]     ...future.result
[18:07:09.550] }
[18:07:09.556] MultisessionFuture started
[18:07:09.556] - Launch lazy future ... done
[18:07:09.557] run() for ‘MultisessionFuture’ ... done
[18:07:09.557] result() for ClusterFuture ...
[18:07:09.557] receiveMessageFromWorker() for ClusterFuture ...
[18:07:09.557] - Validating connection of MultisessionFuture
[18:07:09.603] - received message: FutureResult
[18:07:09.603] - Received FutureResult
[18:07:09.603] - Erased future from FutureRegistry
[18:07:09.603] result() for ClusterFuture ...
[18:07:09.604] - result already collected: FutureResult
[18:07:09.604] result() for ClusterFuture ... done
[18:07:09.604] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.604] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2024-11-21 18:07:09"
 $ finished    : POSIXct[1:1], format: "2024-11-21 18:07:09"
 $ session_uuid: chr "ae84f6b1-b3fd-1f6b-c137-b528d88a308b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "99adafdbb12a"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.8.0-48-generic" "#48-Ubuntu SMP PREEMPT_DYNAMIC Fri Sep 27 14:04:52 UTC 2024" "99adafdbb12a" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 331374
  .. ..$ time  : POSIXct[1:1], format: "2024-11-21 18:07:08"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 0
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[18:07:09.619] result() for ClusterFuture ...
[18:07:09.619] - result already collected: FutureResult
[18:07:09.619] result() for ClusterFuture ... done
[18:07:09.619] result() for ClusterFuture ...
[18:07:09.619] - result already collected: FutureResult
[18:07:09.620] result() for ClusterFuture ... done
[18:07:09.620] getGlobalsAndPackages() ...
[18:07:09.620] Searching for globals...
[18:07:09.626] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[18:07:09.627] Searching for globals ... DONE
[18:07:09.627] Resolving globals: FALSE
[18:07:09.628] 
[18:07:09.628] - packages: [1] ‘utils’
[18:07:09.628] getGlobalsAndPackages() ... DONE
[18:07:09.629] run() for ‘Future’ ...
[18:07:09.629] - state: ‘created’
[18:07:09.629] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:09.652] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:09.653] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:09.653]   - Field: ‘node’
[18:07:09.653]   - Field: ‘label’
[18:07:09.653]   - Field: ‘local’
[18:07:09.654]   - Field: ‘owner’
[18:07:09.654]   - Field: ‘envir’
[18:07:09.654]   - Field: ‘workers’
[18:07:09.654]   - Field: ‘packages’
[18:07:09.654]   - Field: ‘gc’
[18:07:09.655]   - Field: ‘conditions’
[18:07:09.655]   - Field: ‘persistent’
[18:07:09.655]   - Field: ‘expr’
[18:07:09.655]   - Field: ‘uuid’
[18:07:09.655]   - Field: ‘seed’
[18:07:09.656]   - Field: ‘version’
[18:07:09.656]   - Field: ‘result’
[18:07:09.656]   - Field: ‘asynchronous’
[18:07:09.656]   - Field: ‘calls’
[18:07:09.656]   - Field: ‘globals’
[18:07:09.657]   - Field: ‘stdout’
[18:07:09.657]   - Field: ‘earlySignal’
[18:07:09.657]   - Field: ‘lazy’
[18:07:09.657]   - Field: ‘state’
[18:07:09.657] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:09.658] - Launch lazy future ...
[18:07:09.658] Packages needed by the future expression (n = 1): ‘utils’
[18:07:09.658] Packages needed by future strategies (n = 0): <none>
[18:07:09.659] {
[18:07:09.659]     {
[18:07:09.659]         {
[18:07:09.659]             ...future.startTime <- base::Sys.time()
[18:07:09.659]             {
[18:07:09.659]                 {
[18:07:09.659]                   {
[18:07:09.659]                     {
[18:07:09.659]                       {
[18:07:09.659]                         base::local({
[18:07:09.659]                           has_future <- base::requireNamespace("future", 
[18:07:09.659]                             quietly = TRUE)
[18:07:09.659]                           if (has_future) {
[18:07:09.659]                             ns <- base::getNamespace("future")
[18:07:09.659]                             version <- ns[[".package"]][["version"]]
[18:07:09.659]                             if (is.null(version)) 
[18:07:09.659]                               version <- utils::packageVersion("future")
[18:07:09.659]                           }
[18:07:09.659]                           else {
[18:07:09.659]                             version <- NULL
[18:07:09.659]                           }
[18:07:09.659]                           if (!has_future || version < "1.8.0") {
[18:07:09.659]                             info <- base::c(r_version = base::gsub("R version ", 
[18:07:09.659]                               "", base::R.version$version.string), 
[18:07:09.659]                               platform = base::sprintf("%s (%s-bit)", 
[18:07:09.659]                                 base::R.version$platform, 8 * 
[18:07:09.659]                                   base::.Machine$sizeof.pointer), 
[18:07:09.659]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:09.659]                                 "release", "version")], collapse = " "), 
[18:07:09.659]                               hostname = base::Sys.info()[["nodename"]])
[18:07:09.659]                             info <- base::sprintf("%s: %s", base::names(info), 
[18:07:09.659]                               info)
[18:07:09.659]                             info <- base::paste(info, collapse = "; ")
[18:07:09.659]                             if (!has_future) {
[18:07:09.659]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:09.659]                                 info)
[18:07:09.659]                             }
[18:07:09.659]                             else {
[18:07:09.659]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:09.659]                                 info, version)
[18:07:09.659]                             }
[18:07:09.659]                             base::stop(msg)
[18:07:09.659]                           }
[18:07:09.659]                         })
[18:07:09.659]                       }
[18:07:09.659]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:09.659]                       base::options(mc.cores = 1L)
[18:07:09.659]                     }
[18:07:09.659]                     base::local({
[18:07:09.659]                       for (pkg in "utils") {
[18:07:09.659]                         base::loadNamespace(pkg)
[18:07:09.659]                         base::library(pkg, character.only = TRUE)
[18:07:09.659]                       }
[18:07:09.659]                     })
[18:07:09.659]                   }
[18:07:09.659]                   ...future.strategy.old <- future::plan("list")
[18:07:09.659]                   options(future.plan = NULL)
[18:07:09.659]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.659]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:09.659]                 }
[18:07:09.659]                 ...future.workdir <- getwd()
[18:07:09.659]             }
[18:07:09.659]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:09.659]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:09.659]         }
[18:07:09.659]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:09.659]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:09.659]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:09.659]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:09.659]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:09.659]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:09.659]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:09.659]             base::names(...future.oldOptions))
[18:07:09.659]     }
[18:07:09.659]     if (TRUE) {
[18:07:09.659]     }
[18:07:09.659]     else {
[18:07:09.659]         if (NA) {
[18:07:09.659]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:09.659]                 open = "w")
[18:07:09.659]         }
[18:07:09.659]         else {
[18:07:09.659]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:09.659]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:09.659]         }
[18:07:09.659]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:09.659]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:09.659]             base::sink(type = "output", split = FALSE)
[18:07:09.659]             base::close(...future.stdout)
[18:07:09.659]         }, add = TRUE)
[18:07:09.659]     }
[18:07:09.659]     ...future.frame <- base::sys.nframe()
[18:07:09.659]     ...future.conditions <- base::list()
[18:07:09.659]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:09.659]     if (FALSE) {
[18:07:09.659]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:09.659]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:09.659]     }
[18:07:09.659]     ...future.result <- base::tryCatch({
[18:07:09.659]         base::withCallingHandlers({
[18:07:09.659]             ...future.value <- base::withVisible(base::local({
[18:07:09.659]                 ...future.makeSendCondition <- base::local({
[18:07:09.659]                   sendCondition <- NULL
[18:07:09.659]                   function(frame = 1L) {
[18:07:09.659]                     if (is.function(sendCondition)) 
[18:07:09.659]                       return(sendCondition)
[18:07:09.659]                     ns <- getNamespace("parallel")
[18:07:09.659]                     if (exists("sendData", mode = "function", 
[18:07:09.659]                       envir = ns)) {
[18:07:09.659]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:09.659]                         envir = ns)
[18:07:09.659]                       envir <- sys.frame(frame)
[18:07:09.659]                       master <- NULL
[18:07:09.659]                       while (!identical(envir, .GlobalEnv) && 
[18:07:09.659]                         !identical(envir, emptyenv())) {
[18:07:09.659]                         if (exists("master", mode = "list", envir = envir, 
[18:07:09.659]                           inherits = FALSE)) {
[18:07:09.659]                           master <- get("master", mode = "list", 
[18:07:09.659]                             envir = envir, inherits = FALSE)
[18:07:09.659]                           if (inherits(master, c("SOCKnode", 
[18:07:09.659]                             "SOCK0node"))) {
[18:07:09.659]                             sendCondition <<- function(cond) {
[18:07:09.659]                               data <- list(type = "VALUE", value = cond, 
[18:07:09.659]                                 success = TRUE)
[18:07:09.659]                               parallel_sendData(master, data)
[18:07:09.659]                             }
[18:07:09.659]                             return(sendCondition)
[18:07:09.659]                           }
[18:07:09.659]                         }
[18:07:09.659]                         frame <- frame + 1L
[18:07:09.659]                         envir <- sys.frame(frame)
[18:07:09.659]                       }
[18:07:09.659]                     }
[18:07:09.659]                     sendCondition <<- function(cond) NULL
[18:07:09.659]                   }
[18:07:09.659]                 })
[18:07:09.659]                 withCallingHandlers({
[18:07:09.659]                   {
[18:07:09.659]                     print(1:50)
[18:07:09.659]                     str(1:50)
[18:07:09.659]                     cat(letters, sep = "-")
[18:07:09.659]                     cat(1:6, collapse = "\n")
[18:07:09.659]                     write.table(datasets::iris[1:10, ], sep = "\t")
[18:07:09.659]                     42L
[18:07:09.659]                   }
[18:07:09.659]                 }, immediateCondition = function(cond) {
[18:07:09.659]                   sendCondition <- ...future.makeSendCondition()
[18:07:09.659]                   sendCondition(cond)
[18:07:09.659]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.659]                   {
[18:07:09.659]                     inherits <- base::inherits
[18:07:09.659]                     invokeRestart <- base::invokeRestart
[18:07:09.659]                     is.null <- base::is.null
[18:07:09.659]                     muffled <- FALSE
[18:07:09.659]                     if (inherits(cond, "message")) {
[18:07:09.659]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:09.659]                       if (muffled) 
[18:07:09.659]                         invokeRestart("muffleMessage")
[18:07:09.659]                     }
[18:07:09.659]                     else if (inherits(cond, "warning")) {
[18:07:09.659]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:09.659]                       if (muffled) 
[18:07:09.659]                         invokeRestart("muffleWarning")
[18:07:09.659]                     }
[18:07:09.659]                     else if (inherits(cond, "condition")) {
[18:07:09.659]                       if (!is.null(pattern)) {
[18:07:09.659]                         computeRestarts <- base::computeRestarts
[18:07:09.659]                         grepl <- base::grepl
[18:07:09.659]                         restarts <- computeRestarts(cond)
[18:07:09.659]                         for (restart in restarts) {
[18:07:09.659]                           name <- restart$name
[18:07:09.659]                           if (is.null(name)) 
[18:07:09.659]                             next
[18:07:09.659]                           if (!grepl(pattern, name)) 
[18:07:09.659]                             next
[18:07:09.659]                           invokeRestart(restart)
[18:07:09.659]                           muffled <- TRUE
[18:07:09.659]                           break
[18:07:09.659]                         }
[18:07:09.659]                       }
[18:07:09.659]                     }
[18:07:09.659]                     invisible(muffled)
[18:07:09.659]                   }
[18:07:09.659]                   muffleCondition(cond)
[18:07:09.659]                 })
[18:07:09.659]             }))
[18:07:09.659]             future::FutureResult(value = ...future.value$value, 
[18:07:09.659]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.659]                   ...future.rng), globalenv = if (FALSE) 
[18:07:09.659]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:09.659]                     ...future.globalenv.names))
[18:07:09.659]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:09.659]         }, condition = base::local({
[18:07:09.659]             c <- base::c
[18:07:09.659]             inherits <- base::inherits
[18:07:09.659]             invokeRestart <- base::invokeRestart
[18:07:09.659]             length <- base::length
[18:07:09.659]             list <- base::list
[18:07:09.659]             seq.int <- base::seq.int
[18:07:09.659]             signalCondition <- base::signalCondition
[18:07:09.659]             sys.calls <- base::sys.calls
[18:07:09.659]             `[[` <- base::`[[`
[18:07:09.659]             `+` <- base::`+`
[18:07:09.659]             `<<-` <- base::`<<-`
[18:07:09.659]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:09.659]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:09.659]                   3L)]
[18:07:09.659]             }
[18:07:09.659]             function(cond) {
[18:07:09.659]                 is_error <- inherits(cond, "error")
[18:07:09.659]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:09.659]                   NULL)
[18:07:09.659]                 if (is_error) {
[18:07:09.659]                   sessionInformation <- function() {
[18:07:09.659]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:09.659]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:09.659]                       search = base::search(), system = base::Sys.info())
[18:07:09.659]                   }
[18:07:09.659]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.659]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:09.659]                     cond$call), session = sessionInformation(), 
[18:07:09.659]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:09.659]                   signalCondition(cond)
[18:07:09.659]                 }
[18:07:09.659]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:09.659]                 "immediateCondition"))) {
[18:07:09.659]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:09.659]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.659]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:09.659]                   if (TRUE && !signal) {
[18:07:09.659]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.659]                     {
[18:07:09.659]                       inherits <- base::inherits
[18:07:09.659]                       invokeRestart <- base::invokeRestart
[18:07:09.659]                       is.null <- base::is.null
[18:07:09.659]                       muffled <- FALSE
[18:07:09.659]                       if (inherits(cond, "message")) {
[18:07:09.659]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.659]                         if (muffled) 
[18:07:09.659]                           invokeRestart("muffleMessage")
[18:07:09.659]                       }
[18:07:09.659]                       else if (inherits(cond, "warning")) {
[18:07:09.659]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.659]                         if (muffled) 
[18:07:09.659]                           invokeRestart("muffleWarning")
[18:07:09.659]                       }
[18:07:09.659]                       else if (inherits(cond, "condition")) {
[18:07:09.659]                         if (!is.null(pattern)) {
[18:07:09.659]                           computeRestarts <- base::computeRestarts
[18:07:09.659]                           grepl <- base::grepl
[18:07:09.659]                           restarts <- computeRestarts(cond)
[18:07:09.659]                           for (restart in restarts) {
[18:07:09.659]                             name <- restart$name
[18:07:09.659]                             if (is.null(name)) 
[18:07:09.659]                               next
[18:07:09.659]                             if (!grepl(pattern, name)) 
[18:07:09.659]                               next
[18:07:09.659]                             invokeRestart(restart)
[18:07:09.659]                             muffled <- TRUE
[18:07:09.659]                             break
[18:07:09.659]                           }
[18:07:09.659]                         }
[18:07:09.659]                       }
[18:07:09.659]                       invisible(muffled)
[18:07:09.659]                     }
[18:07:09.659]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.659]                   }
[18:07:09.659]                 }
[18:07:09.659]                 else {
[18:07:09.659]                   if (TRUE) {
[18:07:09.659]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.659]                     {
[18:07:09.659]                       inherits <- base::inherits
[18:07:09.659]                       invokeRestart <- base::invokeRestart
[18:07:09.659]                       is.null <- base::is.null
[18:07:09.659]                       muffled <- FALSE
[18:07:09.659]                       if (inherits(cond, "message")) {
[18:07:09.659]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.659]                         if (muffled) 
[18:07:09.659]                           invokeRestart("muffleMessage")
[18:07:09.659]                       }
[18:07:09.659]                       else if (inherits(cond, "warning")) {
[18:07:09.659]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.659]                         if (muffled) 
[18:07:09.659]                           invokeRestart("muffleWarning")
[18:07:09.659]                       }
[18:07:09.659]                       else if (inherits(cond, "condition")) {
[18:07:09.659]                         if (!is.null(pattern)) {
[18:07:09.659]                           computeRestarts <- base::computeRestarts
[18:07:09.659]                           grepl <- base::grepl
[18:07:09.659]                           restarts <- computeRestarts(cond)
[18:07:09.659]                           for (restart in restarts) {
[18:07:09.659]                             name <- restart$name
[18:07:09.659]                             if (is.null(name)) 
[18:07:09.659]                               next
[18:07:09.659]                             if (!grepl(pattern, name)) 
[18:07:09.659]                               next
[18:07:09.659]                             invokeRestart(restart)
[18:07:09.659]                             muffled <- TRUE
[18:07:09.659]                             break
[18:07:09.659]                           }
[18:07:09.659]                         }
[18:07:09.659]                       }
[18:07:09.659]                       invisible(muffled)
[18:07:09.659]                     }
[18:07:09.659]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.659]                   }
[18:07:09.659]                 }
[18:07:09.659]             }
[18:07:09.659]         }))
[18:07:09.659]     }, error = function(ex) {
[18:07:09.659]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:09.659]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.659]                 ...future.rng), started = ...future.startTime, 
[18:07:09.659]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:09.659]             version = "1.8"), class = "FutureResult")
[18:07:09.659]     }, finally = {
[18:07:09.659]         if (!identical(...future.workdir, getwd())) 
[18:07:09.659]             setwd(...future.workdir)
[18:07:09.659]         {
[18:07:09.659]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:09.659]                 ...future.oldOptions$nwarnings <- NULL
[18:07:09.659]             }
[18:07:09.659]             base::options(...future.oldOptions)
[18:07:09.659]             if (.Platform$OS.type == "windows") {
[18:07:09.659]                 old_names <- names(...future.oldEnvVars)
[18:07:09.659]                 envs <- base::Sys.getenv()
[18:07:09.659]                 names <- names(envs)
[18:07:09.659]                 common <- intersect(names, old_names)
[18:07:09.659]                 added <- setdiff(names, old_names)
[18:07:09.659]                 removed <- setdiff(old_names, names)
[18:07:09.659]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:09.659]                   envs[common]]
[18:07:09.659]                 NAMES <- toupper(changed)
[18:07:09.659]                 args <- list()
[18:07:09.659]                 for (kk in seq_along(NAMES)) {
[18:07:09.659]                   name <- changed[[kk]]
[18:07:09.659]                   NAME <- NAMES[[kk]]
[18:07:09.659]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.659]                     next
[18:07:09.659]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.659]                 }
[18:07:09.659]                 NAMES <- toupper(added)
[18:07:09.659]                 for (kk in seq_along(NAMES)) {
[18:07:09.659]                   name <- added[[kk]]
[18:07:09.659]                   NAME <- NAMES[[kk]]
[18:07:09.659]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.659]                     next
[18:07:09.659]                   args[[name]] <- ""
[18:07:09.659]                 }
[18:07:09.659]                 NAMES <- toupper(removed)
[18:07:09.659]                 for (kk in seq_along(NAMES)) {
[18:07:09.659]                   name <- removed[[kk]]
[18:07:09.659]                   NAME <- NAMES[[kk]]
[18:07:09.659]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.659]                     next
[18:07:09.659]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.659]                 }
[18:07:09.659]                 if (length(args) > 0) 
[18:07:09.659]                   base::do.call(base::Sys.setenv, args = args)
[18:07:09.659]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:09.659]             }
[18:07:09.659]             else {
[18:07:09.659]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:09.659]             }
[18:07:09.659]             {
[18:07:09.659]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:09.659]                   0L) {
[18:07:09.659]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:09.659]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:09.659]                   base::options(opts)
[18:07:09.659]                 }
[18:07:09.659]                 {
[18:07:09.659]                   {
[18:07:09.659]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:09.659]                     NULL
[18:07:09.659]                   }
[18:07:09.659]                   options(future.plan = NULL)
[18:07:09.659]                   if (is.na(NA_character_)) 
[18:07:09.659]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.659]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:09.659]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:09.659]                     .init = FALSE)
[18:07:09.659]                 }
[18:07:09.659]             }
[18:07:09.659]         }
[18:07:09.659]     })
[18:07:09.659]     if (FALSE) {
[18:07:09.659]         base::sink(type = "output", split = FALSE)
[18:07:09.659]         if (NA) {
[18:07:09.659]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:09.659]         }
[18:07:09.659]         else {
[18:07:09.659]             ...future.result["stdout"] <- base::list(NULL)
[18:07:09.659]         }
[18:07:09.659]         base::close(...future.stdout)
[18:07:09.659]         ...future.stdout <- NULL
[18:07:09.659]     }
[18:07:09.659]     ...future.result$conditions <- ...future.conditions
[18:07:09.659]     ...future.result$finished <- base::Sys.time()
[18:07:09.659]     ...future.result
[18:07:09.659] }
[18:07:09.665] MultisessionFuture started
[18:07:09.665] - Launch lazy future ... done
[18:07:09.666] run() for ‘MultisessionFuture’ ... done
[18:07:09.666] result() for ClusterFuture ...
[18:07:09.666] receiveMessageFromWorker() for ClusterFuture ...
[18:07:09.667] - Validating connection of MultisessionFuture
[18:07:09.710] - received message: FutureResult
[18:07:09.711] - Received FutureResult
[18:07:09.711] - Erased future from FutureRegistry
[18:07:09.711] result() for ClusterFuture ...
[18:07:09.711] - result already collected: FutureResult
[18:07:09.712] result() for ClusterFuture ... done
[18:07:09.712] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.712] result() for ClusterFuture ... done
[18:07:09.713] result() for ClusterFuture ...
[18:07:09.713] - result already collected: FutureResult
[18:07:09.713] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[18:07:09.714] getGlobalsAndPackages() ...
[18:07:09.714] Searching for globals...
[18:07:09.715] - globals found: [1] ‘print’
[18:07:09.715] Searching for globals ... DONE
[18:07:09.716] Resolving globals: FALSE
[18:07:09.716] 
[18:07:09.716] 
[18:07:09.716] getGlobalsAndPackages() ... DONE
[18:07:09.717] run() for ‘Future’ ...
[18:07:09.717] - state: ‘created’
[18:07:09.717] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:07:09.742] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:07:09.742] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:07:09.742]   - Field: ‘node’
[18:07:09.743]   - Field: ‘label’
[18:07:09.743]   - Field: ‘local’
[18:07:09.743]   - Field: ‘owner’
[18:07:09.743]   - Field: ‘envir’
[18:07:09.743]   - Field: ‘workers’
[18:07:09.744]   - Field: ‘packages’
[18:07:09.744]   - Field: ‘gc’
[18:07:09.744]   - Field: ‘conditions’
[18:07:09.744]   - Field: ‘persistent’
[18:07:09.744]   - Field: ‘expr’
[18:07:09.745]   - Field: ‘uuid’
[18:07:09.745]   - Field: ‘seed’
[18:07:09.745]   - Field: ‘version’
[18:07:09.745]   - Field: ‘result’
[18:07:09.745]   - Field: ‘asynchronous’
[18:07:09.746]   - Field: ‘calls’
[18:07:09.746]   - Field: ‘globals’
[18:07:09.746]   - Field: ‘stdout’
[18:07:09.746]   - Field: ‘earlySignal’
[18:07:09.746]   - Field: ‘lazy’
[18:07:09.746]   - Field: ‘state’
[18:07:09.747] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:07:09.747] - Launch lazy future ...
[18:07:09.747] Packages needed by the future expression (n = 0): <none>
[18:07:09.748] Packages needed by future strategies (n = 0): <none>
[18:07:09.749] {
[18:07:09.749]     {
[18:07:09.749]         {
[18:07:09.749]             ...future.startTime <- base::Sys.time()
[18:07:09.749]             {
[18:07:09.749]                 {
[18:07:09.749]                   {
[18:07:09.749]                     {
[18:07:09.749]                       base::local({
[18:07:09.749]                         has_future <- base::requireNamespace("future", 
[18:07:09.749]                           quietly = TRUE)
[18:07:09.749]                         if (has_future) {
[18:07:09.749]                           ns <- base::getNamespace("future")
[18:07:09.749]                           version <- ns[[".package"]][["version"]]
[18:07:09.749]                           if (is.null(version)) 
[18:07:09.749]                             version <- utils::packageVersion("future")
[18:07:09.749]                         }
[18:07:09.749]                         else {
[18:07:09.749]                           version <- NULL
[18:07:09.749]                         }
[18:07:09.749]                         if (!has_future || version < "1.8.0") {
[18:07:09.749]                           info <- base::c(r_version = base::gsub("R version ", 
[18:07:09.749]                             "", base::R.version$version.string), 
[18:07:09.749]                             platform = base::sprintf("%s (%s-bit)", 
[18:07:09.749]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:07:09.749]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:07:09.749]                               "release", "version")], collapse = " "), 
[18:07:09.749]                             hostname = base::Sys.info()[["nodename"]])
[18:07:09.749]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:07:09.749]                             info)
[18:07:09.749]                           info <- base::paste(info, collapse = "; ")
[18:07:09.749]                           if (!has_future) {
[18:07:09.749]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:07:09.749]                               info)
[18:07:09.749]                           }
[18:07:09.749]                           else {
[18:07:09.749]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:07:09.749]                               info, version)
[18:07:09.749]                           }
[18:07:09.749]                           base::stop(msg)
[18:07:09.749]                         }
[18:07:09.749]                       })
[18:07:09.749]                     }
[18:07:09.749]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:07:09.749]                     base::options(mc.cores = 1L)
[18:07:09.749]                   }
[18:07:09.749]                   ...future.strategy.old <- future::plan("list")
[18:07:09.749]                   options(future.plan = NULL)
[18:07:09.749]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.749]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:07:09.749]                 }
[18:07:09.749]                 ...future.workdir <- getwd()
[18:07:09.749]             }
[18:07:09.749]             ...future.oldOptions <- base::as.list(base::.Options)
[18:07:09.749]             ...future.oldEnvVars <- base::Sys.getenv()
[18:07:09.749]         }
[18:07:09.749]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:07:09.749]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:07:09.749]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:07:09.749]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:07:09.749]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:07:09.749]             future.stdout.windows.reencode = NULL, width = 80L)
[18:07:09.749]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:07:09.749]             base::names(...future.oldOptions))
[18:07:09.749]     }
[18:07:09.749]     if (FALSE) {
[18:07:09.749]     }
[18:07:09.749]     else {
[18:07:09.749]         if (TRUE) {
[18:07:09.749]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:07:09.749]                 open = "w")
[18:07:09.749]         }
[18:07:09.749]         else {
[18:07:09.749]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:07:09.749]                 windows = "NUL", "/dev/null"), open = "w")
[18:07:09.749]         }
[18:07:09.749]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:07:09.749]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:07:09.749]             base::sink(type = "output", split = FALSE)
[18:07:09.749]             base::close(...future.stdout)
[18:07:09.749]         }, add = TRUE)
[18:07:09.749]     }
[18:07:09.749]     ...future.frame <- base::sys.nframe()
[18:07:09.749]     ...future.conditions <- base::list()
[18:07:09.749]     ...future.rng <- base::globalenv()$.Random.seed
[18:07:09.749]     if (FALSE) {
[18:07:09.749]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:07:09.749]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:07:09.749]     }
[18:07:09.749]     ...future.result <- base::tryCatch({
[18:07:09.749]         base::withCallingHandlers({
[18:07:09.749]             ...future.value <- base::withVisible(base::local({
[18:07:09.749]                 ...future.makeSendCondition <- base::local({
[18:07:09.749]                   sendCondition <- NULL
[18:07:09.749]                   function(frame = 1L) {
[18:07:09.749]                     if (is.function(sendCondition)) 
[18:07:09.749]                       return(sendCondition)
[18:07:09.749]                     ns <- getNamespace("parallel")
[18:07:09.749]                     if (exists("sendData", mode = "function", 
[18:07:09.749]                       envir = ns)) {
[18:07:09.749]                       parallel_sendData <- get("sendData", mode = "function", 
[18:07:09.749]                         envir = ns)
[18:07:09.749]                       envir <- sys.frame(frame)
[18:07:09.749]                       master <- NULL
[18:07:09.749]                       while (!identical(envir, .GlobalEnv) && 
[18:07:09.749]                         !identical(envir, emptyenv())) {
[18:07:09.749]                         if (exists("master", mode = "list", envir = envir, 
[18:07:09.749]                           inherits = FALSE)) {
[18:07:09.749]                           master <- get("master", mode = "list", 
[18:07:09.749]                             envir = envir, inherits = FALSE)
[18:07:09.749]                           if (inherits(master, c("SOCKnode", 
[18:07:09.749]                             "SOCK0node"))) {
[18:07:09.749]                             sendCondition <<- function(cond) {
[18:07:09.749]                               data <- list(type = "VALUE", value = cond, 
[18:07:09.749]                                 success = TRUE)
[18:07:09.749]                               parallel_sendData(master, data)
[18:07:09.749]                             }
[18:07:09.749]                             return(sendCondition)
[18:07:09.749]                           }
[18:07:09.749]                         }
[18:07:09.749]                         frame <- frame + 1L
[18:07:09.749]                         envir <- sys.frame(frame)
[18:07:09.749]                       }
[18:07:09.749]                     }
[18:07:09.749]                     sendCondition <<- function(cond) NULL
[18:07:09.749]                   }
[18:07:09.749]                 })
[18:07:09.749]                 withCallingHandlers({
[18:07:09.749]                   print(42)
[18:07:09.749]                 }, immediateCondition = function(cond) {
[18:07:09.749]                   sendCondition <- ...future.makeSendCondition()
[18:07:09.749]                   sendCondition(cond)
[18:07:09.749]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.749]                   {
[18:07:09.749]                     inherits <- base::inherits
[18:07:09.749]                     invokeRestart <- base::invokeRestart
[18:07:09.749]                     is.null <- base::is.null
[18:07:09.749]                     muffled <- FALSE
[18:07:09.749]                     if (inherits(cond, "message")) {
[18:07:09.749]                       muffled <- grepl(pattern, "muffleMessage")
[18:07:09.749]                       if (muffled) 
[18:07:09.749]                         invokeRestart("muffleMessage")
[18:07:09.749]                     }
[18:07:09.749]                     else if (inherits(cond, "warning")) {
[18:07:09.749]                       muffled <- grepl(pattern, "muffleWarning")
[18:07:09.749]                       if (muffled) 
[18:07:09.749]                         invokeRestart("muffleWarning")
[18:07:09.749]                     }
[18:07:09.749]                     else if (inherits(cond, "condition")) {
[18:07:09.749]                       if (!is.null(pattern)) {
[18:07:09.749]                         computeRestarts <- base::computeRestarts
[18:07:09.749]                         grepl <- base::grepl
[18:07:09.749]                         restarts <- computeRestarts(cond)
[18:07:09.749]                         for (restart in restarts) {
[18:07:09.749]                           name <- restart$name
[18:07:09.749]                           if (is.null(name)) 
[18:07:09.749]                             next
[18:07:09.749]                           if (!grepl(pattern, name)) 
[18:07:09.749]                             next
[18:07:09.749]                           invokeRestart(restart)
[18:07:09.749]                           muffled <- TRUE
[18:07:09.749]                           break
[18:07:09.749]                         }
[18:07:09.749]                       }
[18:07:09.749]                     }
[18:07:09.749]                     invisible(muffled)
[18:07:09.749]                   }
[18:07:09.749]                   muffleCondition(cond)
[18:07:09.749]                 })
[18:07:09.749]             }))
[18:07:09.749]             future::FutureResult(value = ...future.value$value, 
[18:07:09.749]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.749]                   ...future.rng), globalenv = if (FALSE) 
[18:07:09.749]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:07:09.749]                     ...future.globalenv.names))
[18:07:09.749]                 else NULL, started = ...future.startTime, version = "1.8")
[18:07:09.749]         }, condition = base::local({
[18:07:09.749]             c <- base::c
[18:07:09.749]             inherits <- base::inherits
[18:07:09.749]             invokeRestart <- base::invokeRestart
[18:07:09.749]             length <- base::length
[18:07:09.749]             list <- base::list
[18:07:09.749]             seq.int <- base::seq.int
[18:07:09.749]             signalCondition <- base::signalCondition
[18:07:09.749]             sys.calls <- base::sys.calls
[18:07:09.749]             `[[` <- base::`[[`
[18:07:09.749]             `+` <- base::`+`
[18:07:09.749]             `<<-` <- base::`<<-`
[18:07:09.749]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:07:09.749]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:07:09.749]                   3L)]
[18:07:09.749]             }
[18:07:09.749]             function(cond) {
[18:07:09.749]                 is_error <- inherits(cond, "error")
[18:07:09.749]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:07:09.749]                   NULL)
[18:07:09.749]                 if (is_error) {
[18:07:09.749]                   sessionInformation <- function() {
[18:07:09.749]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:07:09.749]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:07:09.749]                       search = base::search(), system = base::Sys.info())
[18:07:09.749]                   }
[18:07:09.749]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.749]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:07:09.749]                     cond$call), session = sessionInformation(), 
[18:07:09.749]                     timestamp = base::Sys.time(), signaled = 0L)
[18:07:09.749]                   signalCondition(cond)
[18:07:09.749]                 }
[18:07:09.749]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:07:09.749]                 "immediateCondition"))) {
[18:07:09.749]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:07:09.749]                   ...future.conditions[[length(...future.conditions) + 
[18:07:09.749]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:07:09.749]                   if (TRUE && !signal) {
[18:07:09.749]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.749]                     {
[18:07:09.749]                       inherits <- base::inherits
[18:07:09.749]                       invokeRestart <- base::invokeRestart
[18:07:09.749]                       is.null <- base::is.null
[18:07:09.749]                       muffled <- FALSE
[18:07:09.749]                       if (inherits(cond, "message")) {
[18:07:09.749]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.749]                         if (muffled) 
[18:07:09.749]                           invokeRestart("muffleMessage")
[18:07:09.749]                       }
[18:07:09.749]                       else if (inherits(cond, "warning")) {
[18:07:09.749]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.749]                         if (muffled) 
[18:07:09.749]                           invokeRestart("muffleWarning")
[18:07:09.749]                       }
[18:07:09.749]                       else if (inherits(cond, "condition")) {
[18:07:09.749]                         if (!is.null(pattern)) {
[18:07:09.749]                           computeRestarts <- base::computeRestarts
[18:07:09.749]                           grepl <- base::grepl
[18:07:09.749]                           restarts <- computeRestarts(cond)
[18:07:09.749]                           for (restart in restarts) {
[18:07:09.749]                             name <- restart$name
[18:07:09.749]                             if (is.null(name)) 
[18:07:09.749]                               next
[18:07:09.749]                             if (!grepl(pattern, name)) 
[18:07:09.749]                               next
[18:07:09.749]                             invokeRestart(restart)
[18:07:09.749]                             muffled <- TRUE
[18:07:09.749]                             break
[18:07:09.749]                           }
[18:07:09.749]                         }
[18:07:09.749]                       }
[18:07:09.749]                       invisible(muffled)
[18:07:09.749]                     }
[18:07:09.749]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.749]                   }
[18:07:09.749]                 }
[18:07:09.749]                 else {
[18:07:09.749]                   if (TRUE) {
[18:07:09.749]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:07:09.749]                     {
[18:07:09.749]                       inherits <- base::inherits
[18:07:09.749]                       invokeRestart <- base::invokeRestart
[18:07:09.749]                       is.null <- base::is.null
[18:07:09.749]                       muffled <- FALSE
[18:07:09.749]                       if (inherits(cond, "message")) {
[18:07:09.749]                         muffled <- grepl(pattern, "muffleMessage")
[18:07:09.749]                         if (muffled) 
[18:07:09.749]                           invokeRestart("muffleMessage")
[18:07:09.749]                       }
[18:07:09.749]                       else if (inherits(cond, "warning")) {
[18:07:09.749]                         muffled <- grepl(pattern, "muffleWarning")
[18:07:09.749]                         if (muffled) 
[18:07:09.749]                           invokeRestart("muffleWarning")
[18:07:09.749]                       }
[18:07:09.749]                       else if (inherits(cond, "condition")) {
[18:07:09.749]                         if (!is.null(pattern)) {
[18:07:09.749]                           computeRestarts <- base::computeRestarts
[18:07:09.749]                           grepl <- base::grepl
[18:07:09.749]                           restarts <- computeRestarts(cond)
[18:07:09.749]                           for (restart in restarts) {
[18:07:09.749]                             name <- restart$name
[18:07:09.749]                             if (is.null(name)) 
[18:07:09.749]                               next
[18:07:09.749]                             if (!grepl(pattern, name)) 
[18:07:09.749]                               next
[18:07:09.749]                             invokeRestart(restart)
[18:07:09.749]                             muffled <- TRUE
[18:07:09.749]                             break
[18:07:09.749]                           }
[18:07:09.749]                         }
[18:07:09.749]                       }
[18:07:09.749]                       invisible(muffled)
[18:07:09.749]                     }
[18:07:09.749]                     muffleCondition(cond, pattern = "^muffle")
[18:07:09.749]                   }
[18:07:09.749]                 }
[18:07:09.749]             }
[18:07:09.749]         }))
[18:07:09.749]     }, error = function(ex) {
[18:07:09.749]         base::structure(base::list(value = NULL, visible = NULL, 
[18:07:09.749]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:07:09.749]                 ...future.rng), started = ...future.startTime, 
[18:07:09.749]             finished = Sys.time(), session_uuid = NA_character_, 
[18:07:09.749]             version = "1.8"), class = "FutureResult")
[18:07:09.749]     }, finally = {
[18:07:09.749]         if (!identical(...future.workdir, getwd())) 
[18:07:09.749]             setwd(...future.workdir)
[18:07:09.749]         {
[18:07:09.749]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:07:09.749]                 ...future.oldOptions$nwarnings <- NULL
[18:07:09.749]             }
[18:07:09.749]             base::options(...future.oldOptions)
[18:07:09.749]             if (.Platform$OS.type == "windows") {
[18:07:09.749]                 old_names <- names(...future.oldEnvVars)
[18:07:09.749]                 envs <- base::Sys.getenv()
[18:07:09.749]                 names <- names(envs)
[18:07:09.749]                 common <- intersect(names, old_names)
[18:07:09.749]                 added <- setdiff(names, old_names)
[18:07:09.749]                 removed <- setdiff(old_names, names)
[18:07:09.749]                 changed <- common[...future.oldEnvVars[common] != 
[18:07:09.749]                   envs[common]]
[18:07:09.749]                 NAMES <- toupper(changed)
[18:07:09.749]                 args <- list()
[18:07:09.749]                 for (kk in seq_along(NAMES)) {
[18:07:09.749]                   name <- changed[[kk]]
[18:07:09.749]                   NAME <- NAMES[[kk]]
[18:07:09.749]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.749]                     next
[18:07:09.749]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.749]                 }
[18:07:09.749]                 NAMES <- toupper(added)
[18:07:09.749]                 for (kk in seq_along(NAMES)) {
[18:07:09.749]                   name <- added[[kk]]
[18:07:09.749]                   NAME <- NAMES[[kk]]
[18:07:09.749]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.749]                     next
[18:07:09.749]                   args[[name]] <- ""
[18:07:09.749]                 }
[18:07:09.749]                 NAMES <- toupper(removed)
[18:07:09.749]                 for (kk in seq_along(NAMES)) {
[18:07:09.749]                   name <- removed[[kk]]
[18:07:09.749]                   NAME <- NAMES[[kk]]
[18:07:09.749]                   if (name != NAME && is.element(NAME, old_names)) 
[18:07:09.749]                     next
[18:07:09.749]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:07:09.749]                 }
[18:07:09.749]                 if (length(args) > 0) 
[18:07:09.749]                   base::do.call(base::Sys.setenv, args = args)
[18:07:09.749]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:07:09.749]             }
[18:07:09.749]             else {
[18:07:09.749]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:07:09.749]             }
[18:07:09.749]             {
[18:07:09.749]                 if (base::length(...future.futureOptionsAdded) > 
[18:07:09.749]                   0L) {
[18:07:09.749]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:07:09.749]                   base::names(opts) <- ...future.futureOptionsAdded
[18:07:09.749]                   base::options(opts)
[18:07:09.749]                 }
[18:07:09.749]                 {
[18:07:09.749]                   {
[18:07:09.749]                     base::options(mc.cores = ...future.mc.cores.old)
[18:07:09.749]                     NULL
[18:07:09.749]                   }
[18:07:09.749]                   options(future.plan = NULL)
[18:07:09.749]                   if (is.na(NA_character_)) 
[18:07:09.749]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:07:09.749]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:07:09.749]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:07:09.749]                     .init = FALSE)
[18:07:09.749]                 }
[18:07:09.749]             }
[18:07:09.749]         }
[18:07:09.749]     })
[18:07:09.749]     if (TRUE) {
[18:07:09.749]         base::sink(type = "output", split = FALSE)
[18:07:09.749]         if (TRUE) {
[18:07:09.749]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:07:09.749]         }
[18:07:09.749]         else {
[18:07:09.749]             ...future.result["stdout"] <- base::list(NULL)
[18:07:09.749]         }
[18:07:09.749]         base::close(...future.stdout)
[18:07:09.749]         ...future.stdout <- NULL
[18:07:09.749]     }
[18:07:09.749]     ...future.result$conditions <- ...future.conditions
[18:07:09.749]     ...future.result$finished <- base::Sys.time()
[18:07:09.749]     ...future.result
[18:07:09.749] }
[18:07:09.754] MultisessionFuture started
[18:07:09.754] - Launch lazy future ... done
[18:07:09.755] run() for ‘MultisessionFuture’ ... done
[18:07:09.755] result() for ClusterFuture ...
[18:07:09.755] receiveMessageFromWorker() for ClusterFuture ...
[18:07:09.755] - Validating connection of MultisessionFuture
[18:07:09.798] - received message: FutureResult
[18:07:09.799] - Received FutureResult
[18:07:09.799] - Erased future from FutureRegistry
[18:07:09.799] result() for ClusterFuture ...
[18:07:09.800] - result already collected: FutureResult
[18:07:09.800] result() for ClusterFuture ... done
[18:07:09.800] receiveMessageFromWorker() for ClusterFuture ... done
[18:07:09.800] result() for ClusterFuture ... done
[18:07:09.800] result() for ClusterFuture ...
[18:07:09.801] - result already collected: FutureResult
[18:07:09.801] result() for ClusterFuture ... done
[18:07:09.801] result() for ClusterFuture ...
[18:07:09.801] - result already collected: FutureResult
[18:07:09.801] result() for ClusterFuture ... done
[1] 42
[18:07:09.802] result() for ClusterFuture ...
[18:07:09.802] - result already collected: FutureResult
[18:07:09.802] result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done
> 
> message("*** Standard output ... DONE")
*** Standard output ... DONE
> 
> source("incl/end.R")
[18:07:09.804] plan(): Setting new future strategy stack:
[18:07:09.804] List of future strategies:
[18:07:09.804] 1. FutureStrategy:
[18:07:09.804]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:07:09.804]    - tweaked: FALSE
[18:07:09.804]    - call: future::plan(oplan)
[18:07:09.807] plan(): nbrOfWorkers() = 1
> 
