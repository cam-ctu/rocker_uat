
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:47:18.506] plan(): Setting new future strategy stack:
[17:47:18.507] List of future strategies:
[17:47:18.507] 1. sequential:
[17:47:18.507]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.507]    - tweaked: FALSE
[17:47:18.507]    - call: future::plan("sequential")
[17:47:18.518] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[17:47:18.535] plan(): Setting new future strategy stack:
[17:47:18.535] List of future strategies:
[17:47:18.535] 1. multicore:
[17:47:18.535]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.535]    - tweaked: FALSE
[17:47:18.535]    - call: plan(multicore)
[17:47:18.550] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() ...")
*** multicore() ...
> 
> for (cores in 1:min(2L, availableCores("multicore"))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   if (!supportsMulticore()) {
+     message(sprintf("Multicore futures are not supporting on '%s'. Falling back to use synchronous sequential futures", .Platform$OS.type))
+   }
+ 
+   nworkers <- nbrOfWorkers()
+   message("Number of workers: ", nworkers)
+   stopifnot(nworkers == cores)
+   
+   for (globals in c(FALSE, TRUE)) {
+ 
+     message(sprintf("*** multicore(..., globals = %s) without globals", globals))
+   
+     f <- multicore({
+       42L
+     }, globals = globals)
+     stopifnot(inherits(f, "MulticoreFuture") || ((cores ==1 || !supportsMulticore()) && inherits(f, "SequentialFuture")))
+   
+     print(resolved(f))
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42L)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals", globals))
+     ## A global variable
+     a <- 0
+     f <- multicore({
+       b <- 3
+       c <- 2
+       a * b * c
+     }, globals = globals)
+     print(f)
+   
+   
+     ## A multicore future is evaluated in a separated
+     ## forked process.  Changing the value of a global
+     ## variable should not affect the result of the
+     ## future.
+     a <- 7  ## Make sure globals are frozen
+     v <- value(f)
+     print(v)
+     stopifnot(v == 0)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals and blocking", globals))
+     x <- listenv()
+     for (ii in 1:4) {
+       message(sprintf(" - Creating multicore future #%d ...", ii))
+       x[[ii]] <- multicore({ ii }, globals = globals)
+     }
+     message(sprintf(" - Resolving %d multicore futures", length(x)))
+     v <- sapply(x, FUN = value)
+     stopifnot(all(v == 1:4))
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) and errors", globals))
+     f <- multicore({
+       stop("Whoops!")
+       1
+     }, globals = globals)
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "simpleError"))
+   
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+   
+     ## Error is repeated
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+ 
+     ## Custom error class
+     f <- multicore({
+       stop(structure(list(message = "boom"),
+                      class = c("MyError", "error", "condition")))
+     })
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+   
+     ## Make sure error is signaled
+     res <- tryCatch(value(f), error = identity)
+     stopifnot(inherits(res, "error"))
+   
+     ## Issue #200: Custom condition class attributes are lost 
+     stopifnot(inherits(res, "MyError"))    
+   } # for (globals ...)
+ 
+ 
+   message("*** multicore(..., workers = 1L) ...")
+ 
+   a <- 2
+   b <- 3
+   yTruth <- a * b
+ 
+   f <- multicore({ a * b }, globals = TRUE, workers = 1L)
+   rm(list = c("a", "b"))
+ 
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+   message("*** multicore(..., workers = 1L) ... DONE")
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
Number of workers: 1
*** multicore(..., globals = FALSE) without globals
[17:47:18.607] getGlobalsAndPackages() ...
[17:47:18.607] Not searching for globals
[17:47:18.608] - globals: [0] <none>
[17:47:18.608] getGlobalsAndPackages() ... DONE
[17:47:18.609] Packages needed by the future expression (n = 0): <none>
[17:47:18.609] Packages needed by future strategies (n = 0): <none>
[17:47:18.610] {
[17:47:18.610]     {
[17:47:18.610]         {
[17:47:18.610]             ...future.startTime <- base::Sys.time()
[17:47:18.610]             {
[17:47:18.610]                 {
[17:47:18.610]                   {
[17:47:18.610]                     base::local({
[17:47:18.610]                       has_future <- base::requireNamespace("future", 
[17:47:18.610]                         quietly = TRUE)
[17:47:18.610]                       if (has_future) {
[17:47:18.610]                         ns <- base::getNamespace("future")
[17:47:18.610]                         version <- ns[[".package"]][["version"]]
[17:47:18.610]                         if (is.null(version)) 
[17:47:18.610]                           version <- utils::packageVersion("future")
[17:47:18.610]                       }
[17:47:18.610]                       else {
[17:47:18.610]                         version <- NULL
[17:47:18.610]                       }
[17:47:18.610]                       if (!has_future || version < "1.8.0") {
[17:47:18.610]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.610]                           "", base::R.version$version.string), 
[17:47:18.610]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.610]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.610]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.610]                             "release", "version")], collapse = " "), 
[17:47:18.610]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.610]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.610]                           info)
[17:47:18.610]                         info <- base::paste(info, collapse = "; ")
[17:47:18.610]                         if (!has_future) {
[17:47:18.610]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.610]                             info)
[17:47:18.610]                         }
[17:47:18.610]                         else {
[17:47:18.610]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.610]                             info, version)
[17:47:18.610]                         }
[17:47:18.610]                         base::stop(msg)
[17:47:18.610]                       }
[17:47:18.610]                     })
[17:47:18.610]                   }
[17:47:18.610]                   ...future.strategy.old <- future::plan("list")
[17:47:18.610]                   options(future.plan = NULL)
[17:47:18.610]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.610]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.610]                 }
[17:47:18.610]                 ...future.workdir <- getwd()
[17:47:18.610]             }
[17:47:18.610]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.610]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.610]         }
[17:47:18.610]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.610]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.610]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.610]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.610]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.610]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.610]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.610]             base::names(...future.oldOptions))
[17:47:18.610]     }
[17:47:18.610]     if (FALSE) {
[17:47:18.610]     }
[17:47:18.610]     else {
[17:47:18.610]         if (TRUE) {
[17:47:18.610]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.610]                 open = "w")
[17:47:18.610]         }
[17:47:18.610]         else {
[17:47:18.610]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.610]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.610]         }
[17:47:18.610]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.610]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.610]             base::sink(type = "output", split = FALSE)
[17:47:18.610]             base::close(...future.stdout)
[17:47:18.610]         }, add = TRUE)
[17:47:18.610]     }
[17:47:18.610]     ...future.frame <- base::sys.nframe()
[17:47:18.610]     ...future.conditions <- base::list()
[17:47:18.610]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.610]     if (FALSE) {
[17:47:18.610]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.610]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.610]     }
[17:47:18.610]     ...future.result <- base::tryCatch({
[17:47:18.610]         base::withCallingHandlers({
[17:47:18.610]             ...future.value <- base::withVisible(base::local({
[17:47:18.610]                 42L
[17:47:18.610]             }))
[17:47:18.610]             future::FutureResult(value = ...future.value$value, 
[17:47:18.610]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.610]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.610]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.610]                     ...future.globalenv.names))
[17:47:18.610]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.610]         }, condition = base::local({
[17:47:18.610]             c <- base::c
[17:47:18.610]             inherits <- base::inherits
[17:47:18.610]             invokeRestart <- base::invokeRestart
[17:47:18.610]             length <- base::length
[17:47:18.610]             list <- base::list
[17:47:18.610]             seq.int <- base::seq.int
[17:47:18.610]             signalCondition <- base::signalCondition
[17:47:18.610]             sys.calls <- base::sys.calls
[17:47:18.610]             `[[` <- base::`[[`
[17:47:18.610]             `+` <- base::`+`
[17:47:18.610]             `<<-` <- base::`<<-`
[17:47:18.610]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.610]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.610]                   3L)]
[17:47:18.610]             }
[17:47:18.610]             function(cond) {
[17:47:18.610]                 is_error <- inherits(cond, "error")
[17:47:18.610]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.610]                   NULL)
[17:47:18.610]                 if (is_error) {
[17:47:18.610]                   sessionInformation <- function() {
[17:47:18.610]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.610]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.610]                       search = base::search(), system = base::Sys.info())
[17:47:18.610]                   }
[17:47:18.610]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.610]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.610]                     cond$call), session = sessionInformation(), 
[17:47:18.610]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.610]                   signalCondition(cond)
[17:47:18.610]                 }
[17:47:18.610]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.610]                 "immediateCondition"))) {
[17:47:18.610]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.610]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.610]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.610]                   if (TRUE && !signal) {
[17:47:18.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.610]                     {
[17:47:18.610]                       inherits <- base::inherits
[17:47:18.610]                       invokeRestart <- base::invokeRestart
[17:47:18.610]                       is.null <- base::is.null
[17:47:18.610]                       muffled <- FALSE
[17:47:18.610]                       if (inherits(cond, "message")) {
[17:47:18.610]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.610]                         if (muffled) 
[17:47:18.610]                           invokeRestart("muffleMessage")
[17:47:18.610]                       }
[17:47:18.610]                       else if (inherits(cond, "warning")) {
[17:47:18.610]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.610]                         if (muffled) 
[17:47:18.610]                           invokeRestart("muffleWarning")
[17:47:18.610]                       }
[17:47:18.610]                       else if (inherits(cond, "condition")) {
[17:47:18.610]                         if (!is.null(pattern)) {
[17:47:18.610]                           computeRestarts <- base::computeRestarts
[17:47:18.610]                           grepl <- base::grepl
[17:47:18.610]                           restarts <- computeRestarts(cond)
[17:47:18.610]                           for (restart in restarts) {
[17:47:18.610]                             name <- restart$name
[17:47:18.610]                             if (is.null(name)) 
[17:47:18.610]                               next
[17:47:18.610]                             if (!grepl(pattern, name)) 
[17:47:18.610]                               next
[17:47:18.610]                             invokeRestart(restart)
[17:47:18.610]                             muffled <- TRUE
[17:47:18.610]                             break
[17:47:18.610]                           }
[17:47:18.610]                         }
[17:47:18.610]                       }
[17:47:18.610]                       invisible(muffled)
[17:47:18.610]                     }
[17:47:18.610]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.610]                   }
[17:47:18.610]                 }
[17:47:18.610]                 else {
[17:47:18.610]                   if (TRUE) {
[17:47:18.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.610]                     {
[17:47:18.610]                       inherits <- base::inherits
[17:47:18.610]                       invokeRestart <- base::invokeRestart
[17:47:18.610]                       is.null <- base::is.null
[17:47:18.610]                       muffled <- FALSE
[17:47:18.610]                       if (inherits(cond, "message")) {
[17:47:18.610]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.610]                         if (muffled) 
[17:47:18.610]                           invokeRestart("muffleMessage")
[17:47:18.610]                       }
[17:47:18.610]                       else if (inherits(cond, "warning")) {
[17:47:18.610]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.610]                         if (muffled) 
[17:47:18.610]                           invokeRestart("muffleWarning")
[17:47:18.610]                       }
[17:47:18.610]                       else if (inherits(cond, "condition")) {
[17:47:18.610]                         if (!is.null(pattern)) {
[17:47:18.610]                           computeRestarts <- base::computeRestarts
[17:47:18.610]                           grepl <- base::grepl
[17:47:18.610]                           restarts <- computeRestarts(cond)
[17:47:18.610]                           for (restart in restarts) {
[17:47:18.610]                             name <- restart$name
[17:47:18.610]                             if (is.null(name)) 
[17:47:18.610]                               next
[17:47:18.610]                             if (!grepl(pattern, name)) 
[17:47:18.610]                               next
[17:47:18.610]                             invokeRestart(restart)
[17:47:18.610]                             muffled <- TRUE
[17:47:18.610]                             break
[17:47:18.610]                           }
[17:47:18.610]                         }
[17:47:18.610]                       }
[17:47:18.610]                       invisible(muffled)
[17:47:18.610]                     }
[17:47:18.610]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.610]                   }
[17:47:18.610]                 }
[17:47:18.610]             }
[17:47:18.610]         }))
[17:47:18.610]     }, error = function(ex) {
[17:47:18.610]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.610]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.610]                 ...future.rng), started = ...future.startTime, 
[17:47:18.610]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.610]             version = "1.8"), class = "FutureResult")
[17:47:18.610]     }, finally = {
[17:47:18.610]         if (!identical(...future.workdir, getwd())) 
[17:47:18.610]             setwd(...future.workdir)
[17:47:18.610]         {
[17:47:18.610]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.610]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.610]             }
[17:47:18.610]             base::options(...future.oldOptions)
[17:47:18.610]             if (.Platform$OS.type == "windows") {
[17:47:18.610]                 old_names <- names(...future.oldEnvVars)
[17:47:18.610]                 envs <- base::Sys.getenv()
[17:47:18.610]                 names <- names(envs)
[17:47:18.610]                 common <- intersect(names, old_names)
[17:47:18.610]                 added <- setdiff(names, old_names)
[17:47:18.610]                 removed <- setdiff(old_names, names)
[17:47:18.610]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.610]                   envs[common]]
[17:47:18.610]                 NAMES <- toupper(changed)
[17:47:18.610]                 args <- list()
[17:47:18.610]                 for (kk in seq_along(NAMES)) {
[17:47:18.610]                   name <- changed[[kk]]
[17:47:18.610]                   NAME <- NAMES[[kk]]
[17:47:18.610]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.610]                     next
[17:47:18.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.610]                 }
[17:47:18.610]                 NAMES <- toupper(added)
[17:47:18.610]                 for (kk in seq_along(NAMES)) {
[17:47:18.610]                   name <- added[[kk]]
[17:47:18.610]                   NAME <- NAMES[[kk]]
[17:47:18.610]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.610]                     next
[17:47:18.610]                   args[[name]] <- ""
[17:47:18.610]                 }
[17:47:18.610]                 NAMES <- toupper(removed)
[17:47:18.610]                 for (kk in seq_along(NAMES)) {
[17:47:18.610]                   name <- removed[[kk]]
[17:47:18.610]                   NAME <- NAMES[[kk]]
[17:47:18.610]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.610]                     next
[17:47:18.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.610]                 }
[17:47:18.610]                 if (length(args) > 0) 
[17:47:18.610]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.610]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.610]             }
[17:47:18.610]             else {
[17:47:18.610]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.610]             }
[17:47:18.610]             {
[17:47:18.610]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.610]                   0L) {
[17:47:18.610]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.610]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.610]                   base::options(opts)
[17:47:18.610]                 }
[17:47:18.610]                 {
[17:47:18.610]                   {
[17:47:18.610]                     NULL
[17:47:18.610]                     RNGkind("Mersenne-Twister")
[17:47:18.610]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.610]                       inherits = FALSE)
[17:47:18.610]                   }
[17:47:18.610]                   options(future.plan = NULL)
[17:47:18.610]                   if (is.na(NA_character_)) 
[17:47:18.610]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.610]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.610]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.610]                     .init = FALSE)
[17:47:18.610]                 }
[17:47:18.610]             }
[17:47:18.610]         }
[17:47:18.610]     })
[17:47:18.610]     if (TRUE) {
[17:47:18.610]         base::sink(type = "output", split = FALSE)
[17:47:18.610]         if (TRUE) {
[17:47:18.610]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.610]         }
[17:47:18.610]         else {
[17:47:18.610]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.610]         }
[17:47:18.610]         base::close(...future.stdout)
[17:47:18.610]         ...future.stdout <- NULL
[17:47:18.610]     }
[17:47:18.610]     ...future.result$conditions <- ...future.conditions
[17:47:18.610]     ...future.result$finished <- base::Sys.time()
[17:47:18.610]     ...future.result
[17:47:18.610] }
[17:47:18.612] plan(): Setting new future strategy stack:
[17:47:18.612] List of future strategies:
[17:47:18.612] 1. sequential:
[17:47:18.612]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.612]    - tweaked: FALSE
[17:47:18.612]    - call: NULL
[17:47:18.612] plan(): nbrOfWorkers() = 1
[17:47:18.613] plan(): Setting new future strategy stack:
[17:47:18.613] List of future strategies:
[17:47:18.613] 1. multicore:
[17:47:18.613]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.613]    - tweaked: FALSE
[17:47:18.613]    - call: plan(multicore)
[17:47:18.617] plan(): nbrOfWorkers() = 1
[17:47:18.617] SequentialFuture started (and completed)
[17:47:18.618] resolved() for ‘SequentialFuture’ ...
[17:47:18.618] - state: ‘finished’
[17:47:18.618] - run: TRUE
[17:47:18.618] - result: ‘FutureResult’
[17:47:18.618] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = FALSE) with globals
[17:47:18.622] getGlobalsAndPackages() ...
[17:47:18.622] Not searching for globals
[17:47:18.622] - globals: [0] <none>
[17:47:18.622] getGlobalsAndPackages() ... DONE
[17:47:18.622] Packages needed by the future expression (n = 0): <none>
[17:47:18.623] Packages needed by future strategies (n = 0): <none>
[17:47:18.623] {
[17:47:18.623]     {
[17:47:18.623]         {
[17:47:18.623]             ...future.startTime <- base::Sys.time()
[17:47:18.623]             {
[17:47:18.623]                 {
[17:47:18.623]                   {
[17:47:18.623]                     base::local({
[17:47:18.623]                       has_future <- base::requireNamespace("future", 
[17:47:18.623]                         quietly = TRUE)
[17:47:18.623]                       if (has_future) {
[17:47:18.623]                         ns <- base::getNamespace("future")
[17:47:18.623]                         version <- ns[[".package"]][["version"]]
[17:47:18.623]                         if (is.null(version)) 
[17:47:18.623]                           version <- utils::packageVersion("future")
[17:47:18.623]                       }
[17:47:18.623]                       else {
[17:47:18.623]                         version <- NULL
[17:47:18.623]                       }
[17:47:18.623]                       if (!has_future || version < "1.8.0") {
[17:47:18.623]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.623]                           "", base::R.version$version.string), 
[17:47:18.623]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.623]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.623]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.623]                             "release", "version")], collapse = " "), 
[17:47:18.623]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.623]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.623]                           info)
[17:47:18.623]                         info <- base::paste(info, collapse = "; ")
[17:47:18.623]                         if (!has_future) {
[17:47:18.623]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.623]                             info)
[17:47:18.623]                         }
[17:47:18.623]                         else {
[17:47:18.623]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.623]                             info, version)
[17:47:18.623]                         }
[17:47:18.623]                         base::stop(msg)
[17:47:18.623]                       }
[17:47:18.623]                     })
[17:47:18.623]                   }
[17:47:18.623]                   ...future.strategy.old <- future::plan("list")
[17:47:18.623]                   options(future.plan = NULL)
[17:47:18.623]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.623]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.623]                 }
[17:47:18.623]                 ...future.workdir <- getwd()
[17:47:18.623]             }
[17:47:18.623]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.623]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.623]         }
[17:47:18.623]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.623]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.623]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.623]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.623]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.623]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.623]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.623]             base::names(...future.oldOptions))
[17:47:18.623]     }
[17:47:18.623]     if (FALSE) {
[17:47:18.623]     }
[17:47:18.623]     else {
[17:47:18.623]         if (TRUE) {
[17:47:18.623]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.623]                 open = "w")
[17:47:18.623]         }
[17:47:18.623]         else {
[17:47:18.623]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.623]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.623]         }
[17:47:18.623]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.623]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.623]             base::sink(type = "output", split = FALSE)
[17:47:18.623]             base::close(...future.stdout)
[17:47:18.623]         }, add = TRUE)
[17:47:18.623]     }
[17:47:18.623]     ...future.frame <- base::sys.nframe()
[17:47:18.623]     ...future.conditions <- base::list()
[17:47:18.623]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.623]     if (FALSE) {
[17:47:18.623]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.623]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.623]     }
[17:47:18.623]     ...future.result <- base::tryCatch({
[17:47:18.623]         base::withCallingHandlers({
[17:47:18.623]             ...future.value <- base::withVisible(base::local({
[17:47:18.623]                 b <- 3
[17:47:18.623]                 c <- 2
[17:47:18.623]                 a * b * c
[17:47:18.623]             }))
[17:47:18.623]             future::FutureResult(value = ...future.value$value, 
[17:47:18.623]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.623]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.623]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.623]                     ...future.globalenv.names))
[17:47:18.623]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.623]         }, condition = base::local({
[17:47:18.623]             c <- base::c
[17:47:18.623]             inherits <- base::inherits
[17:47:18.623]             invokeRestart <- base::invokeRestart
[17:47:18.623]             length <- base::length
[17:47:18.623]             list <- base::list
[17:47:18.623]             seq.int <- base::seq.int
[17:47:18.623]             signalCondition <- base::signalCondition
[17:47:18.623]             sys.calls <- base::sys.calls
[17:47:18.623]             `[[` <- base::`[[`
[17:47:18.623]             `+` <- base::`+`
[17:47:18.623]             `<<-` <- base::`<<-`
[17:47:18.623]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.623]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.623]                   3L)]
[17:47:18.623]             }
[17:47:18.623]             function(cond) {
[17:47:18.623]                 is_error <- inherits(cond, "error")
[17:47:18.623]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.623]                   NULL)
[17:47:18.623]                 if (is_error) {
[17:47:18.623]                   sessionInformation <- function() {
[17:47:18.623]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.623]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.623]                       search = base::search(), system = base::Sys.info())
[17:47:18.623]                   }
[17:47:18.623]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.623]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.623]                     cond$call), session = sessionInformation(), 
[17:47:18.623]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.623]                   signalCondition(cond)
[17:47:18.623]                 }
[17:47:18.623]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.623]                 "immediateCondition"))) {
[17:47:18.623]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.623]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.623]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.623]                   if (TRUE && !signal) {
[17:47:18.623]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.623]                     {
[17:47:18.623]                       inherits <- base::inherits
[17:47:18.623]                       invokeRestart <- base::invokeRestart
[17:47:18.623]                       is.null <- base::is.null
[17:47:18.623]                       muffled <- FALSE
[17:47:18.623]                       if (inherits(cond, "message")) {
[17:47:18.623]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.623]                         if (muffled) 
[17:47:18.623]                           invokeRestart("muffleMessage")
[17:47:18.623]                       }
[17:47:18.623]                       else if (inherits(cond, "warning")) {
[17:47:18.623]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.623]                         if (muffled) 
[17:47:18.623]                           invokeRestart("muffleWarning")
[17:47:18.623]                       }
[17:47:18.623]                       else if (inherits(cond, "condition")) {
[17:47:18.623]                         if (!is.null(pattern)) {
[17:47:18.623]                           computeRestarts <- base::computeRestarts
[17:47:18.623]                           grepl <- base::grepl
[17:47:18.623]                           restarts <- computeRestarts(cond)
[17:47:18.623]                           for (restart in restarts) {
[17:47:18.623]                             name <- restart$name
[17:47:18.623]                             if (is.null(name)) 
[17:47:18.623]                               next
[17:47:18.623]                             if (!grepl(pattern, name)) 
[17:47:18.623]                               next
[17:47:18.623]                             invokeRestart(restart)
[17:47:18.623]                             muffled <- TRUE
[17:47:18.623]                             break
[17:47:18.623]                           }
[17:47:18.623]                         }
[17:47:18.623]                       }
[17:47:18.623]                       invisible(muffled)
[17:47:18.623]                     }
[17:47:18.623]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.623]                   }
[17:47:18.623]                 }
[17:47:18.623]                 else {
[17:47:18.623]                   if (TRUE) {
[17:47:18.623]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.623]                     {
[17:47:18.623]                       inherits <- base::inherits
[17:47:18.623]                       invokeRestart <- base::invokeRestart
[17:47:18.623]                       is.null <- base::is.null
[17:47:18.623]                       muffled <- FALSE
[17:47:18.623]                       if (inherits(cond, "message")) {
[17:47:18.623]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.623]                         if (muffled) 
[17:47:18.623]                           invokeRestart("muffleMessage")
[17:47:18.623]                       }
[17:47:18.623]                       else if (inherits(cond, "warning")) {
[17:47:18.623]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.623]                         if (muffled) 
[17:47:18.623]                           invokeRestart("muffleWarning")
[17:47:18.623]                       }
[17:47:18.623]                       else if (inherits(cond, "condition")) {
[17:47:18.623]                         if (!is.null(pattern)) {
[17:47:18.623]                           computeRestarts <- base::computeRestarts
[17:47:18.623]                           grepl <- base::grepl
[17:47:18.623]                           restarts <- computeRestarts(cond)
[17:47:18.623]                           for (restart in restarts) {
[17:47:18.623]                             name <- restart$name
[17:47:18.623]                             if (is.null(name)) 
[17:47:18.623]                               next
[17:47:18.623]                             if (!grepl(pattern, name)) 
[17:47:18.623]                               next
[17:47:18.623]                             invokeRestart(restart)
[17:47:18.623]                             muffled <- TRUE
[17:47:18.623]                             break
[17:47:18.623]                           }
[17:47:18.623]                         }
[17:47:18.623]                       }
[17:47:18.623]                       invisible(muffled)
[17:47:18.623]                     }
[17:47:18.623]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.623]                   }
[17:47:18.623]                 }
[17:47:18.623]             }
[17:47:18.623]         }))
[17:47:18.623]     }, error = function(ex) {
[17:47:18.623]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.623]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.623]                 ...future.rng), started = ...future.startTime, 
[17:47:18.623]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.623]             version = "1.8"), class = "FutureResult")
[17:47:18.623]     }, finally = {
[17:47:18.623]         if (!identical(...future.workdir, getwd())) 
[17:47:18.623]             setwd(...future.workdir)
[17:47:18.623]         {
[17:47:18.623]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.623]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.623]             }
[17:47:18.623]             base::options(...future.oldOptions)
[17:47:18.623]             if (.Platform$OS.type == "windows") {
[17:47:18.623]                 old_names <- names(...future.oldEnvVars)
[17:47:18.623]                 envs <- base::Sys.getenv()
[17:47:18.623]                 names <- names(envs)
[17:47:18.623]                 common <- intersect(names, old_names)
[17:47:18.623]                 added <- setdiff(names, old_names)
[17:47:18.623]                 removed <- setdiff(old_names, names)
[17:47:18.623]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.623]                   envs[common]]
[17:47:18.623]                 NAMES <- toupper(changed)
[17:47:18.623]                 args <- list()
[17:47:18.623]                 for (kk in seq_along(NAMES)) {
[17:47:18.623]                   name <- changed[[kk]]
[17:47:18.623]                   NAME <- NAMES[[kk]]
[17:47:18.623]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.623]                     next
[17:47:18.623]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.623]                 }
[17:47:18.623]                 NAMES <- toupper(added)
[17:47:18.623]                 for (kk in seq_along(NAMES)) {
[17:47:18.623]                   name <- added[[kk]]
[17:47:18.623]                   NAME <- NAMES[[kk]]
[17:47:18.623]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.623]                     next
[17:47:18.623]                   args[[name]] <- ""
[17:47:18.623]                 }
[17:47:18.623]                 NAMES <- toupper(removed)
[17:47:18.623]                 for (kk in seq_along(NAMES)) {
[17:47:18.623]                   name <- removed[[kk]]
[17:47:18.623]                   NAME <- NAMES[[kk]]
[17:47:18.623]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.623]                     next
[17:47:18.623]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.623]                 }
[17:47:18.623]                 if (length(args) > 0) 
[17:47:18.623]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.623]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.623]             }
[17:47:18.623]             else {
[17:47:18.623]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.623]             }
[17:47:18.623]             {
[17:47:18.623]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.623]                   0L) {
[17:47:18.623]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.623]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.623]                   base::options(opts)
[17:47:18.623]                 }
[17:47:18.623]                 {
[17:47:18.623]                   {
[17:47:18.623]                     NULL
[17:47:18.623]                     RNGkind("Mersenne-Twister")
[17:47:18.623]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.623]                       inherits = FALSE)
[17:47:18.623]                   }
[17:47:18.623]                   options(future.plan = NULL)
[17:47:18.623]                   if (is.na(NA_character_)) 
[17:47:18.623]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.623]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.623]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.623]                     .init = FALSE)
[17:47:18.623]                 }
[17:47:18.623]             }
[17:47:18.623]         }
[17:47:18.623]     })
[17:47:18.623]     if (TRUE) {
[17:47:18.623]         base::sink(type = "output", split = FALSE)
[17:47:18.623]         if (TRUE) {
[17:47:18.623]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.623]         }
[17:47:18.623]         else {
[17:47:18.623]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.623]         }
[17:47:18.623]         base::close(...future.stdout)
[17:47:18.623]         ...future.stdout <- NULL
[17:47:18.623]     }
[17:47:18.623]     ...future.result$conditions <- ...future.conditions
[17:47:18.623]     ...future.result$finished <- base::Sys.time()
[17:47:18.623]     ...future.result
[17:47:18.623] }
[17:47:18.625] plan(): Setting new future strategy stack:
[17:47:18.625] List of future strategies:
[17:47:18.625] 1. sequential:
[17:47:18.625]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.625]    - tweaked: FALSE
[17:47:18.625]    - call: NULL
[17:47:18.625] plan(): nbrOfWorkers() = 1
[17:47:18.626] plan(): Setting new future strategy stack:
[17:47:18.626] List of future strategies:
[17:47:18.626] 1. multicore:
[17:47:18.626]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.626]    - tweaked: FALSE
[17:47:18.626]    - call: plan(multicore)
[17:47:18.629] plan(): nbrOfWorkers() = 1
[17:47:18.630] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[17:47:18.634] getGlobalsAndPackages() ...
[17:47:18.634] Not searching for globals
[17:47:18.634] - globals: [0] <none>
[17:47:18.634] getGlobalsAndPackages() ... DONE
[17:47:18.635] Packages needed by the future expression (n = 0): <none>
[17:47:18.635] Packages needed by future strategies (n = 0): <none>
[17:47:18.635] {
[17:47:18.635]     {
[17:47:18.635]         {
[17:47:18.635]             ...future.startTime <- base::Sys.time()
[17:47:18.635]             {
[17:47:18.635]                 {
[17:47:18.635]                   {
[17:47:18.635]                     base::local({
[17:47:18.635]                       has_future <- base::requireNamespace("future", 
[17:47:18.635]                         quietly = TRUE)
[17:47:18.635]                       if (has_future) {
[17:47:18.635]                         ns <- base::getNamespace("future")
[17:47:18.635]                         version <- ns[[".package"]][["version"]]
[17:47:18.635]                         if (is.null(version)) 
[17:47:18.635]                           version <- utils::packageVersion("future")
[17:47:18.635]                       }
[17:47:18.635]                       else {
[17:47:18.635]                         version <- NULL
[17:47:18.635]                       }
[17:47:18.635]                       if (!has_future || version < "1.8.0") {
[17:47:18.635]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.635]                           "", base::R.version$version.string), 
[17:47:18.635]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.635]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.635]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.635]                             "release", "version")], collapse = " "), 
[17:47:18.635]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.635]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.635]                           info)
[17:47:18.635]                         info <- base::paste(info, collapse = "; ")
[17:47:18.635]                         if (!has_future) {
[17:47:18.635]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.635]                             info)
[17:47:18.635]                         }
[17:47:18.635]                         else {
[17:47:18.635]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.635]                             info, version)
[17:47:18.635]                         }
[17:47:18.635]                         base::stop(msg)
[17:47:18.635]                       }
[17:47:18.635]                     })
[17:47:18.635]                   }
[17:47:18.635]                   ...future.strategy.old <- future::plan("list")
[17:47:18.635]                   options(future.plan = NULL)
[17:47:18.635]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.635]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.635]                 }
[17:47:18.635]                 ...future.workdir <- getwd()
[17:47:18.635]             }
[17:47:18.635]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.635]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.635]         }
[17:47:18.635]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.635]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.635]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.635]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.635]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.635]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.635]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.635]             base::names(...future.oldOptions))
[17:47:18.635]     }
[17:47:18.635]     if (FALSE) {
[17:47:18.635]     }
[17:47:18.635]     else {
[17:47:18.635]         if (TRUE) {
[17:47:18.635]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.635]                 open = "w")
[17:47:18.635]         }
[17:47:18.635]         else {
[17:47:18.635]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.635]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.635]         }
[17:47:18.635]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.635]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.635]             base::sink(type = "output", split = FALSE)
[17:47:18.635]             base::close(...future.stdout)
[17:47:18.635]         }, add = TRUE)
[17:47:18.635]     }
[17:47:18.635]     ...future.frame <- base::sys.nframe()
[17:47:18.635]     ...future.conditions <- base::list()
[17:47:18.635]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.635]     if (FALSE) {
[17:47:18.635]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.635]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.635]     }
[17:47:18.635]     ...future.result <- base::tryCatch({
[17:47:18.635]         base::withCallingHandlers({
[17:47:18.635]             ...future.value <- base::withVisible(base::local({
[17:47:18.635]                 ii
[17:47:18.635]             }))
[17:47:18.635]             future::FutureResult(value = ...future.value$value, 
[17:47:18.635]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.635]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.635]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.635]                     ...future.globalenv.names))
[17:47:18.635]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.635]         }, condition = base::local({
[17:47:18.635]             c <- base::c
[17:47:18.635]             inherits <- base::inherits
[17:47:18.635]             invokeRestart <- base::invokeRestart
[17:47:18.635]             length <- base::length
[17:47:18.635]             list <- base::list
[17:47:18.635]             seq.int <- base::seq.int
[17:47:18.635]             signalCondition <- base::signalCondition
[17:47:18.635]             sys.calls <- base::sys.calls
[17:47:18.635]             `[[` <- base::`[[`
[17:47:18.635]             `+` <- base::`+`
[17:47:18.635]             `<<-` <- base::`<<-`
[17:47:18.635]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.635]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.635]                   3L)]
[17:47:18.635]             }
[17:47:18.635]             function(cond) {
[17:47:18.635]                 is_error <- inherits(cond, "error")
[17:47:18.635]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.635]                   NULL)
[17:47:18.635]                 if (is_error) {
[17:47:18.635]                   sessionInformation <- function() {
[17:47:18.635]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.635]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.635]                       search = base::search(), system = base::Sys.info())
[17:47:18.635]                   }
[17:47:18.635]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.635]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.635]                     cond$call), session = sessionInformation(), 
[17:47:18.635]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.635]                   signalCondition(cond)
[17:47:18.635]                 }
[17:47:18.635]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.635]                 "immediateCondition"))) {
[17:47:18.635]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.635]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.635]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.635]                   if (TRUE && !signal) {
[17:47:18.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.635]                     {
[17:47:18.635]                       inherits <- base::inherits
[17:47:18.635]                       invokeRestart <- base::invokeRestart
[17:47:18.635]                       is.null <- base::is.null
[17:47:18.635]                       muffled <- FALSE
[17:47:18.635]                       if (inherits(cond, "message")) {
[17:47:18.635]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.635]                         if (muffled) 
[17:47:18.635]                           invokeRestart("muffleMessage")
[17:47:18.635]                       }
[17:47:18.635]                       else if (inherits(cond, "warning")) {
[17:47:18.635]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.635]                         if (muffled) 
[17:47:18.635]                           invokeRestart("muffleWarning")
[17:47:18.635]                       }
[17:47:18.635]                       else if (inherits(cond, "condition")) {
[17:47:18.635]                         if (!is.null(pattern)) {
[17:47:18.635]                           computeRestarts <- base::computeRestarts
[17:47:18.635]                           grepl <- base::grepl
[17:47:18.635]                           restarts <- computeRestarts(cond)
[17:47:18.635]                           for (restart in restarts) {
[17:47:18.635]                             name <- restart$name
[17:47:18.635]                             if (is.null(name)) 
[17:47:18.635]                               next
[17:47:18.635]                             if (!grepl(pattern, name)) 
[17:47:18.635]                               next
[17:47:18.635]                             invokeRestart(restart)
[17:47:18.635]                             muffled <- TRUE
[17:47:18.635]                             break
[17:47:18.635]                           }
[17:47:18.635]                         }
[17:47:18.635]                       }
[17:47:18.635]                       invisible(muffled)
[17:47:18.635]                     }
[17:47:18.635]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.635]                   }
[17:47:18.635]                 }
[17:47:18.635]                 else {
[17:47:18.635]                   if (TRUE) {
[17:47:18.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.635]                     {
[17:47:18.635]                       inherits <- base::inherits
[17:47:18.635]                       invokeRestart <- base::invokeRestart
[17:47:18.635]                       is.null <- base::is.null
[17:47:18.635]                       muffled <- FALSE
[17:47:18.635]                       if (inherits(cond, "message")) {
[17:47:18.635]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.635]                         if (muffled) 
[17:47:18.635]                           invokeRestart("muffleMessage")
[17:47:18.635]                       }
[17:47:18.635]                       else if (inherits(cond, "warning")) {
[17:47:18.635]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.635]                         if (muffled) 
[17:47:18.635]                           invokeRestart("muffleWarning")
[17:47:18.635]                       }
[17:47:18.635]                       else if (inherits(cond, "condition")) {
[17:47:18.635]                         if (!is.null(pattern)) {
[17:47:18.635]                           computeRestarts <- base::computeRestarts
[17:47:18.635]                           grepl <- base::grepl
[17:47:18.635]                           restarts <- computeRestarts(cond)
[17:47:18.635]                           for (restart in restarts) {
[17:47:18.635]                             name <- restart$name
[17:47:18.635]                             if (is.null(name)) 
[17:47:18.635]                               next
[17:47:18.635]                             if (!grepl(pattern, name)) 
[17:47:18.635]                               next
[17:47:18.635]                             invokeRestart(restart)
[17:47:18.635]                             muffled <- TRUE
[17:47:18.635]                             break
[17:47:18.635]                           }
[17:47:18.635]                         }
[17:47:18.635]                       }
[17:47:18.635]                       invisible(muffled)
[17:47:18.635]                     }
[17:47:18.635]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.635]                   }
[17:47:18.635]                 }
[17:47:18.635]             }
[17:47:18.635]         }))
[17:47:18.635]     }, error = function(ex) {
[17:47:18.635]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.635]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.635]                 ...future.rng), started = ...future.startTime, 
[17:47:18.635]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.635]             version = "1.8"), class = "FutureResult")
[17:47:18.635]     }, finally = {
[17:47:18.635]         if (!identical(...future.workdir, getwd())) 
[17:47:18.635]             setwd(...future.workdir)
[17:47:18.635]         {
[17:47:18.635]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.635]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.635]             }
[17:47:18.635]             base::options(...future.oldOptions)
[17:47:18.635]             if (.Platform$OS.type == "windows") {
[17:47:18.635]                 old_names <- names(...future.oldEnvVars)
[17:47:18.635]                 envs <- base::Sys.getenv()
[17:47:18.635]                 names <- names(envs)
[17:47:18.635]                 common <- intersect(names, old_names)
[17:47:18.635]                 added <- setdiff(names, old_names)
[17:47:18.635]                 removed <- setdiff(old_names, names)
[17:47:18.635]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.635]                   envs[common]]
[17:47:18.635]                 NAMES <- toupper(changed)
[17:47:18.635]                 args <- list()
[17:47:18.635]                 for (kk in seq_along(NAMES)) {
[17:47:18.635]                   name <- changed[[kk]]
[17:47:18.635]                   NAME <- NAMES[[kk]]
[17:47:18.635]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.635]                     next
[17:47:18.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.635]                 }
[17:47:18.635]                 NAMES <- toupper(added)
[17:47:18.635]                 for (kk in seq_along(NAMES)) {
[17:47:18.635]                   name <- added[[kk]]
[17:47:18.635]                   NAME <- NAMES[[kk]]
[17:47:18.635]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.635]                     next
[17:47:18.635]                   args[[name]] <- ""
[17:47:18.635]                 }
[17:47:18.635]                 NAMES <- toupper(removed)
[17:47:18.635]                 for (kk in seq_along(NAMES)) {
[17:47:18.635]                   name <- removed[[kk]]
[17:47:18.635]                   NAME <- NAMES[[kk]]
[17:47:18.635]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.635]                     next
[17:47:18.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.635]                 }
[17:47:18.635]                 if (length(args) > 0) 
[17:47:18.635]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.635]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.635]             }
[17:47:18.635]             else {
[17:47:18.635]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.635]             }
[17:47:18.635]             {
[17:47:18.635]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.635]                   0L) {
[17:47:18.635]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.635]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.635]                   base::options(opts)
[17:47:18.635]                 }
[17:47:18.635]                 {
[17:47:18.635]                   {
[17:47:18.635]                     NULL
[17:47:18.635]                     RNGkind("Mersenne-Twister")
[17:47:18.635]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.635]                       inherits = FALSE)
[17:47:18.635]                   }
[17:47:18.635]                   options(future.plan = NULL)
[17:47:18.635]                   if (is.na(NA_character_)) 
[17:47:18.635]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.635]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.635]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.635]                     .init = FALSE)
[17:47:18.635]                 }
[17:47:18.635]             }
[17:47:18.635]         }
[17:47:18.635]     })
[17:47:18.635]     if (TRUE) {
[17:47:18.635]         base::sink(type = "output", split = FALSE)
[17:47:18.635]         if (TRUE) {
[17:47:18.635]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.635]         }
[17:47:18.635]         else {
[17:47:18.635]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.635]         }
[17:47:18.635]         base::close(...future.stdout)
[17:47:18.635]         ...future.stdout <- NULL
[17:47:18.635]     }
[17:47:18.635]     ...future.result$conditions <- ...future.conditions
[17:47:18.635]     ...future.result$finished <- base::Sys.time()
[17:47:18.635]     ...future.result
[17:47:18.635] }
[17:47:18.637] plan(): Setting new future strategy stack:
[17:47:18.637] List of future strategies:
[17:47:18.637] 1. sequential:
[17:47:18.637]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.637]    - tweaked: FALSE
[17:47:18.637]    - call: NULL
[17:47:18.638] plan(): nbrOfWorkers() = 1
[17:47:18.638] plan(): Setting new future strategy stack:
[17:47:18.638] List of future strategies:
[17:47:18.638] 1. multicore:
[17:47:18.638]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.638]    - tweaked: FALSE
[17:47:18.638]    - call: plan(multicore)
[17:47:18.642] plan(): nbrOfWorkers() = 1
[17:47:18.642] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[17:47:18.645] getGlobalsAndPackages() ...
[17:47:18.646] Not searching for globals
[17:47:18.646] - globals: [0] <none>
[17:47:18.646] getGlobalsAndPackages() ... DONE
[17:47:18.646] Packages needed by the future expression (n = 0): <none>
[17:47:18.646] Packages needed by future strategies (n = 0): <none>
[17:47:18.647] {
[17:47:18.647]     {
[17:47:18.647]         {
[17:47:18.647]             ...future.startTime <- base::Sys.time()
[17:47:18.647]             {
[17:47:18.647]                 {
[17:47:18.647]                   {
[17:47:18.647]                     base::local({
[17:47:18.647]                       has_future <- base::requireNamespace("future", 
[17:47:18.647]                         quietly = TRUE)
[17:47:18.647]                       if (has_future) {
[17:47:18.647]                         ns <- base::getNamespace("future")
[17:47:18.647]                         version <- ns[[".package"]][["version"]]
[17:47:18.647]                         if (is.null(version)) 
[17:47:18.647]                           version <- utils::packageVersion("future")
[17:47:18.647]                       }
[17:47:18.647]                       else {
[17:47:18.647]                         version <- NULL
[17:47:18.647]                       }
[17:47:18.647]                       if (!has_future || version < "1.8.0") {
[17:47:18.647]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.647]                           "", base::R.version$version.string), 
[17:47:18.647]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.647]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.647]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.647]                             "release", "version")], collapse = " "), 
[17:47:18.647]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.647]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.647]                           info)
[17:47:18.647]                         info <- base::paste(info, collapse = "; ")
[17:47:18.647]                         if (!has_future) {
[17:47:18.647]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.647]                             info)
[17:47:18.647]                         }
[17:47:18.647]                         else {
[17:47:18.647]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.647]                             info, version)
[17:47:18.647]                         }
[17:47:18.647]                         base::stop(msg)
[17:47:18.647]                       }
[17:47:18.647]                     })
[17:47:18.647]                   }
[17:47:18.647]                   ...future.strategy.old <- future::plan("list")
[17:47:18.647]                   options(future.plan = NULL)
[17:47:18.647]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.647]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.647]                 }
[17:47:18.647]                 ...future.workdir <- getwd()
[17:47:18.647]             }
[17:47:18.647]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.647]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.647]         }
[17:47:18.647]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.647]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.647]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.647]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.647]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.647]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.647]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.647]             base::names(...future.oldOptions))
[17:47:18.647]     }
[17:47:18.647]     if (FALSE) {
[17:47:18.647]     }
[17:47:18.647]     else {
[17:47:18.647]         if (TRUE) {
[17:47:18.647]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.647]                 open = "w")
[17:47:18.647]         }
[17:47:18.647]         else {
[17:47:18.647]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.647]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.647]         }
[17:47:18.647]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.647]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.647]             base::sink(type = "output", split = FALSE)
[17:47:18.647]             base::close(...future.stdout)
[17:47:18.647]         }, add = TRUE)
[17:47:18.647]     }
[17:47:18.647]     ...future.frame <- base::sys.nframe()
[17:47:18.647]     ...future.conditions <- base::list()
[17:47:18.647]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.647]     if (FALSE) {
[17:47:18.647]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.647]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.647]     }
[17:47:18.647]     ...future.result <- base::tryCatch({
[17:47:18.647]         base::withCallingHandlers({
[17:47:18.647]             ...future.value <- base::withVisible(base::local({
[17:47:18.647]                 ii
[17:47:18.647]             }))
[17:47:18.647]             future::FutureResult(value = ...future.value$value, 
[17:47:18.647]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.647]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.647]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.647]                     ...future.globalenv.names))
[17:47:18.647]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.647]         }, condition = base::local({
[17:47:18.647]             c <- base::c
[17:47:18.647]             inherits <- base::inherits
[17:47:18.647]             invokeRestart <- base::invokeRestart
[17:47:18.647]             length <- base::length
[17:47:18.647]             list <- base::list
[17:47:18.647]             seq.int <- base::seq.int
[17:47:18.647]             signalCondition <- base::signalCondition
[17:47:18.647]             sys.calls <- base::sys.calls
[17:47:18.647]             `[[` <- base::`[[`
[17:47:18.647]             `+` <- base::`+`
[17:47:18.647]             `<<-` <- base::`<<-`
[17:47:18.647]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.647]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.647]                   3L)]
[17:47:18.647]             }
[17:47:18.647]             function(cond) {
[17:47:18.647]                 is_error <- inherits(cond, "error")
[17:47:18.647]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.647]                   NULL)
[17:47:18.647]                 if (is_error) {
[17:47:18.647]                   sessionInformation <- function() {
[17:47:18.647]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.647]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.647]                       search = base::search(), system = base::Sys.info())
[17:47:18.647]                   }
[17:47:18.647]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.647]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.647]                     cond$call), session = sessionInformation(), 
[17:47:18.647]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.647]                   signalCondition(cond)
[17:47:18.647]                 }
[17:47:18.647]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.647]                 "immediateCondition"))) {
[17:47:18.647]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.647]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.647]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.647]                   if (TRUE && !signal) {
[17:47:18.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.647]                     {
[17:47:18.647]                       inherits <- base::inherits
[17:47:18.647]                       invokeRestart <- base::invokeRestart
[17:47:18.647]                       is.null <- base::is.null
[17:47:18.647]                       muffled <- FALSE
[17:47:18.647]                       if (inherits(cond, "message")) {
[17:47:18.647]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.647]                         if (muffled) 
[17:47:18.647]                           invokeRestart("muffleMessage")
[17:47:18.647]                       }
[17:47:18.647]                       else if (inherits(cond, "warning")) {
[17:47:18.647]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.647]                         if (muffled) 
[17:47:18.647]                           invokeRestart("muffleWarning")
[17:47:18.647]                       }
[17:47:18.647]                       else if (inherits(cond, "condition")) {
[17:47:18.647]                         if (!is.null(pattern)) {
[17:47:18.647]                           computeRestarts <- base::computeRestarts
[17:47:18.647]                           grepl <- base::grepl
[17:47:18.647]                           restarts <- computeRestarts(cond)
[17:47:18.647]                           for (restart in restarts) {
[17:47:18.647]                             name <- restart$name
[17:47:18.647]                             if (is.null(name)) 
[17:47:18.647]                               next
[17:47:18.647]                             if (!grepl(pattern, name)) 
[17:47:18.647]                               next
[17:47:18.647]                             invokeRestart(restart)
[17:47:18.647]                             muffled <- TRUE
[17:47:18.647]                             break
[17:47:18.647]                           }
[17:47:18.647]                         }
[17:47:18.647]                       }
[17:47:18.647]                       invisible(muffled)
[17:47:18.647]                     }
[17:47:18.647]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.647]                   }
[17:47:18.647]                 }
[17:47:18.647]                 else {
[17:47:18.647]                   if (TRUE) {
[17:47:18.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.647]                     {
[17:47:18.647]                       inherits <- base::inherits
[17:47:18.647]                       invokeRestart <- base::invokeRestart
[17:47:18.647]                       is.null <- base::is.null
[17:47:18.647]                       muffled <- FALSE
[17:47:18.647]                       if (inherits(cond, "message")) {
[17:47:18.647]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.647]                         if (muffled) 
[17:47:18.647]                           invokeRestart("muffleMessage")
[17:47:18.647]                       }
[17:47:18.647]                       else if (inherits(cond, "warning")) {
[17:47:18.647]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.647]                         if (muffled) 
[17:47:18.647]                           invokeRestart("muffleWarning")
[17:47:18.647]                       }
[17:47:18.647]                       else if (inherits(cond, "condition")) {
[17:47:18.647]                         if (!is.null(pattern)) {
[17:47:18.647]                           computeRestarts <- base::computeRestarts
[17:47:18.647]                           grepl <- base::grepl
[17:47:18.647]                           restarts <- computeRestarts(cond)
[17:47:18.647]                           for (restart in restarts) {
[17:47:18.647]                             name <- restart$name
[17:47:18.647]                             if (is.null(name)) 
[17:47:18.647]                               next
[17:47:18.647]                             if (!grepl(pattern, name)) 
[17:47:18.647]                               next
[17:47:18.647]                             invokeRestart(restart)
[17:47:18.647]                             muffled <- TRUE
[17:47:18.647]                             break
[17:47:18.647]                           }
[17:47:18.647]                         }
[17:47:18.647]                       }
[17:47:18.647]                       invisible(muffled)
[17:47:18.647]                     }
[17:47:18.647]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.647]                   }
[17:47:18.647]                 }
[17:47:18.647]             }
[17:47:18.647]         }))
[17:47:18.647]     }, error = function(ex) {
[17:47:18.647]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.647]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.647]                 ...future.rng), started = ...future.startTime, 
[17:47:18.647]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.647]             version = "1.8"), class = "FutureResult")
[17:47:18.647]     }, finally = {
[17:47:18.647]         if (!identical(...future.workdir, getwd())) 
[17:47:18.647]             setwd(...future.workdir)
[17:47:18.647]         {
[17:47:18.647]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.647]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.647]             }
[17:47:18.647]             base::options(...future.oldOptions)
[17:47:18.647]             if (.Platform$OS.type == "windows") {
[17:47:18.647]                 old_names <- names(...future.oldEnvVars)
[17:47:18.647]                 envs <- base::Sys.getenv()
[17:47:18.647]                 names <- names(envs)
[17:47:18.647]                 common <- intersect(names, old_names)
[17:47:18.647]                 added <- setdiff(names, old_names)
[17:47:18.647]                 removed <- setdiff(old_names, names)
[17:47:18.647]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.647]                   envs[common]]
[17:47:18.647]                 NAMES <- toupper(changed)
[17:47:18.647]                 args <- list()
[17:47:18.647]                 for (kk in seq_along(NAMES)) {
[17:47:18.647]                   name <- changed[[kk]]
[17:47:18.647]                   NAME <- NAMES[[kk]]
[17:47:18.647]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.647]                     next
[17:47:18.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.647]                 }
[17:47:18.647]                 NAMES <- toupper(added)
[17:47:18.647]                 for (kk in seq_along(NAMES)) {
[17:47:18.647]                   name <- added[[kk]]
[17:47:18.647]                   NAME <- NAMES[[kk]]
[17:47:18.647]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.647]                     next
[17:47:18.647]                   args[[name]] <- ""
[17:47:18.647]                 }
[17:47:18.647]                 NAMES <- toupper(removed)
[17:47:18.647]                 for (kk in seq_along(NAMES)) {
[17:47:18.647]                   name <- removed[[kk]]
[17:47:18.647]                   NAME <- NAMES[[kk]]
[17:47:18.647]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.647]                     next
[17:47:18.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.647]                 }
[17:47:18.647]                 if (length(args) > 0) 
[17:47:18.647]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.647]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.647]             }
[17:47:18.647]             else {
[17:47:18.647]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.647]             }
[17:47:18.647]             {
[17:47:18.647]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.647]                   0L) {
[17:47:18.647]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.647]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.647]                   base::options(opts)
[17:47:18.647]                 }
[17:47:18.647]                 {
[17:47:18.647]                   {
[17:47:18.647]                     NULL
[17:47:18.647]                     RNGkind("Mersenne-Twister")
[17:47:18.647]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.647]                       inherits = FALSE)
[17:47:18.647]                   }
[17:47:18.647]                   options(future.plan = NULL)
[17:47:18.647]                   if (is.na(NA_character_)) 
[17:47:18.647]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.647]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.647]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.647]                     .init = FALSE)
[17:47:18.647]                 }
[17:47:18.647]             }
[17:47:18.647]         }
[17:47:18.647]     })
[17:47:18.647]     if (TRUE) {
[17:47:18.647]         base::sink(type = "output", split = FALSE)
[17:47:18.647]         if (TRUE) {
[17:47:18.647]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.647]         }
[17:47:18.647]         else {
[17:47:18.647]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.647]         }
[17:47:18.647]         base::close(...future.stdout)
[17:47:18.647]         ...future.stdout <- NULL
[17:47:18.647]     }
[17:47:18.647]     ...future.result$conditions <- ...future.conditions
[17:47:18.647]     ...future.result$finished <- base::Sys.time()
[17:47:18.647]     ...future.result
[17:47:18.647] }
[17:47:18.648] plan(): Setting new future strategy stack:
[17:47:18.649] List of future strategies:
[17:47:18.649] 1. sequential:
[17:47:18.649]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.649]    - tweaked: FALSE
[17:47:18.649]    - call: NULL
[17:47:18.649] plan(): nbrOfWorkers() = 1
[17:47:18.650] plan(): Setting new future strategy stack:
[17:47:18.650] List of future strategies:
[17:47:18.650] 1. multicore:
[17:47:18.650]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.650]    - tweaked: FALSE
[17:47:18.650]    - call: plan(multicore)
[17:47:18.653] plan(): nbrOfWorkers() = 1
[17:47:18.653] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[17:47:18.659] getGlobalsAndPackages() ...
[17:47:18.659] Not searching for globals
[17:47:18.659] - globals: [0] <none>
[17:47:18.659] getGlobalsAndPackages() ... DONE
[17:47:18.660] Packages needed by the future expression (n = 0): <none>
[17:47:18.660] Packages needed by future strategies (n = 0): <none>
[17:47:18.660] {
[17:47:18.660]     {
[17:47:18.660]         {
[17:47:18.660]             ...future.startTime <- base::Sys.time()
[17:47:18.660]             {
[17:47:18.660]                 {
[17:47:18.660]                   {
[17:47:18.660]                     base::local({
[17:47:18.660]                       has_future <- base::requireNamespace("future", 
[17:47:18.660]                         quietly = TRUE)
[17:47:18.660]                       if (has_future) {
[17:47:18.660]                         ns <- base::getNamespace("future")
[17:47:18.660]                         version <- ns[[".package"]][["version"]]
[17:47:18.660]                         if (is.null(version)) 
[17:47:18.660]                           version <- utils::packageVersion("future")
[17:47:18.660]                       }
[17:47:18.660]                       else {
[17:47:18.660]                         version <- NULL
[17:47:18.660]                       }
[17:47:18.660]                       if (!has_future || version < "1.8.0") {
[17:47:18.660]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.660]                           "", base::R.version$version.string), 
[17:47:18.660]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.660]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.660]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.660]                             "release", "version")], collapse = " "), 
[17:47:18.660]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.660]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.660]                           info)
[17:47:18.660]                         info <- base::paste(info, collapse = "; ")
[17:47:18.660]                         if (!has_future) {
[17:47:18.660]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.660]                             info)
[17:47:18.660]                         }
[17:47:18.660]                         else {
[17:47:18.660]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.660]                             info, version)
[17:47:18.660]                         }
[17:47:18.660]                         base::stop(msg)
[17:47:18.660]                       }
[17:47:18.660]                     })
[17:47:18.660]                   }
[17:47:18.660]                   ...future.strategy.old <- future::plan("list")
[17:47:18.660]                   options(future.plan = NULL)
[17:47:18.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.660]                 }
[17:47:18.660]                 ...future.workdir <- getwd()
[17:47:18.660]             }
[17:47:18.660]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.660]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.660]         }
[17:47:18.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.660]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.660]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.660]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.660]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.660]             base::names(...future.oldOptions))
[17:47:18.660]     }
[17:47:18.660]     if (FALSE) {
[17:47:18.660]     }
[17:47:18.660]     else {
[17:47:18.660]         if (TRUE) {
[17:47:18.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.660]                 open = "w")
[17:47:18.660]         }
[17:47:18.660]         else {
[17:47:18.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.660]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.660]         }
[17:47:18.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.660]             base::sink(type = "output", split = FALSE)
[17:47:18.660]             base::close(...future.stdout)
[17:47:18.660]         }, add = TRUE)
[17:47:18.660]     }
[17:47:18.660]     ...future.frame <- base::sys.nframe()
[17:47:18.660]     ...future.conditions <- base::list()
[17:47:18.660]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.660]     if (FALSE) {
[17:47:18.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.660]     }
[17:47:18.660]     ...future.result <- base::tryCatch({
[17:47:18.660]         base::withCallingHandlers({
[17:47:18.660]             ...future.value <- base::withVisible(base::local({
[17:47:18.660]                 ii
[17:47:18.660]             }))
[17:47:18.660]             future::FutureResult(value = ...future.value$value, 
[17:47:18.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.660]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.660]                     ...future.globalenv.names))
[17:47:18.660]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.660]         }, condition = base::local({
[17:47:18.660]             c <- base::c
[17:47:18.660]             inherits <- base::inherits
[17:47:18.660]             invokeRestart <- base::invokeRestart
[17:47:18.660]             length <- base::length
[17:47:18.660]             list <- base::list
[17:47:18.660]             seq.int <- base::seq.int
[17:47:18.660]             signalCondition <- base::signalCondition
[17:47:18.660]             sys.calls <- base::sys.calls
[17:47:18.660]             `[[` <- base::`[[`
[17:47:18.660]             `+` <- base::`+`
[17:47:18.660]             `<<-` <- base::`<<-`
[17:47:18.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.660]                   3L)]
[17:47:18.660]             }
[17:47:18.660]             function(cond) {
[17:47:18.660]                 is_error <- inherits(cond, "error")
[17:47:18.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.660]                   NULL)
[17:47:18.660]                 if (is_error) {
[17:47:18.660]                   sessionInformation <- function() {
[17:47:18.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.660]                       search = base::search(), system = base::Sys.info())
[17:47:18.660]                   }
[17:47:18.660]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.660]                     cond$call), session = sessionInformation(), 
[17:47:18.660]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.660]                   signalCondition(cond)
[17:47:18.660]                 }
[17:47:18.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.660]                 "immediateCondition"))) {
[17:47:18.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.660]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.660]                   if (TRUE && !signal) {
[17:47:18.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.660]                     {
[17:47:18.660]                       inherits <- base::inherits
[17:47:18.660]                       invokeRestart <- base::invokeRestart
[17:47:18.660]                       is.null <- base::is.null
[17:47:18.660]                       muffled <- FALSE
[17:47:18.660]                       if (inherits(cond, "message")) {
[17:47:18.660]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.660]                         if (muffled) 
[17:47:18.660]                           invokeRestart("muffleMessage")
[17:47:18.660]                       }
[17:47:18.660]                       else if (inherits(cond, "warning")) {
[17:47:18.660]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.660]                         if (muffled) 
[17:47:18.660]                           invokeRestart("muffleWarning")
[17:47:18.660]                       }
[17:47:18.660]                       else if (inherits(cond, "condition")) {
[17:47:18.660]                         if (!is.null(pattern)) {
[17:47:18.660]                           computeRestarts <- base::computeRestarts
[17:47:18.660]                           grepl <- base::grepl
[17:47:18.660]                           restarts <- computeRestarts(cond)
[17:47:18.660]                           for (restart in restarts) {
[17:47:18.660]                             name <- restart$name
[17:47:18.660]                             if (is.null(name)) 
[17:47:18.660]                               next
[17:47:18.660]                             if (!grepl(pattern, name)) 
[17:47:18.660]                               next
[17:47:18.660]                             invokeRestart(restart)
[17:47:18.660]                             muffled <- TRUE
[17:47:18.660]                             break
[17:47:18.660]                           }
[17:47:18.660]                         }
[17:47:18.660]                       }
[17:47:18.660]                       invisible(muffled)
[17:47:18.660]                     }
[17:47:18.660]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.660]                   }
[17:47:18.660]                 }
[17:47:18.660]                 else {
[17:47:18.660]                   if (TRUE) {
[17:47:18.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.660]                     {
[17:47:18.660]                       inherits <- base::inherits
[17:47:18.660]                       invokeRestart <- base::invokeRestart
[17:47:18.660]                       is.null <- base::is.null
[17:47:18.660]                       muffled <- FALSE
[17:47:18.660]                       if (inherits(cond, "message")) {
[17:47:18.660]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.660]                         if (muffled) 
[17:47:18.660]                           invokeRestart("muffleMessage")
[17:47:18.660]                       }
[17:47:18.660]                       else if (inherits(cond, "warning")) {
[17:47:18.660]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.660]                         if (muffled) 
[17:47:18.660]                           invokeRestart("muffleWarning")
[17:47:18.660]                       }
[17:47:18.660]                       else if (inherits(cond, "condition")) {
[17:47:18.660]                         if (!is.null(pattern)) {
[17:47:18.660]                           computeRestarts <- base::computeRestarts
[17:47:18.660]                           grepl <- base::grepl
[17:47:18.660]                           restarts <- computeRestarts(cond)
[17:47:18.660]                           for (restart in restarts) {
[17:47:18.660]                             name <- restart$name
[17:47:18.660]                             if (is.null(name)) 
[17:47:18.660]                               next
[17:47:18.660]                             if (!grepl(pattern, name)) 
[17:47:18.660]                               next
[17:47:18.660]                             invokeRestart(restart)
[17:47:18.660]                             muffled <- TRUE
[17:47:18.660]                             break
[17:47:18.660]                           }
[17:47:18.660]                         }
[17:47:18.660]                       }
[17:47:18.660]                       invisible(muffled)
[17:47:18.660]                     }
[17:47:18.660]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.660]                   }
[17:47:18.660]                 }
[17:47:18.660]             }
[17:47:18.660]         }))
[17:47:18.660]     }, error = function(ex) {
[17:47:18.660]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.660]                 ...future.rng), started = ...future.startTime, 
[17:47:18.660]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.660]             version = "1.8"), class = "FutureResult")
[17:47:18.660]     }, finally = {
[17:47:18.660]         if (!identical(...future.workdir, getwd())) 
[17:47:18.660]             setwd(...future.workdir)
[17:47:18.660]         {
[17:47:18.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.660]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.660]             }
[17:47:18.660]             base::options(...future.oldOptions)
[17:47:18.660]             if (.Platform$OS.type == "windows") {
[17:47:18.660]                 old_names <- names(...future.oldEnvVars)
[17:47:18.660]                 envs <- base::Sys.getenv()
[17:47:18.660]                 names <- names(envs)
[17:47:18.660]                 common <- intersect(names, old_names)
[17:47:18.660]                 added <- setdiff(names, old_names)
[17:47:18.660]                 removed <- setdiff(old_names, names)
[17:47:18.660]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.660]                   envs[common]]
[17:47:18.660]                 NAMES <- toupper(changed)
[17:47:18.660]                 args <- list()
[17:47:18.660]                 for (kk in seq_along(NAMES)) {
[17:47:18.660]                   name <- changed[[kk]]
[17:47:18.660]                   NAME <- NAMES[[kk]]
[17:47:18.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.660]                     next
[17:47:18.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.660]                 }
[17:47:18.660]                 NAMES <- toupper(added)
[17:47:18.660]                 for (kk in seq_along(NAMES)) {
[17:47:18.660]                   name <- added[[kk]]
[17:47:18.660]                   NAME <- NAMES[[kk]]
[17:47:18.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.660]                     next
[17:47:18.660]                   args[[name]] <- ""
[17:47:18.660]                 }
[17:47:18.660]                 NAMES <- toupper(removed)
[17:47:18.660]                 for (kk in seq_along(NAMES)) {
[17:47:18.660]                   name <- removed[[kk]]
[17:47:18.660]                   NAME <- NAMES[[kk]]
[17:47:18.660]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.660]                     next
[17:47:18.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.660]                 }
[17:47:18.660]                 if (length(args) > 0) 
[17:47:18.660]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.660]             }
[17:47:18.660]             else {
[17:47:18.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.660]             }
[17:47:18.660]             {
[17:47:18.660]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.660]                   0L) {
[17:47:18.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.660]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.660]                   base::options(opts)
[17:47:18.660]                 }
[17:47:18.660]                 {
[17:47:18.660]                   {
[17:47:18.660]                     NULL
[17:47:18.660]                     RNGkind("Mersenne-Twister")
[17:47:18.660]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.660]                       inherits = FALSE)
[17:47:18.660]                   }
[17:47:18.660]                   options(future.plan = NULL)
[17:47:18.660]                   if (is.na(NA_character_)) 
[17:47:18.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.660]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.660]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.660]                     .init = FALSE)
[17:47:18.660]                 }
[17:47:18.660]             }
[17:47:18.660]         }
[17:47:18.660]     })
[17:47:18.660]     if (TRUE) {
[17:47:18.660]         base::sink(type = "output", split = FALSE)
[17:47:18.660]         if (TRUE) {
[17:47:18.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.660]         }
[17:47:18.660]         else {
[17:47:18.660]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.660]         }
[17:47:18.660]         base::close(...future.stdout)
[17:47:18.660]         ...future.stdout <- NULL
[17:47:18.660]     }
[17:47:18.660]     ...future.result$conditions <- ...future.conditions
[17:47:18.660]     ...future.result$finished <- base::Sys.time()
[17:47:18.660]     ...future.result
[17:47:18.660] }
[17:47:18.662] plan(): Setting new future strategy stack:
[17:47:18.662] List of future strategies:
[17:47:18.662] 1. sequential:
[17:47:18.662]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.662]    - tweaked: FALSE
[17:47:18.662]    - call: NULL
[17:47:18.663] plan(): nbrOfWorkers() = 1
[17:47:18.663] plan(): Setting new future strategy stack:
[17:47:18.663] List of future strategies:
[17:47:18.663] 1. multicore:
[17:47:18.663]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.663]    - tweaked: FALSE
[17:47:18.663]    - call: plan(multicore)
[17:47:18.667] plan(): nbrOfWorkers() = 1
[17:47:18.667] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[17:47:18.670] getGlobalsAndPackages() ...
[17:47:18.670] Not searching for globals
[17:47:18.671] - globals: [0] <none>
[17:47:18.671] getGlobalsAndPackages() ... DONE
[17:47:18.671] Packages needed by the future expression (n = 0): <none>
[17:47:18.671] Packages needed by future strategies (n = 0): <none>
[17:47:18.672] {
[17:47:18.672]     {
[17:47:18.672]         {
[17:47:18.672]             ...future.startTime <- base::Sys.time()
[17:47:18.672]             {
[17:47:18.672]                 {
[17:47:18.672]                   {
[17:47:18.672]                     base::local({
[17:47:18.672]                       has_future <- base::requireNamespace("future", 
[17:47:18.672]                         quietly = TRUE)
[17:47:18.672]                       if (has_future) {
[17:47:18.672]                         ns <- base::getNamespace("future")
[17:47:18.672]                         version <- ns[[".package"]][["version"]]
[17:47:18.672]                         if (is.null(version)) 
[17:47:18.672]                           version <- utils::packageVersion("future")
[17:47:18.672]                       }
[17:47:18.672]                       else {
[17:47:18.672]                         version <- NULL
[17:47:18.672]                       }
[17:47:18.672]                       if (!has_future || version < "1.8.0") {
[17:47:18.672]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.672]                           "", base::R.version$version.string), 
[17:47:18.672]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.672]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.672]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.672]                             "release", "version")], collapse = " "), 
[17:47:18.672]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.672]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.672]                           info)
[17:47:18.672]                         info <- base::paste(info, collapse = "; ")
[17:47:18.672]                         if (!has_future) {
[17:47:18.672]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.672]                             info)
[17:47:18.672]                         }
[17:47:18.672]                         else {
[17:47:18.672]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.672]                             info, version)
[17:47:18.672]                         }
[17:47:18.672]                         base::stop(msg)
[17:47:18.672]                       }
[17:47:18.672]                     })
[17:47:18.672]                   }
[17:47:18.672]                   ...future.strategy.old <- future::plan("list")
[17:47:18.672]                   options(future.plan = NULL)
[17:47:18.672]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.672]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.672]                 }
[17:47:18.672]                 ...future.workdir <- getwd()
[17:47:18.672]             }
[17:47:18.672]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.672]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.672]         }
[17:47:18.672]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.672]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.672]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.672]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.672]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.672]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.672]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.672]             base::names(...future.oldOptions))
[17:47:18.672]     }
[17:47:18.672]     if (FALSE) {
[17:47:18.672]     }
[17:47:18.672]     else {
[17:47:18.672]         if (TRUE) {
[17:47:18.672]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.672]                 open = "w")
[17:47:18.672]         }
[17:47:18.672]         else {
[17:47:18.672]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.672]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.672]         }
[17:47:18.672]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.672]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.672]             base::sink(type = "output", split = FALSE)
[17:47:18.672]             base::close(...future.stdout)
[17:47:18.672]         }, add = TRUE)
[17:47:18.672]     }
[17:47:18.672]     ...future.frame <- base::sys.nframe()
[17:47:18.672]     ...future.conditions <- base::list()
[17:47:18.672]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.672]     if (FALSE) {
[17:47:18.672]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.672]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.672]     }
[17:47:18.672]     ...future.result <- base::tryCatch({
[17:47:18.672]         base::withCallingHandlers({
[17:47:18.672]             ...future.value <- base::withVisible(base::local({
[17:47:18.672]                 ii
[17:47:18.672]             }))
[17:47:18.672]             future::FutureResult(value = ...future.value$value, 
[17:47:18.672]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.672]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.672]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.672]                     ...future.globalenv.names))
[17:47:18.672]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.672]         }, condition = base::local({
[17:47:18.672]             c <- base::c
[17:47:18.672]             inherits <- base::inherits
[17:47:18.672]             invokeRestart <- base::invokeRestart
[17:47:18.672]             length <- base::length
[17:47:18.672]             list <- base::list
[17:47:18.672]             seq.int <- base::seq.int
[17:47:18.672]             signalCondition <- base::signalCondition
[17:47:18.672]             sys.calls <- base::sys.calls
[17:47:18.672]             `[[` <- base::`[[`
[17:47:18.672]             `+` <- base::`+`
[17:47:18.672]             `<<-` <- base::`<<-`
[17:47:18.672]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.672]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.672]                   3L)]
[17:47:18.672]             }
[17:47:18.672]             function(cond) {
[17:47:18.672]                 is_error <- inherits(cond, "error")
[17:47:18.672]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.672]                   NULL)
[17:47:18.672]                 if (is_error) {
[17:47:18.672]                   sessionInformation <- function() {
[17:47:18.672]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.672]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.672]                       search = base::search(), system = base::Sys.info())
[17:47:18.672]                   }
[17:47:18.672]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.672]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.672]                     cond$call), session = sessionInformation(), 
[17:47:18.672]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.672]                   signalCondition(cond)
[17:47:18.672]                 }
[17:47:18.672]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.672]                 "immediateCondition"))) {
[17:47:18.672]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.672]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.672]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.672]                   if (TRUE && !signal) {
[17:47:18.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.672]                     {
[17:47:18.672]                       inherits <- base::inherits
[17:47:18.672]                       invokeRestart <- base::invokeRestart
[17:47:18.672]                       is.null <- base::is.null
[17:47:18.672]                       muffled <- FALSE
[17:47:18.672]                       if (inherits(cond, "message")) {
[17:47:18.672]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.672]                         if (muffled) 
[17:47:18.672]                           invokeRestart("muffleMessage")
[17:47:18.672]                       }
[17:47:18.672]                       else if (inherits(cond, "warning")) {
[17:47:18.672]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.672]                         if (muffled) 
[17:47:18.672]                           invokeRestart("muffleWarning")
[17:47:18.672]                       }
[17:47:18.672]                       else if (inherits(cond, "condition")) {
[17:47:18.672]                         if (!is.null(pattern)) {
[17:47:18.672]                           computeRestarts <- base::computeRestarts
[17:47:18.672]                           grepl <- base::grepl
[17:47:18.672]                           restarts <- computeRestarts(cond)
[17:47:18.672]                           for (restart in restarts) {
[17:47:18.672]                             name <- restart$name
[17:47:18.672]                             if (is.null(name)) 
[17:47:18.672]                               next
[17:47:18.672]                             if (!grepl(pattern, name)) 
[17:47:18.672]                               next
[17:47:18.672]                             invokeRestart(restart)
[17:47:18.672]                             muffled <- TRUE
[17:47:18.672]                             break
[17:47:18.672]                           }
[17:47:18.672]                         }
[17:47:18.672]                       }
[17:47:18.672]                       invisible(muffled)
[17:47:18.672]                     }
[17:47:18.672]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.672]                   }
[17:47:18.672]                 }
[17:47:18.672]                 else {
[17:47:18.672]                   if (TRUE) {
[17:47:18.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.672]                     {
[17:47:18.672]                       inherits <- base::inherits
[17:47:18.672]                       invokeRestart <- base::invokeRestart
[17:47:18.672]                       is.null <- base::is.null
[17:47:18.672]                       muffled <- FALSE
[17:47:18.672]                       if (inherits(cond, "message")) {
[17:47:18.672]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.672]                         if (muffled) 
[17:47:18.672]                           invokeRestart("muffleMessage")
[17:47:18.672]                       }
[17:47:18.672]                       else if (inherits(cond, "warning")) {
[17:47:18.672]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.672]                         if (muffled) 
[17:47:18.672]                           invokeRestart("muffleWarning")
[17:47:18.672]                       }
[17:47:18.672]                       else if (inherits(cond, "condition")) {
[17:47:18.672]                         if (!is.null(pattern)) {
[17:47:18.672]                           computeRestarts <- base::computeRestarts
[17:47:18.672]                           grepl <- base::grepl
[17:47:18.672]                           restarts <- computeRestarts(cond)
[17:47:18.672]                           for (restart in restarts) {
[17:47:18.672]                             name <- restart$name
[17:47:18.672]                             if (is.null(name)) 
[17:47:18.672]                               next
[17:47:18.672]                             if (!grepl(pattern, name)) 
[17:47:18.672]                               next
[17:47:18.672]                             invokeRestart(restart)
[17:47:18.672]                             muffled <- TRUE
[17:47:18.672]                             break
[17:47:18.672]                           }
[17:47:18.672]                         }
[17:47:18.672]                       }
[17:47:18.672]                       invisible(muffled)
[17:47:18.672]                     }
[17:47:18.672]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.672]                   }
[17:47:18.672]                 }
[17:47:18.672]             }
[17:47:18.672]         }))
[17:47:18.672]     }, error = function(ex) {
[17:47:18.672]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.672]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.672]                 ...future.rng), started = ...future.startTime, 
[17:47:18.672]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.672]             version = "1.8"), class = "FutureResult")
[17:47:18.672]     }, finally = {
[17:47:18.672]         if (!identical(...future.workdir, getwd())) 
[17:47:18.672]             setwd(...future.workdir)
[17:47:18.672]         {
[17:47:18.672]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.672]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.672]             }
[17:47:18.672]             base::options(...future.oldOptions)
[17:47:18.672]             if (.Platform$OS.type == "windows") {
[17:47:18.672]                 old_names <- names(...future.oldEnvVars)
[17:47:18.672]                 envs <- base::Sys.getenv()
[17:47:18.672]                 names <- names(envs)
[17:47:18.672]                 common <- intersect(names, old_names)
[17:47:18.672]                 added <- setdiff(names, old_names)
[17:47:18.672]                 removed <- setdiff(old_names, names)
[17:47:18.672]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.672]                   envs[common]]
[17:47:18.672]                 NAMES <- toupper(changed)
[17:47:18.672]                 args <- list()
[17:47:18.672]                 for (kk in seq_along(NAMES)) {
[17:47:18.672]                   name <- changed[[kk]]
[17:47:18.672]                   NAME <- NAMES[[kk]]
[17:47:18.672]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.672]                     next
[17:47:18.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.672]                 }
[17:47:18.672]                 NAMES <- toupper(added)
[17:47:18.672]                 for (kk in seq_along(NAMES)) {
[17:47:18.672]                   name <- added[[kk]]
[17:47:18.672]                   NAME <- NAMES[[kk]]
[17:47:18.672]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.672]                     next
[17:47:18.672]                   args[[name]] <- ""
[17:47:18.672]                 }
[17:47:18.672]                 NAMES <- toupper(removed)
[17:47:18.672]                 for (kk in seq_along(NAMES)) {
[17:47:18.672]                   name <- removed[[kk]]
[17:47:18.672]                   NAME <- NAMES[[kk]]
[17:47:18.672]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.672]                     next
[17:47:18.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.672]                 }
[17:47:18.672]                 if (length(args) > 0) 
[17:47:18.672]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.672]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.672]             }
[17:47:18.672]             else {
[17:47:18.672]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.672]             }
[17:47:18.672]             {
[17:47:18.672]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.672]                   0L) {
[17:47:18.672]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.672]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.672]                   base::options(opts)
[17:47:18.672]                 }
[17:47:18.672]                 {
[17:47:18.672]                   {
[17:47:18.672]                     NULL
[17:47:18.672]                     RNGkind("Mersenne-Twister")
[17:47:18.672]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.672]                       inherits = FALSE)
[17:47:18.672]                   }
[17:47:18.672]                   options(future.plan = NULL)
[17:47:18.672]                   if (is.na(NA_character_)) 
[17:47:18.672]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.672]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.672]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.672]                     .init = FALSE)
[17:47:18.672]                 }
[17:47:18.672]             }
[17:47:18.672]         }
[17:47:18.672]     })
[17:47:18.672]     if (TRUE) {
[17:47:18.672]         base::sink(type = "output", split = FALSE)
[17:47:18.672]         if (TRUE) {
[17:47:18.672]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.672]         }
[17:47:18.672]         else {
[17:47:18.672]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.672]         }
[17:47:18.672]         base::close(...future.stdout)
[17:47:18.672]         ...future.stdout <- NULL
[17:47:18.672]     }
[17:47:18.672]     ...future.result$conditions <- ...future.conditions
[17:47:18.672]     ...future.result$finished <- base::Sys.time()
[17:47:18.672]     ...future.result
[17:47:18.672] }
[17:47:18.673] plan(): Setting new future strategy stack:
[17:47:18.674] List of future strategies:
[17:47:18.674] 1. sequential:
[17:47:18.674]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.674]    - tweaked: FALSE
[17:47:18.674]    - call: NULL
[17:47:18.674] plan(): nbrOfWorkers() = 1
[17:47:18.675] plan(): Setting new future strategy stack:
[17:47:18.675] List of future strategies:
[17:47:18.675] 1. multicore:
[17:47:18.675]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.675]    - tweaked: FALSE
[17:47:18.675]    - call: plan(multicore)
[17:47:18.678] plan(): nbrOfWorkers() = 1
[17:47:18.678] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = FALSE) and errors
[17:47:18.682] getGlobalsAndPackages() ...
[17:47:18.682] Not searching for globals
[17:47:18.683] - globals: [0] <none>
[17:47:18.683] getGlobalsAndPackages() ... DONE
[17:47:18.683] Packages needed by the future expression (n = 0): <none>
[17:47:18.683] Packages needed by future strategies (n = 0): <none>
[17:47:18.684] {
[17:47:18.684]     {
[17:47:18.684]         {
[17:47:18.684]             ...future.startTime <- base::Sys.time()
[17:47:18.684]             {
[17:47:18.684]                 {
[17:47:18.684]                   {
[17:47:18.684]                     base::local({
[17:47:18.684]                       has_future <- base::requireNamespace("future", 
[17:47:18.684]                         quietly = TRUE)
[17:47:18.684]                       if (has_future) {
[17:47:18.684]                         ns <- base::getNamespace("future")
[17:47:18.684]                         version <- ns[[".package"]][["version"]]
[17:47:18.684]                         if (is.null(version)) 
[17:47:18.684]                           version <- utils::packageVersion("future")
[17:47:18.684]                       }
[17:47:18.684]                       else {
[17:47:18.684]                         version <- NULL
[17:47:18.684]                       }
[17:47:18.684]                       if (!has_future || version < "1.8.0") {
[17:47:18.684]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.684]                           "", base::R.version$version.string), 
[17:47:18.684]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.684]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.684]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.684]                             "release", "version")], collapse = " "), 
[17:47:18.684]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.684]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.684]                           info)
[17:47:18.684]                         info <- base::paste(info, collapse = "; ")
[17:47:18.684]                         if (!has_future) {
[17:47:18.684]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.684]                             info)
[17:47:18.684]                         }
[17:47:18.684]                         else {
[17:47:18.684]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.684]                             info, version)
[17:47:18.684]                         }
[17:47:18.684]                         base::stop(msg)
[17:47:18.684]                       }
[17:47:18.684]                     })
[17:47:18.684]                   }
[17:47:18.684]                   ...future.strategy.old <- future::plan("list")
[17:47:18.684]                   options(future.plan = NULL)
[17:47:18.684]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.684]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.684]                 }
[17:47:18.684]                 ...future.workdir <- getwd()
[17:47:18.684]             }
[17:47:18.684]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.684]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.684]         }
[17:47:18.684]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.684]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.684]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.684]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.684]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.684]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.684]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.684]             base::names(...future.oldOptions))
[17:47:18.684]     }
[17:47:18.684]     if (FALSE) {
[17:47:18.684]     }
[17:47:18.684]     else {
[17:47:18.684]         if (TRUE) {
[17:47:18.684]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.684]                 open = "w")
[17:47:18.684]         }
[17:47:18.684]         else {
[17:47:18.684]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.684]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.684]         }
[17:47:18.684]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.684]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.684]             base::sink(type = "output", split = FALSE)
[17:47:18.684]             base::close(...future.stdout)
[17:47:18.684]         }, add = TRUE)
[17:47:18.684]     }
[17:47:18.684]     ...future.frame <- base::sys.nframe()
[17:47:18.684]     ...future.conditions <- base::list()
[17:47:18.684]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.684]     if (FALSE) {
[17:47:18.684]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.684]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.684]     }
[17:47:18.684]     ...future.result <- base::tryCatch({
[17:47:18.684]         base::withCallingHandlers({
[17:47:18.684]             ...future.value <- base::withVisible(base::local({
[17:47:18.684]                 stop("Whoops!")
[17:47:18.684]                 1
[17:47:18.684]             }))
[17:47:18.684]             future::FutureResult(value = ...future.value$value, 
[17:47:18.684]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.684]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.684]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.684]                     ...future.globalenv.names))
[17:47:18.684]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.684]         }, condition = base::local({
[17:47:18.684]             c <- base::c
[17:47:18.684]             inherits <- base::inherits
[17:47:18.684]             invokeRestart <- base::invokeRestart
[17:47:18.684]             length <- base::length
[17:47:18.684]             list <- base::list
[17:47:18.684]             seq.int <- base::seq.int
[17:47:18.684]             signalCondition <- base::signalCondition
[17:47:18.684]             sys.calls <- base::sys.calls
[17:47:18.684]             `[[` <- base::`[[`
[17:47:18.684]             `+` <- base::`+`
[17:47:18.684]             `<<-` <- base::`<<-`
[17:47:18.684]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.684]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.684]                   3L)]
[17:47:18.684]             }
[17:47:18.684]             function(cond) {
[17:47:18.684]                 is_error <- inherits(cond, "error")
[17:47:18.684]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.684]                   NULL)
[17:47:18.684]                 if (is_error) {
[17:47:18.684]                   sessionInformation <- function() {
[17:47:18.684]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.684]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.684]                       search = base::search(), system = base::Sys.info())
[17:47:18.684]                   }
[17:47:18.684]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.684]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.684]                     cond$call), session = sessionInformation(), 
[17:47:18.684]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.684]                   signalCondition(cond)
[17:47:18.684]                 }
[17:47:18.684]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.684]                 "immediateCondition"))) {
[17:47:18.684]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.684]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.684]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.684]                   if (TRUE && !signal) {
[17:47:18.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.684]                     {
[17:47:18.684]                       inherits <- base::inherits
[17:47:18.684]                       invokeRestart <- base::invokeRestart
[17:47:18.684]                       is.null <- base::is.null
[17:47:18.684]                       muffled <- FALSE
[17:47:18.684]                       if (inherits(cond, "message")) {
[17:47:18.684]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.684]                         if (muffled) 
[17:47:18.684]                           invokeRestart("muffleMessage")
[17:47:18.684]                       }
[17:47:18.684]                       else if (inherits(cond, "warning")) {
[17:47:18.684]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.684]                         if (muffled) 
[17:47:18.684]                           invokeRestart("muffleWarning")
[17:47:18.684]                       }
[17:47:18.684]                       else if (inherits(cond, "condition")) {
[17:47:18.684]                         if (!is.null(pattern)) {
[17:47:18.684]                           computeRestarts <- base::computeRestarts
[17:47:18.684]                           grepl <- base::grepl
[17:47:18.684]                           restarts <- computeRestarts(cond)
[17:47:18.684]                           for (restart in restarts) {
[17:47:18.684]                             name <- restart$name
[17:47:18.684]                             if (is.null(name)) 
[17:47:18.684]                               next
[17:47:18.684]                             if (!grepl(pattern, name)) 
[17:47:18.684]                               next
[17:47:18.684]                             invokeRestart(restart)
[17:47:18.684]                             muffled <- TRUE
[17:47:18.684]                             break
[17:47:18.684]                           }
[17:47:18.684]                         }
[17:47:18.684]                       }
[17:47:18.684]                       invisible(muffled)
[17:47:18.684]                     }
[17:47:18.684]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.684]                   }
[17:47:18.684]                 }
[17:47:18.684]                 else {
[17:47:18.684]                   if (TRUE) {
[17:47:18.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.684]                     {
[17:47:18.684]                       inherits <- base::inherits
[17:47:18.684]                       invokeRestart <- base::invokeRestart
[17:47:18.684]                       is.null <- base::is.null
[17:47:18.684]                       muffled <- FALSE
[17:47:18.684]                       if (inherits(cond, "message")) {
[17:47:18.684]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.684]                         if (muffled) 
[17:47:18.684]                           invokeRestart("muffleMessage")
[17:47:18.684]                       }
[17:47:18.684]                       else if (inherits(cond, "warning")) {
[17:47:18.684]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.684]                         if (muffled) 
[17:47:18.684]                           invokeRestart("muffleWarning")
[17:47:18.684]                       }
[17:47:18.684]                       else if (inherits(cond, "condition")) {
[17:47:18.684]                         if (!is.null(pattern)) {
[17:47:18.684]                           computeRestarts <- base::computeRestarts
[17:47:18.684]                           grepl <- base::grepl
[17:47:18.684]                           restarts <- computeRestarts(cond)
[17:47:18.684]                           for (restart in restarts) {
[17:47:18.684]                             name <- restart$name
[17:47:18.684]                             if (is.null(name)) 
[17:47:18.684]                               next
[17:47:18.684]                             if (!grepl(pattern, name)) 
[17:47:18.684]                               next
[17:47:18.684]                             invokeRestart(restart)
[17:47:18.684]                             muffled <- TRUE
[17:47:18.684]                             break
[17:47:18.684]                           }
[17:47:18.684]                         }
[17:47:18.684]                       }
[17:47:18.684]                       invisible(muffled)
[17:47:18.684]                     }
[17:47:18.684]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.684]                   }
[17:47:18.684]                 }
[17:47:18.684]             }
[17:47:18.684]         }))
[17:47:18.684]     }, error = function(ex) {
[17:47:18.684]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.684]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.684]                 ...future.rng), started = ...future.startTime, 
[17:47:18.684]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.684]             version = "1.8"), class = "FutureResult")
[17:47:18.684]     }, finally = {
[17:47:18.684]         if (!identical(...future.workdir, getwd())) 
[17:47:18.684]             setwd(...future.workdir)
[17:47:18.684]         {
[17:47:18.684]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.684]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.684]             }
[17:47:18.684]             base::options(...future.oldOptions)
[17:47:18.684]             if (.Platform$OS.type == "windows") {
[17:47:18.684]                 old_names <- names(...future.oldEnvVars)
[17:47:18.684]                 envs <- base::Sys.getenv()
[17:47:18.684]                 names <- names(envs)
[17:47:18.684]                 common <- intersect(names, old_names)
[17:47:18.684]                 added <- setdiff(names, old_names)
[17:47:18.684]                 removed <- setdiff(old_names, names)
[17:47:18.684]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.684]                   envs[common]]
[17:47:18.684]                 NAMES <- toupper(changed)
[17:47:18.684]                 args <- list()
[17:47:18.684]                 for (kk in seq_along(NAMES)) {
[17:47:18.684]                   name <- changed[[kk]]
[17:47:18.684]                   NAME <- NAMES[[kk]]
[17:47:18.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.684]                     next
[17:47:18.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.684]                 }
[17:47:18.684]                 NAMES <- toupper(added)
[17:47:18.684]                 for (kk in seq_along(NAMES)) {
[17:47:18.684]                   name <- added[[kk]]
[17:47:18.684]                   NAME <- NAMES[[kk]]
[17:47:18.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.684]                     next
[17:47:18.684]                   args[[name]] <- ""
[17:47:18.684]                 }
[17:47:18.684]                 NAMES <- toupper(removed)
[17:47:18.684]                 for (kk in seq_along(NAMES)) {
[17:47:18.684]                   name <- removed[[kk]]
[17:47:18.684]                   NAME <- NAMES[[kk]]
[17:47:18.684]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.684]                     next
[17:47:18.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.684]                 }
[17:47:18.684]                 if (length(args) > 0) 
[17:47:18.684]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.684]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.684]             }
[17:47:18.684]             else {
[17:47:18.684]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.684]             }
[17:47:18.684]             {
[17:47:18.684]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.684]                   0L) {
[17:47:18.684]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.684]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.684]                   base::options(opts)
[17:47:18.684]                 }
[17:47:18.684]                 {
[17:47:18.684]                   {
[17:47:18.684]                     NULL
[17:47:18.684]                     RNGkind("Mersenne-Twister")
[17:47:18.684]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.684]                       inherits = FALSE)
[17:47:18.684]                   }
[17:47:18.684]                   options(future.plan = NULL)
[17:47:18.684]                   if (is.na(NA_character_)) 
[17:47:18.684]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.684]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.684]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.684]                     .init = FALSE)
[17:47:18.684]                 }
[17:47:18.684]             }
[17:47:18.684]         }
[17:47:18.684]     })
[17:47:18.684]     if (TRUE) {
[17:47:18.684]         base::sink(type = "output", split = FALSE)
[17:47:18.684]         if (TRUE) {
[17:47:18.684]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.684]         }
[17:47:18.684]         else {
[17:47:18.684]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.684]         }
[17:47:18.684]         base::close(...future.stdout)
[17:47:18.684]         ...future.stdout <- NULL
[17:47:18.684]     }
[17:47:18.684]     ...future.result$conditions <- ...future.conditions
[17:47:18.684]     ...future.result$finished <- base::Sys.time()
[17:47:18.684]     ...future.result
[17:47:18.684] }
[17:47:18.685] plan(): Setting new future strategy stack:
[17:47:18.685] List of future strategies:
[17:47:18.685] 1. sequential:
[17:47:18.685]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.685]    - tweaked: FALSE
[17:47:18.685]    - call: NULL
[17:47:18.686] plan(): nbrOfWorkers() = 1
[17:47:18.687] plan(): Setting new future strategy stack:
[17:47:18.687] List of future strategies:
[17:47:18.687] 1. multicore:
[17:47:18.687]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.687]    - tweaked: FALSE
[17:47:18.687]    - call: plan(multicore)
[17:47:18.690] plan(): nbrOfWorkers() = 1
[17:47:18.690] SequentialFuture started (and completed)
[17:47:18.690] signalConditions() ...
[17:47:18.690]  - include = ‘immediateCondition’
[17:47:18.691]  - exclude = 
[17:47:18.691]  - resignal = FALSE
[17:47:18.691]  - Number of conditions: 1
[17:47:18.691] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:18.691] signalConditions() ...
[17:47:18.692]  - include = ‘immediateCondition’
[17:47:18.692]  - exclude = 
[17:47:18.692]  - resignal = FALSE
[17:47:18.692]  - Number of conditions: 1
[17:47:18.692] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:18.692] signalConditions() ...
[17:47:18.692]  - include = ‘immediateCondition’
[17:47:18.692]  - exclude = 
[17:47:18.693]  - resignal = FALSE
[17:47:18.693]  - Number of conditions: 1
[17:47:18.693] signalConditions() ... done
[17:47:18.693] Future state: ‘finished’
[17:47:18.693] signalConditions() ...
[17:47:18.693]  - include = ‘condition’
[17:47:18.693]  - exclude = ‘immediateCondition’
[17:47:18.693]  - resignal = TRUE
[17:47:18.693]  - Number of conditions: 1
[17:47:18.693]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:18.693] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:18.694] signalConditions() ...
[17:47:18.694]  - include = ‘immediateCondition’
[17:47:18.694]  - exclude = 
[17:47:18.694]  - resignal = FALSE
[17:47:18.694]  - Number of conditions: 1
[17:47:18.694] signalConditions() ... done
[17:47:18.694] Future state: ‘finished’
[17:47:18.695] signalConditions() ...
[17:47:18.695]  - include = ‘condition’
[17:47:18.695]  - exclude = ‘immediateCondition’
[17:47:18.695]  - resignal = TRUE
[17:47:18.695]  - Number of conditions: 1
[17:47:18.695]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:18.695] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:18.698] getGlobalsAndPackages() ...
[17:47:18.698] Searching for globals...
[17:47:18.705] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:47:18.705] Searching for globals ... DONE
[17:47:18.705] Resolving globals: FALSE
[17:47:18.706] 
[17:47:18.706] 
[17:47:18.706] getGlobalsAndPackages() ... DONE
[17:47:18.706] Packages needed by the future expression (n = 0): <none>
[17:47:18.707] Packages needed by future strategies (n = 0): <none>
[17:47:18.707] {
[17:47:18.707]     {
[17:47:18.707]         {
[17:47:18.707]             ...future.startTime <- base::Sys.time()
[17:47:18.707]             {
[17:47:18.707]                 {
[17:47:18.707]                   {
[17:47:18.707]                     base::local({
[17:47:18.707]                       has_future <- base::requireNamespace("future", 
[17:47:18.707]                         quietly = TRUE)
[17:47:18.707]                       if (has_future) {
[17:47:18.707]                         ns <- base::getNamespace("future")
[17:47:18.707]                         version <- ns[[".package"]][["version"]]
[17:47:18.707]                         if (is.null(version)) 
[17:47:18.707]                           version <- utils::packageVersion("future")
[17:47:18.707]                       }
[17:47:18.707]                       else {
[17:47:18.707]                         version <- NULL
[17:47:18.707]                       }
[17:47:18.707]                       if (!has_future || version < "1.8.0") {
[17:47:18.707]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.707]                           "", base::R.version$version.string), 
[17:47:18.707]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.707]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.707]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.707]                             "release", "version")], collapse = " "), 
[17:47:18.707]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.707]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.707]                           info)
[17:47:18.707]                         info <- base::paste(info, collapse = "; ")
[17:47:18.707]                         if (!has_future) {
[17:47:18.707]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.707]                             info)
[17:47:18.707]                         }
[17:47:18.707]                         else {
[17:47:18.707]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.707]                             info, version)
[17:47:18.707]                         }
[17:47:18.707]                         base::stop(msg)
[17:47:18.707]                       }
[17:47:18.707]                     })
[17:47:18.707]                   }
[17:47:18.707]                   ...future.strategy.old <- future::plan("list")
[17:47:18.707]                   options(future.plan = NULL)
[17:47:18.707]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.707]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.707]                 }
[17:47:18.707]                 ...future.workdir <- getwd()
[17:47:18.707]             }
[17:47:18.707]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.707]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.707]         }
[17:47:18.707]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.707]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.707]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.707]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.707]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.707]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.707]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.707]             base::names(...future.oldOptions))
[17:47:18.707]     }
[17:47:18.707]     if (FALSE) {
[17:47:18.707]     }
[17:47:18.707]     else {
[17:47:18.707]         if (TRUE) {
[17:47:18.707]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.707]                 open = "w")
[17:47:18.707]         }
[17:47:18.707]         else {
[17:47:18.707]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.707]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.707]         }
[17:47:18.707]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.707]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.707]             base::sink(type = "output", split = FALSE)
[17:47:18.707]             base::close(...future.stdout)
[17:47:18.707]         }, add = TRUE)
[17:47:18.707]     }
[17:47:18.707]     ...future.frame <- base::sys.nframe()
[17:47:18.707]     ...future.conditions <- base::list()
[17:47:18.707]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.707]     if (FALSE) {
[17:47:18.707]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.707]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.707]     }
[17:47:18.707]     ...future.result <- base::tryCatch({
[17:47:18.707]         base::withCallingHandlers({
[17:47:18.707]             ...future.value <- base::withVisible(base::local({
[17:47:18.707]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:47:18.707]                   "error", "condition")))
[17:47:18.707]             }))
[17:47:18.707]             future::FutureResult(value = ...future.value$value, 
[17:47:18.707]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.707]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.707]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.707]                     ...future.globalenv.names))
[17:47:18.707]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.707]         }, condition = base::local({
[17:47:18.707]             c <- base::c
[17:47:18.707]             inherits <- base::inherits
[17:47:18.707]             invokeRestart <- base::invokeRestart
[17:47:18.707]             length <- base::length
[17:47:18.707]             list <- base::list
[17:47:18.707]             seq.int <- base::seq.int
[17:47:18.707]             signalCondition <- base::signalCondition
[17:47:18.707]             sys.calls <- base::sys.calls
[17:47:18.707]             `[[` <- base::`[[`
[17:47:18.707]             `+` <- base::`+`
[17:47:18.707]             `<<-` <- base::`<<-`
[17:47:18.707]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.707]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.707]                   3L)]
[17:47:18.707]             }
[17:47:18.707]             function(cond) {
[17:47:18.707]                 is_error <- inherits(cond, "error")
[17:47:18.707]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.707]                   NULL)
[17:47:18.707]                 if (is_error) {
[17:47:18.707]                   sessionInformation <- function() {
[17:47:18.707]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.707]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.707]                       search = base::search(), system = base::Sys.info())
[17:47:18.707]                   }
[17:47:18.707]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.707]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.707]                     cond$call), session = sessionInformation(), 
[17:47:18.707]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.707]                   signalCondition(cond)
[17:47:18.707]                 }
[17:47:18.707]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.707]                 "immediateCondition"))) {
[17:47:18.707]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.707]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.707]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.707]                   if (TRUE && !signal) {
[17:47:18.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.707]                     {
[17:47:18.707]                       inherits <- base::inherits
[17:47:18.707]                       invokeRestart <- base::invokeRestart
[17:47:18.707]                       is.null <- base::is.null
[17:47:18.707]                       muffled <- FALSE
[17:47:18.707]                       if (inherits(cond, "message")) {
[17:47:18.707]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.707]                         if (muffled) 
[17:47:18.707]                           invokeRestart("muffleMessage")
[17:47:18.707]                       }
[17:47:18.707]                       else if (inherits(cond, "warning")) {
[17:47:18.707]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.707]                         if (muffled) 
[17:47:18.707]                           invokeRestart("muffleWarning")
[17:47:18.707]                       }
[17:47:18.707]                       else if (inherits(cond, "condition")) {
[17:47:18.707]                         if (!is.null(pattern)) {
[17:47:18.707]                           computeRestarts <- base::computeRestarts
[17:47:18.707]                           grepl <- base::grepl
[17:47:18.707]                           restarts <- computeRestarts(cond)
[17:47:18.707]                           for (restart in restarts) {
[17:47:18.707]                             name <- restart$name
[17:47:18.707]                             if (is.null(name)) 
[17:47:18.707]                               next
[17:47:18.707]                             if (!grepl(pattern, name)) 
[17:47:18.707]                               next
[17:47:18.707]                             invokeRestart(restart)
[17:47:18.707]                             muffled <- TRUE
[17:47:18.707]                             break
[17:47:18.707]                           }
[17:47:18.707]                         }
[17:47:18.707]                       }
[17:47:18.707]                       invisible(muffled)
[17:47:18.707]                     }
[17:47:18.707]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.707]                   }
[17:47:18.707]                 }
[17:47:18.707]                 else {
[17:47:18.707]                   if (TRUE) {
[17:47:18.707]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.707]                     {
[17:47:18.707]                       inherits <- base::inherits
[17:47:18.707]                       invokeRestart <- base::invokeRestart
[17:47:18.707]                       is.null <- base::is.null
[17:47:18.707]                       muffled <- FALSE
[17:47:18.707]                       if (inherits(cond, "message")) {
[17:47:18.707]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.707]                         if (muffled) 
[17:47:18.707]                           invokeRestart("muffleMessage")
[17:47:18.707]                       }
[17:47:18.707]                       else if (inherits(cond, "warning")) {
[17:47:18.707]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.707]                         if (muffled) 
[17:47:18.707]                           invokeRestart("muffleWarning")
[17:47:18.707]                       }
[17:47:18.707]                       else if (inherits(cond, "condition")) {
[17:47:18.707]                         if (!is.null(pattern)) {
[17:47:18.707]                           computeRestarts <- base::computeRestarts
[17:47:18.707]                           grepl <- base::grepl
[17:47:18.707]                           restarts <- computeRestarts(cond)
[17:47:18.707]                           for (restart in restarts) {
[17:47:18.707]                             name <- restart$name
[17:47:18.707]                             if (is.null(name)) 
[17:47:18.707]                               next
[17:47:18.707]                             if (!grepl(pattern, name)) 
[17:47:18.707]                               next
[17:47:18.707]                             invokeRestart(restart)
[17:47:18.707]                             muffled <- TRUE
[17:47:18.707]                             break
[17:47:18.707]                           }
[17:47:18.707]                         }
[17:47:18.707]                       }
[17:47:18.707]                       invisible(muffled)
[17:47:18.707]                     }
[17:47:18.707]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.707]                   }
[17:47:18.707]                 }
[17:47:18.707]             }
[17:47:18.707]         }))
[17:47:18.707]     }, error = function(ex) {
[17:47:18.707]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.707]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.707]                 ...future.rng), started = ...future.startTime, 
[17:47:18.707]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.707]             version = "1.8"), class = "FutureResult")
[17:47:18.707]     }, finally = {
[17:47:18.707]         if (!identical(...future.workdir, getwd())) 
[17:47:18.707]             setwd(...future.workdir)
[17:47:18.707]         {
[17:47:18.707]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.707]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.707]             }
[17:47:18.707]             base::options(...future.oldOptions)
[17:47:18.707]             if (.Platform$OS.type == "windows") {
[17:47:18.707]                 old_names <- names(...future.oldEnvVars)
[17:47:18.707]                 envs <- base::Sys.getenv()
[17:47:18.707]                 names <- names(envs)
[17:47:18.707]                 common <- intersect(names, old_names)
[17:47:18.707]                 added <- setdiff(names, old_names)
[17:47:18.707]                 removed <- setdiff(old_names, names)
[17:47:18.707]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.707]                   envs[common]]
[17:47:18.707]                 NAMES <- toupper(changed)
[17:47:18.707]                 args <- list()
[17:47:18.707]                 for (kk in seq_along(NAMES)) {
[17:47:18.707]                   name <- changed[[kk]]
[17:47:18.707]                   NAME <- NAMES[[kk]]
[17:47:18.707]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.707]                     next
[17:47:18.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.707]                 }
[17:47:18.707]                 NAMES <- toupper(added)
[17:47:18.707]                 for (kk in seq_along(NAMES)) {
[17:47:18.707]                   name <- added[[kk]]
[17:47:18.707]                   NAME <- NAMES[[kk]]
[17:47:18.707]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.707]                     next
[17:47:18.707]                   args[[name]] <- ""
[17:47:18.707]                 }
[17:47:18.707]                 NAMES <- toupper(removed)
[17:47:18.707]                 for (kk in seq_along(NAMES)) {
[17:47:18.707]                   name <- removed[[kk]]
[17:47:18.707]                   NAME <- NAMES[[kk]]
[17:47:18.707]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.707]                     next
[17:47:18.707]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.707]                 }
[17:47:18.707]                 if (length(args) > 0) 
[17:47:18.707]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.707]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.707]             }
[17:47:18.707]             else {
[17:47:18.707]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.707]             }
[17:47:18.707]             {
[17:47:18.707]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.707]                   0L) {
[17:47:18.707]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.707]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.707]                   base::options(opts)
[17:47:18.707]                 }
[17:47:18.707]                 {
[17:47:18.707]                   {
[17:47:18.707]                     NULL
[17:47:18.707]                     RNGkind("Mersenne-Twister")
[17:47:18.707]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.707]                       inherits = FALSE)
[17:47:18.707]                   }
[17:47:18.707]                   options(future.plan = NULL)
[17:47:18.707]                   if (is.na(NA_character_)) 
[17:47:18.707]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.707]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.707]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.707]                     .init = FALSE)
[17:47:18.707]                 }
[17:47:18.707]             }
[17:47:18.707]         }
[17:47:18.707]     })
[17:47:18.707]     if (TRUE) {
[17:47:18.707]         base::sink(type = "output", split = FALSE)
[17:47:18.707]         if (TRUE) {
[17:47:18.707]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.707]         }
[17:47:18.707]         else {
[17:47:18.707]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.707]         }
[17:47:18.707]         base::close(...future.stdout)
[17:47:18.707]         ...future.stdout <- NULL
[17:47:18.707]     }
[17:47:18.707]     ...future.result$conditions <- ...future.conditions
[17:47:18.707]     ...future.result$finished <- base::Sys.time()
[17:47:18.707]     ...future.result
[17:47:18.707] }
[17:47:18.709] plan(): Setting new future strategy stack:
[17:47:18.709] List of future strategies:
[17:47:18.709] 1. sequential:
[17:47:18.709]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.709]    - tweaked: FALSE
[17:47:18.709]    - call: NULL
[17:47:18.709] plan(): nbrOfWorkers() = 1
[17:47:18.710] plan(): Setting new future strategy stack:
[17:47:18.713] List of future strategies:
[17:47:18.713] 1. multicore:
[17:47:18.713]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.713]    - tweaked: FALSE
[17:47:18.713]    - call: plan(multicore)
[17:47:18.716] plan(): nbrOfWorkers() = 1
[17:47:18.716] SequentialFuture started (and completed)
[17:47:18.717] signalConditions() ...
[17:47:18.717]  - include = ‘immediateCondition’
[17:47:18.717]  - exclude = 
[17:47:18.717]  - resignal = FALSE
[17:47:18.717]  - Number of conditions: 1
[17:47:18.717] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:18.718] signalConditions() ...
[17:47:18.718]  - include = ‘immediateCondition’
[17:47:18.718]  - exclude = 
[17:47:18.718]  - resignal = FALSE
[17:47:18.718]  - Number of conditions: 1
[17:47:18.718] signalConditions() ... done
<MyError: boom>
[17:47:18.718] signalConditions() ...
[17:47:18.718]  - include = ‘immediateCondition’
[17:47:18.718]  - exclude = 
[17:47:18.719]  - resignal = FALSE
[17:47:18.719]  - Number of conditions: 1
[17:47:18.719] signalConditions() ... done
[17:47:18.719] Future state: ‘finished’
[17:47:18.719] signalConditions() ...
[17:47:18.719]  - include = ‘condition’
[17:47:18.719]  - exclude = ‘immediateCondition’
[17:47:18.719]  - resignal = TRUE
[17:47:18.719]  - Number of conditions: 1
[17:47:18.719]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:47:18.719] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[17:47:18.723] getGlobalsAndPackages() ...
[17:47:18.723] Searching for globals...
[17:47:18.723] - globals found: [1] ‘{’
[17:47:18.724] Searching for globals ... DONE
[17:47:18.724] Resolving globals: FALSE
[17:47:18.724] 
[17:47:18.724] 
[17:47:18.724] getGlobalsAndPackages() ... DONE
[17:47:18.724] Packages needed by the future expression (n = 0): <none>
[17:47:18.725] Packages needed by future strategies (n = 0): <none>
[17:47:18.725] {
[17:47:18.725]     {
[17:47:18.725]         {
[17:47:18.725]             ...future.startTime <- base::Sys.time()
[17:47:18.725]             {
[17:47:18.725]                 {
[17:47:18.725]                   {
[17:47:18.725]                     base::local({
[17:47:18.725]                       has_future <- base::requireNamespace("future", 
[17:47:18.725]                         quietly = TRUE)
[17:47:18.725]                       if (has_future) {
[17:47:18.725]                         ns <- base::getNamespace("future")
[17:47:18.725]                         version <- ns[[".package"]][["version"]]
[17:47:18.725]                         if (is.null(version)) 
[17:47:18.725]                           version <- utils::packageVersion("future")
[17:47:18.725]                       }
[17:47:18.725]                       else {
[17:47:18.725]                         version <- NULL
[17:47:18.725]                       }
[17:47:18.725]                       if (!has_future || version < "1.8.0") {
[17:47:18.725]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.725]                           "", base::R.version$version.string), 
[17:47:18.725]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.725]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.725]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.725]                             "release", "version")], collapse = " "), 
[17:47:18.725]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.725]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.725]                           info)
[17:47:18.725]                         info <- base::paste(info, collapse = "; ")
[17:47:18.725]                         if (!has_future) {
[17:47:18.725]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.725]                             info)
[17:47:18.725]                         }
[17:47:18.725]                         else {
[17:47:18.725]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.725]                             info, version)
[17:47:18.725]                         }
[17:47:18.725]                         base::stop(msg)
[17:47:18.725]                       }
[17:47:18.725]                     })
[17:47:18.725]                   }
[17:47:18.725]                   ...future.strategy.old <- future::plan("list")
[17:47:18.725]                   options(future.plan = NULL)
[17:47:18.725]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.725]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.725]                 }
[17:47:18.725]                 ...future.workdir <- getwd()
[17:47:18.725]             }
[17:47:18.725]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.725]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.725]         }
[17:47:18.725]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.725]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.725]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.725]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.725]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.725]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.725]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.725]             base::names(...future.oldOptions))
[17:47:18.725]     }
[17:47:18.725]     if (FALSE) {
[17:47:18.725]     }
[17:47:18.725]     else {
[17:47:18.725]         if (TRUE) {
[17:47:18.725]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.725]                 open = "w")
[17:47:18.725]         }
[17:47:18.725]         else {
[17:47:18.725]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.725]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.725]         }
[17:47:18.725]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.725]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.725]             base::sink(type = "output", split = FALSE)
[17:47:18.725]             base::close(...future.stdout)
[17:47:18.725]         }, add = TRUE)
[17:47:18.725]     }
[17:47:18.725]     ...future.frame <- base::sys.nframe()
[17:47:18.725]     ...future.conditions <- base::list()
[17:47:18.725]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.725]     if (FALSE) {
[17:47:18.725]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.725]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.725]     }
[17:47:18.725]     ...future.result <- base::tryCatch({
[17:47:18.725]         base::withCallingHandlers({
[17:47:18.725]             ...future.value <- base::withVisible(base::local({
[17:47:18.725]                 42L
[17:47:18.725]             }))
[17:47:18.725]             future::FutureResult(value = ...future.value$value, 
[17:47:18.725]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.725]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.725]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.725]                     ...future.globalenv.names))
[17:47:18.725]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.725]         }, condition = base::local({
[17:47:18.725]             c <- base::c
[17:47:18.725]             inherits <- base::inherits
[17:47:18.725]             invokeRestart <- base::invokeRestart
[17:47:18.725]             length <- base::length
[17:47:18.725]             list <- base::list
[17:47:18.725]             seq.int <- base::seq.int
[17:47:18.725]             signalCondition <- base::signalCondition
[17:47:18.725]             sys.calls <- base::sys.calls
[17:47:18.725]             `[[` <- base::`[[`
[17:47:18.725]             `+` <- base::`+`
[17:47:18.725]             `<<-` <- base::`<<-`
[17:47:18.725]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.725]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.725]                   3L)]
[17:47:18.725]             }
[17:47:18.725]             function(cond) {
[17:47:18.725]                 is_error <- inherits(cond, "error")
[17:47:18.725]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.725]                   NULL)
[17:47:18.725]                 if (is_error) {
[17:47:18.725]                   sessionInformation <- function() {
[17:47:18.725]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.725]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.725]                       search = base::search(), system = base::Sys.info())
[17:47:18.725]                   }
[17:47:18.725]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.725]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.725]                     cond$call), session = sessionInformation(), 
[17:47:18.725]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.725]                   signalCondition(cond)
[17:47:18.725]                 }
[17:47:18.725]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.725]                 "immediateCondition"))) {
[17:47:18.725]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.725]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.725]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.725]                   if (TRUE && !signal) {
[17:47:18.725]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.725]                     {
[17:47:18.725]                       inherits <- base::inherits
[17:47:18.725]                       invokeRestart <- base::invokeRestart
[17:47:18.725]                       is.null <- base::is.null
[17:47:18.725]                       muffled <- FALSE
[17:47:18.725]                       if (inherits(cond, "message")) {
[17:47:18.725]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.725]                         if (muffled) 
[17:47:18.725]                           invokeRestart("muffleMessage")
[17:47:18.725]                       }
[17:47:18.725]                       else if (inherits(cond, "warning")) {
[17:47:18.725]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.725]                         if (muffled) 
[17:47:18.725]                           invokeRestart("muffleWarning")
[17:47:18.725]                       }
[17:47:18.725]                       else if (inherits(cond, "condition")) {
[17:47:18.725]                         if (!is.null(pattern)) {
[17:47:18.725]                           computeRestarts <- base::computeRestarts
[17:47:18.725]                           grepl <- base::grepl
[17:47:18.725]                           restarts <- computeRestarts(cond)
[17:47:18.725]                           for (restart in restarts) {
[17:47:18.725]                             name <- restart$name
[17:47:18.725]                             if (is.null(name)) 
[17:47:18.725]                               next
[17:47:18.725]                             if (!grepl(pattern, name)) 
[17:47:18.725]                               next
[17:47:18.725]                             invokeRestart(restart)
[17:47:18.725]                             muffled <- TRUE
[17:47:18.725]                             break
[17:47:18.725]                           }
[17:47:18.725]                         }
[17:47:18.725]                       }
[17:47:18.725]                       invisible(muffled)
[17:47:18.725]                     }
[17:47:18.725]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.725]                   }
[17:47:18.725]                 }
[17:47:18.725]                 else {
[17:47:18.725]                   if (TRUE) {
[17:47:18.725]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.725]                     {
[17:47:18.725]                       inherits <- base::inherits
[17:47:18.725]                       invokeRestart <- base::invokeRestart
[17:47:18.725]                       is.null <- base::is.null
[17:47:18.725]                       muffled <- FALSE
[17:47:18.725]                       if (inherits(cond, "message")) {
[17:47:18.725]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.725]                         if (muffled) 
[17:47:18.725]                           invokeRestart("muffleMessage")
[17:47:18.725]                       }
[17:47:18.725]                       else if (inherits(cond, "warning")) {
[17:47:18.725]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.725]                         if (muffled) 
[17:47:18.725]                           invokeRestart("muffleWarning")
[17:47:18.725]                       }
[17:47:18.725]                       else if (inherits(cond, "condition")) {
[17:47:18.725]                         if (!is.null(pattern)) {
[17:47:18.725]                           computeRestarts <- base::computeRestarts
[17:47:18.725]                           grepl <- base::grepl
[17:47:18.725]                           restarts <- computeRestarts(cond)
[17:47:18.725]                           for (restart in restarts) {
[17:47:18.725]                             name <- restart$name
[17:47:18.725]                             if (is.null(name)) 
[17:47:18.725]                               next
[17:47:18.725]                             if (!grepl(pattern, name)) 
[17:47:18.725]                               next
[17:47:18.725]                             invokeRestart(restart)
[17:47:18.725]                             muffled <- TRUE
[17:47:18.725]                             break
[17:47:18.725]                           }
[17:47:18.725]                         }
[17:47:18.725]                       }
[17:47:18.725]                       invisible(muffled)
[17:47:18.725]                     }
[17:47:18.725]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.725]                   }
[17:47:18.725]                 }
[17:47:18.725]             }
[17:47:18.725]         }))
[17:47:18.725]     }, error = function(ex) {
[17:47:18.725]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.725]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.725]                 ...future.rng), started = ...future.startTime, 
[17:47:18.725]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.725]             version = "1.8"), class = "FutureResult")
[17:47:18.725]     }, finally = {
[17:47:18.725]         if (!identical(...future.workdir, getwd())) 
[17:47:18.725]             setwd(...future.workdir)
[17:47:18.725]         {
[17:47:18.725]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.725]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.725]             }
[17:47:18.725]             base::options(...future.oldOptions)
[17:47:18.725]             if (.Platform$OS.type == "windows") {
[17:47:18.725]                 old_names <- names(...future.oldEnvVars)
[17:47:18.725]                 envs <- base::Sys.getenv()
[17:47:18.725]                 names <- names(envs)
[17:47:18.725]                 common <- intersect(names, old_names)
[17:47:18.725]                 added <- setdiff(names, old_names)
[17:47:18.725]                 removed <- setdiff(old_names, names)
[17:47:18.725]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.725]                   envs[common]]
[17:47:18.725]                 NAMES <- toupper(changed)
[17:47:18.725]                 args <- list()
[17:47:18.725]                 for (kk in seq_along(NAMES)) {
[17:47:18.725]                   name <- changed[[kk]]
[17:47:18.725]                   NAME <- NAMES[[kk]]
[17:47:18.725]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.725]                     next
[17:47:18.725]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.725]                 }
[17:47:18.725]                 NAMES <- toupper(added)
[17:47:18.725]                 for (kk in seq_along(NAMES)) {
[17:47:18.725]                   name <- added[[kk]]
[17:47:18.725]                   NAME <- NAMES[[kk]]
[17:47:18.725]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.725]                     next
[17:47:18.725]                   args[[name]] <- ""
[17:47:18.725]                 }
[17:47:18.725]                 NAMES <- toupper(removed)
[17:47:18.725]                 for (kk in seq_along(NAMES)) {
[17:47:18.725]                   name <- removed[[kk]]
[17:47:18.725]                   NAME <- NAMES[[kk]]
[17:47:18.725]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.725]                     next
[17:47:18.725]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.725]                 }
[17:47:18.725]                 if (length(args) > 0) 
[17:47:18.725]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.725]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.725]             }
[17:47:18.725]             else {
[17:47:18.725]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.725]             }
[17:47:18.725]             {
[17:47:18.725]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.725]                   0L) {
[17:47:18.725]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.725]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.725]                   base::options(opts)
[17:47:18.725]                 }
[17:47:18.725]                 {
[17:47:18.725]                   {
[17:47:18.725]                     NULL
[17:47:18.725]                     RNGkind("Mersenne-Twister")
[17:47:18.725]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.725]                       inherits = FALSE)
[17:47:18.725]                   }
[17:47:18.725]                   options(future.plan = NULL)
[17:47:18.725]                   if (is.na(NA_character_)) 
[17:47:18.725]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.725]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.725]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.725]                     .init = FALSE)
[17:47:18.725]                 }
[17:47:18.725]             }
[17:47:18.725]         }
[17:47:18.725]     })
[17:47:18.725]     if (TRUE) {
[17:47:18.725]         base::sink(type = "output", split = FALSE)
[17:47:18.725]         if (TRUE) {
[17:47:18.725]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.725]         }
[17:47:18.725]         else {
[17:47:18.725]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.725]         }
[17:47:18.725]         base::close(...future.stdout)
[17:47:18.725]         ...future.stdout <- NULL
[17:47:18.725]     }
[17:47:18.725]     ...future.result$conditions <- ...future.conditions
[17:47:18.725]     ...future.result$finished <- base::Sys.time()
[17:47:18.725]     ...future.result
[17:47:18.725] }
[17:47:18.727] plan(): Setting new future strategy stack:
[17:47:18.727] List of future strategies:
[17:47:18.727] 1. sequential:
[17:47:18.727]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.727]    - tweaked: FALSE
[17:47:18.727]    - call: NULL
[17:47:18.727] plan(): nbrOfWorkers() = 1
[17:47:18.728] plan(): Setting new future strategy stack:
[17:47:18.728] List of future strategies:
[17:47:18.728] 1. multicore:
[17:47:18.728]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.728]    - tweaked: FALSE
[17:47:18.728]    - call: plan(multicore)
[17:47:18.731] plan(): nbrOfWorkers() = 1
[17:47:18.732] SequentialFuture started (and completed)
[17:47:18.732] resolved() for ‘SequentialFuture’ ...
[17:47:18.732] - state: ‘finished’
[17:47:18.732] - run: TRUE
[17:47:18.732] - result: ‘FutureResult’
[17:47:18.732] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = TRUE) with globals
[17:47:18.736] getGlobalsAndPackages() ...
[17:47:18.736] Searching for globals...
[17:47:18.738] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:47:18.738] Searching for globals ... DONE
[17:47:18.738] Resolving globals: FALSE
[17:47:18.738] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:18.739] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:47:18.739] - globals: [1] ‘a’
[17:47:18.739] 
[17:47:18.739] getGlobalsAndPackages() ... DONE
[17:47:18.739] Packages needed by the future expression (n = 0): <none>
[17:47:18.740] Packages needed by future strategies (n = 0): <none>
[17:47:18.740] {
[17:47:18.740]     {
[17:47:18.740]         {
[17:47:18.740]             ...future.startTime <- base::Sys.time()
[17:47:18.740]             {
[17:47:18.740]                 {
[17:47:18.740]                   {
[17:47:18.740]                     base::local({
[17:47:18.740]                       has_future <- base::requireNamespace("future", 
[17:47:18.740]                         quietly = TRUE)
[17:47:18.740]                       if (has_future) {
[17:47:18.740]                         ns <- base::getNamespace("future")
[17:47:18.740]                         version <- ns[[".package"]][["version"]]
[17:47:18.740]                         if (is.null(version)) 
[17:47:18.740]                           version <- utils::packageVersion("future")
[17:47:18.740]                       }
[17:47:18.740]                       else {
[17:47:18.740]                         version <- NULL
[17:47:18.740]                       }
[17:47:18.740]                       if (!has_future || version < "1.8.0") {
[17:47:18.740]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.740]                           "", base::R.version$version.string), 
[17:47:18.740]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.740]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.740]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.740]                             "release", "version")], collapse = " "), 
[17:47:18.740]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.740]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.740]                           info)
[17:47:18.740]                         info <- base::paste(info, collapse = "; ")
[17:47:18.740]                         if (!has_future) {
[17:47:18.740]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.740]                             info)
[17:47:18.740]                         }
[17:47:18.740]                         else {
[17:47:18.740]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.740]                             info, version)
[17:47:18.740]                         }
[17:47:18.740]                         base::stop(msg)
[17:47:18.740]                       }
[17:47:18.740]                     })
[17:47:18.740]                   }
[17:47:18.740]                   ...future.strategy.old <- future::plan("list")
[17:47:18.740]                   options(future.plan = NULL)
[17:47:18.740]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.740]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.740]                 }
[17:47:18.740]                 ...future.workdir <- getwd()
[17:47:18.740]             }
[17:47:18.740]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.740]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.740]         }
[17:47:18.740]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.740]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.740]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.740]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.740]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.740]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.740]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.740]             base::names(...future.oldOptions))
[17:47:18.740]     }
[17:47:18.740]     if (FALSE) {
[17:47:18.740]     }
[17:47:18.740]     else {
[17:47:18.740]         if (TRUE) {
[17:47:18.740]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.740]                 open = "w")
[17:47:18.740]         }
[17:47:18.740]         else {
[17:47:18.740]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.740]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.740]         }
[17:47:18.740]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.740]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.740]             base::sink(type = "output", split = FALSE)
[17:47:18.740]             base::close(...future.stdout)
[17:47:18.740]         }, add = TRUE)
[17:47:18.740]     }
[17:47:18.740]     ...future.frame <- base::sys.nframe()
[17:47:18.740]     ...future.conditions <- base::list()
[17:47:18.740]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.740]     if (FALSE) {
[17:47:18.740]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.740]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.740]     }
[17:47:18.740]     ...future.result <- base::tryCatch({
[17:47:18.740]         base::withCallingHandlers({
[17:47:18.740]             ...future.value <- base::withVisible(base::local({
[17:47:18.740]                 b <- 3
[17:47:18.740]                 c <- 2
[17:47:18.740]                 a * b * c
[17:47:18.740]             }))
[17:47:18.740]             future::FutureResult(value = ...future.value$value, 
[17:47:18.740]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.740]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.740]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.740]                     ...future.globalenv.names))
[17:47:18.740]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.740]         }, condition = base::local({
[17:47:18.740]             c <- base::c
[17:47:18.740]             inherits <- base::inherits
[17:47:18.740]             invokeRestart <- base::invokeRestart
[17:47:18.740]             length <- base::length
[17:47:18.740]             list <- base::list
[17:47:18.740]             seq.int <- base::seq.int
[17:47:18.740]             signalCondition <- base::signalCondition
[17:47:18.740]             sys.calls <- base::sys.calls
[17:47:18.740]             `[[` <- base::`[[`
[17:47:18.740]             `+` <- base::`+`
[17:47:18.740]             `<<-` <- base::`<<-`
[17:47:18.740]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.740]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.740]                   3L)]
[17:47:18.740]             }
[17:47:18.740]             function(cond) {
[17:47:18.740]                 is_error <- inherits(cond, "error")
[17:47:18.740]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.740]                   NULL)
[17:47:18.740]                 if (is_error) {
[17:47:18.740]                   sessionInformation <- function() {
[17:47:18.740]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.740]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.740]                       search = base::search(), system = base::Sys.info())
[17:47:18.740]                   }
[17:47:18.740]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.740]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.740]                     cond$call), session = sessionInformation(), 
[17:47:18.740]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.740]                   signalCondition(cond)
[17:47:18.740]                 }
[17:47:18.740]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.740]                 "immediateCondition"))) {
[17:47:18.740]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.740]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.740]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.740]                   if (TRUE && !signal) {
[17:47:18.740]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.740]                     {
[17:47:18.740]                       inherits <- base::inherits
[17:47:18.740]                       invokeRestart <- base::invokeRestart
[17:47:18.740]                       is.null <- base::is.null
[17:47:18.740]                       muffled <- FALSE
[17:47:18.740]                       if (inherits(cond, "message")) {
[17:47:18.740]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.740]                         if (muffled) 
[17:47:18.740]                           invokeRestart("muffleMessage")
[17:47:18.740]                       }
[17:47:18.740]                       else if (inherits(cond, "warning")) {
[17:47:18.740]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.740]                         if (muffled) 
[17:47:18.740]                           invokeRestart("muffleWarning")
[17:47:18.740]                       }
[17:47:18.740]                       else if (inherits(cond, "condition")) {
[17:47:18.740]                         if (!is.null(pattern)) {
[17:47:18.740]                           computeRestarts <- base::computeRestarts
[17:47:18.740]                           grepl <- base::grepl
[17:47:18.740]                           restarts <- computeRestarts(cond)
[17:47:18.740]                           for (restart in restarts) {
[17:47:18.740]                             name <- restart$name
[17:47:18.740]                             if (is.null(name)) 
[17:47:18.740]                               next
[17:47:18.740]                             if (!grepl(pattern, name)) 
[17:47:18.740]                               next
[17:47:18.740]                             invokeRestart(restart)
[17:47:18.740]                             muffled <- TRUE
[17:47:18.740]                             break
[17:47:18.740]                           }
[17:47:18.740]                         }
[17:47:18.740]                       }
[17:47:18.740]                       invisible(muffled)
[17:47:18.740]                     }
[17:47:18.740]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.740]                   }
[17:47:18.740]                 }
[17:47:18.740]                 else {
[17:47:18.740]                   if (TRUE) {
[17:47:18.740]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.740]                     {
[17:47:18.740]                       inherits <- base::inherits
[17:47:18.740]                       invokeRestart <- base::invokeRestart
[17:47:18.740]                       is.null <- base::is.null
[17:47:18.740]                       muffled <- FALSE
[17:47:18.740]                       if (inherits(cond, "message")) {
[17:47:18.740]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.740]                         if (muffled) 
[17:47:18.740]                           invokeRestart("muffleMessage")
[17:47:18.740]                       }
[17:47:18.740]                       else if (inherits(cond, "warning")) {
[17:47:18.740]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.740]                         if (muffled) 
[17:47:18.740]                           invokeRestart("muffleWarning")
[17:47:18.740]                       }
[17:47:18.740]                       else if (inherits(cond, "condition")) {
[17:47:18.740]                         if (!is.null(pattern)) {
[17:47:18.740]                           computeRestarts <- base::computeRestarts
[17:47:18.740]                           grepl <- base::grepl
[17:47:18.740]                           restarts <- computeRestarts(cond)
[17:47:18.740]                           for (restart in restarts) {
[17:47:18.740]                             name <- restart$name
[17:47:18.740]                             if (is.null(name)) 
[17:47:18.740]                               next
[17:47:18.740]                             if (!grepl(pattern, name)) 
[17:47:18.740]                               next
[17:47:18.740]                             invokeRestart(restart)
[17:47:18.740]                             muffled <- TRUE
[17:47:18.740]                             break
[17:47:18.740]                           }
[17:47:18.740]                         }
[17:47:18.740]                       }
[17:47:18.740]                       invisible(muffled)
[17:47:18.740]                     }
[17:47:18.740]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.740]                   }
[17:47:18.740]                 }
[17:47:18.740]             }
[17:47:18.740]         }))
[17:47:18.740]     }, error = function(ex) {
[17:47:18.740]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.740]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.740]                 ...future.rng), started = ...future.startTime, 
[17:47:18.740]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.740]             version = "1.8"), class = "FutureResult")
[17:47:18.740]     }, finally = {
[17:47:18.740]         if (!identical(...future.workdir, getwd())) 
[17:47:18.740]             setwd(...future.workdir)
[17:47:18.740]         {
[17:47:18.740]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.740]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.740]             }
[17:47:18.740]             base::options(...future.oldOptions)
[17:47:18.740]             if (.Platform$OS.type == "windows") {
[17:47:18.740]                 old_names <- names(...future.oldEnvVars)
[17:47:18.740]                 envs <- base::Sys.getenv()
[17:47:18.740]                 names <- names(envs)
[17:47:18.740]                 common <- intersect(names, old_names)
[17:47:18.740]                 added <- setdiff(names, old_names)
[17:47:18.740]                 removed <- setdiff(old_names, names)
[17:47:18.740]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.740]                   envs[common]]
[17:47:18.740]                 NAMES <- toupper(changed)
[17:47:18.740]                 args <- list()
[17:47:18.740]                 for (kk in seq_along(NAMES)) {
[17:47:18.740]                   name <- changed[[kk]]
[17:47:18.740]                   NAME <- NAMES[[kk]]
[17:47:18.740]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.740]                     next
[17:47:18.740]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.740]                 }
[17:47:18.740]                 NAMES <- toupper(added)
[17:47:18.740]                 for (kk in seq_along(NAMES)) {
[17:47:18.740]                   name <- added[[kk]]
[17:47:18.740]                   NAME <- NAMES[[kk]]
[17:47:18.740]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.740]                     next
[17:47:18.740]                   args[[name]] <- ""
[17:47:18.740]                 }
[17:47:18.740]                 NAMES <- toupper(removed)
[17:47:18.740]                 for (kk in seq_along(NAMES)) {
[17:47:18.740]                   name <- removed[[kk]]
[17:47:18.740]                   NAME <- NAMES[[kk]]
[17:47:18.740]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.740]                     next
[17:47:18.740]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.740]                 }
[17:47:18.740]                 if (length(args) > 0) 
[17:47:18.740]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.740]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.740]             }
[17:47:18.740]             else {
[17:47:18.740]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.740]             }
[17:47:18.740]             {
[17:47:18.740]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.740]                   0L) {
[17:47:18.740]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.740]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.740]                   base::options(opts)
[17:47:18.740]                 }
[17:47:18.740]                 {
[17:47:18.740]                   {
[17:47:18.740]                     NULL
[17:47:18.740]                     RNGkind("Mersenne-Twister")
[17:47:18.740]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.740]                       inherits = FALSE)
[17:47:18.740]                   }
[17:47:18.740]                   options(future.plan = NULL)
[17:47:18.740]                   if (is.na(NA_character_)) 
[17:47:18.740]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.740]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.740]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.740]                     .init = FALSE)
[17:47:18.740]                 }
[17:47:18.740]             }
[17:47:18.740]         }
[17:47:18.740]     })
[17:47:18.740]     if (TRUE) {
[17:47:18.740]         base::sink(type = "output", split = FALSE)
[17:47:18.740]         if (TRUE) {
[17:47:18.740]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.740]         }
[17:47:18.740]         else {
[17:47:18.740]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.740]         }
[17:47:18.740]         base::close(...future.stdout)
[17:47:18.740]         ...future.stdout <- NULL
[17:47:18.740]     }
[17:47:18.740]     ...future.result$conditions <- ...future.conditions
[17:47:18.740]     ...future.result$finished <- base::Sys.time()
[17:47:18.740]     ...future.result
[17:47:18.740] }
[17:47:18.742] assign_globals() ...
[17:47:18.742] List of 1
[17:47:18.742]  $ a: num 0
[17:47:18.742]  - attr(*, "where")=List of 1
[17:47:18.742]   ..$ a:<environment: R_EmptyEnv> 
[17:47:18.742]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:18.742]  - attr(*, "resolved")= logi FALSE
[17:47:18.742]  - attr(*, "total_size")= num 56
[17:47:18.746] - copied ‘a’ to environment
[17:47:18.746] assign_globals() ... done
[17:47:18.747] plan(): Setting new future strategy stack:
[17:47:18.747] List of future strategies:
[17:47:18.747] 1. sequential:
[17:47:18.747]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.747]    - tweaked: FALSE
[17:47:18.747]    - call: NULL
[17:47:18.747] plan(): nbrOfWorkers() = 1
[17:47:18.748] plan(): Setting new future strategy stack:
[17:47:18.748] List of future strategies:
[17:47:18.748] 1. multicore:
[17:47:18.748]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.748]    - tweaked: FALSE
[17:47:18.748]    - call: plan(multicore)
[17:47:18.752] plan(): nbrOfWorkers() = 1
[17:47:18.752] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[17:47:18.756] getGlobalsAndPackages() ...
[17:47:18.756] Searching for globals...
[17:47:18.757] - globals found: [2] ‘{’, ‘ii’
[17:47:18.757] Searching for globals ... DONE
[17:47:18.757] Resolving globals: FALSE
[17:47:18.758] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:18.758] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:18.758] - globals: [1] ‘ii’
[17:47:18.758] 
[17:47:18.758] getGlobalsAndPackages() ... DONE
[17:47:18.759] Packages needed by the future expression (n = 0): <none>
[17:47:18.761] Packages needed by future strategies (n = 0): <none>
[17:47:18.761] {
[17:47:18.761]     {
[17:47:18.761]         {
[17:47:18.761]             ...future.startTime <- base::Sys.time()
[17:47:18.761]             {
[17:47:18.761]                 {
[17:47:18.761]                   {
[17:47:18.761]                     base::local({
[17:47:18.761]                       has_future <- base::requireNamespace("future", 
[17:47:18.761]                         quietly = TRUE)
[17:47:18.761]                       if (has_future) {
[17:47:18.761]                         ns <- base::getNamespace("future")
[17:47:18.761]                         version <- ns[[".package"]][["version"]]
[17:47:18.761]                         if (is.null(version)) 
[17:47:18.761]                           version <- utils::packageVersion("future")
[17:47:18.761]                       }
[17:47:18.761]                       else {
[17:47:18.761]                         version <- NULL
[17:47:18.761]                       }
[17:47:18.761]                       if (!has_future || version < "1.8.0") {
[17:47:18.761]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.761]                           "", base::R.version$version.string), 
[17:47:18.761]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.761]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.761]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.761]                             "release", "version")], collapse = " "), 
[17:47:18.761]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.761]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.761]                           info)
[17:47:18.761]                         info <- base::paste(info, collapse = "; ")
[17:47:18.761]                         if (!has_future) {
[17:47:18.761]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.761]                             info)
[17:47:18.761]                         }
[17:47:18.761]                         else {
[17:47:18.761]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.761]                             info, version)
[17:47:18.761]                         }
[17:47:18.761]                         base::stop(msg)
[17:47:18.761]                       }
[17:47:18.761]                     })
[17:47:18.761]                   }
[17:47:18.761]                   ...future.strategy.old <- future::plan("list")
[17:47:18.761]                   options(future.plan = NULL)
[17:47:18.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.761]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.761]                 }
[17:47:18.761]                 ...future.workdir <- getwd()
[17:47:18.761]             }
[17:47:18.761]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.761]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.761]         }
[17:47:18.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.761]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.761]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.761]             base::names(...future.oldOptions))
[17:47:18.761]     }
[17:47:18.761]     if (FALSE) {
[17:47:18.761]     }
[17:47:18.761]     else {
[17:47:18.761]         if (TRUE) {
[17:47:18.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.761]                 open = "w")
[17:47:18.761]         }
[17:47:18.761]         else {
[17:47:18.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.761]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.761]         }
[17:47:18.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.761]             base::sink(type = "output", split = FALSE)
[17:47:18.761]             base::close(...future.stdout)
[17:47:18.761]         }, add = TRUE)
[17:47:18.761]     }
[17:47:18.761]     ...future.frame <- base::sys.nframe()
[17:47:18.761]     ...future.conditions <- base::list()
[17:47:18.761]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.761]     if (FALSE) {
[17:47:18.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.761]     }
[17:47:18.761]     ...future.result <- base::tryCatch({
[17:47:18.761]         base::withCallingHandlers({
[17:47:18.761]             ...future.value <- base::withVisible(base::local({
[17:47:18.761]                 ii
[17:47:18.761]             }))
[17:47:18.761]             future::FutureResult(value = ...future.value$value, 
[17:47:18.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.761]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.761]                     ...future.globalenv.names))
[17:47:18.761]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.761]         }, condition = base::local({
[17:47:18.761]             c <- base::c
[17:47:18.761]             inherits <- base::inherits
[17:47:18.761]             invokeRestart <- base::invokeRestart
[17:47:18.761]             length <- base::length
[17:47:18.761]             list <- base::list
[17:47:18.761]             seq.int <- base::seq.int
[17:47:18.761]             signalCondition <- base::signalCondition
[17:47:18.761]             sys.calls <- base::sys.calls
[17:47:18.761]             `[[` <- base::`[[`
[17:47:18.761]             `+` <- base::`+`
[17:47:18.761]             `<<-` <- base::`<<-`
[17:47:18.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.761]                   3L)]
[17:47:18.761]             }
[17:47:18.761]             function(cond) {
[17:47:18.761]                 is_error <- inherits(cond, "error")
[17:47:18.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.761]                   NULL)
[17:47:18.761]                 if (is_error) {
[17:47:18.761]                   sessionInformation <- function() {
[17:47:18.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.761]                       search = base::search(), system = base::Sys.info())
[17:47:18.761]                   }
[17:47:18.761]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.761]                     cond$call), session = sessionInformation(), 
[17:47:18.761]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.761]                   signalCondition(cond)
[17:47:18.761]                 }
[17:47:18.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.761]                 "immediateCondition"))) {
[17:47:18.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.761]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.761]                   if (TRUE && !signal) {
[17:47:18.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.761]                     {
[17:47:18.761]                       inherits <- base::inherits
[17:47:18.761]                       invokeRestart <- base::invokeRestart
[17:47:18.761]                       is.null <- base::is.null
[17:47:18.761]                       muffled <- FALSE
[17:47:18.761]                       if (inherits(cond, "message")) {
[17:47:18.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.761]                         if (muffled) 
[17:47:18.761]                           invokeRestart("muffleMessage")
[17:47:18.761]                       }
[17:47:18.761]                       else if (inherits(cond, "warning")) {
[17:47:18.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.761]                         if (muffled) 
[17:47:18.761]                           invokeRestart("muffleWarning")
[17:47:18.761]                       }
[17:47:18.761]                       else if (inherits(cond, "condition")) {
[17:47:18.761]                         if (!is.null(pattern)) {
[17:47:18.761]                           computeRestarts <- base::computeRestarts
[17:47:18.761]                           grepl <- base::grepl
[17:47:18.761]                           restarts <- computeRestarts(cond)
[17:47:18.761]                           for (restart in restarts) {
[17:47:18.761]                             name <- restart$name
[17:47:18.761]                             if (is.null(name)) 
[17:47:18.761]                               next
[17:47:18.761]                             if (!grepl(pattern, name)) 
[17:47:18.761]                               next
[17:47:18.761]                             invokeRestart(restart)
[17:47:18.761]                             muffled <- TRUE
[17:47:18.761]                             break
[17:47:18.761]                           }
[17:47:18.761]                         }
[17:47:18.761]                       }
[17:47:18.761]                       invisible(muffled)
[17:47:18.761]                     }
[17:47:18.761]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.761]                   }
[17:47:18.761]                 }
[17:47:18.761]                 else {
[17:47:18.761]                   if (TRUE) {
[17:47:18.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.761]                     {
[17:47:18.761]                       inherits <- base::inherits
[17:47:18.761]                       invokeRestart <- base::invokeRestart
[17:47:18.761]                       is.null <- base::is.null
[17:47:18.761]                       muffled <- FALSE
[17:47:18.761]                       if (inherits(cond, "message")) {
[17:47:18.761]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.761]                         if (muffled) 
[17:47:18.761]                           invokeRestart("muffleMessage")
[17:47:18.761]                       }
[17:47:18.761]                       else if (inherits(cond, "warning")) {
[17:47:18.761]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.761]                         if (muffled) 
[17:47:18.761]                           invokeRestart("muffleWarning")
[17:47:18.761]                       }
[17:47:18.761]                       else if (inherits(cond, "condition")) {
[17:47:18.761]                         if (!is.null(pattern)) {
[17:47:18.761]                           computeRestarts <- base::computeRestarts
[17:47:18.761]                           grepl <- base::grepl
[17:47:18.761]                           restarts <- computeRestarts(cond)
[17:47:18.761]                           for (restart in restarts) {
[17:47:18.761]                             name <- restart$name
[17:47:18.761]                             if (is.null(name)) 
[17:47:18.761]                               next
[17:47:18.761]                             if (!grepl(pattern, name)) 
[17:47:18.761]                               next
[17:47:18.761]                             invokeRestart(restart)
[17:47:18.761]                             muffled <- TRUE
[17:47:18.761]                             break
[17:47:18.761]                           }
[17:47:18.761]                         }
[17:47:18.761]                       }
[17:47:18.761]                       invisible(muffled)
[17:47:18.761]                     }
[17:47:18.761]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.761]                   }
[17:47:18.761]                 }
[17:47:18.761]             }
[17:47:18.761]         }))
[17:47:18.761]     }, error = function(ex) {
[17:47:18.761]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.761]                 ...future.rng), started = ...future.startTime, 
[17:47:18.761]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.761]             version = "1.8"), class = "FutureResult")
[17:47:18.761]     }, finally = {
[17:47:18.761]         if (!identical(...future.workdir, getwd())) 
[17:47:18.761]             setwd(...future.workdir)
[17:47:18.761]         {
[17:47:18.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.761]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.761]             }
[17:47:18.761]             base::options(...future.oldOptions)
[17:47:18.761]             if (.Platform$OS.type == "windows") {
[17:47:18.761]                 old_names <- names(...future.oldEnvVars)
[17:47:18.761]                 envs <- base::Sys.getenv()
[17:47:18.761]                 names <- names(envs)
[17:47:18.761]                 common <- intersect(names, old_names)
[17:47:18.761]                 added <- setdiff(names, old_names)
[17:47:18.761]                 removed <- setdiff(old_names, names)
[17:47:18.761]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.761]                   envs[common]]
[17:47:18.761]                 NAMES <- toupper(changed)
[17:47:18.761]                 args <- list()
[17:47:18.761]                 for (kk in seq_along(NAMES)) {
[17:47:18.761]                   name <- changed[[kk]]
[17:47:18.761]                   NAME <- NAMES[[kk]]
[17:47:18.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.761]                     next
[17:47:18.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.761]                 }
[17:47:18.761]                 NAMES <- toupper(added)
[17:47:18.761]                 for (kk in seq_along(NAMES)) {
[17:47:18.761]                   name <- added[[kk]]
[17:47:18.761]                   NAME <- NAMES[[kk]]
[17:47:18.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.761]                     next
[17:47:18.761]                   args[[name]] <- ""
[17:47:18.761]                 }
[17:47:18.761]                 NAMES <- toupper(removed)
[17:47:18.761]                 for (kk in seq_along(NAMES)) {
[17:47:18.761]                   name <- removed[[kk]]
[17:47:18.761]                   NAME <- NAMES[[kk]]
[17:47:18.761]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.761]                     next
[17:47:18.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.761]                 }
[17:47:18.761]                 if (length(args) > 0) 
[17:47:18.761]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.761]             }
[17:47:18.761]             else {
[17:47:18.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.761]             }
[17:47:18.761]             {
[17:47:18.761]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.761]                   0L) {
[17:47:18.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.761]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.761]                   base::options(opts)
[17:47:18.761]                 }
[17:47:18.761]                 {
[17:47:18.761]                   {
[17:47:18.761]                     NULL
[17:47:18.761]                     RNGkind("Mersenne-Twister")
[17:47:18.761]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.761]                       inherits = FALSE)
[17:47:18.761]                   }
[17:47:18.761]                   options(future.plan = NULL)
[17:47:18.761]                   if (is.na(NA_character_)) 
[17:47:18.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.761]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.761]                     .init = FALSE)
[17:47:18.761]                 }
[17:47:18.761]             }
[17:47:18.761]         }
[17:47:18.761]     })
[17:47:18.761]     if (TRUE) {
[17:47:18.761]         base::sink(type = "output", split = FALSE)
[17:47:18.761]         if (TRUE) {
[17:47:18.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.761]         }
[17:47:18.761]         else {
[17:47:18.761]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.761]         }
[17:47:18.761]         base::close(...future.stdout)
[17:47:18.761]         ...future.stdout <- NULL
[17:47:18.761]     }
[17:47:18.761]     ...future.result$conditions <- ...future.conditions
[17:47:18.761]     ...future.result$finished <- base::Sys.time()
[17:47:18.761]     ...future.result
[17:47:18.761] }
[17:47:18.763] assign_globals() ...
[17:47:18.763] List of 1
[17:47:18.763]  $ ii: int 1
[17:47:18.763]  - attr(*, "where")=List of 1
[17:47:18.763]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:18.763]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:18.763]  - attr(*, "resolved")= logi FALSE
[17:47:18.763]  - attr(*, "total_size")= num 56
[17:47:18.765] - copied ‘ii’ to environment
[17:47:18.765] assign_globals() ... done
[17:47:18.766] plan(): Setting new future strategy stack:
[17:47:18.766] List of future strategies:
[17:47:18.766] 1. sequential:
[17:47:18.766]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.766]    - tweaked: FALSE
[17:47:18.766]    - call: NULL
[17:47:18.766] plan(): nbrOfWorkers() = 1
[17:47:18.767] plan(): Setting new future strategy stack:
[17:47:18.767] List of future strategies:
[17:47:18.767] 1. multicore:
[17:47:18.767]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.767]    - tweaked: FALSE
[17:47:18.767]    - call: plan(multicore)
[17:47:18.770] plan(): nbrOfWorkers() = 1
[17:47:18.771] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[17:47:18.774] getGlobalsAndPackages() ...
[17:47:18.774] Searching for globals...
[17:47:18.775] - globals found: [2] ‘{’, ‘ii’
[17:47:18.775] Searching for globals ... DONE
[17:47:18.775] Resolving globals: FALSE
[17:47:18.775] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:18.776] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:18.776] - globals: [1] ‘ii’
[17:47:18.776] 
[17:47:18.776] getGlobalsAndPackages() ... DONE
[17:47:18.776] Packages needed by the future expression (n = 0): <none>
[17:47:18.776] Packages needed by future strategies (n = 0): <none>
[17:47:18.777] {
[17:47:18.777]     {
[17:47:18.777]         {
[17:47:18.777]             ...future.startTime <- base::Sys.time()
[17:47:18.777]             {
[17:47:18.777]                 {
[17:47:18.777]                   {
[17:47:18.777]                     base::local({
[17:47:18.777]                       has_future <- base::requireNamespace("future", 
[17:47:18.777]                         quietly = TRUE)
[17:47:18.777]                       if (has_future) {
[17:47:18.777]                         ns <- base::getNamespace("future")
[17:47:18.777]                         version <- ns[[".package"]][["version"]]
[17:47:18.777]                         if (is.null(version)) 
[17:47:18.777]                           version <- utils::packageVersion("future")
[17:47:18.777]                       }
[17:47:18.777]                       else {
[17:47:18.777]                         version <- NULL
[17:47:18.777]                       }
[17:47:18.777]                       if (!has_future || version < "1.8.0") {
[17:47:18.777]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.777]                           "", base::R.version$version.string), 
[17:47:18.777]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.777]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.777]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.777]                             "release", "version")], collapse = " "), 
[17:47:18.777]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.777]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.777]                           info)
[17:47:18.777]                         info <- base::paste(info, collapse = "; ")
[17:47:18.777]                         if (!has_future) {
[17:47:18.777]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.777]                             info)
[17:47:18.777]                         }
[17:47:18.777]                         else {
[17:47:18.777]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.777]                             info, version)
[17:47:18.777]                         }
[17:47:18.777]                         base::stop(msg)
[17:47:18.777]                       }
[17:47:18.777]                     })
[17:47:18.777]                   }
[17:47:18.777]                   ...future.strategy.old <- future::plan("list")
[17:47:18.777]                   options(future.plan = NULL)
[17:47:18.777]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.777]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.777]                 }
[17:47:18.777]                 ...future.workdir <- getwd()
[17:47:18.777]             }
[17:47:18.777]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.777]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.777]         }
[17:47:18.777]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.777]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.777]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.777]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.777]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.777]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.777]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.777]             base::names(...future.oldOptions))
[17:47:18.777]     }
[17:47:18.777]     if (FALSE) {
[17:47:18.777]     }
[17:47:18.777]     else {
[17:47:18.777]         if (TRUE) {
[17:47:18.777]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.777]                 open = "w")
[17:47:18.777]         }
[17:47:18.777]         else {
[17:47:18.777]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.777]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.777]         }
[17:47:18.777]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.777]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.777]             base::sink(type = "output", split = FALSE)
[17:47:18.777]             base::close(...future.stdout)
[17:47:18.777]         }, add = TRUE)
[17:47:18.777]     }
[17:47:18.777]     ...future.frame <- base::sys.nframe()
[17:47:18.777]     ...future.conditions <- base::list()
[17:47:18.777]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.777]     if (FALSE) {
[17:47:18.777]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.777]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.777]     }
[17:47:18.777]     ...future.result <- base::tryCatch({
[17:47:18.777]         base::withCallingHandlers({
[17:47:18.777]             ...future.value <- base::withVisible(base::local({
[17:47:18.777]                 ii
[17:47:18.777]             }))
[17:47:18.777]             future::FutureResult(value = ...future.value$value, 
[17:47:18.777]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.777]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.777]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.777]                     ...future.globalenv.names))
[17:47:18.777]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.777]         }, condition = base::local({
[17:47:18.777]             c <- base::c
[17:47:18.777]             inherits <- base::inherits
[17:47:18.777]             invokeRestart <- base::invokeRestart
[17:47:18.777]             length <- base::length
[17:47:18.777]             list <- base::list
[17:47:18.777]             seq.int <- base::seq.int
[17:47:18.777]             signalCondition <- base::signalCondition
[17:47:18.777]             sys.calls <- base::sys.calls
[17:47:18.777]             `[[` <- base::`[[`
[17:47:18.777]             `+` <- base::`+`
[17:47:18.777]             `<<-` <- base::`<<-`
[17:47:18.777]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.777]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.777]                   3L)]
[17:47:18.777]             }
[17:47:18.777]             function(cond) {
[17:47:18.777]                 is_error <- inherits(cond, "error")
[17:47:18.777]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.777]                   NULL)
[17:47:18.777]                 if (is_error) {
[17:47:18.777]                   sessionInformation <- function() {
[17:47:18.777]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.777]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.777]                       search = base::search(), system = base::Sys.info())
[17:47:18.777]                   }
[17:47:18.777]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.777]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.777]                     cond$call), session = sessionInformation(), 
[17:47:18.777]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.777]                   signalCondition(cond)
[17:47:18.777]                 }
[17:47:18.777]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.777]                 "immediateCondition"))) {
[17:47:18.777]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.777]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.777]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.777]                   if (TRUE && !signal) {
[17:47:18.777]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.777]                     {
[17:47:18.777]                       inherits <- base::inherits
[17:47:18.777]                       invokeRestart <- base::invokeRestart
[17:47:18.777]                       is.null <- base::is.null
[17:47:18.777]                       muffled <- FALSE
[17:47:18.777]                       if (inherits(cond, "message")) {
[17:47:18.777]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.777]                         if (muffled) 
[17:47:18.777]                           invokeRestart("muffleMessage")
[17:47:18.777]                       }
[17:47:18.777]                       else if (inherits(cond, "warning")) {
[17:47:18.777]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.777]                         if (muffled) 
[17:47:18.777]                           invokeRestart("muffleWarning")
[17:47:18.777]                       }
[17:47:18.777]                       else if (inherits(cond, "condition")) {
[17:47:18.777]                         if (!is.null(pattern)) {
[17:47:18.777]                           computeRestarts <- base::computeRestarts
[17:47:18.777]                           grepl <- base::grepl
[17:47:18.777]                           restarts <- computeRestarts(cond)
[17:47:18.777]                           for (restart in restarts) {
[17:47:18.777]                             name <- restart$name
[17:47:18.777]                             if (is.null(name)) 
[17:47:18.777]                               next
[17:47:18.777]                             if (!grepl(pattern, name)) 
[17:47:18.777]                               next
[17:47:18.777]                             invokeRestart(restart)
[17:47:18.777]                             muffled <- TRUE
[17:47:18.777]                             break
[17:47:18.777]                           }
[17:47:18.777]                         }
[17:47:18.777]                       }
[17:47:18.777]                       invisible(muffled)
[17:47:18.777]                     }
[17:47:18.777]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.777]                   }
[17:47:18.777]                 }
[17:47:18.777]                 else {
[17:47:18.777]                   if (TRUE) {
[17:47:18.777]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.777]                     {
[17:47:18.777]                       inherits <- base::inherits
[17:47:18.777]                       invokeRestart <- base::invokeRestart
[17:47:18.777]                       is.null <- base::is.null
[17:47:18.777]                       muffled <- FALSE
[17:47:18.777]                       if (inherits(cond, "message")) {
[17:47:18.777]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.777]                         if (muffled) 
[17:47:18.777]                           invokeRestart("muffleMessage")
[17:47:18.777]                       }
[17:47:18.777]                       else if (inherits(cond, "warning")) {
[17:47:18.777]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.777]                         if (muffled) 
[17:47:18.777]                           invokeRestart("muffleWarning")
[17:47:18.777]                       }
[17:47:18.777]                       else if (inherits(cond, "condition")) {
[17:47:18.777]                         if (!is.null(pattern)) {
[17:47:18.777]                           computeRestarts <- base::computeRestarts
[17:47:18.777]                           grepl <- base::grepl
[17:47:18.777]                           restarts <- computeRestarts(cond)
[17:47:18.777]                           for (restart in restarts) {
[17:47:18.777]                             name <- restart$name
[17:47:18.777]                             if (is.null(name)) 
[17:47:18.777]                               next
[17:47:18.777]                             if (!grepl(pattern, name)) 
[17:47:18.777]                               next
[17:47:18.777]                             invokeRestart(restart)
[17:47:18.777]                             muffled <- TRUE
[17:47:18.777]                             break
[17:47:18.777]                           }
[17:47:18.777]                         }
[17:47:18.777]                       }
[17:47:18.777]                       invisible(muffled)
[17:47:18.777]                     }
[17:47:18.777]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.777]                   }
[17:47:18.777]                 }
[17:47:18.777]             }
[17:47:18.777]         }))
[17:47:18.777]     }, error = function(ex) {
[17:47:18.777]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.777]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.777]                 ...future.rng), started = ...future.startTime, 
[17:47:18.777]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.777]             version = "1.8"), class = "FutureResult")
[17:47:18.777]     }, finally = {
[17:47:18.777]         if (!identical(...future.workdir, getwd())) 
[17:47:18.777]             setwd(...future.workdir)
[17:47:18.777]         {
[17:47:18.777]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.777]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.777]             }
[17:47:18.777]             base::options(...future.oldOptions)
[17:47:18.777]             if (.Platform$OS.type == "windows") {
[17:47:18.777]                 old_names <- names(...future.oldEnvVars)
[17:47:18.777]                 envs <- base::Sys.getenv()
[17:47:18.777]                 names <- names(envs)
[17:47:18.777]                 common <- intersect(names, old_names)
[17:47:18.777]                 added <- setdiff(names, old_names)
[17:47:18.777]                 removed <- setdiff(old_names, names)
[17:47:18.777]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.777]                   envs[common]]
[17:47:18.777]                 NAMES <- toupper(changed)
[17:47:18.777]                 args <- list()
[17:47:18.777]                 for (kk in seq_along(NAMES)) {
[17:47:18.777]                   name <- changed[[kk]]
[17:47:18.777]                   NAME <- NAMES[[kk]]
[17:47:18.777]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.777]                     next
[17:47:18.777]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.777]                 }
[17:47:18.777]                 NAMES <- toupper(added)
[17:47:18.777]                 for (kk in seq_along(NAMES)) {
[17:47:18.777]                   name <- added[[kk]]
[17:47:18.777]                   NAME <- NAMES[[kk]]
[17:47:18.777]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.777]                     next
[17:47:18.777]                   args[[name]] <- ""
[17:47:18.777]                 }
[17:47:18.777]                 NAMES <- toupper(removed)
[17:47:18.777]                 for (kk in seq_along(NAMES)) {
[17:47:18.777]                   name <- removed[[kk]]
[17:47:18.777]                   NAME <- NAMES[[kk]]
[17:47:18.777]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.777]                     next
[17:47:18.777]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.777]                 }
[17:47:18.777]                 if (length(args) > 0) 
[17:47:18.777]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.777]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.777]             }
[17:47:18.777]             else {
[17:47:18.777]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.777]             }
[17:47:18.777]             {
[17:47:18.777]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.777]                   0L) {
[17:47:18.777]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.777]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.777]                   base::options(opts)
[17:47:18.777]                 }
[17:47:18.777]                 {
[17:47:18.777]                   {
[17:47:18.777]                     NULL
[17:47:18.777]                     RNGkind("Mersenne-Twister")
[17:47:18.777]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.777]                       inherits = FALSE)
[17:47:18.777]                   }
[17:47:18.777]                   options(future.plan = NULL)
[17:47:18.777]                   if (is.na(NA_character_)) 
[17:47:18.777]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.777]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.777]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.777]                     .init = FALSE)
[17:47:18.777]                 }
[17:47:18.777]             }
[17:47:18.777]         }
[17:47:18.777]     })
[17:47:18.777]     if (TRUE) {
[17:47:18.777]         base::sink(type = "output", split = FALSE)
[17:47:18.777]         if (TRUE) {
[17:47:18.777]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.777]         }
[17:47:18.777]         else {
[17:47:18.777]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.777]         }
[17:47:18.777]         base::close(...future.stdout)
[17:47:18.777]         ...future.stdout <- NULL
[17:47:18.777]     }
[17:47:18.777]     ...future.result$conditions <- ...future.conditions
[17:47:18.777]     ...future.result$finished <- base::Sys.time()
[17:47:18.777]     ...future.result
[17:47:18.777] }
[17:47:18.778] assign_globals() ...
[17:47:18.779] List of 1
[17:47:18.779]  $ ii: int 2
[17:47:18.779]  - attr(*, "where")=List of 1
[17:47:18.779]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:18.779]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:18.779]  - attr(*, "resolved")= logi FALSE
[17:47:18.779]  - attr(*, "total_size")= num 56
[17:47:18.781] - copied ‘ii’ to environment
[17:47:18.781] assign_globals() ... done
[17:47:18.781] plan(): Setting new future strategy stack:
[17:47:18.781] List of future strategies:
[17:47:18.781] 1. sequential:
[17:47:18.781]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.781]    - tweaked: FALSE
[17:47:18.781]    - call: NULL
[17:47:18.782] plan(): nbrOfWorkers() = 1
[17:47:18.782] plan(): Setting new future strategy stack:
[17:47:18.782] List of future strategies:
[17:47:18.782] 1. multicore:
[17:47:18.782]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.782]    - tweaked: FALSE
[17:47:18.782]    - call: plan(multicore)
[17:47:18.786] plan(): nbrOfWorkers() = 1
[17:47:18.786] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[17:47:18.789] getGlobalsAndPackages() ...
[17:47:18.789] Searching for globals...
[17:47:18.790] - globals found: [2] ‘{’, ‘ii’
[17:47:18.790] Searching for globals ... DONE
[17:47:18.790] Resolving globals: FALSE
[17:47:18.791] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:18.791] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:18.791] - globals: [1] ‘ii’
[17:47:18.791] 
[17:47:18.791] getGlobalsAndPackages() ... DONE
[17:47:18.792] Packages needed by the future expression (n = 0): <none>
[17:47:18.792] Packages needed by future strategies (n = 0): <none>
[17:47:18.792] {
[17:47:18.792]     {
[17:47:18.792]         {
[17:47:18.792]             ...future.startTime <- base::Sys.time()
[17:47:18.792]             {
[17:47:18.792]                 {
[17:47:18.792]                   {
[17:47:18.792]                     base::local({
[17:47:18.792]                       has_future <- base::requireNamespace("future", 
[17:47:18.792]                         quietly = TRUE)
[17:47:18.792]                       if (has_future) {
[17:47:18.792]                         ns <- base::getNamespace("future")
[17:47:18.792]                         version <- ns[[".package"]][["version"]]
[17:47:18.792]                         if (is.null(version)) 
[17:47:18.792]                           version <- utils::packageVersion("future")
[17:47:18.792]                       }
[17:47:18.792]                       else {
[17:47:18.792]                         version <- NULL
[17:47:18.792]                       }
[17:47:18.792]                       if (!has_future || version < "1.8.0") {
[17:47:18.792]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.792]                           "", base::R.version$version.string), 
[17:47:18.792]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.792]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.792]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.792]                             "release", "version")], collapse = " "), 
[17:47:18.792]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.792]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.792]                           info)
[17:47:18.792]                         info <- base::paste(info, collapse = "; ")
[17:47:18.792]                         if (!has_future) {
[17:47:18.792]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.792]                             info)
[17:47:18.792]                         }
[17:47:18.792]                         else {
[17:47:18.792]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.792]                             info, version)
[17:47:18.792]                         }
[17:47:18.792]                         base::stop(msg)
[17:47:18.792]                       }
[17:47:18.792]                     })
[17:47:18.792]                   }
[17:47:18.792]                   ...future.strategy.old <- future::plan("list")
[17:47:18.792]                   options(future.plan = NULL)
[17:47:18.792]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.792]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.792]                 }
[17:47:18.792]                 ...future.workdir <- getwd()
[17:47:18.792]             }
[17:47:18.792]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.792]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.792]         }
[17:47:18.792]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.792]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.792]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.792]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.792]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.792]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.792]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.792]             base::names(...future.oldOptions))
[17:47:18.792]     }
[17:47:18.792]     if (FALSE) {
[17:47:18.792]     }
[17:47:18.792]     else {
[17:47:18.792]         if (TRUE) {
[17:47:18.792]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.792]                 open = "w")
[17:47:18.792]         }
[17:47:18.792]         else {
[17:47:18.792]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.792]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.792]         }
[17:47:18.792]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.792]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.792]             base::sink(type = "output", split = FALSE)
[17:47:18.792]             base::close(...future.stdout)
[17:47:18.792]         }, add = TRUE)
[17:47:18.792]     }
[17:47:18.792]     ...future.frame <- base::sys.nframe()
[17:47:18.792]     ...future.conditions <- base::list()
[17:47:18.792]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.792]     if (FALSE) {
[17:47:18.792]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.792]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.792]     }
[17:47:18.792]     ...future.result <- base::tryCatch({
[17:47:18.792]         base::withCallingHandlers({
[17:47:18.792]             ...future.value <- base::withVisible(base::local({
[17:47:18.792]                 ii
[17:47:18.792]             }))
[17:47:18.792]             future::FutureResult(value = ...future.value$value, 
[17:47:18.792]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.792]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.792]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.792]                     ...future.globalenv.names))
[17:47:18.792]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.792]         }, condition = base::local({
[17:47:18.792]             c <- base::c
[17:47:18.792]             inherits <- base::inherits
[17:47:18.792]             invokeRestart <- base::invokeRestart
[17:47:18.792]             length <- base::length
[17:47:18.792]             list <- base::list
[17:47:18.792]             seq.int <- base::seq.int
[17:47:18.792]             signalCondition <- base::signalCondition
[17:47:18.792]             sys.calls <- base::sys.calls
[17:47:18.792]             `[[` <- base::`[[`
[17:47:18.792]             `+` <- base::`+`
[17:47:18.792]             `<<-` <- base::`<<-`
[17:47:18.792]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.792]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.792]                   3L)]
[17:47:18.792]             }
[17:47:18.792]             function(cond) {
[17:47:18.792]                 is_error <- inherits(cond, "error")
[17:47:18.792]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.792]                   NULL)
[17:47:18.792]                 if (is_error) {
[17:47:18.792]                   sessionInformation <- function() {
[17:47:18.792]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.792]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.792]                       search = base::search(), system = base::Sys.info())
[17:47:18.792]                   }
[17:47:18.792]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.792]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.792]                     cond$call), session = sessionInformation(), 
[17:47:18.792]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.792]                   signalCondition(cond)
[17:47:18.792]                 }
[17:47:18.792]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.792]                 "immediateCondition"))) {
[17:47:18.792]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.792]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.792]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.792]                   if (TRUE && !signal) {
[17:47:18.792]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.792]                     {
[17:47:18.792]                       inherits <- base::inherits
[17:47:18.792]                       invokeRestart <- base::invokeRestart
[17:47:18.792]                       is.null <- base::is.null
[17:47:18.792]                       muffled <- FALSE
[17:47:18.792]                       if (inherits(cond, "message")) {
[17:47:18.792]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.792]                         if (muffled) 
[17:47:18.792]                           invokeRestart("muffleMessage")
[17:47:18.792]                       }
[17:47:18.792]                       else if (inherits(cond, "warning")) {
[17:47:18.792]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.792]                         if (muffled) 
[17:47:18.792]                           invokeRestart("muffleWarning")
[17:47:18.792]                       }
[17:47:18.792]                       else if (inherits(cond, "condition")) {
[17:47:18.792]                         if (!is.null(pattern)) {
[17:47:18.792]                           computeRestarts <- base::computeRestarts
[17:47:18.792]                           grepl <- base::grepl
[17:47:18.792]                           restarts <- computeRestarts(cond)
[17:47:18.792]                           for (restart in restarts) {
[17:47:18.792]                             name <- restart$name
[17:47:18.792]                             if (is.null(name)) 
[17:47:18.792]                               next
[17:47:18.792]                             if (!grepl(pattern, name)) 
[17:47:18.792]                               next
[17:47:18.792]                             invokeRestart(restart)
[17:47:18.792]                             muffled <- TRUE
[17:47:18.792]                             break
[17:47:18.792]                           }
[17:47:18.792]                         }
[17:47:18.792]                       }
[17:47:18.792]                       invisible(muffled)
[17:47:18.792]                     }
[17:47:18.792]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.792]                   }
[17:47:18.792]                 }
[17:47:18.792]                 else {
[17:47:18.792]                   if (TRUE) {
[17:47:18.792]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.792]                     {
[17:47:18.792]                       inherits <- base::inherits
[17:47:18.792]                       invokeRestart <- base::invokeRestart
[17:47:18.792]                       is.null <- base::is.null
[17:47:18.792]                       muffled <- FALSE
[17:47:18.792]                       if (inherits(cond, "message")) {
[17:47:18.792]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.792]                         if (muffled) 
[17:47:18.792]                           invokeRestart("muffleMessage")
[17:47:18.792]                       }
[17:47:18.792]                       else if (inherits(cond, "warning")) {
[17:47:18.792]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.792]                         if (muffled) 
[17:47:18.792]                           invokeRestart("muffleWarning")
[17:47:18.792]                       }
[17:47:18.792]                       else if (inherits(cond, "condition")) {
[17:47:18.792]                         if (!is.null(pattern)) {
[17:47:18.792]                           computeRestarts <- base::computeRestarts
[17:47:18.792]                           grepl <- base::grepl
[17:47:18.792]                           restarts <- computeRestarts(cond)
[17:47:18.792]                           for (restart in restarts) {
[17:47:18.792]                             name <- restart$name
[17:47:18.792]                             if (is.null(name)) 
[17:47:18.792]                               next
[17:47:18.792]                             if (!grepl(pattern, name)) 
[17:47:18.792]                               next
[17:47:18.792]                             invokeRestart(restart)
[17:47:18.792]                             muffled <- TRUE
[17:47:18.792]                             break
[17:47:18.792]                           }
[17:47:18.792]                         }
[17:47:18.792]                       }
[17:47:18.792]                       invisible(muffled)
[17:47:18.792]                     }
[17:47:18.792]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.792]                   }
[17:47:18.792]                 }
[17:47:18.792]             }
[17:47:18.792]         }))
[17:47:18.792]     }, error = function(ex) {
[17:47:18.792]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.792]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.792]                 ...future.rng), started = ...future.startTime, 
[17:47:18.792]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.792]             version = "1.8"), class = "FutureResult")
[17:47:18.792]     }, finally = {
[17:47:18.792]         if (!identical(...future.workdir, getwd())) 
[17:47:18.792]             setwd(...future.workdir)
[17:47:18.792]         {
[17:47:18.792]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.792]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.792]             }
[17:47:18.792]             base::options(...future.oldOptions)
[17:47:18.792]             if (.Platform$OS.type == "windows") {
[17:47:18.792]                 old_names <- names(...future.oldEnvVars)
[17:47:18.792]                 envs <- base::Sys.getenv()
[17:47:18.792]                 names <- names(envs)
[17:47:18.792]                 common <- intersect(names, old_names)
[17:47:18.792]                 added <- setdiff(names, old_names)
[17:47:18.792]                 removed <- setdiff(old_names, names)
[17:47:18.792]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.792]                   envs[common]]
[17:47:18.792]                 NAMES <- toupper(changed)
[17:47:18.792]                 args <- list()
[17:47:18.792]                 for (kk in seq_along(NAMES)) {
[17:47:18.792]                   name <- changed[[kk]]
[17:47:18.792]                   NAME <- NAMES[[kk]]
[17:47:18.792]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.792]                     next
[17:47:18.792]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.792]                 }
[17:47:18.792]                 NAMES <- toupper(added)
[17:47:18.792]                 for (kk in seq_along(NAMES)) {
[17:47:18.792]                   name <- added[[kk]]
[17:47:18.792]                   NAME <- NAMES[[kk]]
[17:47:18.792]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.792]                     next
[17:47:18.792]                   args[[name]] <- ""
[17:47:18.792]                 }
[17:47:18.792]                 NAMES <- toupper(removed)
[17:47:18.792]                 for (kk in seq_along(NAMES)) {
[17:47:18.792]                   name <- removed[[kk]]
[17:47:18.792]                   NAME <- NAMES[[kk]]
[17:47:18.792]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.792]                     next
[17:47:18.792]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.792]                 }
[17:47:18.792]                 if (length(args) > 0) 
[17:47:18.792]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.792]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.792]             }
[17:47:18.792]             else {
[17:47:18.792]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.792]             }
[17:47:18.792]             {
[17:47:18.792]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.792]                   0L) {
[17:47:18.792]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.792]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.792]                   base::options(opts)
[17:47:18.792]                 }
[17:47:18.792]                 {
[17:47:18.792]                   {
[17:47:18.792]                     NULL
[17:47:18.792]                     RNGkind("Mersenne-Twister")
[17:47:18.792]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.792]                       inherits = FALSE)
[17:47:18.792]                   }
[17:47:18.792]                   options(future.plan = NULL)
[17:47:18.792]                   if (is.na(NA_character_)) 
[17:47:18.792]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.792]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.792]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.792]                     .init = FALSE)
[17:47:18.792]                 }
[17:47:18.792]             }
[17:47:18.792]         }
[17:47:18.792]     })
[17:47:18.792]     if (TRUE) {
[17:47:18.792]         base::sink(type = "output", split = FALSE)
[17:47:18.792]         if (TRUE) {
[17:47:18.792]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.792]         }
[17:47:18.792]         else {
[17:47:18.792]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.792]         }
[17:47:18.792]         base::close(...future.stdout)
[17:47:18.792]         ...future.stdout <- NULL
[17:47:18.792]     }
[17:47:18.792]     ...future.result$conditions <- ...future.conditions
[17:47:18.792]     ...future.result$finished <- base::Sys.time()
[17:47:18.792]     ...future.result
[17:47:18.792] }
[17:47:18.794] assign_globals() ...
[17:47:18.794] List of 1
[17:47:18.794]  $ ii: int 3
[17:47:18.794]  - attr(*, "where")=List of 1
[17:47:18.794]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:18.794]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:18.794]  - attr(*, "resolved")= logi FALSE
[17:47:18.794]  - attr(*, "total_size")= num 56
[17:47:18.796] - copied ‘ii’ to environment
[17:47:18.796] assign_globals() ... done
[17:47:18.796] plan(): Setting new future strategy stack:
[17:47:18.796] List of future strategies:
[17:47:18.796] 1. sequential:
[17:47:18.796]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.796]    - tweaked: FALSE
[17:47:18.796]    - call: NULL
[17:47:18.797] plan(): nbrOfWorkers() = 1
[17:47:18.798] plan(): Setting new future strategy stack:
[17:47:18.798] List of future strategies:
[17:47:18.798] 1. multicore:
[17:47:18.798]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.798]    - tweaked: FALSE
[17:47:18.798]    - call: plan(multicore)
[17:47:18.801] plan(): nbrOfWorkers() = 1
[17:47:18.801] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[17:47:18.805] getGlobalsAndPackages() ...
[17:47:18.805] Searching for globals...
[17:47:18.807] - globals found: [2] ‘{’, ‘ii’
[17:47:18.808] Searching for globals ... DONE
[17:47:18.808] Resolving globals: FALSE
[17:47:18.808] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:18.808] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:18.809] - globals: [1] ‘ii’
[17:47:18.809] 
[17:47:18.809] getGlobalsAndPackages() ... DONE
[17:47:18.809] Packages needed by the future expression (n = 0): <none>
[17:47:18.809] Packages needed by future strategies (n = 0): <none>
[17:47:18.810] {
[17:47:18.810]     {
[17:47:18.810]         {
[17:47:18.810]             ...future.startTime <- base::Sys.time()
[17:47:18.810]             {
[17:47:18.810]                 {
[17:47:18.810]                   {
[17:47:18.810]                     base::local({
[17:47:18.810]                       has_future <- base::requireNamespace("future", 
[17:47:18.810]                         quietly = TRUE)
[17:47:18.810]                       if (has_future) {
[17:47:18.810]                         ns <- base::getNamespace("future")
[17:47:18.810]                         version <- ns[[".package"]][["version"]]
[17:47:18.810]                         if (is.null(version)) 
[17:47:18.810]                           version <- utils::packageVersion("future")
[17:47:18.810]                       }
[17:47:18.810]                       else {
[17:47:18.810]                         version <- NULL
[17:47:18.810]                       }
[17:47:18.810]                       if (!has_future || version < "1.8.0") {
[17:47:18.810]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.810]                           "", base::R.version$version.string), 
[17:47:18.810]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.810]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.810]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.810]                             "release", "version")], collapse = " "), 
[17:47:18.810]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.810]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.810]                           info)
[17:47:18.810]                         info <- base::paste(info, collapse = "; ")
[17:47:18.810]                         if (!has_future) {
[17:47:18.810]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.810]                             info)
[17:47:18.810]                         }
[17:47:18.810]                         else {
[17:47:18.810]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.810]                             info, version)
[17:47:18.810]                         }
[17:47:18.810]                         base::stop(msg)
[17:47:18.810]                       }
[17:47:18.810]                     })
[17:47:18.810]                   }
[17:47:18.810]                   ...future.strategy.old <- future::plan("list")
[17:47:18.810]                   options(future.plan = NULL)
[17:47:18.810]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.810]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.810]                 }
[17:47:18.810]                 ...future.workdir <- getwd()
[17:47:18.810]             }
[17:47:18.810]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.810]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.810]         }
[17:47:18.810]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.810]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.810]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.810]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.810]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.810]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.810]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.810]             base::names(...future.oldOptions))
[17:47:18.810]     }
[17:47:18.810]     if (FALSE) {
[17:47:18.810]     }
[17:47:18.810]     else {
[17:47:18.810]         if (TRUE) {
[17:47:18.810]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.810]                 open = "w")
[17:47:18.810]         }
[17:47:18.810]         else {
[17:47:18.810]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.810]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.810]         }
[17:47:18.810]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.810]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.810]             base::sink(type = "output", split = FALSE)
[17:47:18.810]             base::close(...future.stdout)
[17:47:18.810]         }, add = TRUE)
[17:47:18.810]     }
[17:47:18.810]     ...future.frame <- base::sys.nframe()
[17:47:18.810]     ...future.conditions <- base::list()
[17:47:18.810]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.810]     if (FALSE) {
[17:47:18.810]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.810]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.810]     }
[17:47:18.810]     ...future.result <- base::tryCatch({
[17:47:18.810]         base::withCallingHandlers({
[17:47:18.810]             ...future.value <- base::withVisible(base::local({
[17:47:18.810]                 ii
[17:47:18.810]             }))
[17:47:18.810]             future::FutureResult(value = ...future.value$value, 
[17:47:18.810]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.810]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.810]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.810]                     ...future.globalenv.names))
[17:47:18.810]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.810]         }, condition = base::local({
[17:47:18.810]             c <- base::c
[17:47:18.810]             inherits <- base::inherits
[17:47:18.810]             invokeRestart <- base::invokeRestart
[17:47:18.810]             length <- base::length
[17:47:18.810]             list <- base::list
[17:47:18.810]             seq.int <- base::seq.int
[17:47:18.810]             signalCondition <- base::signalCondition
[17:47:18.810]             sys.calls <- base::sys.calls
[17:47:18.810]             `[[` <- base::`[[`
[17:47:18.810]             `+` <- base::`+`
[17:47:18.810]             `<<-` <- base::`<<-`
[17:47:18.810]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.810]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.810]                   3L)]
[17:47:18.810]             }
[17:47:18.810]             function(cond) {
[17:47:18.810]                 is_error <- inherits(cond, "error")
[17:47:18.810]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.810]                   NULL)
[17:47:18.810]                 if (is_error) {
[17:47:18.810]                   sessionInformation <- function() {
[17:47:18.810]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.810]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.810]                       search = base::search(), system = base::Sys.info())
[17:47:18.810]                   }
[17:47:18.810]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.810]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.810]                     cond$call), session = sessionInformation(), 
[17:47:18.810]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.810]                   signalCondition(cond)
[17:47:18.810]                 }
[17:47:18.810]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.810]                 "immediateCondition"))) {
[17:47:18.810]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.810]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.810]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.810]                   if (TRUE && !signal) {
[17:47:18.810]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.810]                     {
[17:47:18.810]                       inherits <- base::inherits
[17:47:18.810]                       invokeRestart <- base::invokeRestart
[17:47:18.810]                       is.null <- base::is.null
[17:47:18.810]                       muffled <- FALSE
[17:47:18.810]                       if (inherits(cond, "message")) {
[17:47:18.810]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.810]                         if (muffled) 
[17:47:18.810]                           invokeRestart("muffleMessage")
[17:47:18.810]                       }
[17:47:18.810]                       else if (inherits(cond, "warning")) {
[17:47:18.810]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.810]                         if (muffled) 
[17:47:18.810]                           invokeRestart("muffleWarning")
[17:47:18.810]                       }
[17:47:18.810]                       else if (inherits(cond, "condition")) {
[17:47:18.810]                         if (!is.null(pattern)) {
[17:47:18.810]                           computeRestarts <- base::computeRestarts
[17:47:18.810]                           grepl <- base::grepl
[17:47:18.810]                           restarts <- computeRestarts(cond)
[17:47:18.810]                           for (restart in restarts) {
[17:47:18.810]                             name <- restart$name
[17:47:18.810]                             if (is.null(name)) 
[17:47:18.810]                               next
[17:47:18.810]                             if (!grepl(pattern, name)) 
[17:47:18.810]                               next
[17:47:18.810]                             invokeRestart(restart)
[17:47:18.810]                             muffled <- TRUE
[17:47:18.810]                             break
[17:47:18.810]                           }
[17:47:18.810]                         }
[17:47:18.810]                       }
[17:47:18.810]                       invisible(muffled)
[17:47:18.810]                     }
[17:47:18.810]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.810]                   }
[17:47:18.810]                 }
[17:47:18.810]                 else {
[17:47:18.810]                   if (TRUE) {
[17:47:18.810]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.810]                     {
[17:47:18.810]                       inherits <- base::inherits
[17:47:18.810]                       invokeRestart <- base::invokeRestart
[17:47:18.810]                       is.null <- base::is.null
[17:47:18.810]                       muffled <- FALSE
[17:47:18.810]                       if (inherits(cond, "message")) {
[17:47:18.810]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.810]                         if (muffled) 
[17:47:18.810]                           invokeRestart("muffleMessage")
[17:47:18.810]                       }
[17:47:18.810]                       else if (inherits(cond, "warning")) {
[17:47:18.810]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.810]                         if (muffled) 
[17:47:18.810]                           invokeRestart("muffleWarning")
[17:47:18.810]                       }
[17:47:18.810]                       else if (inherits(cond, "condition")) {
[17:47:18.810]                         if (!is.null(pattern)) {
[17:47:18.810]                           computeRestarts <- base::computeRestarts
[17:47:18.810]                           grepl <- base::grepl
[17:47:18.810]                           restarts <- computeRestarts(cond)
[17:47:18.810]                           for (restart in restarts) {
[17:47:18.810]                             name <- restart$name
[17:47:18.810]                             if (is.null(name)) 
[17:47:18.810]                               next
[17:47:18.810]                             if (!grepl(pattern, name)) 
[17:47:18.810]                               next
[17:47:18.810]                             invokeRestart(restart)
[17:47:18.810]                             muffled <- TRUE
[17:47:18.810]                             break
[17:47:18.810]                           }
[17:47:18.810]                         }
[17:47:18.810]                       }
[17:47:18.810]                       invisible(muffled)
[17:47:18.810]                     }
[17:47:18.810]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.810]                   }
[17:47:18.810]                 }
[17:47:18.810]             }
[17:47:18.810]         }))
[17:47:18.810]     }, error = function(ex) {
[17:47:18.810]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.810]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.810]                 ...future.rng), started = ...future.startTime, 
[17:47:18.810]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.810]             version = "1.8"), class = "FutureResult")
[17:47:18.810]     }, finally = {
[17:47:18.810]         if (!identical(...future.workdir, getwd())) 
[17:47:18.810]             setwd(...future.workdir)
[17:47:18.810]         {
[17:47:18.810]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.810]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.810]             }
[17:47:18.810]             base::options(...future.oldOptions)
[17:47:18.810]             if (.Platform$OS.type == "windows") {
[17:47:18.810]                 old_names <- names(...future.oldEnvVars)
[17:47:18.810]                 envs <- base::Sys.getenv()
[17:47:18.810]                 names <- names(envs)
[17:47:18.810]                 common <- intersect(names, old_names)
[17:47:18.810]                 added <- setdiff(names, old_names)
[17:47:18.810]                 removed <- setdiff(old_names, names)
[17:47:18.810]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.810]                   envs[common]]
[17:47:18.810]                 NAMES <- toupper(changed)
[17:47:18.810]                 args <- list()
[17:47:18.810]                 for (kk in seq_along(NAMES)) {
[17:47:18.810]                   name <- changed[[kk]]
[17:47:18.810]                   NAME <- NAMES[[kk]]
[17:47:18.810]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.810]                     next
[17:47:18.810]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.810]                 }
[17:47:18.810]                 NAMES <- toupper(added)
[17:47:18.810]                 for (kk in seq_along(NAMES)) {
[17:47:18.810]                   name <- added[[kk]]
[17:47:18.810]                   NAME <- NAMES[[kk]]
[17:47:18.810]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.810]                     next
[17:47:18.810]                   args[[name]] <- ""
[17:47:18.810]                 }
[17:47:18.810]                 NAMES <- toupper(removed)
[17:47:18.810]                 for (kk in seq_along(NAMES)) {
[17:47:18.810]                   name <- removed[[kk]]
[17:47:18.810]                   NAME <- NAMES[[kk]]
[17:47:18.810]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.810]                     next
[17:47:18.810]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.810]                 }
[17:47:18.810]                 if (length(args) > 0) 
[17:47:18.810]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.810]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.810]             }
[17:47:18.810]             else {
[17:47:18.810]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.810]             }
[17:47:18.810]             {
[17:47:18.810]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.810]                   0L) {
[17:47:18.810]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.810]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.810]                   base::options(opts)
[17:47:18.810]                 }
[17:47:18.810]                 {
[17:47:18.810]                   {
[17:47:18.810]                     NULL
[17:47:18.810]                     RNGkind("Mersenne-Twister")
[17:47:18.810]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.810]                       inherits = FALSE)
[17:47:18.810]                   }
[17:47:18.810]                   options(future.plan = NULL)
[17:47:18.810]                   if (is.na(NA_character_)) 
[17:47:18.810]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.810]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.810]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.810]                     .init = FALSE)
[17:47:18.810]                 }
[17:47:18.810]             }
[17:47:18.810]         }
[17:47:18.810]     })
[17:47:18.810]     if (TRUE) {
[17:47:18.810]         base::sink(type = "output", split = FALSE)
[17:47:18.810]         if (TRUE) {
[17:47:18.810]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.810]         }
[17:47:18.810]         else {
[17:47:18.810]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.810]         }
[17:47:18.810]         base::close(...future.stdout)
[17:47:18.810]         ...future.stdout <- NULL
[17:47:18.810]     }
[17:47:18.810]     ...future.result$conditions <- ...future.conditions
[17:47:18.810]     ...future.result$finished <- base::Sys.time()
[17:47:18.810]     ...future.result
[17:47:18.810] }
[17:47:18.811] assign_globals() ...
[17:47:18.811] List of 1
[17:47:18.811]  $ ii: int 4
[17:47:18.811]  - attr(*, "where")=List of 1
[17:47:18.811]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:18.811]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:18.811]  - attr(*, "resolved")= logi FALSE
[17:47:18.811]  - attr(*, "total_size")= num 56
[17:47:18.813] - copied ‘ii’ to environment
[17:47:18.814] assign_globals() ... done
[17:47:18.814] plan(): Setting new future strategy stack:
[17:47:18.814] List of future strategies:
[17:47:18.814] 1. sequential:
[17:47:18.814]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.814]    - tweaked: FALSE
[17:47:18.814]    - call: NULL
[17:47:18.814] plan(): nbrOfWorkers() = 1
[17:47:18.815] plan(): Setting new future strategy stack:
[17:47:18.815] List of future strategies:
[17:47:18.815] 1. multicore:
[17:47:18.815]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.815]    - tweaked: FALSE
[17:47:18.815]    - call: plan(multicore)
[17:47:18.818] plan(): nbrOfWorkers() = 1
[17:47:18.819] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = TRUE) and errors
[17:47:18.822] getGlobalsAndPackages() ...
[17:47:18.823] Searching for globals...
[17:47:18.824] - globals found: [2] ‘{’, ‘stop’
[17:47:18.824] Searching for globals ... DONE
[17:47:18.824] Resolving globals: FALSE
[17:47:18.824] 
[17:47:18.824] 
[17:47:18.824] getGlobalsAndPackages() ... DONE
[17:47:18.825] Packages needed by the future expression (n = 0): <none>
[17:47:18.825] Packages needed by future strategies (n = 0): <none>
[17:47:18.825] {
[17:47:18.825]     {
[17:47:18.825]         {
[17:47:18.825]             ...future.startTime <- base::Sys.time()
[17:47:18.825]             {
[17:47:18.825]                 {
[17:47:18.825]                   {
[17:47:18.825]                     base::local({
[17:47:18.825]                       has_future <- base::requireNamespace("future", 
[17:47:18.825]                         quietly = TRUE)
[17:47:18.825]                       if (has_future) {
[17:47:18.825]                         ns <- base::getNamespace("future")
[17:47:18.825]                         version <- ns[[".package"]][["version"]]
[17:47:18.825]                         if (is.null(version)) 
[17:47:18.825]                           version <- utils::packageVersion("future")
[17:47:18.825]                       }
[17:47:18.825]                       else {
[17:47:18.825]                         version <- NULL
[17:47:18.825]                       }
[17:47:18.825]                       if (!has_future || version < "1.8.0") {
[17:47:18.825]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.825]                           "", base::R.version$version.string), 
[17:47:18.825]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.825]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.825]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.825]                             "release", "version")], collapse = " "), 
[17:47:18.825]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.825]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.825]                           info)
[17:47:18.825]                         info <- base::paste(info, collapse = "; ")
[17:47:18.825]                         if (!has_future) {
[17:47:18.825]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.825]                             info)
[17:47:18.825]                         }
[17:47:18.825]                         else {
[17:47:18.825]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.825]                             info, version)
[17:47:18.825]                         }
[17:47:18.825]                         base::stop(msg)
[17:47:18.825]                       }
[17:47:18.825]                     })
[17:47:18.825]                   }
[17:47:18.825]                   ...future.strategy.old <- future::plan("list")
[17:47:18.825]                   options(future.plan = NULL)
[17:47:18.825]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.825]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.825]                 }
[17:47:18.825]                 ...future.workdir <- getwd()
[17:47:18.825]             }
[17:47:18.825]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.825]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.825]         }
[17:47:18.825]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.825]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.825]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.825]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.825]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.825]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.825]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.825]             base::names(...future.oldOptions))
[17:47:18.825]     }
[17:47:18.825]     if (FALSE) {
[17:47:18.825]     }
[17:47:18.825]     else {
[17:47:18.825]         if (TRUE) {
[17:47:18.825]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.825]                 open = "w")
[17:47:18.825]         }
[17:47:18.825]         else {
[17:47:18.825]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.825]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.825]         }
[17:47:18.825]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.825]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.825]             base::sink(type = "output", split = FALSE)
[17:47:18.825]             base::close(...future.stdout)
[17:47:18.825]         }, add = TRUE)
[17:47:18.825]     }
[17:47:18.825]     ...future.frame <- base::sys.nframe()
[17:47:18.825]     ...future.conditions <- base::list()
[17:47:18.825]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.825]     if (FALSE) {
[17:47:18.825]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.825]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.825]     }
[17:47:18.825]     ...future.result <- base::tryCatch({
[17:47:18.825]         base::withCallingHandlers({
[17:47:18.825]             ...future.value <- base::withVisible(base::local({
[17:47:18.825]                 stop("Whoops!")
[17:47:18.825]                 1
[17:47:18.825]             }))
[17:47:18.825]             future::FutureResult(value = ...future.value$value, 
[17:47:18.825]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.825]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.825]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.825]                     ...future.globalenv.names))
[17:47:18.825]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.825]         }, condition = base::local({
[17:47:18.825]             c <- base::c
[17:47:18.825]             inherits <- base::inherits
[17:47:18.825]             invokeRestart <- base::invokeRestart
[17:47:18.825]             length <- base::length
[17:47:18.825]             list <- base::list
[17:47:18.825]             seq.int <- base::seq.int
[17:47:18.825]             signalCondition <- base::signalCondition
[17:47:18.825]             sys.calls <- base::sys.calls
[17:47:18.825]             `[[` <- base::`[[`
[17:47:18.825]             `+` <- base::`+`
[17:47:18.825]             `<<-` <- base::`<<-`
[17:47:18.825]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.825]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.825]                   3L)]
[17:47:18.825]             }
[17:47:18.825]             function(cond) {
[17:47:18.825]                 is_error <- inherits(cond, "error")
[17:47:18.825]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.825]                   NULL)
[17:47:18.825]                 if (is_error) {
[17:47:18.825]                   sessionInformation <- function() {
[17:47:18.825]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.825]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.825]                       search = base::search(), system = base::Sys.info())
[17:47:18.825]                   }
[17:47:18.825]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.825]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.825]                     cond$call), session = sessionInformation(), 
[17:47:18.825]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.825]                   signalCondition(cond)
[17:47:18.825]                 }
[17:47:18.825]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.825]                 "immediateCondition"))) {
[17:47:18.825]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.825]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.825]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.825]                   if (TRUE && !signal) {
[17:47:18.825]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.825]                     {
[17:47:18.825]                       inherits <- base::inherits
[17:47:18.825]                       invokeRestart <- base::invokeRestart
[17:47:18.825]                       is.null <- base::is.null
[17:47:18.825]                       muffled <- FALSE
[17:47:18.825]                       if (inherits(cond, "message")) {
[17:47:18.825]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.825]                         if (muffled) 
[17:47:18.825]                           invokeRestart("muffleMessage")
[17:47:18.825]                       }
[17:47:18.825]                       else if (inherits(cond, "warning")) {
[17:47:18.825]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.825]                         if (muffled) 
[17:47:18.825]                           invokeRestart("muffleWarning")
[17:47:18.825]                       }
[17:47:18.825]                       else if (inherits(cond, "condition")) {
[17:47:18.825]                         if (!is.null(pattern)) {
[17:47:18.825]                           computeRestarts <- base::computeRestarts
[17:47:18.825]                           grepl <- base::grepl
[17:47:18.825]                           restarts <- computeRestarts(cond)
[17:47:18.825]                           for (restart in restarts) {
[17:47:18.825]                             name <- restart$name
[17:47:18.825]                             if (is.null(name)) 
[17:47:18.825]                               next
[17:47:18.825]                             if (!grepl(pattern, name)) 
[17:47:18.825]                               next
[17:47:18.825]                             invokeRestart(restart)
[17:47:18.825]                             muffled <- TRUE
[17:47:18.825]                             break
[17:47:18.825]                           }
[17:47:18.825]                         }
[17:47:18.825]                       }
[17:47:18.825]                       invisible(muffled)
[17:47:18.825]                     }
[17:47:18.825]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.825]                   }
[17:47:18.825]                 }
[17:47:18.825]                 else {
[17:47:18.825]                   if (TRUE) {
[17:47:18.825]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.825]                     {
[17:47:18.825]                       inherits <- base::inherits
[17:47:18.825]                       invokeRestart <- base::invokeRestart
[17:47:18.825]                       is.null <- base::is.null
[17:47:18.825]                       muffled <- FALSE
[17:47:18.825]                       if (inherits(cond, "message")) {
[17:47:18.825]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.825]                         if (muffled) 
[17:47:18.825]                           invokeRestart("muffleMessage")
[17:47:18.825]                       }
[17:47:18.825]                       else if (inherits(cond, "warning")) {
[17:47:18.825]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.825]                         if (muffled) 
[17:47:18.825]                           invokeRestart("muffleWarning")
[17:47:18.825]                       }
[17:47:18.825]                       else if (inherits(cond, "condition")) {
[17:47:18.825]                         if (!is.null(pattern)) {
[17:47:18.825]                           computeRestarts <- base::computeRestarts
[17:47:18.825]                           grepl <- base::grepl
[17:47:18.825]                           restarts <- computeRestarts(cond)
[17:47:18.825]                           for (restart in restarts) {
[17:47:18.825]                             name <- restart$name
[17:47:18.825]                             if (is.null(name)) 
[17:47:18.825]                               next
[17:47:18.825]                             if (!grepl(pattern, name)) 
[17:47:18.825]                               next
[17:47:18.825]                             invokeRestart(restart)
[17:47:18.825]                             muffled <- TRUE
[17:47:18.825]                             break
[17:47:18.825]                           }
[17:47:18.825]                         }
[17:47:18.825]                       }
[17:47:18.825]                       invisible(muffled)
[17:47:18.825]                     }
[17:47:18.825]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.825]                   }
[17:47:18.825]                 }
[17:47:18.825]             }
[17:47:18.825]         }))
[17:47:18.825]     }, error = function(ex) {
[17:47:18.825]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.825]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.825]                 ...future.rng), started = ...future.startTime, 
[17:47:18.825]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.825]             version = "1.8"), class = "FutureResult")
[17:47:18.825]     }, finally = {
[17:47:18.825]         if (!identical(...future.workdir, getwd())) 
[17:47:18.825]             setwd(...future.workdir)
[17:47:18.825]         {
[17:47:18.825]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.825]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.825]             }
[17:47:18.825]             base::options(...future.oldOptions)
[17:47:18.825]             if (.Platform$OS.type == "windows") {
[17:47:18.825]                 old_names <- names(...future.oldEnvVars)
[17:47:18.825]                 envs <- base::Sys.getenv()
[17:47:18.825]                 names <- names(envs)
[17:47:18.825]                 common <- intersect(names, old_names)
[17:47:18.825]                 added <- setdiff(names, old_names)
[17:47:18.825]                 removed <- setdiff(old_names, names)
[17:47:18.825]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.825]                   envs[common]]
[17:47:18.825]                 NAMES <- toupper(changed)
[17:47:18.825]                 args <- list()
[17:47:18.825]                 for (kk in seq_along(NAMES)) {
[17:47:18.825]                   name <- changed[[kk]]
[17:47:18.825]                   NAME <- NAMES[[kk]]
[17:47:18.825]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.825]                     next
[17:47:18.825]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.825]                 }
[17:47:18.825]                 NAMES <- toupper(added)
[17:47:18.825]                 for (kk in seq_along(NAMES)) {
[17:47:18.825]                   name <- added[[kk]]
[17:47:18.825]                   NAME <- NAMES[[kk]]
[17:47:18.825]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.825]                     next
[17:47:18.825]                   args[[name]] <- ""
[17:47:18.825]                 }
[17:47:18.825]                 NAMES <- toupper(removed)
[17:47:18.825]                 for (kk in seq_along(NAMES)) {
[17:47:18.825]                   name <- removed[[kk]]
[17:47:18.825]                   NAME <- NAMES[[kk]]
[17:47:18.825]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.825]                     next
[17:47:18.825]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.825]                 }
[17:47:18.825]                 if (length(args) > 0) 
[17:47:18.825]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.825]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.825]             }
[17:47:18.825]             else {
[17:47:18.825]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.825]             }
[17:47:18.825]             {
[17:47:18.825]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.825]                   0L) {
[17:47:18.825]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.825]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.825]                   base::options(opts)
[17:47:18.825]                 }
[17:47:18.825]                 {
[17:47:18.825]                   {
[17:47:18.825]                     NULL
[17:47:18.825]                     RNGkind("Mersenne-Twister")
[17:47:18.825]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.825]                       inherits = FALSE)
[17:47:18.825]                   }
[17:47:18.825]                   options(future.plan = NULL)
[17:47:18.825]                   if (is.na(NA_character_)) 
[17:47:18.825]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.825]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.825]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.825]                     .init = FALSE)
[17:47:18.825]                 }
[17:47:18.825]             }
[17:47:18.825]         }
[17:47:18.825]     })
[17:47:18.825]     if (TRUE) {
[17:47:18.825]         base::sink(type = "output", split = FALSE)
[17:47:18.825]         if (TRUE) {
[17:47:18.825]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.825]         }
[17:47:18.825]         else {
[17:47:18.825]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.825]         }
[17:47:18.825]         base::close(...future.stdout)
[17:47:18.825]         ...future.stdout <- NULL
[17:47:18.825]     }
[17:47:18.825]     ...future.result$conditions <- ...future.conditions
[17:47:18.825]     ...future.result$finished <- base::Sys.time()
[17:47:18.825]     ...future.result
[17:47:18.825] }
[17:47:18.827] plan(): Setting new future strategy stack:
[17:47:18.827] List of future strategies:
[17:47:18.827] 1. sequential:
[17:47:18.827]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.827]    - tweaked: FALSE
[17:47:18.827]    - call: NULL
[17:47:18.827] plan(): nbrOfWorkers() = 1
[17:47:18.828] plan(): Setting new future strategy stack:
[17:47:18.828] List of future strategies:
[17:47:18.828] 1. multicore:
[17:47:18.828]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.828]    - tweaked: FALSE
[17:47:18.828]    - call: plan(multicore)
[17:47:18.832] plan(): nbrOfWorkers() = 1
[17:47:18.832] SequentialFuture started (and completed)
[17:47:18.832] signalConditions() ...
[17:47:18.832]  - include = ‘immediateCondition’
[17:47:18.832]  - exclude = 
[17:47:18.832]  - resignal = FALSE
[17:47:18.832]  - Number of conditions: 1
[17:47:18.833] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:18.833] signalConditions() ...
[17:47:18.833]  - include = ‘immediateCondition’
[17:47:18.833]  - exclude = 
[17:47:18.833]  - resignal = FALSE
[17:47:18.833]  - Number of conditions: 1
[17:47:18.834] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:18.834] signalConditions() ...
[17:47:18.834]  - include = ‘immediateCondition’
[17:47:18.834]  - exclude = 
[17:47:18.834]  - resignal = FALSE
[17:47:18.834]  - Number of conditions: 1
[17:47:18.834] signalConditions() ... done
[17:47:18.834] Future state: ‘finished’
[17:47:18.834] signalConditions() ...
[17:47:18.835]  - include = ‘condition’
[17:47:18.835]  - exclude = ‘immediateCondition’
[17:47:18.835]  - resignal = TRUE
[17:47:18.835]  - Number of conditions: 1
[17:47:18.835]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:18.835] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:18.835] signalConditions() ...
[17:47:18.835]  - include = ‘immediateCondition’
[17:47:18.836]  - exclude = 
[17:47:18.836]  - resignal = FALSE
[17:47:18.836]  - Number of conditions: 1
[17:47:18.836] signalConditions() ... done
[17:47:18.836] Future state: ‘finished’
[17:47:18.836] signalConditions() ...
[17:47:18.836]  - include = ‘condition’
[17:47:18.836]  - exclude = ‘immediateCondition’
[17:47:18.836]  - resignal = TRUE
[17:47:18.836]  - Number of conditions: 1
[17:47:18.836]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:18.837] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[17:47:18.840] getGlobalsAndPackages() ...
[17:47:18.840] Searching for globals...
[17:47:18.841] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[17:47:18.841] Searching for globals ... DONE
[17:47:18.842] Resolving globals: FALSE
[17:47:18.842] 
[17:47:18.842] 
[17:47:18.842] getGlobalsAndPackages() ... DONE
[17:47:18.842] Packages needed by the future expression (n = 0): <none>
[17:47:18.843] Packages needed by future strategies (n = 0): <none>
[17:47:18.843] {
[17:47:18.843]     {
[17:47:18.843]         {
[17:47:18.843]             ...future.startTime <- base::Sys.time()
[17:47:18.843]             {
[17:47:18.843]                 {
[17:47:18.843]                   {
[17:47:18.843]                     base::local({
[17:47:18.843]                       has_future <- base::requireNamespace("future", 
[17:47:18.843]                         quietly = TRUE)
[17:47:18.843]                       if (has_future) {
[17:47:18.843]                         ns <- base::getNamespace("future")
[17:47:18.843]                         version <- ns[[".package"]][["version"]]
[17:47:18.843]                         if (is.null(version)) 
[17:47:18.843]                           version <- utils::packageVersion("future")
[17:47:18.843]                       }
[17:47:18.843]                       else {
[17:47:18.843]                         version <- NULL
[17:47:18.843]                       }
[17:47:18.843]                       if (!has_future || version < "1.8.0") {
[17:47:18.843]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.843]                           "", base::R.version$version.string), 
[17:47:18.843]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.843]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.843]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.843]                             "release", "version")], collapse = " "), 
[17:47:18.843]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.843]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.843]                           info)
[17:47:18.843]                         info <- base::paste(info, collapse = "; ")
[17:47:18.843]                         if (!has_future) {
[17:47:18.843]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.843]                             info)
[17:47:18.843]                         }
[17:47:18.843]                         else {
[17:47:18.843]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.843]                             info, version)
[17:47:18.843]                         }
[17:47:18.843]                         base::stop(msg)
[17:47:18.843]                       }
[17:47:18.843]                     })
[17:47:18.843]                   }
[17:47:18.843]                   ...future.strategy.old <- future::plan("list")
[17:47:18.843]                   options(future.plan = NULL)
[17:47:18.843]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.843]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.843]                 }
[17:47:18.843]                 ...future.workdir <- getwd()
[17:47:18.843]             }
[17:47:18.843]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.843]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.843]         }
[17:47:18.843]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.843]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.843]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.843]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.843]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.843]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.843]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.843]             base::names(...future.oldOptions))
[17:47:18.843]     }
[17:47:18.843]     if (FALSE) {
[17:47:18.843]     }
[17:47:18.843]     else {
[17:47:18.843]         if (TRUE) {
[17:47:18.843]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.843]                 open = "w")
[17:47:18.843]         }
[17:47:18.843]         else {
[17:47:18.843]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.843]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.843]         }
[17:47:18.843]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.843]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.843]             base::sink(type = "output", split = FALSE)
[17:47:18.843]             base::close(...future.stdout)
[17:47:18.843]         }, add = TRUE)
[17:47:18.843]     }
[17:47:18.843]     ...future.frame <- base::sys.nframe()
[17:47:18.843]     ...future.conditions <- base::list()
[17:47:18.843]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.843]     if (FALSE) {
[17:47:18.843]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.843]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.843]     }
[17:47:18.843]     ...future.result <- base::tryCatch({
[17:47:18.843]         base::withCallingHandlers({
[17:47:18.843]             ...future.value <- base::withVisible(base::local({
[17:47:18.843]                 stop(structure(list(message = "boom"), class = c("MyError", 
[17:47:18.843]                   "error", "condition")))
[17:47:18.843]             }))
[17:47:18.843]             future::FutureResult(value = ...future.value$value, 
[17:47:18.843]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.843]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.843]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.843]                     ...future.globalenv.names))
[17:47:18.843]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.843]         }, condition = base::local({
[17:47:18.843]             c <- base::c
[17:47:18.843]             inherits <- base::inherits
[17:47:18.843]             invokeRestart <- base::invokeRestart
[17:47:18.843]             length <- base::length
[17:47:18.843]             list <- base::list
[17:47:18.843]             seq.int <- base::seq.int
[17:47:18.843]             signalCondition <- base::signalCondition
[17:47:18.843]             sys.calls <- base::sys.calls
[17:47:18.843]             `[[` <- base::`[[`
[17:47:18.843]             `+` <- base::`+`
[17:47:18.843]             `<<-` <- base::`<<-`
[17:47:18.843]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.843]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.843]                   3L)]
[17:47:18.843]             }
[17:47:18.843]             function(cond) {
[17:47:18.843]                 is_error <- inherits(cond, "error")
[17:47:18.843]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.843]                   NULL)
[17:47:18.843]                 if (is_error) {
[17:47:18.843]                   sessionInformation <- function() {
[17:47:18.843]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.843]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.843]                       search = base::search(), system = base::Sys.info())
[17:47:18.843]                   }
[17:47:18.843]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.843]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.843]                     cond$call), session = sessionInformation(), 
[17:47:18.843]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.843]                   signalCondition(cond)
[17:47:18.843]                 }
[17:47:18.843]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.843]                 "immediateCondition"))) {
[17:47:18.843]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.843]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.843]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.843]                   if (TRUE && !signal) {
[17:47:18.843]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.843]                     {
[17:47:18.843]                       inherits <- base::inherits
[17:47:18.843]                       invokeRestart <- base::invokeRestart
[17:47:18.843]                       is.null <- base::is.null
[17:47:18.843]                       muffled <- FALSE
[17:47:18.843]                       if (inherits(cond, "message")) {
[17:47:18.843]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.843]                         if (muffled) 
[17:47:18.843]                           invokeRestart("muffleMessage")
[17:47:18.843]                       }
[17:47:18.843]                       else if (inherits(cond, "warning")) {
[17:47:18.843]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.843]                         if (muffled) 
[17:47:18.843]                           invokeRestart("muffleWarning")
[17:47:18.843]                       }
[17:47:18.843]                       else if (inherits(cond, "condition")) {
[17:47:18.843]                         if (!is.null(pattern)) {
[17:47:18.843]                           computeRestarts <- base::computeRestarts
[17:47:18.843]                           grepl <- base::grepl
[17:47:18.843]                           restarts <- computeRestarts(cond)
[17:47:18.843]                           for (restart in restarts) {
[17:47:18.843]                             name <- restart$name
[17:47:18.843]                             if (is.null(name)) 
[17:47:18.843]                               next
[17:47:18.843]                             if (!grepl(pattern, name)) 
[17:47:18.843]                               next
[17:47:18.843]                             invokeRestart(restart)
[17:47:18.843]                             muffled <- TRUE
[17:47:18.843]                             break
[17:47:18.843]                           }
[17:47:18.843]                         }
[17:47:18.843]                       }
[17:47:18.843]                       invisible(muffled)
[17:47:18.843]                     }
[17:47:18.843]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.843]                   }
[17:47:18.843]                 }
[17:47:18.843]                 else {
[17:47:18.843]                   if (TRUE) {
[17:47:18.843]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.843]                     {
[17:47:18.843]                       inherits <- base::inherits
[17:47:18.843]                       invokeRestart <- base::invokeRestart
[17:47:18.843]                       is.null <- base::is.null
[17:47:18.843]                       muffled <- FALSE
[17:47:18.843]                       if (inherits(cond, "message")) {
[17:47:18.843]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.843]                         if (muffled) 
[17:47:18.843]                           invokeRestart("muffleMessage")
[17:47:18.843]                       }
[17:47:18.843]                       else if (inherits(cond, "warning")) {
[17:47:18.843]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.843]                         if (muffled) 
[17:47:18.843]                           invokeRestart("muffleWarning")
[17:47:18.843]                       }
[17:47:18.843]                       else if (inherits(cond, "condition")) {
[17:47:18.843]                         if (!is.null(pattern)) {
[17:47:18.843]                           computeRestarts <- base::computeRestarts
[17:47:18.843]                           grepl <- base::grepl
[17:47:18.843]                           restarts <- computeRestarts(cond)
[17:47:18.843]                           for (restart in restarts) {
[17:47:18.843]                             name <- restart$name
[17:47:18.843]                             if (is.null(name)) 
[17:47:18.843]                               next
[17:47:18.843]                             if (!grepl(pattern, name)) 
[17:47:18.843]                               next
[17:47:18.843]                             invokeRestart(restart)
[17:47:18.843]                             muffled <- TRUE
[17:47:18.843]                             break
[17:47:18.843]                           }
[17:47:18.843]                         }
[17:47:18.843]                       }
[17:47:18.843]                       invisible(muffled)
[17:47:18.843]                     }
[17:47:18.843]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.843]                   }
[17:47:18.843]                 }
[17:47:18.843]             }
[17:47:18.843]         }))
[17:47:18.843]     }, error = function(ex) {
[17:47:18.843]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.843]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.843]                 ...future.rng), started = ...future.startTime, 
[17:47:18.843]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.843]             version = "1.8"), class = "FutureResult")
[17:47:18.843]     }, finally = {
[17:47:18.843]         if (!identical(...future.workdir, getwd())) 
[17:47:18.843]             setwd(...future.workdir)
[17:47:18.843]         {
[17:47:18.843]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.843]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.843]             }
[17:47:18.843]             base::options(...future.oldOptions)
[17:47:18.843]             if (.Platform$OS.type == "windows") {
[17:47:18.843]                 old_names <- names(...future.oldEnvVars)
[17:47:18.843]                 envs <- base::Sys.getenv()
[17:47:18.843]                 names <- names(envs)
[17:47:18.843]                 common <- intersect(names, old_names)
[17:47:18.843]                 added <- setdiff(names, old_names)
[17:47:18.843]                 removed <- setdiff(old_names, names)
[17:47:18.843]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.843]                   envs[common]]
[17:47:18.843]                 NAMES <- toupper(changed)
[17:47:18.843]                 args <- list()
[17:47:18.843]                 for (kk in seq_along(NAMES)) {
[17:47:18.843]                   name <- changed[[kk]]
[17:47:18.843]                   NAME <- NAMES[[kk]]
[17:47:18.843]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.843]                     next
[17:47:18.843]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.843]                 }
[17:47:18.843]                 NAMES <- toupper(added)
[17:47:18.843]                 for (kk in seq_along(NAMES)) {
[17:47:18.843]                   name <- added[[kk]]
[17:47:18.843]                   NAME <- NAMES[[kk]]
[17:47:18.843]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.843]                     next
[17:47:18.843]                   args[[name]] <- ""
[17:47:18.843]                 }
[17:47:18.843]                 NAMES <- toupper(removed)
[17:47:18.843]                 for (kk in seq_along(NAMES)) {
[17:47:18.843]                   name <- removed[[kk]]
[17:47:18.843]                   NAME <- NAMES[[kk]]
[17:47:18.843]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.843]                     next
[17:47:18.843]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.843]                 }
[17:47:18.843]                 if (length(args) > 0) 
[17:47:18.843]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.843]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.843]             }
[17:47:18.843]             else {
[17:47:18.843]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.843]             }
[17:47:18.843]             {
[17:47:18.843]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.843]                   0L) {
[17:47:18.843]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.843]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.843]                   base::options(opts)
[17:47:18.843]                 }
[17:47:18.843]                 {
[17:47:18.843]                   {
[17:47:18.843]                     NULL
[17:47:18.843]                     RNGkind("Mersenne-Twister")
[17:47:18.843]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.843]                       inherits = FALSE)
[17:47:18.843]                   }
[17:47:18.843]                   options(future.plan = NULL)
[17:47:18.843]                   if (is.na(NA_character_)) 
[17:47:18.843]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.843]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.843]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.843]                     .init = FALSE)
[17:47:18.843]                 }
[17:47:18.843]             }
[17:47:18.843]         }
[17:47:18.843]     })
[17:47:18.843]     if (TRUE) {
[17:47:18.843]         base::sink(type = "output", split = FALSE)
[17:47:18.843]         if (TRUE) {
[17:47:18.843]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.843]         }
[17:47:18.843]         else {
[17:47:18.843]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.843]         }
[17:47:18.843]         base::close(...future.stdout)
[17:47:18.843]         ...future.stdout <- NULL
[17:47:18.843]     }
[17:47:18.843]     ...future.result$conditions <- ...future.conditions
[17:47:18.843]     ...future.result$finished <- base::Sys.time()
[17:47:18.843]     ...future.result
[17:47:18.843] }
[17:47:18.845] plan(): Setting new future strategy stack:
[17:47:18.845] List of future strategies:
[17:47:18.845] 1. sequential:
[17:47:18.845]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.845]    - tweaked: FALSE
[17:47:18.845]    - call: NULL
[17:47:18.845] plan(): nbrOfWorkers() = 1
[17:47:18.846] plan(): Setting new future strategy stack:
[17:47:18.846] List of future strategies:
[17:47:18.846] 1. multicore:
[17:47:18.846]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.846]    - tweaked: FALSE
[17:47:18.846]    - call: plan(multicore)
[17:47:18.852] plan(): nbrOfWorkers() = 1
[17:47:18.852] SequentialFuture started (and completed)
[17:47:18.852] signalConditions() ...
[17:47:18.852]  - include = ‘immediateCondition’
[17:47:18.852]  - exclude = 
[17:47:18.852]  - resignal = FALSE
[17:47:18.852]  - Number of conditions: 1
[17:47:18.853] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:47:18.853] signalConditions() ...
[17:47:18.853]  - include = ‘immediateCondition’
[17:47:18.853]  - exclude = 
[17:47:18.853]  - resignal = FALSE
[17:47:18.853]  - Number of conditions: 1
[17:47:18.854] signalConditions() ... done
<MyError: boom>
[17:47:18.854] signalConditions() ...
[17:47:18.854]  - include = ‘immediateCondition’
[17:47:18.854]  - exclude = 
[17:47:18.854]  - resignal = FALSE
[17:47:18.854]  - Number of conditions: 1
[17:47:18.854] signalConditions() ... done
[17:47:18.854] Future state: ‘finished’
[17:47:18.854] signalConditions() ...
[17:47:18.854]  - include = ‘condition’
[17:47:18.855]  - exclude = ‘immediateCondition’
[17:47:18.855]  - resignal = TRUE
[17:47:18.855]  - Number of conditions: 1
[17:47:18.855]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:47:18.855] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[17:47:18.855] getGlobalsAndPackages() ...
[17:47:18.855] Searching for globals...
[17:47:18.856] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:47:18.856] Searching for globals ... DONE
[17:47:18.856] Resolving globals: FALSE
[17:47:18.857] The total size of the 2 globals is 112 bytes (112 bytes)
[17:47:18.857] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:47:18.857] - globals: [2] ‘a’, ‘b’
[17:47:18.857] 
[17:47:18.857] getGlobalsAndPackages() ... DONE
[17:47:18.858] Packages needed by the future expression (n = 0): <none>
[17:47:18.858] Packages needed by future strategies (n = 0): <none>
[17:47:18.858] {
[17:47:18.858]     {
[17:47:18.858]         {
[17:47:18.858]             ...future.startTime <- base::Sys.time()
[17:47:18.858]             {
[17:47:18.858]                 {
[17:47:18.858]                   {
[17:47:18.858]                     base::local({
[17:47:18.858]                       has_future <- base::requireNamespace("future", 
[17:47:18.858]                         quietly = TRUE)
[17:47:18.858]                       if (has_future) {
[17:47:18.858]                         ns <- base::getNamespace("future")
[17:47:18.858]                         version <- ns[[".package"]][["version"]]
[17:47:18.858]                         if (is.null(version)) 
[17:47:18.858]                           version <- utils::packageVersion("future")
[17:47:18.858]                       }
[17:47:18.858]                       else {
[17:47:18.858]                         version <- NULL
[17:47:18.858]                       }
[17:47:18.858]                       if (!has_future || version < "1.8.0") {
[17:47:18.858]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.858]                           "", base::R.version$version.string), 
[17:47:18.858]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:18.858]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.858]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.858]                             "release", "version")], collapse = " "), 
[17:47:18.858]                           hostname = base::Sys.info()[["nodename"]])
[17:47:18.858]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.858]                           info)
[17:47:18.858]                         info <- base::paste(info, collapse = "; ")
[17:47:18.858]                         if (!has_future) {
[17:47:18.858]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.858]                             info)
[17:47:18.858]                         }
[17:47:18.858]                         else {
[17:47:18.858]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.858]                             info, version)
[17:47:18.858]                         }
[17:47:18.858]                         base::stop(msg)
[17:47:18.858]                       }
[17:47:18.858]                     })
[17:47:18.858]                   }
[17:47:18.858]                   ...future.strategy.old <- future::plan("list")
[17:47:18.858]                   options(future.plan = NULL)
[17:47:18.858]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.858]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.858]                 }
[17:47:18.858]                 ...future.workdir <- getwd()
[17:47:18.858]             }
[17:47:18.858]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.858]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.858]         }
[17:47:18.858]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.858]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.858]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.858]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.858]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.858]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.858]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.858]             base::names(...future.oldOptions))
[17:47:18.858]     }
[17:47:18.858]     if (FALSE) {
[17:47:18.858]     }
[17:47:18.858]     else {
[17:47:18.858]         if (TRUE) {
[17:47:18.858]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.858]                 open = "w")
[17:47:18.858]         }
[17:47:18.858]         else {
[17:47:18.858]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.858]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.858]         }
[17:47:18.858]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.858]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.858]             base::sink(type = "output", split = FALSE)
[17:47:18.858]             base::close(...future.stdout)
[17:47:18.858]         }, add = TRUE)
[17:47:18.858]     }
[17:47:18.858]     ...future.frame <- base::sys.nframe()
[17:47:18.858]     ...future.conditions <- base::list()
[17:47:18.858]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.858]     if (FALSE) {
[17:47:18.858]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.858]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.858]     }
[17:47:18.858]     ...future.result <- base::tryCatch({
[17:47:18.858]         base::withCallingHandlers({
[17:47:18.858]             ...future.value <- base::withVisible(base::local({
[17:47:18.858]                 a * b
[17:47:18.858]             }))
[17:47:18.858]             future::FutureResult(value = ...future.value$value, 
[17:47:18.858]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.858]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.858]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.858]                     ...future.globalenv.names))
[17:47:18.858]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.858]         }, condition = base::local({
[17:47:18.858]             c <- base::c
[17:47:18.858]             inherits <- base::inherits
[17:47:18.858]             invokeRestart <- base::invokeRestart
[17:47:18.858]             length <- base::length
[17:47:18.858]             list <- base::list
[17:47:18.858]             seq.int <- base::seq.int
[17:47:18.858]             signalCondition <- base::signalCondition
[17:47:18.858]             sys.calls <- base::sys.calls
[17:47:18.858]             `[[` <- base::`[[`
[17:47:18.858]             `+` <- base::`+`
[17:47:18.858]             `<<-` <- base::`<<-`
[17:47:18.858]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.858]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.858]                   3L)]
[17:47:18.858]             }
[17:47:18.858]             function(cond) {
[17:47:18.858]                 is_error <- inherits(cond, "error")
[17:47:18.858]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.858]                   NULL)
[17:47:18.858]                 if (is_error) {
[17:47:18.858]                   sessionInformation <- function() {
[17:47:18.858]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.858]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.858]                       search = base::search(), system = base::Sys.info())
[17:47:18.858]                   }
[17:47:18.858]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.858]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.858]                     cond$call), session = sessionInformation(), 
[17:47:18.858]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.858]                   signalCondition(cond)
[17:47:18.858]                 }
[17:47:18.858]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.858]                 "immediateCondition"))) {
[17:47:18.858]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.858]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.858]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.858]                   if (TRUE && !signal) {
[17:47:18.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.858]                     {
[17:47:18.858]                       inherits <- base::inherits
[17:47:18.858]                       invokeRestart <- base::invokeRestart
[17:47:18.858]                       is.null <- base::is.null
[17:47:18.858]                       muffled <- FALSE
[17:47:18.858]                       if (inherits(cond, "message")) {
[17:47:18.858]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.858]                         if (muffled) 
[17:47:18.858]                           invokeRestart("muffleMessage")
[17:47:18.858]                       }
[17:47:18.858]                       else if (inherits(cond, "warning")) {
[17:47:18.858]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.858]                         if (muffled) 
[17:47:18.858]                           invokeRestart("muffleWarning")
[17:47:18.858]                       }
[17:47:18.858]                       else if (inherits(cond, "condition")) {
[17:47:18.858]                         if (!is.null(pattern)) {
[17:47:18.858]                           computeRestarts <- base::computeRestarts
[17:47:18.858]                           grepl <- base::grepl
[17:47:18.858]                           restarts <- computeRestarts(cond)
[17:47:18.858]                           for (restart in restarts) {
[17:47:18.858]                             name <- restart$name
[17:47:18.858]                             if (is.null(name)) 
[17:47:18.858]                               next
[17:47:18.858]                             if (!grepl(pattern, name)) 
[17:47:18.858]                               next
[17:47:18.858]                             invokeRestart(restart)
[17:47:18.858]                             muffled <- TRUE
[17:47:18.858]                             break
[17:47:18.858]                           }
[17:47:18.858]                         }
[17:47:18.858]                       }
[17:47:18.858]                       invisible(muffled)
[17:47:18.858]                     }
[17:47:18.858]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.858]                   }
[17:47:18.858]                 }
[17:47:18.858]                 else {
[17:47:18.858]                   if (TRUE) {
[17:47:18.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.858]                     {
[17:47:18.858]                       inherits <- base::inherits
[17:47:18.858]                       invokeRestart <- base::invokeRestart
[17:47:18.858]                       is.null <- base::is.null
[17:47:18.858]                       muffled <- FALSE
[17:47:18.858]                       if (inherits(cond, "message")) {
[17:47:18.858]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.858]                         if (muffled) 
[17:47:18.858]                           invokeRestart("muffleMessage")
[17:47:18.858]                       }
[17:47:18.858]                       else if (inherits(cond, "warning")) {
[17:47:18.858]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.858]                         if (muffled) 
[17:47:18.858]                           invokeRestart("muffleWarning")
[17:47:18.858]                       }
[17:47:18.858]                       else if (inherits(cond, "condition")) {
[17:47:18.858]                         if (!is.null(pattern)) {
[17:47:18.858]                           computeRestarts <- base::computeRestarts
[17:47:18.858]                           grepl <- base::grepl
[17:47:18.858]                           restarts <- computeRestarts(cond)
[17:47:18.858]                           for (restart in restarts) {
[17:47:18.858]                             name <- restart$name
[17:47:18.858]                             if (is.null(name)) 
[17:47:18.858]                               next
[17:47:18.858]                             if (!grepl(pattern, name)) 
[17:47:18.858]                               next
[17:47:18.858]                             invokeRestart(restart)
[17:47:18.858]                             muffled <- TRUE
[17:47:18.858]                             break
[17:47:18.858]                           }
[17:47:18.858]                         }
[17:47:18.858]                       }
[17:47:18.858]                       invisible(muffled)
[17:47:18.858]                     }
[17:47:18.858]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.858]                   }
[17:47:18.858]                 }
[17:47:18.858]             }
[17:47:18.858]         }))
[17:47:18.858]     }, error = function(ex) {
[17:47:18.858]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.858]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.858]                 ...future.rng), started = ...future.startTime, 
[17:47:18.858]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.858]             version = "1.8"), class = "FutureResult")
[17:47:18.858]     }, finally = {
[17:47:18.858]         if (!identical(...future.workdir, getwd())) 
[17:47:18.858]             setwd(...future.workdir)
[17:47:18.858]         {
[17:47:18.858]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.858]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.858]             }
[17:47:18.858]             base::options(...future.oldOptions)
[17:47:18.858]             if (.Platform$OS.type == "windows") {
[17:47:18.858]                 old_names <- names(...future.oldEnvVars)
[17:47:18.858]                 envs <- base::Sys.getenv()
[17:47:18.858]                 names <- names(envs)
[17:47:18.858]                 common <- intersect(names, old_names)
[17:47:18.858]                 added <- setdiff(names, old_names)
[17:47:18.858]                 removed <- setdiff(old_names, names)
[17:47:18.858]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.858]                   envs[common]]
[17:47:18.858]                 NAMES <- toupper(changed)
[17:47:18.858]                 args <- list()
[17:47:18.858]                 for (kk in seq_along(NAMES)) {
[17:47:18.858]                   name <- changed[[kk]]
[17:47:18.858]                   NAME <- NAMES[[kk]]
[17:47:18.858]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.858]                     next
[17:47:18.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.858]                 }
[17:47:18.858]                 NAMES <- toupper(added)
[17:47:18.858]                 for (kk in seq_along(NAMES)) {
[17:47:18.858]                   name <- added[[kk]]
[17:47:18.858]                   NAME <- NAMES[[kk]]
[17:47:18.858]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.858]                     next
[17:47:18.858]                   args[[name]] <- ""
[17:47:18.858]                 }
[17:47:18.858]                 NAMES <- toupper(removed)
[17:47:18.858]                 for (kk in seq_along(NAMES)) {
[17:47:18.858]                   name <- removed[[kk]]
[17:47:18.858]                   NAME <- NAMES[[kk]]
[17:47:18.858]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.858]                     next
[17:47:18.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.858]                 }
[17:47:18.858]                 if (length(args) > 0) 
[17:47:18.858]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.858]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.858]             }
[17:47:18.858]             else {
[17:47:18.858]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.858]             }
[17:47:18.858]             {
[17:47:18.858]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.858]                   0L) {
[17:47:18.858]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.858]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.858]                   base::options(opts)
[17:47:18.858]                 }
[17:47:18.858]                 {
[17:47:18.858]                   {
[17:47:18.858]                     NULL
[17:47:18.858]                     RNGkind("Mersenne-Twister")
[17:47:18.858]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:18.858]                       inherits = FALSE)
[17:47:18.858]                   }
[17:47:18.858]                   options(future.plan = NULL)
[17:47:18.858]                   if (is.na(NA_character_)) 
[17:47:18.858]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.858]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.858]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.858]                     .init = FALSE)
[17:47:18.858]                 }
[17:47:18.858]             }
[17:47:18.858]         }
[17:47:18.858]     })
[17:47:18.858]     if (TRUE) {
[17:47:18.858]         base::sink(type = "output", split = FALSE)
[17:47:18.858]         if (TRUE) {
[17:47:18.858]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.858]         }
[17:47:18.858]         else {
[17:47:18.858]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.858]         }
[17:47:18.858]         base::close(...future.stdout)
[17:47:18.858]         ...future.stdout <- NULL
[17:47:18.858]     }
[17:47:18.858]     ...future.result$conditions <- ...future.conditions
[17:47:18.858]     ...future.result$finished <- base::Sys.time()
[17:47:18.858]     ...future.result
[17:47:18.858] }
[17:47:18.860] assign_globals() ...
[17:47:18.860] List of 2
[17:47:18.860]  $ a: num 2
[17:47:18.860]  $ b: num 3
[17:47:18.860]  - attr(*, "where")=List of 2
[17:47:18.860]   ..$ a:<environment: R_EmptyEnv> 
[17:47:18.860]   ..$ b:<environment: R_EmptyEnv> 
[17:47:18.860]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:18.860]  - attr(*, "resolved")= logi FALSE
[17:47:18.860]  - attr(*, "total_size")= num 112
[17:47:18.863] - copied ‘a’ to environment
[17:47:18.863] - copied ‘b’ to environment
[17:47:18.863] assign_globals() ... done
[17:47:18.863] plan(): Setting new future strategy stack:
[17:47:18.863] List of future strategies:
[17:47:18.863] 1. sequential:
[17:47:18.863]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.863]    - tweaked: FALSE
[17:47:18.863]    - call: NULL
[17:47:18.864] plan(): nbrOfWorkers() = 1
[17:47:18.864] plan(): Setting new future strategy stack:
[17:47:18.865] List of future strategies:
[17:47:18.865] 1. multicore:
[17:47:18.865]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.865]    - tweaked: FALSE
[17:47:18.865]    - call: plan(multicore)
[17:47:18.868] plan(): nbrOfWorkers() = 1
[17:47:18.869] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Number of workers: 2
*** multicore(..., globals = FALSE) without globals
[17:47:18.876] getGlobalsAndPackages() ...
[17:47:18.876] Not searching for globals
[17:47:18.876] - globals: [0] <none>
[17:47:18.876] getGlobalsAndPackages() ... DONE
[17:47:18.877] Packages needed by the future expression (n = 0): <none>
[17:47:18.877] Packages needed by future strategies (n = 0): <none>
[17:47:18.878] {
[17:47:18.878]     {
[17:47:18.878]         {
[17:47:18.878]             ...future.startTime <- base::Sys.time()
[17:47:18.878]             {
[17:47:18.878]                 {
[17:47:18.878]                   {
[17:47:18.878]                     {
[17:47:18.878]                       base::local({
[17:47:18.878]                         has_future <- base::requireNamespace("future", 
[17:47:18.878]                           quietly = TRUE)
[17:47:18.878]                         if (has_future) {
[17:47:18.878]                           ns <- base::getNamespace("future")
[17:47:18.878]                           version <- ns[[".package"]][["version"]]
[17:47:18.878]                           if (is.null(version)) 
[17:47:18.878]                             version <- utils::packageVersion("future")
[17:47:18.878]                         }
[17:47:18.878]                         else {
[17:47:18.878]                           version <- NULL
[17:47:18.878]                         }
[17:47:18.878]                         if (!has_future || version < "1.8.0") {
[17:47:18.878]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.878]                             "", base::R.version$version.string), 
[17:47:18.878]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:18.878]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.878]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.878]                               "release", "version")], collapse = " "), 
[17:47:18.878]                             hostname = base::Sys.info()[["nodename"]])
[17:47:18.878]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.878]                             info)
[17:47:18.878]                           info <- base::paste(info, collapse = "; ")
[17:47:18.878]                           if (!has_future) {
[17:47:18.878]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.878]                               info)
[17:47:18.878]                           }
[17:47:18.878]                           else {
[17:47:18.878]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.878]                               info, version)
[17:47:18.878]                           }
[17:47:18.878]                           base::stop(msg)
[17:47:18.878]                         }
[17:47:18.878]                       })
[17:47:18.878]                     }
[17:47:18.878]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:18.878]                     base::options(mc.cores = 1L)
[17:47:18.878]                   }
[17:47:18.878]                   ...future.strategy.old <- future::plan("list")
[17:47:18.878]                   options(future.plan = NULL)
[17:47:18.878]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.878]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.878]                 }
[17:47:18.878]                 ...future.workdir <- getwd()
[17:47:18.878]             }
[17:47:18.878]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.878]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.878]         }
[17:47:18.878]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.878]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.878]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.878]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.878]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.878]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.878]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.878]             base::names(...future.oldOptions))
[17:47:18.878]     }
[17:47:18.878]     if (FALSE) {
[17:47:18.878]     }
[17:47:18.878]     else {
[17:47:18.878]         if (TRUE) {
[17:47:18.878]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.878]                 open = "w")
[17:47:18.878]         }
[17:47:18.878]         else {
[17:47:18.878]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.878]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.878]         }
[17:47:18.878]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.878]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.878]             base::sink(type = "output", split = FALSE)
[17:47:18.878]             base::close(...future.stdout)
[17:47:18.878]         }, add = TRUE)
[17:47:18.878]     }
[17:47:18.878]     ...future.frame <- base::sys.nframe()
[17:47:18.878]     ...future.conditions <- base::list()
[17:47:18.878]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.878]     if (FALSE) {
[17:47:18.878]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.878]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.878]     }
[17:47:18.878]     ...future.result <- base::tryCatch({
[17:47:18.878]         base::withCallingHandlers({
[17:47:18.878]             ...future.value <- base::withVisible(base::local({
[17:47:18.878]                 withCallingHandlers({
[17:47:18.878]                   {
[17:47:18.878]                     42L
[17:47:18.878]                   }
[17:47:18.878]                 }, immediateCondition = function(cond) {
[17:47:18.878]                   save_rds <- function (object, pathname, ...) 
[17:47:18.878]                   {
[17:47:18.878]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:18.878]                     if (file_test("-f", pathname_tmp)) {
[17:47:18.878]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.878]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:18.878]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.878]                         fi_tmp[["mtime"]])
[17:47:18.878]                     }
[17:47:18.878]                     tryCatch({
[17:47:18.878]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:18.878]                     }, error = function(ex) {
[17:47:18.878]                       msg <- conditionMessage(ex)
[17:47:18.878]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.878]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:18.878]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.878]                         fi_tmp[["mtime"]], msg)
[17:47:18.878]                       ex$message <- msg
[17:47:18.878]                       stop(ex)
[17:47:18.878]                     })
[17:47:18.878]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:18.878]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:18.878]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:18.878]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.878]                       fi <- file.info(pathname)
[17:47:18.878]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:18.878]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.878]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:18.878]                         fi[["size"]], fi[["mtime"]])
[17:47:18.878]                       stop(msg)
[17:47:18.878]                     }
[17:47:18.878]                     invisible(pathname)
[17:47:18.878]                   }
[17:47:18.878]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:18.878]                     rootPath = tempdir()) 
[17:47:18.878]                   {
[17:47:18.878]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:18.878]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:18.878]                       tmpdir = path, fileext = ".rds")
[17:47:18.878]                     save_rds(obj, file)
[17:47:18.878]                   }
[17:47:18.878]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:18.878]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.878]                   {
[17:47:18.878]                     inherits <- base::inherits
[17:47:18.878]                     invokeRestart <- base::invokeRestart
[17:47:18.878]                     is.null <- base::is.null
[17:47:18.878]                     muffled <- FALSE
[17:47:18.878]                     if (inherits(cond, "message")) {
[17:47:18.878]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:18.878]                       if (muffled) 
[17:47:18.878]                         invokeRestart("muffleMessage")
[17:47:18.878]                     }
[17:47:18.878]                     else if (inherits(cond, "warning")) {
[17:47:18.878]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:18.878]                       if (muffled) 
[17:47:18.878]                         invokeRestart("muffleWarning")
[17:47:18.878]                     }
[17:47:18.878]                     else if (inherits(cond, "condition")) {
[17:47:18.878]                       if (!is.null(pattern)) {
[17:47:18.878]                         computeRestarts <- base::computeRestarts
[17:47:18.878]                         grepl <- base::grepl
[17:47:18.878]                         restarts <- computeRestarts(cond)
[17:47:18.878]                         for (restart in restarts) {
[17:47:18.878]                           name <- restart$name
[17:47:18.878]                           if (is.null(name)) 
[17:47:18.878]                             next
[17:47:18.878]                           if (!grepl(pattern, name)) 
[17:47:18.878]                             next
[17:47:18.878]                           invokeRestart(restart)
[17:47:18.878]                           muffled <- TRUE
[17:47:18.878]                           break
[17:47:18.878]                         }
[17:47:18.878]                       }
[17:47:18.878]                     }
[17:47:18.878]                     invisible(muffled)
[17:47:18.878]                   }
[17:47:18.878]                   muffleCondition(cond)
[17:47:18.878]                 })
[17:47:18.878]             }))
[17:47:18.878]             future::FutureResult(value = ...future.value$value, 
[17:47:18.878]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.878]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.878]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.878]                     ...future.globalenv.names))
[17:47:18.878]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.878]         }, condition = base::local({
[17:47:18.878]             c <- base::c
[17:47:18.878]             inherits <- base::inherits
[17:47:18.878]             invokeRestart <- base::invokeRestart
[17:47:18.878]             length <- base::length
[17:47:18.878]             list <- base::list
[17:47:18.878]             seq.int <- base::seq.int
[17:47:18.878]             signalCondition <- base::signalCondition
[17:47:18.878]             sys.calls <- base::sys.calls
[17:47:18.878]             `[[` <- base::`[[`
[17:47:18.878]             `+` <- base::`+`
[17:47:18.878]             `<<-` <- base::`<<-`
[17:47:18.878]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.878]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.878]                   3L)]
[17:47:18.878]             }
[17:47:18.878]             function(cond) {
[17:47:18.878]                 is_error <- inherits(cond, "error")
[17:47:18.878]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.878]                   NULL)
[17:47:18.878]                 if (is_error) {
[17:47:18.878]                   sessionInformation <- function() {
[17:47:18.878]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.878]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.878]                       search = base::search(), system = base::Sys.info())
[17:47:18.878]                   }
[17:47:18.878]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.878]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.878]                     cond$call), session = sessionInformation(), 
[17:47:18.878]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.878]                   signalCondition(cond)
[17:47:18.878]                 }
[17:47:18.878]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.878]                 "immediateCondition"))) {
[17:47:18.878]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.878]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.878]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.878]                   if (TRUE && !signal) {
[17:47:18.878]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.878]                     {
[17:47:18.878]                       inherits <- base::inherits
[17:47:18.878]                       invokeRestart <- base::invokeRestart
[17:47:18.878]                       is.null <- base::is.null
[17:47:18.878]                       muffled <- FALSE
[17:47:18.878]                       if (inherits(cond, "message")) {
[17:47:18.878]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.878]                         if (muffled) 
[17:47:18.878]                           invokeRestart("muffleMessage")
[17:47:18.878]                       }
[17:47:18.878]                       else if (inherits(cond, "warning")) {
[17:47:18.878]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.878]                         if (muffled) 
[17:47:18.878]                           invokeRestart("muffleWarning")
[17:47:18.878]                       }
[17:47:18.878]                       else if (inherits(cond, "condition")) {
[17:47:18.878]                         if (!is.null(pattern)) {
[17:47:18.878]                           computeRestarts <- base::computeRestarts
[17:47:18.878]                           grepl <- base::grepl
[17:47:18.878]                           restarts <- computeRestarts(cond)
[17:47:18.878]                           for (restart in restarts) {
[17:47:18.878]                             name <- restart$name
[17:47:18.878]                             if (is.null(name)) 
[17:47:18.878]                               next
[17:47:18.878]                             if (!grepl(pattern, name)) 
[17:47:18.878]                               next
[17:47:18.878]                             invokeRestart(restart)
[17:47:18.878]                             muffled <- TRUE
[17:47:18.878]                             break
[17:47:18.878]                           }
[17:47:18.878]                         }
[17:47:18.878]                       }
[17:47:18.878]                       invisible(muffled)
[17:47:18.878]                     }
[17:47:18.878]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.878]                   }
[17:47:18.878]                 }
[17:47:18.878]                 else {
[17:47:18.878]                   if (TRUE) {
[17:47:18.878]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.878]                     {
[17:47:18.878]                       inherits <- base::inherits
[17:47:18.878]                       invokeRestart <- base::invokeRestart
[17:47:18.878]                       is.null <- base::is.null
[17:47:18.878]                       muffled <- FALSE
[17:47:18.878]                       if (inherits(cond, "message")) {
[17:47:18.878]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.878]                         if (muffled) 
[17:47:18.878]                           invokeRestart("muffleMessage")
[17:47:18.878]                       }
[17:47:18.878]                       else if (inherits(cond, "warning")) {
[17:47:18.878]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.878]                         if (muffled) 
[17:47:18.878]                           invokeRestart("muffleWarning")
[17:47:18.878]                       }
[17:47:18.878]                       else if (inherits(cond, "condition")) {
[17:47:18.878]                         if (!is.null(pattern)) {
[17:47:18.878]                           computeRestarts <- base::computeRestarts
[17:47:18.878]                           grepl <- base::grepl
[17:47:18.878]                           restarts <- computeRestarts(cond)
[17:47:18.878]                           for (restart in restarts) {
[17:47:18.878]                             name <- restart$name
[17:47:18.878]                             if (is.null(name)) 
[17:47:18.878]                               next
[17:47:18.878]                             if (!grepl(pattern, name)) 
[17:47:18.878]                               next
[17:47:18.878]                             invokeRestart(restart)
[17:47:18.878]                             muffled <- TRUE
[17:47:18.878]                             break
[17:47:18.878]                           }
[17:47:18.878]                         }
[17:47:18.878]                       }
[17:47:18.878]                       invisible(muffled)
[17:47:18.878]                     }
[17:47:18.878]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.878]                   }
[17:47:18.878]                 }
[17:47:18.878]             }
[17:47:18.878]         }))
[17:47:18.878]     }, error = function(ex) {
[17:47:18.878]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.878]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.878]                 ...future.rng), started = ...future.startTime, 
[17:47:18.878]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.878]             version = "1.8"), class = "FutureResult")
[17:47:18.878]     }, finally = {
[17:47:18.878]         if (!identical(...future.workdir, getwd())) 
[17:47:18.878]             setwd(...future.workdir)
[17:47:18.878]         {
[17:47:18.878]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.878]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.878]             }
[17:47:18.878]             base::options(...future.oldOptions)
[17:47:18.878]             if (.Platform$OS.type == "windows") {
[17:47:18.878]                 old_names <- names(...future.oldEnvVars)
[17:47:18.878]                 envs <- base::Sys.getenv()
[17:47:18.878]                 names <- names(envs)
[17:47:18.878]                 common <- intersect(names, old_names)
[17:47:18.878]                 added <- setdiff(names, old_names)
[17:47:18.878]                 removed <- setdiff(old_names, names)
[17:47:18.878]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.878]                   envs[common]]
[17:47:18.878]                 NAMES <- toupper(changed)
[17:47:18.878]                 args <- list()
[17:47:18.878]                 for (kk in seq_along(NAMES)) {
[17:47:18.878]                   name <- changed[[kk]]
[17:47:18.878]                   NAME <- NAMES[[kk]]
[17:47:18.878]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.878]                     next
[17:47:18.878]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.878]                 }
[17:47:18.878]                 NAMES <- toupper(added)
[17:47:18.878]                 for (kk in seq_along(NAMES)) {
[17:47:18.878]                   name <- added[[kk]]
[17:47:18.878]                   NAME <- NAMES[[kk]]
[17:47:18.878]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.878]                     next
[17:47:18.878]                   args[[name]] <- ""
[17:47:18.878]                 }
[17:47:18.878]                 NAMES <- toupper(removed)
[17:47:18.878]                 for (kk in seq_along(NAMES)) {
[17:47:18.878]                   name <- removed[[kk]]
[17:47:18.878]                   NAME <- NAMES[[kk]]
[17:47:18.878]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.878]                     next
[17:47:18.878]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.878]                 }
[17:47:18.878]                 if (length(args) > 0) 
[17:47:18.878]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.878]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.878]             }
[17:47:18.878]             else {
[17:47:18.878]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.878]             }
[17:47:18.878]             {
[17:47:18.878]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.878]                   0L) {
[17:47:18.878]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.878]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.878]                   base::options(opts)
[17:47:18.878]                 }
[17:47:18.878]                 {
[17:47:18.878]                   {
[17:47:18.878]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:18.878]                     NULL
[17:47:18.878]                   }
[17:47:18.878]                   options(future.plan = NULL)
[17:47:18.878]                   if (is.na(NA_character_)) 
[17:47:18.878]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.878]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.878]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.878]                     .init = FALSE)
[17:47:18.878]                 }
[17:47:18.878]             }
[17:47:18.878]         }
[17:47:18.878]     })
[17:47:18.878]     if (TRUE) {
[17:47:18.878]         base::sink(type = "output", split = FALSE)
[17:47:18.878]         if (TRUE) {
[17:47:18.878]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.878]         }
[17:47:18.878]         else {
[17:47:18.878]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.878]         }
[17:47:18.878]         base::close(...future.stdout)
[17:47:18.878]         ...future.stdout <- NULL
[17:47:18.878]     }
[17:47:18.878]     ...future.result$conditions <- ...future.conditions
[17:47:18.878]     ...future.result$finished <- base::Sys.time()
[17:47:18.878]     ...future.result
[17:47:18.878] }
[17:47:18.880] requestCore(): workers = 2
[17:47:18.883] MulticoreFuture started
[17:47:18.884] plan(): Setting new future strategy stack:
[17:47:18.884] List of future strategies:
[17:47:18.884] 1. sequential:
[17:47:18.884]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.884]    - tweaked: FALSE
[17:47:18.884]    - call: NULL
[17:47:18.885] plan(): nbrOfWorkers() = 1
[17:47:18.887] plan(): Setting new future strategy stack:
[17:47:18.887] List of future strategies:
[17:47:18.887] 1. multicore:
[17:47:18.887]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.887]    - tweaked: FALSE
[17:47:18.887]    - call: plan(multicore)
[17:47:18.892] plan(): nbrOfWorkers() = 2
[1] TRUE
[17:47:18.894] result() for MulticoreFuture ...
[17:47:18.899] result() for MulticoreFuture ...
[17:47:18.899] result() for MulticoreFuture ... done
[17:47:18.899] result() for MulticoreFuture ... done
[17:47:18.899] result() for MulticoreFuture ...
[17:47:18.899] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = FALSE) with globals
[17:47:18.903] getGlobalsAndPackages() ...
[17:47:18.903] Not searching for globals
[17:47:18.904] - globals: [0] <none>
[17:47:18.904] getGlobalsAndPackages() ... DONE
[17:47:18.904] Packages needed by the future expression (n = 0): <none>
[17:47:18.904] Packages needed by future strategies (n = 0): <none>
[17:47:18.905] {
[17:47:18.905]     {
[17:47:18.905]         {
[17:47:18.905]             ...future.startTime <- base::Sys.time()
[17:47:18.905]             {
[17:47:18.905]                 {
[17:47:18.905]                   {
[17:47:18.905]                     {
[17:47:18.905]                       base::local({
[17:47:18.905]                         has_future <- base::requireNamespace("future", 
[17:47:18.905]                           quietly = TRUE)
[17:47:18.905]                         if (has_future) {
[17:47:18.905]                           ns <- base::getNamespace("future")
[17:47:18.905]                           version <- ns[[".package"]][["version"]]
[17:47:18.905]                           if (is.null(version)) 
[17:47:18.905]                             version <- utils::packageVersion("future")
[17:47:18.905]                         }
[17:47:18.905]                         else {
[17:47:18.905]                           version <- NULL
[17:47:18.905]                         }
[17:47:18.905]                         if (!has_future || version < "1.8.0") {
[17:47:18.905]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.905]                             "", base::R.version$version.string), 
[17:47:18.905]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:18.905]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.905]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.905]                               "release", "version")], collapse = " "), 
[17:47:18.905]                             hostname = base::Sys.info()[["nodename"]])
[17:47:18.905]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.905]                             info)
[17:47:18.905]                           info <- base::paste(info, collapse = "; ")
[17:47:18.905]                           if (!has_future) {
[17:47:18.905]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.905]                               info)
[17:47:18.905]                           }
[17:47:18.905]                           else {
[17:47:18.905]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.905]                               info, version)
[17:47:18.905]                           }
[17:47:18.905]                           base::stop(msg)
[17:47:18.905]                         }
[17:47:18.905]                       })
[17:47:18.905]                     }
[17:47:18.905]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:18.905]                     base::options(mc.cores = 1L)
[17:47:18.905]                   }
[17:47:18.905]                   ...future.strategy.old <- future::plan("list")
[17:47:18.905]                   options(future.plan = NULL)
[17:47:18.905]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.905]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.905]                 }
[17:47:18.905]                 ...future.workdir <- getwd()
[17:47:18.905]             }
[17:47:18.905]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.905]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.905]         }
[17:47:18.905]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.905]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.905]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.905]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.905]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.905]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.905]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.905]             base::names(...future.oldOptions))
[17:47:18.905]     }
[17:47:18.905]     if (FALSE) {
[17:47:18.905]     }
[17:47:18.905]     else {
[17:47:18.905]         if (TRUE) {
[17:47:18.905]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.905]                 open = "w")
[17:47:18.905]         }
[17:47:18.905]         else {
[17:47:18.905]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.905]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.905]         }
[17:47:18.905]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.905]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.905]             base::sink(type = "output", split = FALSE)
[17:47:18.905]             base::close(...future.stdout)
[17:47:18.905]         }, add = TRUE)
[17:47:18.905]     }
[17:47:18.905]     ...future.frame <- base::sys.nframe()
[17:47:18.905]     ...future.conditions <- base::list()
[17:47:18.905]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.905]     if (FALSE) {
[17:47:18.905]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.905]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.905]     }
[17:47:18.905]     ...future.result <- base::tryCatch({
[17:47:18.905]         base::withCallingHandlers({
[17:47:18.905]             ...future.value <- base::withVisible(base::local({
[17:47:18.905]                 withCallingHandlers({
[17:47:18.905]                   {
[17:47:18.905]                     b <- 3
[17:47:18.905]                     c <- 2
[17:47:18.905]                     a * b * c
[17:47:18.905]                   }
[17:47:18.905]                 }, immediateCondition = function(cond) {
[17:47:18.905]                   save_rds <- function (object, pathname, ...) 
[17:47:18.905]                   {
[17:47:18.905]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:18.905]                     if (file_test("-f", pathname_tmp)) {
[17:47:18.905]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.905]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:18.905]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.905]                         fi_tmp[["mtime"]])
[17:47:18.905]                     }
[17:47:18.905]                     tryCatch({
[17:47:18.905]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:18.905]                     }, error = function(ex) {
[17:47:18.905]                       msg <- conditionMessage(ex)
[17:47:18.905]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.905]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:18.905]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.905]                         fi_tmp[["mtime"]], msg)
[17:47:18.905]                       ex$message <- msg
[17:47:18.905]                       stop(ex)
[17:47:18.905]                     })
[17:47:18.905]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:18.905]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:18.905]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:18.905]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.905]                       fi <- file.info(pathname)
[17:47:18.905]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:18.905]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.905]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:18.905]                         fi[["size"]], fi[["mtime"]])
[17:47:18.905]                       stop(msg)
[17:47:18.905]                     }
[17:47:18.905]                     invisible(pathname)
[17:47:18.905]                   }
[17:47:18.905]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:18.905]                     rootPath = tempdir()) 
[17:47:18.905]                   {
[17:47:18.905]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:18.905]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:18.905]                       tmpdir = path, fileext = ".rds")
[17:47:18.905]                     save_rds(obj, file)
[17:47:18.905]                   }
[17:47:18.905]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:18.905]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.905]                   {
[17:47:18.905]                     inherits <- base::inherits
[17:47:18.905]                     invokeRestart <- base::invokeRestart
[17:47:18.905]                     is.null <- base::is.null
[17:47:18.905]                     muffled <- FALSE
[17:47:18.905]                     if (inherits(cond, "message")) {
[17:47:18.905]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:18.905]                       if (muffled) 
[17:47:18.905]                         invokeRestart("muffleMessage")
[17:47:18.905]                     }
[17:47:18.905]                     else if (inherits(cond, "warning")) {
[17:47:18.905]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:18.905]                       if (muffled) 
[17:47:18.905]                         invokeRestart("muffleWarning")
[17:47:18.905]                     }
[17:47:18.905]                     else if (inherits(cond, "condition")) {
[17:47:18.905]                       if (!is.null(pattern)) {
[17:47:18.905]                         computeRestarts <- base::computeRestarts
[17:47:18.905]                         grepl <- base::grepl
[17:47:18.905]                         restarts <- computeRestarts(cond)
[17:47:18.905]                         for (restart in restarts) {
[17:47:18.905]                           name <- restart$name
[17:47:18.905]                           if (is.null(name)) 
[17:47:18.905]                             next
[17:47:18.905]                           if (!grepl(pattern, name)) 
[17:47:18.905]                             next
[17:47:18.905]                           invokeRestart(restart)
[17:47:18.905]                           muffled <- TRUE
[17:47:18.905]                           break
[17:47:18.905]                         }
[17:47:18.905]                       }
[17:47:18.905]                     }
[17:47:18.905]                     invisible(muffled)
[17:47:18.905]                   }
[17:47:18.905]                   muffleCondition(cond)
[17:47:18.905]                 })
[17:47:18.905]             }))
[17:47:18.905]             future::FutureResult(value = ...future.value$value, 
[17:47:18.905]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.905]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.905]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.905]                     ...future.globalenv.names))
[17:47:18.905]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.905]         }, condition = base::local({
[17:47:18.905]             c <- base::c
[17:47:18.905]             inherits <- base::inherits
[17:47:18.905]             invokeRestart <- base::invokeRestart
[17:47:18.905]             length <- base::length
[17:47:18.905]             list <- base::list
[17:47:18.905]             seq.int <- base::seq.int
[17:47:18.905]             signalCondition <- base::signalCondition
[17:47:18.905]             sys.calls <- base::sys.calls
[17:47:18.905]             `[[` <- base::`[[`
[17:47:18.905]             `+` <- base::`+`
[17:47:18.905]             `<<-` <- base::`<<-`
[17:47:18.905]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.905]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.905]                   3L)]
[17:47:18.905]             }
[17:47:18.905]             function(cond) {
[17:47:18.905]                 is_error <- inherits(cond, "error")
[17:47:18.905]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.905]                   NULL)
[17:47:18.905]                 if (is_error) {
[17:47:18.905]                   sessionInformation <- function() {
[17:47:18.905]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.905]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.905]                       search = base::search(), system = base::Sys.info())
[17:47:18.905]                   }
[17:47:18.905]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.905]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.905]                     cond$call), session = sessionInformation(), 
[17:47:18.905]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.905]                   signalCondition(cond)
[17:47:18.905]                 }
[17:47:18.905]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.905]                 "immediateCondition"))) {
[17:47:18.905]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.905]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.905]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.905]                   if (TRUE && !signal) {
[17:47:18.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.905]                     {
[17:47:18.905]                       inherits <- base::inherits
[17:47:18.905]                       invokeRestart <- base::invokeRestart
[17:47:18.905]                       is.null <- base::is.null
[17:47:18.905]                       muffled <- FALSE
[17:47:18.905]                       if (inherits(cond, "message")) {
[17:47:18.905]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.905]                         if (muffled) 
[17:47:18.905]                           invokeRestart("muffleMessage")
[17:47:18.905]                       }
[17:47:18.905]                       else if (inherits(cond, "warning")) {
[17:47:18.905]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.905]                         if (muffled) 
[17:47:18.905]                           invokeRestart("muffleWarning")
[17:47:18.905]                       }
[17:47:18.905]                       else if (inherits(cond, "condition")) {
[17:47:18.905]                         if (!is.null(pattern)) {
[17:47:18.905]                           computeRestarts <- base::computeRestarts
[17:47:18.905]                           grepl <- base::grepl
[17:47:18.905]                           restarts <- computeRestarts(cond)
[17:47:18.905]                           for (restart in restarts) {
[17:47:18.905]                             name <- restart$name
[17:47:18.905]                             if (is.null(name)) 
[17:47:18.905]                               next
[17:47:18.905]                             if (!grepl(pattern, name)) 
[17:47:18.905]                               next
[17:47:18.905]                             invokeRestart(restart)
[17:47:18.905]                             muffled <- TRUE
[17:47:18.905]                             break
[17:47:18.905]                           }
[17:47:18.905]                         }
[17:47:18.905]                       }
[17:47:18.905]                       invisible(muffled)
[17:47:18.905]                     }
[17:47:18.905]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.905]                   }
[17:47:18.905]                 }
[17:47:18.905]                 else {
[17:47:18.905]                   if (TRUE) {
[17:47:18.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.905]                     {
[17:47:18.905]                       inherits <- base::inherits
[17:47:18.905]                       invokeRestart <- base::invokeRestart
[17:47:18.905]                       is.null <- base::is.null
[17:47:18.905]                       muffled <- FALSE
[17:47:18.905]                       if (inherits(cond, "message")) {
[17:47:18.905]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.905]                         if (muffled) 
[17:47:18.905]                           invokeRestart("muffleMessage")
[17:47:18.905]                       }
[17:47:18.905]                       else if (inherits(cond, "warning")) {
[17:47:18.905]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.905]                         if (muffled) 
[17:47:18.905]                           invokeRestart("muffleWarning")
[17:47:18.905]                       }
[17:47:18.905]                       else if (inherits(cond, "condition")) {
[17:47:18.905]                         if (!is.null(pattern)) {
[17:47:18.905]                           computeRestarts <- base::computeRestarts
[17:47:18.905]                           grepl <- base::grepl
[17:47:18.905]                           restarts <- computeRestarts(cond)
[17:47:18.905]                           for (restart in restarts) {
[17:47:18.905]                             name <- restart$name
[17:47:18.905]                             if (is.null(name)) 
[17:47:18.905]                               next
[17:47:18.905]                             if (!grepl(pattern, name)) 
[17:47:18.905]                               next
[17:47:18.905]                             invokeRestart(restart)
[17:47:18.905]                             muffled <- TRUE
[17:47:18.905]                             break
[17:47:18.905]                           }
[17:47:18.905]                         }
[17:47:18.905]                       }
[17:47:18.905]                       invisible(muffled)
[17:47:18.905]                     }
[17:47:18.905]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.905]                   }
[17:47:18.905]                 }
[17:47:18.905]             }
[17:47:18.905]         }))
[17:47:18.905]     }, error = function(ex) {
[17:47:18.905]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.905]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.905]                 ...future.rng), started = ...future.startTime, 
[17:47:18.905]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.905]             version = "1.8"), class = "FutureResult")
[17:47:18.905]     }, finally = {
[17:47:18.905]         if (!identical(...future.workdir, getwd())) 
[17:47:18.905]             setwd(...future.workdir)
[17:47:18.905]         {
[17:47:18.905]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.905]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.905]             }
[17:47:18.905]             base::options(...future.oldOptions)
[17:47:18.905]             if (.Platform$OS.type == "windows") {
[17:47:18.905]                 old_names <- names(...future.oldEnvVars)
[17:47:18.905]                 envs <- base::Sys.getenv()
[17:47:18.905]                 names <- names(envs)
[17:47:18.905]                 common <- intersect(names, old_names)
[17:47:18.905]                 added <- setdiff(names, old_names)
[17:47:18.905]                 removed <- setdiff(old_names, names)
[17:47:18.905]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.905]                   envs[common]]
[17:47:18.905]                 NAMES <- toupper(changed)
[17:47:18.905]                 args <- list()
[17:47:18.905]                 for (kk in seq_along(NAMES)) {
[17:47:18.905]                   name <- changed[[kk]]
[17:47:18.905]                   NAME <- NAMES[[kk]]
[17:47:18.905]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.905]                     next
[17:47:18.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.905]                 }
[17:47:18.905]                 NAMES <- toupper(added)
[17:47:18.905]                 for (kk in seq_along(NAMES)) {
[17:47:18.905]                   name <- added[[kk]]
[17:47:18.905]                   NAME <- NAMES[[kk]]
[17:47:18.905]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.905]                     next
[17:47:18.905]                   args[[name]] <- ""
[17:47:18.905]                 }
[17:47:18.905]                 NAMES <- toupper(removed)
[17:47:18.905]                 for (kk in seq_along(NAMES)) {
[17:47:18.905]                   name <- removed[[kk]]
[17:47:18.905]                   NAME <- NAMES[[kk]]
[17:47:18.905]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.905]                     next
[17:47:18.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.905]                 }
[17:47:18.905]                 if (length(args) > 0) 
[17:47:18.905]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.905]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.905]             }
[17:47:18.905]             else {
[17:47:18.905]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.905]             }
[17:47:18.905]             {
[17:47:18.905]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.905]                   0L) {
[17:47:18.905]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.905]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.905]                   base::options(opts)
[17:47:18.905]                 }
[17:47:18.905]                 {
[17:47:18.905]                   {
[17:47:18.905]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:18.905]                     NULL
[17:47:18.905]                   }
[17:47:18.905]                   options(future.plan = NULL)
[17:47:18.905]                   if (is.na(NA_character_)) 
[17:47:18.905]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.905]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.905]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.905]                     .init = FALSE)
[17:47:18.905]                 }
[17:47:18.905]             }
[17:47:18.905]         }
[17:47:18.905]     })
[17:47:18.905]     if (TRUE) {
[17:47:18.905]         base::sink(type = "output", split = FALSE)
[17:47:18.905]         if (TRUE) {
[17:47:18.905]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.905]         }
[17:47:18.905]         else {
[17:47:18.905]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.905]         }
[17:47:18.905]         base::close(...future.stdout)
[17:47:18.905]         ...future.stdout <- NULL
[17:47:18.905]     }
[17:47:18.905]     ...future.result$conditions <- ...future.conditions
[17:47:18.905]     ...future.result$finished <- base::Sys.time()
[17:47:18.905]     ...future.result
[17:47:18.905] }
[17:47:18.908] requestCore(): workers = 2
[17:47:18.910] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:18.911] plan(): Setting new future strategy stack:
[17:47:18.911] List of future strategies:
[17:47:18.911] 1. sequential:
[17:47:18.911]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.911]    - tweaked: FALSE
[17:47:18.911]    - call: NULL
[17:47:18.918] plan(): nbrOfWorkers() = 1
[17:47:18.920] plan(): Setting new future strategy stack:
[17:47:18.921] List of future strategies:
[17:47:18.921] 1. multicore:
[17:47:18.921]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.921]    - tweaked: FALSE
[17:47:18.921]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:18.922] result() for MulticoreFuture ...
[17:47:18.926] plan(): nbrOfWorkers() = 2
[17:47:18.927] result() for MulticoreFuture ...
[17:47:18.927] result() for MulticoreFuture ... done
[17:47:18.928] result() for MulticoreFuture ... done
[17:47:18.928] result() for MulticoreFuture ...
[17:47:18.928] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[17:47:18.933] getGlobalsAndPackages() ...
[17:47:18.933] Not searching for globals
[17:47:18.933] - globals: [0] <none>
[17:47:18.933] getGlobalsAndPackages() ... DONE
[17:47:18.934] Packages needed by the future expression (n = 0): <none>
[17:47:18.934] Packages needed by future strategies (n = 0): <none>
[17:47:18.934] {
[17:47:18.934]     {
[17:47:18.934]         {
[17:47:18.934]             ...future.startTime <- base::Sys.time()
[17:47:18.934]             {
[17:47:18.934]                 {
[17:47:18.934]                   {
[17:47:18.934]                     {
[17:47:18.934]                       base::local({
[17:47:18.934]                         has_future <- base::requireNamespace("future", 
[17:47:18.934]                           quietly = TRUE)
[17:47:18.934]                         if (has_future) {
[17:47:18.934]                           ns <- base::getNamespace("future")
[17:47:18.934]                           version <- ns[[".package"]][["version"]]
[17:47:18.934]                           if (is.null(version)) 
[17:47:18.934]                             version <- utils::packageVersion("future")
[17:47:18.934]                         }
[17:47:18.934]                         else {
[17:47:18.934]                           version <- NULL
[17:47:18.934]                         }
[17:47:18.934]                         if (!has_future || version < "1.8.0") {
[17:47:18.934]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.934]                             "", base::R.version$version.string), 
[17:47:18.934]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:18.934]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.934]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.934]                               "release", "version")], collapse = " "), 
[17:47:18.934]                             hostname = base::Sys.info()[["nodename"]])
[17:47:18.934]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.934]                             info)
[17:47:18.934]                           info <- base::paste(info, collapse = "; ")
[17:47:18.934]                           if (!has_future) {
[17:47:18.934]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.934]                               info)
[17:47:18.934]                           }
[17:47:18.934]                           else {
[17:47:18.934]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.934]                               info, version)
[17:47:18.934]                           }
[17:47:18.934]                           base::stop(msg)
[17:47:18.934]                         }
[17:47:18.934]                       })
[17:47:18.934]                     }
[17:47:18.934]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:18.934]                     base::options(mc.cores = 1L)
[17:47:18.934]                   }
[17:47:18.934]                   ...future.strategy.old <- future::plan("list")
[17:47:18.934]                   options(future.plan = NULL)
[17:47:18.934]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.934]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.934]                 }
[17:47:18.934]                 ...future.workdir <- getwd()
[17:47:18.934]             }
[17:47:18.934]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.934]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.934]         }
[17:47:18.934]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.934]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.934]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.934]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.934]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.934]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.934]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.934]             base::names(...future.oldOptions))
[17:47:18.934]     }
[17:47:18.934]     if (FALSE) {
[17:47:18.934]     }
[17:47:18.934]     else {
[17:47:18.934]         if (TRUE) {
[17:47:18.934]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.934]                 open = "w")
[17:47:18.934]         }
[17:47:18.934]         else {
[17:47:18.934]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.934]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.934]         }
[17:47:18.934]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.934]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.934]             base::sink(type = "output", split = FALSE)
[17:47:18.934]             base::close(...future.stdout)
[17:47:18.934]         }, add = TRUE)
[17:47:18.934]     }
[17:47:18.934]     ...future.frame <- base::sys.nframe()
[17:47:18.934]     ...future.conditions <- base::list()
[17:47:18.934]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.934]     if (FALSE) {
[17:47:18.934]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.934]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.934]     }
[17:47:18.934]     ...future.result <- base::tryCatch({
[17:47:18.934]         base::withCallingHandlers({
[17:47:18.934]             ...future.value <- base::withVisible(base::local({
[17:47:18.934]                 withCallingHandlers({
[17:47:18.934]                   {
[17:47:18.934]                     ii
[17:47:18.934]                   }
[17:47:18.934]                 }, immediateCondition = function(cond) {
[17:47:18.934]                   save_rds <- function (object, pathname, ...) 
[17:47:18.934]                   {
[17:47:18.934]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:18.934]                     if (file_test("-f", pathname_tmp)) {
[17:47:18.934]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.934]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:18.934]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.934]                         fi_tmp[["mtime"]])
[17:47:18.934]                     }
[17:47:18.934]                     tryCatch({
[17:47:18.934]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:18.934]                     }, error = function(ex) {
[17:47:18.934]                       msg <- conditionMessage(ex)
[17:47:18.934]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.934]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:18.934]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.934]                         fi_tmp[["mtime"]], msg)
[17:47:18.934]                       ex$message <- msg
[17:47:18.934]                       stop(ex)
[17:47:18.934]                     })
[17:47:18.934]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:18.934]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:18.934]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:18.934]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.934]                       fi <- file.info(pathname)
[17:47:18.934]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:18.934]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.934]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:18.934]                         fi[["size"]], fi[["mtime"]])
[17:47:18.934]                       stop(msg)
[17:47:18.934]                     }
[17:47:18.934]                     invisible(pathname)
[17:47:18.934]                   }
[17:47:18.934]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:18.934]                     rootPath = tempdir()) 
[17:47:18.934]                   {
[17:47:18.934]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:18.934]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:18.934]                       tmpdir = path, fileext = ".rds")
[17:47:18.934]                     save_rds(obj, file)
[17:47:18.934]                   }
[17:47:18.934]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:18.934]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.934]                   {
[17:47:18.934]                     inherits <- base::inherits
[17:47:18.934]                     invokeRestart <- base::invokeRestart
[17:47:18.934]                     is.null <- base::is.null
[17:47:18.934]                     muffled <- FALSE
[17:47:18.934]                     if (inherits(cond, "message")) {
[17:47:18.934]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:18.934]                       if (muffled) 
[17:47:18.934]                         invokeRestart("muffleMessage")
[17:47:18.934]                     }
[17:47:18.934]                     else if (inherits(cond, "warning")) {
[17:47:18.934]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:18.934]                       if (muffled) 
[17:47:18.934]                         invokeRestart("muffleWarning")
[17:47:18.934]                     }
[17:47:18.934]                     else if (inherits(cond, "condition")) {
[17:47:18.934]                       if (!is.null(pattern)) {
[17:47:18.934]                         computeRestarts <- base::computeRestarts
[17:47:18.934]                         grepl <- base::grepl
[17:47:18.934]                         restarts <- computeRestarts(cond)
[17:47:18.934]                         for (restart in restarts) {
[17:47:18.934]                           name <- restart$name
[17:47:18.934]                           if (is.null(name)) 
[17:47:18.934]                             next
[17:47:18.934]                           if (!grepl(pattern, name)) 
[17:47:18.934]                             next
[17:47:18.934]                           invokeRestart(restart)
[17:47:18.934]                           muffled <- TRUE
[17:47:18.934]                           break
[17:47:18.934]                         }
[17:47:18.934]                       }
[17:47:18.934]                     }
[17:47:18.934]                     invisible(muffled)
[17:47:18.934]                   }
[17:47:18.934]                   muffleCondition(cond)
[17:47:18.934]                 })
[17:47:18.934]             }))
[17:47:18.934]             future::FutureResult(value = ...future.value$value, 
[17:47:18.934]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.934]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.934]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.934]                     ...future.globalenv.names))
[17:47:18.934]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.934]         }, condition = base::local({
[17:47:18.934]             c <- base::c
[17:47:18.934]             inherits <- base::inherits
[17:47:18.934]             invokeRestart <- base::invokeRestart
[17:47:18.934]             length <- base::length
[17:47:18.934]             list <- base::list
[17:47:18.934]             seq.int <- base::seq.int
[17:47:18.934]             signalCondition <- base::signalCondition
[17:47:18.934]             sys.calls <- base::sys.calls
[17:47:18.934]             `[[` <- base::`[[`
[17:47:18.934]             `+` <- base::`+`
[17:47:18.934]             `<<-` <- base::`<<-`
[17:47:18.934]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.934]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.934]                   3L)]
[17:47:18.934]             }
[17:47:18.934]             function(cond) {
[17:47:18.934]                 is_error <- inherits(cond, "error")
[17:47:18.934]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.934]                   NULL)
[17:47:18.934]                 if (is_error) {
[17:47:18.934]                   sessionInformation <- function() {
[17:47:18.934]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.934]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.934]                       search = base::search(), system = base::Sys.info())
[17:47:18.934]                   }
[17:47:18.934]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.934]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.934]                     cond$call), session = sessionInformation(), 
[17:47:18.934]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.934]                   signalCondition(cond)
[17:47:18.934]                 }
[17:47:18.934]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.934]                 "immediateCondition"))) {
[17:47:18.934]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.934]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.934]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.934]                   if (TRUE && !signal) {
[17:47:18.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.934]                     {
[17:47:18.934]                       inherits <- base::inherits
[17:47:18.934]                       invokeRestart <- base::invokeRestart
[17:47:18.934]                       is.null <- base::is.null
[17:47:18.934]                       muffled <- FALSE
[17:47:18.934]                       if (inherits(cond, "message")) {
[17:47:18.934]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.934]                         if (muffled) 
[17:47:18.934]                           invokeRestart("muffleMessage")
[17:47:18.934]                       }
[17:47:18.934]                       else if (inherits(cond, "warning")) {
[17:47:18.934]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.934]                         if (muffled) 
[17:47:18.934]                           invokeRestart("muffleWarning")
[17:47:18.934]                       }
[17:47:18.934]                       else if (inherits(cond, "condition")) {
[17:47:18.934]                         if (!is.null(pattern)) {
[17:47:18.934]                           computeRestarts <- base::computeRestarts
[17:47:18.934]                           grepl <- base::grepl
[17:47:18.934]                           restarts <- computeRestarts(cond)
[17:47:18.934]                           for (restart in restarts) {
[17:47:18.934]                             name <- restart$name
[17:47:18.934]                             if (is.null(name)) 
[17:47:18.934]                               next
[17:47:18.934]                             if (!grepl(pattern, name)) 
[17:47:18.934]                               next
[17:47:18.934]                             invokeRestart(restart)
[17:47:18.934]                             muffled <- TRUE
[17:47:18.934]                             break
[17:47:18.934]                           }
[17:47:18.934]                         }
[17:47:18.934]                       }
[17:47:18.934]                       invisible(muffled)
[17:47:18.934]                     }
[17:47:18.934]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.934]                   }
[17:47:18.934]                 }
[17:47:18.934]                 else {
[17:47:18.934]                   if (TRUE) {
[17:47:18.934]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.934]                     {
[17:47:18.934]                       inherits <- base::inherits
[17:47:18.934]                       invokeRestart <- base::invokeRestart
[17:47:18.934]                       is.null <- base::is.null
[17:47:18.934]                       muffled <- FALSE
[17:47:18.934]                       if (inherits(cond, "message")) {
[17:47:18.934]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.934]                         if (muffled) 
[17:47:18.934]                           invokeRestart("muffleMessage")
[17:47:18.934]                       }
[17:47:18.934]                       else if (inherits(cond, "warning")) {
[17:47:18.934]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.934]                         if (muffled) 
[17:47:18.934]                           invokeRestart("muffleWarning")
[17:47:18.934]                       }
[17:47:18.934]                       else if (inherits(cond, "condition")) {
[17:47:18.934]                         if (!is.null(pattern)) {
[17:47:18.934]                           computeRestarts <- base::computeRestarts
[17:47:18.934]                           grepl <- base::grepl
[17:47:18.934]                           restarts <- computeRestarts(cond)
[17:47:18.934]                           for (restart in restarts) {
[17:47:18.934]                             name <- restart$name
[17:47:18.934]                             if (is.null(name)) 
[17:47:18.934]                               next
[17:47:18.934]                             if (!grepl(pattern, name)) 
[17:47:18.934]                               next
[17:47:18.934]                             invokeRestart(restart)
[17:47:18.934]                             muffled <- TRUE
[17:47:18.934]                             break
[17:47:18.934]                           }
[17:47:18.934]                         }
[17:47:18.934]                       }
[17:47:18.934]                       invisible(muffled)
[17:47:18.934]                     }
[17:47:18.934]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.934]                   }
[17:47:18.934]                 }
[17:47:18.934]             }
[17:47:18.934]         }))
[17:47:18.934]     }, error = function(ex) {
[17:47:18.934]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.934]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.934]                 ...future.rng), started = ...future.startTime, 
[17:47:18.934]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.934]             version = "1.8"), class = "FutureResult")
[17:47:18.934]     }, finally = {
[17:47:18.934]         if (!identical(...future.workdir, getwd())) 
[17:47:18.934]             setwd(...future.workdir)
[17:47:18.934]         {
[17:47:18.934]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.934]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.934]             }
[17:47:18.934]             base::options(...future.oldOptions)
[17:47:18.934]             if (.Platform$OS.type == "windows") {
[17:47:18.934]                 old_names <- names(...future.oldEnvVars)
[17:47:18.934]                 envs <- base::Sys.getenv()
[17:47:18.934]                 names <- names(envs)
[17:47:18.934]                 common <- intersect(names, old_names)
[17:47:18.934]                 added <- setdiff(names, old_names)
[17:47:18.934]                 removed <- setdiff(old_names, names)
[17:47:18.934]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.934]                   envs[common]]
[17:47:18.934]                 NAMES <- toupper(changed)
[17:47:18.934]                 args <- list()
[17:47:18.934]                 for (kk in seq_along(NAMES)) {
[17:47:18.934]                   name <- changed[[kk]]
[17:47:18.934]                   NAME <- NAMES[[kk]]
[17:47:18.934]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.934]                     next
[17:47:18.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.934]                 }
[17:47:18.934]                 NAMES <- toupper(added)
[17:47:18.934]                 for (kk in seq_along(NAMES)) {
[17:47:18.934]                   name <- added[[kk]]
[17:47:18.934]                   NAME <- NAMES[[kk]]
[17:47:18.934]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.934]                     next
[17:47:18.934]                   args[[name]] <- ""
[17:47:18.934]                 }
[17:47:18.934]                 NAMES <- toupper(removed)
[17:47:18.934]                 for (kk in seq_along(NAMES)) {
[17:47:18.934]                   name <- removed[[kk]]
[17:47:18.934]                   NAME <- NAMES[[kk]]
[17:47:18.934]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.934]                     next
[17:47:18.934]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.934]                 }
[17:47:18.934]                 if (length(args) > 0) 
[17:47:18.934]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.934]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.934]             }
[17:47:18.934]             else {
[17:47:18.934]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.934]             }
[17:47:18.934]             {
[17:47:18.934]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.934]                   0L) {
[17:47:18.934]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.934]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.934]                   base::options(opts)
[17:47:18.934]                 }
[17:47:18.934]                 {
[17:47:18.934]                   {
[17:47:18.934]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:18.934]                     NULL
[17:47:18.934]                   }
[17:47:18.934]                   options(future.plan = NULL)
[17:47:18.934]                   if (is.na(NA_character_)) 
[17:47:18.934]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.934]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.934]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.934]                     .init = FALSE)
[17:47:18.934]                 }
[17:47:18.934]             }
[17:47:18.934]         }
[17:47:18.934]     })
[17:47:18.934]     if (TRUE) {
[17:47:18.934]         base::sink(type = "output", split = FALSE)
[17:47:18.934]         if (TRUE) {
[17:47:18.934]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.934]         }
[17:47:18.934]         else {
[17:47:18.934]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.934]         }
[17:47:18.934]         base::close(...future.stdout)
[17:47:18.934]         ...future.stdout <- NULL
[17:47:18.934]     }
[17:47:18.934]     ...future.result$conditions <- ...future.conditions
[17:47:18.934]     ...future.result$finished <- base::Sys.time()
[17:47:18.934]     ...future.result
[17:47:18.934] }
[17:47:18.937] requestCore(): workers = 2
[17:47:18.938] MulticoreFuture started
 - Creating multicore future #2 ...
[17:47:18.940] plan(): Setting new future strategy stack:
[17:47:18.940] List of future strategies:
[17:47:18.940] 1. sequential:
[17:47:18.940]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.940]    - tweaked: FALSE
[17:47:18.940]    - call: NULL
[17:47:18.941] plan(): nbrOfWorkers() = 1
[17:47:18.943] plan(): Setting new future strategy stack:
[17:47:18.943] List of future strategies:
[17:47:18.943] 1. multicore:
[17:47:18.943]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.943]    - tweaked: FALSE
[17:47:18.943]    - call: plan(multicore)
[17:47:18.944] getGlobalsAndPackages() ...
[17:47:18.944] Not searching for globals
[17:47:18.944] - globals: [0] <none>
[17:47:18.944] getGlobalsAndPackages() ... DONE
[17:47:18.945] Packages needed by the future expression (n = 0): <none>
[17:47:18.945] Packages needed by future strategies (n = 0): <none>
[17:47:18.947] plan(): nbrOfWorkers() = 2
[17:47:18.946] {
[17:47:18.946]     {
[17:47:18.946]         {
[17:47:18.946]             ...future.startTime <- base::Sys.time()
[17:47:18.946]             {
[17:47:18.946]                 {
[17:47:18.946]                   {
[17:47:18.946]                     {
[17:47:18.946]                       base::local({
[17:47:18.946]                         has_future <- base::requireNamespace("future", 
[17:47:18.946]                           quietly = TRUE)
[17:47:18.946]                         if (has_future) {
[17:47:18.946]                           ns <- base::getNamespace("future")
[17:47:18.946]                           version <- ns[[".package"]][["version"]]
[17:47:18.946]                           if (is.null(version)) 
[17:47:18.946]                             version <- utils::packageVersion("future")
[17:47:18.946]                         }
[17:47:18.946]                         else {
[17:47:18.946]                           version <- NULL
[17:47:18.946]                         }
[17:47:18.946]                         if (!has_future || version < "1.8.0") {
[17:47:18.946]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.946]                             "", base::R.version$version.string), 
[17:47:18.946]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:18.946]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.946]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.946]                               "release", "version")], collapse = " "), 
[17:47:18.946]                             hostname = base::Sys.info()[["nodename"]])
[17:47:18.946]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.946]                             info)
[17:47:18.946]                           info <- base::paste(info, collapse = "; ")
[17:47:18.946]                           if (!has_future) {
[17:47:18.946]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.946]                               info)
[17:47:18.946]                           }
[17:47:18.946]                           else {
[17:47:18.946]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.946]                               info, version)
[17:47:18.946]                           }
[17:47:18.946]                           base::stop(msg)
[17:47:18.946]                         }
[17:47:18.946]                       })
[17:47:18.946]                     }
[17:47:18.946]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:18.946]                     base::options(mc.cores = 1L)
[17:47:18.946]                   }
[17:47:18.946]                   ...future.strategy.old <- future::plan("list")
[17:47:18.946]                   options(future.plan = NULL)
[17:47:18.946]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.946]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.946]                 }
[17:47:18.946]                 ...future.workdir <- getwd()
[17:47:18.946]             }
[17:47:18.946]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.946]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.946]         }
[17:47:18.946]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.946]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.946]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.946]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.946]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.946]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.946]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.946]             base::names(...future.oldOptions))
[17:47:18.946]     }
[17:47:18.946]     if (FALSE) {
[17:47:18.946]     }
[17:47:18.946]     else {
[17:47:18.946]         if (TRUE) {
[17:47:18.946]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.946]                 open = "w")
[17:47:18.946]         }
[17:47:18.946]         else {
[17:47:18.946]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.946]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.946]         }
[17:47:18.946]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.946]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.946]             base::sink(type = "output", split = FALSE)
[17:47:18.946]             base::close(...future.stdout)
[17:47:18.946]         }, add = TRUE)
[17:47:18.946]     }
[17:47:18.946]     ...future.frame <- base::sys.nframe()
[17:47:18.946]     ...future.conditions <- base::list()
[17:47:18.946]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.946]     if (FALSE) {
[17:47:18.946]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.946]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.946]     }
[17:47:18.946]     ...future.result <- base::tryCatch({
[17:47:18.946]         base::withCallingHandlers({
[17:47:18.946]             ...future.value <- base::withVisible(base::local({
[17:47:18.946]                 withCallingHandlers({
[17:47:18.946]                   {
[17:47:18.946]                     ii
[17:47:18.946]                   }
[17:47:18.946]                 }, immediateCondition = function(cond) {
[17:47:18.946]                   save_rds <- function (object, pathname, ...) 
[17:47:18.946]                   {
[17:47:18.946]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:18.946]                     if (file_test("-f", pathname_tmp)) {
[17:47:18.946]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.946]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:18.946]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.946]                         fi_tmp[["mtime"]])
[17:47:18.946]                     }
[17:47:18.946]                     tryCatch({
[17:47:18.946]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:18.946]                     }, error = function(ex) {
[17:47:18.946]                       msg <- conditionMessage(ex)
[17:47:18.946]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.946]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:18.946]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.946]                         fi_tmp[["mtime"]], msg)
[17:47:18.946]                       ex$message <- msg
[17:47:18.946]                       stop(ex)
[17:47:18.946]                     })
[17:47:18.946]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:18.946]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:18.946]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:18.946]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.946]                       fi <- file.info(pathname)
[17:47:18.946]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:18.946]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.946]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:18.946]                         fi[["size"]], fi[["mtime"]])
[17:47:18.946]                       stop(msg)
[17:47:18.946]                     }
[17:47:18.946]                     invisible(pathname)
[17:47:18.946]                   }
[17:47:18.946]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:18.946]                     rootPath = tempdir()) 
[17:47:18.946]                   {
[17:47:18.946]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:18.946]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:18.946]                       tmpdir = path, fileext = ".rds")
[17:47:18.946]                     save_rds(obj, file)
[17:47:18.946]                   }
[17:47:18.946]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:18.946]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.946]                   {
[17:47:18.946]                     inherits <- base::inherits
[17:47:18.946]                     invokeRestart <- base::invokeRestart
[17:47:18.946]                     is.null <- base::is.null
[17:47:18.946]                     muffled <- FALSE
[17:47:18.946]                     if (inherits(cond, "message")) {
[17:47:18.946]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:18.946]                       if (muffled) 
[17:47:18.946]                         invokeRestart("muffleMessage")
[17:47:18.946]                     }
[17:47:18.946]                     else if (inherits(cond, "warning")) {
[17:47:18.946]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:18.946]                       if (muffled) 
[17:47:18.946]                         invokeRestart("muffleWarning")
[17:47:18.946]                     }
[17:47:18.946]                     else if (inherits(cond, "condition")) {
[17:47:18.946]                       if (!is.null(pattern)) {
[17:47:18.946]                         computeRestarts <- base::computeRestarts
[17:47:18.946]                         grepl <- base::grepl
[17:47:18.946]                         restarts <- computeRestarts(cond)
[17:47:18.946]                         for (restart in restarts) {
[17:47:18.946]                           name <- restart$name
[17:47:18.946]                           if (is.null(name)) 
[17:47:18.946]                             next
[17:47:18.946]                           if (!grepl(pattern, name)) 
[17:47:18.946]                             next
[17:47:18.946]                           invokeRestart(restart)
[17:47:18.946]                           muffled <- TRUE
[17:47:18.946]                           break
[17:47:18.946]                         }
[17:47:18.946]                       }
[17:47:18.946]                     }
[17:47:18.946]                     invisible(muffled)
[17:47:18.946]                   }
[17:47:18.946]                   muffleCondition(cond)
[17:47:18.946]                 })
[17:47:18.946]             }))
[17:47:18.946]             future::FutureResult(value = ...future.value$value, 
[17:47:18.946]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.946]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.946]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.946]                     ...future.globalenv.names))
[17:47:18.946]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.946]         }, condition = base::local({
[17:47:18.946]             c <- base::c
[17:47:18.946]             inherits <- base::inherits
[17:47:18.946]             invokeRestart <- base::invokeRestart
[17:47:18.946]             length <- base::length
[17:47:18.946]             list <- base::list
[17:47:18.946]             seq.int <- base::seq.int
[17:47:18.946]             signalCondition <- base::signalCondition
[17:47:18.946]             sys.calls <- base::sys.calls
[17:47:18.946]             `[[` <- base::`[[`
[17:47:18.946]             `+` <- base::`+`
[17:47:18.946]             `<<-` <- base::`<<-`
[17:47:18.946]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.946]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.946]                   3L)]
[17:47:18.946]             }
[17:47:18.946]             function(cond) {
[17:47:18.946]                 is_error <- inherits(cond, "error")
[17:47:18.946]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.946]                   NULL)
[17:47:18.946]                 if (is_error) {
[17:47:18.946]                   sessionInformation <- function() {
[17:47:18.946]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.946]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.946]                       search = base::search(), system = base::Sys.info())
[17:47:18.946]                   }
[17:47:18.946]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.946]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.946]                     cond$call), session = sessionInformation(), 
[17:47:18.946]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.946]                   signalCondition(cond)
[17:47:18.946]                 }
[17:47:18.946]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.946]                 "immediateCondition"))) {
[17:47:18.946]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.946]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.946]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.946]                   if (TRUE && !signal) {
[17:47:18.946]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.946]                     {
[17:47:18.946]                       inherits <- base::inherits
[17:47:18.946]                       invokeRestart <- base::invokeRestart
[17:47:18.946]                       is.null <- base::is.null
[17:47:18.946]                       muffled <- FALSE
[17:47:18.946]                       if (inherits(cond, "message")) {
[17:47:18.946]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.946]                         if (muffled) 
[17:47:18.946]                           invokeRestart("muffleMessage")
[17:47:18.946]                       }
[17:47:18.946]                       else if (inherits(cond, "warning")) {
[17:47:18.946]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.946]                         if (muffled) 
[17:47:18.946]                           invokeRestart("muffleWarning")
[17:47:18.946]                       }
[17:47:18.946]                       else if (inherits(cond, "condition")) {
[17:47:18.946]                         if (!is.null(pattern)) {
[17:47:18.946]                           computeRestarts <- base::computeRestarts
[17:47:18.946]                           grepl <- base::grepl
[17:47:18.946]                           restarts <- computeRestarts(cond)
[17:47:18.946]                           for (restart in restarts) {
[17:47:18.946]                             name <- restart$name
[17:47:18.946]                             if (is.null(name)) 
[17:47:18.946]                               next
[17:47:18.946]                             if (!grepl(pattern, name)) 
[17:47:18.946]                               next
[17:47:18.946]                             invokeRestart(restart)
[17:47:18.946]                             muffled <- TRUE
[17:47:18.946]                             break
[17:47:18.946]                           }
[17:47:18.946]                         }
[17:47:18.946]                       }
[17:47:18.946]                       invisible(muffled)
[17:47:18.946]                     }
[17:47:18.946]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.946]                   }
[17:47:18.946]                 }
[17:47:18.946]                 else {
[17:47:18.946]                   if (TRUE) {
[17:47:18.946]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.946]                     {
[17:47:18.946]                       inherits <- base::inherits
[17:47:18.946]                       invokeRestart <- base::invokeRestart
[17:47:18.946]                       is.null <- base::is.null
[17:47:18.946]                       muffled <- FALSE
[17:47:18.946]                       if (inherits(cond, "message")) {
[17:47:18.946]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.946]                         if (muffled) 
[17:47:18.946]                           invokeRestart("muffleMessage")
[17:47:18.946]                       }
[17:47:18.946]                       else if (inherits(cond, "warning")) {
[17:47:18.946]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.946]                         if (muffled) 
[17:47:18.946]                           invokeRestart("muffleWarning")
[17:47:18.946]                       }
[17:47:18.946]                       else if (inherits(cond, "condition")) {
[17:47:18.946]                         if (!is.null(pattern)) {
[17:47:18.946]                           computeRestarts <- base::computeRestarts
[17:47:18.946]                           grepl <- base::grepl
[17:47:18.946]                           restarts <- computeRestarts(cond)
[17:47:18.946]                           for (restart in restarts) {
[17:47:18.946]                             name <- restart$name
[17:47:18.946]                             if (is.null(name)) 
[17:47:18.946]                               next
[17:47:18.946]                             if (!grepl(pattern, name)) 
[17:47:18.946]                               next
[17:47:18.946]                             invokeRestart(restart)
[17:47:18.946]                             muffled <- TRUE
[17:47:18.946]                             break
[17:47:18.946]                           }
[17:47:18.946]                         }
[17:47:18.946]                       }
[17:47:18.946]                       invisible(muffled)
[17:47:18.946]                     }
[17:47:18.946]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.946]                   }
[17:47:18.946]                 }
[17:47:18.946]             }
[17:47:18.946]         }))
[17:47:18.946]     }, error = function(ex) {
[17:47:18.946]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.946]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.946]                 ...future.rng), started = ...future.startTime, 
[17:47:18.946]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.946]             version = "1.8"), class = "FutureResult")
[17:47:18.946]     }, finally = {
[17:47:18.946]         if (!identical(...future.workdir, getwd())) 
[17:47:18.946]             setwd(...future.workdir)
[17:47:18.946]         {
[17:47:18.946]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.946]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.946]             }
[17:47:18.946]             base::options(...future.oldOptions)
[17:47:18.946]             if (.Platform$OS.type == "windows") {
[17:47:18.946]                 old_names <- names(...future.oldEnvVars)
[17:47:18.946]                 envs <- base::Sys.getenv()
[17:47:18.946]                 names <- names(envs)
[17:47:18.946]                 common <- intersect(names, old_names)
[17:47:18.946]                 added <- setdiff(names, old_names)
[17:47:18.946]                 removed <- setdiff(old_names, names)
[17:47:18.946]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.946]                   envs[common]]
[17:47:18.946]                 NAMES <- toupper(changed)
[17:47:18.946]                 args <- list()
[17:47:18.946]                 for (kk in seq_along(NAMES)) {
[17:47:18.946]                   name <- changed[[kk]]
[17:47:18.946]                   NAME <- NAMES[[kk]]
[17:47:18.946]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.946]                     next
[17:47:18.946]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.946]                 }
[17:47:18.946]                 NAMES <- toupper(added)
[17:47:18.946]                 for (kk in seq_along(NAMES)) {
[17:47:18.946]                   name <- added[[kk]]
[17:47:18.946]                   NAME <- NAMES[[kk]]
[17:47:18.946]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.946]                     next
[17:47:18.946]                   args[[name]] <- ""
[17:47:18.946]                 }
[17:47:18.946]                 NAMES <- toupper(removed)
[17:47:18.946]                 for (kk in seq_along(NAMES)) {
[17:47:18.946]                   name <- removed[[kk]]
[17:47:18.946]                   NAME <- NAMES[[kk]]
[17:47:18.946]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.946]                     next
[17:47:18.946]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.946]                 }
[17:47:18.946]                 if (length(args) > 0) 
[17:47:18.946]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.946]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.946]             }
[17:47:18.946]             else {
[17:47:18.946]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.946]             }
[17:47:18.946]             {
[17:47:18.946]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.946]                   0L) {
[17:47:18.946]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.946]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.946]                   base::options(opts)
[17:47:18.946]                 }
[17:47:18.946]                 {
[17:47:18.946]                   {
[17:47:18.946]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:18.946]                     NULL
[17:47:18.946]                   }
[17:47:18.946]                   options(future.plan = NULL)
[17:47:18.946]                   if (is.na(NA_character_)) 
[17:47:18.946]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.946]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.946]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.946]                     .init = FALSE)
[17:47:18.946]                 }
[17:47:18.946]             }
[17:47:18.946]         }
[17:47:18.946]     })
[17:47:18.946]     if (TRUE) {
[17:47:18.946]         base::sink(type = "output", split = FALSE)
[17:47:18.946]         if (TRUE) {
[17:47:18.946]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.946]         }
[17:47:18.946]         else {
[17:47:18.946]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.946]         }
[17:47:18.946]         base::close(...future.stdout)
[17:47:18.946]         ...future.stdout <- NULL
[17:47:18.946]     }
[17:47:18.946]     ...future.result$conditions <- ...future.conditions
[17:47:18.946]     ...future.result$finished <- base::Sys.time()
[17:47:18.946]     ...future.result
[17:47:18.946] }
[17:47:18.949] requestCore(): workers = 2
[17:47:18.952] MulticoreFuture started
 - Creating multicore future #3 ...
[17:47:18.953] plan(): Setting new future strategy stack:
[17:47:18.953] List of future strategies:
[17:47:18.953] 1. sequential:
[17:47:18.953]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.953]    - tweaked: FALSE
[17:47:18.953]    - call: NULL
[17:47:18.954] plan(): nbrOfWorkers() = 1
[17:47:18.956] plan(): Setting new future strategy stack:
[17:47:18.956] List of future strategies:
[17:47:18.956] 1. multicore:
[17:47:18.956]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.956]    - tweaked: FALSE
[17:47:18.956]    - call: plan(multicore)
[17:47:18.957] getGlobalsAndPackages() ...
[17:47:18.957] Not searching for globals
[17:47:18.958] - globals: [0] <none>
[17:47:18.958] getGlobalsAndPackages() ... DONE
[17:47:18.959] Packages needed by the future expression (n = 0): <none>
[17:47:18.959] Packages needed by future strategies (n = 0): <none>
[17:47:18.961] plan(): nbrOfWorkers() = 2
[17:47:18.960] {
[17:47:18.960]     {
[17:47:18.960]         {
[17:47:18.960]             ...future.startTime <- base::Sys.time()
[17:47:18.960]             {
[17:47:18.960]                 {
[17:47:18.960]                   {
[17:47:18.960]                     {
[17:47:18.960]                       base::local({
[17:47:18.960]                         has_future <- base::requireNamespace("future", 
[17:47:18.960]                           quietly = TRUE)
[17:47:18.960]                         if (has_future) {
[17:47:18.960]                           ns <- base::getNamespace("future")
[17:47:18.960]                           version <- ns[[".package"]][["version"]]
[17:47:18.960]                           if (is.null(version)) 
[17:47:18.960]                             version <- utils::packageVersion("future")
[17:47:18.960]                         }
[17:47:18.960]                         else {
[17:47:18.960]                           version <- NULL
[17:47:18.960]                         }
[17:47:18.960]                         if (!has_future || version < "1.8.0") {
[17:47:18.960]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.960]                             "", base::R.version$version.string), 
[17:47:18.960]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:18.960]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.960]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.960]                               "release", "version")], collapse = " "), 
[17:47:18.960]                             hostname = base::Sys.info()[["nodename"]])
[17:47:18.960]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.960]                             info)
[17:47:18.960]                           info <- base::paste(info, collapse = "; ")
[17:47:18.960]                           if (!has_future) {
[17:47:18.960]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.960]                               info)
[17:47:18.960]                           }
[17:47:18.960]                           else {
[17:47:18.960]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.960]                               info, version)
[17:47:18.960]                           }
[17:47:18.960]                           base::stop(msg)
[17:47:18.960]                         }
[17:47:18.960]                       })
[17:47:18.960]                     }
[17:47:18.960]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:18.960]                     base::options(mc.cores = 1L)
[17:47:18.960]                   }
[17:47:18.960]                   ...future.strategy.old <- future::plan("list")
[17:47:18.960]                   options(future.plan = NULL)
[17:47:18.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.960]                 }
[17:47:18.960]                 ...future.workdir <- getwd()
[17:47:18.960]             }
[17:47:18.960]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.960]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.960]         }
[17:47:18.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.960]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.960]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.960]             base::names(...future.oldOptions))
[17:47:18.960]     }
[17:47:18.960]     if (FALSE) {
[17:47:18.960]     }
[17:47:18.960]     else {
[17:47:18.960]         if (TRUE) {
[17:47:18.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.960]                 open = "w")
[17:47:18.960]         }
[17:47:18.960]         else {
[17:47:18.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.960]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.960]         }
[17:47:18.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.960]             base::sink(type = "output", split = FALSE)
[17:47:18.960]             base::close(...future.stdout)
[17:47:18.960]         }, add = TRUE)
[17:47:18.960]     }
[17:47:18.960]     ...future.frame <- base::sys.nframe()
[17:47:18.960]     ...future.conditions <- base::list()
[17:47:18.960]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.960]     if (FALSE) {
[17:47:18.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.960]     }
[17:47:18.960]     ...future.result <- base::tryCatch({
[17:47:18.960]         base::withCallingHandlers({
[17:47:18.960]             ...future.value <- base::withVisible(base::local({
[17:47:18.960]                 withCallingHandlers({
[17:47:18.960]                   {
[17:47:18.960]                     ii
[17:47:18.960]                   }
[17:47:18.960]                 }, immediateCondition = function(cond) {
[17:47:18.960]                   save_rds <- function (object, pathname, ...) 
[17:47:18.960]                   {
[17:47:18.960]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:18.960]                     if (file_test("-f", pathname_tmp)) {
[17:47:18.960]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.960]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:18.960]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.960]                         fi_tmp[["mtime"]])
[17:47:18.960]                     }
[17:47:18.960]                     tryCatch({
[17:47:18.960]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:18.960]                     }, error = function(ex) {
[17:47:18.960]                       msg <- conditionMessage(ex)
[17:47:18.960]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.960]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:18.960]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.960]                         fi_tmp[["mtime"]], msg)
[17:47:18.960]                       ex$message <- msg
[17:47:18.960]                       stop(ex)
[17:47:18.960]                     })
[17:47:18.960]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:18.960]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:18.960]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:18.960]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.960]                       fi <- file.info(pathname)
[17:47:18.960]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:18.960]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.960]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:18.960]                         fi[["size"]], fi[["mtime"]])
[17:47:18.960]                       stop(msg)
[17:47:18.960]                     }
[17:47:18.960]                     invisible(pathname)
[17:47:18.960]                   }
[17:47:18.960]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:18.960]                     rootPath = tempdir()) 
[17:47:18.960]                   {
[17:47:18.960]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:18.960]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:18.960]                       tmpdir = path, fileext = ".rds")
[17:47:18.960]                     save_rds(obj, file)
[17:47:18.960]                   }
[17:47:18.960]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:18.960]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.960]                   {
[17:47:18.960]                     inherits <- base::inherits
[17:47:18.960]                     invokeRestart <- base::invokeRestart
[17:47:18.960]                     is.null <- base::is.null
[17:47:18.960]                     muffled <- FALSE
[17:47:18.960]                     if (inherits(cond, "message")) {
[17:47:18.960]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:18.960]                       if (muffled) 
[17:47:18.960]                         invokeRestart("muffleMessage")
[17:47:18.960]                     }
[17:47:18.960]                     else if (inherits(cond, "warning")) {
[17:47:18.960]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:18.960]                       if (muffled) 
[17:47:18.960]                         invokeRestart("muffleWarning")
[17:47:18.960]                     }
[17:47:18.960]                     else if (inherits(cond, "condition")) {
[17:47:18.960]                       if (!is.null(pattern)) {
[17:47:18.960]                         computeRestarts <- base::computeRestarts
[17:47:18.960]                         grepl <- base::grepl
[17:47:18.960]                         restarts <- computeRestarts(cond)
[17:47:18.960]                         for (restart in restarts) {
[17:47:18.960]                           name <- restart$name
[17:47:18.960]                           if (is.null(name)) 
[17:47:18.960]                             next
[17:47:18.960]                           if (!grepl(pattern, name)) 
[17:47:18.960]                             next
[17:47:18.960]                           invokeRestart(restart)
[17:47:18.960]                           muffled <- TRUE
[17:47:18.960]                           break
[17:47:18.960]                         }
[17:47:18.960]                       }
[17:47:18.960]                     }
[17:47:18.960]                     invisible(muffled)
[17:47:18.960]                   }
[17:47:18.960]                   muffleCondition(cond)
[17:47:18.960]                 })
[17:47:18.960]             }))
[17:47:18.960]             future::FutureResult(value = ...future.value$value, 
[17:47:18.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.960]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.960]                     ...future.globalenv.names))
[17:47:18.960]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.960]         }, condition = base::local({
[17:47:18.960]             c <- base::c
[17:47:18.960]             inherits <- base::inherits
[17:47:18.960]             invokeRestart <- base::invokeRestart
[17:47:18.960]             length <- base::length
[17:47:18.960]             list <- base::list
[17:47:18.960]             seq.int <- base::seq.int
[17:47:18.960]             signalCondition <- base::signalCondition
[17:47:18.960]             sys.calls <- base::sys.calls
[17:47:18.960]             `[[` <- base::`[[`
[17:47:18.960]             `+` <- base::`+`
[17:47:18.960]             `<<-` <- base::`<<-`
[17:47:18.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.960]                   3L)]
[17:47:18.960]             }
[17:47:18.960]             function(cond) {
[17:47:18.960]                 is_error <- inherits(cond, "error")
[17:47:18.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.960]                   NULL)
[17:47:18.960]                 if (is_error) {
[17:47:18.960]                   sessionInformation <- function() {
[17:47:18.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.960]                       search = base::search(), system = base::Sys.info())
[17:47:18.960]                   }
[17:47:18.960]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.960]                     cond$call), session = sessionInformation(), 
[17:47:18.960]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.960]                   signalCondition(cond)
[17:47:18.960]                 }
[17:47:18.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.960]                 "immediateCondition"))) {
[17:47:18.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.960]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.960]                   if (TRUE && !signal) {
[17:47:18.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.960]                     {
[17:47:18.960]                       inherits <- base::inherits
[17:47:18.960]                       invokeRestart <- base::invokeRestart
[17:47:18.960]                       is.null <- base::is.null
[17:47:18.960]                       muffled <- FALSE
[17:47:18.960]                       if (inherits(cond, "message")) {
[17:47:18.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.960]                         if (muffled) 
[17:47:18.960]                           invokeRestart("muffleMessage")
[17:47:18.960]                       }
[17:47:18.960]                       else if (inherits(cond, "warning")) {
[17:47:18.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.960]                         if (muffled) 
[17:47:18.960]                           invokeRestart("muffleWarning")
[17:47:18.960]                       }
[17:47:18.960]                       else if (inherits(cond, "condition")) {
[17:47:18.960]                         if (!is.null(pattern)) {
[17:47:18.960]                           computeRestarts <- base::computeRestarts
[17:47:18.960]                           grepl <- base::grepl
[17:47:18.960]                           restarts <- computeRestarts(cond)
[17:47:18.960]                           for (restart in restarts) {
[17:47:18.960]                             name <- restart$name
[17:47:18.960]                             if (is.null(name)) 
[17:47:18.960]                               next
[17:47:18.960]                             if (!grepl(pattern, name)) 
[17:47:18.960]                               next
[17:47:18.960]                             invokeRestart(restart)
[17:47:18.960]                             muffled <- TRUE
[17:47:18.960]                             break
[17:47:18.960]                           }
[17:47:18.960]                         }
[17:47:18.960]                       }
[17:47:18.960]                       invisible(muffled)
[17:47:18.960]                     }
[17:47:18.960]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.960]                   }
[17:47:18.960]                 }
[17:47:18.960]                 else {
[17:47:18.960]                   if (TRUE) {
[17:47:18.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.960]                     {
[17:47:18.960]                       inherits <- base::inherits
[17:47:18.960]                       invokeRestart <- base::invokeRestart
[17:47:18.960]                       is.null <- base::is.null
[17:47:18.960]                       muffled <- FALSE
[17:47:18.960]                       if (inherits(cond, "message")) {
[17:47:18.960]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.960]                         if (muffled) 
[17:47:18.960]                           invokeRestart("muffleMessage")
[17:47:18.960]                       }
[17:47:18.960]                       else if (inherits(cond, "warning")) {
[17:47:18.960]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.960]                         if (muffled) 
[17:47:18.960]                           invokeRestart("muffleWarning")
[17:47:18.960]                       }
[17:47:18.960]                       else if (inherits(cond, "condition")) {
[17:47:18.960]                         if (!is.null(pattern)) {
[17:47:18.960]                           computeRestarts <- base::computeRestarts
[17:47:18.960]                           grepl <- base::grepl
[17:47:18.960]                           restarts <- computeRestarts(cond)
[17:47:18.960]                           for (restart in restarts) {
[17:47:18.960]                             name <- restart$name
[17:47:18.960]                             if (is.null(name)) 
[17:47:18.960]                               next
[17:47:18.960]                             if (!grepl(pattern, name)) 
[17:47:18.960]                               next
[17:47:18.960]                             invokeRestart(restart)
[17:47:18.960]                             muffled <- TRUE
[17:47:18.960]                             break
[17:47:18.960]                           }
[17:47:18.960]                         }
[17:47:18.960]                       }
[17:47:18.960]                       invisible(muffled)
[17:47:18.960]                     }
[17:47:18.960]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.960]                   }
[17:47:18.960]                 }
[17:47:18.960]             }
[17:47:18.960]         }))
[17:47:18.960]     }, error = function(ex) {
[17:47:18.960]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.960]                 ...future.rng), started = ...future.startTime, 
[17:47:18.960]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.960]             version = "1.8"), class = "FutureResult")
[17:47:18.960]     }, finally = {
[17:47:18.960]         if (!identical(...future.workdir, getwd())) 
[17:47:18.960]             setwd(...future.workdir)
[17:47:18.960]         {
[17:47:18.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.960]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.960]             }
[17:47:18.960]             base::options(...future.oldOptions)
[17:47:18.960]             if (.Platform$OS.type == "windows") {
[17:47:18.960]                 old_names <- names(...future.oldEnvVars)
[17:47:18.960]                 envs <- base::Sys.getenv()
[17:47:18.960]                 names <- names(envs)
[17:47:18.960]                 common <- intersect(names, old_names)
[17:47:18.960]                 added <- setdiff(names, old_names)
[17:47:18.960]                 removed <- setdiff(old_names, names)
[17:47:18.960]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.960]                   envs[common]]
[17:47:18.960]                 NAMES <- toupper(changed)
[17:47:18.960]                 args <- list()
[17:47:18.960]                 for (kk in seq_along(NAMES)) {
[17:47:18.960]                   name <- changed[[kk]]
[17:47:18.960]                   NAME <- NAMES[[kk]]
[17:47:18.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.960]                     next
[17:47:18.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.960]                 }
[17:47:18.960]                 NAMES <- toupper(added)
[17:47:18.960]                 for (kk in seq_along(NAMES)) {
[17:47:18.960]                   name <- added[[kk]]
[17:47:18.960]                   NAME <- NAMES[[kk]]
[17:47:18.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.960]                     next
[17:47:18.960]                   args[[name]] <- ""
[17:47:18.960]                 }
[17:47:18.960]                 NAMES <- toupper(removed)
[17:47:18.960]                 for (kk in seq_along(NAMES)) {
[17:47:18.960]                   name <- removed[[kk]]
[17:47:18.960]                   NAME <- NAMES[[kk]]
[17:47:18.960]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.960]                     next
[17:47:18.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.960]                 }
[17:47:18.960]                 if (length(args) > 0) 
[17:47:18.960]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.960]             }
[17:47:18.960]             else {
[17:47:18.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.960]             }
[17:47:18.960]             {
[17:47:18.960]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.960]                   0L) {
[17:47:18.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.960]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.960]                   base::options(opts)
[17:47:18.960]                 }
[17:47:18.960]                 {
[17:47:18.960]                   {
[17:47:18.960]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:18.960]                     NULL
[17:47:18.960]                   }
[17:47:18.960]                   options(future.plan = NULL)
[17:47:18.960]                   if (is.na(NA_character_)) 
[17:47:18.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.960]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.960]                     .init = FALSE)
[17:47:18.960]                 }
[17:47:18.960]             }
[17:47:18.960]         }
[17:47:18.960]     })
[17:47:18.960]     if (TRUE) {
[17:47:18.960]         base::sink(type = "output", split = FALSE)
[17:47:18.960]         if (TRUE) {
[17:47:18.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.960]         }
[17:47:18.960]         else {
[17:47:18.960]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.960]         }
[17:47:18.960]         base::close(...future.stdout)
[17:47:18.960]         ...future.stdout <- NULL
[17:47:18.960]     }
[17:47:18.960]     ...future.result$conditions <- ...future.conditions
[17:47:18.960]     ...future.result$finished <- base::Sys.time()
[17:47:18.960]     ...future.result
[17:47:18.960] }
[17:47:18.963] requestCore(): workers = 2
[17:47:18.963] Poll #1 (0): usedCores() = 2, workers = 2
[17:47:18.974] result() for MulticoreFuture ...
[17:47:18.975] result() for MulticoreFuture ...
[17:47:18.975] result() for MulticoreFuture ... done
[17:47:18.976] result() for MulticoreFuture ... done
[17:47:18.976] result() for MulticoreFuture ...
[17:47:18.976] result() for MulticoreFuture ... done
[17:47:18.978] MulticoreFuture started
 - Creating multicore future #4 ...
[17:47:18.979] plan(): Setting new future strategy stack:
[17:47:18.980] List of future strategies:
[17:47:18.980] 1. sequential:
[17:47:18.980]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:18.980]    - tweaked: FALSE
[17:47:18.980]    - call: NULL
[17:47:18.981] plan(): nbrOfWorkers() = 1
[17:47:18.983] plan(): Setting new future strategy stack:
[17:47:18.983] List of future strategies:
[17:47:18.983] 1. multicore:
[17:47:18.983]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:18.983]    - tweaked: FALSE
[17:47:18.983]    - call: plan(multicore)
[17:47:18.984] getGlobalsAndPackages() ...
[17:47:18.984] Not searching for globals
[17:47:18.984] - globals: [0] <none>
[17:47:18.984] getGlobalsAndPackages() ... DONE
[17:47:18.985] Packages needed by the future expression (n = 0): <none>
[17:47:18.985] Packages needed by future strategies (n = 0): <none>
[17:47:18.988] plan(): nbrOfWorkers() = 2
[17:47:18.986] {
[17:47:18.986]     {
[17:47:18.986]         {
[17:47:18.986]             ...future.startTime <- base::Sys.time()
[17:47:18.986]             {
[17:47:18.986]                 {
[17:47:18.986]                   {
[17:47:18.986]                     {
[17:47:18.986]                       base::local({
[17:47:18.986]                         has_future <- base::requireNamespace("future", 
[17:47:18.986]                           quietly = TRUE)
[17:47:18.986]                         if (has_future) {
[17:47:18.986]                           ns <- base::getNamespace("future")
[17:47:18.986]                           version <- ns[[".package"]][["version"]]
[17:47:18.986]                           if (is.null(version)) 
[17:47:18.986]                             version <- utils::packageVersion("future")
[17:47:18.986]                         }
[17:47:18.986]                         else {
[17:47:18.986]                           version <- NULL
[17:47:18.986]                         }
[17:47:18.986]                         if (!has_future || version < "1.8.0") {
[17:47:18.986]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:18.986]                             "", base::R.version$version.string), 
[17:47:18.986]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:18.986]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:18.986]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:18.986]                               "release", "version")], collapse = " "), 
[17:47:18.986]                             hostname = base::Sys.info()[["nodename"]])
[17:47:18.986]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:18.986]                             info)
[17:47:18.986]                           info <- base::paste(info, collapse = "; ")
[17:47:18.986]                           if (!has_future) {
[17:47:18.986]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:18.986]                               info)
[17:47:18.986]                           }
[17:47:18.986]                           else {
[17:47:18.986]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:18.986]                               info, version)
[17:47:18.986]                           }
[17:47:18.986]                           base::stop(msg)
[17:47:18.986]                         }
[17:47:18.986]                       })
[17:47:18.986]                     }
[17:47:18.986]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:18.986]                     base::options(mc.cores = 1L)
[17:47:18.986]                   }
[17:47:18.986]                   ...future.strategy.old <- future::plan("list")
[17:47:18.986]                   options(future.plan = NULL)
[17:47:18.986]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.986]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:18.986]                 }
[17:47:18.986]                 ...future.workdir <- getwd()
[17:47:18.986]             }
[17:47:18.986]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:18.986]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:18.986]         }
[17:47:18.986]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:18.986]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:18.986]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:18.986]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:18.986]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:18.986]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:18.986]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:18.986]             base::names(...future.oldOptions))
[17:47:18.986]     }
[17:47:18.986]     if (FALSE) {
[17:47:18.986]     }
[17:47:18.986]     else {
[17:47:18.986]         if (TRUE) {
[17:47:18.986]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:18.986]                 open = "w")
[17:47:18.986]         }
[17:47:18.986]         else {
[17:47:18.986]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:18.986]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:18.986]         }
[17:47:18.986]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:18.986]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:18.986]             base::sink(type = "output", split = FALSE)
[17:47:18.986]             base::close(...future.stdout)
[17:47:18.986]         }, add = TRUE)
[17:47:18.986]     }
[17:47:18.986]     ...future.frame <- base::sys.nframe()
[17:47:18.986]     ...future.conditions <- base::list()
[17:47:18.986]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:18.986]     if (FALSE) {
[17:47:18.986]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:18.986]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:18.986]     }
[17:47:18.986]     ...future.result <- base::tryCatch({
[17:47:18.986]         base::withCallingHandlers({
[17:47:18.986]             ...future.value <- base::withVisible(base::local({
[17:47:18.986]                 withCallingHandlers({
[17:47:18.986]                   {
[17:47:18.986]                     ii
[17:47:18.986]                   }
[17:47:18.986]                 }, immediateCondition = function(cond) {
[17:47:18.986]                   save_rds <- function (object, pathname, ...) 
[17:47:18.986]                   {
[17:47:18.986]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:18.986]                     if (file_test("-f", pathname_tmp)) {
[17:47:18.986]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.986]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:18.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.986]                         fi_tmp[["mtime"]])
[17:47:18.986]                     }
[17:47:18.986]                     tryCatch({
[17:47:18.986]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:18.986]                     }, error = function(ex) {
[17:47:18.986]                       msg <- conditionMessage(ex)
[17:47:18.986]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.986]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:18.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.986]                         fi_tmp[["mtime"]], msg)
[17:47:18.986]                       ex$message <- msg
[17:47:18.986]                       stop(ex)
[17:47:18.986]                     })
[17:47:18.986]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:18.986]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:18.986]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:18.986]                       fi_tmp <- file.info(pathname_tmp)
[17:47:18.986]                       fi <- file.info(pathname)
[17:47:18.986]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:18.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:18.986]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:18.986]                         fi[["size"]], fi[["mtime"]])
[17:47:18.986]                       stop(msg)
[17:47:18.986]                     }
[17:47:18.986]                     invisible(pathname)
[17:47:18.986]                   }
[17:47:18.986]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:18.986]                     rootPath = tempdir()) 
[17:47:18.986]                   {
[17:47:18.986]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:18.986]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:18.986]                       tmpdir = path, fileext = ".rds")
[17:47:18.986]                     save_rds(obj, file)
[17:47:18.986]                   }
[17:47:18.986]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:18.986]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.986]                   {
[17:47:18.986]                     inherits <- base::inherits
[17:47:18.986]                     invokeRestart <- base::invokeRestart
[17:47:18.986]                     is.null <- base::is.null
[17:47:18.986]                     muffled <- FALSE
[17:47:18.986]                     if (inherits(cond, "message")) {
[17:47:18.986]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:18.986]                       if (muffled) 
[17:47:18.986]                         invokeRestart("muffleMessage")
[17:47:18.986]                     }
[17:47:18.986]                     else if (inherits(cond, "warning")) {
[17:47:18.986]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:18.986]                       if (muffled) 
[17:47:18.986]                         invokeRestart("muffleWarning")
[17:47:18.986]                     }
[17:47:18.986]                     else if (inherits(cond, "condition")) {
[17:47:18.986]                       if (!is.null(pattern)) {
[17:47:18.986]                         computeRestarts <- base::computeRestarts
[17:47:18.986]                         grepl <- base::grepl
[17:47:18.986]                         restarts <- computeRestarts(cond)
[17:47:18.986]                         for (restart in restarts) {
[17:47:18.986]                           name <- restart$name
[17:47:18.986]                           if (is.null(name)) 
[17:47:18.986]                             next
[17:47:18.986]                           if (!grepl(pattern, name)) 
[17:47:18.986]                             next
[17:47:18.986]                           invokeRestart(restart)
[17:47:18.986]                           muffled <- TRUE
[17:47:18.986]                           break
[17:47:18.986]                         }
[17:47:18.986]                       }
[17:47:18.986]                     }
[17:47:18.986]                     invisible(muffled)
[17:47:18.986]                   }
[17:47:18.986]                   muffleCondition(cond)
[17:47:18.986]                 })
[17:47:18.986]             }))
[17:47:18.986]             future::FutureResult(value = ...future.value$value, 
[17:47:18.986]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.986]                   ...future.rng), globalenv = if (FALSE) 
[17:47:18.986]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:18.986]                     ...future.globalenv.names))
[17:47:18.986]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:18.986]         }, condition = base::local({
[17:47:18.986]             c <- base::c
[17:47:18.986]             inherits <- base::inherits
[17:47:18.986]             invokeRestart <- base::invokeRestart
[17:47:18.986]             length <- base::length
[17:47:18.986]             list <- base::list
[17:47:18.986]             seq.int <- base::seq.int
[17:47:18.986]             signalCondition <- base::signalCondition
[17:47:18.986]             sys.calls <- base::sys.calls
[17:47:18.986]             `[[` <- base::`[[`
[17:47:18.986]             `+` <- base::`+`
[17:47:18.986]             `<<-` <- base::`<<-`
[17:47:18.986]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:18.986]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:18.986]                   3L)]
[17:47:18.986]             }
[17:47:18.986]             function(cond) {
[17:47:18.986]                 is_error <- inherits(cond, "error")
[17:47:18.986]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:18.986]                   NULL)
[17:47:18.986]                 if (is_error) {
[17:47:18.986]                   sessionInformation <- function() {
[17:47:18.986]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:18.986]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:18.986]                       search = base::search(), system = base::Sys.info())
[17:47:18.986]                   }
[17:47:18.986]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.986]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:18.986]                     cond$call), session = sessionInformation(), 
[17:47:18.986]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:18.986]                   signalCondition(cond)
[17:47:18.986]                 }
[17:47:18.986]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:18.986]                 "immediateCondition"))) {
[17:47:18.986]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:18.986]                   ...future.conditions[[length(...future.conditions) + 
[17:47:18.986]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:18.986]                   if (TRUE && !signal) {
[17:47:18.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.986]                     {
[17:47:18.986]                       inherits <- base::inherits
[17:47:18.986]                       invokeRestart <- base::invokeRestart
[17:47:18.986]                       is.null <- base::is.null
[17:47:18.986]                       muffled <- FALSE
[17:47:18.986]                       if (inherits(cond, "message")) {
[17:47:18.986]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.986]                         if (muffled) 
[17:47:18.986]                           invokeRestart("muffleMessage")
[17:47:18.986]                       }
[17:47:18.986]                       else if (inherits(cond, "warning")) {
[17:47:18.986]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.986]                         if (muffled) 
[17:47:18.986]                           invokeRestart("muffleWarning")
[17:47:18.986]                       }
[17:47:18.986]                       else if (inherits(cond, "condition")) {
[17:47:18.986]                         if (!is.null(pattern)) {
[17:47:18.986]                           computeRestarts <- base::computeRestarts
[17:47:18.986]                           grepl <- base::grepl
[17:47:18.986]                           restarts <- computeRestarts(cond)
[17:47:18.986]                           for (restart in restarts) {
[17:47:18.986]                             name <- restart$name
[17:47:18.986]                             if (is.null(name)) 
[17:47:18.986]                               next
[17:47:18.986]                             if (!grepl(pattern, name)) 
[17:47:18.986]                               next
[17:47:18.986]                             invokeRestart(restart)
[17:47:18.986]                             muffled <- TRUE
[17:47:18.986]                             break
[17:47:18.986]                           }
[17:47:18.986]                         }
[17:47:18.986]                       }
[17:47:18.986]                       invisible(muffled)
[17:47:18.986]                     }
[17:47:18.986]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.986]                   }
[17:47:18.986]                 }
[17:47:18.986]                 else {
[17:47:18.986]                   if (TRUE) {
[17:47:18.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:18.986]                     {
[17:47:18.986]                       inherits <- base::inherits
[17:47:18.986]                       invokeRestart <- base::invokeRestart
[17:47:18.986]                       is.null <- base::is.null
[17:47:18.986]                       muffled <- FALSE
[17:47:18.986]                       if (inherits(cond, "message")) {
[17:47:18.986]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:18.986]                         if (muffled) 
[17:47:18.986]                           invokeRestart("muffleMessage")
[17:47:18.986]                       }
[17:47:18.986]                       else if (inherits(cond, "warning")) {
[17:47:18.986]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:18.986]                         if (muffled) 
[17:47:18.986]                           invokeRestart("muffleWarning")
[17:47:18.986]                       }
[17:47:18.986]                       else if (inherits(cond, "condition")) {
[17:47:18.986]                         if (!is.null(pattern)) {
[17:47:18.986]                           computeRestarts <- base::computeRestarts
[17:47:18.986]                           grepl <- base::grepl
[17:47:18.986]                           restarts <- computeRestarts(cond)
[17:47:18.986]                           for (restart in restarts) {
[17:47:18.986]                             name <- restart$name
[17:47:18.986]                             if (is.null(name)) 
[17:47:18.986]                               next
[17:47:18.986]                             if (!grepl(pattern, name)) 
[17:47:18.986]                               next
[17:47:18.986]                             invokeRestart(restart)
[17:47:18.986]                             muffled <- TRUE
[17:47:18.986]                             break
[17:47:18.986]                           }
[17:47:18.986]                         }
[17:47:18.986]                       }
[17:47:18.986]                       invisible(muffled)
[17:47:18.986]                     }
[17:47:18.986]                     muffleCondition(cond, pattern = "^muffle")
[17:47:18.986]                   }
[17:47:18.986]                 }
[17:47:18.986]             }
[17:47:18.986]         }))
[17:47:18.986]     }, error = function(ex) {
[17:47:18.986]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:18.986]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:18.986]                 ...future.rng), started = ...future.startTime, 
[17:47:18.986]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:18.986]             version = "1.8"), class = "FutureResult")
[17:47:18.986]     }, finally = {
[17:47:18.986]         if (!identical(...future.workdir, getwd())) 
[17:47:18.986]             setwd(...future.workdir)
[17:47:18.986]         {
[17:47:18.986]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:18.986]                 ...future.oldOptions$nwarnings <- NULL
[17:47:18.986]             }
[17:47:18.986]             base::options(...future.oldOptions)
[17:47:18.986]             if (.Platform$OS.type == "windows") {
[17:47:18.986]                 old_names <- names(...future.oldEnvVars)
[17:47:18.986]                 envs <- base::Sys.getenv()
[17:47:18.986]                 names <- names(envs)
[17:47:18.986]                 common <- intersect(names, old_names)
[17:47:18.986]                 added <- setdiff(names, old_names)
[17:47:18.986]                 removed <- setdiff(old_names, names)
[17:47:18.986]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:18.986]                   envs[common]]
[17:47:18.986]                 NAMES <- toupper(changed)
[17:47:18.986]                 args <- list()
[17:47:18.986]                 for (kk in seq_along(NAMES)) {
[17:47:18.986]                   name <- changed[[kk]]
[17:47:18.986]                   NAME <- NAMES[[kk]]
[17:47:18.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.986]                     next
[17:47:18.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.986]                 }
[17:47:18.986]                 NAMES <- toupper(added)
[17:47:18.986]                 for (kk in seq_along(NAMES)) {
[17:47:18.986]                   name <- added[[kk]]
[17:47:18.986]                   NAME <- NAMES[[kk]]
[17:47:18.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.986]                     next
[17:47:18.986]                   args[[name]] <- ""
[17:47:18.986]                 }
[17:47:18.986]                 NAMES <- toupper(removed)
[17:47:18.986]                 for (kk in seq_along(NAMES)) {
[17:47:18.986]                   name <- removed[[kk]]
[17:47:18.986]                   NAME <- NAMES[[kk]]
[17:47:18.986]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:18.986]                     next
[17:47:18.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:18.986]                 }
[17:47:18.986]                 if (length(args) > 0) 
[17:47:18.986]                   base::do.call(base::Sys.setenv, args = args)
[17:47:18.986]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:18.986]             }
[17:47:18.986]             else {
[17:47:18.986]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:18.986]             }
[17:47:18.986]             {
[17:47:18.986]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:18.986]                   0L) {
[17:47:18.986]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:18.986]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:18.986]                   base::options(opts)
[17:47:18.986]                 }
[17:47:18.986]                 {
[17:47:18.986]                   {
[17:47:18.986]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:18.986]                     NULL
[17:47:18.986]                   }
[17:47:18.986]                   options(future.plan = NULL)
[17:47:18.986]                   if (is.na(NA_character_)) 
[17:47:18.986]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:18.986]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:18.986]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:18.986]                     .init = FALSE)
[17:47:18.986]                 }
[17:47:18.986]             }
[17:47:18.986]         }
[17:47:18.986]     })
[17:47:18.986]     if (TRUE) {
[17:47:18.986]         base::sink(type = "output", split = FALSE)
[17:47:18.986]         if (TRUE) {
[17:47:18.986]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:18.986]         }
[17:47:18.986]         else {
[17:47:18.986]             ...future.result["stdout"] <- base::list(NULL)
[17:47:18.986]         }
[17:47:18.986]         base::close(...future.stdout)
[17:47:18.986]         ...future.stdout <- NULL
[17:47:18.986]     }
[17:47:18.986]     ...future.result$conditions <- ...future.conditions
[17:47:18.986]     ...future.result$finished <- base::Sys.time()
[17:47:18.986]     ...future.result
[17:47:18.986] }
[17:47:18.989] requestCore(): workers = 2
[17:47:18.990] Poll #1 (0): usedCores() = 2, workers = 2
[17:47:19.013] result() for MulticoreFuture ...
[17:47:19.014] result() for MulticoreFuture ...
[17:47:19.014] result() for MulticoreFuture ... done
[17:47:19.014] result() for MulticoreFuture ... done
[17:47:19.014] result() for MulticoreFuture ...
[17:47:19.019] result() for MulticoreFuture ... done
[17:47:19.021] MulticoreFuture started
 - Resolving 4 multicore futures
[17:47:19.022] result() for MulticoreFuture ...
[17:47:19.022] result() for MulticoreFuture ... done
[17:47:19.022] plan(): Setting new future strategy stack:
[17:47:19.022] result() for MulticoreFuture ...
[17:47:19.023] result() for MulticoreFuture ... done
[17:47:19.023] result() for MulticoreFuture ...
[17:47:19.023] result() for MulticoreFuture ... done
[17:47:19.023] result() for MulticoreFuture ...
[17:47:19.024] result() for MulticoreFuture ... done
[17:47:19.023] List of future strategies:
[17:47:19.023] 1. sequential:
[17:47:19.023]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.023]    - tweaked: FALSE
[17:47:19.023]    - call: NULL
[17:47:19.024] result() for MulticoreFuture ...
[17:47:19.024] plan(): nbrOfWorkers() = 1
[17:47:19.025] result() for MulticoreFuture ...
[17:47:19.025] result() for MulticoreFuture ... done
[17:47:19.026] result() for MulticoreFuture ... done
[17:47:19.026] result() for MulticoreFuture ...
[17:47:19.026] result() for MulticoreFuture ... done
[17:47:19.026] result() for MulticoreFuture ...
[17:47:19.027] plan(): Setting new future strategy stack:
[17:47:19.027] List of future strategies:
[17:47:19.027] 1. multicore:
[17:47:19.027]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.027]    - tweaked: FALSE
[17:47:19.027]    - call: plan(multicore)
[17:47:19.032] plan(): nbrOfWorkers() = 2
[17:47:19.033] result() for MulticoreFuture ...
[17:47:19.033] result() for MulticoreFuture ... done
[17:47:19.033] result() for MulticoreFuture ... done
[17:47:19.033] result() for MulticoreFuture ...
[17:47:19.033] result() for MulticoreFuture ... done
*** multicore(..., globals = FALSE) and errors
[17:47:19.037] getGlobalsAndPackages() ...
[17:47:19.038] Not searching for globals
[17:47:19.038] - globals: [0] <none>
[17:47:19.038] getGlobalsAndPackages() ... DONE
[17:47:19.038] Packages needed by the future expression (n = 0): <none>
[17:47:19.039] Packages needed by future strategies (n = 0): <none>
[17:47:19.039] {
[17:47:19.039]     {
[17:47:19.039]         {
[17:47:19.039]             ...future.startTime <- base::Sys.time()
[17:47:19.039]             {
[17:47:19.039]                 {
[17:47:19.039]                   {
[17:47:19.039]                     {
[17:47:19.039]                       base::local({
[17:47:19.039]                         has_future <- base::requireNamespace("future", 
[17:47:19.039]                           quietly = TRUE)
[17:47:19.039]                         if (has_future) {
[17:47:19.039]                           ns <- base::getNamespace("future")
[17:47:19.039]                           version <- ns[[".package"]][["version"]]
[17:47:19.039]                           if (is.null(version)) 
[17:47:19.039]                             version <- utils::packageVersion("future")
[17:47:19.039]                         }
[17:47:19.039]                         else {
[17:47:19.039]                           version <- NULL
[17:47:19.039]                         }
[17:47:19.039]                         if (!has_future || version < "1.8.0") {
[17:47:19.039]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.039]                             "", base::R.version$version.string), 
[17:47:19.039]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.039]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.039]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.039]                               "release", "version")], collapse = " "), 
[17:47:19.039]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.039]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.039]                             info)
[17:47:19.039]                           info <- base::paste(info, collapse = "; ")
[17:47:19.039]                           if (!has_future) {
[17:47:19.039]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.039]                               info)
[17:47:19.039]                           }
[17:47:19.039]                           else {
[17:47:19.039]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.039]                               info, version)
[17:47:19.039]                           }
[17:47:19.039]                           base::stop(msg)
[17:47:19.039]                         }
[17:47:19.039]                       })
[17:47:19.039]                     }
[17:47:19.039]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.039]                     base::options(mc.cores = 1L)
[17:47:19.039]                   }
[17:47:19.039]                   ...future.strategy.old <- future::plan("list")
[17:47:19.039]                   options(future.plan = NULL)
[17:47:19.039]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.039]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.039]                 }
[17:47:19.039]                 ...future.workdir <- getwd()
[17:47:19.039]             }
[17:47:19.039]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.039]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.039]         }
[17:47:19.039]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.039]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.039]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.039]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.039]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.039]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.039]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.039]             base::names(...future.oldOptions))
[17:47:19.039]     }
[17:47:19.039]     if (FALSE) {
[17:47:19.039]     }
[17:47:19.039]     else {
[17:47:19.039]         if (TRUE) {
[17:47:19.039]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.039]                 open = "w")
[17:47:19.039]         }
[17:47:19.039]         else {
[17:47:19.039]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.039]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.039]         }
[17:47:19.039]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.039]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.039]             base::sink(type = "output", split = FALSE)
[17:47:19.039]             base::close(...future.stdout)
[17:47:19.039]         }, add = TRUE)
[17:47:19.039]     }
[17:47:19.039]     ...future.frame <- base::sys.nframe()
[17:47:19.039]     ...future.conditions <- base::list()
[17:47:19.039]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.039]     if (FALSE) {
[17:47:19.039]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.039]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.039]     }
[17:47:19.039]     ...future.result <- base::tryCatch({
[17:47:19.039]         base::withCallingHandlers({
[17:47:19.039]             ...future.value <- base::withVisible(base::local({
[17:47:19.039]                 withCallingHandlers({
[17:47:19.039]                   {
[17:47:19.039]                     stop("Whoops!")
[17:47:19.039]                     1
[17:47:19.039]                   }
[17:47:19.039]                 }, immediateCondition = function(cond) {
[17:47:19.039]                   save_rds <- function (object, pathname, ...) 
[17:47:19.039]                   {
[17:47:19.039]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.039]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.039]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.039]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.039]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.039]                         fi_tmp[["mtime"]])
[17:47:19.039]                     }
[17:47:19.039]                     tryCatch({
[17:47:19.039]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.039]                     }, error = function(ex) {
[17:47:19.039]                       msg <- conditionMessage(ex)
[17:47:19.039]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.039]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.039]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.039]                         fi_tmp[["mtime"]], msg)
[17:47:19.039]                       ex$message <- msg
[17:47:19.039]                       stop(ex)
[17:47:19.039]                     })
[17:47:19.039]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.039]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.039]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.039]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.039]                       fi <- file.info(pathname)
[17:47:19.039]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.039]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.039]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.039]                         fi[["size"]], fi[["mtime"]])
[17:47:19.039]                       stop(msg)
[17:47:19.039]                     }
[17:47:19.039]                     invisible(pathname)
[17:47:19.039]                   }
[17:47:19.039]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.039]                     rootPath = tempdir()) 
[17:47:19.039]                   {
[17:47:19.039]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.039]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.039]                       tmpdir = path, fileext = ".rds")
[17:47:19.039]                     save_rds(obj, file)
[17:47:19.039]                   }
[17:47:19.039]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.039]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.039]                   {
[17:47:19.039]                     inherits <- base::inherits
[17:47:19.039]                     invokeRestart <- base::invokeRestart
[17:47:19.039]                     is.null <- base::is.null
[17:47:19.039]                     muffled <- FALSE
[17:47:19.039]                     if (inherits(cond, "message")) {
[17:47:19.039]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.039]                       if (muffled) 
[17:47:19.039]                         invokeRestart("muffleMessage")
[17:47:19.039]                     }
[17:47:19.039]                     else if (inherits(cond, "warning")) {
[17:47:19.039]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.039]                       if (muffled) 
[17:47:19.039]                         invokeRestart("muffleWarning")
[17:47:19.039]                     }
[17:47:19.039]                     else if (inherits(cond, "condition")) {
[17:47:19.039]                       if (!is.null(pattern)) {
[17:47:19.039]                         computeRestarts <- base::computeRestarts
[17:47:19.039]                         grepl <- base::grepl
[17:47:19.039]                         restarts <- computeRestarts(cond)
[17:47:19.039]                         for (restart in restarts) {
[17:47:19.039]                           name <- restart$name
[17:47:19.039]                           if (is.null(name)) 
[17:47:19.039]                             next
[17:47:19.039]                           if (!grepl(pattern, name)) 
[17:47:19.039]                             next
[17:47:19.039]                           invokeRestart(restart)
[17:47:19.039]                           muffled <- TRUE
[17:47:19.039]                           break
[17:47:19.039]                         }
[17:47:19.039]                       }
[17:47:19.039]                     }
[17:47:19.039]                     invisible(muffled)
[17:47:19.039]                   }
[17:47:19.039]                   muffleCondition(cond)
[17:47:19.039]                 })
[17:47:19.039]             }))
[17:47:19.039]             future::FutureResult(value = ...future.value$value, 
[17:47:19.039]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.039]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.039]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.039]                     ...future.globalenv.names))
[17:47:19.039]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.039]         }, condition = base::local({
[17:47:19.039]             c <- base::c
[17:47:19.039]             inherits <- base::inherits
[17:47:19.039]             invokeRestart <- base::invokeRestart
[17:47:19.039]             length <- base::length
[17:47:19.039]             list <- base::list
[17:47:19.039]             seq.int <- base::seq.int
[17:47:19.039]             signalCondition <- base::signalCondition
[17:47:19.039]             sys.calls <- base::sys.calls
[17:47:19.039]             `[[` <- base::`[[`
[17:47:19.039]             `+` <- base::`+`
[17:47:19.039]             `<<-` <- base::`<<-`
[17:47:19.039]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.039]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.039]                   3L)]
[17:47:19.039]             }
[17:47:19.039]             function(cond) {
[17:47:19.039]                 is_error <- inherits(cond, "error")
[17:47:19.039]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.039]                   NULL)
[17:47:19.039]                 if (is_error) {
[17:47:19.039]                   sessionInformation <- function() {
[17:47:19.039]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.039]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.039]                       search = base::search(), system = base::Sys.info())
[17:47:19.039]                   }
[17:47:19.039]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.039]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.039]                     cond$call), session = sessionInformation(), 
[17:47:19.039]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.039]                   signalCondition(cond)
[17:47:19.039]                 }
[17:47:19.039]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.039]                 "immediateCondition"))) {
[17:47:19.039]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.039]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.039]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.039]                   if (TRUE && !signal) {
[17:47:19.039]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.039]                     {
[17:47:19.039]                       inherits <- base::inherits
[17:47:19.039]                       invokeRestart <- base::invokeRestart
[17:47:19.039]                       is.null <- base::is.null
[17:47:19.039]                       muffled <- FALSE
[17:47:19.039]                       if (inherits(cond, "message")) {
[17:47:19.039]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.039]                         if (muffled) 
[17:47:19.039]                           invokeRestart("muffleMessage")
[17:47:19.039]                       }
[17:47:19.039]                       else if (inherits(cond, "warning")) {
[17:47:19.039]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.039]                         if (muffled) 
[17:47:19.039]                           invokeRestart("muffleWarning")
[17:47:19.039]                       }
[17:47:19.039]                       else if (inherits(cond, "condition")) {
[17:47:19.039]                         if (!is.null(pattern)) {
[17:47:19.039]                           computeRestarts <- base::computeRestarts
[17:47:19.039]                           grepl <- base::grepl
[17:47:19.039]                           restarts <- computeRestarts(cond)
[17:47:19.039]                           for (restart in restarts) {
[17:47:19.039]                             name <- restart$name
[17:47:19.039]                             if (is.null(name)) 
[17:47:19.039]                               next
[17:47:19.039]                             if (!grepl(pattern, name)) 
[17:47:19.039]                               next
[17:47:19.039]                             invokeRestart(restart)
[17:47:19.039]                             muffled <- TRUE
[17:47:19.039]                             break
[17:47:19.039]                           }
[17:47:19.039]                         }
[17:47:19.039]                       }
[17:47:19.039]                       invisible(muffled)
[17:47:19.039]                     }
[17:47:19.039]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.039]                   }
[17:47:19.039]                 }
[17:47:19.039]                 else {
[17:47:19.039]                   if (TRUE) {
[17:47:19.039]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.039]                     {
[17:47:19.039]                       inherits <- base::inherits
[17:47:19.039]                       invokeRestart <- base::invokeRestart
[17:47:19.039]                       is.null <- base::is.null
[17:47:19.039]                       muffled <- FALSE
[17:47:19.039]                       if (inherits(cond, "message")) {
[17:47:19.039]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.039]                         if (muffled) 
[17:47:19.039]                           invokeRestart("muffleMessage")
[17:47:19.039]                       }
[17:47:19.039]                       else if (inherits(cond, "warning")) {
[17:47:19.039]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.039]                         if (muffled) 
[17:47:19.039]                           invokeRestart("muffleWarning")
[17:47:19.039]                       }
[17:47:19.039]                       else if (inherits(cond, "condition")) {
[17:47:19.039]                         if (!is.null(pattern)) {
[17:47:19.039]                           computeRestarts <- base::computeRestarts
[17:47:19.039]                           grepl <- base::grepl
[17:47:19.039]                           restarts <- computeRestarts(cond)
[17:47:19.039]                           for (restart in restarts) {
[17:47:19.039]                             name <- restart$name
[17:47:19.039]                             if (is.null(name)) 
[17:47:19.039]                               next
[17:47:19.039]                             if (!grepl(pattern, name)) 
[17:47:19.039]                               next
[17:47:19.039]                             invokeRestart(restart)
[17:47:19.039]                             muffled <- TRUE
[17:47:19.039]                             break
[17:47:19.039]                           }
[17:47:19.039]                         }
[17:47:19.039]                       }
[17:47:19.039]                       invisible(muffled)
[17:47:19.039]                     }
[17:47:19.039]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.039]                   }
[17:47:19.039]                 }
[17:47:19.039]             }
[17:47:19.039]         }))
[17:47:19.039]     }, error = function(ex) {
[17:47:19.039]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.039]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.039]                 ...future.rng), started = ...future.startTime, 
[17:47:19.039]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.039]             version = "1.8"), class = "FutureResult")
[17:47:19.039]     }, finally = {
[17:47:19.039]         if (!identical(...future.workdir, getwd())) 
[17:47:19.039]             setwd(...future.workdir)
[17:47:19.039]         {
[17:47:19.039]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.039]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.039]             }
[17:47:19.039]             base::options(...future.oldOptions)
[17:47:19.039]             if (.Platform$OS.type == "windows") {
[17:47:19.039]                 old_names <- names(...future.oldEnvVars)
[17:47:19.039]                 envs <- base::Sys.getenv()
[17:47:19.039]                 names <- names(envs)
[17:47:19.039]                 common <- intersect(names, old_names)
[17:47:19.039]                 added <- setdiff(names, old_names)
[17:47:19.039]                 removed <- setdiff(old_names, names)
[17:47:19.039]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.039]                   envs[common]]
[17:47:19.039]                 NAMES <- toupper(changed)
[17:47:19.039]                 args <- list()
[17:47:19.039]                 for (kk in seq_along(NAMES)) {
[17:47:19.039]                   name <- changed[[kk]]
[17:47:19.039]                   NAME <- NAMES[[kk]]
[17:47:19.039]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.039]                     next
[17:47:19.039]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.039]                 }
[17:47:19.039]                 NAMES <- toupper(added)
[17:47:19.039]                 for (kk in seq_along(NAMES)) {
[17:47:19.039]                   name <- added[[kk]]
[17:47:19.039]                   NAME <- NAMES[[kk]]
[17:47:19.039]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.039]                     next
[17:47:19.039]                   args[[name]] <- ""
[17:47:19.039]                 }
[17:47:19.039]                 NAMES <- toupper(removed)
[17:47:19.039]                 for (kk in seq_along(NAMES)) {
[17:47:19.039]                   name <- removed[[kk]]
[17:47:19.039]                   NAME <- NAMES[[kk]]
[17:47:19.039]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.039]                     next
[17:47:19.039]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.039]                 }
[17:47:19.039]                 if (length(args) > 0) 
[17:47:19.039]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.039]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.039]             }
[17:47:19.039]             else {
[17:47:19.039]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.039]             }
[17:47:19.039]             {
[17:47:19.039]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.039]                   0L) {
[17:47:19.039]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.039]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.039]                   base::options(opts)
[17:47:19.039]                 }
[17:47:19.039]                 {
[17:47:19.039]                   {
[17:47:19.039]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.039]                     NULL
[17:47:19.039]                   }
[17:47:19.039]                   options(future.plan = NULL)
[17:47:19.039]                   if (is.na(NA_character_)) 
[17:47:19.039]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.039]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.039]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.039]                     .init = FALSE)
[17:47:19.039]                 }
[17:47:19.039]             }
[17:47:19.039]         }
[17:47:19.039]     })
[17:47:19.039]     if (TRUE) {
[17:47:19.039]         base::sink(type = "output", split = FALSE)
[17:47:19.039]         if (TRUE) {
[17:47:19.039]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.039]         }
[17:47:19.039]         else {
[17:47:19.039]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.039]         }
[17:47:19.039]         base::close(...future.stdout)
[17:47:19.039]         ...future.stdout <- NULL
[17:47:19.039]     }
[17:47:19.039]     ...future.result$conditions <- ...future.conditions
[17:47:19.039]     ...future.result$finished <- base::Sys.time()
[17:47:19.039]     ...future.result
[17:47:19.039] }
[17:47:19.042] requestCore(): workers = 2
[17:47:19.044] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:19.045] plan(): Setting new future strategy stack:
[17:47:19.045] List of future strategies:
[17:47:19.045] 1. sequential:
[17:47:19.045]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.045]    - tweaked: FALSE
[17:47:19.045]    - call: NULL
[17:47:19.047] plan(): nbrOfWorkers() = 1
[17:47:19.049] plan(): Setting new future strategy stack:
[17:47:19.050] List of future strategies:
[17:47:19.050] 1. multicore:
[17:47:19.050]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.050]    - tweaked: FALSE
[17:47:19.050]    - call: plan(multicore)
[17:47:19.055] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:19.056] result() for MulticoreFuture ...
[17:47:19.060] result() for MulticoreFuture ...
[17:47:19.060] result() for MulticoreFuture ... done
[17:47:19.060] signalConditions() ...
[17:47:19.060]  - include = ‘immediateCondition’
[17:47:19.060]  - exclude = 
[17:47:19.060]  - resignal = FALSE
[17:47:19.060]  - Number of conditions: 1
[17:47:19.060] signalConditions() ... done
[17:47:19.061] result() for MulticoreFuture ... done
[17:47:19.061] result() for MulticoreFuture ...
[17:47:19.061] result() for MulticoreFuture ... done
[17:47:19.061] signalConditions() ...
[17:47:19.061]  - include = ‘immediateCondition’
[17:47:19.061]  - exclude = 
[17:47:19.061]  - resignal = FALSE
[17:47:19.061]  - Number of conditions: 1
[17:47:19.061] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:19.062] result() for MulticoreFuture ...
[17:47:19.062] result() for MulticoreFuture ... done
[17:47:19.063] result() for MulticoreFuture ...
[17:47:19.063] result() for MulticoreFuture ... done
[17:47:19.063] signalConditions() ...
[17:47:19.063]  - include = ‘immediateCondition’
[17:47:19.063]  - exclude = 
[17:47:19.063]  - resignal = FALSE
[17:47:19.063]  - Number of conditions: 1
[17:47:19.063] signalConditions() ... done
[17:47:19.064] Future state: ‘finished’
[17:47:19.064] result() for MulticoreFuture ...
[17:47:19.064] result() for MulticoreFuture ... done
[17:47:19.064] signalConditions() ...
[17:47:19.064]  - include = ‘condition’
[17:47:19.064]  - exclude = ‘immediateCondition’
[17:47:19.064]  - resignal = TRUE
[17:47:19.064]  - Number of conditions: 1
[17:47:19.064]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:19.065] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:19.065] result() for MulticoreFuture ...
[17:47:19.066] result() for MulticoreFuture ... done
[17:47:19.066] result() for MulticoreFuture ...
[17:47:19.066] result() for MulticoreFuture ... done
[17:47:19.066] signalConditions() ...
[17:47:19.066]  - include = ‘immediateCondition’
[17:47:19.066]  - exclude = 
[17:47:19.066]  - resignal = FALSE
[17:47:19.066]  - Number of conditions: 1
[17:47:19.066] signalConditions() ... done
[17:47:19.067] Future state: ‘finished’
[17:47:19.067] result() for MulticoreFuture ...
[17:47:19.067] result() for MulticoreFuture ... done
[17:47:19.067] signalConditions() ...
[17:47:19.067]  - include = ‘condition’
[17:47:19.067]  - exclude = ‘immediateCondition’
[17:47:19.067]  - resignal = TRUE
[17:47:19.067]  - Number of conditions: 1
[17:47:19.067]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:19.068] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:19.073] getGlobalsAndPackages() ...
[17:47:19.073] 
[17:47:19.073] - globals: [0] <none>
[17:47:19.073] getGlobalsAndPackages() ... DONE
[17:47:19.074] Packages needed by the future expression (n = 0): <none>
[17:47:19.074] Packages needed by future strategies (n = 0): <none>
[17:47:19.074] {
[17:47:19.074]     {
[17:47:19.074]         {
[17:47:19.074]             ...future.startTime <- base::Sys.time()
[17:47:19.074]             {
[17:47:19.074]                 {
[17:47:19.074]                   {
[17:47:19.074]                     {
[17:47:19.074]                       base::local({
[17:47:19.074]                         has_future <- base::requireNamespace("future", 
[17:47:19.074]                           quietly = TRUE)
[17:47:19.074]                         if (has_future) {
[17:47:19.074]                           ns <- base::getNamespace("future")
[17:47:19.074]                           version <- ns[[".package"]][["version"]]
[17:47:19.074]                           if (is.null(version)) 
[17:47:19.074]                             version <- utils::packageVersion("future")
[17:47:19.074]                         }
[17:47:19.074]                         else {
[17:47:19.074]                           version <- NULL
[17:47:19.074]                         }
[17:47:19.074]                         if (!has_future || version < "1.8.0") {
[17:47:19.074]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.074]                             "", base::R.version$version.string), 
[17:47:19.074]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.074]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.074]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.074]                               "release", "version")], collapse = " "), 
[17:47:19.074]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.074]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.074]                             info)
[17:47:19.074]                           info <- base::paste(info, collapse = "; ")
[17:47:19.074]                           if (!has_future) {
[17:47:19.074]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.074]                               info)
[17:47:19.074]                           }
[17:47:19.074]                           else {
[17:47:19.074]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.074]                               info, version)
[17:47:19.074]                           }
[17:47:19.074]                           base::stop(msg)
[17:47:19.074]                         }
[17:47:19.074]                       })
[17:47:19.074]                     }
[17:47:19.074]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.074]                     base::options(mc.cores = 1L)
[17:47:19.074]                   }
[17:47:19.074]                   ...future.strategy.old <- future::plan("list")
[17:47:19.074]                   options(future.plan = NULL)
[17:47:19.074]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.074]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.074]                 }
[17:47:19.074]                 ...future.workdir <- getwd()
[17:47:19.074]             }
[17:47:19.074]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.074]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.074]         }
[17:47:19.074]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.074]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.074]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.074]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.074]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.074]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.074]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.074]             base::names(...future.oldOptions))
[17:47:19.074]     }
[17:47:19.074]     if (FALSE) {
[17:47:19.074]     }
[17:47:19.074]     else {
[17:47:19.074]         if (TRUE) {
[17:47:19.074]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.074]                 open = "w")
[17:47:19.074]         }
[17:47:19.074]         else {
[17:47:19.074]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.074]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.074]         }
[17:47:19.074]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.074]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.074]             base::sink(type = "output", split = FALSE)
[17:47:19.074]             base::close(...future.stdout)
[17:47:19.074]         }, add = TRUE)
[17:47:19.074]     }
[17:47:19.074]     ...future.frame <- base::sys.nframe()
[17:47:19.074]     ...future.conditions <- base::list()
[17:47:19.074]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.074]     if (FALSE) {
[17:47:19.074]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.074]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.074]     }
[17:47:19.074]     ...future.result <- base::tryCatch({
[17:47:19.074]         base::withCallingHandlers({
[17:47:19.074]             ...future.value <- base::withVisible(base::local({
[17:47:19.074]                 withCallingHandlers({
[17:47:19.074]                   {
[17:47:19.074]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:47:19.074]                       "error", "condition")))
[17:47:19.074]                   }
[17:47:19.074]                 }, immediateCondition = function(cond) {
[17:47:19.074]                   save_rds <- function (object, pathname, ...) 
[17:47:19.074]                   {
[17:47:19.074]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.074]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.074]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.074]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.074]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.074]                         fi_tmp[["mtime"]])
[17:47:19.074]                     }
[17:47:19.074]                     tryCatch({
[17:47:19.074]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.074]                     }, error = function(ex) {
[17:47:19.074]                       msg <- conditionMessage(ex)
[17:47:19.074]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.074]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.074]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.074]                         fi_tmp[["mtime"]], msg)
[17:47:19.074]                       ex$message <- msg
[17:47:19.074]                       stop(ex)
[17:47:19.074]                     })
[17:47:19.074]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.074]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.074]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.074]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.074]                       fi <- file.info(pathname)
[17:47:19.074]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.074]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.074]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.074]                         fi[["size"]], fi[["mtime"]])
[17:47:19.074]                       stop(msg)
[17:47:19.074]                     }
[17:47:19.074]                     invisible(pathname)
[17:47:19.074]                   }
[17:47:19.074]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.074]                     rootPath = tempdir()) 
[17:47:19.074]                   {
[17:47:19.074]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.074]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.074]                       tmpdir = path, fileext = ".rds")
[17:47:19.074]                     save_rds(obj, file)
[17:47:19.074]                   }
[17:47:19.074]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.074]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.074]                   {
[17:47:19.074]                     inherits <- base::inherits
[17:47:19.074]                     invokeRestart <- base::invokeRestart
[17:47:19.074]                     is.null <- base::is.null
[17:47:19.074]                     muffled <- FALSE
[17:47:19.074]                     if (inherits(cond, "message")) {
[17:47:19.074]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.074]                       if (muffled) 
[17:47:19.074]                         invokeRestart("muffleMessage")
[17:47:19.074]                     }
[17:47:19.074]                     else if (inherits(cond, "warning")) {
[17:47:19.074]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.074]                       if (muffled) 
[17:47:19.074]                         invokeRestart("muffleWarning")
[17:47:19.074]                     }
[17:47:19.074]                     else if (inherits(cond, "condition")) {
[17:47:19.074]                       if (!is.null(pattern)) {
[17:47:19.074]                         computeRestarts <- base::computeRestarts
[17:47:19.074]                         grepl <- base::grepl
[17:47:19.074]                         restarts <- computeRestarts(cond)
[17:47:19.074]                         for (restart in restarts) {
[17:47:19.074]                           name <- restart$name
[17:47:19.074]                           if (is.null(name)) 
[17:47:19.074]                             next
[17:47:19.074]                           if (!grepl(pattern, name)) 
[17:47:19.074]                             next
[17:47:19.074]                           invokeRestart(restart)
[17:47:19.074]                           muffled <- TRUE
[17:47:19.074]                           break
[17:47:19.074]                         }
[17:47:19.074]                       }
[17:47:19.074]                     }
[17:47:19.074]                     invisible(muffled)
[17:47:19.074]                   }
[17:47:19.074]                   muffleCondition(cond)
[17:47:19.074]                 })
[17:47:19.074]             }))
[17:47:19.074]             future::FutureResult(value = ...future.value$value, 
[17:47:19.074]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.074]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.074]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.074]                     ...future.globalenv.names))
[17:47:19.074]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.074]         }, condition = base::local({
[17:47:19.074]             c <- base::c
[17:47:19.074]             inherits <- base::inherits
[17:47:19.074]             invokeRestart <- base::invokeRestart
[17:47:19.074]             length <- base::length
[17:47:19.074]             list <- base::list
[17:47:19.074]             seq.int <- base::seq.int
[17:47:19.074]             signalCondition <- base::signalCondition
[17:47:19.074]             sys.calls <- base::sys.calls
[17:47:19.074]             `[[` <- base::`[[`
[17:47:19.074]             `+` <- base::`+`
[17:47:19.074]             `<<-` <- base::`<<-`
[17:47:19.074]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.074]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.074]                   3L)]
[17:47:19.074]             }
[17:47:19.074]             function(cond) {
[17:47:19.074]                 is_error <- inherits(cond, "error")
[17:47:19.074]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.074]                   NULL)
[17:47:19.074]                 if (is_error) {
[17:47:19.074]                   sessionInformation <- function() {
[17:47:19.074]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.074]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.074]                       search = base::search(), system = base::Sys.info())
[17:47:19.074]                   }
[17:47:19.074]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.074]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.074]                     cond$call), session = sessionInformation(), 
[17:47:19.074]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.074]                   signalCondition(cond)
[17:47:19.074]                 }
[17:47:19.074]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.074]                 "immediateCondition"))) {
[17:47:19.074]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.074]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.074]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.074]                   if (TRUE && !signal) {
[17:47:19.074]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.074]                     {
[17:47:19.074]                       inherits <- base::inherits
[17:47:19.074]                       invokeRestart <- base::invokeRestart
[17:47:19.074]                       is.null <- base::is.null
[17:47:19.074]                       muffled <- FALSE
[17:47:19.074]                       if (inherits(cond, "message")) {
[17:47:19.074]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.074]                         if (muffled) 
[17:47:19.074]                           invokeRestart("muffleMessage")
[17:47:19.074]                       }
[17:47:19.074]                       else if (inherits(cond, "warning")) {
[17:47:19.074]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.074]                         if (muffled) 
[17:47:19.074]                           invokeRestart("muffleWarning")
[17:47:19.074]                       }
[17:47:19.074]                       else if (inherits(cond, "condition")) {
[17:47:19.074]                         if (!is.null(pattern)) {
[17:47:19.074]                           computeRestarts <- base::computeRestarts
[17:47:19.074]                           grepl <- base::grepl
[17:47:19.074]                           restarts <- computeRestarts(cond)
[17:47:19.074]                           for (restart in restarts) {
[17:47:19.074]                             name <- restart$name
[17:47:19.074]                             if (is.null(name)) 
[17:47:19.074]                               next
[17:47:19.074]                             if (!grepl(pattern, name)) 
[17:47:19.074]                               next
[17:47:19.074]                             invokeRestart(restart)
[17:47:19.074]                             muffled <- TRUE
[17:47:19.074]                             break
[17:47:19.074]                           }
[17:47:19.074]                         }
[17:47:19.074]                       }
[17:47:19.074]                       invisible(muffled)
[17:47:19.074]                     }
[17:47:19.074]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.074]                   }
[17:47:19.074]                 }
[17:47:19.074]                 else {
[17:47:19.074]                   if (TRUE) {
[17:47:19.074]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.074]                     {
[17:47:19.074]                       inherits <- base::inherits
[17:47:19.074]                       invokeRestart <- base::invokeRestart
[17:47:19.074]                       is.null <- base::is.null
[17:47:19.074]                       muffled <- FALSE
[17:47:19.074]                       if (inherits(cond, "message")) {
[17:47:19.074]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.074]                         if (muffled) 
[17:47:19.074]                           invokeRestart("muffleMessage")
[17:47:19.074]                       }
[17:47:19.074]                       else if (inherits(cond, "warning")) {
[17:47:19.074]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.074]                         if (muffled) 
[17:47:19.074]                           invokeRestart("muffleWarning")
[17:47:19.074]                       }
[17:47:19.074]                       else if (inherits(cond, "condition")) {
[17:47:19.074]                         if (!is.null(pattern)) {
[17:47:19.074]                           computeRestarts <- base::computeRestarts
[17:47:19.074]                           grepl <- base::grepl
[17:47:19.074]                           restarts <- computeRestarts(cond)
[17:47:19.074]                           for (restart in restarts) {
[17:47:19.074]                             name <- restart$name
[17:47:19.074]                             if (is.null(name)) 
[17:47:19.074]                               next
[17:47:19.074]                             if (!grepl(pattern, name)) 
[17:47:19.074]                               next
[17:47:19.074]                             invokeRestart(restart)
[17:47:19.074]                             muffled <- TRUE
[17:47:19.074]                             break
[17:47:19.074]                           }
[17:47:19.074]                         }
[17:47:19.074]                       }
[17:47:19.074]                       invisible(muffled)
[17:47:19.074]                     }
[17:47:19.074]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.074]                   }
[17:47:19.074]                 }
[17:47:19.074]             }
[17:47:19.074]         }))
[17:47:19.074]     }, error = function(ex) {
[17:47:19.074]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.074]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.074]                 ...future.rng), started = ...future.startTime, 
[17:47:19.074]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.074]             version = "1.8"), class = "FutureResult")
[17:47:19.074]     }, finally = {
[17:47:19.074]         if (!identical(...future.workdir, getwd())) 
[17:47:19.074]             setwd(...future.workdir)
[17:47:19.074]         {
[17:47:19.074]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.074]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.074]             }
[17:47:19.074]             base::options(...future.oldOptions)
[17:47:19.074]             if (.Platform$OS.type == "windows") {
[17:47:19.074]                 old_names <- names(...future.oldEnvVars)
[17:47:19.074]                 envs <- base::Sys.getenv()
[17:47:19.074]                 names <- names(envs)
[17:47:19.074]                 common <- intersect(names, old_names)
[17:47:19.074]                 added <- setdiff(names, old_names)
[17:47:19.074]                 removed <- setdiff(old_names, names)
[17:47:19.074]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.074]                   envs[common]]
[17:47:19.074]                 NAMES <- toupper(changed)
[17:47:19.074]                 args <- list()
[17:47:19.074]                 for (kk in seq_along(NAMES)) {
[17:47:19.074]                   name <- changed[[kk]]
[17:47:19.074]                   NAME <- NAMES[[kk]]
[17:47:19.074]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.074]                     next
[17:47:19.074]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.074]                 }
[17:47:19.074]                 NAMES <- toupper(added)
[17:47:19.074]                 for (kk in seq_along(NAMES)) {
[17:47:19.074]                   name <- added[[kk]]
[17:47:19.074]                   NAME <- NAMES[[kk]]
[17:47:19.074]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.074]                     next
[17:47:19.074]                   args[[name]] <- ""
[17:47:19.074]                 }
[17:47:19.074]                 NAMES <- toupper(removed)
[17:47:19.074]                 for (kk in seq_along(NAMES)) {
[17:47:19.074]                   name <- removed[[kk]]
[17:47:19.074]                   NAME <- NAMES[[kk]]
[17:47:19.074]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.074]                     next
[17:47:19.074]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.074]                 }
[17:47:19.074]                 if (length(args) > 0) 
[17:47:19.074]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.074]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.074]             }
[17:47:19.074]             else {
[17:47:19.074]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.074]             }
[17:47:19.074]             {
[17:47:19.074]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.074]                   0L) {
[17:47:19.074]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.074]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.074]                   base::options(opts)
[17:47:19.074]                 }
[17:47:19.074]                 {
[17:47:19.074]                   {
[17:47:19.074]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.074]                     NULL
[17:47:19.074]                   }
[17:47:19.074]                   options(future.plan = NULL)
[17:47:19.074]                   if (is.na(NA_character_)) 
[17:47:19.074]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.074]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.074]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.074]                     .init = FALSE)
[17:47:19.074]                 }
[17:47:19.074]             }
[17:47:19.074]         }
[17:47:19.074]     })
[17:47:19.074]     if (TRUE) {
[17:47:19.074]         base::sink(type = "output", split = FALSE)
[17:47:19.074]         if (TRUE) {
[17:47:19.074]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.074]         }
[17:47:19.074]         else {
[17:47:19.074]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.074]         }
[17:47:19.074]         base::close(...future.stdout)
[17:47:19.074]         ...future.stdout <- NULL
[17:47:19.074]     }
[17:47:19.074]     ...future.result$conditions <- ...future.conditions
[17:47:19.074]     ...future.result$finished <- base::Sys.time()
[17:47:19.074]     ...future.result
[17:47:19.074] }
[17:47:19.077] requestCore(): workers = 2
[17:47:19.079] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:19.080] plan(): Setting new future strategy stack:
[17:47:19.081] List of future strategies:
[17:47:19.081] 1. sequential:
[17:47:19.081]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.081]    - tweaked: FALSE
[17:47:19.081]    - call: NULL
[17:47:19.082] plan(): nbrOfWorkers() = 1
[17:47:19.083] plan(): Setting new future strategy stack:
[17:47:19.084] List of future strategies:
[17:47:19.084] 1. multicore:
[17:47:19.084]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.084]    - tweaked: FALSE
[17:47:19.084]    - call: plan(multicore)
[17:47:19.088] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:19.091] result() for MulticoreFuture ...
[17:47:19.093] result() for MulticoreFuture ...
[17:47:19.093] result() for MulticoreFuture ... done
[17:47:19.094] signalConditions() ...
[17:47:19.094]  - include = ‘immediateCondition’
[17:47:19.094]  - exclude = 
[17:47:19.094]  - resignal = FALSE
[17:47:19.094]  - Number of conditions: 1
[17:47:19.094] signalConditions() ... done
[17:47:19.094] result() for MulticoreFuture ... done
[17:47:19.095] result() for MulticoreFuture ...
[17:47:19.095] result() for MulticoreFuture ... done
[17:47:19.095] signalConditions() ...
[17:47:19.095]  - include = ‘immediateCondition’
[17:47:19.095]  - exclude = 
[17:47:19.095]  - resignal = FALSE
[17:47:19.096]  - Number of conditions: 1
[17:47:19.096] signalConditions() ... done
<MyError: boom>
[17:47:19.096] result() for MulticoreFuture ...
[17:47:19.096] result() for MulticoreFuture ... done
[17:47:19.096] result() for MulticoreFuture ...
[17:47:19.096] result() for MulticoreFuture ... done
[17:47:19.097] signalConditions() ...
[17:47:19.097]  - include = ‘immediateCondition’
[17:47:19.097]  - exclude = 
[17:47:19.097]  - resignal = FALSE
[17:47:19.097]  - Number of conditions: 1
[17:47:19.097] signalConditions() ... done
[17:47:19.097] Future state: ‘finished’
[17:47:19.097] result() for MulticoreFuture ...
[17:47:19.097] result() for MulticoreFuture ... done
[17:47:19.098] signalConditions() ...
[17:47:19.098]  - include = ‘condition’
[17:47:19.098]  - exclude = ‘immediateCondition’
[17:47:19.098]  - resignal = TRUE
[17:47:19.098]  - Number of conditions: 1
[17:47:19.098]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:47:19.098] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[17:47:19.102] getGlobalsAndPackages() ...
[17:47:19.102] Searching for globals...
[17:47:19.103] - globals found: [1] ‘{’
[17:47:19.104] Searching for globals ... DONE
[17:47:19.104] Resolving globals: FALSE
[17:47:19.104] 
[17:47:19.107] 
[17:47:19.107] getGlobalsAndPackages() ... DONE
[17:47:19.108] Packages needed by the future expression (n = 0): <none>
[17:47:19.108] Packages needed by future strategies (n = 0): <none>
[17:47:19.108] {
[17:47:19.108]     {
[17:47:19.108]         {
[17:47:19.108]             ...future.startTime <- base::Sys.time()
[17:47:19.108]             {
[17:47:19.108]                 {
[17:47:19.108]                   {
[17:47:19.108]                     {
[17:47:19.108]                       base::local({
[17:47:19.108]                         has_future <- base::requireNamespace("future", 
[17:47:19.108]                           quietly = TRUE)
[17:47:19.108]                         if (has_future) {
[17:47:19.108]                           ns <- base::getNamespace("future")
[17:47:19.108]                           version <- ns[[".package"]][["version"]]
[17:47:19.108]                           if (is.null(version)) 
[17:47:19.108]                             version <- utils::packageVersion("future")
[17:47:19.108]                         }
[17:47:19.108]                         else {
[17:47:19.108]                           version <- NULL
[17:47:19.108]                         }
[17:47:19.108]                         if (!has_future || version < "1.8.0") {
[17:47:19.108]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.108]                             "", base::R.version$version.string), 
[17:47:19.108]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.108]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.108]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.108]                               "release", "version")], collapse = " "), 
[17:47:19.108]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.108]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.108]                             info)
[17:47:19.108]                           info <- base::paste(info, collapse = "; ")
[17:47:19.108]                           if (!has_future) {
[17:47:19.108]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.108]                               info)
[17:47:19.108]                           }
[17:47:19.108]                           else {
[17:47:19.108]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.108]                               info, version)
[17:47:19.108]                           }
[17:47:19.108]                           base::stop(msg)
[17:47:19.108]                         }
[17:47:19.108]                       })
[17:47:19.108]                     }
[17:47:19.108]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.108]                     base::options(mc.cores = 1L)
[17:47:19.108]                   }
[17:47:19.108]                   ...future.strategy.old <- future::plan("list")
[17:47:19.108]                   options(future.plan = NULL)
[17:47:19.108]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.108]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.108]                 }
[17:47:19.108]                 ...future.workdir <- getwd()
[17:47:19.108]             }
[17:47:19.108]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.108]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.108]         }
[17:47:19.108]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.108]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.108]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.108]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.108]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.108]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.108]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.108]             base::names(...future.oldOptions))
[17:47:19.108]     }
[17:47:19.108]     if (FALSE) {
[17:47:19.108]     }
[17:47:19.108]     else {
[17:47:19.108]         if (TRUE) {
[17:47:19.108]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.108]                 open = "w")
[17:47:19.108]         }
[17:47:19.108]         else {
[17:47:19.108]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.108]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.108]         }
[17:47:19.108]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.108]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.108]             base::sink(type = "output", split = FALSE)
[17:47:19.108]             base::close(...future.stdout)
[17:47:19.108]         }, add = TRUE)
[17:47:19.108]     }
[17:47:19.108]     ...future.frame <- base::sys.nframe()
[17:47:19.108]     ...future.conditions <- base::list()
[17:47:19.108]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.108]     if (FALSE) {
[17:47:19.108]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.108]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.108]     }
[17:47:19.108]     ...future.result <- base::tryCatch({
[17:47:19.108]         base::withCallingHandlers({
[17:47:19.108]             ...future.value <- base::withVisible(base::local({
[17:47:19.108]                 withCallingHandlers({
[17:47:19.108]                   {
[17:47:19.108]                     42L
[17:47:19.108]                   }
[17:47:19.108]                 }, immediateCondition = function(cond) {
[17:47:19.108]                   save_rds <- function (object, pathname, ...) 
[17:47:19.108]                   {
[17:47:19.108]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.108]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.108]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.108]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.108]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.108]                         fi_tmp[["mtime"]])
[17:47:19.108]                     }
[17:47:19.108]                     tryCatch({
[17:47:19.108]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.108]                     }, error = function(ex) {
[17:47:19.108]                       msg <- conditionMessage(ex)
[17:47:19.108]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.108]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.108]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.108]                         fi_tmp[["mtime"]], msg)
[17:47:19.108]                       ex$message <- msg
[17:47:19.108]                       stop(ex)
[17:47:19.108]                     })
[17:47:19.108]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.108]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.108]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.108]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.108]                       fi <- file.info(pathname)
[17:47:19.108]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.108]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.108]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.108]                         fi[["size"]], fi[["mtime"]])
[17:47:19.108]                       stop(msg)
[17:47:19.108]                     }
[17:47:19.108]                     invisible(pathname)
[17:47:19.108]                   }
[17:47:19.108]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.108]                     rootPath = tempdir()) 
[17:47:19.108]                   {
[17:47:19.108]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.108]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.108]                       tmpdir = path, fileext = ".rds")
[17:47:19.108]                     save_rds(obj, file)
[17:47:19.108]                   }
[17:47:19.108]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.108]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.108]                   {
[17:47:19.108]                     inherits <- base::inherits
[17:47:19.108]                     invokeRestart <- base::invokeRestart
[17:47:19.108]                     is.null <- base::is.null
[17:47:19.108]                     muffled <- FALSE
[17:47:19.108]                     if (inherits(cond, "message")) {
[17:47:19.108]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.108]                       if (muffled) 
[17:47:19.108]                         invokeRestart("muffleMessage")
[17:47:19.108]                     }
[17:47:19.108]                     else if (inherits(cond, "warning")) {
[17:47:19.108]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.108]                       if (muffled) 
[17:47:19.108]                         invokeRestart("muffleWarning")
[17:47:19.108]                     }
[17:47:19.108]                     else if (inherits(cond, "condition")) {
[17:47:19.108]                       if (!is.null(pattern)) {
[17:47:19.108]                         computeRestarts <- base::computeRestarts
[17:47:19.108]                         grepl <- base::grepl
[17:47:19.108]                         restarts <- computeRestarts(cond)
[17:47:19.108]                         for (restart in restarts) {
[17:47:19.108]                           name <- restart$name
[17:47:19.108]                           if (is.null(name)) 
[17:47:19.108]                             next
[17:47:19.108]                           if (!grepl(pattern, name)) 
[17:47:19.108]                             next
[17:47:19.108]                           invokeRestart(restart)
[17:47:19.108]                           muffled <- TRUE
[17:47:19.108]                           break
[17:47:19.108]                         }
[17:47:19.108]                       }
[17:47:19.108]                     }
[17:47:19.108]                     invisible(muffled)
[17:47:19.108]                   }
[17:47:19.108]                   muffleCondition(cond)
[17:47:19.108]                 })
[17:47:19.108]             }))
[17:47:19.108]             future::FutureResult(value = ...future.value$value, 
[17:47:19.108]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.108]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.108]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.108]                     ...future.globalenv.names))
[17:47:19.108]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.108]         }, condition = base::local({
[17:47:19.108]             c <- base::c
[17:47:19.108]             inherits <- base::inherits
[17:47:19.108]             invokeRestart <- base::invokeRestart
[17:47:19.108]             length <- base::length
[17:47:19.108]             list <- base::list
[17:47:19.108]             seq.int <- base::seq.int
[17:47:19.108]             signalCondition <- base::signalCondition
[17:47:19.108]             sys.calls <- base::sys.calls
[17:47:19.108]             `[[` <- base::`[[`
[17:47:19.108]             `+` <- base::`+`
[17:47:19.108]             `<<-` <- base::`<<-`
[17:47:19.108]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.108]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.108]                   3L)]
[17:47:19.108]             }
[17:47:19.108]             function(cond) {
[17:47:19.108]                 is_error <- inherits(cond, "error")
[17:47:19.108]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.108]                   NULL)
[17:47:19.108]                 if (is_error) {
[17:47:19.108]                   sessionInformation <- function() {
[17:47:19.108]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.108]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.108]                       search = base::search(), system = base::Sys.info())
[17:47:19.108]                   }
[17:47:19.108]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.108]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.108]                     cond$call), session = sessionInformation(), 
[17:47:19.108]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.108]                   signalCondition(cond)
[17:47:19.108]                 }
[17:47:19.108]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.108]                 "immediateCondition"))) {
[17:47:19.108]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.108]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.108]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.108]                   if (TRUE && !signal) {
[17:47:19.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.108]                     {
[17:47:19.108]                       inherits <- base::inherits
[17:47:19.108]                       invokeRestart <- base::invokeRestart
[17:47:19.108]                       is.null <- base::is.null
[17:47:19.108]                       muffled <- FALSE
[17:47:19.108]                       if (inherits(cond, "message")) {
[17:47:19.108]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.108]                         if (muffled) 
[17:47:19.108]                           invokeRestart("muffleMessage")
[17:47:19.108]                       }
[17:47:19.108]                       else if (inherits(cond, "warning")) {
[17:47:19.108]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.108]                         if (muffled) 
[17:47:19.108]                           invokeRestart("muffleWarning")
[17:47:19.108]                       }
[17:47:19.108]                       else if (inherits(cond, "condition")) {
[17:47:19.108]                         if (!is.null(pattern)) {
[17:47:19.108]                           computeRestarts <- base::computeRestarts
[17:47:19.108]                           grepl <- base::grepl
[17:47:19.108]                           restarts <- computeRestarts(cond)
[17:47:19.108]                           for (restart in restarts) {
[17:47:19.108]                             name <- restart$name
[17:47:19.108]                             if (is.null(name)) 
[17:47:19.108]                               next
[17:47:19.108]                             if (!grepl(pattern, name)) 
[17:47:19.108]                               next
[17:47:19.108]                             invokeRestart(restart)
[17:47:19.108]                             muffled <- TRUE
[17:47:19.108]                             break
[17:47:19.108]                           }
[17:47:19.108]                         }
[17:47:19.108]                       }
[17:47:19.108]                       invisible(muffled)
[17:47:19.108]                     }
[17:47:19.108]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.108]                   }
[17:47:19.108]                 }
[17:47:19.108]                 else {
[17:47:19.108]                   if (TRUE) {
[17:47:19.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.108]                     {
[17:47:19.108]                       inherits <- base::inherits
[17:47:19.108]                       invokeRestart <- base::invokeRestart
[17:47:19.108]                       is.null <- base::is.null
[17:47:19.108]                       muffled <- FALSE
[17:47:19.108]                       if (inherits(cond, "message")) {
[17:47:19.108]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.108]                         if (muffled) 
[17:47:19.108]                           invokeRestart("muffleMessage")
[17:47:19.108]                       }
[17:47:19.108]                       else if (inherits(cond, "warning")) {
[17:47:19.108]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.108]                         if (muffled) 
[17:47:19.108]                           invokeRestart("muffleWarning")
[17:47:19.108]                       }
[17:47:19.108]                       else if (inherits(cond, "condition")) {
[17:47:19.108]                         if (!is.null(pattern)) {
[17:47:19.108]                           computeRestarts <- base::computeRestarts
[17:47:19.108]                           grepl <- base::grepl
[17:47:19.108]                           restarts <- computeRestarts(cond)
[17:47:19.108]                           for (restart in restarts) {
[17:47:19.108]                             name <- restart$name
[17:47:19.108]                             if (is.null(name)) 
[17:47:19.108]                               next
[17:47:19.108]                             if (!grepl(pattern, name)) 
[17:47:19.108]                               next
[17:47:19.108]                             invokeRestart(restart)
[17:47:19.108]                             muffled <- TRUE
[17:47:19.108]                             break
[17:47:19.108]                           }
[17:47:19.108]                         }
[17:47:19.108]                       }
[17:47:19.108]                       invisible(muffled)
[17:47:19.108]                     }
[17:47:19.108]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.108]                   }
[17:47:19.108]                 }
[17:47:19.108]             }
[17:47:19.108]         }))
[17:47:19.108]     }, error = function(ex) {
[17:47:19.108]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.108]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.108]                 ...future.rng), started = ...future.startTime, 
[17:47:19.108]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.108]             version = "1.8"), class = "FutureResult")
[17:47:19.108]     }, finally = {
[17:47:19.108]         if (!identical(...future.workdir, getwd())) 
[17:47:19.108]             setwd(...future.workdir)
[17:47:19.108]         {
[17:47:19.108]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.108]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.108]             }
[17:47:19.108]             base::options(...future.oldOptions)
[17:47:19.108]             if (.Platform$OS.type == "windows") {
[17:47:19.108]                 old_names <- names(...future.oldEnvVars)
[17:47:19.108]                 envs <- base::Sys.getenv()
[17:47:19.108]                 names <- names(envs)
[17:47:19.108]                 common <- intersect(names, old_names)
[17:47:19.108]                 added <- setdiff(names, old_names)
[17:47:19.108]                 removed <- setdiff(old_names, names)
[17:47:19.108]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.108]                   envs[common]]
[17:47:19.108]                 NAMES <- toupper(changed)
[17:47:19.108]                 args <- list()
[17:47:19.108]                 for (kk in seq_along(NAMES)) {
[17:47:19.108]                   name <- changed[[kk]]
[17:47:19.108]                   NAME <- NAMES[[kk]]
[17:47:19.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.108]                     next
[17:47:19.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.108]                 }
[17:47:19.108]                 NAMES <- toupper(added)
[17:47:19.108]                 for (kk in seq_along(NAMES)) {
[17:47:19.108]                   name <- added[[kk]]
[17:47:19.108]                   NAME <- NAMES[[kk]]
[17:47:19.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.108]                     next
[17:47:19.108]                   args[[name]] <- ""
[17:47:19.108]                 }
[17:47:19.108]                 NAMES <- toupper(removed)
[17:47:19.108]                 for (kk in seq_along(NAMES)) {
[17:47:19.108]                   name <- removed[[kk]]
[17:47:19.108]                   NAME <- NAMES[[kk]]
[17:47:19.108]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.108]                     next
[17:47:19.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.108]                 }
[17:47:19.108]                 if (length(args) > 0) 
[17:47:19.108]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.108]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.108]             }
[17:47:19.108]             else {
[17:47:19.108]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.108]             }
[17:47:19.108]             {
[17:47:19.108]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.108]                   0L) {
[17:47:19.108]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.108]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.108]                   base::options(opts)
[17:47:19.108]                 }
[17:47:19.108]                 {
[17:47:19.108]                   {
[17:47:19.108]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.108]                     NULL
[17:47:19.108]                   }
[17:47:19.108]                   options(future.plan = NULL)
[17:47:19.108]                   if (is.na(NA_character_)) 
[17:47:19.108]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.108]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.108]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.108]                     .init = FALSE)
[17:47:19.108]                 }
[17:47:19.108]             }
[17:47:19.108]         }
[17:47:19.108]     })
[17:47:19.108]     if (TRUE) {
[17:47:19.108]         base::sink(type = "output", split = FALSE)
[17:47:19.108]         if (TRUE) {
[17:47:19.108]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.108]         }
[17:47:19.108]         else {
[17:47:19.108]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.108]         }
[17:47:19.108]         base::close(...future.stdout)
[17:47:19.108]         ...future.stdout <- NULL
[17:47:19.108]     }
[17:47:19.108]     ...future.result$conditions <- ...future.conditions
[17:47:19.108]     ...future.result$finished <- base::Sys.time()
[17:47:19.108]     ...future.result
[17:47:19.108] }
[17:47:19.111] requestCore(): workers = 2
[17:47:19.113] MulticoreFuture started
[17:47:19.114] plan(): Setting new future strategy stack:
[17:47:19.114] List of future strategies:
[17:47:19.114] 1. sequential:
[17:47:19.114]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.114]    - tweaked: FALSE
[17:47:19.114]    - call: NULL
[17:47:19.115] plan(): nbrOfWorkers() = 1
[17:47:19.117] plan(): Setting new future strategy stack:
[17:47:19.118] List of future strategies:
[17:47:19.118] 1. multicore:
[17:47:19.118]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.118]    - tweaked: FALSE
[17:47:19.118]    - call: plan(multicore)
[17:47:19.123] plan(): nbrOfWorkers() = 2
[1] TRUE
[17:47:19.124] result() for MulticoreFuture ...
[17:47:19.125] result() for MulticoreFuture ...
[17:47:19.125] result() for MulticoreFuture ... done
[17:47:19.125] result() for MulticoreFuture ... done
[17:47:19.125] result() for MulticoreFuture ...
[17:47:19.125] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = TRUE) with globals
[17:47:19.129] getGlobalsAndPackages() ...
[17:47:19.129] Searching for globals...
[17:47:19.132] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[17:47:19.132] Searching for globals ... DONE
[17:47:19.132] Resolving globals: FALSE
[17:47:19.133] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:19.133] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:47:19.133] - globals: [1] ‘a’
[17:47:19.134] 
[17:47:19.134] getGlobalsAndPackages() ... DONE
[17:47:19.134] Packages needed by the future expression (n = 0): <none>
[17:47:19.134] Packages needed by future strategies (n = 0): <none>
[17:47:19.135] {
[17:47:19.135]     {
[17:47:19.135]         {
[17:47:19.135]             ...future.startTime <- base::Sys.time()
[17:47:19.135]             {
[17:47:19.135]                 {
[17:47:19.135]                   {
[17:47:19.135]                     {
[17:47:19.135]                       base::local({
[17:47:19.135]                         has_future <- base::requireNamespace("future", 
[17:47:19.135]                           quietly = TRUE)
[17:47:19.135]                         if (has_future) {
[17:47:19.135]                           ns <- base::getNamespace("future")
[17:47:19.135]                           version <- ns[[".package"]][["version"]]
[17:47:19.135]                           if (is.null(version)) 
[17:47:19.135]                             version <- utils::packageVersion("future")
[17:47:19.135]                         }
[17:47:19.135]                         else {
[17:47:19.135]                           version <- NULL
[17:47:19.135]                         }
[17:47:19.135]                         if (!has_future || version < "1.8.0") {
[17:47:19.135]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.135]                             "", base::R.version$version.string), 
[17:47:19.135]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.135]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.135]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.135]                               "release", "version")], collapse = " "), 
[17:47:19.135]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.135]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.135]                             info)
[17:47:19.135]                           info <- base::paste(info, collapse = "; ")
[17:47:19.135]                           if (!has_future) {
[17:47:19.135]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.135]                               info)
[17:47:19.135]                           }
[17:47:19.135]                           else {
[17:47:19.135]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.135]                               info, version)
[17:47:19.135]                           }
[17:47:19.135]                           base::stop(msg)
[17:47:19.135]                         }
[17:47:19.135]                       })
[17:47:19.135]                     }
[17:47:19.135]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.135]                     base::options(mc.cores = 1L)
[17:47:19.135]                   }
[17:47:19.135]                   ...future.strategy.old <- future::plan("list")
[17:47:19.135]                   options(future.plan = NULL)
[17:47:19.135]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.135]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.135]                 }
[17:47:19.135]                 ...future.workdir <- getwd()
[17:47:19.135]             }
[17:47:19.135]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.135]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.135]         }
[17:47:19.135]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.135]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.135]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.135]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.135]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.135]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.135]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.135]             base::names(...future.oldOptions))
[17:47:19.135]     }
[17:47:19.135]     if (FALSE) {
[17:47:19.135]     }
[17:47:19.135]     else {
[17:47:19.135]         if (TRUE) {
[17:47:19.135]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.135]                 open = "w")
[17:47:19.135]         }
[17:47:19.135]         else {
[17:47:19.135]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.135]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.135]         }
[17:47:19.135]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.135]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.135]             base::sink(type = "output", split = FALSE)
[17:47:19.135]             base::close(...future.stdout)
[17:47:19.135]         }, add = TRUE)
[17:47:19.135]     }
[17:47:19.135]     ...future.frame <- base::sys.nframe()
[17:47:19.135]     ...future.conditions <- base::list()
[17:47:19.135]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.135]     if (FALSE) {
[17:47:19.135]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.135]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.135]     }
[17:47:19.135]     ...future.result <- base::tryCatch({
[17:47:19.135]         base::withCallingHandlers({
[17:47:19.135]             ...future.value <- base::withVisible(base::local({
[17:47:19.135]                 withCallingHandlers({
[17:47:19.135]                   {
[17:47:19.135]                     b <- 3
[17:47:19.135]                     c <- 2
[17:47:19.135]                     a * b * c
[17:47:19.135]                   }
[17:47:19.135]                 }, immediateCondition = function(cond) {
[17:47:19.135]                   save_rds <- function (object, pathname, ...) 
[17:47:19.135]                   {
[17:47:19.135]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.135]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.135]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.135]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.135]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.135]                         fi_tmp[["mtime"]])
[17:47:19.135]                     }
[17:47:19.135]                     tryCatch({
[17:47:19.135]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.135]                     }, error = function(ex) {
[17:47:19.135]                       msg <- conditionMessage(ex)
[17:47:19.135]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.135]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.135]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.135]                         fi_tmp[["mtime"]], msg)
[17:47:19.135]                       ex$message <- msg
[17:47:19.135]                       stop(ex)
[17:47:19.135]                     })
[17:47:19.135]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.135]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.135]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.135]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.135]                       fi <- file.info(pathname)
[17:47:19.135]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.135]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.135]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.135]                         fi[["size"]], fi[["mtime"]])
[17:47:19.135]                       stop(msg)
[17:47:19.135]                     }
[17:47:19.135]                     invisible(pathname)
[17:47:19.135]                   }
[17:47:19.135]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.135]                     rootPath = tempdir()) 
[17:47:19.135]                   {
[17:47:19.135]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.135]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.135]                       tmpdir = path, fileext = ".rds")
[17:47:19.135]                     save_rds(obj, file)
[17:47:19.135]                   }
[17:47:19.135]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.135]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.135]                   {
[17:47:19.135]                     inherits <- base::inherits
[17:47:19.135]                     invokeRestart <- base::invokeRestart
[17:47:19.135]                     is.null <- base::is.null
[17:47:19.135]                     muffled <- FALSE
[17:47:19.135]                     if (inherits(cond, "message")) {
[17:47:19.135]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.135]                       if (muffled) 
[17:47:19.135]                         invokeRestart("muffleMessage")
[17:47:19.135]                     }
[17:47:19.135]                     else if (inherits(cond, "warning")) {
[17:47:19.135]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.135]                       if (muffled) 
[17:47:19.135]                         invokeRestart("muffleWarning")
[17:47:19.135]                     }
[17:47:19.135]                     else if (inherits(cond, "condition")) {
[17:47:19.135]                       if (!is.null(pattern)) {
[17:47:19.135]                         computeRestarts <- base::computeRestarts
[17:47:19.135]                         grepl <- base::grepl
[17:47:19.135]                         restarts <- computeRestarts(cond)
[17:47:19.135]                         for (restart in restarts) {
[17:47:19.135]                           name <- restart$name
[17:47:19.135]                           if (is.null(name)) 
[17:47:19.135]                             next
[17:47:19.135]                           if (!grepl(pattern, name)) 
[17:47:19.135]                             next
[17:47:19.135]                           invokeRestart(restart)
[17:47:19.135]                           muffled <- TRUE
[17:47:19.135]                           break
[17:47:19.135]                         }
[17:47:19.135]                       }
[17:47:19.135]                     }
[17:47:19.135]                     invisible(muffled)
[17:47:19.135]                   }
[17:47:19.135]                   muffleCondition(cond)
[17:47:19.135]                 })
[17:47:19.135]             }))
[17:47:19.135]             future::FutureResult(value = ...future.value$value, 
[17:47:19.135]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.135]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.135]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.135]                     ...future.globalenv.names))
[17:47:19.135]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.135]         }, condition = base::local({
[17:47:19.135]             c <- base::c
[17:47:19.135]             inherits <- base::inherits
[17:47:19.135]             invokeRestart <- base::invokeRestart
[17:47:19.135]             length <- base::length
[17:47:19.135]             list <- base::list
[17:47:19.135]             seq.int <- base::seq.int
[17:47:19.135]             signalCondition <- base::signalCondition
[17:47:19.135]             sys.calls <- base::sys.calls
[17:47:19.135]             `[[` <- base::`[[`
[17:47:19.135]             `+` <- base::`+`
[17:47:19.135]             `<<-` <- base::`<<-`
[17:47:19.135]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.135]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.135]                   3L)]
[17:47:19.135]             }
[17:47:19.135]             function(cond) {
[17:47:19.135]                 is_error <- inherits(cond, "error")
[17:47:19.135]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.135]                   NULL)
[17:47:19.135]                 if (is_error) {
[17:47:19.135]                   sessionInformation <- function() {
[17:47:19.135]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.135]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.135]                       search = base::search(), system = base::Sys.info())
[17:47:19.135]                   }
[17:47:19.135]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.135]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.135]                     cond$call), session = sessionInformation(), 
[17:47:19.135]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.135]                   signalCondition(cond)
[17:47:19.135]                 }
[17:47:19.135]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.135]                 "immediateCondition"))) {
[17:47:19.135]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.135]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.135]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.135]                   if (TRUE && !signal) {
[17:47:19.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.135]                     {
[17:47:19.135]                       inherits <- base::inherits
[17:47:19.135]                       invokeRestart <- base::invokeRestart
[17:47:19.135]                       is.null <- base::is.null
[17:47:19.135]                       muffled <- FALSE
[17:47:19.135]                       if (inherits(cond, "message")) {
[17:47:19.135]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.135]                         if (muffled) 
[17:47:19.135]                           invokeRestart("muffleMessage")
[17:47:19.135]                       }
[17:47:19.135]                       else if (inherits(cond, "warning")) {
[17:47:19.135]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.135]                         if (muffled) 
[17:47:19.135]                           invokeRestart("muffleWarning")
[17:47:19.135]                       }
[17:47:19.135]                       else if (inherits(cond, "condition")) {
[17:47:19.135]                         if (!is.null(pattern)) {
[17:47:19.135]                           computeRestarts <- base::computeRestarts
[17:47:19.135]                           grepl <- base::grepl
[17:47:19.135]                           restarts <- computeRestarts(cond)
[17:47:19.135]                           for (restart in restarts) {
[17:47:19.135]                             name <- restart$name
[17:47:19.135]                             if (is.null(name)) 
[17:47:19.135]                               next
[17:47:19.135]                             if (!grepl(pattern, name)) 
[17:47:19.135]                               next
[17:47:19.135]                             invokeRestart(restart)
[17:47:19.135]                             muffled <- TRUE
[17:47:19.135]                             break
[17:47:19.135]                           }
[17:47:19.135]                         }
[17:47:19.135]                       }
[17:47:19.135]                       invisible(muffled)
[17:47:19.135]                     }
[17:47:19.135]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.135]                   }
[17:47:19.135]                 }
[17:47:19.135]                 else {
[17:47:19.135]                   if (TRUE) {
[17:47:19.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.135]                     {
[17:47:19.135]                       inherits <- base::inherits
[17:47:19.135]                       invokeRestart <- base::invokeRestart
[17:47:19.135]                       is.null <- base::is.null
[17:47:19.135]                       muffled <- FALSE
[17:47:19.135]                       if (inherits(cond, "message")) {
[17:47:19.135]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.135]                         if (muffled) 
[17:47:19.135]                           invokeRestart("muffleMessage")
[17:47:19.135]                       }
[17:47:19.135]                       else if (inherits(cond, "warning")) {
[17:47:19.135]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.135]                         if (muffled) 
[17:47:19.135]                           invokeRestart("muffleWarning")
[17:47:19.135]                       }
[17:47:19.135]                       else if (inherits(cond, "condition")) {
[17:47:19.135]                         if (!is.null(pattern)) {
[17:47:19.135]                           computeRestarts <- base::computeRestarts
[17:47:19.135]                           grepl <- base::grepl
[17:47:19.135]                           restarts <- computeRestarts(cond)
[17:47:19.135]                           for (restart in restarts) {
[17:47:19.135]                             name <- restart$name
[17:47:19.135]                             if (is.null(name)) 
[17:47:19.135]                               next
[17:47:19.135]                             if (!grepl(pattern, name)) 
[17:47:19.135]                               next
[17:47:19.135]                             invokeRestart(restart)
[17:47:19.135]                             muffled <- TRUE
[17:47:19.135]                             break
[17:47:19.135]                           }
[17:47:19.135]                         }
[17:47:19.135]                       }
[17:47:19.135]                       invisible(muffled)
[17:47:19.135]                     }
[17:47:19.135]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.135]                   }
[17:47:19.135]                 }
[17:47:19.135]             }
[17:47:19.135]         }))
[17:47:19.135]     }, error = function(ex) {
[17:47:19.135]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.135]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.135]                 ...future.rng), started = ...future.startTime, 
[17:47:19.135]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.135]             version = "1.8"), class = "FutureResult")
[17:47:19.135]     }, finally = {
[17:47:19.135]         if (!identical(...future.workdir, getwd())) 
[17:47:19.135]             setwd(...future.workdir)
[17:47:19.135]         {
[17:47:19.135]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.135]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.135]             }
[17:47:19.135]             base::options(...future.oldOptions)
[17:47:19.135]             if (.Platform$OS.type == "windows") {
[17:47:19.135]                 old_names <- names(...future.oldEnvVars)
[17:47:19.135]                 envs <- base::Sys.getenv()
[17:47:19.135]                 names <- names(envs)
[17:47:19.135]                 common <- intersect(names, old_names)
[17:47:19.135]                 added <- setdiff(names, old_names)
[17:47:19.135]                 removed <- setdiff(old_names, names)
[17:47:19.135]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.135]                   envs[common]]
[17:47:19.135]                 NAMES <- toupper(changed)
[17:47:19.135]                 args <- list()
[17:47:19.135]                 for (kk in seq_along(NAMES)) {
[17:47:19.135]                   name <- changed[[kk]]
[17:47:19.135]                   NAME <- NAMES[[kk]]
[17:47:19.135]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.135]                     next
[17:47:19.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.135]                 }
[17:47:19.135]                 NAMES <- toupper(added)
[17:47:19.135]                 for (kk in seq_along(NAMES)) {
[17:47:19.135]                   name <- added[[kk]]
[17:47:19.135]                   NAME <- NAMES[[kk]]
[17:47:19.135]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.135]                     next
[17:47:19.135]                   args[[name]] <- ""
[17:47:19.135]                 }
[17:47:19.135]                 NAMES <- toupper(removed)
[17:47:19.135]                 for (kk in seq_along(NAMES)) {
[17:47:19.135]                   name <- removed[[kk]]
[17:47:19.135]                   NAME <- NAMES[[kk]]
[17:47:19.135]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.135]                     next
[17:47:19.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.135]                 }
[17:47:19.135]                 if (length(args) > 0) 
[17:47:19.135]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.135]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.135]             }
[17:47:19.135]             else {
[17:47:19.135]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.135]             }
[17:47:19.135]             {
[17:47:19.135]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.135]                   0L) {
[17:47:19.135]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.135]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.135]                   base::options(opts)
[17:47:19.135]                 }
[17:47:19.135]                 {
[17:47:19.135]                   {
[17:47:19.135]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.135]                     NULL
[17:47:19.135]                   }
[17:47:19.135]                   options(future.plan = NULL)
[17:47:19.135]                   if (is.na(NA_character_)) 
[17:47:19.135]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.135]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.135]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.135]                     .init = FALSE)
[17:47:19.135]                 }
[17:47:19.135]             }
[17:47:19.135]         }
[17:47:19.135]     })
[17:47:19.135]     if (TRUE) {
[17:47:19.135]         base::sink(type = "output", split = FALSE)
[17:47:19.135]         if (TRUE) {
[17:47:19.135]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.135]         }
[17:47:19.135]         else {
[17:47:19.135]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.135]         }
[17:47:19.135]         base::close(...future.stdout)
[17:47:19.135]         ...future.stdout <- NULL
[17:47:19.135]     }
[17:47:19.135]     ...future.result$conditions <- ...future.conditions
[17:47:19.135]     ...future.result$finished <- base::Sys.time()
[17:47:19.135]     ...future.result
[17:47:19.135] }
[17:47:19.138] assign_globals() ...
[17:47:19.138] List of 1
[17:47:19.138]  $ a: num 0
[17:47:19.138]  - attr(*, "where")=List of 1
[17:47:19.138]   ..$ a:<environment: R_EmptyEnv> 
[17:47:19.138]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.138]  - attr(*, "resolved")= logi FALSE
[17:47:19.138]  - attr(*, "total_size")= num 56
[17:47:19.141] - copied ‘a’ to environment
[17:47:19.141] assign_globals() ... done
[17:47:19.141] requestCore(): workers = 2
[17:47:19.143] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
[17:47:19.144] plan(): Setting new future strategy stack:
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:19.144] List of future strategies:
[17:47:19.144] 1. sequential:
[17:47:19.144]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.144]    - tweaked: FALSE
[17:47:19.144]    - call: NULL
[17:47:19.145] plan(): nbrOfWorkers() = 1
[17:47:19.147] plan(): Setting new future strategy stack:
[17:47:19.148] List of future strategies:
[17:47:19.148] 1. multicore:
[17:47:19.148]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.148]    - tweaked: FALSE
[17:47:19.148]    - call: plan(multicore)
[17:47:19.153] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:19.154] result() for MulticoreFuture ...
[17:47:19.154] result() for MulticoreFuture ...
[17:47:19.155] result() for MulticoreFuture ... done
[17:47:19.155] result() for MulticoreFuture ... done
[17:47:19.155] result() for MulticoreFuture ...
[17:47:19.155] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[17:47:19.159] getGlobalsAndPackages() ...
[17:47:19.159] Searching for globals...
[17:47:19.160] - globals found: [2] ‘{’, ‘ii’
[17:47:19.161] Searching for globals ... DONE
[17:47:19.161] Resolving globals: FALSE
[17:47:19.161] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:19.162] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:19.162] - globals: [1] ‘ii’
[17:47:19.162] 
[17:47:19.162] getGlobalsAndPackages() ... DONE
[17:47:19.162] Packages needed by the future expression (n = 0): <none>
[17:47:19.163] Packages needed by future strategies (n = 0): <none>
[17:47:19.163] {
[17:47:19.163]     {
[17:47:19.163]         {
[17:47:19.163]             ...future.startTime <- base::Sys.time()
[17:47:19.163]             {
[17:47:19.163]                 {
[17:47:19.163]                   {
[17:47:19.163]                     {
[17:47:19.163]                       base::local({
[17:47:19.163]                         has_future <- base::requireNamespace("future", 
[17:47:19.163]                           quietly = TRUE)
[17:47:19.163]                         if (has_future) {
[17:47:19.163]                           ns <- base::getNamespace("future")
[17:47:19.163]                           version <- ns[[".package"]][["version"]]
[17:47:19.163]                           if (is.null(version)) 
[17:47:19.163]                             version <- utils::packageVersion("future")
[17:47:19.163]                         }
[17:47:19.163]                         else {
[17:47:19.163]                           version <- NULL
[17:47:19.163]                         }
[17:47:19.163]                         if (!has_future || version < "1.8.0") {
[17:47:19.163]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.163]                             "", base::R.version$version.string), 
[17:47:19.163]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.163]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.163]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.163]                               "release", "version")], collapse = " "), 
[17:47:19.163]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.163]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.163]                             info)
[17:47:19.163]                           info <- base::paste(info, collapse = "; ")
[17:47:19.163]                           if (!has_future) {
[17:47:19.163]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.163]                               info)
[17:47:19.163]                           }
[17:47:19.163]                           else {
[17:47:19.163]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.163]                               info, version)
[17:47:19.163]                           }
[17:47:19.163]                           base::stop(msg)
[17:47:19.163]                         }
[17:47:19.163]                       })
[17:47:19.163]                     }
[17:47:19.163]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.163]                     base::options(mc.cores = 1L)
[17:47:19.163]                   }
[17:47:19.163]                   ...future.strategy.old <- future::plan("list")
[17:47:19.163]                   options(future.plan = NULL)
[17:47:19.163]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.163]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.163]                 }
[17:47:19.163]                 ...future.workdir <- getwd()
[17:47:19.163]             }
[17:47:19.163]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.163]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.163]         }
[17:47:19.163]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.163]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.163]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.163]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.163]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.163]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.163]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.163]             base::names(...future.oldOptions))
[17:47:19.163]     }
[17:47:19.163]     if (FALSE) {
[17:47:19.163]     }
[17:47:19.163]     else {
[17:47:19.163]         if (TRUE) {
[17:47:19.163]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.163]                 open = "w")
[17:47:19.163]         }
[17:47:19.163]         else {
[17:47:19.163]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.163]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.163]         }
[17:47:19.163]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.163]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.163]             base::sink(type = "output", split = FALSE)
[17:47:19.163]             base::close(...future.stdout)
[17:47:19.163]         }, add = TRUE)
[17:47:19.163]     }
[17:47:19.163]     ...future.frame <- base::sys.nframe()
[17:47:19.163]     ...future.conditions <- base::list()
[17:47:19.163]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.163]     if (FALSE) {
[17:47:19.163]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.163]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.163]     }
[17:47:19.163]     ...future.result <- base::tryCatch({
[17:47:19.163]         base::withCallingHandlers({
[17:47:19.163]             ...future.value <- base::withVisible(base::local({
[17:47:19.163]                 withCallingHandlers({
[17:47:19.163]                   {
[17:47:19.163]                     ii
[17:47:19.163]                   }
[17:47:19.163]                 }, immediateCondition = function(cond) {
[17:47:19.163]                   save_rds <- function (object, pathname, ...) 
[17:47:19.163]                   {
[17:47:19.163]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.163]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.163]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.163]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.163]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.163]                         fi_tmp[["mtime"]])
[17:47:19.163]                     }
[17:47:19.163]                     tryCatch({
[17:47:19.163]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.163]                     }, error = function(ex) {
[17:47:19.163]                       msg <- conditionMessage(ex)
[17:47:19.163]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.163]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.163]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.163]                         fi_tmp[["mtime"]], msg)
[17:47:19.163]                       ex$message <- msg
[17:47:19.163]                       stop(ex)
[17:47:19.163]                     })
[17:47:19.163]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.163]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.163]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.163]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.163]                       fi <- file.info(pathname)
[17:47:19.163]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.163]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.163]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.163]                         fi[["size"]], fi[["mtime"]])
[17:47:19.163]                       stop(msg)
[17:47:19.163]                     }
[17:47:19.163]                     invisible(pathname)
[17:47:19.163]                   }
[17:47:19.163]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.163]                     rootPath = tempdir()) 
[17:47:19.163]                   {
[17:47:19.163]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.163]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.163]                       tmpdir = path, fileext = ".rds")
[17:47:19.163]                     save_rds(obj, file)
[17:47:19.163]                   }
[17:47:19.163]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.163]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.163]                   {
[17:47:19.163]                     inherits <- base::inherits
[17:47:19.163]                     invokeRestart <- base::invokeRestart
[17:47:19.163]                     is.null <- base::is.null
[17:47:19.163]                     muffled <- FALSE
[17:47:19.163]                     if (inherits(cond, "message")) {
[17:47:19.163]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.163]                       if (muffled) 
[17:47:19.163]                         invokeRestart("muffleMessage")
[17:47:19.163]                     }
[17:47:19.163]                     else if (inherits(cond, "warning")) {
[17:47:19.163]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.163]                       if (muffled) 
[17:47:19.163]                         invokeRestart("muffleWarning")
[17:47:19.163]                     }
[17:47:19.163]                     else if (inherits(cond, "condition")) {
[17:47:19.163]                       if (!is.null(pattern)) {
[17:47:19.163]                         computeRestarts <- base::computeRestarts
[17:47:19.163]                         grepl <- base::grepl
[17:47:19.163]                         restarts <- computeRestarts(cond)
[17:47:19.163]                         for (restart in restarts) {
[17:47:19.163]                           name <- restart$name
[17:47:19.163]                           if (is.null(name)) 
[17:47:19.163]                             next
[17:47:19.163]                           if (!grepl(pattern, name)) 
[17:47:19.163]                             next
[17:47:19.163]                           invokeRestart(restart)
[17:47:19.163]                           muffled <- TRUE
[17:47:19.163]                           break
[17:47:19.163]                         }
[17:47:19.163]                       }
[17:47:19.163]                     }
[17:47:19.163]                     invisible(muffled)
[17:47:19.163]                   }
[17:47:19.163]                   muffleCondition(cond)
[17:47:19.163]                 })
[17:47:19.163]             }))
[17:47:19.163]             future::FutureResult(value = ...future.value$value, 
[17:47:19.163]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.163]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.163]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.163]                     ...future.globalenv.names))
[17:47:19.163]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.163]         }, condition = base::local({
[17:47:19.163]             c <- base::c
[17:47:19.163]             inherits <- base::inherits
[17:47:19.163]             invokeRestart <- base::invokeRestart
[17:47:19.163]             length <- base::length
[17:47:19.163]             list <- base::list
[17:47:19.163]             seq.int <- base::seq.int
[17:47:19.163]             signalCondition <- base::signalCondition
[17:47:19.163]             sys.calls <- base::sys.calls
[17:47:19.163]             `[[` <- base::`[[`
[17:47:19.163]             `+` <- base::`+`
[17:47:19.163]             `<<-` <- base::`<<-`
[17:47:19.163]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.163]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.163]                   3L)]
[17:47:19.163]             }
[17:47:19.163]             function(cond) {
[17:47:19.163]                 is_error <- inherits(cond, "error")
[17:47:19.163]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.163]                   NULL)
[17:47:19.163]                 if (is_error) {
[17:47:19.163]                   sessionInformation <- function() {
[17:47:19.163]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.163]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.163]                       search = base::search(), system = base::Sys.info())
[17:47:19.163]                   }
[17:47:19.163]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.163]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.163]                     cond$call), session = sessionInformation(), 
[17:47:19.163]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.163]                   signalCondition(cond)
[17:47:19.163]                 }
[17:47:19.163]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.163]                 "immediateCondition"))) {
[17:47:19.163]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.163]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.163]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.163]                   if (TRUE && !signal) {
[17:47:19.163]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.163]                     {
[17:47:19.163]                       inherits <- base::inherits
[17:47:19.163]                       invokeRestart <- base::invokeRestart
[17:47:19.163]                       is.null <- base::is.null
[17:47:19.163]                       muffled <- FALSE
[17:47:19.163]                       if (inherits(cond, "message")) {
[17:47:19.163]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.163]                         if (muffled) 
[17:47:19.163]                           invokeRestart("muffleMessage")
[17:47:19.163]                       }
[17:47:19.163]                       else if (inherits(cond, "warning")) {
[17:47:19.163]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.163]                         if (muffled) 
[17:47:19.163]                           invokeRestart("muffleWarning")
[17:47:19.163]                       }
[17:47:19.163]                       else if (inherits(cond, "condition")) {
[17:47:19.163]                         if (!is.null(pattern)) {
[17:47:19.163]                           computeRestarts <- base::computeRestarts
[17:47:19.163]                           grepl <- base::grepl
[17:47:19.163]                           restarts <- computeRestarts(cond)
[17:47:19.163]                           for (restart in restarts) {
[17:47:19.163]                             name <- restart$name
[17:47:19.163]                             if (is.null(name)) 
[17:47:19.163]                               next
[17:47:19.163]                             if (!grepl(pattern, name)) 
[17:47:19.163]                               next
[17:47:19.163]                             invokeRestart(restart)
[17:47:19.163]                             muffled <- TRUE
[17:47:19.163]                             break
[17:47:19.163]                           }
[17:47:19.163]                         }
[17:47:19.163]                       }
[17:47:19.163]                       invisible(muffled)
[17:47:19.163]                     }
[17:47:19.163]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.163]                   }
[17:47:19.163]                 }
[17:47:19.163]                 else {
[17:47:19.163]                   if (TRUE) {
[17:47:19.163]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.163]                     {
[17:47:19.163]                       inherits <- base::inherits
[17:47:19.163]                       invokeRestart <- base::invokeRestart
[17:47:19.163]                       is.null <- base::is.null
[17:47:19.163]                       muffled <- FALSE
[17:47:19.163]                       if (inherits(cond, "message")) {
[17:47:19.163]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.163]                         if (muffled) 
[17:47:19.163]                           invokeRestart("muffleMessage")
[17:47:19.163]                       }
[17:47:19.163]                       else if (inherits(cond, "warning")) {
[17:47:19.163]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.163]                         if (muffled) 
[17:47:19.163]                           invokeRestart("muffleWarning")
[17:47:19.163]                       }
[17:47:19.163]                       else if (inherits(cond, "condition")) {
[17:47:19.163]                         if (!is.null(pattern)) {
[17:47:19.163]                           computeRestarts <- base::computeRestarts
[17:47:19.163]                           grepl <- base::grepl
[17:47:19.163]                           restarts <- computeRestarts(cond)
[17:47:19.163]                           for (restart in restarts) {
[17:47:19.163]                             name <- restart$name
[17:47:19.163]                             if (is.null(name)) 
[17:47:19.163]                               next
[17:47:19.163]                             if (!grepl(pattern, name)) 
[17:47:19.163]                               next
[17:47:19.163]                             invokeRestart(restart)
[17:47:19.163]                             muffled <- TRUE
[17:47:19.163]                             break
[17:47:19.163]                           }
[17:47:19.163]                         }
[17:47:19.163]                       }
[17:47:19.163]                       invisible(muffled)
[17:47:19.163]                     }
[17:47:19.163]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.163]                   }
[17:47:19.163]                 }
[17:47:19.163]             }
[17:47:19.163]         }))
[17:47:19.163]     }, error = function(ex) {
[17:47:19.163]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.163]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.163]                 ...future.rng), started = ...future.startTime, 
[17:47:19.163]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.163]             version = "1.8"), class = "FutureResult")
[17:47:19.163]     }, finally = {
[17:47:19.163]         if (!identical(...future.workdir, getwd())) 
[17:47:19.163]             setwd(...future.workdir)
[17:47:19.163]         {
[17:47:19.163]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.163]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.163]             }
[17:47:19.163]             base::options(...future.oldOptions)
[17:47:19.163]             if (.Platform$OS.type == "windows") {
[17:47:19.163]                 old_names <- names(...future.oldEnvVars)
[17:47:19.163]                 envs <- base::Sys.getenv()
[17:47:19.163]                 names <- names(envs)
[17:47:19.163]                 common <- intersect(names, old_names)
[17:47:19.163]                 added <- setdiff(names, old_names)
[17:47:19.163]                 removed <- setdiff(old_names, names)
[17:47:19.163]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.163]                   envs[common]]
[17:47:19.163]                 NAMES <- toupper(changed)
[17:47:19.163]                 args <- list()
[17:47:19.163]                 for (kk in seq_along(NAMES)) {
[17:47:19.163]                   name <- changed[[kk]]
[17:47:19.163]                   NAME <- NAMES[[kk]]
[17:47:19.163]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.163]                     next
[17:47:19.163]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.163]                 }
[17:47:19.163]                 NAMES <- toupper(added)
[17:47:19.163]                 for (kk in seq_along(NAMES)) {
[17:47:19.163]                   name <- added[[kk]]
[17:47:19.163]                   NAME <- NAMES[[kk]]
[17:47:19.163]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.163]                     next
[17:47:19.163]                   args[[name]] <- ""
[17:47:19.163]                 }
[17:47:19.163]                 NAMES <- toupper(removed)
[17:47:19.163]                 for (kk in seq_along(NAMES)) {
[17:47:19.163]                   name <- removed[[kk]]
[17:47:19.163]                   NAME <- NAMES[[kk]]
[17:47:19.163]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.163]                     next
[17:47:19.163]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.163]                 }
[17:47:19.163]                 if (length(args) > 0) 
[17:47:19.163]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.163]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.163]             }
[17:47:19.163]             else {
[17:47:19.163]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.163]             }
[17:47:19.163]             {
[17:47:19.163]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.163]                   0L) {
[17:47:19.163]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.163]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.163]                   base::options(opts)
[17:47:19.163]                 }
[17:47:19.163]                 {
[17:47:19.163]                   {
[17:47:19.163]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.163]                     NULL
[17:47:19.163]                   }
[17:47:19.163]                   options(future.plan = NULL)
[17:47:19.163]                   if (is.na(NA_character_)) 
[17:47:19.163]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.163]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.163]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.163]                     .init = FALSE)
[17:47:19.163]                 }
[17:47:19.163]             }
[17:47:19.163]         }
[17:47:19.163]     })
[17:47:19.163]     if (TRUE) {
[17:47:19.163]         base::sink(type = "output", split = FALSE)
[17:47:19.163]         if (TRUE) {
[17:47:19.163]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.163]         }
[17:47:19.163]         else {
[17:47:19.163]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.163]         }
[17:47:19.163]         base::close(...future.stdout)
[17:47:19.163]         ...future.stdout <- NULL
[17:47:19.163]     }
[17:47:19.163]     ...future.result$conditions <- ...future.conditions
[17:47:19.163]     ...future.result$finished <- base::Sys.time()
[17:47:19.163]     ...future.result
[17:47:19.163] }
[17:47:19.166] assign_globals() ...
[17:47:19.166] List of 1
[17:47:19.166]  $ ii: int 1
[17:47:19.166]  - attr(*, "where")=List of 1
[17:47:19.166]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:19.166]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.166]  - attr(*, "resolved")= logi FALSE
[17:47:19.166]  - attr(*, "total_size")= num 56
[17:47:19.168] - copied ‘ii’ to environment
[17:47:19.169] assign_globals() ... done
[17:47:19.169] requestCore(): workers = 2
[17:47:19.171] MulticoreFuture started
 - Creating multicore future #2 ...
[17:47:19.172] plan(): Setting new future strategy stack:
[17:47:19.172] List of future strategies:
[17:47:19.172] 1. sequential:
[17:47:19.172]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.172]    - tweaked: FALSE
[17:47:19.172]    - call: NULL
[17:47:19.173] plan(): nbrOfWorkers() = 1
[17:47:19.175] plan(): Setting new future strategy stack:
[17:47:19.175] List of future strategies:
[17:47:19.175] 1. multicore:
[17:47:19.175]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.175]    - tweaked: FALSE
[17:47:19.175]    - call: plan(multicore)
[17:47:19.176] getGlobalsAndPackages() ...
[17:47:19.176] Searching for globals...
[17:47:19.178] - globals found: [2] ‘{’, ‘ii’
[17:47:19.178] Searching for globals ... DONE
[17:47:19.178] Resolving globals: FALSE
[17:47:19.179] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:19.179] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:19.180] plan(): nbrOfWorkers() = 2
[17:47:19.180] - globals: [1] ‘ii’
[17:47:19.180] 
[17:47:19.180] getGlobalsAndPackages() ... DONE
[17:47:19.181] Packages needed by the future expression (n = 0): <none>
[17:47:19.181] Packages needed by future strategies (n = 0): <none>
[17:47:19.186] {
[17:47:19.186]     {
[17:47:19.186]         {
[17:47:19.186]             ...future.startTime <- base::Sys.time()
[17:47:19.186]             {
[17:47:19.186]                 {
[17:47:19.186]                   {
[17:47:19.186]                     {
[17:47:19.186]                       base::local({
[17:47:19.186]                         has_future <- base::requireNamespace("future", 
[17:47:19.186]                           quietly = TRUE)
[17:47:19.186]                         if (has_future) {
[17:47:19.186]                           ns <- base::getNamespace("future")
[17:47:19.186]                           version <- ns[[".package"]][["version"]]
[17:47:19.186]                           if (is.null(version)) 
[17:47:19.186]                             version <- utils::packageVersion("future")
[17:47:19.186]                         }
[17:47:19.186]                         else {
[17:47:19.186]                           version <- NULL
[17:47:19.186]                         }
[17:47:19.186]                         if (!has_future || version < "1.8.0") {
[17:47:19.186]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.186]                             "", base::R.version$version.string), 
[17:47:19.186]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.186]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.186]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.186]                               "release", "version")], collapse = " "), 
[17:47:19.186]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.186]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.186]                             info)
[17:47:19.186]                           info <- base::paste(info, collapse = "; ")
[17:47:19.186]                           if (!has_future) {
[17:47:19.186]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.186]                               info)
[17:47:19.186]                           }
[17:47:19.186]                           else {
[17:47:19.186]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.186]                               info, version)
[17:47:19.186]                           }
[17:47:19.186]                           base::stop(msg)
[17:47:19.186]                         }
[17:47:19.186]                       })
[17:47:19.186]                     }
[17:47:19.186]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.186]                     base::options(mc.cores = 1L)
[17:47:19.186]                   }
[17:47:19.186]                   ...future.strategy.old <- future::plan("list")
[17:47:19.186]                   options(future.plan = NULL)
[17:47:19.186]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.186]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.186]                 }
[17:47:19.186]                 ...future.workdir <- getwd()
[17:47:19.186]             }
[17:47:19.186]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.186]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.186]         }
[17:47:19.186]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.186]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.186]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.186]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.186]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.186]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.186]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.186]             base::names(...future.oldOptions))
[17:47:19.186]     }
[17:47:19.186]     if (FALSE) {
[17:47:19.186]     }
[17:47:19.186]     else {
[17:47:19.186]         if (TRUE) {
[17:47:19.186]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.186]                 open = "w")
[17:47:19.186]         }
[17:47:19.186]         else {
[17:47:19.186]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.186]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.186]         }
[17:47:19.186]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.186]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.186]             base::sink(type = "output", split = FALSE)
[17:47:19.186]             base::close(...future.stdout)
[17:47:19.186]         }, add = TRUE)
[17:47:19.186]     }
[17:47:19.186]     ...future.frame <- base::sys.nframe()
[17:47:19.186]     ...future.conditions <- base::list()
[17:47:19.186]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.186]     if (FALSE) {
[17:47:19.186]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.186]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.186]     }
[17:47:19.186]     ...future.result <- base::tryCatch({
[17:47:19.186]         base::withCallingHandlers({
[17:47:19.186]             ...future.value <- base::withVisible(base::local({
[17:47:19.186]                 withCallingHandlers({
[17:47:19.186]                   {
[17:47:19.186]                     ii
[17:47:19.186]                   }
[17:47:19.186]                 }, immediateCondition = function(cond) {
[17:47:19.186]                   save_rds <- function (object, pathname, ...) 
[17:47:19.186]                   {
[17:47:19.186]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.186]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.186]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.186]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.186]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.186]                         fi_tmp[["mtime"]])
[17:47:19.186]                     }
[17:47:19.186]                     tryCatch({
[17:47:19.186]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.186]                     }, error = function(ex) {
[17:47:19.186]                       msg <- conditionMessage(ex)
[17:47:19.186]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.186]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.186]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.186]                         fi_tmp[["mtime"]], msg)
[17:47:19.186]                       ex$message <- msg
[17:47:19.186]                       stop(ex)
[17:47:19.186]                     })
[17:47:19.186]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.186]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.186]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.186]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.186]                       fi <- file.info(pathname)
[17:47:19.186]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.186]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.186]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.186]                         fi[["size"]], fi[["mtime"]])
[17:47:19.186]                       stop(msg)
[17:47:19.186]                     }
[17:47:19.186]                     invisible(pathname)
[17:47:19.186]                   }
[17:47:19.186]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.186]                     rootPath = tempdir()) 
[17:47:19.186]                   {
[17:47:19.186]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.186]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.186]                       tmpdir = path, fileext = ".rds")
[17:47:19.186]                     save_rds(obj, file)
[17:47:19.186]                   }
[17:47:19.186]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.186]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.186]                   {
[17:47:19.186]                     inherits <- base::inherits
[17:47:19.186]                     invokeRestart <- base::invokeRestart
[17:47:19.186]                     is.null <- base::is.null
[17:47:19.186]                     muffled <- FALSE
[17:47:19.186]                     if (inherits(cond, "message")) {
[17:47:19.186]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.186]                       if (muffled) 
[17:47:19.186]                         invokeRestart("muffleMessage")
[17:47:19.186]                     }
[17:47:19.186]                     else if (inherits(cond, "warning")) {
[17:47:19.186]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.186]                       if (muffled) 
[17:47:19.186]                         invokeRestart("muffleWarning")
[17:47:19.186]                     }
[17:47:19.186]                     else if (inherits(cond, "condition")) {
[17:47:19.186]                       if (!is.null(pattern)) {
[17:47:19.186]                         computeRestarts <- base::computeRestarts
[17:47:19.186]                         grepl <- base::grepl
[17:47:19.186]                         restarts <- computeRestarts(cond)
[17:47:19.186]                         for (restart in restarts) {
[17:47:19.186]                           name <- restart$name
[17:47:19.186]                           if (is.null(name)) 
[17:47:19.186]                             next
[17:47:19.186]                           if (!grepl(pattern, name)) 
[17:47:19.186]                             next
[17:47:19.186]                           invokeRestart(restart)
[17:47:19.186]                           muffled <- TRUE
[17:47:19.186]                           break
[17:47:19.186]                         }
[17:47:19.186]                       }
[17:47:19.186]                     }
[17:47:19.186]                     invisible(muffled)
[17:47:19.186]                   }
[17:47:19.186]                   muffleCondition(cond)
[17:47:19.186]                 })
[17:47:19.186]             }))
[17:47:19.186]             future::FutureResult(value = ...future.value$value, 
[17:47:19.186]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.186]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.186]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.186]                     ...future.globalenv.names))
[17:47:19.186]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.186]         }, condition = base::local({
[17:47:19.186]             c <- base::c
[17:47:19.186]             inherits <- base::inherits
[17:47:19.186]             invokeRestart <- base::invokeRestart
[17:47:19.186]             length <- base::length
[17:47:19.186]             list <- base::list
[17:47:19.186]             seq.int <- base::seq.int
[17:47:19.186]             signalCondition <- base::signalCondition
[17:47:19.186]             sys.calls <- base::sys.calls
[17:47:19.186]             `[[` <- base::`[[`
[17:47:19.186]             `+` <- base::`+`
[17:47:19.186]             `<<-` <- base::`<<-`
[17:47:19.186]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.186]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.186]                   3L)]
[17:47:19.186]             }
[17:47:19.186]             function(cond) {
[17:47:19.186]                 is_error <- inherits(cond, "error")
[17:47:19.186]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.186]                   NULL)
[17:47:19.186]                 if (is_error) {
[17:47:19.186]                   sessionInformation <- function() {
[17:47:19.186]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.186]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.186]                       search = base::search(), system = base::Sys.info())
[17:47:19.186]                   }
[17:47:19.186]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.186]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.186]                     cond$call), session = sessionInformation(), 
[17:47:19.186]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.186]                   signalCondition(cond)
[17:47:19.186]                 }
[17:47:19.186]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.186]                 "immediateCondition"))) {
[17:47:19.186]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.186]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.186]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.186]                   if (TRUE && !signal) {
[17:47:19.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.186]                     {
[17:47:19.186]                       inherits <- base::inherits
[17:47:19.186]                       invokeRestart <- base::invokeRestart
[17:47:19.186]                       is.null <- base::is.null
[17:47:19.186]                       muffled <- FALSE
[17:47:19.186]                       if (inherits(cond, "message")) {
[17:47:19.186]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.186]                         if (muffled) 
[17:47:19.186]                           invokeRestart("muffleMessage")
[17:47:19.186]                       }
[17:47:19.186]                       else if (inherits(cond, "warning")) {
[17:47:19.186]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.186]                         if (muffled) 
[17:47:19.186]                           invokeRestart("muffleWarning")
[17:47:19.186]                       }
[17:47:19.186]                       else if (inherits(cond, "condition")) {
[17:47:19.186]                         if (!is.null(pattern)) {
[17:47:19.186]                           computeRestarts <- base::computeRestarts
[17:47:19.186]                           grepl <- base::grepl
[17:47:19.186]                           restarts <- computeRestarts(cond)
[17:47:19.186]                           for (restart in restarts) {
[17:47:19.186]                             name <- restart$name
[17:47:19.186]                             if (is.null(name)) 
[17:47:19.186]                               next
[17:47:19.186]                             if (!grepl(pattern, name)) 
[17:47:19.186]                               next
[17:47:19.186]                             invokeRestart(restart)
[17:47:19.186]                             muffled <- TRUE
[17:47:19.186]                             break
[17:47:19.186]                           }
[17:47:19.186]                         }
[17:47:19.186]                       }
[17:47:19.186]                       invisible(muffled)
[17:47:19.186]                     }
[17:47:19.186]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.186]                   }
[17:47:19.186]                 }
[17:47:19.186]                 else {
[17:47:19.186]                   if (TRUE) {
[17:47:19.186]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.186]                     {
[17:47:19.186]                       inherits <- base::inherits
[17:47:19.186]                       invokeRestart <- base::invokeRestart
[17:47:19.186]                       is.null <- base::is.null
[17:47:19.186]                       muffled <- FALSE
[17:47:19.186]                       if (inherits(cond, "message")) {
[17:47:19.186]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.186]                         if (muffled) 
[17:47:19.186]                           invokeRestart("muffleMessage")
[17:47:19.186]                       }
[17:47:19.186]                       else if (inherits(cond, "warning")) {
[17:47:19.186]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.186]                         if (muffled) 
[17:47:19.186]                           invokeRestart("muffleWarning")
[17:47:19.186]                       }
[17:47:19.186]                       else if (inherits(cond, "condition")) {
[17:47:19.186]                         if (!is.null(pattern)) {
[17:47:19.186]                           computeRestarts <- base::computeRestarts
[17:47:19.186]                           grepl <- base::grepl
[17:47:19.186]                           restarts <- computeRestarts(cond)
[17:47:19.186]                           for (restart in restarts) {
[17:47:19.186]                             name <- restart$name
[17:47:19.186]                             if (is.null(name)) 
[17:47:19.186]                               next
[17:47:19.186]                             if (!grepl(pattern, name)) 
[17:47:19.186]                               next
[17:47:19.186]                             invokeRestart(restart)
[17:47:19.186]                             muffled <- TRUE
[17:47:19.186]                             break
[17:47:19.186]                           }
[17:47:19.186]                         }
[17:47:19.186]                       }
[17:47:19.186]                       invisible(muffled)
[17:47:19.186]                     }
[17:47:19.186]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.186]                   }
[17:47:19.186]                 }
[17:47:19.186]             }
[17:47:19.186]         }))
[17:47:19.186]     }, error = function(ex) {
[17:47:19.186]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.186]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.186]                 ...future.rng), started = ...future.startTime, 
[17:47:19.186]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.186]             version = "1.8"), class = "FutureResult")
[17:47:19.186]     }, finally = {
[17:47:19.186]         if (!identical(...future.workdir, getwd())) 
[17:47:19.186]             setwd(...future.workdir)
[17:47:19.186]         {
[17:47:19.186]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.186]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.186]             }
[17:47:19.186]             base::options(...future.oldOptions)
[17:47:19.186]             if (.Platform$OS.type == "windows") {
[17:47:19.186]                 old_names <- names(...future.oldEnvVars)
[17:47:19.186]                 envs <- base::Sys.getenv()
[17:47:19.186]                 names <- names(envs)
[17:47:19.186]                 common <- intersect(names, old_names)
[17:47:19.186]                 added <- setdiff(names, old_names)
[17:47:19.186]                 removed <- setdiff(old_names, names)
[17:47:19.186]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.186]                   envs[common]]
[17:47:19.186]                 NAMES <- toupper(changed)
[17:47:19.186]                 args <- list()
[17:47:19.186]                 for (kk in seq_along(NAMES)) {
[17:47:19.186]                   name <- changed[[kk]]
[17:47:19.186]                   NAME <- NAMES[[kk]]
[17:47:19.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.186]                     next
[17:47:19.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.186]                 }
[17:47:19.186]                 NAMES <- toupper(added)
[17:47:19.186]                 for (kk in seq_along(NAMES)) {
[17:47:19.186]                   name <- added[[kk]]
[17:47:19.186]                   NAME <- NAMES[[kk]]
[17:47:19.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.186]                     next
[17:47:19.186]                   args[[name]] <- ""
[17:47:19.186]                 }
[17:47:19.186]                 NAMES <- toupper(removed)
[17:47:19.186]                 for (kk in seq_along(NAMES)) {
[17:47:19.186]                   name <- removed[[kk]]
[17:47:19.186]                   NAME <- NAMES[[kk]]
[17:47:19.186]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.186]                     next
[17:47:19.186]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.186]                 }
[17:47:19.186]                 if (length(args) > 0) 
[17:47:19.186]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.186]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.186]             }
[17:47:19.186]             else {
[17:47:19.186]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.186]             }
[17:47:19.186]             {
[17:47:19.186]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.186]                   0L) {
[17:47:19.186]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.186]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.186]                   base::options(opts)
[17:47:19.186]                 }
[17:47:19.186]                 {
[17:47:19.186]                   {
[17:47:19.186]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.186]                     NULL
[17:47:19.186]                   }
[17:47:19.186]                   options(future.plan = NULL)
[17:47:19.186]                   if (is.na(NA_character_)) 
[17:47:19.186]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.186]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.186]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.186]                     .init = FALSE)
[17:47:19.186]                 }
[17:47:19.186]             }
[17:47:19.186]         }
[17:47:19.186]     })
[17:47:19.186]     if (TRUE) {
[17:47:19.186]         base::sink(type = "output", split = FALSE)
[17:47:19.186]         if (TRUE) {
[17:47:19.186]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.186]         }
[17:47:19.186]         else {
[17:47:19.186]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.186]         }
[17:47:19.186]         base::close(...future.stdout)
[17:47:19.186]         ...future.stdout <- NULL
[17:47:19.186]     }
[17:47:19.186]     ...future.result$conditions <- ...future.conditions
[17:47:19.186]     ...future.result$finished <- base::Sys.time()
[17:47:19.186]     ...future.result
[17:47:19.186] }
[17:47:19.189] assign_globals() ...
[17:47:19.189] List of 1
[17:47:19.189]  $ ii: int 2
[17:47:19.189]  - attr(*, "where")=List of 1
[17:47:19.189]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:19.189]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.189]  - attr(*, "resolved")= logi FALSE
[17:47:19.189]  - attr(*, "total_size")= num 56
[17:47:19.193] - copied ‘ii’ to environment
[17:47:19.194] assign_globals() ... done
[17:47:19.194] requestCore(): workers = 2
[17:47:19.196] MulticoreFuture started
 - Creating multicore future #3 ...
[17:47:19.197] plan(): Setting new future strategy stack:
[17:47:19.198] List of future strategies:
[17:47:19.198] 1. sequential:
[17:47:19.198]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.198]    - tweaked: FALSE
[17:47:19.198]    - call: NULL
[17:47:19.199] plan(): nbrOfWorkers() = 1
[17:47:19.201] plan(): Setting new future strategy stack:
[17:47:19.201] List of future strategies:
[17:47:19.201] 1. multicore:
[17:47:19.201]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.201]    - tweaked: FALSE
[17:47:19.201]    - call: plan(multicore)
[17:47:19.202] getGlobalsAndPackages() ...
[17:47:19.202] Searching for globals...
[17:47:19.204] - globals found: [2] ‘{’, ‘ii’
[17:47:19.204] Searching for globals ... DONE
[17:47:19.204] Resolving globals: FALSE
[17:47:19.205] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:19.205] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:19.206] - globals: [1] ‘ii’
[17:47:19.206] 
[17:47:19.206] getGlobalsAndPackages() ... DONE
[17:47:19.206] plan(): nbrOfWorkers() = 2
[17:47:19.207] Packages needed by the future expression (n = 0): <none>
[17:47:19.207] Packages needed by future strategies (n = 0): <none>
[17:47:19.208] {
[17:47:19.208]     {
[17:47:19.208]         {
[17:47:19.208]             ...future.startTime <- base::Sys.time()
[17:47:19.208]             {
[17:47:19.208]                 {
[17:47:19.208]                   {
[17:47:19.208]                     {
[17:47:19.208]                       base::local({
[17:47:19.208]                         has_future <- base::requireNamespace("future", 
[17:47:19.208]                           quietly = TRUE)
[17:47:19.208]                         if (has_future) {
[17:47:19.208]                           ns <- base::getNamespace("future")
[17:47:19.208]                           version <- ns[[".package"]][["version"]]
[17:47:19.208]                           if (is.null(version)) 
[17:47:19.208]                             version <- utils::packageVersion("future")
[17:47:19.208]                         }
[17:47:19.208]                         else {
[17:47:19.208]                           version <- NULL
[17:47:19.208]                         }
[17:47:19.208]                         if (!has_future || version < "1.8.0") {
[17:47:19.208]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.208]                             "", base::R.version$version.string), 
[17:47:19.208]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.208]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.208]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.208]                               "release", "version")], collapse = " "), 
[17:47:19.208]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.208]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.208]                             info)
[17:47:19.208]                           info <- base::paste(info, collapse = "; ")
[17:47:19.208]                           if (!has_future) {
[17:47:19.208]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.208]                               info)
[17:47:19.208]                           }
[17:47:19.208]                           else {
[17:47:19.208]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.208]                               info, version)
[17:47:19.208]                           }
[17:47:19.208]                           base::stop(msg)
[17:47:19.208]                         }
[17:47:19.208]                       })
[17:47:19.208]                     }
[17:47:19.208]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.208]                     base::options(mc.cores = 1L)
[17:47:19.208]                   }
[17:47:19.208]                   ...future.strategy.old <- future::plan("list")
[17:47:19.208]                   options(future.plan = NULL)
[17:47:19.208]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.208]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.208]                 }
[17:47:19.208]                 ...future.workdir <- getwd()
[17:47:19.208]             }
[17:47:19.208]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.208]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.208]         }
[17:47:19.208]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.208]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.208]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.208]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.208]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.208]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.208]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.208]             base::names(...future.oldOptions))
[17:47:19.208]     }
[17:47:19.208]     if (FALSE) {
[17:47:19.208]     }
[17:47:19.208]     else {
[17:47:19.208]         if (TRUE) {
[17:47:19.208]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.208]                 open = "w")
[17:47:19.208]         }
[17:47:19.208]         else {
[17:47:19.208]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.208]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.208]         }
[17:47:19.208]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.208]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.208]             base::sink(type = "output", split = FALSE)
[17:47:19.208]             base::close(...future.stdout)
[17:47:19.208]         }, add = TRUE)
[17:47:19.208]     }
[17:47:19.208]     ...future.frame <- base::sys.nframe()
[17:47:19.208]     ...future.conditions <- base::list()
[17:47:19.208]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.208]     if (FALSE) {
[17:47:19.208]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.208]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.208]     }
[17:47:19.208]     ...future.result <- base::tryCatch({
[17:47:19.208]         base::withCallingHandlers({
[17:47:19.208]             ...future.value <- base::withVisible(base::local({
[17:47:19.208]                 withCallingHandlers({
[17:47:19.208]                   {
[17:47:19.208]                     ii
[17:47:19.208]                   }
[17:47:19.208]                 }, immediateCondition = function(cond) {
[17:47:19.208]                   save_rds <- function (object, pathname, ...) 
[17:47:19.208]                   {
[17:47:19.208]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.208]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.208]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.208]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.208]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.208]                         fi_tmp[["mtime"]])
[17:47:19.208]                     }
[17:47:19.208]                     tryCatch({
[17:47:19.208]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.208]                     }, error = function(ex) {
[17:47:19.208]                       msg <- conditionMessage(ex)
[17:47:19.208]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.208]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.208]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.208]                         fi_tmp[["mtime"]], msg)
[17:47:19.208]                       ex$message <- msg
[17:47:19.208]                       stop(ex)
[17:47:19.208]                     })
[17:47:19.208]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.208]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.208]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.208]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.208]                       fi <- file.info(pathname)
[17:47:19.208]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.208]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.208]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.208]                         fi[["size"]], fi[["mtime"]])
[17:47:19.208]                       stop(msg)
[17:47:19.208]                     }
[17:47:19.208]                     invisible(pathname)
[17:47:19.208]                   }
[17:47:19.208]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.208]                     rootPath = tempdir()) 
[17:47:19.208]                   {
[17:47:19.208]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.208]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.208]                       tmpdir = path, fileext = ".rds")
[17:47:19.208]                     save_rds(obj, file)
[17:47:19.208]                   }
[17:47:19.208]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.208]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.208]                   {
[17:47:19.208]                     inherits <- base::inherits
[17:47:19.208]                     invokeRestart <- base::invokeRestart
[17:47:19.208]                     is.null <- base::is.null
[17:47:19.208]                     muffled <- FALSE
[17:47:19.208]                     if (inherits(cond, "message")) {
[17:47:19.208]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.208]                       if (muffled) 
[17:47:19.208]                         invokeRestart("muffleMessage")
[17:47:19.208]                     }
[17:47:19.208]                     else if (inherits(cond, "warning")) {
[17:47:19.208]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.208]                       if (muffled) 
[17:47:19.208]                         invokeRestart("muffleWarning")
[17:47:19.208]                     }
[17:47:19.208]                     else if (inherits(cond, "condition")) {
[17:47:19.208]                       if (!is.null(pattern)) {
[17:47:19.208]                         computeRestarts <- base::computeRestarts
[17:47:19.208]                         grepl <- base::grepl
[17:47:19.208]                         restarts <- computeRestarts(cond)
[17:47:19.208]                         for (restart in restarts) {
[17:47:19.208]                           name <- restart$name
[17:47:19.208]                           if (is.null(name)) 
[17:47:19.208]                             next
[17:47:19.208]                           if (!grepl(pattern, name)) 
[17:47:19.208]                             next
[17:47:19.208]                           invokeRestart(restart)
[17:47:19.208]                           muffled <- TRUE
[17:47:19.208]                           break
[17:47:19.208]                         }
[17:47:19.208]                       }
[17:47:19.208]                     }
[17:47:19.208]                     invisible(muffled)
[17:47:19.208]                   }
[17:47:19.208]                   muffleCondition(cond)
[17:47:19.208]                 })
[17:47:19.208]             }))
[17:47:19.208]             future::FutureResult(value = ...future.value$value, 
[17:47:19.208]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.208]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.208]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.208]                     ...future.globalenv.names))
[17:47:19.208]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.208]         }, condition = base::local({
[17:47:19.208]             c <- base::c
[17:47:19.208]             inherits <- base::inherits
[17:47:19.208]             invokeRestart <- base::invokeRestart
[17:47:19.208]             length <- base::length
[17:47:19.208]             list <- base::list
[17:47:19.208]             seq.int <- base::seq.int
[17:47:19.208]             signalCondition <- base::signalCondition
[17:47:19.208]             sys.calls <- base::sys.calls
[17:47:19.208]             `[[` <- base::`[[`
[17:47:19.208]             `+` <- base::`+`
[17:47:19.208]             `<<-` <- base::`<<-`
[17:47:19.208]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.208]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.208]                   3L)]
[17:47:19.208]             }
[17:47:19.208]             function(cond) {
[17:47:19.208]                 is_error <- inherits(cond, "error")
[17:47:19.208]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.208]                   NULL)
[17:47:19.208]                 if (is_error) {
[17:47:19.208]                   sessionInformation <- function() {
[17:47:19.208]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.208]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.208]                       search = base::search(), system = base::Sys.info())
[17:47:19.208]                   }
[17:47:19.208]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.208]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.208]                     cond$call), session = sessionInformation(), 
[17:47:19.208]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.208]                   signalCondition(cond)
[17:47:19.208]                 }
[17:47:19.208]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.208]                 "immediateCondition"))) {
[17:47:19.208]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.208]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.208]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.208]                   if (TRUE && !signal) {
[17:47:19.208]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.208]                     {
[17:47:19.208]                       inherits <- base::inherits
[17:47:19.208]                       invokeRestart <- base::invokeRestart
[17:47:19.208]                       is.null <- base::is.null
[17:47:19.208]                       muffled <- FALSE
[17:47:19.208]                       if (inherits(cond, "message")) {
[17:47:19.208]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.208]                         if (muffled) 
[17:47:19.208]                           invokeRestart("muffleMessage")
[17:47:19.208]                       }
[17:47:19.208]                       else if (inherits(cond, "warning")) {
[17:47:19.208]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.208]                         if (muffled) 
[17:47:19.208]                           invokeRestart("muffleWarning")
[17:47:19.208]                       }
[17:47:19.208]                       else if (inherits(cond, "condition")) {
[17:47:19.208]                         if (!is.null(pattern)) {
[17:47:19.208]                           computeRestarts <- base::computeRestarts
[17:47:19.208]                           grepl <- base::grepl
[17:47:19.208]                           restarts <- computeRestarts(cond)
[17:47:19.208]                           for (restart in restarts) {
[17:47:19.208]                             name <- restart$name
[17:47:19.208]                             if (is.null(name)) 
[17:47:19.208]                               next
[17:47:19.208]                             if (!grepl(pattern, name)) 
[17:47:19.208]                               next
[17:47:19.208]                             invokeRestart(restart)
[17:47:19.208]                             muffled <- TRUE
[17:47:19.208]                             break
[17:47:19.208]                           }
[17:47:19.208]                         }
[17:47:19.208]                       }
[17:47:19.208]                       invisible(muffled)
[17:47:19.208]                     }
[17:47:19.208]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.208]                   }
[17:47:19.208]                 }
[17:47:19.208]                 else {
[17:47:19.208]                   if (TRUE) {
[17:47:19.208]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.208]                     {
[17:47:19.208]                       inherits <- base::inherits
[17:47:19.208]                       invokeRestart <- base::invokeRestart
[17:47:19.208]                       is.null <- base::is.null
[17:47:19.208]                       muffled <- FALSE
[17:47:19.208]                       if (inherits(cond, "message")) {
[17:47:19.208]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.208]                         if (muffled) 
[17:47:19.208]                           invokeRestart("muffleMessage")
[17:47:19.208]                       }
[17:47:19.208]                       else if (inherits(cond, "warning")) {
[17:47:19.208]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.208]                         if (muffled) 
[17:47:19.208]                           invokeRestart("muffleWarning")
[17:47:19.208]                       }
[17:47:19.208]                       else if (inherits(cond, "condition")) {
[17:47:19.208]                         if (!is.null(pattern)) {
[17:47:19.208]                           computeRestarts <- base::computeRestarts
[17:47:19.208]                           grepl <- base::grepl
[17:47:19.208]                           restarts <- computeRestarts(cond)
[17:47:19.208]                           for (restart in restarts) {
[17:47:19.208]                             name <- restart$name
[17:47:19.208]                             if (is.null(name)) 
[17:47:19.208]                               next
[17:47:19.208]                             if (!grepl(pattern, name)) 
[17:47:19.208]                               next
[17:47:19.208]                             invokeRestart(restart)
[17:47:19.208]                             muffled <- TRUE
[17:47:19.208]                             break
[17:47:19.208]                           }
[17:47:19.208]                         }
[17:47:19.208]                       }
[17:47:19.208]                       invisible(muffled)
[17:47:19.208]                     }
[17:47:19.208]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.208]                   }
[17:47:19.208]                 }
[17:47:19.208]             }
[17:47:19.208]         }))
[17:47:19.208]     }, error = function(ex) {
[17:47:19.208]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.208]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.208]                 ...future.rng), started = ...future.startTime, 
[17:47:19.208]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.208]             version = "1.8"), class = "FutureResult")
[17:47:19.208]     }, finally = {
[17:47:19.208]         if (!identical(...future.workdir, getwd())) 
[17:47:19.208]             setwd(...future.workdir)
[17:47:19.208]         {
[17:47:19.208]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.208]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.208]             }
[17:47:19.208]             base::options(...future.oldOptions)
[17:47:19.208]             if (.Platform$OS.type == "windows") {
[17:47:19.208]                 old_names <- names(...future.oldEnvVars)
[17:47:19.208]                 envs <- base::Sys.getenv()
[17:47:19.208]                 names <- names(envs)
[17:47:19.208]                 common <- intersect(names, old_names)
[17:47:19.208]                 added <- setdiff(names, old_names)
[17:47:19.208]                 removed <- setdiff(old_names, names)
[17:47:19.208]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.208]                   envs[common]]
[17:47:19.208]                 NAMES <- toupper(changed)
[17:47:19.208]                 args <- list()
[17:47:19.208]                 for (kk in seq_along(NAMES)) {
[17:47:19.208]                   name <- changed[[kk]]
[17:47:19.208]                   NAME <- NAMES[[kk]]
[17:47:19.208]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.208]                     next
[17:47:19.208]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.208]                 }
[17:47:19.208]                 NAMES <- toupper(added)
[17:47:19.208]                 for (kk in seq_along(NAMES)) {
[17:47:19.208]                   name <- added[[kk]]
[17:47:19.208]                   NAME <- NAMES[[kk]]
[17:47:19.208]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.208]                     next
[17:47:19.208]                   args[[name]] <- ""
[17:47:19.208]                 }
[17:47:19.208]                 NAMES <- toupper(removed)
[17:47:19.208]                 for (kk in seq_along(NAMES)) {
[17:47:19.208]                   name <- removed[[kk]]
[17:47:19.208]                   NAME <- NAMES[[kk]]
[17:47:19.208]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.208]                     next
[17:47:19.208]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.208]                 }
[17:47:19.208]                 if (length(args) > 0) 
[17:47:19.208]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.208]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.208]             }
[17:47:19.208]             else {
[17:47:19.208]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.208]             }
[17:47:19.208]             {
[17:47:19.208]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.208]                   0L) {
[17:47:19.208]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.208]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.208]                   base::options(opts)
[17:47:19.208]                 }
[17:47:19.208]                 {
[17:47:19.208]                   {
[17:47:19.208]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.208]                     NULL
[17:47:19.208]                   }
[17:47:19.208]                   options(future.plan = NULL)
[17:47:19.208]                   if (is.na(NA_character_)) 
[17:47:19.208]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.208]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.208]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.208]                     .init = FALSE)
[17:47:19.208]                 }
[17:47:19.208]             }
[17:47:19.208]         }
[17:47:19.208]     })
[17:47:19.208]     if (TRUE) {
[17:47:19.208]         base::sink(type = "output", split = FALSE)
[17:47:19.208]         if (TRUE) {
[17:47:19.208]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.208]         }
[17:47:19.208]         else {
[17:47:19.208]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.208]         }
[17:47:19.208]         base::close(...future.stdout)
[17:47:19.208]         ...future.stdout <- NULL
[17:47:19.208]     }
[17:47:19.208]     ...future.result$conditions <- ...future.conditions
[17:47:19.208]     ...future.result$finished <- base::Sys.time()
[17:47:19.208]     ...future.result
[17:47:19.208] }
[17:47:19.211] assign_globals() ...
[17:47:19.211] List of 1
[17:47:19.211]  $ ii: int 3
[17:47:19.211]  - attr(*, "where")=List of 1
[17:47:19.211]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:19.211]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.211]  - attr(*, "resolved")= logi FALSE
[17:47:19.211]  - attr(*, "total_size")= num 56
[17:47:19.215] - copied ‘ii’ to environment
[17:47:19.215] assign_globals() ... done
[17:47:19.215] requestCore(): workers = 2
[17:47:19.216] Poll #1 (0): usedCores() = 2, workers = 2
[17:47:19.226] result() for MulticoreFuture ...
[17:47:19.227] result() for MulticoreFuture ...
[17:47:19.228] result() for MulticoreFuture ... done
[17:47:19.228] result() for MulticoreFuture ... done
[17:47:19.228] result() for MulticoreFuture ...
[17:47:19.228] result() for MulticoreFuture ... done
[17:47:19.230] MulticoreFuture started
 - Creating multicore future #4 ...
[17:47:19.232] plan(): Setting new future strategy stack:
[17:47:19.232] List of future strategies:
[17:47:19.232] 1. sequential:
[17:47:19.232]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.232]    - tweaked: FALSE
[17:47:19.232]    - call: NULL
[17:47:19.233] plan(): nbrOfWorkers() = 1
[17:47:19.236] plan(): Setting new future strategy stack:
[17:47:19.236] List of future strategies:
[17:47:19.236] 1. multicore:
[17:47:19.236]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.236]    - tweaked: FALSE
[17:47:19.236]    - call: plan(multicore)
[17:47:19.238] getGlobalsAndPackages() ...
[17:47:19.238] Searching for globals...
[17:47:19.240] - globals found: [2] ‘{’, ‘ii’
[17:47:19.240] Searching for globals ... DONE
[17:47:19.240] Resolving globals: FALSE
[17:47:19.241] The total size of the 1 globals is 56 bytes (56 bytes)
[17:47:19.242] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[17:47:19.242] - globals: [1] ‘ii’
[17:47:19.242] plan(): nbrOfWorkers() = 2
[17:47:19.242] 
[17:47:19.242] getGlobalsAndPackages() ... DONE
[17:47:19.243] Packages needed by the future expression (n = 0): <none>
[17:47:19.244] Packages needed by future strategies (n = 0): <none>
[17:47:19.244] {
[17:47:19.244]     {
[17:47:19.244]         {
[17:47:19.244]             ...future.startTime <- base::Sys.time()
[17:47:19.244]             {
[17:47:19.244]                 {
[17:47:19.244]                   {
[17:47:19.244]                     {
[17:47:19.244]                       base::local({
[17:47:19.244]                         has_future <- base::requireNamespace("future", 
[17:47:19.244]                           quietly = TRUE)
[17:47:19.244]                         if (has_future) {
[17:47:19.244]                           ns <- base::getNamespace("future")
[17:47:19.244]                           version <- ns[[".package"]][["version"]]
[17:47:19.244]                           if (is.null(version)) 
[17:47:19.244]                             version <- utils::packageVersion("future")
[17:47:19.244]                         }
[17:47:19.244]                         else {
[17:47:19.244]                           version <- NULL
[17:47:19.244]                         }
[17:47:19.244]                         if (!has_future || version < "1.8.0") {
[17:47:19.244]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.244]                             "", base::R.version$version.string), 
[17:47:19.244]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.244]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.244]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.244]                               "release", "version")], collapse = " "), 
[17:47:19.244]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.244]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.244]                             info)
[17:47:19.244]                           info <- base::paste(info, collapse = "; ")
[17:47:19.244]                           if (!has_future) {
[17:47:19.244]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.244]                               info)
[17:47:19.244]                           }
[17:47:19.244]                           else {
[17:47:19.244]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.244]                               info, version)
[17:47:19.244]                           }
[17:47:19.244]                           base::stop(msg)
[17:47:19.244]                         }
[17:47:19.244]                       })
[17:47:19.244]                     }
[17:47:19.244]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.244]                     base::options(mc.cores = 1L)
[17:47:19.244]                   }
[17:47:19.244]                   ...future.strategy.old <- future::plan("list")
[17:47:19.244]                   options(future.plan = NULL)
[17:47:19.244]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.244]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.244]                 }
[17:47:19.244]                 ...future.workdir <- getwd()
[17:47:19.244]             }
[17:47:19.244]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.244]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.244]         }
[17:47:19.244]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.244]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.244]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.244]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.244]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.244]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.244]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.244]             base::names(...future.oldOptions))
[17:47:19.244]     }
[17:47:19.244]     if (FALSE) {
[17:47:19.244]     }
[17:47:19.244]     else {
[17:47:19.244]         if (TRUE) {
[17:47:19.244]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.244]                 open = "w")
[17:47:19.244]         }
[17:47:19.244]         else {
[17:47:19.244]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.244]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.244]         }
[17:47:19.244]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.244]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.244]             base::sink(type = "output", split = FALSE)
[17:47:19.244]             base::close(...future.stdout)
[17:47:19.244]         }, add = TRUE)
[17:47:19.244]     }
[17:47:19.244]     ...future.frame <- base::sys.nframe()
[17:47:19.244]     ...future.conditions <- base::list()
[17:47:19.244]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.244]     if (FALSE) {
[17:47:19.244]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.244]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.244]     }
[17:47:19.244]     ...future.result <- base::tryCatch({
[17:47:19.244]         base::withCallingHandlers({
[17:47:19.244]             ...future.value <- base::withVisible(base::local({
[17:47:19.244]                 withCallingHandlers({
[17:47:19.244]                   {
[17:47:19.244]                     ii
[17:47:19.244]                   }
[17:47:19.244]                 }, immediateCondition = function(cond) {
[17:47:19.244]                   save_rds <- function (object, pathname, ...) 
[17:47:19.244]                   {
[17:47:19.244]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.244]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.244]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.244]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.244]                         fi_tmp[["mtime"]])
[17:47:19.244]                     }
[17:47:19.244]                     tryCatch({
[17:47:19.244]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.244]                     }, error = function(ex) {
[17:47:19.244]                       msg <- conditionMessage(ex)
[17:47:19.244]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.244]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.244]                         fi_tmp[["mtime"]], msg)
[17:47:19.244]                       ex$message <- msg
[17:47:19.244]                       stop(ex)
[17:47:19.244]                     })
[17:47:19.244]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.244]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.244]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.244]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.244]                       fi <- file.info(pathname)
[17:47:19.244]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.244]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.244]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.244]                         fi[["size"]], fi[["mtime"]])
[17:47:19.244]                       stop(msg)
[17:47:19.244]                     }
[17:47:19.244]                     invisible(pathname)
[17:47:19.244]                   }
[17:47:19.244]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.244]                     rootPath = tempdir()) 
[17:47:19.244]                   {
[17:47:19.244]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.244]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.244]                       tmpdir = path, fileext = ".rds")
[17:47:19.244]                     save_rds(obj, file)
[17:47:19.244]                   }
[17:47:19.244]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.244]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.244]                   {
[17:47:19.244]                     inherits <- base::inherits
[17:47:19.244]                     invokeRestart <- base::invokeRestart
[17:47:19.244]                     is.null <- base::is.null
[17:47:19.244]                     muffled <- FALSE
[17:47:19.244]                     if (inherits(cond, "message")) {
[17:47:19.244]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.244]                       if (muffled) 
[17:47:19.244]                         invokeRestart("muffleMessage")
[17:47:19.244]                     }
[17:47:19.244]                     else if (inherits(cond, "warning")) {
[17:47:19.244]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.244]                       if (muffled) 
[17:47:19.244]                         invokeRestart("muffleWarning")
[17:47:19.244]                     }
[17:47:19.244]                     else if (inherits(cond, "condition")) {
[17:47:19.244]                       if (!is.null(pattern)) {
[17:47:19.244]                         computeRestarts <- base::computeRestarts
[17:47:19.244]                         grepl <- base::grepl
[17:47:19.244]                         restarts <- computeRestarts(cond)
[17:47:19.244]                         for (restart in restarts) {
[17:47:19.244]                           name <- restart$name
[17:47:19.244]                           if (is.null(name)) 
[17:47:19.244]                             next
[17:47:19.244]                           if (!grepl(pattern, name)) 
[17:47:19.244]                             next
[17:47:19.244]                           invokeRestart(restart)
[17:47:19.244]                           muffled <- TRUE
[17:47:19.244]                           break
[17:47:19.244]                         }
[17:47:19.244]                       }
[17:47:19.244]                     }
[17:47:19.244]                     invisible(muffled)
[17:47:19.244]                   }
[17:47:19.244]                   muffleCondition(cond)
[17:47:19.244]                 })
[17:47:19.244]             }))
[17:47:19.244]             future::FutureResult(value = ...future.value$value, 
[17:47:19.244]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.244]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.244]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.244]                     ...future.globalenv.names))
[17:47:19.244]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.244]         }, condition = base::local({
[17:47:19.244]             c <- base::c
[17:47:19.244]             inherits <- base::inherits
[17:47:19.244]             invokeRestart <- base::invokeRestart
[17:47:19.244]             length <- base::length
[17:47:19.244]             list <- base::list
[17:47:19.244]             seq.int <- base::seq.int
[17:47:19.244]             signalCondition <- base::signalCondition
[17:47:19.244]             sys.calls <- base::sys.calls
[17:47:19.244]             `[[` <- base::`[[`
[17:47:19.244]             `+` <- base::`+`
[17:47:19.244]             `<<-` <- base::`<<-`
[17:47:19.244]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.244]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.244]                   3L)]
[17:47:19.244]             }
[17:47:19.244]             function(cond) {
[17:47:19.244]                 is_error <- inherits(cond, "error")
[17:47:19.244]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.244]                   NULL)
[17:47:19.244]                 if (is_error) {
[17:47:19.244]                   sessionInformation <- function() {
[17:47:19.244]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.244]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.244]                       search = base::search(), system = base::Sys.info())
[17:47:19.244]                   }
[17:47:19.244]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.244]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.244]                     cond$call), session = sessionInformation(), 
[17:47:19.244]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.244]                   signalCondition(cond)
[17:47:19.244]                 }
[17:47:19.244]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.244]                 "immediateCondition"))) {
[17:47:19.244]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.244]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.244]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.244]                   if (TRUE && !signal) {
[17:47:19.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.244]                     {
[17:47:19.244]                       inherits <- base::inherits
[17:47:19.244]                       invokeRestart <- base::invokeRestart
[17:47:19.244]                       is.null <- base::is.null
[17:47:19.244]                       muffled <- FALSE
[17:47:19.244]                       if (inherits(cond, "message")) {
[17:47:19.244]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.244]                         if (muffled) 
[17:47:19.244]                           invokeRestart("muffleMessage")
[17:47:19.244]                       }
[17:47:19.244]                       else if (inherits(cond, "warning")) {
[17:47:19.244]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.244]                         if (muffled) 
[17:47:19.244]                           invokeRestart("muffleWarning")
[17:47:19.244]                       }
[17:47:19.244]                       else if (inherits(cond, "condition")) {
[17:47:19.244]                         if (!is.null(pattern)) {
[17:47:19.244]                           computeRestarts <- base::computeRestarts
[17:47:19.244]                           grepl <- base::grepl
[17:47:19.244]                           restarts <- computeRestarts(cond)
[17:47:19.244]                           for (restart in restarts) {
[17:47:19.244]                             name <- restart$name
[17:47:19.244]                             if (is.null(name)) 
[17:47:19.244]                               next
[17:47:19.244]                             if (!grepl(pattern, name)) 
[17:47:19.244]                               next
[17:47:19.244]                             invokeRestart(restart)
[17:47:19.244]                             muffled <- TRUE
[17:47:19.244]                             break
[17:47:19.244]                           }
[17:47:19.244]                         }
[17:47:19.244]                       }
[17:47:19.244]                       invisible(muffled)
[17:47:19.244]                     }
[17:47:19.244]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.244]                   }
[17:47:19.244]                 }
[17:47:19.244]                 else {
[17:47:19.244]                   if (TRUE) {
[17:47:19.244]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.244]                     {
[17:47:19.244]                       inherits <- base::inherits
[17:47:19.244]                       invokeRestart <- base::invokeRestart
[17:47:19.244]                       is.null <- base::is.null
[17:47:19.244]                       muffled <- FALSE
[17:47:19.244]                       if (inherits(cond, "message")) {
[17:47:19.244]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.244]                         if (muffled) 
[17:47:19.244]                           invokeRestart("muffleMessage")
[17:47:19.244]                       }
[17:47:19.244]                       else if (inherits(cond, "warning")) {
[17:47:19.244]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.244]                         if (muffled) 
[17:47:19.244]                           invokeRestart("muffleWarning")
[17:47:19.244]                       }
[17:47:19.244]                       else if (inherits(cond, "condition")) {
[17:47:19.244]                         if (!is.null(pattern)) {
[17:47:19.244]                           computeRestarts <- base::computeRestarts
[17:47:19.244]                           grepl <- base::grepl
[17:47:19.244]                           restarts <- computeRestarts(cond)
[17:47:19.244]                           for (restart in restarts) {
[17:47:19.244]                             name <- restart$name
[17:47:19.244]                             if (is.null(name)) 
[17:47:19.244]                               next
[17:47:19.244]                             if (!grepl(pattern, name)) 
[17:47:19.244]                               next
[17:47:19.244]                             invokeRestart(restart)
[17:47:19.244]                             muffled <- TRUE
[17:47:19.244]                             break
[17:47:19.244]                           }
[17:47:19.244]                         }
[17:47:19.244]                       }
[17:47:19.244]                       invisible(muffled)
[17:47:19.244]                     }
[17:47:19.244]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.244]                   }
[17:47:19.244]                 }
[17:47:19.244]             }
[17:47:19.244]         }))
[17:47:19.244]     }, error = function(ex) {
[17:47:19.244]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.244]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.244]                 ...future.rng), started = ...future.startTime, 
[17:47:19.244]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.244]             version = "1.8"), class = "FutureResult")
[17:47:19.244]     }, finally = {
[17:47:19.244]         if (!identical(...future.workdir, getwd())) 
[17:47:19.244]             setwd(...future.workdir)
[17:47:19.244]         {
[17:47:19.244]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.244]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.244]             }
[17:47:19.244]             base::options(...future.oldOptions)
[17:47:19.244]             if (.Platform$OS.type == "windows") {
[17:47:19.244]                 old_names <- names(...future.oldEnvVars)
[17:47:19.244]                 envs <- base::Sys.getenv()
[17:47:19.244]                 names <- names(envs)
[17:47:19.244]                 common <- intersect(names, old_names)
[17:47:19.244]                 added <- setdiff(names, old_names)
[17:47:19.244]                 removed <- setdiff(old_names, names)
[17:47:19.244]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.244]                   envs[common]]
[17:47:19.244]                 NAMES <- toupper(changed)
[17:47:19.244]                 args <- list()
[17:47:19.244]                 for (kk in seq_along(NAMES)) {
[17:47:19.244]                   name <- changed[[kk]]
[17:47:19.244]                   NAME <- NAMES[[kk]]
[17:47:19.244]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.244]                     next
[17:47:19.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.244]                 }
[17:47:19.244]                 NAMES <- toupper(added)
[17:47:19.244]                 for (kk in seq_along(NAMES)) {
[17:47:19.244]                   name <- added[[kk]]
[17:47:19.244]                   NAME <- NAMES[[kk]]
[17:47:19.244]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.244]                     next
[17:47:19.244]                   args[[name]] <- ""
[17:47:19.244]                 }
[17:47:19.244]                 NAMES <- toupper(removed)
[17:47:19.244]                 for (kk in seq_along(NAMES)) {
[17:47:19.244]                   name <- removed[[kk]]
[17:47:19.244]                   NAME <- NAMES[[kk]]
[17:47:19.244]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.244]                     next
[17:47:19.244]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.244]                 }
[17:47:19.244]                 if (length(args) > 0) 
[17:47:19.244]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.244]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.244]             }
[17:47:19.244]             else {
[17:47:19.244]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.244]             }
[17:47:19.244]             {
[17:47:19.244]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.244]                   0L) {
[17:47:19.244]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.244]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.244]                   base::options(opts)
[17:47:19.244]                 }
[17:47:19.244]                 {
[17:47:19.244]                   {
[17:47:19.244]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.244]                     NULL
[17:47:19.244]                   }
[17:47:19.244]                   options(future.plan = NULL)
[17:47:19.244]                   if (is.na(NA_character_)) 
[17:47:19.244]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.244]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.244]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.244]                     .init = FALSE)
[17:47:19.244]                 }
[17:47:19.244]             }
[17:47:19.244]         }
[17:47:19.244]     })
[17:47:19.244]     if (TRUE) {
[17:47:19.244]         base::sink(type = "output", split = FALSE)
[17:47:19.244]         if (TRUE) {
[17:47:19.244]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.244]         }
[17:47:19.244]         else {
[17:47:19.244]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.244]         }
[17:47:19.244]         base::close(...future.stdout)
[17:47:19.244]         ...future.stdout <- NULL
[17:47:19.244]     }
[17:47:19.244]     ...future.result$conditions <- ...future.conditions
[17:47:19.244]     ...future.result$finished <- base::Sys.time()
[17:47:19.244]     ...future.result
[17:47:19.244] }
[17:47:19.247] assign_globals() ...
[17:47:19.248] List of 1
[17:47:19.248]  $ ii: int 4
[17:47:19.248]  - attr(*, "where")=List of 1
[17:47:19.248]   ..$ ii:<environment: R_EmptyEnv> 
[17:47:19.248]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.248]  - attr(*, "resolved")= logi FALSE
[17:47:19.248]  - attr(*, "total_size")= num 56
[17:47:19.251] - copied ‘ii’ to environment
[17:47:19.251] assign_globals() ... done
[17:47:19.251] requestCore(): workers = 2
[17:47:19.252] Poll #1 (0): usedCores() = 2, workers = 2
[17:47:19.263] result() for MulticoreFuture ...
[17:47:19.264] result() for MulticoreFuture ...
[17:47:19.264] result() for MulticoreFuture ... done
[17:47:19.264] result() for MulticoreFuture ... done
[17:47:19.264] result() for MulticoreFuture ...
[17:47:19.264] result() for MulticoreFuture ... done
[17:47:19.267] MulticoreFuture started
 - Resolving 4 multicore futures
[17:47:19.268] result() for MulticoreFuture ...
[17:47:19.268] plan(): Setting new future strategy stack:
[17:47:19.268] result() for MulticoreFuture ... done
[17:47:19.268] result() for MulticoreFuture ...
[17:47:19.268] result() for MulticoreFuture ... done
[17:47:19.269] result() for MulticoreFuture ...
[17:47:19.269] result() for MulticoreFuture ... done
[17:47:19.269] result() for MulticoreFuture ...
[17:47:19.268] List of future strategies:
[17:47:19.268] 1. sequential:
[17:47:19.268]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.268]    - tweaked: FALSE
[17:47:19.268]    - call: NULL
[17:47:19.269] result() for MulticoreFuture ... done
[17:47:19.270] plan(): nbrOfWorkers() = 1
[17:47:19.270] result() for MulticoreFuture ...
[17:47:19.271] result() for MulticoreFuture ...
[17:47:19.271] result() for MulticoreFuture ... done
[17:47:19.272] result() for MulticoreFuture ... done
[17:47:19.272] result() for MulticoreFuture ...
[17:47:19.272] result() for MulticoreFuture ... done
[17:47:19.272] result() for MulticoreFuture ...
[17:47:19.272] plan(): Setting new future strategy stack:
[17:47:19.272] List of future strategies:
[17:47:19.272] 1. multicore:
[17:47:19.272]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.272]    - tweaked: FALSE
[17:47:19.272]    - call: plan(multicore)
[17:47:19.278] plan(): nbrOfWorkers() = 2
[17:47:19.279] result() for MulticoreFuture ...
[17:47:19.279] result() for MulticoreFuture ... done
[17:47:19.279] result() for MulticoreFuture ... done
[17:47:19.279] result() for MulticoreFuture ...
[17:47:19.279] result() for MulticoreFuture ... done
*** multicore(..., globals = TRUE) and errors
[17:47:19.287] getGlobalsAndPackages() ...
[17:47:19.287] Searching for globals...
[17:47:19.288] - globals found: [2] ‘{’, ‘stop’
[17:47:19.289] Searching for globals ... DONE
[17:47:19.289] Resolving globals: FALSE
[17:47:19.289] 
[17:47:19.289] 
[17:47:19.289] getGlobalsAndPackages() ... DONE
[17:47:19.290] Packages needed by the future expression (n = 0): <none>
[17:47:19.290] Packages needed by future strategies (n = 0): <none>
[17:47:19.291] {
[17:47:19.291]     {
[17:47:19.291]         {
[17:47:19.291]             ...future.startTime <- base::Sys.time()
[17:47:19.291]             {
[17:47:19.291]                 {
[17:47:19.291]                   {
[17:47:19.291]                     {
[17:47:19.291]                       base::local({
[17:47:19.291]                         has_future <- base::requireNamespace("future", 
[17:47:19.291]                           quietly = TRUE)
[17:47:19.291]                         if (has_future) {
[17:47:19.291]                           ns <- base::getNamespace("future")
[17:47:19.291]                           version <- ns[[".package"]][["version"]]
[17:47:19.291]                           if (is.null(version)) 
[17:47:19.291]                             version <- utils::packageVersion("future")
[17:47:19.291]                         }
[17:47:19.291]                         else {
[17:47:19.291]                           version <- NULL
[17:47:19.291]                         }
[17:47:19.291]                         if (!has_future || version < "1.8.0") {
[17:47:19.291]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.291]                             "", base::R.version$version.string), 
[17:47:19.291]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.291]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.291]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.291]                               "release", "version")], collapse = " "), 
[17:47:19.291]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.291]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.291]                             info)
[17:47:19.291]                           info <- base::paste(info, collapse = "; ")
[17:47:19.291]                           if (!has_future) {
[17:47:19.291]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.291]                               info)
[17:47:19.291]                           }
[17:47:19.291]                           else {
[17:47:19.291]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.291]                               info, version)
[17:47:19.291]                           }
[17:47:19.291]                           base::stop(msg)
[17:47:19.291]                         }
[17:47:19.291]                       })
[17:47:19.291]                     }
[17:47:19.291]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.291]                     base::options(mc.cores = 1L)
[17:47:19.291]                   }
[17:47:19.291]                   ...future.strategy.old <- future::plan("list")
[17:47:19.291]                   options(future.plan = NULL)
[17:47:19.291]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.291]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.291]                 }
[17:47:19.291]                 ...future.workdir <- getwd()
[17:47:19.291]             }
[17:47:19.291]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.291]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.291]         }
[17:47:19.291]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.291]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.291]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.291]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.291]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.291]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.291]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.291]             base::names(...future.oldOptions))
[17:47:19.291]     }
[17:47:19.291]     if (FALSE) {
[17:47:19.291]     }
[17:47:19.291]     else {
[17:47:19.291]         if (TRUE) {
[17:47:19.291]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.291]                 open = "w")
[17:47:19.291]         }
[17:47:19.291]         else {
[17:47:19.291]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.291]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.291]         }
[17:47:19.291]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.291]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.291]             base::sink(type = "output", split = FALSE)
[17:47:19.291]             base::close(...future.stdout)
[17:47:19.291]         }, add = TRUE)
[17:47:19.291]     }
[17:47:19.291]     ...future.frame <- base::sys.nframe()
[17:47:19.291]     ...future.conditions <- base::list()
[17:47:19.291]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.291]     if (FALSE) {
[17:47:19.291]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.291]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.291]     }
[17:47:19.291]     ...future.result <- base::tryCatch({
[17:47:19.291]         base::withCallingHandlers({
[17:47:19.291]             ...future.value <- base::withVisible(base::local({
[17:47:19.291]                 withCallingHandlers({
[17:47:19.291]                   {
[17:47:19.291]                     stop("Whoops!")
[17:47:19.291]                     1
[17:47:19.291]                   }
[17:47:19.291]                 }, immediateCondition = function(cond) {
[17:47:19.291]                   save_rds <- function (object, pathname, ...) 
[17:47:19.291]                   {
[17:47:19.291]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.291]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.291]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.291]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.291]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.291]                         fi_tmp[["mtime"]])
[17:47:19.291]                     }
[17:47:19.291]                     tryCatch({
[17:47:19.291]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.291]                     }, error = function(ex) {
[17:47:19.291]                       msg <- conditionMessage(ex)
[17:47:19.291]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.291]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.291]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.291]                         fi_tmp[["mtime"]], msg)
[17:47:19.291]                       ex$message <- msg
[17:47:19.291]                       stop(ex)
[17:47:19.291]                     })
[17:47:19.291]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.291]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.291]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.291]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.291]                       fi <- file.info(pathname)
[17:47:19.291]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.291]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.291]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.291]                         fi[["size"]], fi[["mtime"]])
[17:47:19.291]                       stop(msg)
[17:47:19.291]                     }
[17:47:19.291]                     invisible(pathname)
[17:47:19.291]                   }
[17:47:19.291]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.291]                     rootPath = tempdir()) 
[17:47:19.291]                   {
[17:47:19.291]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.291]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.291]                       tmpdir = path, fileext = ".rds")
[17:47:19.291]                     save_rds(obj, file)
[17:47:19.291]                   }
[17:47:19.291]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.291]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.291]                   {
[17:47:19.291]                     inherits <- base::inherits
[17:47:19.291]                     invokeRestart <- base::invokeRestart
[17:47:19.291]                     is.null <- base::is.null
[17:47:19.291]                     muffled <- FALSE
[17:47:19.291]                     if (inherits(cond, "message")) {
[17:47:19.291]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.291]                       if (muffled) 
[17:47:19.291]                         invokeRestart("muffleMessage")
[17:47:19.291]                     }
[17:47:19.291]                     else if (inherits(cond, "warning")) {
[17:47:19.291]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.291]                       if (muffled) 
[17:47:19.291]                         invokeRestart("muffleWarning")
[17:47:19.291]                     }
[17:47:19.291]                     else if (inherits(cond, "condition")) {
[17:47:19.291]                       if (!is.null(pattern)) {
[17:47:19.291]                         computeRestarts <- base::computeRestarts
[17:47:19.291]                         grepl <- base::grepl
[17:47:19.291]                         restarts <- computeRestarts(cond)
[17:47:19.291]                         for (restart in restarts) {
[17:47:19.291]                           name <- restart$name
[17:47:19.291]                           if (is.null(name)) 
[17:47:19.291]                             next
[17:47:19.291]                           if (!grepl(pattern, name)) 
[17:47:19.291]                             next
[17:47:19.291]                           invokeRestart(restart)
[17:47:19.291]                           muffled <- TRUE
[17:47:19.291]                           break
[17:47:19.291]                         }
[17:47:19.291]                       }
[17:47:19.291]                     }
[17:47:19.291]                     invisible(muffled)
[17:47:19.291]                   }
[17:47:19.291]                   muffleCondition(cond)
[17:47:19.291]                 })
[17:47:19.291]             }))
[17:47:19.291]             future::FutureResult(value = ...future.value$value, 
[17:47:19.291]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.291]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.291]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.291]                     ...future.globalenv.names))
[17:47:19.291]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.291]         }, condition = base::local({
[17:47:19.291]             c <- base::c
[17:47:19.291]             inherits <- base::inherits
[17:47:19.291]             invokeRestart <- base::invokeRestart
[17:47:19.291]             length <- base::length
[17:47:19.291]             list <- base::list
[17:47:19.291]             seq.int <- base::seq.int
[17:47:19.291]             signalCondition <- base::signalCondition
[17:47:19.291]             sys.calls <- base::sys.calls
[17:47:19.291]             `[[` <- base::`[[`
[17:47:19.291]             `+` <- base::`+`
[17:47:19.291]             `<<-` <- base::`<<-`
[17:47:19.291]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.291]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.291]                   3L)]
[17:47:19.291]             }
[17:47:19.291]             function(cond) {
[17:47:19.291]                 is_error <- inherits(cond, "error")
[17:47:19.291]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.291]                   NULL)
[17:47:19.291]                 if (is_error) {
[17:47:19.291]                   sessionInformation <- function() {
[17:47:19.291]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.291]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.291]                       search = base::search(), system = base::Sys.info())
[17:47:19.291]                   }
[17:47:19.291]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.291]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.291]                     cond$call), session = sessionInformation(), 
[17:47:19.291]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.291]                   signalCondition(cond)
[17:47:19.291]                 }
[17:47:19.291]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.291]                 "immediateCondition"))) {
[17:47:19.291]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.291]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.291]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.291]                   if (TRUE && !signal) {
[17:47:19.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.291]                     {
[17:47:19.291]                       inherits <- base::inherits
[17:47:19.291]                       invokeRestart <- base::invokeRestart
[17:47:19.291]                       is.null <- base::is.null
[17:47:19.291]                       muffled <- FALSE
[17:47:19.291]                       if (inherits(cond, "message")) {
[17:47:19.291]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.291]                         if (muffled) 
[17:47:19.291]                           invokeRestart("muffleMessage")
[17:47:19.291]                       }
[17:47:19.291]                       else if (inherits(cond, "warning")) {
[17:47:19.291]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.291]                         if (muffled) 
[17:47:19.291]                           invokeRestart("muffleWarning")
[17:47:19.291]                       }
[17:47:19.291]                       else if (inherits(cond, "condition")) {
[17:47:19.291]                         if (!is.null(pattern)) {
[17:47:19.291]                           computeRestarts <- base::computeRestarts
[17:47:19.291]                           grepl <- base::grepl
[17:47:19.291]                           restarts <- computeRestarts(cond)
[17:47:19.291]                           for (restart in restarts) {
[17:47:19.291]                             name <- restart$name
[17:47:19.291]                             if (is.null(name)) 
[17:47:19.291]                               next
[17:47:19.291]                             if (!grepl(pattern, name)) 
[17:47:19.291]                               next
[17:47:19.291]                             invokeRestart(restart)
[17:47:19.291]                             muffled <- TRUE
[17:47:19.291]                             break
[17:47:19.291]                           }
[17:47:19.291]                         }
[17:47:19.291]                       }
[17:47:19.291]                       invisible(muffled)
[17:47:19.291]                     }
[17:47:19.291]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.291]                   }
[17:47:19.291]                 }
[17:47:19.291]                 else {
[17:47:19.291]                   if (TRUE) {
[17:47:19.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.291]                     {
[17:47:19.291]                       inherits <- base::inherits
[17:47:19.291]                       invokeRestart <- base::invokeRestart
[17:47:19.291]                       is.null <- base::is.null
[17:47:19.291]                       muffled <- FALSE
[17:47:19.291]                       if (inherits(cond, "message")) {
[17:47:19.291]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.291]                         if (muffled) 
[17:47:19.291]                           invokeRestart("muffleMessage")
[17:47:19.291]                       }
[17:47:19.291]                       else if (inherits(cond, "warning")) {
[17:47:19.291]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.291]                         if (muffled) 
[17:47:19.291]                           invokeRestart("muffleWarning")
[17:47:19.291]                       }
[17:47:19.291]                       else if (inherits(cond, "condition")) {
[17:47:19.291]                         if (!is.null(pattern)) {
[17:47:19.291]                           computeRestarts <- base::computeRestarts
[17:47:19.291]                           grepl <- base::grepl
[17:47:19.291]                           restarts <- computeRestarts(cond)
[17:47:19.291]                           for (restart in restarts) {
[17:47:19.291]                             name <- restart$name
[17:47:19.291]                             if (is.null(name)) 
[17:47:19.291]                               next
[17:47:19.291]                             if (!grepl(pattern, name)) 
[17:47:19.291]                               next
[17:47:19.291]                             invokeRestart(restart)
[17:47:19.291]                             muffled <- TRUE
[17:47:19.291]                             break
[17:47:19.291]                           }
[17:47:19.291]                         }
[17:47:19.291]                       }
[17:47:19.291]                       invisible(muffled)
[17:47:19.291]                     }
[17:47:19.291]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.291]                   }
[17:47:19.291]                 }
[17:47:19.291]             }
[17:47:19.291]         }))
[17:47:19.291]     }, error = function(ex) {
[17:47:19.291]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.291]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.291]                 ...future.rng), started = ...future.startTime, 
[17:47:19.291]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.291]             version = "1.8"), class = "FutureResult")
[17:47:19.291]     }, finally = {
[17:47:19.291]         if (!identical(...future.workdir, getwd())) 
[17:47:19.291]             setwd(...future.workdir)
[17:47:19.291]         {
[17:47:19.291]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.291]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.291]             }
[17:47:19.291]             base::options(...future.oldOptions)
[17:47:19.291]             if (.Platform$OS.type == "windows") {
[17:47:19.291]                 old_names <- names(...future.oldEnvVars)
[17:47:19.291]                 envs <- base::Sys.getenv()
[17:47:19.291]                 names <- names(envs)
[17:47:19.291]                 common <- intersect(names, old_names)
[17:47:19.291]                 added <- setdiff(names, old_names)
[17:47:19.291]                 removed <- setdiff(old_names, names)
[17:47:19.291]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.291]                   envs[common]]
[17:47:19.291]                 NAMES <- toupper(changed)
[17:47:19.291]                 args <- list()
[17:47:19.291]                 for (kk in seq_along(NAMES)) {
[17:47:19.291]                   name <- changed[[kk]]
[17:47:19.291]                   NAME <- NAMES[[kk]]
[17:47:19.291]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.291]                     next
[17:47:19.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.291]                 }
[17:47:19.291]                 NAMES <- toupper(added)
[17:47:19.291]                 for (kk in seq_along(NAMES)) {
[17:47:19.291]                   name <- added[[kk]]
[17:47:19.291]                   NAME <- NAMES[[kk]]
[17:47:19.291]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.291]                     next
[17:47:19.291]                   args[[name]] <- ""
[17:47:19.291]                 }
[17:47:19.291]                 NAMES <- toupper(removed)
[17:47:19.291]                 for (kk in seq_along(NAMES)) {
[17:47:19.291]                   name <- removed[[kk]]
[17:47:19.291]                   NAME <- NAMES[[kk]]
[17:47:19.291]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.291]                     next
[17:47:19.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.291]                 }
[17:47:19.291]                 if (length(args) > 0) 
[17:47:19.291]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.291]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.291]             }
[17:47:19.291]             else {
[17:47:19.291]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.291]             }
[17:47:19.291]             {
[17:47:19.291]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.291]                   0L) {
[17:47:19.291]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.291]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.291]                   base::options(opts)
[17:47:19.291]                 }
[17:47:19.291]                 {
[17:47:19.291]                   {
[17:47:19.291]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.291]                     NULL
[17:47:19.291]                   }
[17:47:19.291]                   options(future.plan = NULL)
[17:47:19.291]                   if (is.na(NA_character_)) 
[17:47:19.291]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.291]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.291]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.291]                     .init = FALSE)
[17:47:19.291]                 }
[17:47:19.291]             }
[17:47:19.291]         }
[17:47:19.291]     })
[17:47:19.291]     if (TRUE) {
[17:47:19.291]         base::sink(type = "output", split = FALSE)
[17:47:19.291]         if (TRUE) {
[17:47:19.291]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.291]         }
[17:47:19.291]         else {
[17:47:19.291]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.291]         }
[17:47:19.291]         base::close(...future.stdout)
[17:47:19.291]         ...future.stdout <- NULL
[17:47:19.291]     }
[17:47:19.291]     ...future.result$conditions <- ...future.conditions
[17:47:19.291]     ...future.result$finished <- base::Sys.time()
[17:47:19.291]     ...future.result
[17:47:19.291] }
[17:47:19.293] requestCore(): workers = 2
[17:47:19.295] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:19.296] plan(): Setting new future strategy stack:
[17:47:19.297] List of future strategies:
[17:47:19.297] 1. sequential:
[17:47:19.297]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.297]    - tweaked: FALSE
[17:47:19.297]    - call: NULL
[17:47:19.298] plan(): nbrOfWorkers() = 1
[17:47:19.300] plan(): Setting new future strategy stack:
[17:47:19.300] List of future strategies:
[17:47:19.300] 1. multicore:
[17:47:19.300]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.300]    - tweaked: FALSE
[17:47:19.300]    - call: plan(multicore)
[17:47:19.305] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:19.307] result() for MulticoreFuture ...
[17:47:19.310] result() for MulticoreFuture ...
[17:47:19.310] result() for MulticoreFuture ... done
[17:47:19.311] signalConditions() ...
[17:47:19.311]  - include = ‘immediateCondition’
[17:47:19.311]  - exclude = 
[17:47:19.311]  - resignal = FALSE
[17:47:19.311]  - Number of conditions: 1
[17:47:19.312] signalConditions() ... done
[17:47:19.312] result() for MulticoreFuture ... done
[17:47:19.312] result() for MulticoreFuture ...
[17:47:19.312] result() for MulticoreFuture ... done
[17:47:19.312] signalConditions() ...
[17:47:19.312]  - include = ‘immediateCondition’
[17:47:19.313]  - exclude = 
[17:47:19.313]  - resignal = FALSE
[17:47:19.313]  - Number of conditions: 1
[17:47:19.313] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:19.314] result() for MulticoreFuture ...
[17:47:19.314] result() for MulticoreFuture ... done
[17:47:19.314] result() for MulticoreFuture ...
[17:47:19.314] result() for MulticoreFuture ... done
[17:47:19.314] signalConditions() ...
[17:47:19.314]  - include = ‘immediateCondition’
[17:47:19.314]  - exclude = 
[17:47:19.315]  - resignal = FALSE
[17:47:19.315]  - Number of conditions: 1
[17:47:19.315] signalConditions() ... done
[17:47:19.315] Future state: ‘finished’
[17:47:19.315] result() for MulticoreFuture ...
[17:47:19.315] result() for MulticoreFuture ... done
[17:47:19.315] signalConditions() ...
[17:47:19.315]  - include = ‘condition’
[17:47:19.316]  - exclude = ‘immediateCondition’
[17:47:19.316]  - resignal = TRUE
[17:47:19.316]  - Number of conditions: 1
[17:47:19.316]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:19.316] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:19.317] result() for MulticoreFuture ...
[17:47:19.317] result() for MulticoreFuture ... done
[17:47:19.317] result() for MulticoreFuture ...
[17:47:19.317] result() for MulticoreFuture ... done
[17:47:19.317] signalConditions() ...
[17:47:19.317]  - include = ‘immediateCondition’
[17:47:19.318]  - exclude = 
[17:47:19.318]  - resignal = FALSE
[17:47:19.318]  - Number of conditions: 1
[17:47:19.318] signalConditions() ... done
[17:47:19.318] Future state: ‘finished’
[17:47:19.318] result() for MulticoreFuture ...
[17:47:19.318] result() for MulticoreFuture ... done
[17:47:19.318] signalConditions() ...
[17:47:19.318]  - include = ‘condition’
[17:47:19.319]  - exclude = ‘immediateCondition’
[17:47:19.319]  - resignal = TRUE
[17:47:19.319]  - Number of conditions: 1
[17:47:19.319]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[17:47:19.319] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[17:47:19.323] getGlobalsAndPackages() ...
[17:47:19.324] 
[17:47:19.324] - globals: [0] <none>
[17:47:19.324] getGlobalsAndPackages() ... DONE
[17:47:19.324] Packages needed by the future expression (n = 0): <none>
[17:47:19.325] Packages needed by future strategies (n = 0): <none>
[17:47:19.325] {
[17:47:19.325]     {
[17:47:19.325]         {
[17:47:19.325]             ...future.startTime <- base::Sys.time()
[17:47:19.325]             {
[17:47:19.325]                 {
[17:47:19.325]                   {
[17:47:19.325]                     {
[17:47:19.325]                       base::local({
[17:47:19.325]                         has_future <- base::requireNamespace("future", 
[17:47:19.325]                           quietly = TRUE)
[17:47:19.325]                         if (has_future) {
[17:47:19.325]                           ns <- base::getNamespace("future")
[17:47:19.325]                           version <- ns[[".package"]][["version"]]
[17:47:19.325]                           if (is.null(version)) 
[17:47:19.325]                             version <- utils::packageVersion("future")
[17:47:19.325]                         }
[17:47:19.325]                         else {
[17:47:19.325]                           version <- NULL
[17:47:19.325]                         }
[17:47:19.325]                         if (!has_future || version < "1.8.0") {
[17:47:19.325]                           info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.325]                             "", base::R.version$version.string), 
[17:47:19.325]                             platform = base::sprintf("%s (%s-bit)", 
[17:47:19.325]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.325]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.325]                               "release", "version")], collapse = " "), 
[17:47:19.325]                             hostname = base::Sys.info()[["nodename"]])
[17:47:19.325]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.325]                             info)
[17:47:19.325]                           info <- base::paste(info, collapse = "; ")
[17:47:19.325]                           if (!has_future) {
[17:47:19.325]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.325]                               info)
[17:47:19.325]                           }
[17:47:19.325]                           else {
[17:47:19.325]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.325]                               info, version)
[17:47:19.325]                           }
[17:47:19.325]                           base::stop(msg)
[17:47:19.325]                         }
[17:47:19.325]                       })
[17:47:19.325]                     }
[17:47:19.325]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:47:19.325]                     base::options(mc.cores = 1L)
[17:47:19.325]                   }
[17:47:19.325]                   ...future.strategy.old <- future::plan("list")
[17:47:19.325]                   options(future.plan = NULL)
[17:47:19.325]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.325]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.325]                 }
[17:47:19.325]                 ...future.workdir <- getwd()
[17:47:19.325]             }
[17:47:19.325]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.325]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.325]         }
[17:47:19.325]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.325]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.325]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.325]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.325]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.325]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.325]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.325]             base::names(...future.oldOptions))
[17:47:19.325]     }
[17:47:19.325]     if (FALSE) {
[17:47:19.325]     }
[17:47:19.325]     else {
[17:47:19.325]         if (TRUE) {
[17:47:19.325]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.325]                 open = "w")
[17:47:19.325]         }
[17:47:19.325]         else {
[17:47:19.325]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.325]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.325]         }
[17:47:19.325]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.325]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.325]             base::sink(type = "output", split = FALSE)
[17:47:19.325]             base::close(...future.stdout)
[17:47:19.325]         }, add = TRUE)
[17:47:19.325]     }
[17:47:19.325]     ...future.frame <- base::sys.nframe()
[17:47:19.325]     ...future.conditions <- base::list()
[17:47:19.325]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.325]     if (FALSE) {
[17:47:19.325]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.325]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.325]     }
[17:47:19.325]     ...future.result <- base::tryCatch({
[17:47:19.325]         base::withCallingHandlers({
[17:47:19.325]             ...future.value <- base::withVisible(base::local({
[17:47:19.325]                 withCallingHandlers({
[17:47:19.325]                   {
[17:47:19.325]                     stop(structure(list(message = "boom"), class = c("MyError", 
[17:47:19.325]                       "error", "condition")))
[17:47:19.325]                   }
[17:47:19.325]                 }, immediateCondition = function(cond) {
[17:47:19.325]                   save_rds <- function (object, pathname, ...) 
[17:47:19.325]                   {
[17:47:19.325]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:47:19.325]                     if (file_test("-f", pathname_tmp)) {
[17:47:19.325]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.325]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:47:19.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.325]                         fi_tmp[["mtime"]])
[17:47:19.325]                     }
[17:47:19.325]                     tryCatch({
[17:47:19.325]                       saveRDS(object, file = pathname_tmp, ...)
[17:47:19.325]                     }, error = function(ex) {
[17:47:19.325]                       msg <- conditionMessage(ex)
[17:47:19.325]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.325]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:47:19.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.325]                         fi_tmp[["mtime"]], msg)
[17:47:19.325]                       ex$message <- msg
[17:47:19.325]                       stop(ex)
[17:47:19.325]                     })
[17:47:19.325]                     stopifnot(file_test("-f", pathname_tmp))
[17:47:19.325]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:47:19.325]                     if (!res || file_test("-f", pathname_tmp)) {
[17:47:19.325]                       fi_tmp <- file.info(pathname_tmp)
[17:47:19.325]                       fi <- file.info(pathname)
[17:47:19.325]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:47:19.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:47:19.325]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:47:19.325]                         fi[["size"]], fi[["mtime"]])
[17:47:19.325]                       stop(msg)
[17:47:19.325]                     }
[17:47:19.325]                     invisible(pathname)
[17:47:19.325]                   }
[17:47:19.325]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:47:19.325]                     rootPath = tempdir()) 
[17:47:19.325]                   {
[17:47:19.325]                     obj <- list(time = Sys.time(), condition = cond)
[17:47:19.325]                     file <- tempfile(pattern = class(cond)[1], 
[17:47:19.325]                       tmpdir = path, fileext = ".rds")
[17:47:19.325]                     save_rds(obj, file)
[17:47:19.325]                   }
[17:47:19.325]                   saveImmediateCondition(cond, path = "/tmp/RtmpRLvBy0/.future/immediateConditions")
[17:47:19.325]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.325]                   {
[17:47:19.325]                     inherits <- base::inherits
[17:47:19.325]                     invokeRestart <- base::invokeRestart
[17:47:19.325]                     is.null <- base::is.null
[17:47:19.325]                     muffled <- FALSE
[17:47:19.325]                     if (inherits(cond, "message")) {
[17:47:19.325]                       muffled <- grepl(pattern, "muffleMessage")
[17:47:19.325]                       if (muffled) 
[17:47:19.325]                         invokeRestart("muffleMessage")
[17:47:19.325]                     }
[17:47:19.325]                     else if (inherits(cond, "warning")) {
[17:47:19.325]                       muffled <- grepl(pattern, "muffleWarning")
[17:47:19.325]                       if (muffled) 
[17:47:19.325]                         invokeRestart("muffleWarning")
[17:47:19.325]                     }
[17:47:19.325]                     else if (inherits(cond, "condition")) {
[17:47:19.325]                       if (!is.null(pattern)) {
[17:47:19.325]                         computeRestarts <- base::computeRestarts
[17:47:19.325]                         grepl <- base::grepl
[17:47:19.325]                         restarts <- computeRestarts(cond)
[17:47:19.325]                         for (restart in restarts) {
[17:47:19.325]                           name <- restart$name
[17:47:19.325]                           if (is.null(name)) 
[17:47:19.325]                             next
[17:47:19.325]                           if (!grepl(pattern, name)) 
[17:47:19.325]                             next
[17:47:19.325]                           invokeRestart(restart)
[17:47:19.325]                           muffled <- TRUE
[17:47:19.325]                           break
[17:47:19.325]                         }
[17:47:19.325]                       }
[17:47:19.325]                     }
[17:47:19.325]                     invisible(muffled)
[17:47:19.325]                   }
[17:47:19.325]                   muffleCondition(cond)
[17:47:19.325]                 })
[17:47:19.325]             }))
[17:47:19.325]             future::FutureResult(value = ...future.value$value, 
[17:47:19.325]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.325]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.325]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.325]                     ...future.globalenv.names))
[17:47:19.325]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.325]         }, condition = base::local({
[17:47:19.325]             c <- base::c
[17:47:19.325]             inherits <- base::inherits
[17:47:19.325]             invokeRestart <- base::invokeRestart
[17:47:19.325]             length <- base::length
[17:47:19.325]             list <- base::list
[17:47:19.325]             seq.int <- base::seq.int
[17:47:19.325]             signalCondition <- base::signalCondition
[17:47:19.325]             sys.calls <- base::sys.calls
[17:47:19.325]             `[[` <- base::`[[`
[17:47:19.325]             `+` <- base::`+`
[17:47:19.325]             `<<-` <- base::`<<-`
[17:47:19.325]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.325]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.325]                   3L)]
[17:47:19.325]             }
[17:47:19.325]             function(cond) {
[17:47:19.325]                 is_error <- inherits(cond, "error")
[17:47:19.325]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.325]                   NULL)
[17:47:19.325]                 if (is_error) {
[17:47:19.325]                   sessionInformation <- function() {
[17:47:19.325]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.325]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.325]                       search = base::search(), system = base::Sys.info())
[17:47:19.325]                   }
[17:47:19.325]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.325]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.325]                     cond$call), session = sessionInformation(), 
[17:47:19.325]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.325]                   signalCondition(cond)
[17:47:19.325]                 }
[17:47:19.325]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.325]                 "immediateCondition"))) {
[17:47:19.325]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.325]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.325]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.325]                   if (TRUE && !signal) {
[17:47:19.325]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.325]                     {
[17:47:19.325]                       inherits <- base::inherits
[17:47:19.325]                       invokeRestart <- base::invokeRestart
[17:47:19.325]                       is.null <- base::is.null
[17:47:19.325]                       muffled <- FALSE
[17:47:19.325]                       if (inherits(cond, "message")) {
[17:47:19.325]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.325]                         if (muffled) 
[17:47:19.325]                           invokeRestart("muffleMessage")
[17:47:19.325]                       }
[17:47:19.325]                       else if (inherits(cond, "warning")) {
[17:47:19.325]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.325]                         if (muffled) 
[17:47:19.325]                           invokeRestart("muffleWarning")
[17:47:19.325]                       }
[17:47:19.325]                       else if (inherits(cond, "condition")) {
[17:47:19.325]                         if (!is.null(pattern)) {
[17:47:19.325]                           computeRestarts <- base::computeRestarts
[17:47:19.325]                           grepl <- base::grepl
[17:47:19.325]                           restarts <- computeRestarts(cond)
[17:47:19.325]                           for (restart in restarts) {
[17:47:19.325]                             name <- restart$name
[17:47:19.325]                             if (is.null(name)) 
[17:47:19.325]                               next
[17:47:19.325]                             if (!grepl(pattern, name)) 
[17:47:19.325]                               next
[17:47:19.325]                             invokeRestart(restart)
[17:47:19.325]                             muffled <- TRUE
[17:47:19.325]                             break
[17:47:19.325]                           }
[17:47:19.325]                         }
[17:47:19.325]                       }
[17:47:19.325]                       invisible(muffled)
[17:47:19.325]                     }
[17:47:19.325]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.325]                   }
[17:47:19.325]                 }
[17:47:19.325]                 else {
[17:47:19.325]                   if (TRUE) {
[17:47:19.325]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.325]                     {
[17:47:19.325]                       inherits <- base::inherits
[17:47:19.325]                       invokeRestart <- base::invokeRestart
[17:47:19.325]                       is.null <- base::is.null
[17:47:19.325]                       muffled <- FALSE
[17:47:19.325]                       if (inherits(cond, "message")) {
[17:47:19.325]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.325]                         if (muffled) 
[17:47:19.325]                           invokeRestart("muffleMessage")
[17:47:19.325]                       }
[17:47:19.325]                       else if (inherits(cond, "warning")) {
[17:47:19.325]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.325]                         if (muffled) 
[17:47:19.325]                           invokeRestart("muffleWarning")
[17:47:19.325]                       }
[17:47:19.325]                       else if (inherits(cond, "condition")) {
[17:47:19.325]                         if (!is.null(pattern)) {
[17:47:19.325]                           computeRestarts <- base::computeRestarts
[17:47:19.325]                           grepl <- base::grepl
[17:47:19.325]                           restarts <- computeRestarts(cond)
[17:47:19.325]                           for (restart in restarts) {
[17:47:19.325]                             name <- restart$name
[17:47:19.325]                             if (is.null(name)) 
[17:47:19.325]                               next
[17:47:19.325]                             if (!grepl(pattern, name)) 
[17:47:19.325]                               next
[17:47:19.325]                             invokeRestart(restart)
[17:47:19.325]                             muffled <- TRUE
[17:47:19.325]                             break
[17:47:19.325]                           }
[17:47:19.325]                         }
[17:47:19.325]                       }
[17:47:19.325]                       invisible(muffled)
[17:47:19.325]                     }
[17:47:19.325]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.325]                   }
[17:47:19.325]                 }
[17:47:19.325]             }
[17:47:19.325]         }))
[17:47:19.325]     }, error = function(ex) {
[17:47:19.325]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.325]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.325]                 ...future.rng), started = ...future.startTime, 
[17:47:19.325]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.325]             version = "1.8"), class = "FutureResult")
[17:47:19.325]     }, finally = {
[17:47:19.325]         if (!identical(...future.workdir, getwd())) 
[17:47:19.325]             setwd(...future.workdir)
[17:47:19.325]         {
[17:47:19.325]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.325]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.325]             }
[17:47:19.325]             base::options(...future.oldOptions)
[17:47:19.325]             if (.Platform$OS.type == "windows") {
[17:47:19.325]                 old_names <- names(...future.oldEnvVars)
[17:47:19.325]                 envs <- base::Sys.getenv()
[17:47:19.325]                 names <- names(envs)
[17:47:19.325]                 common <- intersect(names, old_names)
[17:47:19.325]                 added <- setdiff(names, old_names)
[17:47:19.325]                 removed <- setdiff(old_names, names)
[17:47:19.325]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.325]                   envs[common]]
[17:47:19.325]                 NAMES <- toupper(changed)
[17:47:19.325]                 args <- list()
[17:47:19.325]                 for (kk in seq_along(NAMES)) {
[17:47:19.325]                   name <- changed[[kk]]
[17:47:19.325]                   NAME <- NAMES[[kk]]
[17:47:19.325]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.325]                     next
[17:47:19.325]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.325]                 }
[17:47:19.325]                 NAMES <- toupper(added)
[17:47:19.325]                 for (kk in seq_along(NAMES)) {
[17:47:19.325]                   name <- added[[kk]]
[17:47:19.325]                   NAME <- NAMES[[kk]]
[17:47:19.325]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.325]                     next
[17:47:19.325]                   args[[name]] <- ""
[17:47:19.325]                 }
[17:47:19.325]                 NAMES <- toupper(removed)
[17:47:19.325]                 for (kk in seq_along(NAMES)) {
[17:47:19.325]                   name <- removed[[kk]]
[17:47:19.325]                   NAME <- NAMES[[kk]]
[17:47:19.325]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.325]                     next
[17:47:19.325]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.325]                 }
[17:47:19.325]                 if (length(args) > 0) 
[17:47:19.325]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.325]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.325]             }
[17:47:19.325]             else {
[17:47:19.325]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.325]             }
[17:47:19.325]             {
[17:47:19.325]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.325]                   0L) {
[17:47:19.325]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.325]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.325]                   base::options(opts)
[17:47:19.325]                 }
[17:47:19.325]                 {
[17:47:19.325]                   {
[17:47:19.325]                     base::options(mc.cores = ...future.mc.cores.old)
[17:47:19.325]                     NULL
[17:47:19.325]                   }
[17:47:19.325]                   options(future.plan = NULL)
[17:47:19.325]                   if (is.na(NA_character_)) 
[17:47:19.325]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.325]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.325]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.325]                     .init = FALSE)
[17:47:19.325]                 }
[17:47:19.325]             }
[17:47:19.325]         }
[17:47:19.325]     })
[17:47:19.325]     if (TRUE) {
[17:47:19.325]         base::sink(type = "output", split = FALSE)
[17:47:19.325]         if (TRUE) {
[17:47:19.325]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.325]         }
[17:47:19.325]         else {
[17:47:19.325]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.325]         }
[17:47:19.325]         base::close(...future.stdout)
[17:47:19.325]         ...future.stdout <- NULL
[17:47:19.325]     }
[17:47:19.325]     ...future.result$conditions <- ...future.conditions
[17:47:19.325]     ...future.result$finished <- base::Sys.time()
[17:47:19.325]     ...future.result
[17:47:19.325] }
[17:47:19.328] requestCore(): workers = 2
[17:47:19.329] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:47:19.330] plan(): Setting new future strategy stack:
[17:47:19.331] List of future strategies:
[17:47:19.331] 1. sequential:
[17:47:19.331]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.331]    - tweaked: FALSE
[17:47:19.331]    - call: NULL
[17:47:19.332] plan(): nbrOfWorkers() = 1
[17:47:19.334] plan(): Setting new future strategy stack:
[17:47:19.334] List of future strategies:
[17:47:19.334] 1. multicore:
[17:47:19.334]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.334]    - tweaked: FALSE
[17:47:19.334]    - call: plan(multicore)
[17:47:19.339] plan(): nbrOfWorkers() = 2
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: f706ac18-848c-5791-fee8-58cfc401c656
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:47:19.341] result() for MulticoreFuture ...
[17:47:19.343] result() for MulticoreFuture ...
[17:47:19.344] result() for MulticoreFuture ... done
[17:47:19.344] signalConditions() ...
[17:47:19.344]  - include = ‘immediateCondition’
[17:47:19.344]  - exclude = 
[17:47:19.344]  - resignal = FALSE
[17:47:19.344]  - Number of conditions: 1
[17:47:19.345] signalConditions() ... done
[17:47:19.345] result() for MulticoreFuture ... done
[17:47:19.345] result() for MulticoreFuture ...
[17:47:19.345] result() for MulticoreFuture ... done
[17:47:19.345] signalConditions() ...
[17:47:19.345]  - include = ‘immediateCondition’
[17:47:19.345]  - exclude = 
[17:47:19.346]  - resignal = FALSE
[17:47:19.346]  - Number of conditions: 1
[17:47:19.346] signalConditions() ... done
<MyError: boom>
[17:47:19.346] result() for MulticoreFuture ...
[17:47:19.346] result() for MulticoreFuture ... done
[17:47:19.346] result() for MulticoreFuture ...
[17:47:19.346] result() for MulticoreFuture ... done
[17:47:19.347] signalConditions() ...
[17:47:19.347]  - include = ‘immediateCondition’
[17:47:19.347]  - exclude = 
[17:47:19.347]  - resignal = FALSE
[17:47:19.347]  - Number of conditions: 1
[17:47:19.347] signalConditions() ... done
[17:47:19.347] Future state: ‘finished’
[17:47:19.347] result() for MulticoreFuture ...
[17:47:19.347] result() for MulticoreFuture ... done
[17:47:19.348] signalConditions() ...
[17:47:19.348]  - include = ‘condition’
[17:47:19.348]  - exclude = ‘immediateCondition’
[17:47:19.348]  - resignal = TRUE
[17:47:19.348]  - Number of conditions: 1
[17:47:19.348]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[17:47:19.348] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[17:47:19.349] getGlobalsAndPackages() ...
[17:47:19.349] Searching for globals...
[17:47:19.350] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[17:47:19.350] Searching for globals ... DONE
[17:47:19.350] Resolving globals: FALSE
[17:47:19.351] The total size of the 2 globals is 112 bytes (112 bytes)
[17:47:19.351] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[17:47:19.351] - globals: [2] ‘a’, ‘b’
[17:47:19.352] 
[17:47:19.352] getGlobalsAndPackages() ... DONE
[17:47:19.355] Packages needed by the future expression (n = 0): <none>
[17:47:19.356] Packages needed by future strategies (n = 0): <none>
[17:47:19.356] {
[17:47:19.356]     {
[17:47:19.356]         {
[17:47:19.356]             ...future.startTime <- base::Sys.time()
[17:47:19.356]             {
[17:47:19.356]                 {
[17:47:19.356]                   {
[17:47:19.356]                     base::local({
[17:47:19.356]                       has_future <- base::requireNamespace("future", 
[17:47:19.356]                         quietly = TRUE)
[17:47:19.356]                       if (has_future) {
[17:47:19.356]                         ns <- base::getNamespace("future")
[17:47:19.356]                         version <- ns[[".package"]][["version"]]
[17:47:19.356]                         if (is.null(version)) 
[17:47:19.356]                           version <- utils::packageVersion("future")
[17:47:19.356]                       }
[17:47:19.356]                       else {
[17:47:19.356]                         version <- NULL
[17:47:19.356]                       }
[17:47:19.356]                       if (!has_future || version < "1.8.0") {
[17:47:19.356]                         info <- base::c(r_version = base::gsub("R version ", 
[17:47:19.356]                           "", base::R.version$version.string), 
[17:47:19.356]                           platform = base::sprintf("%s (%s-bit)", 
[17:47:19.356]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:47:19.356]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:47:19.356]                             "release", "version")], collapse = " "), 
[17:47:19.356]                           hostname = base::Sys.info()[["nodename"]])
[17:47:19.356]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:47:19.356]                           info)
[17:47:19.356]                         info <- base::paste(info, collapse = "; ")
[17:47:19.356]                         if (!has_future) {
[17:47:19.356]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:47:19.356]                             info)
[17:47:19.356]                         }
[17:47:19.356]                         else {
[17:47:19.356]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:47:19.356]                             info, version)
[17:47:19.356]                         }
[17:47:19.356]                         base::stop(msg)
[17:47:19.356]                       }
[17:47:19.356]                     })
[17:47:19.356]                   }
[17:47:19.356]                   ...future.strategy.old <- future::plan("list")
[17:47:19.356]                   options(future.plan = NULL)
[17:47:19.356]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.356]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:47:19.356]                 }
[17:47:19.356]                 ...future.workdir <- getwd()
[17:47:19.356]             }
[17:47:19.356]             ...future.oldOptions <- base::as.list(base::.Options)
[17:47:19.356]             ...future.oldEnvVars <- base::Sys.getenv()
[17:47:19.356]         }
[17:47:19.356]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:47:19.356]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:47:19.356]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:47:19.356]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:47:19.356]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:47:19.356]             future.stdout.windows.reencode = NULL, width = 80L)
[17:47:19.356]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:47:19.356]             base::names(...future.oldOptions))
[17:47:19.356]     }
[17:47:19.356]     if (FALSE) {
[17:47:19.356]     }
[17:47:19.356]     else {
[17:47:19.356]         if (TRUE) {
[17:47:19.356]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:47:19.356]                 open = "w")
[17:47:19.356]         }
[17:47:19.356]         else {
[17:47:19.356]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:47:19.356]                 windows = "NUL", "/dev/null"), open = "w")
[17:47:19.356]         }
[17:47:19.356]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:47:19.356]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:47:19.356]             base::sink(type = "output", split = FALSE)
[17:47:19.356]             base::close(...future.stdout)
[17:47:19.356]         }, add = TRUE)
[17:47:19.356]     }
[17:47:19.356]     ...future.frame <- base::sys.nframe()
[17:47:19.356]     ...future.conditions <- base::list()
[17:47:19.356]     ...future.rng <- base::globalenv()$.Random.seed
[17:47:19.356]     if (FALSE) {
[17:47:19.356]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:47:19.356]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:47:19.356]     }
[17:47:19.356]     ...future.result <- base::tryCatch({
[17:47:19.356]         base::withCallingHandlers({
[17:47:19.356]             ...future.value <- base::withVisible(base::local({
[17:47:19.356]                 a * b
[17:47:19.356]             }))
[17:47:19.356]             future::FutureResult(value = ...future.value$value, 
[17:47:19.356]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.356]                   ...future.rng), globalenv = if (FALSE) 
[17:47:19.356]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:47:19.356]                     ...future.globalenv.names))
[17:47:19.356]                 else NULL, started = ...future.startTime, version = "1.8")
[17:47:19.356]         }, condition = base::local({
[17:47:19.356]             c <- base::c
[17:47:19.356]             inherits <- base::inherits
[17:47:19.356]             invokeRestart <- base::invokeRestart
[17:47:19.356]             length <- base::length
[17:47:19.356]             list <- base::list
[17:47:19.356]             seq.int <- base::seq.int
[17:47:19.356]             signalCondition <- base::signalCondition
[17:47:19.356]             sys.calls <- base::sys.calls
[17:47:19.356]             `[[` <- base::`[[`
[17:47:19.356]             `+` <- base::`+`
[17:47:19.356]             `<<-` <- base::`<<-`
[17:47:19.356]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:47:19.356]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:47:19.356]                   3L)]
[17:47:19.356]             }
[17:47:19.356]             function(cond) {
[17:47:19.356]                 is_error <- inherits(cond, "error")
[17:47:19.356]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:47:19.356]                   NULL)
[17:47:19.356]                 if (is_error) {
[17:47:19.356]                   sessionInformation <- function() {
[17:47:19.356]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:47:19.356]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:47:19.356]                       search = base::search(), system = base::Sys.info())
[17:47:19.356]                   }
[17:47:19.356]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.356]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:47:19.356]                     cond$call), session = sessionInformation(), 
[17:47:19.356]                     timestamp = base::Sys.time(), signaled = 0L)
[17:47:19.356]                   signalCondition(cond)
[17:47:19.356]                 }
[17:47:19.356]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:47:19.356]                 "immediateCondition"))) {
[17:47:19.356]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:47:19.356]                   ...future.conditions[[length(...future.conditions) + 
[17:47:19.356]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:47:19.356]                   if (TRUE && !signal) {
[17:47:19.356]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.356]                     {
[17:47:19.356]                       inherits <- base::inherits
[17:47:19.356]                       invokeRestart <- base::invokeRestart
[17:47:19.356]                       is.null <- base::is.null
[17:47:19.356]                       muffled <- FALSE
[17:47:19.356]                       if (inherits(cond, "message")) {
[17:47:19.356]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.356]                         if (muffled) 
[17:47:19.356]                           invokeRestart("muffleMessage")
[17:47:19.356]                       }
[17:47:19.356]                       else if (inherits(cond, "warning")) {
[17:47:19.356]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.356]                         if (muffled) 
[17:47:19.356]                           invokeRestart("muffleWarning")
[17:47:19.356]                       }
[17:47:19.356]                       else if (inherits(cond, "condition")) {
[17:47:19.356]                         if (!is.null(pattern)) {
[17:47:19.356]                           computeRestarts <- base::computeRestarts
[17:47:19.356]                           grepl <- base::grepl
[17:47:19.356]                           restarts <- computeRestarts(cond)
[17:47:19.356]                           for (restart in restarts) {
[17:47:19.356]                             name <- restart$name
[17:47:19.356]                             if (is.null(name)) 
[17:47:19.356]                               next
[17:47:19.356]                             if (!grepl(pattern, name)) 
[17:47:19.356]                               next
[17:47:19.356]                             invokeRestart(restart)
[17:47:19.356]                             muffled <- TRUE
[17:47:19.356]                             break
[17:47:19.356]                           }
[17:47:19.356]                         }
[17:47:19.356]                       }
[17:47:19.356]                       invisible(muffled)
[17:47:19.356]                     }
[17:47:19.356]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.356]                   }
[17:47:19.356]                 }
[17:47:19.356]                 else {
[17:47:19.356]                   if (TRUE) {
[17:47:19.356]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:47:19.356]                     {
[17:47:19.356]                       inherits <- base::inherits
[17:47:19.356]                       invokeRestart <- base::invokeRestart
[17:47:19.356]                       is.null <- base::is.null
[17:47:19.356]                       muffled <- FALSE
[17:47:19.356]                       if (inherits(cond, "message")) {
[17:47:19.356]                         muffled <- grepl(pattern, "muffleMessage")
[17:47:19.356]                         if (muffled) 
[17:47:19.356]                           invokeRestart("muffleMessage")
[17:47:19.356]                       }
[17:47:19.356]                       else if (inherits(cond, "warning")) {
[17:47:19.356]                         muffled <- grepl(pattern, "muffleWarning")
[17:47:19.356]                         if (muffled) 
[17:47:19.356]                           invokeRestart("muffleWarning")
[17:47:19.356]                       }
[17:47:19.356]                       else if (inherits(cond, "condition")) {
[17:47:19.356]                         if (!is.null(pattern)) {
[17:47:19.356]                           computeRestarts <- base::computeRestarts
[17:47:19.356]                           grepl <- base::grepl
[17:47:19.356]                           restarts <- computeRestarts(cond)
[17:47:19.356]                           for (restart in restarts) {
[17:47:19.356]                             name <- restart$name
[17:47:19.356]                             if (is.null(name)) 
[17:47:19.356]                               next
[17:47:19.356]                             if (!grepl(pattern, name)) 
[17:47:19.356]                               next
[17:47:19.356]                             invokeRestart(restart)
[17:47:19.356]                             muffled <- TRUE
[17:47:19.356]                             break
[17:47:19.356]                           }
[17:47:19.356]                         }
[17:47:19.356]                       }
[17:47:19.356]                       invisible(muffled)
[17:47:19.356]                     }
[17:47:19.356]                     muffleCondition(cond, pattern = "^muffle")
[17:47:19.356]                   }
[17:47:19.356]                 }
[17:47:19.356]             }
[17:47:19.356]         }))
[17:47:19.356]     }, error = function(ex) {
[17:47:19.356]         base::structure(base::list(value = NULL, visible = NULL, 
[17:47:19.356]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:47:19.356]                 ...future.rng), started = ...future.startTime, 
[17:47:19.356]             finished = Sys.time(), session_uuid = NA_character_, 
[17:47:19.356]             version = "1.8"), class = "FutureResult")
[17:47:19.356]     }, finally = {
[17:47:19.356]         if (!identical(...future.workdir, getwd())) 
[17:47:19.356]             setwd(...future.workdir)
[17:47:19.356]         {
[17:47:19.356]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:47:19.356]                 ...future.oldOptions$nwarnings <- NULL
[17:47:19.356]             }
[17:47:19.356]             base::options(...future.oldOptions)
[17:47:19.356]             if (.Platform$OS.type == "windows") {
[17:47:19.356]                 old_names <- names(...future.oldEnvVars)
[17:47:19.356]                 envs <- base::Sys.getenv()
[17:47:19.356]                 names <- names(envs)
[17:47:19.356]                 common <- intersect(names, old_names)
[17:47:19.356]                 added <- setdiff(names, old_names)
[17:47:19.356]                 removed <- setdiff(old_names, names)
[17:47:19.356]                 changed <- common[...future.oldEnvVars[common] != 
[17:47:19.356]                   envs[common]]
[17:47:19.356]                 NAMES <- toupper(changed)
[17:47:19.356]                 args <- list()
[17:47:19.356]                 for (kk in seq_along(NAMES)) {
[17:47:19.356]                   name <- changed[[kk]]
[17:47:19.356]                   NAME <- NAMES[[kk]]
[17:47:19.356]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.356]                     next
[17:47:19.356]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.356]                 }
[17:47:19.356]                 NAMES <- toupper(added)
[17:47:19.356]                 for (kk in seq_along(NAMES)) {
[17:47:19.356]                   name <- added[[kk]]
[17:47:19.356]                   NAME <- NAMES[[kk]]
[17:47:19.356]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.356]                     next
[17:47:19.356]                   args[[name]] <- ""
[17:47:19.356]                 }
[17:47:19.356]                 NAMES <- toupper(removed)
[17:47:19.356]                 for (kk in seq_along(NAMES)) {
[17:47:19.356]                   name <- removed[[kk]]
[17:47:19.356]                   NAME <- NAMES[[kk]]
[17:47:19.356]                   if (name != NAME && is.element(NAME, old_names)) 
[17:47:19.356]                     next
[17:47:19.356]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:47:19.356]                 }
[17:47:19.356]                 if (length(args) > 0) 
[17:47:19.356]                   base::do.call(base::Sys.setenv, args = args)
[17:47:19.356]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:47:19.356]             }
[17:47:19.356]             else {
[17:47:19.356]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:47:19.356]             }
[17:47:19.356]             {
[17:47:19.356]                 if (base::length(...future.futureOptionsAdded) > 
[17:47:19.356]                   0L) {
[17:47:19.356]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:47:19.356]                   base::names(opts) <- ...future.futureOptionsAdded
[17:47:19.356]                   base::options(opts)
[17:47:19.356]                 }
[17:47:19.356]                 {
[17:47:19.356]                   {
[17:47:19.356]                     NULL
[17:47:19.356]                     RNGkind("Mersenne-Twister")
[17:47:19.356]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:47:19.356]                       inherits = FALSE)
[17:47:19.356]                   }
[17:47:19.356]                   options(future.plan = NULL)
[17:47:19.356]                   if (is.na(NA_character_)) 
[17:47:19.356]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:47:19.356]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:47:19.356]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:47:19.356]                     .init = FALSE)
[17:47:19.356]                 }
[17:47:19.356]             }
[17:47:19.356]         }
[17:47:19.356]     })
[17:47:19.356]     if (TRUE) {
[17:47:19.356]         base::sink(type = "output", split = FALSE)
[17:47:19.356]         if (TRUE) {
[17:47:19.356]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:47:19.356]         }
[17:47:19.356]         else {
[17:47:19.356]             ...future.result["stdout"] <- base::list(NULL)
[17:47:19.356]         }
[17:47:19.356]         base::close(...future.stdout)
[17:47:19.356]         ...future.stdout <- NULL
[17:47:19.356]     }
[17:47:19.356]     ...future.result$conditions <- ...future.conditions
[17:47:19.356]     ...future.result$finished <- base::Sys.time()
[17:47:19.356]     ...future.result
[17:47:19.356] }
[17:47:19.358] assign_globals() ...
[17:47:19.358] List of 2
[17:47:19.358]  $ a: num 2
[17:47:19.358]  $ b: num 3
[17:47:19.358]  - attr(*, "where")=List of 2
[17:47:19.358]   ..$ a:<environment: R_EmptyEnv> 
[17:47:19.358]   ..$ b:<environment: R_EmptyEnv> 
[17:47:19.358]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:47:19.358]  - attr(*, "resolved")= logi FALSE
[17:47:19.358]  - attr(*, "total_size")= num 112
[17:47:19.362] - copied ‘a’ to environment
[17:47:19.362] - copied ‘b’ to environment
[17:47:19.362] assign_globals() ... done
[17:47:19.362] plan(): Setting new future strategy stack:
[17:47:19.362] List of future strategies:
[17:47:19.362] 1. sequential:
[17:47:19.362]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.362]    - tweaked: FALSE
[17:47:19.362]    - call: NULL
[17:47:19.363] plan(): nbrOfWorkers() = 1
[17:47:19.364] plan(): Setting new future strategy stack:
[17:47:19.364] List of future strategies:
[17:47:19.364] 1. multicore:
[17:47:19.364]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:47:19.364]    - tweaked: FALSE
[17:47:19.364]    - call: plan(multicore)
[17:47:19.368] plan(): nbrOfWorkers() = 2
[17:47:19.368] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 2 cores ... DONE
> 
> message("*** multicore() ... DONE")
*** multicore() ... DONE
> 
> source("incl/end.R")
[17:47:19.369] plan(): Setting new future strategy stack:
[17:47:19.369] List of future strategies:
[17:47:19.369] 1. FutureStrategy:
[17:47:19.369]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:47:19.369]    - tweaked: FALSE
[17:47:19.369]    - call: future::plan(oplan)
[17:47:19.370] plan(): nbrOfWorkers() = 1
> 
