
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:05:13.761] plan(): Setting new future strategy stack:
[18:05:13.762] List of future strategies:
[18:05:13.762] 1. sequential:
[18:05:13.762]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:13.762]    - tweaked: FALSE
[18:05:13.762]    - call: future::plan("sequential")
[18:05:13.786] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[18:05:13.812] plan(): Setting new future strategy stack:
[18:05:13.812] List of future strategies:
[18:05:13.812] 1. multicore:
[18:05:13.812]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:13.812]    - tweaked: FALSE
[18:05:13.812]    - call: plan(multicore)
[18:05:13.843] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() ...")
*** multicore() ...
> 
> for (cores in 1:min(2L, availableCores("multicore"))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   if (!supportsMulticore()) {
+     message(sprintf("Multicore futures are not supporting on '%s'. Falling back to use synchronous sequential futures", .Platform$OS.type))
+   }
+ 
+   nworkers <- nbrOfWorkers()
+   message("Number of workers: ", nworkers)
+   stopifnot(nworkers == cores)
+   
+   for (globals in c(FALSE, TRUE)) {
+ 
+     message(sprintf("*** multicore(..., globals = %s) without globals", globals))
+   
+     f <- multicore({
+       42L
+     }, globals = globals)
+     stopifnot(inherits(f, "MulticoreFuture") || ((cores ==1 || !supportsMulticore()) && inherits(f, "SequentialFuture")))
+   
+     print(resolved(f))
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42L)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals", globals))
+     ## A global variable
+     a <- 0
+     f <- multicore({
+       b <- 3
+       c <- 2
+       a * b * c
+     }, globals = globals)
+     print(f)
+   
+   
+     ## A multicore future is evaluated in a separated
+     ## forked process.  Changing the value of a global
+     ## variable should not affect the result of the
+     ## future.
+     a <- 7  ## Make sure globals are frozen
+     v <- value(f)
+     print(v)
+     stopifnot(v == 0)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals and blocking", globals))
+     x <- listenv()
+     for (ii in 1:4) {
+       message(sprintf(" - Creating multicore future #%d ...", ii))
+       x[[ii]] <- multicore({ ii }, globals = globals)
+     }
+     message(sprintf(" - Resolving %d multicore futures", length(x)))
+     v <- sapply(x, FUN = value)
+     stopifnot(all(v == 1:4))
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) and errors", globals))
+     f <- multicore({
+       stop("Whoops!")
+       1
+     }, globals = globals)
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "simpleError"))
+   
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+   
+     ## Error is repeated
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+ 
+     ## Custom error class
+     f <- multicore({
+       stop(structure(list(message = "boom"),
+                      class = c("MyError", "error", "condition")))
+     })
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+   
+     ## Make sure error is signaled
+     res <- tryCatch(value(f), error = identity)
+     stopifnot(inherits(res, "error"))
+   
+     ## Issue #200: Custom condition class attributes are lost 
+     stopifnot(inherits(res, "MyError"))    
+   } # for (globals ...)
+ 
+ 
+   message("*** multicore(..., workers = 1L) ...")
+ 
+   a <- 2
+   b <- 3
+   yTruth <- a * b
+ 
+   f <- multicore({ a * b }, globals = TRUE, workers = 1L)
+   rm(list = c("a", "b"))
+ 
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+   message("*** multicore(..., workers = 1L) ... DONE")
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
Number of workers: 1
*** multicore(..., globals = FALSE) without globals
[18:05:13.959] getGlobalsAndPackages() ...
[18:05:13.959] Not searching for globals
[18:05:13.960] - globals: [0] <none>
[18:05:13.960] getGlobalsAndPackages() ... DONE
[18:05:13.962] Packages needed by the future expression (n = 0): <none>
[18:05:13.962] Packages needed by future strategies (n = 0): <none>
[18:05:13.963] {
[18:05:13.963]     {
[18:05:13.963]         {
[18:05:13.963]             ...future.startTime <- base::Sys.time()
[18:05:13.963]             {
[18:05:13.963]                 {
[18:05:13.963]                   {
[18:05:13.963]                     base::local({
[18:05:13.963]                       has_future <- base::requireNamespace("future", 
[18:05:13.963]                         quietly = TRUE)
[18:05:13.963]                       if (has_future) {
[18:05:13.963]                         ns <- base::getNamespace("future")
[18:05:13.963]                         version <- ns[[".package"]][["version"]]
[18:05:13.963]                         if (is.null(version)) 
[18:05:13.963]                           version <- utils::packageVersion("future")
[18:05:13.963]                       }
[18:05:13.963]                       else {
[18:05:13.963]                         version <- NULL
[18:05:13.963]                       }
[18:05:13.963]                       if (!has_future || version < "1.8.0") {
[18:05:13.963]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:13.963]                           "", base::R.version$version.string), 
[18:05:13.963]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:13.963]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:13.963]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:13.963]                             "release", "version")], collapse = " "), 
[18:05:13.963]                           hostname = base::Sys.info()[["nodename"]])
[18:05:13.963]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:13.963]                           info)
[18:05:13.963]                         info <- base::paste(info, collapse = "; ")
[18:05:13.963]                         if (!has_future) {
[18:05:13.963]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:13.963]                             info)
[18:05:13.963]                         }
[18:05:13.963]                         else {
[18:05:13.963]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:13.963]                             info, version)
[18:05:13.963]                         }
[18:05:13.963]                         base::stop(msg)
[18:05:13.963]                       }
[18:05:13.963]                     })
[18:05:13.963]                   }
[18:05:13.963]                   ...future.strategy.old <- future::plan("list")
[18:05:13.963]                   options(future.plan = NULL)
[18:05:13.963]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:13.963]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:13.963]                 }
[18:05:13.963]                 ...future.workdir <- getwd()
[18:05:13.963]             }
[18:05:13.963]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:13.963]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:13.963]         }
[18:05:13.963]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:13.963]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:13.963]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:13.963]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:13.963]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:13.963]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:13.963]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:13.963]             base::names(...future.oldOptions))
[18:05:13.963]     }
[18:05:13.963]     if (FALSE) {
[18:05:13.963]     }
[18:05:13.963]     else {
[18:05:13.963]         if (TRUE) {
[18:05:13.963]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:13.963]                 open = "w")
[18:05:13.963]         }
[18:05:13.963]         else {
[18:05:13.963]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:13.963]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:13.963]         }
[18:05:13.963]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:13.963]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:13.963]             base::sink(type = "output", split = FALSE)
[18:05:13.963]             base::close(...future.stdout)
[18:05:13.963]         }, add = TRUE)
[18:05:13.963]     }
[18:05:13.963]     ...future.frame <- base::sys.nframe()
[18:05:13.963]     ...future.conditions <- base::list()
[18:05:13.963]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:13.963]     if (FALSE) {
[18:05:13.963]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:13.963]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:13.963]     }
[18:05:13.963]     ...future.result <- base::tryCatch({
[18:05:13.963]         base::withCallingHandlers({
[18:05:13.963]             ...future.value <- base::withVisible(base::local({
[18:05:13.963]                 42L
[18:05:13.963]             }))
[18:05:13.963]             future::FutureResult(value = ...future.value$value, 
[18:05:13.963]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:13.963]                   ...future.rng), globalenv = if (FALSE) 
[18:05:13.963]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:13.963]                     ...future.globalenv.names))
[18:05:13.963]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:13.963]         }, condition = base::local({
[18:05:13.963]             c <- base::c
[18:05:13.963]             inherits <- base::inherits
[18:05:13.963]             invokeRestart <- base::invokeRestart
[18:05:13.963]             length <- base::length
[18:05:13.963]             list <- base::list
[18:05:13.963]             seq.int <- base::seq.int
[18:05:13.963]             signalCondition <- base::signalCondition
[18:05:13.963]             sys.calls <- base::sys.calls
[18:05:13.963]             `[[` <- base::`[[`
[18:05:13.963]             `+` <- base::`+`
[18:05:13.963]             `<<-` <- base::`<<-`
[18:05:13.963]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:13.963]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:13.963]                   3L)]
[18:05:13.963]             }
[18:05:13.963]             function(cond) {
[18:05:13.963]                 is_error <- inherits(cond, "error")
[18:05:13.963]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:13.963]                   NULL)
[18:05:13.963]                 if (is_error) {
[18:05:13.963]                   sessionInformation <- function() {
[18:05:13.963]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:13.963]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:13.963]                       search = base::search(), system = base::Sys.info())
[18:05:13.963]                   }
[18:05:13.963]                   ...future.conditions[[length(...future.conditions) + 
[18:05:13.963]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:13.963]                     cond$call), session = sessionInformation(), 
[18:05:13.963]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:13.963]                   signalCondition(cond)
[18:05:13.963]                 }
[18:05:13.963]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:13.963]                 "immediateCondition"))) {
[18:05:13.963]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:13.963]                   ...future.conditions[[length(...future.conditions) + 
[18:05:13.963]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:13.963]                   if (TRUE && !signal) {
[18:05:13.963]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:13.963]                     {
[18:05:13.963]                       inherits <- base::inherits
[18:05:13.963]                       invokeRestart <- base::invokeRestart
[18:05:13.963]                       is.null <- base::is.null
[18:05:13.963]                       muffled <- FALSE
[18:05:13.963]                       if (inherits(cond, "message")) {
[18:05:13.963]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:13.963]                         if (muffled) 
[18:05:13.963]                           invokeRestart("muffleMessage")
[18:05:13.963]                       }
[18:05:13.963]                       else if (inherits(cond, "warning")) {
[18:05:13.963]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:13.963]                         if (muffled) 
[18:05:13.963]                           invokeRestart("muffleWarning")
[18:05:13.963]                       }
[18:05:13.963]                       else if (inherits(cond, "condition")) {
[18:05:13.963]                         if (!is.null(pattern)) {
[18:05:13.963]                           computeRestarts <- base::computeRestarts
[18:05:13.963]                           grepl <- base::grepl
[18:05:13.963]                           restarts <- computeRestarts(cond)
[18:05:13.963]                           for (restart in restarts) {
[18:05:13.963]                             name <- restart$name
[18:05:13.963]                             if (is.null(name)) 
[18:05:13.963]                               next
[18:05:13.963]                             if (!grepl(pattern, name)) 
[18:05:13.963]                               next
[18:05:13.963]                             invokeRestart(restart)
[18:05:13.963]                             muffled <- TRUE
[18:05:13.963]                             break
[18:05:13.963]                           }
[18:05:13.963]                         }
[18:05:13.963]                       }
[18:05:13.963]                       invisible(muffled)
[18:05:13.963]                     }
[18:05:13.963]                     muffleCondition(cond, pattern = "^muffle")
[18:05:13.963]                   }
[18:05:13.963]                 }
[18:05:13.963]                 else {
[18:05:13.963]                   if (TRUE) {
[18:05:13.963]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:13.963]                     {
[18:05:13.963]                       inherits <- base::inherits
[18:05:13.963]                       invokeRestart <- base::invokeRestart
[18:05:13.963]                       is.null <- base::is.null
[18:05:13.963]                       muffled <- FALSE
[18:05:13.963]                       if (inherits(cond, "message")) {
[18:05:13.963]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:13.963]                         if (muffled) 
[18:05:13.963]                           invokeRestart("muffleMessage")
[18:05:13.963]                       }
[18:05:13.963]                       else if (inherits(cond, "warning")) {
[18:05:13.963]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:13.963]                         if (muffled) 
[18:05:13.963]                           invokeRestart("muffleWarning")
[18:05:13.963]                       }
[18:05:13.963]                       else if (inherits(cond, "condition")) {
[18:05:13.963]                         if (!is.null(pattern)) {
[18:05:13.963]                           computeRestarts <- base::computeRestarts
[18:05:13.963]                           grepl <- base::grepl
[18:05:13.963]                           restarts <- computeRestarts(cond)
[18:05:13.963]                           for (restart in restarts) {
[18:05:13.963]                             name <- restart$name
[18:05:13.963]                             if (is.null(name)) 
[18:05:13.963]                               next
[18:05:13.963]                             if (!grepl(pattern, name)) 
[18:05:13.963]                               next
[18:05:13.963]                             invokeRestart(restart)
[18:05:13.963]                             muffled <- TRUE
[18:05:13.963]                             break
[18:05:13.963]                           }
[18:05:13.963]                         }
[18:05:13.963]                       }
[18:05:13.963]                       invisible(muffled)
[18:05:13.963]                     }
[18:05:13.963]                     muffleCondition(cond, pattern = "^muffle")
[18:05:13.963]                   }
[18:05:13.963]                 }
[18:05:13.963]             }
[18:05:13.963]         }))
[18:05:13.963]     }, error = function(ex) {
[18:05:13.963]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:13.963]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:13.963]                 ...future.rng), started = ...future.startTime, 
[18:05:13.963]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:13.963]             version = "1.8"), class = "FutureResult")
[18:05:13.963]     }, finally = {
[18:05:13.963]         if (!identical(...future.workdir, getwd())) 
[18:05:13.963]             setwd(...future.workdir)
[18:05:13.963]         {
[18:05:13.963]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:13.963]                 ...future.oldOptions$nwarnings <- NULL
[18:05:13.963]             }
[18:05:13.963]             base::options(...future.oldOptions)
[18:05:13.963]             if (.Platform$OS.type == "windows") {
[18:05:13.963]                 old_names <- names(...future.oldEnvVars)
[18:05:13.963]                 envs <- base::Sys.getenv()
[18:05:13.963]                 names <- names(envs)
[18:05:13.963]                 common <- intersect(names, old_names)
[18:05:13.963]                 added <- setdiff(names, old_names)
[18:05:13.963]                 removed <- setdiff(old_names, names)
[18:05:13.963]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:13.963]                   envs[common]]
[18:05:13.963]                 NAMES <- toupper(changed)
[18:05:13.963]                 args <- list()
[18:05:13.963]                 for (kk in seq_along(NAMES)) {
[18:05:13.963]                   name <- changed[[kk]]
[18:05:13.963]                   NAME <- NAMES[[kk]]
[18:05:13.963]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.963]                     next
[18:05:13.963]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:13.963]                 }
[18:05:13.963]                 NAMES <- toupper(added)
[18:05:13.963]                 for (kk in seq_along(NAMES)) {
[18:05:13.963]                   name <- added[[kk]]
[18:05:13.963]                   NAME <- NAMES[[kk]]
[18:05:13.963]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.963]                     next
[18:05:13.963]                   args[[name]] <- ""
[18:05:13.963]                 }
[18:05:13.963]                 NAMES <- toupper(removed)
[18:05:13.963]                 for (kk in seq_along(NAMES)) {
[18:05:13.963]                   name <- removed[[kk]]
[18:05:13.963]                   NAME <- NAMES[[kk]]
[18:05:13.963]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.963]                     next
[18:05:13.963]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:13.963]                 }
[18:05:13.963]                 if (length(args) > 0) 
[18:05:13.963]                   base::do.call(base::Sys.setenv, args = args)
[18:05:13.963]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:13.963]             }
[18:05:13.963]             else {
[18:05:13.963]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:13.963]             }
[18:05:13.963]             {
[18:05:13.963]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:13.963]                   0L) {
[18:05:13.963]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:13.963]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:13.963]                   base::options(opts)
[18:05:13.963]                 }
[18:05:13.963]                 {
[18:05:13.963]                   {
[18:05:13.963]                     NULL
[18:05:13.963]                     RNGkind("Mersenne-Twister")
[18:05:13.963]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:13.963]                       inherits = FALSE)
[18:05:13.963]                   }
[18:05:13.963]                   options(future.plan = NULL)
[18:05:13.963]                   if (is.na(NA_character_)) 
[18:05:13.963]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:13.963]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:13.963]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:13.963]                     .init = FALSE)
[18:05:13.963]                 }
[18:05:13.963]             }
[18:05:13.963]         }
[18:05:13.963]     })
[18:05:13.963]     if (TRUE) {
[18:05:13.963]         base::sink(type = "output", split = FALSE)
[18:05:13.963]         if (TRUE) {
[18:05:13.963]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:13.963]         }
[18:05:13.963]         else {
[18:05:13.963]             ...future.result["stdout"] <- base::list(NULL)
[18:05:13.963]         }
[18:05:13.963]         base::close(...future.stdout)
[18:05:13.963]         ...future.stdout <- NULL
[18:05:13.963]     }
[18:05:13.963]     ...future.result$conditions <- ...future.conditions
[18:05:13.963]     ...future.result$finished <- base::Sys.time()
[18:05:13.963]     ...future.result
[18:05:13.963] }
[18:05:13.967] plan(): Setting new future strategy stack:
[18:05:13.967] List of future strategies:
[18:05:13.967] 1. sequential:
[18:05:13.967]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:13.967]    - tweaked: FALSE
[18:05:13.967]    - call: NULL
[18:05:13.968] plan(): nbrOfWorkers() = 1
[18:05:13.970] plan(): Setting new future strategy stack:
[18:05:13.970] List of future strategies:
[18:05:13.970] 1. multicore:
[18:05:13.970]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:13.970]    - tweaked: FALSE
[18:05:13.970]    - call: plan(multicore)
[18:05:13.977] plan(): nbrOfWorkers() = 1
[18:05:13.977] SequentialFuture started (and completed)
[18:05:13.978] resolved() for ‘SequentialFuture’ ...
[18:05:13.979] - state: ‘finished’
[18:05:13.979] - run: TRUE
[18:05:13.979] - result: ‘FutureResult’
[18:05:13.979] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = FALSE) with globals
[18:05:13.986] getGlobalsAndPackages() ...
[18:05:13.986] Not searching for globals
[18:05:13.987] - globals: [0] <none>
[18:05:13.987] getGlobalsAndPackages() ... DONE
[18:05:13.987] Packages needed by the future expression (n = 0): <none>
[18:05:13.988] Packages needed by future strategies (n = 0): <none>
[18:05:13.989] {
[18:05:13.989]     {
[18:05:13.989]         {
[18:05:13.989]             ...future.startTime <- base::Sys.time()
[18:05:13.989]             {
[18:05:13.989]                 {
[18:05:13.989]                   {
[18:05:13.989]                     base::local({
[18:05:13.989]                       has_future <- base::requireNamespace("future", 
[18:05:13.989]                         quietly = TRUE)
[18:05:13.989]                       if (has_future) {
[18:05:13.989]                         ns <- base::getNamespace("future")
[18:05:13.989]                         version <- ns[[".package"]][["version"]]
[18:05:13.989]                         if (is.null(version)) 
[18:05:13.989]                           version <- utils::packageVersion("future")
[18:05:13.989]                       }
[18:05:13.989]                       else {
[18:05:13.989]                         version <- NULL
[18:05:13.989]                       }
[18:05:13.989]                       if (!has_future || version < "1.8.0") {
[18:05:13.989]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:13.989]                           "", base::R.version$version.string), 
[18:05:13.989]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:13.989]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:13.989]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:13.989]                             "release", "version")], collapse = " "), 
[18:05:13.989]                           hostname = base::Sys.info()[["nodename"]])
[18:05:13.989]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:13.989]                           info)
[18:05:13.989]                         info <- base::paste(info, collapse = "; ")
[18:05:13.989]                         if (!has_future) {
[18:05:13.989]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:13.989]                             info)
[18:05:13.989]                         }
[18:05:13.989]                         else {
[18:05:13.989]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:13.989]                             info, version)
[18:05:13.989]                         }
[18:05:13.989]                         base::stop(msg)
[18:05:13.989]                       }
[18:05:13.989]                     })
[18:05:13.989]                   }
[18:05:13.989]                   ...future.strategy.old <- future::plan("list")
[18:05:13.989]                   options(future.plan = NULL)
[18:05:13.989]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:13.989]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:13.989]                 }
[18:05:13.989]                 ...future.workdir <- getwd()
[18:05:13.989]             }
[18:05:13.989]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:13.989]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:13.989]         }
[18:05:13.989]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:13.989]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:13.989]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:13.989]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:13.989]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:13.989]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:13.989]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:13.989]             base::names(...future.oldOptions))
[18:05:13.989]     }
[18:05:13.989]     if (FALSE) {
[18:05:13.989]     }
[18:05:13.989]     else {
[18:05:13.989]         if (TRUE) {
[18:05:13.989]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:13.989]                 open = "w")
[18:05:13.989]         }
[18:05:13.989]         else {
[18:05:13.989]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:13.989]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:13.989]         }
[18:05:13.989]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:13.989]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:13.989]             base::sink(type = "output", split = FALSE)
[18:05:13.989]             base::close(...future.stdout)
[18:05:13.989]         }, add = TRUE)
[18:05:13.989]     }
[18:05:13.989]     ...future.frame <- base::sys.nframe()
[18:05:13.989]     ...future.conditions <- base::list()
[18:05:13.989]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:13.989]     if (FALSE) {
[18:05:13.989]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:13.989]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:13.989]     }
[18:05:13.989]     ...future.result <- base::tryCatch({
[18:05:13.989]         base::withCallingHandlers({
[18:05:13.989]             ...future.value <- base::withVisible(base::local({
[18:05:13.989]                 b <- 3
[18:05:13.989]                 c <- 2
[18:05:13.989]                 a * b * c
[18:05:13.989]             }))
[18:05:13.989]             future::FutureResult(value = ...future.value$value, 
[18:05:13.989]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:13.989]                   ...future.rng), globalenv = if (FALSE) 
[18:05:13.989]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:13.989]                     ...future.globalenv.names))
[18:05:13.989]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:13.989]         }, condition = base::local({
[18:05:13.989]             c <- base::c
[18:05:13.989]             inherits <- base::inherits
[18:05:13.989]             invokeRestart <- base::invokeRestart
[18:05:13.989]             length <- base::length
[18:05:13.989]             list <- base::list
[18:05:13.989]             seq.int <- base::seq.int
[18:05:13.989]             signalCondition <- base::signalCondition
[18:05:13.989]             sys.calls <- base::sys.calls
[18:05:13.989]             `[[` <- base::`[[`
[18:05:13.989]             `+` <- base::`+`
[18:05:13.989]             `<<-` <- base::`<<-`
[18:05:13.989]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:13.989]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:13.989]                   3L)]
[18:05:13.989]             }
[18:05:13.989]             function(cond) {
[18:05:13.989]                 is_error <- inherits(cond, "error")
[18:05:13.989]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:13.989]                   NULL)
[18:05:13.989]                 if (is_error) {
[18:05:13.989]                   sessionInformation <- function() {
[18:05:13.989]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:13.989]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:13.989]                       search = base::search(), system = base::Sys.info())
[18:05:13.989]                   }
[18:05:13.989]                   ...future.conditions[[length(...future.conditions) + 
[18:05:13.989]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:13.989]                     cond$call), session = sessionInformation(), 
[18:05:13.989]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:13.989]                   signalCondition(cond)
[18:05:13.989]                 }
[18:05:13.989]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:13.989]                 "immediateCondition"))) {
[18:05:13.989]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:13.989]                   ...future.conditions[[length(...future.conditions) + 
[18:05:13.989]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:13.989]                   if (TRUE && !signal) {
[18:05:13.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:13.989]                     {
[18:05:13.989]                       inherits <- base::inherits
[18:05:13.989]                       invokeRestart <- base::invokeRestart
[18:05:13.989]                       is.null <- base::is.null
[18:05:13.989]                       muffled <- FALSE
[18:05:13.989]                       if (inherits(cond, "message")) {
[18:05:13.989]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:13.989]                         if (muffled) 
[18:05:13.989]                           invokeRestart("muffleMessage")
[18:05:13.989]                       }
[18:05:13.989]                       else if (inherits(cond, "warning")) {
[18:05:13.989]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:13.989]                         if (muffled) 
[18:05:13.989]                           invokeRestart("muffleWarning")
[18:05:13.989]                       }
[18:05:13.989]                       else if (inherits(cond, "condition")) {
[18:05:13.989]                         if (!is.null(pattern)) {
[18:05:13.989]                           computeRestarts <- base::computeRestarts
[18:05:13.989]                           grepl <- base::grepl
[18:05:13.989]                           restarts <- computeRestarts(cond)
[18:05:13.989]                           for (restart in restarts) {
[18:05:13.989]                             name <- restart$name
[18:05:13.989]                             if (is.null(name)) 
[18:05:13.989]                               next
[18:05:13.989]                             if (!grepl(pattern, name)) 
[18:05:13.989]                               next
[18:05:13.989]                             invokeRestart(restart)
[18:05:13.989]                             muffled <- TRUE
[18:05:13.989]                             break
[18:05:13.989]                           }
[18:05:13.989]                         }
[18:05:13.989]                       }
[18:05:13.989]                       invisible(muffled)
[18:05:13.989]                     }
[18:05:13.989]                     muffleCondition(cond, pattern = "^muffle")
[18:05:13.989]                   }
[18:05:13.989]                 }
[18:05:13.989]                 else {
[18:05:13.989]                   if (TRUE) {
[18:05:13.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:13.989]                     {
[18:05:13.989]                       inherits <- base::inherits
[18:05:13.989]                       invokeRestart <- base::invokeRestart
[18:05:13.989]                       is.null <- base::is.null
[18:05:13.989]                       muffled <- FALSE
[18:05:13.989]                       if (inherits(cond, "message")) {
[18:05:13.989]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:13.989]                         if (muffled) 
[18:05:13.989]                           invokeRestart("muffleMessage")
[18:05:13.989]                       }
[18:05:13.989]                       else if (inherits(cond, "warning")) {
[18:05:13.989]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:13.989]                         if (muffled) 
[18:05:13.989]                           invokeRestart("muffleWarning")
[18:05:13.989]                       }
[18:05:13.989]                       else if (inherits(cond, "condition")) {
[18:05:13.989]                         if (!is.null(pattern)) {
[18:05:13.989]                           computeRestarts <- base::computeRestarts
[18:05:13.989]                           grepl <- base::grepl
[18:05:13.989]                           restarts <- computeRestarts(cond)
[18:05:13.989]                           for (restart in restarts) {
[18:05:13.989]                             name <- restart$name
[18:05:13.989]                             if (is.null(name)) 
[18:05:13.989]                               next
[18:05:13.989]                             if (!grepl(pattern, name)) 
[18:05:13.989]                               next
[18:05:13.989]                             invokeRestart(restart)
[18:05:13.989]                             muffled <- TRUE
[18:05:13.989]                             break
[18:05:13.989]                           }
[18:05:13.989]                         }
[18:05:13.989]                       }
[18:05:13.989]                       invisible(muffled)
[18:05:13.989]                     }
[18:05:13.989]                     muffleCondition(cond, pattern = "^muffle")
[18:05:13.989]                   }
[18:05:13.989]                 }
[18:05:13.989]             }
[18:05:13.989]         }))
[18:05:13.989]     }, error = function(ex) {
[18:05:13.989]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:13.989]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:13.989]                 ...future.rng), started = ...future.startTime, 
[18:05:13.989]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:13.989]             version = "1.8"), class = "FutureResult")
[18:05:13.989]     }, finally = {
[18:05:13.989]         if (!identical(...future.workdir, getwd())) 
[18:05:13.989]             setwd(...future.workdir)
[18:05:13.989]         {
[18:05:13.989]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:13.989]                 ...future.oldOptions$nwarnings <- NULL
[18:05:13.989]             }
[18:05:13.989]             base::options(...future.oldOptions)
[18:05:13.989]             if (.Platform$OS.type == "windows") {
[18:05:13.989]                 old_names <- names(...future.oldEnvVars)
[18:05:13.989]                 envs <- base::Sys.getenv()
[18:05:13.989]                 names <- names(envs)
[18:05:13.989]                 common <- intersect(names, old_names)
[18:05:13.989]                 added <- setdiff(names, old_names)
[18:05:13.989]                 removed <- setdiff(old_names, names)
[18:05:13.989]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:13.989]                   envs[common]]
[18:05:13.989]                 NAMES <- toupper(changed)
[18:05:13.989]                 args <- list()
[18:05:13.989]                 for (kk in seq_along(NAMES)) {
[18:05:13.989]                   name <- changed[[kk]]
[18:05:13.989]                   NAME <- NAMES[[kk]]
[18:05:13.989]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.989]                     next
[18:05:13.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:13.989]                 }
[18:05:13.989]                 NAMES <- toupper(added)
[18:05:13.989]                 for (kk in seq_along(NAMES)) {
[18:05:13.989]                   name <- added[[kk]]
[18:05:13.989]                   NAME <- NAMES[[kk]]
[18:05:13.989]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.989]                     next
[18:05:13.989]                   args[[name]] <- ""
[18:05:13.989]                 }
[18:05:13.989]                 NAMES <- toupper(removed)
[18:05:13.989]                 for (kk in seq_along(NAMES)) {
[18:05:13.989]                   name <- removed[[kk]]
[18:05:13.989]                   NAME <- NAMES[[kk]]
[18:05:13.989]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:13.989]                     next
[18:05:13.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:13.989]                 }
[18:05:13.989]                 if (length(args) > 0) 
[18:05:13.989]                   base::do.call(base::Sys.setenv, args = args)
[18:05:13.989]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:13.989]             }
[18:05:13.989]             else {
[18:05:13.989]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:13.989]             }
[18:05:13.989]             {
[18:05:13.989]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:13.989]                   0L) {
[18:05:13.989]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:13.989]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:13.989]                   base::options(opts)
[18:05:13.989]                 }
[18:05:13.989]                 {
[18:05:13.989]                   {
[18:05:13.989]                     NULL
[18:05:13.989]                     RNGkind("Mersenne-Twister")
[18:05:13.989]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:13.989]                       inherits = FALSE)
[18:05:13.989]                   }
[18:05:13.989]                   options(future.plan = NULL)
[18:05:13.989]                   if (is.na(NA_character_)) 
[18:05:13.989]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:13.989]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:13.989]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:13.989]                     .init = FALSE)
[18:05:13.989]                 }
[18:05:13.989]             }
[18:05:13.989]         }
[18:05:13.989]     })
[18:05:13.989]     if (TRUE) {
[18:05:13.989]         base::sink(type = "output", split = FALSE)
[18:05:13.989]         if (TRUE) {
[18:05:13.989]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:13.989]         }
[18:05:13.989]         else {
[18:05:13.989]             ...future.result["stdout"] <- base::list(NULL)
[18:05:13.989]         }
[18:05:13.989]         base::close(...future.stdout)
[18:05:13.989]         ...future.stdout <- NULL
[18:05:13.989]     }
[18:05:13.989]     ...future.result$conditions <- ...future.conditions
[18:05:13.989]     ...future.result$finished <- base::Sys.time()
[18:05:13.989]     ...future.result
[18:05:13.989] }
[18:05:13.992] plan(): Setting new future strategy stack:
[18:05:13.992] List of future strategies:
[18:05:13.992] 1. sequential:
[18:05:13.992]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:13.992]    - tweaked: FALSE
[18:05:13.992]    - call: NULL
[18:05:13.993] plan(): nbrOfWorkers() = 1
[18:05:13.994] plan(): Setting new future strategy stack:
[18:05:13.995] List of future strategies:
[18:05:13.995] 1. multicore:
[18:05:13.995]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:13.995]    - tweaked: FALSE
[18:05:13.995]    - call: plan(multicore)
[18:05:14.001] plan(): nbrOfWorkers() = 1
[18:05:14.001] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[18:05:14.010] getGlobalsAndPackages() ...
[18:05:14.010] Not searching for globals
[18:05:14.011] - globals: [0] <none>
[18:05:14.011] getGlobalsAndPackages() ... DONE
[18:05:14.011] Packages needed by the future expression (n = 0): <none>
[18:05:14.012] Packages needed by future strategies (n = 0): <none>
[18:05:14.012] {
[18:05:14.012]     {
[18:05:14.012]         {
[18:05:14.012]             ...future.startTime <- base::Sys.time()
[18:05:14.012]             {
[18:05:14.012]                 {
[18:05:14.012]                   {
[18:05:14.012]                     base::local({
[18:05:14.012]                       has_future <- base::requireNamespace("future", 
[18:05:14.012]                         quietly = TRUE)
[18:05:14.012]                       if (has_future) {
[18:05:14.012]                         ns <- base::getNamespace("future")
[18:05:14.012]                         version <- ns[[".package"]][["version"]]
[18:05:14.012]                         if (is.null(version)) 
[18:05:14.012]                           version <- utils::packageVersion("future")
[18:05:14.012]                       }
[18:05:14.012]                       else {
[18:05:14.012]                         version <- NULL
[18:05:14.012]                       }
[18:05:14.012]                       if (!has_future || version < "1.8.0") {
[18:05:14.012]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.012]                           "", base::R.version$version.string), 
[18:05:14.012]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.012]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.012]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.012]                             "release", "version")], collapse = " "), 
[18:05:14.012]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.012]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.012]                           info)
[18:05:14.012]                         info <- base::paste(info, collapse = "; ")
[18:05:14.012]                         if (!has_future) {
[18:05:14.012]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.012]                             info)
[18:05:14.012]                         }
[18:05:14.012]                         else {
[18:05:14.012]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.012]                             info, version)
[18:05:14.012]                         }
[18:05:14.012]                         base::stop(msg)
[18:05:14.012]                       }
[18:05:14.012]                     })
[18:05:14.012]                   }
[18:05:14.012]                   ...future.strategy.old <- future::plan("list")
[18:05:14.012]                   options(future.plan = NULL)
[18:05:14.012]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.012]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.012]                 }
[18:05:14.012]                 ...future.workdir <- getwd()
[18:05:14.012]             }
[18:05:14.012]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.012]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.012]         }
[18:05:14.012]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.012]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.012]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.012]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.012]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.012]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.012]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.012]             base::names(...future.oldOptions))
[18:05:14.012]     }
[18:05:14.012]     if (FALSE) {
[18:05:14.012]     }
[18:05:14.012]     else {
[18:05:14.012]         if (TRUE) {
[18:05:14.012]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.012]                 open = "w")
[18:05:14.012]         }
[18:05:14.012]         else {
[18:05:14.012]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.012]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.012]         }
[18:05:14.012]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.012]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.012]             base::sink(type = "output", split = FALSE)
[18:05:14.012]             base::close(...future.stdout)
[18:05:14.012]         }, add = TRUE)
[18:05:14.012]     }
[18:05:14.012]     ...future.frame <- base::sys.nframe()
[18:05:14.012]     ...future.conditions <- base::list()
[18:05:14.012]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.012]     if (FALSE) {
[18:05:14.012]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.012]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.012]     }
[18:05:14.012]     ...future.result <- base::tryCatch({
[18:05:14.012]         base::withCallingHandlers({
[18:05:14.012]             ...future.value <- base::withVisible(base::local({
[18:05:14.012]                 ii
[18:05:14.012]             }))
[18:05:14.012]             future::FutureResult(value = ...future.value$value, 
[18:05:14.012]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.012]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.012]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.012]                     ...future.globalenv.names))
[18:05:14.012]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.012]         }, condition = base::local({
[18:05:14.012]             c <- base::c
[18:05:14.012]             inherits <- base::inherits
[18:05:14.012]             invokeRestart <- base::invokeRestart
[18:05:14.012]             length <- base::length
[18:05:14.012]             list <- base::list
[18:05:14.012]             seq.int <- base::seq.int
[18:05:14.012]             signalCondition <- base::signalCondition
[18:05:14.012]             sys.calls <- base::sys.calls
[18:05:14.012]             `[[` <- base::`[[`
[18:05:14.012]             `+` <- base::`+`
[18:05:14.012]             `<<-` <- base::`<<-`
[18:05:14.012]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.012]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.012]                   3L)]
[18:05:14.012]             }
[18:05:14.012]             function(cond) {
[18:05:14.012]                 is_error <- inherits(cond, "error")
[18:05:14.012]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.012]                   NULL)
[18:05:14.012]                 if (is_error) {
[18:05:14.012]                   sessionInformation <- function() {
[18:05:14.012]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.012]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.012]                       search = base::search(), system = base::Sys.info())
[18:05:14.012]                   }
[18:05:14.012]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.012]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.012]                     cond$call), session = sessionInformation(), 
[18:05:14.012]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.012]                   signalCondition(cond)
[18:05:14.012]                 }
[18:05:14.012]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.012]                 "immediateCondition"))) {
[18:05:14.012]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.012]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.012]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.012]                   if (TRUE && !signal) {
[18:05:14.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.012]                     {
[18:05:14.012]                       inherits <- base::inherits
[18:05:14.012]                       invokeRestart <- base::invokeRestart
[18:05:14.012]                       is.null <- base::is.null
[18:05:14.012]                       muffled <- FALSE
[18:05:14.012]                       if (inherits(cond, "message")) {
[18:05:14.012]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.012]                         if (muffled) 
[18:05:14.012]                           invokeRestart("muffleMessage")
[18:05:14.012]                       }
[18:05:14.012]                       else if (inherits(cond, "warning")) {
[18:05:14.012]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.012]                         if (muffled) 
[18:05:14.012]                           invokeRestart("muffleWarning")
[18:05:14.012]                       }
[18:05:14.012]                       else if (inherits(cond, "condition")) {
[18:05:14.012]                         if (!is.null(pattern)) {
[18:05:14.012]                           computeRestarts <- base::computeRestarts
[18:05:14.012]                           grepl <- base::grepl
[18:05:14.012]                           restarts <- computeRestarts(cond)
[18:05:14.012]                           for (restart in restarts) {
[18:05:14.012]                             name <- restart$name
[18:05:14.012]                             if (is.null(name)) 
[18:05:14.012]                               next
[18:05:14.012]                             if (!grepl(pattern, name)) 
[18:05:14.012]                               next
[18:05:14.012]                             invokeRestart(restart)
[18:05:14.012]                             muffled <- TRUE
[18:05:14.012]                             break
[18:05:14.012]                           }
[18:05:14.012]                         }
[18:05:14.012]                       }
[18:05:14.012]                       invisible(muffled)
[18:05:14.012]                     }
[18:05:14.012]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.012]                   }
[18:05:14.012]                 }
[18:05:14.012]                 else {
[18:05:14.012]                   if (TRUE) {
[18:05:14.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.012]                     {
[18:05:14.012]                       inherits <- base::inherits
[18:05:14.012]                       invokeRestart <- base::invokeRestart
[18:05:14.012]                       is.null <- base::is.null
[18:05:14.012]                       muffled <- FALSE
[18:05:14.012]                       if (inherits(cond, "message")) {
[18:05:14.012]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.012]                         if (muffled) 
[18:05:14.012]                           invokeRestart("muffleMessage")
[18:05:14.012]                       }
[18:05:14.012]                       else if (inherits(cond, "warning")) {
[18:05:14.012]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.012]                         if (muffled) 
[18:05:14.012]                           invokeRestart("muffleWarning")
[18:05:14.012]                       }
[18:05:14.012]                       else if (inherits(cond, "condition")) {
[18:05:14.012]                         if (!is.null(pattern)) {
[18:05:14.012]                           computeRestarts <- base::computeRestarts
[18:05:14.012]                           grepl <- base::grepl
[18:05:14.012]                           restarts <- computeRestarts(cond)
[18:05:14.012]                           for (restart in restarts) {
[18:05:14.012]                             name <- restart$name
[18:05:14.012]                             if (is.null(name)) 
[18:05:14.012]                               next
[18:05:14.012]                             if (!grepl(pattern, name)) 
[18:05:14.012]                               next
[18:05:14.012]                             invokeRestart(restart)
[18:05:14.012]                             muffled <- TRUE
[18:05:14.012]                             break
[18:05:14.012]                           }
[18:05:14.012]                         }
[18:05:14.012]                       }
[18:05:14.012]                       invisible(muffled)
[18:05:14.012]                     }
[18:05:14.012]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.012]                   }
[18:05:14.012]                 }
[18:05:14.012]             }
[18:05:14.012]         }))
[18:05:14.012]     }, error = function(ex) {
[18:05:14.012]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.012]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.012]                 ...future.rng), started = ...future.startTime, 
[18:05:14.012]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.012]             version = "1.8"), class = "FutureResult")
[18:05:14.012]     }, finally = {
[18:05:14.012]         if (!identical(...future.workdir, getwd())) 
[18:05:14.012]             setwd(...future.workdir)
[18:05:14.012]         {
[18:05:14.012]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.012]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.012]             }
[18:05:14.012]             base::options(...future.oldOptions)
[18:05:14.012]             if (.Platform$OS.type == "windows") {
[18:05:14.012]                 old_names <- names(...future.oldEnvVars)
[18:05:14.012]                 envs <- base::Sys.getenv()
[18:05:14.012]                 names <- names(envs)
[18:05:14.012]                 common <- intersect(names, old_names)
[18:05:14.012]                 added <- setdiff(names, old_names)
[18:05:14.012]                 removed <- setdiff(old_names, names)
[18:05:14.012]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.012]                   envs[common]]
[18:05:14.012]                 NAMES <- toupper(changed)
[18:05:14.012]                 args <- list()
[18:05:14.012]                 for (kk in seq_along(NAMES)) {
[18:05:14.012]                   name <- changed[[kk]]
[18:05:14.012]                   NAME <- NAMES[[kk]]
[18:05:14.012]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.012]                     next
[18:05:14.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.012]                 }
[18:05:14.012]                 NAMES <- toupper(added)
[18:05:14.012]                 for (kk in seq_along(NAMES)) {
[18:05:14.012]                   name <- added[[kk]]
[18:05:14.012]                   NAME <- NAMES[[kk]]
[18:05:14.012]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.012]                     next
[18:05:14.012]                   args[[name]] <- ""
[18:05:14.012]                 }
[18:05:14.012]                 NAMES <- toupper(removed)
[18:05:14.012]                 for (kk in seq_along(NAMES)) {
[18:05:14.012]                   name <- removed[[kk]]
[18:05:14.012]                   NAME <- NAMES[[kk]]
[18:05:14.012]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.012]                     next
[18:05:14.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.012]                 }
[18:05:14.012]                 if (length(args) > 0) 
[18:05:14.012]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.012]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.012]             }
[18:05:14.012]             else {
[18:05:14.012]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.012]             }
[18:05:14.012]             {
[18:05:14.012]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.012]                   0L) {
[18:05:14.012]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.012]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.012]                   base::options(opts)
[18:05:14.012]                 }
[18:05:14.012]                 {
[18:05:14.012]                   {
[18:05:14.012]                     NULL
[18:05:14.012]                     RNGkind("Mersenne-Twister")
[18:05:14.012]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.012]                       inherits = FALSE)
[18:05:14.012]                   }
[18:05:14.012]                   options(future.plan = NULL)
[18:05:14.012]                   if (is.na(NA_character_)) 
[18:05:14.012]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.012]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.012]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.012]                     .init = FALSE)
[18:05:14.012]                 }
[18:05:14.012]             }
[18:05:14.012]         }
[18:05:14.012]     })
[18:05:14.012]     if (TRUE) {
[18:05:14.012]         base::sink(type = "output", split = FALSE)
[18:05:14.012]         if (TRUE) {
[18:05:14.012]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.012]         }
[18:05:14.012]         else {
[18:05:14.012]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.012]         }
[18:05:14.012]         base::close(...future.stdout)
[18:05:14.012]         ...future.stdout <- NULL
[18:05:14.012]     }
[18:05:14.012]     ...future.result$conditions <- ...future.conditions
[18:05:14.012]     ...future.result$finished <- base::Sys.time()
[18:05:14.012]     ...future.result
[18:05:14.012] }
[18:05:14.016] plan(): Setting new future strategy stack:
[18:05:14.016] List of future strategies:
[18:05:14.016] 1. sequential:
[18:05:14.016]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.016]    - tweaked: FALSE
[18:05:14.016]    - call: NULL
[18:05:14.017] plan(): nbrOfWorkers() = 1
[18:05:14.018] plan(): Setting new future strategy stack:
[18:05:14.019] List of future strategies:
[18:05:14.019] 1. multicore:
[18:05:14.019]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.019]    - tweaked: FALSE
[18:05:14.019]    - call: plan(multicore)
[18:05:14.025] plan(): nbrOfWorkers() = 1
[18:05:14.025] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[18:05:14.031] getGlobalsAndPackages() ...
[18:05:14.032] Not searching for globals
[18:05:14.032] - globals: [0] <none>
[18:05:14.032] getGlobalsAndPackages() ... DONE
[18:05:14.033] Packages needed by the future expression (n = 0): <none>
[18:05:14.033] Packages needed by future strategies (n = 0): <none>
[18:05:14.034] {
[18:05:14.034]     {
[18:05:14.034]         {
[18:05:14.034]             ...future.startTime <- base::Sys.time()
[18:05:14.034]             {
[18:05:14.034]                 {
[18:05:14.034]                   {
[18:05:14.034]                     base::local({
[18:05:14.034]                       has_future <- base::requireNamespace("future", 
[18:05:14.034]                         quietly = TRUE)
[18:05:14.034]                       if (has_future) {
[18:05:14.034]                         ns <- base::getNamespace("future")
[18:05:14.034]                         version <- ns[[".package"]][["version"]]
[18:05:14.034]                         if (is.null(version)) 
[18:05:14.034]                           version <- utils::packageVersion("future")
[18:05:14.034]                       }
[18:05:14.034]                       else {
[18:05:14.034]                         version <- NULL
[18:05:14.034]                       }
[18:05:14.034]                       if (!has_future || version < "1.8.0") {
[18:05:14.034]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.034]                           "", base::R.version$version.string), 
[18:05:14.034]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.034]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.034]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.034]                             "release", "version")], collapse = " "), 
[18:05:14.034]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.034]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.034]                           info)
[18:05:14.034]                         info <- base::paste(info, collapse = "; ")
[18:05:14.034]                         if (!has_future) {
[18:05:14.034]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.034]                             info)
[18:05:14.034]                         }
[18:05:14.034]                         else {
[18:05:14.034]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.034]                             info, version)
[18:05:14.034]                         }
[18:05:14.034]                         base::stop(msg)
[18:05:14.034]                       }
[18:05:14.034]                     })
[18:05:14.034]                   }
[18:05:14.034]                   ...future.strategy.old <- future::plan("list")
[18:05:14.034]                   options(future.plan = NULL)
[18:05:14.034]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.034]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.034]                 }
[18:05:14.034]                 ...future.workdir <- getwd()
[18:05:14.034]             }
[18:05:14.034]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.034]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.034]         }
[18:05:14.034]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.034]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.034]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.034]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.034]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.034]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.034]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.034]             base::names(...future.oldOptions))
[18:05:14.034]     }
[18:05:14.034]     if (FALSE) {
[18:05:14.034]     }
[18:05:14.034]     else {
[18:05:14.034]         if (TRUE) {
[18:05:14.034]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.034]                 open = "w")
[18:05:14.034]         }
[18:05:14.034]         else {
[18:05:14.034]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.034]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.034]         }
[18:05:14.034]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.034]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.034]             base::sink(type = "output", split = FALSE)
[18:05:14.034]             base::close(...future.stdout)
[18:05:14.034]         }, add = TRUE)
[18:05:14.034]     }
[18:05:14.034]     ...future.frame <- base::sys.nframe()
[18:05:14.034]     ...future.conditions <- base::list()
[18:05:14.034]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.034]     if (FALSE) {
[18:05:14.034]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.034]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.034]     }
[18:05:14.034]     ...future.result <- base::tryCatch({
[18:05:14.034]         base::withCallingHandlers({
[18:05:14.034]             ...future.value <- base::withVisible(base::local({
[18:05:14.034]                 ii
[18:05:14.034]             }))
[18:05:14.034]             future::FutureResult(value = ...future.value$value, 
[18:05:14.034]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.034]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.034]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.034]                     ...future.globalenv.names))
[18:05:14.034]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.034]         }, condition = base::local({
[18:05:14.034]             c <- base::c
[18:05:14.034]             inherits <- base::inherits
[18:05:14.034]             invokeRestart <- base::invokeRestart
[18:05:14.034]             length <- base::length
[18:05:14.034]             list <- base::list
[18:05:14.034]             seq.int <- base::seq.int
[18:05:14.034]             signalCondition <- base::signalCondition
[18:05:14.034]             sys.calls <- base::sys.calls
[18:05:14.034]             `[[` <- base::`[[`
[18:05:14.034]             `+` <- base::`+`
[18:05:14.034]             `<<-` <- base::`<<-`
[18:05:14.034]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.034]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.034]                   3L)]
[18:05:14.034]             }
[18:05:14.034]             function(cond) {
[18:05:14.034]                 is_error <- inherits(cond, "error")
[18:05:14.034]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.034]                   NULL)
[18:05:14.034]                 if (is_error) {
[18:05:14.034]                   sessionInformation <- function() {
[18:05:14.034]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.034]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.034]                       search = base::search(), system = base::Sys.info())
[18:05:14.034]                   }
[18:05:14.034]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.034]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.034]                     cond$call), session = sessionInformation(), 
[18:05:14.034]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.034]                   signalCondition(cond)
[18:05:14.034]                 }
[18:05:14.034]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.034]                 "immediateCondition"))) {
[18:05:14.034]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.034]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.034]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.034]                   if (TRUE && !signal) {
[18:05:14.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.034]                     {
[18:05:14.034]                       inherits <- base::inherits
[18:05:14.034]                       invokeRestart <- base::invokeRestart
[18:05:14.034]                       is.null <- base::is.null
[18:05:14.034]                       muffled <- FALSE
[18:05:14.034]                       if (inherits(cond, "message")) {
[18:05:14.034]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.034]                         if (muffled) 
[18:05:14.034]                           invokeRestart("muffleMessage")
[18:05:14.034]                       }
[18:05:14.034]                       else if (inherits(cond, "warning")) {
[18:05:14.034]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.034]                         if (muffled) 
[18:05:14.034]                           invokeRestart("muffleWarning")
[18:05:14.034]                       }
[18:05:14.034]                       else if (inherits(cond, "condition")) {
[18:05:14.034]                         if (!is.null(pattern)) {
[18:05:14.034]                           computeRestarts <- base::computeRestarts
[18:05:14.034]                           grepl <- base::grepl
[18:05:14.034]                           restarts <- computeRestarts(cond)
[18:05:14.034]                           for (restart in restarts) {
[18:05:14.034]                             name <- restart$name
[18:05:14.034]                             if (is.null(name)) 
[18:05:14.034]                               next
[18:05:14.034]                             if (!grepl(pattern, name)) 
[18:05:14.034]                               next
[18:05:14.034]                             invokeRestart(restart)
[18:05:14.034]                             muffled <- TRUE
[18:05:14.034]                             break
[18:05:14.034]                           }
[18:05:14.034]                         }
[18:05:14.034]                       }
[18:05:14.034]                       invisible(muffled)
[18:05:14.034]                     }
[18:05:14.034]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.034]                   }
[18:05:14.034]                 }
[18:05:14.034]                 else {
[18:05:14.034]                   if (TRUE) {
[18:05:14.034]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.034]                     {
[18:05:14.034]                       inherits <- base::inherits
[18:05:14.034]                       invokeRestart <- base::invokeRestart
[18:05:14.034]                       is.null <- base::is.null
[18:05:14.034]                       muffled <- FALSE
[18:05:14.034]                       if (inherits(cond, "message")) {
[18:05:14.034]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.034]                         if (muffled) 
[18:05:14.034]                           invokeRestart("muffleMessage")
[18:05:14.034]                       }
[18:05:14.034]                       else if (inherits(cond, "warning")) {
[18:05:14.034]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.034]                         if (muffled) 
[18:05:14.034]                           invokeRestart("muffleWarning")
[18:05:14.034]                       }
[18:05:14.034]                       else if (inherits(cond, "condition")) {
[18:05:14.034]                         if (!is.null(pattern)) {
[18:05:14.034]                           computeRestarts <- base::computeRestarts
[18:05:14.034]                           grepl <- base::grepl
[18:05:14.034]                           restarts <- computeRestarts(cond)
[18:05:14.034]                           for (restart in restarts) {
[18:05:14.034]                             name <- restart$name
[18:05:14.034]                             if (is.null(name)) 
[18:05:14.034]                               next
[18:05:14.034]                             if (!grepl(pattern, name)) 
[18:05:14.034]                               next
[18:05:14.034]                             invokeRestart(restart)
[18:05:14.034]                             muffled <- TRUE
[18:05:14.034]                             break
[18:05:14.034]                           }
[18:05:14.034]                         }
[18:05:14.034]                       }
[18:05:14.034]                       invisible(muffled)
[18:05:14.034]                     }
[18:05:14.034]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.034]                   }
[18:05:14.034]                 }
[18:05:14.034]             }
[18:05:14.034]         }))
[18:05:14.034]     }, error = function(ex) {
[18:05:14.034]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.034]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.034]                 ...future.rng), started = ...future.startTime, 
[18:05:14.034]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.034]             version = "1.8"), class = "FutureResult")
[18:05:14.034]     }, finally = {
[18:05:14.034]         if (!identical(...future.workdir, getwd())) 
[18:05:14.034]             setwd(...future.workdir)
[18:05:14.034]         {
[18:05:14.034]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.034]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.034]             }
[18:05:14.034]             base::options(...future.oldOptions)
[18:05:14.034]             if (.Platform$OS.type == "windows") {
[18:05:14.034]                 old_names <- names(...future.oldEnvVars)
[18:05:14.034]                 envs <- base::Sys.getenv()
[18:05:14.034]                 names <- names(envs)
[18:05:14.034]                 common <- intersect(names, old_names)
[18:05:14.034]                 added <- setdiff(names, old_names)
[18:05:14.034]                 removed <- setdiff(old_names, names)
[18:05:14.034]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.034]                   envs[common]]
[18:05:14.034]                 NAMES <- toupper(changed)
[18:05:14.034]                 args <- list()
[18:05:14.034]                 for (kk in seq_along(NAMES)) {
[18:05:14.034]                   name <- changed[[kk]]
[18:05:14.034]                   NAME <- NAMES[[kk]]
[18:05:14.034]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.034]                     next
[18:05:14.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.034]                 }
[18:05:14.034]                 NAMES <- toupper(added)
[18:05:14.034]                 for (kk in seq_along(NAMES)) {
[18:05:14.034]                   name <- added[[kk]]
[18:05:14.034]                   NAME <- NAMES[[kk]]
[18:05:14.034]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.034]                     next
[18:05:14.034]                   args[[name]] <- ""
[18:05:14.034]                 }
[18:05:14.034]                 NAMES <- toupper(removed)
[18:05:14.034]                 for (kk in seq_along(NAMES)) {
[18:05:14.034]                   name <- removed[[kk]]
[18:05:14.034]                   NAME <- NAMES[[kk]]
[18:05:14.034]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.034]                     next
[18:05:14.034]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.034]                 }
[18:05:14.034]                 if (length(args) > 0) 
[18:05:14.034]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.034]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.034]             }
[18:05:14.034]             else {
[18:05:14.034]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.034]             }
[18:05:14.034]             {
[18:05:14.034]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.034]                   0L) {
[18:05:14.034]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.034]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.034]                   base::options(opts)
[18:05:14.034]                 }
[18:05:14.034]                 {
[18:05:14.034]                   {
[18:05:14.034]                     NULL
[18:05:14.034]                     RNGkind("Mersenne-Twister")
[18:05:14.034]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.034]                       inherits = FALSE)
[18:05:14.034]                   }
[18:05:14.034]                   options(future.plan = NULL)
[18:05:14.034]                   if (is.na(NA_character_)) 
[18:05:14.034]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.034]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.034]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.034]                     .init = FALSE)
[18:05:14.034]                 }
[18:05:14.034]             }
[18:05:14.034]         }
[18:05:14.034]     })
[18:05:14.034]     if (TRUE) {
[18:05:14.034]         base::sink(type = "output", split = FALSE)
[18:05:14.034]         if (TRUE) {
[18:05:14.034]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.034]         }
[18:05:14.034]         else {
[18:05:14.034]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.034]         }
[18:05:14.034]         base::close(...future.stdout)
[18:05:14.034]         ...future.stdout <- NULL
[18:05:14.034]     }
[18:05:14.034]     ...future.result$conditions <- ...future.conditions
[18:05:14.034]     ...future.result$finished <- base::Sys.time()
[18:05:14.034]     ...future.result
[18:05:14.034] }
[18:05:14.037] plan(): Setting new future strategy stack:
[18:05:14.037] List of future strategies:
[18:05:14.037] 1. sequential:
[18:05:14.037]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.037]    - tweaked: FALSE
[18:05:14.037]    - call: NULL
[18:05:14.038] plan(): nbrOfWorkers() = 1
[18:05:14.040] plan(): Setting new future strategy stack:
[18:05:14.040] List of future strategies:
[18:05:14.040] 1. multicore:
[18:05:14.040]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.040]    - tweaked: FALSE
[18:05:14.040]    - call: plan(multicore)
[18:05:14.046] plan(): nbrOfWorkers() = 1
[18:05:14.047] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[18:05:14.055] getGlobalsAndPackages() ...
[18:05:14.056] Not searching for globals
[18:05:14.056] - globals: [0] <none>
[18:05:14.056] getGlobalsAndPackages() ... DONE
[18:05:14.057] Packages needed by the future expression (n = 0): <none>
[18:05:14.057] Packages needed by future strategies (n = 0): <none>
[18:05:14.058] {
[18:05:14.058]     {
[18:05:14.058]         {
[18:05:14.058]             ...future.startTime <- base::Sys.time()
[18:05:14.058]             {
[18:05:14.058]                 {
[18:05:14.058]                   {
[18:05:14.058]                     base::local({
[18:05:14.058]                       has_future <- base::requireNamespace("future", 
[18:05:14.058]                         quietly = TRUE)
[18:05:14.058]                       if (has_future) {
[18:05:14.058]                         ns <- base::getNamespace("future")
[18:05:14.058]                         version <- ns[[".package"]][["version"]]
[18:05:14.058]                         if (is.null(version)) 
[18:05:14.058]                           version <- utils::packageVersion("future")
[18:05:14.058]                       }
[18:05:14.058]                       else {
[18:05:14.058]                         version <- NULL
[18:05:14.058]                       }
[18:05:14.058]                       if (!has_future || version < "1.8.0") {
[18:05:14.058]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.058]                           "", base::R.version$version.string), 
[18:05:14.058]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.058]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.058]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.058]                             "release", "version")], collapse = " "), 
[18:05:14.058]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.058]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.058]                           info)
[18:05:14.058]                         info <- base::paste(info, collapse = "; ")
[18:05:14.058]                         if (!has_future) {
[18:05:14.058]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.058]                             info)
[18:05:14.058]                         }
[18:05:14.058]                         else {
[18:05:14.058]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.058]                             info, version)
[18:05:14.058]                         }
[18:05:14.058]                         base::stop(msg)
[18:05:14.058]                       }
[18:05:14.058]                     })
[18:05:14.058]                   }
[18:05:14.058]                   ...future.strategy.old <- future::plan("list")
[18:05:14.058]                   options(future.plan = NULL)
[18:05:14.058]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.058]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.058]                 }
[18:05:14.058]                 ...future.workdir <- getwd()
[18:05:14.058]             }
[18:05:14.058]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.058]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.058]         }
[18:05:14.058]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.058]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.058]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.058]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.058]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.058]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.058]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.058]             base::names(...future.oldOptions))
[18:05:14.058]     }
[18:05:14.058]     if (FALSE) {
[18:05:14.058]     }
[18:05:14.058]     else {
[18:05:14.058]         if (TRUE) {
[18:05:14.058]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.058]                 open = "w")
[18:05:14.058]         }
[18:05:14.058]         else {
[18:05:14.058]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.058]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.058]         }
[18:05:14.058]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.058]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.058]             base::sink(type = "output", split = FALSE)
[18:05:14.058]             base::close(...future.stdout)
[18:05:14.058]         }, add = TRUE)
[18:05:14.058]     }
[18:05:14.058]     ...future.frame <- base::sys.nframe()
[18:05:14.058]     ...future.conditions <- base::list()
[18:05:14.058]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.058]     if (FALSE) {
[18:05:14.058]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.058]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.058]     }
[18:05:14.058]     ...future.result <- base::tryCatch({
[18:05:14.058]         base::withCallingHandlers({
[18:05:14.058]             ...future.value <- base::withVisible(base::local({
[18:05:14.058]                 ii
[18:05:14.058]             }))
[18:05:14.058]             future::FutureResult(value = ...future.value$value, 
[18:05:14.058]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.058]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.058]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.058]                     ...future.globalenv.names))
[18:05:14.058]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.058]         }, condition = base::local({
[18:05:14.058]             c <- base::c
[18:05:14.058]             inherits <- base::inherits
[18:05:14.058]             invokeRestart <- base::invokeRestart
[18:05:14.058]             length <- base::length
[18:05:14.058]             list <- base::list
[18:05:14.058]             seq.int <- base::seq.int
[18:05:14.058]             signalCondition <- base::signalCondition
[18:05:14.058]             sys.calls <- base::sys.calls
[18:05:14.058]             `[[` <- base::`[[`
[18:05:14.058]             `+` <- base::`+`
[18:05:14.058]             `<<-` <- base::`<<-`
[18:05:14.058]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.058]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.058]                   3L)]
[18:05:14.058]             }
[18:05:14.058]             function(cond) {
[18:05:14.058]                 is_error <- inherits(cond, "error")
[18:05:14.058]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.058]                   NULL)
[18:05:14.058]                 if (is_error) {
[18:05:14.058]                   sessionInformation <- function() {
[18:05:14.058]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.058]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.058]                       search = base::search(), system = base::Sys.info())
[18:05:14.058]                   }
[18:05:14.058]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.058]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.058]                     cond$call), session = sessionInformation(), 
[18:05:14.058]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.058]                   signalCondition(cond)
[18:05:14.058]                 }
[18:05:14.058]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.058]                 "immediateCondition"))) {
[18:05:14.058]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.058]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.058]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.058]                   if (TRUE && !signal) {
[18:05:14.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.058]                     {
[18:05:14.058]                       inherits <- base::inherits
[18:05:14.058]                       invokeRestart <- base::invokeRestart
[18:05:14.058]                       is.null <- base::is.null
[18:05:14.058]                       muffled <- FALSE
[18:05:14.058]                       if (inherits(cond, "message")) {
[18:05:14.058]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.058]                         if (muffled) 
[18:05:14.058]                           invokeRestart("muffleMessage")
[18:05:14.058]                       }
[18:05:14.058]                       else if (inherits(cond, "warning")) {
[18:05:14.058]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.058]                         if (muffled) 
[18:05:14.058]                           invokeRestart("muffleWarning")
[18:05:14.058]                       }
[18:05:14.058]                       else if (inherits(cond, "condition")) {
[18:05:14.058]                         if (!is.null(pattern)) {
[18:05:14.058]                           computeRestarts <- base::computeRestarts
[18:05:14.058]                           grepl <- base::grepl
[18:05:14.058]                           restarts <- computeRestarts(cond)
[18:05:14.058]                           for (restart in restarts) {
[18:05:14.058]                             name <- restart$name
[18:05:14.058]                             if (is.null(name)) 
[18:05:14.058]                               next
[18:05:14.058]                             if (!grepl(pattern, name)) 
[18:05:14.058]                               next
[18:05:14.058]                             invokeRestart(restart)
[18:05:14.058]                             muffled <- TRUE
[18:05:14.058]                             break
[18:05:14.058]                           }
[18:05:14.058]                         }
[18:05:14.058]                       }
[18:05:14.058]                       invisible(muffled)
[18:05:14.058]                     }
[18:05:14.058]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.058]                   }
[18:05:14.058]                 }
[18:05:14.058]                 else {
[18:05:14.058]                   if (TRUE) {
[18:05:14.058]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.058]                     {
[18:05:14.058]                       inherits <- base::inherits
[18:05:14.058]                       invokeRestart <- base::invokeRestart
[18:05:14.058]                       is.null <- base::is.null
[18:05:14.058]                       muffled <- FALSE
[18:05:14.058]                       if (inherits(cond, "message")) {
[18:05:14.058]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.058]                         if (muffled) 
[18:05:14.058]                           invokeRestart("muffleMessage")
[18:05:14.058]                       }
[18:05:14.058]                       else if (inherits(cond, "warning")) {
[18:05:14.058]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.058]                         if (muffled) 
[18:05:14.058]                           invokeRestart("muffleWarning")
[18:05:14.058]                       }
[18:05:14.058]                       else if (inherits(cond, "condition")) {
[18:05:14.058]                         if (!is.null(pattern)) {
[18:05:14.058]                           computeRestarts <- base::computeRestarts
[18:05:14.058]                           grepl <- base::grepl
[18:05:14.058]                           restarts <- computeRestarts(cond)
[18:05:14.058]                           for (restart in restarts) {
[18:05:14.058]                             name <- restart$name
[18:05:14.058]                             if (is.null(name)) 
[18:05:14.058]                               next
[18:05:14.058]                             if (!grepl(pattern, name)) 
[18:05:14.058]                               next
[18:05:14.058]                             invokeRestart(restart)
[18:05:14.058]                             muffled <- TRUE
[18:05:14.058]                             break
[18:05:14.058]                           }
[18:05:14.058]                         }
[18:05:14.058]                       }
[18:05:14.058]                       invisible(muffled)
[18:05:14.058]                     }
[18:05:14.058]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.058]                   }
[18:05:14.058]                 }
[18:05:14.058]             }
[18:05:14.058]         }))
[18:05:14.058]     }, error = function(ex) {
[18:05:14.058]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.058]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.058]                 ...future.rng), started = ...future.startTime, 
[18:05:14.058]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.058]             version = "1.8"), class = "FutureResult")
[18:05:14.058]     }, finally = {
[18:05:14.058]         if (!identical(...future.workdir, getwd())) 
[18:05:14.058]             setwd(...future.workdir)
[18:05:14.058]         {
[18:05:14.058]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.058]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.058]             }
[18:05:14.058]             base::options(...future.oldOptions)
[18:05:14.058]             if (.Platform$OS.type == "windows") {
[18:05:14.058]                 old_names <- names(...future.oldEnvVars)
[18:05:14.058]                 envs <- base::Sys.getenv()
[18:05:14.058]                 names <- names(envs)
[18:05:14.058]                 common <- intersect(names, old_names)
[18:05:14.058]                 added <- setdiff(names, old_names)
[18:05:14.058]                 removed <- setdiff(old_names, names)
[18:05:14.058]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.058]                   envs[common]]
[18:05:14.058]                 NAMES <- toupper(changed)
[18:05:14.058]                 args <- list()
[18:05:14.058]                 for (kk in seq_along(NAMES)) {
[18:05:14.058]                   name <- changed[[kk]]
[18:05:14.058]                   NAME <- NAMES[[kk]]
[18:05:14.058]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.058]                     next
[18:05:14.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.058]                 }
[18:05:14.058]                 NAMES <- toupper(added)
[18:05:14.058]                 for (kk in seq_along(NAMES)) {
[18:05:14.058]                   name <- added[[kk]]
[18:05:14.058]                   NAME <- NAMES[[kk]]
[18:05:14.058]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.058]                     next
[18:05:14.058]                   args[[name]] <- ""
[18:05:14.058]                 }
[18:05:14.058]                 NAMES <- toupper(removed)
[18:05:14.058]                 for (kk in seq_along(NAMES)) {
[18:05:14.058]                   name <- removed[[kk]]
[18:05:14.058]                   NAME <- NAMES[[kk]]
[18:05:14.058]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.058]                     next
[18:05:14.058]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.058]                 }
[18:05:14.058]                 if (length(args) > 0) 
[18:05:14.058]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.058]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.058]             }
[18:05:14.058]             else {
[18:05:14.058]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.058]             }
[18:05:14.058]             {
[18:05:14.058]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.058]                   0L) {
[18:05:14.058]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.058]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.058]                   base::options(opts)
[18:05:14.058]                 }
[18:05:14.058]                 {
[18:05:14.058]                   {
[18:05:14.058]                     NULL
[18:05:14.058]                     RNGkind("Mersenne-Twister")
[18:05:14.058]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.058]                       inherits = FALSE)
[18:05:14.058]                   }
[18:05:14.058]                   options(future.plan = NULL)
[18:05:14.058]                   if (is.na(NA_character_)) 
[18:05:14.058]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.058]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.058]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.058]                     .init = FALSE)
[18:05:14.058]                 }
[18:05:14.058]             }
[18:05:14.058]         }
[18:05:14.058]     })
[18:05:14.058]     if (TRUE) {
[18:05:14.058]         base::sink(type = "output", split = FALSE)
[18:05:14.058]         if (TRUE) {
[18:05:14.058]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.058]         }
[18:05:14.058]         else {
[18:05:14.058]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.058]         }
[18:05:14.058]         base::close(...future.stdout)
[18:05:14.058]         ...future.stdout <- NULL
[18:05:14.058]     }
[18:05:14.058]     ...future.result$conditions <- ...future.conditions
[18:05:14.058]     ...future.result$finished <- base::Sys.time()
[18:05:14.058]     ...future.result
[18:05:14.058] }
[18:05:14.061] plan(): Setting new future strategy stack:
[18:05:14.062] List of future strategies:
[18:05:14.062] 1. sequential:
[18:05:14.062]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.062]    - tweaked: FALSE
[18:05:14.062]    - call: NULL
[18:05:14.062] plan(): nbrOfWorkers() = 1
[18:05:14.064] plan(): Setting new future strategy stack:
[18:05:14.064] List of future strategies:
[18:05:14.064] 1. multicore:
[18:05:14.064]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.064]    - tweaked: FALSE
[18:05:14.064]    - call: plan(multicore)
[18:05:14.070] plan(): nbrOfWorkers() = 1
[18:05:14.071] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[18:05:14.077] getGlobalsAndPackages() ...
[18:05:14.077] Not searching for globals
[18:05:14.077] - globals: [0] <none>
[18:05:14.077] getGlobalsAndPackages() ... DONE
[18:05:14.078] Packages needed by the future expression (n = 0): <none>
[18:05:14.078] Packages needed by future strategies (n = 0): <none>
[18:05:14.079] {
[18:05:14.079]     {
[18:05:14.079]         {
[18:05:14.079]             ...future.startTime <- base::Sys.time()
[18:05:14.079]             {
[18:05:14.079]                 {
[18:05:14.079]                   {
[18:05:14.079]                     base::local({
[18:05:14.079]                       has_future <- base::requireNamespace("future", 
[18:05:14.079]                         quietly = TRUE)
[18:05:14.079]                       if (has_future) {
[18:05:14.079]                         ns <- base::getNamespace("future")
[18:05:14.079]                         version <- ns[[".package"]][["version"]]
[18:05:14.079]                         if (is.null(version)) 
[18:05:14.079]                           version <- utils::packageVersion("future")
[18:05:14.079]                       }
[18:05:14.079]                       else {
[18:05:14.079]                         version <- NULL
[18:05:14.079]                       }
[18:05:14.079]                       if (!has_future || version < "1.8.0") {
[18:05:14.079]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.079]                           "", base::R.version$version.string), 
[18:05:14.079]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.079]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.079]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.079]                             "release", "version")], collapse = " "), 
[18:05:14.079]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.079]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.079]                           info)
[18:05:14.079]                         info <- base::paste(info, collapse = "; ")
[18:05:14.079]                         if (!has_future) {
[18:05:14.079]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.079]                             info)
[18:05:14.079]                         }
[18:05:14.079]                         else {
[18:05:14.079]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.079]                             info, version)
[18:05:14.079]                         }
[18:05:14.079]                         base::stop(msg)
[18:05:14.079]                       }
[18:05:14.079]                     })
[18:05:14.079]                   }
[18:05:14.079]                   ...future.strategy.old <- future::plan("list")
[18:05:14.079]                   options(future.plan = NULL)
[18:05:14.079]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.079]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.079]                 }
[18:05:14.079]                 ...future.workdir <- getwd()
[18:05:14.079]             }
[18:05:14.079]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.079]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.079]         }
[18:05:14.079]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.079]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.079]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.079]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.079]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.079]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.079]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.079]             base::names(...future.oldOptions))
[18:05:14.079]     }
[18:05:14.079]     if (FALSE) {
[18:05:14.079]     }
[18:05:14.079]     else {
[18:05:14.079]         if (TRUE) {
[18:05:14.079]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.079]                 open = "w")
[18:05:14.079]         }
[18:05:14.079]         else {
[18:05:14.079]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.079]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.079]         }
[18:05:14.079]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.079]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.079]             base::sink(type = "output", split = FALSE)
[18:05:14.079]             base::close(...future.stdout)
[18:05:14.079]         }, add = TRUE)
[18:05:14.079]     }
[18:05:14.079]     ...future.frame <- base::sys.nframe()
[18:05:14.079]     ...future.conditions <- base::list()
[18:05:14.079]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.079]     if (FALSE) {
[18:05:14.079]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.079]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.079]     }
[18:05:14.079]     ...future.result <- base::tryCatch({
[18:05:14.079]         base::withCallingHandlers({
[18:05:14.079]             ...future.value <- base::withVisible(base::local({
[18:05:14.079]                 ii
[18:05:14.079]             }))
[18:05:14.079]             future::FutureResult(value = ...future.value$value, 
[18:05:14.079]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.079]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.079]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.079]                     ...future.globalenv.names))
[18:05:14.079]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.079]         }, condition = base::local({
[18:05:14.079]             c <- base::c
[18:05:14.079]             inherits <- base::inherits
[18:05:14.079]             invokeRestart <- base::invokeRestart
[18:05:14.079]             length <- base::length
[18:05:14.079]             list <- base::list
[18:05:14.079]             seq.int <- base::seq.int
[18:05:14.079]             signalCondition <- base::signalCondition
[18:05:14.079]             sys.calls <- base::sys.calls
[18:05:14.079]             `[[` <- base::`[[`
[18:05:14.079]             `+` <- base::`+`
[18:05:14.079]             `<<-` <- base::`<<-`
[18:05:14.079]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.079]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.079]                   3L)]
[18:05:14.079]             }
[18:05:14.079]             function(cond) {
[18:05:14.079]                 is_error <- inherits(cond, "error")
[18:05:14.079]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.079]                   NULL)
[18:05:14.079]                 if (is_error) {
[18:05:14.079]                   sessionInformation <- function() {
[18:05:14.079]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.079]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.079]                       search = base::search(), system = base::Sys.info())
[18:05:14.079]                   }
[18:05:14.079]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.079]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.079]                     cond$call), session = sessionInformation(), 
[18:05:14.079]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.079]                   signalCondition(cond)
[18:05:14.079]                 }
[18:05:14.079]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.079]                 "immediateCondition"))) {
[18:05:14.079]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.079]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.079]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.079]                   if (TRUE && !signal) {
[18:05:14.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.079]                     {
[18:05:14.079]                       inherits <- base::inherits
[18:05:14.079]                       invokeRestart <- base::invokeRestart
[18:05:14.079]                       is.null <- base::is.null
[18:05:14.079]                       muffled <- FALSE
[18:05:14.079]                       if (inherits(cond, "message")) {
[18:05:14.079]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.079]                         if (muffled) 
[18:05:14.079]                           invokeRestart("muffleMessage")
[18:05:14.079]                       }
[18:05:14.079]                       else if (inherits(cond, "warning")) {
[18:05:14.079]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.079]                         if (muffled) 
[18:05:14.079]                           invokeRestart("muffleWarning")
[18:05:14.079]                       }
[18:05:14.079]                       else if (inherits(cond, "condition")) {
[18:05:14.079]                         if (!is.null(pattern)) {
[18:05:14.079]                           computeRestarts <- base::computeRestarts
[18:05:14.079]                           grepl <- base::grepl
[18:05:14.079]                           restarts <- computeRestarts(cond)
[18:05:14.079]                           for (restart in restarts) {
[18:05:14.079]                             name <- restart$name
[18:05:14.079]                             if (is.null(name)) 
[18:05:14.079]                               next
[18:05:14.079]                             if (!grepl(pattern, name)) 
[18:05:14.079]                               next
[18:05:14.079]                             invokeRestart(restart)
[18:05:14.079]                             muffled <- TRUE
[18:05:14.079]                             break
[18:05:14.079]                           }
[18:05:14.079]                         }
[18:05:14.079]                       }
[18:05:14.079]                       invisible(muffled)
[18:05:14.079]                     }
[18:05:14.079]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.079]                   }
[18:05:14.079]                 }
[18:05:14.079]                 else {
[18:05:14.079]                   if (TRUE) {
[18:05:14.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.079]                     {
[18:05:14.079]                       inherits <- base::inherits
[18:05:14.079]                       invokeRestart <- base::invokeRestart
[18:05:14.079]                       is.null <- base::is.null
[18:05:14.079]                       muffled <- FALSE
[18:05:14.079]                       if (inherits(cond, "message")) {
[18:05:14.079]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.079]                         if (muffled) 
[18:05:14.079]                           invokeRestart("muffleMessage")
[18:05:14.079]                       }
[18:05:14.079]                       else if (inherits(cond, "warning")) {
[18:05:14.079]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.079]                         if (muffled) 
[18:05:14.079]                           invokeRestart("muffleWarning")
[18:05:14.079]                       }
[18:05:14.079]                       else if (inherits(cond, "condition")) {
[18:05:14.079]                         if (!is.null(pattern)) {
[18:05:14.079]                           computeRestarts <- base::computeRestarts
[18:05:14.079]                           grepl <- base::grepl
[18:05:14.079]                           restarts <- computeRestarts(cond)
[18:05:14.079]                           for (restart in restarts) {
[18:05:14.079]                             name <- restart$name
[18:05:14.079]                             if (is.null(name)) 
[18:05:14.079]                               next
[18:05:14.079]                             if (!grepl(pattern, name)) 
[18:05:14.079]                               next
[18:05:14.079]                             invokeRestart(restart)
[18:05:14.079]                             muffled <- TRUE
[18:05:14.079]                             break
[18:05:14.079]                           }
[18:05:14.079]                         }
[18:05:14.079]                       }
[18:05:14.079]                       invisible(muffled)
[18:05:14.079]                     }
[18:05:14.079]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.079]                   }
[18:05:14.079]                 }
[18:05:14.079]             }
[18:05:14.079]         }))
[18:05:14.079]     }, error = function(ex) {
[18:05:14.079]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.079]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.079]                 ...future.rng), started = ...future.startTime, 
[18:05:14.079]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.079]             version = "1.8"), class = "FutureResult")
[18:05:14.079]     }, finally = {
[18:05:14.079]         if (!identical(...future.workdir, getwd())) 
[18:05:14.079]             setwd(...future.workdir)
[18:05:14.079]         {
[18:05:14.079]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.079]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.079]             }
[18:05:14.079]             base::options(...future.oldOptions)
[18:05:14.079]             if (.Platform$OS.type == "windows") {
[18:05:14.079]                 old_names <- names(...future.oldEnvVars)
[18:05:14.079]                 envs <- base::Sys.getenv()
[18:05:14.079]                 names <- names(envs)
[18:05:14.079]                 common <- intersect(names, old_names)
[18:05:14.079]                 added <- setdiff(names, old_names)
[18:05:14.079]                 removed <- setdiff(old_names, names)
[18:05:14.079]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.079]                   envs[common]]
[18:05:14.079]                 NAMES <- toupper(changed)
[18:05:14.079]                 args <- list()
[18:05:14.079]                 for (kk in seq_along(NAMES)) {
[18:05:14.079]                   name <- changed[[kk]]
[18:05:14.079]                   NAME <- NAMES[[kk]]
[18:05:14.079]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.079]                     next
[18:05:14.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.079]                 }
[18:05:14.079]                 NAMES <- toupper(added)
[18:05:14.079]                 for (kk in seq_along(NAMES)) {
[18:05:14.079]                   name <- added[[kk]]
[18:05:14.079]                   NAME <- NAMES[[kk]]
[18:05:14.079]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.079]                     next
[18:05:14.079]                   args[[name]] <- ""
[18:05:14.079]                 }
[18:05:14.079]                 NAMES <- toupper(removed)
[18:05:14.079]                 for (kk in seq_along(NAMES)) {
[18:05:14.079]                   name <- removed[[kk]]
[18:05:14.079]                   NAME <- NAMES[[kk]]
[18:05:14.079]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.079]                     next
[18:05:14.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.079]                 }
[18:05:14.079]                 if (length(args) > 0) 
[18:05:14.079]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.079]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.079]             }
[18:05:14.079]             else {
[18:05:14.079]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.079]             }
[18:05:14.079]             {
[18:05:14.079]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.079]                   0L) {
[18:05:14.079]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.079]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.079]                   base::options(opts)
[18:05:14.079]                 }
[18:05:14.079]                 {
[18:05:14.079]                   {
[18:05:14.079]                     NULL
[18:05:14.079]                     RNGkind("Mersenne-Twister")
[18:05:14.079]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.079]                       inherits = FALSE)
[18:05:14.079]                   }
[18:05:14.079]                   options(future.plan = NULL)
[18:05:14.079]                   if (is.na(NA_character_)) 
[18:05:14.079]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.079]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.079]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.079]                     .init = FALSE)
[18:05:14.079]                 }
[18:05:14.079]             }
[18:05:14.079]         }
[18:05:14.079]     })
[18:05:14.079]     if (TRUE) {
[18:05:14.079]         base::sink(type = "output", split = FALSE)
[18:05:14.079]         if (TRUE) {
[18:05:14.079]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.079]         }
[18:05:14.079]         else {
[18:05:14.079]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.079]         }
[18:05:14.079]         base::close(...future.stdout)
[18:05:14.079]         ...future.stdout <- NULL
[18:05:14.079]     }
[18:05:14.079]     ...future.result$conditions <- ...future.conditions
[18:05:14.079]     ...future.result$finished <- base::Sys.time()
[18:05:14.079]     ...future.result
[18:05:14.079] }
[18:05:14.083] plan(): Setting new future strategy stack:
[18:05:14.083] List of future strategies:
[18:05:14.083] 1. sequential:
[18:05:14.083]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.083]    - tweaked: FALSE
[18:05:14.083]    - call: NULL
[18:05:14.084] plan(): nbrOfWorkers() = 1
[18:05:14.086] plan(): Setting new future strategy stack:
[18:05:14.086] List of future strategies:
[18:05:14.086] 1. multicore:
[18:05:14.086]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.086]    - tweaked: FALSE
[18:05:14.086]    - call: plan(multicore)
[18:05:14.093] plan(): nbrOfWorkers() = 1
[18:05:14.093] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = FALSE) and errors
[18:05:14.101] getGlobalsAndPackages() ...
[18:05:14.101] Not searching for globals
[18:05:14.101] - globals: [0] <none>
[18:05:14.102] getGlobalsAndPackages() ... DONE
[18:05:14.102] Packages needed by the future expression (n = 0): <none>
[18:05:14.103] Packages needed by future strategies (n = 0): <none>
[18:05:14.104] {
[18:05:14.104]     {
[18:05:14.104]         {
[18:05:14.104]             ...future.startTime <- base::Sys.time()
[18:05:14.104]             {
[18:05:14.104]                 {
[18:05:14.104]                   {
[18:05:14.104]                     base::local({
[18:05:14.104]                       has_future <- base::requireNamespace("future", 
[18:05:14.104]                         quietly = TRUE)
[18:05:14.104]                       if (has_future) {
[18:05:14.104]                         ns <- base::getNamespace("future")
[18:05:14.104]                         version <- ns[[".package"]][["version"]]
[18:05:14.104]                         if (is.null(version)) 
[18:05:14.104]                           version <- utils::packageVersion("future")
[18:05:14.104]                       }
[18:05:14.104]                       else {
[18:05:14.104]                         version <- NULL
[18:05:14.104]                       }
[18:05:14.104]                       if (!has_future || version < "1.8.0") {
[18:05:14.104]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.104]                           "", base::R.version$version.string), 
[18:05:14.104]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.104]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.104]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.104]                             "release", "version")], collapse = " "), 
[18:05:14.104]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.104]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.104]                           info)
[18:05:14.104]                         info <- base::paste(info, collapse = "; ")
[18:05:14.104]                         if (!has_future) {
[18:05:14.104]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.104]                             info)
[18:05:14.104]                         }
[18:05:14.104]                         else {
[18:05:14.104]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.104]                             info, version)
[18:05:14.104]                         }
[18:05:14.104]                         base::stop(msg)
[18:05:14.104]                       }
[18:05:14.104]                     })
[18:05:14.104]                   }
[18:05:14.104]                   ...future.strategy.old <- future::plan("list")
[18:05:14.104]                   options(future.plan = NULL)
[18:05:14.104]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.104]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.104]                 }
[18:05:14.104]                 ...future.workdir <- getwd()
[18:05:14.104]             }
[18:05:14.104]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.104]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.104]         }
[18:05:14.104]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.104]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.104]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.104]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.104]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.104]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.104]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.104]             base::names(...future.oldOptions))
[18:05:14.104]     }
[18:05:14.104]     if (FALSE) {
[18:05:14.104]     }
[18:05:14.104]     else {
[18:05:14.104]         if (TRUE) {
[18:05:14.104]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.104]                 open = "w")
[18:05:14.104]         }
[18:05:14.104]         else {
[18:05:14.104]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.104]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.104]         }
[18:05:14.104]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.104]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.104]             base::sink(type = "output", split = FALSE)
[18:05:14.104]             base::close(...future.stdout)
[18:05:14.104]         }, add = TRUE)
[18:05:14.104]     }
[18:05:14.104]     ...future.frame <- base::sys.nframe()
[18:05:14.104]     ...future.conditions <- base::list()
[18:05:14.104]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.104]     if (FALSE) {
[18:05:14.104]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.104]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.104]     }
[18:05:14.104]     ...future.result <- base::tryCatch({
[18:05:14.104]         base::withCallingHandlers({
[18:05:14.104]             ...future.value <- base::withVisible(base::local({
[18:05:14.104]                 stop("Whoops!")
[18:05:14.104]                 1
[18:05:14.104]             }))
[18:05:14.104]             future::FutureResult(value = ...future.value$value, 
[18:05:14.104]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.104]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.104]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.104]                     ...future.globalenv.names))
[18:05:14.104]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.104]         }, condition = base::local({
[18:05:14.104]             c <- base::c
[18:05:14.104]             inherits <- base::inherits
[18:05:14.104]             invokeRestart <- base::invokeRestart
[18:05:14.104]             length <- base::length
[18:05:14.104]             list <- base::list
[18:05:14.104]             seq.int <- base::seq.int
[18:05:14.104]             signalCondition <- base::signalCondition
[18:05:14.104]             sys.calls <- base::sys.calls
[18:05:14.104]             `[[` <- base::`[[`
[18:05:14.104]             `+` <- base::`+`
[18:05:14.104]             `<<-` <- base::`<<-`
[18:05:14.104]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.104]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.104]                   3L)]
[18:05:14.104]             }
[18:05:14.104]             function(cond) {
[18:05:14.104]                 is_error <- inherits(cond, "error")
[18:05:14.104]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.104]                   NULL)
[18:05:14.104]                 if (is_error) {
[18:05:14.104]                   sessionInformation <- function() {
[18:05:14.104]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.104]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.104]                       search = base::search(), system = base::Sys.info())
[18:05:14.104]                   }
[18:05:14.104]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.104]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.104]                     cond$call), session = sessionInformation(), 
[18:05:14.104]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.104]                   signalCondition(cond)
[18:05:14.104]                 }
[18:05:14.104]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.104]                 "immediateCondition"))) {
[18:05:14.104]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.104]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.104]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.104]                   if (TRUE && !signal) {
[18:05:14.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.104]                     {
[18:05:14.104]                       inherits <- base::inherits
[18:05:14.104]                       invokeRestart <- base::invokeRestart
[18:05:14.104]                       is.null <- base::is.null
[18:05:14.104]                       muffled <- FALSE
[18:05:14.104]                       if (inherits(cond, "message")) {
[18:05:14.104]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.104]                         if (muffled) 
[18:05:14.104]                           invokeRestart("muffleMessage")
[18:05:14.104]                       }
[18:05:14.104]                       else if (inherits(cond, "warning")) {
[18:05:14.104]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.104]                         if (muffled) 
[18:05:14.104]                           invokeRestart("muffleWarning")
[18:05:14.104]                       }
[18:05:14.104]                       else if (inherits(cond, "condition")) {
[18:05:14.104]                         if (!is.null(pattern)) {
[18:05:14.104]                           computeRestarts <- base::computeRestarts
[18:05:14.104]                           grepl <- base::grepl
[18:05:14.104]                           restarts <- computeRestarts(cond)
[18:05:14.104]                           for (restart in restarts) {
[18:05:14.104]                             name <- restart$name
[18:05:14.104]                             if (is.null(name)) 
[18:05:14.104]                               next
[18:05:14.104]                             if (!grepl(pattern, name)) 
[18:05:14.104]                               next
[18:05:14.104]                             invokeRestart(restart)
[18:05:14.104]                             muffled <- TRUE
[18:05:14.104]                             break
[18:05:14.104]                           }
[18:05:14.104]                         }
[18:05:14.104]                       }
[18:05:14.104]                       invisible(muffled)
[18:05:14.104]                     }
[18:05:14.104]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.104]                   }
[18:05:14.104]                 }
[18:05:14.104]                 else {
[18:05:14.104]                   if (TRUE) {
[18:05:14.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.104]                     {
[18:05:14.104]                       inherits <- base::inherits
[18:05:14.104]                       invokeRestart <- base::invokeRestart
[18:05:14.104]                       is.null <- base::is.null
[18:05:14.104]                       muffled <- FALSE
[18:05:14.104]                       if (inherits(cond, "message")) {
[18:05:14.104]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.104]                         if (muffled) 
[18:05:14.104]                           invokeRestart("muffleMessage")
[18:05:14.104]                       }
[18:05:14.104]                       else if (inherits(cond, "warning")) {
[18:05:14.104]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.104]                         if (muffled) 
[18:05:14.104]                           invokeRestart("muffleWarning")
[18:05:14.104]                       }
[18:05:14.104]                       else if (inherits(cond, "condition")) {
[18:05:14.104]                         if (!is.null(pattern)) {
[18:05:14.104]                           computeRestarts <- base::computeRestarts
[18:05:14.104]                           grepl <- base::grepl
[18:05:14.104]                           restarts <- computeRestarts(cond)
[18:05:14.104]                           for (restart in restarts) {
[18:05:14.104]                             name <- restart$name
[18:05:14.104]                             if (is.null(name)) 
[18:05:14.104]                               next
[18:05:14.104]                             if (!grepl(pattern, name)) 
[18:05:14.104]                               next
[18:05:14.104]                             invokeRestart(restart)
[18:05:14.104]                             muffled <- TRUE
[18:05:14.104]                             break
[18:05:14.104]                           }
[18:05:14.104]                         }
[18:05:14.104]                       }
[18:05:14.104]                       invisible(muffled)
[18:05:14.104]                     }
[18:05:14.104]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.104]                   }
[18:05:14.104]                 }
[18:05:14.104]             }
[18:05:14.104]         }))
[18:05:14.104]     }, error = function(ex) {
[18:05:14.104]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.104]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.104]                 ...future.rng), started = ...future.startTime, 
[18:05:14.104]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.104]             version = "1.8"), class = "FutureResult")
[18:05:14.104]     }, finally = {
[18:05:14.104]         if (!identical(...future.workdir, getwd())) 
[18:05:14.104]             setwd(...future.workdir)
[18:05:14.104]         {
[18:05:14.104]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.104]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.104]             }
[18:05:14.104]             base::options(...future.oldOptions)
[18:05:14.104]             if (.Platform$OS.type == "windows") {
[18:05:14.104]                 old_names <- names(...future.oldEnvVars)
[18:05:14.104]                 envs <- base::Sys.getenv()
[18:05:14.104]                 names <- names(envs)
[18:05:14.104]                 common <- intersect(names, old_names)
[18:05:14.104]                 added <- setdiff(names, old_names)
[18:05:14.104]                 removed <- setdiff(old_names, names)
[18:05:14.104]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.104]                   envs[common]]
[18:05:14.104]                 NAMES <- toupper(changed)
[18:05:14.104]                 args <- list()
[18:05:14.104]                 for (kk in seq_along(NAMES)) {
[18:05:14.104]                   name <- changed[[kk]]
[18:05:14.104]                   NAME <- NAMES[[kk]]
[18:05:14.104]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.104]                     next
[18:05:14.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.104]                 }
[18:05:14.104]                 NAMES <- toupper(added)
[18:05:14.104]                 for (kk in seq_along(NAMES)) {
[18:05:14.104]                   name <- added[[kk]]
[18:05:14.104]                   NAME <- NAMES[[kk]]
[18:05:14.104]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.104]                     next
[18:05:14.104]                   args[[name]] <- ""
[18:05:14.104]                 }
[18:05:14.104]                 NAMES <- toupper(removed)
[18:05:14.104]                 for (kk in seq_along(NAMES)) {
[18:05:14.104]                   name <- removed[[kk]]
[18:05:14.104]                   NAME <- NAMES[[kk]]
[18:05:14.104]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.104]                     next
[18:05:14.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.104]                 }
[18:05:14.104]                 if (length(args) > 0) 
[18:05:14.104]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.104]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.104]             }
[18:05:14.104]             else {
[18:05:14.104]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.104]             }
[18:05:14.104]             {
[18:05:14.104]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.104]                   0L) {
[18:05:14.104]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.104]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.104]                   base::options(opts)
[18:05:14.104]                 }
[18:05:14.104]                 {
[18:05:14.104]                   {
[18:05:14.104]                     NULL
[18:05:14.104]                     RNGkind("Mersenne-Twister")
[18:05:14.104]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.104]                       inherits = FALSE)
[18:05:14.104]                   }
[18:05:14.104]                   options(future.plan = NULL)
[18:05:14.104]                   if (is.na(NA_character_)) 
[18:05:14.104]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.104]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.104]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.104]                     .init = FALSE)
[18:05:14.104]                 }
[18:05:14.104]             }
[18:05:14.104]         }
[18:05:14.104]     })
[18:05:14.104]     if (TRUE) {
[18:05:14.104]         base::sink(type = "output", split = FALSE)
[18:05:14.104]         if (TRUE) {
[18:05:14.104]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.104]         }
[18:05:14.104]         else {
[18:05:14.104]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.104]         }
[18:05:14.104]         base::close(...future.stdout)
[18:05:14.104]         ...future.stdout <- NULL
[18:05:14.104]     }
[18:05:14.104]     ...future.result$conditions <- ...future.conditions
[18:05:14.104]     ...future.result$finished <- base::Sys.time()
[18:05:14.104]     ...future.result
[18:05:14.104] }
[18:05:14.107] plan(): Setting new future strategy stack:
[18:05:14.107] List of future strategies:
[18:05:14.107] 1. sequential:
[18:05:14.107]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.107]    - tweaked: FALSE
[18:05:14.107]    - call: NULL
[18:05:14.108] plan(): nbrOfWorkers() = 1
[18:05:14.111] plan(): Setting new future strategy stack:
[18:05:14.111] List of future strategies:
[18:05:14.111] 1. multicore:
[18:05:14.111]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.111]    - tweaked: FALSE
[18:05:14.111]    - call: plan(multicore)
[18:05:14.117] plan(): nbrOfWorkers() = 1
[18:05:14.118] SequentialFuture started (and completed)
[18:05:14.118] signalConditions() ...
[18:05:14.118]  - include = ‘immediateCondition’
[18:05:14.118]  - exclude = 
[18:05:14.119]  - resignal = FALSE
[18:05:14.119]  - Number of conditions: 1
[18:05:14.119] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:05:14.120] signalConditions() ...
[18:05:14.121]  - include = ‘immediateCondition’
[18:05:14.121]  - exclude = 
[18:05:14.121]  - resignal = FALSE
[18:05:14.121]  - Number of conditions: 1
[18:05:14.121] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[18:05:14.122] signalConditions() ...
[18:05:14.122]  - include = ‘immediateCondition’
[18:05:14.123]  - exclude = 
[18:05:14.123]  - resignal = FALSE
[18:05:14.123]  - Number of conditions: 1
[18:05:14.123] signalConditions() ... done
[18:05:14.123] Future state: ‘finished’
[18:05:14.124] signalConditions() ...
[18:05:14.124]  - include = ‘condition’
[18:05:14.124]  - exclude = ‘immediateCondition’
[18:05:14.124]  - resignal = TRUE
[18:05:14.124]  - Number of conditions: 1
[18:05:14.125]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:05:14.125] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[18:05:14.126] signalConditions() ...
[18:05:14.126]  - include = ‘immediateCondition’
[18:05:14.126]  - exclude = 
[18:05:14.126]  - resignal = FALSE
[18:05:14.127]  - Number of conditions: 1
[18:05:14.127] signalConditions() ... done
[18:05:14.127] Future state: ‘finished’
[18:05:14.127] signalConditions() ...
[18:05:14.127]  - include = ‘condition’
[18:05:14.128]  - exclude = ‘immediateCondition’
[18:05:14.128]  - resignal = TRUE
[18:05:14.128]  - Number of conditions: 1
[18:05:14.128]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:05:14.128] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[18:05:14.135] getGlobalsAndPackages() ...
[18:05:14.135] Searching for globals...
[18:05:14.148] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[18:05:14.148] Searching for globals ... DONE
[18:05:14.149] Resolving globals: FALSE
[18:05:14.150] 
[18:05:14.150] 
[18:05:14.150] getGlobalsAndPackages() ... DONE
[18:05:14.151] Packages needed by the future expression (n = 0): <none>
[18:05:14.151] Packages needed by future strategies (n = 0): <none>
[18:05:14.152] {
[18:05:14.152]     {
[18:05:14.152]         {
[18:05:14.152]             ...future.startTime <- base::Sys.time()
[18:05:14.152]             {
[18:05:14.152]                 {
[18:05:14.152]                   {
[18:05:14.152]                     base::local({
[18:05:14.152]                       has_future <- base::requireNamespace("future", 
[18:05:14.152]                         quietly = TRUE)
[18:05:14.152]                       if (has_future) {
[18:05:14.152]                         ns <- base::getNamespace("future")
[18:05:14.152]                         version <- ns[[".package"]][["version"]]
[18:05:14.152]                         if (is.null(version)) 
[18:05:14.152]                           version <- utils::packageVersion("future")
[18:05:14.152]                       }
[18:05:14.152]                       else {
[18:05:14.152]                         version <- NULL
[18:05:14.152]                       }
[18:05:14.152]                       if (!has_future || version < "1.8.0") {
[18:05:14.152]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.152]                           "", base::R.version$version.string), 
[18:05:14.152]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.152]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.152]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.152]                             "release", "version")], collapse = " "), 
[18:05:14.152]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.152]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.152]                           info)
[18:05:14.152]                         info <- base::paste(info, collapse = "; ")
[18:05:14.152]                         if (!has_future) {
[18:05:14.152]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.152]                             info)
[18:05:14.152]                         }
[18:05:14.152]                         else {
[18:05:14.152]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.152]                             info, version)
[18:05:14.152]                         }
[18:05:14.152]                         base::stop(msg)
[18:05:14.152]                       }
[18:05:14.152]                     })
[18:05:14.152]                   }
[18:05:14.152]                   ...future.strategy.old <- future::plan("list")
[18:05:14.152]                   options(future.plan = NULL)
[18:05:14.152]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.152]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.152]                 }
[18:05:14.152]                 ...future.workdir <- getwd()
[18:05:14.152]             }
[18:05:14.152]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.152]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.152]         }
[18:05:14.152]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.152]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.152]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.152]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.152]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.152]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.152]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.152]             base::names(...future.oldOptions))
[18:05:14.152]     }
[18:05:14.152]     if (FALSE) {
[18:05:14.152]     }
[18:05:14.152]     else {
[18:05:14.152]         if (TRUE) {
[18:05:14.152]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.152]                 open = "w")
[18:05:14.152]         }
[18:05:14.152]         else {
[18:05:14.152]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.152]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.152]         }
[18:05:14.152]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.152]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.152]             base::sink(type = "output", split = FALSE)
[18:05:14.152]             base::close(...future.stdout)
[18:05:14.152]         }, add = TRUE)
[18:05:14.152]     }
[18:05:14.152]     ...future.frame <- base::sys.nframe()
[18:05:14.152]     ...future.conditions <- base::list()
[18:05:14.152]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.152]     if (FALSE) {
[18:05:14.152]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.152]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.152]     }
[18:05:14.152]     ...future.result <- base::tryCatch({
[18:05:14.152]         base::withCallingHandlers({
[18:05:14.152]             ...future.value <- base::withVisible(base::local({
[18:05:14.152]                 stop(structure(list(message = "boom"), class = c("MyError", 
[18:05:14.152]                   "error", "condition")))
[18:05:14.152]             }))
[18:05:14.152]             future::FutureResult(value = ...future.value$value, 
[18:05:14.152]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.152]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.152]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.152]                     ...future.globalenv.names))
[18:05:14.152]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.152]         }, condition = base::local({
[18:05:14.152]             c <- base::c
[18:05:14.152]             inherits <- base::inherits
[18:05:14.152]             invokeRestart <- base::invokeRestart
[18:05:14.152]             length <- base::length
[18:05:14.152]             list <- base::list
[18:05:14.152]             seq.int <- base::seq.int
[18:05:14.152]             signalCondition <- base::signalCondition
[18:05:14.152]             sys.calls <- base::sys.calls
[18:05:14.152]             `[[` <- base::`[[`
[18:05:14.152]             `+` <- base::`+`
[18:05:14.152]             `<<-` <- base::`<<-`
[18:05:14.152]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.152]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.152]                   3L)]
[18:05:14.152]             }
[18:05:14.152]             function(cond) {
[18:05:14.152]                 is_error <- inherits(cond, "error")
[18:05:14.152]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.152]                   NULL)
[18:05:14.152]                 if (is_error) {
[18:05:14.152]                   sessionInformation <- function() {
[18:05:14.152]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.152]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.152]                       search = base::search(), system = base::Sys.info())
[18:05:14.152]                   }
[18:05:14.152]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.152]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.152]                     cond$call), session = sessionInformation(), 
[18:05:14.152]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.152]                   signalCondition(cond)
[18:05:14.152]                 }
[18:05:14.152]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.152]                 "immediateCondition"))) {
[18:05:14.152]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.152]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.152]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.152]                   if (TRUE && !signal) {
[18:05:14.152]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.152]                     {
[18:05:14.152]                       inherits <- base::inherits
[18:05:14.152]                       invokeRestart <- base::invokeRestart
[18:05:14.152]                       is.null <- base::is.null
[18:05:14.152]                       muffled <- FALSE
[18:05:14.152]                       if (inherits(cond, "message")) {
[18:05:14.152]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.152]                         if (muffled) 
[18:05:14.152]                           invokeRestart("muffleMessage")
[18:05:14.152]                       }
[18:05:14.152]                       else if (inherits(cond, "warning")) {
[18:05:14.152]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.152]                         if (muffled) 
[18:05:14.152]                           invokeRestart("muffleWarning")
[18:05:14.152]                       }
[18:05:14.152]                       else if (inherits(cond, "condition")) {
[18:05:14.152]                         if (!is.null(pattern)) {
[18:05:14.152]                           computeRestarts <- base::computeRestarts
[18:05:14.152]                           grepl <- base::grepl
[18:05:14.152]                           restarts <- computeRestarts(cond)
[18:05:14.152]                           for (restart in restarts) {
[18:05:14.152]                             name <- restart$name
[18:05:14.152]                             if (is.null(name)) 
[18:05:14.152]                               next
[18:05:14.152]                             if (!grepl(pattern, name)) 
[18:05:14.152]                               next
[18:05:14.152]                             invokeRestart(restart)
[18:05:14.152]                             muffled <- TRUE
[18:05:14.152]                             break
[18:05:14.152]                           }
[18:05:14.152]                         }
[18:05:14.152]                       }
[18:05:14.152]                       invisible(muffled)
[18:05:14.152]                     }
[18:05:14.152]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.152]                   }
[18:05:14.152]                 }
[18:05:14.152]                 else {
[18:05:14.152]                   if (TRUE) {
[18:05:14.152]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.152]                     {
[18:05:14.152]                       inherits <- base::inherits
[18:05:14.152]                       invokeRestart <- base::invokeRestart
[18:05:14.152]                       is.null <- base::is.null
[18:05:14.152]                       muffled <- FALSE
[18:05:14.152]                       if (inherits(cond, "message")) {
[18:05:14.152]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.152]                         if (muffled) 
[18:05:14.152]                           invokeRestart("muffleMessage")
[18:05:14.152]                       }
[18:05:14.152]                       else if (inherits(cond, "warning")) {
[18:05:14.152]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.152]                         if (muffled) 
[18:05:14.152]                           invokeRestart("muffleWarning")
[18:05:14.152]                       }
[18:05:14.152]                       else if (inherits(cond, "condition")) {
[18:05:14.152]                         if (!is.null(pattern)) {
[18:05:14.152]                           computeRestarts <- base::computeRestarts
[18:05:14.152]                           grepl <- base::grepl
[18:05:14.152]                           restarts <- computeRestarts(cond)
[18:05:14.152]                           for (restart in restarts) {
[18:05:14.152]                             name <- restart$name
[18:05:14.152]                             if (is.null(name)) 
[18:05:14.152]                               next
[18:05:14.152]                             if (!grepl(pattern, name)) 
[18:05:14.152]                               next
[18:05:14.152]                             invokeRestart(restart)
[18:05:14.152]                             muffled <- TRUE
[18:05:14.152]                             break
[18:05:14.152]                           }
[18:05:14.152]                         }
[18:05:14.152]                       }
[18:05:14.152]                       invisible(muffled)
[18:05:14.152]                     }
[18:05:14.152]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.152]                   }
[18:05:14.152]                 }
[18:05:14.152]             }
[18:05:14.152]         }))
[18:05:14.152]     }, error = function(ex) {
[18:05:14.152]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.152]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.152]                 ...future.rng), started = ...future.startTime, 
[18:05:14.152]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.152]             version = "1.8"), class = "FutureResult")
[18:05:14.152]     }, finally = {
[18:05:14.152]         if (!identical(...future.workdir, getwd())) 
[18:05:14.152]             setwd(...future.workdir)
[18:05:14.152]         {
[18:05:14.152]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.152]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.152]             }
[18:05:14.152]             base::options(...future.oldOptions)
[18:05:14.152]             if (.Platform$OS.type == "windows") {
[18:05:14.152]                 old_names <- names(...future.oldEnvVars)
[18:05:14.152]                 envs <- base::Sys.getenv()
[18:05:14.152]                 names <- names(envs)
[18:05:14.152]                 common <- intersect(names, old_names)
[18:05:14.152]                 added <- setdiff(names, old_names)
[18:05:14.152]                 removed <- setdiff(old_names, names)
[18:05:14.152]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.152]                   envs[common]]
[18:05:14.152]                 NAMES <- toupper(changed)
[18:05:14.152]                 args <- list()
[18:05:14.152]                 for (kk in seq_along(NAMES)) {
[18:05:14.152]                   name <- changed[[kk]]
[18:05:14.152]                   NAME <- NAMES[[kk]]
[18:05:14.152]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.152]                     next
[18:05:14.152]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.152]                 }
[18:05:14.152]                 NAMES <- toupper(added)
[18:05:14.152]                 for (kk in seq_along(NAMES)) {
[18:05:14.152]                   name <- added[[kk]]
[18:05:14.152]                   NAME <- NAMES[[kk]]
[18:05:14.152]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.152]                     next
[18:05:14.152]                   args[[name]] <- ""
[18:05:14.152]                 }
[18:05:14.152]                 NAMES <- toupper(removed)
[18:05:14.152]                 for (kk in seq_along(NAMES)) {
[18:05:14.152]                   name <- removed[[kk]]
[18:05:14.152]                   NAME <- NAMES[[kk]]
[18:05:14.152]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.152]                     next
[18:05:14.152]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.152]                 }
[18:05:14.152]                 if (length(args) > 0) 
[18:05:14.152]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.152]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.152]             }
[18:05:14.152]             else {
[18:05:14.152]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.152]             }
[18:05:14.152]             {
[18:05:14.152]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.152]                   0L) {
[18:05:14.152]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.152]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.152]                   base::options(opts)
[18:05:14.152]                 }
[18:05:14.152]                 {
[18:05:14.152]                   {
[18:05:14.152]                     NULL
[18:05:14.152]                     RNGkind("Mersenne-Twister")
[18:05:14.152]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.152]                       inherits = FALSE)
[18:05:14.152]                   }
[18:05:14.152]                   options(future.plan = NULL)
[18:05:14.152]                   if (is.na(NA_character_)) 
[18:05:14.152]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.152]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.152]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.152]                     .init = FALSE)
[18:05:14.152]                 }
[18:05:14.152]             }
[18:05:14.152]         }
[18:05:14.152]     })
[18:05:14.152]     if (TRUE) {
[18:05:14.152]         base::sink(type = "output", split = FALSE)
[18:05:14.152]         if (TRUE) {
[18:05:14.152]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.152]         }
[18:05:14.152]         else {
[18:05:14.152]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.152]         }
[18:05:14.152]         base::close(...future.stdout)
[18:05:14.152]         ...future.stdout <- NULL
[18:05:14.152]     }
[18:05:14.152]     ...future.result$conditions <- ...future.conditions
[18:05:14.152]     ...future.result$finished <- base::Sys.time()
[18:05:14.152]     ...future.result
[18:05:14.152] }
[18:05:14.156] plan(): Setting new future strategy stack:
[18:05:14.156] List of future strategies:
[18:05:14.156] 1. sequential:
[18:05:14.156]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.156]    - tweaked: FALSE
[18:05:14.156]    - call: NULL
[18:05:14.157] plan(): nbrOfWorkers() = 1
[18:05:14.163] plan(): Setting new future strategy stack:
[18:05:14.163] List of future strategies:
[18:05:14.163] 1. multicore:
[18:05:14.163]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.163]    - tweaked: FALSE
[18:05:14.163]    - call: plan(multicore)
[18:05:14.169] plan(): nbrOfWorkers() = 1
[18:05:14.170] SequentialFuture started (and completed)
[18:05:14.170] signalConditions() ...
[18:05:14.170]  - include = ‘immediateCondition’
[18:05:14.171]  - exclude = 
[18:05:14.171]  - resignal = FALSE
[18:05:14.171]  - Number of conditions: 1
[18:05:14.171] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:05:14.172] signalConditions() ...
[18:05:14.173]  - include = ‘immediateCondition’
[18:05:14.173]  - exclude = 
[18:05:14.173]  - resignal = FALSE
[18:05:14.173]  - Number of conditions: 1
[18:05:14.173] signalConditions() ... done
<MyError: boom>
[18:05:14.174] signalConditions() ...
[18:05:14.174]  - include = ‘immediateCondition’
[18:05:14.174]  - exclude = 
[18:05:14.175]  - resignal = FALSE
[18:05:14.175]  - Number of conditions: 1
[18:05:14.175] signalConditions() ... done
[18:05:14.175] Future state: ‘finished’
[18:05:14.175] signalConditions() ...
[18:05:14.176]  - include = ‘condition’
[18:05:14.176]  - exclude = ‘immediateCondition’
[18:05:14.176]  - resignal = TRUE
[18:05:14.176]  - Number of conditions: 1
[18:05:14.176]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[18:05:14.177] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[18:05:14.183] getGlobalsAndPackages() ...
[18:05:14.183] Searching for globals...
[18:05:14.184] - globals found: [1] ‘{’
[18:05:14.185] Searching for globals ... DONE
[18:05:14.185] Resolving globals: FALSE
[18:05:14.186] 
[18:05:14.186] 
[18:05:14.186] getGlobalsAndPackages() ... DONE
[18:05:14.187] Packages needed by the future expression (n = 0): <none>
[18:05:14.187] Packages needed by future strategies (n = 0): <none>
[18:05:14.188] {
[18:05:14.188]     {
[18:05:14.188]         {
[18:05:14.188]             ...future.startTime <- base::Sys.time()
[18:05:14.188]             {
[18:05:14.188]                 {
[18:05:14.188]                   {
[18:05:14.188]                     base::local({
[18:05:14.188]                       has_future <- base::requireNamespace("future", 
[18:05:14.188]                         quietly = TRUE)
[18:05:14.188]                       if (has_future) {
[18:05:14.188]                         ns <- base::getNamespace("future")
[18:05:14.188]                         version <- ns[[".package"]][["version"]]
[18:05:14.188]                         if (is.null(version)) 
[18:05:14.188]                           version <- utils::packageVersion("future")
[18:05:14.188]                       }
[18:05:14.188]                       else {
[18:05:14.188]                         version <- NULL
[18:05:14.188]                       }
[18:05:14.188]                       if (!has_future || version < "1.8.0") {
[18:05:14.188]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.188]                           "", base::R.version$version.string), 
[18:05:14.188]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.188]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.188]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.188]                             "release", "version")], collapse = " "), 
[18:05:14.188]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.188]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.188]                           info)
[18:05:14.188]                         info <- base::paste(info, collapse = "; ")
[18:05:14.188]                         if (!has_future) {
[18:05:14.188]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.188]                             info)
[18:05:14.188]                         }
[18:05:14.188]                         else {
[18:05:14.188]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.188]                             info, version)
[18:05:14.188]                         }
[18:05:14.188]                         base::stop(msg)
[18:05:14.188]                       }
[18:05:14.188]                     })
[18:05:14.188]                   }
[18:05:14.188]                   ...future.strategy.old <- future::plan("list")
[18:05:14.188]                   options(future.plan = NULL)
[18:05:14.188]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.188]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.188]                 }
[18:05:14.188]                 ...future.workdir <- getwd()
[18:05:14.188]             }
[18:05:14.188]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.188]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.188]         }
[18:05:14.188]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.188]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.188]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.188]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.188]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.188]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.188]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.188]             base::names(...future.oldOptions))
[18:05:14.188]     }
[18:05:14.188]     if (FALSE) {
[18:05:14.188]     }
[18:05:14.188]     else {
[18:05:14.188]         if (TRUE) {
[18:05:14.188]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.188]                 open = "w")
[18:05:14.188]         }
[18:05:14.188]         else {
[18:05:14.188]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.188]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.188]         }
[18:05:14.188]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.188]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.188]             base::sink(type = "output", split = FALSE)
[18:05:14.188]             base::close(...future.stdout)
[18:05:14.188]         }, add = TRUE)
[18:05:14.188]     }
[18:05:14.188]     ...future.frame <- base::sys.nframe()
[18:05:14.188]     ...future.conditions <- base::list()
[18:05:14.188]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.188]     if (FALSE) {
[18:05:14.188]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.188]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.188]     }
[18:05:14.188]     ...future.result <- base::tryCatch({
[18:05:14.188]         base::withCallingHandlers({
[18:05:14.188]             ...future.value <- base::withVisible(base::local({
[18:05:14.188]                 42L
[18:05:14.188]             }))
[18:05:14.188]             future::FutureResult(value = ...future.value$value, 
[18:05:14.188]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.188]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.188]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.188]                     ...future.globalenv.names))
[18:05:14.188]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.188]         }, condition = base::local({
[18:05:14.188]             c <- base::c
[18:05:14.188]             inherits <- base::inherits
[18:05:14.188]             invokeRestart <- base::invokeRestart
[18:05:14.188]             length <- base::length
[18:05:14.188]             list <- base::list
[18:05:14.188]             seq.int <- base::seq.int
[18:05:14.188]             signalCondition <- base::signalCondition
[18:05:14.188]             sys.calls <- base::sys.calls
[18:05:14.188]             `[[` <- base::`[[`
[18:05:14.188]             `+` <- base::`+`
[18:05:14.188]             `<<-` <- base::`<<-`
[18:05:14.188]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.188]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.188]                   3L)]
[18:05:14.188]             }
[18:05:14.188]             function(cond) {
[18:05:14.188]                 is_error <- inherits(cond, "error")
[18:05:14.188]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.188]                   NULL)
[18:05:14.188]                 if (is_error) {
[18:05:14.188]                   sessionInformation <- function() {
[18:05:14.188]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.188]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.188]                       search = base::search(), system = base::Sys.info())
[18:05:14.188]                   }
[18:05:14.188]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.188]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.188]                     cond$call), session = sessionInformation(), 
[18:05:14.188]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.188]                   signalCondition(cond)
[18:05:14.188]                 }
[18:05:14.188]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.188]                 "immediateCondition"))) {
[18:05:14.188]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.188]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.188]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.188]                   if (TRUE && !signal) {
[18:05:14.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.188]                     {
[18:05:14.188]                       inherits <- base::inherits
[18:05:14.188]                       invokeRestart <- base::invokeRestart
[18:05:14.188]                       is.null <- base::is.null
[18:05:14.188]                       muffled <- FALSE
[18:05:14.188]                       if (inherits(cond, "message")) {
[18:05:14.188]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.188]                         if (muffled) 
[18:05:14.188]                           invokeRestart("muffleMessage")
[18:05:14.188]                       }
[18:05:14.188]                       else if (inherits(cond, "warning")) {
[18:05:14.188]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.188]                         if (muffled) 
[18:05:14.188]                           invokeRestart("muffleWarning")
[18:05:14.188]                       }
[18:05:14.188]                       else if (inherits(cond, "condition")) {
[18:05:14.188]                         if (!is.null(pattern)) {
[18:05:14.188]                           computeRestarts <- base::computeRestarts
[18:05:14.188]                           grepl <- base::grepl
[18:05:14.188]                           restarts <- computeRestarts(cond)
[18:05:14.188]                           for (restart in restarts) {
[18:05:14.188]                             name <- restart$name
[18:05:14.188]                             if (is.null(name)) 
[18:05:14.188]                               next
[18:05:14.188]                             if (!grepl(pattern, name)) 
[18:05:14.188]                               next
[18:05:14.188]                             invokeRestart(restart)
[18:05:14.188]                             muffled <- TRUE
[18:05:14.188]                             break
[18:05:14.188]                           }
[18:05:14.188]                         }
[18:05:14.188]                       }
[18:05:14.188]                       invisible(muffled)
[18:05:14.188]                     }
[18:05:14.188]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.188]                   }
[18:05:14.188]                 }
[18:05:14.188]                 else {
[18:05:14.188]                   if (TRUE) {
[18:05:14.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.188]                     {
[18:05:14.188]                       inherits <- base::inherits
[18:05:14.188]                       invokeRestart <- base::invokeRestart
[18:05:14.188]                       is.null <- base::is.null
[18:05:14.188]                       muffled <- FALSE
[18:05:14.188]                       if (inherits(cond, "message")) {
[18:05:14.188]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.188]                         if (muffled) 
[18:05:14.188]                           invokeRestart("muffleMessage")
[18:05:14.188]                       }
[18:05:14.188]                       else if (inherits(cond, "warning")) {
[18:05:14.188]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.188]                         if (muffled) 
[18:05:14.188]                           invokeRestart("muffleWarning")
[18:05:14.188]                       }
[18:05:14.188]                       else if (inherits(cond, "condition")) {
[18:05:14.188]                         if (!is.null(pattern)) {
[18:05:14.188]                           computeRestarts <- base::computeRestarts
[18:05:14.188]                           grepl <- base::grepl
[18:05:14.188]                           restarts <- computeRestarts(cond)
[18:05:14.188]                           for (restart in restarts) {
[18:05:14.188]                             name <- restart$name
[18:05:14.188]                             if (is.null(name)) 
[18:05:14.188]                               next
[18:05:14.188]                             if (!grepl(pattern, name)) 
[18:05:14.188]                               next
[18:05:14.188]                             invokeRestart(restart)
[18:05:14.188]                             muffled <- TRUE
[18:05:14.188]                             break
[18:05:14.188]                           }
[18:05:14.188]                         }
[18:05:14.188]                       }
[18:05:14.188]                       invisible(muffled)
[18:05:14.188]                     }
[18:05:14.188]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.188]                   }
[18:05:14.188]                 }
[18:05:14.188]             }
[18:05:14.188]         }))
[18:05:14.188]     }, error = function(ex) {
[18:05:14.188]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.188]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.188]                 ...future.rng), started = ...future.startTime, 
[18:05:14.188]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.188]             version = "1.8"), class = "FutureResult")
[18:05:14.188]     }, finally = {
[18:05:14.188]         if (!identical(...future.workdir, getwd())) 
[18:05:14.188]             setwd(...future.workdir)
[18:05:14.188]         {
[18:05:14.188]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.188]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.188]             }
[18:05:14.188]             base::options(...future.oldOptions)
[18:05:14.188]             if (.Platform$OS.type == "windows") {
[18:05:14.188]                 old_names <- names(...future.oldEnvVars)
[18:05:14.188]                 envs <- base::Sys.getenv()
[18:05:14.188]                 names <- names(envs)
[18:05:14.188]                 common <- intersect(names, old_names)
[18:05:14.188]                 added <- setdiff(names, old_names)
[18:05:14.188]                 removed <- setdiff(old_names, names)
[18:05:14.188]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.188]                   envs[common]]
[18:05:14.188]                 NAMES <- toupper(changed)
[18:05:14.188]                 args <- list()
[18:05:14.188]                 for (kk in seq_along(NAMES)) {
[18:05:14.188]                   name <- changed[[kk]]
[18:05:14.188]                   NAME <- NAMES[[kk]]
[18:05:14.188]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.188]                     next
[18:05:14.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.188]                 }
[18:05:14.188]                 NAMES <- toupper(added)
[18:05:14.188]                 for (kk in seq_along(NAMES)) {
[18:05:14.188]                   name <- added[[kk]]
[18:05:14.188]                   NAME <- NAMES[[kk]]
[18:05:14.188]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.188]                     next
[18:05:14.188]                   args[[name]] <- ""
[18:05:14.188]                 }
[18:05:14.188]                 NAMES <- toupper(removed)
[18:05:14.188]                 for (kk in seq_along(NAMES)) {
[18:05:14.188]                   name <- removed[[kk]]
[18:05:14.188]                   NAME <- NAMES[[kk]]
[18:05:14.188]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.188]                     next
[18:05:14.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.188]                 }
[18:05:14.188]                 if (length(args) > 0) 
[18:05:14.188]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.188]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.188]             }
[18:05:14.188]             else {
[18:05:14.188]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.188]             }
[18:05:14.188]             {
[18:05:14.188]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.188]                   0L) {
[18:05:14.188]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.188]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.188]                   base::options(opts)
[18:05:14.188]                 }
[18:05:14.188]                 {
[18:05:14.188]                   {
[18:05:14.188]                     NULL
[18:05:14.188]                     RNGkind("Mersenne-Twister")
[18:05:14.188]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.188]                       inherits = FALSE)
[18:05:14.188]                   }
[18:05:14.188]                   options(future.plan = NULL)
[18:05:14.188]                   if (is.na(NA_character_)) 
[18:05:14.188]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.188]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.188]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.188]                     .init = FALSE)
[18:05:14.188]                 }
[18:05:14.188]             }
[18:05:14.188]         }
[18:05:14.188]     })
[18:05:14.188]     if (TRUE) {
[18:05:14.188]         base::sink(type = "output", split = FALSE)
[18:05:14.188]         if (TRUE) {
[18:05:14.188]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.188]         }
[18:05:14.188]         else {
[18:05:14.188]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.188]         }
[18:05:14.188]         base::close(...future.stdout)
[18:05:14.188]         ...future.stdout <- NULL
[18:05:14.188]     }
[18:05:14.188]     ...future.result$conditions <- ...future.conditions
[18:05:14.188]     ...future.result$finished <- base::Sys.time()
[18:05:14.188]     ...future.result
[18:05:14.188] }
[18:05:14.192] plan(): Setting new future strategy stack:
[18:05:14.192] List of future strategies:
[18:05:14.192] 1. sequential:
[18:05:14.192]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.192]    - tweaked: FALSE
[18:05:14.192]    - call: NULL
[18:05:14.193] plan(): nbrOfWorkers() = 1
[18:05:14.195] plan(): Setting new future strategy stack:
[18:05:14.195] List of future strategies:
[18:05:14.195] 1. multicore:
[18:05:14.195]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.195]    - tweaked: FALSE
[18:05:14.195]    - call: plan(multicore)
[18:05:14.201] plan(): nbrOfWorkers() = 1
[18:05:14.202] SequentialFuture started (and completed)
[18:05:14.202] resolved() for ‘SequentialFuture’ ...
[18:05:14.202] - state: ‘finished’
[18:05:14.203] - run: TRUE
[18:05:14.203] - result: ‘FutureResult’
[18:05:14.203] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = TRUE) with globals
[18:05:14.209] getGlobalsAndPackages() ...
[18:05:14.210] Searching for globals...
[18:05:14.214] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[18:05:14.214] Searching for globals ... DONE
[18:05:14.215] Resolving globals: FALSE
[18:05:14.216] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:14.217] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:05:14.217] - globals: [1] ‘a’
[18:05:14.218] 
[18:05:14.218] getGlobalsAndPackages() ... DONE
[18:05:14.218] Packages needed by the future expression (n = 0): <none>
[18:05:14.219] Packages needed by future strategies (n = 0): <none>
[18:05:14.220] {
[18:05:14.220]     {
[18:05:14.220]         {
[18:05:14.220]             ...future.startTime <- base::Sys.time()
[18:05:14.220]             {
[18:05:14.220]                 {
[18:05:14.220]                   {
[18:05:14.220]                     base::local({
[18:05:14.220]                       has_future <- base::requireNamespace("future", 
[18:05:14.220]                         quietly = TRUE)
[18:05:14.220]                       if (has_future) {
[18:05:14.220]                         ns <- base::getNamespace("future")
[18:05:14.220]                         version <- ns[[".package"]][["version"]]
[18:05:14.220]                         if (is.null(version)) 
[18:05:14.220]                           version <- utils::packageVersion("future")
[18:05:14.220]                       }
[18:05:14.220]                       else {
[18:05:14.220]                         version <- NULL
[18:05:14.220]                       }
[18:05:14.220]                       if (!has_future || version < "1.8.0") {
[18:05:14.220]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.220]                           "", base::R.version$version.string), 
[18:05:14.220]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.220]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.220]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.220]                             "release", "version")], collapse = " "), 
[18:05:14.220]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.220]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.220]                           info)
[18:05:14.220]                         info <- base::paste(info, collapse = "; ")
[18:05:14.220]                         if (!has_future) {
[18:05:14.220]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.220]                             info)
[18:05:14.220]                         }
[18:05:14.220]                         else {
[18:05:14.220]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.220]                             info, version)
[18:05:14.220]                         }
[18:05:14.220]                         base::stop(msg)
[18:05:14.220]                       }
[18:05:14.220]                     })
[18:05:14.220]                   }
[18:05:14.220]                   ...future.strategy.old <- future::plan("list")
[18:05:14.220]                   options(future.plan = NULL)
[18:05:14.220]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.220]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.220]                 }
[18:05:14.220]                 ...future.workdir <- getwd()
[18:05:14.220]             }
[18:05:14.220]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.220]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.220]         }
[18:05:14.220]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.220]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.220]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.220]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.220]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.220]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.220]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.220]             base::names(...future.oldOptions))
[18:05:14.220]     }
[18:05:14.220]     if (FALSE) {
[18:05:14.220]     }
[18:05:14.220]     else {
[18:05:14.220]         if (TRUE) {
[18:05:14.220]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.220]                 open = "w")
[18:05:14.220]         }
[18:05:14.220]         else {
[18:05:14.220]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.220]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.220]         }
[18:05:14.220]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.220]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.220]             base::sink(type = "output", split = FALSE)
[18:05:14.220]             base::close(...future.stdout)
[18:05:14.220]         }, add = TRUE)
[18:05:14.220]     }
[18:05:14.220]     ...future.frame <- base::sys.nframe()
[18:05:14.220]     ...future.conditions <- base::list()
[18:05:14.220]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.220]     if (FALSE) {
[18:05:14.220]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.220]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.220]     }
[18:05:14.220]     ...future.result <- base::tryCatch({
[18:05:14.220]         base::withCallingHandlers({
[18:05:14.220]             ...future.value <- base::withVisible(base::local({
[18:05:14.220]                 b <- 3
[18:05:14.220]                 c <- 2
[18:05:14.220]                 a * b * c
[18:05:14.220]             }))
[18:05:14.220]             future::FutureResult(value = ...future.value$value, 
[18:05:14.220]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.220]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.220]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.220]                     ...future.globalenv.names))
[18:05:14.220]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.220]         }, condition = base::local({
[18:05:14.220]             c <- base::c
[18:05:14.220]             inherits <- base::inherits
[18:05:14.220]             invokeRestart <- base::invokeRestart
[18:05:14.220]             length <- base::length
[18:05:14.220]             list <- base::list
[18:05:14.220]             seq.int <- base::seq.int
[18:05:14.220]             signalCondition <- base::signalCondition
[18:05:14.220]             sys.calls <- base::sys.calls
[18:05:14.220]             `[[` <- base::`[[`
[18:05:14.220]             `+` <- base::`+`
[18:05:14.220]             `<<-` <- base::`<<-`
[18:05:14.220]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.220]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.220]                   3L)]
[18:05:14.220]             }
[18:05:14.220]             function(cond) {
[18:05:14.220]                 is_error <- inherits(cond, "error")
[18:05:14.220]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.220]                   NULL)
[18:05:14.220]                 if (is_error) {
[18:05:14.220]                   sessionInformation <- function() {
[18:05:14.220]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.220]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.220]                       search = base::search(), system = base::Sys.info())
[18:05:14.220]                   }
[18:05:14.220]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.220]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.220]                     cond$call), session = sessionInformation(), 
[18:05:14.220]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.220]                   signalCondition(cond)
[18:05:14.220]                 }
[18:05:14.220]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.220]                 "immediateCondition"))) {
[18:05:14.220]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.220]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.220]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.220]                   if (TRUE && !signal) {
[18:05:14.220]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.220]                     {
[18:05:14.220]                       inherits <- base::inherits
[18:05:14.220]                       invokeRestart <- base::invokeRestart
[18:05:14.220]                       is.null <- base::is.null
[18:05:14.220]                       muffled <- FALSE
[18:05:14.220]                       if (inherits(cond, "message")) {
[18:05:14.220]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.220]                         if (muffled) 
[18:05:14.220]                           invokeRestart("muffleMessage")
[18:05:14.220]                       }
[18:05:14.220]                       else if (inherits(cond, "warning")) {
[18:05:14.220]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.220]                         if (muffled) 
[18:05:14.220]                           invokeRestart("muffleWarning")
[18:05:14.220]                       }
[18:05:14.220]                       else if (inherits(cond, "condition")) {
[18:05:14.220]                         if (!is.null(pattern)) {
[18:05:14.220]                           computeRestarts <- base::computeRestarts
[18:05:14.220]                           grepl <- base::grepl
[18:05:14.220]                           restarts <- computeRestarts(cond)
[18:05:14.220]                           for (restart in restarts) {
[18:05:14.220]                             name <- restart$name
[18:05:14.220]                             if (is.null(name)) 
[18:05:14.220]                               next
[18:05:14.220]                             if (!grepl(pattern, name)) 
[18:05:14.220]                               next
[18:05:14.220]                             invokeRestart(restart)
[18:05:14.220]                             muffled <- TRUE
[18:05:14.220]                             break
[18:05:14.220]                           }
[18:05:14.220]                         }
[18:05:14.220]                       }
[18:05:14.220]                       invisible(muffled)
[18:05:14.220]                     }
[18:05:14.220]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.220]                   }
[18:05:14.220]                 }
[18:05:14.220]                 else {
[18:05:14.220]                   if (TRUE) {
[18:05:14.220]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.220]                     {
[18:05:14.220]                       inherits <- base::inherits
[18:05:14.220]                       invokeRestart <- base::invokeRestart
[18:05:14.220]                       is.null <- base::is.null
[18:05:14.220]                       muffled <- FALSE
[18:05:14.220]                       if (inherits(cond, "message")) {
[18:05:14.220]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.220]                         if (muffled) 
[18:05:14.220]                           invokeRestart("muffleMessage")
[18:05:14.220]                       }
[18:05:14.220]                       else if (inherits(cond, "warning")) {
[18:05:14.220]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.220]                         if (muffled) 
[18:05:14.220]                           invokeRestart("muffleWarning")
[18:05:14.220]                       }
[18:05:14.220]                       else if (inherits(cond, "condition")) {
[18:05:14.220]                         if (!is.null(pattern)) {
[18:05:14.220]                           computeRestarts <- base::computeRestarts
[18:05:14.220]                           grepl <- base::grepl
[18:05:14.220]                           restarts <- computeRestarts(cond)
[18:05:14.220]                           for (restart in restarts) {
[18:05:14.220]                             name <- restart$name
[18:05:14.220]                             if (is.null(name)) 
[18:05:14.220]                               next
[18:05:14.220]                             if (!grepl(pattern, name)) 
[18:05:14.220]                               next
[18:05:14.220]                             invokeRestart(restart)
[18:05:14.220]                             muffled <- TRUE
[18:05:14.220]                             break
[18:05:14.220]                           }
[18:05:14.220]                         }
[18:05:14.220]                       }
[18:05:14.220]                       invisible(muffled)
[18:05:14.220]                     }
[18:05:14.220]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.220]                   }
[18:05:14.220]                 }
[18:05:14.220]             }
[18:05:14.220]         }))
[18:05:14.220]     }, error = function(ex) {
[18:05:14.220]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.220]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.220]                 ...future.rng), started = ...future.startTime, 
[18:05:14.220]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.220]             version = "1.8"), class = "FutureResult")
[18:05:14.220]     }, finally = {
[18:05:14.220]         if (!identical(...future.workdir, getwd())) 
[18:05:14.220]             setwd(...future.workdir)
[18:05:14.220]         {
[18:05:14.220]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.220]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.220]             }
[18:05:14.220]             base::options(...future.oldOptions)
[18:05:14.220]             if (.Platform$OS.type == "windows") {
[18:05:14.220]                 old_names <- names(...future.oldEnvVars)
[18:05:14.220]                 envs <- base::Sys.getenv()
[18:05:14.220]                 names <- names(envs)
[18:05:14.220]                 common <- intersect(names, old_names)
[18:05:14.220]                 added <- setdiff(names, old_names)
[18:05:14.220]                 removed <- setdiff(old_names, names)
[18:05:14.220]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.220]                   envs[common]]
[18:05:14.220]                 NAMES <- toupper(changed)
[18:05:14.220]                 args <- list()
[18:05:14.220]                 for (kk in seq_along(NAMES)) {
[18:05:14.220]                   name <- changed[[kk]]
[18:05:14.220]                   NAME <- NAMES[[kk]]
[18:05:14.220]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.220]                     next
[18:05:14.220]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.220]                 }
[18:05:14.220]                 NAMES <- toupper(added)
[18:05:14.220]                 for (kk in seq_along(NAMES)) {
[18:05:14.220]                   name <- added[[kk]]
[18:05:14.220]                   NAME <- NAMES[[kk]]
[18:05:14.220]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.220]                     next
[18:05:14.220]                   args[[name]] <- ""
[18:05:14.220]                 }
[18:05:14.220]                 NAMES <- toupper(removed)
[18:05:14.220]                 for (kk in seq_along(NAMES)) {
[18:05:14.220]                   name <- removed[[kk]]
[18:05:14.220]                   NAME <- NAMES[[kk]]
[18:05:14.220]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.220]                     next
[18:05:14.220]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.220]                 }
[18:05:14.220]                 if (length(args) > 0) 
[18:05:14.220]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.220]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.220]             }
[18:05:14.220]             else {
[18:05:14.220]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.220]             }
[18:05:14.220]             {
[18:05:14.220]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.220]                   0L) {
[18:05:14.220]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.220]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.220]                   base::options(opts)
[18:05:14.220]                 }
[18:05:14.220]                 {
[18:05:14.220]                   {
[18:05:14.220]                     NULL
[18:05:14.220]                     RNGkind("Mersenne-Twister")
[18:05:14.220]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.220]                       inherits = FALSE)
[18:05:14.220]                   }
[18:05:14.220]                   options(future.plan = NULL)
[18:05:14.220]                   if (is.na(NA_character_)) 
[18:05:14.220]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.220]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.220]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.220]                     .init = FALSE)
[18:05:14.220]                 }
[18:05:14.220]             }
[18:05:14.220]         }
[18:05:14.220]     })
[18:05:14.220]     if (TRUE) {
[18:05:14.220]         base::sink(type = "output", split = FALSE)
[18:05:14.220]         if (TRUE) {
[18:05:14.220]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.220]         }
[18:05:14.220]         else {
[18:05:14.220]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.220]         }
[18:05:14.220]         base::close(...future.stdout)
[18:05:14.220]         ...future.stdout <- NULL
[18:05:14.220]     }
[18:05:14.220]     ...future.result$conditions <- ...future.conditions
[18:05:14.220]     ...future.result$finished <- base::Sys.time()
[18:05:14.220]     ...future.result
[18:05:14.220] }
[18:05:14.223] assign_globals() ...
[18:05:14.224] List of 1
[18:05:14.224]  $ a: num 0
[18:05:14.224]  - attr(*, "where")=List of 1
[18:05:14.224]   ..$ a:<environment: R_EmptyEnv> 
[18:05:14.224]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:14.224]  - attr(*, "resolved")= logi FALSE
[18:05:14.224]  - attr(*, "total_size")= num 56
[18:05:14.234] - copied ‘a’ to environment
[18:05:14.234] assign_globals() ... done
[18:05:14.235] plan(): Setting new future strategy stack:
[18:05:14.235] List of future strategies:
[18:05:14.235] 1. sequential:
[18:05:14.235]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.235]    - tweaked: FALSE
[18:05:14.235]    - call: NULL
[18:05:14.236] plan(): nbrOfWorkers() = 1
[18:05:14.237] plan(): Setting new future strategy stack:
[18:05:14.238] List of future strategies:
[18:05:14.238] 1. multicore:
[18:05:14.238]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.238]    - tweaked: FALSE
[18:05:14.238]    - call: plan(multicore)
[18:05:14.244] plan(): nbrOfWorkers() = 1
[18:05:14.244] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[18:05:14.253] getGlobalsAndPackages() ...
[18:05:14.253] Searching for globals...
[18:05:14.254] - globals found: [2] ‘{’, ‘ii’
[18:05:14.255] Searching for globals ... DONE
[18:05:14.255] Resolving globals: FALSE
[18:05:14.256] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:14.257] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[18:05:14.257] - globals: [1] ‘ii’
[18:05:14.257] 
[18:05:14.257] getGlobalsAndPackages() ... DONE
[18:05:14.261] Packages needed by the future expression (n = 0): <none>
[18:05:14.261] Packages needed by future strategies (n = 0): <none>
[18:05:14.262] {
[18:05:14.262]     {
[18:05:14.262]         {
[18:05:14.262]             ...future.startTime <- base::Sys.time()
[18:05:14.262]             {
[18:05:14.262]                 {
[18:05:14.262]                   {
[18:05:14.262]                     base::local({
[18:05:14.262]                       has_future <- base::requireNamespace("future", 
[18:05:14.262]                         quietly = TRUE)
[18:05:14.262]                       if (has_future) {
[18:05:14.262]                         ns <- base::getNamespace("future")
[18:05:14.262]                         version <- ns[[".package"]][["version"]]
[18:05:14.262]                         if (is.null(version)) 
[18:05:14.262]                           version <- utils::packageVersion("future")
[18:05:14.262]                       }
[18:05:14.262]                       else {
[18:05:14.262]                         version <- NULL
[18:05:14.262]                       }
[18:05:14.262]                       if (!has_future || version < "1.8.0") {
[18:05:14.262]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.262]                           "", base::R.version$version.string), 
[18:05:14.262]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.262]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.262]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.262]                             "release", "version")], collapse = " "), 
[18:05:14.262]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.262]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.262]                           info)
[18:05:14.262]                         info <- base::paste(info, collapse = "; ")
[18:05:14.262]                         if (!has_future) {
[18:05:14.262]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.262]                             info)
[18:05:14.262]                         }
[18:05:14.262]                         else {
[18:05:14.262]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.262]                             info, version)
[18:05:14.262]                         }
[18:05:14.262]                         base::stop(msg)
[18:05:14.262]                       }
[18:05:14.262]                     })
[18:05:14.262]                   }
[18:05:14.262]                   ...future.strategy.old <- future::plan("list")
[18:05:14.262]                   options(future.plan = NULL)
[18:05:14.262]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.262]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.262]                 }
[18:05:14.262]                 ...future.workdir <- getwd()
[18:05:14.262]             }
[18:05:14.262]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.262]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.262]         }
[18:05:14.262]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.262]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.262]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.262]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.262]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.262]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.262]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.262]             base::names(...future.oldOptions))
[18:05:14.262]     }
[18:05:14.262]     if (FALSE) {
[18:05:14.262]     }
[18:05:14.262]     else {
[18:05:14.262]         if (TRUE) {
[18:05:14.262]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.262]                 open = "w")
[18:05:14.262]         }
[18:05:14.262]         else {
[18:05:14.262]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.262]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.262]         }
[18:05:14.262]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.262]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.262]             base::sink(type = "output", split = FALSE)
[18:05:14.262]             base::close(...future.stdout)
[18:05:14.262]         }, add = TRUE)
[18:05:14.262]     }
[18:05:14.262]     ...future.frame <- base::sys.nframe()
[18:05:14.262]     ...future.conditions <- base::list()
[18:05:14.262]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.262]     if (FALSE) {
[18:05:14.262]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.262]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.262]     }
[18:05:14.262]     ...future.result <- base::tryCatch({
[18:05:14.262]         base::withCallingHandlers({
[18:05:14.262]             ...future.value <- base::withVisible(base::local({
[18:05:14.262]                 ii
[18:05:14.262]             }))
[18:05:14.262]             future::FutureResult(value = ...future.value$value, 
[18:05:14.262]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.262]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.262]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.262]                     ...future.globalenv.names))
[18:05:14.262]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.262]         }, condition = base::local({
[18:05:14.262]             c <- base::c
[18:05:14.262]             inherits <- base::inherits
[18:05:14.262]             invokeRestart <- base::invokeRestart
[18:05:14.262]             length <- base::length
[18:05:14.262]             list <- base::list
[18:05:14.262]             seq.int <- base::seq.int
[18:05:14.262]             signalCondition <- base::signalCondition
[18:05:14.262]             sys.calls <- base::sys.calls
[18:05:14.262]             `[[` <- base::`[[`
[18:05:14.262]             `+` <- base::`+`
[18:05:14.262]             `<<-` <- base::`<<-`
[18:05:14.262]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.262]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.262]                   3L)]
[18:05:14.262]             }
[18:05:14.262]             function(cond) {
[18:05:14.262]                 is_error <- inherits(cond, "error")
[18:05:14.262]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.262]                   NULL)
[18:05:14.262]                 if (is_error) {
[18:05:14.262]                   sessionInformation <- function() {
[18:05:14.262]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.262]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.262]                       search = base::search(), system = base::Sys.info())
[18:05:14.262]                   }
[18:05:14.262]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.262]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.262]                     cond$call), session = sessionInformation(), 
[18:05:14.262]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.262]                   signalCondition(cond)
[18:05:14.262]                 }
[18:05:14.262]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.262]                 "immediateCondition"))) {
[18:05:14.262]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.262]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.262]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.262]                   if (TRUE && !signal) {
[18:05:14.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.262]                     {
[18:05:14.262]                       inherits <- base::inherits
[18:05:14.262]                       invokeRestart <- base::invokeRestart
[18:05:14.262]                       is.null <- base::is.null
[18:05:14.262]                       muffled <- FALSE
[18:05:14.262]                       if (inherits(cond, "message")) {
[18:05:14.262]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.262]                         if (muffled) 
[18:05:14.262]                           invokeRestart("muffleMessage")
[18:05:14.262]                       }
[18:05:14.262]                       else if (inherits(cond, "warning")) {
[18:05:14.262]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.262]                         if (muffled) 
[18:05:14.262]                           invokeRestart("muffleWarning")
[18:05:14.262]                       }
[18:05:14.262]                       else if (inherits(cond, "condition")) {
[18:05:14.262]                         if (!is.null(pattern)) {
[18:05:14.262]                           computeRestarts <- base::computeRestarts
[18:05:14.262]                           grepl <- base::grepl
[18:05:14.262]                           restarts <- computeRestarts(cond)
[18:05:14.262]                           for (restart in restarts) {
[18:05:14.262]                             name <- restart$name
[18:05:14.262]                             if (is.null(name)) 
[18:05:14.262]                               next
[18:05:14.262]                             if (!grepl(pattern, name)) 
[18:05:14.262]                               next
[18:05:14.262]                             invokeRestart(restart)
[18:05:14.262]                             muffled <- TRUE
[18:05:14.262]                             break
[18:05:14.262]                           }
[18:05:14.262]                         }
[18:05:14.262]                       }
[18:05:14.262]                       invisible(muffled)
[18:05:14.262]                     }
[18:05:14.262]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.262]                   }
[18:05:14.262]                 }
[18:05:14.262]                 else {
[18:05:14.262]                   if (TRUE) {
[18:05:14.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.262]                     {
[18:05:14.262]                       inherits <- base::inherits
[18:05:14.262]                       invokeRestart <- base::invokeRestart
[18:05:14.262]                       is.null <- base::is.null
[18:05:14.262]                       muffled <- FALSE
[18:05:14.262]                       if (inherits(cond, "message")) {
[18:05:14.262]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.262]                         if (muffled) 
[18:05:14.262]                           invokeRestart("muffleMessage")
[18:05:14.262]                       }
[18:05:14.262]                       else if (inherits(cond, "warning")) {
[18:05:14.262]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.262]                         if (muffled) 
[18:05:14.262]                           invokeRestart("muffleWarning")
[18:05:14.262]                       }
[18:05:14.262]                       else if (inherits(cond, "condition")) {
[18:05:14.262]                         if (!is.null(pattern)) {
[18:05:14.262]                           computeRestarts <- base::computeRestarts
[18:05:14.262]                           grepl <- base::grepl
[18:05:14.262]                           restarts <- computeRestarts(cond)
[18:05:14.262]                           for (restart in restarts) {
[18:05:14.262]                             name <- restart$name
[18:05:14.262]                             if (is.null(name)) 
[18:05:14.262]                               next
[18:05:14.262]                             if (!grepl(pattern, name)) 
[18:05:14.262]                               next
[18:05:14.262]                             invokeRestart(restart)
[18:05:14.262]                             muffled <- TRUE
[18:05:14.262]                             break
[18:05:14.262]                           }
[18:05:14.262]                         }
[18:05:14.262]                       }
[18:05:14.262]                       invisible(muffled)
[18:05:14.262]                     }
[18:05:14.262]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.262]                   }
[18:05:14.262]                 }
[18:05:14.262]             }
[18:05:14.262]         }))
[18:05:14.262]     }, error = function(ex) {
[18:05:14.262]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.262]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.262]                 ...future.rng), started = ...future.startTime, 
[18:05:14.262]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.262]             version = "1.8"), class = "FutureResult")
[18:05:14.262]     }, finally = {
[18:05:14.262]         if (!identical(...future.workdir, getwd())) 
[18:05:14.262]             setwd(...future.workdir)
[18:05:14.262]         {
[18:05:14.262]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.262]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.262]             }
[18:05:14.262]             base::options(...future.oldOptions)
[18:05:14.262]             if (.Platform$OS.type == "windows") {
[18:05:14.262]                 old_names <- names(...future.oldEnvVars)
[18:05:14.262]                 envs <- base::Sys.getenv()
[18:05:14.262]                 names <- names(envs)
[18:05:14.262]                 common <- intersect(names, old_names)
[18:05:14.262]                 added <- setdiff(names, old_names)
[18:05:14.262]                 removed <- setdiff(old_names, names)
[18:05:14.262]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.262]                   envs[common]]
[18:05:14.262]                 NAMES <- toupper(changed)
[18:05:14.262]                 args <- list()
[18:05:14.262]                 for (kk in seq_along(NAMES)) {
[18:05:14.262]                   name <- changed[[kk]]
[18:05:14.262]                   NAME <- NAMES[[kk]]
[18:05:14.262]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.262]                     next
[18:05:14.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.262]                 }
[18:05:14.262]                 NAMES <- toupper(added)
[18:05:14.262]                 for (kk in seq_along(NAMES)) {
[18:05:14.262]                   name <- added[[kk]]
[18:05:14.262]                   NAME <- NAMES[[kk]]
[18:05:14.262]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.262]                     next
[18:05:14.262]                   args[[name]] <- ""
[18:05:14.262]                 }
[18:05:14.262]                 NAMES <- toupper(removed)
[18:05:14.262]                 for (kk in seq_along(NAMES)) {
[18:05:14.262]                   name <- removed[[kk]]
[18:05:14.262]                   NAME <- NAMES[[kk]]
[18:05:14.262]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.262]                     next
[18:05:14.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.262]                 }
[18:05:14.262]                 if (length(args) > 0) 
[18:05:14.262]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.262]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.262]             }
[18:05:14.262]             else {
[18:05:14.262]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.262]             }
[18:05:14.262]             {
[18:05:14.262]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.262]                   0L) {
[18:05:14.262]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.262]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.262]                   base::options(opts)
[18:05:14.262]                 }
[18:05:14.262]                 {
[18:05:14.262]                   {
[18:05:14.262]                     NULL
[18:05:14.262]                     RNGkind("Mersenne-Twister")
[18:05:14.262]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.262]                       inherits = FALSE)
[18:05:14.262]                   }
[18:05:14.262]                   options(future.plan = NULL)
[18:05:14.262]                   if (is.na(NA_character_)) 
[18:05:14.262]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.262]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.262]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.262]                     .init = FALSE)
[18:05:14.262]                 }
[18:05:14.262]             }
[18:05:14.262]         }
[18:05:14.262]     })
[18:05:14.262]     if (TRUE) {
[18:05:14.262]         base::sink(type = "output", split = FALSE)
[18:05:14.262]         if (TRUE) {
[18:05:14.262]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.262]         }
[18:05:14.262]         else {
[18:05:14.262]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.262]         }
[18:05:14.262]         base::close(...future.stdout)
[18:05:14.262]         ...future.stdout <- NULL
[18:05:14.262]     }
[18:05:14.262]     ...future.result$conditions <- ...future.conditions
[18:05:14.262]     ...future.result$finished <- base::Sys.time()
[18:05:14.262]     ...future.result
[18:05:14.262] }
[18:05:14.266] assign_globals() ...
[18:05:14.266] List of 1
[18:05:14.266]  $ ii: int 1
[18:05:14.266]  - attr(*, "where")=List of 1
[18:05:14.266]   ..$ ii:<environment: R_EmptyEnv> 
[18:05:14.266]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:14.266]  - attr(*, "resolved")= logi FALSE
[18:05:14.266]  - attr(*, "total_size")= num 56
[18:05:14.271] - copied ‘ii’ to environment
[18:05:14.271] assign_globals() ... done
[18:05:14.272] plan(): Setting new future strategy stack:
[18:05:14.272] List of future strategies:
[18:05:14.272] 1. sequential:
[18:05:14.272]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.272]    - tweaked: FALSE
[18:05:14.272]    - call: NULL
[18:05:14.273] plan(): nbrOfWorkers() = 1
[18:05:14.275] plan(): Setting new future strategy stack:
[18:05:14.275] List of future strategies:
[18:05:14.275] 1. multicore:
[18:05:14.275]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.275]    - tweaked: FALSE
[18:05:14.275]    - call: plan(multicore)
[18:05:14.281] plan(): nbrOfWorkers() = 1
[18:05:14.282] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[18:05:14.288] getGlobalsAndPackages() ...
[18:05:14.288] Searching for globals...
[18:05:14.290] - globals found: [2] ‘{’, ‘ii’
[18:05:14.290] Searching for globals ... DONE
[18:05:14.290] Resolving globals: FALSE
[18:05:14.291] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:14.292] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[18:05:14.292] - globals: [1] ‘ii’
[18:05:14.292] 
[18:05:14.293] getGlobalsAndPackages() ... DONE
[18:05:14.293] Packages needed by the future expression (n = 0): <none>
[18:05:14.294] Packages needed by future strategies (n = 0): <none>
[18:05:14.294] {
[18:05:14.294]     {
[18:05:14.294]         {
[18:05:14.294]             ...future.startTime <- base::Sys.time()
[18:05:14.294]             {
[18:05:14.294]                 {
[18:05:14.294]                   {
[18:05:14.294]                     base::local({
[18:05:14.294]                       has_future <- base::requireNamespace("future", 
[18:05:14.294]                         quietly = TRUE)
[18:05:14.294]                       if (has_future) {
[18:05:14.294]                         ns <- base::getNamespace("future")
[18:05:14.294]                         version <- ns[[".package"]][["version"]]
[18:05:14.294]                         if (is.null(version)) 
[18:05:14.294]                           version <- utils::packageVersion("future")
[18:05:14.294]                       }
[18:05:14.294]                       else {
[18:05:14.294]                         version <- NULL
[18:05:14.294]                       }
[18:05:14.294]                       if (!has_future || version < "1.8.0") {
[18:05:14.294]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.294]                           "", base::R.version$version.string), 
[18:05:14.294]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.294]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.294]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.294]                             "release", "version")], collapse = " "), 
[18:05:14.294]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.294]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.294]                           info)
[18:05:14.294]                         info <- base::paste(info, collapse = "; ")
[18:05:14.294]                         if (!has_future) {
[18:05:14.294]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.294]                             info)
[18:05:14.294]                         }
[18:05:14.294]                         else {
[18:05:14.294]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.294]                             info, version)
[18:05:14.294]                         }
[18:05:14.294]                         base::stop(msg)
[18:05:14.294]                       }
[18:05:14.294]                     })
[18:05:14.294]                   }
[18:05:14.294]                   ...future.strategy.old <- future::plan("list")
[18:05:14.294]                   options(future.plan = NULL)
[18:05:14.294]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.294]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.294]                 }
[18:05:14.294]                 ...future.workdir <- getwd()
[18:05:14.294]             }
[18:05:14.294]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.294]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.294]         }
[18:05:14.294]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.294]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.294]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.294]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.294]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.294]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.294]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.294]             base::names(...future.oldOptions))
[18:05:14.294]     }
[18:05:14.294]     if (FALSE) {
[18:05:14.294]     }
[18:05:14.294]     else {
[18:05:14.294]         if (TRUE) {
[18:05:14.294]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.294]                 open = "w")
[18:05:14.294]         }
[18:05:14.294]         else {
[18:05:14.294]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.294]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.294]         }
[18:05:14.294]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.294]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.294]             base::sink(type = "output", split = FALSE)
[18:05:14.294]             base::close(...future.stdout)
[18:05:14.294]         }, add = TRUE)
[18:05:14.294]     }
[18:05:14.294]     ...future.frame <- base::sys.nframe()
[18:05:14.294]     ...future.conditions <- base::list()
[18:05:14.294]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.294]     if (FALSE) {
[18:05:14.294]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.294]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.294]     }
[18:05:14.294]     ...future.result <- base::tryCatch({
[18:05:14.294]         base::withCallingHandlers({
[18:05:14.294]             ...future.value <- base::withVisible(base::local({
[18:05:14.294]                 ii
[18:05:14.294]             }))
[18:05:14.294]             future::FutureResult(value = ...future.value$value, 
[18:05:14.294]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.294]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.294]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.294]                     ...future.globalenv.names))
[18:05:14.294]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.294]         }, condition = base::local({
[18:05:14.294]             c <- base::c
[18:05:14.294]             inherits <- base::inherits
[18:05:14.294]             invokeRestart <- base::invokeRestart
[18:05:14.294]             length <- base::length
[18:05:14.294]             list <- base::list
[18:05:14.294]             seq.int <- base::seq.int
[18:05:14.294]             signalCondition <- base::signalCondition
[18:05:14.294]             sys.calls <- base::sys.calls
[18:05:14.294]             `[[` <- base::`[[`
[18:05:14.294]             `+` <- base::`+`
[18:05:14.294]             `<<-` <- base::`<<-`
[18:05:14.294]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.294]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.294]                   3L)]
[18:05:14.294]             }
[18:05:14.294]             function(cond) {
[18:05:14.294]                 is_error <- inherits(cond, "error")
[18:05:14.294]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.294]                   NULL)
[18:05:14.294]                 if (is_error) {
[18:05:14.294]                   sessionInformation <- function() {
[18:05:14.294]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.294]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.294]                       search = base::search(), system = base::Sys.info())
[18:05:14.294]                   }
[18:05:14.294]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.294]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.294]                     cond$call), session = sessionInformation(), 
[18:05:14.294]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.294]                   signalCondition(cond)
[18:05:14.294]                 }
[18:05:14.294]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.294]                 "immediateCondition"))) {
[18:05:14.294]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.294]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.294]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.294]                   if (TRUE && !signal) {
[18:05:14.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.294]                     {
[18:05:14.294]                       inherits <- base::inherits
[18:05:14.294]                       invokeRestart <- base::invokeRestart
[18:05:14.294]                       is.null <- base::is.null
[18:05:14.294]                       muffled <- FALSE
[18:05:14.294]                       if (inherits(cond, "message")) {
[18:05:14.294]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.294]                         if (muffled) 
[18:05:14.294]                           invokeRestart("muffleMessage")
[18:05:14.294]                       }
[18:05:14.294]                       else if (inherits(cond, "warning")) {
[18:05:14.294]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.294]                         if (muffled) 
[18:05:14.294]                           invokeRestart("muffleWarning")
[18:05:14.294]                       }
[18:05:14.294]                       else if (inherits(cond, "condition")) {
[18:05:14.294]                         if (!is.null(pattern)) {
[18:05:14.294]                           computeRestarts <- base::computeRestarts
[18:05:14.294]                           grepl <- base::grepl
[18:05:14.294]                           restarts <- computeRestarts(cond)
[18:05:14.294]                           for (restart in restarts) {
[18:05:14.294]                             name <- restart$name
[18:05:14.294]                             if (is.null(name)) 
[18:05:14.294]                               next
[18:05:14.294]                             if (!grepl(pattern, name)) 
[18:05:14.294]                               next
[18:05:14.294]                             invokeRestart(restart)
[18:05:14.294]                             muffled <- TRUE
[18:05:14.294]                             break
[18:05:14.294]                           }
[18:05:14.294]                         }
[18:05:14.294]                       }
[18:05:14.294]                       invisible(muffled)
[18:05:14.294]                     }
[18:05:14.294]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.294]                   }
[18:05:14.294]                 }
[18:05:14.294]                 else {
[18:05:14.294]                   if (TRUE) {
[18:05:14.294]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.294]                     {
[18:05:14.294]                       inherits <- base::inherits
[18:05:14.294]                       invokeRestart <- base::invokeRestart
[18:05:14.294]                       is.null <- base::is.null
[18:05:14.294]                       muffled <- FALSE
[18:05:14.294]                       if (inherits(cond, "message")) {
[18:05:14.294]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.294]                         if (muffled) 
[18:05:14.294]                           invokeRestart("muffleMessage")
[18:05:14.294]                       }
[18:05:14.294]                       else if (inherits(cond, "warning")) {
[18:05:14.294]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.294]                         if (muffled) 
[18:05:14.294]                           invokeRestart("muffleWarning")
[18:05:14.294]                       }
[18:05:14.294]                       else if (inherits(cond, "condition")) {
[18:05:14.294]                         if (!is.null(pattern)) {
[18:05:14.294]                           computeRestarts <- base::computeRestarts
[18:05:14.294]                           grepl <- base::grepl
[18:05:14.294]                           restarts <- computeRestarts(cond)
[18:05:14.294]                           for (restart in restarts) {
[18:05:14.294]                             name <- restart$name
[18:05:14.294]                             if (is.null(name)) 
[18:05:14.294]                               next
[18:05:14.294]                             if (!grepl(pattern, name)) 
[18:05:14.294]                               next
[18:05:14.294]                             invokeRestart(restart)
[18:05:14.294]                             muffled <- TRUE
[18:05:14.294]                             break
[18:05:14.294]                           }
[18:05:14.294]                         }
[18:05:14.294]                       }
[18:05:14.294]                       invisible(muffled)
[18:05:14.294]                     }
[18:05:14.294]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.294]                   }
[18:05:14.294]                 }
[18:05:14.294]             }
[18:05:14.294]         }))
[18:05:14.294]     }, error = function(ex) {
[18:05:14.294]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.294]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.294]                 ...future.rng), started = ...future.startTime, 
[18:05:14.294]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.294]             version = "1.8"), class = "FutureResult")
[18:05:14.294]     }, finally = {
[18:05:14.294]         if (!identical(...future.workdir, getwd())) 
[18:05:14.294]             setwd(...future.workdir)
[18:05:14.294]         {
[18:05:14.294]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.294]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.294]             }
[18:05:14.294]             base::options(...future.oldOptions)
[18:05:14.294]             if (.Platform$OS.type == "windows") {
[18:05:14.294]                 old_names <- names(...future.oldEnvVars)
[18:05:14.294]                 envs <- base::Sys.getenv()
[18:05:14.294]                 names <- names(envs)
[18:05:14.294]                 common <- intersect(names, old_names)
[18:05:14.294]                 added <- setdiff(names, old_names)
[18:05:14.294]                 removed <- setdiff(old_names, names)
[18:05:14.294]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.294]                   envs[common]]
[18:05:14.294]                 NAMES <- toupper(changed)
[18:05:14.294]                 args <- list()
[18:05:14.294]                 for (kk in seq_along(NAMES)) {
[18:05:14.294]                   name <- changed[[kk]]
[18:05:14.294]                   NAME <- NAMES[[kk]]
[18:05:14.294]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.294]                     next
[18:05:14.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.294]                 }
[18:05:14.294]                 NAMES <- toupper(added)
[18:05:14.294]                 for (kk in seq_along(NAMES)) {
[18:05:14.294]                   name <- added[[kk]]
[18:05:14.294]                   NAME <- NAMES[[kk]]
[18:05:14.294]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.294]                     next
[18:05:14.294]                   args[[name]] <- ""
[18:05:14.294]                 }
[18:05:14.294]                 NAMES <- toupper(removed)
[18:05:14.294]                 for (kk in seq_along(NAMES)) {
[18:05:14.294]                   name <- removed[[kk]]
[18:05:14.294]                   NAME <- NAMES[[kk]]
[18:05:14.294]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.294]                     next
[18:05:14.294]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.294]                 }
[18:05:14.294]                 if (length(args) > 0) 
[18:05:14.294]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.294]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.294]             }
[18:05:14.294]             else {
[18:05:14.294]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.294]             }
[18:05:14.294]             {
[18:05:14.294]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.294]                   0L) {
[18:05:14.294]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.294]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.294]                   base::options(opts)
[18:05:14.294]                 }
[18:05:14.294]                 {
[18:05:14.294]                   {
[18:05:14.294]                     NULL
[18:05:14.294]                     RNGkind("Mersenne-Twister")
[18:05:14.294]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.294]                       inherits = FALSE)
[18:05:14.294]                   }
[18:05:14.294]                   options(future.plan = NULL)
[18:05:14.294]                   if (is.na(NA_character_)) 
[18:05:14.294]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.294]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.294]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.294]                     .init = FALSE)
[18:05:14.294]                 }
[18:05:14.294]             }
[18:05:14.294]         }
[18:05:14.294]     })
[18:05:14.294]     if (TRUE) {
[18:05:14.294]         base::sink(type = "output", split = FALSE)
[18:05:14.294]         if (TRUE) {
[18:05:14.294]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.294]         }
[18:05:14.294]         else {
[18:05:14.294]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.294]         }
[18:05:14.294]         base::close(...future.stdout)
[18:05:14.294]         ...future.stdout <- NULL
[18:05:14.294]     }
[18:05:14.294]     ...future.result$conditions <- ...future.conditions
[18:05:14.294]     ...future.result$finished <- base::Sys.time()
[18:05:14.294]     ...future.result
[18:05:14.294] }
[18:05:14.298] assign_globals() ...
[18:05:14.298] List of 1
[18:05:14.298]  $ ii: int 2
[18:05:14.298]  - attr(*, "where")=List of 1
[18:05:14.298]   ..$ ii:<environment: R_EmptyEnv> 
[18:05:14.298]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:14.298]  - attr(*, "resolved")= logi FALSE
[18:05:14.298]  - attr(*, "total_size")= num 56
[18:05:14.303] - copied ‘ii’ to environment
[18:05:14.303] assign_globals() ... done
[18:05:14.304] plan(): Setting new future strategy stack:
[18:05:14.304] List of future strategies:
[18:05:14.304] 1. sequential:
[18:05:14.304]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.304]    - tweaked: FALSE
[18:05:14.304]    - call: NULL
[18:05:14.305] plan(): nbrOfWorkers() = 1
[18:05:14.306] plan(): Setting new future strategy stack:
[18:05:14.307] List of future strategies:
[18:05:14.307] 1. multicore:
[18:05:14.307]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.307]    - tweaked: FALSE
[18:05:14.307]    - call: plan(multicore)
[18:05:14.313] plan(): nbrOfWorkers() = 1
[18:05:14.314] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[18:05:14.320] getGlobalsAndPackages() ...
[18:05:14.320] Searching for globals...
[18:05:14.322] - globals found: [2] ‘{’, ‘ii’
[18:05:14.322] Searching for globals ... DONE
[18:05:14.323] Resolving globals: FALSE
[18:05:14.323] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:14.324] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[18:05:14.324] - globals: [1] ‘ii’
[18:05:14.325] 
[18:05:14.325] getGlobalsAndPackages() ... DONE
[18:05:14.326] Packages needed by the future expression (n = 0): <none>
[18:05:14.326] Packages needed by future strategies (n = 0): <none>
[18:05:14.327] {
[18:05:14.327]     {
[18:05:14.327]         {
[18:05:14.327]             ...future.startTime <- base::Sys.time()
[18:05:14.327]             {
[18:05:14.327]                 {
[18:05:14.327]                   {
[18:05:14.327]                     base::local({
[18:05:14.327]                       has_future <- base::requireNamespace("future", 
[18:05:14.327]                         quietly = TRUE)
[18:05:14.327]                       if (has_future) {
[18:05:14.327]                         ns <- base::getNamespace("future")
[18:05:14.327]                         version <- ns[[".package"]][["version"]]
[18:05:14.327]                         if (is.null(version)) 
[18:05:14.327]                           version <- utils::packageVersion("future")
[18:05:14.327]                       }
[18:05:14.327]                       else {
[18:05:14.327]                         version <- NULL
[18:05:14.327]                       }
[18:05:14.327]                       if (!has_future || version < "1.8.0") {
[18:05:14.327]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.327]                           "", base::R.version$version.string), 
[18:05:14.327]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.327]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.327]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.327]                             "release", "version")], collapse = " "), 
[18:05:14.327]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.327]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.327]                           info)
[18:05:14.327]                         info <- base::paste(info, collapse = "; ")
[18:05:14.327]                         if (!has_future) {
[18:05:14.327]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.327]                             info)
[18:05:14.327]                         }
[18:05:14.327]                         else {
[18:05:14.327]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.327]                             info, version)
[18:05:14.327]                         }
[18:05:14.327]                         base::stop(msg)
[18:05:14.327]                       }
[18:05:14.327]                     })
[18:05:14.327]                   }
[18:05:14.327]                   ...future.strategy.old <- future::plan("list")
[18:05:14.327]                   options(future.plan = NULL)
[18:05:14.327]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.327]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.327]                 }
[18:05:14.327]                 ...future.workdir <- getwd()
[18:05:14.327]             }
[18:05:14.327]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.327]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.327]         }
[18:05:14.327]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.327]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.327]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.327]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.327]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.327]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.327]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.327]             base::names(...future.oldOptions))
[18:05:14.327]     }
[18:05:14.327]     if (FALSE) {
[18:05:14.327]     }
[18:05:14.327]     else {
[18:05:14.327]         if (TRUE) {
[18:05:14.327]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.327]                 open = "w")
[18:05:14.327]         }
[18:05:14.327]         else {
[18:05:14.327]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.327]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.327]         }
[18:05:14.327]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.327]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.327]             base::sink(type = "output", split = FALSE)
[18:05:14.327]             base::close(...future.stdout)
[18:05:14.327]         }, add = TRUE)
[18:05:14.327]     }
[18:05:14.327]     ...future.frame <- base::sys.nframe()
[18:05:14.327]     ...future.conditions <- base::list()
[18:05:14.327]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.327]     if (FALSE) {
[18:05:14.327]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.327]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.327]     }
[18:05:14.327]     ...future.result <- base::tryCatch({
[18:05:14.327]         base::withCallingHandlers({
[18:05:14.327]             ...future.value <- base::withVisible(base::local({
[18:05:14.327]                 ii
[18:05:14.327]             }))
[18:05:14.327]             future::FutureResult(value = ...future.value$value, 
[18:05:14.327]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.327]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.327]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.327]                     ...future.globalenv.names))
[18:05:14.327]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.327]         }, condition = base::local({
[18:05:14.327]             c <- base::c
[18:05:14.327]             inherits <- base::inherits
[18:05:14.327]             invokeRestart <- base::invokeRestart
[18:05:14.327]             length <- base::length
[18:05:14.327]             list <- base::list
[18:05:14.327]             seq.int <- base::seq.int
[18:05:14.327]             signalCondition <- base::signalCondition
[18:05:14.327]             sys.calls <- base::sys.calls
[18:05:14.327]             `[[` <- base::`[[`
[18:05:14.327]             `+` <- base::`+`
[18:05:14.327]             `<<-` <- base::`<<-`
[18:05:14.327]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.327]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.327]                   3L)]
[18:05:14.327]             }
[18:05:14.327]             function(cond) {
[18:05:14.327]                 is_error <- inherits(cond, "error")
[18:05:14.327]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.327]                   NULL)
[18:05:14.327]                 if (is_error) {
[18:05:14.327]                   sessionInformation <- function() {
[18:05:14.327]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.327]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.327]                       search = base::search(), system = base::Sys.info())
[18:05:14.327]                   }
[18:05:14.327]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.327]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.327]                     cond$call), session = sessionInformation(), 
[18:05:14.327]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.327]                   signalCondition(cond)
[18:05:14.327]                 }
[18:05:14.327]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.327]                 "immediateCondition"))) {
[18:05:14.327]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.327]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.327]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.327]                   if (TRUE && !signal) {
[18:05:14.327]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.327]                     {
[18:05:14.327]                       inherits <- base::inherits
[18:05:14.327]                       invokeRestart <- base::invokeRestart
[18:05:14.327]                       is.null <- base::is.null
[18:05:14.327]                       muffled <- FALSE
[18:05:14.327]                       if (inherits(cond, "message")) {
[18:05:14.327]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.327]                         if (muffled) 
[18:05:14.327]                           invokeRestart("muffleMessage")
[18:05:14.327]                       }
[18:05:14.327]                       else if (inherits(cond, "warning")) {
[18:05:14.327]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.327]                         if (muffled) 
[18:05:14.327]                           invokeRestart("muffleWarning")
[18:05:14.327]                       }
[18:05:14.327]                       else if (inherits(cond, "condition")) {
[18:05:14.327]                         if (!is.null(pattern)) {
[18:05:14.327]                           computeRestarts <- base::computeRestarts
[18:05:14.327]                           grepl <- base::grepl
[18:05:14.327]                           restarts <- computeRestarts(cond)
[18:05:14.327]                           for (restart in restarts) {
[18:05:14.327]                             name <- restart$name
[18:05:14.327]                             if (is.null(name)) 
[18:05:14.327]                               next
[18:05:14.327]                             if (!grepl(pattern, name)) 
[18:05:14.327]                               next
[18:05:14.327]                             invokeRestart(restart)
[18:05:14.327]                             muffled <- TRUE
[18:05:14.327]                             break
[18:05:14.327]                           }
[18:05:14.327]                         }
[18:05:14.327]                       }
[18:05:14.327]                       invisible(muffled)
[18:05:14.327]                     }
[18:05:14.327]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.327]                   }
[18:05:14.327]                 }
[18:05:14.327]                 else {
[18:05:14.327]                   if (TRUE) {
[18:05:14.327]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.327]                     {
[18:05:14.327]                       inherits <- base::inherits
[18:05:14.327]                       invokeRestart <- base::invokeRestart
[18:05:14.327]                       is.null <- base::is.null
[18:05:14.327]                       muffled <- FALSE
[18:05:14.327]                       if (inherits(cond, "message")) {
[18:05:14.327]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.327]                         if (muffled) 
[18:05:14.327]                           invokeRestart("muffleMessage")
[18:05:14.327]                       }
[18:05:14.327]                       else if (inherits(cond, "warning")) {
[18:05:14.327]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.327]                         if (muffled) 
[18:05:14.327]                           invokeRestart("muffleWarning")
[18:05:14.327]                       }
[18:05:14.327]                       else if (inherits(cond, "condition")) {
[18:05:14.327]                         if (!is.null(pattern)) {
[18:05:14.327]                           computeRestarts <- base::computeRestarts
[18:05:14.327]                           grepl <- base::grepl
[18:05:14.327]                           restarts <- computeRestarts(cond)
[18:05:14.327]                           for (restart in restarts) {
[18:05:14.327]                             name <- restart$name
[18:05:14.327]                             if (is.null(name)) 
[18:05:14.327]                               next
[18:05:14.327]                             if (!grepl(pattern, name)) 
[18:05:14.327]                               next
[18:05:14.327]                             invokeRestart(restart)
[18:05:14.327]                             muffled <- TRUE
[18:05:14.327]                             break
[18:05:14.327]                           }
[18:05:14.327]                         }
[18:05:14.327]                       }
[18:05:14.327]                       invisible(muffled)
[18:05:14.327]                     }
[18:05:14.327]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.327]                   }
[18:05:14.327]                 }
[18:05:14.327]             }
[18:05:14.327]         }))
[18:05:14.327]     }, error = function(ex) {
[18:05:14.327]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.327]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.327]                 ...future.rng), started = ...future.startTime, 
[18:05:14.327]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.327]             version = "1.8"), class = "FutureResult")
[18:05:14.327]     }, finally = {
[18:05:14.327]         if (!identical(...future.workdir, getwd())) 
[18:05:14.327]             setwd(...future.workdir)
[18:05:14.327]         {
[18:05:14.327]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.327]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.327]             }
[18:05:14.327]             base::options(...future.oldOptions)
[18:05:14.327]             if (.Platform$OS.type == "windows") {
[18:05:14.327]                 old_names <- names(...future.oldEnvVars)
[18:05:14.327]                 envs <- base::Sys.getenv()
[18:05:14.327]                 names <- names(envs)
[18:05:14.327]                 common <- intersect(names, old_names)
[18:05:14.327]                 added <- setdiff(names, old_names)
[18:05:14.327]                 removed <- setdiff(old_names, names)
[18:05:14.327]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.327]                   envs[common]]
[18:05:14.327]                 NAMES <- toupper(changed)
[18:05:14.327]                 args <- list()
[18:05:14.327]                 for (kk in seq_along(NAMES)) {
[18:05:14.327]                   name <- changed[[kk]]
[18:05:14.327]                   NAME <- NAMES[[kk]]
[18:05:14.327]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.327]                     next
[18:05:14.327]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.327]                 }
[18:05:14.327]                 NAMES <- toupper(added)
[18:05:14.327]                 for (kk in seq_along(NAMES)) {
[18:05:14.327]                   name <- added[[kk]]
[18:05:14.327]                   NAME <- NAMES[[kk]]
[18:05:14.327]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.327]                     next
[18:05:14.327]                   args[[name]] <- ""
[18:05:14.327]                 }
[18:05:14.327]                 NAMES <- toupper(removed)
[18:05:14.327]                 for (kk in seq_along(NAMES)) {
[18:05:14.327]                   name <- removed[[kk]]
[18:05:14.327]                   NAME <- NAMES[[kk]]
[18:05:14.327]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.327]                     next
[18:05:14.327]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.327]                 }
[18:05:14.327]                 if (length(args) > 0) 
[18:05:14.327]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.327]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.327]             }
[18:05:14.327]             else {
[18:05:14.327]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.327]             }
[18:05:14.327]             {
[18:05:14.327]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.327]                   0L) {
[18:05:14.327]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.327]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.327]                   base::options(opts)
[18:05:14.327]                 }
[18:05:14.327]                 {
[18:05:14.327]                   {
[18:05:14.327]                     NULL
[18:05:14.327]                     RNGkind("Mersenne-Twister")
[18:05:14.327]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.327]                       inherits = FALSE)
[18:05:14.327]                   }
[18:05:14.327]                   options(future.plan = NULL)
[18:05:14.327]                   if (is.na(NA_character_)) 
[18:05:14.327]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.327]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.327]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.327]                     .init = FALSE)
[18:05:14.327]                 }
[18:05:14.327]             }
[18:05:14.327]         }
[18:05:14.327]     })
[18:05:14.327]     if (TRUE) {
[18:05:14.327]         base::sink(type = "output", split = FALSE)
[18:05:14.327]         if (TRUE) {
[18:05:14.327]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.327]         }
[18:05:14.327]         else {
[18:05:14.327]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.327]         }
[18:05:14.327]         base::close(...future.stdout)
[18:05:14.327]         ...future.stdout <- NULL
[18:05:14.327]     }
[18:05:14.327]     ...future.result$conditions <- ...future.conditions
[18:05:14.327]     ...future.result$finished <- base::Sys.time()
[18:05:14.327]     ...future.result
[18:05:14.327] }
[18:05:14.330] assign_globals() ...
[18:05:14.330] List of 1
[18:05:14.330]  $ ii: int 3
[18:05:14.330]  - attr(*, "where")=List of 1
[18:05:14.330]   ..$ ii:<environment: R_EmptyEnv> 
[18:05:14.330]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:14.330]  - attr(*, "resolved")= logi FALSE
[18:05:14.330]  - attr(*, "total_size")= num 56
[18:05:14.335] - copied ‘ii’ to environment
[18:05:14.335] assign_globals() ... done
[18:05:14.336] plan(): Setting new future strategy stack:
[18:05:14.336] List of future strategies:
[18:05:14.336] 1. sequential:
[18:05:14.336]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.336]    - tweaked: FALSE
[18:05:14.336]    - call: NULL
[18:05:14.337] plan(): nbrOfWorkers() = 1
[18:05:14.339] plan(): Setting new future strategy stack:
[18:05:14.339] List of future strategies:
[18:05:14.339] 1. multicore:
[18:05:14.339]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.339]    - tweaked: FALSE
[18:05:14.339]    - call: plan(multicore)
[18:05:14.347] plan(): nbrOfWorkers() = 1
[18:05:14.348] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[18:05:14.354] getGlobalsAndPackages() ...
[18:05:14.354] Searching for globals...
[18:05:14.359] - globals found: [2] ‘{’, ‘ii’
[18:05:14.359] Searching for globals ... DONE
[18:05:14.359] Resolving globals: FALSE
[18:05:14.360] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:14.361] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[18:05:14.361] - globals: [1] ‘ii’
[18:05:14.361] 
[18:05:14.361] getGlobalsAndPackages() ... DONE
[18:05:14.362] Packages needed by the future expression (n = 0): <none>
[18:05:14.362] Packages needed by future strategies (n = 0): <none>
[18:05:14.363] {
[18:05:14.363]     {
[18:05:14.363]         {
[18:05:14.363]             ...future.startTime <- base::Sys.time()
[18:05:14.363]             {
[18:05:14.363]                 {
[18:05:14.363]                   {
[18:05:14.363]                     base::local({
[18:05:14.363]                       has_future <- base::requireNamespace("future", 
[18:05:14.363]                         quietly = TRUE)
[18:05:14.363]                       if (has_future) {
[18:05:14.363]                         ns <- base::getNamespace("future")
[18:05:14.363]                         version <- ns[[".package"]][["version"]]
[18:05:14.363]                         if (is.null(version)) 
[18:05:14.363]                           version <- utils::packageVersion("future")
[18:05:14.363]                       }
[18:05:14.363]                       else {
[18:05:14.363]                         version <- NULL
[18:05:14.363]                       }
[18:05:14.363]                       if (!has_future || version < "1.8.0") {
[18:05:14.363]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.363]                           "", base::R.version$version.string), 
[18:05:14.363]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.363]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.363]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.363]                             "release", "version")], collapse = " "), 
[18:05:14.363]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.363]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.363]                           info)
[18:05:14.363]                         info <- base::paste(info, collapse = "; ")
[18:05:14.363]                         if (!has_future) {
[18:05:14.363]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.363]                             info)
[18:05:14.363]                         }
[18:05:14.363]                         else {
[18:05:14.363]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.363]                             info, version)
[18:05:14.363]                         }
[18:05:14.363]                         base::stop(msg)
[18:05:14.363]                       }
[18:05:14.363]                     })
[18:05:14.363]                   }
[18:05:14.363]                   ...future.strategy.old <- future::plan("list")
[18:05:14.363]                   options(future.plan = NULL)
[18:05:14.363]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.363]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.363]                 }
[18:05:14.363]                 ...future.workdir <- getwd()
[18:05:14.363]             }
[18:05:14.363]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.363]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.363]         }
[18:05:14.363]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.363]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.363]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.363]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.363]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.363]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.363]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.363]             base::names(...future.oldOptions))
[18:05:14.363]     }
[18:05:14.363]     if (FALSE) {
[18:05:14.363]     }
[18:05:14.363]     else {
[18:05:14.363]         if (TRUE) {
[18:05:14.363]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.363]                 open = "w")
[18:05:14.363]         }
[18:05:14.363]         else {
[18:05:14.363]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.363]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.363]         }
[18:05:14.363]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.363]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.363]             base::sink(type = "output", split = FALSE)
[18:05:14.363]             base::close(...future.stdout)
[18:05:14.363]         }, add = TRUE)
[18:05:14.363]     }
[18:05:14.363]     ...future.frame <- base::sys.nframe()
[18:05:14.363]     ...future.conditions <- base::list()
[18:05:14.363]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.363]     if (FALSE) {
[18:05:14.363]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.363]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.363]     }
[18:05:14.363]     ...future.result <- base::tryCatch({
[18:05:14.363]         base::withCallingHandlers({
[18:05:14.363]             ...future.value <- base::withVisible(base::local({
[18:05:14.363]                 ii
[18:05:14.363]             }))
[18:05:14.363]             future::FutureResult(value = ...future.value$value, 
[18:05:14.363]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.363]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.363]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.363]                     ...future.globalenv.names))
[18:05:14.363]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.363]         }, condition = base::local({
[18:05:14.363]             c <- base::c
[18:05:14.363]             inherits <- base::inherits
[18:05:14.363]             invokeRestart <- base::invokeRestart
[18:05:14.363]             length <- base::length
[18:05:14.363]             list <- base::list
[18:05:14.363]             seq.int <- base::seq.int
[18:05:14.363]             signalCondition <- base::signalCondition
[18:05:14.363]             sys.calls <- base::sys.calls
[18:05:14.363]             `[[` <- base::`[[`
[18:05:14.363]             `+` <- base::`+`
[18:05:14.363]             `<<-` <- base::`<<-`
[18:05:14.363]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.363]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.363]                   3L)]
[18:05:14.363]             }
[18:05:14.363]             function(cond) {
[18:05:14.363]                 is_error <- inherits(cond, "error")
[18:05:14.363]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.363]                   NULL)
[18:05:14.363]                 if (is_error) {
[18:05:14.363]                   sessionInformation <- function() {
[18:05:14.363]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.363]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.363]                       search = base::search(), system = base::Sys.info())
[18:05:14.363]                   }
[18:05:14.363]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.363]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.363]                     cond$call), session = sessionInformation(), 
[18:05:14.363]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.363]                   signalCondition(cond)
[18:05:14.363]                 }
[18:05:14.363]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.363]                 "immediateCondition"))) {
[18:05:14.363]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.363]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.363]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.363]                   if (TRUE && !signal) {
[18:05:14.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.363]                     {
[18:05:14.363]                       inherits <- base::inherits
[18:05:14.363]                       invokeRestart <- base::invokeRestart
[18:05:14.363]                       is.null <- base::is.null
[18:05:14.363]                       muffled <- FALSE
[18:05:14.363]                       if (inherits(cond, "message")) {
[18:05:14.363]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.363]                         if (muffled) 
[18:05:14.363]                           invokeRestart("muffleMessage")
[18:05:14.363]                       }
[18:05:14.363]                       else if (inherits(cond, "warning")) {
[18:05:14.363]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.363]                         if (muffled) 
[18:05:14.363]                           invokeRestart("muffleWarning")
[18:05:14.363]                       }
[18:05:14.363]                       else if (inherits(cond, "condition")) {
[18:05:14.363]                         if (!is.null(pattern)) {
[18:05:14.363]                           computeRestarts <- base::computeRestarts
[18:05:14.363]                           grepl <- base::grepl
[18:05:14.363]                           restarts <- computeRestarts(cond)
[18:05:14.363]                           for (restart in restarts) {
[18:05:14.363]                             name <- restart$name
[18:05:14.363]                             if (is.null(name)) 
[18:05:14.363]                               next
[18:05:14.363]                             if (!grepl(pattern, name)) 
[18:05:14.363]                               next
[18:05:14.363]                             invokeRestart(restart)
[18:05:14.363]                             muffled <- TRUE
[18:05:14.363]                             break
[18:05:14.363]                           }
[18:05:14.363]                         }
[18:05:14.363]                       }
[18:05:14.363]                       invisible(muffled)
[18:05:14.363]                     }
[18:05:14.363]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.363]                   }
[18:05:14.363]                 }
[18:05:14.363]                 else {
[18:05:14.363]                   if (TRUE) {
[18:05:14.363]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.363]                     {
[18:05:14.363]                       inherits <- base::inherits
[18:05:14.363]                       invokeRestart <- base::invokeRestart
[18:05:14.363]                       is.null <- base::is.null
[18:05:14.363]                       muffled <- FALSE
[18:05:14.363]                       if (inherits(cond, "message")) {
[18:05:14.363]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.363]                         if (muffled) 
[18:05:14.363]                           invokeRestart("muffleMessage")
[18:05:14.363]                       }
[18:05:14.363]                       else if (inherits(cond, "warning")) {
[18:05:14.363]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.363]                         if (muffled) 
[18:05:14.363]                           invokeRestart("muffleWarning")
[18:05:14.363]                       }
[18:05:14.363]                       else if (inherits(cond, "condition")) {
[18:05:14.363]                         if (!is.null(pattern)) {
[18:05:14.363]                           computeRestarts <- base::computeRestarts
[18:05:14.363]                           grepl <- base::grepl
[18:05:14.363]                           restarts <- computeRestarts(cond)
[18:05:14.363]                           for (restart in restarts) {
[18:05:14.363]                             name <- restart$name
[18:05:14.363]                             if (is.null(name)) 
[18:05:14.363]                               next
[18:05:14.363]                             if (!grepl(pattern, name)) 
[18:05:14.363]                               next
[18:05:14.363]                             invokeRestart(restart)
[18:05:14.363]                             muffled <- TRUE
[18:05:14.363]                             break
[18:05:14.363]                           }
[18:05:14.363]                         }
[18:05:14.363]                       }
[18:05:14.363]                       invisible(muffled)
[18:05:14.363]                     }
[18:05:14.363]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.363]                   }
[18:05:14.363]                 }
[18:05:14.363]             }
[18:05:14.363]         }))
[18:05:14.363]     }, error = function(ex) {
[18:05:14.363]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.363]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.363]                 ...future.rng), started = ...future.startTime, 
[18:05:14.363]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.363]             version = "1.8"), class = "FutureResult")
[18:05:14.363]     }, finally = {
[18:05:14.363]         if (!identical(...future.workdir, getwd())) 
[18:05:14.363]             setwd(...future.workdir)
[18:05:14.363]         {
[18:05:14.363]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.363]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.363]             }
[18:05:14.363]             base::options(...future.oldOptions)
[18:05:14.363]             if (.Platform$OS.type == "windows") {
[18:05:14.363]                 old_names <- names(...future.oldEnvVars)
[18:05:14.363]                 envs <- base::Sys.getenv()
[18:05:14.363]                 names <- names(envs)
[18:05:14.363]                 common <- intersect(names, old_names)
[18:05:14.363]                 added <- setdiff(names, old_names)
[18:05:14.363]                 removed <- setdiff(old_names, names)
[18:05:14.363]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.363]                   envs[common]]
[18:05:14.363]                 NAMES <- toupper(changed)
[18:05:14.363]                 args <- list()
[18:05:14.363]                 for (kk in seq_along(NAMES)) {
[18:05:14.363]                   name <- changed[[kk]]
[18:05:14.363]                   NAME <- NAMES[[kk]]
[18:05:14.363]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.363]                     next
[18:05:14.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.363]                 }
[18:05:14.363]                 NAMES <- toupper(added)
[18:05:14.363]                 for (kk in seq_along(NAMES)) {
[18:05:14.363]                   name <- added[[kk]]
[18:05:14.363]                   NAME <- NAMES[[kk]]
[18:05:14.363]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.363]                     next
[18:05:14.363]                   args[[name]] <- ""
[18:05:14.363]                 }
[18:05:14.363]                 NAMES <- toupper(removed)
[18:05:14.363]                 for (kk in seq_along(NAMES)) {
[18:05:14.363]                   name <- removed[[kk]]
[18:05:14.363]                   NAME <- NAMES[[kk]]
[18:05:14.363]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.363]                     next
[18:05:14.363]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.363]                 }
[18:05:14.363]                 if (length(args) > 0) 
[18:05:14.363]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.363]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.363]             }
[18:05:14.363]             else {
[18:05:14.363]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.363]             }
[18:05:14.363]             {
[18:05:14.363]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.363]                   0L) {
[18:05:14.363]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.363]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.363]                   base::options(opts)
[18:05:14.363]                 }
[18:05:14.363]                 {
[18:05:14.363]                   {
[18:05:14.363]                     NULL
[18:05:14.363]                     RNGkind("Mersenne-Twister")
[18:05:14.363]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.363]                       inherits = FALSE)
[18:05:14.363]                   }
[18:05:14.363]                   options(future.plan = NULL)
[18:05:14.363]                   if (is.na(NA_character_)) 
[18:05:14.363]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.363]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.363]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.363]                     .init = FALSE)
[18:05:14.363]                 }
[18:05:14.363]             }
[18:05:14.363]         }
[18:05:14.363]     })
[18:05:14.363]     if (TRUE) {
[18:05:14.363]         base::sink(type = "output", split = FALSE)
[18:05:14.363]         if (TRUE) {
[18:05:14.363]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.363]         }
[18:05:14.363]         else {
[18:05:14.363]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.363]         }
[18:05:14.363]         base::close(...future.stdout)
[18:05:14.363]         ...future.stdout <- NULL
[18:05:14.363]     }
[18:05:14.363]     ...future.result$conditions <- ...future.conditions
[18:05:14.363]     ...future.result$finished <- base::Sys.time()
[18:05:14.363]     ...future.result
[18:05:14.363] }
[18:05:14.367] assign_globals() ...
[18:05:14.367] List of 1
[18:05:14.367]  $ ii: int 4
[18:05:14.367]  - attr(*, "where")=List of 1
[18:05:14.367]   ..$ ii:<environment: R_EmptyEnv> 
[18:05:14.367]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:14.367]  - attr(*, "resolved")= logi FALSE
[18:05:14.367]  - attr(*, "total_size")= num 56
[18:05:14.373] - copied ‘ii’ to environment
[18:05:14.373] assign_globals() ... done
[18:05:14.374] plan(): Setting new future strategy stack:
[18:05:14.374] List of future strategies:
[18:05:14.374] 1. sequential:
[18:05:14.374]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.374]    - tweaked: FALSE
[18:05:14.374]    - call: NULL
[18:05:14.375] plan(): nbrOfWorkers() = 1
[18:05:14.378] plan(): Setting new future strategy stack:
[18:05:14.378] List of future strategies:
[18:05:14.378] 1. multicore:
[18:05:14.378]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.378]    - tweaked: FALSE
[18:05:14.378]    - call: plan(multicore)
[18:05:14.384] plan(): nbrOfWorkers() = 1
[18:05:14.385] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = TRUE) and errors
[18:05:14.392] getGlobalsAndPackages() ...
[18:05:14.392] Searching for globals...
[18:05:14.394] - globals found: [2] ‘{’, ‘stop’
[18:05:14.395] Searching for globals ... DONE
[18:05:14.395] Resolving globals: FALSE
[18:05:14.396] 
[18:05:14.396] 
[18:05:14.396] getGlobalsAndPackages() ... DONE
[18:05:14.397] Packages needed by the future expression (n = 0): <none>
[18:05:14.397] Packages needed by future strategies (n = 0): <none>
[18:05:14.398] {
[18:05:14.398]     {
[18:05:14.398]         {
[18:05:14.398]             ...future.startTime <- base::Sys.time()
[18:05:14.398]             {
[18:05:14.398]                 {
[18:05:14.398]                   {
[18:05:14.398]                     base::local({
[18:05:14.398]                       has_future <- base::requireNamespace("future", 
[18:05:14.398]                         quietly = TRUE)
[18:05:14.398]                       if (has_future) {
[18:05:14.398]                         ns <- base::getNamespace("future")
[18:05:14.398]                         version <- ns[[".package"]][["version"]]
[18:05:14.398]                         if (is.null(version)) 
[18:05:14.398]                           version <- utils::packageVersion("future")
[18:05:14.398]                       }
[18:05:14.398]                       else {
[18:05:14.398]                         version <- NULL
[18:05:14.398]                       }
[18:05:14.398]                       if (!has_future || version < "1.8.0") {
[18:05:14.398]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.398]                           "", base::R.version$version.string), 
[18:05:14.398]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.398]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.398]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.398]                             "release", "version")], collapse = " "), 
[18:05:14.398]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.398]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.398]                           info)
[18:05:14.398]                         info <- base::paste(info, collapse = "; ")
[18:05:14.398]                         if (!has_future) {
[18:05:14.398]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.398]                             info)
[18:05:14.398]                         }
[18:05:14.398]                         else {
[18:05:14.398]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.398]                             info, version)
[18:05:14.398]                         }
[18:05:14.398]                         base::stop(msg)
[18:05:14.398]                       }
[18:05:14.398]                     })
[18:05:14.398]                   }
[18:05:14.398]                   ...future.strategy.old <- future::plan("list")
[18:05:14.398]                   options(future.plan = NULL)
[18:05:14.398]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.398]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.398]                 }
[18:05:14.398]                 ...future.workdir <- getwd()
[18:05:14.398]             }
[18:05:14.398]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.398]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.398]         }
[18:05:14.398]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.398]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.398]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.398]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.398]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.398]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.398]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.398]             base::names(...future.oldOptions))
[18:05:14.398]     }
[18:05:14.398]     if (FALSE) {
[18:05:14.398]     }
[18:05:14.398]     else {
[18:05:14.398]         if (TRUE) {
[18:05:14.398]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.398]                 open = "w")
[18:05:14.398]         }
[18:05:14.398]         else {
[18:05:14.398]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.398]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.398]         }
[18:05:14.398]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.398]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.398]             base::sink(type = "output", split = FALSE)
[18:05:14.398]             base::close(...future.stdout)
[18:05:14.398]         }, add = TRUE)
[18:05:14.398]     }
[18:05:14.398]     ...future.frame <- base::sys.nframe()
[18:05:14.398]     ...future.conditions <- base::list()
[18:05:14.398]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.398]     if (FALSE) {
[18:05:14.398]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.398]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.398]     }
[18:05:14.398]     ...future.result <- base::tryCatch({
[18:05:14.398]         base::withCallingHandlers({
[18:05:14.398]             ...future.value <- base::withVisible(base::local({
[18:05:14.398]                 stop("Whoops!")
[18:05:14.398]                 1
[18:05:14.398]             }))
[18:05:14.398]             future::FutureResult(value = ...future.value$value, 
[18:05:14.398]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.398]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.398]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.398]                     ...future.globalenv.names))
[18:05:14.398]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.398]         }, condition = base::local({
[18:05:14.398]             c <- base::c
[18:05:14.398]             inherits <- base::inherits
[18:05:14.398]             invokeRestart <- base::invokeRestart
[18:05:14.398]             length <- base::length
[18:05:14.398]             list <- base::list
[18:05:14.398]             seq.int <- base::seq.int
[18:05:14.398]             signalCondition <- base::signalCondition
[18:05:14.398]             sys.calls <- base::sys.calls
[18:05:14.398]             `[[` <- base::`[[`
[18:05:14.398]             `+` <- base::`+`
[18:05:14.398]             `<<-` <- base::`<<-`
[18:05:14.398]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.398]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.398]                   3L)]
[18:05:14.398]             }
[18:05:14.398]             function(cond) {
[18:05:14.398]                 is_error <- inherits(cond, "error")
[18:05:14.398]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.398]                   NULL)
[18:05:14.398]                 if (is_error) {
[18:05:14.398]                   sessionInformation <- function() {
[18:05:14.398]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.398]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.398]                       search = base::search(), system = base::Sys.info())
[18:05:14.398]                   }
[18:05:14.398]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.398]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.398]                     cond$call), session = sessionInformation(), 
[18:05:14.398]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.398]                   signalCondition(cond)
[18:05:14.398]                 }
[18:05:14.398]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.398]                 "immediateCondition"))) {
[18:05:14.398]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.398]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.398]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.398]                   if (TRUE && !signal) {
[18:05:14.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.398]                     {
[18:05:14.398]                       inherits <- base::inherits
[18:05:14.398]                       invokeRestart <- base::invokeRestart
[18:05:14.398]                       is.null <- base::is.null
[18:05:14.398]                       muffled <- FALSE
[18:05:14.398]                       if (inherits(cond, "message")) {
[18:05:14.398]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.398]                         if (muffled) 
[18:05:14.398]                           invokeRestart("muffleMessage")
[18:05:14.398]                       }
[18:05:14.398]                       else if (inherits(cond, "warning")) {
[18:05:14.398]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.398]                         if (muffled) 
[18:05:14.398]                           invokeRestart("muffleWarning")
[18:05:14.398]                       }
[18:05:14.398]                       else if (inherits(cond, "condition")) {
[18:05:14.398]                         if (!is.null(pattern)) {
[18:05:14.398]                           computeRestarts <- base::computeRestarts
[18:05:14.398]                           grepl <- base::grepl
[18:05:14.398]                           restarts <- computeRestarts(cond)
[18:05:14.398]                           for (restart in restarts) {
[18:05:14.398]                             name <- restart$name
[18:05:14.398]                             if (is.null(name)) 
[18:05:14.398]                               next
[18:05:14.398]                             if (!grepl(pattern, name)) 
[18:05:14.398]                               next
[18:05:14.398]                             invokeRestart(restart)
[18:05:14.398]                             muffled <- TRUE
[18:05:14.398]                             break
[18:05:14.398]                           }
[18:05:14.398]                         }
[18:05:14.398]                       }
[18:05:14.398]                       invisible(muffled)
[18:05:14.398]                     }
[18:05:14.398]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.398]                   }
[18:05:14.398]                 }
[18:05:14.398]                 else {
[18:05:14.398]                   if (TRUE) {
[18:05:14.398]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.398]                     {
[18:05:14.398]                       inherits <- base::inherits
[18:05:14.398]                       invokeRestart <- base::invokeRestart
[18:05:14.398]                       is.null <- base::is.null
[18:05:14.398]                       muffled <- FALSE
[18:05:14.398]                       if (inherits(cond, "message")) {
[18:05:14.398]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.398]                         if (muffled) 
[18:05:14.398]                           invokeRestart("muffleMessage")
[18:05:14.398]                       }
[18:05:14.398]                       else if (inherits(cond, "warning")) {
[18:05:14.398]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.398]                         if (muffled) 
[18:05:14.398]                           invokeRestart("muffleWarning")
[18:05:14.398]                       }
[18:05:14.398]                       else if (inherits(cond, "condition")) {
[18:05:14.398]                         if (!is.null(pattern)) {
[18:05:14.398]                           computeRestarts <- base::computeRestarts
[18:05:14.398]                           grepl <- base::grepl
[18:05:14.398]                           restarts <- computeRestarts(cond)
[18:05:14.398]                           for (restart in restarts) {
[18:05:14.398]                             name <- restart$name
[18:05:14.398]                             if (is.null(name)) 
[18:05:14.398]                               next
[18:05:14.398]                             if (!grepl(pattern, name)) 
[18:05:14.398]                               next
[18:05:14.398]                             invokeRestart(restart)
[18:05:14.398]                             muffled <- TRUE
[18:05:14.398]                             break
[18:05:14.398]                           }
[18:05:14.398]                         }
[18:05:14.398]                       }
[18:05:14.398]                       invisible(muffled)
[18:05:14.398]                     }
[18:05:14.398]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.398]                   }
[18:05:14.398]                 }
[18:05:14.398]             }
[18:05:14.398]         }))
[18:05:14.398]     }, error = function(ex) {
[18:05:14.398]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.398]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.398]                 ...future.rng), started = ...future.startTime, 
[18:05:14.398]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.398]             version = "1.8"), class = "FutureResult")
[18:05:14.398]     }, finally = {
[18:05:14.398]         if (!identical(...future.workdir, getwd())) 
[18:05:14.398]             setwd(...future.workdir)
[18:05:14.398]         {
[18:05:14.398]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.398]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.398]             }
[18:05:14.398]             base::options(...future.oldOptions)
[18:05:14.398]             if (.Platform$OS.type == "windows") {
[18:05:14.398]                 old_names <- names(...future.oldEnvVars)
[18:05:14.398]                 envs <- base::Sys.getenv()
[18:05:14.398]                 names <- names(envs)
[18:05:14.398]                 common <- intersect(names, old_names)
[18:05:14.398]                 added <- setdiff(names, old_names)
[18:05:14.398]                 removed <- setdiff(old_names, names)
[18:05:14.398]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.398]                   envs[common]]
[18:05:14.398]                 NAMES <- toupper(changed)
[18:05:14.398]                 args <- list()
[18:05:14.398]                 for (kk in seq_along(NAMES)) {
[18:05:14.398]                   name <- changed[[kk]]
[18:05:14.398]                   NAME <- NAMES[[kk]]
[18:05:14.398]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.398]                     next
[18:05:14.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.398]                 }
[18:05:14.398]                 NAMES <- toupper(added)
[18:05:14.398]                 for (kk in seq_along(NAMES)) {
[18:05:14.398]                   name <- added[[kk]]
[18:05:14.398]                   NAME <- NAMES[[kk]]
[18:05:14.398]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.398]                     next
[18:05:14.398]                   args[[name]] <- ""
[18:05:14.398]                 }
[18:05:14.398]                 NAMES <- toupper(removed)
[18:05:14.398]                 for (kk in seq_along(NAMES)) {
[18:05:14.398]                   name <- removed[[kk]]
[18:05:14.398]                   NAME <- NAMES[[kk]]
[18:05:14.398]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.398]                     next
[18:05:14.398]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.398]                 }
[18:05:14.398]                 if (length(args) > 0) 
[18:05:14.398]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.398]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.398]             }
[18:05:14.398]             else {
[18:05:14.398]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.398]             }
[18:05:14.398]             {
[18:05:14.398]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.398]                   0L) {
[18:05:14.398]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.398]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.398]                   base::options(opts)
[18:05:14.398]                 }
[18:05:14.398]                 {
[18:05:14.398]                   {
[18:05:14.398]                     NULL
[18:05:14.398]                     RNGkind("Mersenne-Twister")
[18:05:14.398]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.398]                       inherits = FALSE)
[18:05:14.398]                   }
[18:05:14.398]                   options(future.plan = NULL)
[18:05:14.398]                   if (is.na(NA_character_)) 
[18:05:14.398]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.398]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.398]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.398]                     .init = FALSE)
[18:05:14.398]                 }
[18:05:14.398]             }
[18:05:14.398]         }
[18:05:14.398]     })
[18:05:14.398]     if (TRUE) {
[18:05:14.398]         base::sink(type = "output", split = FALSE)
[18:05:14.398]         if (TRUE) {
[18:05:14.398]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.398]         }
[18:05:14.398]         else {
[18:05:14.398]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.398]         }
[18:05:14.398]         base::close(...future.stdout)
[18:05:14.398]         ...future.stdout <- NULL
[18:05:14.398]     }
[18:05:14.398]     ...future.result$conditions <- ...future.conditions
[18:05:14.398]     ...future.result$finished <- base::Sys.time()
[18:05:14.398]     ...future.result
[18:05:14.398] }
[18:05:14.402] plan(): Setting new future strategy stack:
[18:05:14.402] List of future strategies:
[18:05:14.402] 1. sequential:
[18:05:14.402]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.402]    - tweaked: FALSE
[18:05:14.402]    - call: NULL
[18:05:14.403] plan(): nbrOfWorkers() = 1
[18:05:14.405] plan(): Setting new future strategy stack:
[18:05:14.405] List of future strategies:
[18:05:14.405] 1. multicore:
[18:05:14.405]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.405]    - tweaked: FALSE
[18:05:14.405]    - call: plan(multicore)
[18:05:14.412] plan(): nbrOfWorkers() = 1
[18:05:14.412] SequentialFuture started (and completed)
[18:05:14.412] signalConditions() ...
[18:05:14.413]  - include = ‘immediateCondition’
[18:05:14.413]  - exclude = 
[18:05:14.413]  - resignal = FALSE
[18:05:14.414]  - Number of conditions: 1
[18:05:14.414] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:05:14.415] signalConditions() ...
[18:05:14.415]  - include = ‘immediateCondition’
[18:05:14.416]  - exclude = 
[18:05:14.416]  - resignal = FALSE
[18:05:14.416]  - Number of conditions: 1
[18:05:14.416] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[18:05:14.417] signalConditions() ...
[18:05:14.417]  - include = ‘immediateCondition’
[18:05:14.417]  - exclude = 
[18:05:14.417]  - resignal = FALSE
[18:05:14.418]  - Number of conditions: 1
[18:05:14.418] signalConditions() ... done
[18:05:14.418] Future state: ‘finished’
[18:05:14.418] signalConditions() ...
[18:05:14.419]  - include = ‘condition’
[18:05:14.419]  - exclude = ‘immediateCondition’
[18:05:14.419]  - resignal = TRUE
[18:05:14.419]  - Number of conditions: 1
[18:05:14.419]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:05:14.420] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[18:05:14.420] signalConditions() ...
[18:05:14.421]  - include = ‘immediateCondition’
[18:05:14.421]  - exclude = 
[18:05:14.421]  - resignal = FALSE
[18:05:14.421]  - Number of conditions: 1
[18:05:14.422] signalConditions() ... done
[18:05:14.422] Future state: ‘finished’
[18:05:14.422] signalConditions() ...
[18:05:14.422]  - include = ‘condition’
[18:05:14.422]  - exclude = ‘immediateCondition’
[18:05:14.423]  - resignal = TRUE
[18:05:14.423]  - Number of conditions: 1
[18:05:14.423]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:05:14.423] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[18:05:14.430] getGlobalsAndPackages() ...
[18:05:14.430] Searching for globals...
[18:05:14.433] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[18:05:14.433] Searching for globals ... DONE
[18:05:14.433] Resolving globals: FALSE
[18:05:14.434] 
[18:05:14.434] 
[18:05:14.435] getGlobalsAndPackages() ... DONE
[18:05:14.435] Packages needed by the future expression (n = 0): <none>
[18:05:14.436] Packages needed by future strategies (n = 0): <none>
[18:05:14.437] {
[18:05:14.437]     {
[18:05:14.437]         {
[18:05:14.437]             ...future.startTime <- base::Sys.time()
[18:05:14.437]             {
[18:05:14.437]                 {
[18:05:14.437]                   {
[18:05:14.437]                     base::local({
[18:05:14.437]                       has_future <- base::requireNamespace("future", 
[18:05:14.437]                         quietly = TRUE)
[18:05:14.437]                       if (has_future) {
[18:05:14.437]                         ns <- base::getNamespace("future")
[18:05:14.437]                         version <- ns[[".package"]][["version"]]
[18:05:14.437]                         if (is.null(version)) 
[18:05:14.437]                           version <- utils::packageVersion("future")
[18:05:14.437]                       }
[18:05:14.437]                       else {
[18:05:14.437]                         version <- NULL
[18:05:14.437]                       }
[18:05:14.437]                       if (!has_future || version < "1.8.0") {
[18:05:14.437]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.437]                           "", base::R.version$version.string), 
[18:05:14.437]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.437]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.437]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.437]                             "release", "version")], collapse = " "), 
[18:05:14.437]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.437]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.437]                           info)
[18:05:14.437]                         info <- base::paste(info, collapse = "; ")
[18:05:14.437]                         if (!has_future) {
[18:05:14.437]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.437]                             info)
[18:05:14.437]                         }
[18:05:14.437]                         else {
[18:05:14.437]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.437]                             info, version)
[18:05:14.437]                         }
[18:05:14.437]                         base::stop(msg)
[18:05:14.437]                       }
[18:05:14.437]                     })
[18:05:14.437]                   }
[18:05:14.437]                   ...future.strategy.old <- future::plan("list")
[18:05:14.437]                   options(future.plan = NULL)
[18:05:14.437]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.437]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.437]                 }
[18:05:14.437]                 ...future.workdir <- getwd()
[18:05:14.437]             }
[18:05:14.437]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.437]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.437]         }
[18:05:14.437]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.437]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.437]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.437]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.437]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.437]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.437]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.437]             base::names(...future.oldOptions))
[18:05:14.437]     }
[18:05:14.437]     if (FALSE) {
[18:05:14.437]     }
[18:05:14.437]     else {
[18:05:14.437]         if (TRUE) {
[18:05:14.437]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.437]                 open = "w")
[18:05:14.437]         }
[18:05:14.437]         else {
[18:05:14.437]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.437]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.437]         }
[18:05:14.437]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.437]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.437]             base::sink(type = "output", split = FALSE)
[18:05:14.437]             base::close(...future.stdout)
[18:05:14.437]         }, add = TRUE)
[18:05:14.437]     }
[18:05:14.437]     ...future.frame <- base::sys.nframe()
[18:05:14.437]     ...future.conditions <- base::list()
[18:05:14.437]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.437]     if (FALSE) {
[18:05:14.437]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.437]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.437]     }
[18:05:14.437]     ...future.result <- base::tryCatch({
[18:05:14.437]         base::withCallingHandlers({
[18:05:14.437]             ...future.value <- base::withVisible(base::local({
[18:05:14.437]                 stop(structure(list(message = "boom"), class = c("MyError", 
[18:05:14.437]                   "error", "condition")))
[18:05:14.437]             }))
[18:05:14.437]             future::FutureResult(value = ...future.value$value, 
[18:05:14.437]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.437]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.437]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.437]                     ...future.globalenv.names))
[18:05:14.437]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.437]         }, condition = base::local({
[18:05:14.437]             c <- base::c
[18:05:14.437]             inherits <- base::inherits
[18:05:14.437]             invokeRestart <- base::invokeRestart
[18:05:14.437]             length <- base::length
[18:05:14.437]             list <- base::list
[18:05:14.437]             seq.int <- base::seq.int
[18:05:14.437]             signalCondition <- base::signalCondition
[18:05:14.437]             sys.calls <- base::sys.calls
[18:05:14.437]             `[[` <- base::`[[`
[18:05:14.437]             `+` <- base::`+`
[18:05:14.437]             `<<-` <- base::`<<-`
[18:05:14.437]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.437]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.437]                   3L)]
[18:05:14.437]             }
[18:05:14.437]             function(cond) {
[18:05:14.437]                 is_error <- inherits(cond, "error")
[18:05:14.437]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.437]                   NULL)
[18:05:14.437]                 if (is_error) {
[18:05:14.437]                   sessionInformation <- function() {
[18:05:14.437]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.437]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.437]                       search = base::search(), system = base::Sys.info())
[18:05:14.437]                   }
[18:05:14.437]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.437]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.437]                     cond$call), session = sessionInformation(), 
[18:05:14.437]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.437]                   signalCondition(cond)
[18:05:14.437]                 }
[18:05:14.437]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.437]                 "immediateCondition"))) {
[18:05:14.437]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.437]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.437]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.437]                   if (TRUE && !signal) {
[18:05:14.437]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.437]                     {
[18:05:14.437]                       inherits <- base::inherits
[18:05:14.437]                       invokeRestart <- base::invokeRestart
[18:05:14.437]                       is.null <- base::is.null
[18:05:14.437]                       muffled <- FALSE
[18:05:14.437]                       if (inherits(cond, "message")) {
[18:05:14.437]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.437]                         if (muffled) 
[18:05:14.437]                           invokeRestart("muffleMessage")
[18:05:14.437]                       }
[18:05:14.437]                       else if (inherits(cond, "warning")) {
[18:05:14.437]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.437]                         if (muffled) 
[18:05:14.437]                           invokeRestart("muffleWarning")
[18:05:14.437]                       }
[18:05:14.437]                       else if (inherits(cond, "condition")) {
[18:05:14.437]                         if (!is.null(pattern)) {
[18:05:14.437]                           computeRestarts <- base::computeRestarts
[18:05:14.437]                           grepl <- base::grepl
[18:05:14.437]                           restarts <- computeRestarts(cond)
[18:05:14.437]                           for (restart in restarts) {
[18:05:14.437]                             name <- restart$name
[18:05:14.437]                             if (is.null(name)) 
[18:05:14.437]                               next
[18:05:14.437]                             if (!grepl(pattern, name)) 
[18:05:14.437]                               next
[18:05:14.437]                             invokeRestart(restart)
[18:05:14.437]                             muffled <- TRUE
[18:05:14.437]                             break
[18:05:14.437]                           }
[18:05:14.437]                         }
[18:05:14.437]                       }
[18:05:14.437]                       invisible(muffled)
[18:05:14.437]                     }
[18:05:14.437]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.437]                   }
[18:05:14.437]                 }
[18:05:14.437]                 else {
[18:05:14.437]                   if (TRUE) {
[18:05:14.437]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.437]                     {
[18:05:14.437]                       inherits <- base::inherits
[18:05:14.437]                       invokeRestart <- base::invokeRestart
[18:05:14.437]                       is.null <- base::is.null
[18:05:14.437]                       muffled <- FALSE
[18:05:14.437]                       if (inherits(cond, "message")) {
[18:05:14.437]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.437]                         if (muffled) 
[18:05:14.437]                           invokeRestart("muffleMessage")
[18:05:14.437]                       }
[18:05:14.437]                       else if (inherits(cond, "warning")) {
[18:05:14.437]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.437]                         if (muffled) 
[18:05:14.437]                           invokeRestart("muffleWarning")
[18:05:14.437]                       }
[18:05:14.437]                       else if (inherits(cond, "condition")) {
[18:05:14.437]                         if (!is.null(pattern)) {
[18:05:14.437]                           computeRestarts <- base::computeRestarts
[18:05:14.437]                           grepl <- base::grepl
[18:05:14.437]                           restarts <- computeRestarts(cond)
[18:05:14.437]                           for (restart in restarts) {
[18:05:14.437]                             name <- restart$name
[18:05:14.437]                             if (is.null(name)) 
[18:05:14.437]                               next
[18:05:14.437]                             if (!grepl(pattern, name)) 
[18:05:14.437]                               next
[18:05:14.437]                             invokeRestart(restart)
[18:05:14.437]                             muffled <- TRUE
[18:05:14.437]                             break
[18:05:14.437]                           }
[18:05:14.437]                         }
[18:05:14.437]                       }
[18:05:14.437]                       invisible(muffled)
[18:05:14.437]                     }
[18:05:14.437]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.437]                   }
[18:05:14.437]                 }
[18:05:14.437]             }
[18:05:14.437]         }))
[18:05:14.437]     }, error = function(ex) {
[18:05:14.437]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.437]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.437]                 ...future.rng), started = ...future.startTime, 
[18:05:14.437]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.437]             version = "1.8"), class = "FutureResult")
[18:05:14.437]     }, finally = {
[18:05:14.437]         if (!identical(...future.workdir, getwd())) 
[18:05:14.437]             setwd(...future.workdir)
[18:05:14.437]         {
[18:05:14.437]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.437]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.437]             }
[18:05:14.437]             base::options(...future.oldOptions)
[18:05:14.437]             if (.Platform$OS.type == "windows") {
[18:05:14.437]                 old_names <- names(...future.oldEnvVars)
[18:05:14.437]                 envs <- base::Sys.getenv()
[18:05:14.437]                 names <- names(envs)
[18:05:14.437]                 common <- intersect(names, old_names)
[18:05:14.437]                 added <- setdiff(names, old_names)
[18:05:14.437]                 removed <- setdiff(old_names, names)
[18:05:14.437]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.437]                   envs[common]]
[18:05:14.437]                 NAMES <- toupper(changed)
[18:05:14.437]                 args <- list()
[18:05:14.437]                 for (kk in seq_along(NAMES)) {
[18:05:14.437]                   name <- changed[[kk]]
[18:05:14.437]                   NAME <- NAMES[[kk]]
[18:05:14.437]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.437]                     next
[18:05:14.437]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.437]                 }
[18:05:14.437]                 NAMES <- toupper(added)
[18:05:14.437]                 for (kk in seq_along(NAMES)) {
[18:05:14.437]                   name <- added[[kk]]
[18:05:14.437]                   NAME <- NAMES[[kk]]
[18:05:14.437]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.437]                     next
[18:05:14.437]                   args[[name]] <- ""
[18:05:14.437]                 }
[18:05:14.437]                 NAMES <- toupper(removed)
[18:05:14.437]                 for (kk in seq_along(NAMES)) {
[18:05:14.437]                   name <- removed[[kk]]
[18:05:14.437]                   NAME <- NAMES[[kk]]
[18:05:14.437]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.437]                     next
[18:05:14.437]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.437]                 }
[18:05:14.437]                 if (length(args) > 0) 
[18:05:14.437]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.437]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.437]             }
[18:05:14.437]             else {
[18:05:14.437]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.437]             }
[18:05:14.437]             {
[18:05:14.437]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.437]                   0L) {
[18:05:14.437]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.437]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.437]                   base::options(opts)
[18:05:14.437]                 }
[18:05:14.437]                 {
[18:05:14.437]                   {
[18:05:14.437]                     NULL
[18:05:14.437]                     RNGkind("Mersenne-Twister")
[18:05:14.437]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.437]                       inherits = FALSE)
[18:05:14.437]                   }
[18:05:14.437]                   options(future.plan = NULL)
[18:05:14.437]                   if (is.na(NA_character_)) 
[18:05:14.437]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.437]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.437]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.437]                     .init = FALSE)
[18:05:14.437]                 }
[18:05:14.437]             }
[18:05:14.437]         }
[18:05:14.437]     })
[18:05:14.437]     if (TRUE) {
[18:05:14.437]         base::sink(type = "output", split = FALSE)
[18:05:14.437]         if (TRUE) {
[18:05:14.437]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.437]         }
[18:05:14.437]         else {
[18:05:14.437]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.437]         }
[18:05:14.437]         base::close(...future.stdout)
[18:05:14.437]         ...future.stdout <- NULL
[18:05:14.437]     }
[18:05:14.437]     ...future.result$conditions <- ...future.conditions
[18:05:14.437]     ...future.result$finished <- base::Sys.time()
[18:05:14.437]     ...future.result
[18:05:14.437] }
[18:05:14.440] plan(): Setting new future strategy stack:
[18:05:14.441] List of future strategies:
[18:05:14.441] 1. sequential:
[18:05:14.441]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.441]    - tweaked: FALSE
[18:05:14.441]    - call: NULL
[18:05:14.442] plan(): nbrOfWorkers() = 1
[18:05:14.443] plan(): Setting new future strategy stack:
[18:05:14.444] List of future strategies:
[18:05:14.444] 1. multicore:
[18:05:14.444]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.444]    - tweaked: FALSE
[18:05:14.444]    - call: plan(multicore)
[18:05:14.453] plan(): nbrOfWorkers() = 1
[18:05:14.453] SequentialFuture started (and completed)
[18:05:14.454] signalConditions() ...
[18:05:14.454]  - include = ‘immediateCondition’
[18:05:14.454]  - exclude = 
[18:05:14.454]  - resignal = FALSE
[18:05:14.454]  - Number of conditions: 1
[18:05:14.455] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:05:14.456] signalConditions() ...
[18:05:14.456]  - include = ‘immediateCondition’
[18:05:14.456]  - exclude = 
[18:05:14.457]  - resignal = FALSE
[18:05:14.457]  - Number of conditions: 1
[18:05:14.457] signalConditions() ... done
<MyError: boom>
[18:05:14.457] signalConditions() ...
[18:05:14.458]  - include = ‘immediateCondition’
[18:05:14.458]  - exclude = 
[18:05:14.458]  - resignal = FALSE
[18:05:14.458]  - Number of conditions: 1
[18:05:14.458] signalConditions() ... done
[18:05:14.459] Future state: ‘finished’
[18:05:14.459] signalConditions() ...
[18:05:14.459]  - include = ‘condition’
[18:05:14.459]  - exclude = ‘immediateCondition’
[18:05:14.460]  - resignal = TRUE
[18:05:14.460]  - Number of conditions: 1
[18:05:14.460]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[18:05:14.460] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[18:05:14.461] getGlobalsAndPackages() ...
[18:05:14.461] Searching for globals...
[18:05:14.463] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[18:05:14.463] Searching for globals ... DONE
[18:05:14.463] Resolving globals: FALSE
[18:05:14.464] The total size of the 2 globals is 112 bytes (112 bytes)
[18:05:14.465] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[18:05:14.465] - globals: [2] ‘a’, ‘b’
[18:05:14.466] 
[18:05:14.466] getGlobalsAndPackages() ... DONE
[18:05:14.466] Packages needed by the future expression (n = 0): <none>
[18:05:14.467] Packages needed by future strategies (n = 0): <none>
[18:05:14.468] {
[18:05:14.468]     {
[18:05:14.468]         {
[18:05:14.468]             ...future.startTime <- base::Sys.time()
[18:05:14.468]             {
[18:05:14.468]                 {
[18:05:14.468]                   {
[18:05:14.468]                     base::local({
[18:05:14.468]                       has_future <- base::requireNamespace("future", 
[18:05:14.468]                         quietly = TRUE)
[18:05:14.468]                       if (has_future) {
[18:05:14.468]                         ns <- base::getNamespace("future")
[18:05:14.468]                         version <- ns[[".package"]][["version"]]
[18:05:14.468]                         if (is.null(version)) 
[18:05:14.468]                           version <- utils::packageVersion("future")
[18:05:14.468]                       }
[18:05:14.468]                       else {
[18:05:14.468]                         version <- NULL
[18:05:14.468]                       }
[18:05:14.468]                       if (!has_future || version < "1.8.0") {
[18:05:14.468]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.468]                           "", base::R.version$version.string), 
[18:05:14.468]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:14.468]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.468]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.468]                             "release", "version")], collapse = " "), 
[18:05:14.468]                           hostname = base::Sys.info()[["nodename"]])
[18:05:14.468]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.468]                           info)
[18:05:14.468]                         info <- base::paste(info, collapse = "; ")
[18:05:14.468]                         if (!has_future) {
[18:05:14.468]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.468]                             info)
[18:05:14.468]                         }
[18:05:14.468]                         else {
[18:05:14.468]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.468]                             info, version)
[18:05:14.468]                         }
[18:05:14.468]                         base::stop(msg)
[18:05:14.468]                       }
[18:05:14.468]                     })
[18:05:14.468]                   }
[18:05:14.468]                   ...future.strategy.old <- future::plan("list")
[18:05:14.468]                   options(future.plan = NULL)
[18:05:14.468]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.468]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.468]                 }
[18:05:14.468]                 ...future.workdir <- getwd()
[18:05:14.468]             }
[18:05:14.468]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.468]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.468]         }
[18:05:14.468]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.468]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.468]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.468]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.468]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.468]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.468]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.468]             base::names(...future.oldOptions))
[18:05:14.468]     }
[18:05:14.468]     if (FALSE) {
[18:05:14.468]     }
[18:05:14.468]     else {
[18:05:14.468]         if (TRUE) {
[18:05:14.468]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.468]                 open = "w")
[18:05:14.468]         }
[18:05:14.468]         else {
[18:05:14.468]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.468]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.468]         }
[18:05:14.468]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.468]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.468]             base::sink(type = "output", split = FALSE)
[18:05:14.468]             base::close(...future.stdout)
[18:05:14.468]         }, add = TRUE)
[18:05:14.468]     }
[18:05:14.468]     ...future.frame <- base::sys.nframe()
[18:05:14.468]     ...future.conditions <- base::list()
[18:05:14.468]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.468]     if (FALSE) {
[18:05:14.468]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.468]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.468]     }
[18:05:14.468]     ...future.result <- base::tryCatch({
[18:05:14.468]         base::withCallingHandlers({
[18:05:14.468]             ...future.value <- base::withVisible(base::local({
[18:05:14.468]                 a * b
[18:05:14.468]             }))
[18:05:14.468]             future::FutureResult(value = ...future.value$value, 
[18:05:14.468]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.468]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.468]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.468]                     ...future.globalenv.names))
[18:05:14.468]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.468]         }, condition = base::local({
[18:05:14.468]             c <- base::c
[18:05:14.468]             inherits <- base::inherits
[18:05:14.468]             invokeRestart <- base::invokeRestart
[18:05:14.468]             length <- base::length
[18:05:14.468]             list <- base::list
[18:05:14.468]             seq.int <- base::seq.int
[18:05:14.468]             signalCondition <- base::signalCondition
[18:05:14.468]             sys.calls <- base::sys.calls
[18:05:14.468]             `[[` <- base::`[[`
[18:05:14.468]             `+` <- base::`+`
[18:05:14.468]             `<<-` <- base::`<<-`
[18:05:14.468]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.468]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.468]                   3L)]
[18:05:14.468]             }
[18:05:14.468]             function(cond) {
[18:05:14.468]                 is_error <- inherits(cond, "error")
[18:05:14.468]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.468]                   NULL)
[18:05:14.468]                 if (is_error) {
[18:05:14.468]                   sessionInformation <- function() {
[18:05:14.468]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.468]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.468]                       search = base::search(), system = base::Sys.info())
[18:05:14.468]                   }
[18:05:14.468]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.468]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.468]                     cond$call), session = sessionInformation(), 
[18:05:14.468]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.468]                   signalCondition(cond)
[18:05:14.468]                 }
[18:05:14.468]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.468]                 "immediateCondition"))) {
[18:05:14.468]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.468]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.468]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.468]                   if (TRUE && !signal) {
[18:05:14.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.468]                     {
[18:05:14.468]                       inherits <- base::inherits
[18:05:14.468]                       invokeRestart <- base::invokeRestart
[18:05:14.468]                       is.null <- base::is.null
[18:05:14.468]                       muffled <- FALSE
[18:05:14.468]                       if (inherits(cond, "message")) {
[18:05:14.468]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.468]                         if (muffled) 
[18:05:14.468]                           invokeRestart("muffleMessage")
[18:05:14.468]                       }
[18:05:14.468]                       else if (inherits(cond, "warning")) {
[18:05:14.468]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.468]                         if (muffled) 
[18:05:14.468]                           invokeRestart("muffleWarning")
[18:05:14.468]                       }
[18:05:14.468]                       else if (inherits(cond, "condition")) {
[18:05:14.468]                         if (!is.null(pattern)) {
[18:05:14.468]                           computeRestarts <- base::computeRestarts
[18:05:14.468]                           grepl <- base::grepl
[18:05:14.468]                           restarts <- computeRestarts(cond)
[18:05:14.468]                           for (restart in restarts) {
[18:05:14.468]                             name <- restart$name
[18:05:14.468]                             if (is.null(name)) 
[18:05:14.468]                               next
[18:05:14.468]                             if (!grepl(pattern, name)) 
[18:05:14.468]                               next
[18:05:14.468]                             invokeRestart(restart)
[18:05:14.468]                             muffled <- TRUE
[18:05:14.468]                             break
[18:05:14.468]                           }
[18:05:14.468]                         }
[18:05:14.468]                       }
[18:05:14.468]                       invisible(muffled)
[18:05:14.468]                     }
[18:05:14.468]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.468]                   }
[18:05:14.468]                 }
[18:05:14.468]                 else {
[18:05:14.468]                   if (TRUE) {
[18:05:14.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.468]                     {
[18:05:14.468]                       inherits <- base::inherits
[18:05:14.468]                       invokeRestart <- base::invokeRestart
[18:05:14.468]                       is.null <- base::is.null
[18:05:14.468]                       muffled <- FALSE
[18:05:14.468]                       if (inherits(cond, "message")) {
[18:05:14.468]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.468]                         if (muffled) 
[18:05:14.468]                           invokeRestart("muffleMessage")
[18:05:14.468]                       }
[18:05:14.468]                       else if (inherits(cond, "warning")) {
[18:05:14.468]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.468]                         if (muffled) 
[18:05:14.468]                           invokeRestart("muffleWarning")
[18:05:14.468]                       }
[18:05:14.468]                       else if (inherits(cond, "condition")) {
[18:05:14.468]                         if (!is.null(pattern)) {
[18:05:14.468]                           computeRestarts <- base::computeRestarts
[18:05:14.468]                           grepl <- base::grepl
[18:05:14.468]                           restarts <- computeRestarts(cond)
[18:05:14.468]                           for (restart in restarts) {
[18:05:14.468]                             name <- restart$name
[18:05:14.468]                             if (is.null(name)) 
[18:05:14.468]                               next
[18:05:14.468]                             if (!grepl(pattern, name)) 
[18:05:14.468]                               next
[18:05:14.468]                             invokeRestart(restart)
[18:05:14.468]                             muffled <- TRUE
[18:05:14.468]                             break
[18:05:14.468]                           }
[18:05:14.468]                         }
[18:05:14.468]                       }
[18:05:14.468]                       invisible(muffled)
[18:05:14.468]                     }
[18:05:14.468]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.468]                   }
[18:05:14.468]                 }
[18:05:14.468]             }
[18:05:14.468]         }))
[18:05:14.468]     }, error = function(ex) {
[18:05:14.468]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.468]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.468]                 ...future.rng), started = ...future.startTime, 
[18:05:14.468]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.468]             version = "1.8"), class = "FutureResult")
[18:05:14.468]     }, finally = {
[18:05:14.468]         if (!identical(...future.workdir, getwd())) 
[18:05:14.468]             setwd(...future.workdir)
[18:05:14.468]         {
[18:05:14.468]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.468]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.468]             }
[18:05:14.468]             base::options(...future.oldOptions)
[18:05:14.468]             if (.Platform$OS.type == "windows") {
[18:05:14.468]                 old_names <- names(...future.oldEnvVars)
[18:05:14.468]                 envs <- base::Sys.getenv()
[18:05:14.468]                 names <- names(envs)
[18:05:14.468]                 common <- intersect(names, old_names)
[18:05:14.468]                 added <- setdiff(names, old_names)
[18:05:14.468]                 removed <- setdiff(old_names, names)
[18:05:14.468]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.468]                   envs[common]]
[18:05:14.468]                 NAMES <- toupper(changed)
[18:05:14.468]                 args <- list()
[18:05:14.468]                 for (kk in seq_along(NAMES)) {
[18:05:14.468]                   name <- changed[[kk]]
[18:05:14.468]                   NAME <- NAMES[[kk]]
[18:05:14.468]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.468]                     next
[18:05:14.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.468]                 }
[18:05:14.468]                 NAMES <- toupper(added)
[18:05:14.468]                 for (kk in seq_along(NAMES)) {
[18:05:14.468]                   name <- added[[kk]]
[18:05:14.468]                   NAME <- NAMES[[kk]]
[18:05:14.468]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.468]                     next
[18:05:14.468]                   args[[name]] <- ""
[18:05:14.468]                 }
[18:05:14.468]                 NAMES <- toupper(removed)
[18:05:14.468]                 for (kk in seq_along(NAMES)) {
[18:05:14.468]                   name <- removed[[kk]]
[18:05:14.468]                   NAME <- NAMES[[kk]]
[18:05:14.468]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.468]                     next
[18:05:14.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.468]                 }
[18:05:14.468]                 if (length(args) > 0) 
[18:05:14.468]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.468]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.468]             }
[18:05:14.468]             else {
[18:05:14.468]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.468]             }
[18:05:14.468]             {
[18:05:14.468]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.468]                   0L) {
[18:05:14.468]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.468]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.468]                   base::options(opts)
[18:05:14.468]                 }
[18:05:14.468]                 {
[18:05:14.468]                   {
[18:05:14.468]                     NULL
[18:05:14.468]                     RNGkind("Mersenne-Twister")
[18:05:14.468]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:14.468]                       inherits = FALSE)
[18:05:14.468]                   }
[18:05:14.468]                   options(future.plan = NULL)
[18:05:14.468]                   if (is.na(NA_character_)) 
[18:05:14.468]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.468]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.468]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.468]                     .init = FALSE)
[18:05:14.468]                 }
[18:05:14.468]             }
[18:05:14.468]         }
[18:05:14.468]     })
[18:05:14.468]     if (TRUE) {
[18:05:14.468]         base::sink(type = "output", split = FALSE)
[18:05:14.468]         if (TRUE) {
[18:05:14.468]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.468]         }
[18:05:14.468]         else {
[18:05:14.468]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.468]         }
[18:05:14.468]         base::close(...future.stdout)
[18:05:14.468]         ...future.stdout <- NULL
[18:05:14.468]     }
[18:05:14.468]     ...future.result$conditions <- ...future.conditions
[18:05:14.468]     ...future.result$finished <- base::Sys.time()
[18:05:14.468]     ...future.result
[18:05:14.468] }
[18:05:14.471] assign_globals() ...
[18:05:14.472] List of 2
[18:05:14.472]  $ a: num 2
[18:05:14.472]  $ b: num 3
[18:05:14.472]  - attr(*, "where")=List of 2
[18:05:14.472]   ..$ a:<environment: R_EmptyEnv> 
[18:05:14.472]   ..$ b:<environment: R_EmptyEnv> 
[18:05:14.472]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:14.472]  - attr(*, "resolved")= logi FALSE
[18:05:14.472]  - attr(*, "total_size")= num 112
[18:05:14.478] - copied ‘a’ to environment
[18:05:14.479] - copied ‘b’ to environment
[18:05:14.479] assign_globals() ... done
[18:05:14.479] plan(): Setting new future strategy stack:
[18:05:14.480] List of future strategies:
[18:05:14.480] 1. sequential:
[18:05:14.480]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.480]    - tweaked: FALSE
[18:05:14.480]    - call: NULL
[18:05:14.481] plan(): nbrOfWorkers() = 1
[18:05:14.482] plan(): Setting new future strategy stack:
[18:05:14.482] List of future strategies:
[18:05:14.482] 1. multicore:
[18:05:14.482]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.482]    - tweaked: FALSE
[18:05:14.482]    - call: plan(multicore)
[18:05:14.489] plan(): nbrOfWorkers() = 1
[18:05:14.489] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Number of workers: 2
*** multicore(..., globals = FALSE) without globals
[18:05:14.502] getGlobalsAndPackages() ...
[18:05:14.503] Not searching for globals
[18:05:14.503] - globals: [0] <none>
[18:05:14.503] getGlobalsAndPackages() ... DONE
[18:05:14.505] Packages needed by the future expression (n = 0): <none>
[18:05:14.506] Packages needed by future strategies (n = 0): <none>
[18:05:14.507] {
[18:05:14.507]     {
[18:05:14.507]         {
[18:05:14.507]             ...future.startTime <- base::Sys.time()
[18:05:14.507]             {
[18:05:14.507]                 {
[18:05:14.507]                   {
[18:05:14.507]                     {
[18:05:14.507]                       base::local({
[18:05:14.507]                         has_future <- base::requireNamespace("future", 
[18:05:14.507]                           quietly = TRUE)
[18:05:14.507]                         if (has_future) {
[18:05:14.507]                           ns <- base::getNamespace("future")
[18:05:14.507]                           version <- ns[[".package"]][["version"]]
[18:05:14.507]                           if (is.null(version)) 
[18:05:14.507]                             version <- utils::packageVersion("future")
[18:05:14.507]                         }
[18:05:14.507]                         else {
[18:05:14.507]                           version <- NULL
[18:05:14.507]                         }
[18:05:14.507]                         if (!has_future || version < "1.8.0") {
[18:05:14.507]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.507]                             "", base::R.version$version.string), 
[18:05:14.507]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.507]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.507]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.507]                               "release", "version")], collapse = " "), 
[18:05:14.507]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.507]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.507]                             info)
[18:05:14.507]                           info <- base::paste(info, collapse = "; ")
[18:05:14.507]                           if (!has_future) {
[18:05:14.507]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.507]                               info)
[18:05:14.507]                           }
[18:05:14.507]                           else {
[18:05:14.507]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.507]                               info, version)
[18:05:14.507]                           }
[18:05:14.507]                           base::stop(msg)
[18:05:14.507]                         }
[18:05:14.507]                       })
[18:05:14.507]                     }
[18:05:14.507]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.507]                     base::options(mc.cores = 1L)
[18:05:14.507]                   }
[18:05:14.507]                   ...future.strategy.old <- future::plan("list")
[18:05:14.507]                   options(future.plan = NULL)
[18:05:14.507]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.507]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.507]                 }
[18:05:14.507]                 ...future.workdir <- getwd()
[18:05:14.507]             }
[18:05:14.507]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.507]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.507]         }
[18:05:14.507]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.507]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.507]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.507]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.507]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.507]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.507]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.507]             base::names(...future.oldOptions))
[18:05:14.507]     }
[18:05:14.507]     if (FALSE) {
[18:05:14.507]     }
[18:05:14.507]     else {
[18:05:14.507]         if (TRUE) {
[18:05:14.507]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.507]                 open = "w")
[18:05:14.507]         }
[18:05:14.507]         else {
[18:05:14.507]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.507]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.507]         }
[18:05:14.507]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.507]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.507]             base::sink(type = "output", split = FALSE)
[18:05:14.507]             base::close(...future.stdout)
[18:05:14.507]         }, add = TRUE)
[18:05:14.507]     }
[18:05:14.507]     ...future.frame <- base::sys.nframe()
[18:05:14.507]     ...future.conditions <- base::list()
[18:05:14.507]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.507]     if (FALSE) {
[18:05:14.507]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.507]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.507]     }
[18:05:14.507]     ...future.result <- base::tryCatch({
[18:05:14.507]         base::withCallingHandlers({
[18:05:14.507]             ...future.value <- base::withVisible(base::local({
[18:05:14.507]                 withCallingHandlers({
[18:05:14.507]                   {
[18:05:14.507]                     42L
[18:05:14.507]                   }
[18:05:14.507]                 }, immediateCondition = function(cond) {
[18:05:14.507]                   save_rds <- function (object, pathname, ...) 
[18:05:14.507]                   {
[18:05:14.507]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.507]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.507]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.507]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.507]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.507]                         fi_tmp[["mtime"]])
[18:05:14.507]                     }
[18:05:14.507]                     tryCatch({
[18:05:14.507]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.507]                     }, error = function(ex) {
[18:05:14.507]                       msg <- conditionMessage(ex)
[18:05:14.507]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.507]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.507]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.507]                         fi_tmp[["mtime"]], msg)
[18:05:14.507]                       ex$message <- msg
[18:05:14.507]                       stop(ex)
[18:05:14.507]                     })
[18:05:14.507]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.507]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.507]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.507]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.507]                       fi <- file.info(pathname)
[18:05:14.507]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.507]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.507]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.507]                         fi[["size"]], fi[["mtime"]])
[18:05:14.507]                       stop(msg)
[18:05:14.507]                     }
[18:05:14.507]                     invisible(pathname)
[18:05:14.507]                   }
[18:05:14.507]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.507]                     rootPath = tempdir()) 
[18:05:14.507]                   {
[18:05:14.507]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.507]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.507]                       tmpdir = path, fileext = ".rds")
[18:05:14.507]                     save_rds(obj, file)
[18:05:14.507]                   }
[18:05:14.507]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.507]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.507]                   {
[18:05:14.507]                     inherits <- base::inherits
[18:05:14.507]                     invokeRestart <- base::invokeRestart
[18:05:14.507]                     is.null <- base::is.null
[18:05:14.507]                     muffled <- FALSE
[18:05:14.507]                     if (inherits(cond, "message")) {
[18:05:14.507]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.507]                       if (muffled) 
[18:05:14.507]                         invokeRestart("muffleMessage")
[18:05:14.507]                     }
[18:05:14.507]                     else if (inherits(cond, "warning")) {
[18:05:14.507]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.507]                       if (muffled) 
[18:05:14.507]                         invokeRestart("muffleWarning")
[18:05:14.507]                     }
[18:05:14.507]                     else if (inherits(cond, "condition")) {
[18:05:14.507]                       if (!is.null(pattern)) {
[18:05:14.507]                         computeRestarts <- base::computeRestarts
[18:05:14.507]                         grepl <- base::grepl
[18:05:14.507]                         restarts <- computeRestarts(cond)
[18:05:14.507]                         for (restart in restarts) {
[18:05:14.507]                           name <- restart$name
[18:05:14.507]                           if (is.null(name)) 
[18:05:14.507]                             next
[18:05:14.507]                           if (!grepl(pattern, name)) 
[18:05:14.507]                             next
[18:05:14.507]                           invokeRestart(restart)
[18:05:14.507]                           muffled <- TRUE
[18:05:14.507]                           break
[18:05:14.507]                         }
[18:05:14.507]                       }
[18:05:14.507]                     }
[18:05:14.507]                     invisible(muffled)
[18:05:14.507]                   }
[18:05:14.507]                   muffleCondition(cond)
[18:05:14.507]                 })
[18:05:14.507]             }))
[18:05:14.507]             future::FutureResult(value = ...future.value$value, 
[18:05:14.507]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.507]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.507]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.507]                     ...future.globalenv.names))
[18:05:14.507]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.507]         }, condition = base::local({
[18:05:14.507]             c <- base::c
[18:05:14.507]             inherits <- base::inherits
[18:05:14.507]             invokeRestart <- base::invokeRestart
[18:05:14.507]             length <- base::length
[18:05:14.507]             list <- base::list
[18:05:14.507]             seq.int <- base::seq.int
[18:05:14.507]             signalCondition <- base::signalCondition
[18:05:14.507]             sys.calls <- base::sys.calls
[18:05:14.507]             `[[` <- base::`[[`
[18:05:14.507]             `+` <- base::`+`
[18:05:14.507]             `<<-` <- base::`<<-`
[18:05:14.507]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.507]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.507]                   3L)]
[18:05:14.507]             }
[18:05:14.507]             function(cond) {
[18:05:14.507]                 is_error <- inherits(cond, "error")
[18:05:14.507]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.507]                   NULL)
[18:05:14.507]                 if (is_error) {
[18:05:14.507]                   sessionInformation <- function() {
[18:05:14.507]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.507]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.507]                       search = base::search(), system = base::Sys.info())
[18:05:14.507]                   }
[18:05:14.507]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.507]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.507]                     cond$call), session = sessionInformation(), 
[18:05:14.507]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.507]                   signalCondition(cond)
[18:05:14.507]                 }
[18:05:14.507]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.507]                 "immediateCondition"))) {
[18:05:14.507]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.507]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.507]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.507]                   if (TRUE && !signal) {
[18:05:14.507]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.507]                     {
[18:05:14.507]                       inherits <- base::inherits
[18:05:14.507]                       invokeRestart <- base::invokeRestart
[18:05:14.507]                       is.null <- base::is.null
[18:05:14.507]                       muffled <- FALSE
[18:05:14.507]                       if (inherits(cond, "message")) {
[18:05:14.507]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.507]                         if (muffled) 
[18:05:14.507]                           invokeRestart("muffleMessage")
[18:05:14.507]                       }
[18:05:14.507]                       else if (inherits(cond, "warning")) {
[18:05:14.507]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.507]                         if (muffled) 
[18:05:14.507]                           invokeRestart("muffleWarning")
[18:05:14.507]                       }
[18:05:14.507]                       else if (inherits(cond, "condition")) {
[18:05:14.507]                         if (!is.null(pattern)) {
[18:05:14.507]                           computeRestarts <- base::computeRestarts
[18:05:14.507]                           grepl <- base::grepl
[18:05:14.507]                           restarts <- computeRestarts(cond)
[18:05:14.507]                           for (restart in restarts) {
[18:05:14.507]                             name <- restart$name
[18:05:14.507]                             if (is.null(name)) 
[18:05:14.507]                               next
[18:05:14.507]                             if (!grepl(pattern, name)) 
[18:05:14.507]                               next
[18:05:14.507]                             invokeRestart(restart)
[18:05:14.507]                             muffled <- TRUE
[18:05:14.507]                             break
[18:05:14.507]                           }
[18:05:14.507]                         }
[18:05:14.507]                       }
[18:05:14.507]                       invisible(muffled)
[18:05:14.507]                     }
[18:05:14.507]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.507]                   }
[18:05:14.507]                 }
[18:05:14.507]                 else {
[18:05:14.507]                   if (TRUE) {
[18:05:14.507]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.507]                     {
[18:05:14.507]                       inherits <- base::inherits
[18:05:14.507]                       invokeRestart <- base::invokeRestart
[18:05:14.507]                       is.null <- base::is.null
[18:05:14.507]                       muffled <- FALSE
[18:05:14.507]                       if (inherits(cond, "message")) {
[18:05:14.507]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.507]                         if (muffled) 
[18:05:14.507]                           invokeRestart("muffleMessage")
[18:05:14.507]                       }
[18:05:14.507]                       else if (inherits(cond, "warning")) {
[18:05:14.507]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.507]                         if (muffled) 
[18:05:14.507]                           invokeRestart("muffleWarning")
[18:05:14.507]                       }
[18:05:14.507]                       else if (inherits(cond, "condition")) {
[18:05:14.507]                         if (!is.null(pattern)) {
[18:05:14.507]                           computeRestarts <- base::computeRestarts
[18:05:14.507]                           grepl <- base::grepl
[18:05:14.507]                           restarts <- computeRestarts(cond)
[18:05:14.507]                           for (restart in restarts) {
[18:05:14.507]                             name <- restart$name
[18:05:14.507]                             if (is.null(name)) 
[18:05:14.507]                               next
[18:05:14.507]                             if (!grepl(pattern, name)) 
[18:05:14.507]                               next
[18:05:14.507]                             invokeRestart(restart)
[18:05:14.507]                             muffled <- TRUE
[18:05:14.507]                             break
[18:05:14.507]                           }
[18:05:14.507]                         }
[18:05:14.507]                       }
[18:05:14.507]                       invisible(muffled)
[18:05:14.507]                     }
[18:05:14.507]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.507]                   }
[18:05:14.507]                 }
[18:05:14.507]             }
[18:05:14.507]         }))
[18:05:14.507]     }, error = function(ex) {
[18:05:14.507]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.507]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.507]                 ...future.rng), started = ...future.startTime, 
[18:05:14.507]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.507]             version = "1.8"), class = "FutureResult")
[18:05:14.507]     }, finally = {
[18:05:14.507]         if (!identical(...future.workdir, getwd())) 
[18:05:14.507]             setwd(...future.workdir)
[18:05:14.507]         {
[18:05:14.507]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.507]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.507]             }
[18:05:14.507]             base::options(...future.oldOptions)
[18:05:14.507]             if (.Platform$OS.type == "windows") {
[18:05:14.507]                 old_names <- names(...future.oldEnvVars)
[18:05:14.507]                 envs <- base::Sys.getenv()
[18:05:14.507]                 names <- names(envs)
[18:05:14.507]                 common <- intersect(names, old_names)
[18:05:14.507]                 added <- setdiff(names, old_names)
[18:05:14.507]                 removed <- setdiff(old_names, names)
[18:05:14.507]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.507]                   envs[common]]
[18:05:14.507]                 NAMES <- toupper(changed)
[18:05:14.507]                 args <- list()
[18:05:14.507]                 for (kk in seq_along(NAMES)) {
[18:05:14.507]                   name <- changed[[kk]]
[18:05:14.507]                   NAME <- NAMES[[kk]]
[18:05:14.507]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.507]                     next
[18:05:14.507]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.507]                 }
[18:05:14.507]                 NAMES <- toupper(added)
[18:05:14.507]                 for (kk in seq_along(NAMES)) {
[18:05:14.507]                   name <- added[[kk]]
[18:05:14.507]                   NAME <- NAMES[[kk]]
[18:05:14.507]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.507]                     next
[18:05:14.507]                   args[[name]] <- ""
[18:05:14.507]                 }
[18:05:14.507]                 NAMES <- toupper(removed)
[18:05:14.507]                 for (kk in seq_along(NAMES)) {
[18:05:14.507]                   name <- removed[[kk]]
[18:05:14.507]                   NAME <- NAMES[[kk]]
[18:05:14.507]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.507]                     next
[18:05:14.507]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.507]                 }
[18:05:14.507]                 if (length(args) > 0) 
[18:05:14.507]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.507]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.507]             }
[18:05:14.507]             else {
[18:05:14.507]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.507]             }
[18:05:14.507]             {
[18:05:14.507]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.507]                   0L) {
[18:05:14.507]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.507]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.507]                   base::options(opts)
[18:05:14.507]                 }
[18:05:14.507]                 {
[18:05:14.507]                   {
[18:05:14.507]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.507]                     NULL
[18:05:14.507]                   }
[18:05:14.507]                   options(future.plan = NULL)
[18:05:14.507]                   if (is.na(NA_character_)) 
[18:05:14.507]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.507]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.507]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.507]                     .init = FALSE)
[18:05:14.507]                 }
[18:05:14.507]             }
[18:05:14.507]         }
[18:05:14.507]     })
[18:05:14.507]     if (TRUE) {
[18:05:14.507]         base::sink(type = "output", split = FALSE)
[18:05:14.507]         if (TRUE) {
[18:05:14.507]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.507]         }
[18:05:14.507]         else {
[18:05:14.507]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.507]         }
[18:05:14.507]         base::close(...future.stdout)
[18:05:14.507]         ...future.stdout <- NULL
[18:05:14.507]     }
[18:05:14.507]     ...future.result$conditions <- ...future.conditions
[18:05:14.507]     ...future.result$finished <- base::Sys.time()
[18:05:14.507]     ...future.result
[18:05:14.507] }
[18:05:14.511] requestCore(): workers = 2
[18:05:14.517] MulticoreFuture started
[18:05:14.521] plan(): Setting new future strategy stack:
[18:05:14.522] List of future strategies:
[18:05:14.522] 1. sequential:
[18:05:14.522]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.522]    - tweaked: FALSE
[18:05:14.522]    - call: NULL
[18:05:14.526] plan(): nbrOfWorkers() = 1
[18:05:14.530] plan(): Setting new future strategy stack:
[18:05:14.531] List of future strategies:
[18:05:14.531] 1. multicore:
[18:05:14.531]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.531]    - tweaked: FALSE
[18:05:14.531]    - call: plan(multicore)
[1] FALSE
[18:05:14.538] result() for MulticoreFuture ...
[18:05:14.544] plan(): nbrOfWorkers() = 2
[18:05:14.555] result() for MulticoreFuture ...
[18:05:14.556] result() for MulticoreFuture ... done
[18:05:14.556] result() for MulticoreFuture ... done
[18:05:14.556] result() for MulticoreFuture ...
[18:05:14.556] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = FALSE) with globals
[18:05:14.564] getGlobalsAndPackages() ...
[18:05:14.564] Not searching for globals
[18:05:14.564] - globals: [0] <none>
[18:05:14.565] getGlobalsAndPackages() ... DONE
[18:05:14.566] Packages needed by the future expression (n = 0): <none>
[18:05:14.566] Packages needed by future strategies (n = 0): <none>
[18:05:14.567] {
[18:05:14.567]     {
[18:05:14.567]         {
[18:05:14.567]             ...future.startTime <- base::Sys.time()
[18:05:14.567]             {
[18:05:14.567]                 {
[18:05:14.567]                   {
[18:05:14.567]                     {
[18:05:14.567]                       base::local({
[18:05:14.567]                         has_future <- base::requireNamespace("future", 
[18:05:14.567]                           quietly = TRUE)
[18:05:14.567]                         if (has_future) {
[18:05:14.567]                           ns <- base::getNamespace("future")
[18:05:14.567]                           version <- ns[[".package"]][["version"]]
[18:05:14.567]                           if (is.null(version)) 
[18:05:14.567]                             version <- utils::packageVersion("future")
[18:05:14.567]                         }
[18:05:14.567]                         else {
[18:05:14.567]                           version <- NULL
[18:05:14.567]                         }
[18:05:14.567]                         if (!has_future || version < "1.8.0") {
[18:05:14.567]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.567]                             "", base::R.version$version.string), 
[18:05:14.567]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.567]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.567]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.567]                               "release", "version")], collapse = " "), 
[18:05:14.567]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.567]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.567]                             info)
[18:05:14.567]                           info <- base::paste(info, collapse = "; ")
[18:05:14.567]                           if (!has_future) {
[18:05:14.567]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.567]                               info)
[18:05:14.567]                           }
[18:05:14.567]                           else {
[18:05:14.567]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.567]                               info, version)
[18:05:14.567]                           }
[18:05:14.567]                           base::stop(msg)
[18:05:14.567]                         }
[18:05:14.567]                       })
[18:05:14.567]                     }
[18:05:14.567]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.567]                     base::options(mc.cores = 1L)
[18:05:14.567]                   }
[18:05:14.567]                   ...future.strategy.old <- future::plan("list")
[18:05:14.567]                   options(future.plan = NULL)
[18:05:14.567]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.567]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.567]                 }
[18:05:14.567]                 ...future.workdir <- getwd()
[18:05:14.567]             }
[18:05:14.567]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.567]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.567]         }
[18:05:14.567]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.567]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.567]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.567]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.567]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.567]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.567]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.567]             base::names(...future.oldOptions))
[18:05:14.567]     }
[18:05:14.567]     if (FALSE) {
[18:05:14.567]     }
[18:05:14.567]     else {
[18:05:14.567]         if (TRUE) {
[18:05:14.567]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.567]                 open = "w")
[18:05:14.567]         }
[18:05:14.567]         else {
[18:05:14.567]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.567]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.567]         }
[18:05:14.567]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.567]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.567]             base::sink(type = "output", split = FALSE)
[18:05:14.567]             base::close(...future.stdout)
[18:05:14.567]         }, add = TRUE)
[18:05:14.567]     }
[18:05:14.567]     ...future.frame <- base::sys.nframe()
[18:05:14.567]     ...future.conditions <- base::list()
[18:05:14.567]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.567]     if (FALSE) {
[18:05:14.567]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.567]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.567]     }
[18:05:14.567]     ...future.result <- base::tryCatch({
[18:05:14.567]         base::withCallingHandlers({
[18:05:14.567]             ...future.value <- base::withVisible(base::local({
[18:05:14.567]                 withCallingHandlers({
[18:05:14.567]                   {
[18:05:14.567]                     b <- 3
[18:05:14.567]                     c <- 2
[18:05:14.567]                     a * b * c
[18:05:14.567]                   }
[18:05:14.567]                 }, immediateCondition = function(cond) {
[18:05:14.567]                   save_rds <- function (object, pathname, ...) 
[18:05:14.567]                   {
[18:05:14.567]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.567]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.567]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.567]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.567]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.567]                         fi_tmp[["mtime"]])
[18:05:14.567]                     }
[18:05:14.567]                     tryCatch({
[18:05:14.567]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.567]                     }, error = function(ex) {
[18:05:14.567]                       msg <- conditionMessage(ex)
[18:05:14.567]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.567]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.567]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.567]                         fi_tmp[["mtime"]], msg)
[18:05:14.567]                       ex$message <- msg
[18:05:14.567]                       stop(ex)
[18:05:14.567]                     })
[18:05:14.567]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.567]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.567]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.567]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.567]                       fi <- file.info(pathname)
[18:05:14.567]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.567]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.567]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.567]                         fi[["size"]], fi[["mtime"]])
[18:05:14.567]                       stop(msg)
[18:05:14.567]                     }
[18:05:14.567]                     invisible(pathname)
[18:05:14.567]                   }
[18:05:14.567]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.567]                     rootPath = tempdir()) 
[18:05:14.567]                   {
[18:05:14.567]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.567]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.567]                       tmpdir = path, fileext = ".rds")
[18:05:14.567]                     save_rds(obj, file)
[18:05:14.567]                   }
[18:05:14.567]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.567]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.567]                   {
[18:05:14.567]                     inherits <- base::inherits
[18:05:14.567]                     invokeRestart <- base::invokeRestart
[18:05:14.567]                     is.null <- base::is.null
[18:05:14.567]                     muffled <- FALSE
[18:05:14.567]                     if (inherits(cond, "message")) {
[18:05:14.567]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.567]                       if (muffled) 
[18:05:14.567]                         invokeRestart("muffleMessage")
[18:05:14.567]                     }
[18:05:14.567]                     else if (inherits(cond, "warning")) {
[18:05:14.567]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.567]                       if (muffled) 
[18:05:14.567]                         invokeRestart("muffleWarning")
[18:05:14.567]                     }
[18:05:14.567]                     else if (inherits(cond, "condition")) {
[18:05:14.567]                       if (!is.null(pattern)) {
[18:05:14.567]                         computeRestarts <- base::computeRestarts
[18:05:14.567]                         grepl <- base::grepl
[18:05:14.567]                         restarts <- computeRestarts(cond)
[18:05:14.567]                         for (restart in restarts) {
[18:05:14.567]                           name <- restart$name
[18:05:14.567]                           if (is.null(name)) 
[18:05:14.567]                             next
[18:05:14.567]                           if (!grepl(pattern, name)) 
[18:05:14.567]                             next
[18:05:14.567]                           invokeRestart(restart)
[18:05:14.567]                           muffled <- TRUE
[18:05:14.567]                           break
[18:05:14.567]                         }
[18:05:14.567]                       }
[18:05:14.567]                     }
[18:05:14.567]                     invisible(muffled)
[18:05:14.567]                   }
[18:05:14.567]                   muffleCondition(cond)
[18:05:14.567]                 })
[18:05:14.567]             }))
[18:05:14.567]             future::FutureResult(value = ...future.value$value, 
[18:05:14.567]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.567]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.567]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.567]                     ...future.globalenv.names))
[18:05:14.567]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.567]         }, condition = base::local({
[18:05:14.567]             c <- base::c
[18:05:14.567]             inherits <- base::inherits
[18:05:14.567]             invokeRestart <- base::invokeRestart
[18:05:14.567]             length <- base::length
[18:05:14.567]             list <- base::list
[18:05:14.567]             seq.int <- base::seq.int
[18:05:14.567]             signalCondition <- base::signalCondition
[18:05:14.567]             sys.calls <- base::sys.calls
[18:05:14.567]             `[[` <- base::`[[`
[18:05:14.567]             `+` <- base::`+`
[18:05:14.567]             `<<-` <- base::`<<-`
[18:05:14.567]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.567]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.567]                   3L)]
[18:05:14.567]             }
[18:05:14.567]             function(cond) {
[18:05:14.567]                 is_error <- inherits(cond, "error")
[18:05:14.567]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.567]                   NULL)
[18:05:14.567]                 if (is_error) {
[18:05:14.567]                   sessionInformation <- function() {
[18:05:14.567]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.567]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.567]                       search = base::search(), system = base::Sys.info())
[18:05:14.567]                   }
[18:05:14.567]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.567]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.567]                     cond$call), session = sessionInformation(), 
[18:05:14.567]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.567]                   signalCondition(cond)
[18:05:14.567]                 }
[18:05:14.567]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.567]                 "immediateCondition"))) {
[18:05:14.567]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.567]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.567]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.567]                   if (TRUE && !signal) {
[18:05:14.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.567]                     {
[18:05:14.567]                       inherits <- base::inherits
[18:05:14.567]                       invokeRestart <- base::invokeRestart
[18:05:14.567]                       is.null <- base::is.null
[18:05:14.567]                       muffled <- FALSE
[18:05:14.567]                       if (inherits(cond, "message")) {
[18:05:14.567]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.567]                         if (muffled) 
[18:05:14.567]                           invokeRestart("muffleMessage")
[18:05:14.567]                       }
[18:05:14.567]                       else if (inherits(cond, "warning")) {
[18:05:14.567]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.567]                         if (muffled) 
[18:05:14.567]                           invokeRestart("muffleWarning")
[18:05:14.567]                       }
[18:05:14.567]                       else if (inherits(cond, "condition")) {
[18:05:14.567]                         if (!is.null(pattern)) {
[18:05:14.567]                           computeRestarts <- base::computeRestarts
[18:05:14.567]                           grepl <- base::grepl
[18:05:14.567]                           restarts <- computeRestarts(cond)
[18:05:14.567]                           for (restart in restarts) {
[18:05:14.567]                             name <- restart$name
[18:05:14.567]                             if (is.null(name)) 
[18:05:14.567]                               next
[18:05:14.567]                             if (!grepl(pattern, name)) 
[18:05:14.567]                               next
[18:05:14.567]                             invokeRestart(restart)
[18:05:14.567]                             muffled <- TRUE
[18:05:14.567]                             break
[18:05:14.567]                           }
[18:05:14.567]                         }
[18:05:14.567]                       }
[18:05:14.567]                       invisible(muffled)
[18:05:14.567]                     }
[18:05:14.567]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.567]                   }
[18:05:14.567]                 }
[18:05:14.567]                 else {
[18:05:14.567]                   if (TRUE) {
[18:05:14.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.567]                     {
[18:05:14.567]                       inherits <- base::inherits
[18:05:14.567]                       invokeRestart <- base::invokeRestart
[18:05:14.567]                       is.null <- base::is.null
[18:05:14.567]                       muffled <- FALSE
[18:05:14.567]                       if (inherits(cond, "message")) {
[18:05:14.567]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.567]                         if (muffled) 
[18:05:14.567]                           invokeRestart("muffleMessage")
[18:05:14.567]                       }
[18:05:14.567]                       else if (inherits(cond, "warning")) {
[18:05:14.567]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.567]                         if (muffled) 
[18:05:14.567]                           invokeRestart("muffleWarning")
[18:05:14.567]                       }
[18:05:14.567]                       else if (inherits(cond, "condition")) {
[18:05:14.567]                         if (!is.null(pattern)) {
[18:05:14.567]                           computeRestarts <- base::computeRestarts
[18:05:14.567]                           grepl <- base::grepl
[18:05:14.567]                           restarts <- computeRestarts(cond)
[18:05:14.567]                           for (restart in restarts) {
[18:05:14.567]                             name <- restart$name
[18:05:14.567]                             if (is.null(name)) 
[18:05:14.567]                               next
[18:05:14.567]                             if (!grepl(pattern, name)) 
[18:05:14.567]                               next
[18:05:14.567]                             invokeRestart(restart)
[18:05:14.567]                             muffled <- TRUE
[18:05:14.567]                             break
[18:05:14.567]                           }
[18:05:14.567]                         }
[18:05:14.567]                       }
[18:05:14.567]                       invisible(muffled)
[18:05:14.567]                     }
[18:05:14.567]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.567]                   }
[18:05:14.567]                 }
[18:05:14.567]             }
[18:05:14.567]         }))
[18:05:14.567]     }, error = function(ex) {
[18:05:14.567]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.567]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.567]                 ...future.rng), started = ...future.startTime, 
[18:05:14.567]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.567]             version = "1.8"), class = "FutureResult")
[18:05:14.567]     }, finally = {
[18:05:14.567]         if (!identical(...future.workdir, getwd())) 
[18:05:14.567]             setwd(...future.workdir)
[18:05:14.567]         {
[18:05:14.567]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.567]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.567]             }
[18:05:14.567]             base::options(...future.oldOptions)
[18:05:14.567]             if (.Platform$OS.type == "windows") {
[18:05:14.567]                 old_names <- names(...future.oldEnvVars)
[18:05:14.567]                 envs <- base::Sys.getenv()
[18:05:14.567]                 names <- names(envs)
[18:05:14.567]                 common <- intersect(names, old_names)
[18:05:14.567]                 added <- setdiff(names, old_names)
[18:05:14.567]                 removed <- setdiff(old_names, names)
[18:05:14.567]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.567]                   envs[common]]
[18:05:14.567]                 NAMES <- toupper(changed)
[18:05:14.567]                 args <- list()
[18:05:14.567]                 for (kk in seq_along(NAMES)) {
[18:05:14.567]                   name <- changed[[kk]]
[18:05:14.567]                   NAME <- NAMES[[kk]]
[18:05:14.567]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.567]                     next
[18:05:14.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.567]                 }
[18:05:14.567]                 NAMES <- toupper(added)
[18:05:14.567]                 for (kk in seq_along(NAMES)) {
[18:05:14.567]                   name <- added[[kk]]
[18:05:14.567]                   NAME <- NAMES[[kk]]
[18:05:14.567]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.567]                     next
[18:05:14.567]                   args[[name]] <- ""
[18:05:14.567]                 }
[18:05:14.567]                 NAMES <- toupper(removed)
[18:05:14.567]                 for (kk in seq_along(NAMES)) {
[18:05:14.567]                   name <- removed[[kk]]
[18:05:14.567]                   NAME <- NAMES[[kk]]
[18:05:14.567]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.567]                     next
[18:05:14.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.567]                 }
[18:05:14.567]                 if (length(args) > 0) 
[18:05:14.567]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.567]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.567]             }
[18:05:14.567]             else {
[18:05:14.567]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.567]             }
[18:05:14.567]             {
[18:05:14.567]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.567]                   0L) {
[18:05:14.567]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.567]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.567]                   base::options(opts)
[18:05:14.567]                 }
[18:05:14.567]                 {
[18:05:14.567]                   {
[18:05:14.567]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.567]                     NULL
[18:05:14.567]                   }
[18:05:14.567]                   options(future.plan = NULL)
[18:05:14.567]                   if (is.na(NA_character_)) 
[18:05:14.567]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.567]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.567]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.567]                     .init = FALSE)
[18:05:14.567]                 }
[18:05:14.567]             }
[18:05:14.567]         }
[18:05:14.567]     })
[18:05:14.567]     if (TRUE) {
[18:05:14.567]         base::sink(type = "output", split = FALSE)
[18:05:14.567]         if (TRUE) {
[18:05:14.567]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.567]         }
[18:05:14.567]         else {
[18:05:14.567]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.567]         }
[18:05:14.567]         base::close(...future.stdout)
[18:05:14.567]         ...future.stdout <- NULL
[18:05:14.567]     }
[18:05:14.567]     ...future.result$conditions <- ...future.conditions
[18:05:14.567]     ...future.result$finished <- base::Sys.time()
[18:05:14.567]     ...future.result
[18:05:14.567] }
[18:05:14.573] requestCore(): workers = 2
[18:05:14.576] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
[18:05:14.595] plan(): Setting new future strategy stack:
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:05:14.596] List of future strategies:
[18:05:14.596] 1. sequential:
[18:05:14.596]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.596]    - tweaked: FALSE
[18:05:14.596]    - call: NULL
[18:05:14.598] plan(): nbrOfWorkers() = 1
[18:05:14.602] plan(): Setting new future strategy stack:
[18:05:14.602] List of future strategies:
[18:05:14.602] 1. multicore:
[18:05:14.602]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.602]    - tweaked: FALSE
[18:05:14.602]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:14.607] result() for MulticoreFuture ...
[18:05:14.611] plan(): nbrOfWorkers() = 2
[18:05:14.613] result() for MulticoreFuture ...
[18:05:14.613] result() for MulticoreFuture ... done
[18:05:14.613] result() for MulticoreFuture ... done
[18:05:14.614] result() for MulticoreFuture ...
[18:05:14.614] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[18:05:14.621] getGlobalsAndPackages() ...
[18:05:14.622] Not searching for globals
[18:05:14.622] - globals: [0] <none>
[18:05:14.622] getGlobalsAndPackages() ... DONE
[18:05:14.623] Packages needed by the future expression (n = 0): <none>
[18:05:14.624] Packages needed by future strategies (n = 0): <none>
[18:05:14.627] {
[18:05:14.627]     {
[18:05:14.627]         {
[18:05:14.627]             ...future.startTime <- base::Sys.time()
[18:05:14.627]             {
[18:05:14.627]                 {
[18:05:14.627]                   {
[18:05:14.627]                     {
[18:05:14.627]                       base::local({
[18:05:14.627]                         has_future <- base::requireNamespace("future", 
[18:05:14.627]                           quietly = TRUE)
[18:05:14.627]                         if (has_future) {
[18:05:14.627]                           ns <- base::getNamespace("future")
[18:05:14.627]                           version <- ns[[".package"]][["version"]]
[18:05:14.627]                           if (is.null(version)) 
[18:05:14.627]                             version <- utils::packageVersion("future")
[18:05:14.627]                         }
[18:05:14.627]                         else {
[18:05:14.627]                           version <- NULL
[18:05:14.627]                         }
[18:05:14.627]                         if (!has_future || version < "1.8.0") {
[18:05:14.627]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.627]                             "", base::R.version$version.string), 
[18:05:14.627]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.627]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.627]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.627]                               "release", "version")], collapse = " "), 
[18:05:14.627]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.627]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.627]                             info)
[18:05:14.627]                           info <- base::paste(info, collapse = "; ")
[18:05:14.627]                           if (!has_future) {
[18:05:14.627]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.627]                               info)
[18:05:14.627]                           }
[18:05:14.627]                           else {
[18:05:14.627]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.627]                               info, version)
[18:05:14.627]                           }
[18:05:14.627]                           base::stop(msg)
[18:05:14.627]                         }
[18:05:14.627]                       })
[18:05:14.627]                     }
[18:05:14.627]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.627]                     base::options(mc.cores = 1L)
[18:05:14.627]                   }
[18:05:14.627]                   ...future.strategy.old <- future::plan("list")
[18:05:14.627]                   options(future.plan = NULL)
[18:05:14.627]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.627]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.627]                 }
[18:05:14.627]                 ...future.workdir <- getwd()
[18:05:14.627]             }
[18:05:14.627]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.627]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.627]         }
[18:05:14.627]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.627]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.627]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.627]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.627]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.627]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.627]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.627]             base::names(...future.oldOptions))
[18:05:14.627]     }
[18:05:14.627]     if (FALSE) {
[18:05:14.627]     }
[18:05:14.627]     else {
[18:05:14.627]         if (TRUE) {
[18:05:14.627]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.627]                 open = "w")
[18:05:14.627]         }
[18:05:14.627]         else {
[18:05:14.627]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.627]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.627]         }
[18:05:14.627]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.627]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.627]             base::sink(type = "output", split = FALSE)
[18:05:14.627]             base::close(...future.stdout)
[18:05:14.627]         }, add = TRUE)
[18:05:14.627]     }
[18:05:14.627]     ...future.frame <- base::sys.nframe()
[18:05:14.627]     ...future.conditions <- base::list()
[18:05:14.627]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.627]     if (FALSE) {
[18:05:14.627]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.627]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.627]     }
[18:05:14.627]     ...future.result <- base::tryCatch({
[18:05:14.627]         base::withCallingHandlers({
[18:05:14.627]             ...future.value <- base::withVisible(base::local({
[18:05:14.627]                 withCallingHandlers({
[18:05:14.627]                   {
[18:05:14.627]                     ii
[18:05:14.627]                   }
[18:05:14.627]                 }, immediateCondition = function(cond) {
[18:05:14.627]                   save_rds <- function (object, pathname, ...) 
[18:05:14.627]                   {
[18:05:14.627]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.627]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.627]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.627]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.627]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.627]                         fi_tmp[["mtime"]])
[18:05:14.627]                     }
[18:05:14.627]                     tryCatch({
[18:05:14.627]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.627]                     }, error = function(ex) {
[18:05:14.627]                       msg <- conditionMessage(ex)
[18:05:14.627]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.627]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.627]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.627]                         fi_tmp[["mtime"]], msg)
[18:05:14.627]                       ex$message <- msg
[18:05:14.627]                       stop(ex)
[18:05:14.627]                     })
[18:05:14.627]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.627]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.627]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.627]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.627]                       fi <- file.info(pathname)
[18:05:14.627]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.627]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.627]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.627]                         fi[["size"]], fi[["mtime"]])
[18:05:14.627]                       stop(msg)
[18:05:14.627]                     }
[18:05:14.627]                     invisible(pathname)
[18:05:14.627]                   }
[18:05:14.627]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.627]                     rootPath = tempdir()) 
[18:05:14.627]                   {
[18:05:14.627]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.627]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.627]                       tmpdir = path, fileext = ".rds")
[18:05:14.627]                     save_rds(obj, file)
[18:05:14.627]                   }
[18:05:14.627]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.627]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.627]                   {
[18:05:14.627]                     inherits <- base::inherits
[18:05:14.627]                     invokeRestart <- base::invokeRestart
[18:05:14.627]                     is.null <- base::is.null
[18:05:14.627]                     muffled <- FALSE
[18:05:14.627]                     if (inherits(cond, "message")) {
[18:05:14.627]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.627]                       if (muffled) 
[18:05:14.627]                         invokeRestart("muffleMessage")
[18:05:14.627]                     }
[18:05:14.627]                     else if (inherits(cond, "warning")) {
[18:05:14.627]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.627]                       if (muffled) 
[18:05:14.627]                         invokeRestart("muffleWarning")
[18:05:14.627]                     }
[18:05:14.627]                     else if (inherits(cond, "condition")) {
[18:05:14.627]                       if (!is.null(pattern)) {
[18:05:14.627]                         computeRestarts <- base::computeRestarts
[18:05:14.627]                         grepl <- base::grepl
[18:05:14.627]                         restarts <- computeRestarts(cond)
[18:05:14.627]                         for (restart in restarts) {
[18:05:14.627]                           name <- restart$name
[18:05:14.627]                           if (is.null(name)) 
[18:05:14.627]                             next
[18:05:14.627]                           if (!grepl(pattern, name)) 
[18:05:14.627]                             next
[18:05:14.627]                           invokeRestart(restart)
[18:05:14.627]                           muffled <- TRUE
[18:05:14.627]                           break
[18:05:14.627]                         }
[18:05:14.627]                       }
[18:05:14.627]                     }
[18:05:14.627]                     invisible(muffled)
[18:05:14.627]                   }
[18:05:14.627]                   muffleCondition(cond)
[18:05:14.627]                 })
[18:05:14.627]             }))
[18:05:14.627]             future::FutureResult(value = ...future.value$value, 
[18:05:14.627]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.627]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.627]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.627]                     ...future.globalenv.names))
[18:05:14.627]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.627]         }, condition = base::local({
[18:05:14.627]             c <- base::c
[18:05:14.627]             inherits <- base::inherits
[18:05:14.627]             invokeRestart <- base::invokeRestart
[18:05:14.627]             length <- base::length
[18:05:14.627]             list <- base::list
[18:05:14.627]             seq.int <- base::seq.int
[18:05:14.627]             signalCondition <- base::signalCondition
[18:05:14.627]             sys.calls <- base::sys.calls
[18:05:14.627]             `[[` <- base::`[[`
[18:05:14.627]             `+` <- base::`+`
[18:05:14.627]             `<<-` <- base::`<<-`
[18:05:14.627]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.627]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.627]                   3L)]
[18:05:14.627]             }
[18:05:14.627]             function(cond) {
[18:05:14.627]                 is_error <- inherits(cond, "error")
[18:05:14.627]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.627]                   NULL)
[18:05:14.627]                 if (is_error) {
[18:05:14.627]                   sessionInformation <- function() {
[18:05:14.627]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.627]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.627]                       search = base::search(), system = base::Sys.info())
[18:05:14.627]                   }
[18:05:14.627]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.627]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.627]                     cond$call), session = sessionInformation(), 
[18:05:14.627]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.627]                   signalCondition(cond)
[18:05:14.627]                 }
[18:05:14.627]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.627]                 "immediateCondition"))) {
[18:05:14.627]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.627]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.627]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.627]                   if (TRUE && !signal) {
[18:05:14.627]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.627]                     {
[18:05:14.627]                       inherits <- base::inherits
[18:05:14.627]                       invokeRestart <- base::invokeRestart
[18:05:14.627]                       is.null <- base::is.null
[18:05:14.627]                       muffled <- FALSE
[18:05:14.627]                       if (inherits(cond, "message")) {
[18:05:14.627]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.627]                         if (muffled) 
[18:05:14.627]                           invokeRestart("muffleMessage")
[18:05:14.627]                       }
[18:05:14.627]                       else if (inherits(cond, "warning")) {
[18:05:14.627]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.627]                         if (muffled) 
[18:05:14.627]                           invokeRestart("muffleWarning")
[18:05:14.627]                       }
[18:05:14.627]                       else if (inherits(cond, "condition")) {
[18:05:14.627]                         if (!is.null(pattern)) {
[18:05:14.627]                           computeRestarts <- base::computeRestarts
[18:05:14.627]                           grepl <- base::grepl
[18:05:14.627]                           restarts <- computeRestarts(cond)
[18:05:14.627]                           for (restart in restarts) {
[18:05:14.627]                             name <- restart$name
[18:05:14.627]                             if (is.null(name)) 
[18:05:14.627]                               next
[18:05:14.627]                             if (!grepl(pattern, name)) 
[18:05:14.627]                               next
[18:05:14.627]                             invokeRestart(restart)
[18:05:14.627]                             muffled <- TRUE
[18:05:14.627]                             break
[18:05:14.627]                           }
[18:05:14.627]                         }
[18:05:14.627]                       }
[18:05:14.627]                       invisible(muffled)
[18:05:14.627]                     }
[18:05:14.627]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.627]                   }
[18:05:14.627]                 }
[18:05:14.627]                 else {
[18:05:14.627]                   if (TRUE) {
[18:05:14.627]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.627]                     {
[18:05:14.627]                       inherits <- base::inherits
[18:05:14.627]                       invokeRestart <- base::invokeRestart
[18:05:14.627]                       is.null <- base::is.null
[18:05:14.627]                       muffled <- FALSE
[18:05:14.627]                       if (inherits(cond, "message")) {
[18:05:14.627]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.627]                         if (muffled) 
[18:05:14.627]                           invokeRestart("muffleMessage")
[18:05:14.627]                       }
[18:05:14.627]                       else if (inherits(cond, "warning")) {
[18:05:14.627]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.627]                         if (muffled) 
[18:05:14.627]                           invokeRestart("muffleWarning")
[18:05:14.627]                       }
[18:05:14.627]                       else if (inherits(cond, "condition")) {
[18:05:14.627]                         if (!is.null(pattern)) {
[18:05:14.627]                           computeRestarts <- base::computeRestarts
[18:05:14.627]                           grepl <- base::grepl
[18:05:14.627]                           restarts <- computeRestarts(cond)
[18:05:14.627]                           for (restart in restarts) {
[18:05:14.627]                             name <- restart$name
[18:05:14.627]                             if (is.null(name)) 
[18:05:14.627]                               next
[18:05:14.627]                             if (!grepl(pattern, name)) 
[18:05:14.627]                               next
[18:05:14.627]                             invokeRestart(restart)
[18:05:14.627]                             muffled <- TRUE
[18:05:14.627]                             break
[18:05:14.627]                           }
[18:05:14.627]                         }
[18:05:14.627]                       }
[18:05:14.627]                       invisible(muffled)
[18:05:14.627]                     }
[18:05:14.627]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.627]                   }
[18:05:14.627]                 }
[18:05:14.627]             }
[18:05:14.627]         }))
[18:05:14.627]     }, error = function(ex) {
[18:05:14.627]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.627]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.627]                 ...future.rng), started = ...future.startTime, 
[18:05:14.627]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.627]             version = "1.8"), class = "FutureResult")
[18:05:14.627]     }, finally = {
[18:05:14.627]         if (!identical(...future.workdir, getwd())) 
[18:05:14.627]             setwd(...future.workdir)
[18:05:14.627]         {
[18:05:14.627]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.627]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.627]             }
[18:05:14.627]             base::options(...future.oldOptions)
[18:05:14.627]             if (.Platform$OS.type == "windows") {
[18:05:14.627]                 old_names <- names(...future.oldEnvVars)
[18:05:14.627]                 envs <- base::Sys.getenv()
[18:05:14.627]                 names <- names(envs)
[18:05:14.627]                 common <- intersect(names, old_names)
[18:05:14.627]                 added <- setdiff(names, old_names)
[18:05:14.627]                 removed <- setdiff(old_names, names)
[18:05:14.627]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.627]                   envs[common]]
[18:05:14.627]                 NAMES <- toupper(changed)
[18:05:14.627]                 args <- list()
[18:05:14.627]                 for (kk in seq_along(NAMES)) {
[18:05:14.627]                   name <- changed[[kk]]
[18:05:14.627]                   NAME <- NAMES[[kk]]
[18:05:14.627]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.627]                     next
[18:05:14.627]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.627]                 }
[18:05:14.627]                 NAMES <- toupper(added)
[18:05:14.627]                 for (kk in seq_along(NAMES)) {
[18:05:14.627]                   name <- added[[kk]]
[18:05:14.627]                   NAME <- NAMES[[kk]]
[18:05:14.627]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.627]                     next
[18:05:14.627]                   args[[name]] <- ""
[18:05:14.627]                 }
[18:05:14.627]                 NAMES <- toupper(removed)
[18:05:14.627]                 for (kk in seq_along(NAMES)) {
[18:05:14.627]                   name <- removed[[kk]]
[18:05:14.627]                   NAME <- NAMES[[kk]]
[18:05:14.627]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.627]                     next
[18:05:14.627]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.627]                 }
[18:05:14.627]                 if (length(args) > 0) 
[18:05:14.627]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.627]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.627]             }
[18:05:14.627]             else {
[18:05:14.627]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.627]             }
[18:05:14.627]             {
[18:05:14.627]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.627]                   0L) {
[18:05:14.627]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.627]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.627]                   base::options(opts)
[18:05:14.627]                 }
[18:05:14.627]                 {
[18:05:14.627]                   {
[18:05:14.627]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.627]                     NULL
[18:05:14.627]                   }
[18:05:14.627]                   options(future.plan = NULL)
[18:05:14.627]                   if (is.na(NA_character_)) 
[18:05:14.627]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.627]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.627]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.627]                     .init = FALSE)
[18:05:14.627]                 }
[18:05:14.627]             }
[18:05:14.627]         }
[18:05:14.627]     })
[18:05:14.627]     if (TRUE) {
[18:05:14.627]         base::sink(type = "output", split = FALSE)
[18:05:14.627]         if (TRUE) {
[18:05:14.627]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.627]         }
[18:05:14.627]         else {
[18:05:14.627]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.627]         }
[18:05:14.627]         base::close(...future.stdout)
[18:05:14.627]         ...future.stdout <- NULL
[18:05:14.627]     }
[18:05:14.627]     ...future.result$conditions <- ...future.conditions
[18:05:14.627]     ...future.result$finished <- base::Sys.time()
[18:05:14.627]     ...future.result
[18:05:14.627] }
[18:05:14.631] requestCore(): workers = 2
[18:05:14.635] MulticoreFuture started
 - Creating multicore future #2 ...
[18:05:14.640] plan(): Setting new future strategy stack:
[18:05:14.641] List of future strategies:
[18:05:14.641] 1. sequential:
[18:05:14.641]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.641]    - tweaked: FALSE
[18:05:14.641]    - call: NULL
[18:05:14.644] plan(): nbrOfWorkers() = 1
[18:05:14.649] getGlobalsAndPackages() ...
[18:05:14.651] Not searching for globals
[18:05:14.652] - globals: [0] <none>
[18:05:14.652] getGlobalsAndPackages() ... DONE
[18:05:14.654] plan(): Setting new future strategy stack:
[18:05:14.656] Packages needed by the future expression (n = 0): <none>
[18:05:14.656] Packages needed by future strategies (n = 0): <none>
[18:05:14.654] List of future strategies:
[18:05:14.654] 1. multicore:
[18:05:14.654]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.654]    - tweaked: FALSE
[18:05:14.654]    - call: plan(multicore)
[18:05:14.669] plan(): nbrOfWorkers() = 2
[18:05:14.660] {
[18:05:14.660]     {
[18:05:14.660]         {
[18:05:14.660]             ...future.startTime <- base::Sys.time()
[18:05:14.660]             {
[18:05:14.660]                 {
[18:05:14.660]                   {
[18:05:14.660]                     {
[18:05:14.660]                       base::local({
[18:05:14.660]                         has_future <- base::requireNamespace("future", 
[18:05:14.660]                           quietly = TRUE)
[18:05:14.660]                         if (has_future) {
[18:05:14.660]                           ns <- base::getNamespace("future")
[18:05:14.660]                           version <- ns[[".package"]][["version"]]
[18:05:14.660]                           if (is.null(version)) 
[18:05:14.660]                             version <- utils::packageVersion("future")
[18:05:14.660]                         }
[18:05:14.660]                         else {
[18:05:14.660]                           version <- NULL
[18:05:14.660]                         }
[18:05:14.660]                         if (!has_future || version < "1.8.0") {
[18:05:14.660]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.660]                             "", base::R.version$version.string), 
[18:05:14.660]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.660]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.660]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.660]                               "release", "version")], collapse = " "), 
[18:05:14.660]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.660]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.660]                             info)
[18:05:14.660]                           info <- base::paste(info, collapse = "; ")
[18:05:14.660]                           if (!has_future) {
[18:05:14.660]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.660]                               info)
[18:05:14.660]                           }
[18:05:14.660]                           else {
[18:05:14.660]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.660]                               info, version)
[18:05:14.660]                           }
[18:05:14.660]                           base::stop(msg)
[18:05:14.660]                         }
[18:05:14.660]                       })
[18:05:14.660]                     }
[18:05:14.660]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.660]                     base::options(mc.cores = 1L)
[18:05:14.660]                   }
[18:05:14.660]                   ...future.strategy.old <- future::plan("list")
[18:05:14.660]                   options(future.plan = NULL)
[18:05:14.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.660]                 }
[18:05:14.660]                 ...future.workdir <- getwd()
[18:05:14.660]             }
[18:05:14.660]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.660]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.660]         }
[18:05:14.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.660]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.660]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.660]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.660]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.660]             base::names(...future.oldOptions))
[18:05:14.660]     }
[18:05:14.660]     if (FALSE) {
[18:05:14.660]     }
[18:05:14.660]     else {
[18:05:14.660]         if (TRUE) {
[18:05:14.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.660]                 open = "w")
[18:05:14.660]         }
[18:05:14.660]         else {
[18:05:14.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.660]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.660]         }
[18:05:14.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.660]             base::sink(type = "output", split = FALSE)
[18:05:14.660]             base::close(...future.stdout)
[18:05:14.660]         }, add = TRUE)
[18:05:14.660]     }
[18:05:14.660]     ...future.frame <- base::sys.nframe()
[18:05:14.660]     ...future.conditions <- base::list()
[18:05:14.660]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.660]     if (FALSE) {
[18:05:14.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.660]     }
[18:05:14.660]     ...future.result <- base::tryCatch({
[18:05:14.660]         base::withCallingHandlers({
[18:05:14.660]             ...future.value <- base::withVisible(base::local({
[18:05:14.660]                 withCallingHandlers({
[18:05:14.660]                   {
[18:05:14.660]                     ii
[18:05:14.660]                   }
[18:05:14.660]                 }, immediateCondition = function(cond) {
[18:05:14.660]                   save_rds <- function (object, pathname, ...) 
[18:05:14.660]                   {
[18:05:14.660]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.660]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.660]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.660]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.660]                         fi_tmp[["mtime"]])
[18:05:14.660]                     }
[18:05:14.660]                     tryCatch({
[18:05:14.660]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.660]                     }, error = function(ex) {
[18:05:14.660]                       msg <- conditionMessage(ex)
[18:05:14.660]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.660]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.660]                         fi_tmp[["mtime"]], msg)
[18:05:14.660]                       ex$message <- msg
[18:05:14.660]                       stop(ex)
[18:05:14.660]                     })
[18:05:14.660]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.660]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.660]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.660]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.660]                       fi <- file.info(pathname)
[18:05:14.660]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.660]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.660]                         fi[["size"]], fi[["mtime"]])
[18:05:14.660]                       stop(msg)
[18:05:14.660]                     }
[18:05:14.660]                     invisible(pathname)
[18:05:14.660]                   }
[18:05:14.660]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.660]                     rootPath = tempdir()) 
[18:05:14.660]                   {
[18:05:14.660]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.660]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.660]                       tmpdir = path, fileext = ".rds")
[18:05:14.660]                     save_rds(obj, file)
[18:05:14.660]                   }
[18:05:14.660]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.660]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.660]                   {
[18:05:14.660]                     inherits <- base::inherits
[18:05:14.660]                     invokeRestart <- base::invokeRestart
[18:05:14.660]                     is.null <- base::is.null
[18:05:14.660]                     muffled <- FALSE
[18:05:14.660]                     if (inherits(cond, "message")) {
[18:05:14.660]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.660]                       if (muffled) 
[18:05:14.660]                         invokeRestart("muffleMessage")
[18:05:14.660]                     }
[18:05:14.660]                     else if (inherits(cond, "warning")) {
[18:05:14.660]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.660]                       if (muffled) 
[18:05:14.660]                         invokeRestart("muffleWarning")
[18:05:14.660]                     }
[18:05:14.660]                     else if (inherits(cond, "condition")) {
[18:05:14.660]                       if (!is.null(pattern)) {
[18:05:14.660]                         computeRestarts <- base::computeRestarts
[18:05:14.660]                         grepl <- base::grepl
[18:05:14.660]                         restarts <- computeRestarts(cond)
[18:05:14.660]                         for (restart in restarts) {
[18:05:14.660]                           name <- restart$name
[18:05:14.660]                           if (is.null(name)) 
[18:05:14.660]                             next
[18:05:14.660]                           if (!grepl(pattern, name)) 
[18:05:14.660]                             next
[18:05:14.660]                           invokeRestart(restart)
[18:05:14.660]                           muffled <- TRUE
[18:05:14.660]                           break
[18:05:14.660]                         }
[18:05:14.660]                       }
[18:05:14.660]                     }
[18:05:14.660]                     invisible(muffled)
[18:05:14.660]                   }
[18:05:14.660]                   muffleCondition(cond)
[18:05:14.660]                 })
[18:05:14.660]             }))
[18:05:14.660]             future::FutureResult(value = ...future.value$value, 
[18:05:14.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.660]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.660]                     ...future.globalenv.names))
[18:05:14.660]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.660]         }, condition = base::local({
[18:05:14.660]             c <- base::c
[18:05:14.660]             inherits <- base::inherits
[18:05:14.660]             invokeRestart <- base::invokeRestart
[18:05:14.660]             length <- base::length
[18:05:14.660]             list <- base::list
[18:05:14.660]             seq.int <- base::seq.int
[18:05:14.660]             signalCondition <- base::signalCondition
[18:05:14.660]             sys.calls <- base::sys.calls
[18:05:14.660]             `[[` <- base::`[[`
[18:05:14.660]             `+` <- base::`+`
[18:05:14.660]             `<<-` <- base::`<<-`
[18:05:14.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.660]                   3L)]
[18:05:14.660]             }
[18:05:14.660]             function(cond) {
[18:05:14.660]                 is_error <- inherits(cond, "error")
[18:05:14.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.660]                   NULL)
[18:05:14.660]                 if (is_error) {
[18:05:14.660]                   sessionInformation <- function() {
[18:05:14.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.660]                       search = base::search(), system = base::Sys.info())
[18:05:14.660]                   }
[18:05:14.660]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.660]                     cond$call), session = sessionInformation(), 
[18:05:14.660]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.660]                   signalCondition(cond)
[18:05:14.660]                 }
[18:05:14.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.660]                 "immediateCondition"))) {
[18:05:14.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.660]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.660]                   if (TRUE && !signal) {
[18:05:14.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.660]                     {
[18:05:14.660]                       inherits <- base::inherits
[18:05:14.660]                       invokeRestart <- base::invokeRestart
[18:05:14.660]                       is.null <- base::is.null
[18:05:14.660]                       muffled <- FALSE
[18:05:14.660]                       if (inherits(cond, "message")) {
[18:05:14.660]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.660]                         if (muffled) 
[18:05:14.660]                           invokeRestart("muffleMessage")
[18:05:14.660]                       }
[18:05:14.660]                       else if (inherits(cond, "warning")) {
[18:05:14.660]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.660]                         if (muffled) 
[18:05:14.660]                           invokeRestart("muffleWarning")
[18:05:14.660]                       }
[18:05:14.660]                       else if (inherits(cond, "condition")) {
[18:05:14.660]                         if (!is.null(pattern)) {
[18:05:14.660]                           computeRestarts <- base::computeRestarts
[18:05:14.660]                           grepl <- base::grepl
[18:05:14.660]                           restarts <- computeRestarts(cond)
[18:05:14.660]                           for (restart in restarts) {
[18:05:14.660]                             name <- restart$name
[18:05:14.660]                             if (is.null(name)) 
[18:05:14.660]                               next
[18:05:14.660]                             if (!grepl(pattern, name)) 
[18:05:14.660]                               next
[18:05:14.660]                             invokeRestart(restart)
[18:05:14.660]                             muffled <- TRUE
[18:05:14.660]                             break
[18:05:14.660]                           }
[18:05:14.660]                         }
[18:05:14.660]                       }
[18:05:14.660]                       invisible(muffled)
[18:05:14.660]                     }
[18:05:14.660]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.660]                   }
[18:05:14.660]                 }
[18:05:14.660]                 else {
[18:05:14.660]                   if (TRUE) {
[18:05:14.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.660]                     {
[18:05:14.660]                       inherits <- base::inherits
[18:05:14.660]                       invokeRestart <- base::invokeRestart
[18:05:14.660]                       is.null <- base::is.null
[18:05:14.660]                       muffled <- FALSE
[18:05:14.660]                       if (inherits(cond, "message")) {
[18:05:14.660]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.660]                         if (muffled) 
[18:05:14.660]                           invokeRestart("muffleMessage")
[18:05:14.660]                       }
[18:05:14.660]                       else if (inherits(cond, "warning")) {
[18:05:14.660]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.660]                         if (muffled) 
[18:05:14.660]                           invokeRestart("muffleWarning")
[18:05:14.660]                       }
[18:05:14.660]                       else if (inherits(cond, "condition")) {
[18:05:14.660]                         if (!is.null(pattern)) {
[18:05:14.660]                           computeRestarts <- base::computeRestarts
[18:05:14.660]                           grepl <- base::grepl
[18:05:14.660]                           restarts <- computeRestarts(cond)
[18:05:14.660]                           for (restart in restarts) {
[18:05:14.660]                             name <- restart$name
[18:05:14.660]                             if (is.null(name)) 
[18:05:14.660]                               next
[18:05:14.660]                             if (!grepl(pattern, name)) 
[18:05:14.660]                               next
[18:05:14.660]                             invokeRestart(restart)
[18:05:14.660]                             muffled <- TRUE
[18:05:14.660]                             break
[18:05:14.660]                           }
[18:05:14.660]                         }
[18:05:14.660]                       }
[18:05:14.660]                       invisible(muffled)
[18:05:14.660]                     }
[18:05:14.660]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.660]                   }
[18:05:14.660]                 }
[18:05:14.660]             }
[18:05:14.660]         }))
[18:05:14.660]     }, error = function(ex) {
[18:05:14.660]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.660]                 ...future.rng), started = ...future.startTime, 
[18:05:14.660]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.660]             version = "1.8"), class = "FutureResult")
[18:05:14.660]     }, finally = {
[18:05:14.660]         if (!identical(...future.workdir, getwd())) 
[18:05:14.660]             setwd(...future.workdir)
[18:05:14.660]         {
[18:05:14.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.660]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.660]             }
[18:05:14.660]             base::options(...future.oldOptions)
[18:05:14.660]             if (.Platform$OS.type == "windows") {
[18:05:14.660]                 old_names <- names(...future.oldEnvVars)
[18:05:14.660]                 envs <- base::Sys.getenv()
[18:05:14.660]                 names <- names(envs)
[18:05:14.660]                 common <- intersect(names, old_names)
[18:05:14.660]                 added <- setdiff(names, old_names)
[18:05:14.660]                 removed <- setdiff(old_names, names)
[18:05:14.660]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.660]                   envs[common]]
[18:05:14.660]                 NAMES <- toupper(changed)
[18:05:14.660]                 args <- list()
[18:05:14.660]                 for (kk in seq_along(NAMES)) {
[18:05:14.660]                   name <- changed[[kk]]
[18:05:14.660]                   NAME <- NAMES[[kk]]
[18:05:14.660]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.660]                     next
[18:05:14.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.660]                 }
[18:05:14.660]                 NAMES <- toupper(added)
[18:05:14.660]                 for (kk in seq_along(NAMES)) {
[18:05:14.660]                   name <- added[[kk]]
[18:05:14.660]                   NAME <- NAMES[[kk]]
[18:05:14.660]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.660]                     next
[18:05:14.660]                   args[[name]] <- ""
[18:05:14.660]                 }
[18:05:14.660]                 NAMES <- toupper(removed)
[18:05:14.660]                 for (kk in seq_along(NAMES)) {
[18:05:14.660]                   name <- removed[[kk]]
[18:05:14.660]                   NAME <- NAMES[[kk]]
[18:05:14.660]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.660]                     next
[18:05:14.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.660]                 }
[18:05:14.660]                 if (length(args) > 0) 
[18:05:14.660]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.660]             }
[18:05:14.660]             else {
[18:05:14.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.660]             }
[18:05:14.660]             {
[18:05:14.660]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.660]                   0L) {
[18:05:14.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.660]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.660]                   base::options(opts)
[18:05:14.660]                 }
[18:05:14.660]                 {
[18:05:14.660]                   {
[18:05:14.660]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.660]                     NULL
[18:05:14.660]                   }
[18:05:14.660]                   options(future.plan = NULL)
[18:05:14.660]                   if (is.na(NA_character_)) 
[18:05:14.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.660]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.660]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.660]                     .init = FALSE)
[18:05:14.660]                 }
[18:05:14.660]             }
[18:05:14.660]         }
[18:05:14.660]     })
[18:05:14.660]     if (TRUE) {
[18:05:14.660]         base::sink(type = "output", split = FALSE)
[18:05:14.660]         if (TRUE) {
[18:05:14.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.660]         }
[18:05:14.660]         else {
[18:05:14.660]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.660]         }
[18:05:14.660]         base::close(...future.stdout)
[18:05:14.660]         ...future.stdout <- NULL
[18:05:14.660]     }
[18:05:14.660]     ...future.result$conditions <- ...future.conditions
[18:05:14.660]     ...future.result$finished <- base::Sys.time()
[18:05:14.660]     ...future.result
[18:05:14.660] }
[18:05:14.671] requestCore(): workers = 2
[18:05:14.675] MulticoreFuture started
 - Creating multicore future #3 ...
[18:05:14.679] plan(): Setting new future strategy stack:
[18:05:14.685] getGlobalsAndPackages() ...
[18:05:14.681] List of future strategies:
[18:05:14.681] 1. sequential:
[18:05:14.681]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.681]    - tweaked: FALSE
[18:05:14.681]    - call: NULL
[18:05:14.686] Not searching for globals
[18:05:14.686] plan(): nbrOfWorkers() = 1
[18:05:14.686] - globals: [0] <none>
[18:05:14.687] getGlobalsAndPackages() ... DONE
[18:05:14.688] Packages needed by the future expression (n = 0): <none>
[18:05:14.689] Packages needed by future strategies (n = 0): <none>
[18:05:14.692] plan(): Setting new future strategy stack:
[18:05:14.693] List of future strategies:
[18:05:14.693] 1. multicore:
[18:05:14.693]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.693]    - tweaked: FALSE
[18:05:14.693]    - call: plan(multicore)
[18:05:14.691] {
[18:05:14.691]     {
[18:05:14.691]         {
[18:05:14.691]             ...future.startTime <- base::Sys.time()
[18:05:14.691]             {
[18:05:14.691]                 {
[18:05:14.691]                   {
[18:05:14.691]                     {
[18:05:14.691]                       base::local({
[18:05:14.691]                         has_future <- base::requireNamespace("future", 
[18:05:14.691]                           quietly = TRUE)
[18:05:14.691]                         if (has_future) {
[18:05:14.691]                           ns <- base::getNamespace("future")
[18:05:14.691]                           version <- ns[[".package"]][["version"]]
[18:05:14.691]                           if (is.null(version)) 
[18:05:14.691]                             version <- utils::packageVersion("future")
[18:05:14.691]                         }
[18:05:14.691]                         else {
[18:05:14.691]                           version <- NULL
[18:05:14.691]                         }
[18:05:14.691]                         if (!has_future || version < "1.8.0") {
[18:05:14.691]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.691]                             "", base::R.version$version.string), 
[18:05:14.691]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.691]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.691]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.691]                               "release", "version")], collapse = " "), 
[18:05:14.691]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.691]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.691]                             info)
[18:05:14.691]                           info <- base::paste(info, collapse = "; ")
[18:05:14.691]                           if (!has_future) {
[18:05:14.691]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.691]                               info)
[18:05:14.691]                           }
[18:05:14.691]                           else {
[18:05:14.691]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.691]                               info, version)
[18:05:14.691]                           }
[18:05:14.691]                           base::stop(msg)
[18:05:14.691]                         }
[18:05:14.691]                       })
[18:05:14.691]                     }
[18:05:14.691]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.691]                     base::options(mc.cores = 1L)
[18:05:14.691]                   }
[18:05:14.691]                   ...future.strategy.old <- future::plan("list")
[18:05:14.691]                   options(future.plan = NULL)
[18:05:14.691]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.691]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.691]                 }
[18:05:14.691]                 ...future.workdir <- getwd()
[18:05:14.691]             }
[18:05:14.691]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.691]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.691]         }
[18:05:14.691]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.691]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.691]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.691]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.691]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.691]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.691]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.691]             base::names(...future.oldOptions))
[18:05:14.691]     }
[18:05:14.691]     if (FALSE) {
[18:05:14.691]     }
[18:05:14.691]     else {
[18:05:14.691]         if (TRUE) {
[18:05:14.691]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.691]                 open = "w")
[18:05:14.691]         }
[18:05:14.691]         else {
[18:05:14.691]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.691]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.691]         }
[18:05:14.691]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.691]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.691]             base::sink(type = "output", split = FALSE)
[18:05:14.691]             base::close(...future.stdout)
[18:05:14.691]         }, add = TRUE)
[18:05:14.691]     }
[18:05:14.691]     ...future.frame <- base::sys.nframe()
[18:05:14.691]     ...future.conditions <- base::list()
[18:05:14.691]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.691]     if (FALSE) {
[18:05:14.691]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.691]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.691]     }
[18:05:14.691]     ...future.result <- base::tryCatch({
[18:05:14.691]         base::withCallingHandlers({
[18:05:14.691]             ...future.value <- base::withVisible(base::local({
[18:05:14.691]                 withCallingHandlers({
[18:05:14.691]                   {
[18:05:14.691]                     ii
[18:05:14.691]                   }
[18:05:14.691]                 }, immediateCondition = function(cond) {
[18:05:14.691]                   save_rds <- function (object, pathname, ...) 
[18:05:14.691]                   {
[18:05:14.691]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.691]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.691]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.691]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.691]                         fi_tmp[["mtime"]])
[18:05:14.691]                     }
[18:05:14.691]                     tryCatch({
[18:05:14.691]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.691]                     }, error = function(ex) {
[18:05:14.691]                       msg <- conditionMessage(ex)
[18:05:14.691]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.691]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.691]                         fi_tmp[["mtime"]], msg)
[18:05:14.691]                       ex$message <- msg
[18:05:14.691]                       stop(ex)
[18:05:14.691]                     })
[18:05:14.691]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.691]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.691]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.691]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.691]                       fi <- file.info(pathname)
[18:05:14.691]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.691]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.691]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.691]                         fi[["size"]], fi[["mtime"]])
[18:05:14.691]                       stop(msg)
[18:05:14.691]                     }
[18:05:14.691]                     invisible(pathname)
[18:05:14.691]                   }
[18:05:14.691]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.691]                     rootPath = tempdir()) 
[18:05:14.691]                   {
[18:05:14.691]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.691]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.691]                       tmpdir = path, fileext = ".rds")
[18:05:14.691]                     save_rds(obj, file)
[18:05:14.691]                   }
[18:05:14.691]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.691]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.691]                   {
[18:05:14.691]                     inherits <- base::inherits
[18:05:14.691]                     invokeRestart <- base::invokeRestart
[18:05:14.691]                     is.null <- base::is.null
[18:05:14.691]                     muffled <- FALSE
[18:05:14.691]                     if (inherits(cond, "message")) {
[18:05:14.691]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.691]                       if (muffled) 
[18:05:14.691]                         invokeRestart("muffleMessage")
[18:05:14.691]                     }
[18:05:14.691]                     else if (inherits(cond, "warning")) {
[18:05:14.691]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.691]                       if (muffled) 
[18:05:14.691]                         invokeRestart("muffleWarning")
[18:05:14.691]                     }
[18:05:14.691]                     else if (inherits(cond, "condition")) {
[18:05:14.691]                       if (!is.null(pattern)) {
[18:05:14.691]                         computeRestarts <- base::computeRestarts
[18:05:14.691]                         grepl <- base::grepl
[18:05:14.691]                         restarts <- computeRestarts(cond)
[18:05:14.691]                         for (restart in restarts) {
[18:05:14.691]                           name <- restart$name
[18:05:14.691]                           if (is.null(name)) 
[18:05:14.691]                             next
[18:05:14.691]                           if (!grepl(pattern, name)) 
[18:05:14.691]                             next
[18:05:14.691]                           invokeRestart(restart)
[18:05:14.691]                           muffled <- TRUE
[18:05:14.691]                           break
[18:05:14.691]                         }
[18:05:14.691]                       }
[18:05:14.691]                     }
[18:05:14.691]                     invisible(muffled)
[18:05:14.691]                   }
[18:05:14.691]                   muffleCondition(cond)
[18:05:14.691]                 })
[18:05:14.691]             }))
[18:05:14.691]             future::FutureResult(value = ...future.value$value, 
[18:05:14.691]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.691]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.691]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.691]                     ...future.globalenv.names))
[18:05:14.691]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.691]         }, condition = base::local({
[18:05:14.691]             c <- base::c
[18:05:14.691]             inherits <- base::inherits
[18:05:14.691]             invokeRestart <- base::invokeRestart
[18:05:14.691]             length <- base::length
[18:05:14.691]             list <- base::list
[18:05:14.691]             seq.int <- base::seq.int
[18:05:14.691]             signalCondition <- base::signalCondition
[18:05:14.691]             sys.calls <- base::sys.calls
[18:05:14.691]             `[[` <- base::`[[`
[18:05:14.691]             `+` <- base::`+`
[18:05:14.691]             `<<-` <- base::`<<-`
[18:05:14.691]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.691]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.691]                   3L)]
[18:05:14.691]             }
[18:05:14.691]             function(cond) {
[18:05:14.691]                 is_error <- inherits(cond, "error")
[18:05:14.691]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.691]                   NULL)
[18:05:14.691]                 if (is_error) {
[18:05:14.691]                   sessionInformation <- function() {
[18:05:14.691]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.691]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.691]                       search = base::search(), system = base::Sys.info())
[18:05:14.691]                   }
[18:05:14.691]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.691]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.691]                     cond$call), session = sessionInformation(), 
[18:05:14.691]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.691]                   signalCondition(cond)
[18:05:14.691]                 }
[18:05:14.691]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.691]                 "immediateCondition"))) {
[18:05:14.691]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.691]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.691]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.691]                   if (TRUE && !signal) {
[18:05:14.691]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.691]                     {
[18:05:14.691]                       inherits <- base::inherits
[18:05:14.691]                       invokeRestart <- base::invokeRestart
[18:05:14.691]                       is.null <- base::is.null
[18:05:14.691]                       muffled <- FALSE
[18:05:14.691]                       if (inherits(cond, "message")) {
[18:05:14.691]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.691]                         if (muffled) 
[18:05:14.691]                           invokeRestart("muffleMessage")
[18:05:14.691]                       }
[18:05:14.691]                       else if (inherits(cond, "warning")) {
[18:05:14.691]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.691]                         if (muffled) 
[18:05:14.691]                           invokeRestart("muffleWarning")
[18:05:14.691]                       }
[18:05:14.691]                       else if (inherits(cond, "condition")) {
[18:05:14.691]                         if (!is.null(pattern)) {
[18:05:14.691]                           computeRestarts <- base::computeRestarts
[18:05:14.691]                           grepl <- base::grepl
[18:05:14.691]                           restarts <- computeRestarts(cond)
[18:05:14.691]                           for (restart in restarts) {
[18:05:14.691]                             name <- restart$name
[18:05:14.691]                             if (is.null(name)) 
[18:05:14.691]                               next
[18:05:14.691]                             if (!grepl(pattern, name)) 
[18:05:14.691]                               next
[18:05:14.691]                             invokeRestart(restart)
[18:05:14.691]                             muffled <- TRUE
[18:05:14.691]                             break
[18:05:14.691]                           }
[18:05:14.691]                         }
[18:05:14.691]                       }
[18:05:14.691]                       invisible(muffled)
[18:05:14.691]                     }
[18:05:14.691]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.691]                   }
[18:05:14.691]                 }
[18:05:14.691]                 else {
[18:05:14.691]                   if (TRUE) {
[18:05:14.691]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.691]                     {
[18:05:14.691]                       inherits <- base::inherits
[18:05:14.691]                       invokeRestart <- base::invokeRestart
[18:05:14.691]                       is.null <- base::is.null
[18:05:14.691]                       muffled <- FALSE
[18:05:14.691]                       if (inherits(cond, "message")) {
[18:05:14.691]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.691]                         if (muffled) 
[18:05:14.691]                           invokeRestart("muffleMessage")
[18:05:14.691]                       }
[18:05:14.691]                       else if (inherits(cond, "warning")) {
[18:05:14.691]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.691]                         if (muffled) 
[18:05:14.691]                           invokeRestart("muffleWarning")
[18:05:14.691]                       }
[18:05:14.691]                       else if (inherits(cond, "condition")) {
[18:05:14.691]                         if (!is.null(pattern)) {
[18:05:14.691]                           computeRestarts <- base::computeRestarts
[18:05:14.691]                           grepl <- base::grepl
[18:05:14.691]                           restarts <- computeRestarts(cond)
[18:05:14.691]                           for (restart in restarts) {
[18:05:14.691]                             name <- restart$name
[18:05:14.691]                             if (is.null(name)) 
[18:05:14.691]                               next
[18:05:14.691]                             if (!grepl(pattern, name)) 
[18:05:14.691]                               next
[18:05:14.691]                             invokeRestart(restart)
[18:05:14.691]                             muffled <- TRUE
[18:05:14.691]                             break
[18:05:14.691]                           }
[18:05:14.691]                         }
[18:05:14.691]                       }
[18:05:14.691]                       invisible(muffled)
[18:05:14.691]                     }
[18:05:14.691]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.691]                   }
[18:05:14.691]                 }
[18:05:14.691]             }
[18:05:14.691]         }))
[18:05:14.691]     }, error = function(ex) {
[18:05:14.691]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.691]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.691]                 ...future.rng), started = ...future.startTime, 
[18:05:14.691]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.691]             version = "1.8"), class = "FutureResult")
[18:05:14.691]     }, finally = {
[18:05:14.691]         if (!identical(...future.workdir, getwd())) 
[18:05:14.691]             setwd(...future.workdir)
[18:05:14.691]         {
[18:05:14.691]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.691]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.691]             }
[18:05:14.691]             base::options(...future.oldOptions)
[18:05:14.691]             if (.Platform$OS.type == "windows") {
[18:05:14.691]                 old_names <- names(...future.oldEnvVars)
[18:05:14.691]                 envs <- base::Sys.getenv()
[18:05:14.691]                 names <- names(envs)
[18:05:14.691]                 common <- intersect(names, old_names)
[18:05:14.691]                 added <- setdiff(names, old_names)
[18:05:14.691]                 removed <- setdiff(old_names, names)
[18:05:14.691]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.691]                   envs[common]]
[18:05:14.691]                 NAMES <- toupper(changed)
[18:05:14.691]                 args <- list()
[18:05:14.691]                 for (kk in seq_along(NAMES)) {
[18:05:14.691]                   name <- changed[[kk]]
[18:05:14.691]                   NAME <- NAMES[[kk]]
[18:05:14.691]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.691]                     next
[18:05:14.691]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.691]                 }
[18:05:14.691]                 NAMES <- toupper(added)
[18:05:14.691]                 for (kk in seq_along(NAMES)) {
[18:05:14.691]                   name <- added[[kk]]
[18:05:14.691]                   NAME <- NAMES[[kk]]
[18:05:14.691]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.691]                     next
[18:05:14.691]                   args[[name]] <- ""
[18:05:14.691]                 }
[18:05:14.691]                 NAMES <- toupper(removed)
[18:05:14.691]                 for (kk in seq_along(NAMES)) {
[18:05:14.691]                   name <- removed[[kk]]
[18:05:14.691]                   NAME <- NAMES[[kk]]
[18:05:14.691]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.691]                     next
[18:05:14.691]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.691]                 }
[18:05:14.691]                 if (length(args) > 0) 
[18:05:14.691]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.691]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.691]             }
[18:05:14.691]             else {
[18:05:14.691]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.691]             }
[18:05:14.691]             {
[18:05:14.691]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.691]                   0L) {
[18:05:14.691]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.691]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.691]                   base::options(opts)
[18:05:14.691]                 }
[18:05:14.691]                 {
[18:05:14.691]                   {
[18:05:14.691]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.691]                     NULL
[18:05:14.691]                   }
[18:05:14.691]                   options(future.plan = NULL)
[18:05:14.691]                   if (is.na(NA_character_)) 
[18:05:14.691]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.691]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.691]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.691]                     .init = FALSE)
[18:05:14.691]                 }
[18:05:14.691]             }
[18:05:14.691]         }
[18:05:14.691]     })
[18:05:14.691]     if (TRUE) {
[18:05:14.691]         base::sink(type = "output", split = FALSE)
[18:05:14.691]         if (TRUE) {
[18:05:14.691]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.691]         }
[18:05:14.691]         else {
[18:05:14.691]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.691]         }
[18:05:14.691]         base::close(...future.stdout)
[18:05:14.691]         ...future.stdout <- NULL
[18:05:14.691]     }
[18:05:14.691]     ...future.result$conditions <- ...future.conditions
[18:05:14.691]     ...future.result$finished <- base::Sys.time()
[18:05:14.691]     ...future.result
[18:05:14.691] }
[18:05:14.697] requestCore(): workers = 2
[18:05:14.698] Poll #1 (0): usedCores() = 2, workers = 2
[18:05:14.705] plan(): nbrOfWorkers() = 2
[18:05:14.710] result() for MulticoreFuture ...
[18:05:14.711] result() for MulticoreFuture ...
[18:05:14.712] result() for MulticoreFuture ... done
[18:05:14.712] result() for MulticoreFuture ... done
[18:05:14.712] result() for MulticoreFuture ...
[18:05:14.713] result() for MulticoreFuture ... done
[18:05:14.717] MulticoreFuture started
 - Creating multicore future #4 ...
[18:05:14.719] plan(): Setting new future strategy stack:
[18:05:14.720] List of future strategies:
[18:05:14.720] 1. sequential:
[18:05:14.720]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.720]    - tweaked: FALSE
[18:05:14.720]    - call: NULL
[18:05:14.722] plan(): nbrOfWorkers() = 1
[18:05:14.726] plan(): Setting new future strategy stack:
[18:05:14.727] getGlobalsAndPackages() ...
[18:05:14.727] List of future strategies:
[18:05:14.727] 1. multicore:
[18:05:14.727]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.727]    - tweaked: FALSE
[18:05:14.727]    - call: plan(multicore)
[18:05:14.728] Not searching for globals
[18:05:14.728] - globals: [0] <none>
[18:05:14.729] getGlobalsAndPackages() ... DONE
[18:05:14.731] Packages needed by the future expression (n = 0): <none>
[18:05:14.731] Packages needed by future strategies (n = 0): <none>
[18:05:14.735] plan(): nbrOfWorkers() = 2
[18:05:14.734] {
[18:05:14.734]     {
[18:05:14.734]         {
[18:05:14.734]             ...future.startTime <- base::Sys.time()
[18:05:14.734]             {
[18:05:14.734]                 {
[18:05:14.734]                   {
[18:05:14.734]                     {
[18:05:14.734]                       base::local({
[18:05:14.734]                         has_future <- base::requireNamespace("future", 
[18:05:14.734]                           quietly = TRUE)
[18:05:14.734]                         if (has_future) {
[18:05:14.734]                           ns <- base::getNamespace("future")
[18:05:14.734]                           version <- ns[[".package"]][["version"]]
[18:05:14.734]                           if (is.null(version)) 
[18:05:14.734]                             version <- utils::packageVersion("future")
[18:05:14.734]                         }
[18:05:14.734]                         else {
[18:05:14.734]                           version <- NULL
[18:05:14.734]                         }
[18:05:14.734]                         if (!has_future || version < "1.8.0") {
[18:05:14.734]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.734]                             "", base::R.version$version.string), 
[18:05:14.734]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.734]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.734]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.734]                               "release", "version")], collapse = " "), 
[18:05:14.734]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.734]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.734]                             info)
[18:05:14.734]                           info <- base::paste(info, collapse = "; ")
[18:05:14.734]                           if (!has_future) {
[18:05:14.734]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.734]                               info)
[18:05:14.734]                           }
[18:05:14.734]                           else {
[18:05:14.734]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.734]                               info, version)
[18:05:14.734]                           }
[18:05:14.734]                           base::stop(msg)
[18:05:14.734]                         }
[18:05:14.734]                       })
[18:05:14.734]                     }
[18:05:14.734]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.734]                     base::options(mc.cores = 1L)
[18:05:14.734]                   }
[18:05:14.734]                   ...future.strategy.old <- future::plan("list")
[18:05:14.734]                   options(future.plan = NULL)
[18:05:14.734]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.734]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.734]                 }
[18:05:14.734]                 ...future.workdir <- getwd()
[18:05:14.734]             }
[18:05:14.734]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.734]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.734]         }
[18:05:14.734]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.734]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.734]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.734]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.734]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.734]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.734]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.734]             base::names(...future.oldOptions))
[18:05:14.734]     }
[18:05:14.734]     if (FALSE) {
[18:05:14.734]     }
[18:05:14.734]     else {
[18:05:14.734]         if (TRUE) {
[18:05:14.734]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.734]                 open = "w")
[18:05:14.734]         }
[18:05:14.734]         else {
[18:05:14.734]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.734]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.734]         }
[18:05:14.734]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.734]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.734]             base::sink(type = "output", split = FALSE)
[18:05:14.734]             base::close(...future.stdout)
[18:05:14.734]         }, add = TRUE)
[18:05:14.734]     }
[18:05:14.734]     ...future.frame <- base::sys.nframe()
[18:05:14.734]     ...future.conditions <- base::list()
[18:05:14.734]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.734]     if (FALSE) {
[18:05:14.734]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.734]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.734]     }
[18:05:14.734]     ...future.result <- base::tryCatch({
[18:05:14.734]         base::withCallingHandlers({
[18:05:14.734]             ...future.value <- base::withVisible(base::local({
[18:05:14.734]                 withCallingHandlers({
[18:05:14.734]                   {
[18:05:14.734]                     ii
[18:05:14.734]                   }
[18:05:14.734]                 }, immediateCondition = function(cond) {
[18:05:14.734]                   save_rds <- function (object, pathname, ...) 
[18:05:14.734]                   {
[18:05:14.734]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.734]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.734]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.734]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.734]                         fi_tmp[["mtime"]])
[18:05:14.734]                     }
[18:05:14.734]                     tryCatch({
[18:05:14.734]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.734]                     }, error = function(ex) {
[18:05:14.734]                       msg <- conditionMessage(ex)
[18:05:14.734]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.734]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.734]                         fi_tmp[["mtime"]], msg)
[18:05:14.734]                       ex$message <- msg
[18:05:14.734]                       stop(ex)
[18:05:14.734]                     })
[18:05:14.734]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.734]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.734]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.734]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.734]                       fi <- file.info(pathname)
[18:05:14.734]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.734]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.734]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.734]                         fi[["size"]], fi[["mtime"]])
[18:05:14.734]                       stop(msg)
[18:05:14.734]                     }
[18:05:14.734]                     invisible(pathname)
[18:05:14.734]                   }
[18:05:14.734]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.734]                     rootPath = tempdir()) 
[18:05:14.734]                   {
[18:05:14.734]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.734]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.734]                       tmpdir = path, fileext = ".rds")
[18:05:14.734]                     save_rds(obj, file)
[18:05:14.734]                   }
[18:05:14.734]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.734]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.734]                   {
[18:05:14.734]                     inherits <- base::inherits
[18:05:14.734]                     invokeRestart <- base::invokeRestart
[18:05:14.734]                     is.null <- base::is.null
[18:05:14.734]                     muffled <- FALSE
[18:05:14.734]                     if (inherits(cond, "message")) {
[18:05:14.734]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.734]                       if (muffled) 
[18:05:14.734]                         invokeRestart("muffleMessage")
[18:05:14.734]                     }
[18:05:14.734]                     else if (inherits(cond, "warning")) {
[18:05:14.734]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.734]                       if (muffled) 
[18:05:14.734]                         invokeRestart("muffleWarning")
[18:05:14.734]                     }
[18:05:14.734]                     else if (inherits(cond, "condition")) {
[18:05:14.734]                       if (!is.null(pattern)) {
[18:05:14.734]                         computeRestarts <- base::computeRestarts
[18:05:14.734]                         grepl <- base::grepl
[18:05:14.734]                         restarts <- computeRestarts(cond)
[18:05:14.734]                         for (restart in restarts) {
[18:05:14.734]                           name <- restart$name
[18:05:14.734]                           if (is.null(name)) 
[18:05:14.734]                             next
[18:05:14.734]                           if (!grepl(pattern, name)) 
[18:05:14.734]                             next
[18:05:14.734]                           invokeRestart(restart)
[18:05:14.734]                           muffled <- TRUE
[18:05:14.734]                           break
[18:05:14.734]                         }
[18:05:14.734]                       }
[18:05:14.734]                     }
[18:05:14.734]                     invisible(muffled)
[18:05:14.734]                   }
[18:05:14.734]                   muffleCondition(cond)
[18:05:14.734]                 })
[18:05:14.734]             }))
[18:05:14.734]             future::FutureResult(value = ...future.value$value, 
[18:05:14.734]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.734]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.734]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.734]                     ...future.globalenv.names))
[18:05:14.734]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.734]         }, condition = base::local({
[18:05:14.734]             c <- base::c
[18:05:14.734]             inherits <- base::inherits
[18:05:14.734]             invokeRestart <- base::invokeRestart
[18:05:14.734]             length <- base::length
[18:05:14.734]             list <- base::list
[18:05:14.734]             seq.int <- base::seq.int
[18:05:14.734]             signalCondition <- base::signalCondition
[18:05:14.734]             sys.calls <- base::sys.calls
[18:05:14.734]             `[[` <- base::`[[`
[18:05:14.734]             `+` <- base::`+`
[18:05:14.734]             `<<-` <- base::`<<-`
[18:05:14.734]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.734]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.734]                   3L)]
[18:05:14.734]             }
[18:05:14.734]             function(cond) {
[18:05:14.734]                 is_error <- inherits(cond, "error")
[18:05:14.734]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.734]                   NULL)
[18:05:14.734]                 if (is_error) {
[18:05:14.734]                   sessionInformation <- function() {
[18:05:14.734]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.734]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.734]                       search = base::search(), system = base::Sys.info())
[18:05:14.734]                   }
[18:05:14.734]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.734]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.734]                     cond$call), session = sessionInformation(), 
[18:05:14.734]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.734]                   signalCondition(cond)
[18:05:14.734]                 }
[18:05:14.734]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.734]                 "immediateCondition"))) {
[18:05:14.734]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.734]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.734]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.734]                   if (TRUE && !signal) {
[18:05:14.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.734]                     {
[18:05:14.734]                       inherits <- base::inherits
[18:05:14.734]                       invokeRestart <- base::invokeRestart
[18:05:14.734]                       is.null <- base::is.null
[18:05:14.734]                       muffled <- FALSE
[18:05:14.734]                       if (inherits(cond, "message")) {
[18:05:14.734]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.734]                         if (muffled) 
[18:05:14.734]                           invokeRestart("muffleMessage")
[18:05:14.734]                       }
[18:05:14.734]                       else if (inherits(cond, "warning")) {
[18:05:14.734]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.734]                         if (muffled) 
[18:05:14.734]                           invokeRestart("muffleWarning")
[18:05:14.734]                       }
[18:05:14.734]                       else if (inherits(cond, "condition")) {
[18:05:14.734]                         if (!is.null(pattern)) {
[18:05:14.734]                           computeRestarts <- base::computeRestarts
[18:05:14.734]                           grepl <- base::grepl
[18:05:14.734]                           restarts <- computeRestarts(cond)
[18:05:14.734]                           for (restart in restarts) {
[18:05:14.734]                             name <- restart$name
[18:05:14.734]                             if (is.null(name)) 
[18:05:14.734]                               next
[18:05:14.734]                             if (!grepl(pattern, name)) 
[18:05:14.734]                               next
[18:05:14.734]                             invokeRestart(restart)
[18:05:14.734]                             muffled <- TRUE
[18:05:14.734]                             break
[18:05:14.734]                           }
[18:05:14.734]                         }
[18:05:14.734]                       }
[18:05:14.734]                       invisible(muffled)
[18:05:14.734]                     }
[18:05:14.734]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.734]                   }
[18:05:14.734]                 }
[18:05:14.734]                 else {
[18:05:14.734]                   if (TRUE) {
[18:05:14.734]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.734]                     {
[18:05:14.734]                       inherits <- base::inherits
[18:05:14.734]                       invokeRestart <- base::invokeRestart
[18:05:14.734]                       is.null <- base::is.null
[18:05:14.734]                       muffled <- FALSE
[18:05:14.734]                       if (inherits(cond, "message")) {
[18:05:14.734]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.734]                         if (muffled) 
[18:05:14.734]                           invokeRestart("muffleMessage")
[18:05:14.734]                       }
[18:05:14.734]                       else if (inherits(cond, "warning")) {
[18:05:14.734]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.734]                         if (muffled) 
[18:05:14.734]                           invokeRestart("muffleWarning")
[18:05:14.734]                       }
[18:05:14.734]                       else if (inherits(cond, "condition")) {
[18:05:14.734]                         if (!is.null(pattern)) {
[18:05:14.734]                           computeRestarts <- base::computeRestarts
[18:05:14.734]                           grepl <- base::grepl
[18:05:14.734]                           restarts <- computeRestarts(cond)
[18:05:14.734]                           for (restart in restarts) {
[18:05:14.734]                             name <- restart$name
[18:05:14.734]                             if (is.null(name)) 
[18:05:14.734]                               next
[18:05:14.734]                             if (!grepl(pattern, name)) 
[18:05:14.734]                               next
[18:05:14.734]                             invokeRestart(restart)
[18:05:14.734]                             muffled <- TRUE
[18:05:14.734]                             break
[18:05:14.734]                           }
[18:05:14.734]                         }
[18:05:14.734]                       }
[18:05:14.734]                       invisible(muffled)
[18:05:14.734]                     }
[18:05:14.734]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.734]                   }
[18:05:14.734]                 }
[18:05:14.734]             }
[18:05:14.734]         }))
[18:05:14.734]     }, error = function(ex) {
[18:05:14.734]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.734]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.734]                 ...future.rng), started = ...future.startTime, 
[18:05:14.734]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.734]             version = "1.8"), class = "FutureResult")
[18:05:14.734]     }, finally = {
[18:05:14.734]         if (!identical(...future.workdir, getwd())) 
[18:05:14.734]             setwd(...future.workdir)
[18:05:14.734]         {
[18:05:14.734]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.734]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.734]             }
[18:05:14.734]             base::options(...future.oldOptions)
[18:05:14.734]             if (.Platform$OS.type == "windows") {
[18:05:14.734]                 old_names <- names(...future.oldEnvVars)
[18:05:14.734]                 envs <- base::Sys.getenv()
[18:05:14.734]                 names <- names(envs)
[18:05:14.734]                 common <- intersect(names, old_names)
[18:05:14.734]                 added <- setdiff(names, old_names)
[18:05:14.734]                 removed <- setdiff(old_names, names)
[18:05:14.734]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.734]                   envs[common]]
[18:05:14.734]                 NAMES <- toupper(changed)
[18:05:14.734]                 args <- list()
[18:05:14.734]                 for (kk in seq_along(NAMES)) {
[18:05:14.734]                   name <- changed[[kk]]
[18:05:14.734]                   NAME <- NAMES[[kk]]
[18:05:14.734]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.734]                     next
[18:05:14.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.734]                 }
[18:05:14.734]                 NAMES <- toupper(added)
[18:05:14.734]                 for (kk in seq_along(NAMES)) {
[18:05:14.734]                   name <- added[[kk]]
[18:05:14.734]                   NAME <- NAMES[[kk]]
[18:05:14.734]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.734]                     next
[18:05:14.734]                   args[[name]] <- ""
[18:05:14.734]                 }
[18:05:14.734]                 NAMES <- toupper(removed)
[18:05:14.734]                 for (kk in seq_along(NAMES)) {
[18:05:14.734]                   name <- removed[[kk]]
[18:05:14.734]                   NAME <- NAMES[[kk]]
[18:05:14.734]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.734]                     next
[18:05:14.734]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.734]                 }
[18:05:14.734]                 if (length(args) > 0) 
[18:05:14.734]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.734]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.734]             }
[18:05:14.734]             else {
[18:05:14.734]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.734]             }
[18:05:14.734]             {
[18:05:14.734]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.734]                   0L) {
[18:05:14.734]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.734]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.734]                   base::options(opts)
[18:05:14.734]                 }
[18:05:14.734]                 {
[18:05:14.734]                   {
[18:05:14.734]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.734]                     NULL
[18:05:14.734]                   }
[18:05:14.734]                   options(future.plan = NULL)
[18:05:14.734]                   if (is.na(NA_character_)) 
[18:05:14.734]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.734]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.734]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.734]                     .init = FALSE)
[18:05:14.734]                 }
[18:05:14.734]             }
[18:05:14.734]         }
[18:05:14.734]     })
[18:05:14.734]     if (TRUE) {
[18:05:14.734]         base::sink(type = "output", split = FALSE)
[18:05:14.734]         if (TRUE) {
[18:05:14.734]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.734]         }
[18:05:14.734]         else {
[18:05:14.734]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.734]         }
[18:05:14.734]         base::close(...future.stdout)
[18:05:14.734]         ...future.stdout <- NULL
[18:05:14.734]     }
[18:05:14.734]     ...future.result$conditions <- ...future.conditions
[18:05:14.734]     ...future.result$finished <- base::Sys.time()
[18:05:14.734]     ...future.result
[18:05:14.734] }
[18:05:14.740] requestCore(): workers = 2
[18:05:14.741] Poll #1 (0): usedCores() = 2, workers = 2
[18:05:14.780] result() for MulticoreFuture ...
[18:05:14.787] result() for MulticoreFuture ...
[18:05:14.788] result() for MulticoreFuture ... done
[18:05:14.788] result() for MulticoreFuture ... done
[18:05:14.788] result() for MulticoreFuture ...
[18:05:14.789] result() for MulticoreFuture ... done
[18:05:14.793] MulticoreFuture started
 - Resolving 4 multicore futures
[18:05:14.795] result() for MulticoreFuture ...
[18:05:14.796] result() for MulticoreFuture ... done
[18:05:14.796] plan(): Setting new future strategy stack:
[18:05:14.796] result() for MulticoreFuture ...
[18:05:14.796] result() for MulticoreFuture ... done
[18:05:14.797] result() for MulticoreFuture ...
[18:05:14.797] result() for MulticoreFuture ... done
[18:05:14.796] List of future strategies:
[18:05:14.796] 1. sequential:
[18:05:14.796]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.796]    - tweaked: FALSE
[18:05:14.796]    - call: NULL
[18:05:14.798] result() for MulticoreFuture ...
[18:05:14.798] result() for MulticoreFuture ... done
[18:05:14.799] plan(): nbrOfWorkers() = 1
[18:05:14.799] result() for MulticoreFuture ...
[18:05:14.802] result() for MulticoreFuture ...
[18:05:14.802] result() for MulticoreFuture ... done
[18:05:14.802] result() for MulticoreFuture ... done
[18:05:14.803] result() for MulticoreFuture ...
[18:05:14.803] result() for MulticoreFuture ... done
[18:05:14.804] result() for MulticoreFuture ...
[18:05:14.805] plan(): Setting new future strategy stack:
[18:05:14.805] List of future strategies:
[18:05:14.805] 1. multicore:
[18:05:14.805]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.805]    - tweaked: FALSE
[18:05:14.805]    - call: plan(multicore)
[18:05:14.813] plan(): nbrOfWorkers() = 2
[18:05:14.815] result() for MulticoreFuture ...
[18:05:14.816] result() for MulticoreFuture ... done
[18:05:14.816] result() for MulticoreFuture ... done
[18:05:14.816] result() for MulticoreFuture ...
[18:05:14.816] result() for MulticoreFuture ... done
*** multicore(..., globals = FALSE) and errors
[18:05:14.827] getGlobalsAndPackages() ...
[18:05:14.827] Not searching for globals
[18:05:14.828] - globals: [0] <none>
[18:05:14.828] getGlobalsAndPackages() ... DONE
[18:05:14.829] Packages needed by the future expression (n = 0): <none>
[18:05:14.829] Packages needed by future strategies (n = 0): <none>
[18:05:14.831] {
[18:05:14.831]     {
[18:05:14.831]         {
[18:05:14.831]             ...future.startTime <- base::Sys.time()
[18:05:14.831]             {
[18:05:14.831]                 {
[18:05:14.831]                   {
[18:05:14.831]                     {
[18:05:14.831]                       base::local({
[18:05:14.831]                         has_future <- base::requireNamespace("future", 
[18:05:14.831]                           quietly = TRUE)
[18:05:14.831]                         if (has_future) {
[18:05:14.831]                           ns <- base::getNamespace("future")
[18:05:14.831]                           version <- ns[[".package"]][["version"]]
[18:05:14.831]                           if (is.null(version)) 
[18:05:14.831]                             version <- utils::packageVersion("future")
[18:05:14.831]                         }
[18:05:14.831]                         else {
[18:05:14.831]                           version <- NULL
[18:05:14.831]                         }
[18:05:14.831]                         if (!has_future || version < "1.8.0") {
[18:05:14.831]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.831]                             "", base::R.version$version.string), 
[18:05:14.831]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.831]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.831]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.831]                               "release", "version")], collapse = " "), 
[18:05:14.831]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.831]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.831]                             info)
[18:05:14.831]                           info <- base::paste(info, collapse = "; ")
[18:05:14.831]                           if (!has_future) {
[18:05:14.831]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.831]                               info)
[18:05:14.831]                           }
[18:05:14.831]                           else {
[18:05:14.831]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.831]                               info, version)
[18:05:14.831]                           }
[18:05:14.831]                           base::stop(msg)
[18:05:14.831]                         }
[18:05:14.831]                       })
[18:05:14.831]                     }
[18:05:14.831]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.831]                     base::options(mc.cores = 1L)
[18:05:14.831]                   }
[18:05:14.831]                   ...future.strategy.old <- future::plan("list")
[18:05:14.831]                   options(future.plan = NULL)
[18:05:14.831]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.831]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.831]                 }
[18:05:14.831]                 ...future.workdir <- getwd()
[18:05:14.831]             }
[18:05:14.831]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.831]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.831]         }
[18:05:14.831]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.831]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.831]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.831]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.831]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.831]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.831]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.831]             base::names(...future.oldOptions))
[18:05:14.831]     }
[18:05:14.831]     if (FALSE) {
[18:05:14.831]     }
[18:05:14.831]     else {
[18:05:14.831]         if (TRUE) {
[18:05:14.831]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.831]                 open = "w")
[18:05:14.831]         }
[18:05:14.831]         else {
[18:05:14.831]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.831]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.831]         }
[18:05:14.831]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.831]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.831]             base::sink(type = "output", split = FALSE)
[18:05:14.831]             base::close(...future.stdout)
[18:05:14.831]         }, add = TRUE)
[18:05:14.831]     }
[18:05:14.831]     ...future.frame <- base::sys.nframe()
[18:05:14.831]     ...future.conditions <- base::list()
[18:05:14.831]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.831]     if (FALSE) {
[18:05:14.831]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.831]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.831]     }
[18:05:14.831]     ...future.result <- base::tryCatch({
[18:05:14.831]         base::withCallingHandlers({
[18:05:14.831]             ...future.value <- base::withVisible(base::local({
[18:05:14.831]                 withCallingHandlers({
[18:05:14.831]                   {
[18:05:14.831]                     stop("Whoops!")
[18:05:14.831]                     1
[18:05:14.831]                   }
[18:05:14.831]                 }, immediateCondition = function(cond) {
[18:05:14.831]                   save_rds <- function (object, pathname, ...) 
[18:05:14.831]                   {
[18:05:14.831]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.831]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.831]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.831]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.831]                         fi_tmp[["mtime"]])
[18:05:14.831]                     }
[18:05:14.831]                     tryCatch({
[18:05:14.831]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.831]                     }, error = function(ex) {
[18:05:14.831]                       msg <- conditionMessage(ex)
[18:05:14.831]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.831]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.831]                         fi_tmp[["mtime"]], msg)
[18:05:14.831]                       ex$message <- msg
[18:05:14.831]                       stop(ex)
[18:05:14.831]                     })
[18:05:14.831]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.831]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.831]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.831]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.831]                       fi <- file.info(pathname)
[18:05:14.831]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.831]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.831]                         fi[["size"]], fi[["mtime"]])
[18:05:14.831]                       stop(msg)
[18:05:14.831]                     }
[18:05:14.831]                     invisible(pathname)
[18:05:14.831]                   }
[18:05:14.831]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.831]                     rootPath = tempdir()) 
[18:05:14.831]                   {
[18:05:14.831]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.831]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.831]                       tmpdir = path, fileext = ".rds")
[18:05:14.831]                     save_rds(obj, file)
[18:05:14.831]                   }
[18:05:14.831]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.831]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.831]                   {
[18:05:14.831]                     inherits <- base::inherits
[18:05:14.831]                     invokeRestart <- base::invokeRestart
[18:05:14.831]                     is.null <- base::is.null
[18:05:14.831]                     muffled <- FALSE
[18:05:14.831]                     if (inherits(cond, "message")) {
[18:05:14.831]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.831]                       if (muffled) 
[18:05:14.831]                         invokeRestart("muffleMessage")
[18:05:14.831]                     }
[18:05:14.831]                     else if (inherits(cond, "warning")) {
[18:05:14.831]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.831]                       if (muffled) 
[18:05:14.831]                         invokeRestart("muffleWarning")
[18:05:14.831]                     }
[18:05:14.831]                     else if (inherits(cond, "condition")) {
[18:05:14.831]                       if (!is.null(pattern)) {
[18:05:14.831]                         computeRestarts <- base::computeRestarts
[18:05:14.831]                         grepl <- base::grepl
[18:05:14.831]                         restarts <- computeRestarts(cond)
[18:05:14.831]                         for (restart in restarts) {
[18:05:14.831]                           name <- restart$name
[18:05:14.831]                           if (is.null(name)) 
[18:05:14.831]                             next
[18:05:14.831]                           if (!grepl(pattern, name)) 
[18:05:14.831]                             next
[18:05:14.831]                           invokeRestart(restart)
[18:05:14.831]                           muffled <- TRUE
[18:05:14.831]                           break
[18:05:14.831]                         }
[18:05:14.831]                       }
[18:05:14.831]                     }
[18:05:14.831]                     invisible(muffled)
[18:05:14.831]                   }
[18:05:14.831]                   muffleCondition(cond)
[18:05:14.831]                 })
[18:05:14.831]             }))
[18:05:14.831]             future::FutureResult(value = ...future.value$value, 
[18:05:14.831]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.831]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.831]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.831]                     ...future.globalenv.names))
[18:05:14.831]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.831]         }, condition = base::local({
[18:05:14.831]             c <- base::c
[18:05:14.831]             inherits <- base::inherits
[18:05:14.831]             invokeRestart <- base::invokeRestart
[18:05:14.831]             length <- base::length
[18:05:14.831]             list <- base::list
[18:05:14.831]             seq.int <- base::seq.int
[18:05:14.831]             signalCondition <- base::signalCondition
[18:05:14.831]             sys.calls <- base::sys.calls
[18:05:14.831]             `[[` <- base::`[[`
[18:05:14.831]             `+` <- base::`+`
[18:05:14.831]             `<<-` <- base::`<<-`
[18:05:14.831]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.831]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.831]                   3L)]
[18:05:14.831]             }
[18:05:14.831]             function(cond) {
[18:05:14.831]                 is_error <- inherits(cond, "error")
[18:05:14.831]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.831]                   NULL)
[18:05:14.831]                 if (is_error) {
[18:05:14.831]                   sessionInformation <- function() {
[18:05:14.831]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.831]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.831]                       search = base::search(), system = base::Sys.info())
[18:05:14.831]                   }
[18:05:14.831]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.831]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.831]                     cond$call), session = sessionInformation(), 
[18:05:14.831]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.831]                   signalCondition(cond)
[18:05:14.831]                 }
[18:05:14.831]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.831]                 "immediateCondition"))) {
[18:05:14.831]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.831]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.831]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.831]                   if (TRUE && !signal) {
[18:05:14.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.831]                     {
[18:05:14.831]                       inherits <- base::inherits
[18:05:14.831]                       invokeRestart <- base::invokeRestart
[18:05:14.831]                       is.null <- base::is.null
[18:05:14.831]                       muffled <- FALSE
[18:05:14.831]                       if (inherits(cond, "message")) {
[18:05:14.831]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.831]                         if (muffled) 
[18:05:14.831]                           invokeRestart("muffleMessage")
[18:05:14.831]                       }
[18:05:14.831]                       else if (inherits(cond, "warning")) {
[18:05:14.831]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.831]                         if (muffled) 
[18:05:14.831]                           invokeRestart("muffleWarning")
[18:05:14.831]                       }
[18:05:14.831]                       else if (inherits(cond, "condition")) {
[18:05:14.831]                         if (!is.null(pattern)) {
[18:05:14.831]                           computeRestarts <- base::computeRestarts
[18:05:14.831]                           grepl <- base::grepl
[18:05:14.831]                           restarts <- computeRestarts(cond)
[18:05:14.831]                           for (restart in restarts) {
[18:05:14.831]                             name <- restart$name
[18:05:14.831]                             if (is.null(name)) 
[18:05:14.831]                               next
[18:05:14.831]                             if (!grepl(pattern, name)) 
[18:05:14.831]                               next
[18:05:14.831]                             invokeRestart(restart)
[18:05:14.831]                             muffled <- TRUE
[18:05:14.831]                             break
[18:05:14.831]                           }
[18:05:14.831]                         }
[18:05:14.831]                       }
[18:05:14.831]                       invisible(muffled)
[18:05:14.831]                     }
[18:05:14.831]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.831]                   }
[18:05:14.831]                 }
[18:05:14.831]                 else {
[18:05:14.831]                   if (TRUE) {
[18:05:14.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.831]                     {
[18:05:14.831]                       inherits <- base::inherits
[18:05:14.831]                       invokeRestart <- base::invokeRestart
[18:05:14.831]                       is.null <- base::is.null
[18:05:14.831]                       muffled <- FALSE
[18:05:14.831]                       if (inherits(cond, "message")) {
[18:05:14.831]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.831]                         if (muffled) 
[18:05:14.831]                           invokeRestart("muffleMessage")
[18:05:14.831]                       }
[18:05:14.831]                       else if (inherits(cond, "warning")) {
[18:05:14.831]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.831]                         if (muffled) 
[18:05:14.831]                           invokeRestart("muffleWarning")
[18:05:14.831]                       }
[18:05:14.831]                       else if (inherits(cond, "condition")) {
[18:05:14.831]                         if (!is.null(pattern)) {
[18:05:14.831]                           computeRestarts <- base::computeRestarts
[18:05:14.831]                           grepl <- base::grepl
[18:05:14.831]                           restarts <- computeRestarts(cond)
[18:05:14.831]                           for (restart in restarts) {
[18:05:14.831]                             name <- restart$name
[18:05:14.831]                             if (is.null(name)) 
[18:05:14.831]                               next
[18:05:14.831]                             if (!grepl(pattern, name)) 
[18:05:14.831]                               next
[18:05:14.831]                             invokeRestart(restart)
[18:05:14.831]                             muffled <- TRUE
[18:05:14.831]                             break
[18:05:14.831]                           }
[18:05:14.831]                         }
[18:05:14.831]                       }
[18:05:14.831]                       invisible(muffled)
[18:05:14.831]                     }
[18:05:14.831]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.831]                   }
[18:05:14.831]                 }
[18:05:14.831]             }
[18:05:14.831]         }))
[18:05:14.831]     }, error = function(ex) {
[18:05:14.831]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.831]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.831]                 ...future.rng), started = ...future.startTime, 
[18:05:14.831]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.831]             version = "1.8"), class = "FutureResult")
[18:05:14.831]     }, finally = {
[18:05:14.831]         if (!identical(...future.workdir, getwd())) 
[18:05:14.831]             setwd(...future.workdir)
[18:05:14.831]         {
[18:05:14.831]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.831]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.831]             }
[18:05:14.831]             base::options(...future.oldOptions)
[18:05:14.831]             if (.Platform$OS.type == "windows") {
[18:05:14.831]                 old_names <- names(...future.oldEnvVars)
[18:05:14.831]                 envs <- base::Sys.getenv()
[18:05:14.831]                 names <- names(envs)
[18:05:14.831]                 common <- intersect(names, old_names)
[18:05:14.831]                 added <- setdiff(names, old_names)
[18:05:14.831]                 removed <- setdiff(old_names, names)
[18:05:14.831]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.831]                   envs[common]]
[18:05:14.831]                 NAMES <- toupper(changed)
[18:05:14.831]                 args <- list()
[18:05:14.831]                 for (kk in seq_along(NAMES)) {
[18:05:14.831]                   name <- changed[[kk]]
[18:05:14.831]                   NAME <- NAMES[[kk]]
[18:05:14.831]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.831]                     next
[18:05:14.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.831]                 }
[18:05:14.831]                 NAMES <- toupper(added)
[18:05:14.831]                 for (kk in seq_along(NAMES)) {
[18:05:14.831]                   name <- added[[kk]]
[18:05:14.831]                   NAME <- NAMES[[kk]]
[18:05:14.831]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.831]                     next
[18:05:14.831]                   args[[name]] <- ""
[18:05:14.831]                 }
[18:05:14.831]                 NAMES <- toupper(removed)
[18:05:14.831]                 for (kk in seq_along(NAMES)) {
[18:05:14.831]                   name <- removed[[kk]]
[18:05:14.831]                   NAME <- NAMES[[kk]]
[18:05:14.831]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.831]                     next
[18:05:14.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.831]                 }
[18:05:14.831]                 if (length(args) > 0) 
[18:05:14.831]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.831]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.831]             }
[18:05:14.831]             else {
[18:05:14.831]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.831]             }
[18:05:14.831]             {
[18:05:14.831]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.831]                   0L) {
[18:05:14.831]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.831]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.831]                   base::options(opts)
[18:05:14.831]                 }
[18:05:14.831]                 {
[18:05:14.831]                   {
[18:05:14.831]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.831]                     NULL
[18:05:14.831]                   }
[18:05:14.831]                   options(future.plan = NULL)
[18:05:14.831]                   if (is.na(NA_character_)) 
[18:05:14.831]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.831]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.831]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.831]                     .init = FALSE)
[18:05:14.831]                 }
[18:05:14.831]             }
[18:05:14.831]         }
[18:05:14.831]     })
[18:05:14.831]     if (TRUE) {
[18:05:14.831]         base::sink(type = "output", split = FALSE)
[18:05:14.831]         if (TRUE) {
[18:05:14.831]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.831]         }
[18:05:14.831]         else {
[18:05:14.831]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.831]         }
[18:05:14.831]         base::close(...future.stdout)
[18:05:14.831]         ...future.stdout <- NULL
[18:05:14.831]     }
[18:05:14.831]     ...future.result$conditions <- ...future.conditions
[18:05:14.831]     ...future.result$finished <- base::Sys.time()
[18:05:14.831]     ...future.result
[18:05:14.831] }
[18:05:14.836] requestCore(): workers = 2
[18:05:14.839] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:05:14.841] plan(): Setting new future strategy stack:
[18:05:14.842] List of future strategies:
[18:05:14.842] 1. sequential:
[18:05:14.842]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.842]    - tweaked: FALSE
[18:05:14.842]    - call: NULL
[18:05:14.844] plan(): nbrOfWorkers() = 1
[18:05:14.848] plan(): Setting new future strategy stack:
[18:05:14.849] List of future strategies:
[18:05:14.849] 1. multicore:
[18:05:14.849]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.849]    - tweaked: FALSE
[18:05:14.849]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:14.854] result() for MulticoreFuture ...
[18:05:14.860] plan(): nbrOfWorkers() = 2
[18:05:14.868] result() for MulticoreFuture ...
[18:05:14.869] result() for MulticoreFuture ... done
[18:05:14.870] signalConditions() ...
[18:05:14.870]  - include = ‘immediateCondition’
[18:05:14.871]  - exclude = 
[18:05:14.871]  - resignal = FALSE
[18:05:14.871]  - Number of conditions: 1
[18:05:14.872] signalConditions() ... done
[18:05:14.874] result() for MulticoreFuture ... done
[18:05:14.874] result() for MulticoreFuture ...
[18:05:14.874] result() for MulticoreFuture ... done
[18:05:14.875] signalConditions() ...
[18:05:14.875]  - include = ‘immediateCondition’
[18:05:14.875]  - exclude = 
[18:05:14.875]  - resignal = FALSE
[18:05:14.876]  - Number of conditions: 1
[18:05:14.876] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[18:05:14.877] result() for MulticoreFuture ...
[18:05:14.878] result() for MulticoreFuture ... done
[18:05:14.878] result() for MulticoreFuture ...
[18:05:14.878] result() for MulticoreFuture ... done
[18:05:14.879] signalConditions() ...
[18:05:14.879]  - include = ‘immediateCondition’
[18:05:14.879]  - exclude = 
[18:05:14.879]  - resignal = FALSE
[18:05:14.880]  - Number of conditions: 1
[18:05:14.880] signalConditions() ... done
[18:05:14.880] Future state: ‘finished’
[18:05:14.881] result() for MulticoreFuture ...
[18:05:14.881] result() for MulticoreFuture ... done
[18:05:14.881] signalConditions() ...
[18:05:14.881]  - include = ‘condition’
[18:05:14.882]  - exclude = ‘immediateCondition’
[18:05:14.882]  - resignal = TRUE
[18:05:14.882]  - Number of conditions: 1
[18:05:14.882]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:05:14.883] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[18:05:14.884] result() for MulticoreFuture ...
[18:05:14.884] result() for MulticoreFuture ... done
[18:05:14.885] result() for MulticoreFuture ...
[18:05:14.885] result() for MulticoreFuture ... done
[18:05:14.885] signalConditions() ...
[18:05:14.885]  - include = ‘immediateCondition’
[18:05:14.886]  - exclude = 
[18:05:14.886]  - resignal = FALSE
[18:05:14.886]  - Number of conditions: 1
[18:05:14.886] signalConditions() ... done
[18:05:14.887] Future state: ‘finished’
[18:05:14.887] result() for MulticoreFuture ...
[18:05:14.887] result() for MulticoreFuture ... done
[18:05:14.887] signalConditions() ...
[18:05:14.888]  - include = ‘condition’
[18:05:14.888]  - exclude = ‘immediateCondition’
[18:05:14.888]  - resignal = TRUE
[18:05:14.888]  - Number of conditions: 1
[18:05:14.888]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:05:14.889] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[18:05:14.897] getGlobalsAndPackages() ...
[18:05:14.897] 
[18:05:14.898] - globals: [0] <none>
[18:05:14.898] getGlobalsAndPackages() ... DONE
[18:05:14.899] Packages needed by the future expression (n = 0): <none>
[18:05:14.899] Packages needed by future strategies (n = 0): <none>
[18:05:14.900] {
[18:05:14.900]     {
[18:05:14.900]         {
[18:05:14.900]             ...future.startTime <- base::Sys.time()
[18:05:14.900]             {
[18:05:14.900]                 {
[18:05:14.900]                   {
[18:05:14.900]                     {
[18:05:14.900]                       base::local({
[18:05:14.900]                         has_future <- base::requireNamespace("future", 
[18:05:14.900]                           quietly = TRUE)
[18:05:14.900]                         if (has_future) {
[18:05:14.900]                           ns <- base::getNamespace("future")
[18:05:14.900]                           version <- ns[[".package"]][["version"]]
[18:05:14.900]                           if (is.null(version)) 
[18:05:14.900]                             version <- utils::packageVersion("future")
[18:05:14.900]                         }
[18:05:14.900]                         else {
[18:05:14.900]                           version <- NULL
[18:05:14.900]                         }
[18:05:14.900]                         if (!has_future || version < "1.8.0") {
[18:05:14.900]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.900]                             "", base::R.version$version.string), 
[18:05:14.900]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.900]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.900]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.900]                               "release", "version")], collapse = " "), 
[18:05:14.900]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.900]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.900]                             info)
[18:05:14.900]                           info <- base::paste(info, collapse = "; ")
[18:05:14.900]                           if (!has_future) {
[18:05:14.900]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.900]                               info)
[18:05:14.900]                           }
[18:05:14.900]                           else {
[18:05:14.900]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.900]                               info, version)
[18:05:14.900]                           }
[18:05:14.900]                           base::stop(msg)
[18:05:14.900]                         }
[18:05:14.900]                       })
[18:05:14.900]                     }
[18:05:14.900]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.900]                     base::options(mc.cores = 1L)
[18:05:14.900]                   }
[18:05:14.900]                   ...future.strategy.old <- future::plan("list")
[18:05:14.900]                   options(future.plan = NULL)
[18:05:14.900]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.900]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.900]                 }
[18:05:14.900]                 ...future.workdir <- getwd()
[18:05:14.900]             }
[18:05:14.900]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.900]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.900]         }
[18:05:14.900]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.900]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.900]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.900]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.900]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.900]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.900]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.900]             base::names(...future.oldOptions))
[18:05:14.900]     }
[18:05:14.900]     if (FALSE) {
[18:05:14.900]     }
[18:05:14.900]     else {
[18:05:14.900]         if (TRUE) {
[18:05:14.900]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.900]                 open = "w")
[18:05:14.900]         }
[18:05:14.900]         else {
[18:05:14.900]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.900]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.900]         }
[18:05:14.900]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.900]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.900]             base::sink(type = "output", split = FALSE)
[18:05:14.900]             base::close(...future.stdout)
[18:05:14.900]         }, add = TRUE)
[18:05:14.900]     }
[18:05:14.900]     ...future.frame <- base::sys.nframe()
[18:05:14.900]     ...future.conditions <- base::list()
[18:05:14.900]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.900]     if (FALSE) {
[18:05:14.900]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.900]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.900]     }
[18:05:14.900]     ...future.result <- base::tryCatch({
[18:05:14.900]         base::withCallingHandlers({
[18:05:14.900]             ...future.value <- base::withVisible(base::local({
[18:05:14.900]                 withCallingHandlers({
[18:05:14.900]                   {
[18:05:14.900]                     stop(structure(list(message = "boom"), class = c("MyError", 
[18:05:14.900]                       "error", "condition")))
[18:05:14.900]                   }
[18:05:14.900]                 }, immediateCondition = function(cond) {
[18:05:14.900]                   save_rds <- function (object, pathname, ...) 
[18:05:14.900]                   {
[18:05:14.900]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.900]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.900]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.900]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.900]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.900]                         fi_tmp[["mtime"]])
[18:05:14.900]                     }
[18:05:14.900]                     tryCatch({
[18:05:14.900]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.900]                     }, error = function(ex) {
[18:05:14.900]                       msg <- conditionMessage(ex)
[18:05:14.900]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.900]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.900]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.900]                         fi_tmp[["mtime"]], msg)
[18:05:14.900]                       ex$message <- msg
[18:05:14.900]                       stop(ex)
[18:05:14.900]                     })
[18:05:14.900]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.900]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.900]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.900]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.900]                       fi <- file.info(pathname)
[18:05:14.900]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.900]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.900]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.900]                         fi[["size"]], fi[["mtime"]])
[18:05:14.900]                       stop(msg)
[18:05:14.900]                     }
[18:05:14.900]                     invisible(pathname)
[18:05:14.900]                   }
[18:05:14.900]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.900]                     rootPath = tempdir()) 
[18:05:14.900]                   {
[18:05:14.900]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.900]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.900]                       tmpdir = path, fileext = ".rds")
[18:05:14.900]                     save_rds(obj, file)
[18:05:14.900]                   }
[18:05:14.900]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.900]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.900]                   {
[18:05:14.900]                     inherits <- base::inherits
[18:05:14.900]                     invokeRestart <- base::invokeRestart
[18:05:14.900]                     is.null <- base::is.null
[18:05:14.900]                     muffled <- FALSE
[18:05:14.900]                     if (inherits(cond, "message")) {
[18:05:14.900]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.900]                       if (muffled) 
[18:05:14.900]                         invokeRestart("muffleMessage")
[18:05:14.900]                     }
[18:05:14.900]                     else if (inherits(cond, "warning")) {
[18:05:14.900]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.900]                       if (muffled) 
[18:05:14.900]                         invokeRestart("muffleWarning")
[18:05:14.900]                     }
[18:05:14.900]                     else if (inherits(cond, "condition")) {
[18:05:14.900]                       if (!is.null(pattern)) {
[18:05:14.900]                         computeRestarts <- base::computeRestarts
[18:05:14.900]                         grepl <- base::grepl
[18:05:14.900]                         restarts <- computeRestarts(cond)
[18:05:14.900]                         for (restart in restarts) {
[18:05:14.900]                           name <- restart$name
[18:05:14.900]                           if (is.null(name)) 
[18:05:14.900]                             next
[18:05:14.900]                           if (!grepl(pattern, name)) 
[18:05:14.900]                             next
[18:05:14.900]                           invokeRestart(restart)
[18:05:14.900]                           muffled <- TRUE
[18:05:14.900]                           break
[18:05:14.900]                         }
[18:05:14.900]                       }
[18:05:14.900]                     }
[18:05:14.900]                     invisible(muffled)
[18:05:14.900]                   }
[18:05:14.900]                   muffleCondition(cond)
[18:05:14.900]                 })
[18:05:14.900]             }))
[18:05:14.900]             future::FutureResult(value = ...future.value$value, 
[18:05:14.900]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.900]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.900]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.900]                     ...future.globalenv.names))
[18:05:14.900]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.900]         }, condition = base::local({
[18:05:14.900]             c <- base::c
[18:05:14.900]             inherits <- base::inherits
[18:05:14.900]             invokeRestart <- base::invokeRestart
[18:05:14.900]             length <- base::length
[18:05:14.900]             list <- base::list
[18:05:14.900]             seq.int <- base::seq.int
[18:05:14.900]             signalCondition <- base::signalCondition
[18:05:14.900]             sys.calls <- base::sys.calls
[18:05:14.900]             `[[` <- base::`[[`
[18:05:14.900]             `+` <- base::`+`
[18:05:14.900]             `<<-` <- base::`<<-`
[18:05:14.900]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.900]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.900]                   3L)]
[18:05:14.900]             }
[18:05:14.900]             function(cond) {
[18:05:14.900]                 is_error <- inherits(cond, "error")
[18:05:14.900]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.900]                   NULL)
[18:05:14.900]                 if (is_error) {
[18:05:14.900]                   sessionInformation <- function() {
[18:05:14.900]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.900]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.900]                       search = base::search(), system = base::Sys.info())
[18:05:14.900]                   }
[18:05:14.900]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.900]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.900]                     cond$call), session = sessionInformation(), 
[18:05:14.900]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.900]                   signalCondition(cond)
[18:05:14.900]                 }
[18:05:14.900]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.900]                 "immediateCondition"))) {
[18:05:14.900]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.900]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.900]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.900]                   if (TRUE && !signal) {
[18:05:14.900]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.900]                     {
[18:05:14.900]                       inherits <- base::inherits
[18:05:14.900]                       invokeRestart <- base::invokeRestart
[18:05:14.900]                       is.null <- base::is.null
[18:05:14.900]                       muffled <- FALSE
[18:05:14.900]                       if (inherits(cond, "message")) {
[18:05:14.900]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.900]                         if (muffled) 
[18:05:14.900]                           invokeRestart("muffleMessage")
[18:05:14.900]                       }
[18:05:14.900]                       else if (inherits(cond, "warning")) {
[18:05:14.900]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.900]                         if (muffled) 
[18:05:14.900]                           invokeRestart("muffleWarning")
[18:05:14.900]                       }
[18:05:14.900]                       else if (inherits(cond, "condition")) {
[18:05:14.900]                         if (!is.null(pattern)) {
[18:05:14.900]                           computeRestarts <- base::computeRestarts
[18:05:14.900]                           grepl <- base::grepl
[18:05:14.900]                           restarts <- computeRestarts(cond)
[18:05:14.900]                           for (restart in restarts) {
[18:05:14.900]                             name <- restart$name
[18:05:14.900]                             if (is.null(name)) 
[18:05:14.900]                               next
[18:05:14.900]                             if (!grepl(pattern, name)) 
[18:05:14.900]                               next
[18:05:14.900]                             invokeRestart(restart)
[18:05:14.900]                             muffled <- TRUE
[18:05:14.900]                             break
[18:05:14.900]                           }
[18:05:14.900]                         }
[18:05:14.900]                       }
[18:05:14.900]                       invisible(muffled)
[18:05:14.900]                     }
[18:05:14.900]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.900]                   }
[18:05:14.900]                 }
[18:05:14.900]                 else {
[18:05:14.900]                   if (TRUE) {
[18:05:14.900]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.900]                     {
[18:05:14.900]                       inherits <- base::inherits
[18:05:14.900]                       invokeRestart <- base::invokeRestart
[18:05:14.900]                       is.null <- base::is.null
[18:05:14.900]                       muffled <- FALSE
[18:05:14.900]                       if (inherits(cond, "message")) {
[18:05:14.900]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.900]                         if (muffled) 
[18:05:14.900]                           invokeRestart("muffleMessage")
[18:05:14.900]                       }
[18:05:14.900]                       else if (inherits(cond, "warning")) {
[18:05:14.900]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.900]                         if (muffled) 
[18:05:14.900]                           invokeRestart("muffleWarning")
[18:05:14.900]                       }
[18:05:14.900]                       else if (inherits(cond, "condition")) {
[18:05:14.900]                         if (!is.null(pattern)) {
[18:05:14.900]                           computeRestarts <- base::computeRestarts
[18:05:14.900]                           grepl <- base::grepl
[18:05:14.900]                           restarts <- computeRestarts(cond)
[18:05:14.900]                           for (restart in restarts) {
[18:05:14.900]                             name <- restart$name
[18:05:14.900]                             if (is.null(name)) 
[18:05:14.900]                               next
[18:05:14.900]                             if (!grepl(pattern, name)) 
[18:05:14.900]                               next
[18:05:14.900]                             invokeRestart(restart)
[18:05:14.900]                             muffled <- TRUE
[18:05:14.900]                             break
[18:05:14.900]                           }
[18:05:14.900]                         }
[18:05:14.900]                       }
[18:05:14.900]                       invisible(muffled)
[18:05:14.900]                     }
[18:05:14.900]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.900]                   }
[18:05:14.900]                 }
[18:05:14.900]             }
[18:05:14.900]         }))
[18:05:14.900]     }, error = function(ex) {
[18:05:14.900]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.900]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.900]                 ...future.rng), started = ...future.startTime, 
[18:05:14.900]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.900]             version = "1.8"), class = "FutureResult")
[18:05:14.900]     }, finally = {
[18:05:14.900]         if (!identical(...future.workdir, getwd())) 
[18:05:14.900]             setwd(...future.workdir)
[18:05:14.900]         {
[18:05:14.900]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.900]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.900]             }
[18:05:14.900]             base::options(...future.oldOptions)
[18:05:14.900]             if (.Platform$OS.type == "windows") {
[18:05:14.900]                 old_names <- names(...future.oldEnvVars)
[18:05:14.900]                 envs <- base::Sys.getenv()
[18:05:14.900]                 names <- names(envs)
[18:05:14.900]                 common <- intersect(names, old_names)
[18:05:14.900]                 added <- setdiff(names, old_names)
[18:05:14.900]                 removed <- setdiff(old_names, names)
[18:05:14.900]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.900]                   envs[common]]
[18:05:14.900]                 NAMES <- toupper(changed)
[18:05:14.900]                 args <- list()
[18:05:14.900]                 for (kk in seq_along(NAMES)) {
[18:05:14.900]                   name <- changed[[kk]]
[18:05:14.900]                   NAME <- NAMES[[kk]]
[18:05:14.900]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.900]                     next
[18:05:14.900]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.900]                 }
[18:05:14.900]                 NAMES <- toupper(added)
[18:05:14.900]                 for (kk in seq_along(NAMES)) {
[18:05:14.900]                   name <- added[[kk]]
[18:05:14.900]                   NAME <- NAMES[[kk]]
[18:05:14.900]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.900]                     next
[18:05:14.900]                   args[[name]] <- ""
[18:05:14.900]                 }
[18:05:14.900]                 NAMES <- toupper(removed)
[18:05:14.900]                 for (kk in seq_along(NAMES)) {
[18:05:14.900]                   name <- removed[[kk]]
[18:05:14.900]                   NAME <- NAMES[[kk]]
[18:05:14.900]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.900]                     next
[18:05:14.900]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.900]                 }
[18:05:14.900]                 if (length(args) > 0) 
[18:05:14.900]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.900]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.900]             }
[18:05:14.900]             else {
[18:05:14.900]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.900]             }
[18:05:14.900]             {
[18:05:14.900]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.900]                   0L) {
[18:05:14.900]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.900]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.900]                   base::options(opts)
[18:05:14.900]                 }
[18:05:14.900]                 {
[18:05:14.900]                   {
[18:05:14.900]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.900]                     NULL
[18:05:14.900]                   }
[18:05:14.900]                   options(future.plan = NULL)
[18:05:14.900]                   if (is.na(NA_character_)) 
[18:05:14.900]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.900]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.900]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.900]                     .init = FALSE)
[18:05:14.900]                 }
[18:05:14.900]             }
[18:05:14.900]         }
[18:05:14.900]     })
[18:05:14.900]     if (TRUE) {
[18:05:14.900]         base::sink(type = "output", split = FALSE)
[18:05:14.900]         if (TRUE) {
[18:05:14.900]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.900]         }
[18:05:14.900]         else {
[18:05:14.900]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.900]         }
[18:05:14.900]         base::close(...future.stdout)
[18:05:14.900]         ...future.stdout <- NULL
[18:05:14.900]     }
[18:05:14.900]     ...future.result$conditions <- ...future.conditions
[18:05:14.900]     ...future.result$finished <- base::Sys.time()
[18:05:14.900]     ...future.result
[18:05:14.900] }
[18:05:14.906] requestCore(): workers = 2
[18:05:14.909] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:05:14.914] plan(): Setting new future strategy stack:
[18:05:14.915] List of future strategies:
[18:05:14.915] 1. sequential:
[18:05:14.915]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.915]    - tweaked: FALSE
[18:05:14.915]    - call: NULL
[18:05:14.917] plan(): nbrOfWorkers() = 1
[18:05:14.921] plan(): Setting new future strategy stack:
[18:05:14.922] List of future strategies:
[18:05:14.922] 1. multicore:
[18:05:14.922]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.922]    - tweaked: FALSE
[18:05:14.922]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:14.926] result() for MulticoreFuture ...
[18:05:14.933] plan(): nbrOfWorkers() = 2
[18:05:14.942] result() for MulticoreFuture ...
[18:05:14.943] result() for MulticoreFuture ... done
[18:05:14.943] signalConditions() ...
[18:05:14.943]  - include = ‘immediateCondition’
[18:05:14.944]  - exclude = 
[18:05:14.945]  - resignal = FALSE
[18:05:14.945]  - Number of conditions: 1
[18:05:14.945] signalConditions() ... done
[18:05:14.945] result() for MulticoreFuture ... done
[18:05:14.946] result() for MulticoreFuture ...
[18:05:14.946] result() for MulticoreFuture ... done
[18:05:14.946] signalConditions() ...
[18:05:14.947]  - include = ‘immediateCondition’
[18:05:14.947]  - exclude = 
[18:05:14.947]  - resignal = FALSE
[18:05:14.947]  - Number of conditions: 1
[18:05:14.948] signalConditions() ... done
<MyError: boom>
[18:05:14.948] result() for MulticoreFuture ...
[18:05:14.948] result() for MulticoreFuture ... done
[18:05:14.949] result() for MulticoreFuture ...
[18:05:14.949] result() for MulticoreFuture ... done
[18:05:14.949] signalConditions() ...
[18:05:14.949]  - include = ‘immediateCondition’
[18:05:14.949]  - exclude = 
[18:05:14.950]  - resignal = FALSE
[18:05:14.950]  - Number of conditions: 1
[18:05:14.950] signalConditions() ... done
[18:05:14.950] Future state: ‘finished’
[18:05:14.951] result() for MulticoreFuture ...
[18:05:14.951] result() for MulticoreFuture ... done
[18:05:14.951] signalConditions() ...
[18:05:14.952]  - include = ‘condition’
[18:05:14.952]  - exclude = ‘immediateCondition’
[18:05:14.952]  - resignal = TRUE
[18:05:14.952]  - Number of conditions: 1
[18:05:14.952]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[18:05:14.953] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[18:05:14.960] getGlobalsAndPackages() ...
[18:05:14.960] Searching for globals...
[18:05:14.966] - globals found: [1] ‘{’
[18:05:14.966] Searching for globals ... DONE
[18:05:14.967] Resolving globals: FALSE
[18:05:14.967] 
[18:05:14.968] 
[18:05:14.968] getGlobalsAndPackages() ... DONE
[18:05:14.969] Packages needed by the future expression (n = 0): <none>
[18:05:14.970] Packages needed by future strategies (n = 0): <none>
[18:05:14.971] {
[18:05:14.971]     {
[18:05:14.971]         {
[18:05:14.971]             ...future.startTime <- base::Sys.time()
[18:05:14.971]             {
[18:05:14.971]                 {
[18:05:14.971]                   {
[18:05:14.971]                     {
[18:05:14.971]                       base::local({
[18:05:14.971]                         has_future <- base::requireNamespace("future", 
[18:05:14.971]                           quietly = TRUE)
[18:05:14.971]                         if (has_future) {
[18:05:14.971]                           ns <- base::getNamespace("future")
[18:05:14.971]                           version <- ns[[".package"]][["version"]]
[18:05:14.971]                           if (is.null(version)) 
[18:05:14.971]                             version <- utils::packageVersion("future")
[18:05:14.971]                         }
[18:05:14.971]                         else {
[18:05:14.971]                           version <- NULL
[18:05:14.971]                         }
[18:05:14.971]                         if (!has_future || version < "1.8.0") {
[18:05:14.971]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:14.971]                             "", base::R.version$version.string), 
[18:05:14.971]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:14.971]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:14.971]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:14.971]                               "release", "version")], collapse = " "), 
[18:05:14.971]                             hostname = base::Sys.info()[["nodename"]])
[18:05:14.971]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:14.971]                             info)
[18:05:14.971]                           info <- base::paste(info, collapse = "; ")
[18:05:14.971]                           if (!has_future) {
[18:05:14.971]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:14.971]                               info)
[18:05:14.971]                           }
[18:05:14.971]                           else {
[18:05:14.971]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:14.971]                               info, version)
[18:05:14.971]                           }
[18:05:14.971]                           base::stop(msg)
[18:05:14.971]                         }
[18:05:14.971]                       })
[18:05:14.971]                     }
[18:05:14.971]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:14.971]                     base::options(mc.cores = 1L)
[18:05:14.971]                   }
[18:05:14.971]                   ...future.strategy.old <- future::plan("list")
[18:05:14.971]                   options(future.plan = NULL)
[18:05:14.971]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.971]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:14.971]                 }
[18:05:14.971]                 ...future.workdir <- getwd()
[18:05:14.971]             }
[18:05:14.971]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:14.971]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:14.971]         }
[18:05:14.971]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:14.971]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:14.971]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:14.971]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:14.971]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:14.971]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:14.971]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:14.971]             base::names(...future.oldOptions))
[18:05:14.971]     }
[18:05:14.971]     if (FALSE) {
[18:05:14.971]     }
[18:05:14.971]     else {
[18:05:14.971]         if (TRUE) {
[18:05:14.971]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:14.971]                 open = "w")
[18:05:14.971]         }
[18:05:14.971]         else {
[18:05:14.971]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:14.971]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:14.971]         }
[18:05:14.971]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:14.971]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:14.971]             base::sink(type = "output", split = FALSE)
[18:05:14.971]             base::close(...future.stdout)
[18:05:14.971]         }, add = TRUE)
[18:05:14.971]     }
[18:05:14.971]     ...future.frame <- base::sys.nframe()
[18:05:14.971]     ...future.conditions <- base::list()
[18:05:14.971]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:14.971]     if (FALSE) {
[18:05:14.971]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:14.971]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:14.971]     }
[18:05:14.971]     ...future.result <- base::tryCatch({
[18:05:14.971]         base::withCallingHandlers({
[18:05:14.971]             ...future.value <- base::withVisible(base::local({
[18:05:14.971]                 withCallingHandlers({
[18:05:14.971]                   {
[18:05:14.971]                     42L
[18:05:14.971]                   }
[18:05:14.971]                 }, immediateCondition = function(cond) {
[18:05:14.971]                   save_rds <- function (object, pathname, ...) 
[18:05:14.971]                   {
[18:05:14.971]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:14.971]                     if (file_test("-f", pathname_tmp)) {
[18:05:14.971]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.971]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:14.971]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.971]                         fi_tmp[["mtime"]])
[18:05:14.971]                     }
[18:05:14.971]                     tryCatch({
[18:05:14.971]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:14.971]                     }, error = function(ex) {
[18:05:14.971]                       msg <- conditionMessage(ex)
[18:05:14.971]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.971]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:14.971]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.971]                         fi_tmp[["mtime"]], msg)
[18:05:14.971]                       ex$message <- msg
[18:05:14.971]                       stop(ex)
[18:05:14.971]                     })
[18:05:14.971]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:14.971]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:14.971]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:14.971]                       fi_tmp <- file.info(pathname_tmp)
[18:05:14.971]                       fi <- file.info(pathname)
[18:05:14.971]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:14.971]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:14.971]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:14.971]                         fi[["size"]], fi[["mtime"]])
[18:05:14.971]                       stop(msg)
[18:05:14.971]                     }
[18:05:14.971]                     invisible(pathname)
[18:05:14.971]                   }
[18:05:14.971]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:14.971]                     rootPath = tempdir()) 
[18:05:14.971]                   {
[18:05:14.971]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:14.971]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:14.971]                       tmpdir = path, fileext = ".rds")
[18:05:14.971]                     save_rds(obj, file)
[18:05:14.971]                   }
[18:05:14.971]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:14.971]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.971]                   {
[18:05:14.971]                     inherits <- base::inherits
[18:05:14.971]                     invokeRestart <- base::invokeRestart
[18:05:14.971]                     is.null <- base::is.null
[18:05:14.971]                     muffled <- FALSE
[18:05:14.971]                     if (inherits(cond, "message")) {
[18:05:14.971]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:14.971]                       if (muffled) 
[18:05:14.971]                         invokeRestart("muffleMessage")
[18:05:14.971]                     }
[18:05:14.971]                     else if (inherits(cond, "warning")) {
[18:05:14.971]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:14.971]                       if (muffled) 
[18:05:14.971]                         invokeRestart("muffleWarning")
[18:05:14.971]                     }
[18:05:14.971]                     else if (inherits(cond, "condition")) {
[18:05:14.971]                       if (!is.null(pattern)) {
[18:05:14.971]                         computeRestarts <- base::computeRestarts
[18:05:14.971]                         grepl <- base::grepl
[18:05:14.971]                         restarts <- computeRestarts(cond)
[18:05:14.971]                         for (restart in restarts) {
[18:05:14.971]                           name <- restart$name
[18:05:14.971]                           if (is.null(name)) 
[18:05:14.971]                             next
[18:05:14.971]                           if (!grepl(pattern, name)) 
[18:05:14.971]                             next
[18:05:14.971]                           invokeRestart(restart)
[18:05:14.971]                           muffled <- TRUE
[18:05:14.971]                           break
[18:05:14.971]                         }
[18:05:14.971]                       }
[18:05:14.971]                     }
[18:05:14.971]                     invisible(muffled)
[18:05:14.971]                   }
[18:05:14.971]                   muffleCondition(cond)
[18:05:14.971]                 })
[18:05:14.971]             }))
[18:05:14.971]             future::FutureResult(value = ...future.value$value, 
[18:05:14.971]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.971]                   ...future.rng), globalenv = if (FALSE) 
[18:05:14.971]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:14.971]                     ...future.globalenv.names))
[18:05:14.971]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:14.971]         }, condition = base::local({
[18:05:14.971]             c <- base::c
[18:05:14.971]             inherits <- base::inherits
[18:05:14.971]             invokeRestart <- base::invokeRestart
[18:05:14.971]             length <- base::length
[18:05:14.971]             list <- base::list
[18:05:14.971]             seq.int <- base::seq.int
[18:05:14.971]             signalCondition <- base::signalCondition
[18:05:14.971]             sys.calls <- base::sys.calls
[18:05:14.971]             `[[` <- base::`[[`
[18:05:14.971]             `+` <- base::`+`
[18:05:14.971]             `<<-` <- base::`<<-`
[18:05:14.971]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:14.971]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:14.971]                   3L)]
[18:05:14.971]             }
[18:05:14.971]             function(cond) {
[18:05:14.971]                 is_error <- inherits(cond, "error")
[18:05:14.971]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:14.971]                   NULL)
[18:05:14.971]                 if (is_error) {
[18:05:14.971]                   sessionInformation <- function() {
[18:05:14.971]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:14.971]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:14.971]                       search = base::search(), system = base::Sys.info())
[18:05:14.971]                   }
[18:05:14.971]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.971]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:14.971]                     cond$call), session = sessionInformation(), 
[18:05:14.971]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:14.971]                   signalCondition(cond)
[18:05:14.971]                 }
[18:05:14.971]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:14.971]                 "immediateCondition"))) {
[18:05:14.971]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:14.971]                   ...future.conditions[[length(...future.conditions) + 
[18:05:14.971]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:14.971]                   if (TRUE && !signal) {
[18:05:14.971]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.971]                     {
[18:05:14.971]                       inherits <- base::inherits
[18:05:14.971]                       invokeRestart <- base::invokeRestart
[18:05:14.971]                       is.null <- base::is.null
[18:05:14.971]                       muffled <- FALSE
[18:05:14.971]                       if (inherits(cond, "message")) {
[18:05:14.971]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.971]                         if (muffled) 
[18:05:14.971]                           invokeRestart("muffleMessage")
[18:05:14.971]                       }
[18:05:14.971]                       else if (inherits(cond, "warning")) {
[18:05:14.971]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.971]                         if (muffled) 
[18:05:14.971]                           invokeRestart("muffleWarning")
[18:05:14.971]                       }
[18:05:14.971]                       else if (inherits(cond, "condition")) {
[18:05:14.971]                         if (!is.null(pattern)) {
[18:05:14.971]                           computeRestarts <- base::computeRestarts
[18:05:14.971]                           grepl <- base::grepl
[18:05:14.971]                           restarts <- computeRestarts(cond)
[18:05:14.971]                           for (restart in restarts) {
[18:05:14.971]                             name <- restart$name
[18:05:14.971]                             if (is.null(name)) 
[18:05:14.971]                               next
[18:05:14.971]                             if (!grepl(pattern, name)) 
[18:05:14.971]                               next
[18:05:14.971]                             invokeRestart(restart)
[18:05:14.971]                             muffled <- TRUE
[18:05:14.971]                             break
[18:05:14.971]                           }
[18:05:14.971]                         }
[18:05:14.971]                       }
[18:05:14.971]                       invisible(muffled)
[18:05:14.971]                     }
[18:05:14.971]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.971]                   }
[18:05:14.971]                 }
[18:05:14.971]                 else {
[18:05:14.971]                   if (TRUE) {
[18:05:14.971]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:14.971]                     {
[18:05:14.971]                       inherits <- base::inherits
[18:05:14.971]                       invokeRestart <- base::invokeRestart
[18:05:14.971]                       is.null <- base::is.null
[18:05:14.971]                       muffled <- FALSE
[18:05:14.971]                       if (inherits(cond, "message")) {
[18:05:14.971]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:14.971]                         if (muffled) 
[18:05:14.971]                           invokeRestart("muffleMessage")
[18:05:14.971]                       }
[18:05:14.971]                       else if (inherits(cond, "warning")) {
[18:05:14.971]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:14.971]                         if (muffled) 
[18:05:14.971]                           invokeRestart("muffleWarning")
[18:05:14.971]                       }
[18:05:14.971]                       else if (inherits(cond, "condition")) {
[18:05:14.971]                         if (!is.null(pattern)) {
[18:05:14.971]                           computeRestarts <- base::computeRestarts
[18:05:14.971]                           grepl <- base::grepl
[18:05:14.971]                           restarts <- computeRestarts(cond)
[18:05:14.971]                           for (restart in restarts) {
[18:05:14.971]                             name <- restart$name
[18:05:14.971]                             if (is.null(name)) 
[18:05:14.971]                               next
[18:05:14.971]                             if (!grepl(pattern, name)) 
[18:05:14.971]                               next
[18:05:14.971]                             invokeRestart(restart)
[18:05:14.971]                             muffled <- TRUE
[18:05:14.971]                             break
[18:05:14.971]                           }
[18:05:14.971]                         }
[18:05:14.971]                       }
[18:05:14.971]                       invisible(muffled)
[18:05:14.971]                     }
[18:05:14.971]                     muffleCondition(cond, pattern = "^muffle")
[18:05:14.971]                   }
[18:05:14.971]                 }
[18:05:14.971]             }
[18:05:14.971]         }))
[18:05:14.971]     }, error = function(ex) {
[18:05:14.971]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:14.971]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:14.971]                 ...future.rng), started = ...future.startTime, 
[18:05:14.971]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:14.971]             version = "1.8"), class = "FutureResult")
[18:05:14.971]     }, finally = {
[18:05:14.971]         if (!identical(...future.workdir, getwd())) 
[18:05:14.971]             setwd(...future.workdir)
[18:05:14.971]         {
[18:05:14.971]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:14.971]                 ...future.oldOptions$nwarnings <- NULL
[18:05:14.971]             }
[18:05:14.971]             base::options(...future.oldOptions)
[18:05:14.971]             if (.Platform$OS.type == "windows") {
[18:05:14.971]                 old_names <- names(...future.oldEnvVars)
[18:05:14.971]                 envs <- base::Sys.getenv()
[18:05:14.971]                 names <- names(envs)
[18:05:14.971]                 common <- intersect(names, old_names)
[18:05:14.971]                 added <- setdiff(names, old_names)
[18:05:14.971]                 removed <- setdiff(old_names, names)
[18:05:14.971]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:14.971]                   envs[common]]
[18:05:14.971]                 NAMES <- toupper(changed)
[18:05:14.971]                 args <- list()
[18:05:14.971]                 for (kk in seq_along(NAMES)) {
[18:05:14.971]                   name <- changed[[kk]]
[18:05:14.971]                   NAME <- NAMES[[kk]]
[18:05:14.971]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.971]                     next
[18:05:14.971]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.971]                 }
[18:05:14.971]                 NAMES <- toupper(added)
[18:05:14.971]                 for (kk in seq_along(NAMES)) {
[18:05:14.971]                   name <- added[[kk]]
[18:05:14.971]                   NAME <- NAMES[[kk]]
[18:05:14.971]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.971]                     next
[18:05:14.971]                   args[[name]] <- ""
[18:05:14.971]                 }
[18:05:14.971]                 NAMES <- toupper(removed)
[18:05:14.971]                 for (kk in seq_along(NAMES)) {
[18:05:14.971]                   name <- removed[[kk]]
[18:05:14.971]                   NAME <- NAMES[[kk]]
[18:05:14.971]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:14.971]                     next
[18:05:14.971]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:14.971]                 }
[18:05:14.971]                 if (length(args) > 0) 
[18:05:14.971]                   base::do.call(base::Sys.setenv, args = args)
[18:05:14.971]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:14.971]             }
[18:05:14.971]             else {
[18:05:14.971]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:14.971]             }
[18:05:14.971]             {
[18:05:14.971]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:14.971]                   0L) {
[18:05:14.971]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:14.971]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:14.971]                   base::options(opts)
[18:05:14.971]                 }
[18:05:14.971]                 {
[18:05:14.971]                   {
[18:05:14.971]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:14.971]                     NULL
[18:05:14.971]                   }
[18:05:14.971]                   options(future.plan = NULL)
[18:05:14.971]                   if (is.na(NA_character_)) 
[18:05:14.971]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:14.971]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:14.971]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:14.971]                     .init = FALSE)
[18:05:14.971]                 }
[18:05:14.971]             }
[18:05:14.971]         }
[18:05:14.971]     })
[18:05:14.971]     if (TRUE) {
[18:05:14.971]         base::sink(type = "output", split = FALSE)
[18:05:14.971]         if (TRUE) {
[18:05:14.971]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:14.971]         }
[18:05:14.971]         else {
[18:05:14.971]             ...future.result["stdout"] <- base::list(NULL)
[18:05:14.971]         }
[18:05:14.971]         base::close(...future.stdout)
[18:05:14.971]         ...future.stdout <- NULL
[18:05:14.971]     }
[18:05:14.971]     ...future.result$conditions <- ...future.conditions
[18:05:14.971]     ...future.result$finished <- base::Sys.time()
[18:05:14.971]     ...future.result
[18:05:14.971] }
[18:05:14.976] requestCore(): workers = 2
[18:05:14.980] MulticoreFuture started
[18:05:14.984] plan(): Setting new future strategy stack:
[18:05:14.985] List of future strategies:
[18:05:14.985] 1. sequential:
[18:05:14.985]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:14.985]    - tweaked: FALSE
[18:05:14.985]    - call: NULL
[18:05:14.987] plan(): nbrOfWorkers() = 1
[18:05:14.992] plan(): Setting new future strategy stack:
[18:05:14.992] List of future strategies:
[18:05:14.992] 1. multicore:
[18:05:14.992]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:14.992]    - tweaked: FALSE
[18:05:14.992]    - call: plan(multicore)
[1] FALSE
[18:05:14.995] result() for MulticoreFuture ...
[18:05:15.004] plan(): nbrOfWorkers() = 2
[18:05:15.007] result() for MulticoreFuture ...
[18:05:15.008] result() for MulticoreFuture ... done
[18:05:15.008] result() for MulticoreFuture ... done
[18:05:15.008] result() for MulticoreFuture ...
[18:05:15.009] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = TRUE) with globals
[18:05:15.017] getGlobalsAndPackages() ...
[18:05:15.018] Searching for globals...
[18:05:15.023] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[18:05:15.023] Searching for globals ... DONE
[18:05:15.024] Resolving globals: FALSE
[18:05:15.025] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:15.026] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:05:15.026] - globals: [1] ‘a’
[18:05:15.026] 
[18:05:15.027] getGlobalsAndPackages() ... DONE
[18:05:15.028] Packages needed by the future expression (n = 0): <none>
[18:05:15.028] Packages needed by future strategies (n = 0): <none>
[18:05:15.029] {
[18:05:15.029]     {
[18:05:15.029]         {
[18:05:15.029]             ...future.startTime <- base::Sys.time()
[18:05:15.029]             {
[18:05:15.029]                 {
[18:05:15.029]                   {
[18:05:15.029]                     {
[18:05:15.029]                       base::local({
[18:05:15.029]                         has_future <- base::requireNamespace("future", 
[18:05:15.029]                           quietly = TRUE)
[18:05:15.029]                         if (has_future) {
[18:05:15.029]                           ns <- base::getNamespace("future")
[18:05:15.029]                           version <- ns[[".package"]][["version"]]
[18:05:15.029]                           if (is.null(version)) 
[18:05:15.029]                             version <- utils::packageVersion("future")
[18:05:15.029]                         }
[18:05:15.029]                         else {
[18:05:15.029]                           version <- NULL
[18:05:15.029]                         }
[18:05:15.029]                         if (!has_future || version < "1.8.0") {
[18:05:15.029]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:15.029]                             "", base::R.version$version.string), 
[18:05:15.029]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:15.029]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:15.029]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:15.029]                               "release", "version")], collapse = " "), 
[18:05:15.029]                             hostname = base::Sys.info()[["nodename"]])
[18:05:15.029]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:15.029]                             info)
[18:05:15.029]                           info <- base::paste(info, collapse = "; ")
[18:05:15.029]                           if (!has_future) {
[18:05:15.029]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:15.029]                               info)
[18:05:15.029]                           }
[18:05:15.029]                           else {
[18:05:15.029]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:15.029]                               info, version)
[18:05:15.029]                           }
[18:05:15.029]                           base::stop(msg)
[18:05:15.029]                         }
[18:05:15.029]                       })
[18:05:15.029]                     }
[18:05:15.029]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:15.029]                     base::options(mc.cores = 1L)
[18:05:15.029]                   }
[18:05:15.029]                   ...future.strategy.old <- future::plan("list")
[18:05:15.029]                   options(future.plan = NULL)
[18:05:15.029]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.029]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:15.029]                 }
[18:05:15.029]                 ...future.workdir <- getwd()
[18:05:15.029]             }
[18:05:15.029]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:15.029]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:15.029]         }
[18:05:15.029]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:15.029]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:15.029]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:15.029]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:15.029]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:15.029]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:15.029]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:15.029]             base::names(...future.oldOptions))
[18:05:15.029]     }
[18:05:15.029]     if (FALSE) {
[18:05:15.029]     }
[18:05:15.029]     else {
[18:05:15.029]         if (TRUE) {
[18:05:15.029]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:15.029]                 open = "w")
[18:05:15.029]         }
[18:05:15.029]         else {
[18:05:15.029]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:15.029]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:15.029]         }
[18:05:15.029]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:15.029]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:15.029]             base::sink(type = "output", split = FALSE)
[18:05:15.029]             base::close(...future.stdout)
[18:05:15.029]         }, add = TRUE)
[18:05:15.029]     }
[18:05:15.029]     ...future.frame <- base::sys.nframe()
[18:05:15.029]     ...future.conditions <- base::list()
[18:05:15.029]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:15.029]     if (FALSE) {
[18:05:15.029]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:15.029]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:15.029]     }
[18:05:15.029]     ...future.result <- base::tryCatch({
[18:05:15.029]         base::withCallingHandlers({
[18:05:15.029]             ...future.value <- base::withVisible(base::local({
[18:05:15.029]                 withCallingHandlers({
[18:05:15.029]                   {
[18:05:15.029]                     b <- 3
[18:05:15.029]                     c <- 2
[18:05:15.029]                     a * b * c
[18:05:15.029]                   }
[18:05:15.029]                 }, immediateCondition = function(cond) {
[18:05:15.029]                   save_rds <- function (object, pathname, ...) 
[18:05:15.029]                   {
[18:05:15.029]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:15.029]                     if (file_test("-f", pathname_tmp)) {
[18:05:15.029]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.029]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:15.029]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.029]                         fi_tmp[["mtime"]])
[18:05:15.029]                     }
[18:05:15.029]                     tryCatch({
[18:05:15.029]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:15.029]                     }, error = function(ex) {
[18:05:15.029]                       msg <- conditionMessage(ex)
[18:05:15.029]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.029]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:15.029]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.029]                         fi_tmp[["mtime"]], msg)
[18:05:15.029]                       ex$message <- msg
[18:05:15.029]                       stop(ex)
[18:05:15.029]                     })
[18:05:15.029]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:15.029]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:15.029]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:15.029]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.029]                       fi <- file.info(pathname)
[18:05:15.029]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:15.029]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.029]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:15.029]                         fi[["size"]], fi[["mtime"]])
[18:05:15.029]                       stop(msg)
[18:05:15.029]                     }
[18:05:15.029]                     invisible(pathname)
[18:05:15.029]                   }
[18:05:15.029]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:15.029]                     rootPath = tempdir()) 
[18:05:15.029]                   {
[18:05:15.029]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:15.029]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:15.029]                       tmpdir = path, fileext = ".rds")
[18:05:15.029]                     save_rds(obj, file)
[18:05:15.029]                   }
[18:05:15.029]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:15.029]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.029]                   {
[18:05:15.029]                     inherits <- base::inherits
[18:05:15.029]                     invokeRestart <- base::invokeRestart
[18:05:15.029]                     is.null <- base::is.null
[18:05:15.029]                     muffled <- FALSE
[18:05:15.029]                     if (inherits(cond, "message")) {
[18:05:15.029]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:15.029]                       if (muffled) 
[18:05:15.029]                         invokeRestart("muffleMessage")
[18:05:15.029]                     }
[18:05:15.029]                     else if (inherits(cond, "warning")) {
[18:05:15.029]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:15.029]                       if (muffled) 
[18:05:15.029]                         invokeRestart("muffleWarning")
[18:05:15.029]                     }
[18:05:15.029]                     else if (inherits(cond, "condition")) {
[18:05:15.029]                       if (!is.null(pattern)) {
[18:05:15.029]                         computeRestarts <- base::computeRestarts
[18:05:15.029]                         grepl <- base::grepl
[18:05:15.029]                         restarts <- computeRestarts(cond)
[18:05:15.029]                         for (restart in restarts) {
[18:05:15.029]                           name <- restart$name
[18:05:15.029]                           if (is.null(name)) 
[18:05:15.029]                             next
[18:05:15.029]                           if (!grepl(pattern, name)) 
[18:05:15.029]                             next
[18:05:15.029]                           invokeRestart(restart)
[18:05:15.029]                           muffled <- TRUE
[18:05:15.029]                           break
[18:05:15.029]                         }
[18:05:15.029]                       }
[18:05:15.029]                     }
[18:05:15.029]                     invisible(muffled)
[18:05:15.029]                   }
[18:05:15.029]                   muffleCondition(cond)
[18:05:15.029]                 })
[18:05:15.029]             }))
[18:05:15.029]             future::FutureResult(value = ...future.value$value, 
[18:05:15.029]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.029]                   ...future.rng), globalenv = if (FALSE) 
[18:05:15.029]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:15.029]                     ...future.globalenv.names))
[18:05:15.029]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:15.029]         }, condition = base::local({
[18:05:15.029]             c <- base::c
[18:05:15.029]             inherits <- base::inherits
[18:05:15.029]             invokeRestart <- base::invokeRestart
[18:05:15.029]             length <- base::length
[18:05:15.029]             list <- base::list
[18:05:15.029]             seq.int <- base::seq.int
[18:05:15.029]             signalCondition <- base::signalCondition
[18:05:15.029]             sys.calls <- base::sys.calls
[18:05:15.029]             `[[` <- base::`[[`
[18:05:15.029]             `+` <- base::`+`
[18:05:15.029]             `<<-` <- base::`<<-`
[18:05:15.029]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:15.029]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:15.029]                   3L)]
[18:05:15.029]             }
[18:05:15.029]             function(cond) {
[18:05:15.029]                 is_error <- inherits(cond, "error")
[18:05:15.029]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:15.029]                   NULL)
[18:05:15.029]                 if (is_error) {
[18:05:15.029]                   sessionInformation <- function() {
[18:05:15.029]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:15.029]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:15.029]                       search = base::search(), system = base::Sys.info())
[18:05:15.029]                   }
[18:05:15.029]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.029]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:15.029]                     cond$call), session = sessionInformation(), 
[18:05:15.029]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:15.029]                   signalCondition(cond)
[18:05:15.029]                 }
[18:05:15.029]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:15.029]                 "immediateCondition"))) {
[18:05:15.029]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:15.029]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.029]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:15.029]                   if (TRUE && !signal) {
[18:05:15.029]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.029]                     {
[18:05:15.029]                       inherits <- base::inherits
[18:05:15.029]                       invokeRestart <- base::invokeRestart
[18:05:15.029]                       is.null <- base::is.null
[18:05:15.029]                       muffled <- FALSE
[18:05:15.029]                       if (inherits(cond, "message")) {
[18:05:15.029]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.029]                         if (muffled) 
[18:05:15.029]                           invokeRestart("muffleMessage")
[18:05:15.029]                       }
[18:05:15.029]                       else if (inherits(cond, "warning")) {
[18:05:15.029]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.029]                         if (muffled) 
[18:05:15.029]                           invokeRestart("muffleWarning")
[18:05:15.029]                       }
[18:05:15.029]                       else if (inherits(cond, "condition")) {
[18:05:15.029]                         if (!is.null(pattern)) {
[18:05:15.029]                           computeRestarts <- base::computeRestarts
[18:05:15.029]                           grepl <- base::grepl
[18:05:15.029]                           restarts <- computeRestarts(cond)
[18:05:15.029]                           for (restart in restarts) {
[18:05:15.029]                             name <- restart$name
[18:05:15.029]                             if (is.null(name)) 
[18:05:15.029]                               next
[18:05:15.029]                             if (!grepl(pattern, name)) 
[18:05:15.029]                               next
[18:05:15.029]                             invokeRestart(restart)
[18:05:15.029]                             muffled <- TRUE
[18:05:15.029]                             break
[18:05:15.029]                           }
[18:05:15.029]                         }
[18:05:15.029]                       }
[18:05:15.029]                       invisible(muffled)
[18:05:15.029]                     }
[18:05:15.029]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.029]                   }
[18:05:15.029]                 }
[18:05:15.029]                 else {
[18:05:15.029]                   if (TRUE) {
[18:05:15.029]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.029]                     {
[18:05:15.029]                       inherits <- base::inherits
[18:05:15.029]                       invokeRestart <- base::invokeRestart
[18:05:15.029]                       is.null <- base::is.null
[18:05:15.029]                       muffled <- FALSE
[18:05:15.029]                       if (inherits(cond, "message")) {
[18:05:15.029]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.029]                         if (muffled) 
[18:05:15.029]                           invokeRestart("muffleMessage")
[18:05:15.029]                       }
[18:05:15.029]                       else if (inherits(cond, "warning")) {
[18:05:15.029]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.029]                         if (muffled) 
[18:05:15.029]                           invokeRestart("muffleWarning")
[18:05:15.029]                       }
[18:05:15.029]                       else if (inherits(cond, "condition")) {
[18:05:15.029]                         if (!is.null(pattern)) {
[18:05:15.029]                           computeRestarts <- base::computeRestarts
[18:05:15.029]                           grepl <- base::grepl
[18:05:15.029]                           restarts <- computeRestarts(cond)
[18:05:15.029]                           for (restart in restarts) {
[18:05:15.029]                             name <- restart$name
[18:05:15.029]                             if (is.null(name)) 
[18:05:15.029]                               next
[18:05:15.029]                             if (!grepl(pattern, name)) 
[18:05:15.029]                               next
[18:05:15.029]                             invokeRestart(restart)
[18:05:15.029]                             muffled <- TRUE
[18:05:15.029]                             break
[18:05:15.029]                           }
[18:05:15.029]                         }
[18:05:15.029]                       }
[18:05:15.029]                       invisible(muffled)
[18:05:15.029]                     }
[18:05:15.029]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.029]                   }
[18:05:15.029]                 }
[18:05:15.029]             }
[18:05:15.029]         }))
[18:05:15.029]     }, error = function(ex) {
[18:05:15.029]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:15.029]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.029]                 ...future.rng), started = ...future.startTime, 
[18:05:15.029]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:15.029]             version = "1.8"), class = "FutureResult")
[18:05:15.029]     }, finally = {
[18:05:15.029]         if (!identical(...future.workdir, getwd())) 
[18:05:15.029]             setwd(...future.workdir)
[18:05:15.029]         {
[18:05:15.029]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:15.029]                 ...future.oldOptions$nwarnings <- NULL
[18:05:15.029]             }
[18:05:15.029]             base::options(...future.oldOptions)
[18:05:15.029]             if (.Platform$OS.type == "windows") {
[18:05:15.029]                 old_names <- names(...future.oldEnvVars)
[18:05:15.029]                 envs <- base::Sys.getenv()
[18:05:15.029]                 names <- names(envs)
[18:05:15.029]                 common <- intersect(names, old_names)
[18:05:15.029]                 added <- setdiff(names, old_names)
[18:05:15.029]                 removed <- setdiff(old_names, names)
[18:05:15.029]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:15.029]                   envs[common]]
[18:05:15.029]                 NAMES <- toupper(changed)
[18:05:15.029]                 args <- list()
[18:05:15.029]                 for (kk in seq_along(NAMES)) {
[18:05:15.029]                   name <- changed[[kk]]
[18:05:15.029]                   NAME <- NAMES[[kk]]
[18:05:15.029]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.029]                     next
[18:05:15.029]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.029]                 }
[18:05:15.029]                 NAMES <- toupper(added)
[18:05:15.029]                 for (kk in seq_along(NAMES)) {
[18:05:15.029]                   name <- added[[kk]]
[18:05:15.029]                   NAME <- NAMES[[kk]]
[18:05:15.029]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.029]                     next
[18:05:15.029]                   args[[name]] <- ""
[18:05:15.029]                 }
[18:05:15.029]                 NAMES <- toupper(removed)
[18:05:15.029]                 for (kk in seq_along(NAMES)) {
[18:05:15.029]                   name <- removed[[kk]]
[18:05:15.029]                   NAME <- NAMES[[kk]]
[18:05:15.029]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.029]                     next
[18:05:15.029]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.029]                 }
[18:05:15.029]                 if (length(args) > 0) 
[18:05:15.029]                   base::do.call(base::Sys.setenv, args = args)
[18:05:15.029]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:15.029]             }
[18:05:15.029]             else {
[18:05:15.029]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:15.029]             }
[18:05:15.029]             {
[18:05:15.029]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:15.029]                   0L) {
[18:05:15.029]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:15.029]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:15.029]                   base::options(opts)
[18:05:15.029]                 }
[18:05:15.029]                 {
[18:05:15.029]                   {
[18:05:15.029]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:15.029]                     NULL
[18:05:15.029]                   }
[18:05:15.029]                   options(future.plan = NULL)
[18:05:15.029]                   if (is.na(NA_character_)) 
[18:05:15.029]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.029]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:15.029]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:15.029]                     .init = FALSE)
[18:05:15.029]                 }
[18:05:15.029]             }
[18:05:15.029]         }
[18:05:15.029]     })
[18:05:15.029]     if (TRUE) {
[18:05:15.029]         base::sink(type = "output", split = FALSE)
[18:05:15.029]         if (TRUE) {
[18:05:15.029]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:15.029]         }
[18:05:15.029]         else {
[18:05:15.029]             ...future.result["stdout"] <- base::list(NULL)
[18:05:15.029]         }
[18:05:15.029]         base::close(...future.stdout)
[18:05:15.029]         ...future.stdout <- NULL
[18:05:15.029]     }
[18:05:15.029]     ...future.result$conditions <- ...future.conditions
[18:05:15.029]     ...future.result$finished <- base::Sys.time()
[18:05:15.029]     ...future.result
[18:05:15.029] }
[18:05:15.034] assign_globals() ...
[18:05:15.035] List of 1
[18:05:15.035]  $ a: num 0
[18:05:15.035]  - attr(*, "where")=List of 1
[18:05:15.035]   ..$ a:<environment: R_EmptyEnv> 
[18:05:15.035]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:15.035]  - attr(*, "resolved")= logi FALSE
[18:05:15.035]  - attr(*, "total_size")= num 56
[18:05:15.040] - copied ‘a’ to environment
[18:05:15.041] assign_globals() ... done
[18:05:15.041] requestCore(): workers = 2
[18:05:15.045] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:05:15.050] plan(): Setting new future strategy stack:
Globals: 1 objects totaling 56 bytes (numeric ‘a’ of 56 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:05:15.050] List of future strategies:
[18:05:15.050] 1. sequential:
[18:05:15.050]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.050]    - tweaked: FALSE
[18:05:15.050]    - call: NULL
[18:05:15.054] plan(): nbrOfWorkers() = 1
[18:05:15.058] plan(): Setting new future strategy stack:
[18:05:15.058] List of future strategies:
[18:05:15.058] 1. multicore:
[18:05:15.058]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:15.058]    - tweaked: FALSE
[18:05:15.058]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:15.063] result() for MulticoreFuture ...
[18:05:15.069] plan(): nbrOfWorkers() = 2
[18:05:15.071] result() for MulticoreFuture ...
[18:05:15.071] result() for MulticoreFuture ... done
[18:05:15.072] result() for MulticoreFuture ... done
[18:05:15.074] result() for MulticoreFuture ...
[18:05:15.074] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[18:05:15.083] getGlobalsAndPackages() ...
[18:05:15.083] Searching for globals...
[18:05:15.085] - globals found: [2] ‘{’, ‘ii’
[18:05:15.086] Searching for globals ... DONE
[18:05:15.086] Resolving globals: FALSE
[18:05:15.087] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:15.088] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[18:05:15.088] - globals: [1] ‘ii’
[18:05:15.089] 
[18:05:15.089] getGlobalsAndPackages() ... DONE
[18:05:15.090] Packages needed by the future expression (n = 0): <none>
[18:05:15.090] Packages needed by future strategies (n = 0): <none>
[18:05:15.091] {
[18:05:15.091]     {
[18:05:15.091]         {
[18:05:15.091]             ...future.startTime <- base::Sys.time()
[18:05:15.091]             {
[18:05:15.091]                 {
[18:05:15.091]                   {
[18:05:15.091]                     {
[18:05:15.091]                       base::local({
[18:05:15.091]                         has_future <- base::requireNamespace("future", 
[18:05:15.091]                           quietly = TRUE)
[18:05:15.091]                         if (has_future) {
[18:05:15.091]                           ns <- base::getNamespace("future")
[18:05:15.091]                           version <- ns[[".package"]][["version"]]
[18:05:15.091]                           if (is.null(version)) 
[18:05:15.091]                             version <- utils::packageVersion("future")
[18:05:15.091]                         }
[18:05:15.091]                         else {
[18:05:15.091]                           version <- NULL
[18:05:15.091]                         }
[18:05:15.091]                         if (!has_future || version < "1.8.0") {
[18:05:15.091]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:15.091]                             "", base::R.version$version.string), 
[18:05:15.091]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:15.091]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:15.091]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:15.091]                               "release", "version")], collapse = " "), 
[18:05:15.091]                             hostname = base::Sys.info()[["nodename"]])
[18:05:15.091]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:15.091]                             info)
[18:05:15.091]                           info <- base::paste(info, collapse = "; ")
[18:05:15.091]                           if (!has_future) {
[18:05:15.091]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:15.091]                               info)
[18:05:15.091]                           }
[18:05:15.091]                           else {
[18:05:15.091]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:15.091]                               info, version)
[18:05:15.091]                           }
[18:05:15.091]                           base::stop(msg)
[18:05:15.091]                         }
[18:05:15.091]                       })
[18:05:15.091]                     }
[18:05:15.091]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:15.091]                     base::options(mc.cores = 1L)
[18:05:15.091]                   }
[18:05:15.091]                   ...future.strategy.old <- future::plan("list")
[18:05:15.091]                   options(future.plan = NULL)
[18:05:15.091]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.091]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:15.091]                 }
[18:05:15.091]                 ...future.workdir <- getwd()
[18:05:15.091]             }
[18:05:15.091]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:15.091]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:15.091]         }
[18:05:15.091]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:15.091]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:15.091]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:15.091]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:15.091]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:15.091]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:15.091]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:15.091]             base::names(...future.oldOptions))
[18:05:15.091]     }
[18:05:15.091]     if (FALSE) {
[18:05:15.091]     }
[18:05:15.091]     else {
[18:05:15.091]         if (TRUE) {
[18:05:15.091]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:15.091]                 open = "w")
[18:05:15.091]         }
[18:05:15.091]         else {
[18:05:15.091]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:15.091]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:15.091]         }
[18:05:15.091]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:15.091]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:15.091]             base::sink(type = "output", split = FALSE)
[18:05:15.091]             base::close(...future.stdout)
[18:05:15.091]         }, add = TRUE)
[18:05:15.091]     }
[18:05:15.091]     ...future.frame <- base::sys.nframe()
[18:05:15.091]     ...future.conditions <- base::list()
[18:05:15.091]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:15.091]     if (FALSE) {
[18:05:15.091]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:15.091]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:15.091]     }
[18:05:15.091]     ...future.result <- base::tryCatch({
[18:05:15.091]         base::withCallingHandlers({
[18:05:15.091]             ...future.value <- base::withVisible(base::local({
[18:05:15.091]                 withCallingHandlers({
[18:05:15.091]                   {
[18:05:15.091]                     ii
[18:05:15.091]                   }
[18:05:15.091]                 }, immediateCondition = function(cond) {
[18:05:15.091]                   save_rds <- function (object, pathname, ...) 
[18:05:15.091]                   {
[18:05:15.091]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:15.091]                     if (file_test("-f", pathname_tmp)) {
[18:05:15.091]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.091]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:15.091]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.091]                         fi_tmp[["mtime"]])
[18:05:15.091]                     }
[18:05:15.091]                     tryCatch({
[18:05:15.091]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:15.091]                     }, error = function(ex) {
[18:05:15.091]                       msg <- conditionMessage(ex)
[18:05:15.091]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.091]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:15.091]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.091]                         fi_tmp[["mtime"]], msg)
[18:05:15.091]                       ex$message <- msg
[18:05:15.091]                       stop(ex)
[18:05:15.091]                     })
[18:05:15.091]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:15.091]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:15.091]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:15.091]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.091]                       fi <- file.info(pathname)
[18:05:15.091]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:15.091]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.091]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:15.091]                         fi[["size"]], fi[["mtime"]])
[18:05:15.091]                       stop(msg)
[18:05:15.091]                     }
[18:05:15.091]                     invisible(pathname)
[18:05:15.091]                   }
[18:05:15.091]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:15.091]                     rootPath = tempdir()) 
[18:05:15.091]                   {
[18:05:15.091]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:15.091]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:15.091]                       tmpdir = path, fileext = ".rds")
[18:05:15.091]                     save_rds(obj, file)
[18:05:15.091]                   }
[18:05:15.091]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:15.091]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.091]                   {
[18:05:15.091]                     inherits <- base::inherits
[18:05:15.091]                     invokeRestart <- base::invokeRestart
[18:05:15.091]                     is.null <- base::is.null
[18:05:15.091]                     muffled <- FALSE
[18:05:15.091]                     if (inherits(cond, "message")) {
[18:05:15.091]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:15.091]                       if (muffled) 
[18:05:15.091]                         invokeRestart("muffleMessage")
[18:05:15.091]                     }
[18:05:15.091]                     else if (inherits(cond, "warning")) {
[18:05:15.091]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:15.091]                       if (muffled) 
[18:05:15.091]                         invokeRestart("muffleWarning")
[18:05:15.091]                     }
[18:05:15.091]                     else if (inherits(cond, "condition")) {
[18:05:15.091]                       if (!is.null(pattern)) {
[18:05:15.091]                         computeRestarts <- base::computeRestarts
[18:05:15.091]                         grepl <- base::grepl
[18:05:15.091]                         restarts <- computeRestarts(cond)
[18:05:15.091]                         for (restart in restarts) {
[18:05:15.091]                           name <- restart$name
[18:05:15.091]                           if (is.null(name)) 
[18:05:15.091]                             next
[18:05:15.091]                           if (!grepl(pattern, name)) 
[18:05:15.091]                             next
[18:05:15.091]                           invokeRestart(restart)
[18:05:15.091]                           muffled <- TRUE
[18:05:15.091]                           break
[18:05:15.091]                         }
[18:05:15.091]                       }
[18:05:15.091]                     }
[18:05:15.091]                     invisible(muffled)
[18:05:15.091]                   }
[18:05:15.091]                   muffleCondition(cond)
[18:05:15.091]                 })
[18:05:15.091]             }))
[18:05:15.091]             future::FutureResult(value = ...future.value$value, 
[18:05:15.091]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.091]                   ...future.rng), globalenv = if (FALSE) 
[18:05:15.091]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:15.091]                     ...future.globalenv.names))
[18:05:15.091]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:15.091]         }, condition = base::local({
[18:05:15.091]             c <- base::c
[18:05:15.091]             inherits <- base::inherits
[18:05:15.091]             invokeRestart <- base::invokeRestart
[18:05:15.091]             length <- base::length
[18:05:15.091]             list <- base::list
[18:05:15.091]             seq.int <- base::seq.int
[18:05:15.091]             signalCondition <- base::signalCondition
[18:05:15.091]             sys.calls <- base::sys.calls
[18:05:15.091]             `[[` <- base::`[[`
[18:05:15.091]             `+` <- base::`+`
[18:05:15.091]             `<<-` <- base::`<<-`
[18:05:15.091]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:15.091]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:15.091]                   3L)]
[18:05:15.091]             }
[18:05:15.091]             function(cond) {
[18:05:15.091]                 is_error <- inherits(cond, "error")
[18:05:15.091]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:15.091]                   NULL)
[18:05:15.091]                 if (is_error) {
[18:05:15.091]                   sessionInformation <- function() {
[18:05:15.091]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:15.091]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:15.091]                       search = base::search(), system = base::Sys.info())
[18:05:15.091]                   }
[18:05:15.091]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.091]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:15.091]                     cond$call), session = sessionInformation(), 
[18:05:15.091]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:15.091]                   signalCondition(cond)
[18:05:15.091]                 }
[18:05:15.091]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:15.091]                 "immediateCondition"))) {
[18:05:15.091]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:15.091]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.091]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:15.091]                   if (TRUE && !signal) {
[18:05:15.091]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.091]                     {
[18:05:15.091]                       inherits <- base::inherits
[18:05:15.091]                       invokeRestart <- base::invokeRestart
[18:05:15.091]                       is.null <- base::is.null
[18:05:15.091]                       muffled <- FALSE
[18:05:15.091]                       if (inherits(cond, "message")) {
[18:05:15.091]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.091]                         if (muffled) 
[18:05:15.091]                           invokeRestart("muffleMessage")
[18:05:15.091]                       }
[18:05:15.091]                       else if (inherits(cond, "warning")) {
[18:05:15.091]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.091]                         if (muffled) 
[18:05:15.091]                           invokeRestart("muffleWarning")
[18:05:15.091]                       }
[18:05:15.091]                       else if (inherits(cond, "condition")) {
[18:05:15.091]                         if (!is.null(pattern)) {
[18:05:15.091]                           computeRestarts <- base::computeRestarts
[18:05:15.091]                           grepl <- base::grepl
[18:05:15.091]                           restarts <- computeRestarts(cond)
[18:05:15.091]                           for (restart in restarts) {
[18:05:15.091]                             name <- restart$name
[18:05:15.091]                             if (is.null(name)) 
[18:05:15.091]                               next
[18:05:15.091]                             if (!grepl(pattern, name)) 
[18:05:15.091]                               next
[18:05:15.091]                             invokeRestart(restart)
[18:05:15.091]                             muffled <- TRUE
[18:05:15.091]                             break
[18:05:15.091]                           }
[18:05:15.091]                         }
[18:05:15.091]                       }
[18:05:15.091]                       invisible(muffled)
[18:05:15.091]                     }
[18:05:15.091]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.091]                   }
[18:05:15.091]                 }
[18:05:15.091]                 else {
[18:05:15.091]                   if (TRUE) {
[18:05:15.091]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.091]                     {
[18:05:15.091]                       inherits <- base::inherits
[18:05:15.091]                       invokeRestart <- base::invokeRestart
[18:05:15.091]                       is.null <- base::is.null
[18:05:15.091]                       muffled <- FALSE
[18:05:15.091]                       if (inherits(cond, "message")) {
[18:05:15.091]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.091]                         if (muffled) 
[18:05:15.091]                           invokeRestart("muffleMessage")
[18:05:15.091]                       }
[18:05:15.091]                       else if (inherits(cond, "warning")) {
[18:05:15.091]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.091]                         if (muffled) 
[18:05:15.091]                           invokeRestart("muffleWarning")
[18:05:15.091]                       }
[18:05:15.091]                       else if (inherits(cond, "condition")) {
[18:05:15.091]                         if (!is.null(pattern)) {
[18:05:15.091]                           computeRestarts <- base::computeRestarts
[18:05:15.091]                           grepl <- base::grepl
[18:05:15.091]                           restarts <- computeRestarts(cond)
[18:05:15.091]                           for (restart in restarts) {
[18:05:15.091]                             name <- restart$name
[18:05:15.091]                             if (is.null(name)) 
[18:05:15.091]                               next
[18:05:15.091]                             if (!grepl(pattern, name)) 
[18:05:15.091]                               next
[18:05:15.091]                             invokeRestart(restart)
[18:05:15.091]                             muffled <- TRUE
[18:05:15.091]                             break
[18:05:15.091]                           }
[18:05:15.091]                         }
[18:05:15.091]                       }
[18:05:15.091]                       invisible(muffled)
[18:05:15.091]                     }
[18:05:15.091]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.091]                   }
[18:05:15.091]                 }
[18:05:15.091]             }
[18:05:15.091]         }))
[18:05:15.091]     }, error = function(ex) {
[18:05:15.091]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:15.091]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.091]                 ...future.rng), started = ...future.startTime, 
[18:05:15.091]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:15.091]             version = "1.8"), class = "FutureResult")
[18:05:15.091]     }, finally = {
[18:05:15.091]         if (!identical(...future.workdir, getwd())) 
[18:05:15.091]             setwd(...future.workdir)
[18:05:15.091]         {
[18:05:15.091]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:15.091]                 ...future.oldOptions$nwarnings <- NULL
[18:05:15.091]             }
[18:05:15.091]             base::options(...future.oldOptions)
[18:05:15.091]             if (.Platform$OS.type == "windows") {
[18:05:15.091]                 old_names <- names(...future.oldEnvVars)
[18:05:15.091]                 envs <- base::Sys.getenv()
[18:05:15.091]                 names <- names(envs)
[18:05:15.091]                 common <- intersect(names, old_names)
[18:05:15.091]                 added <- setdiff(names, old_names)
[18:05:15.091]                 removed <- setdiff(old_names, names)
[18:05:15.091]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:15.091]                   envs[common]]
[18:05:15.091]                 NAMES <- toupper(changed)
[18:05:15.091]                 args <- list()
[18:05:15.091]                 for (kk in seq_along(NAMES)) {
[18:05:15.091]                   name <- changed[[kk]]
[18:05:15.091]                   NAME <- NAMES[[kk]]
[18:05:15.091]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.091]                     next
[18:05:15.091]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.091]                 }
[18:05:15.091]                 NAMES <- toupper(added)
[18:05:15.091]                 for (kk in seq_along(NAMES)) {
[18:05:15.091]                   name <- added[[kk]]
[18:05:15.091]                   NAME <- NAMES[[kk]]
[18:05:15.091]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.091]                     next
[18:05:15.091]                   args[[name]] <- ""
[18:05:15.091]                 }
[18:05:15.091]                 NAMES <- toupper(removed)
[18:05:15.091]                 for (kk in seq_along(NAMES)) {
[18:05:15.091]                   name <- removed[[kk]]
[18:05:15.091]                   NAME <- NAMES[[kk]]
[18:05:15.091]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.091]                     next
[18:05:15.091]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.091]                 }
[18:05:15.091]                 if (length(args) > 0) 
[18:05:15.091]                   base::do.call(base::Sys.setenv, args = args)
[18:05:15.091]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:15.091]             }
[18:05:15.091]             else {
[18:05:15.091]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:15.091]             }
[18:05:15.091]             {
[18:05:15.091]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:15.091]                   0L) {
[18:05:15.091]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:15.091]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:15.091]                   base::options(opts)
[18:05:15.091]                 }
[18:05:15.091]                 {
[18:05:15.091]                   {
[18:05:15.091]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:15.091]                     NULL
[18:05:15.091]                   }
[18:05:15.091]                   options(future.plan = NULL)
[18:05:15.091]                   if (is.na(NA_character_)) 
[18:05:15.091]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.091]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:15.091]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:15.091]                     .init = FALSE)
[18:05:15.091]                 }
[18:05:15.091]             }
[18:05:15.091]         }
[18:05:15.091]     })
[18:05:15.091]     if (TRUE) {
[18:05:15.091]         base::sink(type = "output", split = FALSE)
[18:05:15.091]         if (TRUE) {
[18:05:15.091]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:15.091]         }
[18:05:15.091]         else {
[18:05:15.091]             ...future.result["stdout"] <- base::list(NULL)
[18:05:15.091]         }
[18:05:15.091]         base::close(...future.stdout)
[18:05:15.091]         ...future.stdout <- NULL
[18:05:15.091]     }
[18:05:15.091]     ...future.result$conditions <- ...future.conditions
[18:05:15.091]     ...future.result$finished <- base::Sys.time()
[18:05:15.091]     ...future.result
[18:05:15.091] }
[18:05:15.096] assign_globals() ...
[18:05:15.097] List of 1
[18:05:15.097]  $ ii: int 1
[18:05:15.097]  - attr(*, "where")=List of 1
[18:05:15.097]   ..$ ii:<environment: R_EmptyEnv> 
[18:05:15.097]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:15.097]  - attr(*, "resolved")= logi FALSE
[18:05:15.097]  - attr(*, "total_size")= num 56
[18:05:15.103] - copied ‘ii’ to environment
[18:05:15.103] assign_globals() ... done
[18:05:15.103] requestCore(): workers = 2
[18:05:15.109] MulticoreFuture started
 - Creating multicore future #2 ...
[18:05:15.111] plan(): Setting new future strategy stack:
[18:05:15.112] List of future strategies:
[18:05:15.112] 1. sequential:
[18:05:15.112]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.112]    - tweaked: FALSE
[18:05:15.112]    - call: NULL
[18:05:15.116] plan(): nbrOfWorkers() = 1
[18:05:15.122] plan(): Setting new future strategy stack:
[18:05:15.122] List of future strategies:
[18:05:15.122] 1. multicore:
[18:05:15.122]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:15.122]    - tweaked: FALSE
[18:05:15.122]    - call: plan(multicore)
[18:05:15.130] getGlobalsAndPackages() ...
[18:05:15.130] Searching for globals...
[18:05:15.134] - globals found: [2] ‘{’, ‘ii’
[18:05:15.137] Searching for globals ... DONE
[18:05:15.137] Resolving globals: FALSE
[18:05:15.139] plan(): nbrOfWorkers() = 2
[18:05:15.141] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:15.142] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[18:05:15.142] - globals: [1] ‘ii’
[18:05:15.143] 
[18:05:15.151] getGlobalsAndPackages() ... DONE
[18:05:15.153] Packages needed by the future expression (n = 0): <none>
[18:05:15.153] Packages needed by future strategies (n = 0): <none>
[18:05:15.155] {
[18:05:15.155]     {
[18:05:15.155]         {
[18:05:15.155]             ...future.startTime <- base::Sys.time()
[18:05:15.155]             {
[18:05:15.155]                 {
[18:05:15.155]                   {
[18:05:15.155]                     {
[18:05:15.155]                       base::local({
[18:05:15.155]                         has_future <- base::requireNamespace("future", 
[18:05:15.155]                           quietly = TRUE)
[18:05:15.155]                         if (has_future) {
[18:05:15.155]                           ns <- base::getNamespace("future")
[18:05:15.155]                           version <- ns[[".package"]][["version"]]
[18:05:15.155]                           if (is.null(version)) 
[18:05:15.155]                             version <- utils::packageVersion("future")
[18:05:15.155]                         }
[18:05:15.155]                         else {
[18:05:15.155]                           version <- NULL
[18:05:15.155]                         }
[18:05:15.155]                         if (!has_future || version < "1.8.0") {
[18:05:15.155]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:15.155]                             "", base::R.version$version.string), 
[18:05:15.155]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:15.155]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:15.155]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:15.155]                               "release", "version")], collapse = " "), 
[18:05:15.155]                             hostname = base::Sys.info()[["nodename"]])
[18:05:15.155]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:15.155]                             info)
[18:05:15.155]                           info <- base::paste(info, collapse = "; ")
[18:05:15.155]                           if (!has_future) {
[18:05:15.155]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:15.155]                               info)
[18:05:15.155]                           }
[18:05:15.155]                           else {
[18:05:15.155]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:15.155]                               info, version)
[18:05:15.155]                           }
[18:05:15.155]                           base::stop(msg)
[18:05:15.155]                         }
[18:05:15.155]                       })
[18:05:15.155]                     }
[18:05:15.155]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:15.155]                     base::options(mc.cores = 1L)
[18:05:15.155]                   }
[18:05:15.155]                   ...future.strategy.old <- future::plan("list")
[18:05:15.155]                   options(future.plan = NULL)
[18:05:15.155]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.155]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:15.155]                 }
[18:05:15.155]                 ...future.workdir <- getwd()
[18:05:15.155]             }
[18:05:15.155]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:15.155]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:15.155]         }
[18:05:15.155]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:15.155]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:15.155]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:15.155]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:15.155]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:15.155]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:15.155]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:15.155]             base::names(...future.oldOptions))
[18:05:15.155]     }
[18:05:15.155]     if (FALSE) {
[18:05:15.155]     }
[18:05:15.155]     else {
[18:05:15.155]         if (TRUE) {
[18:05:15.155]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:15.155]                 open = "w")
[18:05:15.155]         }
[18:05:15.155]         else {
[18:05:15.155]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:15.155]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:15.155]         }
[18:05:15.155]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:15.155]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:15.155]             base::sink(type = "output", split = FALSE)
[18:05:15.155]             base::close(...future.stdout)
[18:05:15.155]         }, add = TRUE)
[18:05:15.155]     }
[18:05:15.155]     ...future.frame <- base::sys.nframe()
[18:05:15.155]     ...future.conditions <- base::list()
[18:05:15.155]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:15.155]     if (FALSE) {
[18:05:15.155]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:15.155]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:15.155]     }
[18:05:15.155]     ...future.result <- base::tryCatch({
[18:05:15.155]         base::withCallingHandlers({
[18:05:15.155]             ...future.value <- base::withVisible(base::local({
[18:05:15.155]                 withCallingHandlers({
[18:05:15.155]                   {
[18:05:15.155]                     ii
[18:05:15.155]                   }
[18:05:15.155]                 }, immediateCondition = function(cond) {
[18:05:15.155]                   save_rds <- function (object, pathname, ...) 
[18:05:15.155]                   {
[18:05:15.155]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:15.155]                     if (file_test("-f", pathname_tmp)) {
[18:05:15.155]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.155]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:15.155]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.155]                         fi_tmp[["mtime"]])
[18:05:15.155]                     }
[18:05:15.155]                     tryCatch({
[18:05:15.155]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:15.155]                     }, error = function(ex) {
[18:05:15.155]                       msg <- conditionMessage(ex)
[18:05:15.155]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.155]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:15.155]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.155]                         fi_tmp[["mtime"]], msg)
[18:05:15.155]                       ex$message <- msg
[18:05:15.155]                       stop(ex)
[18:05:15.155]                     })
[18:05:15.155]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:15.155]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:15.155]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:15.155]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.155]                       fi <- file.info(pathname)
[18:05:15.155]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:15.155]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.155]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:15.155]                         fi[["size"]], fi[["mtime"]])
[18:05:15.155]                       stop(msg)
[18:05:15.155]                     }
[18:05:15.155]                     invisible(pathname)
[18:05:15.155]                   }
[18:05:15.155]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:15.155]                     rootPath = tempdir()) 
[18:05:15.155]                   {
[18:05:15.155]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:15.155]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:15.155]                       tmpdir = path, fileext = ".rds")
[18:05:15.155]                     save_rds(obj, file)
[18:05:15.155]                   }
[18:05:15.155]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:15.155]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.155]                   {
[18:05:15.155]                     inherits <- base::inherits
[18:05:15.155]                     invokeRestart <- base::invokeRestart
[18:05:15.155]                     is.null <- base::is.null
[18:05:15.155]                     muffled <- FALSE
[18:05:15.155]                     if (inherits(cond, "message")) {
[18:05:15.155]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:15.155]                       if (muffled) 
[18:05:15.155]                         invokeRestart("muffleMessage")
[18:05:15.155]                     }
[18:05:15.155]                     else if (inherits(cond, "warning")) {
[18:05:15.155]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:15.155]                       if (muffled) 
[18:05:15.155]                         invokeRestart("muffleWarning")
[18:05:15.155]                     }
[18:05:15.155]                     else if (inherits(cond, "condition")) {
[18:05:15.155]                       if (!is.null(pattern)) {
[18:05:15.155]                         computeRestarts <- base::computeRestarts
[18:05:15.155]                         grepl <- base::grepl
[18:05:15.155]                         restarts <- computeRestarts(cond)
[18:05:15.155]                         for (restart in restarts) {
[18:05:15.155]                           name <- restart$name
[18:05:15.155]                           if (is.null(name)) 
[18:05:15.155]                             next
[18:05:15.155]                           if (!grepl(pattern, name)) 
[18:05:15.155]                             next
[18:05:15.155]                           invokeRestart(restart)
[18:05:15.155]                           muffled <- TRUE
[18:05:15.155]                           break
[18:05:15.155]                         }
[18:05:15.155]                       }
[18:05:15.155]                     }
[18:05:15.155]                     invisible(muffled)
[18:05:15.155]                   }
[18:05:15.155]                   muffleCondition(cond)
[18:05:15.155]                 })
[18:05:15.155]             }))
[18:05:15.155]             future::FutureResult(value = ...future.value$value, 
[18:05:15.155]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.155]                   ...future.rng), globalenv = if (FALSE) 
[18:05:15.155]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:15.155]                     ...future.globalenv.names))
[18:05:15.155]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:15.155]         }, condition = base::local({
[18:05:15.155]             c <- base::c
[18:05:15.155]             inherits <- base::inherits
[18:05:15.155]             invokeRestart <- base::invokeRestart
[18:05:15.155]             length <- base::length
[18:05:15.155]             list <- base::list
[18:05:15.155]             seq.int <- base::seq.int
[18:05:15.155]             signalCondition <- base::signalCondition
[18:05:15.155]             sys.calls <- base::sys.calls
[18:05:15.155]             `[[` <- base::`[[`
[18:05:15.155]             `+` <- base::`+`
[18:05:15.155]             `<<-` <- base::`<<-`
[18:05:15.155]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:15.155]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:15.155]                   3L)]
[18:05:15.155]             }
[18:05:15.155]             function(cond) {
[18:05:15.155]                 is_error <- inherits(cond, "error")
[18:05:15.155]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:15.155]                   NULL)
[18:05:15.155]                 if (is_error) {
[18:05:15.155]                   sessionInformation <- function() {
[18:05:15.155]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:15.155]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:15.155]                       search = base::search(), system = base::Sys.info())
[18:05:15.155]                   }
[18:05:15.155]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.155]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:15.155]                     cond$call), session = sessionInformation(), 
[18:05:15.155]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:15.155]                   signalCondition(cond)
[18:05:15.155]                 }
[18:05:15.155]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:15.155]                 "immediateCondition"))) {
[18:05:15.155]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:15.155]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.155]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:15.155]                   if (TRUE && !signal) {
[18:05:15.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.155]                     {
[18:05:15.155]                       inherits <- base::inherits
[18:05:15.155]                       invokeRestart <- base::invokeRestart
[18:05:15.155]                       is.null <- base::is.null
[18:05:15.155]                       muffled <- FALSE
[18:05:15.155]                       if (inherits(cond, "message")) {
[18:05:15.155]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.155]                         if (muffled) 
[18:05:15.155]                           invokeRestart("muffleMessage")
[18:05:15.155]                       }
[18:05:15.155]                       else if (inherits(cond, "warning")) {
[18:05:15.155]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.155]                         if (muffled) 
[18:05:15.155]                           invokeRestart("muffleWarning")
[18:05:15.155]                       }
[18:05:15.155]                       else if (inherits(cond, "condition")) {
[18:05:15.155]                         if (!is.null(pattern)) {
[18:05:15.155]                           computeRestarts <- base::computeRestarts
[18:05:15.155]                           grepl <- base::grepl
[18:05:15.155]                           restarts <- computeRestarts(cond)
[18:05:15.155]                           for (restart in restarts) {
[18:05:15.155]                             name <- restart$name
[18:05:15.155]                             if (is.null(name)) 
[18:05:15.155]                               next
[18:05:15.155]                             if (!grepl(pattern, name)) 
[18:05:15.155]                               next
[18:05:15.155]                             invokeRestart(restart)
[18:05:15.155]                             muffled <- TRUE
[18:05:15.155]                             break
[18:05:15.155]                           }
[18:05:15.155]                         }
[18:05:15.155]                       }
[18:05:15.155]                       invisible(muffled)
[18:05:15.155]                     }
[18:05:15.155]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.155]                   }
[18:05:15.155]                 }
[18:05:15.155]                 else {
[18:05:15.155]                   if (TRUE) {
[18:05:15.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.155]                     {
[18:05:15.155]                       inherits <- base::inherits
[18:05:15.155]                       invokeRestart <- base::invokeRestart
[18:05:15.155]                       is.null <- base::is.null
[18:05:15.155]                       muffled <- FALSE
[18:05:15.155]                       if (inherits(cond, "message")) {
[18:05:15.155]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.155]                         if (muffled) 
[18:05:15.155]                           invokeRestart("muffleMessage")
[18:05:15.155]                       }
[18:05:15.155]                       else if (inherits(cond, "warning")) {
[18:05:15.155]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.155]                         if (muffled) 
[18:05:15.155]                           invokeRestart("muffleWarning")
[18:05:15.155]                       }
[18:05:15.155]                       else if (inherits(cond, "condition")) {
[18:05:15.155]                         if (!is.null(pattern)) {
[18:05:15.155]                           computeRestarts <- base::computeRestarts
[18:05:15.155]                           grepl <- base::grepl
[18:05:15.155]                           restarts <- computeRestarts(cond)
[18:05:15.155]                           for (restart in restarts) {
[18:05:15.155]                             name <- restart$name
[18:05:15.155]                             if (is.null(name)) 
[18:05:15.155]                               next
[18:05:15.155]                             if (!grepl(pattern, name)) 
[18:05:15.155]                               next
[18:05:15.155]                             invokeRestart(restart)
[18:05:15.155]                             muffled <- TRUE
[18:05:15.155]                             break
[18:05:15.155]                           }
[18:05:15.155]                         }
[18:05:15.155]                       }
[18:05:15.155]                       invisible(muffled)
[18:05:15.155]                     }
[18:05:15.155]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.155]                   }
[18:05:15.155]                 }
[18:05:15.155]             }
[18:05:15.155]         }))
[18:05:15.155]     }, error = function(ex) {
[18:05:15.155]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:15.155]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.155]                 ...future.rng), started = ...future.startTime, 
[18:05:15.155]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:15.155]             version = "1.8"), class = "FutureResult")
[18:05:15.155]     }, finally = {
[18:05:15.155]         if (!identical(...future.workdir, getwd())) 
[18:05:15.155]             setwd(...future.workdir)
[18:05:15.155]         {
[18:05:15.155]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:15.155]                 ...future.oldOptions$nwarnings <- NULL
[18:05:15.155]             }
[18:05:15.155]             base::options(...future.oldOptions)
[18:05:15.155]             if (.Platform$OS.type == "windows") {
[18:05:15.155]                 old_names <- names(...future.oldEnvVars)
[18:05:15.155]                 envs <- base::Sys.getenv()
[18:05:15.155]                 names <- names(envs)
[18:05:15.155]                 common <- intersect(names, old_names)
[18:05:15.155]                 added <- setdiff(names, old_names)
[18:05:15.155]                 removed <- setdiff(old_names, names)
[18:05:15.155]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:15.155]                   envs[common]]
[18:05:15.155]                 NAMES <- toupper(changed)
[18:05:15.155]                 args <- list()
[18:05:15.155]                 for (kk in seq_along(NAMES)) {
[18:05:15.155]                   name <- changed[[kk]]
[18:05:15.155]                   NAME <- NAMES[[kk]]
[18:05:15.155]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.155]                     next
[18:05:15.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.155]                 }
[18:05:15.155]                 NAMES <- toupper(added)
[18:05:15.155]                 for (kk in seq_along(NAMES)) {
[18:05:15.155]                   name <- added[[kk]]
[18:05:15.155]                   NAME <- NAMES[[kk]]
[18:05:15.155]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.155]                     next
[18:05:15.155]                   args[[name]] <- ""
[18:05:15.155]                 }
[18:05:15.155]                 NAMES <- toupper(removed)
[18:05:15.155]                 for (kk in seq_along(NAMES)) {
[18:05:15.155]                   name <- removed[[kk]]
[18:05:15.155]                   NAME <- NAMES[[kk]]
[18:05:15.155]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.155]                     next
[18:05:15.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.155]                 }
[18:05:15.155]                 if (length(args) > 0) 
[18:05:15.155]                   base::do.call(base::Sys.setenv, args = args)
[18:05:15.155]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:15.155]             }
[18:05:15.155]             else {
[18:05:15.155]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:15.155]             }
[18:05:15.155]             {
[18:05:15.155]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:15.155]                   0L) {
[18:05:15.155]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:15.155]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:15.155]                   base::options(opts)
[18:05:15.155]                 }
[18:05:15.155]                 {
[18:05:15.155]                   {
[18:05:15.155]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:15.155]                     NULL
[18:05:15.155]                   }
[18:05:15.155]                   options(future.plan = NULL)
[18:05:15.155]                   if (is.na(NA_character_)) 
[18:05:15.155]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.155]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:15.155]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:15.155]                     .init = FALSE)
[18:05:15.155]                 }
[18:05:15.155]             }
[18:05:15.155]         }
[18:05:15.155]     })
[18:05:15.155]     if (TRUE) {
[18:05:15.155]         base::sink(type = "output", split = FALSE)
[18:05:15.155]         if (TRUE) {
[18:05:15.155]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:15.155]         }
[18:05:15.155]         else {
[18:05:15.155]             ...future.result["stdout"] <- base::list(NULL)
[18:05:15.155]         }
[18:05:15.155]         base::close(...future.stdout)
[18:05:15.155]         ...future.stdout <- NULL
[18:05:15.155]     }
[18:05:15.155]     ...future.result$conditions <- ...future.conditions
[18:05:15.155]     ...future.result$finished <- base::Sys.time()
[18:05:15.155]     ...future.result
[18:05:15.155] }
[18:05:15.161] assign_globals() ...
[18:05:15.161] List of 1
[18:05:15.161]  $ ii: int 2
[18:05:15.161]  - attr(*, "where")=List of 1
[18:05:15.161]   ..$ ii:<environment: R_EmptyEnv> 
[18:05:15.161]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:15.161]  - attr(*, "resolved")= logi FALSE
[18:05:15.161]  - attr(*, "total_size")= num 56
[18:05:15.170] - copied ‘ii’ to environment
[18:05:15.171] assign_globals() ... done
[18:05:15.171] requestCore(): workers = 2
[18:05:15.175] MulticoreFuture started
 - Creating multicore future #3 ...
[18:05:15.180] plan(): Setting new future strategy stack:
[18:05:15.182] List of future strategies:
[18:05:15.182] 1. sequential:
[18:05:15.182]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.182]    - tweaked: FALSE
[18:05:15.182]    - call: NULL
[18:05:15.186] getGlobalsAndPackages() ...
[18:05:15.187] Searching for globals...
[18:05:15.187] plan(): nbrOfWorkers() = 1
[18:05:15.190] - globals found: [2] ‘{’, ‘ii’
[18:05:15.190] Searching for globals ... DONE
[18:05:15.191] Resolving globals: FALSE
[18:05:15.192] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:15.192] plan(): Setting new future strategy stack:
[18:05:15.194] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[18:05:15.194] - globals: [1] ‘ii’
[18:05:15.194] 
[18:05:15.195] getGlobalsAndPackages() ... DONE
[18:05:15.193] List of future strategies:
[18:05:15.193] 1. multicore:
[18:05:15.193]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:15.193]    - tweaked: FALSE
[18:05:15.193]    - call: plan(multicore)
[18:05:15.196] Packages needed by the future expression (n = 0): <none>
[18:05:15.197] Packages needed by future strategies (n = 0): <none>
[18:05:15.198] {
[18:05:15.198]     {
[18:05:15.198]         {
[18:05:15.198]             ...future.startTime <- base::Sys.time()
[18:05:15.198]             {
[18:05:15.198]                 {
[18:05:15.198]                   {
[18:05:15.198]                     {
[18:05:15.198]                       base::local({
[18:05:15.198]                         has_future <- base::requireNamespace("future", 
[18:05:15.198]                           quietly = TRUE)
[18:05:15.198]                         if (has_future) {
[18:05:15.198]                           ns <- base::getNamespace("future")
[18:05:15.198]                           version <- ns[[".package"]][["version"]]
[18:05:15.198]                           if (is.null(version)) 
[18:05:15.198]                             version <- utils::packageVersion("future")
[18:05:15.198]                         }
[18:05:15.198]                         else {
[18:05:15.198]                           version <- NULL
[18:05:15.198]                         }
[18:05:15.198]                         if (!has_future || version < "1.8.0") {
[18:05:15.198]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:15.198]                             "", base::R.version$version.string), 
[18:05:15.198]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:15.198]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:15.198]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:15.198]                               "release", "version")], collapse = " "), 
[18:05:15.198]                             hostname = base::Sys.info()[["nodename"]])
[18:05:15.198]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:15.198]                             info)
[18:05:15.198]                           info <- base::paste(info, collapse = "; ")
[18:05:15.198]                           if (!has_future) {
[18:05:15.198]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:15.198]                               info)
[18:05:15.198]                           }
[18:05:15.198]                           else {
[18:05:15.198]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:15.198]                               info, version)
[18:05:15.198]                           }
[18:05:15.198]                           base::stop(msg)
[18:05:15.198]                         }
[18:05:15.198]                       })
[18:05:15.198]                     }
[18:05:15.198]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:15.198]                     base::options(mc.cores = 1L)
[18:05:15.198]                   }
[18:05:15.198]                   ...future.strategy.old <- future::plan("list")
[18:05:15.198]                   options(future.plan = NULL)
[18:05:15.198]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.198]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:15.198]                 }
[18:05:15.198]                 ...future.workdir <- getwd()
[18:05:15.198]             }
[18:05:15.198]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:15.198]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:15.198]         }
[18:05:15.198]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:15.198]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:15.198]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:15.198]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:15.198]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:15.198]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:15.198]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:15.198]             base::names(...future.oldOptions))
[18:05:15.198]     }
[18:05:15.198]     if (FALSE) {
[18:05:15.198]     }
[18:05:15.198]     else {
[18:05:15.198]         if (TRUE) {
[18:05:15.198]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:15.198]                 open = "w")
[18:05:15.198]         }
[18:05:15.198]         else {
[18:05:15.198]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:15.198]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:15.198]         }
[18:05:15.198]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:15.198]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:15.198]             base::sink(type = "output", split = FALSE)
[18:05:15.198]             base::close(...future.stdout)
[18:05:15.198]         }, add = TRUE)
[18:05:15.198]     }
[18:05:15.198]     ...future.frame <- base::sys.nframe()
[18:05:15.198]     ...future.conditions <- base::list()
[18:05:15.198]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:15.198]     if (FALSE) {
[18:05:15.198]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:15.198]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:15.198]     }
[18:05:15.198]     ...future.result <- base::tryCatch({
[18:05:15.198]         base::withCallingHandlers({
[18:05:15.198]             ...future.value <- base::withVisible(base::local({
[18:05:15.198]                 withCallingHandlers({
[18:05:15.198]                   {
[18:05:15.198]                     ii
[18:05:15.198]                   }
[18:05:15.198]                 }, immediateCondition = function(cond) {
[18:05:15.198]                   save_rds <- function (object, pathname, ...) 
[18:05:15.198]                   {
[18:05:15.198]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:15.198]                     if (file_test("-f", pathname_tmp)) {
[18:05:15.198]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.198]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:15.198]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.198]                         fi_tmp[["mtime"]])
[18:05:15.198]                     }
[18:05:15.198]                     tryCatch({
[18:05:15.198]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:15.198]                     }, error = function(ex) {
[18:05:15.198]                       msg <- conditionMessage(ex)
[18:05:15.198]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.198]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:15.198]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.198]                         fi_tmp[["mtime"]], msg)
[18:05:15.198]                       ex$message <- msg
[18:05:15.198]                       stop(ex)
[18:05:15.198]                     })
[18:05:15.198]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:15.198]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:15.198]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:15.198]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.198]                       fi <- file.info(pathname)
[18:05:15.198]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:15.198]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.198]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:15.198]                         fi[["size"]], fi[["mtime"]])
[18:05:15.198]                       stop(msg)
[18:05:15.198]                     }
[18:05:15.198]                     invisible(pathname)
[18:05:15.198]                   }
[18:05:15.198]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:15.198]                     rootPath = tempdir()) 
[18:05:15.198]                   {
[18:05:15.198]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:15.198]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:15.198]                       tmpdir = path, fileext = ".rds")
[18:05:15.198]                     save_rds(obj, file)
[18:05:15.198]                   }
[18:05:15.198]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:15.198]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.198]                   {
[18:05:15.198]                     inherits <- base::inherits
[18:05:15.198]                     invokeRestart <- base::invokeRestart
[18:05:15.198]                     is.null <- base::is.null
[18:05:15.198]                     muffled <- FALSE
[18:05:15.198]                     if (inherits(cond, "message")) {
[18:05:15.198]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:15.198]                       if (muffled) 
[18:05:15.198]                         invokeRestart("muffleMessage")
[18:05:15.198]                     }
[18:05:15.198]                     else if (inherits(cond, "warning")) {
[18:05:15.198]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:15.198]                       if (muffled) 
[18:05:15.198]                         invokeRestart("muffleWarning")
[18:05:15.198]                     }
[18:05:15.198]                     else if (inherits(cond, "condition")) {
[18:05:15.198]                       if (!is.null(pattern)) {
[18:05:15.198]                         computeRestarts <- base::computeRestarts
[18:05:15.198]                         grepl <- base::grepl
[18:05:15.198]                         restarts <- computeRestarts(cond)
[18:05:15.198]                         for (restart in restarts) {
[18:05:15.198]                           name <- restart$name
[18:05:15.198]                           if (is.null(name)) 
[18:05:15.198]                             next
[18:05:15.198]                           if (!grepl(pattern, name)) 
[18:05:15.198]                             next
[18:05:15.198]                           invokeRestart(restart)
[18:05:15.198]                           muffled <- TRUE
[18:05:15.198]                           break
[18:05:15.198]                         }
[18:05:15.198]                       }
[18:05:15.198]                     }
[18:05:15.198]                     invisible(muffled)
[18:05:15.198]                   }
[18:05:15.198]                   muffleCondition(cond)
[18:05:15.198]                 })
[18:05:15.198]             }))
[18:05:15.198]             future::FutureResult(value = ...future.value$value, 
[18:05:15.198]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.198]                   ...future.rng), globalenv = if (FALSE) 
[18:05:15.198]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:15.198]                     ...future.globalenv.names))
[18:05:15.198]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:15.198]         }, condition = base::local({
[18:05:15.198]             c <- base::c
[18:05:15.198]             inherits <- base::inherits
[18:05:15.198]             invokeRestart <- base::invokeRestart
[18:05:15.198]             length <- base::length
[18:05:15.198]             list <- base::list
[18:05:15.198]             seq.int <- base::seq.int
[18:05:15.198]             signalCondition <- base::signalCondition
[18:05:15.198]             sys.calls <- base::sys.calls
[18:05:15.198]             `[[` <- base::`[[`
[18:05:15.198]             `+` <- base::`+`
[18:05:15.198]             `<<-` <- base::`<<-`
[18:05:15.198]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:15.198]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:15.198]                   3L)]
[18:05:15.198]             }
[18:05:15.198]             function(cond) {
[18:05:15.198]                 is_error <- inherits(cond, "error")
[18:05:15.198]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:15.198]                   NULL)
[18:05:15.198]                 if (is_error) {
[18:05:15.198]                   sessionInformation <- function() {
[18:05:15.198]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:15.198]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:15.198]                       search = base::search(), system = base::Sys.info())
[18:05:15.198]                   }
[18:05:15.198]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.198]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:15.198]                     cond$call), session = sessionInformation(), 
[18:05:15.198]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:15.198]                   signalCondition(cond)
[18:05:15.198]                 }
[18:05:15.198]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:15.198]                 "immediateCondition"))) {
[18:05:15.198]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:15.198]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.198]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:15.198]                   if (TRUE && !signal) {
[18:05:15.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.198]                     {
[18:05:15.198]                       inherits <- base::inherits
[18:05:15.198]                       invokeRestart <- base::invokeRestart
[18:05:15.198]                       is.null <- base::is.null
[18:05:15.198]                       muffled <- FALSE
[18:05:15.198]                       if (inherits(cond, "message")) {
[18:05:15.198]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.198]                         if (muffled) 
[18:05:15.198]                           invokeRestart("muffleMessage")
[18:05:15.198]                       }
[18:05:15.198]                       else if (inherits(cond, "warning")) {
[18:05:15.198]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.198]                         if (muffled) 
[18:05:15.198]                           invokeRestart("muffleWarning")
[18:05:15.198]                       }
[18:05:15.198]                       else if (inherits(cond, "condition")) {
[18:05:15.198]                         if (!is.null(pattern)) {
[18:05:15.198]                           computeRestarts <- base::computeRestarts
[18:05:15.198]                           grepl <- base::grepl
[18:05:15.198]                           restarts <- computeRestarts(cond)
[18:05:15.198]                           for (restart in restarts) {
[18:05:15.198]                             name <- restart$name
[18:05:15.198]                             if (is.null(name)) 
[18:05:15.198]                               next
[18:05:15.198]                             if (!grepl(pattern, name)) 
[18:05:15.198]                               next
[18:05:15.198]                             invokeRestart(restart)
[18:05:15.198]                             muffled <- TRUE
[18:05:15.198]                             break
[18:05:15.198]                           }
[18:05:15.198]                         }
[18:05:15.198]                       }
[18:05:15.198]                       invisible(muffled)
[18:05:15.198]                     }
[18:05:15.198]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.198]                   }
[18:05:15.198]                 }
[18:05:15.198]                 else {
[18:05:15.198]                   if (TRUE) {
[18:05:15.198]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.198]                     {
[18:05:15.198]                       inherits <- base::inherits
[18:05:15.198]                       invokeRestart <- base::invokeRestart
[18:05:15.198]                       is.null <- base::is.null
[18:05:15.198]                       muffled <- FALSE
[18:05:15.198]                       if (inherits(cond, "message")) {
[18:05:15.198]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.198]                         if (muffled) 
[18:05:15.198]                           invokeRestart("muffleMessage")
[18:05:15.198]                       }
[18:05:15.198]                       else if (inherits(cond, "warning")) {
[18:05:15.198]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.198]                         if (muffled) 
[18:05:15.198]                           invokeRestart("muffleWarning")
[18:05:15.198]                       }
[18:05:15.198]                       else if (inherits(cond, "condition")) {
[18:05:15.198]                         if (!is.null(pattern)) {
[18:05:15.198]                           computeRestarts <- base::computeRestarts
[18:05:15.198]                           grepl <- base::grepl
[18:05:15.198]                           restarts <- computeRestarts(cond)
[18:05:15.198]                           for (restart in restarts) {
[18:05:15.198]                             name <- restart$name
[18:05:15.198]                             if (is.null(name)) 
[18:05:15.198]                               next
[18:05:15.198]                             if (!grepl(pattern, name)) 
[18:05:15.198]                               next
[18:05:15.198]                             invokeRestart(restart)
[18:05:15.198]                             muffled <- TRUE
[18:05:15.198]                             break
[18:05:15.198]                           }
[18:05:15.198]                         }
[18:05:15.198]                       }
[18:05:15.198]                       invisible(muffled)
[18:05:15.198]                     }
[18:05:15.198]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.198]                   }
[18:05:15.198]                 }
[18:05:15.198]             }
[18:05:15.198]         }))
[18:05:15.198]     }, error = function(ex) {
[18:05:15.198]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:15.198]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.198]                 ...future.rng), started = ...future.startTime, 
[18:05:15.198]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:15.198]             version = "1.8"), class = "FutureResult")
[18:05:15.198]     }, finally = {
[18:05:15.198]         if (!identical(...future.workdir, getwd())) 
[18:05:15.198]             setwd(...future.workdir)
[18:05:15.198]         {
[18:05:15.198]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:15.198]                 ...future.oldOptions$nwarnings <- NULL
[18:05:15.198]             }
[18:05:15.198]             base::options(...future.oldOptions)
[18:05:15.198]             if (.Platform$OS.type == "windows") {
[18:05:15.198]                 old_names <- names(...future.oldEnvVars)
[18:05:15.198]                 envs <- base::Sys.getenv()
[18:05:15.198]                 names <- names(envs)
[18:05:15.198]                 common <- intersect(names, old_names)
[18:05:15.198]                 added <- setdiff(names, old_names)
[18:05:15.198]                 removed <- setdiff(old_names, names)
[18:05:15.198]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:15.198]                   envs[common]]
[18:05:15.198]                 NAMES <- toupper(changed)
[18:05:15.198]                 args <- list()
[18:05:15.198]                 for (kk in seq_along(NAMES)) {
[18:05:15.198]                   name <- changed[[kk]]
[18:05:15.198]                   NAME <- NAMES[[kk]]
[18:05:15.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.198]                     next
[18:05:15.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.198]                 }
[18:05:15.198]                 NAMES <- toupper(added)
[18:05:15.198]                 for (kk in seq_along(NAMES)) {
[18:05:15.198]                   name <- added[[kk]]
[18:05:15.198]                   NAME <- NAMES[[kk]]
[18:05:15.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.198]                     next
[18:05:15.198]                   args[[name]] <- ""
[18:05:15.198]                 }
[18:05:15.198]                 NAMES <- toupper(removed)
[18:05:15.198]                 for (kk in seq_along(NAMES)) {
[18:05:15.198]                   name <- removed[[kk]]
[18:05:15.198]                   NAME <- NAMES[[kk]]
[18:05:15.198]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.198]                     next
[18:05:15.198]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.198]                 }
[18:05:15.198]                 if (length(args) > 0) 
[18:05:15.198]                   base::do.call(base::Sys.setenv, args = args)
[18:05:15.198]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:15.198]             }
[18:05:15.198]             else {
[18:05:15.198]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:15.198]             }
[18:05:15.198]             {
[18:05:15.198]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:15.198]                   0L) {
[18:05:15.198]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:15.198]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:15.198]                   base::options(opts)
[18:05:15.198]                 }
[18:05:15.198]                 {
[18:05:15.198]                   {
[18:05:15.198]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:15.198]                     NULL
[18:05:15.198]                   }
[18:05:15.198]                   options(future.plan = NULL)
[18:05:15.198]                   if (is.na(NA_character_)) 
[18:05:15.198]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.198]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:15.198]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:15.198]                     .init = FALSE)
[18:05:15.198]                 }
[18:05:15.198]             }
[18:05:15.198]         }
[18:05:15.198]     })
[18:05:15.198]     if (TRUE) {
[18:05:15.198]         base::sink(type = "output", split = FALSE)
[18:05:15.198]         if (TRUE) {
[18:05:15.198]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:15.198]         }
[18:05:15.198]         else {
[18:05:15.198]             ...future.result["stdout"] <- base::list(NULL)
[18:05:15.198]         }
[18:05:15.198]         base::close(...future.stdout)
[18:05:15.198]         ...future.stdout <- NULL
[18:05:15.198]     }
[18:05:15.198]     ...future.result$conditions <- ...future.conditions
[18:05:15.198]     ...future.result$finished <- base::Sys.time()
[18:05:15.198]     ...future.result
[18:05:15.198] }
[18:05:15.208] assign_globals() ...
[18:05:15.211] plan(): nbrOfWorkers() = 2
[18:05:15.208] List of 1
[18:05:15.208]  $ ii: int 3
[18:05:15.208]  - attr(*, "where")=List of 1
[18:05:15.208]   ..$ ii:<environment: R_EmptyEnv> 
[18:05:15.208]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:15.208]  - attr(*, "resolved")= logi FALSE
[18:05:15.208]  - attr(*, "total_size")= num 56
[18:05:15.216] - copied ‘ii’ to environment
[18:05:15.217] assign_globals() ... done
[18:05:15.217] requestCore(): workers = 2
[18:05:15.218] Poll #1 (0): usedCores() = 2, workers = 2
[18:05:15.230] result() for MulticoreFuture ...
[18:05:15.231] result() for MulticoreFuture ...
[18:05:15.232] result() for MulticoreFuture ... done
[18:05:15.232] result() for MulticoreFuture ... done
[18:05:15.232] result() for MulticoreFuture ...
[18:05:15.233] result() for MulticoreFuture ... done
[18:05:15.237] MulticoreFuture started
 - Creating multicore future #4 ...
[18:05:15.238] plan(): Setting new future strategy stack:
[18:05:15.239] List of future strategies:
[18:05:15.239] 1. sequential:
[18:05:15.239]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.239]    - tweaked: FALSE
[18:05:15.239]    - call: NULL
[18:05:15.241] plan(): nbrOfWorkers() = 1
[18:05:15.245] plan(): Setting new future strategy stack:
[18:05:15.246] List of future strategies:
[18:05:15.246] 1. multicore:
[18:05:15.246]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:15.246]    - tweaked: FALSE
[18:05:15.246]    - call: plan(multicore)
[18:05:15.247] getGlobalsAndPackages() ...
[18:05:15.247] Searching for globals...
[18:05:15.250] - globals found: [2] ‘{’, ‘ii’
[18:05:15.251] Searching for globals ... DONE
[18:05:15.251] Resolving globals: FALSE
[18:05:15.252] The total size of the 1 globals is 56 bytes (56 bytes)
[18:05:15.254] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (56 bytes of class ‘numeric’)
[18:05:15.254] plan(): nbrOfWorkers() = 2
[18:05:15.254] - globals: [1] ‘ii’
[18:05:15.254] 
[18:05:15.255] getGlobalsAndPackages() ... DONE
[18:05:15.256] Packages needed by the future expression (n = 0): <none>
[18:05:15.256] Packages needed by future strategies (n = 0): <none>
[18:05:15.258] {
[18:05:15.258]     {
[18:05:15.258]         {
[18:05:15.258]             ...future.startTime <- base::Sys.time()
[18:05:15.258]             {
[18:05:15.258]                 {
[18:05:15.258]                   {
[18:05:15.258]                     {
[18:05:15.258]                       base::local({
[18:05:15.258]                         has_future <- base::requireNamespace("future", 
[18:05:15.258]                           quietly = TRUE)
[18:05:15.258]                         if (has_future) {
[18:05:15.258]                           ns <- base::getNamespace("future")
[18:05:15.258]                           version <- ns[[".package"]][["version"]]
[18:05:15.258]                           if (is.null(version)) 
[18:05:15.258]                             version <- utils::packageVersion("future")
[18:05:15.258]                         }
[18:05:15.258]                         else {
[18:05:15.258]                           version <- NULL
[18:05:15.258]                         }
[18:05:15.258]                         if (!has_future || version < "1.8.0") {
[18:05:15.258]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:15.258]                             "", base::R.version$version.string), 
[18:05:15.258]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:15.258]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:15.258]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:15.258]                               "release", "version")], collapse = " "), 
[18:05:15.258]                             hostname = base::Sys.info()[["nodename"]])
[18:05:15.258]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:15.258]                             info)
[18:05:15.258]                           info <- base::paste(info, collapse = "; ")
[18:05:15.258]                           if (!has_future) {
[18:05:15.258]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:15.258]                               info)
[18:05:15.258]                           }
[18:05:15.258]                           else {
[18:05:15.258]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:15.258]                               info, version)
[18:05:15.258]                           }
[18:05:15.258]                           base::stop(msg)
[18:05:15.258]                         }
[18:05:15.258]                       })
[18:05:15.258]                     }
[18:05:15.258]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:15.258]                     base::options(mc.cores = 1L)
[18:05:15.258]                   }
[18:05:15.258]                   ...future.strategy.old <- future::plan("list")
[18:05:15.258]                   options(future.plan = NULL)
[18:05:15.258]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.258]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:15.258]                 }
[18:05:15.258]                 ...future.workdir <- getwd()
[18:05:15.258]             }
[18:05:15.258]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:15.258]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:15.258]         }
[18:05:15.258]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:15.258]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:15.258]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:15.258]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:15.258]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:15.258]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:15.258]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:15.258]             base::names(...future.oldOptions))
[18:05:15.258]     }
[18:05:15.258]     if (FALSE) {
[18:05:15.258]     }
[18:05:15.258]     else {
[18:05:15.258]         if (TRUE) {
[18:05:15.258]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:15.258]                 open = "w")
[18:05:15.258]         }
[18:05:15.258]         else {
[18:05:15.258]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:15.258]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:15.258]         }
[18:05:15.258]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:15.258]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:15.258]             base::sink(type = "output", split = FALSE)
[18:05:15.258]             base::close(...future.stdout)
[18:05:15.258]         }, add = TRUE)
[18:05:15.258]     }
[18:05:15.258]     ...future.frame <- base::sys.nframe()
[18:05:15.258]     ...future.conditions <- base::list()
[18:05:15.258]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:15.258]     if (FALSE) {
[18:05:15.258]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:15.258]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:15.258]     }
[18:05:15.258]     ...future.result <- base::tryCatch({
[18:05:15.258]         base::withCallingHandlers({
[18:05:15.258]             ...future.value <- base::withVisible(base::local({
[18:05:15.258]                 withCallingHandlers({
[18:05:15.258]                   {
[18:05:15.258]                     ii
[18:05:15.258]                   }
[18:05:15.258]                 }, immediateCondition = function(cond) {
[18:05:15.258]                   save_rds <- function (object, pathname, ...) 
[18:05:15.258]                   {
[18:05:15.258]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:15.258]                     if (file_test("-f", pathname_tmp)) {
[18:05:15.258]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.258]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:15.258]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.258]                         fi_tmp[["mtime"]])
[18:05:15.258]                     }
[18:05:15.258]                     tryCatch({
[18:05:15.258]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:15.258]                     }, error = function(ex) {
[18:05:15.258]                       msg <- conditionMessage(ex)
[18:05:15.258]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.258]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:15.258]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.258]                         fi_tmp[["mtime"]], msg)
[18:05:15.258]                       ex$message <- msg
[18:05:15.258]                       stop(ex)
[18:05:15.258]                     })
[18:05:15.258]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:15.258]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:15.258]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:15.258]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.258]                       fi <- file.info(pathname)
[18:05:15.258]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:15.258]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.258]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:15.258]                         fi[["size"]], fi[["mtime"]])
[18:05:15.258]                       stop(msg)
[18:05:15.258]                     }
[18:05:15.258]                     invisible(pathname)
[18:05:15.258]                   }
[18:05:15.258]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:15.258]                     rootPath = tempdir()) 
[18:05:15.258]                   {
[18:05:15.258]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:15.258]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:15.258]                       tmpdir = path, fileext = ".rds")
[18:05:15.258]                     save_rds(obj, file)
[18:05:15.258]                   }
[18:05:15.258]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:15.258]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.258]                   {
[18:05:15.258]                     inherits <- base::inherits
[18:05:15.258]                     invokeRestart <- base::invokeRestart
[18:05:15.258]                     is.null <- base::is.null
[18:05:15.258]                     muffled <- FALSE
[18:05:15.258]                     if (inherits(cond, "message")) {
[18:05:15.258]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:15.258]                       if (muffled) 
[18:05:15.258]                         invokeRestart("muffleMessage")
[18:05:15.258]                     }
[18:05:15.258]                     else if (inherits(cond, "warning")) {
[18:05:15.258]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:15.258]                       if (muffled) 
[18:05:15.258]                         invokeRestart("muffleWarning")
[18:05:15.258]                     }
[18:05:15.258]                     else if (inherits(cond, "condition")) {
[18:05:15.258]                       if (!is.null(pattern)) {
[18:05:15.258]                         computeRestarts <- base::computeRestarts
[18:05:15.258]                         grepl <- base::grepl
[18:05:15.258]                         restarts <- computeRestarts(cond)
[18:05:15.258]                         for (restart in restarts) {
[18:05:15.258]                           name <- restart$name
[18:05:15.258]                           if (is.null(name)) 
[18:05:15.258]                             next
[18:05:15.258]                           if (!grepl(pattern, name)) 
[18:05:15.258]                             next
[18:05:15.258]                           invokeRestart(restart)
[18:05:15.258]                           muffled <- TRUE
[18:05:15.258]                           break
[18:05:15.258]                         }
[18:05:15.258]                       }
[18:05:15.258]                     }
[18:05:15.258]                     invisible(muffled)
[18:05:15.258]                   }
[18:05:15.258]                   muffleCondition(cond)
[18:05:15.258]                 })
[18:05:15.258]             }))
[18:05:15.258]             future::FutureResult(value = ...future.value$value, 
[18:05:15.258]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.258]                   ...future.rng), globalenv = if (FALSE) 
[18:05:15.258]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:15.258]                     ...future.globalenv.names))
[18:05:15.258]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:15.258]         }, condition = base::local({
[18:05:15.258]             c <- base::c
[18:05:15.258]             inherits <- base::inherits
[18:05:15.258]             invokeRestart <- base::invokeRestart
[18:05:15.258]             length <- base::length
[18:05:15.258]             list <- base::list
[18:05:15.258]             seq.int <- base::seq.int
[18:05:15.258]             signalCondition <- base::signalCondition
[18:05:15.258]             sys.calls <- base::sys.calls
[18:05:15.258]             `[[` <- base::`[[`
[18:05:15.258]             `+` <- base::`+`
[18:05:15.258]             `<<-` <- base::`<<-`
[18:05:15.258]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:15.258]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:15.258]                   3L)]
[18:05:15.258]             }
[18:05:15.258]             function(cond) {
[18:05:15.258]                 is_error <- inherits(cond, "error")
[18:05:15.258]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:15.258]                   NULL)
[18:05:15.258]                 if (is_error) {
[18:05:15.258]                   sessionInformation <- function() {
[18:05:15.258]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:15.258]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:15.258]                       search = base::search(), system = base::Sys.info())
[18:05:15.258]                   }
[18:05:15.258]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.258]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:15.258]                     cond$call), session = sessionInformation(), 
[18:05:15.258]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:15.258]                   signalCondition(cond)
[18:05:15.258]                 }
[18:05:15.258]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:15.258]                 "immediateCondition"))) {
[18:05:15.258]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:15.258]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.258]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:15.258]                   if (TRUE && !signal) {
[18:05:15.258]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.258]                     {
[18:05:15.258]                       inherits <- base::inherits
[18:05:15.258]                       invokeRestart <- base::invokeRestart
[18:05:15.258]                       is.null <- base::is.null
[18:05:15.258]                       muffled <- FALSE
[18:05:15.258]                       if (inherits(cond, "message")) {
[18:05:15.258]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.258]                         if (muffled) 
[18:05:15.258]                           invokeRestart("muffleMessage")
[18:05:15.258]                       }
[18:05:15.258]                       else if (inherits(cond, "warning")) {
[18:05:15.258]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.258]                         if (muffled) 
[18:05:15.258]                           invokeRestart("muffleWarning")
[18:05:15.258]                       }
[18:05:15.258]                       else if (inherits(cond, "condition")) {
[18:05:15.258]                         if (!is.null(pattern)) {
[18:05:15.258]                           computeRestarts <- base::computeRestarts
[18:05:15.258]                           grepl <- base::grepl
[18:05:15.258]                           restarts <- computeRestarts(cond)
[18:05:15.258]                           for (restart in restarts) {
[18:05:15.258]                             name <- restart$name
[18:05:15.258]                             if (is.null(name)) 
[18:05:15.258]                               next
[18:05:15.258]                             if (!grepl(pattern, name)) 
[18:05:15.258]                               next
[18:05:15.258]                             invokeRestart(restart)
[18:05:15.258]                             muffled <- TRUE
[18:05:15.258]                             break
[18:05:15.258]                           }
[18:05:15.258]                         }
[18:05:15.258]                       }
[18:05:15.258]                       invisible(muffled)
[18:05:15.258]                     }
[18:05:15.258]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.258]                   }
[18:05:15.258]                 }
[18:05:15.258]                 else {
[18:05:15.258]                   if (TRUE) {
[18:05:15.258]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.258]                     {
[18:05:15.258]                       inherits <- base::inherits
[18:05:15.258]                       invokeRestart <- base::invokeRestart
[18:05:15.258]                       is.null <- base::is.null
[18:05:15.258]                       muffled <- FALSE
[18:05:15.258]                       if (inherits(cond, "message")) {
[18:05:15.258]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.258]                         if (muffled) 
[18:05:15.258]                           invokeRestart("muffleMessage")
[18:05:15.258]                       }
[18:05:15.258]                       else if (inherits(cond, "warning")) {
[18:05:15.258]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.258]                         if (muffled) 
[18:05:15.258]                           invokeRestart("muffleWarning")
[18:05:15.258]                       }
[18:05:15.258]                       else if (inherits(cond, "condition")) {
[18:05:15.258]                         if (!is.null(pattern)) {
[18:05:15.258]                           computeRestarts <- base::computeRestarts
[18:05:15.258]                           grepl <- base::grepl
[18:05:15.258]                           restarts <- computeRestarts(cond)
[18:05:15.258]                           for (restart in restarts) {
[18:05:15.258]                             name <- restart$name
[18:05:15.258]                             if (is.null(name)) 
[18:05:15.258]                               next
[18:05:15.258]                             if (!grepl(pattern, name)) 
[18:05:15.258]                               next
[18:05:15.258]                             invokeRestart(restart)
[18:05:15.258]                             muffled <- TRUE
[18:05:15.258]                             break
[18:05:15.258]                           }
[18:05:15.258]                         }
[18:05:15.258]                       }
[18:05:15.258]                       invisible(muffled)
[18:05:15.258]                     }
[18:05:15.258]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.258]                   }
[18:05:15.258]                 }
[18:05:15.258]             }
[18:05:15.258]         }))
[18:05:15.258]     }, error = function(ex) {
[18:05:15.258]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:15.258]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.258]                 ...future.rng), started = ...future.startTime, 
[18:05:15.258]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:15.258]             version = "1.8"), class = "FutureResult")
[18:05:15.258]     }, finally = {
[18:05:15.258]         if (!identical(...future.workdir, getwd())) 
[18:05:15.258]             setwd(...future.workdir)
[18:05:15.258]         {
[18:05:15.258]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:15.258]                 ...future.oldOptions$nwarnings <- NULL
[18:05:15.258]             }
[18:05:15.258]             base::options(...future.oldOptions)
[18:05:15.258]             if (.Platform$OS.type == "windows") {
[18:05:15.258]                 old_names <- names(...future.oldEnvVars)
[18:05:15.258]                 envs <- base::Sys.getenv()
[18:05:15.258]                 names <- names(envs)
[18:05:15.258]                 common <- intersect(names, old_names)
[18:05:15.258]                 added <- setdiff(names, old_names)
[18:05:15.258]                 removed <- setdiff(old_names, names)
[18:05:15.258]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:15.258]                   envs[common]]
[18:05:15.258]                 NAMES <- toupper(changed)
[18:05:15.258]                 args <- list()
[18:05:15.258]                 for (kk in seq_along(NAMES)) {
[18:05:15.258]                   name <- changed[[kk]]
[18:05:15.258]                   NAME <- NAMES[[kk]]
[18:05:15.258]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.258]                     next
[18:05:15.258]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.258]                 }
[18:05:15.258]                 NAMES <- toupper(added)
[18:05:15.258]                 for (kk in seq_along(NAMES)) {
[18:05:15.258]                   name <- added[[kk]]
[18:05:15.258]                   NAME <- NAMES[[kk]]
[18:05:15.258]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.258]                     next
[18:05:15.258]                   args[[name]] <- ""
[18:05:15.258]                 }
[18:05:15.258]                 NAMES <- toupper(removed)
[18:05:15.258]                 for (kk in seq_along(NAMES)) {
[18:05:15.258]                   name <- removed[[kk]]
[18:05:15.258]                   NAME <- NAMES[[kk]]
[18:05:15.258]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.258]                     next
[18:05:15.258]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.258]                 }
[18:05:15.258]                 if (length(args) > 0) 
[18:05:15.258]                   base::do.call(base::Sys.setenv, args = args)
[18:05:15.258]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:15.258]             }
[18:05:15.258]             else {
[18:05:15.258]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:15.258]             }
[18:05:15.258]             {
[18:05:15.258]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:15.258]                   0L) {
[18:05:15.258]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:15.258]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:15.258]                   base::options(opts)
[18:05:15.258]                 }
[18:05:15.258]                 {
[18:05:15.258]                   {
[18:05:15.258]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:15.258]                     NULL
[18:05:15.258]                   }
[18:05:15.258]                   options(future.plan = NULL)
[18:05:15.258]                   if (is.na(NA_character_)) 
[18:05:15.258]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.258]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:15.258]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:15.258]                     .init = FALSE)
[18:05:15.258]                 }
[18:05:15.258]             }
[18:05:15.258]         }
[18:05:15.258]     })
[18:05:15.258]     if (TRUE) {
[18:05:15.258]         base::sink(type = "output", split = FALSE)
[18:05:15.258]         if (TRUE) {
[18:05:15.258]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:15.258]         }
[18:05:15.258]         else {
[18:05:15.258]             ...future.result["stdout"] <- base::list(NULL)
[18:05:15.258]         }
[18:05:15.258]         base::close(...future.stdout)
[18:05:15.258]         ...future.stdout <- NULL
[18:05:15.258]     }
[18:05:15.258]     ...future.result$conditions <- ...future.conditions
[18:05:15.258]     ...future.result$finished <- base::Sys.time()
[18:05:15.258]     ...future.result
[18:05:15.258] }
[18:05:15.265] assign_globals() ...
[18:05:15.265] List of 1
[18:05:15.265]  $ ii: int 4
[18:05:15.265]  - attr(*, "where")=List of 1
[18:05:15.265]   ..$ ii:<environment: R_EmptyEnv> 
[18:05:15.265]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:15.265]  - attr(*, "resolved")= logi FALSE
[18:05:15.265]  - attr(*, "total_size")= num 56
[18:05:15.273] - copied ‘ii’ to environment
[18:05:15.273] assign_globals() ... done
[18:05:15.274] requestCore(): workers = 2
[18:05:15.275] Poll #1 (0): usedCores() = 2, workers = 2
[18:05:15.286] result() for MulticoreFuture ...
[18:05:15.290] result() for MulticoreFuture ...
[18:05:15.291] result() for MulticoreFuture ... done
[18:05:15.291] result() for MulticoreFuture ... done
[18:05:15.292] result() for MulticoreFuture ...
[18:05:15.292] result() for MulticoreFuture ... done
[18:05:15.297] MulticoreFuture started
 - Resolving 4 multicore futures
[18:05:15.299] result() for MulticoreFuture ...
[18:05:15.299] result() for MulticoreFuture ... done
[18:05:15.299] result() for MulticoreFuture ...
[18:05:15.300] result() for MulticoreFuture ... done
[18:05:15.300] result() for MulticoreFuture ...
[18:05:15.301] result() for MulticoreFuture ... done
[18:05:15.301] result() for MulticoreFuture ...
[18:05:15.301] plan(): Setting new future strategy stack:
[18:05:15.301] result() for MulticoreFuture ... done
[18:05:15.302] result() for MulticoreFuture ...
[18:05:15.305] result() for MulticoreFuture ...
[18:05:15.305] result() for MulticoreFuture ... done
[18:05:15.306] result() for MulticoreFuture ... done
[18:05:15.307] result() for MulticoreFuture ...
[18:05:15.301] List of future strategies:
[18:05:15.301] 1. sequential:
[18:05:15.301]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.301]    - tweaked: FALSE
[18:05:15.301]    - call: NULL
[18:05:15.307] result() for MulticoreFuture ... done
[18:05:15.308] plan(): nbrOfWorkers() = 1
[18:05:15.309] result() for MulticoreFuture ...
[18:05:15.313] plan(): Setting new future strategy stack:
[18:05:15.313] List of future strategies:
[18:05:15.313] 1. multicore:
[18:05:15.313]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:15.313]    - tweaked: FALSE
[18:05:15.313]    - call: plan(multicore)
[18:05:15.329] plan(): nbrOfWorkers() = 2
[18:05:15.331] result() for MulticoreFuture ...
[18:05:15.331] result() for MulticoreFuture ... done
[18:05:15.336] result() for MulticoreFuture ... done
[18:05:15.336] result() for MulticoreFuture ...
[18:05:15.337] result() for MulticoreFuture ... done
*** multicore(..., globals = TRUE) and errors
[18:05:15.344] getGlobalsAndPackages() ...
[18:05:15.345] Searching for globals...
[18:05:15.348] - globals found: [2] ‘{’, ‘stop’
[18:05:15.348] Searching for globals ... DONE
[18:05:15.348] Resolving globals: FALSE
[18:05:15.349] 
[18:05:15.349] 
[18:05:15.349] getGlobalsAndPackages() ... DONE
[18:05:15.350] Packages needed by the future expression (n = 0): <none>
[18:05:15.351] Packages needed by future strategies (n = 0): <none>
[18:05:15.352] {
[18:05:15.352]     {
[18:05:15.352]         {
[18:05:15.352]             ...future.startTime <- base::Sys.time()
[18:05:15.352]             {
[18:05:15.352]                 {
[18:05:15.352]                   {
[18:05:15.352]                     {
[18:05:15.352]                       base::local({
[18:05:15.352]                         has_future <- base::requireNamespace("future", 
[18:05:15.352]                           quietly = TRUE)
[18:05:15.352]                         if (has_future) {
[18:05:15.352]                           ns <- base::getNamespace("future")
[18:05:15.352]                           version <- ns[[".package"]][["version"]]
[18:05:15.352]                           if (is.null(version)) 
[18:05:15.352]                             version <- utils::packageVersion("future")
[18:05:15.352]                         }
[18:05:15.352]                         else {
[18:05:15.352]                           version <- NULL
[18:05:15.352]                         }
[18:05:15.352]                         if (!has_future || version < "1.8.0") {
[18:05:15.352]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:15.352]                             "", base::R.version$version.string), 
[18:05:15.352]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:15.352]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:15.352]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:15.352]                               "release", "version")], collapse = " "), 
[18:05:15.352]                             hostname = base::Sys.info()[["nodename"]])
[18:05:15.352]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:15.352]                             info)
[18:05:15.352]                           info <- base::paste(info, collapse = "; ")
[18:05:15.352]                           if (!has_future) {
[18:05:15.352]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:15.352]                               info)
[18:05:15.352]                           }
[18:05:15.352]                           else {
[18:05:15.352]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:15.352]                               info, version)
[18:05:15.352]                           }
[18:05:15.352]                           base::stop(msg)
[18:05:15.352]                         }
[18:05:15.352]                       })
[18:05:15.352]                     }
[18:05:15.352]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:15.352]                     base::options(mc.cores = 1L)
[18:05:15.352]                   }
[18:05:15.352]                   ...future.strategy.old <- future::plan("list")
[18:05:15.352]                   options(future.plan = NULL)
[18:05:15.352]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.352]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:15.352]                 }
[18:05:15.352]                 ...future.workdir <- getwd()
[18:05:15.352]             }
[18:05:15.352]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:15.352]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:15.352]         }
[18:05:15.352]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:15.352]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:15.352]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:15.352]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:15.352]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:15.352]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:15.352]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:15.352]             base::names(...future.oldOptions))
[18:05:15.352]     }
[18:05:15.352]     if (FALSE) {
[18:05:15.352]     }
[18:05:15.352]     else {
[18:05:15.352]         if (TRUE) {
[18:05:15.352]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:15.352]                 open = "w")
[18:05:15.352]         }
[18:05:15.352]         else {
[18:05:15.352]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:15.352]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:15.352]         }
[18:05:15.352]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:15.352]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:15.352]             base::sink(type = "output", split = FALSE)
[18:05:15.352]             base::close(...future.stdout)
[18:05:15.352]         }, add = TRUE)
[18:05:15.352]     }
[18:05:15.352]     ...future.frame <- base::sys.nframe()
[18:05:15.352]     ...future.conditions <- base::list()
[18:05:15.352]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:15.352]     if (FALSE) {
[18:05:15.352]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:15.352]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:15.352]     }
[18:05:15.352]     ...future.result <- base::tryCatch({
[18:05:15.352]         base::withCallingHandlers({
[18:05:15.352]             ...future.value <- base::withVisible(base::local({
[18:05:15.352]                 withCallingHandlers({
[18:05:15.352]                   {
[18:05:15.352]                     stop("Whoops!")
[18:05:15.352]                     1
[18:05:15.352]                   }
[18:05:15.352]                 }, immediateCondition = function(cond) {
[18:05:15.352]                   save_rds <- function (object, pathname, ...) 
[18:05:15.352]                   {
[18:05:15.352]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:15.352]                     if (file_test("-f", pathname_tmp)) {
[18:05:15.352]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.352]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:15.352]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.352]                         fi_tmp[["mtime"]])
[18:05:15.352]                     }
[18:05:15.352]                     tryCatch({
[18:05:15.352]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:15.352]                     }, error = function(ex) {
[18:05:15.352]                       msg <- conditionMessage(ex)
[18:05:15.352]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.352]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:15.352]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.352]                         fi_tmp[["mtime"]], msg)
[18:05:15.352]                       ex$message <- msg
[18:05:15.352]                       stop(ex)
[18:05:15.352]                     })
[18:05:15.352]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:15.352]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:15.352]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:15.352]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.352]                       fi <- file.info(pathname)
[18:05:15.352]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:15.352]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.352]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:15.352]                         fi[["size"]], fi[["mtime"]])
[18:05:15.352]                       stop(msg)
[18:05:15.352]                     }
[18:05:15.352]                     invisible(pathname)
[18:05:15.352]                   }
[18:05:15.352]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:15.352]                     rootPath = tempdir()) 
[18:05:15.352]                   {
[18:05:15.352]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:15.352]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:15.352]                       tmpdir = path, fileext = ".rds")
[18:05:15.352]                     save_rds(obj, file)
[18:05:15.352]                   }
[18:05:15.352]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:15.352]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.352]                   {
[18:05:15.352]                     inherits <- base::inherits
[18:05:15.352]                     invokeRestart <- base::invokeRestart
[18:05:15.352]                     is.null <- base::is.null
[18:05:15.352]                     muffled <- FALSE
[18:05:15.352]                     if (inherits(cond, "message")) {
[18:05:15.352]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:15.352]                       if (muffled) 
[18:05:15.352]                         invokeRestart("muffleMessage")
[18:05:15.352]                     }
[18:05:15.352]                     else if (inherits(cond, "warning")) {
[18:05:15.352]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:15.352]                       if (muffled) 
[18:05:15.352]                         invokeRestart("muffleWarning")
[18:05:15.352]                     }
[18:05:15.352]                     else if (inherits(cond, "condition")) {
[18:05:15.352]                       if (!is.null(pattern)) {
[18:05:15.352]                         computeRestarts <- base::computeRestarts
[18:05:15.352]                         grepl <- base::grepl
[18:05:15.352]                         restarts <- computeRestarts(cond)
[18:05:15.352]                         for (restart in restarts) {
[18:05:15.352]                           name <- restart$name
[18:05:15.352]                           if (is.null(name)) 
[18:05:15.352]                             next
[18:05:15.352]                           if (!grepl(pattern, name)) 
[18:05:15.352]                             next
[18:05:15.352]                           invokeRestart(restart)
[18:05:15.352]                           muffled <- TRUE
[18:05:15.352]                           break
[18:05:15.352]                         }
[18:05:15.352]                       }
[18:05:15.352]                     }
[18:05:15.352]                     invisible(muffled)
[18:05:15.352]                   }
[18:05:15.352]                   muffleCondition(cond)
[18:05:15.352]                 })
[18:05:15.352]             }))
[18:05:15.352]             future::FutureResult(value = ...future.value$value, 
[18:05:15.352]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.352]                   ...future.rng), globalenv = if (FALSE) 
[18:05:15.352]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:15.352]                     ...future.globalenv.names))
[18:05:15.352]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:15.352]         }, condition = base::local({
[18:05:15.352]             c <- base::c
[18:05:15.352]             inherits <- base::inherits
[18:05:15.352]             invokeRestart <- base::invokeRestart
[18:05:15.352]             length <- base::length
[18:05:15.352]             list <- base::list
[18:05:15.352]             seq.int <- base::seq.int
[18:05:15.352]             signalCondition <- base::signalCondition
[18:05:15.352]             sys.calls <- base::sys.calls
[18:05:15.352]             `[[` <- base::`[[`
[18:05:15.352]             `+` <- base::`+`
[18:05:15.352]             `<<-` <- base::`<<-`
[18:05:15.352]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:15.352]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:15.352]                   3L)]
[18:05:15.352]             }
[18:05:15.352]             function(cond) {
[18:05:15.352]                 is_error <- inherits(cond, "error")
[18:05:15.352]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:15.352]                   NULL)
[18:05:15.352]                 if (is_error) {
[18:05:15.352]                   sessionInformation <- function() {
[18:05:15.352]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:15.352]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:15.352]                       search = base::search(), system = base::Sys.info())
[18:05:15.352]                   }
[18:05:15.352]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.352]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:15.352]                     cond$call), session = sessionInformation(), 
[18:05:15.352]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:15.352]                   signalCondition(cond)
[18:05:15.352]                 }
[18:05:15.352]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:15.352]                 "immediateCondition"))) {
[18:05:15.352]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:15.352]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.352]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:15.352]                   if (TRUE && !signal) {
[18:05:15.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.352]                     {
[18:05:15.352]                       inherits <- base::inherits
[18:05:15.352]                       invokeRestart <- base::invokeRestart
[18:05:15.352]                       is.null <- base::is.null
[18:05:15.352]                       muffled <- FALSE
[18:05:15.352]                       if (inherits(cond, "message")) {
[18:05:15.352]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.352]                         if (muffled) 
[18:05:15.352]                           invokeRestart("muffleMessage")
[18:05:15.352]                       }
[18:05:15.352]                       else if (inherits(cond, "warning")) {
[18:05:15.352]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.352]                         if (muffled) 
[18:05:15.352]                           invokeRestart("muffleWarning")
[18:05:15.352]                       }
[18:05:15.352]                       else if (inherits(cond, "condition")) {
[18:05:15.352]                         if (!is.null(pattern)) {
[18:05:15.352]                           computeRestarts <- base::computeRestarts
[18:05:15.352]                           grepl <- base::grepl
[18:05:15.352]                           restarts <- computeRestarts(cond)
[18:05:15.352]                           for (restart in restarts) {
[18:05:15.352]                             name <- restart$name
[18:05:15.352]                             if (is.null(name)) 
[18:05:15.352]                               next
[18:05:15.352]                             if (!grepl(pattern, name)) 
[18:05:15.352]                               next
[18:05:15.352]                             invokeRestart(restart)
[18:05:15.352]                             muffled <- TRUE
[18:05:15.352]                             break
[18:05:15.352]                           }
[18:05:15.352]                         }
[18:05:15.352]                       }
[18:05:15.352]                       invisible(muffled)
[18:05:15.352]                     }
[18:05:15.352]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.352]                   }
[18:05:15.352]                 }
[18:05:15.352]                 else {
[18:05:15.352]                   if (TRUE) {
[18:05:15.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.352]                     {
[18:05:15.352]                       inherits <- base::inherits
[18:05:15.352]                       invokeRestart <- base::invokeRestart
[18:05:15.352]                       is.null <- base::is.null
[18:05:15.352]                       muffled <- FALSE
[18:05:15.352]                       if (inherits(cond, "message")) {
[18:05:15.352]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.352]                         if (muffled) 
[18:05:15.352]                           invokeRestart("muffleMessage")
[18:05:15.352]                       }
[18:05:15.352]                       else if (inherits(cond, "warning")) {
[18:05:15.352]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.352]                         if (muffled) 
[18:05:15.352]                           invokeRestart("muffleWarning")
[18:05:15.352]                       }
[18:05:15.352]                       else if (inherits(cond, "condition")) {
[18:05:15.352]                         if (!is.null(pattern)) {
[18:05:15.352]                           computeRestarts <- base::computeRestarts
[18:05:15.352]                           grepl <- base::grepl
[18:05:15.352]                           restarts <- computeRestarts(cond)
[18:05:15.352]                           for (restart in restarts) {
[18:05:15.352]                             name <- restart$name
[18:05:15.352]                             if (is.null(name)) 
[18:05:15.352]                               next
[18:05:15.352]                             if (!grepl(pattern, name)) 
[18:05:15.352]                               next
[18:05:15.352]                             invokeRestart(restart)
[18:05:15.352]                             muffled <- TRUE
[18:05:15.352]                             break
[18:05:15.352]                           }
[18:05:15.352]                         }
[18:05:15.352]                       }
[18:05:15.352]                       invisible(muffled)
[18:05:15.352]                     }
[18:05:15.352]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.352]                   }
[18:05:15.352]                 }
[18:05:15.352]             }
[18:05:15.352]         }))
[18:05:15.352]     }, error = function(ex) {
[18:05:15.352]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:15.352]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.352]                 ...future.rng), started = ...future.startTime, 
[18:05:15.352]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:15.352]             version = "1.8"), class = "FutureResult")
[18:05:15.352]     }, finally = {
[18:05:15.352]         if (!identical(...future.workdir, getwd())) 
[18:05:15.352]             setwd(...future.workdir)
[18:05:15.352]         {
[18:05:15.352]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:15.352]                 ...future.oldOptions$nwarnings <- NULL
[18:05:15.352]             }
[18:05:15.352]             base::options(...future.oldOptions)
[18:05:15.352]             if (.Platform$OS.type == "windows") {
[18:05:15.352]                 old_names <- names(...future.oldEnvVars)
[18:05:15.352]                 envs <- base::Sys.getenv()
[18:05:15.352]                 names <- names(envs)
[18:05:15.352]                 common <- intersect(names, old_names)
[18:05:15.352]                 added <- setdiff(names, old_names)
[18:05:15.352]                 removed <- setdiff(old_names, names)
[18:05:15.352]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:15.352]                   envs[common]]
[18:05:15.352]                 NAMES <- toupper(changed)
[18:05:15.352]                 args <- list()
[18:05:15.352]                 for (kk in seq_along(NAMES)) {
[18:05:15.352]                   name <- changed[[kk]]
[18:05:15.352]                   NAME <- NAMES[[kk]]
[18:05:15.352]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.352]                     next
[18:05:15.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.352]                 }
[18:05:15.352]                 NAMES <- toupper(added)
[18:05:15.352]                 for (kk in seq_along(NAMES)) {
[18:05:15.352]                   name <- added[[kk]]
[18:05:15.352]                   NAME <- NAMES[[kk]]
[18:05:15.352]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.352]                     next
[18:05:15.352]                   args[[name]] <- ""
[18:05:15.352]                 }
[18:05:15.352]                 NAMES <- toupper(removed)
[18:05:15.352]                 for (kk in seq_along(NAMES)) {
[18:05:15.352]                   name <- removed[[kk]]
[18:05:15.352]                   NAME <- NAMES[[kk]]
[18:05:15.352]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.352]                     next
[18:05:15.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.352]                 }
[18:05:15.352]                 if (length(args) > 0) 
[18:05:15.352]                   base::do.call(base::Sys.setenv, args = args)
[18:05:15.352]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:15.352]             }
[18:05:15.352]             else {
[18:05:15.352]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:15.352]             }
[18:05:15.352]             {
[18:05:15.352]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:15.352]                   0L) {
[18:05:15.352]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:15.352]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:15.352]                   base::options(opts)
[18:05:15.352]                 }
[18:05:15.352]                 {
[18:05:15.352]                   {
[18:05:15.352]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:15.352]                     NULL
[18:05:15.352]                   }
[18:05:15.352]                   options(future.plan = NULL)
[18:05:15.352]                   if (is.na(NA_character_)) 
[18:05:15.352]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.352]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:15.352]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:15.352]                     .init = FALSE)
[18:05:15.352]                 }
[18:05:15.352]             }
[18:05:15.352]         }
[18:05:15.352]     })
[18:05:15.352]     if (TRUE) {
[18:05:15.352]         base::sink(type = "output", split = FALSE)
[18:05:15.352]         if (TRUE) {
[18:05:15.352]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:15.352]         }
[18:05:15.352]         else {
[18:05:15.352]             ...future.result["stdout"] <- base::list(NULL)
[18:05:15.352]         }
[18:05:15.352]         base::close(...future.stdout)
[18:05:15.352]         ...future.stdout <- NULL
[18:05:15.352]     }
[18:05:15.352]     ...future.result$conditions <- ...future.conditions
[18:05:15.352]     ...future.result$finished <- base::Sys.time()
[18:05:15.352]     ...future.result
[18:05:15.352] }
[18:05:15.356] requestCore(): workers = 2
[18:05:15.360] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:05:15.362] plan(): Setting new future strategy stack:
[18:05:15.362] List of future strategies:
[18:05:15.362] 1. sequential:
[18:05:15.362]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.362]    - tweaked: FALSE
[18:05:15.362]    - call: NULL
[18:05:15.365] plan(): nbrOfWorkers() = 1
[18:05:15.370] plan(): Setting new future strategy stack:
[18:05:15.370] List of future strategies:
[18:05:15.370] 1. multicore:
[18:05:15.370]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:15.370]    - tweaked: FALSE
[18:05:15.370]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:15.374] result() for MulticoreFuture ...
[18:05:15.384] plan(): nbrOfWorkers() = 2
[18:05:15.393] result() for MulticoreFuture ...
[18:05:15.393] result() for MulticoreFuture ... done
[18:05:15.394] signalConditions() ...
[18:05:15.394]  - include = ‘immediateCondition’
[18:05:15.394]  - exclude = 
[18:05:15.395]  - resignal = FALSE
[18:05:15.395]  - Number of conditions: 1
[18:05:15.395] signalConditions() ... done
[18:05:15.395] result() for MulticoreFuture ... done
[18:05:15.395] result() for MulticoreFuture ...
[18:05:15.396] result() for MulticoreFuture ... done
[18:05:15.396] signalConditions() ...
[18:05:15.396]  - include = ‘immediateCondition’
[18:05:15.396]  - exclude = 
[18:05:15.397]  - resignal = FALSE
[18:05:15.397]  - Number of conditions: 1
[18:05:15.397] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[18:05:15.398] result() for MulticoreFuture ...
[18:05:15.399] result() for MulticoreFuture ... done
[18:05:15.399] result() for MulticoreFuture ...
[18:05:15.399] result() for MulticoreFuture ... done
[18:05:15.399] signalConditions() ...
[18:05:15.400]  - include = ‘immediateCondition’
[18:05:15.400]  - exclude = 
[18:05:15.400]  - resignal = FALSE
[18:05:15.400]  - Number of conditions: 1
[18:05:15.400] signalConditions() ... done
[18:05:15.401] Future state: ‘finished’
[18:05:15.401] result() for MulticoreFuture ...
[18:05:15.401] result() for MulticoreFuture ... done
[18:05:15.401] signalConditions() ...
[18:05:15.402]  - include = ‘condition’
[18:05:15.402]  - exclude = ‘immediateCondition’
[18:05:15.402]  - resignal = TRUE
[18:05:15.402]  - Number of conditions: 1
[18:05:15.403]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:05:15.403] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[18:05:15.404] result() for MulticoreFuture ...
[18:05:15.405] result() for MulticoreFuture ... done
[18:05:15.405] result() for MulticoreFuture ...
[18:05:15.405] result() for MulticoreFuture ... done
[18:05:15.405] signalConditions() ...
[18:05:15.406]  - include = ‘immediateCondition’
[18:05:15.406]  - exclude = 
[18:05:15.406]  - resignal = FALSE
[18:05:15.406]  - Number of conditions: 1
[18:05:15.406] signalConditions() ... done
[18:05:15.407] Future state: ‘finished’
[18:05:15.407] result() for MulticoreFuture ...
[18:05:15.407] result() for MulticoreFuture ... done
[18:05:15.407] signalConditions() ...
[18:05:15.408]  - include = ‘condition’
[18:05:15.408]  - exclude = ‘immediateCondition’
[18:05:15.408]  - resignal = TRUE
[18:05:15.408]  - Number of conditions: 1
[18:05:15.408]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[18:05:15.409] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[18:05:15.417] getGlobalsAndPackages() ...
[18:05:15.417] 
[18:05:15.417] - globals: [0] <none>
[18:05:15.418] getGlobalsAndPackages() ... DONE
[18:05:15.419] Packages needed by the future expression (n = 0): <none>
[18:05:15.419] Packages needed by future strategies (n = 0): <none>
[18:05:15.420] {
[18:05:15.420]     {
[18:05:15.420]         {
[18:05:15.420]             ...future.startTime <- base::Sys.time()
[18:05:15.420]             {
[18:05:15.420]                 {
[18:05:15.420]                   {
[18:05:15.420]                     {
[18:05:15.420]                       base::local({
[18:05:15.420]                         has_future <- base::requireNamespace("future", 
[18:05:15.420]                           quietly = TRUE)
[18:05:15.420]                         if (has_future) {
[18:05:15.420]                           ns <- base::getNamespace("future")
[18:05:15.420]                           version <- ns[[".package"]][["version"]]
[18:05:15.420]                           if (is.null(version)) 
[18:05:15.420]                             version <- utils::packageVersion("future")
[18:05:15.420]                         }
[18:05:15.420]                         else {
[18:05:15.420]                           version <- NULL
[18:05:15.420]                         }
[18:05:15.420]                         if (!has_future || version < "1.8.0") {
[18:05:15.420]                           info <- base::c(r_version = base::gsub("R version ", 
[18:05:15.420]                             "", base::R.version$version.string), 
[18:05:15.420]                             platform = base::sprintf("%s (%s-bit)", 
[18:05:15.420]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:15.420]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:15.420]                               "release", "version")], collapse = " "), 
[18:05:15.420]                             hostname = base::Sys.info()[["nodename"]])
[18:05:15.420]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:05:15.420]                             info)
[18:05:15.420]                           info <- base::paste(info, collapse = "; ")
[18:05:15.420]                           if (!has_future) {
[18:05:15.420]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:15.420]                               info)
[18:05:15.420]                           }
[18:05:15.420]                           else {
[18:05:15.420]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:15.420]                               info, version)
[18:05:15.420]                           }
[18:05:15.420]                           base::stop(msg)
[18:05:15.420]                         }
[18:05:15.420]                       })
[18:05:15.420]                     }
[18:05:15.420]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:05:15.420]                     base::options(mc.cores = 1L)
[18:05:15.420]                   }
[18:05:15.420]                   ...future.strategy.old <- future::plan("list")
[18:05:15.420]                   options(future.plan = NULL)
[18:05:15.420]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.420]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:15.420]                 }
[18:05:15.420]                 ...future.workdir <- getwd()
[18:05:15.420]             }
[18:05:15.420]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:15.420]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:15.420]         }
[18:05:15.420]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:15.420]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:15.420]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:15.420]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:15.420]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:15.420]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:15.420]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:15.420]             base::names(...future.oldOptions))
[18:05:15.420]     }
[18:05:15.420]     if (FALSE) {
[18:05:15.420]     }
[18:05:15.420]     else {
[18:05:15.420]         if (TRUE) {
[18:05:15.420]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:15.420]                 open = "w")
[18:05:15.420]         }
[18:05:15.420]         else {
[18:05:15.420]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:15.420]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:15.420]         }
[18:05:15.420]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:15.420]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:15.420]             base::sink(type = "output", split = FALSE)
[18:05:15.420]             base::close(...future.stdout)
[18:05:15.420]         }, add = TRUE)
[18:05:15.420]     }
[18:05:15.420]     ...future.frame <- base::sys.nframe()
[18:05:15.420]     ...future.conditions <- base::list()
[18:05:15.420]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:15.420]     if (FALSE) {
[18:05:15.420]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:15.420]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:15.420]     }
[18:05:15.420]     ...future.result <- base::tryCatch({
[18:05:15.420]         base::withCallingHandlers({
[18:05:15.420]             ...future.value <- base::withVisible(base::local({
[18:05:15.420]                 withCallingHandlers({
[18:05:15.420]                   {
[18:05:15.420]                     stop(structure(list(message = "boom"), class = c("MyError", 
[18:05:15.420]                       "error", "condition")))
[18:05:15.420]                   }
[18:05:15.420]                 }, immediateCondition = function(cond) {
[18:05:15.420]                   save_rds <- function (object, pathname, ...) 
[18:05:15.420]                   {
[18:05:15.420]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:05:15.420]                     if (file_test("-f", pathname_tmp)) {
[18:05:15.420]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.420]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:05:15.420]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.420]                         fi_tmp[["mtime"]])
[18:05:15.420]                     }
[18:05:15.420]                     tryCatch({
[18:05:15.420]                       saveRDS(object, file = pathname_tmp, ...)
[18:05:15.420]                     }, error = function(ex) {
[18:05:15.420]                       msg <- conditionMessage(ex)
[18:05:15.420]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.420]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:05:15.420]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.420]                         fi_tmp[["mtime"]], msg)
[18:05:15.420]                       ex$message <- msg
[18:05:15.420]                       stop(ex)
[18:05:15.420]                     })
[18:05:15.420]                     stopifnot(file_test("-f", pathname_tmp))
[18:05:15.420]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:05:15.420]                     if (!res || file_test("-f", pathname_tmp)) {
[18:05:15.420]                       fi_tmp <- file.info(pathname_tmp)
[18:05:15.420]                       fi <- file.info(pathname)
[18:05:15.420]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:05:15.420]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:05:15.420]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:05:15.420]                         fi[["size"]], fi[["mtime"]])
[18:05:15.420]                       stop(msg)
[18:05:15.420]                     }
[18:05:15.420]                     invisible(pathname)
[18:05:15.420]                   }
[18:05:15.420]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:05:15.420]                     rootPath = tempdir()) 
[18:05:15.420]                   {
[18:05:15.420]                     obj <- list(time = Sys.time(), condition = cond)
[18:05:15.420]                     file <- tempfile(pattern = class(cond)[1], 
[18:05:15.420]                       tmpdir = path, fileext = ".rds")
[18:05:15.420]                     save_rds(obj, file)
[18:05:15.420]                   }
[18:05:15.420]                   saveImmediateCondition(cond, path = "/tmp/RtmpM2tIMu/.future/immediateConditions")
[18:05:15.420]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.420]                   {
[18:05:15.420]                     inherits <- base::inherits
[18:05:15.420]                     invokeRestart <- base::invokeRestart
[18:05:15.420]                     is.null <- base::is.null
[18:05:15.420]                     muffled <- FALSE
[18:05:15.420]                     if (inherits(cond, "message")) {
[18:05:15.420]                       muffled <- grepl(pattern, "muffleMessage")
[18:05:15.420]                       if (muffled) 
[18:05:15.420]                         invokeRestart("muffleMessage")
[18:05:15.420]                     }
[18:05:15.420]                     else if (inherits(cond, "warning")) {
[18:05:15.420]                       muffled <- grepl(pattern, "muffleWarning")
[18:05:15.420]                       if (muffled) 
[18:05:15.420]                         invokeRestart("muffleWarning")
[18:05:15.420]                     }
[18:05:15.420]                     else if (inherits(cond, "condition")) {
[18:05:15.420]                       if (!is.null(pattern)) {
[18:05:15.420]                         computeRestarts <- base::computeRestarts
[18:05:15.420]                         grepl <- base::grepl
[18:05:15.420]                         restarts <- computeRestarts(cond)
[18:05:15.420]                         for (restart in restarts) {
[18:05:15.420]                           name <- restart$name
[18:05:15.420]                           if (is.null(name)) 
[18:05:15.420]                             next
[18:05:15.420]                           if (!grepl(pattern, name)) 
[18:05:15.420]                             next
[18:05:15.420]                           invokeRestart(restart)
[18:05:15.420]                           muffled <- TRUE
[18:05:15.420]                           break
[18:05:15.420]                         }
[18:05:15.420]                       }
[18:05:15.420]                     }
[18:05:15.420]                     invisible(muffled)
[18:05:15.420]                   }
[18:05:15.420]                   muffleCondition(cond)
[18:05:15.420]                 })
[18:05:15.420]             }))
[18:05:15.420]             future::FutureResult(value = ...future.value$value, 
[18:05:15.420]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.420]                   ...future.rng), globalenv = if (FALSE) 
[18:05:15.420]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:15.420]                     ...future.globalenv.names))
[18:05:15.420]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:15.420]         }, condition = base::local({
[18:05:15.420]             c <- base::c
[18:05:15.420]             inherits <- base::inherits
[18:05:15.420]             invokeRestart <- base::invokeRestart
[18:05:15.420]             length <- base::length
[18:05:15.420]             list <- base::list
[18:05:15.420]             seq.int <- base::seq.int
[18:05:15.420]             signalCondition <- base::signalCondition
[18:05:15.420]             sys.calls <- base::sys.calls
[18:05:15.420]             `[[` <- base::`[[`
[18:05:15.420]             `+` <- base::`+`
[18:05:15.420]             `<<-` <- base::`<<-`
[18:05:15.420]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:15.420]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:15.420]                   3L)]
[18:05:15.420]             }
[18:05:15.420]             function(cond) {
[18:05:15.420]                 is_error <- inherits(cond, "error")
[18:05:15.420]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:15.420]                   NULL)
[18:05:15.420]                 if (is_error) {
[18:05:15.420]                   sessionInformation <- function() {
[18:05:15.420]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:15.420]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:15.420]                       search = base::search(), system = base::Sys.info())
[18:05:15.420]                   }
[18:05:15.420]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.420]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:15.420]                     cond$call), session = sessionInformation(), 
[18:05:15.420]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:15.420]                   signalCondition(cond)
[18:05:15.420]                 }
[18:05:15.420]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:15.420]                 "immediateCondition"))) {
[18:05:15.420]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:15.420]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.420]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:15.420]                   if (TRUE && !signal) {
[18:05:15.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.420]                     {
[18:05:15.420]                       inherits <- base::inherits
[18:05:15.420]                       invokeRestart <- base::invokeRestart
[18:05:15.420]                       is.null <- base::is.null
[18:05:15.420]                       muffled <- FALSE
[18:05:15.420]                       if (inherits(cond, "message")) {
[18:05:15.420]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.420]                         if (muffled) 
[18:05:15.420]                           invokeRestart("muffleMessage")
[18:05:15.420]                       }
[18:05:15.420]                       else if (inherits(cond, "warning")) {
[18:05:15.420]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.420]                         if (muffled) 
[18:05:15.420]                           invokeRestart("muffleWarning")
[18:05:15.420]                       }
[18:05:15.420]                       else if (inherits(cond, "condition")) {
[18:05:15.420]                         if (!is.null(pattern)) {
[18:05:15.420]                           computeRestarts <- base::computeRestarts
[18:05:15.420]                           grepl <- base::grepl
[18:05:15.420]                           restarts <- computeRestarts(cond)
[18:05:15.420]                           for (restart in restarts) {
[18:05:15.420]                             name <- restart$name
[18:05:15.420]                             if (is.null(name)) 
[18:05:15.420]                               next
[18:05:15.420]                             if (!grepl(pattern, name)) 
[18:05:15.420]                               next
[18:05:15.420]                             invokeRestart(restart)
[18:05:15.420]                             muffled <- TRUE
[18:05:15.420]                             break
[18:05:15.420]                           }
[18:05:15.420]                         }
[18:05:15.420]                       }
[18:05:15.420]                       invisible(muffled)
[18:05:15.420]                     }
[18:05:15.420]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.420]                   }
[18:05:15.420]                 }
[18:05:15.420]                 else {
[18:05:15.420]                   if (TRUE) {
[18:05:15.420]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.420]                     {
[18:05:15.420]                       inherits <- base::inherits
[18:05:15.420]                       invokeRestart <- base::invokeRestart
[18:05:15.420]                       is.null <- base::is.null
[18:05:15.420]                       muffled <- FALSE
[18:05:15.420]                       if (inherits(cond, "message")) {
[18:05:15.420]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.420]                         if (muffled) 
[18:05:15.420]                           invokeRestart("muffleMessage")
[18:05:15.420]                       }
[18:05:15.420]                       else if (inherits(cond, "warning")) {
[18:05:15.420]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.420]                         if (muffled) 
[18:05:15.420]                           invokeRestart("muffleWarning")
[18:05:15.420]                       }
[18:05:15.420]                       else if (inherits(cond, "condition")) {
[18:05:15.420]                         if (!is.null(pattern)) {
[18:05:15.420]                           computeRestarts <- base::computeRestarts
[18:05:15.420]                           grepl <- base::grepl
[18:05:15.420]                           restarts <- computeRestarts(cond)
[18:05:15.420]                           for (restart in restarts) {
[18:05:15.420]                             name <- restart$name
[18:05:15.420]                             if (is.null(name)) 
[18:05:15.420]                               next
[18:05:15.420]                             if (!grepl(pattern, name)) 
[18:05:15.420]                               next
[18:05:15.420]                             invokeRestart(restart)
[18:05:15.420]                             muffled <- TRUE
[18:05:15.420]                             break
[18:05:15.420]                           }
[18:05:15.420]                         }
[18:05:15.420]                       }
[18:05:15.420]                       invisible(muffled)
[18:05:15.420]                     }
[18:05:15.420]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.420]                   }
[18:05:15.420]                 }
[18:05:15.420]             }
[18:05:15.420]         }))
[18:05:15.420]     }, error = function(ex) {
[18:05:15.420]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:15.420]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.420]                 ...future.rng), started = ...future.startTime, 
[18:05:15.420]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:15.420]             version = "1.8"), class = "FutureResult")
[18:05:15.420]     }, finally = {
[18:05:15.420]         if (!identical(...future.workdir, getwd())) 
[18:05:15.420]             setwd(...future.workdir)
[18:05:15.420]         {
[18:05:15.420]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:15.420]                 ...future.oldOptions$nwarnings <- NULL
[18:05:15.420]             }
[18:05:15.420]             base::options(...future.oldOptions)
[18:05:15.420]             if (.Platform$OS.type == "windows") {
[18:05:15.420]                 old_names <- names(...future.oldEnvVars)
[18:05:15.420]                 envs <- base::Sys.getenv()
[18:05:15.420]                 names <- names(envs)
[18:05:15.420]                 common <- intersect(names, old_names)
[18:05:15.420]                 added <- setdiff(names, old_names)
[18:05:15.420]                 removed <- setdiff(old_names, names)
[18:05:15.420]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:15.420]                   envs[common]]
[18:05:15.420]                 NAMES <- toupper(changed)
[18:05:15.420]                 args <- list()
[18:05:15.420]                 for (kk in seq_along(NAMES)) {
[18:05:15.420]                   name <- changed[[kk]]
[18:05:15.420]                   NAME <- NAMES[[kk]]
[18:05:15.420]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.420]                     next
[18:05:15.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.420]                 }
[18:05:15.420]                 NAMES <- toupper(added)
[18:05:15.420]                 for (kk in seq_along(NAMES)) {
[18:05:15.420]                   name <- added[[kk]]
[18:05:15.420]                   NAME <- NAMES[[kk]]
[18:05:15.420]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.420]                     next
[18:05:15.420]                   args[[name]] <- ""
[18:05:15.420]                 }
[18:05:15.420]                 NAMES <- toupper(removed)
[18:05:15.420]                 for (kk in seq_along(NAMES)) {
[18:05:15.420]                   name <- removed[[kk]]
[18:05:15.420]                   NAME <- NAMES[[kk]]
[18:05:15.420]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.420]                     next
[18:05:15.420]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.420]                 }
[18:05:15.420]                 if (length(args) > 0) 
[18:05:15.420]                   base::do.call(base::Sys.setenv, args = args)
[18:05:15.420]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:15.420]             }
[18:05:15.420]             else {
[18:05:15.420]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:15.420]             }
[18:05:15.420]             {
[18:05:15.420]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:15.420]                   0L) {
[18:05:15.420]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:15.420]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:15.420]                   base::options(opts)
[18:05:15.420]                 }
[18:05:15.420]                 {
[18:05:15.420]                   {
[18:05:15.420]                     base::options(mc.cores = ...future.mc.cores.old)
[18:05:15.420]                     NULL
[18:05:15.420]                   }
[18:05:15.420]                   options(future.plan = NULL)
[18:05:15.420]                   if (is.na(NA_character_)) 
[18:05:15.420]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.420]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:15.420]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:15.420]                     .init = FALSE)
[18:05:15.420]                 }
[18:05:15.420]             }
[18:05:15.420]         }
[18:05:15.420]     })
[18:05:15.420]     if (TRUE) {
[18:05:15.420]         base::sink(type = "output", split = FALSE)
[18:05:15.420]         if (TRUE) {
[18:05:15.420]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:15.420]         }
[18:05:15.420]         else {
[18:05:15.420]             ...future.result["stdout"] <- base::list(NULL)
[18:05:15.420]         }
[18:05:15.420]         base::close(...future.stdout)
[18:05:15.420]         ...future.stdout <- NULL
[18:05:15.420]     }
[18:05:15.420]     ...future.result$conditions <- ...future.conditions
[18:05:15.420]     ...future.result$finished <- base::Sys.time()
[18:05:15.420]     ...future.result
[18:05:15.420] }
[18:05:15.425] requestCore(): workers = 2
[18:05:15.428] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:05:15.430] plan(): Setting new future strategy stack:
[18:05:15.431] List of future strategies:
[18:05:15.431] 1. sequential:
[18:05:15.431]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.431]    - tweaked: FALSE
[18:05:15.431]    - call: NULL
[18:05:15.433] plan(): nbrOfWorkers() = 1
[18:05:15.438] plan(): Setting new future strategy stack:
[18:05:15.438] List of future strategies:
[18:05:15.438] 1. multicore:
[18:05:15.438]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:15.438]    - tweaked: FALSE
[18:05:15.438]    - call: plan(multicore)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: df7b59b8-61cc-7315-8087-a44d581dc20b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:05:15.441] result() for MulticoreFuture ...
[18:05:15.447] plan(): nbrOfWorkers() = 2
[18:05:15.454] result() for MulticoreFuture ...
[18:05:15.454] result() for MulticoreFuture ... done
[18:05:15.455] signalConditions() ...
[18:05:15.455]  - include = ‘immediateCondition’
[18:05:15.455]  - exclude = 
[18:05:15.455]  - resignal = FALSE
[18:05:15.456]  - Number of conditions: 1
[18:05:15.456] signalConditions() ... done
[18:05:15.456] result() for MulticoreFuture ... done
[18:05:15.456] result() for MulticoreFuture ...
[18:05:15.457] result() for MulticoreFuture ... done
[18:05:15.457] signalConditions() ...
[18:05:15.457]  - include = ‘immediateCondition’
[18:05:15.457]  - exclude = 
[18:05:15.458]  - resignal = FALSE
[18:05:15.458]  - Number of conditions: 1
[18:05:15.458] signalConditions() ... done
<MyError: boom>
[18:05:15.458] result() for MulticoreFuture ...
[18:05:15.459] result() for MulticoreFuture ... done
[18:05:15.459] result() for MulticoreFuture ...
[18:05:15.459] result() for MulticoreFuture ... done
[18:05:15.459] signalConditions() ...
[18:05:15.460]  - include = ‘immediateCondition’
[18:05:15.460]  - exclude = 
[18:05:15.460]  - resignal = FALSE
[18:05:15.460]  - Number of conditions: 1
[18:05:15.460] signalConditions() ... done
[18:05:15.461] Future state: ‘finished’
[18:05:15.461] result() for MulticoreFuture ...
[18:05:15.461] result() for MulticoreFuture ... done
[18:05:15.461] signalConditions() ...
[18:05:15.462]  - include = ‘condition’
[18:05:15.462]  - exclude = ‘immediateCondition’
[18:05:15.462]  - resignal = TRUE
[18:05:15.462]  - Number of conditions: 1
[18:05:15.463]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[18:05:15.463] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[18:05:15.463] getGlobalsAndPackages() ...
[18:05:15.464] Searching for globals...
[18:05:15.466] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[18:05:15.466] Searching for globals ... DONE
[18:05:15.467] Resolving globals: FALSE
[18:05:15.468] The total size of the 2 globals is 112 bytes (112 bytes)
[18:05:15.473] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (56 bytes of class ‘numeric’) and ‘b’ (56 bytes of class ‘numeric’)
[18:05:15.473] - globals: [2] ‘a’, ‘b’
[18:05:15.473] 
[18:05:15.473] getGlobalsAndPackages() ... DONE
[18:05:15.474] Packages needed by the future expression (n = 0): <none>
[18:05:15.475] Packages needed by future strategies (n = 0): <none>
[18:05:15.476] {
[18:05:15.476]     {
[18:05:15.476]         {
[18:05:15.476]             ...future.startTime <- base::Sys.time()
[18:05:15.476]             {
[18:05:15.476]                 {
[18:05:15.476]                   {
[18:05:15.476]                     base::local({
[18:05:15.476]                       has_future <- base::requireNamespace("future", 
[18:05:15.476]                         quietly = TRUE)
[18:05:15.476]                       if (has_future) {
[18:05:15.476]                         ns <- base::getNamespace("future")
[18:05:15.476]                         version <- ns[[".package"]][["version"]]
[18:05:15.476]                         if (is.null(version)) 
[18:05:15.476]                           version <- utils::packageVersion("future")
[18:05:15.476]                       }
[18:05:15.476]                       else {
[18:05:15.476]                         version <- NULL
[18:05:15.476]                       }
[18:05:15.476]                       if (!has_future || version < "1.8.0") {
[18:05:15.476]                         info <- base::c(r_version = base::gsub("R version ", 
[18:05:15.476]                           "", base::R.version$version.string), 
[18:05:15.476]                           platform = base::sprintf("%s (%s-bit)", 
[18:05:15.476]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:05:15.476]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:05:15.476]                             "release", "version")], collapse = " "), 
[18:05:15.476]                           hostname = base::Sys.info()[["nodename"]])
[18:05:15.476]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:05:15.476]                           info)
[18:05:15.476]                         info <- base::paste(info, collapse = "; ")
[18:05:15.476]                         if (!has_future) {
[18:05:15.476]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:05:15.476]                             info)
[18:05:15.476]                         }
[18:05:15.476]                         else {
[18:05:15.476]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:05:15.476]                             info, version)
[18:05:15.476]                         }
[18:05:15.476]                         base::stop(msg)
[18:05:15.476]                       }
[18:05:15.476]                     })
[18:05:15.476]                   }
[18:05:15.476]                   ...future.strategy.old <- future::plan("list")
[18:05:15.476]                   options(future.plan = NULL)
[18:05:15.476]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.476]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:05:15.476]                 }
[18:05:15.476]                 ...future.workdir <- getwd()
[18:05:15.476]             }
[18:05:15.476]             ...future.oldOptions <- base::as.list(base::.Options)
[18:05:15.476]             ...future.oldEnvVars <- base::Sys.getenv()
[18:05:15.476]         }
[18:05:15.476]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:05:15.476]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:05:15.476]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:05:15.476]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:05:15.476]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:05:15.476]             future.stdout.windows.reencode = NULL, width = 80L)
[18:05:15.476]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:05:15.476]             base::names(...future.oldOptions))
[18:05:15.476]     }
[18:05:15.476]     if (FALSE) {
[18:05:15.476]     }
[18:05:15.476]     else {
[18:05:15.476]         if (TRUE) {
[18:05:15.476]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:05:15.476]                 open = "w")
[18:05:15.476]         }
[18:05:15.476]         else {
[18:05:15.476]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:05:15.476]                 windows = "NUL", "/dev/null"), open = "w")
[18:05:15.476]         }
[18:05:15.476]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:05:15.476]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:05:15.476]             base::sink(type = "output", split = FALSE)
[18:05:15.476]             base::close(...future.stdout)
[18:05:15.476]         }, add = TRUE)
[18:05:15.476]     }
[18:05:15.476]     ...future.frame <- base::sys.nframe()
[18:05:15.476]     ...future.conditions <- base::list()
[18:05:15.476]     ...future.rng <- base::globalenv()$.Random.seed
[18:05:15.476]     if (FALSE) {
[18:05:15.476]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:05:15.476]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:05:15.476]     }
[18:05:15.476]     ...future.result <- base::tryCatch({
[18:05:15.476]         base::withCallingHandlers({
[18:05:15.476]             ...future.value <- base::withVisible(base::local({
[18:05:15.476]                 a * b
[18:05:15.476]             }))
[18:05:15.476]             future::FutureResult(value = ...future.value$value, 
[18:05:15.476]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.476]                   ...future.rng), globalenv = if (FALSE) 
[18:05:15.476]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:05:15.476]                     ...future.globalenv.names))
[18:05:15.476]                 else NULL, started = ...future.startTime, version = "1.8")
[18:05:15.476]         }, condition = base::local({
[18:05:15.476]             c <- base::c
[18:05:15.476]             inherits <- base::inherits
[18:05:15.476]             invokeRestart <- base::invokeRestart
[18:05:15.476]             length <- base::length
[18:05:15.476]             list <- base::list
[18:05:15.476]             seq.int <- base::seq.int
[18:05:15.476]             signalCondition <- base::signalCondition
[18:05:15.476]             sys.calls <- base::sys.calls
[18:05:15.476]             `[[` <- base::`[[`
[18:05:15.476]             `+` <- base::`+`
[18:05:15.476]             `<<-` <- base::`<<-`
[18:05:15.476]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:05:15.476]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:05:15.476]                   3L)]
[18:05:15.476]             }
[18:05:15.476]             function(cond) {
[18:05:15.476]                 is_error <- inherits(cond, "error")
[18:05:15.476]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:05:15.476]                   NULL)
[18:05:15.476]                 if (is_error) {
[18:05:15.476]                   sessionInformation <- function() {
[18:05:15.476]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:05:15.476]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:05:15.476]                       search = base::search(), system = base::Sys.info())
[18:05:15.476]                   }
[18:05:15.476]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.476]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:05:15.476]                     cond$call), session = sessionInformation(), 
[18:05:15.476]                     timestamp = base::Sys.time(), signaled = 0L)
[18:05:15.476]                   signalCondition(cond)
[18:05:15.476]                 }
[18:05:15.476]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:05:15.476]                 "immediateCondition"))) {
[18:05:15.476]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:05:15.476]                   ...future.conditions[[length(...future.conditions) + 
[18:05:15.476]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:05:15.476]                   if (TRUE && !signal) {
[18:05:15.476]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.476]                     {
[18:05:15.476]                       inherits <- base::inherits
[18:05:15.476]                       invokeRestart <- base::invokeRestart
[18:05:15.476]                       is.null <- base::is.null
[18:05:15.476]                       muffled <- FALSE
[18:05:15.476]                       if (inherits(cond, "message")) {
[18:05:15.476]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.476]                         if (muffled) 
[18:05:15.476]                           invokeRestart("muffleMessage")
[18:05:15.476]                       }
[18:05:15.476]                       else if (inherits(cond, "warning")) {
[18:05:15.476]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.476]                         if (muffled) 
[18:05:15.476]                           invokeRestart("muffleWarning")
[18:05:15.476]                       }
[18:05:15.476]                       else if (inherits(cond, "condition")) {
[18:05:15.476]                         if (!is.null(pattern)) {
[18:05:15.476]                           computeRestarts <- base::computeRestarts
[18:05:15.476]                           grepl <- base::grepl
[18:05:15.476]                           restarts <- computeRestarts(cond)
[18:05:15.476]                           for (restart in restarts) {
[18:05:15.476]                             name <- restart$name
[18:05:15.476]                             if (is.null(name)) 
[18:05:15.476]                               next
[18:05:15.476]                             if (!grepl(pattern, name)) 
[18:05:15.476]                               next
[18:05:15.476]                             invokeRestart(restart)
[18:05:15.476]                             muffled <- TRUE
[18:05:15.476]                             break
[18:05:15.476]                           }
[18:05:15.476]                         }
[18:05:15.476]                       }
[18:05:15.476]                       invisible(muffled)
[18:05:15.476]                     }
[18:05:15.476]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.476]                   }
[18:05:15.476]                 }
[18:05:15.476]                 else {
[18:05:15.476]                   if (TRUE) {
[18:05:15.476]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:05:15.476]                     {
[18:05:15.476]                       inherits <- base::inherits
[18:05:15.476]                       invokeRestart <- base::invokeRestart
[18:05:15.476]                       is.null <- base::is.null
[18:05:15.476]                       muffled <- FALSE
[18:05:15.476]                       if (inherits(cond, "message")) {
[18:05:15.476]                         muffled <- grepl(pattern, "muffleMessage")
[18:05:15.476]                         if (muffled) 
[18:05:15.476]                           invokeRestart("muffleMessage")
[18:05:15.476]                       }
[18:05:15.476]                       else if (inherits(cond, "warning")) {
[18:05:15.476]                         muffled <- grepl(pattern, "muffleWarning")
[18:05:15.476]                         if (muffled) 
[18:05:15.476]                           invokeRestart("muffleWarning")
[18:05:15.476]                       }
[18:05:15.476]                       else if (inherits(cond, "condition")) {
[18:05:15.476]                         if (!is.null(pattern)) {
[18:05:15.476]                           computeRestarts <- base::computeRestarts
[18:05:15.476]                           grepl <- base::grepl
[18:05:15.476]                           restarts <- computeRestarts(cond)
[18:05:15.476]                           for (restart in restarts) {
[18:05:15.476]                             name <- restart$name
[18:05:15.476]                             if (is.null(name)) 
[18:05:15.476]                               next
[18:05:15.476]                             if (!grepl(pattern, name)) 
[18:05:15.476]                               next
[18:05:15.476]                             invokeRestart(restart)
[18:05:15.476]                             muffled <- TRUE
[18:05:15.476]                             break
[18:05:15.476]                           }
[18:05:15.476]                         }
[18:05:15.476]                       }
[18:05:15.476]                       invisible(muffled)
[18:05:15.476]                     }
[18:05:15.476]                     muffleCondition(cond, pattern = "^muffle")
[18:05:15.476]                   }
[18:05:15.476]                 }
[18:05:15.476]             }
[18:05:15.476]         }))
[18:05:15.476]     }, error = function(ex) {
[18:05:15.476]         base::structure(base::list(value = NULL, visible = NULL, 
[18:05:15.476]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:05:15.476]                 ...future.rng), started = ...future.startTime, 
[18:05:15.476]             finished = Sys.time(), session_uuid = NA_character_, 
[18:05:15.476]             version = "1.8"), class = "FutureResult")
[18:05:15.476]     }, finally = {
[18:05:15.476]         if (!identical(...future.workdir, getwd())) 
[18:05:15.476]             setwd(...future.workdir)
[18:05:15.476]         {
[18:05:15.476]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:05:15.476]                 ...future.oldOptions$nwarnings <- NULL
[18:05:15.476]             }
[18:05:15.476]             base::options(...future.oldOptions)
[18:05:15.476]             if (.Platform$OS.type == "windows") {
[18:05:15.476]                 old_names <- names(...future.oldEnvVars)
[18:05:15.476]                 envs <- base::Sys.getenv()
[18:05:15.476]                 names <- names(envs)
[18:05:15.476]                 common <- intersect(names, old_names)
[18:05:15.476]                 added <- setdiff(names, old_names)
[18:05:15.476]                 removed <- setdiff(old_names, names)
[18:05:15.476]                 changed <- common[...future.oldEnvVars[common] != 
[18:05:15.476]                   envs[common]]
[18:05:15.476]                 NAMES <- toupper(changed)
[18:05:15.476]                 args <- list()
[18:05:15.476]                 for (kk in seq_along(NAMES)) {
[18:05:15.476]                   name <- changed[[kk]]
[18:05:15.476]                   NAME <- NAMES[[kk]]
[18:05:15.476]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.476]                     next
[18:05:15.476]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.476]                 }
[18:05:15.476]                 NAMES <- toupper(added)
[18:05:15.476]                 for (kk in seq_along(NAMES)) {
[18:05:15.476]                   name <- added[[kk]]
[18:05:15.476]                   NAME <- NAMES[[kk]]
[18:05:15.476]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.476]                     next
[18:05:15.476]                   args[[name]] <- ""
[18:05:15.476]                 }
[18:05:15.476]                 NAMES <- toupper(removed)
[18:05:15.476]                 for (kk in seq_along(NAMES)) {
[18:05:15.476]                   name <- removed[[kk]]
[18:05:15.476]                   NAME <- NAMES[[kk]]
[18:05:15.476]                   if (name != NAME && is.element(NAME, old_names)) 
[18:05:15.476]                     next
[18:05:15.476]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:05:15.476]                 }
[18:05:15.476]                 if (length(args) > 0) 
[18:05:15.476]                   base::do.call(base::Sys.setenv, args = args)
[18:05:15.476]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:05:15.476]             }
[18:05:15.476]             else {
[18:05:15.476]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:05:15.476]             }
[18:05:15.476]             {
[18:05:15.476]                 if (base::length(...future.futureOptionsAdded) > 
[18:05:15.476]                   0L) {
[18:05:15.476]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:05:15.476]                   base::names(opts) <- ...future.futureOptionsAdded
[18:05:15.476]                   base::options(opts)
[18:05:15.476]                 }
[18:05:15.476]                 {
[18:05:15.476]                   {
[18:05:15.476]                     NULL
[18:05:15.476]                     RNGkind("Mersenne-Twister")
[18:05:15.476]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:05:15.476]                       inherits = FALSE)
[18:05:15.476]                   }
[18:05:15.476]                   options(future.plan = NULL)
[18:05:15.476]                   if (is.na(NA_character_)) 
[18:05:15.476]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:05:15.476]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:05:15.476]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:05:15.476]                     .init = FALSE)
[18:05:15.476]                 }
[18:05:15.476]             }
[18:05:15.476]         }
[18:05:15.476]     })
[18:05:15.476]     if (TRUE) {
[18:05:15.476]         base::sink(type = "output", split = FALSE)
[18:05:15.476]         if (TRUE) {
[18:05:15.476]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:05:15.476]         }
[18:05:15.476]         else {
[18:05:15.476]             ...future.result["stdout"] <- base::list(NULL)
[18:05:15.476]         }
[18:05:15.476]         base::close(...future.stdout)
[18:05:15.476]         ...future.stdout <- NULL
[18:05:15.476]     }
[18:05:15.476]     ...future.result$conditions <- ...future.conditions
[18:05:15.476]     ...future.result$finished <- base::Sys.time()
[18:05:15.476]     ...future.result
[18:05:15.476] }
[18:05:15.479] assign_globals() ...
[18:05:15.480] List of 2
[18:05:15.480]  $ a: num 2
[18:05:15.480]  $ b: num 3
[18:05:15.480]  - attr(*, "where")=List of 2
[18:05:15.480]   ..$ a:<environment: R_EmptyEnv> 
[18:05:15.480]   ..$ b:<environment: R_EmptyEnv> 
[18:05:15.480]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:05:15.480]  - attr(*, "resolved")= logi FALSE
[18:05:15.480]  - attr(*, "total_size")= num 112
[18:05:15.487] - copied ‘a’ to environment
[18:05:15.487] - copied ‘b’ to environment
[18:05:15.487] assign_globals() ... done
[18:05:15.488] plan(): Setting new future strategy stack:
[18:05:15.488] List of future strategies:
[18:05:15.488] 1. sequential:
[18:05:15.488]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.488]    - tweaked: FALSE
[18:05:15.488]    - call: NULL
[18:05:15.489] plan(): nbrOfWorkers() = 1
[18:05:15.492] plan(): Setting new future strategy stack:
[18:05:15.492] List of future strategies:
[18:05:15.492] 1. multicore:
[18:05:15.492]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:05:15.492]    - tweaked: FALSE
[18:05:15.492]    - call: plan(multicore)
[18:05:15.499] plan(): nbrOfWorkers() = 2
[18:05:15.499] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 2 cores ... DONE
> 
> message("*** multicore() ... DONE")
*** multicore() ... DONE
> 
> source("incl/end.R")
[18:05:15.502] plan(): Setting new future strategy stack:
[18:05:15.502] List of future strategies:
[18:05:15.502] 1. FutureStrategy:
[18:05:15.502]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:05:15.502]    - tweaked: FALSE
[18:05:15.502]    - call: future::plan(oplan)
[18:05:15.503] plan(): nbrOfWorkers() = 1
> 
