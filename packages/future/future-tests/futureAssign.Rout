
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:46:38.323] plan(): Setting new future strategy stack:
[17:46:38.323] List of future strategies:
[17:46:38.323] 1. sequential:
[17:46:38.323]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.323]    - tweaked: FALSE
[17:46:38.323]    - call: future::plan("sequential")
[17:46:38.334] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[17:46:38.347] getGlobalsAndPackages() ...
[17:46:38.347] Searching for globals...
[17:46:38.353] - globals found: [2] ‘{’, ‘cat’
[17:46:38.353] Searching for globals ... DONE
[17:46:38.354] Resolving globals: FALSE
[17:46:38.354] 
[17:46:38.354] 
[17:46:38.354] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[17:46:38.355] run() for ‘Future’ ...
[17:46:38.355] - state: ‘created’
[17:46:38.356] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:38.356] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:38.356] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:38.356]   - Field: ‘label’
[17:46:38.356]   - Field: ‘local’
[17:46:38.356]   - Field: ‘owner’
[17:46:38.356]   - Field: ‘envir’
[17:46:38.356]   - Field: ‘packages’
[17:46:38.357]   - Field: ‘gc’
[17:46:38.357]   - Field: ‘conditions’
[17:46:38.357]   - Field: ‘expr’
[17:46:38.357]   - Field: ‘uuid’
[17:46:38.357]   - Field: ‘seed’
[17:46:38.357]   - Field: ‘version’
[17:46:38.357]   - Field: ‘result’
[17:46:38.357]   - Field: ‘asynchronous’
[17:46:38.357]   - Field: ‘calls’
[17:46:38.357]   - Field: ‘globals’
[17:46:38.357]   - Field: ‘stdout’
[17:46:38.358]   - Field: ‘earlySignal’
[17:46:38.358]   - Field: ‘lazy’
[17:46:38.358]   - Field: ‘state’
[17:46:38.358] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:38.358] - Launch lazy future ...
[17:46:38.359] Packages needed by the future expression (n = 0): <none>
[17:46:38.359] Packages needed by future strategies (n = 0): <none>
[17:46:38.360] {
[17:46:38.360]     {
[17:46:38.360]         {
[17:46:38.360]             ...future.startTime <- base::Sys.time()
[17:46:38.360]             {
[17:46:38.360]                 {
[17:46:38.360]                   {
[17:46:38.360]                     base::local({
[17:46:38.360]                       has_future <- base::requireNamespace("future", 
[17:46:38.360]                         quietly = TRUE)
[17:46:38.360]                       if (has_future) {
[17:46:38.360]                         ns <- base::getNamespace("future")
[17:46:38.360]                         version <- ns[[".package"]][["version"]]
[17:46:38.360]                         if (is.null(version)) 
[17:46:38.360]                           version <- utils::packageVersion("future")
[17:46:38.360]                       }
[17:46:38.360]                       else {
[17:46:38.360]                         version <- NULL
[17:46:38.360]                       }
[17:46:38.360]                       if (!has_future || version < "1.8.0") {
[17:46:38.360]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.360]                           "", base::R.version$version.string), 
[17:46:38.360]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:38.360]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.360]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.360]                             "release", "version")], collapse = " "), 
[17:46:38.360]                           hostname = base::Sys.info()[["nodename"]])
[17:46:38.360]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.360]                           info)
[17:46:38.360]                         info <- base::paste(info, collapse = "; ")
[17:46:38.360]                         if (!has_future) {
[17:46:38.360]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.360]                             info)
[17:46:38.360]                         }
[17:46:38.360]                         else {
[17:46:38.360]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.360]                             info, version)
[17:46:38.360]                         }
[17:46:38.360]                         base::stop(msg)
[17:46:38.360]                       }
[17:46:38.360]                     })
[17:46:38.360]                   }
[17:46:38.360]                   ...future.strategy.old <- future::plan("list")
[17:46:38.360]                   options(future.plan = NULL)
[17:46:38.360]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.360]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.360]                 }
[17:46:38.360]                 ...future.workdir <- getwd()
[17:46:38.360]             }
[17:46:38.360]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.360]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.360]         }
[17:46:38.360]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.360]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.360]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.360]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.360]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.360]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.360]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.360]             base::names(...future.oldOptions))
[17:46:38.360]     }
[17:46:38.360]     if (FALSE) {
[17:46:38.360]     }
[17:46:38.360]     else {
[17:46:38.360]         if (TRUE) {
[17:46:38.360]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.360]                 open = "w")
[17:46:38.360]         }
[17:46:38.360]         else {
[17:46:38.360]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.360]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.360]         }
[17:46:38.360]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.360]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.360]             base::sink(type = "output", split = FALSE)
[17:46:38.360]             base::close(...future.stdout)
[17:46:38.360]         }, add = TRUE)
[17:46:38.360]     }
[17:46:38.360]     ...future.frame <- base::sys.nframe()
[17:46:38.360]     ...future.conditions <- base::list()
[17:46:38.360]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.360]     if (FALSE) {
[17:46:38.360]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.360]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.360]     }
[17:46:38.360]     ...future.result <- base::tryCatch({
[17:46:38.360]         base::withCallingHandlers({
[17:46:38.360]             ...future.value <- base::withVisible(base::local({
[17:46:38.360]                 cat("Future assignment evaluated\n")
[17:46:38.360]                 2
[17:46:38.360]             }))
[17:46:38.360]             future::FutureResult(value = ...future.value$value, 
[17:46:38.360]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.360]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.360]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.360]                     ...future.globalenv.names))
[17:46:38.360]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.360]         }, condition = base::local({
[17:46:38.360]             c <- base::c
[17:46:38.360]             inherits <- base::inherits
[17:46:38.360]             invokeRestart <- base::invokeRestart
[17:46:38.360]             length <- base::length
[17:46:38.360]             list <- base::list
[17:46:38.360]             seq.int <- base::seq.int
[17:46:38.360]             signalCondition <- base::signalCondition
[17:46:38.360]             sys.calls <- base::sys.calls
[17:46:38.360]             `[[` <- base::`[[`
[17:46:38.360]             `+` <- base::`+`
[17:46:38.360]             `<<-` <- base::`<<-`
[17:46:38.360]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.360]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.360]                   3L)]
[17:46:38.360]             }
[17:46:38.360]             function(cond) {
[17:46:38.360]                 is_error <- inherits(cond, "error")
[17:46:38.360]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.360]                   NULL)
[17:46:38.360]                 if (is_error) {
[17:46:38.360]                   sessionInformation <- function() {
[17:46:38.360]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.360]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.360]                       search = base::search(), system = base::Sys.info())
[17:46:38.360]                   }
[17:46:38.360]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.360]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.360]                     cond$call), session = sessionInformation(), 
[17:46:38.360]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.360]                   signalCondition(cond)
[17:46:38.360]                 }
[17:46:38.360]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.360]                 "immediateCondition"))) {
[17:46:38.360]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.360]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.360]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.360]                   if (TRUE && !signal) {
[17:46:38.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.360]                     {
[17:46:38.360]                       inherits <- base::inherits
[17:46:38.360]                       invokeRestart <- base::invokeRestart
[17:46:38.360]                       is.null <- base::is.null
[17:46:38.360]                       muffled <- FALSE
[17:46:38.360]                       if (inherits(cond, "message")) {
[17:46:38.360]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.360]                         if (muffled) 
[17:46:38.360]                           invokeRestart("muffleMessage")
[17:46:38.360]                       }
[17:46:38.360]                       else if (inherits(cond, "warning")) {
[17:46:38.360]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.360]                         if (muffled) 
[17:46:38.360]                           invokeRestart("muffleWarning")
[17:46:38.360]                       }
[17:46:38.360]                       else if (inherits(cond, "condition")) {
[17:46:38.360]                         if (!is.null(pattern)) {
[17:46:38.360]                           computeRestarts <- base::computeRestarts
[17:46:38.360]                           grepl <- base::grepl
[17:46:38.360]                           restarts <- computeRestarts(cond)
[17:46:38.360]                           for (restart in restarts) {
[17:46:38.360]                             name <- restart$name
[17:46:38.360]                             if (is.null(name)) 
[17:46:38.360]                               next
[17:46:38.360]                             if (!grepl(pattern, name)) 
[17:46:38.360]                               next
[17:46:38.360]                             invokeRestart(restart)
[17:46:38.360]                             muffled <- TRUE
[17:46:38.360]                             break
[17:46:38.360]                           }
[17:46:38.360]                         }
[17:46:38.360]                       }
[17:46:38.360]                       invisible(muffled)
[17:46:38.360]                     }
[17:46:38.360]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.360]                   }
[17:46:38.360]                 }
[17:46:38.360]                 else {
[17:46:38.360]                   if (TRUE) {
[17:46:38.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.360]                     {
[17:46:38.360]                       inherits <- base::inherits
[17:46:38.360]                       invokeRestart <- base::invokeRestart
[17:46:38.360]                       is.null <- base::is.null
[17:46:38.360]                       muffled <- FALSE
[17:46:38.360]                       if (inherits(cond, "message")) {
[17:46:38.360]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.360]                         if (muffled) 
[17:46:38.360]                           invokeRestart("muffleMessage")
[17:46:38.360]                       }
[17:46:38.360]                       else if (inherits(cond, "warning")) {
[17:46:38.360]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.360]                         if (muffled) 
[17:46:38.360]                           invokeRestart("muffleWarning")
[17:46:38.360]                       }
[17:46:38.360]                       else if (inherits(cond, "condition")) {
[17:46:38.360]                         if (!is.null(pattern)) {
[17:46:38.360]                           computeRestarts <- base::computeRestarts
[17:46:38.360]                           grepl <- base::grepl
[17:46:38.360]                           restarts <- computeRestarts(cond)
[17:46:38.360]                           for (restart in restarts) {
[17:46:38.360]                             name <- restart$name
[17:46:38.360]                             if (is.null(name)) 
[17:46:38.360]                               next
[17:46:38.360]                             if (!grepl(pattern, name)) 
[17:46:38.360]                               next
[17:46:38.360]                             invokeRestart(restart)
[17:46:38.360]                             muffled <- TRUE
[17:46:38.360]                             break
[17:46:38.360]                           }
[17:46:38.360]                         }
[17:46:38.360]                       }
[17:46:38.360]                       invisible(muffled)
[17:46:38.360]                     }
[17:46:38.360]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.360]                   }
[17:46:38.360]                 }
[17:46:38.360]             }
[17:46:38.360]         }))
[17:46:38.360]     }, error = function(ex) {
[17:46:38.360]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.360]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.360]                 ...future.rng), started = ...future.startTime, 
[17:46:38.360]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.360]             version = "1.8"), class = "FutureResult")
[17:46:38.360]     }, finally = {
[17:46:38.360]         if (!identical(...future.workdir, getwd())) 
[17:46:38.360]             setwd(...future.workdir)
[17:46:38.360]         {
[17:46:38.360]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.360]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.360]             }
[17:46:38.360]             base::options(...future.oldOptions)
[17:46:38.360]             if (.Platform$OS.type == "windows") {
[17:46:38.360]                 old_names <- names(...future.oldEnvVars)
[17:46:38.360]                 envs <- base::Sys.getenv()
[17:46:38.360]                 names <- names(envs)
[17:46:38.360]                 common <- intersect(names, old_names)
[17:46:38.360]                 added <- setdiff(names, old_names)
[17:46:38.360]                 removed <- setdiff(old_names, names)
[17:46:38.360]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.360]                   envs[common]]
[17:46:38.360]                 NAMES <- toupper(changed)
[17:46:38.360]                 args <- list()
[17:46:38.360]                 for (kk in seq_along(NAMES)) {
[17:46:38.360]                   name <- changed[[kk]]
[17:46:38.360]                   NAME <- NAMES[[kk]]
[17:46:38.360]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.360]                     next
[17:46:38.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.360]                 }
[17:46:38.360]                 NAMES <- toupper(added)
[17:46:38.360]                 for (kk in seq_along(NAMES)) {
[17:46:38.360]                   name <- added[[kk]]
[17:46:38.360]                   NAME <- NAMES[[kk]]
[17:46:38.360]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.360]                     next
[17:46:38.360]                   args[[name]] <- ""
[17:46:38.360]                 }
[17:46:38.360]                 NAMES <- toupper(removed)
[17:46:38.360]                 for (kk in seq_along(NAMES)) {
[17:46:38.360]                   name <- removed[[kk]]
[17:46:38.360]                   NAME <- NAMES[[kk]]
[17:46:38.360]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.360]                     next
[17:46:38.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.360]                 }
[17:46:38.360]                 if (length(args) > 0) 
[17:46:38.360]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.360]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.360]             }
[17:46:38.360]             else {
[17:46:38.360]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.360]             }
[17:46:38.360]             {
[17:46:38.360]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.360]                   0L) {
[17:46:38.360]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.360]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.360]                   base::options(opts)
[17:46:38.360]                 }
[17:46:38.360]                 {
[17:46:38.360]                   {
[17:46:38.360]                     NULL
[17:46:38.360]                     RNGkind("Mersenne-Twister")
[17:46:38.360]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:38.360]                       inherits = FALSE)
[17:46:38.360]                   }
[17:46:38.360]                   options(future.plan = NULL)
[17:46:38.360]                   if (is.na(NA_character_)) 
[17:46:38.360]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.360]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.360]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.360]                     .init = FALSE)
[17:46:38.360]                 }
[17:46:38.360]             }
[17:46:38.360]         }
[17:46:38.360]     })
[17:46:38.360]     if (TRUE) {
[17:46:38.360]         base::sink(type = "output", split = FALSE)
[17:46:38.360]         if (TRUE) {
[17:46:38.360]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.360]         }
[17:46:38.360]         else {
[17:46:38.360]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.360]         }
[17:46:38.360]         base::close(...future.stdout)
[17:46:38.360]         ...future.stdout <- NULL
[17:46:38.360]     }
[17:46:38.360]     ...future.result$conditions <- ...future.conditions
[17:46:38.360]     ...future.result$finished <- base::Sys.time()
[17:46:38.360]     ...future.result
[17:46:38.360] }
[17:46:38.361] plan(): Setting new future strategy stack:
[17:46:38.361] List of future strategies:
[17:46:38.361] 1. sequential:
[17:46:38.361]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.361]    - tweaked: FALSE
[17:46:38.361]    - call: NULL
[17:46:38.362] plan(): nbrOfWorkers() = 1
[17:46:38.363] plan(): Setting new future strategy stack:
[17:46:38.363] List of future strategies:
[17:46:38.363] 1. sequential:
[17:46:38.363]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.363]    - tweaked: FALSE
[17:46:38.363]    - call: future::plan("sequential")
[17:46:38.364] plan(): nbrOfWorkers() = 1
[17:46:38.364] SequentialFuture started (and completed)
[17:46:38.364] - Launch lazy future ... done
[17:46:38.364] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[17:46:38.390] plan(): Setting new future strategy stack:
[17:46:38.391] List of future strategies:
[17:46:38.391] 1. sequential:
[17:46:38.391]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.391]    - tweaked: FALSE
[17:46:38.391]    - call: plan(strategy)
[17:46:38.402] plan(): nbrOfWorkers() = 1
[17:46:38.402] getGlobalsAndPackages() ...
[17:46:38.403] Searching for globals...
[17:46:38.404] - globals found: [1] ‘{’
[17:46:38.404] Searching for globals ... DONE
[17:46:38.404] Resolving globals: FALSE
[17:46:38.405] 
[17:46:38.405] 
[17:46:38.405] getGlobalsAndPackages() ... DONE
[17:46:38.405] run() for ‘Future’ ...
[17:46:38.405] - state: ‘created’
[17:46:38.405] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:38.406] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:38.406] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:38.406]   - Field: ‘label’
[17:46:38.406]   - Field: ‘local’
[17:46:38.406]   - Field: ‘owner’
[17:46:38.406]   - Field: ‘envir’
[17:46:38.406]   - Field: ‘packages’
[17:46:38.406]   - Field: ‘gc’
[17:46:38.406]   - Field: ‘conditions’
[17:46:38.406]   - Field: ‘expr’
[17:46:38.406]   - Field: ‘uuid’
[17:46:38.407]   - Field: ‘seed’
[17:46:38.407]   - Field: ‘version’
[17:46:38.407]   - Field: ‘result’
[17:46:38.407]   - Field: ‘asynchronous’
[17:46:38.407]   - Field: ‘calls’
[17:46:38.407]   - Field: ‘globals’
[17:46:38.407]   - Field: ‘stdout’
[17:46:38.407]   - Field: ‘earlySignal’
[17:46:38.407]   - Field: ‘lazy’
[17:46:38.407]   - Field: ‘state’
[17:46:38.408] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:38.408] - Launch lazy future ...
[17:46:38.408] Packages needed by the future expression (n = 0): <none>
[17:46:38.408] Packages needed by future strategies (n = 0): <none>
[17:46:38.408] {
[17:46:38.408]     {
[17:46:38.408]         {
[17:46:38.408]             ...future.startTime <- base::Sys.time()
[17:46:38.408]             {
[17:46:38.408]                 {
[17:46:38.408]                   {
[17:46:38.408]                     base::local({
[17:46:38.408]                       has_future <- base::requireNamespace("future", 
[17:46:38.408]                         quietly = TRUE)
[17:46:38.408]                       if (has_future) {
[17:46:38.408]                         ns <- base::getNamespace("future")
[17:46:38.408]                         version <- ns[[".package"]][["version"]]
[17:46:38.408]                         if (is.null(version)) 
[17:46:38.408]                           version <- utils::packageVersion("future")
[17:46:38.408]                       }
[17:46:38.408]                       else {
[17:46:38.408]                         version <- NULL
[17:46:38.408]                       }
[17:46:38.408]                       if (!has_future || version < "1.8.0") {
[17:46:38.408]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.408]                           "", base::R.version$version.string), 
[17:46:38.408]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:38.408]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.408]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.408]                             "release", "version")], collapse = " "), 
[17:46:38.408]                           hostname = base::Sys.info()[["nodename"]])
[17:46:38.408]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.408]                           info)
[17:46:38.408]                         info <- base::paste(info, collapse = "; ")
[17:46:38.408]                         if (!has_future) {
[17:46:38.408]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.408]                             info)
[17:46:38.408]                         }
[17:46:38.408]                         else {
[17:46:38.408]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.408]                             info, version)
[17:46:38.408]                         }
[17:46:38.408]                         base::stop(msg)
[17:46:38.408]                       }
[17:46:38.408]                     })
[17:46:38.408]                   }
[17:46:38.408]                   ...future.strategy.old <- future::plan("list")
[17:46:38.408]                   options(future.plan = NULL)
[17:46:38.408]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.408]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.408]                 }
[17:46:38.408]                 ...future.workdir <- getwd()
[17:46:38.408]             }
[17:46:38.408]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.408]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.408]         }
[17:46:38.408]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.408]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.408]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.408]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.408]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.408]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.408]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.408]             base::names(...future.oldOptions))
[17:46:38.408]     }
[17:46:38.408]     if (FALSE) {
[17:46:38.408]     }
[17:46:38.408]     else {
[17:46:38.408]         if (TRUE) {
[17:46:38.408]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.408]                 open = "w")
[17:46:38.408]         }
[17:46:38.408]         else {
[17:46:38.408]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.408]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.408]         }
[17:46:38.408]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.408]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.408]             base::sink(type = "output", split = FALSE)
[17:46:38.408]             base::close(...future.stdout)
[17:46:38.408]         }, add = TRUE)
[17:46:38.408]     }
[17:46:38.408]     ...future.frame <- base::sys.nframe()
[17:46:38.408]     ...future.conditions <- base::list()
[17:46:38.408]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.408]     if (FALSE) {
[17:46:38.408]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.408]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.408]     }
[17:46:38.408]     ...future.result <- base::tryCatch({
[17:46:38.408]         base::withCallingHandlers({
[17:46:38.408]             ...future.value <- base::withVisible(base::local({
[17:46:38.408]                 2
[17:46:38.408]             }))
[17:46:38.408]             future::FutureResult(value = ...future.value$value, 
[17:46:38.408]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.408]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.408]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.408]                     ...future.globalenv.names))
[17:46:38.408]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.408]         }, condition = base::local({
[17:46:38.408]             c <- base::c
[17:46:38.408]             inherits <- base::inherits
[17:46:38.408]             invokeRestart <- base::invokeRestart
[17:46:38.408]             length <- base::length
[17:46:38.408]             list <- base::list
[17:46:38.408]             seq.int <- base::seq.int
[17:46:38.408]             signalCondition <- base::signalCondition
[17:46:38.408]             sys.calls <- base::sys.calls
[17:46:38.408]             `[[` <- base::`[[`
[17:46:38.408]             `+` <- base::`+`
[17:46:38.408]             `<<-` <- base::`<<-`
[17:46:38.408]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.408]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.408]                   3L)]
[17:46:38.408]             }
[17:46:38.408]             function(cond) {
[17:46:38.408]                 is_error <- inherits(cond, "error")
[17:46:38.408]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.408]                   NULL)
[17:46:38.408]                 if (is_error) {
[17:46:38.408]                   sessionInformation <- function() {
[17:46:38.408]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.408]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.408]                       search = base::search(), system = base::Sys.info())
[17:46:38.408]                   }
[17:46:38.408]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.408]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.408]                     cond$call), session = sessionInformation(), 
[17:46:38.408]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.408]                   signalCondition(cond)
[17:46:38.408]                 }
[17:46:38.408]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.408]                 "immediateCondition"))) {
[17:46:38.408]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.408]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.408]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.408]                   if (TRUE && !signal) {
[17:46:38.408]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.408]                     {
[17:46:38.408]                       inherits <- base::inherits
[17:46:38.408]                       invokeRestart <- base::invokeRestart
[17:46:38.408]                       is.null <- base::is.null
[17:46:38.408]                       muffled <- FALSE
[17:46:38.408]                       if (inherits(cond, "message")) {
[17:46:38.408]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.408]                         if (muffled) 
[17:46:38.408]                           invokeRestart("muffleMessage")
[17:46:38.408]                       }
[17:46:38.408]                       else if (inherits(cond, "warning")) {
[17:46:38.408]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.408]                         if (muffled) 
[17:46:38.408]                           invokeRestart("muffleWarning")
[17:46:38.408]                       }
[17:46:38.408]                       else if (inherits(cond, "condition")) {
[17:46:38.408]                         if (!is.null(pattern)) {
[17:46:38.408]                           computeRestarts <- base::computeRestarts
[17:46:38.408]                           grepl <- base::grepl
[17:46:38.408]                           restarts <- computeRestarts(cond)
[17:46:38.408]                           for (restart in restarts) {
[17:46:38.408]                             name <- restart$name
[17:46:38.408]                             if (is.null(name)) 
[17:46:38.408]                               next
[17:46:38.408]                             if (!grepl(pattern, name)) 
[17:46:38.408]                               next
[17:46:38.408]                             invokeRestart(restart)
[17:46:38.408]                             muffled <- TRUE
[17:46:38.408]                             break
[17:46:38.408]                           }
[17:46:38.408]                         }
[17:46:38.408]                       }
[17:46:38.408]                       invisible(muffled)
[17:46:38.408]                     }
[17:46:38.408]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.408]                   }
[17:46:38.408]                 }
[17:46:38.408]                 else {
[17:46:38.408]                   if (TRUE) {
[17:46:38.408]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.408]                     {
[17:46:38.408]                       inherits <- base::inherits
[17:46:38.408]                       invokeRestart <- base::invokeRestart
[17:46:38.408]                       is.null <- base::is.null
[17:46:38.408]                       muffled <- FALSE
[17:46:38.408]                       if (inherits(cond, "message")) {
[17:46:38.408]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.408]                         if (muffled) 
[17:46:38.408]                           invokeRestart("muffleMessage")
[17:46:38.408]                       }
[17:46:38.408]                       else if (inherits(cond, "warning")) {
[17:46:38.408]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.408]                         if (muffled) 
[17:46:38.408]                           invokeRestart("muffleWarning")
[17:46:38.408]                       }
[17:46:38.408]                       else if (inherits(cond, "condition")) {
[17:46:38.408]                         if (!is.null(pattern)) {
[17:46:38.408]                           computeRestarts <- base::computeRestarts
[17:46:38.408]                           grepl <- base::grepl
[17:46:38.408]                           restarts <- computeRestarts(cond)
[17:46:38.408]                           for (restart in restarts) {
[17:46:38.408]                             name <- restart$name
[17:46:38.408]                             if (is.null(name)) 
[17:46:38.408]                               next
[17:46:38.408]                             if (!grepl(pattern, name)) 
[17:46:38.408]                               next
[17:46:38.408]                             invokeRestart(restart)
[17:46:38.408]                             muffled <- TRUE
[17:46:38.408]                             break
[17:46:38.408]                           }
[17:46:38.408]                         }
[17:46:38.408]                       }
[17:46:38.408]                       invisible(muffled)
[17:46:38.408]                     }
[17:46:38.408]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.408]                   }
[17:46:38.408]                 }
[17:46:38.408]             }
[17:46:38.408]         }))
[17:46:38.408]     }, error = function(ex) {
[17:46:38.408]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.408]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.408]                 ...future.rng), started = ...future.startTime, 
[17:46:38.408]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.408]             version = "1.8"), class = "FutureResult")
[17:46:38.408]     }, finally = {
[17:46:38.408]         if (!identical(...future.workdir, getwd())) 
[17:46:38.408]             setwd(...future.workdir)
[17:46:38.408]         {
[17:46:38.408]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.408]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.408]             }
[17:46:38.408]             base::options(...future.oldOptions)
[17:46:38.408]             if (.Platform$OS.type == "windows") {
[17:46:38.408]                 old_names <- names(...future.oldEnvVars)
[17:46:38.408]                 envs <- base::Sys.getenv()
[17:46:38.408]                 names <- names(envs)
[17:46:38.408]                 common <- intersect(names, old_names)
[17:46:38.408]                 added <- setdiff(names, old_names)
[17:46:38.408]                 removed <- setdiff(old_names, names)
[17:46:38.408]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.408]                   envs[common]]
[17:46:38.408]                 NAMES <- toupper(changed)
[17:46:38.408]                 args <- list()
[17:46:38.408]                 for (kk in seq_along(NAMES)) {
[17:46:38.408]                   name <- changed[[kk]]
[17:46:38.408]                   NAME <- NAMES[[kk]]
[17:46:38.408]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.408]                     next
[17:46:38.408]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.408]                 }
[17:46:38.408]                 NAMES <- toupper(added)
[17:46:38.408]                 for (kk in seq_along(NAMES)) {
[17:46:38.408]                   name <- added[[kk]]
[17:46:38.408]                   NAME <- NAMES[[kk]]
[17:46:38.408]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.408]                     next
[17:46:38.408]                   args[[name]] <- ""
[17:46:38.408]                 }
[17:46:38.408]                 NAMES <- toupper(removed)
[17:46:38.408]                 for (kk in seq_along(NAMES)) {
[17:46:38.408]                   name <- removed[[kk]]
[17:46:38.408]                   NAME <- NAMES[[kk]]
[17:46:38.408]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.408]                     next
[17:46:38.408]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.408]                 }
[17:46:38.408]                 if (length(args) > 0) 
[17:46:38.408]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.408]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.408]             }
[17:46:38.408]             else {
[17:46:38.408]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.408]             }
[17:46:38.408]             {
[17:46:38.408]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.408]                   0L) {
[17:46:38.408]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.408]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.408]                   base::options(opts)
[17:46:38.408]                 }
[17:46:38.408]                 {
[17:46:38.408]                   {
[17:46:38.408]                     NULL
[17:46:38.408]                     RNGkind("Mersenne-Twister")
[17:46:38.408]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:38.408]                       inherits = FALSE)
[17:46:38.408]                   }
[17:46:38.408]                   options(future.plan = NULL)
[17:46:38.408]                   if (is.na(NA_character_)) 
[17:46:38.408]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.408]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.408]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.408]                     .init = FALSE)
[17:46:38.408]                 }
[17:46:38.408]             }
[17:46:38.408]         }
[17:46:38.408]     })
[17:46:38.408]     if (TRUE) {
[17:46:38.408]         base::sink(type = "output", split = FALSE)
[17:46:38.408]         if (TRUE) {
[17:46:38.408]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.408]         }
[17:46:38.408]         else {
[17:46:38.408]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.408]         }
[17:46:38.408]         base::close(...future.stdout)
[17:46:38.408]         ...future.stdout <- NULL
[17:46:38.408]     }
[17:46:38.408]     ...future.result$conditions <- ...future.conditions
[17:46:38.408]     ...future.result$finished <- base::Sys.time()
[17:46:38.408]     ...future.result
[17:46:38.408] }
[17:46:38.410] plan(): Setting new future strategy stack:
[17:46:38.410] List of future strategies:
[17:46:38.410] 1. sequential:
[17:46:38.410]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.410]    - tweaked: FALSE
[17:46:38.410]    - call: NULL
[17:46:38.411] plan(): nbrOfWorkers() = 1
[17:46:38.411] plan(): Setting new future strategy stack:
[17:46:38.411] List of future strategies:
[17:46:38.411] 1. sequential:
[17:46:38.411]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.411]    - tweaked: FALSE
[17:46:38.411]    - call: plan(strategy)
[17:46:38.412] plan(): nbrOfWorkers() = 1
[17:46:38.412] SequentialFuture started (and completed)
[17:46:38.412] - Launch lazy future ... done
[17:46:38.412] run() for ‘SequentialFuture’ ... done
[17:46:38.412] getGlobalsAndPackages() ...
[17:46:38.413] Searching for globals...
[17:46:38.413] - globals found: [1] ‘{’
[17:46:38.413] Searching for globals ... DONE
[17:46:38.413] Resolving globals: FALSE
[17:46:38.414] 
[17:46:38.414] 
[17:46:38.414] getGlobalsAndPackages() ... DONE
[17:46:38.414] run() for ‘Future’ ...
[17:46:38.414] - state: ‘created’
[17:46:38.414] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:38.414] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:38.414] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:38.415]   - Field: ‘label’
[17:46:38.415]   - Field: ‘local’
[17:46:38.415]   - Field: ‘owner’
[17:46:38.415]   - Field: ‘envir’
[17:46:38.415]   - Field: ‘packages’
[17:46:38.415]   - Field: ‘gc’
[17:46:38.415]   - Field: ‘conditions’
[17:46:38.415]   - Field: ‘expr’
[17:46:38.415]   - Field: ‘uuid’
[17:46:38.415]   - Field: ‘seed’
[17:46:38.416]   - Field: ‘version’
[17:46:38.416]   - Field: ‘result’
[17:46:38.416]   - Field: ‘asynchronous’
[17:46:38.416]   - Field: ‘calls’
[17:46:38.416]   - Field: ‘globals’
[17:46:38.416]   - Field: ‘stdout’
[17:46:38.416]   - Field: ‘earlySignal’
[17:46:38.416]   - Field: ‘lazy’
[17:46:38.416]   - Field: ‘state’
[17:46:38.416] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:38.416] - Launch lazy future ...
[17:46:38.417] Packages needed by the future expression (n = 0): <none>
[17:46:38.417] Packages needed by future strategies (n = 0): <none>
[17:46:38.417] {
[17:46:38.417]     {
[17:46:38.417]         {
[17:46:38.417]             ...future.startTime <- base::Sys.time()
[17:46:38.417]             {
[17:46:38.417]                 {
[17:46:38.417]                   {
[17:46:38.417]                     base::local({
[17:46:38.417]                       has_future <- base::requireNamespace("future", 
[17:46:38.417]                         quietly = TRUE)
[17:46:38.417]                       if (has_future) {
[17:46:38.417]                         ns <- base::getNamespace("future")
[17:46:38.417]                         version <- ns[[".package"]][["version"]]
[17:46:38.417]                         if (is.null(version)) 
[17:46:38.417]                           version <- utils::packageVersion("future")
[17:46:38.417]                       }
[17:46:38.417]                       else {
[17:46:38.417]                         version <- NULL
[17:46:38.417]                       }
[17:46:38.417]                       if (!has_future || version < "1.8.0") {
[17:46:38.417]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.417]                           "", base::R.version$version.string), 
[17:46:38.417]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:38.417]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.417]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.417]                             "release", "version")], collapse = " "), 
[17:46:38.417]                           hostname = base::Sys.info()[["nodename"]])
[17:46:38.417]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.417]                           info)
[17:46:38.417]                         info <- base::paste(info, collapse = "; ")
[17:46:38.417]                         if (!has_future) {
[17:46:38.417]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.417]                             info)
[17:46:38.417]                         }
[17:46:38.417]                         else {
[17:46:38.417]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.417]                             info, version)
[17:46:38.417]                         }
[17:46:38.417]                         base::stop(msg)
[17:46:38.417]                       }
[17:46:38.417]                     })
[17:46:38.417]                   }
[17:46:38.417]                   ...future.strategy.old <- future::plan("list")
[17:46:38.417]                   options(future.plan = NULL)
[17:46:38.417]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.417]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.417]                 }
[17:46:38.417]                 ...future.workdir <- getwd()
[17:46:38.417]             }
[17:46:38.417]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.417]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.417]         }
[17:46:38.417]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.417]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.417]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.417]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.417]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.417]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.417]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.417]             base::names(...future.oldOptions))
[17:46:38.417]     }
[17:46:38.417]     if (FALSE) {
[17:46:38.417]     }
[17:46:38.417]     else {
[17:46:38.417]         if (TRUE) {
[17:46:38.417]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.417]                 open = "w")
[17:46:38.417]         }
[17:46:38.417]         else {
[17:46:38.417]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.417]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.417]         }
[17:46:38.417]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.417]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.417]             base::sink(type = "output", split = FALSE)
[17:46:38.417]             base::close(...future.stdout)
[17:46:38.417]         }, add = TRUE)
[17:46:38.417]     }
[17:46:38.417]     ...future.frame <- base::sys.nframe()
[17:46:38.417]     ...future.conditions <- base::list()
[17:46:38.417]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.417]     if (FALSE) {
[17:46:38.417]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.417]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.417]     }
[17:46:38.417]     ...future.result <- base::tryCatch({
[17:46:38.417]         base::withCallingHandlers({
[17:46:38.417]             ...future.value <- base::withVisible(base::local({
[17:46:38.417]                 4
[17:46:38.417]             }))
[17:46:38.417]             future::FutureResult(value = ...future.value$value, 
[17:46:38.417]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.417]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.417]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.417]                     ...future.globalenv.names))
[17:46:38.417]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.417]         }, condition = base::local({
[17:46:38.417]             c <- base::c
[17:46:38.417]             inherits <- base::inherits
[17:46:38.417]             invokeRestart <- base::invokeRestart
[17:46:38.417]             length <- base::length
[17:46:38.417]             list <- base::list
[17:46:38.417]             seq.int <- base::seq.int
[17:46:38.417]             signalCondition <- base::signalCondition
[17:46:38.417]             sys.calls <- base::sys.calls
[17:46:38.417]             `[[` <- base::`[[`
[17:46:38.417]             `+` <- base::`+`
[17:46:38.417]             `<<-` <- base::`<<-`
[17:46:38.417]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.417]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.417]                   3L)]
[17:46:38.417]             }
[17:46:38.417]             function(cond) {
[17:46:38.417]                 is_error <- inherits(cond, "error")
[17:46:38.417]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.417]                   NULL)
[17:46:38.417]                 if (is_error) {
[17:46:38.417]                   sessionInformation <- function() {
[17:46:38.417]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.417]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.417]                       search = base::search(), system = base::Sys.info())
[17:46:38.417]                   }
[17:46:38.417]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.417]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.417]                     cond$call), session = sessionInformation(), 
[17:46:38.417]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.417]                   signalCondition(cond)
[17:46:38.417]                 }
[17:46:38.417]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.417]                 "immediateCondition"))) {
[17:46:38.417]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.417]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.417]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.417]                   if (TRUE && !signal) {
[17:46:38.417]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.417]                     {
[17:46:38.417]                       inherits <- base::inherits
[17:46:38.417]                       invokeRestart <- base::invokeRestart
[17:46:38.417]                       is.null <- base::is.null
[17:46:38.417]                       muffled <- FALSE
[17:46:38.417]                       if (inherits(cond, "message")) {
[17:46:38.417]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.417]                         if (muffled) 
[17:46:38.417]                           invokeRestart("muffleMessage")
[17:46:38.417]                       }
[17:46:38.417]                       else if (inherits(cond, "warning")) {
[17:46:38.417]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.417]                         if (muffled) 
[17:46:38.417]                           invokeRestart("muffleWarning")
[17:46:38.417]                       }
[17:46:38.417]                       else if (inherits(cond, "condition")) {
[17:46:38.417]                         if (!is.null(pattern)) {
[17:46:38.417]                           computeRestarts <- base::computeRestarts
[17:46:38.417]                           grepl <- base::grepl
[17:46:38.417]                           restarts <- computeRestarts(cond)
[17:46:38.417]                           for (restart in restarts) {
[17:46:38.417]                             name <- restart$name
[17:46:38.417]                             if (is.null(name)) 
[17:46:38.417]                               next
[17:46:38.417]                             if (!grepl(pattern, name)) 
[17:46:38.417]                               next
[17:46:38.417]                             invokeRestart(restart)
[17:46:38.417]                             muffled <- TRUE
[17:46:38.417]                             break
[17:46:38.417]                           }
[17:46:38.417]                         }
[17:46:38.417]                       }
[17:46:38.417]                       invisible(muffled)
[17:46:38.417]                     }
[17:46:38.417]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.417]                   }
[17:46:38.417]                 }
[17:46:38.417]                 else {
[17:46:38.417]                   if (TRUE) {
[17:46:38.417]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.417]                     {
[17:46:38.417]                       inherits <- base::inherits
[17:46:38.417]                       invokeRestart <- base::invokeRestart
[17:46:38.417]                       is.null <- base::is.null
[17:46:38.417]                       muffled <- FALSE
[17:46:38.417]                       if (inherits(cond, "message")) {
[17:46:38.417]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.417]                         if (muffled) 
[17:46:38.417]                           invokeRestart("muffleMessage")
[17:46:38.417]                       }
[17:46:38.417]                       else if (inherits(cond, "warning")) {
[17:46:38.417]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.417]                         if (muffled) 
[17:46:38.417]                           invokeRestart("muffleWarning")
[17:46:38.417]                       }
[17:46:38.417]                       else if (inherits(cond, "condition")) {
[17:46:38.417]                         if (!is.null(pattern)) {
[17:46:38.417]                           computeRestarts <- base::computeRestarts
[17:46:38.417]                           grepl <- base::grepl
[17:46:38.417]                           restarts <- computeRestarts(cond)
[17:46:38.417]                           for (restart in restarts) {
[17:46:38.417]                             name <- restart$name
[17:46:38.417]                             if (is.null(name)) 
[17:46:38.417]                               next
[17:46:38.417]                             if (!grepl(pattern, name)) 
[17:46:38.417]                               next
[17:46:38.417]                             invokeRestart(restart)
[17:46:38.417]                             muffled <- TRUE
[17:46:38.417]                             break
[17:46:38.417]                           }
[17:46:38.417]                         }
[17:46:38.417]                       }
[17:46:38.417]                       invisible(muffled)
[17:46:38.417]                     }
[17:46:38.417]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.417]                   }
[17:46:38.417]                 }
[17:46:38.417]             }
[17:46:38.417]         }))
[17:46:38.417]     }, error = function(ex) {
[17:46:38.417]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.417]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.417]                 ...future.rng), started = ...future.startTime, 
[17:46:38.417]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.417]             version = "1.8"), class = "FutureResult")
[17:46:38.417]     }, finally = {
[17:46:38.417]         if (!identical(...future.workdir, getwd())) 
[17:46:38.417]             setwd(...future.workdir)
[17:46:38.417]         {
[17:46:38.417]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.417]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.417]             }
[17:46:38.417]             base::options(...future.oldOptions)
[17:46:38.417]             if (.Platform$OS.type == "windows") {
[17:46:38.417]                 old_names <- names(...future.oldEnvVars)
[17:46:38.417]                 envs <- base::Sys.getenv()
[17:46:38.417]                 names <- names(envs)
[17:46:38.417]                 common <- intersect(names, old_names)
[17:46:38.417]                 added <- setdiff(names, old_names)
[17:46:38.417]                 removed <- setdiff(old_names, names)
[17:46:38.417]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.417]                   envs[common]]
[17:46:38.417]                 NAMES <- toupper(changed)
[17:46:38.417]                 args <- list()
[17:46:38.417]                 for (kk in seq_along(NAMES)) {
[17:46:38.417]                   name <- changed[[kk]]
[17:46:38.417]                   NAME <- NAMES[[kk]]
[17:46:38.417]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.417]                     next
[17:46:38.417]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.417]                 }
[17:46:38.417]                 NAMES <- toupper(added)
[17:46:38.417]                 for (kk in seq_along(NAMES)) {
[17:46:38.417]                   name <- added[[kk]]
[17:46:38.417]                   NAME <- NAMES[[kk]]
[17:46:38.417]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.417]                     next
[17:46:38.417]                   args[[name]] <- ""
[17:46:38.417]                 }
[17:46:38.417]                 NAMES <- toupper(removed)
[17:46:38.417]                 for (kk in seq_along(NAMES)) {
[17:46:38.417]                   name <- removed[[kk]]
[17:46:38.417]                   NAME <- NAMES[[kk]]
[17:46:38.417]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.417]                     next
[17:46:38.417]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.417]                 }
[17:46:38.417]                 if (length(args) > 0) 
[17:46:38.417]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.417]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.417]             }
[17:46:38.417]             else {
[17:46:38.417]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.417]             }
[17:46:38.417]             {
[17:46:38.417]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.417]                   0L) {
[17:46:38.417]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.417]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.417]                   base::options(opts)
[17:46:38.417]                 }
[17:46:38.417]                 {
[17:46:38.417]                   {
[17:46:38.417]                     NULL
[17:46:38.417]                     RNGkind("Mersenne-Twister")
[17:46:38.417]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:38.417]                       inherits = FALSE)
[17:46:38.417]                   }
[17:46:38.417]                   options(future.plan = NULL)
[17:46:38.417]                   if (is.na(NA_character_)) 
[17:46:38.417]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.417]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.417]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.417]                     .init = FALSE)
[17:46:38.417]                 }
[17:46:38.417]             }
[17:46:38.417]         }
[17:46:38.417]     })
[17:46:38.417]     if (TRUE) {
[17:46:38.417]         base::sink(type = "output", split = FALSE)
[17:46:38.417]         if (TRUE) {
[17:46:38.417]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.417]         }
[17:46:38.417]         else {
[17:46:38.417]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.417]         }
[17:46:38.417]         base::close(...future.stdout)
[17:46:38.417]         ...future.stdout <- NULL
[17:46:38.417]     }
[17:46:38.417]     ...future.result$conditions <- ...future.conditions
[17:46:38.417]     ...future.result$finished <- base::Sys.time()
[17:46:38.417]     ...future.result
[17:46:38.417] }
[17:46:38.419] plan(): Setting new future strategy stack:
[17:46:38.419] List of future strategies:
[17:46:38.419] 1. sequential:
[17:46:38.419]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.419]    - tweaked: FALSE
[17:46:38.419]    - call: NULL
[17:46:38.419] plan(): nbrOfWorkers() = 1
[17:46:38.420] plan(): Setting new future strategy stack:
[17:46:38.420] List of future strategies:
[17:46:38.420] 1. sequential:
[17:46:38.420]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.420]    - tweaked: FALSE
[17:46:38.420]    - call: plan(strategy)
[17:46:38.421] plan(): nbrOfWorkers() = 1
[17:46:38.421] SequentialFuture started (and completed)
[17:46:38.421] - Launch lazy future ... done
[17:46:38.421] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[17:46:38.421] getGlobalsAndPackages() ...
[17:46:38.421] Searching for globals...
[17:46:38.422] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.422] Searching for globals ... DONE
[17:46:38.422] Resolving globals: FALSE
[17:46:38.423] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.424] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.424] - globals: [1] ‘a’
[17:46:38.424] 
[17:46:38.424] getGlobalsAndPackages() ... DONE
[17:46:38.424] run() for ‘Future’ ...
[17:46:38.424] - state: ‘created’
[17:46:38.424] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:38.425] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:38.425] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:38.425]   - Field: ‘label’
[17:46:38.425]   - Field: ‘local’
[17:46:38.425]   - Field: ‘owner’
[17:46:38.425]   - Field: ‘envir’
[17:46:38.425]   - Field: ‘packages’
[17:46:38.425]   - Field: ‘gc’
[17:46:38.425]   - Field: ‘conditions’
[17:46:38.425]   - Field: ‘expr’
[17:46:38.425]   - Field: ‘uuid’
[17:46:38.426]   - Field: ‘seed’
[17:46:38.426]   - Field: ‘version’
[17:46:38.426]   - Field: ‘result’
[17:46:38.426]   - Field: ‘asynchronous’
[17:46:38.426]   - Field: ‘calls’
[17:46:38.426]   - Field: ‘globals’
[17:46:38.426]   - Field: ‘stdout’
[17:46:38.426]   - Field: ‘earlySignal’
[17:46:38.426]   - Field: ‘lazy’
[17:46:38.426]   - Field: ‘state’
[17:46:38.426] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:38.427] - Launch lazy future ...
[17:46:38.427] Packages needed by the future expression (n = 0): <none>
[17:46:38.427] Packages needed by future strategies (n = 0): <none>
[17:46:38.427] {
[17:46:38.427]     {
[17:46:38.427]         {
[17:46:38.427]             ...future.startTime <- base::Sys.time()
[17:46:38.427]             {
[17:46:38.427]                 {
[17:46:38.427]                   {
[17:46:38.427]                     base::local({
[17:46:38.427]                       has_future <- base::requireNamespace("future", 
[17:46:38.427]                         quietly = TRUE)
[17:46:38.427]                       if (has_future) {
[17:46:38.427]                         ns <- base::getNamespace("future")
[17:46:38.427]                         version <- ns[[".package"]][["version"]]
[17:46:38.427]                         if (is.null(version)) 
[17:46:38.427]                           version <- utils::packageVersion("future")
[17:46:38.427]                       }
[17:46:38.427]                       else {
[17:46:38.427]                         version <- NULL
[17:46:38.427]                       }
[17:46:38.427]                       if (!has_future || version < "1.8.0") {
[17:46:38.427]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.427]                           "", base::R.version$version.string), 
[17:46:38.427]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:38.427]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.427]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.427]                             "release", "version")], collapse = " "), 
[17:46:38.427]                           hostname = base::Sys.info()[["nodename"]])
[17:46:38.427]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.427]                           info)
[17:46:38.427]                         info <- base::paste(info, collapse = "; ")
[17:46:38.427]                         if (!has_future) {
[17:46:38.427]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.427]                             info)
[17:46:38.427]                         }
[17:46:38.427]                         else {
[17:46:38.427]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.427]                             info, version)
[17:46:38.427]                         }
[17:46:38.427]                         base::stop(msg)
[17:46:38.427]                       }
[17:46:38.427]                     })
[17:46:38.427]                   }
[17:46:38.427]                   ...future.strategy.old <- future::plan("list")
[17:46:38.427]                   options(future.plan = NULL)
[17:46:38.427]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.427]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.427]                 }
[17:46:38.427]                 ...future.workdir <- getwd()
[17:46:38.427]             }
[17:46:38.427]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.427]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.427]         }
[17:46:38.427]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.427]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.427]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.427]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.427]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.427]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.427]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.427]             base::names(...future.oldOptions))
[17:46:38.427]     }
[17:46:38.427]     if (FALSE) {
[17:46:38.427]     }
[17:46:38.427]     else {
[17:46:38.427]         if (TRUE) {
[17:46:38.427]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.427]                 open = "w")
[17:46:38.427]         }
[17:46:38.427]         else {
[17:46:38.427]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.427]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.427]         }
[17:46:38.427]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.427]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.427]             base::sink(type = "output", split = FALSE)
[17:46:38.427]             base::close(...future.stdout)
[17:46:38.427]         }, add = TRUE)
[17:46:38.427]     }
[17:46:38.427]     ...future.frame <- base::sys.nframe()
[17:46:38.427]     ...future.conditions <- base::list()
[17:46:38.427]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.427]     if (FALSE) {
[17:46:38.427]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.427]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.427]     }
[17:46:38.427]     ...future.result <- base::tryCatch({
[17:46:38.427]         base::withCallingHandlers({
[17:46:38.427]             ...future.value <- base::withVisible(base::local({
[17:46:38.427]                 2 * a
[17:46:38.427]             }))
[17:46:38.427]             future::FutureResult(value = ...future.value$value, 
[17:46:38.427]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.427]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.427]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.427]                     ...future.globalenv.names))
[17:46:38.427]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.427]         }, condition = base::local({
[17:46:38.427]             c <- base::c
[17:46:38.427]             inherits <- base::inherits
[17:46:38.427]             invokeRestart <- base::invokeRestart
[17:46:38.427]             length <- base::length
[17:46:38.427]             list <- base::list
[17:46:38.427]             seq.int <- base::seq.int
[17:46:38.427]             signalCondition <- base::signalCondition
[17:46:38.427]             sys.calls <- base::sys.calls
[17:46:38.427]             `[[` <- base::`[[`
[17:46:38.427]             `+` <- base::`+`
[17:46:38.427]             `<<-` <- base::`<<-`
[17:46:38.427]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.427]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.427]                   3L)]
[17:46:38.427]             }
[17:46:38.427]             function(cond) {
[17:46:38.427]                 is_error <- inherits(cond, "error")
[17:46:38.427]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.427]                   NULL)
[17:46:38.427]                 if (is_error) {
[17:46:38.427]                   sessionInformation <- function() {
[17:46:38.427]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.427]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.427]                       search = base::search(), system = base::Sys.info())
[17:46:38.427]                   }
[17:46:38.427]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.427]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.427]                     cond$call), session = sessionInformation(), 
[17:46:38.427]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.427]                   signalCondition(cond)
[17:46:38.427]                 }
[17:46:38.427]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.427]                 "immediateCondition"))) {
[17:46:38.427]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.427]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.427]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.427]                   if (TRUE && !signal) {
[17:46:38.427]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.427]                     {
[17:46:38.427]                       inherits <- base::inherits
[17:46:38.427]                       invokeRestart <- base::invokeRestart
[17:46:38.427]                       is.null <- base::is.null
[17:46:38.427]                       muffled <- FALSE
[17:46:38.427]                       if (inherits(cond, "message")) {
[17:46:38.427]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.427]                         if (muffled) 
[17:46:38.427]                           invokeRestart("muffleMessage")
[17:46:38.427]                       }
[17:46:38.427]                       else if (inherits(cond, "warning")) {
[17:46:38.427]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.427]                         if (muffled) 
[17:46:38.427]                           invokeRestart("muffleWarning")
[17:46:38.427]                       }
[17:46:38.427]                       else if (inherits(cond, "condition")) {
[17:46:38.427]                         if (!is.null(pattern)) {
[17:46:38.427]                           computeRestarts <- base::computeRestarts
[17:46:38.427]                           grepl <- base::grepl
[17:46:38.427]                           restarts <- computeRestarts(cond)
[17:46:38.427]                           for (restart in restarts) {
[17:46:38.427]                             name <- restart$name
[17:46:38.427]                             if (is.null(name)) 
[17:46:38.427]                               next
[17:46:38.427]                             if (!grepl(pattern, name)) 
[17:46:38.427]                               next
[17:46:38.427]                             invokeRestart(restart)
[17:46:38.427]                             muffled <- TRUE
[17:46:38.427]                             break
[17:46:38.427]                           }
[17:46:38.427]                         }
[17:46:38.427]                       }
[17:46:38.427]                       invisible(muffled)
[17:46:38.427]                     }
[17:46:38.427]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.427]                   }
[17:46:38.427]                 }
[17:46:38.427]                 else {
[17:46:38.427]                   if (TRUE) {
[17:46:38.427]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.427]                     {
[17:46:38.427]                       inherits <- base::inherits
[17:46:38.427]                       invokeRestart <- base::invokeRestart
[17:46:38.427]                       is.null <- base::is.null
[17:46:38.427]                       muffled <- FALSE
[17:46:38.427]                       if (inherits(cond, "message")) {
[17:46:38.427]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.427]                         if (muffled) 
[17:46:38.427]                           invokeRestart("muffleMessage")
[17:46:38.427]                       }
[17:46:38.427]                       else if (inherits(cond, "warning")) {
[17:46:38.427]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.427]                         if (muffled) 
[17:46:38.427]                           invokeRestart("muffleWarning")
[17:46:38.427]                       }
[17:46:38.427]                       else if (inherits(cond, "condition")) {
[17:46:38.427]                         if (!is.null(pattern)) {
[17:46:38.427]                           computeRestarts <- base::computeRestarts
[17:46:38.427]                           grepl <- base::grepl
[17:46:38.427]                           restarts <- computeRestarts(cond)
[17:46:38.427]                           for (restart in restarts) {
[17:46:38.427]                             name <- restart$name
[17:46:38.427]                             if (is.null(name)) 
[17:46:38.427]                               next
[17:46:38.427]                             if (!grepl(pattern, name)) 
[17:46:38.427]                               next
[17:46:38.427]                             invokeRestart(restart)
[17:46:38.427]                             muffled <- TRUE
[17:46:38.427]                             break
[17:46:38.427]                           }
[17:46:38.427]                         }
[17:46:38.427]                       }
[17:46:38.427]                       invisible(muffled)
[17:46:38.427]                     }
[17:46:38.427]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.427]                   }
[17:46:38.427]                 }
[17:46:38.427]             }
[17:46:38.427]         }))
[17:46:38.427]     }, error = function(ex) {
[17:46:38.427]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.427]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.427]                 ...future.rng), started = ...future.startTime, 
[17:46:38.427]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.427]             version = "1.8"), class = "FutureResult")
[17:46:38.427]     }, finally = {
[17:46:38.427]         if (!identical(...future.workdir, getwd())) 
[17:46:38.427]             setwd(...future.workdir)
[17:46:38.427]         {
[17:46:38.427]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.427]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.427]             }
[17:46:38.427]             base::options(...future.oldOptions)
[17:46:38.427]             if (.Platform$OS.type == "windows") {
[17:46:38.427]                 old_names <- names(...future.oldEnvVars)
[17:46:38.427]                 envs <- base::Sys.getenv()
[17:46:38.427]                 names <- names(envs)
[17:46:38.427]                 common <- intersect(names, old_names)
[17:46:38.427]                 added <- setdiff(names, old_names)
[17:46:38.427]                 removed <- setdiff(old_names, names)
[17:46:38.427]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.427]                   envs[common]]
[17:46:38.427]                 NAMES <- toupper(changed)
[17:46:38.427]                 args <- list()
[17:46:38.427]                 for (kk in seq_along(NAMES)) {
[17:46:38.427]                   name <- changed[[kk]]
[17:46:38.427]                   NAME <- NAMES[[kk]]
[17:46:38.427]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.427]                     next
[17:46:38.427]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.427]                 }
[17:46:38.427]                 NAMES <- toupper(added)
[17:46:38.427]                 for (kk in seq_along(NAMES)) {
[17:46:38.427]                   name <- added[[kk]]
[17:46:38.427]                   NAME <- NAMES[[kk]]
[17:46:38.427]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.427]                     next
[17:46:38.427]                   args[[name]] <- ""
[17:46:38.427]                 }
[17:46:38.427]                 NAMES <- toupper(removed)
[17:46:38.427]                 for (kk in seq_along(NAMES)) {
[17:46:38.427]                   name <- removed[[kk]]
[17:46:38.427]                   NAME <- NAMES[[kk]]
[17:46:38.427]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.427]                     next
[17:46:38.427]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.427]                 }
[17:46:38.427]                 if (length(args) > 0) 
[17:46:38.427]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.427]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.427]             }
[17:46:38.427]             else {
[17:46:38.427]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.427]             }
[17:46:38.427]             {
[17:46:38.427]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.427]                   0L) {
[17:46:38.427]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.427]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.427]                   base::options(opts)
[17:46:38.427]                 }
[17:46:38.427]                 {
[17:46:38.427]                   {
[17:46:38.427]                     NULL
[17:46:38.427]                     RNGkind("Mersenne-Twister")
[17:46:38.427]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:38.427]                       inherits = FALSE)
[17:46:38.427]                   }
[17:46:38.427]                   options(future.plan = NULL)
[17:46:38.427]                   if (is.na(NA_character_)) 
[17:46:38.427]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.427]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.427]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.427]                     .init = FALSE)
[17:46:38.427]                 }
[17:46:38.427]             }
[17:46:38.427]         }
[17:46:38.427]     })
[17:46:38.427]     if (TRUE) {
[17:46:38.427]         base::sink(type = "output", split = FALSE)
[17:46:38.427]         if (TRUE) {
[17:46:38.427]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.427]         }
[17:46:38.427]         else {
[17:46:38.427]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.427]         }
[17:46:38.427]         base::close(...future.stdout)
[17:46:38.427]         ...future.stdout <- NULL
[17:46:38.427]     }
[17:46:38.427]     ...future.result$conditions <- ...future.conditions
[17:46:38.427]     ...future.result$finished <- base::Sys.time()
[17:46:38.427]     ...future.result
[17:46:38.427] }
[17:46:38.429] assign_globals() ...
[17:46:38.429] List of 1
[17:46:38.429]  $ a: num 1
[17:46:38.429]  - attr(*, "where")=List of 1
[17:46:38.429]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.429]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.429]  - attr(*, "resolved")= logi FALSE
[17:46:38.429]  - attr(*, "total_size")= num 56
[17:46:38.429]  - attr(*, "already-done")= logi TRUE
[17:46:38.433] - copied ‘a’ to environment
[17:46:38.433] assign_globals() ... done
[17:46:38.434] plan(): Setting new future strategy stack:
[17:46:38.434] List of future strategies:
[17:46:38.434] 1. sequential:
[17:46:38.434]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.434]    - tweaked: FALSE
[17:46:38.434]    - call: NULL
[17:46:38.434] plan(): nbrOfWorkers() = 1
[17:46:38.435] plan(): Setting new future strategy stack:
[17:46:38.435] List of future strategies:
[17:46:38.435] 1. sequential:
[17:46:38.435]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.435]    - tweaked: FALSE
[17:46:38.435]    - call: plan(strategy)
[17:46:38.435] plan(): nbrOfWorkers() = 1
[17:46:38.436] SequentialFuture started (and completed)
[17:46:38.436] - Launch lazy future ... done
[17:46:38.436] run() for ‘SequentialFuture’ ... done
[17:46:38.436] getGlobalsAndPackages() ...
[17:46:38.436] Searching for globals...
[17:46:38.439] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.439] Searching for globals ... DONE
[17:46:38.439] Resolving globals: FALSE
[17:46:38.439] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.439] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.440] - globals: [1] ‘a’
[17:46:38.440] 
[17:46:38.440] getGlobalsAndPackages() ... DONE
[17:46:38.440] run() for ‘Future’ ...
[17:46:38.440] - state: ‘created’
[17:46:38.440] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:38.440] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:38.441] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:38.441]   - Field: ‘label’
[17:46:38.441]   - Field: ‘local’
[17:46:38.441]   - Field: ‘owner’
[17:46:38.441]   - Field: ‘envir’
[17:46:38.441]   - Field: ‘packages’
[17:46:38.441]   - Field: ‘gc’
[17:46:38.441]   - Field: ‘conditions’
[17:46:38.441]   - Field: ‘expr’
[17:46:38.441]   - Field: ‘uuid’
[17:46:38.442]   - Field: ‘seed’
[17:46:38.442]   - Field: ‘version’
[17:46:38.442]   - Field: ‘result’
[17:46:38.442]   - Field: ‘asynchronous’
[17:46:38.442]   - Field: ‘calls’
[17:46:38.442]   - Field: ‘globals’
[17:46:38.442]   - Field: ‘stdout’
[17:46:38.442]   - Field: ‘earlySignal’
[17:46:38.442]   - Field: ‘lazy’
[17:46:38.442]   - Field: ‘state’
[17:46:38.442] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:38.442] - Launch lazy future ...
[17:46:38.443] Packages needed by the future expression (n = 0): <none>
[17:46:38.443] Packages needed by future strategies (n = 0): <none>
[17:46:38.443] {
[17:46:38.443]     {
[17:46:38.443]         {
[17:46:38.443]             ...future.startTime <- base::Sys.time()
[17:46:38.443]             {
[17:46:38.443]                 {
[17:46:38.443]                   {
[17:46:38.443]                     base::local({
[17:46:38.443]                       has_future <- base::requireNamespace("future", 
[17:46:38.443]                         quietly = TRUE)
[17:46:38.443]                       if (has_future) {
[17:46:38.443]                         ns <- base::getNamespace("future")
[17:46:38.443]                         version <- ns[[".package"]][["version"]]
[17:46:38.443]                         if (is.null(version)) 
[17:46:38.443]                           version <- utils::packageVersion("future")
[17:46:38.443]                       }
[17:46:38.443]                       else {
[17:46:38.443]                         version <- NULL
[17:46:38.443]                       }
[17:46:38.443]                       if (!has_future || version < "1.8.0") {
[17:46:38.443]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.443]                           "", base::R.version$version.string), 
[17:46:38.443]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:38.443]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.443]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.443]                             "release", "version")], collapse = " "), 
[17:46:38.443]                           hostname = base::Sys.info()[["nodename"]])
[17:46:38.443]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.443]                           info)
[17:46:38.443]                         info <- base::paste(info, collapse = "; ")
[17:46:38.443]                         if (!has_future) {
[17:46:38.443]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.443]                             info)
[17:46:38.443]                         }
[17:46:38.443]                         else {
[17:46:38.443]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.443]                             info, version)
[17:46:38.443]                         }
[17:46:38.443]                         base::stop(msg)
[17:46:38.443]                       }
[17:46:38.443]                     })
[17:46:38.443]                   }
[17:46:38.443]                   ...future.strategy.old <- future::plan("list")
[17:46:38.443]                   options(future.plan = NULL)
[17:46:38.443]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.443]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.443]                 }
[17:46:38.443]                 ...future.workdir <- getwd()
[17:46:38.443]             }
[17:46:38.443]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.443]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.443]         }
[17:46:38.443]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.443]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.443]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.443]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.443]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.443]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.443]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.443]             base::names(...future.oldOptions))
[17:46:38.443]     }
[17:46:38.443]     if (FALSE) {
[17:46:38.443]     }
[17:46:38.443]     else {
[17:46:38.443]         if (TRUE) {
[17:46:38.443]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.443]                 open = "w")
[17:46:38.443]         }
[17:46:38.443]         else {
[17:46:38.443]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.443]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.443]         }
[17:46:38.443]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.443]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.443]             base::sink(type = "output", split = FALSE)
[17:46:38.443]             base::close(...future.stdout)
[17:46:38.443]         }, add = TRUE)
[17:46:38.443]     }
[17:46:38.443]     ...future.frame <- base::sys.nframe()
[17:46:38.443]     ...future.conditions <- base::list()
[17:46:38.443]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.443]     if (FALSE) {
[17:46:38.443]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.443]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.443]     }
[17:46:38.443]     ...future.result <- base::tryCatch({
[17:46:38.443]         base::withCallingHandlers({
[17:46:38.443]             ...future.value <- base::withVisible(base::local({
[17:46:38.443]                 2 * a
[17:46:38.443]             }))
[17:46:38.443]             future::FutureResult(value = ...future.value$value, 
[17:46:38.443]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.443]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.443]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.443]                     ...future.globalenv.names))
[17:46:38.443]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.443]         }, condition = base::local({
[17:46:38.443]             c <- base::c
[17:46:38.443]             inherits <- base::inherits
[17:46:38.443]             invokeRestart <- base::invokeRestart
[17:46:38.443]             length <- base::length
[17:46:38.443]             list <- base::list
[17:46:38.443]             seq.int <- base::seq.int
[17:46:38.443]             signalCondition <- base::signalCondition
[17:46:38.443]             sys.calls <- base::sys.calls
[17:46:38.443]             `[[` <- base::`[[`
[17:46:38.443]             `+` <- base::`+`
[17:46:38.443]             `<<-` <- base::`<<-`
[17:46:38.443]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.443]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.443]                   3L)]
[17:46:38.443]             }
[17:46:38.443]             function(cond) {
[17:46:38.443]                 is_error <- inherits(cond, "error")
[17:46:38.443]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.443]                   NULL)
[17:46:38.443]                 if (is_error) {
[17:46:38.443]                   sessionInformation <- function() {
[17:46:38.443]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.443]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.443]                       search = base::search(), system = base::Sys.info())
[17:46:38.443]                   }
[17:46:38.443]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.443]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.443]                     cond$call), session = sessionInformation(), 
[17:46:38.443]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.443]                   signalCondition(cond)
[17:46:38.443]                 }
[17:46:38.443]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.443]                 "immediateCondition"))) {
[17:46:38.443]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.443]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.443]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.443]                   if (TRUE && !signal) {
[17:46:38.443]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.443]                     {
[17:46:38.443]                       inherits <- base::inherits
[17:46:38.443]                       invokeRestart <- base::invokeRestart
[17:46:38.443]                       is.null <- base::is.null
[17:46:38.443]                       muffled <- FALSE
[17:46:38.443]                       if (inherits(cond, "message")) {
[17:46:38.443]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.443]                         if (muffled) 
[17:46:38.443]                           invokeRestart("muffleMessage")
[17:46:38.443]                       }
[17:46:38.443]                       else if (inherits(cond, "warning")) {
[17:46:38.443]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.443]                         if (muffled) 
[17:46:38.443]                           invokeRestart("muffleWarning")
[17:46:38.443]                       }
[17:46:38.443]                       else if (inherits(cond, "condition")) {
[17:46:38.443]                         if (!is.null(pattern)) {
[17:46:38.443]                           computeRestarts <- base::computeRestarts
[17:46:38.443]                           grepl <- base::grepl
[17:46:38.443]                           restarts <- computeRestarts(cond)
[17:46:38.443]                           for (restart in restarts) {
[17:46:38.443]                             name <- restart$name
[17:46:38.443]                             if (is.null(name)) 
[17:46:38.443]                               next
[17:46:38.443]                             if (!grepl(pattern, name)) 
[17:46:38.443]                               next
[17:46:38.443]                             invokeRestart(restart)
[17:46:38.443]                             muffled <- TRUE
[17:46:38.443]                             break
[17:46:38.443]                           }
[17:46:38.443]                         }
[17:46:38.443]                       }
[17:46:38.443]                       invisible(muffled)
[17:46:38.443]                     }
[17:46:38.443]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.443]                   }
[17:46:38.443]                 }
[17:46:38.443]                 else {
[17:46:38.443]                   if (TRUE) {
[17:46:38.443]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.443]                     {
[17:46:38.443]                       inherits <- base::inherits
[17:46:38.443]                       invokeRestart <- base::invokeRestart
[17:46:38.443]                       is.null <- base::is.null
[17:46:38.443]                       muffled <- FALSE
[17:46:38.443]                       if (inherits(cond, "message")) {
[17:46:38.443]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.443]                         if (muffled) 
[17:46:38.443]                           invokeRestart("muffleMessage")
[17:46:38.443]                       }
[17:46:38.443]                       else if (inherits(cond, "warning")) {
[17:46:38.443]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.443]                         if (muffled) 
[17:46:38.443]                           invokeRestart("muffleWarning")
[17:46:38.443]                       }
[17:46:38.443]                       else if (inherits(cond, "condition")) {
[17:46:38.443]                         if (!is.null(pattern)) {
[17:46:38.443]                           computeRestarts <- base::computeRestarts
[17:46:38.443]                           grepl <- base::grepl
[17:46:38.443]                           restarts <- computeRestarts(cond)
[17:46:38.443]                           for (restart in restarts) {
[17:46:38.443]                             name <- restart$name
[17:46:38.443]                             if (is.null(name)) 
[17:46:38.443]                               next
[17:46:38.443]                             if (!grepl(pattern, name)) 
[17:46:38.443]                               next
[17:46:38.443]                             invokeRestart(restart)
[17:46:38.443]                             muffled <- TRUE
[17:46:38.443]                             break
[17:46:38.443]                           }
[17:46:38.443]                         }
[17:46:38.443]                       }
[17:46:38.443]                       invisible(muffled)
[17:46:38.443]                     }
[17:46:38.443]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.443]                   }
[17:46:38.443]                 }
[17:46:38.443]             }
[17:46:38.443]         }))
[17:46:38.443]     }, error = function(ex) {
[17:46:38.443]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.443]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.443]                 ...future.rng), started = ...future.startTime, 
[17:46:38.443]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.443]             version = "1.8"), class = "FutureResult")
[17:46:38.443]     }, finally = {
[17:46:38.443]         if (!identical(...future.workdir, getwd())) 
[17:46:38.443]             setwd(...future.workdir)
[17:46:38.443]         {
[17:46:38.443]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.443]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.443]             }
[17:46:38.443]             base::options(...future.oldOptions)
[17:46:38.443]             if (.Platform$OS.type == "windows") {
[17:46:38.443]                 old_names <- names(...future.oldEnvVars)
[17:46:38.443]                 envs <- base::Sys.getenv()
[17:46:38.443]                 names <- names(envs)
[17:46:38.443]                 common <- intersect(names, old_names)
[17:46:38.443]                 added <- setdiff(names, old_names)
[17:46:38.443]                 removed <- setdiff(old_names, names)
[17:46:38.443]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.443]                   envs[common]]
[17:46:38.443]                 NAMES <- toupper(changed)
[17:46:38.443]                 args <- list()
[17:46:38.443]                 for (kk in seq_along(NAMES)) {
[17:46:38.443]                   name <- changed[[kk]]
[17:46:38.443]                   NAME <- NAMES[[kk]]
[17:46:38.443]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.443]                     next
[17:46:38.443]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.443]                 }
[17:46:38.443]                 NAMES <- toupper(added)
[17:46:38.443]                 for (kk in seq_along(NAMES)) {
[17:46:38.443]                   name <- added[[kk]]
[17:46:38.443]                   NAME <- NAMES[[kk]]
[17:46:38.443]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.443]                     next
[17:46:38.443]                   args[[name]] <- ""
[17:46:38.443]                 }
[17:46:38.443]                 NAMES <- toupper(removed)
[17:46:38.443]                 for (kk in seq_along(NAMES)) {
[17:46:38.443]                   name <- removed[[kk]]
[17:46:38.443]                   NAME <- NAMES[[kk]]
[17:46:38.443]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.443]                     next
[17:46:38.443]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.443]                 }
[17:46:38.443]                 if (length(args) > 0) 
[17:46:38.443]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.443]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.443]             }
[17:46:38.443]             else {
[17:46:38.443]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.443]             }
[17:46:38.443]             {
[17:46:38.443]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.443]                   0L) {
[17:46:38.443]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.443]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.443]                   base::options(opts)
[17:46:38.443]                 }
[17:46:38.443]                 {
[17:46:38.443]                   {
[17:46:38.443]                     NULL
[17:46:38.443]                     RNGkind("Mersenne-Twister")
[17:46:38.443]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:38.443]                       inherits = FALSE)
[17:46:38.443]                   }
[17:46:38.443]                   options(future.plan = NULL)
[17:46:38.443]                   if (is.na(NA_character_)) 
[17:46:38.443]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.443]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.443]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.443]                     .init = FALSE)
[17:46:38.443]                 }
[17:46:38.443]             }
[17:46:38.443]         }
[17:46:38.443]     })
[17:46:38.443]     if (TRUE) {
[17:46:38.443]         base::sink(type = "output", split = FALSE)
[17:46:38.443]         if (TRUE) {
[17:46:38.443]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.443]         }
[17:46:38.443]         else {
[17:46:38.443]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.443]         }
[17:46:38.443]         base::close(...future.stdout)
[17:46:38.443]         ...future.stdout <- NULL
[17:46:38.443]     }
[17:46:38.443]     ...future.result$conditions <- ...future.conditions
[17:46:38.443]     ...future.result$finished <- base::Sys.time()
[17:46:38.443]     ...future.result
[17:46:38.443] }
[17:46:38.445] assign_globals() ...
[17:46:38.445] List of 1
[17:46:38.445]  $ a: num 1
[17:46:38.445]  - attr(*, "where")=List of 1
[17:46:38.445]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.445]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.445]  - attr(*, "resolved")= logi FALSE
[17:46:38.445]  - attr(*, "total_size")= num 56
[17:46:38.445]  - attr(*, "already-done")= logi TRUE
[17:46:38.447] - copied ‘a’ to environment
[17:46:38.447] assign_globals() ... done
[17:46:38.447] plan(): Setting new future strategy stack:
[17:46:38.448] List of future strategies:
[17:46:38.448] 1. sequential:
[17:46:38.448]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.448]    - tweaked: FALSE
[17:46:38.448]    - call: NULL
[17:46:38.448] plan(): nbrOfWorkers() = 1
[17:46:38.449] plan(): Setting new future strategy stack:
[17:46:38.449] List of future strategies:
[17:46:38.449] 1. sequential:
[17:46:38.449]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.449]    - tweaked: FALSE
[17:46:38.449]    - call: plan(strategy)
[17:46:38.449] plan(): nbrOfWorkers() = 1
[17:46:38.449] SequentialFuture started (and completed)
[17:46:38.449] - Launch lazy future ... done
[17:46:38.449] run() for ‘SequentialFuture’ ... done
[17:46:38.450] getGlobalsAndPackages() ...
[17:46:38.450] Searching for globals...
[17:46:38.451] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.451] Searching for globals ... DONE
[17:46:38.451] Resolving globals: FALSE
[17:46:38.451] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.451] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.452] - globals: [1] ‘a’
[17:46:38.452] 
[17:46:38.452] getGlobalsAndPackages() ... DONE
[17:46:38.452] run() for ‘Future’ ...
[17:46:38.452] - state: ‘created’
[17:46:38.452] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:38.452] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:38.453] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:38.453]   - Field: ‘label’
[17:46:38.453]   - Field: ‘local’
[17:46:38.453]   - Field: ‘owner’
[17:46:38.453]   - Field: ‘envir’
[17:46:38.453]   - Field: ‘packages’
[17:46:38.453]   - Field: ‘gc’
[17:46:38.453]   - Field: ‘conditions’
[17:46:38.453]   - Field: ‘expr’
[17:46:38.453]   - Field: ‘uuid’
[17:46:38.453]   - Field: ‘seed’
[17:46:38.454]   - Field: ‘version’
[17:46:38.454]   - Field: ‘result’
[17:46:38.454]   - Field: ‘asynchronous’
[17:46:38.454]   - Field: ‘calls’
[17:46:38.454]   - Field: ‘globals’
[17:46:38.454]   - Field: ‘stdout’
[17:46:38.454]   - Field: ‘earlySignal’
[17:46:38.454]   - Field: ‘lazy’
[17:46:38.454]   - Field: ‘state’
[17:46:38.454] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:38.454] - Launch lazy future ...
[17:46:38.455] Packages needed by the future expression (n = 0): <none>
[17:46:38.455] Packages needed by future strategies (n = 0): <none>
[17:46:38.455] {
[17:46:38.455]     {
[17:46:38.455]         {
[17:46:38.455]             ...future.startTime <- base::Sys.time()
[17:46:38.455]             {
[17:46:38.455]                 {
[17:46:38.455]                   {
[17:46:38.455]                     base::local({
[17:46:38.455]                       has_future <- base::requireNamespace("future", 
[17:46:38.455]                         quietly = TRUE)
[17:46:38.455]                       if (has_future) {
[17:46:38.455]                         ns <- base::getNamespace("future")
[17:46:38.455]                         version <- ns[[".package"]][["version"]]
[17:46:38.455]                         if (is.null(version)) 
[17:46:38.455]                           version <- utils::packageVersion("future")
[17:46:38.455]                       }
[17:46:38.455]                       else {
[17:46:38.455]                         version <- NULL
[17:46:38.455]                       }
[17:46:38.455]                       if (!has_future || version < "1.8.0") {
[17:46:38.455]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.455]                           "", base::R.version$version.string), 
[17:46:38.455]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:38.455]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.455]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.455]                             "release", "version")], collapse = " "), 
[17:46:38.455]                           hostname = base::Sys.info()[["nodename"]])
[17:46:38.455]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.455]                           info)
[17:46:38.455]                         info <- base::paste(info, collapse = "; ")
[17:46:38.455]                         if (!has_future) {
[17:46:38.455]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.455]                             info)
[17:46:38.455]                         }
[17:46:38.455]                         else {
[17:46:38.455]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.455]                             info, version)
[17:46:38.455]                         }
[17:46:38.455]                         base::stop(msg)
[17:46:38.455]                       }
[17:46:38.455]                     })
[17:46:38.455]                   }
[17:46:38.455]                   ...future.strategy.old <- future::plan("list")
[17:46:38.455]                   options(future.plan = NULL)
[17:46:38.455]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.455]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.455]                 }
[17:46:38.455]                 ...future.workdir <- getwd()
[17:46:38.455]             }
[17:46:38.455]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.455]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.455]         }
[17:46:38.455]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.455]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.455]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.455]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.455]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.455]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.455]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.455]             base::names(...future.oldOptions))
[17:46:38.455]     }
[17:46:38.455]     if (FALSE) {
[17:46:38.455]     }
[17:46:38.455]     else {
[17:46:38.455]         if (TRUE) {
[17:46:38.455]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.455]                 open = "w")
[17:46:38.455]         }
[17:46:38.455]         else {
[17:46:38.455]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.455]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.455]         }
[17:46:38.455]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.455]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.455]             base::sink(type = "output", split = FALSE)
[17:46:38.455]             base::close(...future.stdout)
[17:46:38.455]         }, add = TRUE)
[17:46:38.455]     }
[17:46:38.455]     ...future.frame <- base::sys.nframe()
[17:46:38.455]     ...future.conditions <- base::list()
[17:46:38.455]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.455]     if (FALSE) {
[17:46:38.455]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.455]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.455]     }
[17:46:38.455]     ...future.result <- base::tryCatch({
[17:46:38.455]         base::withCallingHandlers({
[17:46:38.455]             ...future.value <- base::withVisible(base::local({
[17:46:38.455]                 2 * a
[17:46:38.455]             }))
[17:46:38.455]             future::FutureResult(value = ...future.value$value, 
[17:46:38.455]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.455]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.455]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.455]                     ...future.globalenv.names))
[17:46:38.455]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.455]         }, condition = base::local({
[17:46:38.455]             c <- base::c
[17:46:38.455]             inherits <- base::inherits
[17:46:38.455]             invokeRestart <- base::invokeRestart
[17:46:38.455]             length <- base::length
[17:46:38.455]             list <- base::list
[17:46:38.455]             seq.int <- base::seq.int
[17:46:38.455]             signalCondition <- base::signalCondition
[17:46:38.455]             sys.calls <- base::sys.calls
[17:46:38.455]             `[[` <- base::`[[`
[17:46:38.455]             `+` <- base::`+`
[17:46:38.455]             `<<-` <- base::`<<-`
[17:46:38.455]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.455]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.455]                   3L)]
[17:46:38.455]             }
[17:46:38.455]             function(cond) {
[17:46:38.455]                 is_error <- inherits(cond, "error")
[17:46:38.455]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.455]                   NULL)
[17:46:38.455]                 if (is_error) {
[17:46:38.455]                   sessionInformation <- function() {
[17:46:38.455]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.455]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.455]                       search = base::search(), system = base::Sys.info())
[17:46:38.455]                   }
[17:46:38.455]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.455]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.455]                     cond$call), session = sessionInformation(), 
[17:46:38.455]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.455]                   signalCondition(cond)
[17:46:38.455]                 }
[17:46:38.455]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.455]                 "immediateCondition"))) {
[17:46:38.455]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.455]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.455]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.455]                   if (TRUE && !signal) {
[17:46:38.455]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.455]                     {
[17:46:38.455]                       inherits <- base::inherits
[17:46:38.455]                       invokeRestart <- base::invokeRestart
[17:46:38.455]                       is.null <- base::is.null
[17:46:38.455]                       muffled <- FALSE
[17:46:38.455]                       if (inherits(cond, "message")) {
[17:46:38.455]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.455]                         if (muffled) 
[17:46:38.455]                           invokeRestart("muffleMessage")
[17:46:38.455]                       }
[17:46:38.455]                       else if (inherits(cond, "warning")) {
[17:46:38.455]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.455]                         if (muffled) 
[17:46:38.455]                           invokeRestart("muffleWarning")
[17:46:38.455]                       }
[17:46:38.455]                       else if (inherits(cond, "condition")) {
[17:46:38.455]                         if (!is.null(pattern)) {
[17:46:38.455]                           computeRestarts <- base::computeRestarts
[17:46:38.455]                           grepl <- base::grepl
[17:46:38.455]                           restarts <- computeRestarts(cond)
[17:46:38.455]                           for (restart in restarts) {
[17:46:38.455]                             name <- restart$name
[17:46:38.455]                             if (is.null(name)) 
[17:46:38.455]                               next
[17:46:38.455]                             if (!grepl(pattern, name)) 
[17:46:38.455]                               next
[17:46:38.455]                             invokeRestart(restart)
[17:46:38.455]                             muffled <- TRUE
[17:46:38.455]                             break
[17:46:38.455]                           }
[17:46:38.455]                         }
[17:46:38.455]                       }
[17:46:38.455]                       invisible(muffled)
[17:46:38.455]                     }
[17:46:38.455]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.455]                   }
[17:46:38.455]                 }
[17:46:38.455]                 else {
[17:46:38.455]                   if (TRUE) {
[17:46:38.455]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.455]                     {
[17:46:38.455]                       inherits <- base::inherits
[17:46:38.455]                       invokeRestart <- base::invokeRestart
[17:46:38.455]                       is.null <- base::is.null
[17:46:38.455]                       muffled <- FALSE
[17:46:38.455]                       if (inherits(cond, "message")) {
[17:46:38.455]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.455]                         if (muffled) 
[17:46:38.455]                           invokeRestart("muffleMessage")
[17:46:38.455]                       }
[17:46:38.455]                       else if (inherits(cond, "warning")) {
[17:46:38.455]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.455]                         if (muffled) 
[17:46:38.455]                           invokeRestart("muffleWarning")
[17:46:38.455]                       }
[17:46:38.455]                       else if (inherits(cond, "condition")) {
[17:46:38.455]                         if (!is.null(pattern)) {
[17:46:38.455]                           computeRestarts <- base::computeRestarts
[17:46:38.455]                           grepl <- base::grepl
[17:46:38.455]                           restarts <- computeRestarts(cond)
[17:46:38.455]                           for (restart in restarts) {
[17:46:38.455]                             name <- restart$name
[17:46:38.455]                             if (is.null(name)) 
[17:46:38.455]                               next
[17:46:38.455]                             if (!grepl(pattern, name)) 
[17:46:38.455]                               next
[17:46:38.455]                             invokeRestart(restart)
[17:46:38.455]                             muffled <- TRUE
[17:46:38.455]                             break
[17:46:38.455]                           }
[17:46:38.455]                         }
[17:46:38.455]                       }
[17:46:38.455]                       invisible(muffled)
[17:46:38.455]                     }
[17:46:38.455]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.455]                   }
[17:46:38.455]                 }
[17:46:38.455]             }
[17:46:38.455]         }))
[17:46:38.455]     }, error = function(ex) {
[17:46:38.455]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.455]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.455]                 ...future.rng), started = ...future.startTime, 
[17:46:38.455]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.455]             version = "1.8"), class = "FutureResult")
[17:46:38.455]     }, finally = {
[17:46:38.455]         if (!identical(...future.workdir, getwd())) 
[17:46:38.455]             setwd(...future.workdir)
[17:46:38.455]         {
[17:46:38.455]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.455]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.455]             }
[17:46:38.455]             base::options(...future.oldOptions)
[17:46:38.455]             if (.Platform$OS.type == "windows") {
[17:46:38.455]                 old_names <- names(...future.oldEnvVars)
[17:46:38.455]                 envs <- base::Sys.getenv()
[17:46:38.455]                 names <- names(envs)
[17:46:38.455]                 common <- intersect(names, old_names)
[17:46:38.455]                 added <- setdiff(names, old_names)
[17:46:38.455]                 removed <- setdiff(old_names, names)
[17:46:38.455]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.455]                   envs[common]]
[17:46:38.455]                 NAMES <- toupper(changed)
[17:46:38.455]                 args <- list()
[17:46:38.455]                 for (kk in seq_along(NAMES)) {
[17:46:38.455]                   name <- changed[[kk]]
[17:46:38.455]                   NAME <- NAMES[[kk]]
[17:46:38.455]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.455]                     next
[17:46:38.455]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.455]                 }
[17:46:38.455]                 NAMES <- toupper(added)
[17:46:38.455]                 for (kk in seq_along(NAMES)) {
[17:46:38.455]                   name <- added[[kk]]
[17:46:38.455]                   NAME <- NAMES[[kk]]
[17:46:38.455]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.455]                     next
[17:46:38.455]                   args[[name]] <- ""
[17:46:38.455]                 }
[17:46:38.455]                 NAMES <- toupper(removed)
[17:46:38.455]                 for (kk in seq_along(NAMES)) {
[17:46:38.455]                   name <- removed[[kk]]
[17:46:38.455]                   NAME <- NAMES[[kk]]
[17:46:38.455]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.455]                     next
[17:46:38.455]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.455]                 }
[17:46:38.455]                 if (length(args) > 0) 
[17:46:38.455]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.455]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.455]             }
[17:46:38.455]             else {
[17:46:38.455]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.455]             }
[17:46:38.455]             {
[17:46:38.455]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.455]                   0L) {
[17:46:38.455]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.455]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.455]                   base::options(opts)
[17:46:38.455]                 }
[17:46:38.455]                 {
[17:46:38.455]                   {
[17:46:38.455]                     NULL
[17:46:38.455]                     RNGkind("Mersenne-Twister")
[17:46:38.455]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:38.455]                       inherits = FALSE)
[17:46:38.455]                   }
[17:46:38.455]                   options(future.plan = NULL)
[17:46:38.455]                   if (is.na(NA_character_)) 
[17:46:38.455]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.455]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.455]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.455]                     .init = FALSE)
[17:46:38.455]                 }
[17:46:38.455]             }
[17:46:38.455]         }
[17:46:38.455]     })
[17:46:38.455]     if (TRUE) {
[17:46:38.455]         base::sink(type = "output", split = FALSE)
[17:46:38.455]         if (TRUE) {
[17:46:38.455]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.455]         }
[17:46:38.455]         else {
[17:46:38.455]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.455]         }
[17:46:38.455]         base::close(...future.stdout)
[17:46:38.455]         ...future.stdout <- NULL
[17:46:38.455]     }
[17:46:38.455]     ...future.result$conditions <- ...future.conditions
[17:46:38.455]     ...future.result$finished <- base::Sys.time()
[17:46:38.455]     ...future.result
[17:46:38.455] }
[17:46:38.457] assign_globals() ...
[17:46:38.457] List of 1
[17:46:38.457]  $ a: num 1
[17:46:38.457]  - attr(*, "where")=List of 1
[17:46:38.457]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.457]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.457]  - attr(*, "resolved")= logi FALSE
[17:46:38.457]  - attr(*, "total_size")= num 56
[17:46:38.457]  - attr(*, "already-done")= logi TRUE
[17:46:38.459] - copied ‘a’ to environment
[17:46:38.459] assign_globals() ... done
[17:46:38.459] plan(): Setting new future strategy stack:
[17:46:38.459] List of future strategies:
[17:46:38.459] 1. sequential:
[17:46:38.459]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.459]    - tweaked: FALSE
[17:46:38.459]    - call: NULL
[17:46:38.460] plan(): nbrOfWorkers() = 1
[17:46:38.460] plan(): Setting new future strategy stack:
[17:46:38.461] List of future strategies:
[17:46:38.461] 1. sequential:
[17:46:38.461]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.461]    - tweaked: FALSE
[17:46:38.461]    - call: plan(strategy)
[17:46:38.461] plan(): nbrOfWorkers() = 1
[17:46:38.461] SequentialFuture started (and completed)
[17:46:38.461] - Launch lazy future ... done
[17:46:38.461] run() for ‘SequentialFuture’ ... done
[17:46:38.462] getGlobalsAndPackages() ...
[17:46:38.462] Searching for globals...
[17:46:38.462] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.462] Searching for globals ... DONE
[17:46:38.463] Resolving globals: FALSE
[17:46:38.463] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.463] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.463] - globals: [1] ‘a’
[17:46:38.463] 
[17:46:38.464] getGlobalsAndPackages() ... DONE
[17:46:38.464] run() for ‘Future’ ...
[17:46:38.464] - state: ‘created’
[17:46:38.464] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:38.464] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:38.464] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:38.464]   - Field: ‘label’
[17:46:38.465]   - Field: ‘local’
[17:46:38.465]   - Field: ‘owner’
[17:46:38.465]   - Field: ‘envir’
[17:46:38.465]   - Field: ‘packages’
[17:46:38.465]   - Field: ‘gc’
[17:46:38.465]   - Field: ‘conditions’
[17:46:38.465]   - Field: ‘expr’
[17:46:38.465]   - Field: ‘uuid’
[17:46:38.465]   - Field: ‘seed’
[17:46:38.465]   - Field: ‘version’
[17:46:38.465]   - Field: ‘result’
[17:46:38.466]   - Field: ‘asynchronous’
[17:46:38.466]   - Field: ‘calls’
[17:46:38.466]   - Field: ‘globals’
[17:46:38.466]   - Field: ‘stdout’
[17:46:38.466]   - Field: ‘earlySignal’
[17:46:38.466]   - Field: ‘lazy’
[17:46:38.466]   - Field: ‘state’
[17:46:38.466] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:38.466] - Launch lazy future ...
[17:46:38.466] Packages needed by the future expression (n = 0): <none>
[17:46:38.467] Packages needed by future strategies (n = 0): <none>
[17:46:38.468] {
[17:46:38.468]     {
[17:46:38.468]         {
[17:46:38.468]             ...future.startTime <- base::Sys.time()
[17:46:38.468]             {
[17:46:38.468]                 {
[17:46:38.468]                   {
[17:46:38.468]                     base::local({
[17:46:38.468]                       has_future <- base::requireNamespace("future", 
[17:46:38.468]                         quietly = TRUE)
[17:46:38.468]                       if (has_future) {
[17:46:38.468]                         ns <- base::getNamespace("future")
[17:46:38.468]                         version <- ns[[".package"]][["version"]]
[17:46:38.468]                         if (is.null(version)) 
[17:46:38.468]                           version <- utils::packageVersion("future")
[17:46:38.468]                       }
[17:46:38.468]                       else {
[17:46:38.468]                         version <- NULL
[17:46:38.468]                       }
[17:46:38.468]                       if (!has_future || version < "1.8.0") {
[17:46:38.468]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.468]                           "", base::R.version$version.string), 
[17:46:38.468]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:38.468]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.468]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.468]                             "release", "version")], collapse = " "), 
[17:46:38.468]                           hostname = base::Sys.info()[["nodename"]])
[17:46:38.468]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.468]                           info)
[17:46:38.468]                         info <- base::paste(info, collapse = "; ")
[17:46:38.468]                         if (!has_future) {
[17:46:38.468]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.468]                             info)
[17:46:38.468]                         }
[17:46:38.468]                         else {
[17:46:38.468]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.468]                             info, version)
[17:46:38.468]                         }
[17:46:38.468]                         base::stop(msg)
[17:46:38.468]                       }
[17:46:38.468]                     })
[17:46:38.468]                   }
[17:46:38.468]                   ...future.strategy.old <- future::plan("list")
[17:46:38.468]                   options(future.plan = NULL)
[17:46:38.468]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.468]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.468]                 }
[17:46:38.468]                 ...future.workdir <- getwd()
[17:46:38.468]             }
[17:46:38.468]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.468]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.468]         }
[17:46:38.468]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.468]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.468]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.468]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.468]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.468]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.468]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.468]             base::names(...future.oldOptions))
[17:46:38.468]     }
[17:46:38.468]     if (FALSE) {
[17:46:38.468]     }
[17:46:38.468]     else {
[17:46:38.468]         if (TRUE) {
[17:46:38.468]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.468]                 open = "w")
[17:46:38.468]         }
[17:46:38.468]         else {
[17:46:38.468]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.468]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.468]         }
[17:46:38.468]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.468]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.468]             base::sink(type = "output", split = FALSE)
[17:46:38.468]             base::close(...future.stdout)
[17:46:38.468]         }, add = TRUE)
[17:46:38.468]     }
[17:46:38.468]     ...future.frame <- base::sys.nframe()
[17:46:38.468]     ...future.conditions <- base::list()
[17:46:38.468]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.468]     if (FALSE) {
[17:46:38.468]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.468]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.468]     }
[17:46:38.468]     ...future.result <- base::tryCatch({
[17:46:38.468]         base::withCallingHandlers({
[17:46:38.468]             ...future.value <- base::withVisible(base::local({
[17:46:38.468]                 2 * a
[17:46:38.468]             }))
[17:46:38.468]             future::FutureResult(value = ...future.value$value, 
[17:46:38.468]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.468]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.468]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.468]                     ...future.globalenv.names))
[17:46:38.468]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.468]         }, condition = base::local({
[17:46:38.468]             c <- base::c
[17:46:38.468]             inherits <- base::inherits
[17:46:38.468]             invokeRestart <- base::invokeRestart
[17:46:38.468]             length <- base::length
[17:46:38.468]             list <- base::list
[17:46:38.468]             seq.int <- base::seq.int
[17:46:38.468]             signalCondition <- base::signalCondition
[17:46:38.468]             sys.calls <- base::sys.calls
[17:46:38.468]             `[[` <- base::`[[`
[17:46:38.468]             `+` <- base::`+`
[17:46:38.468]             `<<-` <- base::`<<-`
[17:46:38.468]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.468]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.468]                   3L)]
[17:46:38.468]             }
[17:46:38.468]             function(cond) {
[17:46:38.468]                 is_error <- inherits(cond, "error")
[17:46:38.468]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.468]                   NULL)
[17:46:38.468]                 if (is_error) {
[17:46:38.468]                   sessionInformation <- function() {
[17:46:38.468]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.468]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.468]                       search = base::search(), system = base::Sys.info())
[17:46:38.468]                   }
[17:46:38.468]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.468]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.468]                     cond$call), session = sessionInformation(), 
[17:46:38.468]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.468]                   signalCondition(cond)
[17:46:38.468]                 }
[17:46:38.468]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.468]                 "immediateCondition"))) {
[17:46:38.468]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.468]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.468]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.468]                   if (TRUE && !signal) {
[17:46:38.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.468]                     {
[17:46:38.468]                       inherits <- base::inherits
[17:46:38.468]                       invokeRestart <- base::invokeRestart
[17:46:38.468]                       is.null <- base::is.null
[17:46:38.468]                       muffled <- FALSE
[17:46:38.468]                       if (inherits(cond, "message")) {
[17:46:38.468]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.468]                         if (muffled) 
[17:46:38.468]                           invokeRestart("muffleMessage")
[17:46:38.468]                       }
[17:46:38.468]                       else if (inherits(cond, "warning")) {
[17:46:38.468]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.468]                         if (muffled) 
[17:46:38.468]                           invokeRestart("muffleWarning")
[17:46:38.468]                       }
[17:46:38.468]                       else if (inherits(cond, "condition")) {
[17:46:38.468]                         if (!is.null(pattern)) {
[17:46:38.468]                           computeRestarts <- base::computeRestarts
[17:46:38.468]                           grepl <- base::grepl
[17:46:38.468]                           restarts <- computeRestarts(cond)
[17:46:38.468]                           for (restart in restarts) {
[17:46:38.468]                             name <- restart$name
[17:46:38.468]                             if (is.null(name)) 
[17:46:38.468]                               next
[17:46:38.468]                             if (!grepl(pattern, name)) 
[17:46:38.468]                               next
[17:46:38.468]                             invokeRestart(restart)
[17:46:38.468]                             muffled <- TRUE
[17:46:38.468]                             break
[17:46:38.468]                           }
[17:46:38.468]                         }
[17:46:38.468]                       }
[17:46:38.468]                       invisible(muffled)
[17:46:38.468]                     }
[17:46:38.468]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.468]                   }
[17:46:38.468]                 }
[17:46:38.468]                 else {
[17:46:38.468]                   if (TRUE) {
[17:46:38.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.468]                     {
[17:46:38.468]                       inherits <- base::inherits
[17:46:38.468]                       invokeRestart <- base::invokeRestart
[17:46:38.468]                       is.null <- base::is.null
[17:46:38.468]                       muffled <- FALSE
[17:46:38.468]                       if (inherits(cond, "message")) {
[17:46:38.468]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.468]                         if (muffled) 
[17:46:38.468]                           invokeRestart("muffleMessage")
[17:46:38.468]                       }
[17:46:38.468]                       else if (inherits(cond, "warning")) {
[17:46:38.468]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.468]                         if (muffled) 
[17:46:38.468]                           invokeRestart("muffleWarning")
[17:46:38.468]                       }
[17:46:38.468]                       else if (inherits(cond, "condition")) {
[17:46:38.468]                         if (!is.null(pattern)) {
[17:46:38.468]                           computeRestarts <- base::computeRestarts
[17:46:38.468]                           grepl <- base::grepl
[17:46:38.468]                           restarts <- computeRestarts(cond)
[17:46:38.468]                           for (restart in restarts) {
[17:46:38.468]                             name <- restart$name
[17:46:38.468]                             if (is.null(name)) 
[17:46:38.468]                               next
[17:46:38.468]                             if (!grepl(pattern, name)) 
[17:46:38.468]                               next
[17:46:38.468]                             invokeRestart(restart)
[17:46:38.468]                             muffled <- TRUE
[17:46:38.468]                             break
[17:46:38.468]                           }
[17:46:38.468]                         }
[17:46:38.468]                       }
[17:46:38.468]                       invisible(muffled)
[17:46:38.468]                     }
[17:46:38.468]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.468]                   }
[17:46:38.468]                 }
[17:46:38.468]             }
[17:46:38.468]         }))
[17:46:38.468]     }, error = function(ex) {
[17:46:38.468]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.468]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.468]                 ...future.rng), started = ...future.startTime, 
[17:46:38.468]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.468]             version = "1.8"), class = "FutureResult")
[17:46:38.468]     }, finally = {
[17:46:38.468]         if (!identical(...future.workdir, getwd())) 
[17:46:38.468]             setwd(...future.workdir)
[17:46:38.468]         {
[17:46:38.468]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.468]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.468]             }
[17:46:38.468]             base::options(...future.oldOptions)
[17:46:38.468]             if (.Platform$OS.type == "windows") {
[17:46:38.468]                 old_names <- names(...future.oldEnvVars)
[17:46:38.468]                 envs <- base::Sys.getenv()
[17:46:38.468]                 names <- names(envs)
[17:46:38.468]                 common <- intersect(names, old_names)
[17:46:38.468]                 added <- setdiff(names, old_names)
[17:46:38.468]                 removed <- setdiff(old_names, names)
[17:46:38.468]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.468]                   envs[common]]
[17:46:38.468]                 NAMES <- toupper(changed)
[17:46:38.468]                 args <- list()
[17:46:38.468]                 for (kk in seq_along(NAMES)) {
[17:46:38.468]                   name <- changed[[kk]]
[17:46:38.468]                   NAME <- NAMES[[kk]]
[17:46:38.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.468]                     next
[17:46:38.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.468]                 }
[17:46:38.468]                 NAMES <- toupper(added)
[17:46:38.468]                 for (kk in seq_along(NAMES)) {
[17:46:38.468]                   name <- added[[kk]]
[17:46:38.468]                   NAME <- NAMES[[kk]]
[17:46:38.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.468]                     next
[17:46:38.468]                   args[[name]] <- ""
[17:46:38.468]                 }
[17:46:38.468]                 NAMES <- toupper(removed)
[17:46:38.468]                 for (kk in seq_along(NAMES)) {
[17:46:38.468]                   name <- removed[[kk]]
[17:46:38.468]                   NAME <- NAMES[[kk]]
[17:46:38.468]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.468]                     next
[17:46:38.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.468]                 }
[17:46:38.468]                 if (length(args) > 0) 
[17:46:38.468]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.468]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.468]             }
[17:46:38.468]             else {
[17:46:38.468]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.468]             }
[17:46:38.468]             {
[17:46:38.468]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.468]                   0L) {
[17:46:38.468]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.468]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.468]                   base::options(opts)
[17:46:38.468]                 }
[17:46:38.468]                 {
[17:46:38.468]                   {
[17:46:38.468]                     NULL
[17:46:38.468]                     RNGkind("Mersenne-Twister")
[17:46:38.468]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:38.468]                       inherits = FALSE)
[17:46:38.468]                   }
[17:46:38.468]                   options(future.plan = NULL)
[17:46:38.468]                   if (is.na(NA_character_)) 
[17:46:38.468]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.468]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.468]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.468]                     .init = FALSE)
[17:46:38.468]                 }
[17:46:38.468]             }
[17:46:38.468]         }
[17:46:38.468]     })
[17:46:38.468]     if (TRUE) {
[17:46:38.468]         base::sink(type = "output", split = FALSE)
[17:46:38.468]         if (TRUE) {
[17:46:38.468]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.468]         }
[17:46:38.468]         else {
[17:46:38.468]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.468]         }
[17:46:38.468]         base::close(...future.stdout)
[17:46:38.468]         ...future.stdout <- NULL
[17:46:38.468]     }
[17:46:38.468]     ...future.result$conditions <- ...future.conditions
[17:46:38.468]     ...future.result$finished <- base::Sys.time()
[17:46:38.468]     ...future.result
[17:46:38.468] }
[17:46:38.470] assign_globals() ...
[17:46:38.470] List of 1
[17:46:38.470]  $ a: num 1
[17:46:38.470]  - attr(*, "where")=List of 1
[17:46:38.470]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.470]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.470]  - attr(*, "resolved")= logi FALSE
[17:46:38.470]  - attr(*, "total_size")= num 56
[17:46:38.470]  - attr(*, "already-done")= logi TRUE
[17:46:38.472] - copied ‘a’ to environment
[17:46:38.472] assign_globals() ... done
[17:46:38.473] plan(): Setting new future strategy stack:
[17:46:38.473] List of future strategies:
[17:46:38.473] 1. sequential:
[17:46:38.473]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.473]    - tweaked: FALSE
[17:46:38.473]    - call: NULL
[17:46:38.473] plan(): nbrOfWorkers() = 1
[17:46:38.474] plan(): Setting new future strategy stack:
[17:46:38.474] List of future strategies:
[17:46:38.474] 1. sequential:
[17:46:38.474]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.474]    - tweaked: FALSE
[17:46:38.474]    - call: plan(strategy)
[17:46:38.474] plan(): nbrOfWorkers() = 1
[17:46:38.474] SequentialFuture started (and completed)
[17:46:38.475] - Launch lazy future ... done
[17:46:38.475] run() for ‘SequentialFuture’ ... done
[17:46:38.475] getGlobalsAndPackages() ...
[17:46:38.475] Searching for globals...
[17:46:38.476] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.476] Searching for globals ... DONE
[17:46:38.476] Resolving globals: FALSE
[17:46:38.476] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.477] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.477] - globals: [1] ‘a’
[17:46:38.477] 
[17:46:38.477] getGlobalsAndPackages() ... DONE
[17:46:38.477] run() for ‘Future’ ...
[17:46:38.477] - state: ‘created’
[17:46:38.477] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:46:38.478] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:46:38.478] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:46:38.478]   - Field: ‘label’
[17:46:38.478]   - Field: ‘local’
[17:46:38.478]   - Field: ‘owner’
[17:46:38.478]   - Field: ‘envir’
[17:46:38.478]   - Field: ‘packages’
[17:46:38.478]   - Field: ‘gc’
[17:46:38.478]   - Field: ‘conditions’
[17:46:38.478]   - Field: ‘expr’
[17:46:38.478]   - Field: ‘uuid’
[17:46:38.479]   - Field: ‘seed’
[17:46:38.479]   - Field: ‘version’
[17:46:38.479]   - Field: ‘result’
[17:46:38.479]   - Field: ‘asynchronous’
[17:46:38.479]   - Field: ‘calls’
[17:46:38.479]   - Field: ‘globals’
[17:46:38.479]   - Field: ‘stdout’
[17:46:38.479]   - Field: ‘earlySignal’
[17:46:38.479]   - Field: ‘lazy’
[17:46:38.479]   - Field: ‘state’
[17:46:38.479] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:46:38.480] - Launch lazy future ...
[17:46:38.480] Packages needed by the future expression (n = 0): <none>
[17:46:38.480] Packages needed by future strategies (n = 0): <none>
[17:46:38.480] {
[17:46:38.480]     {
[17:46:38.480]         {
[17:46:38.480]             ...future.startTime <- base::Sys.time()
[17:46:38.480]             {
[17:46:38.480]                 {
[17:46:38.480]                   {
[17:46:38.480]                     base::local({
[17:46:38.480]                       has_future <- base::requireNamespace("future", 
[17:46:38.480]                         quietly = TRUE)
[17:46:38.480]                       if (has_future) {
[17:46:38.480]                         ns <- base::getNamespace("future")
[17:46:38.480]                         version <- ns[[".package"]][["version"]]
[17:46:38.480]                         if (is.null(version)) 
[17:46:38.480]                           version <- utils::packageVersion("future")
[17:46:38.480]                       }
[17:46:38.480]                       else {
[17:46:38.480]                         version <- NULL
[17:46:38.480]                       }
[17:46:38.480]                       if (!has_future || version < "1.8.0") {
[17:46:38.480]                         info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.480]                           "", base::R.version$version.string), 
[17:46:38.480]                           platform = base::sprintf("%s (%s-bit)", 
[17:46:38.480]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.480]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.480]                             "release", "version")], collapse = " "), 
[17:46:38.480]                           hostname = base::Sys.info()[["nodename"]])
[17:46:38.480]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.480]                           info)
[17:46:38.480]                         info <- base::paste(info, collapse = "; ")
[17:46:38.480]                         if (!has_future) {
[17:46:38.480]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.480]                             info)
[17:46:38.480]                         }
[17:46:38.480]                         else {
[17:46:38.480]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.480]                             info, version)
[17:46:38.480]                         }
[17:46:38.480]                         base::stop(msg)
[17:46:38.480]                       }
[17:46:38.480]                     })
[17:46:38.480]                   }
[17:46:38.480]                   ...future.strategy.old <- future::plan("list")
[17:46:38.480]                   options(future.plan = NULL)
[17:46:38.480]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.480]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.480]                 }
[17:46:38.480]                 ...future.workdir <- getwd()
[17:46:38.480]             }
[17:46:38.480]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.480]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.480]         }
[17:46:38.480]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.480]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.480]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.480]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.480]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.480]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.480]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.480]             base::names(...future.oldOptions))
[17:46:38.480]     }
[17:46:38.480]     if (FALSE) {
[17:46:38.480]     }
[17:46:38.480]     else {
[17:46:38.480]         if (TRUE) {
[17:46:38.480]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.480]                 open = "w")
[17:46:38.480]         }
[17:46:38.480]         else {
[17:46:38.480]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.480]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.480]         }
[17:46:38.480]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.480]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.480]             base::sink(type = "output", split = FALSE)
[17:46:38.480]             base::close(...future.stdout)
[17:46:38.480]         }, add = TRUE)
[17:46:38.480]     }
[17:46:38.480]     ...future.frame <- base::sys.nframe()
[17:46:38.480]     ...future.conditions <- base::list()
[17:46:38.480]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.480]     if (FALSE) {
[17:46:38.480]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.480]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.480]     }
[17:46:38.480]     ...future.result <- base::tryCatch({
[17:46:38.480]         base::withCallingHandlers({
[17:46:38.480]             ...future.value <- base::withVisible(base::local({
[17:46:38.480]                 2 * a
[17:46:38.480]             }))
[17:46:38.480]             future::FutureResult(value = ...future.value$value, 
[17:46:38.480]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.480]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.480]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.480]                     ...future.globalenv.names))
[17:46:38.480]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.480]         }, condition = base::local({
[17:46:38.480]             c <- base::c
[17:46:38.480]             inherits <- base::inherits
[17:46:38.480]             invokeRestart <- base::invokeRestart
[17:46:38.480]             length <- base::length
[17:46:38.480]             list <- base::list
[17:46:38.480]             seq.int <- base::seq.int
[17:46:38.480]             signalCondition <- base::signalCondition
[17:46:38.480]             sys.calls <- base::sys.calls
[17:46:38.480]             `[[` <- base::`[[`
[17:46:38.480]             `+` <- base::`+`
[17:46:38.480]             `<<-` <- base::`<<-`
[17:46:38.480]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.480]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.480]                   3L)]
[17:46:38.480]             }
[17:46:38.480]             function(cond) {
[17:46:38.480]                 is_error <- inherits(cond, "error")
[17:46:38.480]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.480]                   NULL)
[17:46:38.480]                 if (is_error) {
[17:46:38.480]                   sessionInformation <- function() {
[17:46:38.480]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.480]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.480]                       search = base::search(), system = base::Sys.info())
[17:46:38.480]                   }
[17:46:38.480]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.480]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.480]                     cond$call), session = sessionInformation(), 
[17:46:38.480]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.480]                   signalCondition(cond)
[17:46:38.480]                 }
[17:46:38.480]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.480]                 "immediateCondition"))) {
[17:46:38.480]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.480]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.480]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.480]                   if (TRUE && !signal) {
[17:46:38.480]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.480]                     {
[17:46:38.480]                       inherits <- base::inherits
[17:46:38.480]                       invokeRestart <- base::invokeRestart
[17:46:38.480]                       is.null <- base::is.null
[17:46:38.480]                       muffled <- FALSE
[17:46:38.480]                       if (inherits(cond, "message")) {
[17:46:38.480]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.480]                         if (muffled) 
[17:46:38.480]                           invokeRestart("muffleMessage")
[17:46:38.480]                       }
[17:46:38.480]                       else if (inherits(cond, "warning")) {
[17:46:38.480]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.480]                         if (muffled) 
[17:46:38.480]                           invokeRestart("muffleWarning")
[17:46:38.480]                       }
[17:46:38.480]                       else if (inherits(cond, "condition")) {
[17:46:38.480]                         if (!is.null(pattern)) {
[17:46:38.480]                           computeRestarts <- base::computeRestarts
[17:46:38.480]                           grepl <- base::grepl
[17:46:38.480]                           restarts <- computeRestarts(cond)
[17:46:38.480]                           for (restart in restarts) {
[17:46:38.480]                             name <- restart$name
[17:46:38.480]                             if (is.null(name)) 
[17:46:38.480]                               next
[17:46:38.480]                             if (!grepl(pattern, name)) 
[17:46:38.480]                               next
[17:46:38.480]                             invokeRestart(restart)
[17:46:38.480]                             muffled <- TRUE
[17:46:38.480]                             break
[17:46:38.480]                           }
[17:46:38.480]                         }
[17:46:38.480]                       }
[17:46:38.480]                       invisible(muffled)
[17:46:38.480]                     }
[17:46:38.480]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.480]                   }
[17:46:38.480]                 }
[17:46:38.480]                 else {
[17:46:38.480]                   if (TRUE) {
[17:46:38.480]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.480]                     {
[17:46:38.480]                       inherits <- base::inherits
[17:46:38.480]                       invokeRestart <- base::invokeRestart
[17:46:38.480]                       is.null <- base::is.null
[17:46:38.480]                       muffled <- FALSE
[17:46:38.480]                       if (inherits(cond, "message")) {
[17:46:38.480]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.480]                         if (muffled) 
[17:46:38.480]                           invokeRestart("muffleMessage")
[17:46:38.480]                       }
[17:46:38.480]                       else if (inherits(cond, "warning")) {
[17:46:38.480]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.480]                         if (muffled) 
[17:46:38.480]                           invokeRestart("muffleWarning")
[17:46:38.480]                       }
[17:46:38.480]                       else if (inherits(cond, "condition")) {
[17:46:38.480]                         if (!is.null(pattern)) {
[17:46:38.480]                           computeRestarts <- base::computeRestarts
[17:46:38.480]                           grepl <- base::grepl
[17:46:38.480]                           restarts <- computeRestarts(cond)
[17:46:38.480]                           for (restart in restarts) {
[17:46:38.480]                             name <- restart$name
[17:46:38.480]                             if (is.null(name)) 
[17:46:38.480]                               next
[17:46:38.480]                             if (!grepl(pattern, name)) 
[17:46:38.480]                               next
[17:46:38.480]                             invokeRestart(restart)
[17:46:38.480]                             muffled <- TRUE
[17:46:38.480]                             break
[17:46:38.480]                           }
[17:46:38.480]                         }
[17:46:38.480]                       }
[17:46:38.480]                       invisible(muffled)
[17:46:38.480]                     }
[17:46:38.480]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.480]                   }
[17:46:38.480]                 }
[17:46:38.480]             }
[17:46:38.480]         }))
[17:46:38.480]     }, error = function(ex) {
[17:46:38.480]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.480]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.480]                 ...future.rng), started = ...future.startTime, 
[17:46:38.480]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.480]             version = "1.8"), class = "FutureResult")
[17:46:38.480]     }, finally = {
[17:46:38.480]         if (!identical(...future.workdir, getwd())) 
[17:46:38.480]             setwd(...future.workdir)
[17:46:38.480]         {
[17:46:38.480]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.480]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.480]             }
[17:46:38.480]             base::options(...future.oldOptions)
[17:46:38.480]             if (.Platform$OS.type == "windows") {
[17:46:38.480]                 old_names <- names(...future.oldEnvVars)
[17:46:38.480]                 envs <- base::Sys.getenv()
[17:46:38.480]                 names <- names(envs)
[17:46:38.480]                 common <- intersect(names, old_names)
[17:46:38.480]                 added <- setdiff(names, old_names)
[17:46:38.480]                 removed <- setdiff(old_names, names)
[17:46:38.480]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.480]                   envs[common]]
[17:46:38.480]                 NAMES <- toupper(changed)
[17:46:38.480]                 args <- list()
[17:46:38.480]                 for (kk in seq_along(NAMES)) {
[17:46:38.480]                   name <- changed[[kk]]
[17:46:38.480]                   NAME <- NAMES[[kk]]
[17:46:38.480]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.480]                     next
[17:46:38.480]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.480]                 }
[17:46:38.480]                 NAMES <- toupper(added)
[17:46:38.480]                 for (kk in seq_along(NAMES)) {
[17:46:38.480]                   name <- added[[kk]]
[17:46:38.480]                   NAME <- NAMES[[kk]]
[17:46:38.480]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.480]                     next
[17:46:38.480]                   args[[name]] <- ""
[17:46:38.480]                 }
[17:46:38.480]                 NAMES <- toupper(removed)
[17:46:38.480]                 for (kk in seq_along(NAMES)) {
[17:46:38.480]                   name <- removed[[kk]]
[17:46:38.480]                   NAME <- NAMES[[kk]]
[17:46:38.480]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.480]                     next
[17:46:38.480]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.480]                 }
[17:46:38.480]                 if (length(args) > 0) 
[17:46:38.480]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.480]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.480]             }
[17:46:38.480]             else {
[17:46:38.480]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.480]             }
[17:46:38.480]             {
[17:46:38.480]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.480]                   0L) {
[17:46:38.480]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.480]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.480]                   base::options(opts)
[17:46:38.480]                 }
[17:46:38.480]                 {
[17:46:38.480]                   {
[17:46:38.480]                     NULL
[17:46:38.480]                     RNGkind("Mersenne-Twister")
[17:46:38.480]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:46:38.480]                       inherits = FALSE)
[17:46:38.480]                   }
[17:46:38.480]                   options(future.plan = NULL)
[17:46:38.480]                   if (is.na(NA_character_)) 
[17:46:38.480]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.480]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.480]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.480]                     .init = FALSE)
[17:46:38.480]                 }
[17:46:38.480]             }
[17:46:38.480]         }
[17:46:38.480]     })
[17:46:38.480]     if (TRUE) {
[17:46:38.480]         base::sink(type = "output", split = FALSE)
[17:46:38.480]         if (TRUE) {
[17:46:38.480]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.480]         }
[17:46:38.480]         else {
[17:46:38.480]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.480]         }
[17:46:38.480]         base::close(...future.stdout)
[17:46:38.480]         ...future.stdout <- NULL
[17:46:38.480]     }
[17:46:38.480]     ...future.result$conditions <- ...future.conditions
[17:46:38.480]     ...future.result$finished <- base::Sys.time()
[17:46:38.480]     ...future.result
[17:46:38.480] }
[17:46:38.482] assign_globals() ...
[17:46:38.482] List of 1
[17:46:38.482]  $ a: num 1
[17:46:38.482]  - attr(*, "where")=List of 1
[17:46:38.482]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.482]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.482]  - attr(*, "resolved")= logi FALSE
[17:46:38.482]  - attr(*, "total_size")= num 56
[17:46:38.482]  - attr(*, "already-done")= logi TRUE
[17:46:38.484] - copied ‘a’ to environment
[17:46:38.484] assign_globals() ... done
[17:46:38.484] plan(): Setting new future strategy stack:
[17:46:38.484] List of future strategies:
[17:46:38.484] 1. sequential:
[17:46:38.484]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.484]    - tweaked: FALSE
[17:46:38.484]    - call: NULL
[17:46:38.485] plan(): nbrOfWorkers() = 1
[17:46:38.486] plan(): Setting new future strategy stack:
[17:46:38.486] List of future strategies:
[17:46:38.486] 1. sequential:
[17:46:38.486]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.486]    - tweaked: FALSE
[17:46:38.486]    - call: plan(strategy)
[17:46:38.486] plan(): nbrOfWorkers() = 1
[17:46:38.486] SequentialFuture started (and completed)
[17:46:38.486] - Launch lazy future ... done
[17:46:38.486] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[17:46:38.491] plan(): Setting new future strategy stack:
[17:46:38.492] List of future strategies:
[17:46:38.492] 1. multicore:
[17:46:38.492]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:38.492]    - tweaked: FALSE
[17:46:38.492]    - call: plan(strategy)
[17:46:38.495] plan(): nbrOfWorkers() = 2
[17:46:38.496] getGlobalsAndPackages() ...
[17:46:38.496] Searching for globals...
[17:46:38.496] - globals found: [1] ‘{’
[17:46:38.496] Searching for globals ... DONE
[17:46:38.496] Resolving globals: FALSE
[17:46:38.497] 
[17:46:38.497] 
[17:46:38.497] getGlobalsAndPackages() ... DONE
[17:46:38.497] run() for ‘Future’ ...
[17:46:38.497] - state: ‘created’
[17:46:38.497] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:38.502] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:38.502] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:38.502]   - Field: ‘label’
[17:46:38.503]   - Field: ‘local’
[17:46:38.503]   - Field: ‘owner’
[17:46:38.503]   - Field: ‘envir’
[17:46:38.503]   - Field: ‘workers’
[17:46:38.503]   - Field: ‘packages’
[17:46:38.503]   - Field: ‘gc’
[17:46:38.503]   - Field: ‘job’
[17:46:38.503]   - Field: ‘conditions’
[17:46:38.503]   - Field: ‘expr’
[17:46:38.503]   - Field: ‘uuid’
[17:46:38.503]   - Field: ‘seed’
[17:46:38.504]   - Field: ‘version’
[17:46:38.504]   - Field: ‘result’
[17:46:38.504]   - Field: ‘asynchronous’
[17:46:38.504]   - Field: ‘calls’
[17:46:38.504]   - Field: ‘globals’
[17:46:38.504]   - Field: ‘stdout’
[17:46:38.504]   - Field: ‘earlySignal’
[17:46:38.504]   - Field: ‘lazy’
[17:46:38.504]   - Field: ‘state’
[17:46:38.504] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:38.504] - Launch lazy future ...
[17:46:38.505] Packages needed by the future expression (n = 0): <none>
[17:46:38.505] Packages needed by future strategies (n = 0): <none>
[17:46:38.506] {
[17:46:38.506]     {
[17:46:38.506]         {
[17:46:38.506]             ...future.startTime <- base::Sys.time()
[17:46:38.506]             {
[17:46:38.506]                 {
[17:46:38.506]                   {
[17:46:38.506]                     {
[17:46:38.506]                       base::local({
[17:46:38.506]                         has_future <- base::requireNamespace("future", 
[17:46:38.506]                           quietly = TRUE)
[17:46:38.506]                         if (has_future) {
[17:46:38.506]                           ns <- base::getNamespace("future")
[17:46:38.506]                           version <- ns[[".package"]][["version"]]
[17:46:38.506]                           if (is.null(version)) 
[17:46:38.506]                             version <- utils::packageVersion("future")
[17:46:38.506]                         }
[17:46:38.506]                         else {
[17:46:38.506]                           version <- NULL
[17:46:38.506]                         }
[17:46:38.506]                         if (!has_future || version < "1.8.0") {
[17:46:38.506]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.506]                             "", base::R.version$version.string), 
[17:46:38.506]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:38.506]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.506]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.506]                               "release", "version")], collapse = " "), 
[17:46:38.506]                             hostname = base::Sys.info()[["nodename"]])
[17:46:38.506]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.506]                             info)
[17:46:38.506]                           info <- base::paste(info, collapse = "; ")
[17:46:38.506]                           if (!has_future) {
[17:46:38.506]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.506]                               info)
[17:46:38.506]                           }
[17:46:38.506]                           else {
[17:46:38.506]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.506]                               info, version)
[17:46:38.506]                           }
[17:46:38.506]                           base::stop(msg)
[17:46:38.506]                         }
[17:46:38.506]                       })
[17:46:38.506]                     }
[17:46:38.506]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:38.506]                     base::options(mc.cores = 1L)
[17:46:38.506]                   }
[17:46:38.506]                   ...future.strategy.old <- future::plan("list")
[17:46:38.506]                   options(future.plan = NULL)
[17:46:38.506]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.506]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.506]                 }
[17:46:38.506]                 ...future.workdir <- getwd()
[17:46:38.506]             }
[17:46:38.506]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.506]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.506]         }
[17:46:38.506]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.506]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.506]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.506]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.506]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.506]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.506]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.506]             base::names(...future.oldOptions))
[17:46:38.506]     }
[17:46:38.506]     if (FALSE) {
[17:46:38.506]     }
[17:46:38.506]     else {
[17:46:38.506]         if (TRUE) {
[17:46:38.506]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.506]                 open = "w")
[17:46:38.506]         }
[17:46:38.506]         else {
[17:46:38.506]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.506]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.506]         }
[17:46:38.506]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.506]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.506]             base::sink(type = "output", split = FALSE)
[17:46:38.506]             base::close(...future.stdout)
[17:46:38.506]         }, add = TRUE)
[17:46:38.506]     }
[17:46:38.506]     ...future.frame <- base::sys.nframe()
[17:46:38.506]     ...future.conditions <- base::list()
[17:46:38.506]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.506]     if (FALSE) {
[17:46:38.506]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.506]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.506]     }
[17:46:38.506]     ...future.result <- base::tryCatch({
[17:46:38.506]         base::withCallingHandlers({
[17:46:38.506]             ...future.value <- base::withVisible(base::local({
[17:46:38.506]                 withCallingHandlers({
[17:46:38.506]                   {
[17:46:38.506]                     2
[17:46:38.506]                   }
[17:46:38.506]                 }, immediateCondition = function(cond) {
[17:46:38.506]                   save_rds <- function (object, pathname, ...) 
[17:46:38.506]                   {
[17:46:38.506]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:38.506]                     if (file_test("-f", pathname_tmp)) {
[17:46:38.506]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.506]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:38.506]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.506]                         fi_tmp[["mtime"]])
[17:46:38.506]                     }
[17:46:38.506]                     tryCatch({
[17:46:38.506]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:38.506]                     }, error = function(ex) {
[17:46:38.506]                       msg <- conditionMessage(ex)
[17:46:38.506]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.506]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:38.506]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.506]                         fi_tmp[["mtime"]], msg)
[17:46:38.506]                       ex$message <- msg
[17:46:38.506]                       stop(ex)
[17:46:38.506]                     })
[17:46:38.506]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:38.506]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:38.506]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:38.506]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.506]                       fi <- file.info(pathname)
[17:46:38.506]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:38.506]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.506]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:38.506]                         fi[["size"]], fi[["mtime"]])
[17:46:38.506]                       stop(msg)
[17:46:38.506]                     }
[17:46:38.506]                     invisible(pathname)
[17:46:38.506]                   }
[17:46:38.506]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:38.506]                     rootPath = tempdir()) 
[17:46:38.506]                   {
[17:46:38.506]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:38.506]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:38.506]                       tmpdir = path, fileext = ".rds")
[17:46:38.506]                     save_rds(obj, file)
[17:46:38.506]                   }
[17:46:38.506]                   saveImmediateCondition(cond, path = "/tmp/RtmpPsSrrR/.future/immediateConditions")
[17:46:38.506]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.506]                   {
[17:46:38.506]                     inherits <- base::inherits
[17:46:38.506]                     invokeRestart <- base::invokeRestart
[17:46:38.506]                     is.null <- base::is.null
[17:46:38.506]                     muffled <- FALSE
[17:46:38.506]                     if (inherits(cond, "message")) {
[17:46:38.506]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:38.506]                       if (muffled) 
[17:46:38.506]                         invokeRestart("muffleMessage")
[17:46:38.506]                     }
[17:46:38.506]                     else if (inherits(cond, "warning")) {
[17:46:38.506]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:38.506]                       if (muffled) 
[17:46:38.506]                         invokeRestart("muffleWarning")
[17:46:38.506]                     }
[17:46:38.506]                     else if (inherits(cond, "condition")) {
[17:46:38.506]                       if (!is.null(pattern)) {
[17:46:38.506]                         computeRestarts <- base::computeRestarts
[17:46:38.506]                         grepl <- base::grepl
[17:46:38.506]                         restarts <- computeRestarts(cond)
[17:46:38.506]                         for (restart in restarts) {
[17:46:38.506]                           name <- restart$name
[17:46:38.506]                           if (is.null(name)) 
[17:46:38.506]                             next
[17:46:38.506]                           if (!grepl(pattern, name)) 
[17:46:38.506]                             next
[17:46:38.506]                           invokeRestart(restart)
[17:46:38.506]                           muffled <- TRUE
[17:46:38.506]                           break
[17:46:38.506]                         }
[17:46:38.506]                       }
[17:46:38.506]                     }
[17:46:38.506]                     invisible(muffled)
[17:46:38.506]                   }
[17:46:38.506]                   muffleCondition(cond)
[17:46:38.506]                 })
[17:46:38.506]             }))
[17:46:38.506]             future::FutureResult(value = ...future.value$value, 
[17:46:38.506]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.506]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.506]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.506]                     ...future.globalenv.names))
[17:46:38.506]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.506]         }, condition = base::local({
[17:46:38.506]             c <- base::c
[17:46:38.506]             inherits <- base::inherits
[17:46:38.506]             invokeRestart <- base::invokeRestart
[17:46:38.506]             length <- base::length
[17:46:38.506]             list <- base::list
[17:46:38.506]             seq.int <- base::seq.int
[17:46:38.506]             signalCondition <- base::signalCondition
[17:46:38.506]             sys.calls <- base::sys.calls
[17:46:38.506]             `[[` <- base::`[[`
[17:46:38.506]             `+` <- base::`+`
[17:46:38.506]             `<<-` <- base::`<<-`
[17:46:38.506]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.506]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.506]                   3L)]
[17:46:38.506]             }
[17:46:38.506]             function(cond) {
[17:46:38.506]                 is_error <- inherits(cond, "error")
[17:46:38.506]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.506]                   NULL)
[17:46:38.506]                 if (is_error) {
[17:46:38.506]                   sessionInformation <- function() {
[17:46:38.506]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.506]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.506]                       search = base::search(), system = base::Sys.info())
[17:46:38.506]                   }
[17:46:38.506]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.506]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.506]                     cond$call), session = sessionInformation(), 
[17:46:38.506]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.506]                   signalCondition(cond)
[17:46:38.506]                 }
[17:46:38.506]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.506]                 "immediateCondition"))) {
[17:46:38.506]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.506]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.506]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.506]                   if (TRUE && !signal) {
[17:46:38.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.506]                     {
[17:46:38.506]                       inherits <- base::inherits
[17:46:38.506]                       invokeRestart <- base::invokeRestart
[17:46:38.506]                       is.null <- base::is.null
[17:46:38.506]                       muffled <- FALSE
[17:46:38.506]                       if (inherits(cond, "message")) {
[17:46:38.506]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.506]                         if (muffled) 
[17:46:38.506]                           invokeRestart("muffleMessage")
[17:46:38.506]                       }
[17:46:38.506]                       else if (inherits(cond, "warning")) {
[17:46:38.506]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.506]                         if (muffled) 
[17:46:38.506]                           invokeRestart("muffleWarning")
[17:46:38.506]                       }
[17:46:38.506]                       else if (inherits(cond, "condition")) {
[17:46:38.506]                         if (!is.null(pattern)) {
[17:46:38.506]                           computeRestarts <- base::computeRestarts
[17:46:38.506]                           grepl <- base::grepl
[17:46:38.506]                           restarts <- computeRestarts(cond)
[17:46:38.506]                           for (restart in restarts) {
[17:46:38.506]                             name <- restart$name
[17:46:38.506]                             if (is.null(name)) 
[17:46:38.506]                               next
[17:46:38.506]                             if (!grepl(pattern, name)) 
[17:46:38.506]                               next
[17:46:38.506]                             invokeRestart(restart)
[17:46:38.506]                             muffled <- TRUE
[17:46:38.506]                             break
[17:46:38.506]                           }
[17:46:38.506]                         }
[17:46:38.506]                       }
[17:46:38.506]                       invisible(muffled)
[17:46:38.506]                     }
[17:46:38.506]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.506]                   }
[17:46:38.506]                 }
[17:46:38.506]                 else {
[17:46:38.506]                   if (TRUE) {
[17:46:38.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.506]                     {
[17:46:38.506]                       inherits <- base::inherits
[17:46:38.506]                       invokeRestart <- base::invokeRestart
[17:46:38.506]                       is.null <- base::is.null
[17:46:38.506]                       muffled <- FALSE
[17:46:38.506]                       if (inherits(cond, "message")) {
[17:46:38.506]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.506]                         if (muffled) 
[17:46:38.506]                           invokeRestart("muffleMessage")
[17:46:38.506]                       }
[17:46:38.506]                       else if (inherits(cond, "warning")) {
[17:46:38.506]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.506]                         if (muffled) 
[17:46:38.506]                           invokeRestart("muffleWarning")
[17:46:38.506]                       }
[17:46:38.506]                       else if (inherits(cond, "condition")) {
[17:46:38.506]                         if (!is.null(pattern)) {
[17:46:38.506]                           computeRestarts <- base::computeRestarts
[17:46:38.506]                           grepl <- base::grepl
[17:46:38.506]                           restarts <- computeRestarts(cond)
[17:46:38.506]                           for (restart in restarts) {
[17:46:38.506]                             name <- restart$name
[17:46:38.506]                             if (is.null(name)) 
[17:46:38.506]                               next
[17:46:38.506]                             if (!grepl(pattern, name)) 
[17:46:38.506]                               next
[17:46:38.506]                             invokeRestart(restart)
[17:46:38.506]                             muffled <- TRUE
[17:46:38.506]                             break
[17:46:38.506]                           }
[17:46:38.506]                         }
[17:46:38.506]                       }
[17:46:38.506]                       invisible(muffled)
[17:46:38.506]                     }
[17:46:38.506]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.506]                   }
[17:46:38.506]                 }
[17:46:38.506]             }
[17:46:38.506]         }))
[17:46:38.506]     }, error = function(ex) {
[17:46:38.506]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.506]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.506]                 ...future.rng), started = ...future.startTime, 
[17:46:38.506]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.506]             version = "1.8"), class = "FutureResult")
[17:46:38.506]     }, finally = {
[17:46:38.506]         if (!identical(...future.workdir, getwd())) 
[17:46:38.506]             setwd(...future.workdir)
[17:46:38.506]         {
[17:46:38.506]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.506]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.506]             }
[17:46:38.506]             base::options(...future.oldOptions)
[17:46:38.506]             if (.Platform$OS.type == "windows") {
[17:46:38.506]                 old_names <- names(...future.oldEnvVars)
[17:46:38.506]                 envs <- base::Sys.getenv()
[17:46:38.506]                 names <- names(envs)
[17:46:38.506]                 common <- intersect(names, old_names)
[17:46:38.506]                 added <- setdiff(names, old_names)
[17:46:38.506]                 removed <- setdiff(old_names, names)
[17:46:38.506]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.506]                   envs[common]]
[17:46:38.506]                 NAMES <- toupper(changed)
[17:46:38.506]                 args <- list()
[17:46:38.506]                 for (kk in seq_along(NAMES)) {
[17:46:38.506]                   name <- changed[[kk]]
[17:46:38.506]                   NAME <- NAMES[[kk]]
[17:46:38.506]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.506]                     next
[17:46:38.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.506]                 }
[17:46:38.506]                 NAMES <- toupper(added)
[17:46:38.506]                 for (kk in seq_along(NAMES)) {
[17:46:38.506]                   name <- added[[kk]]
[17:46:38.506]                   NAME <- NAMES[[kk]]
[17:46:38.506]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.506]                     next
[17:46:38.506]                   args[[name]] <- ""
[17:46:38.506]                 }
[17:46:38.506]                 NAMES <- toupper(removed)
[17:46:38.506]                 for (kk in seq_along(NAMES)) {
[17:46:38.506]                   name <- removed[[kk]]
[17:46:38.506]                   NAME <- NAMES[[kk]]
[17:46:38.506]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.506]                     next
[17:46:38.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.506]                 }
[17:46:38.506]                 if (length(args) > 0) 
[17:46:38.506]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.506]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.506]             }
[17:46:38.506]             else {
[17:46:38.506]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.506]             }
[17:46:38.506]             {
[17:46:38.506]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.506]                   0L) {
[17:46:38.506]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.506]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.506]                   base::options(opts)
[17:46:38.506]                 }
[17:46:38.506]                 {
[17:46:38.506]                   {
[17:46:38.506]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:38.506]                     NULL
[17:46:38.506]                   }
[17:46:38.506]                   options(future.plan = NULL)
[17:46:38.506]                   if (is.na(NA_character_)) 
[17:46:38.506]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.506]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.506]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.506]                     .init = FALSE)
[17:46:38.506]                 }
[17:46:38.506]             }
[17:46:38.506]         }
[17:46:38.506]     })
[17:46:38.506]     if (TRUE) {
[17:46:38.506]         base::sink(type = "output", split = FALSE)
[17:46:38.506]         if (TRUE) {
[17:46:38.506]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.506]         }
[17:46:38.506]         else {
[17:46:38.506]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.506]         }
[17:46:38.506]         base::close(...future.stdout)
[17:46:38.506]         ...future.stdout <- NULL
[17:46:38.506]     }
[17:46:38.506]     ...future.result$conditions <- ...future.conditions
[17:46:38.506]     ...future.result$finished <- base::Sys.time()
[17:46:38.506]     ...future.result
[17:46:38.506] }
[17:46:38.508] requestCore(): workers = 2
[17:46:38.511] MulticoreFuture started
[17:46:38.511] - Launch lazy future ... done
[17:46:38.511] plan(): Setting new future strategy stack:
[17:46:38.511] run() for ‘MulticoreFuture’ ... done
[17:46:38.512] getGlobalsAndPackages() ...
[17:46:38.512] Searching for globals...
[17:46:38.512] List of future strategies:
[17:46:38.512] 1. sequential:
[17:46:38.512]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.512]    - tweaked: FALSE
[17:46:38.512]    - call: NULL
[17:46:38.513] plan(): nbrOfWorkers() = 1
[17:46:38.514] - globals found: [1] ‘{’
[17:46:38.514] Searching for globals ... DONE
[17:46:38.514] plan(): Setting new future strategy stack:
[17:46:38.514] Resolving globals: FALSE
[17:46:38.515] List of future strategies:
[17:46:38.515] 1. multicore:
[17:46:38.515]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:38.515]    - tweaked: FALSE
[17:46:38.515]    - call: plan(strategy)
[17:46:38.515] 
[17:46:38.515] 
[17:46:38.515] getGlobalsAndPackages() ... DONE
[17:46:38.516] run() for ‘Future’ ...
[17:46:38.516] - state: ‘created’
[17:46:38.516] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:38.520] plan(): nbrOfWorkers() = 2
[17:46:38.521] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:38.521] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:38.522]   - Field: ‘label’
[17:46:38.522]   - Field: ‘local’
[17:46:38.522]   - Field: ‘owner’
[17:46:38.522]   - Field: ‘envir’
[17:46:38.522]   - Field: ‘workers’
[17:46:38.522]   - Field: ‘packages’
[17:46:38.522]   - Field: ‘gc’
[17:46:38.523]   - Field: ‘job’
[17:46:38.523]   - Field: ‘conditions’
[17:46:38.523]   - Field: ‘expr’
[17:46:38.523]   - Field: ‘uuid’
[17:46:38.523]   - Field: ‘seed’
[17:46:38.523]   - Field: ‘version’
[17:46:38.523]   - Field: ‘result’
[17:46:38.524]   - Field: ‘asynchronous’
[17:46:38.524]   - Field: ‘calls’
[17:46:38.524]   - Field: ‘globals’
[17:46:38.524]   - Field: ‘stdout’
[17:46:38.524]   - Field: ‘earlySignal’
[17:46:38.524]   - Field: ‘lazy’
[17:46:38.524]   - Field: ‘state’
[17:46:38.525] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:38.525] - Launch lazy future ...
[17:46:38.525] Packages needed by the future expression (n = 0): <none>
[17:46:38.525] Packages needed by future strategies (n = 0): <none>
[17:46:38.526] {
[17:46:38.526]     {
[17:46:38.526]         {
[17:46:38.526]             ...future.startTime <- base::Sys.time()
[17:46:38.526]             {
[17:46:38.526]                 {
[17:46:38.526]                   {
[17:46:38.526]                     {
[17:46:38.526]                       base::local({
[17:46:38.526]                         has_future <- base::requireNamespace("future", 
[17:46:38.526]                           quietly = TRUE)
[17:46:38.526]                         if (has_future) {
[17:46:38.526]                           ns <- base::getNamespace("future")
[17:46:38.526]                           version <- ns[[".package"]][["version"]]
[17:46:38.526]                           if (is.null(version)) 
[17:46:38.526]                             version <- utils::packageVersion("future")
[17:46:38.526]                         }
[17:46:38.526]                         else {
[17:46:38.526]                           version <- NULL
[17:46:38.526]                         }
[17:46:38.526]                         if (!has_future || version < "1.8.0") {
[17:46:38.526]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.526]                             "", base::R.version$version.string), 
[17:46:38.526]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:38.526]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.526]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.526]                               "release", "version")], collapse = " "), 
[17:46:38.526]                             hostname = base::Sys.info()[["nodename"]])
[17:46:38.526]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.526]                             info)
[17:46:38.526]                           info <- base::paste(info, collapse = "; ")
[17:46:38.526]                           if (!has_future) {
[17:46:38.526]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.526]                               info)
[17:46:38.526]                           }
[17:46:38.526]                           else {
[17:46:38.526]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.526]                               info, version)
[17:46:38.526]                           }
[17:46:38.526]                           base::stop(msg)
[17:46:38.526]                         }
[17:46:38.526]                       })
[17:46:38.526]                     }
[17:46:38.526]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:38.526]                     base::options(mc.cores = 1L)
[17:46:38.526]                   }
[17:46:38.526]                   ...future.strategy.old <- future::plan("list")
[17:46:38.526]                   options(future.plan = NULL)
[17:46:38.526]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.526]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.526]                 }
[17:46:38.526]                 ...future.workdir <- getwd()
[17:46:38.526]             }
[17:46:38.526]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.526]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.526]         }
[17:46:38.526]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.526]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.526]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.526]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.526]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.526]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.526]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.526]             base::names(...future.oldOptions))
[17:46:38.526]     }
[17:46:38.526]     if (FALSE) {
[17:46:38.526]     }
[17:46:38.526]     else {
[17:46:38.526]         if (TRUE) {
[17:46:38.526]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.526]                 open = "w")
[17:46:38.526]         }
[17:46:38.526]         else {
[17:46:38.526]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.526]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.526]         }
[17:46:38.526]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.526]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.526]             base::sink(type = "output", split = FALSE)
[17:46:38.526]             base::close(...future.stdout)
[17:46:38.526]         }, add = TRUE)
[17:46:38.526]     }
[17:46:38.526]     ...future.frame <- base::sys.nframe()
[17:46:38.526]     ...future.conditions <- base::list()
[17:46:38.526]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.526]     if (FALSE) {
[17:46:38.526]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.526]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.526]     }
[17:46:38.526]     ...future.result <- base::tryCatch({
[17:46:38.526]         base::withCallingHandlers({
[17:46:38.526]             ...future.value <- base::withVisible(base::local({
[17:46:38.526]                 withCallingHandlers({
[17:46:38.526]                   {
[17:46:38.526]                     4
[17:46:38.526]                   }
[17:46:38.526]                 }, immediateCondition = function(cond) {
[17:46:38.526]                   save_rds <- function (object, pathname, ...) 
[17:46:38.526]                   {
[17:46:38.526]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:38.526]                     if (file_test("-f", pathname_tmp)) {
[17:46:38.526]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.526]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:38.526]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.526]                         fi_tmp[["mtime"]])
[17:46:38.526]                     }
[17:46:38.526]                     tryCatch({
[17:46:38.526]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:38.526]                     }, error = function(ex) {
[17:46:38.526]                       msg <- conditionMessage(ex)
[17:46:38.526]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.526]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:38.526]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.526]                         fi_tmp[["mtime"]], msg)
[17:46:38.526]                       ex$message <- msg
[17:46:38.526]                       stop(ex)
[17:46:38.526]                     })
[17:46:38.526]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:38.526]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:38.526]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:38.526]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.526]                       fi <- file.info(pathname)
[17:46:38.526]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:38.526]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.526]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:38.526]                         fi[["size"]], fi[["mtime"]])
[17:46:38.526]                       stop(msg)
[17:46:38.526]                     }
[17:46:38.526]                     invisible(pathname)
[17:46:38.526]                   }
[17:46:38.526]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:38.526]                     rootPath = tempdir()) 
[17:46:38.526]                   {
[17:46:38.526]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:38.526]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:38.526]                       tmpdir = path, fileext = ".rds")
[17:46:38.526]                     save_rds(obj, file)
[17:46:38.526]                   }
[17:46:38.526]                   saveImmediateCondition(cond, path = "/tmp/RtmpPsSrrR/.future/immediateConditions")
[17:46:38.526]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.526]                   {
[17:46:38.526]                     inherits <- base::inherits
[17:46:38.526]                     invokeRestart <- base::invokeRestart
[17:46:38.526]                     is.null <- base::is.null
[17:46:38.526]                     muffled <- FALSE
[17:46:38.526]                     if (inherits(cond, "message")) {
[17:46:38.526]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:38.526]                       if (muffled) 
[17:46:38.526]                         invokeRestart("muffleMessage")
[17:46:38.526]                     }
[17:46:38.526]                     else if (inherits(cond, "warning")) {
[17:46:38.526]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:38.526]                       if (muffled) 
[17:46:38.526]                         invokeRestart("muffleWarning")
[17:46:38.526]                     }
[17:46:38.526]                     else if (inherits(cond, "condition")) {
[17:46:38.526]                       if (!is.null(pattern)) {
[17:46:38.526]                         computeRestarts <- base::computeRestarts
[17:46:38.526]                         grepl <- base::grepl
[17:46:38.526]                         restarts <- computeRestarts(cond)
[17:46:38.526]                         for (restart in restarts) {
[17:46:38.526]                           name <- restart$name
[17:46:38.526]                           if (is.null(name)) 
[17:46:38.526]                             next
[17:46:38.526]                           if (!grepl(pattern, name)) 
[17:46:38.526]                             next
[17:46:38.526]                           invokeRestart(restart)
[17:46:38.526]                           muffled <- TRUE
[17:46:38.526]                           break
[17:46:38.526]                         }
[17:46:38.526]                       }
[17:46:38.526]                     }
[17:46:38.526]                     invisible(muffled)
[17:46:38.526]                   }
[17:46:38.526]                   muffleCondition(cond)
[17:46:38.526]                 })
[17:46:38.526]             }))
[17:46:38.526]             future::FutureResult(value = ...future.value$value, 
[17:46:38.526]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.526]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.526]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.526]                     ...future.globalenv.names))
[17:46:38.526]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.526]         }, condition = base::local({
[17:46:38.526]             c <- base::c
[17:46:38.526]             inherits <- base::inherits
[17:46:38.526]             invokeRestart <- base::invokeRestart
[17:46:38.526]             length <- base::length
[17:46:38.526]             list <- base::list
[17:46:38.526]             seq.int <- base::seq.int
[17:46:38.526]             signalCondition <- base::signalCondition
[17:46:38.526]             sys.calls <- base::sys.calls
[17:46:38.526]             `[[` <- base::`[[`
[17:46:38.526]             `+` <- base::`+`
[17:46:38.526]             `<<-` <- base::`<<-`
[17:46:38.526]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.526]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.526]                   3L)]
[17:46:38.526]             }
[17:46:38.526]             function(cond) {
[17:46:38.526]                 is_error <- inherits(cond, "error")
[17:46:38.526]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.526]                   NULL)
[17:46:38.526]                 if (is_error) {
[17:46:38.526]                   sessionInformation <- function() {
[17:46:38.526]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.526]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.526]                       search = base::search(), system = base::Sys.info())
[17:46:38.526]                   }
[17:46:38.526]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.526]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.526]                     cond$call), session = sessionInformation(), 
[17:46:38.526]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.526]                   signalCondition(cond)
[17:46:38.526]                 }
[17:46:38.526]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.526]                 "immediateCondition"))) {
[17:46:38.526]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.526]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.526]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.526]                   if (TRUE && !signal) {
[17:46:38.526]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.526]                     {
[17:46:38.526]                       inherits <- base::inherits
[17:46:38.526]                       invokeRestart <- base::invokeRestart
[17:46:38.526]                       is.null <- base::is.null
[17:46:38.526]                       muffled <- FALSE
[17:46:38.526]                       if (inherits(cond, "message")) {
[17:46:38.526]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.526]                         if (muffled) 
[17:46:38.526]                           invokeRestart("muffleMessage")
[17:46:38.526]                       }
[17:46:38.526]                       else if (inherits(cond, "warning")) {
[17:46:38.526]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.526]                         if (muffled) 
[17:46:38.526]                           invokeRestart("muffleWarning")
[17:46:38.526]                       }
[17:46:38.526]                       else if (inherits(cond, "condition")) {
[17:46:38.526]                         if (!is.null(pattern)) {
[17:46:38.526]                           computeRestarts <- base::computeRestarts
[17:46:38.526]                           grepl <- base::grepl
[17:46:38.526]                           restarts <- computeRestarts(cond)
[17:46:38.526]                           for (restart in restarts) {
[17:46:38.526]                             name <- restart$name
[17:46:38.526]                             if (is.null(name)) 
[17:46:38.526]                               next
[17:46:38.526]                             if (!grepl(pattern, name)) 
[17:46:38.526]                               next
[17:46:38.526]                             invokeRestart(restart)
[17:46:38.526]                             muffled <- TRUE
[17:46:38.526]                             break
[17:46:38.526]                           }
[17:46:38.526]                         }
[17:46:38.526]                       }
[17:46:38.526]                       invisible(muffled)
[17:46:38.526]                     }
[17:46:38.526]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.526]                   }
[17:46:38.526]                 }
[17:46:38.526]                 else {
[17:46:38.526]                   if (TRUE) {
[17:46:38.526]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.526]                     {
[17:46:38.526]                       inherits <- base::inherits
[17:46:38.526]                       invokeRestart <- base::invokeRestart
[17:46:38.526]                       is.null <- base::is.null
[17:46:38.526]                       muffled <- FALSE
[17:46:38.526]                       if (inherits(cond, "message")) {
[17:46:38.526]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.526]                         if (muffled) 
[17:46:38.526]                           invokeRestart("muffleMessage")
[17:46:38.526]                       }
[17:46:38.526]                       else if (inherits(cond, "warning")) {
[17:46:38.526]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.526]                         if (muffled) 
[17:46:38.526]                           invokeRestart("muffleWarning")
[17:46:38.526]                       }
[17:46:38.526]                       else if (inherits(cond, "condition")) {
[17:46:38.526]                         if (!is.null(pattern)) {
[17:46:38.526]                           computeRestarts <- base::computeRestarts
[17:46:38.526]                           grepl <- base::grepl
[17:46:38.526]                           restarts <- computeRestarts(cond)
[17:46:38.526]                           for (restart in restarts) {
[17:46:38.526]                             name <- restart$name
[17:46:38.526]                             if (is.null(name)) 
[17:46:38.526]                               next
[17:46:38.526]                             if (!grepl(pattern, name)) 
[17:46:38.526]                               next
[17:46:38.526]                             invokeRestart(restart)
[17:46:38.526]                             muffled <- TRUE
[17:46:38.526]                             break
[17:46:38.526]                           }
[17:46:38.526]                         }
[17:46:38.526]                       }
[17:46:38.526]                       invisible(muffled)
[17:46:38.526]                     }
[17:46:38.526]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.526]                   }
[17:46:38.526]                 }
[17:46:38.526]             }
[17:46:38.526]         }))
[17:46:38.526]     }, error = function(ex) {
[17:46:38.526]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.526]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.526]                 ...future.rng), started = ...future.startTime, 
[17:46:38.526]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.526]             version = "1.8"), class = "FutureResult")
[17:46:38.526]     }, finally = {
[17:46:38.526]         if (!identical(...future.workdir, getwd())) 
[17:46:38.526]             setwd(...future.workdir)
[17:46:38.526]         {
[17:46:38.526]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.526]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.526]             }
[17:46:38.526]             base::options(...future.oldOptions)
[17:46:38.526]             if (.Platform$OS.type == "windows") {
[17:46:38.526]                 old_names <- names(...future.oldEnvVars)
[17:46:38.526]                 envs <- base::Sys.getenv()
[17:46:38.526]                 names <- names(envs)
[17:46:38.526]                 common <- intersect(names, old_names)
[17:46:38.526]                 added <- setdiff(names, old_names)
[17:46:38.526]                 removed <- setdiff(old_names, names)
[17:46:38.526]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.526]                   envs[common]]
[17:46:38.526]                 NAMES <- toupper(changed)
[17:46:38.526]                 args <- list()
[17:46:38.526]                 for (kk in seq_along(NAMES)) {
[17:46:38.526]                   name <- changed[[kk]]
[17:46:38.526]                   NAME <- NAMES[[kk]]
[17:46:38.526]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.526]                     next
[17:46:38.526]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.526]                 }
[17:46:38.526]                 NAMES <- toupper(added)
[17:46:38.526]                 for (kk in seq_along(NAMES)) {
[17:46:38.526]                   name <- added[[kk]]
[17:46:38.526]                   NAME <- NAMES[[kk]]
[17:46:38.526]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.526]                     next
[17:46:38.526]                   args[[name]] <- ""
[17:46:38.526]                 }
[17:46:38.526]                 NAMES <- toupper(removed)
[17:46:38.526]                 for (kk in seq_along(NAMES)) {
[17:46:38.526]                   name <- removed[[kk]]
[17:46:38.526]                   NAME <- NAMES[[kk]]
[17:46:38.526]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.526]                     next
[17:46:38.526]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.526]                 }
[17:46:38.526]                 if (length(args) > 0) 
[17:46:38.526]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.526]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.526]             }
[17:46:38.526]             else {
[17:46:38.526]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.526]             }
[17:46:38.526]             {
[17:46:38.526]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.526]                   0L) {
[17:46:38.526]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.526]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.526]                   base::options(opts)
[17:46:38.526]                 }
[17:46:38.526]                 {
[17:46:38.526]                   {
[17:46:38.526]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:38.526]                     NULL
[17:46:38.526]                   }
[17:46:38.526]                   options(future.plan = NULL)
[17:46:38.526]                   if (is.na(NA_character_)) 
[17:46:38.526]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.526]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.526]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.526]                     .init = FALSE)
[17:46:38.526]                 }
[17:46:38.526]             }
[17:46:38.526]         }
[17:46:38.526]     })
[17:46:38.526]     if (TRUE) {
[17:46:38.526]         base::sink(type = "output", split = FALSE)
[17:46:38.526]         if (TRUE) {
[17:46:38.526]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.526]         }
[17:46:38.526]         else {
[17:46:38.526]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.526]         }
[17:46:38.526]         base::close(...future.stdout)
[17:46:38.526]         ...future.stdout <- NULL
[17:46:38.526]     }
[17:46:38.526]     ...future.result$conditions <- ...future.conditions
[17:46:38.526]     ...future.result$finished <- base::Sys.time()
[17:46:38.526]     ...future.result
[17:46:38.526] }
[17:46:38.529] requestCore(): workers = 2
[17:46:38.535] MulticoreFuture started
[17:46:38.535] - Launch lazy future ... done
[17:46:38.535] run() for ‘MulticoreFuture’ ... done
[17:46:38.536] plan(): Setting new future strategy stack:
[17:46:38.536] result() for MulticoreFuture ...
[17:46:38.536] List of future strategies:
[17:46:38.536] 1. sequential:
[17:46:38.536]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.536]    - tweaked: FALSE
[17:46:38.536]    - call: NULL
[17:46:38.537] plan(): nbrOfWorkers() = 1
[17:46:38.539] result() for MulticoreFuture ...
[17:46:38.539] result() for MulticoreFuture ... done
[17:46:38.539] result() for MulticoreFuture ... done
[17:46:38.539] result() for MulticoreFuture ...
[17:46:38.539] result() for MulticoreFuture ... done
[17:46:38.539] plan(): Setting new future strategy stack:
u$a = 2
[17:46:38.540] result() for MulticoreFuture ...
[17:46:38.540] List of future strategies:
[17:46:38.540] 1. multicore:
[17:46:38.540]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:38.540]    - tweaked: FALSE
[17:46:38.540]    - call: plan(strategy)
[17:46:38.544] plan(): nbrOfWorkers() = 2
[17:46:38.545] result() for MulticoreFuture ...
[17:46:38.545] result() for MulticoreFuture ... done
[17:46:38.545] result() for MulticoreFuture ... done
[17:46:38.545] result() for MulticoreFuture ...
[17:46:38.545] result() for MulticoreFuture ... done
v$a = 4
[17:46:38.546] getGlobalsAndPackages() ...
[17:46:38.546] Searching for globals...
[17:46:38.547] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.547] Searching for globals ... DONE
[17:46:38.547] Resolving globals: FALSE
[17:46:38.548] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.548] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.549] - globals: [1] ‘a’
[17:46:38.549] 
[17:46:38.549] getGlobalsAndPackages() ... DONE
[17:46:38.549] run() for ‘Future’ ...
[17:46:38.549] - state: ‘created’
[17:46:38.549] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:38.554] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:38.554] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:38.554]   - Field: ‘label’
[17:46:38.554]   - Field: ‘local’
[17:46:38.554]   - Field: ‘owner’
[17:46:38.555]   - Field: ‘envir’
[17:46:38.555]   - Field: ‘workers’
[17:46:38.555]   - Field: ‘packages’
[17:46:38.555]   - Field: ‘gc’
[17:46:38.555]   - Field: ‘job’
[17:46:38.555]   - Field: ‘conditions’
[17:46:38.555]   - Field: ‘expr’
[17:46:38.555]   - Field: ‘uuid’
[17:46:38.555]   - Field: ‘seed’
[17:46:38.556]   - Field: ‘version’
[17:46:38.556]   - Field: ‘result’
[17:46:38.556]   - Field: ‘asynchronous’
[17:46:38.556]   - Field: ‘calls’
[17:46:38.556]   - Field: ‘globals’
[17:46:38.556]   - Field: ‘stdout’
[17:46:38.556]   - Field: ‘earlySignal’
[17:46:38.556]   - Field: ‘lazy’
[17:46:38.556]   - Field: ‘state’
[17:46:38.557] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:38.557] - Launch lazy future ...
[17:46:38.557] Packages needed by the future expression (n = 0): <none>
[17:46:38.557] Packages needed by future strategies (n = 0): <none>
[17:46:38.558] {
[17:46:38.558]     {
[17:46:38.558]         {
[17:46:38.558]             ...future.startTime <- base::Sys.time()
[17:46:38.558]             {
[17:46:38.558]                 {
[17:46:38.558]                   {
[17:46:38.558]                     {
[17:46:38.558]                       base::local({
[17:46:38.558]                         has_future <- base::requireNamespace("future", 
[17:46:38.558]                           quietly = TRUE)
[17:46:38.558]                         if (has_future) {
[17:46:38.558]                           ns <- base::getNamespace("future")
[17:46:38.558]                           version <- ns[[".package"]][["version"]]
[17:46:38.558]                           if (is.null(version)) 
[17:46:38.558]                             version <- utils::packageVersion("future")
[17:46:38.558]                         }
[17:46:38.558]                         else {
[17:46:38.558]                           version <- NULL
[17:46:38.558]                         }
[17:46:38.558]                         if (!has_future || version < "1.8.0") {
[17:46:38.558]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.558]                             "", base::R.version$version.string), 
[17:46:38.558]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:38.558]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.558]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.558]                               "release", "version")], collapse = " "), 
[17:46:38.558]                             hostname = base::Sys.info()[["nodename"]])
[17:46:38.558]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.558]                             info)
[17:46:38.558]                           info <- base::paste(info, collapse = "; ")
[17:46:38.558]                           if (!has_future) {
[17:46:38.558]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.558]                               info)
[17:46:38.558]                           }
[17:46:38.558]                           else {
[17:46:38.558]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.558]                               info, version)
[17:46:38.558]                           }
[17:46:38.558]                           base::stop(msg)
[17:46:38.558]                         }
[17:46:38.558]                       })
[17:46:38.558]                     }
[17:46:38.558]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:38.558]                     base::options(mc.cores = 1L)
[17:46:38.558]                   }
[17:46:38.558]                   ...future.strategy.old <- future::plan("list")
[17:46:38.558]                   options(future.plan = NULL)
[17:46:38.558]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.558]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.558]                 }
[17:46:38.558]                 ...future.workdir <- getwd()
[17:46:38.558]             }
[17:46:38.558]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.558]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.558]         }
[17:46:38.558]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.558]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.558]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.558]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.558]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.558]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.558]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.558]             base::names(...future.oldOptions))
[17:46:38.558]     }
[17:46:38.558]     if (FALSE) {
[17:46:38.558]     }
[17:46:38.558]     else {
[17:46:38.558]         if (TRUE) {
[17:46:38.558]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.558]                 open = "w")
[17:46:38.558]         }
[17:46:38.558]         else {
[17:46:38.558]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.558]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.558]         }
[17:46:38.558]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.558]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.558]             base::sink(type = "output", split = FALSE)
[17:46:38.558]             base::close(...future.stdout)
[17:46:38.558]         }, add = TRUE)
[17:46:38.558]     }
[17:46:38.558]     ...future.frame <- base::sys.nframe()
[17:46:38.558]     ...future.conditions <- base::list()
[17:46:38.558]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.558]     if (FALSE) {
[17:46:38.558]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.558]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.558]     }
[17:46:38.558]     ...future.result <- base::tryCatch({
[17:46:38.558]         base::withCallingHandlers({
[17:46:38.558]             ...future.value <- base::withVisible(base::local({
[17:46:38.558]                 withCallingHandlers({
[17:46:38.558]                   {
[17:46:38.558]                     2 * a
[17:46:38.558]                   }
[17:46:38.558]                 }, immediateCondition = function(cond) {
[17:46:38.558]                   save_rds <- function (object, pathname, ...) 
[17:46:38.558]                   {
[17:46:38.558]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:38.558]                     if (file_test("-f", pathname_tmp)) {
[17:46:38.558]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.558]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:38.558]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.558]                         fi_tmp[["mtime"]])
[17:46:38.558]                     }
[17:46:38.558]                     tryCatch({
[17:46:38.558]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:38.558]                     }, error = function(ex) {
[17:46:38.558]                       msg <- conditionMessage(ex)
[17:46:38.558]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.558]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:38.558]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.558]                         fi_tmp[["mtime"]], msg)
[17:46:38.558]                       ex$message <- msg
[17:46:38.558]                       stop(ex)
[17:46:38.558]                     })
[17:46:38.558]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:38.558]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:38.558]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:38.558]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.558]                       fi <- file.info(pathname)
[17:46:38.558]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:38.558]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.558]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:38.558]                         fi[["size"]], fi[["mtime"]])
[17:46:38.558]                       stop(msg)
[17:46:38.558]                     }
[17:46:38.558]                     invisible(pathname)
[17:46:38.558]                   }
[17:46:38.558]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:38.558]                     rootPath = tempdir()) 
[17:46:38.558]                   {
[17:46:38.558]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:38.558]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:38.558]                       tmpdir = path, fileext = ".rds")
[17:46:38.558]                     save_rds(obj, file)
[17:46:38.558]                   }
[17:46:38.558]                   saveImmediateCondition(cond, path = "/tmp/RtmpPsSrrR/.future/immediateConditions")
[17:46:38.558]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.558]                   {
[17:46:38.558]                     inherits <- base::inherits
[17:46:38.558]                     invokeRestart <- base::invokeRestart
[17:46:38.558]                     is.null <- base::is.null
[17:46:38.558]                     muffled <- FALSE
[17:46:38.558]                     if (inherits(cond, "message")) {
[17:46:38.558]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:38.558]                       if (muffled) 
[17:46:38.558]                         invokeRestart("muffleMessage")
[17:46:38.558]                     }
[17:46:38.558]                     else if (inherits(cond, "warning")) {
[17:46:38.558]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:38.558]                       if (muffled) 
[17:46:38.558]                         invokeRestart("muffleWarning")
[17:46:38.558]                     }
[17:46:38.558]                     else if (inherits(cond, "condition")) {
[17:46:38.558]                       if (!is.null(pattern)) {
[17:46:38.558]                         computeRestarts <- base::computeRestarts
[17:46:38.558]                         grepl <- base::grepl
[17:46:38.558]                         restarts <- computeRestarts(cond)
[17:46:38.558]                         for (restart in restarts) {
[17:46:38.558]                           name <- restart$name
[17:46:38.558]                           if (is.null(name)) 
[17:46:38.558]                             next
[17:46:38.558]                           if (!grepl(pattern, name)) 
[17:46:38.558]                             next
[17:46:38.558]                           invokeRestart(restart)
[17:46:38.558]                           muffled <- TRUE
[17:46:38.558]                           break
[17:46:38.558]                         }
[17:46:38.558]                       }
[17:46:38.558]                     }
[17:46:38.558]                     invisible(muffled)
[17:46:38.558]                   }
[17:46:38.558]                   muffleCondition(cond)
[17:46:38.558]                 })
[17:46:38.558]             }))
[17:46:38.558]             future::FutureResult(value = ...future.value$value, 
[17:46:38.558]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.558]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.558]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.558]                     ...future.globalenv.names))
[17:46:38.558]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.558]         }, condition = base::local({
[17:46:38.558]             c <- base::c
[17:46:38.558]             inherits <- base::inherits
[17:46:38.558]             invokeRestart <- base::invokeRestart
[17:46:38.558]             length <- base::length
[17:46:38.558]             list <- base::list
[17:46:38.558]             seq.int <- base::seq.int
[17:46:38.558]             signalCondition <- base::signalCondition
[17:46:38.558]             sys.calls <- base::sys.calls
[17:46:38.558]             `[[` <- base::`[[`
[17:46:38.558]             `+` <- base::`+`
[17:46:38.558]             `<<-` <- base::`<<-`
[17:46:38.558]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.558]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.558]                   3L)]
[17:46:38.558]             }
[17:46:38.558]             function(cond) {
[17:46:38.558]                 is_error <- inherits(cond, "error")
[17:46:38.558]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.558]                   NULL)
[17:46:38.558]                 if (is_error) {
[17:46:38.558]                   sessionInformation <- function() {
[17:46:38.558]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.558]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.558]                       search = base::search(), system = base::Sys.info())
[17:46:38.558]                   }
[17:46:38.558]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.558]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.558]                     cond$call), session = sessionInformation(), 
[17:46:38.558]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.558]                   signalCondition(cond)
[17:46:38.558]                 }
[17:46:38.558]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.558]                 "immediateCondition"))) {
[17:46:38.558]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.558]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.558]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.558]                   if (TRUE && !signal) {
[17:46:38.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.558]                     {
[17:46:38.558]                       inherits <- base::inherits
[17:46:38.558]                       invokeRestart <- base::invokeRestart
[17:46:38.558]                       is.null <- base::is.null
[17:46:38.558]                       muffled <- FALSE
[17:46:38.558]                       if (inherits(cond, "message")) {
[17:46:38.558]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.558]                         if (muffled) 
[17:46:38.558]                           invokeRestart("muffleMessage")
[17:46:38.558]                       }
[17:46:38.558]                       else if (inherits(cond, "warning")) {
[17:46:38.558]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.558]                         if (muffled) 
[17:46:38.558]                           invokeRestart("muffleWarning")
[17:46:38.558]                       }
[17:46:38.558]                       else if (inherits(cond, "condition")) {
[17:46:38.558]                         if (!is.null(pattern)) {
[17:46:38.558]                           computeRestarts <- base::computeRestarts
[17:46:38.558]                           grepl <- base::grepl
[17:46:38.558]                           restarts <- computeRestarts(cond)
[17:46:38.558]                           for (restart in restarts) {
[17:46:38.558]                             name <- restart$name
[17:46:38.558]                             if (is.null(name)) 
[17:46:38.558]                               next
[17:46:38.558]                             if (!grepl(pattern, name)) 
[17:46:38.558]                               next
[17:46:38.558]                             invokeRestart(restart)
[17:46:38.558]                             muffled <- TRUE
[17:46:38.558]                             break
[17:46:38.558]                           }
[17:46:38.558]                         }
[17:46:38.558]                       }
[17:46:38.558]                       invisible(muffled)
[17:46:38.558]                     }
[17:46:38.558]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.558]                   }
[17:46:38.558]                 }
[17:46:38.558]                 else {
[17:46:38.558]                   if (TRUE) {
[17:46:38.558]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.558]                     {
[17:46:38.558]                       inherits <- base::inherits
[17:46:38.558]                       invokeRestart <- base::invokeRestart
[17:46:38.558]                       is.null <- base::is.null
[17:46:38.558]                       muffled <- FALSE
[17:46:38.558]                       if (inherits(cond, "message")) {
[17:46:38.558]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.558]                         if (muffled) 
[17:46:38.558]                           invokeRestart("muffleMessage")
[17:46:38.558]                       }
[17:46:38.558]                       else if (inherits(cond, "warning")) {
[17:46:38.558]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.558]                         if (muffled) 
[17:46:38.558]                           invokeRestart("muffleWarning")
[17:46:38.558]                       }
[17:46:38.558]                       else if (inherits(cond, "condition")) {
[17:46:38.558]                         if (!is.null(pattern)) {
[17:46:38.558]                           computeRestarts <- base::computeRestarts
[17:46:38.558]                           grepl <- base::grepl
[17:46:38.558]                           restarts <- computeRestarts(cond)
[17:46:38.558]                           for (restart in restarts) {
[17:46:38.558]                             name <- restart$name
[17:46:38.558]                             if (is.null(name)) 
[17:46:38.558]                               next
[17:46:38.558]                             if (!grepl(pattern, name)) 
[17:46:38.558]                               next
[17:46:38.558]                             invokeRestart(restart)
[17:46:38.558]                             muffled <- TRUE
[17:46:38.558]                             break
[17:46:38.558]                           }
[17:46:38.558]                         }
[17:46:38.558]                       }
[17:46:38.558]                       invisible(muffled)
[17:46:38.558]                     }
[17:46:38.558]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.558]                   }
[17:46:38.558]                 }
[17:46:38.558]             }
[17:46:38.558]         }))
[17:46:38.558]     }, error = function(ex) {
[17:46:38.558]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.558]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.558]                 ...future.rng), started = ...future.startTime, 
[17:46:38.558]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.558]             version = "1.8"), class = "FutureResult")
[17:46:38.558]     }, finally = {
[17:46:38.558]         if (!identical(...future.workdir, getwd())) 
[17:46:38.558]             setwd(...future.workdir)
[17:46:38.558]         {
[17:46:38.558]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.558]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.558]             }
[17:46:38.558]             base::options(...future.oldOptions)
[17:46:38.558]             if (.Platform$OS.type == "windows") {
[17:46:38.558]                 old_names <- names(...future.oldEnvVars)
[17:46:38.558]                 envs <- base::Sys.getenv()
[17:46:38.558]                 names <- names(envs)
[17:46:38.558]                 common <- intersect(names, old_names)
[17:46:38.558]                 added <- setdiff(names, old_names)
[17:46:38.558]                 removed <- setdiff(old_names, names)
[17:46:38.558]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.558]                   envs[common]]
[17:46:38.558]                 NAMES <- toupper(changed)
[17:46:38.558]                 args <- list()
[17:46:38.558]                 for (kk in seq_along(NAMES)) {
[17:46:38.558]                   name <- changed[[kk]]
[17:46:38.558]                   NAME <- NAMES[[kk]]
[17:46:38.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.558]                     next
[17:46:38.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.558]                 }
[17:46:38.558]                 NAMES <- toupper(added)
[17:46:38.558]                 for (kk in seq_along(NAMES)) {
[17:46:38.558]                   name <- added[[kk]]
[17:46:38.558]                   NAME <- NAMES[[kk]]
[17:46:38.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.558]                     next
[17:46:38.558]                   args[[name]] <- ""
[17:46:38.558]                 }
[17:46:38.558]                 NAMES <- toupper(removed)
[17:46:38.558]                 for (kk in seq_along(NAMES)) {
[17:46:38.558]                   name <- removed[[kk]]
[17:46:38.558]                   NAME <- NAMES[[kk]]
[17:46:38.558]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.558]                     next
[17:46:38.558]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.558]                 }
[17:46:38.558]                 if (length(args) > 0) 
[17:46:38.558]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.558]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.558]             }
[17:46:38.558]             else {
[17:46:38.558]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.558]             }
[17:46:38.558]             {
[17:46:38.558]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.558]                   0L) {
[17:46:38.558]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.558]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.558]                   base::options(opts)
[17:46:38.558]                 }
[17:46:38.558]                 {
[17:46:38.558]                   {
[17:46:38.558]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:38.558]                     NULL
[17:46:38.558]                   }
[17:46:38.558]                   options(future.plan = NULL)
[17:46:38.558]                   if (is.na(NA_character_)) 
[17:46:38.558]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.558]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.558]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.558]                     .init = FALSE)
[17:46:38.558]                 }
[17:46:38.558]             }
[17:46:38.558]         }
[17:46:38.558]     })
[17:46:38.558]     if (TRUE) {
[17:46:38.558]         base::sink(type = "output", split = FALSE)
[17:46:38.558]         if (TRUE) {
[17:46:38.558]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.558]         }
[17:46:38.558]         else {
[17:46:38.558]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.558]         }
[17:46:38.558]         base::close(...future.stdout)
[17:46:38.558]         ...future.stdout <- NULL
[17:46:38.558]     }
[17:46:38.558]     ...future.result$conditions <- ...future.conditions
[17:46:38.558]     ...future.result$finished <- base::Sys.time()
[17:46:38.558]     ...future.result
[17:46:38.558] }
[17:46:38.560] assign_globals() ...
[17:46:38.560] List of 1
[17:46:38.560]  $ a: num 1
[17:46:38.560]  - attr(*, "where")=List of 1
[17:46:38.560]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.560]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.560]  - attr(*, "resolved")= logi FALSE
[17:46:38.560]  - attr(*, "total_size")= num 56
[17:46:38.560]  - attr(*, "already-done")= logi TRUE
[17:46:38.566] - copied ‘a’ to environment
[17:46:38.566] assign_globals() ... done
[17:46:38.566] requestCore(): workers = 2
[17:46:38.568] MulticoreFuture started
[17:46:38.568] - Launch lazy future ... done
[17:46:38.568] run() for ‘MulticoreFuture’ ... done
[17:46:38.569] result() for MulticoreFuture ...
[17:46:38.569] plan(): Setting new future strategy stack:
[17:46:38.569] List of future strategies:
[17:46:38.569] 1. sequential:
[17:46:38.569]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.569]    - tweaked: FALSE
[17:46:38.569]    - call: NULL
[17:46:38.570] plan(): nbrOfWorkers() = 1
[17:46:38.572] plan(): Setting new future strategy stack:
[17:46:38.572] List of future strategies:
[17:46:38.572] 1. multicore:
[17:46:38.572]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:38.572]    - tweaked: FALSE
[17:46:38.572]    - call: plan(strategy)
[17:46:38.577] plan(): nbrOfWorkers() = 2
[17:46:38.578] result() for MulticoreFuture ...
[17:46:38.579] result() for MulticoreFuture ... done
[17:46:38.579] result() for MulticoreFuture ... done
[17:46:38.579] result() for MulticoreFuture ...
[17:46:38.579] result() for MulticoreFuture ... done
[17:46:38.579] getGlobalsAndPackages() ...
[17:46:38.580] Searching for globals...
[17:46:38.581] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.581] Searching for globals ... DONE
[17:46:38.581] Resolving globals: FALSE
[17:46:38.582] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.582] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.583] - globals: [1] ‘a’
[17:46:38.583] 
[17:46:38.583] getGlobalsAndPackages() ... DONE
[17:46:38.583] run() for ‘Future’ ...
[17:46:38.583] - state: ‘created’
[17:46:38.583] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:38.587] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:38.587] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:38.588]   - Field: ‘label’
[17:46:38.588]   - Field: ‘local’
[17:46:38.588]   - Field: ‘owner’
[17:46:38.588]   - Field: ‘envir’
[17:46:38.588]   - Field: ‘workers’
[17:46:38.588]   - Field: ‘packages’
[17:46:38.588]   - Field: ‘gc’
[17:46:38.588]   - Field: ‘job’
[17:46:38.589]   - Field: ‘conditions’
[17:46:38.589]   - Field: ‘expr’
[17:46:38.589]   - Field: ‘uuid’
[17:46:38.589]   - Field: ‘seed’
[17:46:38.589]   - Field: ‘version’
[17:46:38.589]   - Field: ‘result’
[17:46:38.589]   - Field: ‘asynchronous’
[17:46:38.589]   - Field: ‘calls’
[17:46:38.589]   - Field: ‘globals’
[17:46:38.589]   - Field: ‘stdout’
[17:46:38.590]   - Field: ‘earlySignal’
[17:46:38.590]   - Field: ‘lazy’
[17:46:38.590]   - Field: ‘state’
[17:46:38.590] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:38.590] - Launch lazy future ...
[17:46:38.590] Packages needed by the future expression (n = 0): <none>
[17:46:38.590] Packages needed by future strategies (n = 0): <none>
[17:46:38.591] {
[17:46:38.591]     {
[17:46:38.591]         {
[17:46:38.591]             ...future.startTime <- base::Sys.time()
[17:46:38.591]             {
[17:46:38.591]                 {
[17:46:38.591]                   {
[17:46:38.591]                     {
[17:46:38.591]                       base::local({
[17:46:38.591]                         has_future <- base::requireNamespace("future", 
[17:46:38.591]                           quietly = TRUE)
[17:46:38.591]                         if (has_future) {
[17:46:38.591]                           ns <- base::getNamespace("future")
[17:46:38.591]                           version <- ns[[".package"]][["version"]]
[17:46:38.591]                           if (is.null(version)) 
[17:46:38.591]                             version <- utils::packageVersion("future")
[17:46:38.591]                         }
[17:46:38.591]                         else {
[17:46:38.591]                           version <- NULL
[17:46:38.591]                         }
[17:46:38.591]                         if (!has_future || version < "1.8.0") {
[17:46:38.591]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.591]                             "", base::R.version$version.string), 
[17:46:38.591]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:38.591]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.591]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.591]                               "release", "version")], collapse = " "), 
[17:46:38.591]                             hostname = base::Sys.info()[["nodename"]])
[17:46:38.591]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.591]                             info)
[17:46:38.591]                           info <- base::paste(info, collapse = "; ")
[17:46:38.591]                           if (!has_future) {
[17:46:38.591]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.591]                               info)
[17:46:38.591]                           }
[17:46:38.591]                           else {
[17:46:38.591]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.591]                               info, version)
[17:46:38.591]                           }
[17:46:38.591]                           base::stop(msg)
[17:46:38.591]                         }
[17:46:38.591]                       })
[17:46:38.591]                     }
[17:46:38.591]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:38.591]                     base::options(mc.cores = 1L)
[17:46:38.591]                   }
[17:46:38.591]                   ...future.strategy.old <- future::plan("list")
[17:46:38.591]                   options(future.plan = NULL)
[17:46:38.591]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.591]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.591]                 }
[17:46:38.591]                 ...future.workdir <- getwd()
[17:46:38.591]             }
[17:46:38.591]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.591]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.591]         }
[17:46:38.591]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.591]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.591]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.591]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.591]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.591]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.591]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.591]             base::names(...future.oldOptions))
[17:46:38.591]     }
[17:46:38.591]     if (FALSE) {
[17:46:38.591]     }
[17:46:38.591]     else {
[17:46:38.591]         if (TRUE) {
[17:46:38.591]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.591]                 open = "w")
[17:46:38.591]         }
[17:46:38.591]         else {
[17:46:38.591]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.591]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.591]         }
[17:46:38.591]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.591]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.591]             base::sink(type = "output", split = FALSE)
[17:46:38.591]             base::close(...future.stdout)
[17:46:38.591]         }, add = TRUE)
[17:46:38.591]     }
[17:46:38.591]     ...future.frame <- base::sys.nframe()
[17:46:38.591]     ...future.conditions <- base::list()
[17:46:38.591]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.591]     if (FALSE) {
[17:46:38.591]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.591]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.591]     }
[17:46:38.591]     ...future.result <- base::tryCatch({
[17:46:38.591]         base::withCallingHandlers({
[17:46:38.591]             ...future.value <- base::withVisible(base::local({
[17:46:38.591]                 withCallingHandlers({
[17:46:38.591]                   {
[17:46:38.591]                     2 * a
[17:46:38.591]                   }
[17:46:38.591]                 }, immediateCondition = function(cond) {
[17:46:38.591]                   save_rds <- function (object, pathname, ...) 
[17:46:38.591]                   {
[17:46:38.591]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:38.591]                     if (file_test("-f", pathname_tmp)) {
[17:46:38.591]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.591]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:38.591]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.591]                         fi_tmp[["mtime"]])
[17:46:38.591]                     }
[17:46:38.591]                     tryCatch({
[17:46:38.591]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:38.591]                     }, error = function(ex) {
[17:46:38.591]                       msg <- conditionMessage(ex)
[17:46:38.591]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.591]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:38.591]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.591]                         fi_tmp[["mtime"]], msg)
[17:46:38.591]                       ex$message <- msg
[17:46:38.591]                       stop(ex)
[17:46:38.591]                     })
[17:46:38.591]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:38.591]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:38.591]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:38.591]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.591]                       fi <- file.info(pathname)
[17:46:38.591]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:38.591]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.591]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:38.591]                         fi[["size"]], fi[["mtime"]])
[17:46:38.591]                       stop(msg)
[17:46:38.591]                     }
[17:46:38.591]                     invisible(pathname)
[17:46:38.591]                   }
[17:46:38.591]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:38.591]                     rootPath = tempdir()) 
[17:46:38.591]                   {
[17:46:38.591]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:38.591]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:38.591]                       tmpdir = path, fileext = ".rds")
[17:46:38.591]                     save_rds(obj, file)
[17:46:38.591]                   }
[17:46:38.591]                   saveImmediateCondition(cond, path = "/tmp/RtmpPsSrrR/.future/immediateConditions")
[17:46:38.591]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.591]                   {
[17:46:38.591]                     inherits <- base::inherits
[17:46:38.591]                     invokeRestart <- base::invokeRestart
[17:46:38.591]                     is.null <- base::is.null
[17:46:38.591]                     muffled <- FALSE
[17:46:38.591]                     if (inherits(cond, "message")) {
[17:46:38.591]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:38.591]                       if (muffled) 
[17:46:38.591]                         invokeRestart("muffleMessage")
[17:46:38.591]                     }
[17:46:38.591]                     else if (inherits(cond, "warning")) {
[17:46:38.591]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:38.591]                       if (muffled) 
[17:46:38.591]                         invokeRestart("muffleWarning")
[17:46:38.591]                     }
[17:46:38.591]                     else if (inherits(cond, "condition")) {
[17:46:38.591]                       if (!is.null(pattern)) {
[17:46:38.591]                         computeRestarts <- base::computeRestarts
[17:46:38.591]                         grepl <- base::grepl
[17:46:38.591]                         restarts <- computeRestarts(cond)
[17:46:38.591]                         for (restart in restarts) {
[17:46:38.591]                           name <- restart$name
[17:46:38.591]                           if (is.null(name)) 
[17:46:38.591]                             next
[17:46:38.591]                           if (!grepl(pattern, name)) 
[17:46:38.591]                             next
[17:46:38.591]                           invokeRestart(restart)
[17:46:38.591]                           muffled <- TRUE
[17:46:38.591]                           break
[17:46:38.591]                         }
[17:46:38.591]                       }
[17:46:38.591]                     }
[17:46:38.591]                     invisible(muffled)
[17:46:38.591]                   }
[17:46:38.591]                   muffleCondition(cond)
[17:46:38.591]                 })
[17:46:38.591]             }))
[17:46:38.591]             future::FutureResult(value = ...future.value$value, 
[17:46:38.591]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.591]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.591]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.591]                     ...future.globalenv.names))
[17:46:38.591]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.591]         }, condition = base::local({
[17:46:38.591]             c <- base::c
[17:46:38.591]             inherits <- base::inherits
[17:46:38.591]             invokeRestart <- base::invokeRestart
[17:46:38.591]             length <- base::length
[17:46:38.591]             list <- base::list
[17:46:38.591]             seq.int <- base::seq.int
[17:46:38.591]             signalCondition <- base::signalCondition
[17:46:38.591]             sys.calls <- base::sys.calls
[17:46:38.591]             `[[` <- base::`[[`
[17:46:38.591]             `+` <- base::`+`
[17:46:38.591]             `<<-` <- base::`<<-`
[17:46:38.591]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.591]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.591]                   3L)]
[17:46:38.591]             }
[17:46:38.591]             function(cond) {
[17:46:38.591]                 is_error <- inherits(cond, "error")
[17:46:38.591]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.591]                   NULL)
[17:46:38.591]                 if (is_error) {
[17:46:38.591]                   sessionInformation <- function() {
[17:46:38.591]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.591]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.591]                       search = base::search(), system = base::Sys.info())
[17:46:38.591]                   }
[17:46:38.591]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.591]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.591]                     cond$call), session = sessionInformation(), 
[17:46:38.591]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.591]                   signalCondition(cond)
[17:46:38.591]                 }
[17:46:38.591]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.591]                 "immediateCondition"))) {
[17:46:38.591]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.591]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.591]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.591]                   if (TRUE && !signal) {
[17:46:38.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.591]                     {
[17:46:38.591]                       inherits <- base::inherits
[17:46:38.591]                       invokeRestart <- base::invokeRestart
[17:46:38.591]                       is.null <- base::is.null
[17:46:38.591]                       muffled <- FALSE
[17:46:38.591]                       if (inherits(cond, "message")) {
[17:46:38.591]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.591]                         if (muffled) 
[17:46:38.591]                           invokeRestart("muffleMessage")
[17:46:38.591]                       }
[17:46:38.591]                       else if (inherits(cond, "warning")) {
[17:46:38.591]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.591]                         if (muffled) 
[17:46:38.591]                           invokeRestart("muffleWarning")
[17:46:38.591]                       }
[17:46:38.591]                       else if (inherits(cond, "condition")) {
[17:46:38.591]                         if (!is.null(pattern)) {
[17:46:38.591]                           computeRestarts <- base::computeRestarts
[17:46:38.591]                           grepl <- base::grepl
[17:46:38.591]                           restarts <- computeRestarts(cond)
[17:46:38.591]                           for (restart in restarts) {
[17:46:38.591]                             name <- restart$name
[17:46:38.591]                             if (is.null(name)) 
[17:46:38.591]                               next
[17:46:38.591]                             if (!grepl(pattern, name)) 
[17:46:38.591]                               next
[17:46:38.591]                             invokeRestart(restart)
[17:46:38.591]                             muffled <- TRUE
[17:46:38.591]                             break
[17:46:38.591]                           }
[17:46:38.591]                         }
[17:46:38.591]                       }
[17:46:38.591]                       invisible(muffled)
[17:46:38.591]                     }
[17:46:38.591]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.591]                   }
[17:46:38.591]                 }
[17:46:38.591]                 else {
[17:46:38.591]                   if (TRUE) {
[17:46:38.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.591]                     {
[17:46:38.591]                       inherits <- base::inherits
[17:46:38.591]                       invokeRestart <- base::invokeRestart
[17:46:38.591]                       is.null <- base::is.null
[17:46:38.591]                       muffled <- FALSE
[17:46:38.591]                       if (inherits(cond, "message")) {
[17:46:38.591]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.591]                         if (muffled) 
[17:46:38.591]                           invokeRestart("muffleMessage")
[17:46:38.591]                       }
[17:46:38.591]                       else if (inherits(cond, "warning")) {
[17:46:38.591]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.591]                         if (muffled) 
[17:46:38.591]                           invokeRestart("muffleWarning")
[17:46:38.591]                       }
[17:46:38.591]                       else if (inherits(cond, "condition")) {
[17:46:38.591]                         if (!is.null(pattern)) {
[17:46:38.591]                           computeRestarts <- base::computeRestarts
[17:46:38.591]                           grepl <- base::grepl
[17:46:38.591]                           restarts <- computeRestarts(cond)
[17:46:38.591]                           for (restart in restarts) {
[17:46:38.591]                             name <- restart$name
[17:46:38.591]                             if (is.null(name)) 
[17:46:38.591]                               next
[17:46:38.591]                             if (!grepl(pattern, name)) 
[17:46:38.591]                               next
[17:46:38.591]                             invokeRestart(restart)
[17:46:38.591]                             muffled <- TRUE
[17:46:38.591]                             break
[17:46:38.591]                           }
[17:46:38.591]                         }
[17:46:38.591]                       }
[17:46:38.591]                       invisible(muffled)
[17:46:38.591]                     }
[17:46:38.591]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.591]                   }
[17:46:38.591]                 }
[17:46:38.591]             }
[17:46:38.591]         }))
[17:46:38.591]     }, error = function(ex) {
[17:46:38.591]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.591]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.591]                 ...future.rng), started = ...future.startTime, 
[17:46:38.591]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.591]             version = "1.8"), class = "FutureResult")
[17:46:38.591]     }, finally = {
[17:46:38.591]         if (!identical(...future.workdir, getwd())) 
[17:46:38.591]             setwd(...future.workdir)
[17:46:38.591]         {
[17:46:38.591]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.591]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.591]             }
[17:46:38.591]             base::options(...future.oldOptions)
[17:46:38.591]             if (.Platform$OS.type == "windows") {
[17:46:38.591]                 old_names <- names(...future.oldEnvVars)
[17:46:38.591]                 envs <- base::Sys.getenv()
[17:46:38.591]                 names <- names(envs)
[17:46:38.591]                 common <- intersect(names, old_names)
[17:46:38.591]                 added <- setdiff(names, old_names)
[17:46:38.591]                 removed <- setdiff(old_names, names)
[17:46:38.591]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.591]                   envs[common]]
[17:46:38.591]                 NAMES <- toupper(changed)
[17:46:38.591]                 args <- list()
[17:46:38.591]                 for (kk in seq_along(NAMES)) {
[17:46:38.591]                   name <- changed[[kk]]
[17:46:38.591]                   NAME <- NAMES[[kk]]
[17:46:38.591]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.591]                     next
[17:46:38.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.591]                 }
[17:46:38.591]                 NAMES <- toupper(added)
[17:46:38.591]                 for (kk in seq_along(NAMES)) {
[17:46:38.591]                   name <- added[[kk]]
[17:46:38.591]                   NAME <- NAMES[[kk]]
[17:46:38.591]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.591]                     next
[17:46:38.591]                   args[[name]] <- ""
[17:46:38.591]                 }
[17:46:38.591]                 NAMES <- toupper(removed)
[17:46:38.591]                 for (kk in seq_along(NAMES)) {
[17:46:38.591]                   name <- removed[[kk]]
[17:46:38.591]                   NAME <- NAMES[[kk]]
[17:46:38.591]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.591]                     next
[17:46:38.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.591]                 }
[17:46:38.591]                 if (length(args) > 0) 
[17:46:38.591]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.591]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.591]             }
[17:46:38.591]             else {
[17:46:38.591]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.591]             }
[17:46:38.591]             {
[17:46:38.591]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.591]                   0L) {
[17:46:38.591]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.591]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.591]                   base::options(opts)
[17:46:38.591]                 }
[17:46:38.591]                 {
[17:46:38.591]                   {
[17:46:38.591]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:38.591]                     NULL
[17:46:38.591]                   }
[17:46:38.591]                   options(future.plan = NULL)
[17:46:38.591]                   if (is.na(NA_character_)) 
[17:46:38.591]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.591]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.591]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.591]                     .init = FALSE)
[17:46:38.591]                 }
[17:46:38.591]             }
[17:46:38.591]         }
[17:46:38.591]     })
[17:46:38.591]     if (TRUE) {
[17:46:38.591]         base::sink(type = "output", split = FALSE)
[17:46:38.591]         if (TRUE) {
[17:46:38.591]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.591]         }
[17:46:38.591]         else {
[17:46:38.591]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.591]         }
[17:46:38.591]         base::close(...future.stdout)
[17:46:38.591]         ...future.stdout <- NULL
[17:46:38.591]     }
[17:46:38.591]     ...future.result$conditions <- ...future.conditions
[17:46:38.591]     ...future.result$finished <- base::Sys.time()
[17:46:38.591]     ...future.result
[17:46:38.591] }
[17:46:38.594] assign_globals() ...
[17:46:38.594] List of 1
[17:46:38.594]  $ a: num 1
[17:46:38.594]  - attr(*, "where")=List of 1
[17:46:38.594]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.594]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.594]  - attr(*, "resolved")= logi FALSE
[17:46:38.594]  - attr(*, "total_size")= num 56
[17:46:38.594]  - attr(*, "already-done")= logi TRUE
[17:46:38.597] - copied ‘a’ to environment
[17:46:38.597] assign_globals() ... done
[17:46:38.597] requestCore(): workers = 2
[17:46:38.599] MulticoreFuture started
[17:46:38.599] - Launch lazy future ... done
[17:46:38.599] run() for ‘MulticoreFuture’ ... done
[17:46:38.600] result() for MulticoreFuture ...
[17:46:38.600] plan(): Setting new future strategy stack:
[17:46:38.600] List of future strategies:
[17:46:38.600] 1. sequential:
[17:46:38.600]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.600]    - tweaked: FALSE
[17:46:38.600]    - call: NULL
[17:46:38.601] plan(): nbrOfWorkers() = 1
[17:46:38.603] plan(): Setting new future strategy stack:
[17:46:38.603] List of future strategies:
[17:46:38.603] 1. multicore:
[17:46:38.603]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:38.603]    - tweaked: FALSE
[17:46:38.603]    - call: plan(strategy)
[17:46:38.608] plan(): nbrOfWorkers() = 2
[17:46:38.609] result() for MulticoreFuture ...
[17:46:38.609] result() for MulticoreFuture ... done
[17:46:38.609] result() for MulticoreFuture ... done
[17:46:38.609] result() for MulticoreFuture ...
[17:46:38.609] result() for MulticoreFuture ... done
[17:46:38.610] getGlobalsAndPackages() ...
[17:46:38.610] Searching for globals...
[17:46:38.611] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.611] Searching for globals ... DONE
[17:46:38.612] Resolving globals: FALSE
[17:46:38.612] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.612] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.613] - globals: [1] ‘a’
[17:46:38.613] 
[17:46:38.613] getGlobalsAndPackages() ... DONE
[17:46:38.613] run() for ‘Future’ ...
[17:46:38.613] - state: ‘created’
[17:46:38.613] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:38.617] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:38.618] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:38.618]   - Field: ‘label’
[17:46:38.618]   - Field: ‘local’
[17:46:38.618]   - Field: ‘owner’
[17:46:38.618]   - Field: ‘envir’
[17:46:38.618]   - Field: ‘workers’
[17:46:38.618]   - Field: ‘packages’
[17:46:38.618]   - Field: ‘gc’
[17:46:38.618]   - Field: ‘job’
[17:46:38.619]   - Field: ‘conditions’
[17:46:38.619]   - Field: ‘expr’
[17:46:38.619]   - Field: ‘uuid’
[17:46:38.619]   - Field: ‘seed’
[17:46:38.619]   - Field: ‘version’
[17:46:38.619]   - Field: ‘result’
[17:46:38.619]   - Field: ‘asynchronous’
[17:46:38.619]   - Field: ‘calls’
[17:46:38.620]   - Field: ‘globals’
[17:46:38.620]   - Field: ‘stdout’
[17:46:38.620]   - Field: ‘earlySignal’
[17:46:38.620]   - Field: ‘lazy’
[17:46:38.620]   - Field: ‘state’
[17:46:38.620] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:38.620] - Launch lazy future ...
[17:46:38.620] Packages needed by the future expression (n = 0): <none>
[17:46:38.621] Packages needed by future strategies (n = 0): <none>
[17:46:38.621] {
[17:46:38.621]     {
[17:46:38.621]         {
[17:46:38.621]             ...future.startTime <- base::Sys.time()
[17:46:38.621]             {
[17:46:38.621]                 {
[17:46:38.621]                   {
[17:46:38.621]                     {
[17:46:38.621]                       base::local({
[17:46:38.621]                         has_future <- base::requireNamespace("future", 
[17:46:38.621]                           quietly = TRUE)
[17:46:38.621]                         if (has_future) {
[17:46:38.621]                           ns <- base::getNamespace("future")
[17:46:38.621]                           version <- ns[[".package"]][["version"]]
[17:46:38.621]                           if (is.null(version)) 
[17:46:38.621]                             version <- utils::packageVersion("future")
[17:46:38.621]                         }
[17:46:38.621]                         else {
[17:46:38.621]                           version <- NULL
[17:46:38.621]                         }
[17:46:38.621]                         if (!has_future || version < "1.8.0") {
[17:46:38.621]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.621]                             "", base::R.version$version.string), 
[17:46:38.621]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:38.621]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.621]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.621]                               "release", "version")], collapse = " "), 
[17:46:38.621]                             hostname = base::Sys.info()[["nodename"]])
[17:46:38.621]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.621]                             info)
[17:46:38.621]                           info <- base::paste(info, collapse = "; ")
[17:46:38.621]                           if (!has_future) {
[17:46:38.621]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.621]                               info)
[17:46:38.621]                           }
[17:46:38.621]                           else {
[17:46:38.621]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.621]                               info, version)
[17:46:38.621]                           }
[17:46:38.621]                           base::stop(msg)
[17:46:38.621]                         }
[17:46:38.621]                       })
[17:46:38.621]                     }
[17:46:38.621]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:38.621]                     base::options(mc.cores = 1L)
[17:46:38.621]                   }
[17:46:38.621]                   ...future.strategy.old <- future::plan("list")
[17:46:38.621]                   options(future.plan = NULL)
[17:46:38.621]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.621]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.621]                 }
[17:46:38.621]                 ...future.workdir <- getwd()
[17:46:38.621]             }
[17:46:38.621]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.621]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.621]         }
[17:46:38.621]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.621]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.621]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.621]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.621]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.621]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.621]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.621]             base::names(...future.oldOptions))
[17:46:38.621]     }
[17:46:38.621]     if (FALSE) {
[17:46:38.621]     }
[17:46:38.621]     else {
[17:46:38.621]         if (TRUE) {
[17:46:38.621]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.621]                 open = "w")
[17:46:38.621]         }
[17:46:38.621]         else {
[17:46:38.621]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.621]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.621]         }
[17:46:38.621]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.621]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.621]             base::sink(type = "output", split = FALSE)
[17:46:38.621]             base::close(...future.stdout)
[17:46:38.621]         }, add = TRUE)
[17:46:38.621]     }
[17:46:38.621]     ...future.frame <- base::sys.nframe()
[17:46:38.621]     ...future.conditions <- base::list()
[17:46:38.621]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.621]     if (FALSE) {
[17:46:38.621]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.621]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.621]     }
[17:46:38.621]     ...future.result <- base::tryCatch({
[17:46:38.621]         base::withCallingHandlers({
[17:46:38.621]             ...future.value <- base::withVisible(base::local({
[17:46:38.621]                 withCallingHandlers({
[17:46:38.621]                   {
[17:46:38.621]                     2 * a
[17:46:38.621]                   }
[17:46:38.621]                 }, immediateCondition = function(cond) {
[17:46:38.621]                   save_rds <- function (object, pathname, ...) 
[17:46:38.621]                   {
[17:46:38.621]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:38.621]                     if (file_test("-f", pathname_tmp)) {
[17:46:38.621]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.621]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:38.621]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.621]                         fi_tmp[["mtime"]])
[17:46:38.621]                     }
[17:46:38.621]                     tryCatch({
[17:46:38.621]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:38.621]                     }, error = function(ex) {
[17:46:38.621]                       msg <- conditionMessage(ex)
[17:46:38.621]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.621]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:38.621]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.621]                         fi_tmp[["mtime"]], msg)
[17:46:38.621]                       ex$message <- msg
[17:46:38.621]                       stop(ex)
[17:46:38.621]                     })
[17:46:38.621]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:38.621]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:38.621]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:38.621]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.621]                       fi <- file.info(pathname)
[17:46:38.621]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:38.621]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.621]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:38.621]                         fi[["size"]], fi[["mtime"]])
[17:46:38.621]                       stop(msg)
[17:46:38.621]                     }
[17:46:38.621]                     invisible(pathname)
[17:46:38.621]                   }
[17:46:38.621]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:38.621]                     rootPath = tempdir()) 
[17:46:38.621]                   {
[17:46:38.621]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:38.621]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:38.621]                       tmpdir = path, fileext = ".rds")
[17:46:38.621]                     save_rds(obj, file)
[17:46:38.621]                   }
[17:46:38.621]                   saveImmediateCondition(cond, path = "/tmp/RtmpPsSrrR/.future/immediateConditions")
[17:46:38.621]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.621]                   {
[17:46:38.621]                     inherits <- base::inherits
[17:46:38.621]                     invokeRestart <- base::invokeRestart
[17:46:38.621]                     is.null <- base::is.null
[17:46:38.621]                     muffled <- FALSE
[17:46:38.621]                     if (inherits(cond, "message")) {
[17:46:38.621]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:38.621]                       if (muffled) 
[17:46:38.621]                         invokeRestart("muffleMessage")
[17:46:38.621]                     }
[17:46:38.621]                     else if (inherits(cond, "warning")) {
[17:46:38.621]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:38.621]                       if (muffled) 
[17:46:38.621]                         invokeRestart("muffleWarning")
[17:46:38.621]                     }
[17:46:38.621]                     else if (inherits(cond, "condition")) {
[17:46:38.621]                       if (!is.null(pattern)) {
[17:46:38.621]                         computeRestarts <- base::computeRestarts
[17:46:38.621]                         grepl <- base::grepl
[17:46:38.621]                         restarts <- computeRestarts(cond)
[17:46:38.621]                         for (restart in restarts) {
[17:46:38.621]                           name <- restart$name
[17:46:38.621]                           if (is.null(name)) 
[17:46:38.621]                             next
[17:46:38.621]                           if (!grepl(pattern, name)) 
[17:46:38.621]                             next
[17:46:38.621]                           invokeRestart(restart)
[17:46:38.621]                           muffled <- TRUE
[17:46:38.621]                           break
[17:46:38.621]                         }
[17:46:38.621]                       }
[17:46:38.621]                     }
[17:46:38.621]                     invisible(muffled)
[17:46:38.621]                   }
[17:46:38.621]                   muffleCondition(cond)
[17:46:38.621]                 })
[17:46:38.621]             }))
[17:46:38.621]             future::FutureResult(value = ...future.value$value, 
[17:46:38.621]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.621]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.621]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.621]                     ...future.globalenv.names))
[17:46:38.621]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.621]         }, condition = base::local({
[17:46:38.621]             c <- base::c
[17:46:38.621]             inherits <- base::inherits
[17:46:38.621]             invokeRestart <- base::invokeRestart
[17:46:38.621]             length <- base::length
[17:46:38.621]             list <- base::list
[17:46:38.621]             seq.int <- base::seq.int
[17:46:38.621]             signalCondition <- base::signalCondition
[17:46:38.621]             sys.calls <- base::sys.calls
[17:46:38.621]             `[[` <- base::`[[`
[17:46:38.621]             `+` <- base::`+`
[17:46:38.621]             `<<-` <- base::`<<-`
[17:46:38.621]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.621]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.621]                   3L)]
[17:46:38.621]             }
[17:46:38.621]             function(cond) {
[17:46:38.621]                 is_error <- inherits(cond, "error")
[17:46:38.621]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.621]                   NULL)
[17:46:38.621]                 if (is_error) {
[17:46:38.621]                   sessionInformation <- function() {
[17:46:38.621]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.621]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.621]                       search = base::search(), system = base::Sys.info())
[17:46:38.621]                   }
[17:46:38.621]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.621]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.621]                     cond$call), session = sessionInformation(), 
[17:46:38.621]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.621]                   signalCondition(cond)
[17:46:38.621]                 }
[17:46:38.621]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.621]                 "immediateCondition"))) {
[17:46:38.621]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.621]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.621]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.621]                   if (TRUE && !signal) {
[17:46:38.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.621]                     {
[17:46:38.621]                       inherits <- base::inherits
[17:46:38.621]                       invokeRestart <- base::invokeRestart
[17:46:38.621]                       is.null <- base::is.null
[17:46:38.621]                       muffled <- FALSE
[17:46:38.621]                       if (inherits(cond, "message")) {
[17:46:38.621]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.621]                         if (muffled) 
[17:46:38.621]                           invokeRestart("muffleMessage")
[17:46:38.621]                       }
[17:46:38.621]                       else if (inherits(cond, "warning")) {
[17:46:38.621]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.621]                         if (muffled) 
[17:46:38.621]                           invokeRestart("muffleWarning")
[17:46:38.621]                       }
[17:46:38.621]                       else if (inherits(cond, "condition")) {
[17:46:38.621]                         if (!is.null(pattern)) {
[17:46:38.621]                           computeRestarts <- base::computeRestarts
[17:46:38.621]                           grepl <- base::grepl
[17:46:38.621]                           restarts <- computeRestarts(cond)
[17:46:38.621]                           for (restart in restarts) {
[17:46:38.621]                             name <- restart$name
[17:46:38.621]                             if (is.null(name)) 
[17:46:38.621]                               next
[17:46:38.621]                             if (!grepl(pattern, name)) 
[17:46:38.621]                               next
[17:46:38.621]                             invokeRestart(restart)
[17:46:38.621]                             muffled <- TRUE
[17:46:38.621]                             break
[17:46:38.621]                           }
[17:46:38.621]                         }
[17:46:38.621]                       }
[17:46:38.621]                       invisible(muffled)
[17:46:38.621]                     }
[17:46:38.621]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.621]                   }
[17:46:38.621]                 }
[17:46:38.621]                 else {
[17:46:38.621]                   if (TRUE) {
[17:46:38.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.621]                     {
[17:46:38.621]                       inherits <- base::inherits
[17:46:38.621]                       invokeRestart <- base::invokeRestart
[17:46:38.621]                       is.null <- base::is.null
[17:46:38.621]                       muffled <- FALSE
[17:46:38.621]                       if (inherits(cond, "message")) {
[17:46:38.621]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.621]                         if (muffled) 
[17:46:38.621]                           invokeRestart("muffleMessage")
[17:46:38.621]                       }
[17:46:38.621]                       else if (inherits(cond, "warning")) {
[17:46:38.621]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.621]                         if (muffled) 
[17:46:38.621]                           invokeRestart("muffleWarning")
[17:46:38.621]                       }
[17:46:38.621]                       else if (inherits(cond, "condition")) {
[17:46:38.621]                         if (!is.null(pattern)) {
[17:46:38.621]                           computeRestarts <- base::computeRestarts
[17:46:38.621]                           grepl <- base::grepl
[17:46:38.621]                           restarts <- computeRestarts(cond)
[17:46:38.621]                           for (restart in restarts) {
[17:46:38.621]                             name <- restart$name
[17:46:38.621]                             if (is.null(name)) 
[17:46:38.621]                               next
[17:46:38.621]                             if (!grepl(pattern, name)) 
[17:46:38.621]                               next
[17:46:38.621]                             invokeRestart(restart)
[17:46:38.621]                             muffled <- TRUE
[17:46:38.621]                             break
[17:46:38.621]                           }
[17:46:38.621]                         }
[17:46:38.621]                       }
[17:46:38.621]                       invisible(muffled)
[17:46:38.621]                     }
[17:46:38.621]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.621]                   }
[17:46:38.621]                 }
[17:46:38.621]             }
[17:46:38.621]         }))
[17:46:38.621]     }, error = function(ex) {
[17:46:38.621]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.621]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.621]                 ...future.rng), started = ...future.startTime, 
[17:46:38.621]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.621]             version = "1.8"), class = "FutureResult")
[17:46:38.621]     }, finally = {
[17:46:38.621]         if (!identical(...future.workdir, getwd())) 
[17:46:38.621]             setwd(...future.workdir)
[17:46:38.621]         {
[17:46:38.621]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.621]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.621]             }
[17:46:38.621]             base::options(...future.oldOptions)
[17:46:38.621]             if (.Platform$OS.type == "windows") {
[17:46:38.621]                 old_names <- names(...future.oldEnvVars)
[17:46:38.621]                 envs <- base::Sys.getenv()
[17:46:38.621]                 names <- names(envs)
[17:46:38.621]                 common <- intersect(names, old_names)
[17:46:38.621]                 added <- setdiff(names, old_names)
[17:46:38.621]                 removed <- setdiff(old_names, names)
[17:46:38.621]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.621]                   envs[common]]
[17:46:38.621]                 NAMES <- toupper(changed)
[17:46:38.621]                 args <- list()
[17:46:38.621]                 for (kk in seq_along(NAMES)) {
[17:46:38.621]                   name <- changed[[kk]]
[17:46:38.621]                   NAME <- NAMES[[kk]]
[17:46:38.621]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.621]                     next
[17:46:38.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.621]                 }
[17:46:38.621]                 NAMES <- toupper(added)
[17:46:38.621]                 for (kk in seq_along(NAMES)) {
[17:46:38.621]                   name <- added[[kk]]
[17:46:38.621]                   NAME <- NAMES[[kk]]
[17:46:38.621]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.621]                     next
[17:46:38.621]                   args[[name]] <- ""
[17:46:38.621]                 }
[17:46:38.621]                 NAMES <- toupper(removed)
[17:46:38.621]                 for (kk in seq_along(NAMES)) {
[17:46:38.621]                   name <- removed[[kk]]
[17:46:38.621]                   NAME <- NAMES[[kk]]
[17:46:38.621]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.621]                     next
[17:46:38.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.621]                 }
[17:46:38.621]                 if (length(args) > 0) 
[17:46:38.621]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.621]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.621]             }
[17:46:38.621]             else {
[17:46:38.621]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.621]             }
[17:46:38.621]             {
[17:46:38.621]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.621]                   0L) {
[17:46:38.621]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.621]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.621]                   base::options(opts)
[17:46:38.621]                 }
[17:46:38.621]                 {
[17:46:38.621]                   {
[17:46:38.621]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:38.621]                     NULL
[17:46:38.621]                   }
[17:46:38.621]                   options(future.plan = NULL)
[17:46:38.621]                   if (is.na(NA_character_)) 
[17:46:38.621]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.621]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.621]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.621]                     .init = FALSE)
[17:46:38.621]                 }
[17:46:38.621]             }
[17:46:38.621]         }
[17:46:38.621]     })
[17:46:38.621]     if (TRUE) {
[17:46:38.621]         base::sink(type = "output", split = FALSE)
[17:46:38.621]         if (TRUE) {
[17:46:38.621]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.621]         }
[17:46:38.621]         else {
[17:46:38.621]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.621]         }
[17:46:38.621]         base::close(...future.stdout)
[17:46:38.621]         ...future.stdout <- NULL
[17:46:38.621]     }
[17:46:38.621]     ...future.result$conditions <- ...future.conditions
[17:46:38.621]     ...future.result$finished <- base::Sys.time()
[17:46:38.621]     ...future.result
[17:46:38.621] }
[17:46:38.624] assign_globals() ...
[17:46:38.624] List of 1
[17:46:38.624]  $ a: num 1
[17:46:38.624]  - attr(*, "where")=List of 1
[17:46:38.624]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.624]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.624]  - attr(*, "resolved")= logi FALSE
[17:46:38.624]  - attr(*, "total_size")= num 56
[17:46:38.624]  - attr(*, "already-done")= logi TRUE
[17:46:38.627] - copied ‘a’ to environment
[17:46:38.627] assign_globals() ... done
[17:46:38.627] requestCore(): workers = 2
[17:46:38.629] MulticoreFuture started
[17:46:38.629] - Launch lazy future ... done
[17:46:38.629] run() for ‘MulticoreFuture’ ... done
[17:46:38.630] result() for MulticoreFuture ...
[17:46:38.629] plan(): Setting new future strategy stack:
[17:46:38.630] List of future strategies:
[17:46:38.630] 1. sequential:
[17:46:38.630]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.630]    - tweaked: FALSE
[17:46:38.630]    - call: NULL
[17:46:38.631] plan(): nbrOfWorkers() = 1
[17:46:38.637] plan(): Setting new future strategy stack:
[17:46:38.637] List of future strategies:
[17:46:38.637] 1. multicore:
[17:46:38.637]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:38.637]    - tweaked: FALSE
[17:46:38.637]    - call: plan(strategy)
[17:46:38.642] plan(): nbrOfWorkers() = 2
[17:46:38.643] result() for MulticoreFuture ...
[17:46:38.645] result() for MulticoreFuture ... done
[17:46:38.646] result() for MulticoreFuture ... done
[17:46:38.646] result() for MulticoreFuture ...
[17:46:38.646] result() for MulticoreFuture ... done
[17:46:38.646] getGlobalsAndPackages() ...
[17:46:38.646] Searching for globals...
[17:46:38.648] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.648] Searching for globals ... DONE
[17:46:38.648] Resolving globals: FALSE
[17:46:38.648] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.649] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.649] - globals: [1] ‘a’
[17:46:38.649] 
[17:46:38.649] getGlobalsAndPackages() ... DONE
[17:46:38.650] run() for ‘Future’ ...
[17:46:38.650] - state: ‘created’
[17:46:38.650] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:38.654] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:38.654] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:38.654]   - Field: ‘label’
[17:46:38.655]   - Field: ‘local’
[17:46:38.655]   - Field: ‘owner’
[17:46:38.655]   - Field: ‘envir’
[17:46:38.655]   - Field: ‘workers’
[17:46:38.655]   - Field: ‘packages’
[17:46:38.655]   - Field: ‘gc’
[17:46:38.655]   - Field: ‘job’
[17:46:38.656]   - Field: ‘conditions’
[17:46:38.656]   - Field: ‘expr’
[17:46:38.656]   - Field: ‘uuid’
[17:46:38.656]   - Field: ‘seed’
[17:46:38.656]   - Field: ‘version’
[17:46:38.656]   - Field: ‘result’
[17:46:38.656]   - Field: ‘asynchronous’
[17:46:38.657]   - Field: ‘calls’
[17:46:38.657]   - Field: ‘globals’
[17:46:38.657]   - Field: ‘stdout’
[17:46:38.657]   - Field: ‘earlySignal’
[17:46:38.657]   - Field: ‘lazy’
[17:46:38.657]   - Field: ‘state’
[17:46:38.657] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:38.657] - Launch lazy future ...
[17:46:38.658] Packages needed by the future expression (n = 0): <none>
[17:46:38.658] Packages needed by future strategies (n = 0): <none>
[17:46:38.658] {
[17:46:38.658]     {
[17:46:38.658]         {
[17:46:38.658]             ...future.startTime <- base::Sys.time()
[17:46:38.658]             {
[17:46:38.658]                 {
[17:46:38.658]                   {
[17:46:38.658]                     {
[17:46:38.658]                       base::local({
[17:46:38.658]                         has_future <- base::requireNamespace("future", 
[17:46:38.658]                           quietly = TRUE)
[17:46:38.658]                         if (has_future) {
[17:46:38.658]                           ns <- base::getNamespace("future")
[17:46:38.658]                           version <- ns[[".package"]][["version"]]
[17:46:38.658]                           if (is.null(version)) 
[17:46:38.658]                             version <- utils::packageVersion("future")
[17:46:38.658]                         }
[17:46:38.658]                         else {
[17:46:38.658]                           version <- NULL
[17:46:38.658]                         }
[17:46:38.658]                         if (!has_future || version < "1.8.0") {
[17:46:38.658]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.658]                             "", base::R.version$version.string), 
[17:46:38.658]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:38.658]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.658]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.658]                               "release", "version")], collapse = " "), 
[17:46:38.658]                             hostname = base::Sys.info()[["nodename"]])
[17:46:38.658]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.658]                             info)
[17:46:38.658]                           info <- base::paste(info, collapse = "; ")
[17:46:38.658]                           if (!has_future) {
[17:46:38.658]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.658]                               info)
[17:46:38.658]                           }
[17:46:38.658]                           else {
[17:46:38.658]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.658]                               info, version)
[17:46:38.658]                           }
[17:46:38.658]                           base::stop(msg)
[17:46:38.658]                         }
[17:46:38.658]                       })
[17:46:38.658]                     }
[17:46:38.658]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:38.658]                     base::options(mc.cores = 1L)
[17:46:38.658]                   }
[17:46:38.658]                   ...future.strategy.old <- future::plan("list")
[17:46:38.658]                   options(future.plan = NULL)
[17:46:38.658]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.658]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.658]                 }
[17:46:38.658]                 ...future.workdir <- getwd()
[17:46:38.658]             }
[17:46:38.658]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.658]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.658]         }
[17:46:38.658]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.658]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.658]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.658]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.658]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.658]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.658]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.658]             base::names(...future.oldOptions))
[17:46:38.658]     }
[17:46:38.658]     if (FALSE) {
[17:46:38.658]     }
[17:46:38.658]     else {
[17:46:38.658]         if (TRUE) {
[17:46:38.658]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.658]                 open = "w")
[17:46:38.658]         }
[17:46:38.658]         else {
[17:46:38.658]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.658]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.658]         }
[17:46:38.658]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.658]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.658]             base::sink(type = "output", split = FALSE)
[17:46:38.658]             base::close(...future.stdout)
[17:46:38.658]         }, add = TRUE)
[17:46:38.658]     }
[17:46:38.658]     ...future.frame <- base::sys.nframe()
[17:46:38.658]     ...future.conditions <- base::list()
[17:46:38.658]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.658]     if (FALSE) {
[17:46:38.658]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.658]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.658]     }
[17:46:38.658]     ...future.result <- base::tryCatch({
[17:46:38.658]         base::withCallingHandlers({
[17:46:38.658]             ...future.value <- base::withVisible(base::local({
[17:46:38.658]                 withCallingHandlers({
[17:46:38.658]                   {
[17:46:38.658]                     2 * a
[17:46:38.658]                   }
[17:46:38.658]                 }, immediateCondition = function(cond) {
[17:46:38.658]                   save_rds <- function (object, pathname, ...) 
[17:46:38.658]                   {
[17:46:38.658]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:38.658]                     if (file_test("-f", pathname_tmp)) {
[17:46:38.658]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.658]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:38.658]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.658]                         fi_tmp[["mtime"]])
[17:46:38.658]                     }
[17:46:38.658]                     tryCatch({
[17:46:38.658]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:38.658]                     }, error = function(ex) {
[17:46:38.658]                       msg <- conditionMessage(ex)
[17:46:38.658]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.658]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:38.658]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.658]                         fi_tmp[["mtime"]], msg)
[17:46:38.658]                       ex$message <- msg
[17:46:38.658]                       stop(ex)
[17:46:38.658]                     })
[17:46:38.658]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:38.658]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:38.658]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:38.658]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.658]                       fi <- file.info(pathname)
[17:46:38.658]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:38.658]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.658]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:38.658]                         fi[["size"]], fi[["mtime"]])
[17:46:38.658]                       stop(msg)
[17:46:38.658]                     }
[17:46:38.658]                     invisible(pathname)
[17:46:38.658]                   }
[17:46:38.658]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:38.658]                     rootPath = tempdir()) 
[17:46:38.658]                   {
[17:46:38.658]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:38.658]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:38.658]                       tmpdir = path, fileext = ".rds")
[17:46:38.658]                     save_rds(obj, file)
[17:46:38.658]                   }
[17:46:38.658]                   saveImmediateCondition(cond, path = "/tmp/RtmpPsSrrR/.future/immediateConditions")
[17:46:38.658]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.658]                   {
[17:46:38.658]                     inherits <- base::inherits
[17:46:38.658]                     invokeRestart <- base::invokeRestart
[17:46:38.658]                     is.null <- base::is.null
[17:46:38.658]                     muffled <- FALSE
[17:46:38.658]                     if (inherits(cond, "message")) {
[17:46:38.658]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:38.658]                       if (muffled) 
[17:46:38.658]                         invokeRestart("muffleMessage")
[17:46:38.658]                     }
[17:46:38.658]                     else if (inherits(cond, "warning")) {
[17:46:38.658]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:38.658]                       if (muffled) 
[17:46:38.658]                         invokeRestart("muffleWarning")
[17:46:38.658]                     }
[17:46:38.658]                     else if (inherits(cond, "condition")) {
[17:46:38.658]                       if (!is.null(pattern)) {
[17:46:38.658]                         computeRestarts <- base::computeRestarts
[17:46:38.658]                         grepl <- base::grepl
[17:46:38.658]                         restarts <- computeRestarts(cond)
[17:46:38.658]                         for (restart in restarts) {
[17:46:38.658]                           name <- restart$name
[17:46:38.658]                           if (is.null(name)) 
[17:46:38.658]                             next
[17:46:38.658]                           if (!grepl(pattern, name)) 
[17:46:38.658]                             next
[17:46:38.658]                           invokeRestart(restart)
[17:46:38.658]                           muffled <- TRUE
[17:46:38.658]                           break
[17:46:38.658]                         }
[17:46:38.658]                       }
[17:46:38.658]                     }
[17:46:38.658]                     invisible(muffled)
[17:46:38.658]                   }
[17:46:38.658]                   muffleCondition(cond)
[17:46:38.658]                 })
[17:46:38.658]             }))
[17:46:38.658]             future::FutureResult(value = ...future.value$value, 
[17:46:38.658]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.658]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.658]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.658]                     ...future.globalenv.names))
[17:46:38.658]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.658]         }, condition = base::local({
[17:46:38.658]             c <- base::c
[17:46:38.658]             inherits <- base::inherits
[17:46:38.658]             invokeRestart <- base::invokeRestart
[17:46:38.658]             length <- base::length
[17:46:38.658]             list <- base::list
[17:46:38.658]             seq.int <- base::seq.int
[17:46:38.658]             signalCondition <- base::signalCondition
[17:46:38.658]             sys.calls <- base::sys.calls
[17:46:38.658]             `[[` <- base::`[[`
[17:46:38.658]             `+` <- base::`+`
[17:46:38.658]             `<<-` <- base::`<<-`
[17:46:38.658]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.658]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.658]                   3L)]
[17:46:38.658]             }
[17:46:38.658]             function(cond) {
[17:46:38.658]                 is_error <- inherits(cond, "error")
[17:46:38.658]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.658]                   NULL)
[17:46:38.658]                 if (is_error) {
[17:46:38.658]                   sessionInformation <- function() {
[17:46:38.658]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.658]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.658]                       search = base::search(), system = base::Sys.info())
[17:46:38.658]                   }
[17:46:38.658]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.658]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.658]                     cond$call), session = sessionInformation(), 
[17:46:38.658]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.658]                   signalCondition(cond)
[17:46:38.658]                 }
[17:46:38.658]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.658]                 "immediateCondition"))) {
[17:46:38.658]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.658]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.658]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.658]                   if (TRUE && !signal) {
[17:46:38.658]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.658]                     {
[17:46:38.658]                       inherits <- base::inherits
[17:46:38.658]                       invokeRestart <- base::invokeRestart
[17:46:38.658]                       is.null <- base::is.null
[17:46:38.658]                       muffled <- FALSE
[17:46:38.658]                       if (inherits(cond, "message")) {
[17:46:38.658]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.658]                         if (muffled) 
[17:46:38.658]                           invokeRestart("muffleMessage")
[17:46:38.658]                       }
[17:46:38.658]                       else if (inherits(cond, "warning")) {
[17:46:38.658]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.658]                         if (muffled) 
[17:46:38.658]                           invokeRestart("muffleWarning")
[17:46:38.658]                       }
[17:46:38.658]                       else if (inherits(cond, "condition")) {
[17:46:38.658]                         if (!is.null(pattern)) {
[17:46:38.658]                           computeRestarts <- base::computeRestarts
[17:46:38.658]                           grepl <- base::grepl
[17:46:38.658]                           restarts <- computeRestarts(cond)
[17:46:38.658]                           for (restart in restarts) {
[17:46:38.658]                             name <- restart$name
[17:46:38.658]                             if (is.null(name)) 
[17:46:38.658]                               next
[17:46:38.658]                             if (!grepl(pattern, name)) 
[17:46:38.658]                               next
[17:46:38.658]                             invokeRestart(restart)
[17:46:38.658]                             muffled <- TRUE
[17:46:38.658]                             break
[17:46:38.658]                           }
[17:46:38.658]                         }
[17:46:38.658]                       }
[17:46:38.658]                       invisible(muffled)
[17:46:38.658]                     }
[17:46:38.658]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.658]                   }
[17:46:38.658]                 }
[17:46:38.658]                 else {
[17:46:38.658]                   if (TRUE) {
[17:46:38.658]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.658]                     {
[17:46:38.658]                       inherits <- base::inherits
[17:46:38.658]                       invokeRestart <- base::invokeRestart
[17:46:38.658]                       is.null <- base::is.null
[17:46:38.658]                       muffled <- FALSE
[17:46:38.658]                       if (inherits(cond, "message")) {
[17:46:38.658]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.658]                         if (muffled) 
[17:46:38.658]                           invokeRestart("muffleMessage")
[17:46:38.658]                       }
[17:46:38.658]                       else if (inherits(cond, "warning")) {
[17:46:38.658]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.658]                         if (muffled) 
[17:46:38.658]                           invokeRestart("muffleWarning")
[17:46:38.658]                       }
[17:46:38.658]                       else if (inherits(cond, "condition")) {
[17:46:38.658]                         if (!is.null(pattern)) {
[17:46:38.658]                           computeRestarts <- base::computeRestarts
[17:46:38.658]                           grepl <- base::grepl
[17:46:38.658]                           restarts <- computeRestarts(cond)
[17:46:38.658]                           for (restart in restarts) {
[17:46:38.658]                             name <- restart$name
[17:46:38.658]                             if (is.null(name)) 
[17:46:38.658]                               next
[17:46:38.658]                             if (!grepl(pattern, name)) 
[17:46:38.658]                               next
[17:46:38.658]                             invokeRestart(restart)
[17:46:38.658]                             muffled <- TRUE
[17:46:38.658]                             break
[17:46:38.658]                           }
[17:46:38.658]                         }
[17:46:38.658]                       }
[17:46:38.658]                       invisible(muffled)
[17:46:38.658]                     }
[17:46:38.658]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.658]                   }
[17:46:38.658]                 }
[17:46:38.658]             }
[17:46:38.658]         }))
[17:46:38.658]     }, error = function(ex) {
[17:46:38.658]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.658]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.658]                 ...future.rng), started = ...future.startTime, 
[17:46:38.658]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.658]             version = "1.8"), class = "FutureResult")
[17:46:38.658]     }, finally = {
[17:46:38.658]         if (!identical(...future.workdir, getwd())) 
[17:46:38.658]             setwd(...future.workdir)
[17:46:38.658]         {
[17:46:38.658]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.658]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.658]             }
[17:46:38.658]             base::options(...future.oldOptions)
[17:46:38.658]             if (.Platform$OS.type == "windows") {
[17:46:38.658]                 old_names <- names(...future.oldEnvVars)
[17:46:38.658]                 envs <- base::Sys.getenv()
[17:46:38.658]                 names <- names(envs)
[17:46:38.658]                 common <- intersect(names, old_names)
[17:46:38.658]                 added <- setdiff(names, old_names)
[17:46:38.658]                 removed <- setdiff(old_names, names)
[17:46:38.658]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.658]                   envs[common]]
[17:46:38.658]                 NAMES <- toupper(changed)
[17:46:38.658]                 args <- list()
[17:46:38.658]                 for (kk in seq_along(NAMES)) {
[17:46:38.658]                   name <- changed[[kk]]
[17:46:38.658]                   NAME <- NAMES[[kk]]
[17:46:38.658]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.658]                     next
[17:46:38.658]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.658]                 }
[17:46:38.658]                 NAMES <- toupper(added)
[17:46:38.658]                 for (kk in seq_along(NAMES)) {
[17:46:38.658]                   name <- added[[kk]]
[17:46:38.658]                   NAME <- NAMES[[kk]]
[17:46:38.658]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.658]                     next
[17:46:38.658]                   args[[name]] <- ""
[17:46:38.658]                 }
[17:46:38.658]                 NAMES <- toupper(removed)
[17:46:38.658]                 for (kk in seq_along(NAMES)) {
[17:46:38.658]                   name <- removed[[kk]]
[17:46:38.658]                   NAME <- NAMES[[kk]]
[17:46:38.658]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.658]                     next
[17:46:38.658]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.658]                 }
[17:46:38.658]                 if (length(args) > 0) 
[17:46:38.658]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.658]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.658]             }
[17:46:38.658]             else {
[17:46:38.658]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.658]             }
[17:46:38.658]             {
[17:46:38.658]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.658]                   0L) {
[17:46:38.658]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.658]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.658]                   base::options(opts)
[17:46:38.658]                 }
[17:46:38.658]                 {
[17:46:38.658]                   {
[17:46:38.658]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:38.658]                     NULL
[17:46:38.658]                   }
[17:46:38.658]                   options(future.plan = NULL)
[17:46:38.658]                   if (is.na(NA_character_)) 
[17:46:38.658]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.658]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.658]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.658]                     .init = FALSE)
[17:46:38.658]                 }
[17:46:38.658]             }
[17:46:38.658]         }
[17:46:38.658]     })
[17:46:38.658]     if (TRUE) {
[17:46:38.658]         base::sink(type = "output", split = FALSE)
[17:46:38.658]         if (TRUE) {
[17:46:38.658]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.658]         }
[17:46:38.658]         else {
[17:46:38.658]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.658]         }
[17:46:38.658]         base::close(...future.stdout)
[17:46:38.658]         ...future.stdout <- NULL
[17:46:38.658]     }
[17:46:38.658]     ...future.result$conditions <- ...future.conditions
[17:46:38.658]     ...future.result$finished <- base::Sys.time()
[17:46:38.658]     ...future.result
[17:46:38.658] }
[17:46:38.661] assign_globals() ...
[17:46:38.661] List of 1
[17:46:38.661]  $ a: num 1
[17:46:38.661]  - attr(*, "where")=List of 1
[17:46:38.661]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.661]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.661]  - attr(*, "resolved")= logi FALSE
[17:46:38.661]  - attr(*, "total_size")= num 56
[17:46:38.661]  - attr(*, "already-done")= logi TRUE
[17:46:38.664] - copied ‘a’ to environment
[17:46:38.664] assign_globals() ... done
[17:46:38.664] requestCore(): workers = 2
[17:46:38.666] MulticoreFuture started
[17:46:38.666] - Launch lazy future ... done
[17:46:38.666] run() for ‘MulticoreFuture’ ... done
[17:46:38.666] result() for MulticoreFuture ...
[17:46:38.667] plan(): Setting new future strategy stack:
[17:46:38.667] List of future strategies:
[17:46:38.667] 1. sequential:
[17:46:38.667]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.667]    - tweaked: FALSE
[17:46:38.667]    - call: NULL
[17:46:38.668] plan(): nbrOfWorkers() = 1
[17:46:38.670] plan(): Setting new future strategy stack:
[17:46:38.670] List of future strategies:
[17:46:38.670] 1. multicore:
[17:46:38.670]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:38.670]    - tweaked: FALSE
[17:46:38.670]    - call: plan(strategy)
[17:46:38.675] plan(): nbrOfWorkers() = 2
[17:46:38.676] result() for MulticoreFuture ...
[17:46:38.676] result() for MulticoreFuture ... done
[17:46:38.676] result() for MulticoreFuture ... done
[17:46:38.676] result() for MulticoreFuture ...
[17:46:38.676] result() for MulticoreFuture ... done
[17:46:38.677] getGlobalsAndPackages() ...
[17:46:38.677] Searching for globals...
[17:46:38.678] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:38.679] Searching for globals ... DONE
[17:46:38.679] Resolving globals: FALSE
[17:46:38.679] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:38.680] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:38.680] - globals: [1] ‘a’
[17:46:38.680] 
[17:46:38.680] getGlobalsAndPackages() ... DONE
[17:46:38.680] run() for ‘Future’ ...
[17:46:38.681] - state: ‘created’
[17:46:38.681] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:46:38.685] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:38.685] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:46:38.685]   - Field: ‘label’
[17:46:38.685]   - Field: ‘local’
[17:46:38.685]   - Field: ‘owner’
[17:46:38.685]   - Field: ‘envir’
[17:46:38.685]   - Field: ‘workers’
[17:46:38.685]   - Field: ‘packages’
[17:46:38.686]   - Field: ‘gc’
[17:46:38.686]   - Field: ‘job’
[17:46:38.686]   - Field: ‘conditions’
[17:46:38.686]   - Field: ‘expr’
[17:46:38.686]   - Field: ‘uuid’
[17:46:38.686]   - Field: ‘seed’
[17:46:38.686]   - Field: ‘version’
[17:46:38.686]   - Field: ‘result’
[17:46:38.686]   - Field: ‘asynchronous’
[17:46:38.687]   - Field: ‘calls’
[17:46:38.687]   - Field: ‘globals’
[17:46:38.687]   - Field: ‘stdout’
[17:46:38.687]   - Field: ‘earlySignal’
[17:46:38.687]   - Field: ‘lazy’
[17:46:38.687]   - Field: ‘state’
[17:46:38.687] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:46:38.687] - Launch lazy future ...
[17:46:38.688] Packages needed by the future expression (n = 0): <none>
[17:46:38.688] Packages needed by future strategies (n = 0): <none>
[17:46:38.688] {
[17:46:38.688]     {
[17:46:38.688]         {
[17:46:38.688]             ...future.startTime <- base::Sys.time()
[17:46:38.688]             {
[17:46:38.688]                 {
[17:46:38.688]                   {
[17:46:38.688]                     {
[17:46:38.688]                       base::local({
[17:46:38.688]                         has_future <- base::requireNamespace("future", 
[17:46:38.688]                           quietly = TRUE)
[17:46:38.688]                         if (has_future) {
[17:46:38.688]                           ns <- base::getNamespace("future")
[17:46:38.688]                           version <- ns[[".package"]][["version"]]
[17:46:38.688]                           if (is.null(version)) 
[17:46:38.688]                             version <- utils::packageVersion("future")
[17:46:38.688]                         }
[17:46:38.688]                         else {
[17:46:38.688]                           version <- NULL
[17:46:38.688]                         }
[17:46:38.688]                         if (!has_future || version < "1.8.0") {
[17:46:38.688]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:38.688]                             "", base::R.version$version.string), 
[17:46:38.688]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:38.688]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:38.688]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:38.688]                               "release", "version")], collapse = " "), 
[17:46:38.688]                             hostname = base::Sys.info()[["nodename"]])
[17:46:38.688]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:38.688]                             info)
[17:46:38.688]                           info <- base::paste(info, collapse = "; ")
[17:46:38.688]                           if (!has_future) {
[17:46:38.688]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:38.688]                               info)
[17:46:38.688]                           }
[17:46:38.688]                           else {
[17:46:38.688]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:38.688]                               info, version)
[17:46:38.688]                           }
[17:46:38.688]                           base::stop(msg)
[17:46:38.688]                         }
[17:46:38.688]                       })
[17:46:38.688]                     }
[17:46:38.688]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:38.688]                     base::options(mc.cores = 1L)
[17:46:38.688]                   }
[17:46:38.688]                   ...future.strategy.old <- future::plan("list")
[17:46:38.688]                   options(future.plan = NULL)
[17:46:38.688]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.688]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:38.688]                 }
[17:46:38.688]                 ...future.workdir <- getwd()
[17:46:38.688]             }
[17:46:38.688]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:38.688]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:38.688]         }
[17:46:38.688]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:38.688]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:38.688]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:38.688]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:38.688]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:38.688]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:38.688]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:38.688]             base::names(...future.oldOptions))
[17:46:38.688]     }
[17:46:38.688]     if (FALSE) {
[17:46:38.688]     }
[17:46:38.688]     else {
[17:46:38.688]         if (TRUE) {
[17:46:38.688]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:38.688]                 open = "w")
[17:46:38.688]         }
[17:46:38.688]         else {
[17:46:38.688]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:38.688]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:38.688]         }
[17:46:38.688]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:38.688]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:38.688]             base::sink(type = "output", split = FALSE)
[17:46:38.688]             base::close(...future.stdout)
[17:46:38.688]         }, add = TRUE)
[17:46:38.688]     }
[17:46:38.688]     ...future.frame <- base::sys.nframe()
[17:46:38.688]     ...future.conditions <- base::list()
[17:46:38.688]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:38.688]     if (FALSE) {
[17:46:38.688]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:38.688]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:38.688]     }
[17:46:38.688]     ...future.result <- base::tryCatch({
[17:46:38.688]         base::withCallingHandlers({
[17:46:38.688]             ...future.value <- base::withVisible(base::local({
[17:46:38.688]                 withCallingHandlers({
[17:46:38.688]                   {
[17:46:38.688]                     2 * a
[17:46:38.688]                   }
[17:46:38.688]                 }, immediateCondition = function(cond) {
[17:46:38.688]                   save_rds <- function (object, pathname, ...) 
[17:46:38.688]                   {
[17:46:38.688]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:46:38.688]                     if (file_test("-f", pathname_tmp)) {
[17:46:38.688]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.688]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:46:38.688]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.688]                         fi_tmp[["mtime"]])
[17:46:38.688]                     }
[17:46:38.688]                     tryCatch({
[17:46:38.688]                       saveRDS(object, file = pathname_tmp, ...)
[17:46:38.688]                     }, error = function(ex) {
[17:46:38.688]                       msg <- conditionMessage(ex)
[17:46:38.688]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.688]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:46:38.688]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.688]                         fi_tmp[["mtime"]], msg)
[17:46:38.688]                       ex$message <- msg
[17:46:38.688]                       stop(ex)
[17:46:38.688]                     })
[17:46:38.688]                     stopifnot(file_test("-f", pathname_tmp))
[17:46:38.688]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:46:38.688]                     if (!res || file_test("-f", pathname_tmp)) {
[17:46:38.688]                       fi_tmp <- file.info(pathname_tmp)
[17:46:38.688]                       fi <- file.info(pathname)
[17:46:38.688]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:46:38.688]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:46:38.688]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:46:38.688]                         fi[["size"]], fi[["mtime"]])
[17:46:38.688]                       stop(msg)
[17:46:38.688]                     }
[17:46:38.688]                     invisible(pathname)
[17:46:38.688]                   }
[17:46:38.688]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:46:38.688]                     rootPath = tempdir()) 
[17:46:38.688]                   {
[17:46:38.688]                     obj <- list(time = Sys.time(), condition = cond)
[17:46:38.688]                     file <- tempfile(pattern = class(cond)[1], 
[17:46:38.688]                       tmpdir = path, fileext = ".rds")
[17:46:38.688]                     save_rds(obj, file)
[17:46:38.688]                   }
[17:46:38.688]                   saveImmediateCondition(cond, path = "/tmp/RtmpPsSrrR/.future/immediateConditions")
[17:46:38.688]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.688]                   {
[17:46:38.688]                     inherits <- base::inherits
[17:46:38.688]                     invokeRestart <- base::invokeRestart
[17:46:38.688]                     is.null <- base::is.null
[17:46:38.688]                     muffled <- FALSE
[17:46:38.688]                     if (inherits(cond, "message")) {
[17:46:38.688]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:38.688]                       if (muffled) 
[17:46:38.688]                         invokeRestart("muffleMessage")
[17:46:38.688]                     }
[17:46:38.688]                     else if (inherits(cond, "warning")) {
[17:46:38.688]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:38.688]                       if (muffled) 
[17:46:38.688]                         invokeRestart("muffleWarning")
[17:46:38.688]                     }
[17:46:38.688]                     else if (inherits(cond, "condition")) {
[17:46:38.688]                       if (!is.null(pattern)) {
[17:46:38.688]                         computeRestarts <- base::computeRestarts
[17:46:38.688]                         grepl <- base::grepl
[17:46:38.688]                         restarts <- computeRestarts(cond)
[17:46:38.688]                         for (restart in restarts) {
[17:46:38.688]                           name <- restart$name
[17:46:38.688]                           if (is.null(name)) 
[17:46:38.688]                             next
[17:46:38.688]                           if (!grepl(pattern, name)) 
[17:46:38.688]                             next
[17:46:38.688]                           invokeRestart(restart)
[17:46:38.688]                           muffled <- TRUE
[17:46:38.688]                           break
[17:46:38.688]                         }
[17:46:38.688]                       }
[17:46:38.688]                     }
[17:46:38.688]                     invisible(muffled)
[17:46:38.688]                   }
[17:46:38.688]                   muffleCondition(cond)
[17:46:38.688]                 })
[17:46:38.688]             }))
[17:46:38.688]             future::FutureResult(value = ...future.value$value, 
[17:46:38.688]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.688]                   ...future.rng), globalenv = if (FALSE) 
[17:46:38.688]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:38.688]                     ...future.globalenv.names))
[17:46:38.688]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:38.688]         }, condition = base::local({
[17:46:38.688]             c <- base::c
[17:46:38.688]             inherits <- base::inherits
[17:46:38.688]             invokeRestart <- base::invokeRestart
[17:46:38.688]             length <- base::length
[17:46:38.688]             list <- base::list
[17:46:38.688]             seq.int <- base::seq.int
[17:46:38.688]             signalCondition <- base::signalCondition
[17:46:38.688]             sys.calls <- base::sys.calls
[17:46:38.688]             `[[` <- base::`[[`
[17:46:38.688]             `+` <- base::`+`
[17:46:38.688]             `<<-` <- base::`<<-`
[17:46:38.688]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:38.688]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:38.688]                   3L)]
[17:46:38.688]             }
[17:46:38.688]             function(cond) {
[17:46:38.688]                 is_error <- inherits(cond, "error")
[17:46:38.688]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:38.688]                   NULL)
[17:46:38.688]                 if (is_error) {
[17:46:38.688]                   sessionInformation <- function() {
[17:46:38.688]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:38.688]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:38.688]                       search = base::search(), system = base::Sys.info())
[17:46:38.688]                   }
[17:46:38.688]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.688]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:38.688]                     cond$call), session = sessionInformation(), 
[17:46:38.688]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:38.688]                   signalCondition(cond)
[17:46:38.688]                 }
[17:46:38.688]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:38.688]                 "immediateCondition"))) {
[17:46:38.688]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:38.688]                   ...future.conditions[[length(...future.conditions) + 
[17:46:38.688]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:38.688]                   if (TRUE && !signal) {
[17:46:38.688]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.688]                     {
[17:46:38.688]                       inherits <- base::inherits
[17:46:38.688]                       invokeRestart <- base::invokeRestart
[17:46:38.688]                       is.null <- base::is.null
[17:46:38.688]                       muffled <- FALSE
[17:46:38.688]                       if (inherits(cond, "message")) {
[17:46:38.688]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.688]                         if (muffled) 
[17:46:38.688]                           invokeRestart("muffleMessage")
[17:46:38.688]                       }
[17:46:38.688]                       else if (inherits(cond, "warning")) {
[17:46:38.688]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.688]                         if (muffled) 
[17:46:38.688]                           invokeRestart("muffleWarning")
[17:46:38.688]                       }
[17:46:38.688]                       else if (inherits(cond, "condition")) {
[17:46:38.688]                         if (!is.null(pattern)) {
[17:46:38.688]                           computeRestarts <- base::computeRestarts
[17:46:38.688]                           grepl <- base::grepl
[17:46:38.688]                           restarts <- computeRestarts(cond)
[17:46:38.688]                           for (restart in restarts) {
[17:46:38.688]                             name <- restart$name
[17:46:38.688]                             if (is.null(name)) 
[17:46:38.688]                               next
[17:46:38.688]                             if (!grepl(pattern, name)) 
[17:46:38.688]                               next
[17:46:38.688]                             invokeRestart(restart)
[17:46:38.688]                             muffled <- TRUE
[17:46:38.688]                             break
[17:46:38.688]                           }
[17:46:38.688]                         }
[17:46:38.688]                       }
[17:46:38.688]                       invisible(muffled)
[17:46:38.688]                     }
[17:46:38.688]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.688]                   }
[17:46:38.688]                 }
[17:46:38.688]                 else {
[17:46:38.688]                   if (TRUE) {
[17:46:38.688]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:38.688]                     {
[17:46:38.688]                       inherits <- base::inherits
[17:46:38.688]                       invokeRestart <- base::invokeRestart
[17:46:38.688]                       is.null <- base::is.null
[17:46:38.688]                       muffled <- FALSE
[17:46:38.688]                       if (inherits(cond, "message")) {
[17:46:38.688]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:38.688]                         if (muffled) 
[17:46:38.688]                           invokeRestart("muffleMessage")
[17:46:38.688]                       }
[17:46:38.688]                       else if (inherits(cond, "warning")) {
[17:46:38.688]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:38.688]                         if (muffled) 
[17:46:38.688]                           invokeRestart("muffleWarning")
[17:46:38.688]                       }
[17:46:38.688]                       else if (inherits(cond, "condition")) {
[17:46:38.688]                         if (!is.null(pattern)) {
[17:46:38.688]                           computeRestarts <- base::computeRestarts
[17:46:38.688]                           grepl <- base::grepl
[17:46:38.688]                           restarts <- computeRestarts(cond)
[17:46:38.688]                           for (restart in restarts) {
[17:46:38.688]                             name <- restart$name
[17:46:38.688]                             if (is.null(name)) 
[17:46:38.688]                               next
[17:46:38.688]                             if (!grepl(pattern, name)) 
[17:46:38.688]                               next
[17:46:38.688]                             invokeRestart(restart)
[17:46:38.688]                             muffled <- TRUE
[17:46:38.688]                             break
[17:46:38.688]                           }
[17:46:38.688]                         }
[17:46:38.688]                       }
[17:46:38.688]                       invisible(muffled)
[17:46:38.688]                     }
[17:46:38.688]                     muffleCondition(cond, pattern = "^muffle")
[17:46:38.688]                   }
[17:46:38.688]                 }
[17:46:38.688]             }
[17:46:38.688]         }))
[17:46:38.688]     }, error = function(ex) {
[17:46:38.688]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:38.688]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:38.688]                 ...future.rng), started = ...future.startTime, 
[17:46:38.688]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:38.688]             version = "1.8"), class = "FutureResult")
[17:46:38.688]     }, finally = {
[17:46:38.688]         if (!identical(...future.workdir, getwd())) 
[17:46:38.688]             setwd(...future.workdir)
[17:46:38.688]         {
[17:46:38.688]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:38.688]                 ...future.oldOptions$nwarnings <- NULL
[17:46:38.688]             }
[17:46:38.688]             base::options(...future.oldOptions)
[17:46:38.688]             if (.Platform$OS.type == "windows") {
[17:46:38.688]                 old_names <- names(...future.oldEnvVars)
[17:46:38.688]                 envs <- base::Sys.getenv()
[17:46:38.688]                 names <- names(envs)
[17:46:38.688]                 common <- intersect(names, old_names)
[17:46:38.688]                 added <- setdiff(names, old_names)
[17:46:38.688]                 removed <- setdiff(old_names, names)
[17:46:38.688]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:38.688]                   envs[common]]
[17:46:38.688]                 NAMES <- toupper(changed)
[17:46:38.688]                 args <- list()
[17:46:38.688]                 for (kk in seq_along(NAMES)) {
[17:46:38.688]                   name <- changed[[kk]]
[17:46:38.688]                   NAME <- NAMES[[kk]]
[17:46:38.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.688]                     next
[17:46:38.688]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.688]                 }
[17:46:38.688]                 NAMES <- toupper(added)
[17:46:38.688]                 for (kk in seq_along(NAMES)) {
[17:46:38.688]                   name <- added[[kk]]
[17:46:38.688]                   NAME <- NAMES[[kk]]
[17:46:38.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.688]                     next
[17:46:38.688]                   args[[name]] <- ""
[17:46:38.688]                 }
[17:46:38.688]                 NAMES <- toupper(removed)
[17:46:38.688]                 for (kk in seq_along(NAMES)) {
[17:46:38.688]                   name <- removed[[kk]]
[17:46:38.688]                   NAME <- NAMES[[kk]]
[17:46:38.688]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:38.688]                     next
[17:46:38.688]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:38.688]                 }
[17:46:38.688]                 if (length(args) > 0) 
[17:46:38.688]                   base::do.call(base::Sys.setenv, args = args)
[17:46:38.688]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:38.688]             }
[17:46:38.688]             else {
[17:46:38.688]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:38.688]             }
[17:46:38.688]             {
[17:46:38.688]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:38.688]                   0L) {
[17:46:38.688]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:38.688]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:38.688]                   base::options(opts)
[17:46:38.688]                 }
[17:46:38.688]                 {
[17:46:38.688]                   {
[17:46:38.688]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:38.688]                     NULL
[17:46:38.688]                   }
[17:46:38.688]                   options(future.plan = NULL)
[17:46:38.688]                   if (is.na(NA_character_)) 
[17:46:38.688]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:38.688]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:38.688]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:38.688]                     .init = FALSE)
[17:46:38.688]                 }
[17:46:38.688]             }
[17:46:38.688]         }
[17:46:38.688]     })
[17:46:38.688]     if (TRUE) {
[17:46:38.688]         base::sink(type = "output", split = FALSE)
[17:46:38.688]         if (TRUE) {
[17:46:38.688]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:38.688]         }
[17:46:38.688]         else {
[17:46:38.688]             ...future.result["stdout"] <- base::list(NULL)
[17:46:38.688]         }
[17:46:38.688]         base::close(...future.stdout)
[17:46:38.688]         ...future.stdout <- NULL
[17:46:38.688]     }
[17:46:38.688]     ...future.result$conditions <- ...future.conditions
[17:46:38.688]     ...future.result$finished <- base::Sys.time()
[17:46:38.688]     ...future.result
[17:46:38.688] }
[17:46:38.691] assign_globals() ...
[17:46:38.691] List of 1
[17:46:38.691]  $ a: num 1
[17:46:38.691]  - attr(*, "where")=List of 1
[17:46:38.691]   ..$ a:<environment: R_EmptyEnv> 
[17:46:38.691]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[17:46:38.691]  - attr(*, "resolved")= logi FALSE
[17:46:38.691]  - attr(*, "total_size")= num 56
[17:46:38.691]  - attr(*, "already-done")= logi TRUE
[17:46:38.694] - copied ‘a’ to environment
[17:46:38.694] assign_globals() ... done
[17:46:38.694] requestCore(): workers = 2
[17:46:38.696] MulticoreFuture started
[17:46:38.696] - Launch lazy future ... done
[17:46:38.697] run() for ‘MulticoreFuture’ ... done
[17:46:38.697] result() for MulticoreFuture ...
[17:46:38.697] plan(): Setting new future strategy stack:
[17:46:38.697] List of future strategies:
[17:46:38.697] 1. sequential:
[17:46:38.697]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:38.697]    - tweaked: FALSE
[17:46:38.697]    - call: NULL
[17:46:38.698] plan(): nbrOfWorkers() = 1
[17:46:38.700] plan(): Setting new future strategy stack:
[17:46:38.700] List of future strategies:
[17:46:38.700] 1. multicore:
[17:46:38.700]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:46:38.700]    - tweaked: FALSE
[17:46:38.700]    - call: plan(strategy)
[17:46:38.706] plan(): nbrOfWorkers() = 2
[17:46:38.707] result() for MulticoreFuture ...
[17:46:38.707] result() for MulticoreFuture ... done
[17:46:38.707] result() for MulticoreFuture ... done
[17:46:38.707] result() for MulticoreFuture ...
[17:46:38.707] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[17:46:38.708] plan(): Setting new future strategy stack:
[17:46:38.708] List of future strategies:
[17:46:38.708] 1. multisession:
[17:46:38.708]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:38.708]    - tweaked: FALSE
[17:46:38.708]    - call: plan(strategy)
[17:46:38.709] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:46:38.709] multisession:
[17:46:38.709] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:46:38.709] - tweaked: FALSE
[17:46:38.709] - call: plan(strategy)
[17:46:38.717] getGlobalsAndPackages() ...
[17:46:38.718] Not searching for globals
[17:46:38.718] - globals: [0] <none>
[17:46:38.718] getGlobalsAndPackages() ... DONE
[17:46:38.719] [local output] makeClusterPSOCK() ...
[17:46:38.758] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:46:38.759] [local output] Base port: 11698
[17:46:38.759] [local output] Getting setup options for 2 cluster nodes ...
[17:46:38.759] [local output]  - Node 1 of 2 ...
[17:46:38.760] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:38.761] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpPsSrrR/worker.rank=1.parallelly.parent=41435.a1db254ef5b7.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpPsSrrR/worker.rank=1.parallelly.parent=41435.a1db254ef5b7.pid")'’
[17:46:38.948] - Possible to infer worker's PID: TRUE
[17:46:38.948] [local output] Rscript port: 11698

[17:46:38.948] [local output]  - Node 2 of 2 ...
[17:46:38.949] [local output] localMachine=TRUE => revtunnel=FALSE

[17:46:38.949] [local output] Rscript port: 11698

[17:46:38.950] [local output] Getting setup options for 2 cluster nodes ... done
[17:46:38.950] [local output]  - Parallel setup requested for some PSOCK nodes
[17:46:38.950] [local output] Setting up PSOCK nodes in parallel
[17:46:38.950] List of 36
[17:46:38.950]  $ worker          : chr "localhost"
[17:46:38.950]   ..- attr(*, "localhost")= logi TRUE
[17:46:38.950]  $ master          : chr "localhost"
[17:46:38.950]  $ port            : int 11698
[17:46:38.950]  $ connectTimeout  : num 120
[17:46:38.950]  $ timeout         : num 2592000
[17:46:38.950]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:46:38.950]  $ homogeneous     : logi TRUE
[17:46:38.950]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:46:38.950]  $ rscript_envs    : NULL
[17:46:38.950]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:38.950]  $ rscript_startup : NULL
[17:46:38.950]  $ rscript_sh      : chr "sh"
[17:46:38.950]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:38.950]  $ methods         : logi TRUE
[17:46:38.950]  $ socketOptions   : chr "no-delay"
[17:46:38.950]  $ useXDR          : logi FALSE
[17:46:38.950]  $ outfile         : chr "/dev/null"
[17:46:38.950]  $ renice          : int NA
[17:46:38.950]  $ rshcmd          : NULL
[17:46:38.950]  $ user            : chr(0) 
[17:46:38.950]  $ revtunnel       : logi FALSE
[17:46:38.950]  $ rshlogfile      : NULL
[17:46:38.950]  $ rshopts         : chr(0) 
[17:46:38.950]  $ rank            : int 1
[17:46:38.950]  $ manual          : logi FALSE
[17:46:38.950]  $ dryrun          : logi FALSE
[17:46:38.950]  $ quiet           : logi FALSE
[17:46:38.950]  $ setup_strategy  : chr "parallel"
[17:46:38.950]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:38.950]  $ pidfile         : chr "/tmp/RtmpPsSrrR/worker.rank=1.parallelly.parent=41435.a1db254ef5b7.pid"
[17:46:38.950]  $ rshcmd_label    : NULL
[17:46:38.950]  $ rsh_call        : NULL
[17:46:38.950]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:46:38.950]  $ localMachine    : logi TRUE
[17:46:38.950]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:46:38.950]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:46:38.950]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:46:38.950]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:46:38.950]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:46:38.950]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:46:38.950]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:46:38.950]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:46:38.950]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:46:38.950]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:46:38.950]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:46:38.950]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:46:38.950]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:46:38.950]  $ arguments       :List of 28
[17:46:38.950]   ..$ worker          : chr "localhost"
[17:46:38.950]   ..$ master          : NULL
[17:46:38.950]   ..$ port            : int 11698
[17:46:38.950]   ..$ connectTimeout  : num 120
[17:46:38.950]   ..$ timeout         : num 2592000
[17:46:38.950]   ..$ rscript         : NULL
[17:46:38.950]   ..$ homogeneous     : NULL
[17:46:38.950]   ..$ rscript_args    : NULL
[17:46:38.950]   ..$ rscript_envs    : NULL
[17:46:38.950]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:46:38.950]   ..$ rscript_startup : NULL
[17:46:38.950]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:46:38.950]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:46:38.950]   ..$ methods         : logi TRUE
[17:46:38.950]   ..$ socketOptions   : chr "no-delay"
[17:46:38.950]   ..$ useXDR          : logi FALSE
[17:46:38.950]   ..$ outfile         : chr "/dev/null"
[17:46:38.950]   ..$ renice          : int NA
[17:46:38.950]   ..$ rshcmd          : NULL
[17:46:38.950]   ..$ user            : NULL
[17:46:38.950]   ..$ revtunnel       : logi NA
[17:46:38.950]   ..$ rshlogfile      : NULL
[17:46:38.950]   ..$ rshopts         : NULL
[17:46:38.950]   ..$ rank            : int 1
[17:46:38.950]   ..$ manual          : logi FALSE
[17:46:38.950]   ..$ dryrun          : logi FALSE
[17:46:38.950]   ..$ quiet           : logi FALSE
[17:46:38.950]   ..$ setup_strategy  : chr "parallel"
[17:46:38.950]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:46:38.966] [local output] System call to launch all workers:
[17:46:38.966] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpPsSrrR/worker.rank=1.parallelly.parent=41435.a1db254ef5b7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11698 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:46:38.967] [local output] Starting PSOCK main server
[17:46:38.973] [local output] Workers launched
[17:46:38.973] [local output] Waiting for workers to connect back
[17:46:38.973]  - [local output] 0 workers out of 2 ready
[17:46:39.218]  - [local output] 0 workers out of 2 ready
[17:46:39.218]  - [local output] 1 workers out of 2 ready
[17:46:39.218]  - [local output] 2 workers out of 2 ready
[17:46:39.219] [local output] Launching of workers completed
[17:46:39.219] [local output] Collecting session information from workers
[17:46:39.220] [local output]  - Worker #1 of 2
[17:46:39.220] [local output]  - Worker #2 of 2
[17:46:39.220] [local output] makeClusterPSOCK() ... done
[17:46:39.233] Packages needed by the future expression (n = 0): <none>
[17:46:39.233] Packages needed by future strategies (n = 0): <none>
[17:46:39.234] {
[17:46:39.234]     {
[17:46:39.234]         {
[17:46:39.234]             ...future.startTime <- base::Sys.time()
[17:46:39.234]             {
[17:46:39.234]                 {
[17:46:39.234]                   {
[17:46:39.234]                     {
[17:46:39.234]                       base::local({
[17:46:39.234]                         has_future <- base::requireNamespace("future", 
[17:46:39.234]                           quietly = TRUE)
[17:46:39.234]                         if (has_future) {
[17:46:39.234]                           ns <- base::getNamespace("future")
[17:46:39.234]                           version <- ns[[".package"]][["version"]]
[17:46:39.234]                           if (is.null(version)) 
[17:46:39.234]                             version <- utils::packageVersion("future")
[17:46:39.234]                         }
[17:46:39.234]                         else {
[17:46:39.234]                           version <- NULL
[17:46:39.234]                         }
[17:46:39.234]                         if (!has_future || version < "1.8.0") {
[17:46:39.234]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:39.234]                             "", base::R.version$version.string), 
[17:46:39.234]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:39.234]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:39.234]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:39.234]                               "release", "version")], collapse = " "), 
[17:46:39.234]                             hostname = base::Sys.info()[["nodename"]])
[17:46:39.234]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:39.234]                             info)
[17:46:39.234]                           info <- base::paste(info, collapse = "; ")
[17:46:39.234]                           if (!has_future) {
[17:46:39.234]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:39.234]                               info)
[17:46:39.234]                           }
[17:46:39.234]                           else {
[17:46:39.234]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:39.234]                               info, version)
[17:46:39.234]                           }
[17:46:39.234]                           base::stop(msg)
[17:46:39.234]                         }
[17:46:39.234]                       })
[17:46:39.234]                     }
[17:46:39.234]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:39.234]                     base::options(mc.cores = 1L)
[17:46:39.234]                   }
[17:46:39.234]                   ...future.strategy.old <- future::plan("list")
[17:46:39.234]                   options(future.plan = NULL)
[17:46:39.234]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.234]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:39.234]                 }
[17:46:39.234]                 ...future.workdir <- getwd()
[17:46:39.234]             }
[17:46:39.234]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:39.234]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:39.234]         }
[17:46:39.234]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:39.234]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:39.234]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:39.234]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:39.234]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:39.234]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:39.234]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:39.234]             base::names(...future.oldOptions))
[17:46:39.234]     }
[17:46:39.234]     if (FALSE) {
[17:46:39.234]     }
[17:46:39.234]     else {
[17:46:39.234]         if (TRUE) {
[17:46:39.234]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:39.234]                 open = "w")
[17:46:39.234]         }
[17:46:39.234]         else {
[17:46:39.234]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:39.234]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:39.234]         }
[17:46:39.234]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:39.234]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:39.234]             base::sink(type = "output", split = FALSE)
[17:46:39.234]             base::close(...future.stdout)
[17:46:39.234]         }, add = TRUE)
[17:46:39.234]     }
[17:46:39.234]     ...future.frame <- base::sys.nframe()
[17:46:39.234]     ...future.conditions <- base::list()
[17:46:39.234]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:39.234]     if (FALSE) {
[17:46:39.234]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:39.234]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:39.234]     }
[17:46:39.234]     ...future.result <- base::tryCatch({
[17:46:39.234]         base::withCallingHandlers({
[17:46:39.234]             ...future.value <- base::withVisible(base::local({
[17:46:39.234]                 ...future.makeSendCondition <- base::local({
[17:46:39.234]                   sendCondition <- NULL
[17:46:39.234]                   function(frame = 1L) {
[17:46:39.234]                     if (is.function(sendCondition)) 
[17:46:39.234]                       return(sendCondition)
[17:46:39.234]                     ns <- getNamespace("parallel")
[17:46:39.234]                     if (exists("sendData", mode = "function", 
[17:46:39.234]                       envir = ns)) {
[17:46:39.234]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:39.234]                         envir = ns)
[17:46:39.234]                       envir <- sys.frame(frame)
[17:46:39.234]                       master <- NULL
[17:46:39.234]                       while (!identical(envir, .GlobalEnv) && 
[17:46:39.234]                         !identical(envir, emptyenv())) {
[17:46:39.234]                         if (exists("master", mode = "list", envir = envir, 
[17:46:39.234]                           inherits = FALSE)) {
[17:46:39.234]                           master <- get("master", mode = "list", 
[17:46:39.234]                             envir = envir, inherits = FALSE)
[17:46:39.234]                           if (inherits(master, c("SOCKnode", 
[17:46:39.234]                             "SOCK0node"))) {
[17:46:39.234]                             sendCondition <<- function(cond) {
[17:46:39.234]                               data <- list(type = "VALUE", value = cond, 
[17:46:39.234]                                 success = TRUE)
[17:46:39.234]                               parallel_sendData(master, data)
[17:46:39.234]                             }
[17:46:39.234]                             return(sendCondition)
[17:46:39.234]                           }
[17:46:39.234]                         }
[17:46:39.234]                         frame <- frame + 1L
[17:46:39.234]                         envir <- sys.frame(frame)
[17:46:39.234]                       }
[17:46:39.234]                     }
[17:46:39.234]                     sendCondition <<- function(cond) NULL
[17:46:39.234]                   }
[17:46:39.234]                 })
[17:46:39.234]                 withCallingHandlers({
[17:46:39.234]                   NA
[17:46:39.234]                 }, immediateCondition = function(cond) {
[17:46:39.234]                   sendCondition <- ...future.makeSendCondition()
[17:46:39.234]                   sendCondition(cond)
[17:46:39.234]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.234]                   {
[17:46:39.234]                     inherits <- base::inherits
[17:46:39.234]                     invokeRestart <- base::invokeRestart
[17:46:39.234]                     is.null <- base::is.null
[17:46:39.234]                     muffled <- FALSE
[17:46:39.234]                     if (inherits(cond, "message")) {
[17:46:39.234]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:39.234]                       if (muffled) 
[17:46:39.234]                         invokeRestart("muffleMessage")
[17:46:39.234]                     }
[17:46:39.234]                     else if (inherits(cond, "warning")) {
[17:46:39.234]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:39.234]                       if (muffled) 
[17:46:39.234]                         invokeRestart("muffleWarning")
[17:46:39.234]                     }
[17:46:39.234]                     else if (inherits(cond, "condition")) {
[17:46:39.234]                       if (!is.null(pattern)) {
[17:46:39.234]                         computeRestarts <- base::computeRestarts
[17:46:39.234]                         grepl <- base::grepl
[17:46:39.234]                         restarts <- computeRestarts(cond)
[17:46:39.234]                         for (restart in restarts) {
[17:46:39.234]                           name <- restart$name
[17:46:39.234]                           if (is.null(name)) 
[17:46:39.234]                             next
[17:46:39.234]                           if (!grepl(pattern, name)) 
[17:46:39.234]                             next
[17:46:39.234]                           invokeRestart(restart)
[17:46:39.234]                           muffled <- TRUE
[17:46:39.234]                           break
[17:46:39.234]                         }
[17:46:39.234]                       }
[17:46:39.234]                     }
[17:46:39.234]                     invisible(muffled)
[17:46:39.234]                   }
[17:46:39.234]                   muffleCondition(cond)
[17:46:39.234]                 })
[17:46:39.234]             }))
[17:46:39.234]             future::FutureResult(value = ...future.value$value, 
[17:46:39.234]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.234]                   ...future.rng), globalenv = if (FALSE) 
[17:46:39.234]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:39.234]                     ...future.globalenv.names))
[17:46:39.234]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:39.234]         }, condition = base::local({
[17:46:39.234]             c <- base::c
[17:46:39.234]             inherits <- base::inherits
[17:46:39.234]             invokeRestart <- base::invokeRestart
[17:46:39.234]             length <- base::length
[17:46:39.234]             list <- base::list
[17:46:39.234]             seq.int <- base::seq.int
[17:46:39.234]             signalCondition <- base::signalCondition
[17:46:39.234]             sys.calls <- base::sys.calls
[17:46:39.234]             `[[` <- base::`[[`
[17:46:39.234]             `+` <- base::`+`
[17:46:39.234]             `<<-` <- base::`<<-`
[17:46:39.234]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:39.234]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:39.234]                   3L)]
[17:46:39.234]             }
[17:46:39.234]             function(cond) {
[17:46:39.234]                 is_error <- inherits(cond, "error")
[17:46:39.234]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:39.234]                   NULL)
[17:46:39.234]                 if (is_error) {
[17:46:39.234]                   sessionInformation <- function() {
[17:46:39.234]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:39.234]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:39.234]                       search = base::search(), system = base::Sys.info())
[17:46:39.234]                   }
[17:46:39.234]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.234]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:39.234]                     cond$call), session = sessionInformation(), 
[17:46:39.234]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:39.234]                   signalCondition(cond)
[17:46:39.234]                 }
[17:46:39.234]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:39.234]                 "immediateCondition"))) {
[17:46:39.234]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:39.234]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.234]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:39.234]                   if (TRUE && !signal) {
[17:46:39.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.234]                     {
[17:46:39.234]                       inherits <- base::inherits
[17:46:39.234]                       invokeRestart <- base::invokeRestart
[17:46:39.234]                       is.null <- base::is.null
[17:46:39.234]                       muffled <- FALSE
[17:46:39.234]                       if (inherits(cond, "message")) {
[17:46:39.234]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.234]                         if (muffled) 
[17:46:39.234]                           invokeRestart("muffleMessage")
[17:46:39.234]                       }
[17:46:39.234]                       else if (inherits(cond, "warning")) {
[17:46:39.234]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.234]                         if (muffled) 
[17:46:39.234]                           invokeRestart("muffleWarning")
[17:46:39.234]                       }
[17:46:39.234]                       else if (inherits(cond, "condition")) {
[17:46:39.234]                         if (!is.null(pattern)) {
[17:46:39.234]                           computeRestarts <- base::computeRestarts
[17:46:39.234]                           grepl <- base::grepl
[17:46:39.234]                           restarts <- computeRestarts(cond)
[17:46:39.234]                           for (restart in restarts) {
[17:46:39.234]                             name <- restart$name
[17:46:39.234]                             if (is.null(name)) 
[17:46:39.234]                               next
[17:46:39.234]                             if (!grepl(pattern, name)) 
[17:46:39.234]                               next
[17:46:39.234]                             invokeRestart(restart)
[17:46:39.234]                             muffled <- TRUE
[17:46:39.234]                             break
[17:46:39.234]                           }
[17:46:39.234]                         }
[17:46:39.234]                       }
[17:46:39.234]                       invisible(muffled)
[17:46:39.234]                     }
[17:46:39.234]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.234]                   }
[17:46:39.234]                 }
[17:46:39.234]                 else {
[17:46:39.234]                   if (TRUE) {
[17:46:39.234]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.234]                     {
[17:46:39.234]                       inherits <- base::inherits
[17:46:39.234]                       invokeRestart <- base::invokeRestart
[17:46:39.234]                       is.null <- base::is.null
[17:46:39.234]                       muffled <- FALSE
[17:46:39.234]                       if (inherits(cond, "message")) {
[17:46:39.234]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.234]                         if (muffled) 
[17:46:39.234]                           invokeRestart("muffleMessage")
[17:46:39.234]                       }
[17:46:39.234]                       else if (inherits(cond, "warning")) {
[17:46:39.234]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.234]                         if (muffled) 
[17:46:39.234]                           invokeRestart("muffleWarning")
[17:46:39.234]                       }
[17:46:39.234]                       else if (inherits(cond, "condition")) {
[17:46:39.234]                         if (!is.null(pattern)) {
[17:46:39.234]                           computeRestarts <- base::computeRestarts
[17:46:39.234]                           grepl <- base::grepl
[17:46:39.234]                           restarts <- computeRestarts(cond)
[17:46:39.234]                           for (restart in restarts) {
[17:46:39.234]                             name <- restart$name
[17:46:39.234]                             if (is.null(name)) 
[17:46:39.234]                               next
[17:46:39.234]                             if (!grepl(pattern, name)) 
[17:46:39.234]                               next
[17:46:39.234]                             invokeRestart(restart)
[17:46:39.234]                             muffled <- TRUE
[17:46:39.234]                             break
[17:46:39.234]                           }
[17:46:39.234]                         }
[17:46:39.234]                       }
[17:46:39.234]                       invisible(muffled)
[17:46:39.234]                     }
[17:46:39.234]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.234]                   }
[17:46:39.234]                 }
[17:46:39.234]             }
[17:46:39.234]         }))
[17:46:39.234]     }, error = function(ex) {
[17:46:39.234]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:39.234]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.234]                 ...future.rng), started = ...future.startTime, 
[17:46:39.234]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:39.234]             version = "1.8"), class = "FutureResult")
[17:46:39.234]     }, finally = {
[17:46:39.234]         if (!identical(...future.workdir, getwd())) 
[17:46:39.234]             setwd(...future.workdir)
[17:46:39.234]         {
[17:46:39.234]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:39.234]                 ...future.oldOptions$nwarnings <- NULL
[17:46:39.234]             }
[17:46:39.234]             base::options(...future.oldOptions)
[17:46:39.234]             if (.Platform$OS.type == "windows") {
[17:46:39.234]                 old_names <- names(...future.oldEnvVars)
[17:46:39.234]                 envs <- base::Sys.getenv()
[17:46:39.234]                 names <- names(envs)
[17:46:39.234]                 common <- intersect(names, old_names)
[17:46:39.234]                 added <- setdiff(names, old_names)
[17:46:39.234]                 removed <- setdiff(old_names, names)
[17:46:39.234]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:39.234]                   envs[common]]
[17:46:39.234]                 NAMES <- toupper(changed)
[17:46:39.234]                 args <- list()
[17:46:39.234]                 for (kk in seq_along(NAMES)) {
[17:46:39.234]                   name <- changed[[kk]]
[17:46:39.234]                   NAME <- NAMES[[kk]]
[17:46:39.234]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.234]                     next
[17:46:39.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.234]                 }
[17:46:39.234]                 NAMES <- toupper(added)
[17:46:39.234]                 for (kk in seq_along(NAMES)) {
[17:46:39.234]                   name <- added[[kk]]
[17:46:39.234]                   NAME <- NAMES[[kk]]
[17:46:39.234]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.234]                     next
[17:46:39.234]                   args[[name]] <- ""
[17:46:39.234]                 }
[17:46:39.234]                 NAMES <- toupper(removed)
[17:46:39.234]                 for (kk in seq_along(NAMES)) {
[17:46:39.234]                   name <- removed[[kk]]
[17:46:39.234]                   NAME <- NAMES[[kk]]
[17:46:39.234]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.234]                     next
[17:46:39.234]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.234]                 }
[17:46:39.234]                 if (length(args) > 0) 
[17:46:39.234]                   base::do.call(base::Sys.setenv, args = args)
[17:46:39.234]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:39.234]             }
[17:46:39.234]             else {
[17:46:39.234]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:39.234]             }
[17:46:39.234]             {
[17:46:39.234]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:39.234]                   0L) {
[17:46:39.234]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:39.234]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:39.234]                   base::options(opts)
[17:46:39.234]                 }
[17:46:39.234]                 {
[17:46:39.234]                   {
[17:46:39.234]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:39.234]                     NULL
[17:46:39.234]                   }
[17:46:39.234]                   options(future.plan = NULL)
[17:46:39.234]                   if (is.na(NA_character_)) 
[17:46:39.234]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.234]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:39.234]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:39.234]                     .init = FALSE)
[17:46:39.234]                 }
[17:46:39.234]             }
[17:46:39.234]         }
[17:46:39.234]     })
[17:46:39.234]     if (TRUE) {
[17:46:39.234]         base::sink(type = "output", split = FALSE)
[17:46:39.234]         if (TRUE) {
[17:46:39.234]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:39.234]         }
[17:46:39.234]         else {
[17:46:39.234]             ...future.result["stdout"] <- base::list(NULL)
[17:46:39.234]         }
[17:46:39.234]         base::close(...future.stdout)
[17:46:39.234]         ...future.stdout <- NULL
[17:46:39.234]     }
[17:46:39.234]     ...future.result$conditions <- ...future.conditions
[17:46:39.234]     ...future.result$finished <- base::Sys.time()
[17:46:39.234]     ...future.result
[17:46:39.234] }
[17:46:39.286] MultisessionFuture started
[17:46:39.286] result() for ClusterFuture ...
[17:46:39.286] receiveMessageFromWorker() for ClusterFuture ...
[17:46:39.287] - Validating connection of MultisessionFuture
[17:46:39.318] - received message: FutureResult
[17:46:39.318] - Received FutureResult
[17:46:39.318] - Erased future from FutureRegistry
[17:46:39.318] result() for ClusterFuture ...
[17:46:39.318] - result already collected: FutureResult
[17:46:39.318] result() for ClusterFuture ... done
[17:46:39.318] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:39.319] result() for ClusterFuture ... done
[17:46:39.319] result() for ClusterFuture ...
[17:46:39.319] - result already collected: FutureResult
[17:46:39.319] result() for ClusterFuture ... done
[17:46:39.319] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:46:39.323] plan(): nbrOfWorkers() = 2
[17:46:39.323] getGlobalsAndPackages() ...
[17:46:39.323] Searching for globals...
[17:46:39.324] - globals found: [1] ‘{’
[17:46:39.324] Searching for globals ... DONE
[17:46:39.324] Resolving globals: FALSE
[17:46:39.325] 
[17:46:39.325] 
[17:46:39.325] getGlobalsAndPackages() ... DONE
[17:46:39.325] run() for ‘Future’ ...
[17:46:39.325] - state: ‘created’
[17:46:39.326] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:39.340] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:39.340] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:39.340]   - Field: ‘node’
[17:46:39.340]   - Field: ‘label’
[17:46:39.340]   - Field: ‘local’
[17:46:39.340]   - Field: ‘owner’
[17:46:39.340]   - Field: ‘envir’
[17:46:39.340]   - Field: ‘workers’
[17:46:39.340]   - Field: ‘packages’
[17:46:39.341]   - Field: ‘gc’
[17:46:39.341]   - Field: ‘conditions’
[17:46:39.341]   - Field: ‘persistent’
[17:46:39.341]   - Field: ‘expr’
[17:46:39.341]   - Field: ‘uuid’
[17:46:39.341]   - Field: ‘seed’
[17:46:39.341]   - Field: ‘version’
[17:46:39.341]   - Field: ‘result’
[17:46:39.341]   - Field: ‘asynchronous’
[17:46:39.342]   - Field: ‘calls’
[17:46:39.342]   - Field: ‘globals’
[17:46:39.342]   - Field: ‘stdout’
[17:46:39.342]   - Field: ‘earlySignal’
[17:46:39.342]   - Field: ‘lazy’
[17:46:39.342]   - Field: ‘state’
[17:46:39.342] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:39.342] - Launch lazy future ...
[17:46:39.343] Packages needed by the future expression (n = 0): <none>
[17:46:39.343] Packages needed by future strategies (n = 0): <none>
[17:46:39.343] {
[17:46:39.343]     {
[17:46:39.343]         {
[17:46:39.343]             ...future.startTime <- base::Sys.time()
[17:46:39.343]             {
[17:46:39.343]                 {
[17:46:39.343]                   {
[17:46:39.343]                     {
[17:46:39.343]                       base::local({
[17:46:39.343]                         has_future <- base::requireNamespace("future", 
[17:46:39.343]                           quietly = TRUE)
[17:46:39.343]                         if (has_future) {
[17:46:39.343]                           ns <- base::getNamespace("future")
[17:46:39.343]                           version <- ns[[".package"]][["version"]]
[17:46:39.343]                           if (is.null(version)) 
[17:46:39.343]                             version <- utils::packageVersion("future")
[17:46:39.343]                         }
[17:46:39.343]                         else {
[17:46:39.343]                           version <- NULL
[17:46:39.343]                         }
[17:46:39.343]                         if (!has_future || version < "1.8.0") {
[17:46:39.343]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:39.343]                             "", base::R.version$version.string), 
[17:46:39.343]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:39.343]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:39.343]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:39.343]                               "release", "version")], collapse = " "), 
[17:46:39.343]                             hostname = base::Sys.info()[["nodename"]])
[17:46:39.343]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:39.343]                             info)
[17:46:39.343]                           info <- base::paste(info, collapse = "; ")
[17:46:39.343]                           if (!has_future) {
[17:46:39.343]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:39.343]                               info)
[17:46:39.343]                           }
[17:46:39.343]                           else {
[17:46:39.343]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:39.343]                               info, version)
[17:46:39.343]                           }
[17:46:39.343]                           base::stop(msg)
[17:46:39.343]                         }
[17:46:39.343]                       })
[17:46:39.343]                     }
[17:46:39.343]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:39.343]                     base::options(mc.cores = 1L)
[17:46:39.343]                   }
[17:46:39.343]                   ...future.strategy.old <- future::plan("list")
[17:46:39.343]                   options(future.plan = NULL)
[17:46:39.343]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.343]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:39.343]                 }
[17:46:39.343]                 ...future.workdir <- getwd()
[17:46:39.343]             }
[17:46:39.343]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:39.343]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:39.343]         }
[17:46:39.343]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:39.343]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:39.343]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:39.343]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:39.343]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:39.343]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:39.343]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:39.343]             base::names(...future.oldOptions))
[17:46:39.343]     }
[17:46:39.343]     if (FALSE) {
[17:46:39.343]     }
[17:46:39.343]     else {
[17:46:39.343]         if (TRUE) {
[17:46:39.343]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:39.343]                 open = "w")
[17:46:39.343]         }
[17:46:39.343]         else {
[17:46:39.343]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:39.343]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:39.343]         }
[17:46:39.343]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:39.343]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:39.343]             base::sink(type = "output", split = FALSE)
[17:46:39.343]             base::close(...future.stdout)
[17:46:39.343]         }, add = TRUE)
[17:46:39.343]     }
[17:46:39.343]     ...future.frame <- base::sys.nframe()
[17:46:39.343]     ...future.conditions <- base::list()
[17:46:39.343]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:39.343]     if (FALSE) {
[17:46:39.343]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:39.343]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:39.343]     }
[17:46:39.343]     ...future.result <- base::tryCatch({
[17:46:39.343]         base::withCallingHandlers({
[17:46:39.343]             ...future.value <- base::withVisible(base::local({
[17:46:39.343]                 ...future.makeSendCondition <- base::local({
[17:46:39.343]                   sendCondition <- NULL
[17:46:39.343]                   function(frame = 1L) {
[17:46:39.343]                     if (is.function(sendCondition)) 
[17:46:39.343]                       return(sendCondition)
[17:46:39.343]                     ns <- getNamespace("parallel")
[17:46:39.343]                     if (exists("sendData", mode = "function", 
[17:46:39.343]                       envir = ns)) {
[17:46:39.343]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:39.343]                         envir = ns)
[17:46:39.343]                       envir <- sys.frame(frame)
[17:46:39.343]                       master <- NULL
[17:46:39.343]                       while (!identical(envir, .GlobalEnv) && 
[17:46:39.343]                         !identical(envir, emptyenv())) {
[17:46:39.343]                         if (exists("master", mode = "list", envir = envir, 
[17:46:39.343]                           inherits = FALSE)) {
[17:46:39.343]                           master <- get("master", mode = "list", 
[17:46:39.343]                             envir = envir, inherits = FALSE)
[17:46:39.343]                           if (inherits(master, c("SOCKnode", 
[17:46:39.343]                             "SOCK0node"))) {
[17:46:39.343]                             sendCondition <<- function(cond) {
[17:46:39.343]                               data <- list(type = "VALUE", value = cond, 
[17:46:39.343]                                 success = TRUE)
[17:46:39.343]                               parallel_sendData(master, data)
[17:46:39.343]                             }
[17:46:39.343]                             return(sendCondition)
[17:46:39.343]                           }
[17:46:39.343]                         }
[17:46:39.343]                         frame <- frame + 1L
[17:46:39.343]                         envir <- sys.frame(frame)
[17:46:39.343]                       }
[17:46:39.343]                     }
[17:46:39.343]                     sendCondition <<- function(cond) NULL
[17:46:39.343]                   }
[17:46:39.343]                 })
[17:46:39.343]                 withCallingHandlers({
[17:46:39.343]                   {
[17:46:39.343]                     2
[17:46:39.343]                   }
[17:46:39.343]                 }, immediateCondition = function(cond) {
[17:46:39.343]                   sendCondition <- ...future.makeSendCondition()
[17:46:39.343]                   sendCondition(cond)
[17:46:39.343]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.343]                   {
[17:46:39.343]                     inherits <- base::inherits
[17:46:39.343]                     invokeRestart <- base::invokeRestart
[17:46:39.343]                     is.null <- base::is.null
[17:46:39.343]                     muffled <- FALSE
[17:46:39.343]                     if (inherits(cond, "message")) {
[17:46:39.343]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:39.343]                       if (muffled) 
[17:46:39.343]                         invokeRestart("muffleMessage")
[17:46:39.343]                     }
[17:46:39.343]                     else if (inherits(cond, "warning")) {
[17:46:39.343]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:39.343]                       if (muffled) 
[17:46:39.343]                         invokeRestart("muffleWarning")
[17:46:39.343]                     }
[17:46:39.343]                     else if (inherits(cond, "condition")) {
[17:46:39.343]                       if (!is.null(pattern)) {
[17:46:39.343]                         computeRestarts <- base::computeRestarts
[17:46:39.343]                         grepl <- base::grepl
[17:46:39.343]                         restarts <- computeRestarts(cond)
[17:46:39.343]                         for (restart in restarts) {
[17:46:39.343]                           name <- restart$name
[17:46:39.343]                           if (is.null(name)) 
[17:46:39.343]                             next
[17:46:39.343]                           if (!grepl(pattern, name)) 
[17:46:39.343]                             next
[17:46:39.343]                           invokeRestart(restart)
[17:46:39.343]                           muffled <- TRUE
[17:46:39.343]                           break
[17:46:39.343]                         }
[17:46:39.343]                       }
[17:46:39.343]                     }
[17:46:39.343]                     invisible(muffled)
[17:46:39.343]                   }
[17:46:39.343]                   muffleCondition(cond)
[17:46:39.343]                 })
[17:46:39.343]             }))
[17:46:39.343]             future::FutureResult(value = ...future.value$value, 
[17:46:39.343]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.343]                   ...future.rng), globalenv = if (FALSE) 
[17:46:39.343]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:39.343]                     ...future.globalenv.names))
[17:46:39.343]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:39.343]         }, condition = base::local({
[17:46:39.343]             c <- base::c
[17:46:39.343]             inherits <- base::inherits
[17:46:39.343]             invokeRestart <- base::invokeRestart
[17:46:39.343]             length <- base::length
[17:46:39.343]             list <- base::list
[17:46:39.343]             seq.int <- base::seq.int
[17:46:39.343]             signalCondition <- base::signalCondition
[17:46:39.343]             sys.calls <- base::sys.calls
[17:46:39.343]             `[[` <- base::`[[`
[17:46:39.343]             `+` <- base::`+`
[17:46:39.343]             `<<-` <- base::`<<-`
[17:46:39.343]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:39.343]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:39.343]                   3L)]
[17:46:39.343]             }
[17:46:39.343]             function(cond) {
[17:46:39.343]                 is_error <- inherits(cond, "error")
[17:46:39.343]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:39.343]                   NULL)
[17:46:39.343]                 if (is_error) {
[17:46:39.343]                   sessionInformation <- function() {
[17:46:39.343]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:39.343]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:39.343]                       search = base::search(), system = base::Sys.info())
[17:46:39.343]                   }
[17:46:39.343]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.343]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:39.343]                     cond$call), session = sessionInformation(), 
[17:46:39.343]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:39.343]                   signalCondition(cond)
[17:46:39.343]                 }
[17:46:39.343]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:39.343]                 "immediateCondition"))) {
[17:46:39.343]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:39.343]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.343]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:39.343]                   if (TRUE && !signal) {
[17:46:39.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.343]                     {
[17:46:39.343]                       inherits <- base::inherits
[17:46:39.343]                       invokeRestart <- base::invokeRestart
[17:46:39.343]                       is.null <- base::is.null
[17:46:39.343]                       muffled <- FALSE
[17:46:39.343]                       if (inherits(cond, "message")) {
[17:46:39.343]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.343]                         if (muffled) 
[17:46:39.343]                           invokeRestart("muffleMessage")
[17:46:39.343]                       }
[17:46:39.343]                       else if (inherits(cond, "warning")) {
[17:46:39.343]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.343]                         if (muffled) 
[17:46:39.343]                           invokeRestart("muffleWarning")
[17:46:39.343]                       }
[17:46:39.343]                       else if (inherits(cond, "condition")) {
[17:46:39.343]                         if (!is.null(pattern)) {
[17:46:39.343]                           computeRestarts <- base::computeRestarts
[17:46:39.343]                           grepl <- base::grepl
[17:46:39.343]                           restarts <- computeRestarts(cond)
[17:46:39.343]                           for (restart in restarts) {
[17:46:39.343]                             name <- restart$name
[17:46:39.343]                             if (is.null(name)) 
[17:46:39.343]                               next
[17:46:39.343]                             if (!grepl(pattern, name)) 
[17:46:39.343]                               next
[17:46:39.343]                             invokeRestart(restart)
[17:46:39.343]                             muffled <- TRUE
[17:46:39.343]                             break
[17:46:39.343]                           }
[17:46:39.343]                         }
[17:46:39.343]                       }
[17:46:39.343]                       invisible(muffled)
[17:46:39.343]                     }
[17:46:39.343]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.343]                   }
[17:46:39.343]                 }
[17:46:39.343]                 else {
[17:46:39.343]                   if (TRUE) {
[17:46:39.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.343]                     {
[17:46:39.343]                       inherits <- base::inherits
[17:46:39.343]                       invokeRestart <- base::invokeRestart
[17:46:39.343]                       is.null <- base::is.null
[17:46:39.343]                       muffled <- FALSE
[17:46:39.343]                       if (inherits(cond, "message")) {
[17:46:39.343]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.343]                         if (muffled) 
[17:46:39.343]                           invokeRestart("muffleMessage")
[17:46:39.343]                       }
[17:46:39.343]                       else if (inherits(cond, "warning")) {
[17:46:39.343]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.343]                         if (muffled) 
[17:46:39.343]                           invokeRestart("muffleWarning")
[17:46:39.343]                       }
[17:46:39.343]                       else if (inherits(cond, "condition")) {
[17:46:39.343]                         if (!is.null(pattern)) {
[17:46:39.343]                           computeRestarts <- base::computeRestarts
[17:46:39.343]                           grepl <- base::grepl
[17:46:39.343]                           restarts <- computeRestarts(cond)
[17:46:39.343]                           for (restart in restarts) {
[17:46:39.343]                             name <- restart$name
[17:46:39.343]                             if (is.null(name)) 
[17:46:39.343]                               next
[17:46:39.343]                             if (!grepl(pattern, name)) 
[17:46:39.343]                               next
[17:46:39.343]                             invokeRestart(restart)
[17:46:39.343]                             muffled <- TRUE
[17:46:39.343]                             break
[17:46:39.343]                           }
[17:46:39.343]                         }
[17:46:39.343]                       }
[17:46:39.343]                       invisible(muffled)
[17:46:39.343]                     }
[17:46:39.343]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.343]                   }
[17:46:39.343]                 }
[17:46:39.343]             }
[17:46:39.343]         }))
[17:46:39.343]     }, error = function(ex) {
[17:46:39.343]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:39.343]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.343]                 ...future.rng), started = ...future.startTime, 
[17:46:39.343]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:39.343]             version = "1.8"), class = "FutureResult")
[17:46:39.343]     }, finally = {
[17:46:39.343]         if (!identical(...future.workdir, getwd())) 
[17:46:39.343]             setwd(...future.workdir)
[17:46:39.343]         {
[17:46:39.343]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:39.343]                 ...future.oldOptions$nwarnings <- NULL
[17:46:39.343]             }
[17:46:39.343]             base::options(...future.oldOptions)
[17:46:39.343]             if (.Platform$OS.type == "windows") {
[17:46:39.343]                 old_names <- names(...future.oldEnvVars)
[17:46:39.343]                 envs <- base::Sys.getenv()
[17:46:39.343]                 names <- names(envs)
[17:46:39.343]                 common <- intersect(names, old_names)
[17:46:39.343]                 added <- setdiff(names, old_names)
[17:46:39.343]                 removed <- setdiff(old_names, names)
[17:46:39.343]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:39.343]                   envs[common]]
[17:46:39.343]                 NAMES <- toupper(changed)
[17:46:39.343]                 args <- list()
[17:46:39.343]                 for (kk in seq_along(NAMES)) {
[17:46:39.343]                   name <- changed[[kk]]
[17:46:39.343]                   NAME <- NAMES[[kk]]
[17:46:39.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.343]                     next
[17:46:39.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.343]                 }
[17:46:39.343]                 NAMES <- toupper(added)
[17:46:39.343]                 for (kk in seq_along(NAMES)) {
[17:46:39.343]                   name <- added[[kk]]
[17:46:39.343]                   NAME <- NAMES[[kk]]
[17:46:39.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.343]                     next
[17:46:39.343]                   args[[name]] <- ""
[17:46:39.343]                 }
[17:46:39.343]                 NAMES <- toupper(removed)
[17:46:39.343]                 for (kk in seq_along(NAMES)) {
[17:46:39.343]                   name <- removed[[kk]]
[17:46:39.343]                   NAME <- NAMES[[kk]]
[17:46:39.343]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.343]                     next
[17:46:39.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.343]                 }
[17:46:39.343]                 if (length(args) > 0) 
[17:46:39.343]                   base::do.call(base::Sys.setenv, args = args)
[17:46:39.343]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:39.343]             }
[17:46:39.343]             else {
[17:46:39.343]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:39.343]             }
[17:46:39.343]             {
[17:46:39.343]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:39.343]                   0L) {
[17:46:39.343]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:39.343]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:39.343]                   base::options(opts)
[17:46:39.343]                 }
[17:46:39.343]                 {
[17:46:39.343]                   {
[17:46:39.343]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:39.343]                     NULL
[17:46:39.343]                   }
[17:46:39.343]                   options(future.plan = NULL)
[17:46:39.343]                   if (is.na(NA_character_)) 
[17:46:39.343]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.343]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:39.343]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:39.343]                     .init = FALSE)
[17:46:39.343]                 }
[17:46:39.343]             }
[17:46:39.343]         }
[17:46:39.343]     })
[17:46:39.343]     if (TRUE) {
[17:46:39.343]         base::sink(type = "output", split = FALSE)
[17:46:39.343]         if (TRUE) {
[17:46:39.343]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:39.343]         }
[17:46:39.343]         else {
[17:46:39.343]             ...future.result["stdout"] <- base::list(NULL)
[17:46:39.343]         }
[17:46:39.343]         base::close(...future.stdout)
[17:46:39.343]         ...future.stdout <- NULL
[17:46:39.343]     }
[17:46:39.343]     ...future.result$conditions <- ...future.conditions
[17:46:39.343]     ...future.result$finished <- base::Sys.time()
[17:46:39.343]     ...future.result
[17:46:39.343] }
[17:46:39.347] MultisessionFuture started
[17:46:39.347] - Launch lazy future ... done
[17:46:39.347] run() for ‘MultisessionFuture’ ... done
[17:46:39.348] getGlobalsAndPackages() ...
[17:46:39.348] Searching for globals...
[17:46:39.349] - globals found: [1] ‘{’
[17:46:39.349] Searching for globals ... DONE
[17:46:39.349] Resolving globals: FALSE
[17:46:39.349] 
[17:46:39.350] 
[17:46:39.350] getGlobalsAndPackages() ... DONE
[17:46:39.350] run() for ‘Future’ ...
[17:46:39.350] - state: ‘created’
[17:46:39.350] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:39.364] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:39.365] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:39.365]   - Field: ‘node’
[17:46:39.365]   - Field: ‘label’
[17:46:39.365]   - Field: ‘local’
[17:46:39.365]   - Field: ‘owner’
[17:46:39.365]   - Field: ‘envir’
[17:46:39.365]   - Field: ‘workers’
[17:46:39.365]   - Field: ‘packages’
[17:46:39.365]   - Field: ‘gc’
[17:46:39.365]   - Field: ‘conditions’
[17:46:39.366]   - Field: ‘persistent’
[17:46:39.366]   - Field: ‘expr’
[17:46:39.366]   - Field: ‘uuid’
[17:46:39.366]   - Field: ‘seed’
[17:46:39.366]   - Field: ‘version’
[17:46:39.366]   - Field: ‘result’
[17:46:39.366]   - Field: ‘asynchronous’
[17:46:39.366]   - Field: ‘calls’
[17:46:39.366]   - Field: ‘globals’
[17:46:39.367]   - Field: ‘stdout’
[17:46:39.367]   - Field: ‘earlySignal’
[17:46:39.367]   - Field: ‘lazy’
[17:46:39.367]   - Field: ‘state’
[17:46:39.367] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:39.367] - Launch lazy future ...
[17:46:39.367] Packages needed by the future expression (n = 0): <none>
[17:46:39.368] Packages needed by future strategies (n = 0): <none>
[17:46:39.368] {
[17:46:39.368]     {
[17:46:39.368]         {
[17:46:39.368]             ...future.startTime <- base::Sys.time()
[17:46:39.368]             {
[17:46:39.368]                 {
[17:46:39.368]                   {
[17:46:39.368]                     {
[17:46:39.368]                       base::local({
[17:46:39.368]                         has_future <- base::requireNamespace("future", 
[17:46:39.368]                           quietly = TRUE)
[17:46:39.368]                         if (has_future) {
[17:46:39.368]                           ns <- base::getNamespace("future")
[17:46:39.368]                           version <- ns[[".package"]][["version"]]
[17:46:39.368]                           if (is.null(version)) 
[17:46:39.368]                             version <- utils::packageVersion("future")
[17:46:39.368]                         }
[17:46:39.368]                         else {
[17:46:39.368]                           version <- NULL
[17:46:39.368]                         }
[17:46:39.368]                         if (!has_future || version < "1.8.0") {
[17:46:39.368]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:39.368]                             "", base::R.version$version.string), 
[17:46:39.368]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:39.368]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:39.368]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:39.368]                               "release", "version")], collapse = " "), 
[17:46:39.368]                             hostname = base::Sys.info()[["nodename"]])
[17:46:39.368]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:39.368]                             info)
[17:46:39.368]                           info <- base::paste(info, collapse = "; ")
[17:46:39.368]                           if (!has_future) {
[17:46:39.368]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:39.368]                               info)
[17:46:39.368]                           }
[17:46:39.368]                           else {
[17:46:39.368]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:39.368]                               info, version)
[17:46:39.368]                           }
[17:46:39.368]                           base::stop(msg)
[17:46:39.368]                         }
[17:46:39.368]                       })
[17:46:39.368]                     }
[17:46:39.368]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:39.368]                     base::options(mc.cores = 1L)
[17:46:39.368]                   }
[17:46:39.368]                   ...future.strategy.old <- future::plan("list")
[17:46:39.368]                   options(future.plan = NULL)
[17:46:39.368]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.368]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:39.368]                 }
[17:46:39.368]                 ...future.workdir <- getwd()
[17:46:39.368]             }
[17:46:39.368]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:39.368]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:39.368]         }
[17:46:39.368]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:39.368]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:39.368]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:39.368]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:39.368]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:39.368]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:39.368]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:39.368]             base::names(...future.oldOptions))
[17:46:39.368]     }
[17:46:39.368]     if (FALSE) {
[17:46:39.368]     }
[17:46:39.368]     else {
[17:46:39.368]         if (TRUE) {
[17:46:39.368]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:39.368]                 open = "w")
[17:46:39.368]         }
[17:46:39.368]         else {
[17:46:39.368]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:39.368]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:39.368]         }
[17:46:39.368]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:39.368]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:39.368]             base::sink(type = "output", split = FALSE)
[17:46:39.368]             base::close(...future.stdout)
[17:46:39.368]         }, add = TRUE)
[17:46:39.368]     }
[17:46:39.368]     ...future.frame <- base::sys.nframe()
[17:46:39.368]     ...future.conditions <- base::list()
[17:46:39.368]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:39.368]     if (FALSE) {
[17:46:39.368]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:39.368]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:39.368]     }
[17:46:39.368]     ...future.result <- base::tryCatch({
[17:46:39.368]         base::withCallingHandlers({
[17:46:39.368]             ...future.value <- base::withVisible(base::local({
[17:46:39.368]                 ...future.makeSendCondition <- base::local({
[17:46:39.368]                   sendCondition <- NULL
[17:46:39.368]                   function(frame = 1L) {
[17:46:39.368]                     if (is.function(sendCondition)) 
[17:46:39.368]                       return(sendCondition)
[17:46:39.368]                     ns <- getNamespace("parallel")
[17:46:39.368]                     if (exists("sendData", mode = "function", 
[17:46:39.368]                       envir = ns)) {
[17:46:39.368]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:39.368]                         envir = ns)
[17:46:39.368]                       envir <- sys.frame(frame)
[17:46:39.368]                       master <- NULL
[17:46:39.368]                       while (!identical(envir, .GlobalEnv) && 
[17:46:39.368]                         !identical(envir, emptyenv())) {
[17:46:39.368]                         if (exists("master", mode = "list", envir = envir, 
[17:46:39.368]                           inherits = FALSE)) {
[17:46:39.368]                           master <- get("master", mode = "list", 
[17:46:39.368]                             envir = envir, inherits = FALSE)
[17:46:39.368]                           if (inherits(master, c("SOCKnode", 
[17:46:39.368]                             "SOCK0node"))) {
[17:46:39.368]                             sendCondition <<- function(cond) {
[17:46:39.368]                               data <- list(type = "VALUE", value = cond, 
[17:46:39.368]                                 success = TRUE)
[17:46:39.368]                               parallel_sendData(master, data)
[17:46:39.368]                             }
[17:46:39.368]                             return(sendCondition)
[17:46:39.368]                           }
[17:46:39.368]                         }
[17:46:39.368]                         frame <- frame + 1L
[17:46:39.368]                         envir <- sys.frame(frame)
[17:46:39.368]                       }
[17:46:39.368]                     }
[17:46:39.368]                     sendCondition <<- function(cond) NULL
[17:46:39.368]                   }
[17:46:39.368]                 })
[17:46:39.368]                 withCallingHandlers({
[17:46:39.368]                   {
[17:46:39.368]                     4
[17:46:39.368]                   }
[17:46:39.368]                 }, immediateCondition = function(cond) {
[17:46:39.368]                   sendCondition <- ...future.makeSendCondition()
[17:46:39.368]                   sendCondition(cond)
[17:46:39.368]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.368]                   {
[17:46:39.368]                     inherits <- base::inherits
[17:46:39.368]                     invokeRestart <- base::invokeRestart
[17:46:39.368]                     is.null <- base::is.null
[17:46:39.368]                     muffled <- FALSE
[17:46:39.368]                     if (inherits(cond, "message")) {
[17:46:39.368]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:39.368]                       if (muffled) 
[17:46:39.368]                         invokeRestart("muffleMessage")
[17:46:39.368]                     }
[17:46:39.368]                     else if (inherits(cond, "warning")) {
[17:46:39.368]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:39.368]                       if (muffled) 
[17:46:39.368]                         invokeRestart("muffleWarning")
[17:46:39.368]                     }
[17:46:39.368]                     else if (inherits(cond, "condition")) {
[17:46:39.368]                       if (!is.null(pattern)) {
[17:46:39.368]                         computeRestarts <- base::computeRestarts
[17:46:39.368]                         grepl <- base::grepl
[17:46:39.368]                         restarts <- computeRestarts(cond)
[17:46:39.368]                         for (restart in restarts) {
[17:46:39.368]                           name <- restart$name
[17:46:39.368]                           if (is.null(name)) 
[17:46:39.368]                             next
[17:46:39.368]                           if (!grepl(pattern, name)) 
[17:46:39.368]                             next
[17:46:39.368]                           invokeRestart(restart)
[17:46:39.368]                           muffled <- TRUE
[17:46:39.368]                           break
[17:46:39.368]                         }
[17:46:39.368]                       }
[17:46:39.368]                     }
[17:46:39.368]                     invisible(muffled)
[17:46:39.368]                   }
[17:46:39.368]                   muffleCondition(cond)
[17:46:39.368]                 })
[17:46:39.368]             }))
[17:46:39.368]             future::FutureResult(value = ...future.value$value, 
[17:46:39.368]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.368]                   ...future.rng), globalenv = if (FALSE) 
[17:46:39.368]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:39.368]                     ...future.globalenv.names))
[17:46:39.368]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:39.368]         }, condition = base::local({
[17:46:39.368]             c <- base::c
[17:46:39.368]             inherits <- base::inherits
[17:46:39.368]             invokeRestart <- base::invokeRestart
[17:46:39.368]             length <- base::length
[17:46:39.368]             list <- base::list
[17:46:39.368]             seq.int <- base::seq.int
[17:46:39.368]             signalCondition <- base::signalCondition
[17:46:39.368]             sys.calls <- base::sys.calls
[17:46:39.368]             `[[` <- base::`[[`
[17:46:39.368]             `+` <- base::`+`
[17:46:39.368]             `<<-` <- base::`<<-`
[17:46:39.368]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:39.368]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:39.368]                   3L)]
[17:46:39.368]             }
[17:46:39.368]             function(cond) {
[17:46:39.368]                 is_error <- inherits(cond, "error")
[17:46:39.368]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:39.368]                   NULL)
[17:46:39.368]                 if (is_error) {
[17:46:39.368]                   sessionInformation <- function() {
[17:46:39.368]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:39.368]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:39.368]                       search = base::search(), system = base::Sys.info())
[17:46:39.368]                   }
[17:46:39.368]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.368]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:39.368]                     cond$call), session = sessionInformation(), 
[17:46:39.368]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:39.368]                   signalCondition(cond)
[17:46:39.368]                 }
[17:46:39.368]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:39.368]                 "immediateCondition"))) {
[17:46:39.368]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:39.368]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.368]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:39.368]                   if (TRUE && !signal) {
[17:46:39.368]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.368]                     {
[17:46:39.368]                       inherits <- base::inherits
[17:46:39.368]                       invokeRestart <- base::invokeRestart
[17:46:39.368]                       is.null <- base::is.null
[17:46:39.368]                       muffled <- FALSE
[17:46:39.368]                       if (inherits(cond, "message")) {
[17:46:39.368]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.368]                         if (muffled) 
[17:46:39.368]                           invokeRestart("muffleMessage")
[17:46:39.368]                       }
[17:46:39.368]                       else if (inherits(cond, "warning")) {
[17:46:39.368]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.368]                         if (muffled) 
[17:46:39.368]                           invokeRestart("muffleWarning")
[17:46:39.368]                       }
[17:46:39.368]                       else if (inherits(cond, "condition")) {
[17:46:39.368]                         if (!is.null(pattern)) {
[17:46:39.368]                           computeRestarts <- base::computeRestarts
[17:46:39.368]                           grepl <- base::grepl
[17:46:39.368]                           restarts <- computeRestarts(cond)
[17:46:39.368]                           for (restart in restarts) {
[17:46:39.368]                             name <- restart$name
[17:46:39.368]                             if (is.null(name)) 
[17:46:39.368]                               next
[17:46:39.368]                             if (!grepl(pattern, name)) 
[17:46:39.368]                               next
[17:46:39.368]                             invokeRestart(restart)
[17:46:39.368]                             muffled <- TRUE
[17:46:39.368]                             break
[17:46:39.368]                           }
[17:46:39.368]                         }
[17:46:39.368]                       }
[17:46:39.368]                       invisible(muffled)
[17:46:39.368]                     }
[17:46:39.368]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.368]                   }
[17:46:39.368]                 }
[17:46:39.368]                 else {
[17:46:39.368]                   if (TRUE) {
[17:46:39.368]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.368]                     {
[17:46:39.368]                       inherits <- base::inherits
[17:46:39.368]                       invokeRestart <- base::invokeRestart
[17:46:39.368]                       is.null <- base::is.null
[17:46:39.368]                       muffled <- FALSE
[17:46:39.368]                       if (inherits(cond, "message")) {
[17:46:39.368]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.368]                         if (muffled) 
[17:46:39.368]                           invokeRestart("muffleMessage")
[17:46:39.368]                       }
[17:46:39.368]                       else if (inherits(cond, "warning")) {
[17:46:39.368]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.368]                         if (muffled) 
[17:46:39.368]                           invokeRestart("muffleWarning")
[17:46:39.368]                       }
[17:46:39.368]                       else if (inherits(cond, "condition")) {
[17:46:39.368]                         if (!is.null(pattern)) {
[17:46:39.368]                           computeRestarts <- base::computeRestarts
[17:46:39.368]                           grepl <- base::grepl
[17:46:39.368]                           restarts <- computeRestarts(cond)
[17:46:39.368]                           for (restart in restarts) {
[17:46:39.368]                             name <- restart$name
[17:46:39.368]                             if (is.null(name)) 
[17:46:39.368]                               next
[17:46:39.368]                             if (!grepl(pattern, name)) 
[17:46:39.368]                               next
[17:46:39.368]                             invokeRestart(restart)
[17:46:39.368]                             muffled <- TRUE
[17:46:39.368]                             break
[17:46:39.368]                           }
[17:46:39.368]                         }
[17:46:39.368]                       }
[17:46:39.368]                       invisible(muffled)
[17:46:39.368]                     }
[17:46:39.368]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.368]                   }
[17:46:39.368]                 }
[17:46:39.368]             }
[17:46:39.368]         }))
[17:46:39.368]     }, error = function(ex) {
[17:46:39.368]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:39.368]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.368]                 ...future.rng), started = ...future.startTime, 
[17:46:39.368]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:39.368]             version = "1.8"), class = "FutureResult")
[17:46:39.368]     }, finally = {
[17:46:39.368]         if (!identical(...future.workdir, getwd())) 
[17:46:39.368]             setwd(...future.workdir)
[17:46:39.368]         {
[17:46:39.368]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:39.368]                 ...future.oldOptions$nwarnings <- NULL
[17:46:39.368]             }
[17:46:39.368]             base::options(...future.oldOptions)
[17:46:39.368]             if (.Platform$OS.type == "windows") {
[17:46:39.368]                 old_names <- names(...future.oldEnvVars)
[17:46:39.368]                 envs <- base::Sys.getenv()
[17:46:39.368]                 names <- names(envs)
[17:46:39.368]                 common <- intersect(names, old_names)
[17:46:39.368]                 added <- setdiff(names, old_names)
[17:46:39.368]                 removed <- setdiff(old_names, names)
[17:46:39.368]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:39.368]                   envs[common]]
[17:46:39.368]                 NAMES <- toupper(changed)
[17:46:39.368]                 args <- list()
[17:46:39.368]                 for (kk in seq_along(NAMES)) {
[17:46:39.368]                   name <- changed[[kk]]
[17:46:39.368]                   NAME <- NAMES[[kk]]
[17:46:39.368]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.368]                     next
[17:46:39.368]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.368]                 }
[17:46:39.368]                 NAMES <- toupper(added)
[17:46:39.368]                 for (kk in seq_along(NAMES)) {
[17:46:39.368]                   name <- added[[kk]]
[17:46:39.368]                   NAME <- NAMES[[kk]]
[17:46:39.368]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.368]                     next
[17:46:39.368]                   args[[name]] <- ""
[17:46:39.368]                 }
[17:46:39.368]                 NAMES <- toupper(removed)
[17:46:39.368]                 for (kk in seq_along(NAMES)) {
[17:46:39.368]                   name <- removed[[kk]]
[17:46:39.368]                   NAME <- NAMES[[kk]]
[17:46:39.368]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.368]                     next
[17:46:39.368]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.368]                 }
[17:46:39.368]                 if (length(args) > 0) 
[17:46:39.368]                   base::do.call(base::Sys.setenv, args = args)
[17:46:39.368]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:39.368]             }
[17:46:39.368]             else {
[17:46:39.368]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:39.368]             }
[17:46:39.368]             {
[17:46:39.368]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:39.368]                   0L) {
[17:46:39.368]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:39.368]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:39.368]                   base::options(opts)
[17:46:39.368]                 }
[17:46:39.368]                 {
[17:46:39.368]                   {
[17:46:39.368]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:39.368]                     NULL
[17:46:39.368]                   }
[17:46:39.368]                   options(future.plan = NULL)
[17:46:39.368]                   if (is.na(NA_character_)) 
[17:46:39.368]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.368]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:39.368]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:39.368]                     .init = FALSE)
[17:46:39.368]                 }
[17:46:39.368]             }
[17:46:39.368]         }
[17:46:39.368]     })
[17:46:39.368]     if (TRUE) {
[17:46:39.368]         base::sink(type = "output", split = FALSE)
[17:46:39.368]         if (TRUE) {
[17:46:39.368]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:39.368]         }
[17:46:39.368]         else {
[17:46:39.368]             ...future.result["stdout"] <- base::list(NULL)
[17:46:39.368]         }
[17:46:39.368]         base::close(...future.stdout)
[17:46:39.368]         ...future.stdout <- NULL
[17:46:39.368]     }
[17:46:39.368]     ...future.result$conditions <- ...future.conditions
[17:46:39.368]     ...future.result$finished <- base::Sys.time()
[17:46:39.368]     ...future.result
[17:46:39.368] }
[17:46:39.421] MultisessionFuture started
[17:46:39.421] - Launch lazy future ... done
[17:46:39.421] run() for ‘MultisessionFuture’ ... done
[17:46:39.421] result() for ClusterFuture ...
[17:46:39.422] receiveMessageFromWorker() for ClusterFuture ...
[17:46:39.422] - Validating connection of MultisessionFuture
[17:46:39.422] - received message: FutureResult
[17:46:39.422] - Received FutureResult
[17:46:39.422] - Erased future from FutureRegistry
[17:46:39.423] result() for ClusterFuture ...
[17:46:39.423] - result already collected: FutureResult
[17:46:39.423] result() for ClusterFuture ... done
[17:46:39.423] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:39.423] result() for ClusterFuture ... done
[17:46:39.424] result() for ClusterFuture ...
[17:46:39.424] - result already collected: FutureResult
[17:46:39.424] result() for ClusterFuture ... done
u$a = 2
[17:46:39.424] result() for ClusterFuture ...
[17:46:39.425] receiveMessageFromWorker() for ClusterFuture ...
[17:46:39.425] - Validating connection of MultisessionFuture
[17:46:39.455] - received message: FutureResult
[17:46:39.455] - Received FutureResult
[17:46:39.455] - Erased future from FutureRegistry
[17:46:39.456] result() for ClusterFuture ...
[17:46:39.456] - result already collected: FutureResult
[17:46:39.456] result() for ClusterFuture ... done
[17:46:39.456] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:39.456] result() for ClusterFuture ... done
[17:46:39.456] result() for ClusterFuture ...
[17:46:39.456] - result already collected: FutureResult
[17:46:39.456] result() for ClusterFuture ... done
v$a = 4
[17:46:39.457] getGlobalsAndPackages() ...
[17:46:39.457] Searching for globals...
[17:46:39.458] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:39.458] Searching for globals ... DONE
[17:46:39.458] Resolving globals: FALSE
[17:46:39.459] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:39.459] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:39.459] - globals: [1] ‘a’
[17:46:39.459] 
[17:46:39.460] getGlobalsAndPackages() ... DONE
[17:46:39.460] run() for ‘Future’ ...
[17:46:39.460] - state: ‘created’
[17:46:39.460] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:39.475] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:39.475] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:39.475]   - Field: ‘node’
[17:46:39.476]   - Field: ‘label’
[17:46:39.476]   - Field: ‘local’
[17:46:39.476]   - Field: ‘owner’
[17:46:39.476]   - Field: ‘envir’
[17:46:39.476]   - Field: ‘workers’
[17:46:39.476]   - Field: ‘packages’
[17:46:39.476]   - Field: ‘gc’
[17:46:39.476]   - Field: ‘conditions’
[17:46:39.476]   - Field: ‘persistent’
[17:46:39.477]   - Field: ‘expr’
[17:46:39.477]   - Field: ‘uuid’
[17:46:39.477]   - Field: ‘seed’
[17:46:39.477]   - Field: ‘version’
[17:46:39.477]   - Field: ‘result’
[17:46:39.477]   - Field: ‘asynchronous’
[17:46:39.477]   - Field: ‘calls’
[17:46:39.477]   - Field: ‘globals’
[17:46:39.477]   - Field: ‘stdout’
[17:46:39.478]   - Field: ‘earlySignal’
[17:46:39.478]   - Field: ‘lazy’
[17:46:39.478]   - Field: ‘state’
[17:46:39.478] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:39.478] - Launch lazy future ...
[17:46:39.478] Packages needed by the future expression (n = 0): <none>
[17:46:39.479] Packages needed by future strategies (n = 0): <none>
[17:46:39.479] {
[17:46:39.479]     {
[17:46:39.479]         {
[17:46:39.479]             ...future.startTime <- base::Sys.time()
[17:46:39.479]             {
[17:46:39.479]                 {
[17:46:39.479]                   {
[17:46:39.479]                     {
[17:46:39.479]                       base::local({
[17:46:39.479]                         has_future <- base::requireNamespace("future", 
[17:46:39.479]                           quietly = TRUE)
[17:46:39.479]                         if (has_future) {
[17:46:39.479]                           ns <- base::getNamespace("future")
[17:46:39.479]                           version <- ns[[".package"]][["version"]]
[17:46:39.479]                           if (is.null(version)) 
[17:46:39.479]                             version <- utils::packageVersion("future")
[17:46:39.479]                         }
[17:46:39.479]                         else {
[17:46:39.479]                           version <- NULL
[17:46:39.479]                         }
[17:46:39.479]                         if (!has_future || version < "1.8.0") {
[17:46:39.479]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:39.479]                             "", base::R.version$version.string), 
[17:46:39.479]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:39.479]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:39.479]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:39.479]                               "release", "version")], collapse = " "), 
[17:46:39.479]                             hostname = base::Sys.info()[["nodename"]])
[17:46:39.479]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:39.479]                             info)
[17:46:39.479]                           info <- base::paste(info, collapse = "; ")
[17:46:39.479]                           if (!has_future) {
[17:46:39.479]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:39.479]                               info)
[17:46:39.479]                           }
[17:46:39.479]                           else {
[17:46:39.479]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:39.479]                               info, version)
[17:46:39.479]                           }
[17:46:39.479]                           base::stop(msg)
[17:46:39.479]                         }
[17:46:39.479]                       })
[17:46:39.479]                     }
[17:46:39.479]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:39.479]                     base::options(mc.cores = 1L)
[17:46:39.479]                   }
[17:46:39.479]                   ...future.strategy.old <- future::plan("list")
[17:46:39.479]                   options(future.plan = NULL)
[17:46:39.479]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.479]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:39.479]                 }
[17:46:39.479]                 ...future.workdir <- getwd()
[17:46:39.479]             }
[17:46:39.479]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:39.479]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:39.479]         }
[17:46:39.479]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:39.479]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:39.479]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:39.479]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:39.479]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:39.479]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:39.479]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:39.479]             base::names(...future.oldOptions))
[17:46:39.479]     }
[17:46:39.479]     if (FALSE) {
[17:46:39.479]     }
[17:46:39.479]     else {
[17:46:39.479]         if (TRUE) {
[17:46:39.479]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:39.479]                 open = "w")
[17:46:39.479]         }
[17:46:39.479]         else {
[17:46:39.479]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:39.479]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:39.479]         }
[17:46:39.479]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:39.479]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:39.479]             base::sink(type = "output", split = FALSE)
[17:46:39.479]             base::close(...future.stdout)
[17:46:39.479]         }, add = TRUE)
[17:46:39.479]     }
[17:46:39.479]     ...future.frame <- base::sys.nframe()
[17:46:39.479]     ...future.conditions <- base::list()
[17:46:39.479]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:39.479]     if (FALSE) {
[17:46:39.479]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:39.479]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:39.479]     }
[17:46:39.479]     ...future.result <- base::tryCatch({
[17:46:39.479]         base::withCallingHandlers({
[17:46:39.479]             ...future.value <- base::withVisible(base::local({
[17:46:39.479]                 ...future.makeSendCondition <- base::local({
[17:46:39.479]                   sendCondition <- NULL
[17:46:39.479]                   function(frame = 1L) {
[17:46:39.479]                     if (is.function(sendCondition)) 
[17:46:39.479]                       return(sendCondition)
[17:46:39.479]                     ns <- getNamespace("parallel")
[17:46:39.479]                     if (exists("sendData", mode = "function", 
[17:46:39.479]                       envir = ns)) {
[17:46:39.479]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:39.479]                         envir = ns)
[17:46:39.479]                       envir <- sys.frame(frame)
[17:46:39.479]                       master <- NULL
[17:46:39.479]                       while (!identical(envir, .GlobalEnv) && 
[17:46:39.479]                         !identical(envir, emptyenv())) {
[17:46:39.479]                         if (exists("master", mode = "list", envir = envir, 
[17:46:39.479]                           inherits = FALSE)) {
[17:46:39.479]                           master <- get("master", mode = "list", 
[17:46:39.479]                             envir = envir, inherits = FALSE)
[17:46:39.479]                           if (inherits(master, c("SOCKnode", 
[17:46:39.479]                             "SOCK0node"))) {
[17:46:39.479]                             sendCondition <<- function(cond) {
[17:46:39.479]                               data <- list(type = "VALUE", value = cond, 
[17:46:39.479]                                 success = TRUE)
[17:46:39.479]                               parallel_sendData(master, data)
[17:46:39.479]                             }
[17:46:39.479]                             return(sendCondition)
[17:46:39.479]                           }
[17:46:39.479]                         }
[17:46:39.479]                         frame <- frame + 1L
[17:46:39.479]                         envir <- sys.frame(frame)
[17:46:39.479]                       }
[17:46:39.479]                     }
[17:46:39.479]                     sendCondition <<- function(cond) NULL
[17:46:39.479]                   }
[17:46:39.479]                 })
[17:46:39.479]                 withCallingHandlers({
[17:46:39.479]                   {
[17:46:39.479]                     2 * a
[17:46:39.479]                   }
[17:46:39.479]                 }, immediateCondition = function(cond) {
[17:46:39.479]                   sendCondition <- ...future.makeSendCondition()
[17:46:39.479]                   sendCondition(cond)
[17:46:39.479]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.479]                   {
[17:46:39.479]                     inherits <- base::inherits
[17:46:39.479]                     invokeRestart <- base::invokeRestart
[17:46:39.479]                     is.null <- base::is.null
[17:46:39.479]                     muffled <- FALSE
[17:46:39.479]                     if (inherits(cond, "message")) {
[17:46:39.479]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:39.479]                       if (muffled) 
[17:46:39.479]                         invokeRestart("muffleMessage")
[17:46:39.479]                     }
[17:46:39.479]                     else if (inherits(cond, "warning")) {
[17:46:39.479]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:39.479]                       if (muffled) 
[17:46:39.479]                         invokeRestart("muffleWarning")
[17:46:39.479]                     }
[17:46:39.479]                     else if (inherits(cond, "condition")) {
[17:46:39.479]                       if (!is.null(pattern)) {
[17:46:39.479]                         computeRestarts <- base::computeRestarts
[17:46:39.479]                         grepl <- base::grepl
[17:46:39.479]                         restarts <- computeRestarts(cond)
[17:46:39.479]                         for (restart in restarts) {
[17:46:39.479]                           name <- restart$name
[17:46:39.479]                           if (is.null(name)) 
[17:46:39.479]                             next
[17:46:39.479]                           if (!grepl(pattern, name)) 
[17:46:39.479]                             next
[17:46:39.479]                           invokeRestart(restart)
[17:46:39.479]                           muffled <- TRUE
[17:46:39.479]                           break
[17:46:39.479]                         }
[17:46:39.479]                       }
[17:46:39.479]                     }
[17:46:39.479]                     invisible(muffled)
[17:46:39.479]                   }
[17:46:39.479]                   muffleCondition(cond)
[17:46:39.479]                 })
[17:46:39.479]             }))
[17:46:39.479]             future::FutureResult(value = ...future.value$value, 
[17:46:39.479]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.479]                   ...future.rng), globalenv = if (FALSE) 
[17:46:39.479]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:39.479]                     ...future.globalenv.names))
[17:46:39.479]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:39.479]         }, condition = base::local({
[17:46:39.479]             c <- base::c
[17:46:39.479]             inherits <- base::inherits
[17:46:39.479]             invokeRestart <- base::invokeRestart
[17:46:39.479]             length <- base::length
[17:46:39.479]             list <- base::list
[17:46:39.479]             seq.int <- base::seq.int
[17:46:39.479]             signalCondition <- base::signalCondition
[17:46:39.479]             sys.calls <- base::sys.calls
[17:46:39.479]             `[[` <- base::`[[`
[17:46:39.479]             `+` <- base::`+`
[17:46:39.479]             `<<-` <- base::`<<-`
[17:46:39.479]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:39.479]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:39.479]                   3L)]
[17:46:39.479]             }
[17:46:39.479]             function(cond) {
[17:46:39.479]                 is_error <- inherits(cond, "error")
[17:46:39.479]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:39.479]                   NULL)
[17:46:39.479]                 if (is_error) {
[17:46:39.479]                   sessionInformation <- function() {
[17:46:39.479]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:39.479]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:39.479]                       search = base::search(), system = base::Sys.info())
[17:46:39.479]                   }
[17:46:39.479]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.479]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:39.479]                     cond$call), session = sessionInformation(), 
[17:46:39.479]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:39.479]                   signalCondition(cond)
[17:46:39.479]                 }
[17:46:39.479]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:39.479]                 "immediateCondition"))) {
[17:46:39.479]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:39.479]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.479]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:39.479]                   if (TRUE && !signal) {
[17:46:39.479]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.479]                     {
[17:46:39.479]                       inherits <- base::inherits
[17:46:39.479]                       invokeRestart <- base::invokeRestart
[17:46:39.479]                       is.null <- base::is.null
[17:46:39.479]                       muffled <- FALSE
[17:46:39.479]                       if (inherits(cond, "message")) {
[17:46:39.479]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.479]                         if (muffled) 
[17:46:39.479]                           invokeRestart("muffleMessage")
[17:46:39.479]                       }
[17:46:39.479]                       else if (inherits(cond, "warning")) {
[17:46:39.479]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.479]                         if (muffled) 
[17:46:39.479]                           invokeRestart("muffleWarning")
[17:46:39.479]                       }
[17:46:39.479]                       else if (inherits(cond, "condition")) {
[17:46:39.479]                         if (!is.null(pattern)) {
[17:46:39.479]                           computeRestarts <- base::computeRestarts
[17:46:39.479]                           grepl <- base::grepl
[17:46:39.479]                           restarts <- computeRestarts(cond)
[17:46:39.479]                           for (restart in restarts) {
[17:46:39.479]                             name <- restart$name
[17:46:39.479]                             if (is.null(name)) 
[17:46:39.479]                               next
[17:46:39.479]                             if (!grepl(pattern, name)) 
[17:46:39.479]                               next
[17:46:39.479]                             invokeRestart(restart)
[17:46:39.479]                             muffled <- TRUE
[17:46:39.479]                             break
[17:46:39.479]                           }
[17:46:39.479]                         }
[17:46:39.479]                       }
[17:46:39.479]                       invisible(muffled)
[17:46:39.479]                     }
[17:46:39.479]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.479]                   }
[17:46:39.479]                 }
[17:46:39.479]                 else {
[17:46:39.479]                   if (TRUE) {
[17:46:39.479]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.479]                     {
[17:46:39.479]                       inherits <- base::inherits
[17:46:39.479]                       invokeRestart <- base::invokeRestart
[17:46:39.479]                       is.null <- base::is.null
[17:46:39.479]                       muffled <- FALSE
[17:46:39.479]                       if (inherits(cond, "message")) {
[17:46:39.479]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.479]                         if (muffled) 
[17:46:39.479]                           invokeRestart("muffleMessage")
[17:46:39.479]                       }
[17:46:39.479]                       else if (inherits(cond, "warning")) {
[17:46:39.479]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.479]                         if (muffled) 
[17:46:39.479]                           invokeRestart("muffleWarning")
[17:46:39.479]                       }
[17:46:39.479]                       else if (inherits(cond, "condition")) {
[17:46:39.479]                         if (!is.null(pattern)) {
[17:46:39.479]                           computeRestarts <- base::computeRestarts
[17:46:39.479]                           grepl <- base::grepl
[17:46:39.479]                           restarts <- computeRestarts(cond)
[17:46:39.479]                           for (restart in restarts) {
[17:46:39.479]                             name <- restart$name
[17:46:39.479]                             if (is.null(name)) 
[17:46:39.479]                               next
[17:46:39.479]                             if (!grepl(pattern, name)) 
[17:46:39.479]                               next
[17:46:39.479]                             invokeRestart(restart)
[17:46:39.479]                             muffled <- TRUE
[17:46:39.479]                             break
[17:46:39.479]                           }
[17:46:39.479]                         }
[17:46:39.479]                       }
[17:46:39.479]                       invisible(muffled)
[17:46:39.479]                     }
[17:46:39.479]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.479]                   }
[17:46:39.479]                 }
[17:46:39.479]             }
[17:46:39.479]         }))
[17:46:39.479]     }, error = function(ex) {
[17:46:39.479]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:39.479]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.479]                 ...future.rng), started = ...future.startTime, 
[17:46:39.479]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:39.479]             version = "1.8"), class = "FutureResult")
[17:46:39.479]     }, finally = {
[17:46:39.479]         if (!identical(...future.workdir, getwd())) 
[17:46:39.479]             setwd(...future.workdir)
[17:46:39.479]         {
[17:46:39.479]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:39.479]                 ...future.oldOptions$nwarnings <- NULL
[17:46:39.479]             }
[17:46:39.479]             base::options(...future.oldOptions)
[17:46:39.479]             if (.Platform$OS.type == "windows") {
[17:46:39.479]                 old_names <- names(...future.oldEnvVars)
[17:46:39.479]                 envs <- base::Sys.getenv()
[17:46:39.479]                 names <- names(envs)
[17:46:39.479]                 common <- intersect(names, old_names)
[17:46:39.479]                 added <- setdiff(names, old_names)
[17:46:39.479]                 removed <- setdiff(old_names, names)
[17:46:39.479]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:39.479]                   envs[common]]
[17:46:39.479]                 NAMES <- toupper(changed)
[17:46:39.479]                 args <- list()
[17:46:39.479]                 for (kk in seq_along(NAMES)) {
[17:46:39.479]                   name <- changed[[kk]]
[17:46:39.479]                   NAME <- NAMES[[kk]]
[17:46:39.479]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.479]                     next
[17:46:39.479]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.479]                 }
[17:46:39.479]                 NAMES <- toupper(added)
[17:46:39.479]                 for (kk in seq_along(NAMES)) {
[17:46:39.479]                   name <- added[[kk]]
[17:46:39.479]                   NAME <- NAMES[[kk]]
[17:46:39.479]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.479]                     next
[17:46:39.479]                   args[[name]] <- ""
[17:46:39.479]                 }
[17:46:39.479]                 NAMES <- toupper(removed)
[17:46:39.479]                 for (kk in seq_along(NAMES)) {
[17:46:39.479]                   name <- removed[[kk]]
[17:46:39.479]                   NAME <- NAMES[[kk]]
[17:46:39.479]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.479]                     next
[17:46:39.479]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.479]                 }
[17:46:39.479]                 if (length(args) > 0) 
[17:46:39.479]                   base::do.call(base::Sys.setenv, args = args)
[17:46:39.479]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:39.479]             }
[17:46:39.479]             else {
[17:46:39.479]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:39.479]             }
[17:46:39.479]             {
[17:46:39.479]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:39.479]                   0L) {
[17:46:39.479]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:39.479]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:39.479]                   base::options(opts)
[17:46:39.479]                 }
[17:46:39.479]                 {
[17:46:39.479]                   {
[17:46:39.479]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:39.479]                     NULL
[17:46:39.479]                   }
[17:46:39.479]                   options(future.plan = NULL)
[17:46:39.479]                   if (is.na(NA_character_)) 
[17:46:39.479]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.479]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:39.479]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:39.479]                     .init = FALSE)
[17:46:39.479]                 }
[17:46:39.479]             }
[17:46:39.479]         }
[17:46:39.479]     })
[17:46:39.479]     if (TRUE) {
[17:46:39.479]         base::sink(type = "output", split = FALSE)
[17:46:39.479]         if (TRUE) {
[17:46:39.479]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:39.479]         }
[17:46:39.479]         else {
[17:46:39.479]             ...future.result["stdout"] <- base::list(NULL)
[17:46:39.479]         }
[17:46:39.479]         base::close(...future.stdout)
[17:46:39.479]         ...future.stdout <- NULL
[17:46:39.479]     }
[17:46:39.479]     ...future.result$conditions <- ...future.conditions
[17:46:39.479]     ...future.result$finished <- base::Sys.time()
[17:46:39.479]     ...future.result
[17:46:39.479] }
[17:46:39.482] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:46:39.482] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:46:39.483] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:46:39.483] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:46:39.483] MultisessionFuture started
[17:46:39.484] - Launch lazy future ... done
[17:46:39.484] run() for ‘MultisessionFuture’ ... done
[17:46:39.484] result() for ClusterFuture ...
[17:46:39.484] receiveMessageFromWorker() for ClusterFuture ...
[17:46:39.484] - Validating connection of MultisessionFuture
[17:46:39.489] - received message: FutureResult
[17:46:39.489] - Received FutureResult
[17:46:39.489] - Erased future from FutureRegistry
[17:46:39.489] result() for ClusterFuture ...
[17:46:39.489] - result already collected: FutureResult
[17:46:39.489] result() for ClusterFuture ... done
[17:46:39.490] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:39.490] result() for ClusterFuture ... done
[17:46:39.490] result() for ClusterFuture ...
[17:46:39.490] - result already collected: FutureResult
[17:46:39.490] result() for ClusterFuture ... done
[17:46:39.490] getGlobalsAndPackages() ...
[17:46:39.490] Searching for globals...
[17:46:39.491] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:39.492] Searching for globals ... DONE
[17:46:39.492] Resolving globals: FALSE
[17:46:39.492] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:39.493] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:39.493] - globals: [1] ‘a’
[17:46:39.493] 
[17:46:39.493] getGlobalsAndPackages() ... DONE
[17:46:39.493] run() for ‘Future’ ...
[17:46:39.493] - state: ‘created’
[17:46:39.494] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:39.511] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:39.511] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:39.511]   - Field: ‘node’
[17:46:39.511]   - Field: ‘label’
[17:46:39.512]   - Field: ‘local’
[17:46:39.512]   - Field: ‘owner’
[17:46:39.512]   - Field: ‘envir’
[17:46:39.512]   - Field: ‘workers’
[17:46:39.512]   - Field: ‘packages’
[17:46:39.512]   - Field: ‘gc’
[17:46:39.512]   - Field: ‘conditions’
[17:46:39.512]   - Field: ‘persistent’
[17:46:39.513]   - Field: ‘expr’
[17:46:39.513]   - Field: ‘uuid’
[17:46:39.513]   - Field: ‘seed’
[17:46:39.513]   - Field: ‘version’
[17:46:39.513]   - Field: ‘result’
[17:46:39.513]   - Field: ‘asynchronous’
[17:46:39.513]   - Field: ‘calls’
[17:46:39.513]   - Field: ‘globals’
[17:46:39.514]   - Field: ‘stdout’
[17:46:39.514]   - Field: ‘earlySignal’
[17:46:39.514]   - Field: ‘lazy’
[17:46:39.514]   - Field: ‘state’
[17:46:39.514] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:39.514] - Launch lazy future ...
[17:46:39.515] Packages needed by the future expression (n = 0): <none>
[17:46:39.515] Packages needed by future strategies (n = 0): <none>
[17:46:39.515] {
[17:46:39.515]     {
[17:46:39.515]         {
[17:46:39.515]             ...future.startTime <- base::Sys.time()
[17:46:39.515]             {
[17:46:39.515]                 {
[17:46:39.515]                   {
[17:46:39.515]                     {
[17:46:39.515]                       base::local({
[17:46:39.515]                         has_future <- base::requireNamespace("future", 
[17:46:39.515]                           quietly = TRUE)
[17:46:39.515]                         if (has_future) {
[17:46:39.515]                           ns <- base::getNamespace("future")
[17:46:39.515]                           version <- ns[[".package"]][["version"]]
[17:46:39.515]                           if (is.null(version)) 
[17:46:39.515]                             version <- utils::packageVersion("future")
[17:46:39.515]                         }
[17:46:39.515]                         else {
[17:46:39.515]                           version <- NULL
[17:46:39.515]                         }
[17:46:39.515]                         if (!has_future || version < "1.8.0") {
[17:46:39.515]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:39.515]                             "", base::R.version$version.string), 
[17:46:39.515]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:39.515]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:39.515]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:39.515]                               "release", "version")], collapse = " "), 
[17:46:39.515]                             hostname = base::Sys.info()[["nodename"]])
[17:46:39.515]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:39.515]                             info)
[17:46:39.515]                           info <- base::paste(info, collapse = "; ")
[17:46:39.515]                           if (!has_future) {
[17:46:39.515]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:39.515]                               info)
[17:46:39.515]                           }
[17:46:39.515]                           else {
[17:46:39.515]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:39.515]                               info, version)
[17:46:39.515]                           }
[17:46:39.515]                           base::stop(msg)
[17:46:39.515]                         }
[17:46:39.515]                       })
[17:46:39.515]                     }
[17:46:39.515]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:39.515]                     base::options(mc.cores = 1L)
[17:46:39.515]                   }
[17:46:39.515]                   ...future.strategy.old <- future::plan("list")
[17:46:39.515]                   options(future.plan = NULL)
[17:46:39.515]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.515]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:39.515]                 }
[17:46:39.515]                 ...future.workdir <- getwd()
[17:46:39.515]             }
[17:46:39.515]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:39.515]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:39.515]         }
[17:46:39.515]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:39.515]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:39.515]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:39.515]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:39.515]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:39.515]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:39.515]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:39.515]             base::names(...future.oldOptions))
[17:46:39.515]     }
[17:46:39.515]     if (FALSE) {
[17:46:39.515]     }
[17:46:39.515]     else {
[17:46:39.515]         if (TRUE) {
[17:46:39.515]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:39.515]                 open = "w")
[17:46:39.515]         }
[17:46:39.515]         else {
[17:46:39.515]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:39.515]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:39.515]         }
[17:46:39.515]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:39.515]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:39.515]             base::sink(type = "output", split = FALSE)
[17:46:39.515]             base::close(...future.stdout)
[17:46:39.515]         }, add = TRUE)
[17:46:39.515]     }
[17:46:39.515]     ...future.frame <- base::sys.nframe()
[17:46:39.515]     ...future.conditions <- base::list()
[17:46:39.515]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:39.515]     if (FALSE) {
[17:46:39.515]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:39.515]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:39.515]     }
[17:46:39.515]     ...future.result <- base::tryCatch({
[17:46:39.515]         base::withCallingHandlers({
[17:46:39.515]             ...future.value <- base::withVisible(base::local({
[17:46:39.515]                 ...future.makeSendCondition <- base::local({
[17:46:39.515]                   sendCondition <- NULL
[17:46:39.515]                   function(frame = 1L) {
[17:46:39.515]                     if (is.function(sendCondition)) 
[17:46:39.515]                       return(sendCondition)
[17:46:39.515]                     ns <- getNamespace("parallel")
[17:46:39.515]                     if (exists("sendData", mode = "function", 
[17:46:39.515]                       envir = ns)) {
[17:46:39.515]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:39.515]                         envir = ns)
[17:46:39.515]                       envir <- sys.frame(frame)
[17:46:39.515]                       master <- NULL
[17:46:39.515]                       while (!identical(envir, .GlobalEnv) && 
[17:46:39.515]                         !identical(envir, emptyenv())) {
[17:46:39.515]                         if (exists("master", mode = "list", envir = envir, 
[17:46:39.515]                           inherits = FALSE)) {
[17:46:39.515]                           master <- get("master", mode = "list", 
[17:46:39.515]                             envir = envir, inherits = FALSE)
[17:46:39.515]                           if (inherits(master, c("SOCKnode", 
[17:46:39.515]                             "SOCK0node"))) {
[17:46:39.515]                             sendCondition <<- function(cond) {
[17:46:39.515]                               data <- list(type = "VALUE", value = cond, 
[17:46:39.515]                                 success = TRUE)
[17:46:39.515]                               parallel_sendData(master, data)
[17:46:39.515]                             }
[17:46:39.515]                             return(sendCondition)
[17:46:39.515]                           }
[17:46:39.515]                         }
[17:46:39.515]                         frame <- frame + 1L
[17:46:39.515]                         envir <- sys.frame(frame)
[17:46:39.515]                       }
[17:46:39.515]                     }
[17:46:39.515]                     sendCondition <<- function(cond) NULL
[17:46:39.515]                   }
[17:46:39.515]                 })
[17:46:39.515]                 withCallingHandlers({
[17:46:39.515]                   {
[17:46:39.515]                     2 * a
[17:46:39.515]                   }
[17:46:39.515]                 }, immediateCondition = function(cond) {
[17:46:39.515]                   sendCondition <- ...future.makeSendCondition()
[17:46:39.515]                   sendCondition(cond)
[17:46:39.515]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.515]                   {
[17:46:39.515]                     inherits <- base::inherits
[17:46:39.515]                     invokeRestart <- base::invokeRestart
[17:46:39.515]                     is.null <- base::is.null
[17:46:39.515]                     muffled <- FALSE
[17:46:39.515]                     if (inherits(cond, "message")) {
[17:46:39.515]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:39.515]                       if (muffled) 
[17:46:39.515]                         invokeRestart("muffleMessage")
[17:46:39.515]                     }
[17:46:39.515]                     else if (inherits(cond, "warning")) {
[17:46:39.515]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:39.515]                       if (muffled) 
[17:46:39.515]                         invokeRestart("muffleWarning")
[17:46:39.515]                     }
[17:46:39.515]                     else if (inherits(cond, "condition")) {
[17:46:39.515]                       if (!is.null(pattern)) {
[17:46:39.515]                         computeRestarts <- base::computeRestarts
[17:46:39.515]                         grepl <- base::grepl
[17:46:39.515]                         restarts <- computeRestarts(cond)
[17:46:39.515]                         for (restart in restarts) {
[17:46:39.515]                           name <- restart$name
[17:46:39.515]                           if (is.null(name)) 
[17:46:39.515]                             next
[17:46:39.515]                           if (!grepl(pattern, name)) 
[17:46:39.515]                             next
[17:46:39.515]                           invokeRestart(restart)
[17:46:39.515]                           muffled <- TRUE
[17:46:39.515]                           break
[17:46:39.515]                         }
[17:46:39.515]                       }
[17:46:39.515]                     }
[17:46:39.515]                     invisible(muffled)
[17:46:39.515]                   }
[17:46:39.515]                   muffleCondition(cond)
[17:46:39.515]                 })
[17:46:39.515]             }))
[17:46:39.515]             future::FutureResult(value = ...future.value$value, 
[17:46:39.515]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.515]                   ...future.rng), globalenv = if (FALSE) 
[17:46:39.515]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:39.515]                     ...future.globalenv.names))
[17:46:39.515]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:39.515]         }, condition = base::local({
[17:46:39.515]             c <- base::c
[17:46:39.515]             inherits <- base::inherits
[17:46:39.515]             invokeRestart <- base::invokeRestart
[17:46:39.515]             length <- base::length
[17:46:39.515]             list <- base::list
[17:46:39.515]             seq.int <- base::seq.int
[17:46:39.515]             signalCondition <- base::signalCondition
[17:46:39.515]             sys.calls <- base::sys.calls
[17:46:39.515]             `[[` <- base::`[[`
[17:46:39.515]             `+` <- base::`+`
[17:46:39.515]             `<<-` <- base::`<<-`
[17:46:39.515]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:39.515]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:39.515]                   3L)]
[17:46:39.515]             }
[17:46:39.515]             function(cond) {
[17:46:39.515]                 is_error <- inherits(cond, "error")
[17:46:39.515]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:39.515]                   NULL)
[17:46:39.515]                 if (is_error) {
[17:46:39.515]                   sessionInformation <- function() {
[17:46:39.515]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:39.515]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:39.515]                       search = base::search(), system = base::Sys.info())
[17:46:39.515]                   }
[17:46:39.515]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.515]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:39.515]                     cond$call), session = sessionInformation(), 
[17:46:39.515]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:39.515]                   signalCondition(cond)
[17:46:39.515]                 }
[17:46:39.515]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:39.515]                 "immediateCondition"))) {
[17:46:39.515]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:39.515]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.515]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:39.515]                   if (TRUE && !signal) {
[17:46:39.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.515]                     {
[17:46:39.515]                       inherits <- base::inherits
[17:46:39.515]                       invokeRestart <- base::invokeRestart
[17:46:39.515]                       is.null <- base::is.null
[17:46:39.515]                       muffled <- FALSE
[17:46:39.515]                       if (inherits(cond, "message")) {
[17:46:39.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.515]                         if (muffled) 
[17:46:39.515]                           invokeRestart("muffleMessage")
[17:46:39.515]                       }
[17:46:39.515]                       else if (inherits(cond, "warning")) {
[17:46:39.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.515]                         if (muffled) 
[17:46:39.515]                           invokeRestart("muffleWarning")
[17:46:39.515]                       }
[17:46:39.515]                       else if (inherits(cond, "condition")) {
[17:46:39.515]                         if (!is.null(pattern)) {
[17:46:39.515]                           computeRestarts <- base::computeRestarts
[17:46:39.515]                           grepl <- base::grepl
[17:46:39.515]                           restarts <- computeRestarts(cond)
[17:46:39.515]                           for (restart in restarts) {
[17:46:39.515]                             name <- restart$name
[17:46:39.515]                             if (is.null(name)) 
[17:46:39.515]                               next
[17:46:39.515]                             if (!grepl(pattern, name)) 
[17:46:39.515]                               next
[17:46:39.515]                             invokeRestart(restart)
[17:46:39.515]                             muffled <- TRUE
[17:46:39.515]                             break
[17:46:39.515]                           }
[17:46:39.515]                         }
[17:46:39.515]                       }
[17:46:39.515]                       invisible(muffled)
[17:46:39.515]                     }
[17:46:39.515]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.515]                   }
[17:46:39.515]                 }
[17:46:39.515]                 else {
[17:46:39.515]                   if (TRUE) {
[17:46:39.515]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.515]                     {
[17:46:39.515]                       inherits <- base::inherits
[17:46:39.515]                       invokeRestart <- base::invokeRestart
[17:46:39.515]                       is.null <- base::is.null
[17:46:39.515]                       muffled <- FALSE
[17:46:39.515]                       if (inherits(cond, "message")) {
[17:46:39.515]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.515]                         if (muffled) 
[17:46:39.515]                           invokeRestart("muffleMessage")
[17:46:39.515]                       }
[17:46:39.515]                       else if (inherits(cond, "warning")) {
[17:46:39.515]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.515]                         if (muffled) 
[17:46:39.515]                           invokeRestart("muffleWarning")
[17:46:39.515]                       }
[17:46:39.515]                       else if (inherits(cond, "condition")) {
[17:46:39.515]                         if (!is.null(pattern)) {
[17:46:39.515]                           computeRestarts <- base::computeRestarts
[17:46:39.515]                           grepl <- base::grepl
[17:46:39.515]                           restarts <- computeRestarts(cond)
[17:46:39.515]                           for (restart in restarts) {
[17:46:39.515]                             name <- restart$name
[17:46:39.515]                             if (is.null(name)) 
[17:46:39.515]                               next
[17:46:39.515]                             if (!grepl(pattern, name)) 
[17:46:39.515]                               next
[17:46:39.515]                             invokeRestart(restart)
[17:46:39.515]                             muffled <- TRUE
[17:46:39.515]                             break
[17:46:39.515]                           }
[17:46:39.515]                         }
[17:46:39.515]                       }
[17:46:39.515]                       invisible(muffled)
[17:46:39.515]                     }
[17:46:39.515]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.515]                   }
[17:46:39.515]                 }
[17:46:39.515]             }
[17:46:39.515]         }))
[17:46:39.515]     }, error = function(ex) {
[17:46:39.515]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:39.515]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.515]                 ...future.rng), started = ...future.startTime, 
[17:46:39.515]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:39.515]             version = "1.8"), class = "FutureResult")
[17:46:39.515]     }, finally = {
[17:46:39.515]         if (!identical(...future.workdir, getwd())) 
[17:46:39.515]             setwd(...future.workdir)
[17:46:39.515]         {
[17:46:39.515]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:39.515]                 ...future.oldOptions$nwarnings <- NULL
[17:46:39.515]             }
[17:46:39.515]             base::options(...future.oldOptions)
[17:46:39.515]             if (.Platform$OS.type == "windows") {
[17:46:39.515]                 old_names <- names(...future.oldEnvVars)
[17:46:39.515]                 envs <- base::Sys.getenv()
[17:46:39.515]                 names <- names(envs)
[17:46:39.515]                 common <- intersect(names, old_names)
[17:46:39.515]                 added <- setdiff(names, old_names)
[17:46:39.515]                 removed <- setdiff(old_names, names)
[17:46:39.515]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:39.515]                   envs[common]]
[17:46:39.515]                 NAMES <- toupper(changed)
[17:46:39.515]                 args <- list()
[17:46:39.515]                 for (kk in seq_along(NAMES)) {
[17:46:39.515]                   name <- changed[[kk]]
[17:46:39.515]                   NAME <- NAMES[[kk]]
[17:46:39.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.515]                     next
[17:46:39.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.515]                 }
[17:46:39.515]                 NAMES <- toupper(added)
[17:46:39.515]                 for (kk in seq_along(NAMES)) {
[17:46:39.515]                   name <- added[[kk]]
[17:46:39.515]                   NAME <- NAMES[[kk]]
[17:46:39.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.515]                     next
[17:46:39.515]                   args[[name]] <- ""
[17:46:39.515]                 }
[17:46:39.515]                 NAMES <- toupper(removed)
[17:46:39.515]                 for (kk in seq_along(NAMES)) {
[17:46:39.515]                   name <- removed[[kk]]
[17:46:39.515]                   NAME <- NAMES[[kk]]
[17:46:39.515]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.515]                     next
[17:46:39.515]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.515]                 }
[17:46:39.515]                 if (length(args) > 0) 
[17:46:39.515]                   base::do.call(base::Sys.setenv, args = args)
[17:46:39.515]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:39.515]             }
[17:46:39.515]             else {
[17:46:39.515]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:39.515]             }
[17:46:39.515]             {
[17:46:39.515]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:39.515]                   0L) {
[17:46:39.515]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:39.515]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:39.515]                   base::options(opts)
[17:46:39.515]                 }
[17:46:39.515]                 {
[17:46:39.515]                   {
[17:46:39.515]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:39.515]                     NULL
[17:46:39.515]                   }
[17:46:39.515]                   options(future.plan = NULL)
[17:46:39.515]                   if (is.na(NA_character_)) 
[17:46:39.515]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.515]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:39.515]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:39.515]                     .init = FALSE)
[17:46:39.515]                 }
[17:46:39.515]             }
[17:46:39.515]         }
[17:46:39.515]     })
[17:46:39.515]     if (TRUE) {
[17:46:39.515]         base::sink(type = "output", split = FALSE)
[17:46:39.515]         if (TRUE) {
[17:46:39.515]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:39.515]         }
[17:46:39.515]         else {
[17:46:39.515]             ...future.result["stdout"] <- base::list(NULL)
[17:46:39.515]         }
[17:46:39.515]         base::close(...future.stdout)
[17:46:39.515]         ...future.stdout <- NULL
[17:46:39.515]     }
[17:46:39.515]     ...future.result$conditions <- ...future.conditions
[17:46:39.515]     ...future.result$finished <- base::Sys.time()
[17:46:39.515]     ...future.result
[17:46:39.515] }
[17:46:39.518] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:46:39.519] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:46:39.519] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:46:39.519] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:46:39.520] MultisessionFuture started
[17:46:39.520] - Launch lazy future ... done
[17:46:39.520] run() for ‘MultisessionFuture’ ... done
[17:46:39.520] result() for ClusterFuture ...
[17:46:39.520] receiveMessageFromWorker() for ClusterFuture ...
[17:46:39.521] - Validating connection of MultisessionFuture
[17:46:39.522] - received message: FutureResult
[17:46:39.522] - Received FutureResult
[17:46:39.523] - Erased future from FutureRegistry
[17:46:39.523] result() for ClusterFuture ...
[17:46:39.523] - result already collected: FutureResult
[17:46:39.523] result() for ClusterFuture ... done
[17:46:39.523] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:39.523] result() for ClusterFuture ... done
[17:46:39.523] result() for ClusterFuture ...
[17:46:39.524] - result already collected: FutureResult
[17:46:39.524] result() for ClusterFuture ... done
[17:46:39.524] getGlobalsAndPackages() ...
[17:46:39.524] Searching for globals...
[17:46:39.525] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:39.525] Searching for globals ... DONE
[17:46:39.525] Resolving globals: FALSE
[17:46:39.526] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:39.526] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:39.526] - globals: [1] ‘a’
[17:46:39.527] 
[17:46:39.527] getGlobalsAndPackages() ... DONE
[17:46:39.527] run() for ‘Future’ ...
[17:46:39.527] - state: ‘created’
[17:46:39.527] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:39.541] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:39.541] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:39.542]   - Field: ‘node’
[17:46:39.542]   - Field: ‘label’
[17:46:39.542]   - Field: ‘local’
[17:46:39.542]   - Field: ‘owner’
[17:46:39.542]   - Field: ‘envir’
[17:46:39.542]   - Field: ‘workers’
[17:46:39.542]   - Field: ‘packages’
[17:46:39.542]   - Field: ‘gc’
[17:46:39.542]   - Field: ‘conditions’
[17:46:39.542]   - Field: ‘persistent’
[17:46:39.542]   - Field: ‘expr’
[17:46:39.543]   - Field: ‘uuid’
[17:46:39.543]   - Field: ‘seed’
[17:46:39.543]   - Field: ‘version’
[17:46:39.543]   - Field: ‘result’
[17:46:39.543]   - Field: ‘asynchronous’
[17:46:39.543]   - Field: ‘calls’
[17:46:39.543]   - Field: ‘globals’
[17:46:39.543]   - Field: ‘stdout’
[17:46:39.543]   - Field: ‘earlySignal’
[17:46:39.543]   - Field: ‘lazy’
[17:46:39.543]   - Field: ‘state’
[17:46:39.544] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:39.544] - Launch lazy future ...
[17:46:39.544] Packages needed by the future expression (n = 0): <none>
[17:46:39.544] Packages needed by future strategies (n = 0): <none>
[17:46:39.544] {
[17:46:39.544]     {
[17:46:39.544]         {
[17:46:39.544]             ...future.startTime <- base::Sys.time()
[17:46:39.544]             {
[17:46:39.544]                 {
[17:46:39.544]                   {
[17:46:39.544]                     {
[17:46:39.544]                       base::local({
[17:46:39.544]                         has_future <- base::requireNamespace("future", 
[17:46:39.544]                           quietly = TRUE)
[17:46:39.544]                         if (has_future) {
[17:46:39.544]                           ns <- base::getNamespace("future")
[17:46:39.544]                           version <- ns[[".package"]][["version"]]
[17:46:39.544]                           if (is.null(version)) 
[17:46:39.544]                             version <- utils::packageVersion("future")
[17:46:39.544]                         }
[17:46:39.544]                         else {
[17:46:39.544]                           version <- NULL
[17:46:39.544]                         }
[17:46:39.544]                         if (!has_future || version < "1.8.0") {
[17:46:39.544]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:39.544]                             "", base::R.version$version.string), 
[17:46:39.544]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:39.544]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:39.544]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:39.544]                               "release", "version")], collapse = " "), 
[17:46:39.544]                             hostname = base::Sys.info()[["nodename"]])
[17:46:39.544]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:39.544]                             info)
[17:46:39.544]                           info <- base::paste(info, collapse = "; ")
[17:46:39.544]                           if (!has_future) {
[17:46:39.544]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:39.544]                               info)
[17:46:39.544]                           }
[17:46:39.544]                           else {
[17:46:39.544]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:39.544]                               info, version)
[17:46:39.544]                           }
[17:46:39.544]                           base::stop(msg)
[17:46:39.544]                         }
[17:46:39.544]                       })
[17:46:39.544]                     }
[17:46:39.544]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:39.544]                     base::options(mc.cores = 1L)
[17:46:39.544]                   }
[17:46:39.544]                   ...future.strategy.old <- future::plan("list")
[17:46:39.544]                   options(future.plan = NULL)
[17:46:39.544]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.544]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:39.544]                 }
[17:46:39.544]                 ...future.workdir <- getwd()
[17:46:39.544]             }
[17:46:39.544]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:39.544]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:39.544]         }
[17:46:39.544]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:39.544]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:39.544]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:39.544]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:39.544]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:39.544]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:39.544]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:39.544]             base::names(...future.oldOptions))
[17:46:39.544]     }
[17:46:39.544]     if (FALSE) {
[17:46:39.544]     }
[17:46:39.544]     else {
[17:46:39.544]         if (TRUE) {
[17:46:39.544]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:39.544]                 open = "w")
[17:46:39.544]         }
[17:46:39.544]         else {
[17:46:39.544]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:39.544]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:39.544]         }
[17:46:39.544]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:39.544]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:39.544]             base::sink(type = "output", split = FALSE)
[17:46:39.544]             base::close(...future.stdout)
[17:46:39.544]         }, add = TRUE)
[17:46:39.544]     }
[17:46:39.544]     ...future.frame <- base::sys.nframe()
[17:46:39.544]     ...future.conditions <- base::list()
[17:46:39.544]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:39.544]     if (FALSE) {
[17:46:39.544]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:39.544]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:39.544]     }
[17:46:39.544]     ...future.result <- base::tryCatch({
[17:46:39.544]         base::withCallingHandlers({
[17:46:39.544]             ...future.value <- base::withVisible(base::local({
[17:46:39.544]                 ...future.makeSendCondition <- base::local({
[17:46:39.544]                   sendCondition <- NULL
[17:46:39.544]                   function(frame = 1L) {
[17:46:39.544]                     if (is.function(sendCondition)) 
[17:46:39.544]                       return(sendCondition)
[17:46:39.544]                     ns <- getNamespace("parallel")
[17:46:39.544]                     if (exists("sendData", mode = "function", 
[17:46:39.544]                       envir = ns)) {
[17:46:39.544]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:39.544]                         envir = ns)
[17:46:39.544]                       envir <- sys.frame(frame)
[17:46:39.544]                       master <- NULL
[17:46:39.544]                       while (!identical(envir, .GlobalEnv) && 
[17:46:39.544]                         !identical(envir, emptyenv())) {
[17:46:39.544]                         if (exists("master", mode = "list", envir = envir, 
[17:46:39.544]                           inherits = FALSE)) {
[17:46:39.544]                           master <- get("master", mode = "list", 
[17:46:39.544]                             envir = envir, inherits = FALSE)
[17:46:39.544]                           if (inherits(master, c("SOCKnode", 
[17:46:39.544]                             "SOCK0node"))) {
[17:46:39.544]                             sendCondition <<- function(cond) {
[17:46:39.544]                               data <- list(type = "VALUE", value = cond, 
[17:46:39.544]                                 success = TRUE)
[17:46:39.544]                               parallel_sendData(master, data)
[17:46:39.544]                             }
[17:46:39.544]                             return(sendCondition)
[17:46:39.544]                           }
[17:46:39.544]                         }
[17:46:39.544]                         frame <- frame + 1L
[17:46:39.544]                         envir <- sys.frame(frame)
[17:46:39.544]                       }
[17:46:39.544]                     }
[17:46:39.544]                     sendCondition <<- function(cond) NULL
[17:46:39.544]                   }
[17:46:39.544]                 })
[17:46:39.544]                 withCallingHandlers({
[17:46:39.544]                   {
[17:46:39.544]                     2 * a
[17:46:39.544]                   }
[17:46:39.544]                 }, immediateCondition = function(cond) {
[17:46:39.544]                   sendCondition <- ...future.makeSendCondition()
[17:46:39.544]                   sendCondition(cond)
[17:46:39.544]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.544]                   {
[17:46:39.544]                     inherits <- base::inherits
[17:46:39.544]                     invokeRestart <- base::invokeRestart
[17:46:39.544]                     is.null <- base::is.null
[17:46:39.544]                     muffled <- FALSE
[17:46:39.544]                     if (inherits(cond, "message")) {
[17:46:39.544]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:39.544]                       if (muffled) 
[17:46:39.544]                         invokeRestart("muffleMessage")
[17:46:39.544]                     }
[17:46:39.544]                     else if (inherits(cond, "warning")) {
[17:46:39.544]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:39.544]                       if (muffled) 
[17:46:39.544]                         invokeRestart("muffleWarning")
[17:46:39.544]                     }
[17:46:39.544]                     else if (inherits(cond, "condition")) {
[17:46:39.544]                       if (!is.null(pattern)) {
[17:46:39.544]                         computeRestarts <- base::computeRestarts
[17:46:39.544]                         grepl <- base::grepl
[17:46:39.544]                         restarts <- computeRestarts(cond)
[17:46:39.544]                         for (restart in restarts) {
[17:46:39.544]                           name <- restart$name
[17:46:39.544]                           if (is.null(name)) 
[17:46:39.544]                             next
[17:46:39.544]                           if (!grepl(pattern, name)) 
[17:46:39.544]                             next
[17:46:39.544]                           invokeRestart(restart)
[17:46:39.544]                           muffled <- TRUE
[17:46:39.544]                           break
[17:46:39.544]                         }
[17:46:39.544]                       }
[17:46:39.544]                     }
[17:46:39.544]                     invisible(muffled)
[17:46:39.544]                   }
[17:46:39.544]                   muffleCondition(cond)
[17:46:39.544]                 })
[17:46:39.544]             }))
[17:46:39.544]             future::FutureResult(value = ...future.value$value, 
[17:46:39.544]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.544]                   ...future.rng), globalenv = if (FALSE) 
[17:46:39.544]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:39.544]                     ...future.globalenv.names))
[17:46:39.544]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:39.544]         }, condition = base::local({
[17:46:39.544]             c <- base::c
[17:46:39.544]             inherits <- base::inherits
[17:46:39.544]             invokeRestart <- base::invokeRestart
[17:46:39.544]             length <- base::length
[17:46:39.544]             list <- base::list
[17:46:39.544]             seq.int <- base::seq.int
[17:46:39.544]             signalCondition <- base::signalCondition
[17:46:39.544]             sys.calls <- base::sys.calls
[17:46:39.544]             `[[` <- base::`[[`
[17:46:39.544]             `+` <- base::`+`
[17:46:39.544]             `<<-` <- base::`<<-`
[17:46:39.544]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:39.544]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:39.544]                   3L)]
[17:46:39.544]             }
[17:46:39.544]             function(cond) {
[17:46:39.544]                 is_error <- inherits(cond, "error")
[17:46:39.544]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:39.544]                   NULL)
[17:46:39.544]                 if (is_error) {
[17:46:39.544]                   sessionInformation <- function() {
[17:46:39.544]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:39.544]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:39.544]                       search = base::search(), system = base::Sys.info())
[17:46:39.544]                   }
[17:46:39.544]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.544]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:39.544]                     cond$call), session = sessionInformation(), 
[17:46:39.544]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:39.544]                   signalCondition(cond)
[17:46:39.544]                 }
[17:46:39.544]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:39.544]                 "immediateCondition"))) {
[17:46:39.544]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:39.544]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.544]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:39.544]                   if (TRUE && !signal) {
[17:46:39.544]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.544]                     {
[17:46:39.544]                       inherits <- base::inherits
[17:46:39.544]                       invokeRestart <- base::invokeRestart
[17:46:39.544]                       is.null <- base::is.null
[17:46:39.544]                       muffled <- FALSE
[17:46:39.544]                       if (inherits(cond, "message")) {
[17:46:39.544]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.544]                         if (muffled) 
[17:46:39.544]                           invokeRestart("muffleMessage")
[17:46:39.544]                       }
[17:46:39.544]                       else if (inherits(cond, "warning")) {
[17:46:39.544]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.544]                         if (muffled) 
[17:46:39.544]                           invokeRestart("muffleWarning")
[17:46:39.544]                       }
[17:46:39.544]                       else if (inherits(cond, "condition")) {
[17:46:39.544]                         if (!is.null(pattern)) {
[17:46:39.544]                           computeRestarts <- base::computeRestarts
[17:46:39.544]                           grepl <- base::grepl
[17:46:39.544]                           restarts <- computeRestarts(cond)
[17:46:39.544]                           for (restart in restarts) {
[17:46:39.544]                             name <- restart$name
[17:46:39.544]                             if (is.null(name)) 
[17:46:39.544]                               next
[17:46:39.544]                             if (!grepl(pattern, name)) 
[17:46:39.544]                               next
[17:46:39.544]                             invokeRestart(restart)
[17:46:39.544]                             muffled <- TRUE
[17:46:39.544]                             break
[17:46:39.544]                           }
[17:46:39.544]                         }
[17:46:39.544]                       }
[17:46:39.544]                       invisible(muffled)
[17:46:39.544]                     }
[17:46:39.544]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.544]                   }
[17:46:39.544]                 }
[17:46:39.544]                 else {
[17:46:39.544]                   if (TRUE) {
[17:46:39.544]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.544]                     {
[17:46:39.544]                       inherits <- base::inherits
[17:46:39.544]                       invokeRestart <- base::invokeRestart
[17:46:39.544]                       is.null <- base::is.null
[17:46:39.544]                       muffled <- FALSE
[17:46:39.544]                       if (inherits(cond, "message")) {
[17:46:39.544]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.544]                         if (muffled) 
[17:46:39.544]                           invokeRestart("muffleMessage")
[17:46:39.544]                       }
[17:46:39.544]                       else if (inherits(cond, "warning")) {
[17:46:39.544]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.544]                         if (muffled) 
[17:46:39.544]                           invokeRestart("muffleWarning")
[17:46:39.544]                       }
[17:46:39.544]                       else if (inherits(cond, "condition")) {
[17:46:39.544]                         if (!is.null(pattern)) {
[17:46:39.544]                           computeRestarts <- base::computeRestarts
[17:46:39.544]                           grepl <- base::grepl
[17:46:39.544]                           restarts <- computeRestarts(cond)
[17:46:39.544]                           for (restart in restarts) {
[17:46:39.544]                             name <- restart$name
[17:46:39.544]                             if (is.null(name)) 
[17:46:39.544]                               next
[17:46:39.544]                             if (!grepl(pattern, name)) 
[17:46:39.544]                               next
[17:46:39.544]                             invokeRestart(restart)
[17:46:39.544]                             muffled <- TRUE
[17:46:39.544]                             break
[17:46:39.544]                           }
[17:46:39.544]                         }
[17:46:39.544]                       }
[17:46:39.544]                       invisible(muffled)
[17:46:39.544]                     }
[17:46:39.544]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.544]                   }
[17:46:39.544]                 }
[17:46:39.544]             }
[17:46:39.544]         }))
[17:46:39.544]     }, error = function(ex) {
[17:46:39.544]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:39.544]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.544]                 ...future.rng), started = ...future.startTime, 
[17:46:39.544]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:39.544]             version = "1.8"), class = "FutureResult")
[17:46:39.544]     }, finally = {
[17:46:39.544]         if (!identical(...future.workdir, getwd())) 
[17:46:39.544]             setwd(...future.workdir)
[17:46:39.544]         {
[17:46:39.544]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:39.544]                 ...future.oldOptions$nwarnings <- NULL
[17:46:39.544]             }
[17:46:39.544]             base::options(...future.oldOptions)
[17:46:39.544]             if (.Platform$OS.type == "windows") {
[17:46:39.544]                 old_names <- names(...future.oldEnvVars)
[17:46:39.544]                 envs <- base::Sys.getenv()
[17:46:39.544]                 names <- names(envs)
[17:46:39.544]                 common <- intersect(names, old_names)
[17:46:39.544]                 added <- setdiff(names, old_names)
[17:46:39.544]                 removed <- setdiff(old_names, names)
[17:46:39.544]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:39.544]                   envs[common]]
[17:46:39.544]                 NAMES <- toupper(changed)
[17:46:39.544]                 args <- list()
[17:46:39.544]                 for (kk in seq_along(NAMES)) {
[17:46:39.544]                   name <- changed[[kk]]
[17:46:39.544]                   NAME <- NAMES[[kk]]
[17:46:39.544]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.544]                     next
[17:46:39.544]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.544]                 }
[17:46:39.544]                 NAMES <- toupper(added)
[17:46:39.544]                 for (kk in seq_along(NAMES)) {
[17:46:39.544]                   name <- added[[kk]]
[17:46:39.544]                   NAME <- NAMES[[kk]]
[17:46:39.544]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.544]                     next
[17:46:39.544]                   args[[name]] <- ""
[17:46:39.544]                 }
[17:46:39.544]                 NAMES <- toupper(removed)
[17:46:39.544]                 for (kk in seq_along(NAMES)) {
[17:46:39.544]                   name <- removed[[kk]]
[17:46:39.544]                   NAME <- NAMES[[kk]]
[17:46:39.544]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.544]                     next
[17:46:39.544]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.544]                 }
[17:46:39.544]                 if (length(args) > 0) 
[17:46:39.544]                   base::do.call(base::Sys.setenv, args = args)
[17:46:39.544]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:39.544]             }
[17:46:39.544]             else {
[17:46:39.544]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:39.544]             }
[17:46:39.544]             {
[17:46:39.544]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:39.544]                   0L) {
[17:46:39.544]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:39.544]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:39.544]                   base::options(opts)
[17:46:39.544]                 }
[17:46:39.544]                 {
[17:46:39.544]                   {
[17:46:39.544]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:39.544]                     NULL
[17:46:39.544]                   }
[17:46:39.544]                   options(future.plan = NULL)
[17:46:39.544]                   if (is.na(NA_character_)) 
[17:46:39.544]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.544]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:39.544]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:39.544]                     .init = FALSE)
[17:46:39.544]                 }
[17:46:39.544]             }
[17:46:39.544]         }
[17:46:39.544]     })
[17:46:39.544]     if (TRUE) {
[17:46:39.544]         base::sink(type = "output", split = FALSE)
[17:46:39.544]         if (TRUE) {
[17:46:39.544]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:39.544]         }
[17:46:39.544]         else {
[17:46:39.544]             ...future.result["stdout"] <- base::list(NULL)
[17:46:39.544]         }
[17:46:39.544]         base::close(...future.stdout)
[17:46:39.544]         ...future.stdout <- NULL
[17:46:39.544]     }
[17:46:39.544]     ...future.result$conditions <- ...future.conditions
[17:46:39.544]     ...future.result$finished <- base::Sys.time()
[17:46:39.544]     ...future.result
[17:46:39.544] }
[17:46:39.547] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:46:39.547] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:46:39.547] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:46:39.548] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:46:39.549] MultisessionFuture started
[17:46:39.549] - Launch lazy future ... done
[17:46:39.549] run() for ‘MultisessionFuture’ ... done
[17:46:39.549] result() for ClusterFuture ...
[17:46:39.549] receiveMessageFromWorker() for ClusterFuture ...
[17:46:39.549] - Validating connection of MultisessionFuture
[17:46:39.551] - received message: FutureResult
[17:46:39.551] - Received FutureResult
[17:46:39.551] - Erased future from FutureRegistry
[17:46:39.551] result() for ClusterFuture ...
[17:46:39.551] - result already collected: FutureResult
[17:46:39.552] result() for ClusterFuture ... done
[17:46:39.552] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:39.552] result() for ClusterFuture ... done
[17:46:39.552] result() for ClusterFuture ...
[17:46:39.552] - result already collected: FutureResult
[17:46:39.552] result() for ClusterFuture ... done
[17:46:39.552] getGlobalsAndPackages() ...
[17:46:39.553] Searching for globals...
[17:46:39.554] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:39.554] Searching for globals ... DONE
[17:46:39.554] Resolving globals: FALSE
[17:46:39.554] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:39.555] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:39.555] - globals: [1] ‘a’
[17:46:39.555] 
[17:46:39.555] getGlobalsAndPackages() ... DONE
[17:46:39.556] run() for ‘Future’ ...
[17:46:39.556] - state: ‘created’
[17:46:39.556] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:39.570] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:39.570] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:39.570]   - Field: ‘node’
[17:46:39.570]   - Field: ‘label’
[17:46:39.570]   - Field: ‘local’
[17:46:39.570]   - Field: ‘owner’
[17:46:39.571]   - Field: ‘envir’
[17:46:39.571]   - Field: ‘workers’
[17:46:39.571]   - Field: ‘packages’
[17:46:39.571]   - Field: ‘gc’
[17:46:39.571]   - Field: ‘conditions’
[17:46:39.571]   - Field: ‘persistent’
[17:46:39.571]   - Field: ‘expr’
[17:46:39.571]   - Field: ‘uuid’
[17:46:39.571]   - Field: ‘seed’
[17:46:39.571]   - Field: ‘version’
[17:46:39.572]   - Field: ‘result’
[17:46:39.572]   - Field: ‘asynchronous’
[17:46:39.572]   - Field: ‘calls’
[17:46:39.572]   - Field: ‘globals’
[17:46:39.572]   - Field: ‘stdout’
[17:46:39.572]   - Field: ‘earlySignal’
[17:46:39.572]   - Field: ‘lazy’
[17:46:39.572]   - Field: ‘state’
[17:46:39.572] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:39.572] - Launch lazy future ...
[17:46:39.573] Packages needed by the future expression (n = 0): <none>
[17:46:39.573] Packages needed by future strategies (n = 0): <none>
[17:46:39.573] {
[17:46:39.573]     {
[17:46:39.573]         {
[17:46:39.573]             ...future.startTime <- base::Sys.time()
[17:46:39.573]             {
[17:46:39.573]                 {
[17:46:39.573]                   {
[17:46:39.573]                     {
[17:46:39.573]                       base::local({
[17:46:39.573]                         has_future <- base::requireNamespace("future", 
[17:46:39.573]                           quietly = TRUE)
[17:46:39.573]                         if (has_future) {
[17:46:39.573]                           ns <- base::getNamespace("future")
[17:46:39.573]                           version <- ns[[".package"]][["version"]]
[17:46:39.573]                           if (is.null(version)) 
[17:46:39.573]                             version <- utils::packageVersion("future")
[17:46:39.573]                         }
[17:46:39.573]                         else {
[17:46:39.573]                           version <- NULL
[17:46:39.573]                         }
[17:46:39.573]                         if (!has_future || version < "1.8.0") {
[17:46:39.573]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:39.573]                             "", base::R.version$version.string), 
[17:46:39.573]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:39.573]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:39.573]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:39.573]                               "release", "version")], collapse = " "), 
[17:46:39.573]                             hostname = base::Sys.info()[["nodename"]])
[17:46:39.573]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:39.573]                             info)
[17:46:39.573]                           info <- base::paste(info, collapse = "; ")
[17:46:39.573]                           if (!has_future) {
[17:46:39.573]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:39.573]                               info)
[17:46:39.573]                           }
[17:46:39.573]                           else {
[17:46:39.573]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:39.573]                               info, version)
[17:46:39.573]                           }
[17:46:39.573]                           base::stop(msg)
[17:46:39.573]                         }
[17:46:39.573]                       })
[17:46:39.573]                     }
[17:46:39.573]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:39.573]                     base::options(mc.cores = 1L)
[17:46:39.573]                   }
[17:46:39.573]                   ...future.strategy.old <- future::plan("list")
[17:46:39.573]                   options(future.plan = NULL)
[17:46:39.573]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.573]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:39.573]                 }
[17:46:39.573]                 ...future.workdir <- getwd()
[17:46:39.573]             }
[17:46:39.573]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:39.573]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:39.573]         }
[17:46:39.573]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:39.573]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:39.573]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:39.573]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:39.573]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:39.573]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:39.573]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:39.573]             base::names(...future.oldOptions))
[17:46:39.573]     }
[17:46:39.573]     if (FALSE) {
[17:46:39.573]     }
[17:46:39.573]     else {
[17:46:39.573]         if (TRUE) {
[17:46:39.573]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:39.573]                 open = "w")
[17:46:39.573]         }
[17:46:39.573]         else {
[17:46:39.573]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:39.573]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:39.573]         }
[17:46:39.573]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:39.573]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:39.573]             base::sink(type = "output", split = FALSE)
[17:46:39.573]             base::close(...future.stdout)
[17:46:39.573]         }, add = TRUE)
[17:46:39.573]     }
[17:46:39.573]     ...future.frame <- base::sys.nframe()
[17:46:39.573]     ...future.conditions <- base::list()
[17:46:39.573]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:39.573]     if (FALSE) {
[17:46:39.573]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:39.573]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:39.573]     }
[17:46:39.573]     ...future.result <- base::tryCatch({
[17:46:39.573]         base::withCallingHandlers({
[17:46:39.573]             ...future.value <- base::withVisible(base::local({
[17:46:39.573]                 ...future.makeSendCondition <- base::local({
[17:46:39.573]                   sendCondition <- NULL
[17:46:39.573]                   function(frame = 1L) {
[17:46:39.573]                     if (is.function(sendCondition)) 
[17:46:39.573]                       return(sendCondition)
[17:46:39.573]                     ns <- getNamespace("parallel")
[17:46:39.573]                     if (exists("sendData", mode = "function", 
[17:46:39.573]                       envir = ns)) {
[17:46:39.573]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:39.573]                         envir = ns)
[17:46:39.573]                       envir <- sys.frame(frame)
[17:46:39.573]                       master <- NULL
[17:46:39.573]                       while (!identical(envir, .GlobalEnv) && 
[17:46:39.573]                         !identical(envir, emptyenv())) {
[17:46:39.573]                         if (exists("master", mode = "list", envir = envir, 
[17:46:39.573]                           inherits = FALSE)) {
[17:46:39.573]                           master <- get("master", mode = "list", 
[17:46:39.573]                             envir = envir, inherits = FALSE)
[17:46:39.573]                           if (inherits(master, c("SOCKnode", 
[17:46:39.573]                             "SOCK0node"))) {
[17:46:39.573]                             sendCondition <<- function(cond) {
[17:46:39.573]                               data <- list(type = "VALUE", value = cond, 
[17:46:39.573]                                 success = TRUE)
[17:46:39.573]                               parallel_sendData(master, data)
[17:46:39.573]                             }
[17:46:39.573]                             return(sendCondition)
[17:46:39.573]                           }
[17:46:39.573]                         }
[17:46:39.573]                         frame <- frame + 1L
[17:46:39.573]                         envir <- sys.frame(frame)
[17:46:39.573]                       }
[17:46:39.573]                     }
[17:46:39.573]                     sendCondition <<- function(cond) NULL
[17:46:39.573]                   }
[17:46:39.573]                 })
[17:46:39.573]                 withCallingHandlers({
[17:46:39.573]                   {
[17:46:39.573]                     2 * a
[17:46:39.573]                   }
[17:46:39.573]                 }, immediateCondition = function(cond) {
[17:46:39.573]                   sendCondition <- ...future.makeSendCondition()
[17:46:39.573]                   sendCondition(cond)
[17:46:39.573]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.573]                   {
[17:46:39.573]                     inherits <- base::inherits
[17:46:39.573]                     invokeRestart <- base::invokeRestart
[17:46:39.573]                     is.null <- base::is.null
[17:46:39.573]                     muffled <- FALSE
[17:46:39.573]                     if (inherits(cond, "message")) {
[17:46:39.573]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:39.573]                       if (muffled) 
[17:46:39.573]                         invokeRestart("muffleMessage")
[17:46:39.573]                     }
[17:46:39.573]                     else if (inherits(cond, "warning")) {
[17:46:39.573]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:39.573]                       if (muffled) 
[17:46:39.573]                         invokeRestart("muffleWarning")
[17:46:39.573]                     }
[17:46:39.573]                     else if (inherits(cond, "condition")) {
[17:46:39.573]                       if (!is.null(pattern)) {
[17:46:39.573]                         computeRestarts <- base::computeRestarts
[17:46:39.573]                         grepl <- base::grepl
[17:46:39.573]                         restarts <- computeRestarts(cond)
[17:46:39.573]                         for (restart in restarts) {
[17:46:39.573]                           name <- restart$name
[17:46:39.573]                           if (is.null(name)) 
[17:46:39.573]                             next
[17:46:39.573]                           if (!grepl(pattern, name)) 
[17:46:39.573]                             next
[17:46:39.573]                           invokeRestart(restart)
[17:46:39.573]                           muffled <- TRUE
[17:46:39.573]                           break
[17:46:39.573]                         }
[17:46:39.573]                       }
[17:46:39.573]                     }
[17:46:39.573]                     invisible(muffled)
[17:46:39.573]                   }
[17:46:39.573]                   muffleCondition(cond)
[17:46:39.573]                 })
[17:46:39.573]             }))
[17:46:39.573]             future::FutureResult(value = ...future.value$value, 
[17:46:39.573]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.573]                   ...future.rng), globalenv = if (FALSE) 
[17:46:39.573]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:39.573]                     ...future.globalenv.names))
[17:46:39.573]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:39.573]         }, condition = base::local({
[17:46:39.573]             c <- base::c
[17:46:39.573]             inherits <- base::inherits
[17:46:39.573]             invokeRestart <- base::invokeRestart
[17:46:39.573]             length <- base::length
[17:46:39.573]             list <- base::list
[17:46:39.573]             seq.int <- base::seq.int
[17:46:39.573]             signalCondition <- base::signalCondition
[17:46:39.573]             sys.calls <- base::sys.calls
[17:46:39.573]             `[[` <- base::`[[`
[17:46:39.573]             `+` <- base::`+`
[17:46:39.573]             `<<-` <- base::`<<-`
[17:46:39.573]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:39.573]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:39.573]                   3L)]
[17:46:39.573]             }
[17:46:39.573]             function(cond) {
[17:46:39.573]                 is_error <- inherits(cond, "error")
[17:46:39.573]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:39.573]                   NULL)
[17:46:39.573]                 if (is_error) {
[17:46:39.573]                   sessionInformation <- function() {
[17:46:39.573]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:39.573]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:39.573]                       search = base::search(), system = base::Sys.info())
[17:46:39.573]                   }
[17:46:39.573]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.573]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:39.573]                     cond$call), session = sessionInformation(), 
[17:46:39.573]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:39.573]                   signalCondition(cond)
[17:46:39.573]                 }
[17:46:39.573]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:39.573]                 "immediateCondition"))) {
[17:46:39.573]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:39.573]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.573]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:39.573]                   if (TRUE && !signal) {
[17:46:39.573]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.573]                     {
[17:46:39.573]                       inherits <- base::inherits
[17:46:39.573]                       invokeRestart <- base::invokeRestart
[17:46:39.573]                       is.null <- base::is.null
[17:46:39.573]                       muffled <- FALSE
[17:46:39.573]                       if (inherits(cond, "message")) {
[17:46:39.573]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.573]                         if (muffled) 
[17:46:39.573]                           invokeRestart("muffleMessage")
[17:46:39.573]                       }
[17:46:39.573]                       else if (inherits(cond, "warning")) {
[17:46:39.573]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.573]                         if (muffled) 
[17:46:39.573]                           invokeRestart("muffleWarning")
[17:46:39.573]                       }
[17:46:39.573]                       else if (inherits(cond, "condition")) {
[17:46:39.573]                         if (!is.null(pattern)) {
[17:46:39.573]                           computeRestarts <- base::computeRestarts
[17:46:39.573]                           grepl <- base::grepl
[17:46:39.573]                           restarts <- computeRestarts(cond)
[17:46:39.573]                           for (restart in restarts) {
[17:46:39.573]                             name <- restart$name
[17:46:39.573]                             if (is.null(name)) 
[17:46:39.573]                               next
[17:46:39.573]                             if (!grepl(pattern, name)) 
[17:46:39.573]                               next
[17:46:39.573]                             invokeRestart(restart)
[17:46:39.573]                             muffled <- TRUE
[17:46:39.573]                             break
[17:46:39.573]                           }
[17:46:39.573]                         }
[17:46:39.573]                       }
[17:46:39.573]                       invisible(muffled)
[17:46:39.573]                     }
[17:46:39.573]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.573]                   }
[17:46:39.573]                 }
[17:46:39.573]                 else {
[17:46:39.573]                   if (TRUE) {
[17:46:39.573]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.573]                     {
[17:46:39.573]                       inherits <- base::inherits
[17:46:39.573]                       invokeRestart <- base::invokeRestart
[17:46:39.573]                       is.null <- base::is.null
[17:46:39.573]                       muffled <- FALSE
[17:46:39.573]                       if (inherits(cond, "message")) {
[17:46:39.573]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.573]                         if (muffled) 
[17:46:39.573]                           invokeRestart("muffleMessage")
[17:46:39.573]                       }
[17:46:39.573]                       else if (inherits(cond, "warning")) {
[17:46:39.573]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.573]                         if (muffled) 
[17:46:39.573]                           invokeRestart("muffleWarning")
[17:46:39.573]                       }
[17:46:39.573]                       else if (inherits(cond, "condition")) {
[17:46:39.573]                         if (!is.null(pattern)) {
[17:46:39.573]                           computeRestarts <- base::computeRestarts
[17:46:39.573]                           grepl <- base::grepl
[17:46:39.573]                           restarts <- computeRestarts(cond)
[17:46:39.573]                           for (restart in restarts) {
[17:46:39.573]                             name <- restart$name
[17:46:39.573]                             if (is.null(name)) 
[17:46:39.573]                               next
[17:46:39.573]                             if (!grepl(pattern, name)) 
[17:46:39.573]                               next
[17:46:39.573]                             invokeRestart(restart)
[17:46:39.573]                             muffled <- TRUE
[17:46:39.573]                             break
[17:46:39.573]                           }
[17:46:39.573]                         }
[17:46:39.573]                       }
[17:46:39.573]                       invisible(muffled)
[17:46:39.573]                     }
[17:46:39.573]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.573]                   }
[17:46:39.573]                 }
[17:46:39.573]             }
[17:46:39.573]         }))
[17:46:39.573]     }, error = function(ex) {
[17:46:39.573]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:39.573]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.573]                 ...future.rng), started = ...future.startTime, 
[17:46:39.573]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:39.573]             version = "1.8"), class = "FutureResult")
[17:46:39.573]     }, finally = {
[17:46:39.573]         if (!identical(...future.workdir, getwd())) 
[17:46:39.573]             setwd(...future.workdir)
[17:46:39.573]         {
[17:46:39.573]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:39.573]                 ...future.oldOptions$nwarnings <- NULL
[17:46:39.573]             }
[17:46:39.573]             base::options(...future.oldOptions)
[17:46:39.573]             if (.Platform$OS.type == "windows") {
[17:46:39.573]                 old_names <- names(...future.oldEnvVars)
[17:46:39.573]                 envs <- base::Sys.getenv()
[17:46:39.573]                 names <- names(envs)
[17:46:39.573]                 common <- intersect(names, old_names)
[17:46:39.573]                 added <- setdiff(names, old_names)
[17:46:39.573]                 removed <- setdiff(old_names, names)
[17:46:39.573]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:39.573]                   envs[common]]
[17:46:39.573]                 NAMES <- toupper(changed)
[17:46:39.573]                 args <- list()
[17:46:39.573]                 for (kk in seq_along(NAMES)) {
[17:46:39.573]                   name <- changed[[kk]]
[17:46:39.573]                   NAME <- NAMES[[kk]]
[17:46:39.573]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.573]                     next
[17:46:39.573]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.573]                 }
[17:46:39.573]                 NAMES <- toupper(added)
[17:46:39.573]                 for (kk in seq_along(NAMES)) {
[17:46:39.573]                   name <- added[[kk]]
[17:46:39.573]                   NAME <- NAMES[[kk]]
[17:46:39.573]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.573]                     next
[17:46:39.573]                   args[[name]] <- ""
[17:46:39.573]                 }
[17:46:39.573]                 NAMES <- toupper(removed)
[17:46:39.573]                 for (kk in seq_along(NAMES)) {
[17:46:39.573]                   name <- removed[[kk]]
[17:46:39.573]                   NAME <- NAMES[[kk]]
[17:46:39.573]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.573]                     next
[17:46:39.573]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.573]                 }
[17:46:39.573]                 if (length(args) > 0) 
[17:46:39.573]                   base::do.call(base::Sys.setenv, args = args)
[17:46:39.573]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:39.573]             }
[17:46:39.573]             else {
[17:46:39.573]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:39.573]             }
[17:46:39.573]             {
[17:46:39.573]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:39.573]                   0L) {
[17:46:39.573]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:39.573]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:39.573]                   base::options(opts)
[17:46:39.573]                 }
[17:46:39.573]                 {
[17:46:39.573]                   {
[17:46:39.573]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:39.573]                     NULL
[17:46:39.573]                   }
[17:46:39.573]                   options(future.plan = NULL)
[17:46:39.573]                   if (is.na(NA_character_)) 
[17:46:39.573]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.573]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:39.573]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:39.573]                     .init = FALSE)
[17:46:39.573]                 }
[17:46:39.573]             }
[17:46:39.573]         }
[17:46:39.573]     })
[17:46:39.573]     if (TRUE) {
[17:46:39.573]         base::sink(type = "output", split = FALSE)
[17:46:39.573]         if (TRUE) {
[17:46:39.573]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:39.573]         }
[17:46:39.573]         else {
[17:46:39.573]             ...future.result["stdout"] <- base::list(NULL)
[17:46:39.573]         }
[17:46:39.573]         base::close(...future.stdout)
[17:46:39.573]         ...future.stdout <- NULL
[17:46:39.573]     }
[17:46:39.573]     ...future.result$conditions <- ...future.conditions
[17:46:39.573]     ...future.result$finished <- base::Sys.time()
[17:46:39.573]     ...future.result
[17:46:39.573] }
[17:46:39.576] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:46:39.576] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:46:39.576] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:46:39.576] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:46:39.577] MultisessionFuture started
[17:46:39.577] - Launch lazy future ... done
[17:46:39.577] run() for ‘MultisessionFuture’ ... done
[17:46:39.577] result() for ClusterFuture ...
[17:46:39.577] receiveMessageFromWorker() for ClusterFuture ...
[17:46:39.577] - Validating connection of MultisessionFuture
[17:46:39.578] - received message: FutureResult
[17:46:39.578] - Received FutureResult
[17:46:39.578] - Erased future from FutureRegistry
[17:46:39.578] result() for ClusterFuture ...
[17:46:39.578] - result already collected: FutureResult
[17:46:39.578] result() for ClusterFuture ... done
[17:46:39.579] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:39.579] result() for ClusterFuture ... done
[17:46:39.579] result() for ClusterFuture ...
[17:46:39.579] - result already collected: FutureResult
[17:46:39.579] result() for ClusterFuture ... done
[17:46:39.579] getGlobalsAndPackages() ...
[17:46:39.579] Searching for globals...
[17:46:39.580] - globals found: [3] ‘{’, ‘*’, ‘a’
[17:46:39.580] Searching for globals ... DONE
[17:46:39.580] Resolving globals: FALSE
[17:46:39.581] The total size of the 1 globals is 56 bytes (56 bytes)
[17:46:39.581] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[17:46:39.581] - globals: [1] ‘a’
[17:46:39.581] 
[17:46:39.581] getGlobalsAndPackages() ... DONE
[17:46:39.582] run() for ‘Future’ ...
[17:46:39.582] - state: ‘created’
[17:46:39.582] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:46:39.595] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:46:39.595] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:46:39.595]   - Field: ‘node’
[17:46:39.595]   - Field: ‘label’
[17:46:39.596]   - Field: ‘local’
[17:46:39.596]   - Field: ‘owner’
[17:46:39.596]   - Field: ‘envir’
[17:46:39.596]   - Field: ‘workers’
[17:46:39.596]   - Field: ‘packages’
[17:46:39.596]   - Field: ‘gc’
[17:46:39.596]   - Field: ‘conditions’
[17:46:39.596]   - Field: ‘persistent’
[17:46:39.596]   - Field: ‘expr’
[17:46:39.596]   - Field: ‘uuid’
[17:46:39.596]   - Field: ‘seed’
[17:46:39.597]   - Field: ‘version’
[17:46:39.597]   - Field: ‘result’
[17:46:39.597]   - Field: ‘asynchronous’
[17:46:39.597]   - Field: ‘calls’
[17:46:39.597]   - Field: ‘globals’
[17:46:39.597]   - Field: ‘stdout’
[17:46:39.597]   - Field: ‘earlySignal’
[17:46:39.597]   - Field: ‘lazy’
[17:46:39.597]   - Field: ‘state’
[17:46:39.597] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:46:39.597] - Launch lazy future ...
[17:46:39.598] Packages needed by the future expression (n = 0): <none>
[17:46:39.598] Packages needed by future strategies (n = 0): <none>
[17:46:39.598] {
[17:46:39.598]     {
[17:46:39.598]         {
[17:46:39.598]             ...future.startTime <- base::Sys.time()
[17:46:39.598]             {
[17:46:39.598]                 {
[17:46:39.598]                   {
[17:46:39.598]                     {
[17:46:39.598]                       base::local({
[17:46:39.598]                         has_future <- base::requireNamespace("future", 
[17:46:39.598]                           quietly = TRUE)
[17:46:39.598]                         if (has_future) {
[17:46:39.598]                           ns <- base::getNamespace("future")
[17:46:39.598]                           version <- ns[[".package"]][["version"]]
[17:46:39.598]                           if (is.null(version)) 
[17:46:39.598]                             version <- utils::packageVersion("future")
[17:46:39.598]                         }
[17:46:39.598]                         else {
[17:46:39.598]                           version <- NULL
[17:46:39.598]                         }
[17:46:39.598]                         if (!has_future || version < "1.8.0") {
[17:46:39.598]                           info <- base::c(r_version = base::gsub("R version ", 
[17:46:39.598]                             "", base::R.version$version.string), 
[17:46:39.598]                             platform = base::sprintf("%s (%s-bit)", 
[17:46:39.598]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:46:39.598]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:46:39.598]                               "release", "version")], collapse = " "), 
[17:46:39.598]                             hostname = base::Sys.info()[["nodename"]])
[17:46:39.598]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:46:39.598]                             info)
[17:46:39.598]                           info <- base::paste(info, collapse = "; ")
[17:46:39.598]                           if (!has_future) {
[17:46:39.598]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:46:39.598]                               info)
[17:46:39.598]                           }
[17:46:39.598]                           else {
[17:46:39.598]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:46:39.598]                               info, version)
[17:46:39.598]                           }
[17:46:39.598]                           base::stop(msg)
[17:46:39.598]                         }
[17:46:39.598]                       })
[17:46:39.598]                     }
[17:46:39.598]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:46:39.598]                     base::options(mc.cores = 1L)
[17:46:39.598]                   }
[17:46:39.598]                   ...future.strategy.old <- future::plan("list")
[17:46:39.598]                   options(future.plan = NULL)
[17:46:39.598]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.598]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:46:39.598]                 }
[17:46:39.598]                 ...future.workdir <- getwd()
[17:46:39.598]             }
[17:46:39.598]             ...future.oldOptions <- base::as.list(base::.Options)
[17:46:39.598]             ...future.oldEnvVars <- base::Sys.getenv()
[17:46:39.598]         }
[17:46:39.598]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:46:39.598]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:46:39.598]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:46:39.598]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:46:39.598]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:46:39.598]             future.stdout.windows.reencode = NULL, width = 80L)
[17:46:39.598]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:46:39.598]             base::names(...future.oldOptions))
[17:46:39.598]     }
[17:46:39.598]     if (FALSE) {
[17:46:39.598]     }
[17:46:39.598]     else {
[17:46:39.598]         if (TRUE) {
[17:46:39.598]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:46:39.598]                 open = "w")
[17:46:39.598]         }
[17:46:39.598]         else {
[17:46:39.598]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:46:39.598]                 windows = "NUL", "/dev/null"), open = "w")
[17:46:39.598]         }
[17:46:39.598]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:46:39.598]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:46:39.598]             base::sink(type = "output", split = FALSE)
[17:46:39.598]             base::close(...future.stdout)
[17:46:39.598]         }, add = TRUE)
[17:46:39.598]     }
[17:46:39.598]     ...future.frame <- base::sys.nframe()
[17:46:39.598]     ...future.conditions <- base::list()
[17:46:39.598]     ...future.rng <- base::globalenv()$.Random.seed
[17:46:39.598]     if (FALSE) {
[17:46:39.598]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:46:39.598]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:46:39.598]     }
[17:46:39.598]     ...future.result <- base::tryCatch({
[17:46:39.598]         base::withCallingHandlers({
[17:46:39.598]             ...future.value <- base::withVisible(base::local({
[17:46:39.598]                 ...future.makeSendCondition <- base::local({
[17:46:39.598]                   sendCondition <- NULL
[17:46:39.598]                   function(frame = 1L) {
[17:46:39.598]                     if (is.function(sendCondition)) 
[17:46:39.598]                       return(sendCondition)
[17:46:39.598]                     ns <- getNamespace("parallel")
[17:46:39.598]                     if (exists("sendData", mode = "function", 
[17:46:39.598]                       envir = ns)) {
[17:46:39.598]                       parallel_sendData <- get("sendData", mode = "function", 
[17:46:39.598]                         envir = ns)
[17:46:39.598]                       envir <- sys.frame(frame)
[17:46:39.598]                       master <- NULL
[17:46:39.598]                       while (!identical(envir, .GlobalEnv) && 
[17:46:39.598]                         !identical(envir, emptyenv())) {
[17:46:39.598]                         if (exists("master", mode = "list", envir = envir, 
[17:46:39.598]                           inherits = FALSE)) {
[17:46:39.598]                           master <- get("master", mode = "list", 
[17:46:39.598]                             envir = envir, inherits = FALSE)
[17:46:39.598]                           if (inherits(master, c("SOCKnode", 
[17:46:39.598]                             "SOCK0node"))) {
[17:46:39.598]                             sendCondition <<- function(cond) {
[17:46:39.598]                               data <- list(type = "VALUE", value = cond, 
[17:46:39.598]                                 success = TRUE)
[17:46:39.598]                               parallel_sendData(master, data)
[17:46:39.598]                             }
[17:46:39.598]                             return(sendCondition)
[17:46:39.598]                           }
[17:46:39.598]                         }
[17:46:39.598]                         frame <- frame + 1L
[17:46:39.598]                         envir <- sys.frame(frame)
[17:46:39.598]                       }
[17:46:39.598]                     }
[17:46:39.598]                     sendCondition <<- function(cond) NULL
[17:46:39.598]                   }
[17:46:39.598]                 })
[17:46:39.598]                 withCallingHandlers({
[17:46:39.598]                   {
[17:46:39.598]                     2 * a
[17:46:39.598]                   }
[17:46:39.598]                 }, immediateCondition = function(cond) {
[17:46:39.598]                   sendCondition <- ...future.makeSendCondition()
[17:46:39.598]                   sendCondition(cond)
[17:46:39.598]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.598]                   {
[17:46:39.598]                     inherits <- base::inherits
[17:46:39.598]                     invokeRestart <- base::invokeRestart
[17:46:39.598]                     is.null <- base::is.null
[17:46:39.598]                     muffled <- FALSE
[17:46:39.598]                     if (inherits(cond, "message")) {
[17:46:39.598]                       muffled <- grepl(pattern, "muffleMessage")
[17:46:39.598]                       if (muffled) 
[17:46:39.598]                         invokeRestart("muffleMessage")
[17:46:39.598]                     }
[17:46:39.598]                     else if (inherits(cond, "warning")) {
[17:46:39.598]                       muffled <- grepl(pattern, "muffleWarning")
[17:46:39.598]                       if (muffled) 
[17:46:39.598]                         invokeRestart("muffleWarning")
[17:46:39.598]                     }
[17:46:39.598]                     else if (inherits(cond, "condition")) {
[17:46:39.598]                       if (!is.null(pattern)) {
[17:46:39.598]                         computeRestarts <- base::computeRestarts
[17:46:39.598]                         grepl <- base::grepl
[17:46:39.598]                         restarts <- computeRestarts(cond)
[17:46:39.598]                         for (restart in restarts) {
[17:46:39.598]                           name <- restart$name
[17:46:39.598]                           if (is.null(name)) 
[17:46:39.598]                             next
[17:46:39.598]                           if (!grepl(pattern, name)) 
[17:46:39.598]                             next
[17:46:39.598]                           invokeRestart(restart)
[17:46:39.598]                           muffled <- TRUE
[17:46:39.598]                           break
[17:46:39.598]                         }
[17:46:39.598]                       }
[17:46:39.598]                     }
[17:46:39.598]                     invisible(muffled)
[17:46:39.598]                   }
[17:46:39.598]                   muffleCondition(cond)
[17:46:39.598]                 })
[17:46:39.598]             }))
[17:46:39.598]             future::FutureResult(value = ...future.value$value, 
[17:46:39.598]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.598]                   ...future.rng), globalenv = if (FALSE) 
[17:46:39.598]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:46:39.598]                     ...future.globalenv.names))
[17:46:39.598]                 else NULL, started = ...future.startTime, version = "1.8")
[17:46:39.598]         }, condition = base::local({
[17:46:39.598]             c <- base::c
[17:46:39.598]             inherits <- base::inherits
[17:46:39.598]             invokeRestart <- base::invokeRestart
[17:46:39.598]             length <- base::length
[17:46:39.598]             list <- base::list
[17:46:39.598]             seq.int <- base::seq.int
[17:46:39.598]             signalCondition <- base::signalCondition
[17:46:39.598]             sys.calls <- base::sys.calls
[17:46:39.598]             `[[` <- base::`[[`
[17:46:39.598]             `+` <- base::`+`
[17:46:39.598]             `<<-` <- base::`<<-`
[17:46:39.598]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:46:39.598]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:46:39.598]                   3L)]
[17:46:39.598]             }
[17:46:39.598]             function(cond) {
[17:46:39.598]                 is_error <- inherits(cond, "error")
[17:46:39.598]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:46:39.598]                   NULL)
[17:46:39.598]                 if (is_error) {
[17:46:39.598]                   sessionInformation <- function() {
[17:46:39.598]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:46:39.598]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:46:39.598]                       search = base::search(), system = base::Sys.info())
[17:46:39.598]                   }
[17:46:39.598]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.598]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:46:39.598]                     cond$call), session = sessionInformation(), 
[17:46:39.598]                     timestamp = base::Sys.time(), signaled = 0L)
[17:46:39.598]                   signalCondition(cond)
[17:46:39.598]                 }
[17:46:39.598]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:46:39.598]                 "immediateCondition"))) {
[17:46:39.598]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:46:39.598]                   ...future.conditions[[length(...future.conditions) + 
[17:46:39.598]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:46:39.598]                   if (TRUE && !signal) {
[17:46:39.598]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.598]                     {
[17:46:39.598]                       inherits <- base::inherits
[17:46:39.598]                       invokeRestart <- base::invokeRestart
[17:46:39.598]                       is.null <- base::is.null
[17:46:39.598]                       muffled <- FALSE
[17:46:39.598]                       if (inherits(cond, "message")) {
[17:46:39.598]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.598]                         if (muffled) 
[17:46:39.598]                           invokeRestart("muffleMessage")
[17:46:39.598]                       }
[17:46:39.598]                       else if (inherits(cond, "warning")) {
[17:46:39.598]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.598]                         if (muffled) 
[17:46:39.598]                           invokeRestart("muffleWarning")
[17:46:39.598]                       }
[17:46:39.598]                       else if (inherits(cond, "condition")) {
[17:46:39.598]                         if (!is.null(pattern)) {
[17:46:39.598]                           computeRestarts <- base::computeRestarts
[17:46:39.598]                           grepl <- base::grepl
[17:46:39.598]                           restarts <- computeRestarts(cond)
[17:46:39.598]                           for (restart in restarts) {
[17:46:39.598]                             name <- restart$name
[17:46:39.598]                             if (is.null(name)) 
[17:46:39.598]                               next
[17:46:39.598]                             if (!grepl(pattern, name)) 
[17:46:39.598]                               next
[17:46:39.598]                             invokeRestart(restart)
[17:46:39.598]                             muffled <- TRUE
[17:46:39.598]                             break
[17:46:39.598]                           }
[17:46:39.598]                         }
[17:46:39.598]                       }
[17:46:39.598]                       invisible(muffled)
[17:46:39.598]                     }
[17:46:39.598]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.598]                   }
[17:46:39.598]                 }
[17:46:39.598]                 else {
[17:46:39.598]                   if (TRUE) {
[17:46:39.598]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:46:39.598]                     {
[17:46:39.598]                       inherits <- base::inherits
[17:46:39.598]                       invokeRestart <- base::invokeRestart
[17:46:39.598]                       is.null <- base::is.null
[17:46:39.598]                       muffled <- FALSE
[17:46:39.598]                       if (inherits(cond, "message")) {
[17:46:39.598]                         muffled <- grepl(pattern, "muffleMessage")
[17:46:39.598]                         if (muffled) 
[17:46:39.598]                           invokeRestart("muffleMessage")
[17:46:39.598]                       }
[17:46:39.598]                       else if (inherits(cond, "warning")) {
[17:46:39.598]                         muffled <- grepl(pattern, "muffleWarning")
[17:46:39.598]                         if (muffled) 
[17:46:39.598]                           invokeRestart("muffleWarning")
[17:46:39.598]                       }
[17:46:39.598]                       else if (inherits(cond, "condition")) {
[17:46:39.598]                         if (!is.null(pattern)) {
[17:46:39.598]                           computeRestarts <- base::computeRestarts
[17:46:39.598]                           grepl <- base::grepl
[17:46:39.598]                           restarts <- computeRestarts(cond)
[17:46:39.598]                           for (restart in restarts) {
[17:46:39.598]                             name <- restart$name
[17:46:39.598]                             if (is.null(name)) 
[17:46:39.598]                               next
[17:46:39.598]                             if (!grepl(pattern, name)) 
[17:46:39.598]                               next
[17:46:39.598]                             invokeRestart(restart)
[17:46:39.598]                             muffled <- TRUE
[17:46:39.598]                             break
[17:46:39.598]                           }
[17:46:39.598]                         }
[17:46:39.598]                       }
[17:46:39.598]                       invisible(muffled)
[17:46:39.598]                     }
[17:46:39.598]                     muffleCondition(cond, pattern = "^muffle")
[17:46:39.598]                   }
[17:46:39.598]                 }
[17:46:39.598]             }
[17:46:39.598]         }))
[17:46:39.598]     }, error = function(ex) {
[17:46:39.598]         base::structure(base::list(value = NULL, visible = NULL, 
[17:46:39.598]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:46:39.598]                 ...future.rng), started = ...future.startTime, 
[17:46:39.598]             finished = Sys.time(), session_uuid = NA_character_, 
[17:46:39.598]             version = "1.8"), class = "FutureResult")
[17:46:39.598]     }, finally = {
[17:46:39.598]         if (!identical(...future.workdir, getwd())) 
[17:46:39.598]             setwd(...future.workdir)
[17:46:39.598]         {
[17:46:39.598]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:46:39.598]                 ...future.oldOptions$nwarnings <- NULL
[17:46:39.598]             }
[17:46:39.598]             base::options(...future.oldOptions)
[17:46:39.598]             if (.Platform$OS.type == "windows") {
[17:46:39.598]                 old_names <- names(...future.oldEnvVars)
[17:46:39.598]                 envs <- base::Sys.getenv()
[17:46:39.598]                 names <- names(envs)
[17:46:39.598]                 common <- intersect(names, old_names)
[17:46:39.598]                 added <- setdiff(names, old_names)
[17:46:39.598]                 removed <- setdiff(old_names, names)
[17:46:39.598]                 changed <- common[...future.oldEnvVars[common] != 
[17:46:39.598]                   envs[common]]
[17:46:39.598]                 NAMES <- toupper(changed)
[17:46:39.598]                 args <- list()
[17:46:39.598]                 for (kk in seq_along(NAMES)) {
[17:46:39.598]                   name <- changed[[kk]]
[17:46:39.598]                   NAME <- NAMES[[kk]]
[17:46:39.598]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.598]                     next
[17:46:39.598]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.598]                 }
[17:46:39.598]                 NAMES <- toupper(added)
[17:46:39.598]                 for (kk in seq_along(NAMES)) {
[17:46:39.598]                   name <- added[[kk]]
[17:46:39.598]                   NAME <- NAMES[[kk]]
[17:46:39.598]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.598]                     next
[17:46:39.598]                   args[[name]] <- ""
[17:46:39.598]                 }
[17:46:39.598]                 NAMES <- toupper(removed)
[17:46:39.598]                 for (kk in seq_along(NAMES)) {
[17:46:39.598]                   name <- removed[[kk]]
[17:46:39.598]                   NAME <- NAMES[[kk]]
[17:46:39.598]                   if (name != NAME && is.element(NAME, old_names)) 
[17:46:39.598]                     next
[17:46:39.598]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:46:39.598]                 }
[17:46:39.598]                 if (length(args) > 0) 
[17:46:39.598]                   base::do.call(base::Sys.setenv, args = args)
[17:46:39.598]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:46:39.598]             }
[17:46:39.598]             else {
[17:46:39.598]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:46:39.598]             }
[17:46:39.598]             {
[17:46:39.598]                 if (base::length(...future.futureOptionsAdded) > 
[17:46:39.598]                   0L) {
[17:46:39.598]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:46:39.598]                   base::names(opts) <- ...future.futureOptionsAdded
[17:46:39.598]                   base::options(opts)
[17:46:39.598]                 }
[17:46:39.598]                 {
[17:46:39.598]                   {
[17:46:39.598]                     base::options(mc.cores = ...future.mc.cores.old)
[17:46:39.598]                     NULL
[17:46:39.598]                   }
[17:46:39.598]                   options(future.plan = NULL)
[17:46:39.598]                   if (is.na(NA_character_)) 
[17:46:39.598]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:46:39.598]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:46:39.598]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:46:39.598]                     .init = FALSE)
[17:46:39.598]                 }
[17:46:39.598]             }
[17:46:39.598]         }
[17:46:39.598]     })
[17:46:39.598]     if (TRUE) {
[17:46:39.598]         base::sink(type = "output", split = FALSE)
[17:46:39.598]         if (TRUE) {
[17:46:39.598]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:46:39.598]         }
[17:46:39.598]         else {
[17:46:39.598]             ...future.result["stdout"] <- base::list(NULL)
[17:46:39.598]         }
[17:46:39.598]         base::close(...future.stdout)
[17:46:39.598]         ...future.stdout <- NULL
[17:46:39.598]     }
[17:46:39.598]     ...future.result$conditions <- ...future.conditions
[17:46:39.598]     ...future.result$finished <- base::Sys.time()
[17:46:39.598]     ...future.result
[17:46:39.598] }
[17:46:39.601] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[17:46:39.601] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[17:46:39.601] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[17:46:39.601] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[17:46:39.602] MultisessionFuture started
[17:46:39.602] - Launch lazy future ... done
[17:46:39.602] run() for ‘MultisessionFuture’ ... done
[17:46:39.602] result() for ClusterFuture ...
[17:46:39.602] receiveMessageFromWorker() for ClusterFuture ...
[17:46:39.602] - Validating connection of MultisessionFuture
[17:46:39.603] - received message: FutureResult
[17:46:39.603] - Received FutureResult
[17:46:39.603] - Erased future from FutureRegistry
[17:46:39.603] result() for ClusterFuture ...
[17:46:39.603] - result already collected: FutureResult
[17:46:39.603] result() for ClusterFuture ... done
[17:46:39.604] receiveMessageFromWorker() for ClusterFuture ... done
[17:46:39.604] result() for ClusterFuture ... done
[17:46:39.604] result() for ClusterFuture ...
[17:46:39.604] - result already collected: FutureResult
[17:46:39.604] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[17:46:39.605] plan(): Setting new future strategy stack:
[17:46:39.605] List of future strategies:
[17:46:39.605] 1. FutureStrategy:
[17:46:39.605]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:46:39.605]    - tweaked: FALSE
[17:46:39.605]    - call: future::plan(oplan)
[17:46:39.606] plan(): nbrOfWorkers() = 1
> 
