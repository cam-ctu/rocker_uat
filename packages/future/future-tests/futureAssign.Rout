
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:04:02.944] plan(): Setting new future strategy stack:
[18:04:02.945] List of future strategies:
[18:04:02.945] 1. sequential:
[18:04:02.945]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:02.945]    - tweaked: FALSE
[18:04:02.945]    - call: future::plan("sequential")
[18:04:02.968] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[18:04:02.990] getGlobalsAndPackages() ...
[18:04:02.991] Searching for globals...
[18:04:03.002] - globals found: [2] ‘{’, ‘cat’
[18:04:03.003] Searching for globals ... DONE
[18:04:03.003] Resolving globals: FALSE
[18:04:03.004] 
[18:04:03.004] 
[18:04:03.004] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[18:04:03.006] run() for ‘Future’ ...
[18:04:03.006] - state: ‘created’
[18:04:03.007] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:03.007] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:03.007] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:03.008]   - Field: ‘label’
[18:04:03.008]   - Field: ‘local’
[18:04:03.008]   - Field: ‘owner’
[18:04:03.008]   - Field: ‘envir’
[18:04:03.008]   - Field: ‘packages’
[18:04:03.009]   - Field: ‘gc’
[18:04:03.009]   - Field: ‘conditions’
[18:04:03.009]   - Field: ‘expr’
[18:04:03.009]   - Field: ‘uuid’
[18:04:03.009]   - Field: ‘seed’
[18:04:03.010]   - Field: ‘version’
[18:04:03.010]   - Field: ‘result’
[18:04:03.010]   - Field: ‘asynchronous’
[18:04:03.010]   - Field: ‘calls’
[18:04:03.010]   - Field: ‘globals’
[18:04:03.011]   - Field: ‘stdout’
[18:04:03.011]   - Field: ‘earlySignal’
[18:04:03.011]   - Field: ‘lazy’
[18:04:03.011]   - Field: ‘state’
[18:04:03.011] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:03.012] - Launch lazy future ...
[18:04:03.013] Packages needed by the future expression (n = 0): <none>
[18:04:03.014] Packages needed by future strategies (n = 0): <none>
[18:04:03.015] {
[18:04:03.015]     {
[18:04:03.015]         {
[18:04:03.015]             ...future.startTime <- base::Sys.time()
[18:04:03.015]             {
[18:04:03.015]                 {
[18:04:03.015]                   {
[18:04:03.015]                     base::local({
[18:04:03.015]                       has_future <- base::requireNamespace("future", 
[18:04:03.015]                         quietly = TRUE)
[18:04:03.015]                       if (has_future) {
[18:04:03.015]                         ns <- base::getNamespace("future")
[18:04:03.015]                         version <- ns[[".package"]][["version"]]
[18:04:03.015]                         if (is.null(version)) 
[18:04:03.015]                           version <- utils::packageVersion("future")
[18:04:03.015]                       }
[18:04:03.015]                       else {
[18:04:03.015]                         version <- NULL
[18:04:03.015]                       }
[18:04:03.015]                       if (!has_future || version < "1.8.0") {
[18:04:03.015]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.015]                           "", base::R.version$version.string), 
[18:04:03.015]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:03.015]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.015]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.015]                             "release", "version")], collapse = " "), 
[18:04:03.015]                           hostname = base::Sys.info()[["nodename"]])
[18:04:03.015]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.015]                           info)
[18:04:03.015]                         info <- base::paste(info, collapse = "; ")
[18:04:03.015]                         if (!has_future) {
[18:04:03.015]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.015]                             info)
[18:04:03.015]                         }
[18:04:03.015]                         else {
[18:04:03.015]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.015]                             info, version)
[18:04:03.015]                         }
[18:04:03.015]                         base::stop(msg)
[18:04:03.015]                       }
[18:04:03.015]                     })
[18:04:03.015]                   }
[18:04:03.015]                   ...future.strategy.old <- future::plan("list")
[18:04:03.015]                   options(future.plan = NULL)
[18:04:03.015]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.015]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.015]                 }
[18:04:03.015]                 ...future.workdir <- getwd()
[18:04:03.015]             }
[18:04:03.015]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.015]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.015]         }
[18:04:03.015]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.015]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.015]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.015]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.015]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.015]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.015]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.015]             base::names(...future.oldOptions))
[18:04:03.015]     }
[18:04:03.015]     if (FALSE) {
[18:04:03.015]     }
[18:04:03.015]     else {
[18:04:03.015]         if (TRUE) {
[18:04:03.015]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.015]                 open = "w")
[18:04:03.015]         }
[18:04:03.015]         else {
[18:04:03.015]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.015]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.015]         }
[18:04:03.015]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.015]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.015]             base::sink(type = "output", split = FALSE)
[18:04:03.015]             base::close(...future.stdout)
[18:04:03.015]         }, add = TRUE)
[18:04:03.015]     }
[18:04:03.015]     ...future.frame <- base::sys.nframe()
[18:04:03.015]     ...future.conditions <- base::list()
[18:04:03.015]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.015]     if (FALSE) {
[18:04:03.015]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.015]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.015]     }
[18:04:03.015]     ...future.result <- base::tryCatch({
[18:04:03.015]         base::withCallingHandlers({
[18:04:03.015]             ...future.value <- base::withVisible(base::local({
[18:04:03.015]                 cat("Future assignment evaluated\n")
[18:04:03.015]                 2
[18:04:03.015]             }))
[18:04:03.015]             future::FutureResult(value = ...future.value$value, 
[18:04:03.015]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.015]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.015]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.015]                     ...future.globalenv.names))
[18:04:03.015]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.015]         }, condition = base::local({
[18:04:03.015]             c <- base::c
[18:04:03.015]             inherits <- base::inherits
[18:04:03.015]             invokeRestart <- base::invokeRestart
[18:04:03.015]             length <- base::length
[18:04:03.015]             list <- base::list
[18:04:03.015]             seq.int <- base::seq.int
[18:04:03.015]             signalCondition <- base::signalCondition
[18:04:03.015]             sys.calls <- base::sys.calls
[18:04:03.015]             `[[` <- base::`[[`
[18:04:03.015]             `+` <- base::`+`
[18:04:03.015]             `<<-` <- base::`<<-`
[18:04:03.015]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.015]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.015]                   3L)]
[18:04:03.015]             }
[18:04:03.015]             function(cond) {
[18:04:03.015]                 is_error <- inherits(cond, "error")
[18:04:03.015]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.015]                   NULL)
[18:04:03.015]                 if (is_error) {
[18:04:03.015]                   sessionInformation <- function() {
[18:04:03.015]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.015]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.015]                       search = base::search(), system = base::Sys.info())
[18:04:03.015]                   }
[18:04:03.015]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.015]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.015]                     cond$call), session = sessionInformation(), 
[18:04:03.015]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.015]                   signalCondition(cond)
[18:04:03.015]                 }
[18:04:03.015]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.015]                 "immediateCondition"))) {
[18:04:03.015]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.015]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.015]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.015]                   if (TRUE && !signal) {
[18:04:03.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.015]                     {
[18:04:03.015]                       inherits <- base::inherits
[18:04:03.015]                       invokeRestart <- base::invokeRestart
[18:04:03.015]                       is.null <- base::is.null
[18:04:03.015]                       muffled <- FALSE
[18:04:03.015]                       if (inherits(cond, "message")) {
[18:04:03.015]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.015]                         if (muffled) 
[18:04:03.015]                           invokeRestart("muffleMessage")
[18:04:03.015]                       }
[18:04:03.015]                       else if (inherits(cond, "warning")) {
[18:04:03.015]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.015]                         if (muffled) 
[18:04:03.015]                           invokeRestart("muffleWarning")
[18:04:03.015]                       }
[18:04:03.015]                       else if (inherits(cond, "condition")) {
[18:04:03.015]                         if (!is.null(pattern)) {
[18:04:03.015]                           computeRestarts <- base::computeRestarts
[18:04:03.015]                           grepl <- base::grepl
[18:04:03.015]                           restarts <- computeRestarts(cond)
[18:04:03.015]                           for (restart in restarts) {
[18:04:03.015]                             name <- restart$name
[18:04:03.015]                             if (is.null(name)) 
[18:04:03.015]                               next
[18:04:03.015]                             if (!grepl(pattern, name)) 
[18:04:03.015]                               next
[18:04:03.015]                             invokeRestart(restart)
[18:04:03.015]                             muffled <- TRUE
[18:04:03.015]                             break
[18:04:03.015]                           }
[18:04:03.015]                         }
[18:04:03.015]                       }
[18:04:03.015]                       invisible(muffled)
[18:04:03.015]                     }
[18:04:03.015]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.015]                   }
[18:04:03.015]                 }
[18:04:03.015]                 else {
[18:04:03.015]                   if (TRUE) {
[18:04:03.015]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.015]                     {
[18:04:03.015]                       inherits <- base::inherits
[18:04:03.015]                       invokeRestart <- base::invokeRestart
[18:04:03.015]                       is.null <- base::is.null
[18:04:03.015]                       muffled <- FALSE
[18:04:03.015]                       if (inherits(cond, "message")) {
[18:04:03.015]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.015]                         if (muffled) 
[18:04:03.015]                           invokeRestart("muffleMessage")
[18:04:03.015]                       }
[18:04:03.015]                       else if (inherits(cond, "warning")) {
[18:04:03.015]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.015]                         if (muffled) 
[18:04:03.015]                           invokeRestart("muffleWarning")
[18:04:03.015]                       }
[18:04:03.015]                       else if (inherits(cond, "condition")) {
[18:04:03.015]                         if (!is.null(pattern)) {
[18:04:03.015]                           computeRestarts <- base::computeRestarts
[18:04:03.015]                           grepl <- base::grepl
[18:04:03.015]                           restarts <- computeRestarts(cond)
[18:04:03.015]                           for (restart in restarts) {
[18:04:03.015]                             name <- restart$name
[18:04:03.015]                             if (is.null(name)) 
[18:04:03.015]                               next
[18:04:03.015]                             if (!grepl(pattern, name)) 
[18:04:03.015]                               next
[18:04:03.015]                             invokeRestart(restart)
[18:04:03.015]                             muffled <- TRUE
[18:04:03.015]                             break
[18:04:03.015]                           }
[18:04:03.015]                         }
[18:04:03.015]                       }
[18:04:03.015]                       invisible(muffled)
[18:04:03.015]                     }
[18:04:03.015]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.015]                   }
[18:04:03.015]                 }
[18:04:03.015]             }
[18:04:03.015]         }))
[18:04:03.015]     }, error = function(ex) {
[18:04:03.015]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.015]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.015]                 ...future.rng), started = ...future.startTime, 
[18:04:03.015]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.015]             version = "1.8"), class = "FutureResult")
[18:04:03.015]     }, finally = {
[18:04:03.015]         if (!identical(...future.workdir, getwd())) 
[18:04:03.015]             setwd(...future.workdir)
[18:04:03.015]         {
[18:04:03.015]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.015]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.015]             }
[18:04:03.015]             base::options(...future.oldOptions)
[18:04:03.015]             if (.Platform$OS.type == "windows") {
[18:04:03.015]                 old_names <- names(...future.oldEnvVars)
[18:04:03.015]                 envs <- base::Sys.getenv()
[18:04:03.015]                 names <- names(envs)
[18:04:03.015]                 common <- intersect(names, old_names)
[18:04:03.015]                 added <- setdiff(names, old_names)
[18:04:03.015]                 removed <- setdiff(old_names, names)
[18:04:03.015]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.015]                   envs[common]]
[18:04:03.015]                 NAMES <- toupper(changed)
[18:04:03.015]                 args <- list()
[18:04:03.015]                 for (kk in seq_along(NAMES)) {
[18:04:03.015]                   name <- changed[[kk]]
[18:04:03.015]                   NAME <- NAMES[[kk]]
[18:04:03.015]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.015]                     next
[18:04:03.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.015]                 }
[18:04:03.015]                 NAMES <- toupper(added)
[18:04:03.015]                 for (kk in seq_along(NAMES)) {
[18:04:03.015]                   name <- added[[kk]]
[18:04:03.015]                   NAME <- NAMES[[kk]]
[18:04:03.015]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.015]                     next
[18:04:03.015]                   args[[name]] <- ""
[18:04:03.015]                 }
[18:04:03.015]                 NAMES <- toupper(removed)
[18:04:03.015]                 for (kk in seq_along(NAMES)) {
[18:04:03.015]                   name <- removed[[kk]]
[18:04:03.015]                   NAME <- NAMES[[kk]]
[18:04:03.015]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.015]                     next
[18:04:03.015]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.015]                 }
[18:04:03.015]                 if (length(args) > 0) 
[18:04:03.015]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.015]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.015]             }
[18:04:03.015]             else {
[18:04:03.015]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.015]             }
[18:04:03.015]             {
[18:04:03.015]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.015]                   0L) {
[18:04:03.015]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.015]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.015]                   base::options(opts)
[18:04:03.015]                 }
[18:04:03.015]                 {
[18:04:03.015]                   {
[18:04:03.015]                     NULL
[18:04:03.015]                     RNGkind("Mersenne-Twister")
[18:04:03.015]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:03.015]                       inherits = FALSE)
[18:04:03.015]                   }
[18:04:03.015]                   options(future.plan = NULL)
[18:04:03.015]                   if (is.na(NA_character_)) 
[18:04:03.015]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.015]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.015]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.015]                     .init = FALSE)
[18:04:03.015]                 }
[18:04:03.015]             }
[18:04:03.015]         }
[18:04:03.015]     })
[18:04:03.015]     if (TRUE) {
[18:04:03.015]         base::sink(type = "output", split = FALSE)
[18:04:03.015]         if (TRUE) {
[18:04:03.015]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.015]         }
[18:04:03.015]         else {
[18:04:03.015]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.015]         }
[18:04:03.015]         base::close(...future.stdout)
[18:04:03.015]         ...future.stdout <- NULL
[18:04:03.015]     }
[18:04:03.015]     ...future.result$conditions <- ...future.conditions
[18:04:03.015]     ...future.result$finished <- base::Sys.time()
[18:04:03.015]     ...future.result
[18:04:03.015] }
[18:04:03.019] plan(): Setting new future strategy stack:
[18:04:03.019] List of future strategies:
[18:04:03.019] 1. sequential:
[18:04:03.019]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.019]    - tweaked: FALSE
[18:04:03.019]    - call: NULL
[18:04:03.020] plan(): nbrOfWorkers() = 1
[18:04:03.022] plan(): Setting new future strategy stack:
[18:04:03.022] List of future strategies:
[18:04:03.022] 1. sequential:
[18:04:03.022]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.022]    - tweaked: FALSE
[18:04:03.022]    - call: future::plan("sequential")
[18:04:03.023] plan(): nbrOfWorkers() = 1
[18:04:03.023] SequentialFuture started (and completed)
[18:04:03.024] - Launch lazy future ... done
[18:04:03.024] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[18:04:03.079] plan(): Setting new future strategy stack:
[18:04:03.079] List of future strategies:
[18:04:03.079] 1. sequential:
[18:04:03.079]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.079]    - tweaked: FALSE
[18:04:03.079]    - call: plan(strategy)
[18:04:03.102] plan(): nbrOfWorkers() = 1
[18:04:03.103] getGlobalsAndPackages() ...
[18:04:03.105] Searching for globals...
[18:04:03.106] - globals found: [1] ‘{’
[18:04:03.106] Searching for globals ... DONE
[18:04:03.107] Resolving globals: FALSE
[18:04:03.107] 
[18:04:03.107] 
[18:04:03.108] getGlobalsAndPackages() ... DONE
[18:04:03.108] run() for ‘Future’ ...
[18:04:03.108] - state: ‘created’
[18:04:03.108] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:03.109] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:03.109] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:03.109]   - Field: ‘label’
[18:04:03.110]   - Field: ‘local’
[18:04:03.110]   - Field: ‘owner’
[18:04:03.110]   - Field: ‘envir’
[18:04:03.110]   - Field: ‘packages’
[18:04:03.110]   - Field: ‘gc’
[18:04:03.111]   - Field: ‘conditions’
[18:04:03.111]   - Field: ‘expr’
[18:04:03.111]   - Field: ‘uuid’
[18:04:03.111]   - Field: ‘seed’
[18:04:03.111]   - Field: ‘version’
[18:04:03.112]   - Field: ‘result’
[18:04:03.112]   - Field: ‘asynchronous’
[18:04:03.112]   - Field: ‘calls’
[18:04:03.112]   - Field: ‘globals’
[18:04:03.112]   - Field: ‘stdout’
[18:04:03.112]   - Field: ‘earlySignal’
[18:04:03.113]   - Field: ‘lazy’
[18:04:03.113]   - Field: ‘state’
[18:04:03.113] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:03.113] - Launch lazy future ...
[18:04:03.114] Packages needed by the future expression (n = 0): <none>
[18:04:03.114] Packages needed by future strategies (n = 0): <none>
[18:04:03.115] {
[18:04:03.115]     {
[18:04:03.115]         {
[18:04:03.115]             ...future.startTime <- base::Sys.time()
[18:04:03.115]             {
[18:04:03.115]                 {
[18:04:03.115]                   {
[18:04:03.115]                     base::local({
[18:04:03.115]                       has_future <- base::requireNamespace("future", 
[18:04:03.115]                         quietly = TRUE)
[18:04:03.115]                       if (has_future) {
[18:04:03.115]                         ns <- base::getNamespace("future")
[18:04:03.115]                         version <- ns[[".package"]][["version"]]
[18:04:03.115]                         if (is.null(version)) 
[18:04:03.115]                           version <- utils::packageVersion("future")
[18:04:03.115]                       }
[18:04:03.115]                       else {
[18:04:03.115]                         version <- NULL
[18:04:03.115]                       }
[18:04:03.115]                       if (!has_future || version < "1.8.0") {
[18:04:03.115]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.115]                           "", base::R.version$version.string), 
[18:04:03.115]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:03.115]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.115]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.115]                             "release", "version")], collapse = " "), 
[18:04:03.115]                           hostname = base::Sys.info()[["nodename"]])
[18:04:03.115]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.115]                           info)
[18:04:03.115]                         info <- base::paste(info, collapse = "; ")
[18:04:03.115]                         if (!has_future) {
[18:04:03.115]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.115]                             info)
[18:04:03.115]                         }
[18:04:03.115]                         else {
[18:04:03.115]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.115]                             info, version)
[18:04:03.115]                         }
[18:04:03.115]                         base::stop(msg)
[18:04:03.115]                       }
[18:04:03.115]                     })
[18:04:03.115]                   }
[18:04:03.115]                   ...future.strategy.old <- future::plan("list")
[18:04:03.115]                   options(future.plan = NULL)
[18:04:03.115]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.115]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.115]                 }
[18:04:03.115]                 ...future.workdir <- getwd()
[18:04:03.115]             }
[18:04:03.115]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.115]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.115]         }
[18:04:03.115]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.115]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.115]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.115]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.115]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.115]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.115]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.115]             base::names(...future.oldOptions))
[18:04:03.115]     }
[18:04:03.115]     if (FALSE) {
[18:04:03.115]     }
[18:04:03.115]     else {
[18:04:03.115]         if (TRUE) {
[18:04:03.115]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.115]                 open = "w")
[18:04:03.115]         }
[18:04:03.115]         else {
[18:04:03.115]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.115]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.115]         }
[18:04:03.115]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.115]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.115]             base::sink(type = "output", split = FALSE)
[18:04:03.115]             base::close(...future.stdout)
[18:04:03.115]         }, add = TRUE)
[18:04:03.115]     }
[18:04:03.115]     ...future.frame <- base::sys.nframe()
[18:04:03.115]     ...future.conditions <- base::list()
[18:04:03.115]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.115]     if (FALSE) {
[18:04:03.115]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.115]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.115]     }
[18:04:03.115]     ...future.result <- base::tryCatch({
[18:04:03.115]         base::withCallingHandlers({
[18:04:03.115]             ...future.value <- base::withVisible(base::local({
[18:04:03.115]                 2
[18:04:03.115]             }))
[18:04:03.115]             future::FutureResult(value = ...future.value$value, 
[18:04:03.115]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.115]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.115]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.115]                     ...future.globalenv.names))
[18:04:03.115]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.115]         }, condition = base::local({
[18:04:03.115]             c <- base::c
[18:04:03.115]             inherits <- base::inherits
[18:04:03.115]             invokeRestart <- base::invokeRestart
[18:04:03.115]             length <- base::length
[18:04:03.115]             list <- base::list
[18:04:03.115]             seq.int <- base::seq.int
[18:04:03.115]             signalCondition <- base::signalCondition
[18:04:03.115]             sys.calls <- base::sys.calls
[18:04:03.115]             `[[` <- base::`[[`
[18:04:03.115]             `+` <- base::`+`
[18:04:03.115]             `<<-` <- base::`<<-`
[18:04:03.115]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.115]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.115]                   3L)]
[18:04:03.115]             }
[18:04:03.115]             function(cond) {
[18:04:03.115]                 is_error <- inherits(cond, "error")
[18:04:03.115]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.115]                   NULL)
[18:04:03.115]                 if (is_error) {
[18:04:03.115]                   sessionInformation <- function() {
[18:04:03.115]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.115]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.115]                       search = base::search(), system = base::Sys.info())
[18:04:03.115]                   }
[18:04:03.115]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.115]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.115]                     cond$call), session = sessionInformation(), 
[18:04:03.115]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.115]                   signalCondition(cond)
[18:04:03.115]                 }
[18:04:03.115]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.115]                 "immediateCondition"))) {
[18:04:03.115]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.115]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.115]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.115]                   if (TRUE && !signal) {
[18:04:03.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.115]                     {
[18:04:03.115]                       inherits <- base::inherits
[18:04:03.115]                       invokeRestart <- base::invokeRestart
[18:04:03.115]                       is.null <- base::is.null
[18:04:03.115]                       muffled <- FALSE
[18:04:03.115]                       if (inherits(cond, "message")) {
[18:04:03.115]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.115]                         if (muffled) 
[18:04:03.115]                           invokeRestart("muffleMessage")
[18:04:03.115]                       }
[18:04:03.115]                       else if (inherits(cond, "warning")) {
[18:04:03.115]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.115]                         if (muffled) 
[18:04:03.115]                           invokeRestart("muffleWarning")
[18:04:03.115]                       }
[18:04:03.115]                       else if (inherits(cond, "condition")) {
[18:04:03.115]                         if (!is.null(pattern)) {
[18:04:03.115]                           computeRestarts <- base::computeRestarts
[18:04:03.115]                           grepl <- base::grepl
[18:04:03.115]                           restarts <- computeRestarts(cond)
[18:04:03.115]                           for (restart in restarts) {
[18:04:03.115]                             name <- restart$name
[18:04:03.115]                             if (is.null(name)) 
[18:04:03.115]                               next
[18:04:03.115]                             if (!grepl(pattern, name)) 
[18:04:03.115]                               next
[18:04:03.115]                             invokeRestart(restart)
[18:04:03.115]                             muffled <- TRUE
[18:04:03.115]                             break
[18:04:03.115]                           }
[18:04:03.115]                         }
[18:04:03.115]                       }
[18:04:03.115]                       invisible(muffled)
[18:04:03.115]                     }
[18:04:03.115]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.115]                   }
[18:04:03.115]                 }
[18:04:03.115]                 else {
[18:04:03.115]                   if (TRUE) {
[18:04:03.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.115]                     {
[18:04:03.115]                       inherits <- base::inherits
[18:04:03.115]                       invokeRestart <- base::invokeRestart
[18:04:03.115]                       is.null <- base::is.null
[18:04:03.115]                       muffled <- FALSE
[18:04:03.115]                       if (inherits(cond, "message")) {
[18:04:03.115]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.115]                         if (muffled) 
[18:04:03.115]                           invokeRestart("muffleMessage")
[18:04:03.115]                       }
[18:04:03.115]                       else if (inherits(cond, "warning")) {
[18:04:03.115]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.115]                         if (muffled) 
[18:04:03.115]                           invokeRestart("muffleWarning")
[18:04:03.115]                       }
[18:04:03.115]                       else if (inherits(cond, "condition")) {
[18:04:03.115]                         if (!is.null(pattern)) {
[18:04:03.115]                           computeRestarts <- base::computeRestarts
[18:04:03.115]                           grepl <- base::grepl
[18:04:03.115]                           restarts <- computeRestarts(cond)
[18:04:03.115]                           for (restart in restarts) {
[18:04:03.115]                             name <- restart$name
[18:04:03.115]                             if (is.null(name)) 
[18:04:03.115]                               next
[18:04:03.115]                             if (!grepl(pattern, name)) 
[18:04:03.115]                               next
[18:04:03.115]                             invokeRestart(restart)
[18:04:03.115]                             muffled <- TRUE
[18:04:03.115]                             break
[18:04:03.115]                           }
[18:04:03.115]                         }
[18:04:03.115]                       }
[18:04:03.115]                       invisible(muffled)
[18:04:03.115]                     }
[18:04:03.115]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.115]                   }
[18:04:03.115]                 }
[18:04:03.115]             }
[18:04:03.115]         }))
[18:04:03.115]     }, error = function(ex) {
[18:04:03.115]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.115]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.115]                 ...future.rng), started = ...future.startTime, 
[18:04:03.115]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.115]             version = "1.8"), class = "FutureResult")
[18:04:03.115]     }, finally = {
[18:04:03.115]         if (!identical(...future.workdir, getwd())) 
[18:04:03.115]             setwd(...future.workdir)
[18:04:03.115]         {
[18:04:03.115]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.115]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.115]             }
[18:04:03.115]             base::options(...future.oldOptions)
[18:04:03.115]             if (.Platform$OS.type == "windows") {
[18:04:03.115]                 old_names <- names(...future.oldEnvVars)
[18:04:03.115]                 envs <- base::Sys.getenv()
[18:04:03.115]                 names <- names(envs)
[18:04:03.115]                 common <- intersect(names, old_names)
[18:04:03.115]                 added <- setdiff(names, old_names)
[18:04:03.115]                 removed <- setdiff(old_names, names)
[18:04:03.115]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.115]                   envs[common]]
[18:04:03.115]                 NAMES <- toupper(changed)
[18:04:03.115]                 args <- list()
[18:04:03.115]                 for (kk in seq_along(NAMES)) {
[18:04:03.115]                   name <- changed[[kk]]
[18:04:03.115]                   NAME <- NAMES[[kk]]
[18:04:03.115]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.115]                     next
[18:04:03.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.115]                 }
[18:04:03.115]                 NAMES <- toupper(added)
[18:04:03.115]                 for (kk in seq_along(NAMES)) {
[18:04:03.115]                   name <- added[[kk]]
[18:04:03.115]                   NAME <- NAMES[[kk]]
[18:04:03.115]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.115]                     next
[18:04:03.115]                   args[[name]] <- ""
[18:04:03.115]                 }
[18:04:03.115]                 NAMES <- toupper(removed)
[18:04:03.115]                 for (kk in seq_along(NAMES)) {
[18:04:03.115]                   name <- removed[[kk]]
[18:04:03.115]                   NAME <- NAMES[[kk]]
[18:04:03.115]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.115]                     next
[18:04:03.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.115]                 }
[18:04:03.115]                 if (length(args) > 0) 
[18:04:03.115]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.115]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.115]             }
[18:04:03.115]             else {
[18:04:03.115]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.115]             }
[18:04:03.115]             {
[18:04:03.115]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.115]                   0L) {
[18:04:03.115]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.115]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.115]                   base::options(opts)
[18:04:03.115]                 }
[18:04:03.115]                 {
[18:04:03.115]                   {
[18:04:03.115]                     NULL
[18:04:03.115]                     RNGkind("Mersenne-Twister")
[18:04:03.115]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:03.115]                       inherits = FALSE)
[18:04:03.115]                   }
[18:04:03.115]                   options(future.plan = NULL)
[18:04:03.115]                   if (is.na(NA_character_)) 
[18:04:03.115]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.115]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.115]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.115]                     .init = FALSE)
[18:04:03.115]                 }
[18:04:03.115]             }
[18:04:03.115]         }
[18:04:03.115]     })
[18:04:03.115]     if (TRUE) {
[18:04:03.115]         base::sink(type = "output", split = FALSE)
[18:04:03.115]         if (TRUE) {
[18:04:03.115]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.115]         }
[18:04:03.115]         else {
[18:04:03.115]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.115]         }
[18:04:03.115]         base::close(...future.stdout)
[18:04:03.115]         ...future.stdout <- NULL
[18:04:03.115]     }
[18:04:03.115]     ...future.result$conditions <- ...future.conditions
[18:04:03.115]     ...future.result$finished <- base::Sys.time()
[18:04:03.115]     ...future.result
[18:04:03.115] }
[18:04:03.118] plan(): Setting new future strategy stack:
[18:04:03.118] List of future strategies:
[18:04:03.118] 1. sequential:
[18:04:03.118]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.118]    - tweaked: FALSE
[18:04:03.118]    - call: NULL
[18:04:03.119] plan(): nbrOfWorkers() = 1
[18:04:03.121] plan(): Setting new future strategy stack:
[18:04:03.121] List of future strategies:
[18:04:03.121] 1. sequential:
[18:04:03.121]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.121]    - tweaked: FALSE
[18:04:03.121]    - call: plan(strategy)
[18:04:03.122] plan(): nbrOfWorkers() = 1
[18:04:03.122] SequentialFuture started (and completed)
[18:04:03.122] - Launch lazy future ... done
[18:04:03.123] run() for ‘SequentialFuture’ ... done
[18:04:03.123] getGlobalsAndPackages() ...
[18:04:03.123] Searching for globals...
[18:04:03.124] - globals found: [1] ‘{’
[18:04:03.125] Searching for globals ... DONE
[18:04:03.125] Resolving globals: FALSE
[18:04:03.125] 
[18:04:03.125] 
[18:04:03.126] getGlobalsAndPackages() ... DONE
[18:04:03.126] run() for ‘Future’ ...
[18:04:03.126] - state: ‘created’
[18:04:03.127] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:03.127] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:03.127] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:03.127]   - Field: ‘label’
[18:04:03.128]   - Field: ‘local’
[18:04:03.128]   - Field: ‘owner’
[18:04:03.128]   - Field: ‘envir’
[18:04:03.128]   - Field: ‘packages’
[18:04:03.128]   - Field: ‘gc’
[18:04:03.129]   - Field: ‘conditions’
[18:04:03.129]   - Field: ‘expr’
[18:04:03.129]   - Field: ‘uuid’
[18:04:03.129]   - Field: ‘seed’
[18:04:03.129]   - Field: ‘version’
[18:04:03.130]   - Field: ‘result’
[18:04:03.130]   - Field: ‘asynchronous’
[18:04:03.130]   - Field: ‘calls’
[18:04:03.130]   - Field: ‘globals’
[18:04:03.130]   - Field: ‘stdout’
[18:04:03.131]   - Field: ‘earlySignal’
[18:04:03.131]   - Field: ‘lazy’
[18:04:03.131]   - Field: ‘state’
[18:04:03.131] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:03.131] - Launch lazy future ...
[18:04:03.132] Packages needed by the future expression (n = 0): <none>
[18:04:03.132] Packages needed by future strategies (n = 0): <none>
[18:04:03.133] {
[18:04:03.133]     {
[18:04:03.133]         {
[18:04:03.133]             ...future.startTime <- base::Sys.time()
[18:04:03.133]             {
[18:04:03.133]                 {
[18:04:03.133]                   {
[18:04:03.133]                     base::local({
[18:04:03.133]                       has_future <- base::requireNamespace("future", 
[18:04:03.133]                         quietly = TRUE)
[18:04:03.133]                       if (has_future) {
[18:04:03.133]                         ns <- base::getNamespace("future")
[18:04:03.133]                         version <- ns[[".package"]][["version"]]
[18:04:03.133]                         if (is.null(version)) 
[18:04:03.133]                           version <- utils::packageVersion("future")
[18:04:03.133]                       }
[18:04:03.133]                       else {
[18:04:03.133]                         version <- NULL
[18:04:03.133]                       }
[18:04:03.133]                       if (!has_future || version < "1.8.0") {
[18:04:03.133]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.133]                           "", base::R.version$version.string), 
[18:04:03.133]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:03.133]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.133]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.133]                             "release", "version")], collapse = " "), 
[18:04:03.133]                           hostname = base::Sys.info()[["nodename"]])
[18:04:03.133]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.133]                           info)
[18:04:03.133]                         info <- base::paste(info, collapse = "; ")
[18:04:03.133]                         if (!has_future) {
[18:04:03.133]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.133]                             info)
[18:04:03.133]                         }
[18:04:03.133]                         else {
[18:04:03.133]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.133]                             info, version)
[18:04:03.133]                         }
[18:04:03.133]                         base::stop(msg)
[18:04:03.133]                       }
[18:04:03.133]                     })
[18:04:03.133]                   }
[18:04:03.133]                   ...future.strategy.old <- future::plan("list")
[18:04:03.133]                   options(future.plan = NULL)
[18:04:03.133]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.133]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.133]                 }
[18:04:03.133]                 ...future.workdir <- getwd()
[18:04:03.133]             }
[18:04:03.133]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.133]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.133]         }
[18:04:03.133]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.133]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.133]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.133]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.133]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.133]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.133]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.133]             base::names(...future.oldOptions))
[18:04:03.133]     }
[18:04:03.133]     if (FALSE) {
[18:04:03.133]     }
[18:04:03.133]     else {
[18:04:03.133]         if (TRUE) {
[18:04:03.133]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.133]                 open = "w")
[18:04:03.133]         }
[18:04:03.133]         else {
[18:04:03.133]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.133]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.133]         }
[18:04:03.133]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.133]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.133]             base::sink(type = "output", split = FALSE)
[18:04:03.133]             base::close(...future.stdout)
[18:04:03.133]         }, add = TRUE)
[18:04:03.133]     }
[18:04:03.133]     ...future.frame <- base::sys.nframe()
[18:04:03.133]     ...future.conditions <- base::list()
[18:04:03.133]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.133]     if (FALSE) {
[18:04:03.133]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.133]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.133]     }
[18:04:03.133]     ...future.result <- base::tryCatch({
[18:04:03.133]         base::withCallingHandlers({
[18:04:03.133]             ...future.value <- base::withVisible(base::local({
[18:04:03.133]                 4
[18:04:03.133]             }))
[18:04:03.133]             future::FutureResult(value = ...future.value$value, 
[18:04:03.133]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.133]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.133]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.133]                     ...future.globalenv.names))
[18:04:03.133]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.133]         }, condition = base::local({
[18:04:03.133]             c <- base::c
[18:04:03.133]             inherits <- base::inherits
[18:04:03.133]             invokeRestart <- base::invokeRestart
[18:04:03.133]             length <- base::length
[18:04:03.133]             list <- base::list
[18:04:03.133]             seq.int <- base::seq.int
[18:04:03.133]             signalCondition <- base::signalCondition
[18:04:03.133]             sys.calls <- base::sys.calls
[18:04:03.133]             `[[` <- base::`[[`
[18:04:03.133]             `+` <- base::`+`
[18:04:03.133]             `<<-` <- base::`<<-`
[18:04:03.133]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.133]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.133]                   3L)]
[18:04:03.133]             }
[18:04:03.133]             function(cond) {
[18:04:03.133]                 is_error <- inherits(cond, "error")
[18:04:03.133]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.133]                   NULL)
[18:04:03.133]                 if (is_error) {
[18:04:03.133]                   sessionInformation <- function() {
[18:04:03.133]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.133]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.133]                       search = base::search(), system = base::Sys.info())
[18:04:03.133]                   }
[18:04:03.133]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.133]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.133]                     cond$call), session = sessionInformation(), 
[18:04:03.133]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.133]                   signalCondition(cond)
[18:04:03.133]                 }
[18:04:03.133]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.133]                 "immediateCondition"))) {
[18:04:03.133]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.133]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.133]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.133]                   if (TRUE && !signal) {
[18:04:03.133]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.133]                     {
[18:04:03.133]                       inherits <- base::inherits
[18:04:03.133]                       invokeRestart <- base::invokeRestart
[18:04:03.133]                       is.null <- base::is.null
[18:04:03.133]                       muffled <- FALSE
[18:04:03.133]                       if (inherits(cond, "message")) {
[18:04:03.133]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.133]                         if (muffled) 
[18:04:03.133]                           invokeRestart("muffleMessage")
[18:04:03.133]                       }
[18:04:03.133]                       else if (inherits(cond, "warning")) {
[18:04:03.133]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.133]                         if (muffled) 
[18:04:03.133]                           invokeRestart("muffleWarning")
[18:04:03.133]                       }
[18:04:03.133]                       else if (inherits(cond, "condition")) {
[18:04:03.133]                         if (!is.null(pattern)) {
[18:04:03.133]                           computeRestarts <- base::computeRestarts
[18:04:03.133]                           grepl <- base::grepl
[18:04:03.133]                           restarts <- computeRestarts(cond)
[18:04:03.133]                           for (restart in restarts) {
[18:04:03.133]                             name <- restart$name
[18:04:03.133]                             if (is.null(name)) 
[18:04:03.133]                               next
[18:04:03.133]                             if (!grepl(pattern, name)) 
[18:04:03.133]                               next
[18:04:03.133]                             invokeRestart(restart)
[18:04:03.133]                             muffled <- TRUE
[18:04:03.133]                             break
[18:04:03.133]                           }
[18:04:03.133]                         }
[18:04:03.133]                       }
[18:04:03.133]                       invisible(muffled)
[18:04:03.133]                     }
[18:04:03.133]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.133]                   }
[18:04:03.133]                 }
[18:04:03.133]                 else {
[18:04:03.133]                   if (TRUE) {
[18:04:03.133]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.133]                     {
[18:04:03.133]                       inherits <- base::inherits
[18:04:03.133]                       invokeRestart <- base::invokeRestart
[18:04:03.133]                       is.null <- base::is.null
[18:04:03.133]                       muffled <- FALSE
[18:04:03.133]                       if (inherits(cond, "message")) {
[18:04:03.133]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.133]                         if (muffled) 
[18:04:03.133]                           invokeRestart("muffleMessage")
[18:04:03.133]                       }
[18:04:03.133]                       else if (inherits(cond, "warning")) {
[18:04:03.133]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.133]                         if (muffled) 
[18:04:03.133]                           invokeRestart("muffleWarning")
[18:04:03.133]                       }
[18:04:03.133]                       else if (inherits(cond, "condition")) {
[18:04:03.133]                         if (!is.null(pattern)) {
[18:04:03.133]                           computeRestarts <- base::computeRestarts
[18:04:03.133]                           grepl <- base::grepl
[18:04:03.133]                           restarts <- computeRestarts(cond)
[18:04:03.133]                           for (restart in restarts) {
[18:04:03.133]                             name <- restart$name
[18:04:03.133]                             if (is.null(name)) 
[18:04:03.133]                               next
[18:04:03.133]                             if (!grepl(pattern, name)) 
[18:04:03.133]                               next
[18:04:03.133]                             invokeRestart(restart)
[18:04:03.133]                             muffled <- TRUE
[18:04:03.133]                             break
[18:04:03.133]                           }
[18:04:03.133]                         }
[18:04:03.133]                       }
[18:04:03.133]                       invisible(muffled)
[18:04:03.133]                     }
[18:04:03.133]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.133]                   }
[18:04:03.133]                 }
[18:04:03.133]             }
[18:04:03.133]         }))
[18:04:03.133]     }, error = function(ex) {
[18:04:03.133]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.133]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.133]                 ...future.rng), started = ...future.startTime, 
[18:04:03.133]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.133]             version = "1.8"), class = "FutureResult")
[18:04:03.133]     }, finally = {
[18:04:03.133]         if (!identical(...future.workdir, getwd())) 
[18:04:03.133]             setwd(...future.workdir)
[18:04:03.133]         {
[18:04:03.133]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.133]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.133]             }
[18:04:03.133]             base::options(...future.oldOptions)
[18:04:03.133]             if (.Platform$OS.type == "windows") {
[18:04:03.133]                 old_names <- names(...future.oldEnvVars)
[18:04:03.133]                 envs <- base::Sys.getenv()
[18:04:03.133]                 names <- names(envs)
[18:04:03.133]                 common <- intersect(names, old_names)
[18:04:03.133]                 added <- setdiff(names, old_names)
[18:04:03.133]                 removed <- setdiff(old_names, names)
[18:04:03.133]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.133]                   envs[common]]
[18:04:03.133]                 NAMES <- toupper(changed)
[18:04:03.133]                 args <- list()
[18:04:03.133]                 for (kk in seq_along(NAMES)) {
[18:04:03.133]                   name <- changed[[kk]]
[18:04:03.133]                   NAME <- NAMES[[kk]]
[18:04:03.133]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.133]                     next
[18:04:03.133]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.133]                 }
[18:04:03.133]                 NAMES <- toupper(added)
[18:04:03.133]                 for (kk in seq_along(NAMES)) {
[18:04:03.133]                   name <- added[[kk]]
[18:04:03.133]                   NAME <- NAMES[[kk]]
[18:04:03.133]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.133]                     next
[18:04:03.133]                   args[[name]] <- ""
[18:04:03.133]                 }
[18:04:03.133]                 NAMES <- toupper(removed)
[18:04:03.133]                 for (kk in seq_along(NAMES)) {
[18:04:03.133]                   name <- removed[[kk]]
[18:04:03.133]                   NAME <- NAMES[[kk]]
[18:04:03.133]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.133]                     next
[18:04:03.133]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.133]                 }
[18:04:03.133]                 if (length(args) > 0) 
[18:04:03.133]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.133]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.133]             }
[18:04:03.133]             else {
[18:04:03.133]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.133]             }
[18:04:03.133]             {
[18:04:03.133]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.133]                   0L) {
[18:04:03.133]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.133]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.133]                   base::options(opts)
[18:04:03.133]                 }
[18:04:03.133]                 {
[18:04:03.133]                   {
[18:04:03.133]                     NULL
[18:04:03.133]                     RNGkind("Mersenne-Twister")
[18:04:03.133]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:03.133]                       inherits = FALSE)
[18:04:03.133]                   }
[18:04:03.133]                   options(future.plan = NULL)
[18:04:03.133]                   if (is.na(NA_character_)) 
[18:04:03.133]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.133]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.133]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.133]                     .init = FALSE)
[18:04:03.133]                 }
[18:04:03.133]             }
[18:04:03.133]         }
[18:04:03.133]     })
[18:04:03.133]     if (TRUE) {
[18:04:03.133]         base::sink(type = "output", split = FALSE)
[18:04:03.133]         if (TRUE) {
[18:04:03.133]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.133]         }
[18:04:03.133]         else {
[18:04:03.133]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.133]         }
[18:04:03.133]         base::close(...future.stdout)
[18:04:03.133]         ...future.stdout <- NULL
[18:04:03.133]     }
[18:04:03.133]     ...future.result$conditions <- ...future.conditions
[18:04:03.133]     ...future.result$finished <- base::Sys.time()
[18:04:03.133]     ...future.result
[18:04:03.133] }
[18:04:03.136] plan(): Setting new future strategy stack:
[18:04:03.136] List of future strategies:
[18:04:03.136] 1. sequential:
[18:04:03.136]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.136]    - tweaked: FALSE
[18:04:03.136]    - call: NULL
[18:04:03.137] plan(): nbrOfWorkers() = 1
[18:04:03.139] plan(): Setting new future strategy stack:
[18:04:03.139] List of future strategies:
[18:04:03.139] 1. sequential:
[18:04:03.139]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.139]    - tweaked: FALSE
[18:04:03.139]    - call: plan(strategy)
[18:04:03.140] plan(): nbrOfWorkers() = 1
[18:04:03.140] SequentialFuture started (and completed)
[18:04:03.140] - Launch lazy future ... done
[18:04:03.141] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[18:04:03.141] getGlobalsAndPackages() ...
[18:04:03.141] Searching for globals...
[18:04:03.143] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.143] Searching for globals ... DONE
[18:04:03.144] Resolving globals: FALSE
[18:04:03.145] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.146] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.146] - globals: [1] ‘a’
[18:04:03.146] 
[18:04:03.146] getGlobalsAndPackages() ... DONE
[18:04:03.147] run() for ‘Future’ ...
[18:04:03.147] - state: ‘created’
[18:04:03.147] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:03.148] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:03.148] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:03.148]   - Field: ‘label’
[18:04:03.148]   - Field: ‘local’
[18:04:03.149]   - Field: ‘owner’
[18:04:03.149]   - Field: ‘envir’
[18:04:03.149]   - Field: ‘packages’
[18:04:03.149]   - Field: ‘gc’
[18:04:03.149]   - Field: ‘conditions’
[18:04:03.150]   - Field: ‘expr’
[18:04:03.150]   - Field: ‘uuid’
[18:04:03.150]   - Field: ‘seed’
[18:04:03.150]   - Field: ‘version’
[18:04:03.150]   - Field: ‘result’
[18:04:03.151]   - Field: ‘asynchronous’
[18:04:03.151]   - Field: ‘calls’
[18:04:03.151]   - Field: ‘globals’
[18:04:03.151]   - Field: ‘stdout’
[18:04:03.151]   - Field: ‘earlySignal’
[18:04:03.152]   - Field: ‘lazy’
[18:04:03.152]   - Field: ‘state’
[18:04:03.152] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:03.152] - Launch lazy future ...
[18:04:03.152] Packages needed by the future expression (n = 0): <none>
[18:04:03.153] Packages needed by future strategies (n = 0): <none>
[18:04:03.154] {
[18:04:03.154]     {
[18:04:03.154]         {
[18:04:03.154]             ...future.startTime <- base::Sys.time()
[18:04:03.154]             {
[18:04:03.154]                 {
[18:04:03.154]                   {
[18:04:03.154]                     base::local({
[18:04:03.154]                       has_future <- base::requireNamespace("future", 
[18:04:03.154]                         quietly = TRUE)
[18:04:03.154]                       if (has_future) {
[18:04:03.154]                         ns <- base::getNamespace("future")
[18:04:03.154]                         version <- ns[[".package"]][["version"]]
[18:04:03.154]                         if (is.null(version)) 
[18:04:03.154]                           version <- utils::packageVersion("future")
[18:04:03.154]                       }
[18:04:03.154]                       else {
[18:04:03.154]                         version <- NULL
[18:04:03.154]                       }
[18:04:03.154]                       if (!has_future || version < "1.8.0") {
[18:04:03.154]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.154]                           "", base::R.version$version.string), 
[18:04:03.154]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:03.154]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.154]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.154]                             "release", "version")], collapse = " "), 
[18:04:03.154]                           hostname = base::Sys.info()[["nodename"]])
[18:04:03.154]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.154]                           info)
[18:04:03.154]                         info <- base::paste(info, collapse = "; ")
[18:04:03.154]                         if (!has_future) {
[18:04:03.154]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.154]                             info)
[18:04:03.154]                         }
[18:04:03.154]                         else {
[18:04:03.154]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.154]                             info, version)
[18:04:03.154]                         }
[18:04:03.154]                         base::stop(msg)
[18:04:03.154]                       }
[18:04:03.154]                     })
[18:04:03.154]                   }
[18:04:03.154]                   ...future.strategy.old <- future::plan("list")
[18:04:03.154]                   options(future.plan = NULL)
[18:04:03.154]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.154]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.154]                 }
[18:04:03.154]                 ...future.workdir <- getwd()
[18:04:03.154]             }
[18:04:03.154]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.154]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.154]         }
[18:04:03.154]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.154]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.154]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.154]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.154]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.154]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.154]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.154]             base::names(...future.oldOptions))
[18:04:03.154]     }
[18:04:03.154]     if (FALSE) {
[18:04:03.154]     }
[18:04:03.154]     else {
[18:04:03.154]         if (TRUE) {
[18:04:03.154]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.154]                 open = "w")
[18:04:03.154]         }
[18:04:03.154]         else {
[18:04:03.154]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.154]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.154]         }
[18:04:03.154]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.154]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.154]             base::sink(type = "output", split = FALSE)
[18:04:03.154]             base::close(...future.stdout)
[18:04:03.154]         }, add = TRUE)
[18:04:03.154]     }
[18:04:03.154]     ...future.frame <- base::sys.nframe()
[18:04:03.154]     ...future.conditions <- base::list()
[18:04:03.154]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.154]     if (FALSE) {
[18:04:03.154]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.154]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.154]     }
[18:04:03.154]     ...future.result <- base::tryCatch({
[18:04:03.154]         base::withCallingHandlers({
[18:04:03.154]             ...future.value <- base::withVisible(base::local({
[18:04:03.154]                 2 * a
[18:04:03.154]             }))
[18:04:03.154]             future::FutureResult(value = ...future.value$value, 
[18:04:03.154]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.154]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.154]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.154]                     ...future.globalenv.names))
[18:04:03.154]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.154]         }, condition = base::local({
[18:04:03.154]             c <- base::c
[18:04:03.154]             inherits <- base::inherits
[18:04:03.154]             invokeRestart <- base::invokeRestart
[18:04:03.154]             length <- base::length
[18:04:03.154]             list <- base::list
[18:04:03.154]             seq.int <- base::seq.int
[18:04:03.154]             signalCondition <- base::signalCondition
[18:04:03.154]             sys.calls <- base::sys.calls
[18:04:03.154]             `[[` <- base::`[[`
[18:04:03.154]             `+` <- base::`+`
[18:04:03.154]             `<<-` <- base::`<<-`
[18:04:03.154]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.154]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.154]                   3L)]
[18:04:03.154]             }
[18:04:03.154]             function(cond) {
[18:04:03.154]                 is_error <- inherits(cond, "error")
[18:04:03.154]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.154]                   NULL)
[18:04:03.154]                 if (is_error) {
[18:04:03.154]                   sessionInformation <- function() {
[18:04:03.154]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.154]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.154]                       search = base::search(), system = base::Sys.info())
[18:04:03.154]                   }
[18:04:03.154]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.154]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.154]                     cond$call), session = sessionInformation(), 
[18:04:03.154]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.154]                   signalCondition(cond)
[18:04:03.154]                 }
[18:04:03.154]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.154]                 "immediateCondition"))) {
[18:04:03.154]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.154]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.154]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.154]                   if (TRUE && !signal) {
[18:04:03.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.154]                     {
[18:04:03.154]                       inherits <- base::inherits
[18:04:03.154]                       invokeRestart <- base::invokeRestart
[18:04:03.154]                       is.null <- base::is.null
[18:04:03.154]                       muffled <- FALSE
[18:04:03.154]                       if (inherits(cond, "message")) {
[18:04:03.154]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.154]                         if (muffled) 
[18:04:03.154]                           invokeRestart("muffleMessage")
[18:04:03.154]                       }
[18:04:03.154]                       else if (inherits(cond, "warning")) {
[18:04:03.154]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.154]                         if (muffled) 
[18:04:03.154]                           invokeRestart("muffleWarning")
[18:04:03.154]                       }
[18:04:03.154]                       else if (inherits(cond, "condition")) {
[18:04:03.154]                         if (!is.null(pattern)) {
[18:04:03.154]                           computeRestarts <- base::computeRestarts
[18:04:03.154]                           grepl <- base::grepl
[18:04:03.154]                           restarts <- computeRestarts(cond)
[18:04:03.154]                           for (restart in restarts) {
[18:04:03.154]                             name <- restart$name
[18:04:03.154]                             if (is.null(name)) 
[18:04:03.154]                               next
[18:04:03.154]                             if (!grepl(pattern, name)) 
[18:04:03.154]                               next
[18:04:03.154]                             invokeRestart(restart)
[18:04:03.154]                             muffled <- TRUE
[18:04:03.154]                             break
[18:04:03.154]                           }
[18:04:03.154]                         }
[18:04:03.154]                       }
[18:04:03.154]                       invisible(muffled)
[18:04:03.154]                     }
[18:04:03.154]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.154]                   }
[18:04:03.154]                 }
[18:04:03.154]                 else {
[18:04:03.154]                   if (TRUE) {
[18:04:03.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.154]                     {
[18:04:03.154]                       inherits <- base::inherits
[18:04:03.154]                       invokeRestart <- base::invokeRestart
[18:04:03.154]                       is.null <- base::is.null
[18:04:03.154]                       muffled <- FALSE
[18:04:03.154]                       if (inherits(cond, "message")) {
[18:04:03.154]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.154]                         if (muffled) 
[18:04:03.154]                           invokeRestart("muffleMessage")
[18:04:03.154]                       }
[18:04:03.154]                       else if (inherits(cond, "warning")) {
[18:04:03.154]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.154]                         if (muffled) 
[18:04:03.154]                           invokeRestart("muffleWarning")
[18:04:03.154]                       }
[18:04:03.154]                       else if (inherits(cond, "condition")) {
[18:04:03.154]                         if (!is.null(pattern)) {
[18:04:03.154]                           computeRestarts <- base::computeRestarts
[18:04:03.154]                           grepl <- base::grepl
[18:04:03.154]                           restarts <- computeRestarts(cond)
[18:04:03.154]                           for (restart in restarts) {
[18:04:03.154]                             name <- restart$name
[18:04:03.154]                             if (is.null(name)) 
[18:04:03.154]                               next
[18:04:03.154]                             if (!grepl(pattern, name)) 
[18:04:03.154]                               next
[18:04:03.154]                             invokeRestart(restart)
[18:04:03.154]                             muffled <- TRUE
[18:04:03.154]                             break
[18:04:03.154]                           }
[18:04:03.154]                         }
[18:04:03.154]                       }
[18:04:03.154]                       invisible(muffled)
[18:04:03.154]                     }
[18:04:03.154]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.154]                   }
[18:04:03.154]                 }
[18:04:03.154]             }
[18:04:03.154]         }))
[18:04:03.154]     }, error = function(ex) {
[18:04:03.154]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.154]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.154]                 ...future.rng), started = ...future.startTime, 
[18:04:03.154]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.154]             version = "1.8"), class = "FutureResult")
[18:04:03.154]     }, finally = {
[18:04:03.154]         if (!identical(...future.workdir, getwd())) 
[18:04:03.154]             setwd(...future.workdir)
[18:04:03.154]         {
[18:04:03.154]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.154]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.154]             }
[18:04:03.154]             base::options(...future.oldOptions)
[18:04:03.154]             if (.Platform$OS.type == "windows") {
[18:04:03.154]                 old_names <- names(...future.oldEnvVars)
[18:04:03.154]                 envs <- base::Sys.getenv()
[18:04:03.154]                 names <- names(envs)
[18:04:03.154]                 common <- intersect(names, old_names)
[18:04:03.154]                 added <- setdiff(names, old_names)
[18:04:03.154]                 removed <- setdiff(old_names, names)
[18:04:03.154]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.154]                   envs[common]]
[18:04:03.154]                 NAMES <- toupper(changed)
[18:04:03.154]                 args <- list()
[18:04:03.154]                 for (kk in seq_along(NAMES)) {
[18:04:03.154]                   name <- changed[[kk]]
[18:04:03.154]                   NAME <- NAMES[[kk]]
[18:04:03.154]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.154]                     next
[18:04:03.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.154]                 }
[18:04:03.154]                 NAMES <- toupper(added)
[18:04:03.154]                 for (kk in seq_along(NAMES)) {
[18:04:03.154]                   name <- added[[kk]]
[18:04:03.154]                   NAME <- NAMES[[kk]]
[18:04:03.154]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.154]                     next
[18:04:03.154]                   args[[name]] <- ""
[18:04:03.154]                 }
[18:04:03.154]                 NAMES <- toupper(removed)
[18:04:03.154]                 for (kk in seq_along(NAMES)) {
[18:04:03.154]                   name <- removed[[kk]]
[18:04:03.154]                   NAME <- NAMES[[kk]]
[18:04:03.154]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.154]                     next
[18:04:03.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.154]                 }
[18:04:03.154]                 if (length(args) > 0) 
[18:04:03.154]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.154]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.154]             }
[18:04:03.154]             else {
[18:04:03.154]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.154]             }
[18:04:03.154]             {
[18:04:03.154]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.154]                   0L) {
[18:04:03.154]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.154]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.154]                   base::options(opts)
[18:04:03.154]                 }
[18:04:03.154]                 {
[18:04:03.154]                   {
[18:04:03.154]                     NULL
[18:04:03.154]                     RNGkind("Mersenne-Twister")
[18:04:03.154]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:03.154]                       inherits = FALSE)
[18:04:03.154]                   }
[18:04:03.154]                   options(future.plan = NULL)
[18:04:03.154]                   if (is.na(NA_character_)) 
[18:04:03.154]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.154]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.154]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.154]                     .init = FALSE)
[18:04:03.154]                 }
[18:04:03.154]             }
[18:04:03.154]         }
[18:04:03.154]     })
[18:04:03.154]     if (TRUE) {
[18:04:03.154]         base::sink(type = "output", split = FALSE)
[18:04:03.154]         if (TRUE) {
[18:04:03.154]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.154]         }
[18:04:03.154]         else {
[18:04:03.154]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.154]         }
[18:04:03.154]         base::close(...future.stdout)
[18:04:03.154]         ...future.stdout <- NULL
[18:04:03.154]     }
[18:04:03.154]     ...future.result$conditions <- ...future.conditions
[18:04:03.154]     ...future.result$finished <- base::Sys.time()
[18:04:03.154]     ...future.result
[18:04:03.154] }
[18:04:03.157] assign_globals() ...
[18:04:03.157] List of 1
[18:04:03.157]  $ a: num 1
[18:04:03.157]  - attr(*, "where")=List of 1
[18:04:03.157]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.157]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.157]  - attr(*, "resolved")= logi FALSE
[18:04:03.157]  - attr(*, "total_size")= num 56
[18:04:03.157]  - attr(*, "already-done")= logi TRUE
[18:04:03.166] - copied ‘a’ to environment
[18:04:03.166] assign_globals() ... done
[18:04:03.166] plan(): Setting new future strategy stack:
[18:04:03.167] List of future strategies:
[18:04:03.167] 1. sequential:
[18:04:03.167]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.167]    - tweaked: FALSE
[18:04:03.167]    - call: NULL
[18:04:03.168] plan(): nbrOfWorkers() = 1
[18:04:03.169] plan(): Setting new future strategy stack:
[18:04:03.169] List of future strategies:
[18:04:03.169] 1. sequential:
[18:04:03.169]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.169]    - tweaked: FALSE
[18:04:03.169]    - call: plan(strategy)
[18:04:03.171] plan(): nbrOfWorkers() = 1
[18:04:03.171] SequentialFuture started (and completed)
[18:04:03.171] - Launch lazy future ... done
[18:04:03.171] run() for ‘SequentialFuture’ ... done
[18:04:03.172] getGlobalsAndPackages() ...
[18:04:03.172] Searching for globals...
[18:04:03.177] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.177] Searching for globals ... DONE
[18:04:03.177] Resolving globals: FALSE
[18:04:03.178] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.179] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.179] - globals: [1] ‘a’
[18:04:03.180] 
[18:04:03.180] getGlobalsAndPackages() ... DONE
[18:04:03.180] run() for ‘Future’ ...
[18:04:03.181] - state: ‘created’
[18:04:03.181] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:03.181] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:03.182] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:03.182]   - Field: ‘label’
[18:04:03.182]   - Field: ‘local’
[18:04:03.182]   - Field: ‘owner’
[18:04:03.183]   - Field: ‘envir’
[18:04:03.183]   - Field: ‘packages’
[18:04:03.183]   - Field: ‘gc’
[18:04:03.183]   - Field: ‘conditions’
[18:04:03.183]   - Field: ‘expr’
[18:04:03.184]   - Field: ‘uuid’
[18:04:03.184]   - Field: ‘seed’
[18:04:03.184]   - Field: ‘version’
[18:04:03.184]   - Field: ‘result’
[18:04:03.184]   - Field: ‘asynchronous’
[18:04:03.185]   - Field: ‘calls’
[18:04:03.185]   - Field: ‘globals’
[18:04:03.185]   - Field: ‘stdout’
[18:04:03.185]   - Field: ‘earlySignal’
[18:04:03.185]   - Field: ‘lazy’
[18:04:03.186]   - Field: ‘state’
[18:04:03.186] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:03.186] - Launch lazy future ...
[18:04:03.187] Packages needed by the future expression (n = 0): <none>
[18:04:03.187] Packages needed by future strategies (n = 0): <none>
[18:04:03.188] {
[18:04:03.188]     {
[18:04:03.188]         {
[18:04:03.188]             ...future.startTime <- base::Sys.time()
[18:04:03.188]             {
[18:04:03.188]                 {
[18:04:03.188]                   {
[18:04:03.188]                     base::local({
[18:04:03.188]                       has_future <- base::requireNamespace("future", 
[18:04:03.188]                         quietly = TRUE)
[18:04:03.188]                       if (has_future) {
[18:04:03.188]                         ns <- base::getNamespace("future")
[18:04:03.188]                         version <- ns[[".package"]][["version"]]
[18:04:03.188]                         if (is.null(version)) 
[18:04:03.188]                           version <- utils::packageVersion("future")
[18:04:03.188]                       }
[18:04:03.188]                       else {
[18:04:03.188]                         version <- NULL
[18:04:03.188]                       }
[18:04:03.188]                       if (!has_future || version < "1.8.0") {
[18:04:03.188]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.188]                           "", base::R.version$version.string), 
[18:04:03.188]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:03.188]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.188]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.188]                             "release", "version")], collapse = " "), 
[18:04:03.188]                           hostname = base::Sys.info()[["nodename"]])
[18:04:03.188]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.188]                           info)
[18:04:03.188]                         info <- base::paste(info, collapse = "; ")
[18:04:03.188]                         if (!has_future) {
[18:04:03.188]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.188]                             info)
[18:04:03.188]                         }
[18:04:03.188]                         else {
[18:04:03.188]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.188]                             info, version)
[18:04:03.188]                         }
[18:04:03.188]                         base::stop(msg)
[18:04:03.188]                       }
[18:04:03.188]                     })
[18:04:03.188]                   }
[18:04:03.188]                   ...future.strategy.old <- future::plan("list")
[18:04:03.188]                   options(future.plan = NULL)
[18:04:03.188]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.188]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.188]                 }
[18:04:03.188]                 ...future.workdir <- getwd()
[18:04:03.188]             }
[18:04:03.188]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.188]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.188]         }
[18:04:03.188]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.188]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.188]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.188]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.188]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.188]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.188]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.188]             base::names(...future.oldOptions))
[18:04:03.188]     }
[18:04:03.188]     if (FALSE) {
[18:04:03.188]     }
[18:04:03.188]     else {
[18:04:03.188]         if (TRUE) {
[18:04:03.188]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.188]                 open = "w")
[18:04:03.188]         }
[18:04:03.188]         else {
[18:04:03.188]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.188]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.188]         }
[18:04:03.188]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.188]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.188]             base::sink(type = "output", split = FALSE)
[18:04:03.188]             base::close(...future.stdout)
[18:04:03.188]         }, add = TRUE)
[18:04:03.188]     }
[18:04:03.188]     ...future.frame <- base::sys.nframe()
[18:04:03.188]     ...future.conditions <- base::list()
[18:04:03.188]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.188]     if (FALSE) {
[18:04:03.188]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.188]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.188]     }
[18:04:03.188]     ...future.result <- base::tryCatch({
[18:04:03.188]         base::withCallingHandlers({
[18:04:03.188]             ...future.value <- base::withVisible(base::local({
[18:04:03.188]                 2 * a
[18:04:03.188]             }))
[18:04:03.188]             future::FutureResult(value = ...future.value$value, 
[18:04:03.188]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.188]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.188]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.188]                     ...future.globalenv.names))
[18:04:03.188]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.188]         }, condition = base::local({
[18:04:03.188]             c <- base::c
[18:04:03.188]             inherits <- base::inherits
[18:04:03.188]             invokeRestart <- base::invokeRestart
[18:04:03.188]             length <- base::length
[18:04:03.188]             list <- base::list
[18:04:03.188]             seq.int <- base::seq.int
[18:04:03.188]             signalCondition <- base::signalCondition
[18:04:03.188]             sys.calls <- base::sys.calls
[18:04:03.188]             `[[` <- base::`[[`
[18:04:03.188]             `+` <- base::`+`
[18:04:03.188]             `<<-` <- base::`<<-`
[18:04:03.188]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.188]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.188]                   3L)]
[18:04:03.188]             }
[18:04:03.188]             function(cond) {
[18:04:03.188]                 is_error <- inherits(cond, "error")
[18:04:03.188]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.188]                   NULL)
[18:04:03.188]                 if (is_error) {
[18:04:03.188]                   sessionInformation <- function() {
[18:04:03.188]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.188]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.188]                       search = base::search(), system = base::Sys.info())
[18:04:03.188]                   }
[18:04:03.188]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.188]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.188]                     cond$call), session = sessionInformation(), 
[18:04:03.188]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.188]                   signalCondition(cond)
[18:04:03.188]                 }
[18:04:03.188]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.188]                 "immediateCondition"))) {
[18:04:03.188]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.188]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.188]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.188]                   if (TRUE && !signal) {
[18:04:03.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.188]                     {
[18:04:03.188]                       inherits <- base::inherits
[18:04:03.188]                       invokeRestart <- base::invokeRestart
[18:04:03.188]                       is.null <- base::is.null
[18:04:03.188]                       muffled <- FALSE
[18:04:03.188]                       if (inherits(cond, "message")) {
[18:04:03.188]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.188]                         if (muffled) 
[18:04:03.188]                           invokeRestart("muffleMessage")
[18:04:03.188]                       }
[18:04:03.188]                       else if (inherits(cond, "warning")) {
[18:04:03.188]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.188]                         if (muffled) 
[18:04:03.188]                           invokeRestart("muffleWarning")
[18:04:03.188]                       }
[18:04:03.188]                       else if (inherits(cond, "condition")) {
[18:04:03.188]                         if (!is.null(pattern)) {
[18:04:03.188]                           computeRestarts <- base::computeRestarts
[18:04:03.188]                           grepl <- base::grepl
[18:04:03.188]                           restarts <- computeRestarts(cond)
[18:04:03.188]                           for (restart in restarts) {
[18:04:03.188]                             name <- restart$name
[18:04:03.188]                             if (is.null(name)) 
[18:04:03.188]                               next
[18:04:03.188]                             if (!grepl(pattern, name)) 
[18:04:03.188]                               next
[18:04:03.188]                             invokeRestart(restart)
[18:04:03.188]                             muffled <- TRUE
[18:04:03.188]                             break
[18:04:03.188]                           }
[18:04:03.188]                         }
[18:04:03.188]                       }
[18:04:03.188]                       invisible(muffled)
[18:04:03.188]                     }
[18:04:03.188]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.188]                   }
[18:04:03.188]                 }
[18:04:03.188]                 else {
[18:04:03.188]                   if (TRUE) {
[18:04:03.188]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.188]                     {
[18:04:03.188]                       inherits <- base::inherits
[18:04:03.188]                       invokeRestart <- base::invokeRestart
[18:04:03.188]                       is.null <- base::is.null
[18:04:03.188]                       muffled <- FALSE
[18:04:03.188]                       if (inherits(cond, "message")) {
[18:04:03.188]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.188]                         if (muffled) 
[18:04:03.188]                           invokeRestart("muffleMessage")
[18:04:03.188]                       }
[18:04:03.188]                       else if (inherits(cond, "warning")) {
[18:04:03.188]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.188]                         if (muffled) 
[18:04:03.188]                           invokeRestart("muffleWarning")
[18:04:03.188]                       }
[18:04:03.188]                       else if (inherits(cond, "condition")) {
[18:04:03.188]                         if (!is.null(pattern)) {
[18:04:03.188]                           computeRestarts <- base::computeRestarts
[18:04:03.188]                           grepl <- base::grepl
[18:04:03.188]                           restarts <- computeRestarts(cond)
[18:04:03.188]                           for (restart in restarts) {
[18:04:03.188]                             name <- restart$name
[18:04:03.188]                             if (is.null(name)) 
[18:04:03.188]                               next
[18:04:03.188]                             if (!grepl(pattern, name)) 
[18:04:03.188]                               next
[18:04:03.188]                             invokeRestart(restart)
[18:04:03.188]                             muffled <- TRUE
[18:04:03.188]                             break
[18:04:03.188]                           }
[18:04:03.188]                         }
[18:04:03.188]                       }
[18:04:03.188]                       invisible(muffled)
[18:04:03.188]                     }
[18:04:03.188]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.188]                   }
[18:04:03.188]                 }
[18:04:03.188]             }
[18:04:03.188]         }))
[18:04:03.188]     }, error = function(ex) {
[18:04:03.188]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.188]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.188]                 ...future.rng), started = ...future.startTime, 
[18:04:03.188]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.188]             version = "1.8"), class = "FutureResult")
[18:04:03.188]     }, finally = {
[18:04:03.188]         if (!identical(...future.workdir, getwd())) 
[18:04:03.188]             setwd(...future.workdir)
[18:04:03.188]         {
[18:04:03.188]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.188]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.188]             }
[18:04:03.188]             base::options(...future.oldOptions)
[18:04:03.188]             if (.Platform$OS.type == "windows") {
[18:04:03.188]                 old_names <- names(...future.oldEnvVars)
[18:04:03.188]                 envs <- base::Sys.getenv()
[18:04:03.188]                 names <- names(envs)
[18:04:03.188]                 common <- intersect(names, old_names)
[18:04:03.188]                 added <- setdiff(names, old_names)
[18:04:03.188]                 removed <- setdiff(old_names, names)
[18:04:03.188]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.188]                   envs[common]]
[18:04:03.188]                 NAMES <- toupper(changed)
[18:04:03.188]                 args <- list()
[18:04:03.188]                 for (kk in seq_along(NAMES)) {
[18:04:03.188]                   name <- changed[[kk]]
[18:04:03.188]                   NAME <- NAMES[[kk]]
[18:04:03.188]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.188]                     next
[18:04:03.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.188]                 }
[18:04:03.188]                 NAMES <- toupper(added)
[18:04:03.188]                 for (kk in seq_along(NAMES)) {
[18:04:03.188]                   name <- added[[kk]]
[18:04:03.188]                   NAME <- NAMES[[kk]]
[18:04:03.188]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.188]                     next
[18:04:03.188]                   args[[name]] <- ""
[18:04:03.188]                 }
[18:04:03.188]                 NAMES <- toupper(removed)
[18:04:03.188]                 for (kk in seq_along(NAMES)) {
[18:04:03.188]                   name <- removed[[kk]]
[18:04:03.188]                   NAME <- NAMES[[kk]]
[18:04:03.188]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.188]                     next
[18:04:03.188]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.188]                 }
[18:04:03.188]                 if (length(args) > 0) 
[18:04:03.188]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.188]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.188]             }
[18:04:03.188]             else {
[18:04:03.188]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.188]             }
[18:04:03.188]             {
[18:04:03.188]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.188]                   0L) {
[18:04:03.188]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.188]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.188]                   base::options(opts)
[18:04:03.188]                 }
[18:04:03.188]                 {
[18:04:03.188]                   {
[18:04:03.188]                     NULL
[18:04:03.188]                     RNGkind("Mersenne-Twister")
[18:04:03.188]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:03.188]                       inherits = FALSE)
[18:04:03.188]                   }
[18:04:03.188]                   options(future.plan = NULL)
[18:04:03.188]                   if (is.na(NA_character_)) 
[18:04:03.188]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.188]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.188]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.188]                     .init = FALSE)
[18:04:03.188]                 }
[18:04:03.188]             }
[18:04:03.188]         }
[18:04:03.188]     })
[18:04:03.188]     if (TRUE) {
[18:04:03.188]         base::sink(type = "output", split = FALSE)
[18:04:03.188]         if (TRUE) {
[18:04:03.188]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.188]         }
[18:04:03.188]         else {
[18:04:03.188]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.188]         }
[18:04:03.188]         base::close(...future.stdout)
[18:04:03.188]         ...future.stdout <- NULL
[18:04:03.188]     }
[18:04:03.188]     ...future.result$conditions <- ...future.conditions
[18:04:03.188]     ...future.result$finished <- base::Sys.time()
[18:04:03.188]     ...future.result
[18:04:03.188] }
[18:04:03.191] assign_globals() ...
[18:04:03.191] List of 1
[18:04:03.191]  $ a: num 1
[18:04:03.191]  - attr(*, "where")=List of 1
[18:04:03.191]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.191]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.191]  - attr(*, "resolved")= logi FALSE
[18:04:03.191]  - attr(*, "total_size")= num 56
[18:04:03.191]  - attr(*, "already-done")= logi TRUE
[18:04:03.197] - copied ‘a’ to environment
[18:04:03.197] assign_globals() ... done
[18:04:03.198] plan(): Setting new future strategy stack:
[18:04:03.198] List of future strategies:
[18:04:03.198] 1. sequential:
[18:04:03.198]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.198]    - tweaked: FALSE
[18:04:03.198]    - call: NULL
[18:04:03.199] plan(): nbrOfWorkers() = 1
[18:04:03.201] plan(): Setting new future strategy stack:
[18:04:03.201] List of future strategies:
[18:04:03.201] 1. sequential:
[18:04:03.201]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.201]    - tweaked: FALSE
[18:04:03.201]    - call: plan(strategy)
[18:04:03.202] plan(): nbrOfWorkers() = 1
[18:04:03.202] SequentialFuture started (and completed)
[18:04:03.203] - Launch lazy future ... done
[18:04:03.203] run() for ‘SequentialFuture’ ... done
[18:04:03.203] getGlobalsAndPackages() ...
[18:04:03.204] Searching for globals...
[18:04:03.205] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.206] Searching for globals ... DONE
[18:04:03.206] Resolving globals: FALSE
[18:04:03.207] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.208] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.208] - globals: [1] ‘a’
[18:04:03.208] 
[18:04:03.208] getGlobalsAndPackages() ... DONE
[18:04:03.209] run() for ‘Future’ ...
[18:04:03.209] - state: ‘created’
[18:04:03.209] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:03.210] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:03.210] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:03.211]   - Field: ‘label’
[18:04:03.211]   - Field: ‘local’
[18:04:03.211]   - Field: ‘owner’
[18:04:03.211]   - Field: ‘envir’
[18:04:03.211]   - Field: ‘packages’
[18:04:03.212]   - Field: ‘gc’
[18:04:03.212]   - Field: ‘conditions’
[18:04:03.212]   - Field: ‘expr’
[18:04:03.212]   - Field: ‘uuid’
[18:04:03.212]   - Field: ‘seed’
[18:04:03.213]   - Field: ‘version’
[18:04:03.213]   - Field: ‘result’
[18:04:03.213]   - Field: ‘asynchronous’
[18:04:03.213]   - Field: ‘calls’
[18:04:03.213]   - Field: ‘globals’
[18:04:03.214]   - Field: ‘stdout’
[18:04:03.214]   - Field: ‘earlySignal’
[18:04:03.214]   - Field: ‘lazy’
[18:04:03.214]   - Field: ‘state’
[18:04:03.214] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:03.215] - Launch lazy future ...
[18:04:03.215] Packages needed by the future expression (n = 0): <none>
[18:04:03.215] Packages needed by future strategies (n = 0): <none>
[18:04:03.216] {
[18:04:03.216]     {
[18:04:03.216]         {
[18:04:03.216]             ...future.startTime <- base::Sys.time()
[18:04:03.216]             {
[18:04:03.216]                 {
[18:04:03.216]                   {
[18:04:03.216]                     base::local({
[18:04:03.216]                       has_future <- base::requireNamespace("future", 
[18:04:03.216]                         quietly = TRUE)
[18:04:03.216]                       if (has_future) {
[18:04:03.216]                         ns <- base::getNamespace("future")
[18:04:03.216]                         version <- ns[[".package"]][["version"]]
[18:04:03.216]                         if (is.null(version)) 
[18:04:03.216]                           version <- utils::packageVersion("future")
[18:04:03.216]                       }
[18:04:03.216]                       else {
[18:04:03.216]                         version <- NULL
[18:04:03.216]                       }
[18:04:03.216]                       if (!has_future || version < "1.8.0") {
[18:04:03.216]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.216]                           "", base::R.version$version.string), 
[18:04:03.216]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:03.216]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.216]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.216]                             "release", "version")], collapse = " "), 
[18:04:03.216]                           hostname = base::Sys.info()[["nodename"]])
[18:04:03.216]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.216]                           info)
[18:04:03.216]                         info <- base::paste(info, collapse = "; ")
[18:04:03.216]                         if (!has_future) {
[18:04:03.216]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.216]                             info)
[18:04:03.216]                         }
[18:04:03.216]                         else {
[18:04:03.216]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.216]                             info, version)
[18:04:03.216]                         }
[18:04:03.216]                         base::stop(msg)
[18:04:03.216]                       }
[18:04:03.216]                     })
[18:04:03.216]                   }
[18:04:03.216]                   ...future.strategy.old <- future::plan("list")
[18:04:03.216]                   options(future.plan = NULL)
[18:04:03.216]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.216]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.216]                 }
[18:04:03.216]                 ...future.workdir <- getwd()
[18:04:03.216]             }
[18:04:03.216]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.216]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.216]         }
[18:04:03.216]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.216]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.216]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.216]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.216]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.216]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.216]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.216]             base::names(...future.oldOptions))
[18:04:03.216]     }
[18:04:03.216]     if (FALSE) {
[18:04:03.216]     }
[18:04:03.216]     else {
[18:04:03.216]         if (TRUE) {
[18:04:03.216]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.216]                 open = "w")
[18:04:03.216]         }
[18:04:03.216]         else {
[18:04:03.216]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.216]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.216]         }
[18:04:03.216]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.216]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.216]             base::sink(type = "output", split = FALSE)
[18:04:03.216]             base::close(...future.stdout)
[18:04:03.216]         }, add = TRUE)
[18:04:03.216]     }
[18:04:03.216]     ...future.frame <- base::sys.nframe()
[18:04:03.216]     ...future.conditions <- base::list()
[18:04:03.216]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.216]     if (FALSE) {
[18:04:03.216]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.216]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.216]     }
[18:04:03.216]     ...future.result <- base::tryCatch({
[18:04:03.216]         base::withCallingHandlers({
[18:04:03.216]             ...future.value <- base::withVisible(base::local({
[18:04:03.216]                 2 * a
[18:04:03.216]             }))
[18:04:03.216]             future::FutureResult(value = ...future.value$value, 
[18:04:03.216]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.216]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.216]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.216]                     ...future.globalenv.names))
[18:04:03.216]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.216]         }, condition = base::local({
[18:04:03.216]             c <- base::c
[18:04:03.216]             inherits <- base::inherits
[18:04:03.216]             invokeRestart <- base::invokeRestart
[18:04:03.216]             length <- base::length
[18:04:03.216]             list <- base::list
[18:04:03.216]             seq.int <- base::seq.int
[18:04:03.216]             signalCondition <- base::signalCondition
[18:04:03.216]             sys.calls <- base::sys.calls
[18:04:03.216]             `[[` <- base::`[[`
[18:04:03.216]             `+` <- base::`+`
[18:04:03.216]             `<<-` <- base::`<<-`
[18:04:03.216]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.216]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.216]                   3L)]
[18:04:03.216]             }
[18:04:03.216]             function(cond) {
[18:04:03.216]                 is_error <- inherits(cond, "error")
[18:04:03.216]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.216]                   NULL)
[18:04:03.216]                 if (is_error) {
[18:04:03.216]                   sessionInformation <- function() {
[18:04:03.216]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.216]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.216]                       search = base::search(), system = base::Sys.info())
[18:04:03.216]                   }
[18:04:03.216]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.216]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.216]                     cond$call), session = sessionInformation(), 
[18:04:03.216]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.216]                   signalCondition(cond)
[18:04:03.216]                 }
[18:04:03.216]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.216]                 "immediateCondition"))) {
[18:04:03.216]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.216]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.216]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.216]                   if (TRUE && !signal) {
[18:04:03.216]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.216]                     {
[18:04:03.216]                       inherits <- base::inherits
[18:04:03.216]                       invokeRestart <- base::invokeRestart
[18:04:03.216]                       is.null <- base::is.null
[18:04:03.216]                       muffled <- FALSE
[18:04:03.216]                       if (inherits(cond, "message")) {
[18:04:03.216]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.216]                         if (muffled) 
[18:04:03.216]                           invokeRestart("muffleMessage")
[18:04:03.216]                       }
[18:04:03.216]                       else if (inherits(cond, "warning")) {
[18:04:03.216]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.216]                         if (muffled) 
[18:04:03.216]                           invokeRestart("muffleWarning")
[18:04:03.216]                       }
[18:04:03.216]                       else if (inherits(cond, "condition")) {
[18:04:03.216]                         if (!is.null(pattern)) {
[18:04:03.216]                           computeRestarts <- base::computeRestarts
[18:04:03.216]                           grepl <- base::grepl
[18:04:03.216]                           restarts <- computeRestarts(cond)
[18:04:03.216]                           for (restart in restarts) {
[18:04:03.216]                             name <- restart$name
[18:04:03.216]                             if (is.null(name)) 
[18:04:03.216]                               next
[18:04:03.216]                             if (!grepl(pattern, name)) 
[18:04:03.216]                               next
[18:04:03.216]                             invokeRestart(restart)
[18:04:03.216]                             muffled <- TRUE
[18:04:03.216]                             break
[18:04:03.216]                           }
[18:04:03.216]                         }
[18:04:03.216]                       }
[18:04:03.216]                       invisible(muffled)
[18:04:03.216]                     }
[18:04:03.216]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.216]                   }
[18:04:03.216]                 }
[18:04:03.216]                 else {
[18:04:03.216]                   if (TRUE) {
[18:04:03.216]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.216]                     {
[18:04:03.216]                       inherits <- base::inherits
[18:04:03.216]                       invokeRestart <- base::invokeRestart
[18:04:03.216]                       is.null <- base::is.null
[18:04:03.216]                       muffled <- FALSE
[18:04:03.216]                       if (inherits(cond, "message")) {
[18:04:03.216]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.216]                         if (muffled) 
[18:04:03.216]                           invokeRestart("muffleMessage")
[18:04:03.216]                       }
[18:04:03.216]                       else if (inherits(cond, "warning")) {
[18:04:03.216]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.216]                         if (muffled) 
[18:04:03.216]                           invokeRestart("muffleWarning")
[18:04:03.216]                       }
[18:04:03.216]                       else if (inherits(cond, "condition")) {
[18:04:03.216]                         if (!is.null(pattern)) {
[18:04:03.216]                           computeRestarts <- base::computeRestarts
[18:04:03.216]                           grepl <- base::grepl
[18:04:03.216]                           restarts <- computeRestarts(cond)
[18:04:03.216]                           for (restart in restarts) {
[18:04:03.216]                             name <- restart$name
[18:04:03.216]                             if (is.null(name)) 
[18:04:03.216]                               next
[18:04:03.216]                             if (!grepl(pattern, name)) 
[18:04:03.216]                               next
[18:04:03.216]                             invokeRestart(restart)
[18:04:03.216]                             muffled <- TRUE
[18:04:03.216]                             break
[18:04:03.216]                           }
[18:04:03.216]                         }
[18:04:03.216]                       }
[18:04:03.216]                       invisible(muffled)
[18:04:03.216]                     }
[18:04:03.216]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.216]                   }
[18:04:03.216]                 }
[18:04:03.216]             }
[18:04:03.216]         }))
[18:04:03.216]     }, error = function(ex) {
[18:04:03.216]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.216]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.216]                 ...future.rng), started = ...future.startTime, 
[18:04:03.216]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.216]             version = "1.8"), class = "FutureResult")
[18:04:03.216]     }, finally = {
[18:04:03.216]         if (!identical(...future.workdir, getwd())) 
[18:04:03.216]             setwd(...future.workdir)
[18:04:03.216]         {
[18:04:03.216]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.216]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.216]             }
[18:04:03.216]             base::options(...future.oldOptions)
[18:04:03.216]             if (.Platform$OS.type == "windows") {
[18:04:03.216]                 old_names <- names(...future.oldEnvVars)
[18:04:03.216]                 envs <- base::Sys.getenv()
[18:04:03.216]                 names <- names(envs)
[18:04:03.216]                 common <- intersect(names, old_names)
[18:04:03.216]                 added <- setdiff(names, old_names)
[18:04:03.216]                 removed <- setdiff(old_names, names)
[18:04:03.216]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.216]                   envs[common]]
[18:04:03.216]                 NAMES <- toupper(changed)
[18:04:03.216]                 args <- list()
[18:04:03.216]                 for (kk in seq_along(NAMES)) {
[18:04:03.216]                   name <- changed[[kk]]
[18:04:03.216]                   NAME <- NAMES[[kk]]
[18:04:03.216]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.216]                     next
[18:04:03.216]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.216]                 }
[18:04:03.216]                 NAMES <- toupper(added)
[18:04:03.216]                 for (kk in seq_along(NAMES)) {
[18:04:03.216]                   name <- added[[kk]]
[18:04:03.216]                   NAME <- NAMES[[kk]]
[18:04:03.216]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.216]                     next
[18:04:03.216]                   args[[name]] <- ""
[18:04:03.216]                 }
[18:04:03.216]                 NAMES <- toupper(removed)
[18:04:03.216]                 for (kk in seq_along(NAMES)) {
[18:04:03.216]                   name <- removed[[kk]]
[18:04:03.216]                   NAME <- NAMES[[kk]]
[18:04:03.216]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.216]                     next
[18:04:03.216]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.216]                 }
[18:04:03.216]                 if (length(args) > 0) 
[18:04:03.216]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.216]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.216]             }
[18:04:03.216]             else {
[18:04:03.216]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.216]             }
[18:04:03.216]             {
[18:04:03.216]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.216]                   0L) {
[18:04:03.216]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.216]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.216]                   base::options(opts)
[18:04:03.216]                 }
[18:04:03.216]                 {
[18:04:03.216]                   {
[18:04:03.216]                     NULL
[18:04:03.216]                     RNGkind("Mersenne-Twister")
[18:04:03.216]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:03.216]                       inherits = FALSE)
[18:04:03.216]                   }
[18:04:03.216]                   options(future.plan = NULL)
[18:04:03.216]                   if (is.na(NA_character_)) 
[18:04:03.216]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.216]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.216]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.216]                     .init = FALSE)
[18:04:03.216]                 }
[18:04:03.216]             }
[18:04:03.216]         }
[18:04:03.216]     })
[18:04:03.216]     if (TRUE) {
[18:04:03.216]         base::sink(type = "output", split = FALSE)
[18:04:03.216]         if (TRUE) {
[18:04:03.216]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.216]         }
[18:04:03.216]         else {
[18:04:03.216]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.216]         }
[18:04:03.216]         base::close(...future.stdout)
[18:04:03.216]         ...future.stdout <- NULL
[18:04:03.216]     }
[18:04:03.216]     ...future.result$conditions <- ...future.conditions
[18:04:03.216]     ...future.result$finished <- base::Sys.time()
[18:04:03.216]     ...future.result
[18:04:03.216] }
[18:04:03.219] assign_globals() ...
[18:04:03.220] List of 1
[18:04:03.220]  $ a: num 1
[18:04:03.220]  - attr(*, "where")=List of 1
[18:04:03.220]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.220]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.220]  - attr(*, "resolved")= logi FALSE
[18:04:03.220]  - attr(*, "total_size")= num 56
[18:04:03.220]  - attr(*, "already-done")= logi TRUE
[18:04:03.225] - copied ‘a’ to environment
[18:04:03.225] assign_globals() ... done
[18:04:03.226] plan(): Setting new future strategy stack:
[18:04:03.226] List of future strategies:
[18:04:03.226] 1. sequential:
[18:04:03.226]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.226]    - tweaked: FALSE
[18:04:03.226]    - call: NULL
[18:04:03.227] plan(): nbrOfWorkers() = 1
[18:04:03.229] plan(): Setting new future strategy stack:
[18:04:03.229] List of future strategies:
[18:04:03.229] 1. sequential:
[18:04:03.229]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.229]    - tweaked: FALSE
[18:04:03.229]    - call: plan(strategy)
[18:04:03.230] plan(): nbrOfWorkers() = 1
[18:04:03.230] SequentialFuture started (and completed)
[18:04:03.231] - Launch lazy future ... done
[18:04:03.231] run() for ‘SequentialFuture’ ... done
[18:04:03.231] getGlobalsAndPackages() ...
[18:04:03.232] Searching for globals...
[18:04:03.234] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.234] Searching for globals ... DONE
[18:04:03.234] Resolving globals: FALSE
[18:04:03.235] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.236] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.236] - globals: [1] ‘a’
[18:04:03.236] 
[18:04:03.236] getGlobalsAndPackages() ... DONE
[18:04:03.237] run() for ‘Future’ ...
[18:04:03.237] - state: ‘created’
[18:04:03.237] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:03.238] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:03.238] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:03.239]   - Field: ‘label’
[18:04:03.239]   - Field: ‘local’
[18:04:03.239]   - Field: ‘owner’
[18:04:03.239]   - Field: ‘envir’
[18:04:03.239]   - Field: ‘packages’
[18:04:03.240]   - Field: ‘gc’
[18:04:03.240]   - Field: ‘conditions’
[18:04:03.240]   - Field: ‘expr’
[18:04:03.240]   - Field: ‘uuid’
[18:04:03.240]   - Field: ‘seed’
[18:04:03.241]   - Field: ‘version’
[18:04:03.241]   - Field: ‘result’
[18:04:03.241]   - Field: ‘asynchronous’
[18:04:03.241]   - Field: ‘calls’
[18:04:03.242]   - Field: ‘globals’
[18:04:03.242]   - Field: ‘stdout’
[18:04:03.242]   - Field: ‘earlySignal’
[18:04:03.242]   - Field: ‘lazy’
[18:04:03.242]   - Field: ‘state’
[18:04:03.243] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:03.243] - Launch lazy future ...
[18:04:03.243] Packages needed by the future expression (n = 0): <none>
[18:04:03.243] Packages needed by future strategies (n = 0): <none>
[18:04:03.247] {
[18:04:03.247]     {
[18:04:03.247]         {
[18:04:03.247]             ...future.startTime <- base::Sys.time()
[18:04:03.247]             {
[18:04:03.247]                 {
[18:04:03.247]                   {
[18:04:03.247]                     base::local({
[18:04:03.247]                       has_future <- base::requireNamespace("future", 
[18:04:03.247]                         quietly = TRUE)
[18:04:03.247]                       if (has_future) {
[18:04:03.247]                         ns <- base::getNamespace("future")
[18:04:03.247]                         version <- ns[[".package"]][["version"]]
[18:04:03.247]                         if (is.null(version)) 
[18:04:03.247]                           version <- utils::packageVersion("future")
[18:04:03.247]                       }
[18:04:03.247]                       else {
[18:04:03.247]                         version <- NULL
[18:04:03.247]                       }
[18:04:03.247]                       if (!has_future || version < "1.8.0") {
[18:04:03.247]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.247]                           "", base::R.version$version.string), 
[18:04:03.247]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:03.247]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.247]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.247]                             "release", "version")], collapse = " "), 
[18:04:03.247]                           hostname = base::Sys.info()[["nodename"]])
[18:04:03.247]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.247]                           info)
[18:04:03.247]                         info <- base::paste(info, collapse = "; ")
[18:04:03.247]                         if (!has_future) {
[18:04:03.247]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.247]                             info)
[18:04:03.247]                         }
[18:04:03.247]                         else {
[18:04:03.247]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.247]                             info, version)
[18:04:03.247]                         }
[18:04:03.247]                         base::stop(msg)
[18:04:03.247]                       }
[18:04:03.247]                     })
[18:04:03.247]                   }
[18:04:03.247]                   ...future.strategy.old <- future::plan("list")
[18:04:03.247]                   options(future.plan = NULL)
[18:04:03.247]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.247]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.247]                 }
[18:04:03.247]                 ...future.workdir <- getwd()
[18:04:03.247]             }
[18:04:03.247]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.247]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.247]         }
[18:04:03.247]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.247]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.247]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.247]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.247]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.247]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.247]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.247]             base::names(...future.oldOptions))
[18:04:03.247]     }
[18:04:03.247]     if (FALSE) {
[18:04:03.247]     }
[18:04:03.247]     else {
[18:04:03.247]         if (TRUE) {
[18:04:03.247]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.247]                 open = "w")
[18:04:03.247]         }
[18:04:03.247]         else {
[18:04:03.247]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.247]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.247]         }
[18:04:03.247]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.247]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.247]             base::sink(type = "output", split = FALSE)
[18:04:03.247]             base::close(...future.stdout)
[18:04:03.247]         }, add = TRUE)
[18:04:03.247]     }
[18:04:03.247]     ...future.frame <- base::sys.nframe()
[18:04:03.247]     ...future.conditions <- base::list()
[18:04:03.247]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.247]     if (FALSE) {
[18:04:03.247]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.247]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.247]     }
[18:04:03.247]     ...future.result <- base::tryCatch({
[18:04:03.247]         base::withCallingHandlers({
[18:04:03.247]             ...future.value <- base::withVisible(base::local({
[18:04:03.247]                 2 * a
[18:04:03.247]             }))
[18:04:03.247]             future::FutureResult(value = ...future.value$value, 
[18:04:03.247]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.247]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.247]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.247]                     ...future.globalenv.names))
[18:04:03.247]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.247]         }, condition = base::local({
[18:04:03.247]             c <- base::c
[18:04:03.247]             inherits <- base::inherits
[18:04:03.247]             invokeRestart <- base::invokeRestart
[18:04:03.247]             length <- base::length
[18:04:03.247]             list <- base::list
[18:04:03.247]             seq.int <- base::seq.int
[18:04:03.247]             signalCondition <- base::signalCondition
[18:04:03.247]             sys.calls <- base::sys.calls
[18:04:03.247]             `[[` <- base::`[[`
[18:04:03.247]             `+` <- base::`+`
[18:04:03.247]             `<<-` <- base::`<<-`
[18:04:03.247]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.247]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.247]                   3L)]
[18:04:03.247]             }
[18:04:03.247]             function(cond) {
[18:04:03.247]                 is_error <- inherits(cond, "error")
[18:04:03.247]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.247]                   NULL)
[18:04:03.247]                 if (is_error) {
[18:04:03.247]                   sessionInformation <- function() {
[18:04:03.247]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.247]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.247]                       search = base::search(), system = base::Sys.info())
[18:04:03.247]                   }
[18:04:03.247]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.247]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.247]                     cond$call), session = sessionInformation(), 
[18:04:03.247]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.247]                   signalCondition(cond)
[18:04:03.247]                 }
[18:04:03.247]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.247]                 "immediateCondition"))) {
[18:04:03.247]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.247]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.247]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.247]                   if (TRUE && !signal) {
[18:04:03.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.247]                     {
[18:04:03.247]                       inherits <- base::inherits
[18:04:03.247]                       invokeRestart <- base::invokeRestart
[18:04:03.247]                       is.null <- base::is.null
[18:04:03.247]                       muffled <- FALSE
[18:04:03.247]                       if (inherits(cond, "message")) {
[18:04:03.247]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.247]                         if (muffled) 
[18:04:03.247]                           invokeRestart("muffleMessage")
[18:04:03.247]                       }
[18:04:03.247]                       else if (inherits(cond, "warning")) {
[18:04:03.247]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.247]                         if (muffled) 
[18:04:03.247]                           invokeRestart("muffleWarning")
[18:04:03.247]                       }
[18:04:03.247]                       else if (inherits(cond, "condition")) {
[18:04:03.247]                         if (!is.null(pattern)) {
[18:04:03.247]                           computeRestarts <- base::computeRestarts
[18:04:03.247]                           grepl <- base::grepl
[18:04:03.247]                           restarts <- computeRestarts(cond)
[18:04:03.247]                           for (restart in restarts) {
[18:04:03.247]                             name <- restart$name
[18:04:03.247]                             if (is.null(name)) 
[18:04:03.247]                               next
[18:04:03.247]                             if (!grepl(pattern, name)) 
[18:04:03.247]                               next
[18:04:03.247]                             invokeRestart(restart)
[18:04:03.247]                             muffled <- TRUE
[18:04:03.247]                             break
[18:04:03.247]                           }
[18:04:03.247]                         }
[18:04:03.247]                       }
[18:04:03.247]                       invisible(muffled)
[18:04:03.247]                     }
[18:04:03.247]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.247]                   }
[18:04:03.247]                 }
[18:04:03.247]                 else {
[18:04:03.247]                   if (TRUE) {
[18:04:03.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.247]                     {
[18:04:03.247]                       inherits <- base::inherits
[18:04:03.247]                       invokeRestart <- base::invokeRestart
[18:04:03.247]                       is.null <- base::is.null
[18:04:03.247]                       muffled <- FALSE
[18:04:03.247]                       if (inherits(cond, "message")) {
[18:04:03.247]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.247]                         if (muffled) 
[18:04:03.247]                           invokeRestart("muffleMessage")
[18:04:03.247]                       }
[18:04:03.247]                       else if (inherits(cond, "warning")) {
[18:04:03.247]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.247]                         if (muffled) 
[18:04:03.247]                           invokeRestart("muffleWarning")
[18:04:03.247]                       }
[18:04:03.247]                       else if (inherits(cond, "condition")) {
[18:04:03.247]                         if (!is.null(pattern)) {
[18:04:03.247]                           computeRestarts <- base::computeRestarts
[18:04:03.247]                           grepl <- base::grepl
[18:04:03.247]                           restarts <- computeRestarts(cond)
[18:04:03.247]                           for (restart in restarts) {
[18:04:03.247]                             name <- restart$name
[18:04:03.247]                             if (is.null(name)) 
[18:04:03.247]                               next
[18:04:03.247]                             if (!grepl(pattern, name)) 
[18:04:03.247]                               next
[18:04:03.247]                             invokeRestart(restart)
[18:04:03.247]                             muffled <- TRUE
[18:04:03.247]                             break
[18:04:03.247]                           }
[18:04:03.247]                         }
[18:04:03.247]                       }
[18:04:03.247]                       invisible(muffled)
[18:04:03.247]                     }
[18:04:03.247]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.247]                   }
[18:04:03.247]                 }
[18:04:03.247]             }
[18:04:03.247]         }))
[18:04:03.247]     }, error = function(ex) {
[18:04:03.247]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.247]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.247]                 ...future.rng), started = ...future.startTime, 
[18:04:03.247]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.247]             version = "1.8"), class = "FutureResult")
[18:04:03.247]     }, finally = {
[18:04:03.247]         if (!identical(...future.workdir, getwd())) 
[18:04:03.247]             setwd(...future.workdir)
[18:04:03.247]         {
[18:04:03.247]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.247]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.247]             }
[18:04:03.247]             base::options(...future.oldOptions)
[18:04:03.247]             if (.Platform$OS.type == "windows") {
[18:04:03.247]                 old_names <- names(...future.oldEnvVars)
[18:04:03.247]                 envs <- base::Sys.getenv()
[18:04:03.247]                 names <- names(envs)
[18:04:03.247]                 common <- intersect(names, old_names)
[18:04:03.247]                 added <- setdiff(names, old_names)
[18:04:03.247]                 removed <- setdiff(old_names, names)
[18:04:03.247]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.247]                   envs[common]]
[18:04:03.247]                 NAMES <- toupper(changed)
[18:04:03.247]                 args <- list()
[18:04:03.247]                 for (kk in seq_along(NAMES)) {
[18:04:03.247]                   name <- changed[[kk]]
[18:04:03.247]                   NAME <- NAMES[[kk]]
[18:04:03.247]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.247]                     next
[18:04:03.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.247]                 }
[18:04:03.247]                 NAMES <- toupper(added)
[18:04:03.247]                 for (kk in seq_along(NAMES)) {
[18:04:03.247]                   name <- added[[kk]]
[18:04:03.247]                   NAME <- NAMES[[kk]]
[18:04:03.247]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.247]                     next
[18:04:03.247]                   args[[name]] <- ""
[18:04:03.247]                 }
[18:04:03.247]                 NAMES <- toupper(removed)
[18:04:03.247]                 for (kk in seq_along(NAMES)) {
[18:04:03.247]                   name <- removed[[kk]]
[18:04:03.247]                   NAME <- NAMES[[kk]]
[18:04:03.247]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.247]                     next
[18:04:03.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.247]                 }
[18:04:03.247]                 if (length(args) > 0) 
[18:04:03.247]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.247]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.247]             }
[18:04:03.247]             else {
[18:04:03.247]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.247]             }
[18:04:03.247]             {
[18:04:03.247]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.247]                   0L) {
[18:04:03.247]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.247]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.247]                   base::options(opts)
[18:04:03.247]                 }
[18:04:03.247]                 {
[18:04:03.247]                   {
[18:04:03.247]                     NULL
[18:04:03.247]                     RNGkind("Mersenne-Twister")
[18:04:03.247]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:03.247]                       inherits = FALSE)
[18:04:03.247]                   }
[18:04:03.247]                   options(future.plan = NULL)
[18:04:03.247]                   if (is.na(NA_character_)) 
[18:04:03.247]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.247]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.247]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.247]                     .init = FALSE)
[18:04:03.247]                 }
[18:04:03.247]             }
[18:04:03.247]         }
[18:04:03.247]     })
[18:04:03.247]     if (TRUE) {
[18:04:03.247]         base::sink(type = "output", split = FALSE)
[18:04:03.247]         if (TRUE) {
[18:04:03.247]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.247]         }
[18:04:03.247]         else {
[18:04:03.247]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.247]         }
[18:04:03.247]         base::close(...future.stdout)
[18:04:03.247]         ...future.stdout <- NULL
[18:04:03.247]     }
[18:04:03.247]     ...future.result$conditions <- ...future.conditions
[18:04:03.247]     ...future.result$finished <- base::Sys.time()
[18:04:03.247]     ...future.result
[18:04:03.247] }
[18:04:03.250] assign_globals() ...
[18:04:03.250] List of 1
[18:04:03.250]  $ a: num 1
[18:04:03.250]  - attr(*, "where")=List of 1
[18:04:03.250]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.250]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.250]  - attr(*, "resolved")= logi FALSE
[18:04:03.250]  - attr(*, "total_size")= num 56
[18:04:03.250]  - attr(*, "already-done")= logi TRUE
[18:04:03.256] - copied ‘a’ to environment
[18:04:03.256] assign_globals() ... done
[18:04:03.257] plan(): Setting new future strategy stack:
[18:04:03.257] List of future strategies:
[18:04:03.257] 1. sequential:
[18:04:03.257]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.257]    - tweaked: FALSE
[18:04:03.257]    - call: NULL
[18:04:03.258] plan(): nbrOfWorkers() = 1
[18:04:03.259] plan(): Setting new future strategy stack:
[18:04:03.260] List of future strategies:
[18:04:03.260] 1. sequential:
[18:04:03.260]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.260]    - tweaked: FALSE
[18:04:03.260]    - call: plan(strategy)
[18:04:03.261] plan(): nbrOfWorkers() = 1
[18:04:03.261] SequentialFuture started (and completed)
[18:04:03.261] - Launch lazy future ... done
[18:04:03.262] run() for ‘SequentialFuture’ ... done
[18:04:03.262] getGlobalsAndPackages() ...
[18:04:03.263] Searching for globals...
[18:04:03.264] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.265] Searching for globals ... DONE
[18:04:03.265] Resolving globals: FALSE
[18:04:03.266] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.267] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.267] - globals: [1] ‘a’
[18:04:03.267] 
[18:04:03.267] getGlobalsAndPackages() ... DONE
[18:04:03.268] run() for ‘Future’ ...
[18:04:03.268] - state: ‘created’
[18:04:03.269] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:04:03.269] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:04:03.270] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:04:03.270]   - Field: ‘label’
[18:04:03.270]   - Field: ‘local’
[18:04:03.270]   - Field: ‘owner’
[18:04:03.271]   - Field: ‘envir’
[18:04:03.271]   - Field: ‘packages’
[18:04:03.271]   - Field: ‘gc’
[18:04:03.271]   - Field: ‘conditions’
[18:04:03.271]   - Field: ‘expr’
[18:04:03.272]   - Field: ‘uuid’
[18:04:03.272]   - Field: ‘seed’
[18:04:03.272]   - Field: ‘version’
[18:04:03.272]   - Field: ‘result’
[18:04:03.272]   - Field: ‘asynchronous’
[18:04:03.273]   - Field: ‘calls’
[18:04:03.273]   - Field: ‘globals’
[18:04:03.273]   - Field: ‘stdout’
[18:04:03.273]   - Field: ‘earlySignal’
[18:04:03.273]   - Field: ‘lazy’
[18:04:03.274]   - Field: ‘state’
[18:04:03.274] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:04:03.274] - Launch lazy future ...
[18:04:03.274] Packages needed by the future expression (n = 0): <none>
[18:04:03.275] Packages needed by future strategies (n = 0): <none>
[18:04:03.276] {
[18:04:03.276]     {
[18:04:03.276]         {
[18:04:03.276]             ...future.startTime <- base::Sys.time()
[18:04:03.276]             {
[18:04:03.276]                 {
[18:04:03.276]                   {
[18:04:03.276]                     base::local({
[18:04:03.276]                       has_future <- base::requireNamespace("future", 
[18:04:03.276]                         quietly = TRUE)
[18:04:03.276]                       if (has_future) {
[18:04:03.276]                         ns <- base::getNamespace("future")
[18:04:03.276]                         version <- ns[[".package"]][["version"]]
[18:04:03.276]                         if (is.null(version)) 
[18:04:03.276]                           version <- utils::packageVersion("future")
[18:04:03.276]                       }
[18:04:03.276]                       else {
[18:04:03.276]                         version <- NULL
[18:04:03.276]                       }
[18:04:03.276]                       if (!has_future || version < "1.8.0") {
[18:04:03.276]                         info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.276]                           "", base::R.version$version.string), 
[18:04:03.276]                           platform = base::sprintf("%s (%s-bit)", 
[18:04:03.276]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.276]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.276]                             "release", "version")], collapse = " "), 
[18:04:03.276]                           hostname = base::Sys.info()[["nodename"]])
[18:04:03.276]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.276]                           info)
[18:04:03.276]                         info <- base::paste(info, collapse = "; ")
[18:04:03.276]                         if (!has_future) {
[18:04:03.276]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.276]                             info)
[18:04:03.276]                         }
[18:04:03.276]                         else {
[18:04:03.276]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.276]                             info, version)
[18:04:03.276]                         }
[18:04:03.276]                         base::stop(msg)
[18:04:03.276]                       }
[18:04:03.276]                     })
[18:04:03.276]                   }
[18:04:03.276]                   ...future.strategy.old <- future::plan("list")
[18:04:03.276]                   options(future.plan = NULL)
[18:04:03.276]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.276]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.276]                 }
[18:04:03.276]                 ...future.workdir <- getwd()
[18:04:03.276]             }
[18:04:03.276]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.276]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.276]         }
[18:04:03.276]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.276]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.276]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.276]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.276]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.276]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.276]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.276]             base::names(...future.oldOptions))
[18:04:03.276]     }
[18:04:03.276]     if (FALSE) {
[18:04:03.276]     }
[18:04:03.276]     else {
[18:04:03.276]         if (TRUE) {
[18:04:03.276]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.276]                 open = "w")
[18:04:03.276]         }
[18:04:03.276]         else {
[18:04:03.276]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.276]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.276]         }
[18:04:03.276]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.276]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.276]             base::sink(type = "output", split = FALSE)
[18:04:03.276]             base::close(...future.stdout)
[18:04:03.276]         }, add = TRUE)
[18:04:03.276]     }
[18:04:03.276]     ...future.frame <- base::sys.nframe()
[18:04:03.276]     ...future.conditions <- base::list()
[18:04:03.276]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.276]     if (FALSE) {
[18:04:03.276]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.276]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.276]     }
[18:04:03.276]     ...future.result <- base::tryCatch({
[18:04:03.276]         base::withCallingHandlers({
[18:04:03.276]             ...future.value <- base::withVisible(base::local({
[18:04:03.276]                 2 * a
[18:04:03.276]             }))
[18:04:03.276]             future::FutureResult(value = ...future.value$value, 
[18:04:03.276]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.276]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.276]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.276]                     ...future.globalenv.names))
[18:04:03.276]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.276]         }, condition = base::local({
[18:04:03.276]             c <- base::c
[18:04:03.276]             inherits <- base::inherits
[18:04:03.276]             invokeRestart <- base::invokeRestart
[18:04:03.276]             length <- base::length
[18:04:03.276]             list <- base::list
[18:04:03.276]             seq.int <- base::seq.int
[18:04:03.276]             signalCondition <- base::signalCondition
[18:04:03.276]             sys.calls <- base::sys.calls
[18:04:03.276]             `[[` <- base::`[[`
[18:04:03.276]             `+` <- base::`+`
[18:04:03.276]             `<<-` <- base::`<<-`
[18:04:03.276]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.276]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.276]                   3L)]
[18:04:03.276]             }
[18:04:03.276]             function(cond) {
[18:04:03.276]                 is_error <- inherits(cond, "error")
[18:04:03.276]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.276]                   NULL)
[18:04:03.276]                 if (is_error) {
[18:04:03.276]                   sessionInformation <- function() {
[18:04:03.276]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.276]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.276]                       search = base::search(), system = base::Sys.info())
[18:04:03.276]                   }
[18:04:03.276]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.276]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.276]                     cond$call), session = sessionInformation(), 
[18:04:03.276]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.276]                   signalCondition(cond)
[18:04:03.276]                 }
[18:04:03.276]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.276]                 "immediateCondition"))) {
[18:04:03.276]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.276]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.276]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.276]                   if (TRUE && !signal) {
[18:04:03.276]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.276]                     {
[18:04:03.276]                       inherits <- base::inherits
[18:04:03.276]                       invokeRestart <- base::invokeRestart
[18:04:03.276]                       is.null <- base::is.null
[18:04:03.276]                       muffled <- FALSE
[18:04:03.276]                       if (inherits(cond, "message")) {
[18:04:03.276]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.276]                         if (muffled) 
[18:04:03.276]                           invokeRestart("muffleMessage")
[18:04:03.276]                       }
[18:04:03.276]                       else if (inherits(cond, "warning")) {
[18:04:03.276]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.276]                         if (muffled) 
[18:04:03.276]                           invokeRestart("muffleWarning")
[18:04:03.276]                       }
[18:04:03.276]                       else if (inherits(cond, "condition")) {
[18:04:03.276]                         if (!is.null(pattern)) {
[18:04:03.276]                           computeRestarts <- base::computeRestarts
[18:04:03.276]                           grepl <- base::grepl
[18:04:03.276]                           restarts <- computeRestarts(cond)
[18:04:03.276]                           for (restart in restarts) {
[18:04:03.276]                             name <- restart$name
[18:04:03.276]                             if (is.null(name)) 
[18:04:03.276]                               next
[18:04:03.276]                             if (!grepl(pattern, name)) 
[18:04:03.276]                               next
[18:04:03.276]                             invokeRestart(restart)
[18:04:03.276]                             muffled <- TRUE
[18:04:03.276]                             break
[18:04:03.276]                           }
[18:04:03.276]                         }
[18:04:03.276]                       }
[18:04:03.276]                       invisible(muffled)
[18:04:03.276]                     }
[18:04:03.276]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.276]                   }
[18:04:03.276]                 }
[18:04:03.276]                 else {
[18:04:03.276]                   if (TRUE) {
[18:04:03.276]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.276]                     {
[18:04:03.276]                       inherits <- base::inherits
[18:04:03.276]                       invokeRestart <- base::invokeRestart
[18:04:03.276]                       is.null <- base::is.null
[18:04:03.276]                       muffled <- FALSE
[18:04:03.276]                       if (inherits(cond, "message")) {
[18:04:03.276]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.276]                         if (muffled) 
[18:04:03.276]                           invokeRestart("muffleMessage")
[18:04:03.276]                       }
[18:04:03.276]                       else if (inherits(cond, "warning")) {
[18:04:03.276]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.276]                         if (muffled) 
[18:04:03.276]                           invokeRestart("muffleWarning")
[18:04:03.276]                       }
[18:04:03.276]                       else if (inherits(cond, "condition")) {
[18:04:03.276]                         if (!is.null(pattern)) {
[18:04:03.276]                           computeRestarts <- base::computeRestarts
[18:04:03.276]                           grepl <- base::grepl
[18:04:03.276]                           restarts <- computeRestarts(cond)
[18:04:03.276]                           for (restart in restarts) {
[18:04:03.276]                             name <- restart$name
[18:04:03.276]                             if (is.null(name)) 
[18:04:03.276]                               next
[18:04:03.276]                             if (!grepl(pattern, name)) 
[18:04:03.276]                               next
[18:04:03.276]                             invokeRestart(restart)
[18:04:03.276]                             muffled <- TRUE
[18:04:03.276]                             break
[18:04:03.276]                           }
[18:04:03.276]                         }
[18:04:03.276]                       }
[18:04:03.276]                       invisible(muffled)
[18:04:03.276]                     }
[18:04:03.276]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.276]                   }
[18:04:03.276]                 }
[18:04:03.276]             }
[18:04:03.276]         }))
[18:04:03.276]     }, error = function(ex) {
[18:04:03.276]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.276]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.276]                 ...future.rng), started = ...future.startTime, 
[18:04:03.276]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.276]             version = "1.8"), class = "FutureResult")
[18:04:03.276]     }, finally = {
[18:04:03.276]         if (!identical(...future.workdir, getwd())) 
[18:04:03.276]             setwd(...future.workdir)
[18:04:03.276]         {
[18:04:03.276]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.276]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.276]             }
[18:04:03.276]             base::options(...future.oldOptions)
[18:04:03.276]             if (.Platform$OS.type == "windows") {
[18:04:03.276]                 old_names <- names(...future.oldEnvVars)
[18:04:03.276]                 envs <- base::Sys.getenv()
[18:04:03.276]                 names <- names(envs)
[18:04:03.276]                 common <- intersect(names, old_names)
[18:04:03.276]                 added <- setdiff(names, old_names)
[18:04:03.276]                 removed <- setdiff(old_names, names)
[18:04:03.276]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.276]                   envs[common]]
[18:04:03.276]                 NAMES <- toupper(changed)
[18:04:03.276]                 args <- list()
[18:04:03.276]                 for (kk in seq_along(NAMES)) {
[18:04:03.276]                   name <- changed[[kk]]
[18:04:03.276]                   NAME <- NAMES[[kk]]
[18:04:03.276]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.276]                     next
[18:04:03.276]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.276]                 }
[18:04:03.276]                 NAMES <- toupper(added)
[18:04:03.276]                 for (kk in seq_along(NAMES)) {
[18:04:03.276]                   name <- added[[kk]]
[18:04:03.276]                   NAME <- NAMES[[kk]]
[18:04:03.276]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.276]                     next
[18:04:03.276]                   args[[name]] <- ""
[18:04:03.276]                 }
[18:04:03.276]                 NAMES <- toupper(removed)
[18:04:03.276]                 for (kk in seq_along(NAMES)) {
[18:04:03.276]                   name <- removed[[kk]]
[18:04:03.276]                   NAME <- NAMES[[kk]]
[18:04:03.276]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.276]                     next
[18:04:03.276]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.276]                 }
[18:04:03.276]                 if (length(args) > 0) 
[18:04:03.276]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.276]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.276]             }
[18:04:03.276]             else {
[18:04:03.276]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.276]             }
[18:04:03.276]             {
[18:04:03.276]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.276]                   0L) {
[18:04:03.276]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.276]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.276]                   base::options(opts)
[18:04:03.276]                 }
[18:04:03.276]                 {
[18:04:03.276]                   {
[18:04:03.276]                     NULL
[18:04:03.276]                     RNGkind("Mersenne-Twister")
[18:04:03.276]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:04:03.276]                       inherits = FALSE)
[18:04:03.276]                   }
[18:04:03.276]                   options(future.plan = NULL)
[18:04:03.276]                   if (is.na(NA_character_)) 
[18:04:03.276]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.276]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.276]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.276]                     .init = FALSE)
[18:04:03.276]                 }
[18:04:03.276]             }
[18:04:03.276]         }
[18:04:03.276]     })
[18:04:03.276]     if (TRUE) {
[18:04:03.276]         base::sink(type = "output", split = FALSE)
[18:04:03.276]         if (TRUE) {
[18:04:03.276]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.276]         }
[18:04:03.276]         else {
[18:04:03.276]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.276]         }
[18:04:03.276]         base::close(...future.stdout)
[18:04:03.276]         ...future.stdout <- NULL
[18:04:03.276]     }
[18:04:03.276]     ...future.result$conditions <- ...future.conditions
[18:04:03.276]     ...future.result$finished <- base::Sys.time()
[18:04:03.276]     ...future.result
[18:04:03.276] }
[18:04:03.279] assign_globals() ...
[18:04:03.279] List of 1
[18:04:03.279]  $ a: num 1
[18:04:03.279]  - attr(*, "where")=List of 1
[18:04:03.279]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.279]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.279]  - attr(*, "resolved")= logi FALSE
[18:04:03.279]  - attr(*, "total_size")= num 56
[18:04:03.279]  - attr(*, "already-done")= logi TRUE
[18:04:03.285] - copied ‘a’ to environment
[18:04:03.285] assign_globals() ... done
[18:04:03.286] plan(): Setting new future strategy stack:
[18:04:03.286] List of future strategies:
[18:04:03.286] 1. sequential:
[18:04:03.286]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.286]    - tweaked: FALSE
[18:04:03.286]    - call: NULL
[18:04:03.287] plan(): nbrOfWorkers() = 1
[18:04:03.288] plan(): Setting new future strategy stack:
[18:04:03.289] List of future strategies:
[18:04:03.289] 1. sequential:
[18:04:03.289]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.289]    - tweaked: FALSE
[18:04:03.289]    - call: plan(strategy)
[18:04:03.290] plan(): nbrOfWorkers() = 1
[18:04:03.290] SequentialFuture started (and completed)
[18:04:03.290] - Launch lazy future ... done
[18:04:03.291] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[18:04:03.303] plan(): Setting new future strategy stack:
[18:04:03.303] List of future strategies:
[18:04:03.303] 1. multicore:
[18:04:03.303]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:03.303]    - tweaked: FALSE
[18:04:03.303]    - call: plan(strategy)
[18:04:03.309] plan(): nbrOfWorkers() = 2
[18:04:03.310] getGlobalsAndPackages() ...
[18:04:03.310] Searching for globals...
[18:04:03.311] - globals found: [1] ‘{’
[18:04:03.312] Searching for globals ... DONE
[18:04:03.312] Resolving globals: FALSE
[18:04:03.313] 
[18:04:03.313] 
[18:04:03.313] getGlobalsAndPackages() ... DONE
[18:04:03.314] run() for ‘Future’ ...
[18:04:03.314] - state: ‘created’
[18:04:03.315] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:03.326] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:03.326] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:03.326]   - Field: ‘label’
[18:04:03.327]   - Field: ‘local’
[18:04:03.327]   - Field: ‘owner’
[18:04:03.327]   - Field: ‘envir’
[18:04:03.327]   - Field: ‘workers’
[18:04:03.328]   - Field: ‘packages’
[18:04:03.328]   - Field: ‘gc’
[18:04:03.328]   - Field: ‘job’
[18:04:03.329]   - Field: ‘conditions’
[18:04:03.329]   - Field: ‘expr’
[18:04:03.329]   - Field: ‘uuid’
[18:04:03.329]   - Field: ‘seed’
[18:04:03.329]   - Field: ‘version’
[18:04:03.330]   - Field: ‘result’
[18:04:03.330]   - Field: ‘asynchronous’
[18:04:03.330]   - Field: ‘calls’
[18:04:03.330]   - Field: ‘globals’
[18:04:03.330]   - Field: ‘stdout’
[18:04:03.331]   - Field: ‘earlySignal’
[18:04:03.331]   - Field: ‘lazy’
[18:04:03.331]   - Field: ‘state’
[18:04:03.331] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:03.331] - Launch lazy future ...
[18:04:03.333] Packages needed by the future expression (n = 0): <none>
[18:04:03.334] Packages needed by future strategies (n = 0): <none>
[18:04:03.335] {
[18:04:03.335]     {
[18:04:03.335]         {
[18:04:03.335]             ...future.startTime <- base::Sys.time()
[18:04:03.335]             {
[18:04:03.335]                 {
[18:04:03.335]                   {
[18:04:03.335]                     {
[18:04:03.335]                       base::local({
[18:04:03.335]                         has_future <- base::requireNamespace("future", 
[18:04:03.335]                           quietly = TRUE)
[18:04:03.335]                         if (has_future) {
[18:04:03.335]                           ns <- base::getNamespace("future")
[18:04:03.335]                           version <- ns[[".package"]][["version"]]
[18:04:03.335]                           if (is.null(version)) 
[18:04:03.335]                             version <- utils::packageVersion("future")
[18:04:03.335]                         }
[18:04:03.335]                         else {
[18:04:03.335]                           version <- NULL
[18:04:03.335]                         }
[18:04:03.335]                         if (!has_future || version < "1.8.0") {
[18:04:03.335]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.335]                             "", base::R.version$version.string), 
[18:04:03.335]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:03.335]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.335]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.335]                               "release", "version")], collapse = " "), 
[18:04:03.335]                             hostname = base::Sys.info()[["nodename"]])
[18:04:03.335]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.335]                             info)
[18:04:03.335]                           info <- base::paste(info, collapse = "; ")
[18:04:03.335]                           if (!has_future) {
[18:04:03.335]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.335]                               info)
[18:04:03.335]                           }
[18:04:03.335]                           else {
[18:04:03.335]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.335]                               info, version)
[18:04:03.335]                           }
[18:04:03.335]                           base::stop(msg)
[18:04:03.335]                         }
[18:04:03.335]                       })
[18:04:03.335]                     }
[18:04:03.335]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:03.335]                     base::options(mc.cores = 1L)
[18:04:03.335]                   }
[18:04:03.335]                   ...future.strategy.old <- future::plan("list")
[18:04:03.335]                   options(future.plan = NULL)
[18:04:03.335]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.335]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.335]                 }
[18:04:03.335]                 ...future.workdir <- getwd()
[18:04:03.335]             }
[18:04:03.335]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.335]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.335]         }
[18:04:03.335]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.335]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.335]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.335]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.335]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.335]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.335]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.335]             base::names(...future.oldOptions))
[18:04:03.335]     }
[18:04:03.335]     if (FALSE) {
[18:04:03.335]     }
[18:04:03.335]     else {
[18:04:03.335]         if (TRUE) {
[18:04:03.335]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.335]                 open = "w")
[18:04:03.335]         }
[18:04:03.335]         else {
[18:04:03.335]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.335]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.335]         }
[18:04:03.335]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.335]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.335]             base::sink(type = "output", split = FALSE)
[18:04:03.335]             base::close(...future.stdout)
[18:04:03.335]         }, add = TRUE)
[18:04:03.335]     }
[18:04:03.335]     ...future.frame <- base::sys.nframe()
[18:04:03.335]     ...future.conditions <- base::list()
[18:04:03.335]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.335]     if (FALSE) {
[18:04:03.335]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.335]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.335]     }
[18:04:03.335]     ...future.result <- base::tryCatch({
[18:04:03.335]         base::withCallingHandlers({
[18:04:03.335]             ...future.value <- base::withVisible(base::local({
[18:04:03.335]                 withCallingHandlers({
[18:04:03.335]                   {
[18:04:03.335]                     2
[18:04:03.335]                   }
[18:04:03.335]                 }, immediateCondition = function(cond) {
[18:04:03.335]                   save_rds <- function (object, pathname, ...) 
[18:04:03.335]                   {
[18:04:03.335]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:03.335]                     if (file_test("-f", pathname_tmp)) {
[18:04:03.335]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.335]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:03.335]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.335]                         fi_tmp[["mtime"]])
[18:04:03.335]                     }
[18:04:03.335]                     tryCatch({
[18:04:03.335]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:03.335]                     }, error = function(ex) {
[18:04:03.335]                       msg <- conditionMessage(ex)
[18:04:03.335]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.335]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:03.335]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.335]                         fi_tmp[["mtime"]], msg)
[18:04:03.335]                       ex$message <- msg
[18:04:03.335]                       stop(ex)
[18:04:03.335]                     })
[18:04:03.335]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:03.335]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:03.335]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:03.335]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.335]                       fi <- file.info(pathname)
[18:04:03.335]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:03.335]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.335]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:03.335]                         fi[["size"]], fi[["mtime"]])
[18:04:03.335]                       stop(msg)
[18:04:03.335]                     }
[18:04:03.335]                     invisible(pathname)
[18:04:03.335]                   }
[18:04:03.335]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:03.335]                     rootPath = tempdir()) 
[18:04:03.335]                   {
[18:04:03.335]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:03.335]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:03.335]                       tmpdir = path, fileext = ".rds")
[18:04:03.335]                     save_rds(obj, file)
[18:04:03.335]                   }
[18:04:03.335]                   saveImmediateCondition(cond, path = "/tmp/RtmpXYgi0H/.future/immediateConditions")
[18:04:03.335]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.335]                   {
[18:04:03.335]                     inherits <- base::inherits
[18:04:03.335]                     invokeRestart <- base::invokeRestart
[18:04:03.335]                     is.null <- base::is.null
[18:04:03.335]                     muffled <- FALSE
[18:04:03.335]                     if (inherits(cond, "message")) {
[18:04:03.335]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:03.335]                       if (muffled) 
[18:04:03.335]                         invokeRestart("muffleMessage")
[18:04:03.335]                     }
[18:04:03.335]                     else if (inherits(cond, "warning")) {
[18:04:03.335]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:03.335]                       if (muffled) 
[18:04:03.335]                         invokeRestart("muffleWarning")
[18:04:03.335]                     }
[18:04:03.335]                     else if (inherits(cond, "condition")) {
[18:04:03.335]                       if (!is.null(pattern)) {
[18:04:03.335]                         computeRestarts <- base::computeRestarts
[18:04:03.335]                         grepl <- base::grepl
[18:04:03.335]                         restarts <- computeRestarts(cond)
[18:04:03.335]                         for (restart in restarts) {
[18:04:03.335]                           name <- restart$name
[18:04:03.335]                           if (is.null(name)) 
[18:04:03.335]                             next
[18:04:03.335]                           if (!grepl(pattern, name)) 
[18:04:03.335]                             next
[18:04:03.335]                           invokeRestart(restart)
[18:04:03.335]                           muffled <- TRUE
[18:04:03.335]                           break
[18:04:03.335]                         }
[18:04:03.335]                       }
[18:04:03.335]                     }
[18:04:03.335]                     invisible(muffled)
[18:04:03.335]                   }
[18:04:03.335]                   muffleCondition(cond)
[18:04:03.335]                 })
[18:04:03.335]             }))
[18:04:03.335]             future::FutureResult(value = ...future.value$value, 
[18:04:03.335]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.335]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.335]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.335]                     ...future.globalenv.names))
[18:04:03.335]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.335]         }, condition = base::local({
[18:04:03.335]             c <- base::c
[18:04:03.335]             inherits <- base::inherits
[18:04:03.335]             invokeRestart <- base::invokeRestart
[18:04:03.335]             length <- base::length
[18:04:03.335]             list <- base::list
[18:04:03.335]             seq.int <- base::seq.int
[18:04:03.335]             signalCondition <- base::signalCondition
[18:04:03.335]             sys.calls <- base::sys.calls
[18:04:03.335]             `[[` <- base::`[[`
[18:04:03.335]             `+` <- base::`+`
[18:04:03.335]             `<<-` <- base::`<<-`
[18:04:03.335]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.335]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.335]                   3L)]
[18:04:03.335]             }
[18:04:03.335]             function(cond) {
[18:04:03.335]                 is_error <- inherits(cond, "error")
[18:04:03.335]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.335]                   NULL)
[18:04:03.335]                 if (is_error) {
[18:04:03.335]                   sessionInformation <- function() {
[18:04:03.335]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.335]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.335]                       search = base::search(), system = base::Sys.info())
[18:04:03.335]                   }
[18:04:03.335]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.335]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.335]                     cond$call), session = sessionInformation(), 
[18:04:03.335]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.335]                   signalCondition(cond)
[18:04:03.335]                 }
[18:04:03.335]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.335]                 "immediateCondition"))) {
[18:04:03.335]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.335]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.335]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.335]                   if (TRUE && !signal) {
[18:04:03.335]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.335]                     {
[18:04:03.335]                       inherits <- base::inherits
[18:04:03.335]                       invokeRestart <- base::invokeRestart
[18:04:03.335]                       is.null <- base::is.null
[18:04:03.335]                       muffled <- FALSE
[18:04:03.335]                       if (inherits(cond, "message")) {
[18:04:03.335]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.335]                         if (muffled) 
[18:04:03.335]                           invokeRestart("muffleMessage")
[18:04:03.335]                       }
[18:04:03.335]                       else if (inherits(cond, "warning")) {
[18:04:03.335]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.335]                         if (muffled) 
[18:04:03.335]                           invokeRestart("muffleWarning")
[18:04:03.335]                       }
[18:04:03.335]                       else if (inherits(cond, "condition")) {
[18:04:03.335]                         if (!is.null(pattern)) {
[18:04:03.335]                           computeRestarts <- base::computeRestarts
[18:04:03.335]                           grepl <- base::grepl
[18:04:03.335]                           restarts <- computeRestarts(cond)
[18:04:03.335]                           for (restart in restarts) {
[18:04:03.335]                             name <- restart$name
[18:04:03.335]                             if (is.null(name)) 
[18:04:03.335]                               next
[18:04:03.335]                             if (!grepl(pattern, name)) 
[18:04:03.335]                               next
[18:04:03.335]                             invokeRestart(restart)
[18:04:03.335]                             muffled <- TRUE
[18:04:03.335]                             break
[18:04:03.335]                           }
[18:04:03.335]                         }
[18:04:03.335]                       }
[18:04:03.335]                       invisible(muffled)
[18:04:03.335]                     }
[18:04:03.335]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.335]                   }
[18:04:03.335]                 }
[18:04:03.335]                 else {
[18:04:03.335]                   if (TRUE) {
[18:04:03.335]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.335]                     {
[18:04:03.335]                       inherits <- base::inherits
[18:04:03.335]                       invokeRestart <- base::invokeRestart
[18:04:03.335]                       is.null <- base::is.null
[18:04:03.335]                       muffled <- FALSE
[18:04:03.335]                       if (inherits(cond, "message")) {
[18:04:03.335]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.335]                         if (muffled) 
[18:04:03.335]                           invokeRestart("muffleMessage")
[18:04:03.335]                       }
[18:04:03.335]                       else if (inherits(cond, "warning")) {
[18:04:03.335]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.335]                         if (muffled) 
[18:04:03.335]                           invokeRestart("muffleWarning")
[18:04:03.335]                       }
[18:04:03.335]                       else if (inherits(cond, "condition")) {
[18:04:03.335]                         if (!is.null(pattern)) {
[18:04:03.335]                           computeRestarts <- base::computeRestarts
[18:04:03.335]                           grepl <- base::grepl
[18:04:03.335]                           restarts <- computeRestarts(cond)
[18:04:03.335]                           for (restart in restarts) {
[18:04:03.335]                             name <- restart$name
[18:04:03.335]                             if (is.null(name)) 
[18:04:03.335]                               next
[18:04:03.335]                             if (!grepl(pattern, name)) 
[18:04:03.335]                               next
[18:04:03.335]                             invokeRestart(restart)
[18:04:03.335]                             muffled <- TRUE
[18:04:03.335]                             break
[18:04:03.335]                           }
[18:04:03.335]                         }
[18:04:03.335]                       }
[18:04:03.335]                       invisible(muffled)
[18:04:03.335]                     }
[18:04:03.335]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.335]                   }
[18:04:03.335]                 }
[18:04:03.335]             }
[18:04:03.335]         }))
[18:04:03.335]     }, error = function(ex) {
[18:04:03.335]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.335]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.335]                 ...future.rng), started = ...future.startTime, 
[18:04:03.335]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.335]             version = "1.8"), class = "FutureResult")
[18:04:03.335]     }, finally = {
[18:04:03.335]         if (!identical(...future.workdir, getwd())) 
[18:04:03.335]             setwd(...future.workdir)
[18:04:03.335]         {
[18:04:03.335]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.335]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.335]             }
[18:04:03.335]             base::options(...future.oldOptions)
[18:04:03.335]             if (.Platform$OS.type == "windows") {
[18:04:03.335]                 old_names <- names(...future.oldEnvVars)
[18:04:03.335]                 envs <- base::Sys.getenv()
[18:04:03.335]                 names <- names(envs)
[18:04:03.335]                 common <- intersect(names, old_names)
[18:04:03.335]                 added <- setdiff(names, old_names)
[18:04:03.335]                 removed <- setdiff(old_names, names)
[18:04:03.335]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.335]                   envs[common]]
[18:04:03.335]                 NAMES <- toupper(changed)
[18:04:03.335]                 args <- list()
[18:04:03.335]                 for (kk in seq_along(NAMES)) {
[18:04:03.335]                   name <- changed[[kk]]
[18:04:03.335]                   NAME <- NAMES[[kk]]
[18:04:03.335]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.335]                     next
[18:04:03.335]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.335]                 }
[18:04:03.335]                 NAMES <- toupper(added)
[18:04:03.335]                 for (kk in seq_along(NAMES)) {
[18:04:03.335]                   name <- added[[kk]]
[18:04:03.335]                   NAME <- NAMES[[kk]]
[18:04:03.335]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.335]                     next
[18:04:03.335]                   args[[name]] <- ""
[18:04:03.335]                 }
[18:04:03.335]                 NAMES <- toupper(removed)
[18:04:03.335]                 for (kk in seq_along(NAMES)) {
[18:04:03.335]                   name <- removed[[kk]]
[18:04:03.335]                   NAME <- NAMES[[kk]]
[18:04:03.335]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.335]                     next
[18:04:03.335]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.335]                 }
[18:04:03.335]                 if (length(args) > 0) 
[18:04:03.335]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.335]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.335]             }
[18:04:03.335]             else {
[18:04:03.335]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.335]             }
[18:04:03.335]             {
[18:04:03.335]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.335]                   0L) {
[18:04:03.335]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.335]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.335]                   base::options(opts)
[18:04:03.335]                 }
[18:04:03.335]                 {
[18:04:03.335]                   {
[18:04:03.335]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:03.335]                     NULL
[18:04:03.335]                   }
[18:04:03.335]                   options(future.plan = NULL)
[18:04:03.335]                   if (is.na(NA_character_)) 
[18:04:03.335]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.335]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.335]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.335]                     .init = FALSE)
[18:04:03.335]                 }
[18:04:03.335]             }
[18:04:03.335]         }
[18:04:03.335]     })
[18:04:03.335]     if (TRUE) {
[18:04:03.335]         base::sink(type = "output", split = FALSE)
[18:04:03.335]         if (TRUE) {
[18:04:03.335]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.335]         }
[18:04:03.335]         else {
[18:04:03.335]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.335]         }
[18:04:03.335]         base::close(...future.stdout)
[18:04:03.335]         ...future.stdout <- NULL
[18:04:03.335]     }
[18:04:03.335]     ...future.result$conditions <- ...future.conditions
[18:04:03.335]     ...future.result$finished <- base::Sys.time()
[18:04:03.335]     ...future.result
[18:04:03.335] }
[18:04:03.339] requestCore(): workers = 2
[18:04:03.346] MulticoreFuture started
[18:04:03.346] - Launch lazy future ... done
[18:04:03.348] plan(): Setting new future strategy stack:
[18:04:03.349] run() for ‘MulticoreFuture’ ... done
[18:04:03.350] getGlobalsAndPackages() ...
[18:04:03.350] Searching for globals...
[18:04:03.349] List of future strategies:
[18:04:03.349] 1. sequential:
[18:04:03.349]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.349]    - tweaked: FALSE
[18:04:03.349]    - call: NULL
[18:04:03.356] plan(): nbrOfWorkers() = 1
[18:04:03.356] - globals found: [1] ‘{’
[18:04:03.358] Searching for globals ... DONE
[18:04:03.359] Resolving globals: FALSE
[18:04:03.362] 
[18:04:03.362] 
[18:04:03.363] getGlobalsAndPackages() ... DONE
[18:04:03.362] plan(): Setting new future strategy stack:
[18:04:03.364] List of future strategies:
[18:04:03.364] 1. multicore:
[18:04:03.364]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:03.364]    - tweaked: FALSE
[18:04:03.364]    - call: plan(strategy)
[18:04:03.363] run() for ‘Future’ ...
[18:04:03.366] - state: ‘created’
[18:04:03.367] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:03.378] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:03.379] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:03.379]   - Field: ‘label’
[18:04:03.380]   - Field: ‘local’
[18:04:03.380]   - Field: ‘owner’
[18:04:03.381]   - Field: ‘envir’
[18:04:03.381]   - Field: ‘workers’
[18:04:03.382]   - Field: ‘packages’
[18:04:03.382]   - Field: ‘gc’
[18:04:03.385] plan(): nbrOfWorkers() = 2
[18:04:03.382]   - Field: ‘job’
[18:04:03.386]   - Field: ‘conditions’
[18:04:03.386]   - Field: ‘expr’
[18:04:03.386]   - Field: ‘uuid’
[18:04:03.387]   - Field: ‘seed’
[18:04:03.387]   - Field: ‘version’
[18:04:03.387]   - Field: ‘result’
[18:04:03.388]   - Field: ‘asynchronous’
[18:04:03.388]   - Field: ‘calls’
[18:04:03.388]   - Field: ‘globals’
[18:04:03.389]   - Field: ‘stdout’
[18:04:03.389]   - Field: ‘earlySignal’
[18:04:03.389]   - Field: ‘lazy’
[18:04:03.390]   - Field: ‘state’
[18:04:03.390] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:03.390] - Launch lazy future ...
[18:04:03.391] Packages needed by the future expression (n = 0): <none>
[18:04:03.392] Packages needed by future strategies (n = 0): <none>
[18:04:03.393] {
[18:04:03.393]     {
[18:04:03.393]         {
[18:04:03.393]             ...future.startTime <- base::Sys.time()
[18:04:03.393]             {
[18:04:03.393]                 {
[18:04:03.393]                   {
[18:04:03.393]                     {
[18:04:03.393]                       base::local({
[18:04:03.393]                         has_future <- base::requireNamespace("future", 
[18:04:03.393]                           quietly = TRUE)
[18:04:03.393]                         if (has_future) {
[18:04:03.393]                           ns <- base::getNamespace("future")
[18:04:03.393]                           version <- ns[[".package"]][["version"]]
[18:04:03.393]                           if (is.null(version)) 
[18:04:03.393]                             version <- utils::packageVersion("future")
[18:04:03.393]                         }
[18:04:03.393]                         else {
[18:04:03.393]                           version <- NULL
[18:04:03.393]                         }
[18:04:03.393]                         if (!has_future || version < "1.8.0") {
[18:04:03.393]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.393]                             "", base::R.version$version.string), 
[18:04:03.393]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:03.393]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.393]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.393]                               "release", "version")], collapse = " "), 
[18:04:03.393]                             hostname = base::Sys.info()[["nodename"]])
[18:04:03.393]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.393]                             info)
[18:04:03.393]                           info <- base::paste(info, collapse = "; ")
[18:04:03.393]                           if (!has_future) {
[18:04:03.393]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.393]                               info)
[18:04:03.393]                           }
[18:04:03.393]                           else {
[18:04:03.393]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.393]                               info, version)
[18:04:03.393]                           }
[18:04:03.393]                           base::stop(msg)
[18:04:03.393]                         }
[18:04:03.393]                       })
[18:04:03.393]                     }
[18:04:03.393]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:03.393]                     base::options(mc.cores = 1L)
[18:04:03.393]                   }
[18:04:03.393]                   ...future.strategy.old <- future::plan("list")
[18:04:03.393]                   options(future.plan = NULL)
[18:04:03.393]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.393]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.393]                 }
[18:04:03.393]                 ...future.workdir <- getwd()
[18:04:03.393]             }
[18:04:03.393]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.393]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.393]         }
[18:04:03.393]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.393]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.393]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.393]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.393]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.393]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.393]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.393]             base::names(...future.oldOptions))
[18:04:03.393]     }
[18:04:03.393]     if (FALSE) {
[18:04:03.393]     }
[18:04:03.393]     else {
[18:04:03.393]         if (TRUE) {
[18:04:03.393]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.393]                 open = "w")
[18:04:03.393]         }
[18:04:03.393]         else {
[18:04:03.393]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.393]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.393]         }
[18:04:03.393]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.393]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.393]             base::sink(type = "output", split = FALSE)
[18:04:03.393]             base::close(...future.stdout)
[18:04:03.393]         }, add = TRUE)
[18:04:03.393]     }
[18:04:03.393]     ...future.frame <- base::sys.nframe()
[18:04:03.393]     ...future.conditions <- base::list()
[18:04:03.393]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.393]     if (FALSE) {
[18:04:03.393]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.393]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.393]     }
[18:04:03.393]     ...future.result <- base::tryCatch({
[18:04:03.393]         base::withCallingHandlers({
[18:04:03.393]             ...future.value <- base::withVisible(base::local({
[18:04:03.393]                 withCallingHandlers({
[18:04:03.393]                   {
[18:04:03.393]                     4
[18:04:03.393]                   }
[18:04:03.393]                 }, immediateCondition = function(cond) {
[18:04:03.393]                   save_rds <- function (object, pathname, ...) 
[18:04:03.393]                   {
[18:04:03.393]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:03.393]                     if (file_test("-f", pathname_tmp)) {
[18:04:03.393]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.393]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:03.393]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.393]                         fi_tmp[["mtime"]])
[18:04:03.393]                     }
[18:04:03.393]                     tryCatch({
[18:04:03.393]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:03.393]                     }, error = function(ex) {
[18:04:03.393]                       msg <- conditionMessage(ex)
[18:04:03.393]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.393]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:03.393]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.393]                         fi_tmp[["mtime"]], msg)
[18:04:03.393]                       ex$message <- msg
[18:04:03.393]                       stop(ex)
[18:04:03.393]                     })
[18:04:03.393]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:03.393]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:03.393]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:03.393]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.393]                       fi <- file.info(pathname)
[18:04:03.393]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:03.393]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.393]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:03.393]                         fi[["size"]], fi[["mtime"]])
[18:04:03.393]                       stop(msg)
[18:04:03.393]                     }
[18:04:03.393]                     invisible(pathname)
[18:04:03.393]                   }
[18:04:03.393]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:03.393]                     rootPath = tempdir()) 
[18:04:03.393]                   {
[18:04:03.393]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:03.393]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:03.393]                       tmpdir = path, fileext = ".rds")
[18:04:03.393]                     save_rds(obj, file)
[18:04:03.393]                   }
[18:04:03.393]                   saveImmediateCondition(cond, path = "/tmp/RtmpXYgi0H/.future/immediateConditions")
[18:04:03.393]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.393]                   {
[18:04:03.393]                     inherits <- base::inherits
[18:04:03.393]                     invokeRestart <- base::invokeRestart
[18:04:03.393]                     is.null <- base::is.null
[18:04:03.393]                     muffled <- FALSE
[18:04:03.393]                     if (inherits(cond, "message")) {
[18:04:03.393]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:03.393]                       if (muffled) 
[18:04:03.393]                         invokeRestart("muffleMessage")
[18:04:03.393]                     }
[18:04:03.393]                     else if (inherits(cond, "warning")) {
[18:04:03.393]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:03.393]                       if (muffled) 
[18:04:03.393]                         invokeRestart("muffleWarning")
[18:04:03.393]                     }
[18:04:03.393]                     else if (inherits(cond, "condition")) {
[18:04:03.393]                       if (!is.null(pattern)) {
[18:04:03.393]                         computeRestarts <- base::computeRestarts
[18:04:03.393]                         grepl <- base::grepl
[18:04:03.393]                         restarts <- computeRestarts(cond)
[18:04:03.393]                         for (restart in restarts) {
[18:04:03.393]                           name <- restart$name
[18:04:03.393]                           if (is.null(name)) 
[18:04:03.393]                             next
[18:04:03.393]                           if (!grepl(pattern, name)) 
[18:04:03.393]                             next
[18:04:03.393]                           invokeRestart(restart)
[18:04:03.393]                           muffled <- TRUE
[18:04:03.393]                           break
[18:04:03.393]                         }
[18:04:03.393]                       }
[18:04:03.393]                     }
[18:04:03.393]                     invisible(muffled)
[18:04:03.393]                   }
[18:04:03.393]                   muffleCondition(cond)
[18:04:03.393]                 })
[18:04:03.393]             }))
[18:04:03.393]             future::FutureResult(value = ...future.value$value, 
[18:04:03.393]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.393]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.393]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.393]                     ...future.globalenv.names))
[18:04:03.393]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.393]         }, condition = base::local({
[18:04:03.393]             c <- base::c
[18:04:03.393]             inherits <- base::inherits
[18:04:03.393]             invokeRestart <- base::invokeRestart
[18:04:03.393]             length <- base::length
[18:04:03.393]             list <- base::list
[18:04:03.393]             seq.int <- base::seq.int
[18:04:03.393]             signalCondition <- base::signalCondition
[18:04:03.393]             sys.calls <- base::sys.calls
[18:04:03.393]             `[[` <- base::`[[`
[18:04:03.393]             `+` <- base::`+`
[18:04:03.393]             `<<-` <- base::`<<-`
[18:04:03.393]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.393]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.393]                   3L)]
[18:04:03.393]             }
[18:04:03.393]             function(cond) {
[18:04:03.393]                 is_error <- inherits(cond, "error")
[18:04:03.393]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.393]                   NULL)
[18:04:03.393]                 if (is_error) {
[18:04:03.393]                   sessionInformation <- function() {
[18:04:03.393]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.393]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.393]                       search = base::search(), system = base::Sys.info())
[18:04:03.393]                   }
[18:04:03.393]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.393]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.393]                     cond$call), session = sessionInformation(), 
[18:04:03.393]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.393]                   signalCondition(cond)
[18:04:03.393]                 }
[18:04:03.393]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.393]                 "immediateCondition"))) {
[18:04:03.393]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.393]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.393]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.393]                   if (TRUE && !signal) {
[18:04:03.393]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.393]                     {
[18:04:03.393]                       inherits <- base::inherits
[18:04:03.393]                       invokeRestart <- base::invokeRestart
[18:04:03.393]                       is.null <- base::is.null
[18:04:03.393]                       muffled <- FALSE
[18:04:03.393]                       if (inherits(cond, "message")) {
[18:04:03.393]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.393]                         if (muffled) 
[18:04:03.393]                           invokeRestart("muffleMessage")
[18:04:03.393]                       }
[18:04:03.393]                       else if (inherits(cond, "warning")) {
[18:04:03.393]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.393]                         if (muffled) 
[18:04:03.393]                           invokeRestart("muffleWarning")
[18:04:03.393]                       }
[18:04:03.393]                       else if (inherits(cond, "condition")) {
[18:04:03.393]                         if (!is.null(pattern)) {
[18:04:03.393]                           computeRestarts <- base::computeRestarts
[18:04:03.393]                           grepl <- base::grepl
[18:04:03.393]                           restarts <- computeRestarts(cond)
[18:04:03.393]                           for (restart in restarts) {
[18:04:03.393]                             name <- restart$name
[18:04:03.393]                             if (is.null(name)) 
[18:04:03.393]                               next
[18:04:03.393]                             if (!grepl(pattern, name)) 
[18:04:03.393]                               next
[18:04:03.393]                             invokeRestart(restart)
[18:04:03.393]                             muffled <- TRUE
[18:04:03.393]                             break
[18:04:03.393]                           }
[18:04:03.393]                         }
[18:04:03.393]                       }
[18:04:03.393]                       invisible(muffled)
[18:04:03.393]                     }
[18:04:03.393]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.393]                   }
[18:04:03.393]                 }
[18:04:03.393]                 else {
[18:04:03.393]                   if (TRUE) {
[18:04:03.393]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.393]                     {
[18:04:03.393]                       inherits <- base::inherits
[18:04:03.393]                       invokeRestart <- base::invokeRestart
[18:04:03.393]                       is.null <- base::is.null
[18:04:03.393]                       muffled <- FALSE
[18:04:03.393]                       if (inherits(cond, "message")) {
[18:04:03.393]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.393]                         if (muffled) 
[18:04:03.393]                           invokeRestart("muffleMessage")
[18:04:03.393]                       }
[18:04:03.393]                       else if (inherits(cond, "warning")) {
[18:04:03.393]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.393]                         if (muffled) 
[18:04:03.393]                           invokeRestart("muffleWarning")
[18:04:03.393]                       }
[18:04:03.393]                       else if (inherits(cond, "condition")) {
[18:04:03.393]                         if (!is.null(pattern)) {
[18:04:03.393]                           computeRestarts <- base::computeRestarts
[18:04:03.393]                           grepl <- base::grepl
[18:04:03.393]                           restarts <- computeRestarts(cond)
[18:04:03.393]                           for (restart in restarts) {
[18:04:03.393]                             name <- restart$name
[18:04:03.393]                             if (is.null(name)) 
[18:04:03.393]                               next
[18:04:03.393]                             if (!grepl(pattern, name)) 
[18:04:03.393]                               next
[18:04:03.393]                             invokeRestart(restart)
[18:04:03.393]                             muffled <- TRUE
[18:04:03.393]                             break
[18:04:03.393]                           }
[18:04:03.393]                         }
[18:04:03.393]                       }
[18:04:03.393]                       invisible(muffled)
[18:04:03.393]                     }
[18:04:03.393]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.393]                   }
[18:04:03.393]                 }
[18:04:03.393]             }
[18:04:03.393]         }))
[18:04:03.393]     }, error = function(ex) {
[18:04:03.393]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.393]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.393]                 ...future.rng), started = ...future.startTime, 
[18:04:03.393]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.393]             version = "1.8"), class = "FutureResult")
[18:04:03.393]     }, finally = {
[18:04:03.393]         if (!identical(...future.workdir, getwd())) 
[18:04:03.393]             setwd(...future.workdir)
[18:04:03.393]         {
[18:04:03.393]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.393]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.393]             }
[18:04:03.393]             base::options(...future.oldOptions)
[18:04:03.393]             if (.Platform$OS.type == "windows") {
[18:04:03.393]                 old_names <- names(...future.oldEnvVars)
[18:04:03.393]                 envs <- base::Sys.getenv()
[18:04:03.393]                 names <- names(envs)
[18:04:03.393]                 common <- intersect(names, old_names)
[18:04:03.393]                 added <- setdiff(names, old_names)
[18:04:03.393]                 removed <- setdiff(old_names, names)
[18:04:03.393]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.393]                   envs[common]]
[18:04:03.393]                 NAMES <- toupper(changed)
[18:04:03.393]                 args <- list()
[18:04:03.393]                 for (kk in seq_along(NAMES)) {
[18:04:03.393]                   name <- changed[[kk]]
[18:04:03.393]                   NAME <- NAMES[[kk]]
[18:04:03.393]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.393]                     next
[18:04:03.393]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.393]                 }
[18:04:03.393]                 NAMES <- toupper(added)
[18:04:03.393]                 for (kk in seq_along(NAMES)) {
[18:04:03.393]                   name <- added[[kk]]
[18:04:03.393]                   NAME <- NAMES[[kk]]
[18:04:03.393]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.393]                     next
[18:04:03.393]                   args[[name]] <- ""
[18:04:03.393]                 }
[18:04:03.393]                 NAMES <- toupper(removed)
[18:04:03.393]                 for (kk in seq_along(NAMES)) {
[18:04:03.393]                   name <- removed[[kk]]
[18:04:03.393]                   NAME <- NAMES[[kk]]
[18:04:03.393]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.393]                     next
[18:04:03.393]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.393]                 }
[18:04:03.393]                 if (length(args) > 0) 
[18:04:03.393]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.393]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.393]             }
[18:04:03.393]             else {
[18:04:03.393]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.393]             }
[18:04:03.393]             {
[18:04:03.393]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.393]                   0L) {
[18:04:03.393]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.393]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.393]                   base::options(opts)
[18:04:03.393]                 }
[18:04:03.393]                 {
[18:04:03.393]                   {
[18:04:03.393]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:03.393]                     NULL
[18:04:03.393]                   }
[18:04:03.393]                   options(future.plan = NULL)
[18:04:03.393]                   if (is.na(NA_character_)) 
[18:04:03.393]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.393]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.393]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.393]                     .init = FALSE)
[18:04:03.393]                 }
[18:04:03.393]             }
[18:04:03.393]         }
[18:04:03.393]     })
[18:04:03.393]     if (TRUE) {
[18:04:03.393]         base::sink(type = "output", split = FALSE)
[18:04:03.393]         if (TRUE) {
[18:04:03.393]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.393]         }
[18:04:03.393]         else {
[18:04:03.393]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.393]         }
[18:04:03.393]         base::close(...future.stdout)
[18:04:03.393]         ...future.stdout <- NULL
[18:04:03.393]     }
[18:04:03.393]     ...future.result$conditions <- ...future.conditions
[18:04:03.393]     ...future.result$finished <- base::Sys.time()
[18:04:03.393]     ...future.result
[18:04:03.393] }
[18:04:03.400] requestCore(): workers = 2
[18:04:03.412] MulticoreFuture started
[18:04:03.414] - Launch lazy future ... done
[18:04:03.415] run() for ‘MulticoreFuture’ ... done
[18:04:03.416] plan(): Setting new future strategy stack:
[18:04:03.417] result() for MulticoreFuture ...
[18:04:03.416] List of future strategies:
[18:04:03.416] 1. sequential:
[18:04:03.416]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.416]    - tweaked: FALSE
[18:04:03.416]    - call: NULL
[18:04:03.419] plan(): nbrOfWorkers() = 1
[18:04:03.421] result() for MulticoreFuture ...
[18:04:03.422] plan(): Setting new future strategy stack:
[18:04:03.423] List of future strategies:
[18:04:03.423] 1. multicore:
[18:04:03.423]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:03.423]    - tweaked: FALSE
[18:04:03.423]    - call: plan(strategy)
[18:04:03.425] result() for MulticoreFuture ... done
[18:04:03.425] result() for MulticoreFuture ... done
[18:04:03.426] result() for MulticoreFuture ...
[18:04:03.426] result() for MulticoreFuture ... done
u$a = 2
[18:04:03.426] result() for MulticoreFuture ...
[18:04:03.432] plan(): nbrOfWorkers() = 2
[18:04:03.433] result() for MulticoreFuture ...
[18:04:03.434] result() for MulticoreFuture ... done
[18:04:03.434] result() for MulticoreFuture ... done
[18:04:03.434] result() for MulticoreFuture ...
[18:04:03.434] result() for MulticoreFuture ... done
v$a = 4
[18:04:03.435] getGlobalsAndPackages() ...
[18:04:03.435] Searching for globals...
[18:04:03.438] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.438] Searching for globals ... DONE
[18:04:03.438] Resolving globals: FALSE
[18:04:03.439] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.440] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.440] - globals: [1] ‘a’
[18:04:03.440] 
[18:04:03.441] getGlobalsAndPackages() ... DONE
[18:04:03.441] run() for ‘Future’ ...
[18:04:03.441] - state: ‘created’
[18:04:03.442] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:03.449] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:03.449] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:03.449]   - Field: ‘label’
[18:04:03.449]   - Field: ‘local’
[18:04:03.450]   - Field: ‘owner’
[18:04:03.450]   - Field: ‘envir’
[18:04:03.450]   - Field: ‘workers’
[18:04:03.450]   - Field: ‘packages’
[18:04:03.451]   - Field: ‘gc’
[18:04:03.451]   - Field: ‘job’
[18:04:03.451]   - Field: ‘conditions’
[18:04:03.451]   - Field: ‘expr’
[18:04:03.452]   - Field: ‘uuid’
[18:04:03.452]   - Field: ‘seed’
[18:04:03.452]   - Field: ‘version’
[18:04:03.452]   - Field: ‘result’
[18:04:03.453]   - Field: ‘asynchronous’
[18:04:03.453]   - Field: ‘calls’
[18:04:03.453]   - Field: ‘globals’
[18:04:03.453]   - Field: ‘stdout’
[18:04:03.453]   - Field: ‘earlySignal’
[18:04:03.454]   - Field: ‘lazy’
[18:04:03.454]   - Field: ‘state’
[18:04:03.454] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:03.454] - Launch lazy future ...
[18:04:03.455] Packages needed by the future expression (n = 0): <none>
[18:04:03.455] Packages needed by future strategies (n = 0): <none>
[18:04:03.456] {
[18:04:03.456]     {
[18:04:03.456]         {
[18:04:03.456]             ...future.startTime <- base::Sys.time()
[18:04:03.456]             {
[18:04:03.456]                 {
[18:04:03.456]                   {
[18:04:03.456]                     {
[18:04:03.456]                       base::local({
[18:04:03.456]                         has_future <- base::requireNamespace("future", 
[18:04:03.456]                           quietly = TRUE)
[18:04:03.456]                         if (has_future) {
[18:04:03.456]                           ns <- base::getNamespace("future")
[18:04:03.456]                           version <- ns[[".package"]][["version"]]
[18:04:03.456]                           if (is.null(version)) 
[18:04:03.456]                             version <- utils::packageVersion("future")
[18:04:03.456]                         }
[18:04:03.456]                         else {
[18:04:03.456]                           version <- NULL
[18:04:03.456]                         }
[18:04:03.456]                         if (!has_future || version < "1.8.0") {
[18:04:03.456]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.456]                             "", base::R.version$version.string), 
[18:04:03.456]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:03.456]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.456]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.456]                               "release", "version")], collapse = " "), 
[18:04:03.456]                             hostname = base::Sys.info()[["nodename"]])
[18:04:03.456]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.456]                             info)
[18:04:03.456]                           info <- base::paste(info, collapse = "; ")
[18:04:03.456]                           if (!has_future) {
[18:04:03.456]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.456]                               info)
[18:04:03.456]                           }
[18:04:03.456]                           else {
[18:04:03.456]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.456]                               info, version)
[18:04:03.456]                           }
[18:04:03.456]                           base::stop(msg)
[18:04:03.456]                         }
[18:04:03.456]                       })
[18:04:03.456]                     }
[18:04:03.456]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:03.456]                     base::options(mc.cores = 1L)
[18:04:03.456]                   }
[18:04:03.456]                   ...future.strategy.old <- future::plan("list")
[18:04:03.456]                   options(future.plan = NULL)
[18:04:03.456]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.456]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.456]                 }
[18:04:03.456]                 ...future.workdir <- getwd()
[18:04:03.456]             }
[18:04:03.456]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.456]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.456]         }
[18:04:03.456]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.456]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.456]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.456]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.456]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.456]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.456]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.456]             base::names(...future.oldOptions))
[18:04:03.456]     }
[18:04:03.456]     if (FALSE) {
[18:04:03.456]     }
[18:04:03.456]     else {
[18:04:03.456]         if (TRUE) {
[18:04:03.456]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.456]                 open = "w")
[18:04:03.456]         }
[18:04:03.456]         else {
[18:04:03.456]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.456]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.456]         }
[18:04:03.456]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.456]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.456]             base::sink(type = "output", split = FALSE)
[18:04:03.456]             base::close(...future.stdout)
[18:04:03.456]         }, add = TRUE)
[18:04:03.456]     }
[18:04:03.456]     ...future.frame <- base::sys.nframe()
[18:04:03.456]     ...future.conditions <- base::list()
[18:04:03.456]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.456]     if (FALSE) {
[18:04:03.456]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.456]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.456]     }
[18:04:03.456]     ...future.result <- base::tryCatch({
[18:04:03.456]         base::withCallingHandlers({
[18:04:03.456]             ...future.value <- base::withVisible(base::local({
[18:04:03.456]                 withCallingHandlers({
[18:04:03.456]                   {
[18:04:03.456]                     2 * a
[18:04:03.456]                   }
[18:04:03.456]                 }, immediateCondition = function(cond) {
[18:04:03.456]                   save_rds <- function (object, pathname, ...) 
[18:04:03.456]                   {
[18:04:03.456]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:03.456]                     if (file_test("-f", pathname_tmp)) {
[18:04:03.456]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.456]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:03.456]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.456]                         fi_tmp[["mtime"]])
[18:04:03.456]                     }
[18:04:03.456]                     tryCatch({
[18:04:03.456]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:03.456]                     }, error = function(ex) {
[18:04:03.456]                       msg <- conditionMessage(ex)
[18:04:03.456]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.456]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:03.456]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.456]                         fi_tmp[["mtime"]], msg)
[18:04:03.456]                       ex$message <- msg
[18:04:03.456]                       stop(ex)
[18:04:03.456]                     })
[18:04:03.456]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:03.456]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:03.456]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:03.456]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.456]                       fi <- file.info(pathname)
[18:04:03.456]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:03.456]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.456]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:03.456]                         fi[["size"]], fi[["mtime"]])
[18:04:03.456]                       stop(msg)
[18:04:03.456]                     }
[18:04:03.456]                     invisible(pathname)
[18:04:03.456]                   }
[18:04:03.456]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:03.456]                     rootPath = tempdir()) 
[18:04:03.456]                   {
[18:04:03.456]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:03.456]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:03.456]                       tmpdir = path, fileext = ".rds")
[18:04:03.456]                     save_rds(obj, file)
[18:04:03.456]                   }
[18:04:03.456]                   saveImmediateCondition(cond, path = "/tmp/RtmpXYgi0H/.future/immediateConditions")
[18:04:03.456]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.456]                   {
[18:04:03.456]                     inherits <- base::inherits
[18:04:03.456]                     invokeRestart <- base::invokeRestart
[18:04:03.456]                     is.null <- base::is.null
[18:04:03.456]                     muffled <- FALSE
[18:04:03.456]                     if (inherits(cond, "message")) {
[18:04:03.456]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:03.456]                       if (muffled) 
[18:04:03.456]                         invokeRestart("muffleMessage")
[18:04:03.456]                     }
[18:04:03.456]                     else if (inherits(cond, "warning")) {
[18:04:03.456]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:03.456]                       if (muffled) 
[18:04:03.456]                         invokeRestart("muffleWarning")
[18:04:03.456]                     }
[18:04:03.456]                     else if (inherits(cond, "condition")) {
[18:04:03.456]                       if (!is.null(pattern)) {
[18:04:03.456]                         computeRestarts <- base::computeRestarts
[18:04:03.456]                         grepl <- base::grepl
[18:04:03.456]                         restarts <- computeRestarts(cond)
[18:04:03.456]                         for (restart in restarts) {
[18:04:03.456]                           name <- restart$name
[18:04:03.456]                           if (is.null(name)) 
[18:04:03.456]                             next
[18:04:03.456]                           if (!grepl(pattern, name)) 
[18:04:03.456]                             next
[18:04:03.456]                           invokeRestart(restart)
[18:04:03.456]                           muffled <- TRUE
[18:04:03.456]                           break
[18:04:03.456]                         }
[18:04:03.456]                       }
[18:04:03.456]                     }
[18:04:03.456]                     invisible(muffled)
[18:04:03.456]                   }
[18:04:03.456]                   muffleCondition(cond)
[18:04:03.456]                 })
[18:04:03.456]             }))
[18:04:03.456]             future::FutureResult(value = ...future.value$value, 
[18:04:03.456]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.456]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.456]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.456]                     ...future.globalenv.names))
[18:04:03.456]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.456]         }, condition = base::local({
[18:04:03.456]             c <- base::c
[18:04:03.456]             inherits <- base::inherits
[18:04:03.456]             invokeRestart <- base::invokeRestart
[18:04:03.456]             length <- base::length
[18:04:03.456]             list <- base::list
[18:04:03.456]             seq.int <- base::seq.int
[18:04:03.456]             signalCondition <- base::signalCondition
[18:04:03.456]             sys.calls <- base::sys.calls
[18:04:03.456]             `[[` <- base::`[[`
[18:04:03.456]             `+` <- base::`+`
[18:04:03.456]             `<<-` <- base::`<<-`
[18:04:03.456]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.456]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.456]                   3L)]
[18:04:03.456]             }
[18:04:03.456]             function(cond) {
[18:04:03.456]                 is_error <- inherits(cond, "error")
[18:04:03.456]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.456]                   NULL)
[18:04:03.456]                 if (is_error) {
[18:04:03.456]                   sessionInformation <- function() {
[18:04:03.456]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.456]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.456]                       search = base::search(), system = base::Sys.info())
[18:04:03.456]                   }
[18:04:03.456]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.456]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.456]                     cond$call), session = sessionInformation(), 
[18:04:03.456]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.456]                   signalCondition(cond)
[18:04:03.456]                 }
[18:04:03.456]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.456]                 "immediateCondition"))) {
[18:04:03.456]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.456]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.456]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.456]                   if (TRUE && !signal) {
[18:04:03.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.456]                     {
[18:04:03.456]                       inherits <- base::inherits
[18:04:03.456]                       invokeRestart <- base::invokeRestart
[18:04:03.456]                       is.null <- base::is.null
[18:04:03.456]                       muffled <- FALSE
[18:04:03.456]                       if (inherits(cond, "message")) {
[18:04:03.456]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.456]                         if (muffled) 
[18:04:03.456]                           invokeRestart("muffleMessage")
[18:04:03.456]                       }
[18:04:03.456]                       else if (inherits(cond, "warning")) {
[18:04:03.456]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.456]                         if (muffled) 
[18:04:03.456]                           invokeRestart("muffleWarning")
[18:04:03.456]                       }
[18:04:03.456]                       else if (inherits(cond, "condition")) {
[18:04:03.456]                         if (!is.null(pattern)) {
[18:04:03.456]                           computeRestarts <- base::computeRestarts
[18:04:03.456]                           grepl <- base::grepl
[18:04:03.456]                           restarts <- computeRestarts(cond)
[18:04:03.456]                           for (restart in restarts) {
[18:04:03.456]                             name <- restart$name
[18:04:03.456]                             if (is.null(name)) 
[18:04:03.456]                               next
[18:04:03.456]                             if (!grepl(pattern, name)) 
[18:04:03.456]                               next
[18:04:03.456]                             invokeRestart(restart)
[18:04:03.456]                             muffled <- TRUE
[18:04:03.456]                             break
[18:04:03.456]                           }
[18:04:03.456]                         }
[18:04:03.456]                       }
[18:04:03.456]                       invisible(muffled)
[18:04:03.456]                     }
[18:04:03.456]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.456]                   }
[18:04:03.456]                 }
[18:04:03.456]                 else {
[18:04:03.456]                   if (TRUE) {
[18:04:03.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.456]                     {
[18:04:03.456]                       inherits <- base::inherits
[18:04:03.456]                       invokeRestart <- base::invokeRestart
[18:04:03.456]                       is.null <- base::is.null
[18:04:03.456]                       muffled <- FALSE
[18:04:03.456]                       if (inherits(cond, "message")) {
[18:04:03.456]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.456]                         if (muffled) 
[18:04:03.456]                           invokeRestart("muffleMessage")
[18:04:03.456]                       }
[18:04:03.456]                       else if (inherits(cond, "warning")) {
[18:04:03.456]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.456]                         if (muffled) 
[18:04:03.456]                           invokeRestart("muffleWarning")
[18:04:03.456]                       }
[18:04:03.456]                       else if (inherits(cond, "condition")) {
[18:04:03.456]                         if (!is.null(pattern)) {
[18:04:03.456]                           computeRestarts <- base::computeRestarts
[18:04:03.456]                           grepl <- base::grepl
[18:04:03.456]                           restarts <- computeRestarts(cond)
[18:04:03.456]                           for (restart in restarts) {
[18:04:03.456]                             name <- restart$name
[18:04:03.456]                             if (is.null(name)) 
[18:04:03.456]                               next
[18:04:03.456]                             if (!grepl(pattern, name)) 
[18:04:03.456]                               next
[18:04:03.456]                             invokeRestart(restart)
[18:04:03.456]                             muffled <- TRUE
[18:04:03.456]                             break
[18:04:03.456]                           }
[18:04:03.456]                         }
[18:04:03.456]                       }
[18:04:03.456]                       invisible(muffled)
[18:04:03.456]                     }
[18:04:03.456]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.456]                   }
[18:04:03.456]                 }
[18:04:03.456]             }
[18:04:03.456]         }))
[18:04:03.456]     }, error = function(ex) {
[18:04:03.456]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.456]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.456]                 ...future.rng), started = ...future.startTime, 
[18:04:03.456]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.456]             version = "1.8"), class = "FutureResult")
[18:04:03.456]     }, finally = {
[18:04:03.456]         if (!identical(...future.workdir, getwd())) 
[18:04:03.456]             setwd(...future.workdir)
[18:04:03.456]         {
[18:04:03.456]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.456]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.456]             }
[18:04:03.456]             base::options(...future.oldOptions)
[18:04:03.456]             if (.Platform$OS.type == "windows") {
[18:04:03.456]                 old_names <- names(...future.oldEnvVars)
[18:04:03.456]                 envs <- base::Sys.getenv()
[18:04:03.456]                 names <- names(envs)
[18:04:03.456]                 common <- intersect(names, old_names)
[18:04:03.456]                 added <- setdiff(names, old_names)
[18:04:03.456]                 removed <- setdiff(old_names, names)
[18:04:03.456]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.456]                   envs[common]]
[18:04:03.456]                 NAMES <- toupper(changed)
[18:04:03.456]                 args <- list()
[18:04:03.456]                 for (kk in seq_along(NAMES)) {
[18:04:03.456]                   name <- changed[[kk]]
[18:04:03.456]                   NAME <- NAMES[[kk]]
[18:04:03.456]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.456]                     next
[18:04:03.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.456]                 }
[18:04:03.456]                 NAMES <- toupper(added)
[18:04:03.456]                 for (kk in seq_along(NAMES)) {
[18:04:03.456]                   name <- added[[kk]]
[18:04:03.456]                   NAME <- NAMES[[kk]]
[18:04:03.456]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.456]                     next
[18:04:03.456]                   args[[name]] <- ""
[18:04:03.456]                 }
[18:04:03.456]                 NAMES <- toupper(removed)
[18:04:03.456]                 for (kk in seq_along(NAMES)) {
[18:04:03.456]                   name <- removed[[kk]]
[18:04:03.456]                   NAME <- NAMES[[kk]]
[18:04:03.456]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.456]                     next
[18:04:03.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.456]                 }
[18:04:03.456]                 if (length(args) > 0) 
[18:04:03.456]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.456]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.456]             }
[18:04:03.456]             else {
[18:04:03.456]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.456]             }
[18:04:03.456]             {
[18:04:03.456]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.456]                   0L) {
[18:04:03.456]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.456]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.456]                   base::options(opts)
[18:04:03.456]                 }
[18:04:03.456]                 {
[18:04:03.456]                   {
[18:04:03.456]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:03.456]                     NULL
[18:04:03.456]                   }
[18:04:03.456]                   options(future.plan = NULL)
[18:04:03.456]                   if (is.na(NA_character_)) 
[18:04:03.456]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.456]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.456]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.456]                     .init = FALSE)
[18:04:03.456]                 }
[18:04:03.456]             }
[18:04:03.456]         }
[18:04:03.456]     })
[18:04:03.456]     if (TRUE) {
[18:04:03.456]         base::sink(type = "output", split = FALSE)
[18:04:03.456]         if (TRUE) {
[18:04:03.456]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.456]         }
[18:04:03.456]         else {
[18:04:03.456]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.456]         }
[18:04:03.456]         base::close(...future.stdout)
[18:04:03.456]         ...future.stdout <- NULL
[18:04:03.456]     }
[18:04:03.456]     ...future.result$conditions <- ...future.conditions
[18:04:03.456]     ...future.result$finished <- base::Sys.time()
[18:04:03.456]     ...future.result
[18:04:03.456] }
[18:04:03.461] assign_globals() ...
[18:04:03.461] List of 1
[18:04:03.461]  $ a: num 1
[18:04:03.461]  - attr(*, "where")=List of 1
[18:04:03.461]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.461]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.461]  - attr(*, "resolved")= logi FALSE
[18:04:03.461]  - attr(*, "total_size")= num 56
[18:04:03.461]  - attr(*, "already-done")= logi TRUE
[18:04:03.475] - copied ‘a’ to environment
[18:04:03.475] assign_globals() ... done
[18:04:03.476] requestCore(): workers = 2
[18:04:03.480] MulticoreFuture started
[18:04:03.481] - Launch lazy future ... done
[18:04:03.481] run() for ‘MulticoreFuture’ ... done
[18:04:03.482] result() for MulticoreFuture ...
[18:04:03.484] plan(): Setting new future strategy stack:
[18:04:03.484] List of future strategies:
[18:04:03.484] 1. sequential:
[18:04:03.484]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.484]    - tweaked: FALSE
[18:04:03.484]    - call: NULL
[18:04:03.487] plan(): nbrOfWorkers() = 1
[18:04:03.491] plan(): Setting new future strategy stack:
[18:04:03.491] List of future strategies:
[18:04:03.491] 1. multicore:
[18:04:03.491]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:03.491]    - tweaked: FALSE
[18:04:03.491]    - call: plan(strategy)
[18:04:03.501] plan(): nbrOfWorkers() = 2
[18:04:03.503] result() for MulticoreFuture ...
[18:04:03.503] result() for MulticoreFuture ... done
[18:04:03.504] result() for MulticoreFuture ... done
[18:04:03.504] result() for MulticoreFuture ...
[18:04:03.504] result() for MulticoreFuture ... done
[18:04:03.505] getGlobalsAndPackages() ...
[18:04:03.505] Searching for globals...
[18:04:03.508] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.508] Searching for globals ... DONE
[18:04:03.508] Resolving globals: FALSE
[18:04:03.509] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.510] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.510] - globals: [1] ‘a’
[18:04:03.511] 
[18:04:03.511] getGlobalsAndPackages() ... DONE
[18:04:03.511] run() for ‘Future’ ...
[18:04:03.512] - state: ‘created’
[18:04:03.512] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:03.519] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:03.520] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:03.520]   - Field: ‘label’
[18:04:03.520]   - Field: ‘local’
[18:04:03.520]   - Field: ‘owner’
[18:04:03.521]   - Field: ‘envir’
[18:04:03.521]   - Field: ‘workers’
[18:04:03.521]   - Field: ‘packages’
[18:04:03.521]   - Field: ‘gc’
[18:04:03.522]   - Field: ‘job’
[18:04:03.522]   - Field: ‘conditions’
[18:04:03.522]   - Field: ‘expr’
[18:04:03.522]   - Field: ‘uuid’
[18:04:03.522]   - Field: ‘seed’
[18:04:03.523]   - Field: ‘version’
[18:04:03.523]   - Field: ‘result’
[18:04:03.523]   - Field: ‘asynchronous’
[18:04:03.523]   - Field: ‘calls’
[18:04:03.524]   - Field: ‘globals’
[18:04:03.524]   - Field: ‘stdout’
[18:04:03.524]   - Field: ‘earlySignal’
[18:04:03.524]   - Field: ‘lazy’
[18:04:03.525]   - Field: ‘state’
[18:04:03.525] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:03.525] - Launch lazy future ...
[18:04:03.526] Packages needed by the future expression (n = 0): <none>
[18:04:03.526] Packages needed by future strategies (n = 0): <none>
[18:04:03.527] {
[18:04:03.527]     {
[18:04:03.527]         {
[18:04:03.527]             ...future.startTime <- base::Sys.time()
[18:04:03.527]             {
[18:04:03.527]                 {
[18:04:03.527]                   {
[18:04:03.527]                     {
[18:04:03.527]                       base::local({
[18:04:03.527]                         has_future <- base::requireNamespace("future", 
[18:04:03.527]                           quietly = TRUE)
[18:04:03.527]                         if (has_future) {
[18:04:03.527]                           ns <- base::getNamespace("future")
[18:04:03.527]                           version <- ns[[".package"]][["version"]]
[18:04:03.527]                           if (is.null(version)) 
[18:04:03.527]                             version <- utils::packageVersion("future")
[18:04:03.527]                         }
[18:04:03.527]                         else {
[18:04:03.527]                           version <- NULL
[18:04:03.527]                         }
[18:04:03.527]                         if (!has_future || version < "1.8.0") {
[18:04:03.527]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.527]                             "", base::R.version$version.string), 
[18:04:03.527]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:03.527]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.527]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.527]                               "release", "version")], collapse = " "), 
[18:04:03.527]                             hostname = base::Sys.info()[["nodename"]])
[18:04:03.527]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.527]                             info)
[18:04:03.527]                           info <- base::paste(info, collapse = "; ")
[18:04:03.527]                           if (!has_future) {
[18:04:03.527]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.527]                               info)
[18:04:03.527]                           }
[18:04:03.527]                           else {
[18:04:03.527]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.527]                               info, version)
[18:04:03.527]                           }
[18:04:03.527]                           base::stop(msg)
[18:04:03.527]                         }
[18:04:03.527]                       })
[18:04:03.527]                     }
[18:04:03.527]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:03.527]                     base::options(mc.cores = 1L)
[18:04:03.527]                   }
[18:04:03.527]                   ...future.strategy.old <- future::plan("list")
[18:04:03.527]                   options(future.plan = NULL)
[18:04:03.527]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.527]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.527]                 }
[18:04:03.527]                 ...future.workdir <- getwd()
[18:04:03.527]             }
[18:04:03.527]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.527]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.527]         }
[18:04:03.527]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.527]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.527]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.527]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.527]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.527]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.527]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.527]             base::names(...future.oldOptions))
[18:04:03.527]     }
[18:04:03.527]     if (FALSE) {
[18:04:03.527]     }
[18:04:03.527]     else {
[18:04:03.527]         if (TRUE) {
[18:04:03.527]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.527]                 open = "w")
[18:04:03.527]         }
[18:04:03.527]         else {
[18:04:03.527]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.527]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.527]         }
[18:04:03.527]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.527]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.527]             base::sink(type = "output", split = FALSE)
[18:04:03.527]             base::close(...future.stdout)
[18:04:03.527]         }, add = TRUE)
[18:04:03.527]     }
[18:04:03.527]     ...future.frame <- base::sys.nframe()
[18:04:03.527]     ...future.conditions <- base::list()
[18:04:03.527]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.527]     if (FALSE) {
[18:04:03.527]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.527]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.527]     }
[18:04:03.527]     ...future.result <- base::tryCatch({
[18:04:03.527]         base::withCallingHandlers({
[18:04:03.527]             ...future.value <- base::withVisible(base::local({
[18:04:03.527]                 withCallingHandlers({
[18:04:03.527]                   {
[18:04:03.527]                     2 * a
[18:04:03.527]                   }
[18:04:03.527]                 }, immediateCondition = function(cond) {
[18:04:03.527]                   save_rds <- function (object, pathname, ...) 
[18:04:03.527]                   {
[18:04:03.527]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:03.527]                     if (file_test("-f", pathname_tmp)) {
[18:04:03.527]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.527]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:03.527]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.527]                         fi_tmp[["mtime"]])
[18:04:03.527]                     }
[18:04:03.527]                     tryCatch({
[18:04:03.527]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:03.527]                     }, error = function(ex) {
[18:04:03.527]                       msg <- conditionMessage(ex)
[18:04:03.527]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.527]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:03.527]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.527]                         fi_tmp[["mtime"]], msg)
[18:04:03.527]                       ex$message <- msg
[18:04:03.527]                       stop(ex)
[18:04:03.527]                     })
[18:04:03.527]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:03.527]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:03.527]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:03.527]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.527]                       fi <- file.info(pathname)
[18:04:03.527]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:03.527]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.527]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:03.527]                         fi[["size"]], fi[["mtime"]])
[18:04:03.527]                       stop(msg)
[18:04:03.527]                     }
[18:04:03.527]                     invisible(pathname)
[18:04:03.527]                   }
[18:04:03.527]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:03.527]                     rootPath = tempdir()) 
[18:04:03.527]                   {
[18:04:03.527]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:03.527]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:03.527]                       tmpdir = path, fileext = ".rds")
[18:04:03.527]                     save_rds(obj, file)
[18:04:03.527]                   }
[18:04:03.527]                   saveImmediateCondition(cond, path = "/tmp/RtmpXYgi0H/.future/immediateConditions")
[18:04:03.527]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.527]                   {
[18:04:03.527]                     inherits <- base::inherits
[18:04:03.527]                     invokeRestart <- base::invokeRestart
[18:04:03.527]                     is.null <- base::is.null
[18:04:03.527]                     muffled <- FALSE
[18:04:03.527]                     if (inherits(cond, "message")) {
[18:04:03.527]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:03.527]                       if (muffled) 
[18:04:03.527]                         invokeRestart("muffleMessage")
[18:04:03.527]                     }
[18:04:03.527]                     else if (inherits(cond, "warning")) {
[18:04:03.527]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:03.527]                       if (muffled) 
[18:04:03.527]                         invokeRestart("muffleWarning")
[18:04:03.527]                     }
[18:04:03.527]                     else if (inherits(cond, "condition")) {
[18:04:03.527]                       if (!is.null(pattern)) {
[18:04:03.527]                         computeRestarts <- base::computeRestarts
[18:04:03.527]                         grepl <- base::grepl
[18:04:03.527]                         restarts <- computeRestarts(cond)
[18:04:03.527]                         for (restart in restarts) {
[18:04:03.527]                           name <- restart$name
[18:04:03.527]                           if (is.null(name)) 
[18:04:03.527]                             next
[18:04:03.527]                           if (!grepl(pattern, name)) 
[18:04:03.527]                             next
[18:04:03.527]                           invokeRestart(restart)
[18:04:03.527]                           muffled <- TRUE
[18:04:03.527]                           break
[18:04:03.527]                         }
[18:04:03.527]                       }
[18:04:03.527]                     }
[18:04:03.527]                     invisible(muffled)
[18:04:03.527]                   }
[18:04:03.527]                   muffleCondition(cond)
[18:04:03.527]                 })
[18:04:03.527]             }))
[18:04:03.527]             future::FutureResult(value = ...future.value$value, 
[18:04:03.527]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.527]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.527]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.527]                     ...future.globalenv.names))
[18:04:03.527]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.527]         }, condition = base::local({
[18:04:03.527]             c <- base::c
[18:04:03.527]             inherits <- base::inherits
[18:04:03.527]             invokeRestart <- base::invokeRestart
[18:04:03.527]             length <- base::length
[18:04:03.527]             list <- base::list
[18:04:03.527]             seq.int <- base::seq.int
[18:04:03.527]             signalCondition <- base::signalCondition
[18:04:03.527]             sys.calls <- base::sys.calls
[18:04:03.527]             `[[` <- base::`[[`
[18:04:03.527]             `+` <- base::`+`
[18:04:03.527]             `<<-` <- base::`<<-`
[18:04:03.527]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.527]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.527]                   3L)]
[18:04:03.527]             }
[18:04:03.527]             function(cond) {
[18:04:03.527]                 is_error <- inherits(cond, "error")
[18:04:03.527]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.527]                   NULL)
[18:04:03.527]                 if (is_error) {
[18:04:03.527]                   sessionInformation <- function() {
[18:04:03.527]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.527]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.527]                       search = base::search(), system = base::Sys.info())
[18:04:03.527]                   }
[18:04:03.527]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.527]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.527]                     cond$call), session = sessionInformation(), 
[18:04:03.527]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.527]                   signalCondition(cond)
[18:04:03.527]                 }
[18:04:03.527]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.527]                 "immediateCondition"))) {
[18:04:03.527]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.527]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.527]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.527]                   if (TRUE && !signal) {
[18:04:03.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.527]                     {
[18:04:03.527]                       inherits <- base::inherits
[18:04:03.527]                       invokeRestart <- base::invokeRestart
[18:04:03.527]                       is.null <- base::is.null
[18:04:03.527]                       muffled <- FALSE
[18:04:03.527]                       if (inherits(cond, "message")) {
[18:04:03.527]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.527]                         if (muffled) 
[18:04:03.527]                           invokeRestart("muffleMessage")
[18:04:03.527]                       }
[18:04:03.527]                       else if (inherits(cond, "warning")) {
[18:04:03.527]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.527]                         if (muffled) 
[18:04:03.527]                           invokeRestart("muffleWarning")
[18:04:03.527]                       }
[18:04:03.527]                       else if (inherits(cond, "condition")) {
[18:04:03.527]                         if (!is.null(pattern)) {
[18:04:03.527]                           computeRestarts <- base::computeRestarts
[18:04:03.527]                           grepl <- base::grepl
[18:04:03.527]                           restarts <- computeRestarts(cond)
[18:04:03.527]                           for (restart in restarts) {
[18:04:03.527]                             name <- restart$name
[18:04:03.527]                             if (is.null(name)) 
[18:04:03.527]                               next
[18:04:03.527]                             if (!grepl(pattern, name)) 
[18:04:03.527]                               next
[18:04:03.527]                             invokeRestart(restart)
[18:04:03.527]                             muffled <- TRUE
[18:04:03.527]                             break
[18:04:03.527]                           }
[18:04:03.527]                         }
[18:04:03.527]                       }
[18:04:03.527]                       invisible(muffled)
[18:04:03.527]                     }
[18:04:03.527]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.527]                   }
[18:04:03.527]                 }
[18:04:03.527]                 else {
[18:04:03.527]                   if (TRUE) {
[18:04:03.527]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.527]                     {
[18:04:03.527]                       inherits <- base::inherits
[18:04:03.527]                       invokeRestart <- base::invokeRestart
[18:04:03.527]                       is.null <- base::is.null
[18:04:03.527]                       muffled <- FALSE
[18:04:03.527]                       if (inherits(cond, "message")) {
[18:04:03.527]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.527]                         if (muffled) 
[18:04:03.527]                           invokeRestart("muffleMessage")
[18:04:03.527]                       }
[18:04:03.527]                       else if (inherits(cond, "warning")) {
[18:04:03.527]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.527]                         if (muffled) 
[18:04:03.527]                           invokeRestart("muffleWarning")
[18:04:03.527]                       }
[18:04:03.527]                       else if (inherits(cond, "condition")) {
[18:04:03.527]                         if (!is.null(pattern)) {
[18:04:03.527]                           computeRestarts <- base::computeRestarts
[18:04:03.527]                           grepl <- base::grepl
[18:04:03.527]                           restarts <- computeRestarts(cond)
[18:04:03.527]                           for (restart in restarts) {
[18:04:03.527]                             name <- restart$name
[18:04:03.527]                             if (is.null(name)) 
[18:04:03.527]                               next
[18:04:03.527]                             if (!grepl(pattern, name)) 
[18:04:03.527]                               next
[18:04:03.527]                             invokeRestart(restart)
[18:04:03.527]                             muffled <- TRUE
[18:04:03.527]                             break
[18:04:03.527]                           }
[18:04:03.527]                         }
[18:04:03.527]                       }
[18:04:03.527]                       invisible(muffled)
[18:04:03.527]                     }
[18:04:03.527]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.527]                   }
[18:04:03.527]                 }
[18:04:03.527]             }
[18:04:03.527]         }))
[18:04:03.527]     }, error = function(ex) {
[18:04:03.527]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.527]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.527]                 ...future.rng), started = ...future.startTime, 
[18:04:03.527]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.527]             version = "1.8"), class = "FutureResult")
[18:04:03.527]     }, finally = {
[18:04:03.527]         if (!identical(...future.workdir, getwd())) 
[18:04:03.527]             setwd(...future.workdir)
[18:04:03.527]         {
[18:04:03.527]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.527]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.527]             }
[18:04:03.527]             base::options(...future.oldOptions)
[18:04:03.527]             if (.Platform$OS.type == "windows") {
[18:04:03.527]                 old_names <- names(...future.oldEnvVars)
[18:04:03.527]                 envs <- base::Sys.getenv()
[18:04:03.527]                 names <- names(envs)
[18:04:03.527]                 common <- intersect(names, old_names)
[18:04:03.527]                 added <- setdiff(names, old_names)
[18:04:03.527]                 removed <- setdiff(old_names, names)
[18:04:03.527]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.527]                   envs[common]]
[18:04:03.527]                 NAMES <- toupper(changed)
[18:04:03.527]                 args <- list()
[18:04:03.527]                 for (kk in seq_along(NAMES)) {
[18:04:03.527]                   name <- changed[[kk]]
[18:04:03.527]                   NAME <- NAMES[[kk]]
[18:04:03.527]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.527]                     next
[18:04:03.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.527]                 }
[18:04:03.527]                 NAMES <- toupper(added)
[18:04:03.527]                 for (kk in seq_along(NAMES)) {
[18:04:03.527]                   name <- added[[kk]]
[18:04:03.527]                   NAME <- NAMES[[kk]]
[18:04:03.527]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.527]                     next
[18:04:03.527]                   args[[name]] <- ""
[18:04:03.527]                 }
[18:04:03.527]                 NAMES <- toupper(removed)
[18:04:03.527]                 for (kk in seq_along(NAMES)) {
[18:04:03.527]                   name <- removed[[kk]]
[18:04:03.527]                   NAME <- NAMES[[kk]]
[18:04:03.527]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.527]                     next
[18:04:03.527]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.527]                 }
[18:04:03.527]                 if (length(args) > 0) 
[18:04:03.527]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.527]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.527]             }
[18:04:03.527]             else {
[18:04:03.527]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.527]             }
[18:04:03.527]             {
[18:04:03.527]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.527]                   0L) {
[18:04:03.527]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.527]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.527]                   base::options(opts)
[18:04:03.527]                 }
[18:04:03.527]                 {
[18:04:03.527]                   {
[18:04:03.527]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:03.527]                     NULL
[18:04:03.527]                   }
[18:04:03.527]                   options(future.plan = NULL)
[18:04:03.527]                   if (is.na(NA_character_)) 
[18:04:03.527]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.527]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.527]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.527]                     .init = FALSE)
[18:04:03.527]                 }
[18:04:03.527]             }
[18:04:03.527]         }
[18:04:03.527]     })
[18:04:03.527]     if (TRUE) {
[18:04:03.527]         base::sink(type = "output", split = FALSE)
[18:04:03.527]         if (TRUE) {
[18:04:03.527]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.527]         }
[18:04:03.527]         else {
[18:04:03.527]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.527]         }
[18:04:03.527]         base::close(...future.stdout)
[18:04:03.527]         ...future.stdout <- NULL
[18:04:03.527]     }
[18:04:03.527]     ...future.result$conditions <- ...future.conditions
[18:04:03.527]     ...future.result$finished <- base::Sys.time()
[18:04:03.527]     ...future.result
[18:04:03.527] }
[18:04:03.532] assign_globals() ...
[18:04:03.532] List of 1
[18:04:03.532]  $ a: num 1
[18:04:03.532]  - attr(*, "where")=List of 1
[18:04:03.532]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.532]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.532]  - attr(*, "resolved")= logi FALSE
[18:04:03.532]  - attr(*, "total_size")= num 56
[18:04:03.532]  - attr(*, "already-done")= logi TRUE
[18:04:03.538] - copied ‘a’ to environment
[18:04:03.538] assign_globals() ... done
[18:04:03.538] requestCore(): workers = 2
[18:04:03.542] MulticoreFuture started
[18:04:03.543] - Launch lazy future ... done
[18:04:03.543] run() for ‘MulticoreFuture’ ... done
[18:04:03.544] result() for MulticoreFuture ...
[18:04:03.544] plan(): Setting new future strategy stack:
[18:04:03.544] List of future strategies:
[18:04:03.544] 1. sequential:
[18:04:03.544]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.544]    - tweaked: FALSE
[18:04:03.544]    - call: NULL
[18:04:03.546] plan(): nbrOfWorkers() = 1
[18:04:03.551] plan(): Setting new future strategy stack:
[18:04:03.551] List of future strategies:
[18:04:03.551] 1. multicore:
[18:04:03.551]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:03.551]    - tweaked: FALSE
[18:04:03.551]    - call: plan(strategy)
[18:04:03.561] plan(): nbrOfWorkers() = 2
[18:04:03.563] result() for MulticoreFuture ...
[18:04:03.563] result() for MulticoreFuture ... done
[18:04:03.563] result() for MulticoreFuture ... done
[18:04:03.564] result() for MulticoreFuture ...
[18:04:03.564] result() for MulticoreFuture ... done
[18:04:03.564] getGlobalsAndPackages() ...
[18:04:03.565] Searching for globals...
[18:04:03.567] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.567] Searching for globals ... DONE
[18:04:03.568] Resolving globals: FALSE
[18:04:03.569] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.569] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.570] - globals: [1] ‘a’
[18:04:03.570] 
[18:04:03.570] getGlobalsAndPackages() ... DONE
[18:04:03.571] run() for ‘Future’ ...
[18:04:03.571] - state: ‘created’
[18:04:03.571] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:03.579] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:03.579] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:03.579]   - Field: ‘label’
[18:04:03.580]   - Field: ‘local’
[18:04:03.580]   - Field: ‘owner’
[18:04:03.580]   - Field: ‘envir’
[18:04:03.580]   - Field: ‘workers’
[18:04:03.581]   - Field: ‘packages’
[18:04:03.581]   - Field: ‘gc’
[18:04:03.581]   - Field: ‘job’
[18:04:03.581]   - Field: ‘conditions’
[18:04:03.582]   - Field: ‘expr’
[18:04:03.582]   - Field: ‘uuid’
[18:04:03.582]   - Field: ‘seed’
[18:04:03.582]   - Field: ‘version’
[18:04:03.583]   - Field: ‘result’
[18:04:03.583]   - Field: ‘asynchronous’
[18:04:03.583]   - Field: ‘calls’
[18:04:03.583]   - Field: ‘globals’
[18:04:03.584]   - Field: ‘stdout’
[18:04:03.584]   - Field: ‘earlySignal’
[18:04:03.584]   - Field: ‘lazy’
[18:04:03.584]   - Field: ‘state’
[18:04:03.584] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:03.585] - Launch lazy future ...
[18:04:03.585] Packages needed by the future expression (n = 0): <none>
[18:04:03.586] Packages needed by future strategies (n = 0): <none>
[18:04:03.587] {
[18:04:03.587]     {
[18:04:03.587]         {
[18:04:03.587]             ...future.startTime <- base::Sys.time()
[18:04:03.587]             {
[18:04:03.587]                 {
[18:04:03.587]                   {
[18:04:03.587]                     {
[18:04:03.587]                       base::local({
[18:04:03.587]                         has_future <- base::requireNamespace("future", 
[18:04:03.587]                           quietly = TRUE)
[18:04:03.587]                         if (has_future) {
[18:04:03.587]                           ns <- base::getNamespace("future")
[18:04:03.587]                           version <- ns[[".package"]][["version"]]
[18:04:03.587]                           if (is.null(version)) 
[18:04:03.587]                             version <- utils::packageVersion("future")
[18:04:03.587]                         }
[18:04:03.587]                         else {
[18:04:03.587]                           version <- NULL
[18:04:03.587]                         }
[18:04:03.587]                         if (!has_future || version < "1.8.0") {
[18:04:03.587]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.587]                             "", base::R.version$version.string), 
[18:04:03.587]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:03.587]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.587]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.587]                               "release", "version")], collapse = " "), 
[18:04:03.587]                             hostname = base::Sys.info()[["nodename"]])
[18:04:03.587]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.587]                             info)
[18:04:03.587]                           info <- base::paste(info, collapse = "; ")
[18:04:03.587]                           if (!has_future) {
[18:04:03.587]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.587]                               info)
[18:04:03.587]                           }
[18:04:03.587]                           else {
[18:04:03.587]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.587]                               info, version)
[18:04:03.587]                           }
[18:04:03.587]                           base::stop(msg)
[18:04:03.587]                         }
[18:04:03.587]                       })
[18:04:03.587]                     }
[18:04:03.587]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:03.587]                     base::options(mc.cores = 1L)
[18:04:03.587]                   }
[18:04:03.587]                   ...future.strategy.old <- future::plan("list")
[18:04:03.587]                   options(future.plan = NULL)
[18:04:03.587]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.587]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.587]                 }
[18:04:03.587]                 ...future.workdir <- getwd()
[18:04:03.587]             }
[18:04:03.587]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.587]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.587]         }
[18:04:03.587]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.587]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.587]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.587]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.587]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.587]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.587]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.587]             base::names(...future.oldOptions))
[18:04:03.587]     }
[18:04:03.587]     if (FALSE) {
[18:04:03.587]     }
[18:04:03.587]     else {
[18:04:03.587]         if (TRUE) {
[18:04:03.587]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.587]                 open = "w")
[18:04:03.587]         }
[18:04:03.587]         else {
[18:04:03.587]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.587]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.587]         }
[18:04:03.587]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.587]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.587]             base::sink(type = "output", split = FALSE)
[18:04:03.587]             base::close(...future.stdout)
[18:04:03.587]         }, add = TRUE)
[18:04:03.587]     }
[18:04:03.587]     ...future.frame <- base::sys.nframe()
[18:04:03.587]     ...future.conditions <- base::list()
[18:04:03.587]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.587]     if (FALSE) {
[18:04:03.587]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.587]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.587]     }
[18:04:03.587]     ...future.result <- base::tryCatch({
[18:04:03.587]         base::withCallingHandlers({
[18:04:03.587]             ...future.value <- base::withVisible(base::local({
[18:04:03.587]                 withCallingHandlers({
[18:04:03.587]                   {
[18:04:03.587]                     2 * a
[18:04:03.587]                   }
[18:04:03.587]                 }, immediateCondition = function(cond) {
[18:04:03.587]                   save_rds <- function (object, pathname, ...) 
[18:04:03.587]                   {
[18:04:03.587]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:03.587]                     if (file_test("-f", pathname_tmp)) {
[18:04:03.587]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.587]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:03.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.587]                         fi_tmp[["mtime"]])
[18:04:03.587]                     }
[18:04:03.587]                     tryCatch({
[18:04:03.587]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:03.587]                     }, error = function(ex) {
[18:04:03.587]                       msg <- conditionMessage(ex)
[18:04:03.587]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.587]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:03.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.587]                         fi_tmp[["mtime"]], msg)
[18:04:03.587]                       ex$message <- msg
[18:04:03.587]                       stop(ex)
[18:04:03.587]                     })
[18:04:03.587]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:03.587]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:03.587]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:03.587]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.587]                       fi <- file.info(pathname)
[18:04:03.587]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:03.587]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.587]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:03.587]                         fi[["size"]], fi[["mtime"]])
[18:04:03.587]                       stop(msg)
[18:04:03.587]                     }
[18:04:03.587]                     invisible(pathname)
[18:04:03.587]                   }
[18:04:03.587]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:03.587]                     rootPath = tempdir()) 
[18:04:03.587]                   {
[18:04:03.587]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:03.587]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:03.587]                       tmpdir = path, fileext = ".rds")
[18:04:03.587]                     save_rds(obj, file)
[18:04:03.587]                   }
[18:04:03.587]                   saveImmediateCondition(cond, path = "/tmp/RtmpXYgi0H/.future/immediateConditions")
[18:04:03.587]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.587]                   {
[18:04:03.587]                     inherits <- base::inherits
[18:04:03.587]                     invokeRestart <- base::invokeRestart
[18:04:03.587]                     is.null <- base::is.null
[18:04:03.587]                     muffled <- FALSE
[18:04:03.587]                     if (inherits(cond, "message")) {
[18:04:03.587]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:03.587]                       if (muffled) 
[18:04:03.587]                         invokeRestart("muffleMessage")
[18:04:03.587]                     }
[18:04:03.587]                     else if (inherits(cond, "warning")) {
[18:04:03.587]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:03.587]                       if (muffled) 
[18:04:03.587]                         invokeRestart("muffleWarning")
[18:04:03.587]                     }
[18:04:03.587]                     else if (inherits(cond, "condition")) {
[18:04:03.587]                       if (!is.null(pattern)) {
[18:04:03.587]                         computeRestarts <- base::computeRestarts
[18:04:03.587]                         grepl <- base::grepl
[18:04:03.587]                         restarts <- computeRestarts(cond)
[18:04:03.587]                         for (restart in restarts) {
[18:04:03.587]                           name <- restart$name
[18:04:03.587]                           if (is.null(name)) 
[18:04:03.587]                             next
[18:04:03.587]                           if (!grepl(pattern, name)) 
[18:04:03.587]                             next
[18:04:03.587]                           invokeRestart(restart)
[18:04:03.587]                           muffled <- TRUE
[18:04:03.587]                           break
[18:04:03.587]                         }
[18:04:03.587]                       }
[18:04:03.587]                     }
[18:04:03.587]                     invisible(muffled)
[18:04:03.587]                   }
[18:04:03.587]                   muffleCondition(cond)
[18:04:03.587]                 })
[18:04:03.587]             }))
[18:04:03.587]             future::FutureResult(value = ...future.value$value, 
[18:04:03.587]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.587]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.587]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.587]                     ...future.globalenv.names))
[18:04:03.587]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.587]         }, condition = base::local({
[18:04:03.587]             c <- base::c
[18:04:03.587]             inherits <- base::inherits
[18:04:03.587]             invokeRestart <- base::invokeRestart
[18:04:03.587]             length <- base::length
[18:04:03.587]             list <- base::list
[18:04:03.587]             seq.int <- base::seq.int
[18:04:03.587]             signalCondition <- base::signalCondition
[18:04:03.587]             sys.calls <- base::sys.calls
[18:04:03.587]             `[[` <- base::`[[`
[18:04:03.587]             `+` <- base::`+`
[18:04:03.587]             `<<-` <- base::`<<-`
[18:04:03.587]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.587]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.587]                   3L)]
[18:04:03.587]             }
[18:04:03.587]             function(cond) {
[18:04:03.587]                 is_error <- inherits(cond, "error")
[18:04:03.587]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.587]                   NULL)
[18:04:03.587]                 if (is_error) {
[18:04:03.587]                   sessionInformation <- function() {
[18:04:03.587]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.587]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.587]                       search = base::search(), system = base::Sys.info())
[18:04:03.587]                   }
[18:04:03.587]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.587]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.587]                     cond$call), session = sessionInformation(), 
[18:04:03.587]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.587]                   signalCondition(cond)
[18:04:03.587]                 }
[18:04:03.587]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.587]                 "immediateCondition"))) {
[18:04:03.587]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.587]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.587]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.587]                   if (TRUE && !signal) {
[18:04:03.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.587]                     {
[18:04:03.587]                       inherits <- base::inherits
[18:04:03.587]                       invokeRestart <- base::invokeRestart
[18:04:03.587]                       is.null <- base::is.null
[18:04:03.587]                       muffled <- FALSE
[18:04:03.587]                       if (inherits(cond, "message")) {
[18:04:03.587]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.587]                         if (muffled) 
[18:04:03.587]                           invokeRestart("muffleMessage")
[18:04:03.587]                       }
[18:04:03.587]                       else if (inherits(cond, "warning")) {
[18:04:03.587]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.587]                         if (muffled) 
[18:04:03.587]                           invokeRestart("muffleWarning")
[18:04:03.587]                       }
[18:04:03.587]                       else if (inherits(cond, "condition")) {
[18:04:03.587]                         if (!is.null(pattern)) {
[18:04:03.587]                           computeRestarts <- base::computeRestarts
[18:04:03.587]                           grepl <- base::grepl
[18:04:03.587]                           restarts <- computeRestarts(cond)
[18:04:03.587]                           for (restart in restarts) {
[18:04:03.587]                             name <- restart$name
[18:04:03.587]                             if (is.null(name)) 
[18:04:03.587]                               next
[18:04:03.587]                             if (!grepl(pattern, name)) 
[18:04:03.587]                               next
[18:04:03.587]                             invokeRestart(restart)
[18:04:03.587]                             muffled <- TRUE
[18:04:03.587]                             break
[18:04:03.587]                           }
[18:04:03.587]                         }
[18:04:03.587]                       }
[18:04:03.587]                       invisible(muffled)
[18:04:03.587]                     }
[18:04:03.587]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.587]                   }
[18:04:03.587]                 }
[18:04:03.587]                 else {
[18:04:03.587]                   if (TRUE) {
[18:04:03.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.587]                     {
[18:04:03.587]                       inherits <- base::inherits
[18:04:03.587]                       invokeRestart <- base::invokeRestart
[18:04:03.587]                       is.null <- base::is.null
[18:04:03.587]                       muffled <- FALSE
[18:04:03.587]                       if (inherits(cond, "message")) {
[18:04:03.587]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.587]                         if (muffled) 
[18:04:03.587]                           invokeRestart("muffleMessage")
[18:04:03.587]                       }
[18:04:03.587]                       else if (inherits(cond, "warning")) {
[18:04:03.587]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.587]                         if (muffled) 
[18:04:03.587]                           invokeRestart("muffleWarning")
[18:04:03.587]                       }
[18:04:03.587]                       else if (inherits(cond, "condition")) {
[18:04:03.587]                         if (!is.null(pattern)) {
[18:04:03.587]                           computeRestarts <- base::computeRestarts
[18:04:03.587]                           grepl <- base::grepl
[18:04:03.587]                           restarts <- computeRestarts(cond)
[18:04:03.587]                           for (restart in restarts) {
[18:04:03.587]                             name <- restart$name
[18:04:03.587]                             if (is.null(name)) 
[18:04:03.587]                               next
[18:04:03.587]                             if (!grepl(pattern, name)) 
[18:04:03.587]                               next
[18:04:03.587]                             invokeRestart(restart)
[18:04:03.587]                             muffled <- TRUE
[18:04:03.587]                             break
[18:04:03.587]                           }
[18:04:03.587]                         }
[18:04:03.587]                       }
[18:04:03.587]                       invisible(muffled)
[18:04:03.587]                     }
[18:04:03.587]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.587]                   }
[18:04:03.587]                 }
[18:04:03.587]             }
[18:04:03.587]         }))
[18:04:03.587]     }, error = function(ex) {
[18:04:03.587]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.587]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.587]                 ...future.rng), started = ...future.startTime, 
[18:04:03.587]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.587]             version = "1.8"), class = "FutureResult")
[18:04:03.587]     }, finally = {
[18:04:03.587]         if (!identical(...future.workdir, getwd())) 
[18:04:03.587]             setwd(...future.workdir)
[18:04:03.587]         {
[18:04:03.587]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.587]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.587]             }
[18:04:03.587]             base::options(...future.oldOptions)
[18:04:03.587]             if (.Platform$OS.type == "windows") {
[18:04:03.587]                 old_names <- names(...future.oldEnvVars)
[18:04:03.587]                 envs <- base::Sys.getenv()
[18:04:03.587]                 names <- names(envs)
[18:04:03.587]                 common <- intersect(names, old_names)
[18:04:03.587]                 added <- setdiff(names, old_names)
[18:04:03.587]                 removed <- setdiff(old_names, names)
[18:04:03.587]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.587]                   envs[common]]
[18:04:03.587]                 NAMES <- toupper(changed)
[18:04:03.587]                 args <- list()
[18:04:03.587]                 for (kk in seq_along(NAMES)) {
[18:04:03.587]                   name <- changed[[kk]]
[18:04:03.587]                   NAME <- NAMES[[kk]]
[18:04:03.587]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.587]                     next
[18:04:03.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.587]                 }
[18:04:03.587]                 NAMES <- toupper(added)
[18:04:03.587]                 for (kk in seq_along(NAMES)) {
[18:04:03.587]                   name <- added[[kk]]
[18:04:03.587]                   NAME <- NAMES[[kk]]
[18:04:03.587]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.587]                     next
[18:04:03.587]                   args[[name]] <- ""
[18:04:03.587]                 }
[18:04:03.587]                 NAMES <- toupper(removed)
[18:04:03.587]                 for (kk in seq_along(NAMES)) {
[18:04:03.587]                   name <- removed[[kk]]
[18:04:03.587]                   NAME <- NAMES[[kk]]
[18:04:03.587]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.587]                     next
[18:04:03.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.587]                 }
[18:04:03.587]                 if (length(args) > 0) 
[18:04:03.587]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.587]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.587]             }
[18:04:03.587]             else {
[18:04:03.587]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.587]             }
[18:04:03.587]             {
[18:04:03.587]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.587]                   0L) {
[18:04:03.587]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.587]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.587]                   base::options(opts)
[18:04:03.587]                 }
[18:04:03.587]                 {
[18:04:03.587]                   {
[18:04:03.587]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:03.587]                     NULL
[18:04:03.587]                   }
[18:04:03.587]                   options(future.plan = NULL)
[18:04:03.587]                   if (is.na(NA_character_)) 
[18:04:03.587]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.587]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.587]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.587]                     .init = FALSE)
[18:04:03.587]                 }
[18:04:03.587]             }
[18:04:03.587]         }
[18:04:03.587]     })
[18:04:03.587]     if (TRUE) {
[18:04:03.587]         base::sink(type = "output", split = FALSE)
[18:04:03.587]         if (TRUE) {
[18:04:03.587]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.587]         }
[18:04:03.587]         else {
[18:04:03.587]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.587]         }
[18:04:03.587]         base::close(...future.stdout)
[18:04:03.587]         ...future.stdout <- NULL
[18:04:03.587]     }
[18:04:03.587]     ...future.result$conditions <- ...future.conditions
[18:04:03.587]     ...future.result$finished <- base::Sys.time()
[18:04:03.587]     ...future.result
[18:04:03.587] }
[18:04:03.591] assign_globals() ...
[18:04:03.592] List of 1
[18:04:03.592]  $ a: num 1
[18:04:03.592]  - attr(*, "where")=List of 1
[18:04:03.592]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.592]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.592]  - attr(*, "resolved")= logi FALSE
[18:04:03.592]  - attr(*, "total_size")= num 56
[18:04:03.592]  - attr(*, "already-done")= logi TRUE
[18:04:03.597] - copied ‘a’ to environment
[18:04:03.598] assign_globals() ... done
[18:04:03.598] requestCore(): workers = 2
[18:04:03.601] MulticoreFuture started
[18:04:03.602] - Launch lazy future ... done
[18:04:03.603] run() for ‘MulticoreFuture’ ... done
[18:04:03.603] plan(): Setting new future strategy stack:
[18:04:03.604] result() for MulticoreFuture ...
[18:04:03.604] List of future strategies:
[18:04:03.604] 1. sequential:
[18:04:03.604]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.604]    - tweaked: FALSE
[18:04:03.604]    - call: NULL
[18:04:03.613] plan(): nbrOfWorkers() = 1
[18:04:03.617] plan(): Setting new future strategy stack:
[18:04:03.618] List of future strategies:
[18:04:03.618] 1. multicore:
[18:04:03.618]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:03.618]    - tweaked: FALSE
[18:04:03.618]    - call: plan(strategy)
[18:04:03.627] plan(): nbrOfWorkers() = 2
[18:04:03.629] result() for MulticoreFuture ...
[18:04:03.630] result() for MulticoreFuture ... done
[18:04:03.630] result() for MulticoreFuture ... done
[18:04:03.630] result() for MulticoreFuture ...
[18:04:03.631] result() for MulticoreFuture ... done
[18:04:03.631] getGlobalsAndPackages() ...
[18:04:03.632] Searching for globals...
[18:04:03.634] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.634] Searching for globals ... DONE
[18:04:03.635] Resolving globals: FALSE
[18:04:03.636] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.637] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.637] - globals: [1] ‘a’
[18:04:03.637] 
[18:04:03.637] getGlobalsAndPackages() ... DONE
[18:04:03.638] run() for ‘Future’ ...
[18:04:03.638] - state: ‘created’
[18:04:03.639] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:03.646] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:03.646] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:03.647]   - Field: ‘label’
[18:04:03.647]   - Field: ‘local’
[18:04:03.647]   - Field: ‘owner’
[18:04:03.648]   - Field: ‘envir’
[18:04:03.648]   - Field: ‘workers’
[18:04:03.648]   - Field: ‘packages’
[18:04:03.648]   - Field: ‘gc’
[18:04:03.649]   - Field: ‘job’
[18:04:03.649]   - Field: ‘conditions’
[18:04:03.649]   - Field: ‘expr’
[18:04:03.649]   - Field: ‘uuid’
[18:04:03.649]   - Field: ‘seed’
[18:04:03.650]   - Field: ‘version’
[18:04:03.650]   - Field: ‘result’
[18:04:03.650]   - Field: ‘asynchronous’
[18:04:03.650]   - Field: ‘calls’
[18:04:03.651]   - Field: ‘globals’
[18:04:03.651]   - Field: ‘stdout’
[18:04:03.651]   - Field: ‘earlySignal’
[18:04:03.651]   - Field: ‘lazy’
[18:04:03.652]   - Field: ‘state’
[18:04:03.652] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:03.652] - Launch lazy future ...
[18:04:03.653] Packages needed by the future expression (n = 0): <none>
[18:04:03.653] Packages needed by future strategies (n = 0): <none>
[18:04:03.654] {
[18:04:03.654]     {
[18:04:03.654]         {
[18:04:03.654]             ...future.startTime <- base::Sys.time()
[18:04:03.654]             {
[18:04:03.654]                 {
[18:04:03.654]                   {
[18:04:03.654]                     {
[18:04:03.654]                       base::local({
[18:04:03.654]                         has_future <- base::requireNamespace("future", 
[18:04:03.654]                           quietly = TRUE)
[18:04:03.654]                         if (has_future) {
[18:04:03.654]                           ns <- base::getNamespace("future")
[18:04:03.654]                           version <- ns[[".package"]][["version"]]
[18:04:03.654]                           if (is.null(version)) 
[18:04:03.654]                             version <- utils::packageVersion("future")
[18:04:03.654]                         }
[18:04:03.654]                         else {
[18:04:03.654]                           version <- NULL
[18:04:03.654]                         }
[18:04:03.654]                         if (!has_future || version < "1.8.0") {
[18:04:03.654]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.654]                             "", base::R.version$version.string), 
[18:04:03.654]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:03.654]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.654]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.654]                               "release", "version")], collapse = " "), 
[18:04:03.654]                             hostname = base::Sys.info()[["nodename"]])
[18:04:03.654]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.654]                             info)
[18:04:03.654]                           info <- base::paste(info, collapse = "; ")
[18:04:03.654]                           if (!has_future) {
[18:04:03.654]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.654]                               info)
[18:04:03.654]                           }
[18:04:03.654]                           else {
[18:04:03.654]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.654]                               info, version)
[18:04:03.654]                           }
[18:04:03.654]                           base::stop(msg)
[18:04:03.654]                         }
[18:04:03.654]                       })
[18:04:03.654]                     }
[18:04:03.654]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:03.654]                     base::options(mc.cores = 1L)
[18:04:03.654]                   }
[18:04:03.654]                   ...future.strategy.old <- future::plan("list")
[18:04:03.654]                   options(future.plan = NULL)
[18:04:03.654]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.654]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.654]                 }
[18:04:03.654]                 ...future.workdir <- getwd()
[18:04:03.654]             }
[18:04:03.654]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.654]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.654]         }
[18:04:03.654]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.654]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.654]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.654]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.654]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.654]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.654]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.654]             base::names(...future.oldOptions))
[18:04:03.654]     }
[18:04:03.654]     if (FALSE) {
[18:04:03.654]     }
[18:04:03.654]     else {
[18:04:03.654]         if (TRUE) {
[18:04:03.654]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.654]                 open = "w")
[18:04:03.654]         }
[18:04:03.654]         else {
[18:04:03.654]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.654]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.654]         }
[18:04:03.654]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.654]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.654]             base::sink(type = "output", split = FALSE)
[18:04:03.654]             base::close(...future.stdout)
[18:04:03.654]         }, add = TRUE)
[18:04:03.654]     }
[18:04:03.654]     ...future.frame <- base::sys.nframe()
[18:04:03.654]     ...future.conditions <- base::list()
[18:04:03.654]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.654]     if (FALSE) {
[18:04:03.654]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.654]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.654]     }
[18:04:03.654]     ...future.result <- base::tryCatch({
[18:04:03.654]         base::withCallingHandlers({
[18:04:03.654]             ...future.value <- base::withVisible(base::local({
[18:04:03.654]                 withCallingHandlers({
[18:04:03.654]                   {
[18:04:03.654]                     2 * a
[18:04:03.654]                   }
[18:04:03.654]                 }, immediateCondition = function(cond) {
[18:04:03.654]                   save_rds <- function (object, pathname, ...) 
[18:04:03.654]                   {
[18:04:03.654]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:03.654]                     if (file_test("-f", pathname_tmp)) {
[18:04:03.654]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.654]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:03.654]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.654]                         fi_tmp[["mtime"]])
[18:04:03.654]                     }
[18:04:03.654]                     tryCatch({
[18:04:03.654]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:03.654]                     }, error = function(ex) {
[18:04:03.654]                       msg <- conditionMessage(ex)
[18:04:03.654]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.654]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:03.654]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.654]                         fi_tmp[["mtime"]], msg)
[18:04:03.654]                       ex$message <- msg
[18:04:03.654]                       stop(ex)
[18:04:03.654]                     })
[18:04:03.654]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:03.654]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:03.654]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:03.654]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.654]                       fi <- file.info(pathname)
[18:04:03.654]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:03.654]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.654]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:03.654]                         fi[["size"]], fi[["mtime"]])
[18:04:03.654]                       stop(msg)
[18:04:03.654]                     }
[18:04:03.654]                     invisible(pathname)
[18:04:03.654]                   }
[18:04:03.654]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:03.654]                     rootPath = tempdir()) 
[18:04:03.654]                   {
[18:04:03.654]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:03.654]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:03.654]                       tmpdir = path, fileext = ".rds")
[18:04:03.654]                     save_rds(obj, file)
[18:04:03.654]                   }
[18:04:03.654]                   saveImmediateCondition(cond, path = "/tmp/RtmpXYgi0H/.future/immediateConditions")
[18:04:03.654]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.654]                   {
[18:04:03.654]                     inherits <- base::inherits
[18:04:03.654]                     invokeRestart <- base::invokeRestart
[18:04:03.654]                     is.null <- base::is.null
[18:04:03.654]                     muffled <- FALSE
[18:04:03.654]                     if (inherits(cond, "message")) {
[18:04:03.654]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:03.654]                       if (muffled) 
[18:04:03.654]                         invokeRestart("muffleMessage")
[18:04:03.654]                     }
[18:04:03.654]                     else if (inherits(cond, "warning")) {
[18:04:03.654]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:03.654]                       if (muffled) 
[18:04:03.654]                         invokeRestart("muffleWarning")
[18:04:03.654]                     }
[18:04:03.654]                     else if (inherits(cond, "condition")) {
[18:04:03.654]                       if (!is.null(pattern)) {
[18:04:03.654]                         computeRestarts <- base::computeRestarts
[18:04:03.654]                         grepl <- base::grepl
[18:04:03.654]                         restarts <- computeRestarts(cond)
[18:04:03.654]                         for (restart in restarts) {
[18:04:03.654]                           name <- restart$name
[18:04:03.654]                           if (is.null(name)) 
[18:04:03.654]                             next
[18:04:03.654]                           if (!grepl(pattern, name)) 
[18:04:03.654]                             next
[18:04:03.654]                           invokeRestart(restart)
[18:04:03.654]                           muffled <- TRUE
[18:04:03.654]                           break
[18:04:03.654]                         }
[18:04:03.654]                       }
[18:04:03.654]                     }
[18:04:03.654]                     invisible(muffled)
[18:04:03.654]                   }
[18:04:03.654]                   muffleCondition(cond)
[18:04:03.654]                 })
[18:04:03.654]             }))
[18:04:03.654]             future::FutureResult(value = ...future.value$value, 
[18:04:03.654]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.654]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.654]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.654]                     ...future.globalenv.names))
[18:04:03.654]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.654]         }, condition = base::local({
[18:04:03.654]             c <- base::c
[18:04:03.654]             inherits <- base::inherits
[18:04:03.654]             invokeRestart <- base::invokeRestart
[18:04:03.654]             length <- base::length
[18:04:03.654]             list <- base::list
[18:04:03.654]             seq.int <- base::seq.int
[18:04:03.654]             signalCondition <- base::signalCondition
[18:04:03.654]             sys.calls <- base::sys.calls
[18:04:03.654]             `[[` <- base::`[[`
[18:04:03.654]             `+` <- base::`+`
[18:04:03.654]             `<<-` <- base::`<<-`
[18:04:03.654]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.654]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.654]                   3L)]
[18:04:03.654]             }
[18:04:03.654]             function(cond) {
[18:04:03.654]                 is_error <- inherits(cond, "error")
[18:04:03.654]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.654]                   NULL)
[18:04:03.654]                 if (is_error) {
[18:04:03.654]                   sessionInformation <- function() {
[18:04:03.654]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.654]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.654]                       search = base::search(), system = base::Sys.info())
[18:04:03.654]                   }
[18:04:03.654]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.654]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.654]                     cond$call), session = sessionInformation(), 
[18:04:03.654]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.654]                   signalCondition(cond)
[18:04:03.654]                 }
[18:04:03.654]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.654]                 "immediateCondition"))) {
[18:04:03.654]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.654]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.654]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.654]                   if (TRUE && !signal) {
[18:04:03.654]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.654]                     {
[18:04:03.654]                       inherits <- base::inherits
[18:04:03.654]                       invokeRestart <- base::invokeRestart
[18:04:03.654]                       is.null <- base::is.null
[18:04:03.654]                       muffled <- FALSE
[18:04:03.654]                       if (inherits(cond, "message")) {
[18:04:03.654]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.654]                         if (muffled) 
[18:04:03.654]                           invokeRestart("muffleMessage")
[18:04:03.654]                       }
[18:04:03.654]                       else if (inherits(cond, "warning")) {
[18:04:03.654]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.654]                         if (muffled) 
[18:04:03.654]                           invokeRestart("muffleWarning")
[18:04:03.654]                       }
[18:04:03.654]                       else if (inherits(cond, "condition")) {
[18:04:03.654]                         if (!is.null(pattern)) {
[18:04:03.654]                           computeRestarts <- base::computeRestarts
[18:04:03.654]                           grepl <- base::grepl
[18:04:03.654]                           restarts <- computeRestarts(cond)
[18:04:03.654]                           for (restart in restarts) {
[18:04:03.654]                             name <- restart$name
[18:04:03.654]                             if (is.null(name)) 
[18:04:03.654]                               next
[18:04:03.654]                             if (!grepl(pattern, name)) 
[18:04:03.654]                               next
[18:04:03.654]                             invokeRestart(restart)
[18:04:03.654]                             muffled <- TRUE
[18:04:03.654]                             break
[18:04:03.654]                           }
[18:04:03.654]                         }
[18:04:03.654]                       }
[18:04:03.654]                       invisible(muffled)
[18:04:03.654]                     }
[18:04:03.654]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.654]                   }
[18:04:03.654]                 }
[18:04:03.654]                 else {
[18:04:03.654]                   if (TRUE) {
[18:04:03.654]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.654]                     {
[18:04:03.654]                       inherits <- base::inherits
[18:04:03.654]                       invokeRestart <- base::invokeRestart
[18:04:03.654]                       is.null <- base::is.null
[18:04:03.654]                       muffled <- FALSE
[18:04:03.654]                       if (inherits(cond, "message")) {
[18:04:03.654]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.654]                         if (muffled) 
[18:04:03.654]                           invokeRestart("muffleMessage")
[18:04:03.654]                       }
[18:04:03.654]                       else if (inherits(cond, "warning")) {
[18:04:03.654]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.654]                         if (muffled) 
[18:04:03.654]                           invokeRestart("muffleWarning")
[18:04:03.654]                       }
[18:04:03.654]                       else if (inherits(cond, "condition")) {
[18:04:03.654]                         if (!is.null(pattern)) {
[18:04:03.654]                           computeRestarts <- base::computeRestarts
[18:04:03.654]                           grepl <- base::grepl
[18:04:03.654]                           restarts <- computeRestarts(cond)
[18:04:03.654]                           for (restart in restarts) {
[18:04:03.654]                             name <- restart$name
[18:04:03.654]                             if (is.null(name)) 
[18:04:03.654]                               next
[18:04:03.654]                             if (!grepl(pattern, name)) 
[18:04:03.654]                               next
[18:04:03.654]                             invokeRestart(restart)
[18:04:03.654]                             muffled <- TRUE
[18:04:03.654]                             break
[18:04:03.654]                           }
[18:04:03.654]                         }
[18:04:03.654]                       }
[18:04:03.654]                       invisible(muffled)
[18:04:03.654]                     }
[18:04:03.654]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.654]                   }
[18:04:03.654]                 }
[18:04:03.654]             }
[18:04:03.654]         }))
[18:04:03.654]     }, error = function(ex) {
[18:04:03.654]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.654]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.654]                 ...future.rng), started = ...future.startTime, 
[18:04:03.654]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.654]             version = "1.8"), class = "FutureResult")
[18:04:03.654]     }, finally = {
[18:04:03.654]         if (!identical(...future.workdir, getwd())) 
[18:04:03.654]             setwd(...future.workdir)
[18:04:03.654]         {
[18:04:03.654]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.654]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.654]             }
[18:04:03.654]             base::options(...future.oldOptions)
[18:04:03.654]             if (.Platform$OS.type == "windows") {
[18:04:03.654]                 old_names <- names(...future.oldEnvVars)
[18:04:03.654]                 envs <- base::Sys.getenv()
[18:04:03.654]                 names <- names(envs)
[18:04:03.654]                 common <- intersect(names, old_names)
[18:04:03.654]                 added <- setdiff(names, old_names)
[18:04:03.654]                 removed <- setdiff(old_names, names)
[18:04:03.654]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.654]                   envs[common]]
[18:04:03.654]                 NAMES <- toupper(changed)
[18:04:03.654]                 args <- list()
[18:04:03.654]                 for (kk in seq_along(NAMES)) {
[18:04:03.654]                   name <- changed[[kk]]
[18:04:03.654]                   NAME <- NAMES[[kk]]
[18:04:03.654]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.654]                     next
[18:04:03.654]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.654]                 }
[18:04:03.654]                 NAMES <- toupper(added)
[18:04:03.654]                 for (kk in seq_along(NAMES)) {
[18:04:03.654]                   name <- added[[kk]]
[18:04:03.654]                   NAME <- NAMES[[kk]]
[18:04:03.654]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.654]                     next
[18:04:03.654]                   args[[name]] <- ""
[18:04:03.654]                 }
[18:04:03.654]                 NAMES <- toupper(removed)
[18:04:03.654]                 for (kk in seq_along(NAMES)) {
[18:04:03.654]                   name <- removed[[kk]]
[18:04:03.654]                   NAME <- NAMES[[kk]]
[18:04:03.654]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.654]                     next
[18:04:03.654]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.654]                 }
[18:04:03.654]                 if (length(args) > 0) 
[18:04:03.654]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.654]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.654]             }
[18:04:03.654]             else {
[18:04:03.654]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.654]             }
[18:04:03.654]             {
[18:04:03.654]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.654]                   0L) {
[18:04:03.654]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.654]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.654]                   base::options(opts)
[18:04:03.654]                 }
[18:04:03.654]                 {
[18:04:03.654]                   {
[18:04:03.654]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:03.654]                     NULL
[18:04:03.654]                   }
[18:04:03.654]                   options(future.plan = NULL)
[18:04:03.654]                   if (is.na(NA_character_)) 
[18:04:03.654]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.654]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.654]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.654]                     .init = FALSE)
[18:04:03.654]                 }
[18:04:03.654]             }
[18:04:03.654]         }
[18:04:03.654]     })
[18:04:03.654]     if (TRUE) {
[18:04:03.654]         base::sink(type = "output", split = FALSE)
[18:04:03.654]         if (TRUE) {
[18:04:03.654]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.654]         }
[18:04:03.654]         else {
[18:04:03.654]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.654]         }
[18:04:03.654]         base::close(...future.stdout)
[18:04:03.654]         ...future.stdout <- NULL
[18:04:03.654]     }
[18:04:03.654]     ...future.result$conditions <- ...future.conditions
[18:04:03.654]     ...future.result$finished <- base::Sys.time()
[18:04:03.654]     ...future.result
[18:04:03.654] }
[18:04:03.658] assign_globals() ...
[18:04:03.659] List of 1
[18:04:03.659]  $ a: num 1
[18:04:03.659]  - attr(*, "where")=List of 1
[18:04:03.659]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.659]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.659]  - attr(*, "resolved")= logi FALSE
[18:04:03.659]  - attr(*, "total_size")= num 56
[18:04:03.659]  - attr(*, "already-done")= logi TRUE
[18:04:03.664] - copied ‘a’ to environment
[18:04:03.665] assign_globals() ... done
[18:04:03.665] requestCore(): workers = 2
[18:04:03.669] MulticoreFuture started
[18:04:03.671] - Launch lazy future ... done
[18:04:03.672] run() for ‘MulticoreFuture’ ... done
[18:04:03.672] result() for MulticoreFuture ...
[18:04:03.674] plan(): Setting new future strategy stack:
[18:04:03.674] List of future strategies:
[18:04:03.674] 1. sequential:
[18:04:03.674]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.674]    - tweaked: FALSE
[18:04:03.674]    - call: NULL
[18:04:03.677] plan(): nbrOfWorkers() = 1
[18:04:03.682] plan(): Setting new future strategy stack:
[18:04:03.682] List of future strategies:
[18:04:03.682] 1. multicore:
[18:04:03.682]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:03.682]    - tweaked: FALSE
[18:04:03.682]    - call: plan(strategy)
[18:04:03.692] plan(): nbrOfWorkers() = 2
[18:04:03.693] result() for MulticoreFuture ...
[18:04:03.694] result() for MulticoreFuture ... done
[18:04:03.694] result() for MulticoreFuture ... done
[18:04:03.694] result() for MulticoreFuture ...
[18:04:03.694] result() for MulticoreFuture ... done
[18:04:03.698] getGlobalsAndPackages() ...
[18:04:03.698] Searching for globals...
[18:04:03.701] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:03.701] Searching for globals ... DONE
[18:04:03.702] Resolving globals: FALSE
[18:04:03.703] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:03.704] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:03.704] - globals: [1] ‘a’
[18:04:03.704] 
[18:04:03.704] getGlobalsAndPackages() ... DONE
[18:04:03.705] run() for ‘Future’ ...
[18:04:03.706] - state: ‘created’
[18:04:03.706] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:04:03.713] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:03.714] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:04:03.714]   - Field: ‘label’
[18:04:03.714]   - Field: ‘local’
[18:04:03.714]   - Field: ‘owner’
[18:04:03.715]   - Field: ‘envir’
[18:04:03.715]   - Field: ‘workers’
[18:04:03.715]   - Field: ‘packages’
[18:04:03.715]   - Field: ‘gc’
[18:04:03.716]   - Field: ‘job’
[18:04:03.716]   - Field: ‘conditions’
[18:04:03.716]   - Field: ‘expr’
[18:04:03.716]   - Field: ‘uuid’
[18:04:03.717]   - Field: ‘seed’
[18:04:03.717]   - Field: ‘version’
[18:04:03.717]   - Field: ‘result’
[18:04:03.717]   - Field: ‘asynchronous’
[18:04:03.718]   - Field: ‘calls’
[18:04:03.718]   - Field: ‘globals’
[18:04:03.718]   - Field: ‘stdout’
[18:04:03.718]   - Field: ‘earlySignal’
[18:04:03.719]   - Field: ‘lazy’
[18:04:03.719]   - Field: ‘state’
[18:04:03.719] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:04:03.719] - Launch lazy future ...
[18:04:03.720] Packages needed by the future expression (n = 0): <none>
[18:04:03.720] Packages needed by future strategies (n = 0): <none>
[18:04:03.721] {
[18:04:03.721]     {
[18:04:03.721]         {
[18:04:03.721]             ...future.startTime <- base::Sys.time()
[18:04:03.721]             {
[18:04:03.721]                 {
[18:04:03.721]                   {
[18:04:03.721]                     {
[18:04:03.721]                       base::local({
[18:04:03.721]                         has_future <- base::requireNamespace("future", 
[18:04:03.721]                           quietly = TRUE)
[18:04:03.721]                         if (has_future) {
[18:04:03.721]                           ns <- base::getNamespace("future")
[18:04:03.721]                           version <- ns[[".package"]][["version"]]
[18:04:03.721]                           if (is.null(version)) 
[18:04:03.721]                             version <- utils::packageVersion("future")
[18:04:03.721]                         }
[18:04:03.721]                         else {
[18:04:03.721]                           version <- NULL
[18:04:03.721]                         }
[18:04:03.721]                         if (!has_future || version < "1.8.0") {
[18:04:03.721]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:03.721]                             "", base::R.version$version.string), 
[18:04:03.721]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:03.721]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:03.721]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:03.721]                               "release", "version")], collapse = " "), 
[18:04:03.721]                             hostname = base::Sys.info()[["nodename"]])
[18:04:03.721]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:03.721]                             info)
[18:04:03.721]                           info <- base::paste(info, collapse = "; ")
[18:04:03.721]                           if (!has_future) {
[18:04:03.721]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:03.721]                               info)
[18:04:03.721]                           }
[18:04:03.721]                           else {
[18:04:03.721]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:03.721]                               info, version)
[18:04:03.721]                           }
[18:04:03.721]                           base::stop(msg)
[18:04:03.721]                         }
[18:04:03.721]                       })
[18:04:03.721]                     }
[18:04:03.721]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:03.721]                     base::options(mc.cores = 1L)
[18:04:03.721]                   }
[18:04:03.721]                   ...future.strategy.old <- future::plan("list")
[18:04:03.721]                   options(future.plan = NULL)
[18:04:03.721]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.721]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:03.721]                 }
[18:04:03.721]                 ...future.workdir <- getwd()
[18:04:03.721]             }
[18:04:03.721]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:03.721]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:03.721]         }
[18:04:03.721]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:03.721]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:03.721]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:03.721]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:03.721]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:03.721]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:03.721]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:03.721]             base::names(...future.oldOptions))
[18:04:03.721]     }
[18:04:03.721]     if (FALSE) {
[18:04:03.721]     }
[18:04:03.721]     else {
[18:04:03.721]         if (TRUE) {
[18:04:03.721]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:03.721]                 open = "w")
[18:04:03.721]         }
[18:04:03.721]         else {
[18:04:03.721]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:03.721]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:03.721]         }
[18:04:03.721]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:03.721]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:03.721]             base::sink(type = "output", split = FALSE)
[18:04:03.721]             base::close(...future.stdout)
[18:04:03.721]         }, add = TRUE)
[18:04:03.721]     }
[18:04:03.721]     ...future.frame <- base::sys.nframe()
[18:04:03.721]     ...future.conditions <- base::list()
[18:04:03.721]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:03.721]     if (FALSE) {
[18:04:03.721]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:03.721]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:03.721]     }
[18:04:03.721]     ...future.result <- base::tryCatch({
[18:04:03.721]         base::withCallingHandlers({
[18:04:03.721]             ...future.value <- base::withVisible(base::local({
[18:04:03.721]                 withCallingHandlers({
[18:04:03.721]                   {
[18:04:03.721]                     2 * a
[18:04:03.721]                   }
[18:04:03.721]                 }, immediateCondition = function(cond) {
[18:04:03.721]                   save_rds <- function (object, pathname, ...) 
[18:04:03.721]                   {
[18:04:03.721]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:04:03.721]                     if (file_test("-f", pathname_tmp)) {
[18:04:03.721]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.721]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:04:03.721]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.721]                         fi_tmp[["mtime"]])
[18:04:03.721]                     }
[18:04:03.721]                     tryCatch({
[18:04:03.721]                       saveRDS(object, file = pathname_tmp, ...)
[18:04:03.721]                     }, error = function(ex) {
[18:04:03.721]                       msg <- conditionMessage(ex)
[18:04:03.721]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.721]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:04:03.721]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.721]                         fi_tmp[["mtime"]], msg)
[18:04:03.721]                       ex$message <- msg
[18:04:03.721]                       stop(ex)
[18:04:03.721]                     })
[18:04:03.721]                     stopifnot(file_test("-f", pathname_tmp))
[18:04:03.721]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:04:03.721]                     if (!res || file_test("-f", pathname_tmp)) {
[18:04:03.721]                       fi_tmp <- file.info(pathname_tmp)
[18:04:03.721]                       fi <- file.info(pathname)
[18:04:03.721]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:04:03.721]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:04:03.721]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:04:03.721]                         fi[["size"]], fi[["mtime"]])
[18:04:03.721]                       stop(msg)
[18:04:03.721]                     }
[18:04:03.721]                     invisible(pathname)
[18:04:03.721]                   }
[18:04:03.721]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:04:03.721]                     rootPath = tempdir()) 
[18:04:03.721]                   {
[18:04:03.721]                     obj <- list(time = Sys.time(), condition = cond)
[18:04:03.721]                     file <- tempfile(pattern = class(cond)[1], 
[18:04:03.721]                       tmpdir = path, fileext = ".rds")
[18:04:03.721]                     save_rds(obj, file)
[18:04:03.721]                   }
[18:04:03.721]                   saveImmediateCondition(cond, path = "/tmp/RtmpXYgi0H/.future/immediateConditions")
[18:04:03.721]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.721]                   {
[18:04:03.721]                     inherits <- base::inherits
[18:04:03.721]                     invokeRestart <- base::invokeRestart
[18:04:03.721]                     is.null <- base::is.null
[18:04:03.721]                     muffled <- FALSE
[18:04:03.721]                     if (inherits(cond, "message")) {
[18:04:03.721]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:03.721]                       if (muffled) 
[18:04:03.721]                         invokeRestart("muffleMessage")
[18:04:03.721]                     }
[18:04:03.721]                     else if (inherits(cond, "warning")) {
[18:04:03.721]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:03.721]                       if (muffled) 
[18:04:03.721]                         invokeRestart("muffleWarning")
[18:04:03.721]                     }
[18:04:03.721]                     else if (inherits(cond, "condition")) {
[18:04:03.721]                       if (!is.null(pattern)) {
[18:04:03.721]                         computeRestarts <- base::computeRestarts
[18:04:03.721]                         grepl <- base::grepl
[18:04:03.721]                         restarts <- computeRestarts(cond)
[18:04:03.721]                         for (restart in restarts) {
[18:04:03.721]                           name <- restart$name
[18:04:03.721]                           if (is.null(name)) 
[18:04:03.721]                             next
[18:04:03.721]                           if (!grepl(pattern, name)) 
[18:04:03.721]                             next
[18:04:03.721]                           invokeRestart(restart)
[18:04:03.721]                           muffled <- TRUE
[18:04:03.721]                           break
[18:04:03.721]                         }
[18:04:03.721]                       }
[18:04:03.721]                     }
[18:04:03.721]                     invisible(muffled)
[18:04:03.721]                   }
[18:04:03.721]                   muffleCondition(cond)
[18:04:03.721]                 })
[18:04:03.721]             }))
[18:04:03.721]             future::FutureResult(value = ...future.value$value, 
[18:04:03.721]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.721]                   ...future.rng), globalenv = if (FALSE) 
[18:04:03.721]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:03.721]                     ...future.globalenv.names))
[18:04:03.721]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:03.721]         }, condition = base::local({
[18:04:03.721]             c <- base::c
[18:04:03.721]             inherits <- base::inherits
[18:04:03.721]             invokeRestart <- base::invokeRestart
[18:04:03.721]             length <- base::length
[18:04:03.721]             list <- base::list
[18:04:03.721]             seq.int <- base::seq.int
[18:04:03.721]             signalCondition <- base::signalCondition
[18:04:03.721]             sys.calls <- base::sys.calls
[18:04:03.721]             `[[` <- base::`[[`
[18:04:03.721]             `+` <- base::`+`
[18:04:03.721]             `<<-` <- base::`<<-`
[18:04:03.721]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:03.721]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:03.721]                   3L)]
[18:04:03.721]             }
[18:04:03.721]             function(cond) {
[18:04:03.721]                 is_error <- inherits(cond, "error")
[18:04:03.721]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:03.721]                   NULL)
[18:04:03.721]                 if (is_error) {
[18:04:03.721]                   sessionInformation <- function() {
[18:04:03.721]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:03.721]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:03.721]                       search = base::search(), system = base::Sys.info())
[18:04:03.721]                   }
[18:04:03.721]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.721]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:03.721]                     cond$call), session = sessionInformation(), 
[18:04:03.721]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:03.721]                   signalCondition(cond)
[18:04:03.721]                 }
[18:04:03.721]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:03.721]                 "immediateCondition"))) {
[18:04:03.721]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:03.721]                   ...future.conditions[[length(...future.conditions) + 
[18:04:03.721]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:03.721]                   if (TRUE && !signal) {
[18:04:03.721]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.721]                     {
[18:04:03.721]                       inherits <- base::inherits
[18:04:03.721]                       invokeRestart <- base::invokeRestart
[18:04:03.721]                       is.null <- base::is.null
[18:04:03.721]                       muffled <- FALSE
[18:04:03.721]                       if (inherits(cond, "message")) {
[18:04:03.721]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.721]                         if (muffled) 
[18:04:03.721]                           invokeRestart("muffleMessage")
[18:04:03.721]                       }
[18:04:03.721]                       else if (inherits(cond, "warning")) {
[18:04:03.721]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.721]                         if (muffled) 
[18:04:03.721]                           invokeRestart("muffleWarning")
[18:04:03.721]                       }
[18:04:03.721]                       else if (inherits(cond, "condition")) {
[18:04:03.721]                         if (!is.null(pattern)) {
[18:04:03.721]                           computeRestarts <- base::computeRestarts
[18:04:03.721]                           grepl <- base::grepl
[18:04:03.721]                           restarts <- computeRestarts(cond)
[18:04:03.721]                           for (restart in restarts) {
[18:04:03.721]                             name <- restart$name
[18:04:03.721]                             if (is.null(name)) 
[18:04:03.721]                               next
[18:04:03.721]                             if (!grepl(pattern, name)) 
[18:04:03.721]                               next
[18:04:03.721]                             invokeRestart(restart)
[18:04:03.721]                             muffled <- TRUE
[18:04:03.721]                             break
[18:04:03.721]                           }
[18:04:03.721]                         }
[18:04:03.721]                       }
[18:04:03.721]                       invisible(muffled)
[18:04:03.721]                     }
[18:04:03.721]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.721]                   }
[18:04:03.721]                 }
[18:04:03.721]                 else {
[18:04:03.721]                   if (TRUE) {
[18:04:03.721]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:03.721]                     {
[18:04:03.721]                       inherits <- base::inherits
[18:04:03.721]                       invokeRestart <- base::invokeRestart
[18:04:03.721]                       is.null <- base::is.null
[18:04:03.721]                       muffled <- FALSE
[18:04:03.721]                       if (inherits(cond, "message")) {
[18:04:03.721]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:03.721]                         if (muffled) 
[18:04:03.721]                           invokeRestart("muffleMessage")
[18:04:03.721]                       }
[18:04:03.721]                       else if (inherits(cond, "warning")) {
[18:04:03.721]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:03.721]                         if (muffled) 
[18:04:03.721]                           invokeRestart("muffleWarning")
[18:04:03.721]                       }
[18:04:03.721]                       else if (inherits(cond, "condition")) {
[18:04:03.721]                         if (!is.null(pattern)) {
[18:04:03.721]                           computeRestarts <- base::computeRestarts
[18:04:03.721]                           grepl <- base::grepl
[18:04:03.721]                           restarts <- computeRestarts(cond)
[18:04:03.721]                           for (restart in restarts) {
[18:04:03.721]                             name <- restart$name
[18:04:03.721]                             if (is.null(name)) 
[18:04:03.721]                               next
[18:04:03.721]                             if (!grepl(pattern, name)) 
[18:04:03.721]                               next
[18:04:03.721]                             invokeRestart(restart)
[18:04:03.721]                             muffled <- TRUE
[18:04:03.721]                             break
[18:04:03.721]                           }
[18:04:03.721]                         }
[18:04:03.721]                       }
[18:04:03.721]                       invisible(muffled)
[18:04:03.721]                     }
[18:04:03.721]                     muffleCondition(cond, pattern = "^muffle")
[18:04:03.721]                   }
[18:04:03.721]                 }
[18:04:03.721]             }
[18:04:03.721]         }))
[18:04:03.721]     }, error = function(ex) {
[18:04:03.721]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:03.721]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:03.721]                 ...future.rng), started = ...future.startTime, 
[18:04:03.721]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:03.721]             version = "1.8"), class = "FutureResult")
[18:04:03.721]     }, finally = {
[18:04:03.721]         if (!identical(...future.workdir, getwd())) 
[18:04:03.721]             setwd(...future.workdir)
[18:04:03.721]         {
[18:04:03.721]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:03.721]                 ...future.oldOptions$nwarnings <- NULL
[18:04:03.721]             }
[18:04:03.721]             base::options(...future.oldOptions)
[18:04:03.721]             if (.Platform$OS.type == "windows") {
[18:04:03.721]                 old_names <- names(...future.oldEnvVars)
[18:04:03.721]                 envs <- base::Sys.getenv()
[18:04:03.721]                 names <- names(envs)
[18:04:03.721]                 common <- intersect(names, old_names)
[18:04:03.721]                 added <- setdiff(names, old_names)
[18:04:03.721]                 removed <- setdiff(old_names, names)
[18:04:03.721]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:03.721]                   envs[common]]
[18:04:03.721]                 NAMES <- toupper(changed)
[18:04:03.721]                 args <- list()
[18:04:03.721]                 for (kk in seq_along(NAMES)) {
[18:04:03.721]                   name <- changed[[kk]]
[18:04:03.721]                   NAME <- NAMES[[kk]]
[18:04:03.721]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.721]                     next
[18:04:03.721]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.721]                 }
[18:04:03.721]                 NAMES <- toupper(added)
[18:04:03.721]                 for (kk in seq_along(NAMES)) {
[18:04:03.721]                   name <- added[[kk]]
[18:04:03.721]                   NAME <- NAMES[[kk]]
[18:04:03.721]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.721]                     next
[18:04:03.721]                   args[[name]] <- ""
[18:04:03.721]                 }
[18:04:03.721]                 NAMES <- toupper(removed)
[18:04:03.721]                 for (kk in seq_along(NAMES)) {
[18:04:03.721]                   name <- removed[[kk]]
[18:04:03.721]                   NAME <- NAMES[[kk]]
[18:04:03.721]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:03.721]                     next
[18:04:03.721]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:03.721]                 }
[18:04:03.721]                 if (length(args) > 0) 
[18:04:03.721]                   base::do.call(base::Sys.setenv, args = args)
[18:04:03.721]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:03.721]             }
[18:04:03.721]             else {
[18:04:03.721]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:03.721]             }
[18:04:03.721]             {
[18:04:03.721]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:03.721]                   0L) {
[18:04:03.721]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:03.721]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:03.721]                   base::options(opts)
[18:04:03.721]                 }
[18:04:03.721]                 {
[18:04:03.721]                   {
[18:04:03.721]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:03.721]                     NULL
[18:04:03.721]                   }
[18:04:03.721]                   options(future.plan = NULL)
[18:04:03.721]                   if (is.na(NA_character_)) 
[18:04:03.721]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:03.721]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:03.721]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:03.721]                     .init = FALSE)
[18:04:03.721]                 }
[18:04:03.721]             }
[18:04:03.721]         }
[18:04:03.721]     })
[18:04:03.721]     if (TRUE) {
[18:04:03.721]         base::sink(type = "output", split = FALSE)
[18:04:03.721]         if (TRUE) {
[18:04:03.721]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:03.721]         }
[18:04:03.721]         else {
[18:04:03.721]             ...future.result["stdout"] <- base::list(NULL)
[18:04:03.721]         }
[18:04:03.721]         base::close(...future.stdout)
[18:04:03.721]         ...future.stdout <- NULL
[18:04:03.721]     }
[18:04:03.721]     ...future.result$conditions <- ...future.conditions
[18:04:03.721]     ...future.result$finished <- base::Sys.time()
[18:04:03.721]     ...future.result
[18:04:03.721] }
[18:04:03.727] assign_globals() ...
[18:04:03.727] List of 1
[18:04:03.727]  $ a: num 1
[18:04:03.727]  - attr(*, "where")=List of 1
[18:04:03.727]   ..$ a:<environment: R_EmptyEnv> 
[18:04:03.727]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[18:04:03.727]  - attr(*, "resolved")= logi FALSE
[18:04:03.727]  - attr(*, "total_size")= num 56
[18:04:03.727]  - attr(*, "already-done")= logi TRUE
[18:04:03.734] - copied ‘a’ to environment
[18:04:03.734] assign_globals() ... done
[18:04:03.735] requestCore(): workers = 2
[18:04:03.738] MulticoreFuture started
[18:04:03.739] - Launch lazy future ... done
[18:04:03.742] plan(): Setting new future strategy stack:
[18:04:03.739] run() for ‘MulticoreFuture’ ... done
[18:04:03.744] result() for MulticoreFuture ...
[18:04:03.743] List of future strategies:
[18:04:03.743] 1. sequential:
[18:04:03.743]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:03.743]    - tweaked: FALSE
[18:04:03.743]    - call: NULL
[18:04:03.747] plan(): nbrOfWorkers() = 1
[18:04:03.751] plan(): Setting new future strategy stack:
[18:04:03.751] List of future strategies:
[18:04:03.751] 1. multicore:
[18:04:03.751]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:04:03.751]    - tweaked: FALSE
[18:04:03.751]    - call: plan(strategy)
[18:04:03.761] plan(): nbrOfWorkers() = 2
[18:04:03.769] result() for MulticoreFuture ...
[18:04:03.770] result() for MulticoreFuture ... done
[18:04:03.770] result() for MulticoreFuture ... done
[18:04:03.770] result() for MulticoreFuture ...
[18:04:03.771] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[18:04:03.772] plan(): Setting new future strategy stack:
[18:04:03.772] List of future strategies:
[18:04:03.772] 1. multisession:
[18:04:03.772]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:04:03.772]    - tweaked: FALSE
[18:04:03.772]    - call: plan(strategy)
[18:04:03.773] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:04:03.774] multisession:
[18:04:03.774] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:04:03.774] - tweaked: FALSE
[18:04:03.774] - call: plan(strategy)
[18:04:03.788] getGlobalsAndPackages() ...
[18:04:03.788] Not searching for globals
[18:04:03.789] - globals: [0] <none>
[18:04:03.789] getGlobalsAndPackages() ... DONE
[18:04:03.790] [local output] makeClusterPSOCK() ...
[18:04:03.855] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:04:03.858] [local output] Base port: 11848
[18:04:03.858] [local output] Getting setup options for 2 cluster nodes ...
[18:04:03.858] [local output]  - Node 1 of 2 ...
[18:04:03.859] [local output] localMachine=TRUE => revtunnel=FALSE

[18:04:03.860] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXYgi0H/worker.rank=1.parallelly.parent=321664.4e88055a11c40.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpXYgi0H/worker.rank=1.parallelly.parent=321664.4e88055a11c40.pid")'’
[18:04:04.116] - Possible to infer worker's PID: TRUE
[18:04:04.116] [local output] Rscript port: 11848

[18:04:04.117] [local output]  - Node 2 of 2 ...
[18:04:04.117] [local output] localMachine=TRUE => revtunnel=FALSE

[18:04:04.118] [local output] Rscript port: 11848

[18:04:04.119] [local output] Getting setup options for 2 cluster nodes ... done
[18:04:04.119] [local output]  - Parallel setup requested for some PSOCK nodes
[18:04:04.120] [local output] Setting up PSOCK nodes in parallel
[18:04:04.120] List of 36
[18:04:04.120]  $ worker          : chr "localhost"
[18:04:04.120]   ..- attr(*, "localhost")= logi TRUE
[18:04:04.120]  $ master          : chr "localhost"
[18:04:04.120]  $ port            : int 11848
[18:04:04.120]  $ connectTimeout  : num 120
[18:04:04.120]  $ timeout         : num 2592000
[18:04:04.120]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:04:04.120]  $ homogeneous     : logi TRUE
[18:04:04.120]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:04:04.120]  $ rscript_envs    : NULL
[18:04:04.120]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:04:04.120]  $ rscript_startup : NULL
[18:04:04.120]  $ rscript_sh      : chr "sh"
[18:04:04.120]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:04:04.120]  $ methods         : logi TRUE
[18:04:04.120]  $ socketOptions   : chr "no-delay"
[18:04:04.120]  $ useXDR          : logi FALSE
[18:04:04.120]  $ outfile         : chr "/dev/null"
[18:04:04.120]  $ renice          : int NA
[18:04:04.120]  $ rshcmd          : NULL
[18:04:04.120]  $ user            : chr(0) 
[18:04:04.120]  $ revtunnel       : logi FALSE
[18:04:04.120]  $ rshlogfile      : NULL
[18:04:04.120]  $ rshopts         : chr(0) 
[18:04:04.120]  $ rank            : int 1
[18:04:04.120]  $ manual          : logi FALSE
[18:04:04.120]  $ dryrun          : logi FALSE
[18:04:04.120]  $ quiet           : logi FALSE
[18:04:04.120]  $ setup_strategy  : chr "parallel"
[18:04:04.120]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:04:04.120]  $ pidfile         : chr "/tmp/RtmpXYgi0H/worker.rank=1.parallelly.parent=321664.4e88055a11c40.pid"
[18:04:04.120]  $ rshcmd_label    : NULL
[18:04:04.120]  $ rsh_call        : NULL
[18:04:04.120]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:04:04.120]  $ localMachine    : logi TRUE
[18:04:04.120]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:04:04.120]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:04:04.120]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:04:04.120]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:04:04.120]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:04:04.120]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:04:04.120]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:04:04.120]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:04:04.120]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:04:04.120]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:04:04.120]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:04:04.120]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:04:04.120]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:04:04.120]  $ arguments       :List of 28
[18:04:04.120]   ..$ worker          : chr "localhost"
[18:04:04.120]   ..$ master          : NULL
[18:04:04.120]   ..$ port            : int 11848
[18:04:04.120]   ..$ connectTimeout  : num 120
[18:04:04.120]   ..$ timeout         : num 2592000
[18:04:04.120]   ..$ rscript         : NULL
[18:04:04.120]   ..$ homogeneous     : NULL
[18:04:04.120]   ..$ rscript_args    : NULL
[18:04:04.120]   ..$ rscript_envs    : NULL
[18:04:04.120]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:04:04.120]   ..$ rscript_startup : NULL
[18:04:04.120]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:04:04.120]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:04:04.120]   ..$ methods         : logi TRUE
[18:04:04.120]   ..$ socketOptions   : chr "no-delay"
[18:04:04.120]   ..$ useXDR          : logi FALSE
[18:04:04.120]   ..$ outfile         : chr "/dev/null"
[18:04:04.120]   ..$ renice          : int NA
[18:04:04.120]   ..$ rshcmd          : NULL
[18:04:04.120]   ..$ user            : NULL
[18:04:04.120]   ..$ revtunnel       : logi NA
[18:04:04.120]   ..$ rshlogfile      : NULL
[18:04:04.120]   ..$ rshopts         : NULL
[18:04:04.120]   ..$ rank            : int 1
[18:04:04.120]   ..$ manual          : logi FALSE
[18:04:04.120]   ..$ dryrun          : logi FALSE
[18:04:04.120]   ..$ quiet           : logi FALSE
[18:04:04.120]   ..$ setup_strategy  : chr "parallel"
[18:04:04.120]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:04:04.154] [local output] System call to launch all workers:
[18:04:04.155] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpXYgi0H/worker.rank=1.parallelly.parent=321664.4e88055a11c40.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11848 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:04:04.155] [local output] Starting PSOCK main server
[18:04:04.165] [local output] Workers launched
[18:04:04.165] [local output] Waiting for workers to connect back
[18:04:04.165]  - [local output] 0 workers out of 2 ready
[18:04:04.529]  - [local output] 0 workers out of 2 ready
[18:04:04.531]  - [local output] 0 workers out of 2 ready
[18:04:04.532]  - [local output] 2 workers out of 2 ready
[18:04:04.532] [local output] Launching of workers completed
[18:04:04.532] [local output] Collecting session information from workers
[18:04:04.534] [local output]  - Worker #1 of 2
[18:04:04.535] [local output]  - Worker #2 of 2
[18:04:04.535] [local output] makeClusterPSOCK() ... done
[18:04:04.555] Packages needed by the future expression (n = 0): <none>
[18:04:04.555] Packages needed by future strategies (n = 0): <none>
[18:04:04.556] {
[18:04:04.556]     {
[18:04:04.556]         {
[18:04:04.556]             ...future.startTime <- base::Sys.time()
[18:04:04.556]             {
[18:04:04.556]                 {
[18:04:04.556]                   {
[18:04:04.556]                     {
[18:04:04.556]                       base::local({
[18:04:04.556]                         has_future <- base::requireNamespace("future", 
[18:04:04.556]                           quietly = TRUE)
[18:04:04.556]                         if (has_future) {
[18:04:04.556]                           ns <- base::getNamespace("future")
[18:04:04.556]                           version <- ns[[".package"]][["version"]]
[18:04:04.556]                           if (is.null(version)) 
[18:04:04.556]                             version <- utils::packageVersion("future")
[18:04:04.556]                         }
[18:04:04.556]                         else {
[18:04:04.556]                           version <- NULL
[18:04:04.556]                         }
[18:04:04.556]                         if (!has_future || version < "1.8.0") {
[18:04:04.556]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:04.556]                             "", base::R.version$version.string), 
[18:04:04.556]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:04.556]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:04.556]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:04.556]                               "release", "version")], collapse = " "), 
[18:04:04.556]                             hostname = base::Sys.info()[["nodename"]])
[18:04:04.556]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:04.556]                             info)
[18:04:04.556]                           info <- base::paste(info, collapse = "; ")
[18:04:04.556]                           if (!has_future) {
[18:04:04.556]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:04.556]                               info)
[18:04:04.556]                           }
[18:04:04.556]                           else {
[18:04:04.556]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:04.556]                               info, version)
[18:04:04.556]                           }
[18:04:04.556]                           base::stop(msg)
[18:04:04.556]                         }
[18:04:04.556]                       })
[18:04:04.556]                     }
[18:04:04.556]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:04.556]                     base::options(mc.cores = 1L)
[18:04:04.556]                   }
[18:04:04.556]                   ...future.strategy.old <- future::plan("list")
[18:04:04.556]                   options(future.plan = NULL)
[18:04:04.556]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:04.556]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:04.556]                 }
[18:04:04.556]                 ...future.workdir <- getwd()
[18:04:04.556]             }
[18:04:04.556]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:04.556]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:04.556]         }
[18:04:04.556]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:04.556]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:04.556]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:04.556]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:04.556]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:04.556]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:04.556]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:04.556]             base::names(...future.oldOptions))
[18:04:04.556]     }
[18:04:04.556]     if (FALSE) {
[18:04:04.556]     }
[18:04:04.556]     else {
[18:04:04.556]         if (TRUE) {
[18:04:04.556]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:04.556]                 open = "w")
[18:04:04.556]         }
[18:04:04.556]         else {
[18:04:04.556]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:04.556]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:04.556]         }
[18:04:04.556]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:04.556]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:04.556]             base::sink(type = "output", split = FALSE)
[18:04:04.556]             base::close(...future.stdout)
[18:04:04.556]         }, add = TRUE)
[18:04:04.556]     }
[18:04:04.556]     ...future.frame <- base::sys.nframe()
[18:04:04.556]     ...future.conditions <- base::list()
[18:04:04.556]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:04.556]     if (FALSE) {
[18:04:04.556]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:04.556]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:04.556]     }
[18:04:04.556]     ...future.result <- base::tryCatch({
[18:04:04.556]         base::withCallingHandlers({
[18:04:04.556]             ...future.value <- base::withVisible(base::local({
[18:04:04.556]                 ...future.makeSendCondition <- base::local({
[18:04:04.556]                   sendCondition <- NULL
[18:04:04.556]                   function(frame = 1L) {
[18:04:04.556]                     if (is.function(sendCondition)) 
[18:04:04.556]                       return(sendCondition)
[18:04:04.556]                     ns <- getNamespace("parallel")
[18:04:04.556]                     if (exists("sendData", mode = "function", 
[18:04:04.556]                       envir = ns)) {
[18:04:04.556]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:04.556]                         envir = ns)
[18:04:04.556]                       envir <- sys.frame(frame)
[18:04:04.556]                       master <- NULL
[18:04:04.556]                       while (!identical(envir, .GlobalEnv) && 
[18:04:04.556]                         !identical(envir, emptyenv())) {
[18:04:04.556]                         if (exists("master", mode = "list", envir = envir, 
[18:04:04.556]                           inherits = FALSE)) {
[18:04:04.556]                           master <- get("master", mode = "list", 
[18:04:04.556]                             envir = envir, inherits = FALSE)
[18:04:04.556]                           if (inherits(master, c("SOCKnode", 
[18:04:04.556]                             "SOCK0node"))) {
[18:04:04.556]                             sendCondition <<- function(cond) {
[18:04:04.556]                               data <- list(type = "VALUE", value = cond, 
[18:04:04.556]                                 success = TRUE)
[18:04:04.556]                               parallel_sendData(master, data)
[18:04:04.556]                             }
[18:04:04.556]                             return(sendCondition)
[18:04:04.556]                           }
[18:04:04.556]                         }
[18:04:04.556]                         frame <- frame + 1L
[18:04:04.556]                         envir <- sys.frame(frame)
[18:04:04.556]                       }
[18:04:04.556]                     }
[18:04:04.556]                     sendCondition <<- function(cond) NULL
[18:04:04.556]                   }
[18:04:04.556]                 })
[18:04:04.556]                 withCallingHandlers({
[18:04:04.556]                   NA
[18:04:04.556]                 }, immediateCondition = function(cond) {
[18:04:04.556]                   sendCondition <- ...future.makeSendCondition()
[18:04:04.556]                   sendCondition(cond)
[18:04:04.556]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.556]                   {
[18:04:04.556]                     inherits <- base::inherits
[18:04:04.556]                     invokeRestart <- base::invokeRestart
[18:04:04.556]                     is.null <- base::is.null
[18:04:04.556]                     muffled <- FALSE
[18:04:04.556]                     if (inherits(cond, "message")) {
[18:04:04.556]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:04.556]                       if (muffled) 
[18:04:04.556]                         invokeRestart("muffleMessage")
[18:04:04.556]                     }
[18:04:04.556]                     else if (inherits(cond, "warning")) {
[18:04:04.556]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:04.556]                       if (muffled) 
[18:04:04.556]                         invokeRestart("muffleWarning")
[18:04:04.556]                     }
[18:04:04.556]                     else if (inherits(cond, "condition")) {
[18:04:04.556]                       if (!is.null(pattern)) {
[18:04:04.556]                         computeRestarts <- base::computeRestarts
[18:04:04.556]                         grepl <- base::grepl
[18:04:04.556]                         restarts <- computeRestarts(cond)
[18:04:04.556]                         for (restart in restarts) {
[18:04:04.556]                           name <- restart$name
[18:04:04.556]                           if (is.null(name)) 
[18:04:04.556]                             next
[18:04:04.556]                           if (!grepl(pattern, name)) 
[18:04:04.556]                             next
[18:04:04.556]                           invokeRestart(restart)
[18:04:04.556]                           muffled <- TRUE
[18:04:04.556]                           break
[18:04:04.556]                         }
[18:04:04.556]                       }
[18:04:04.556]                     }
[18:04:04.556]                     invisible(muffled)
[18:04:04.556]                   }
[18:04:04.556]                   muffleCondition(cond)
[18:04:04.556]                 })
[18:04:04.556]             }))
[18:04:04.556]             future::FutureResult(value = ...future.value$value, 
[18:04:04.556]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:04.556]                   ...future.rng), globalenv = if (FALSE) 
[18:04:04.556]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:04.556]                     ...future.globalenv.names))
[18:04:04.556]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:04.556]         }, condition = base::local({
[18:04:04.556]             c <- base::c
[18:04:04.556]             inherits <- base::inherits
[18:04:04.556]             invokeRestart <- base::invokeRestart
[18:04:04.556]             length <- base::length
[18:04:04.556]             list <- base::list
[18:04:04.556]             seq.int <- base::seq.int
[18:04:04.556]             signalCondition <- base::signalCondition
[18:04:04.556]             sys.calls <- base::sys.calls
[18:04:04.556]             `[[` <- base::`[[`
[18:04:04.556]             `+` <- base::`+`
[18:04:04.556]             `<<-` <- base::`<<-`
[18:04:04.556]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:04.556]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:04.556]                   3L)]
[18:04:04.556]             }
[18:04:04.556]             function(cond) {
[18:04:04.556]                 is_error <- inherits(cond, "error")
[18:04:04.556]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:04.556]                   NULL)
[18:04:04.556]                 if (is_error) {
[18:04:04.556]                   sessionInformation <- function() {
[18:04:04.556]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:04.556]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:04.556]                       search = base::search(), system = base::Sys.info())
[18:04:04.556]                   }
[18:04:04.556]                   ...future.conditions[[length(...future.conditions) + 
[18:04:04.556]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:04.556]                     cond$call), session = sessionInformation(), 
[18:04:04.556]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:04.556]                   signalCondition(cond)
[18:04:04.556]                 }
[18:04:04.556]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:04.556]                 "immediateCondition"))) {
[18:04:04.556]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:04.556]                   ...future.conditions[[length(...future.conditions) + 
[18:04:04.556]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:04.556]                   if (TRUE && !signal) {
[18:04:04.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.556]                     {
[18:04:04.556]                       inherits <- base::inherits
[18:04:04.556]                       invokeRestart <- base::invokeRestart
[18:04:04.556]                       is.null <- base::is.null
[18:04:04.556]                       muffled <- FALSE
[18:04:04.556]                       if (inherits(cond, "message")) {
[18:04:04.556]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:04.556]                         if (muffled) 
[18:04:04.556]                           invokeRestart("muffleMessage")
[18:04:04.556]                       }
[18:04:04.556]                       else if (inherits(cond, "warning")) {
[18:04:04.556]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:04.556]                         if (muffled) 
[18:04:04.556]                           invokeRestart("muffleWarning")
[18:04:04.556]                       }
[18:04:04.556]                       else if (inherits(cond, "condition")) {
[18:04:04.556]                         if (!is.null(pattern)) {
[18:04:04.556]                           computeRestarts <- base::computeRestarts
[18:04:04.556]                           grepl <- base::grepl
[18:04:04.556]                           restarts <- computeRestarts(cond)
[18:04:04.556]                           for (restart in restarts) {
[18:04:04.556]                             name <- restart$name
[18:04:04.556]                             if (is.null(name)) 
[18:04:04.556]                               next
[18:04:04.556]                             if (!grepl(pattern, name)) 
[18:04:04.556]                               next
[18:04:04.556]                             invokeRestart(restart)
[18:04:04.556]                             muffled <- TRUE
[18:04:04.556]                             break
[18:04:04.556]                           }
[18:04:04.556]                         }
[18:04:04.556]                       }
[18:04:04.556]                       invisible(muffled)
[18:04:04.556]                     }
[18:04:04.556]                     muffleCondition(cond, pattern = "^muffle")
[18:04:04.556]                   }
[18:04:04.556]                 }
[18:04:04.556]                 else {
[18:04:04.556]                   if (TRUE) {
[18:04:04.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.556]                     {
[18:04:04.556]                       inherits <- base::inherits
[18:04:04.556]                       invokeRestart <- base::invokeRestart
[18:04:04.556]                       is.null <- base::is.null
[18:04:04.556]                       muffled <- FALSE
[18:04:04.556]                       if (inherits(cond, "message")) {
[18:04:04.556]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:04.556]                         if (muffled) 
[18:04:04.556]                           invokeRestart("muffleMessage")
[18:04:04.556]                       }
[18:04:04.556]                       else if (inherits(cond, "warning")) {
[18:04:04.556]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:04.556]                         if (muffled) 
[18:04:04.556]                           invokeRestart("muffleWarning")
[18:04:04.556]                       }
[18:04:04.556]                       else if (inherits(cond, "condition")) {
[18:04:04.556]                         if (!is.null(pattern)) {
[18:04:04.556]                           computeRestarts <- base::computeRestarts
[18:04:04.556]                           grepl <- base::grepl
[18:04:04.556]                           restarts <- computeRestarts(cond)
[18:04:04.556]                           for (restart in restarts) {
[18:04:04.556]                             name <- restart$name
[18:04:04.556]                             if (is.null(name)) 
[18:04:04.556]                               next
[18:04:04.556]                             if (!grepl(pattern, name)) 
[18:04:04.556]                               next
[18:04:04.556]                             invokeRestart(restart)
[18:04:04.556]                             muffled <- TRUE
[18:04:04.556]                             break
[18:04:04.556]                           }
[18:04:04.556]                         }
[18:04:04.556]                       }
[18:04:04.556]                       invisible(muffled)
[18:04:04.556]                     }
[18:04:04.556]                     muffleCondition(cond, pattern = "^muffle")
[18:04:04.556]                   }
[18:04:04.556]                 }
[18:04:04.556]             }
[18:04:04.556]         }))
[18:04:04.556]     }, error = function(ex) {
[18:04:04.556]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:04.556]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:04.556]                 ...future.rng), started = ...future.startTime, 
[18:04:04.556]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:04.556]             version = "1.8"), class = "FutureResult")
[18:04:04.556]     }, finally = {
[18:04:04.556]         if (!identical(...future.workdir, getwd())) 
[18:04:04.556]             setwd(...future.workdir)
[18:04:04.556]         {
[18:04:04.556]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:04.556]                 ...future.oldOptions$nwarnings <- NULL
[18:04:04.556]             }
[18:04:04.556]             base::options(...future.oldOptions)
[18:04:04.556]             if (.Platform$OS.type == "windows") {
[18:04:04.556]                 old_names <- names(...future.oldEnvVars)
[18:04:04.556]                 envs <- base::Sys.getenv()
[18:04:04.556]                 names <- names(envs)
[18:04:04.556]                 common <- intersect(names, old_names)
[18:04:04.556]                 added <- setdiff(names, old_names)
[18:04:04.556]                 removed <- setdiff(old_names, names)
[18:04:04.556]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:04.556]                   envs[common]]
[18:04:04.556]                 NAMES <- toupper(changed)
[18:04:04.556]                 args <- list()
[18:04:04.556]                 for (kk in seq_along(NAMES)) {
[18:04:04.556]                   name <- changed[[kk]]
[18:04:04.556]                   NAME <- NAMES[[kk]]
[18:04:04.556]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.556]                     next
[18:04:04.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:04.556]                 }
[18:04:04.556]                 NAMES <- toupper(added)
[18:04:04.556]                 for (kk in seq_along(NAMES)) {
[18:04:04.556]                   name <- added[[kk]]
[18:04:04.556]                   NAME <- NAMES[[kk]]
[18:04:04.556]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.556]                     next
[18:04:04.556]                   args[[name]] <- ""
[18:04:04.556]                 }
[18:04:04.556]                 NAMES <- toupper(removed)
[18:04:04.556]                 for (kk in seq_along(NAMES)) {
[18:04:04.556]                   name <- removed[[kk]]
[18:04:04.556]                   NAME <- NAMES[[kk]]
[18:04:04.556]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.556]                     next
[18:04:04.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:04.556]                 }
[18:04:04.556]                 if (length(args) > 0) 
[18:04:04.556]                   base::do.call(base::Sys.setenv, args = args)
[18:04:04.556]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:04.556]             }
[18:04:04.556]             else {
[18:04:04.556]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:04.556]             }
[18:04:04.556]             {
[18:04:04.556]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:04.556]                   0L) {
[18:04:04.556]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:04.556]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:04.556]                   base::options(opts)
[18:04:04.556]                 }
[18:04:04.556]                 {
[18:04:04.556]                   {
[18:04:04.556]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:04.556]                     NULL
[18:04:04.556]                   }
[18:04:04.556]                   options(future.plan = NULL)
[18:04:04.556]                   if (is.na(NA_character_)) 
[18:04:04.556]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:04.556]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:04.556]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:04.556]                     .init = FALSE)
[18:04:04.556]                 }
[18:04:04.556]             }
[18:04:04.556]         }
[18:04:04.556]     })
[18:04:04.556]     if (TRUE) {
[18:04:04.556]         base::sink(type = "output", split = FALSE)
[18:04:04.556]         if (TRUE) {
[18:04:04.556]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:04.556]         }
[18:04:04.556]         else {
[18:04:04.556]             ...future.result["stdout"] <- base::list(NULL)
[18:04:04.556]         }
[18:04:04.556]         base::close(...future.stdout)
[18:04:04.556]         ...future.stdout <- NULL
[18:04:04.556]     }
[18:04:04.556]     ...future.result$conditions <- ...future.conditions
[18:04:04.556]     ...future.result$finished <- base::Sys.time()
[18:04:04.556]     ...future.result
[18:04:04.556] }
[18:04:04.658] MultisessionFuture started
[18:04:04.658] result() for ClusterFuture ...
[18:04:04.659] receiveMessageFromWorker() for ClusterFuture ...
[18:04:04.659] - Validating connection of MultisessionFuture
[18:04:04.721] - received message: FutureResult
[18:04:04.722] - Received FutureResult
[18:04:04.722] - Erased future from FutureRegistry
[18:04:04.723] result() for ClusterFuture ...
[18:04:04.723] - result already collected: FutureResult
[18:04:04.723] result() for ClusterFuture ... done
[18:04:04.724] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:04.724] result() for ClusterFuture ... done
[18:04:04.724] result() for ClusterFuture ...
[18:04:04.725] - result already collected: FutureResult
[18:04:04.725] result() for ClusterFuture ... done
[18:04:04.726] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:04:04.733] plan(): nbrOfWorkers() = 2
[18:04:04.734] getGlobalsAndPackages() ...
[18:04:04.734] Searching for globals...
[18:04:04.736] - globals found: [1] ‘{’
[18:04:04.736] Searching for globals ... DONE
[18:04:04.737] Resolving globals: FALSE
[18:04:04.738] 
[18:04:04.738] 
[18:04:04.738] getGlobalsAndPackages() ... DONE
[18:04:04.739] run() for ‘Future’ ...
[18:04:04.739] - state: ‘created’
[18:04:04.740] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:04.771] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:04.771] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:04.772]   - Field: ‘node’
[18:04:04.772]   - Field: ‘label’
[18:04:04.772]   - Field: ‘local’
[18:04:04.772]   - Field: ‘owner’
[18:04:04.773]   - Field: ‘envir’
[18:04:04.773]   - Field: ‘workers’
[18:04:04.773]   - Field: ‘packages’
[18:04:04.774]   - Field: ‘gc’
[18:04:04.774]   - Field: ‘conditions’
[18:04:04.774]   - Field: ‘persistent’
[18:04:04.774]   - Field: ‘expr’
[18:04:04.775]   - Field: ‘uuid’
[18:04:04.775]   - Field: ‘seed’
[18:04:04.775]   - Field: ‘version’
[18:04:04.776]   - Field: ‘result’
[18:04:04.776]   - Field: ‘asynchronous’
[18:04:04.776]   - Field: ‘calls’
[18:04:04.777]   - Field: ‘globals’
[18:04:04.777]   - Field: ‘stdout’
[18:04:04.777]   - Field: ‘earlySignal’
[18:04:04.777]   - Field: ‘lazy’
[18:04:04.778]   - Field: ‘state’
[18:04:04.778] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:04.778] - Launch lazy future ...
[18:04:04.779] Packages needed by the future expression (n = 0): <none>
[18:04:04.779] Packages needed by future strategies (n = 0): <none>
[18:04:04.781] {
[18:04:04.781]     {
[18:04:04.781]         {
[18:04:04.781]             ...future.startTime <- base::Sys.time()
[18:04:04.781]             {
[18:04:04.781]                 {
[18:04:04.781]                   {
[18:04:04.781]                     {
[18:04:04.781]                       base::local({
[18:04:04.781]                         has_future <- base::requireNamespace("future", 
[18:04:04.781]                           quietly = TRUE)
[18:04:04.781]                         if (has_future) {
[18:04:04.781]                           ns <- base::getNamespace("future")
[18:04:04.781]                           version <- ns[[".package"]][["version"]]
[18:04:04.781]                           if (is.null(version)) 
[18:04:04.781]                             version <- utils::packageVersion("future")
[18:04:04.781]                         }
[18:04:04.781]                         else {
[18:04:04.781]                           version <- NULL
[18:04:04.781]                         }
[18:04:04.781]                         if (!has_future || version < "1.8.0") {
[18:04:04.781]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:04.781]                             "", base::R.version$version.string), 
[18:04:04.781]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:04.781]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:04.781]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:04.781]                               "release", "version")], collapse = " "), 
[18:04:04.781]                             hostname = base::Sys.info()[["nodename"]])
[18:04:04.781]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:04.781]                             info)
[18:04:04.781]                           info <- base::paste(info, collapse = "; ")
[18:04:04.781]                           if (!has_future) {
[18:04:04.781]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:04.781]                               info)
[18:04:04.781]                           }
[18:04:04.781]                           else {
[18:04:04.781]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:04.781]                               info, version)
[18:04:04.781]                           }
[18:04:04.781]                           base::stop(msg)
[18:04:04.781]                         }
[18:04:04.781]                       })
[18:04:04.781]                     }
[18:04:04.781]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:04.781]                     base::options(mc.cores = 1L)
[18:04:04.781]                   }
[18:04:04.781]                   ...future.strategy.old <- future::plan("list")
[18:04:04.781]                   options(future.plan = NULL)
[18:04:04.781]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:04.781]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:04.781]                 }
[18:04:04.781]                 ...future.workdir <- getwd()
[18:04:04.781]             }
[18:04:04.781]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:04.781]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:04.781]         }
[18:04:04.781]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:04.781]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:04.781]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:04.781]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:04.781]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:04.781]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:04.781]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:04.781]             base::names(...future.oldOptions))
[18:04:04.781]     }
[18:04:04.781]     if (FALSE) {
[18:04:04.781]     }
[18:04:04.781]     else {
[18:04:04.781]         if (TRUE) {
[18:04:04.781]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:04.781]                 open = "w")
[18:04:04.781]         }
[18:04:04.781]         else {
[18:04:04.781]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:04.781]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:04.781]         }
[18:04:04.781]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:04.781]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:04.781]             base::sink(type = "output", split = FALSE)
[18:04:04.781]             base::close(...future.stdout)
[18:04:04.781]         }, add = TRUE)
[18:04:04.781]     }
[18:04:04.781]     ...future.frame <- base::sys.nframe()
[18:04:04.781]     ...future.conditions <- base::list()
[18:04:04.781]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:04.781]     if (FALSE) {
[18:04:04.781]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:04.781]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:04.781]     }
[18:04:04.781]     ...future.result <- base::tryCatch({
[18:04:04.781]         base::withCallingHandlers({
[18:04:04.781]             ...future.value <- base::withVisible(base::local({
[18:04:04.781]                 ...future.makeSendCondition <- base::local({
[18:04:04.781]                   sendCondition <- NULL
[18:04:04.781]                   function(frame = 1L) {
[18:04:04.781]                     if (is.function(sendCondition)) 
[18:04:04.781]                       return(sendCondition)
[18:04:04.781]                     ns <- getNamespace("parallel")
[18:04:04.781]                     if (exists("sendData", mode = "function", 
[18:04:04.781]                       envir = ns)) {
[18:04:04.781]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:04.781]                         envir = ns)
[18:04:04.781]                       envir <- sys.frame(frame)
[18:04:04.781]                       master <- NULL
[18:04:04.781]                       while (!identical(envir, .GlobalEnv) && 
[18:04:04.781]                         !identical(envir, emptyenv())) {
[18:04:04.781]                         if (exists("master", mode = "list", envir = envir, 
[18:04:04.781]                           inherits = FALSE)) {
[18:04:04.781]                           master <- get("master", mode = "list", 
[18:04:04.781]                             envir = envir, inherits = FALSE)
[18:04:04.781]                           if (inherits(master, c("SOCKnode", 
[18:04:04.781]                             "SOCK0node"))) {
[18:04:04.781]                             sendCondition <<- function(cond) {
[18:04:04.781]                               data <- list(type = "VALUE", value = cond, 
[18:04:04.781]                                 success = TRUE)
[18:04:04.781]                               parallel_sendData(master, data)
[18:04:04.781]                             }
[18:04:04.781]                             return(sendCondition)
[18:04:04.781]                           }
[18:04:04.781]                         }
[18:04:04.781]                         frame <- frame + 1L
[18:04:04.781]                         envir <- sys.frame(frame)
[18:04:04.781]                       }
[18:04:04.781]                     }
[18:04:04.781]                     sendCondition <<- function(cond) NULL
[18:04:04.781]                   }
[18:04:04.781]                 })
[18:04:04.781]                 withCallingHandlers({
[18:04:04.781]                   {
[18:04:04.781]                     2
[18:04:04.781]                   }
[18:04:04.781]                 }, immediateCondition = function(cond) {
[18:04:04.781]                   sendCondition <- ...future.makeSendCondition()
[18:04:04.781]                   sendCondition(cond)
[18:04:04.781]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.781]                   {
[18:04:04.781]                     inherits <- base::inherits
[18:04:04.781]                     invokeRestart <- base::invokeRestart
[18:04:04.781]                     is.null <- base::is.null
[18:04:04.781]                     muffled <- FALSE
[18:04:04.781]                     if (inherits(cond, "message")) {
[18:04:04.781]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:04.781]                       if (muffled) 
[18:04:04.781]                         invokeRestart("muffleMessage")
[18:04:04.781]                     }
[18:04:04.781]                     else if (inherits(cond, "warning")) {
[18:04:04.781]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:04.781]                       if (muffled) 
[18:04:04.781]                         invokeRestart("muffleWarning")
[18:04:04.781]                     }
[18:04:04.781]                     else if (inherits(cond, "condition")) {
[18:04:04.781]                       if (!is.null(pattern)) {
[18:04:04.781]                         computeRestarts <- base::computeRestarts
[18:04:04.781]                         grepl <- base::grepl
[18:04:04.781]                         restarts <- computeRestarts(cond)
[18:04:04.781]                         for (restart in restarts) {
[18:04:04.781]                           name <- restart$name
[18:04:04.781]                           if (is.null(name)) 
[18:04:04.781]                             next
[18:04:04.781]                           if (!grepl(pattern, name)) 
[18:04:04.781]                             next
[18:04:04.781]                           invokeRestart(restart)
[18:04:04.781]                           muffled <- TRUE
[18:04:04.781]                           break
[18:04:04.781]                         }
[18:04:04.781]                       }
[18:04:04.781]                     }
[18:04:04.781]                     invisible(muffled)
[18:04:04.781]                   }
[18:04:04.781]                   muffleCondition(cond)
[18:04:04.781]                 })
[18:04:04.781]             }))
[18:04:04.781]             future::FutureResult(value = ...future.value$value, 
[18:04:04.781]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:04.781]                   ...future.rng), globalenv = if (FALSE) 
[18:04:04.781]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:04.781]                     ...future.globalenv.names))
[18:04:04.781]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:04.781]         }, condition = base::local({
[18:04:04.781]             c <- base::c
[18:04:04.781]             inherits <- base::inherits
[18:04:04.781]             invokeRestart <- base::invokeRestart
[18:04:04.781]             length <- base::length
[18:04:04.781]             list <- base::list
[18:04:04.781]             seq.int <- base::seq.int
[18:04:04.781]             signalCondition <- base::signalCondition
[18:04:04.781]             sys.calls <- base::sys.calls
[18:04:04.781]             `[[` <- base::`[[`
[18:04:04.781]             `+` <- base::`+`
[18:04:04.781]             `<<-` <- base::`<<-`
[18:04:04.781]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:04.781]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:04.781]                   3L)]
[18:04:04.781]             }
[18:04:04.781]             function(cond) {
[18:04:04.781]                 is_error <- inherits(cond, "error")
[18:04:04.781]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:04.781]                   NULL)
[18:04:04.781]                 if (is_error) {
[18:04:04.781]                   sessionInformation <- function() {
[18:04:04.781]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:04.781]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:04.781]                       search = base::search(), system = base::Sys.info())
[18:04:04.781]                   }
[18:04:04.781]                   ...future.conditions[[length(...future.conditions) + 
[18:04:04.781]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:04.781]                     cond$call), session = sessionInformation(), 
[18:04:04.781]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:04.781]                   signalCondition(cond)
[18:04:04.781]                 }
[18:04:04.781]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:04.781]                 "immediateCondition"))) {
[18:04:04.781]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:04.781]                   ...future.conditions[[length(...future.conditions) + 
[18:04:04.781]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:04.781]                   if (TRUE && !signal) {
[18:04:04.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.781]                     {
[18:04:04.781]                       inherits <- base::inherits
[18:04:04.781]                       invokeRestart <- base::invokeRestart
[18:04:04.781]                       is.null <- base::is.null
[18:04:04.781]                       muffled <- FALSE
[18:04:04.781]                       if (inherits(cond, "message")) {
[18:04:04.781]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:04.781]                         if (muffled) 
[18:04:04.781]                           invokeRestart("muffleMessage")
[18:04:04.781]                       }
[18:04:04.781]                       else if (inherits(cond, "warning")) {
[18:04:04.781]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:04.781]                         if (muffled) 
[18:04:04.781]                           invokeRestart("muffleWarning")
[18:04:04.781]                       }
[18:04:04.781]                       else if (inherits(cond, "condition")) {
[18:04:04.781]                         if (!is.null(pattern)) {
[18:04:04.781]                           computeRestarts <- base::computeRestarts
[18:04:04.781]                           grepl <- base::grepl
[18:04:04.781]                           restarts <- computeRestarts(cond)
[18:04:04.781]                           for (restart in restarts) {
[18:04:04.781]                             name <- restart$name
[18:04:04.781]                             if (is.null(name)) 
[18:04:04.781]                               next
[18:04:04.781]                             if (!grepl(pattern, name)) 
[18:04:04.781]                               next
[18:04:04.781]                             invokeRestart(restart)
[18:04:04.781]                             muffled <- TRUE
[18:04:04.781]                             break
[18:04:04.781]                           }
[18:04:04.781]                         }
[18:04:04.781]                       }
[18:04:04.781]                       invisible(muffled)
[18:04:04.781]                     }
[18:04:04.781]                     muffleCondition(cond, pattern = "^muffle")
[18:04:04.781]                   }
[18:04:04.781]                 }
[18:04:04.781]                 else {
[18:04:04.781]                   if (TRUE) {
[18:04:04.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.781]                     {
[18:04:04.781]                       inherits <- base::inherits
[18:04:04.781]                       invokeRestart <- base::invokeRestart
[18:04:04.781]                       is.null <- base::is.null
[18:04:04.781]                       muffled <- FALSE
[18:04:04.781]                       if (inherits(cond, "message")) {
[18:04:04.781]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:04.781]                         if (muffled) 
[18:04:04.781]                           invokeRestart("muffleMessage")
[18:04:04.781]                       }
[18:04:04.781]                       else if (inherits(cond, "warning")) {
[18:04:04.781]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:04.781]                         if (muffled) 
[18:04:04.781]                           invokeRestart("muffleWarning")
[18:04:04.781]                       }
[18:04:04.781]                       else if (inherits(cond, "condition")) {
[18:04:04.781]                         if (!is.null(pattern)) {
[18:04:04.781]                           computeRestarts <- base::computeRestarts
[18:04:04.781]                           grepl <- base::grepl
[18:04:04.781]                           restarts <- computeRestarts(cond)
[18:04:04.781]                           for (restart in restarts) {
[18:04:04.781]                             name <- restart$name
[18:04:04.781]                             if (is.null(name)) 
[18:04:04.781]                               next
[18:04:04.781]                             if (!grepl(pattern, name)) 
[18:04:04.781]                               next
[18:04:04.781]                             invokeRestart(restart)
[18:04:04.781]                             muffled <- TRUE
[18:04:04.781]                             break
[18:04:04.781]                           }
[18:04:04.781]                         }
[18:04:04.781]                       }
[18:04:04.781]                       invisible(muffled)
[18:04:04.781]                     }
[18:04:04.781]                     muffleCondition(cond, pattern = "^muffle")
[18:04:04.781]                   }
[18:04:04.781]                 }
[18:04:04.781]             }
[18:04:04.781]         }))
[18:04:04.781]     }, error = function(ex) {
[18:04:04.781]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:04.781]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:04.781]                 ...future.rng), started = ...future.startTime, 
[18:04:04.781]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:04.781]             version = "1.8"), class = "FutureResult")
[18:04:04.781]     }, finally = {
[18:04:04.781]         if (!identical(...future.workdir, getwd())) 
[18:04:04.781]             setwd(...future.workdir)
[18:04:04.781]         {
[18:04:04.781]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:04.781]                 ...future.oldOptions$nwarnings <- NULL
[18:04:04.781]             }
[18:04:04.781]             base::options(...future.oldOptions)
[18:04:04.781]             if (.Platform$OS.type == "windows") {
[18:04:04.781]                 old_names <- names(...future.oldEnvVars)
[18:04:04.781]                 envs <- base::Sys.getenv()
[18:04:04.781]                 names <- names(envs)
[18:04:04.781]                 common <- intersect(names, old_names)
[18:04:04.781]                 added <- setdiff(names, old_names)
[18:04:04.781]                 removed <- setdiff(old_names, names)
[18:04:04.781]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:04.781]                   envs[common]]
[18:04:04.781]                 NAMES <- toupper(changed)
[18:04:04.781]                 args <- list()
[18:04:04.781]                 for (kk in seq_along(NAMES)) {
[18:04:04.781]                   name <- changed[[kk]]
[18:04:04.781]                   NAME <- NAMES[[kk]]
[18:04:04.781]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.781]                     next
[18:04:04.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:04.781]                 }
[18:04:04.781]                 NAMES <- toupper(added)
[18:04:04.781]                 for (kk in seq_along(NAMES)) {
[18:04:04.781]                   name <- added[[kk]]
[18:04:04.781]                   NAME <- NAMES[[kk]]
[18:04:04.781]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.781]                     next
[18:04:04.781]                   args[[name]] <- ""
[18:04:04.781]                 }
[18:04:04.781]                 NAMES <- toupper(removed)
[18:04:04.781]                 for (kk in seq_along(NAMES)) {
[18:04:04.781]                   name <- removed[[kk]]
[18:04:04.781]                   NAME <- NAMES[[kk]]
[18:04:04.781]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.781]                     next
[18:04:04.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:04.781]                 }
[18:04:04.781]                 if (length(args) > 0) 
[18:04:04.781]                   base::do.call(base::Sys.setenv, args = args)
[18:04:04.781]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:04.781]             }
[18:04:04.781]             else {
[18:04:04.781]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:04.781]             }
[18:04:04.781]             {
[18:04:04.781]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:04.781]                   0L) {
[18:04:04.781]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:04.781]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:04.781]                   base::options(opts)
[18:04:04.781]                 }
[18:04:04.781]                 {
[18:04:04.781]                   {
[18:04:04.781]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:04.781]                     NULL
[18:04:04.781]                   }
[18:04:04.781]                   options(future.plan = NULL)
[18:04:04.781]                   if (is.na(NA_character_)) 
[18:04:04.781]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:04.781]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:04.781]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:04.781]                     .init = FALSE)
[18:04:04.781]                 }
[18:04:04.781]             }
[18:04:04.781]         }
[18:04:04.781]     })
[18:04:04.781]     if (TRUE) {
[18:04:04.781]         base::sink(type = "output", split = FALSE)
[18:04:04.781]         if (TRUE) {
[18:04:04.781]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:04.781]         }
[18:04:04.781]         else {
[18:04:04.781]             ...future.result["stdout"] <- base::list(NULL)
[18:04:04.781]         }
[18:04:04.781]         base::close(...future.stdout)
[18:04:04.781]         ...future.stdout <- NULL
[18:04:04.781]     }
[18:04:04.781]     ...future.result$conditions <- ...future.conditions
[18:04:04.781]     ...future.result$finished <- base::Sys.time()
[18:04:04.781]     ...future.result
[18:04:04.781] }
[18:04:04.788] MultisessionFuture started
[18:04:04.789] - Launch lazy future ... done
[18:04:04.789] run() for ‘MultisessionFuture’ ... done
[18:04:04.789] getGlobalsAndPackages() ...
[18:04:04.790] Searching for globals...
[18:04:04.792] - globals found: [1] ‘{’
[18:04:04.792] Searching for globals ... DONE
[18:04:04.792] Resolving globals: FALSE
[18:04:04.793] 
[18:04:04.793] 
[18:04:04.794] getGlobalsAndPackages() ... DONE
[18:04:04.794] run() for ‘Future’ ...
[18:04:04.795] - state: ‘created’
[18:04:04.795] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:04.826] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:04.826] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:04.827]   - Field: ‘node’
[18:04:04.827]   - Field: ‘label’
[18:04:04.827]   - Field: ‘local’
[18:04:04.827]   - Field: ‘owner’
[18:04:04.828]   - Field: ‘envir’
[18:04:04.828]   - Field: ‘workers’
[18:04:04.828]   - Field: ‘packages’
[18:04:04.828]   - Field: ‘gc’
[18:04:04.829]   - Field: ‘conditions’
[18:04:04.829]   - Field: ‘persistent’
[18:04:04.829]   - Field: ‘expr’
[18:04:04.829]   - Field: ‘uuid’
[18:04:04.830]   - Field: ‘seed’
[18:04:04.832]   - Field: ‘version’
[18:04:04.832]   - Field: ‘result’
[18:04:04.833]   - Field: ‘asynchronous’
[18:04:04.833]   - Field: ‘calls’
[18:04:04.833]   - Field: ‘globals’
[18:04:04.834]   - Field: ‘stdout’
[18:04:04.834]   - Field: ‘earlySignal’
[18:04:04.835]   - Field: ‘lazy’
[18:04:04.835]   - Field: ‘state’
[18:04:04.835] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:04.836] - Launch lazy future ...
[18:04:04.836] Packages needed by the future expression (n = 0): <none>
[18:04:04.837] Packages needed by future strategies (n = 0): <none>
[18:04:04.838] {
[18:04:04.838]     {
[18:04:04.838]         {
[18:04:04.838]             ...future.startTime <- base::Sys.time()
[18:04:04.838]             {
[18:04:04.838]                 {
[18:04:04.838]                   {
[18:04:04.838]                     {
[18:04:04.838]                       base::local({
[18:04:04.838]                         has_future <- base::requireNamespace("future", 
[18:04:04.838]                           quietly = TRUE)
[18:04:04.838]                         if (has_future) {
[18:04:04.838]                           ns <- base::getNamespace("future")
[18:04:04.838]                           version <- ns[[".package"]][["version"]]
[18:04:04.838]                           if (is.null(version)) 
[18:04:04.838]                             version <- utils::packageVersion("future")
[18:04:04.838]                         }
[18:04:04.838]                         else {
[18:04:04.838]                           version <- NULL
[18:04:04.838]                         }
[18:04:04.838]                         if (!has_future || version < "1.8.0") {
[18:04:04.838]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:04.838]                             "", base::R.version$version.string), 
[18:04:04.838]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:04.838]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:04.838]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:04.838]                               "release", "version")], collapse = " "), 
[18:04:04.838]                             hostname = base::Sys.info()[["nodename"]])
[18:04:04.838]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:04.838]                             info)
[18:04:04.838]                           info <- base::paste(info, collapse = "; ")
[18:04:04.838]                           if (!has_future) {
[18:04:04.838]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:04.838]                               info)
[18:04:04.838]                           }
[18:04:04.838]                           else {
[18:04:04.838]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:04.838]                               info, version)
[18:04:04.838]                           }
[18:04:04.838]                           base::stop(msg)
[18:04:04.838]                         }
[18:04:04.838]                       })
[18:04:04.838]                     }
[18:04:04.838]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:04.838]                     base::options(mc.cores = 1L)
[18:04:04.838]                   }
[18:04:04.838]                   ...future.strategy.old <- future::plan("list")
[18:04:04.838]                   options(future.plan = NULL)
[18:04:04.838]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:04.838]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:04.838]                 }
[18:04:04.838]                 ...future.workdir <- getwd()
[18:04:04.838]             }
[18:04:04.838]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:04.838]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:04.838]         }
[18:04:04.838]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:04.838]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:04.838]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:04.838]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:04.838]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:04.838]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:04.838]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:04.838]             base::names(...future.oldOptions))
[18:04:04.838]     }
[18:04:04.838]     if (FALSE) {
[18:04:04.838]     }
[18:04:04.838]     else {
[18:04:04.838]         if (TRUE) {
[18:04:04.838]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:04.838]                 open = "w")
[18:04:04.838]         }
[18:04:04.838]         else {
[18:04:04.838]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:04.838]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:04.838]         }
[18:04:04.838]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:04.838]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:04.838]             base::sink(type = "output", split = FALSE)
[18:04:04.838]             base::close(...future.stdout)
[18:04:04.838]         }, add = TRUE)
[18:04:04.838]     }
[18:04:04.838]     ...future.frame <- base::sys.nframe()
[18:04:04.838]     ...future.conditions <- base::list()
[18:04:04.838]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:04.838]     if (FALSE) {
[18:04:04.838]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:04.838]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:04.838]     }
[18:04:04.838]     ...future.result <- base::tryCatch({
[18:04:04.838]         base::withCallingHandlers({
[18:04:04.838]             ...future.value <- base::withVisible(base::local({
[18:04:04.838]                 ...future.makeSendCondition <- base::local({
[18:04:04.838]                   sendCondition <- NULL
[18:04:04.838]                   function(frame = 1L) {
[18:04:04.838]                     if (is.function(sendCondition)) 
[18:04:04.838]                       return(sendCondition)
[18:04:04.838]                     ns <- getNamespace("parallel")
[18:04:04.838]                     if (exists("sendData", mode = "function", 
[18:04:04.838]                       envir = ns)) {
[18:04:04.838]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:04.838]                         envir = ns)
[18:04:04.838]                       envir <- sys.frame(frame)
[18:04:04.838]                       master <- NULL
[18:04:04.838]                       while (!identical(envir, .GlobalEnv) && 
[18:04:04.838]                         !identical(envir, emptyenv())) {
[18:04:04.838]                         if (exists("master", mode = "list", envir = envir, 
[18:04:04.838]                           inherits = FALSE)) {
[18:04:04.838]                           master <- get("master", mode = "list", 
[18:04:04.838]                             envir = envir, inherits = FALSE)
[18:04:04.838]                           if (inherits(master, c("SOCKnode", 
[18:04:04.838]                             "SOCK0node"))) {
[18:04:04.838]                             sendCondition <<- function(cond) {
[18:04:04.838]                               data <- list(type = "VALUE", value = cond, 
[18:04:04.838]                                 success = TRUE)
[18:04:04.838]                               parallel_sendData(master, data)
[18:04:04.838]                             }
[18:04:04.838]                             return(sendCondition)
[18:04:04.838]                           }
[18:04:04.838]                         }
[18:04:04.838]                         frame <- frame + 1L
[18:04:04.838]                         envir <- sys.frame(frame)
[18:04:04.838]                       }
[18:04:04.838]                     }
[18:04:04.838]                     sendCondition <<- function(cond) NULL
[18:04:04.838]                   }
[18:04:04.838]                 })
[18:04:04.838]                 withCallingHandlers({
[18:04:04.838]                   {
[18:04:04.838]                     4
[18:04:04.838]                   }
[18:04:04.838]                 }, immediateCondition = function(cond) {
[18:04:04.838]                   sendCondition <- ...future.makeSendCondition()
[18:04:04.838]                   sendCondition(cond)
[18:04:04.838]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.838]                   {
[18:04:04.838]                     inherits <- base::inherits
[18:04:04.838]                     invokeRestart <- base::invokeRestart
[18:04:04.838]                     is.null <- base::is.null
[18:04:04.838]                     muffled <- FALSE
[18:04:04.838]                     if (inherits(cond, "message")) {
[18:04:04.838]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:04.838]                       if (muffled) 
[18:04:04.838]                         invokeRestart("muffleMessage")
[18:04:04.838]                     }
[18:04:04.838]                     else if (inherits(cond, "warning")) {
[18:04:04.838]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:04.838]                       if (muffled) 
[18:04:04.838]                         invokeRestart("muffleWarning")
[18:04:04.838]                     }
[18:04:04.838]                     else if (inherits(cond, "condition")) {
[18:04:04.838]                       if (!is.null(pattern)) {
[18:04:04.838]                         computeRestarts <- base::computeRestarts
[18:04:04.838]                         grepl <- base::grepl
[18:04:04.838]                         restarts <- computeRestarts(cond)
[18:04:04.838]                         for (restart in restarts) {
[18:04:04.838]                           name <- restart$name
[18:04:04.838]                           if (is.null(name)) 
[18:04:04.838]                             next
[18:04:04.838]                           if (!grepl(pattern, name)) 
[18:04:04.838]                             next
[18:04:04.838]                           invokeRestart(restart)
[18:04:04.838]                           muffled <- TRUE
[18:04:04.838]                           break
[18:04:04.838]                         }
[18:04:04.838]                       }
[18:04:04.838]                     }
[18:04:04.838]                     invisible(muffled)
[18:04:04.838]                   }
[18:04:04.838]                   muffleCondition(cond)
[18:04:04.838]                 })
[18:04:04.838]             }))
[18:04:04.838]             future::FutureResult(value = ...future.value$value, 
[18:04:04.838]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:04.838]                   ...future.rng), globalenv = if (FALSE) 
[18:04:04.838]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:04.838]                     ...future.globalenv.names))
[18:04:04.838]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:04.838]         }, condition = base::local({
[18:04:04.838]             c <- base::c
[18:04:04.838]             inherits <- base::inherits
[18:04:04.838]             invokeRestart <- base::invokeRestart
[18:04:04.838]             length <- base::length
[18:04:04.838]             list <- base::list
[18:04:04.838]             seq.int <- base::seq.int
[18:04:04.838]             signalCondition <- base::signalCondition
[18:04:04.838]             sys.calls <- base::sys.calls
[18:04:04.838]             `[[` <- base::`[[`
[18:04:04.838]             `+` <- base::`+`
[18:04:04.838]             `<<-` <- base::`<<-`
[18:04:04.838]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:04.838]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:04.838]                   3L)]
[18:04:04.838]             }
[18:04:04.838]             function(cond) {
[18:04:04.838]                 is_error <- inherits(cond, "error")
[18:04:04.838]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:04.838]                   NULL)
[18:04:04.838]                 if (is_error) {
[18:04:04.838]                   sessionInformation <- function() {
[18:04:04.838]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:04.838]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:04.838]                       search = base::search(), system = base::Sys.info())
[18:04:04.838]                   }
[18:04:04.838]                   ...future.conditions[[length(...future.conditions) + 
[18:04:04.838]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:04.838]                     cond$call), session = sessionInformation(), 
[18:04:04.838]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:04.838]                   signalCondition(cond)
[18:04:04.838]                 }
[18:04:04.838]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:04.838]                 "immediateCondition"))) {
[18:04:04.838]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:04.838]                   ...future.conditions[[length(...future.conditions) + 
[18:04:04.838]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:04.838]                   if (TRUE && !signal) {
[18:04:04.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.838]                     {
[18:04:04.838]                       inherits <- base::inherits
[18:04:04.838]                       invokeRestart <- base::invokeRestart
[18:04:04.838]                       is.null <- base::is.null
[18:04:04.838]                       muffled <- FALSE
[18:04:04.838]                       if (inherits(cond, "message")) {
[18:04:04.838]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:04.838]                         if (muffled) 
[18:04:04.838]                           invokeRestart("muffleMessage")
[18:04:04.838]                       }
[18:04:04.838]                       else if (inherits(cond, "warning")) {
[18:04:04.838]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:04.838]                         if (muffled) 
[18:04:04.838]                           invokeRestart("muffleWarning")
[18:04:04.838]                       }
[18:04:04.838]                       else if (inherits(cond, "condition")) {
[18:04:04.838]                         if (!is.null(pattern)) {
[18:04:04.838]                           computeRestarts <- base::computeRestarts
[18:04:04.838]                           grepl <- base::grepl
[18:04:04.838]                           restarts <- computeRestarts(cond)
[18:04:04.838]                           for (restart in restarts) {
[18:04:04.838]                             name <- restart$name
[18:04:04.838]                             if (is.null(name)) 
[18:04:04.838]                               next
[18:04:04.838]                             if (!grepl(pattern, name)) 
[18:04:04.838]                               next
[18:04:04.838]                             invokeRestart(restart)
[18:04:04.838]                             muffled <- TRUE
[18:04:04.838]                             break
[18:04:04.838]                           }
[18:04:04.838]                         }
[18:04:04.838]                       }
[18:04:04.838]                       invisible(muffled)
[18:04:04.838]                     }
[18:04:04.838]                     muffleCondition(cond, pattern = "^muffle")
[18:04:04.838]                   }
[18:04:04.838]                 }
[18:04:04.838]                 else {
[18:04:04.838]                   if (TRUE) {
[18:04:04.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:04.838]                     {
[18:04:04.838]                       inherits <- base::inherits
[18:04:04.838]                       invokeRestart <- base::invokeRestart
[18:04:04.838]                       is.null <- base::is.null
[18:04:04.838]                       muffled <- FALSE
[18:04:04.838]                       if (inherits(cond, "message")) {
[18:04:04.838]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:04.838]                         if (muffled) 
[18:04:04.838]                           invokeRestart("muffleMessage")
[18:04:04.838]                       }
[18:04:04.838]                       else if (inherits(cond, "warning")) {
[18:04:04.838]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:04.838]                         if (muffled) 
[18:04:04.838]                           invokeRestart("muffleWarning")
[18:04:04.838]                       }
[18:04:04.838]                       else if (inherits(cond, "condition")) {
[18:04:04.838]                         if (!is.null(pattern)) {
[18:04:04.838]                           computeRestarts <- base::computeRestarts
[18:04:04.838]                           grepl <- base::grepl
[18:04:04.838]                           restarts <- computeRestarts(cond)
[18:04:04.838]                           for (restart in restarts) {
[18:04:04.838]                             name <- restart$name
[18:04:04.838]                             if (is.null(name)) 
[18:04:04.838]                               next
[18:04:04.838]                             if (!grepl(pattern, name)) 
[18:04:04.838]                               next
[18:04:04.838]                             invokeRestart(restart)
[18:04:04.838]                             muffled <- TRUE
[18:04:04.838]                             break
[18:04:04.838]                           }
[18:04:04.838]                         }
[18:04:04.838]                       }
[18:04:04.838]                       invisible(muffled)
[18:04:04.838]                     }
[18:04:04.838]                     muffleCondition(cond, pattern = "^muffle")
[18:04:04.838]                   }
[18:04:04.838]                 }
[18:04:04.838]             }
[18:04:04.838]         }))
[18:04:04.838]     }, error = function(ex) {
[18:04:04.838]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:04.838]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:04.838]                 ...future.rng), started = ...future.startTime, 
[18:04:04.838]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:04.838]             version = "1.8"), class = "FutureResult")
[18:04:04.838]     }, finally = {
[18:04:04.838]         if (!identical(...future.workdir, getwd())) 
[18:04:04.838]             setwd(...future.workdir)
[18:04:04.838]         {
[18:04:04.838]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:04.838]                 ...future.oldOptions$nwarnings <- NULL
[18:04:04.838]             }
[18:04:04.838]             base::options(...future.oldOptions)
[18:04:04.838]             if (.Platform$OS.type == "windows") {
[18:04:04.838]                 old_names <- names(...future.oldEnvVars)
[18:04:04.838]                 envs <- base::Sys.getenv()
[18:04:04.838]                 names <- names(envs)
[18:04:04.838]                 common <- intersect(names, old_names)
[18:04:04.838]                 added <- setdiff(names, old_names)
[18:04:04.838]                 removed <- setdiff(old_names, names)
[18:04:04.838]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:04.838]                   envs[common]]
[18:04:04.838]                 NAMES <- toupper(changed)
[18:04:04.838]                 args <- list()
[18:04:04.838]                 for (kk in seq_along(NAMES)) {
[18:04:04.838]                   name <- changed[[kk]]
[18:04:04.838]                   NAME <- NAMES[[kk]]
[18:04:04.838]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.838]                     next
[18:04:04.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:04.838]                 }
[18:04:04.838]                 NAMES <- toupper(added)
[18:04:04.838]                 for (kk in seq_along(NAMES)) {
[18:04:04.838]                   name <- added[[kk]]
[18:04:04.838]                   NAME <- NAMES[[kk]]
[18:04:04.838]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.838]                     next
[18:04:04.838]                   args[[name]] <- ""
[18:04:04.838]                 }
[18:04:04.838]                 NAMES <- toupper(removed)
[18:04:04.838]                 for (kk in seq_along(NAMES)) {
[18:04:04.838]                   name <- removed[[kk]]
[18:04:04.838]                   NAME <- NAMES[[kk]]
[18:04:04.838]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:04.838]                     next
[18:04:04.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:04.838]                 }
[18:04:04.838]                 if (length(args) > 0) 
[18:04:04.838]                   base::do.call(base::Sys.setenv, args = args)
[18:04:04.838]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:04.838]             }
[18:04:04.838]             else {
[18:04:04.838]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:04.838]             }
[18:04:04.838]             {
[18:04:04.838]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:04.838]                   0L) {
[18:04:04.838]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:04.838]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:04.838]                   base::options(opts)
[18:04:04.838]                 }
[18:04:04.838]                 {
[18:04:04.838]                   {
[18:04:04.838]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:04.838]                     NULL
[18:04:04.838]                   }
[18:04:04.838]                   options(future.plan = NULL)
[18:04:04.838]                   if (is.na(NA_character_)) 
[18:04:04.838]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:04.838]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:04.838]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:04.838]                     .init = FALSE)
[18:04:04.838]                 }
[18:04:04.838]             }
[18:04:04.838]         }
[18:04:04.838]     })
[18:04:04.838]     if (TRUE) {
[18:04:04.838]         base::sink(type = "output", split = FALSE)
[18:04:04.838]         if (TRUE) {
[18:04:04.838]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:04.838]         }
[18:04:04.838]         else {
[18:04:04.838]             ...future.result["stdout"] <- base::list(NULL)
[18:04:04.838]         }
[18:04:04.838]         base::close(...future.stdout)
[18:04:04.838]         ...future.stdout <- NULL
[18:04:04.838]     }
[18:04:04.838]     ...future.result$conditions <- ...future.conditions
[18:04:04.838]     ...future.result$finished <- base::Sys.time()
[18:04:04.838]     ...future.result
[18:04:04.838] }
[18:04:04.940] MultisessionFuture started
[18:04:04.940] - Launch lazy future ... done
[18:04:04.942] run() for ‘MultisessionFuture’ ... done
[18:04:04.942] result() for ClusterFuture ...
[18:04:04.943] receiveMessageFromWorker() for ClusterFuture ...
[18:04:04.943] - Validating connection of MultisessionFuture
[18:04:04.943] - received message: FutureResult
[18:04:04.944] - Received FutureResult
[18:04:04.944] - Erased future from FutureRegistry
[18:04:04.944] result() for ClusterFuture ...
[18:04:04.944] - result already collected: FutureResult
[18:04:04.945] result() for ClusterFuture ... done
[18:04:04.945] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:04.945] result() for ClusterFuture ... done
[18:04:04.945] result() for ClusterFuture ...
[18:04:04.945] - result already collected: FutureResult
[18:04:04.946] result() for ClusterFuture ... done
u$a = 2
[18:04:04.946] result() for ClusterFuture ...
[18:04:04.946] receiveMessageFromWorker() for ClusterFuture ...
[18:04:04.947] - Validating connection of MultisessionFuture
[18:04:05.005] - received message: FutureResult
[18:04:05.005] - Received FutureResult
[18:04:05.006] - Erased future from FutureRegistry
[18:04:05.006] result() for ClusterFuture ...
[18:04:05.006] - result already collected: FutureResult
[18:04:05.006] result() for ClusterFuture ... done
[18:04:05.007] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:05.007] result() for ClusterFuture ... done
[18:04:05.007] result() for ClusterFuture ...
[18:04:05.007] - result already collected: FutureResult
[18:04:05.008] result() for ClusterFuture ... done
v$a = 4
[18:04:05.008] getGlobalsAndPackages() ...
[18:04:05.008] Searching for globals...
[18:04:05.011] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:05.011] Searching for globals ... DONE
[18:04:05.011] Resolving globals: FALSE
[18:04:05.012] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:05.013] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:05.013] - globals: [1] ‘a’
[18:04:05.013] 
[18:04:05.014] getGlobalsAndPackages() ... DONE
[18:04:05.014] run() for ‘Future’ ...
[18:04:05.014] - state: ‘created’
[18:04:05.015] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:05.040] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:05.041] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:05.041]   - Field: ‘node’
[18:04:05.041]   - Field: ‘label’
[18:04:05.041]   - Field: ‘local’
[18:04:05.042]   - Field: ‘owner’
[18:04:05.042]   - Field: ‘envir’
[18:04:05.042]   - Field: ‘workers’
[18:04:05.042]   - Field: ‘packages’
[18:04:05.043]   - Field: ‘gc’
[18:04:05.043]   - Field: ‘conditions’
[18:04:05.043]   - Field: ‘persistent’
[18:04:05.043]   - Field: ‘expr’
[18:04:05.044]   - Field: ‘uuid’
[18:04:05.044]   - Field: ‘seed’
[18:04:05.044]   - Field: ‘version’
[18:04:05.044]   - Field: ‘result’
[18:04:05.045]   - Field: ‘asynchronous’
[18:04:05.045]   - Field: ‘calls’
[18:04:05.045]   - Field: ‘globals’
[18:04:05.045]   - Field: ‘stdout’
[18:04:05.045]   - Field: ‘earlySignal’
[18:04:05.046]   - Field: ‘lazy’
[18:04:05.046]   - Field: ‘state’
[18:04:05.046] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:05.046] - Launch lazy future ...
[18:04:05.047] Packages needed by the future expression (n = 0): <none>
[18:04:05.047] Packages needed by future strategies (n = 0): <none>
[18:04:05.048] {
[18:04:05.048]     {
[18:04:05.048]         {
[18:04:05.048]             ...future.startTime <- base::Sys.time()
[18:04:05.048]             {
[18:04:05.048]                 {
[18:04:05.048]                   {
[18:04:05.048]                     {
[18:04:05.048]                       base::local({
[18:04:05.048]                         has_future <- base::requireNamespace("future", 
[18:04:05.048]                           quietly = TRUE)
[18:04:05.048]                         if (has_future) {
[18:04:05.048]                           ns <- base::getNamespace("future")
[18:04:05.048]                           version <- ns[[".package"]][["version"]]
[18:04:05.048]                           if (is.null(version)) 
[18:04:05.048]                             version <- utils::packageVersion("future")
[18:04:05.048]                         }
[18:04:05.048]                         else {
[18:04:05.048]                           version <- NULL
[18:04:05.048]                         }
[18:04:05.048]                         if (!has_future || version < "1.8.0") {
[18:04:05.048]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:05.048]                             "", base::R.version$version.string), 
[18:04:05.048]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:05.048]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:05.048]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:05.048]                               "release", "version")], collapse = " "), 
[18:04:05.048]                             hostname = base::Sys.info()[["nodename"]])
[18:04:05.048]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:05.048]                             info)
[18:04:05.048]                           info <- base::paste(info, collapse = "; ")
[18:04:05.048]                           if (!has_future) {
[18:04:05.048]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:05.048]                               info)
[18:04:05.048]                           }
[18:04:05.048]                           else {
[18:04:05.048]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:05.048]                               info, version)
[18:04:05.048]                           }
[18:04:05.048]                           base::stop(msg)
[18:04:05.048]                         }
[18:04:05.048]                       })
[18:04:05.048]                     }
[18:04:05.048]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:05.048]                     base::options(mc.cores = 1L)
[18:04:05.048]                   }
[18:04:05.048]                   ...future.strategy.old <- future::plan("list")
[18:04:05.048]                   options(future.plan = NULL)
[18:04:05.048]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.048]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:05.048]                 }
[18:04:05.048]                 ...future.workdir <- getwd()
[18:04:05.048]             }
[18:04:05.048]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:05.048]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:05.048]         }
[18:04:05.048]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:05.048]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:05.048]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:05.048]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:05.048]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:05.048]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:05.048]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:05.048]             base::names(...future.oldOptions))
[18:04:05.048]     }
[18:04:05.048]     if (FALSE) {
[18:04:05.048]     }
[18:04:05.048]     else {
[18:04:05.048]         if (TRUE) {
[18:04:05.048]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:05.048]                 open = "w")
[18:04:05.048]         }
[18:04:05.048]         else {
[18:04:05.048]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:05.048]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:05.048]         }
[18:04:05.048]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:05.048]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:05.048]             base::sink(type = "output", split = FALSE)
[18:04:05.048]             base::close(...future.stdout)
[18:04:05.048]         }, add = TRUE)
[18:04:05.048]     }
[18:04:05.048]     ...future.frame <- base::sys.nframe()
[18:04:05.048]     ...future.conditions <- base::list()
[18:04:05.048]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:05.048]     if (FALSE) {
[18:04:05.048]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:05.048]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:05.048]     }
[18:04:05.048]     ...future.result <- base::tryCatch({
[18:04:05.048]         base::withCallingHandlers({
[18:04:05.048]             ...future.value <- base::withVisible(base::local({
[18:04:05.048]                 ...future.makeSendCondition <- base::local({
[18:04:05.048]                   sendCondition <- NULL
[18:04:05.048]                   function(frame = 1L) {
[18:04:05.048]                     if (is.function(sendCondition)) 
[18:04:05.048]                       return(sendCondition)
[18:04:05.048]                     ns <- getNamespace("parallel")
[18:04:05.048]                     if (exists("sendData", mode = "function", 
[18:04:05.048]                       envir = ns)) {
[18:04:05.048]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:05.048]                         envir = ns)
[18:04:05.048]                       envir <- sys.frame(frame)
[18:04:05.048]                       master <- NULL
[18:04:05.048]                       while (!identical(envir, .GlobalEnv) && 
[18:04:05.048]                         !identical(envir, emptyenv())) {
[18:04:05.048]                         if (exists("master", mode = "list", envir = envir, 
[18:04:05.048]                           inherits = FALSE)) {
[18:04:05.048]                           master <- get("master", mode = "list", 
[18:04:05.048]                             envir = envir, inherits = FALSE)
[18:04:05.048]                           if (inherits(master, c("SOCKnode", 
[18:04:05.048]                             "SOCK0node"))) {
[18:04:05.048]                             sendCondition <<- function(cond) {
[18:04:05.048]                               data <- list(type = "VALUE", value = cond, 
[18:04:05.048]                                 success = TRUE)
[18:04:05.048]                               parallel_sendData(master, data)
[18:04:05.048]                             }
[18:04:05.048]                             return(sendCondition)
[18:04:05.048]                           }
[18:04:05.048]                         }
[18:04:05.048]                         frame <- frame + 1L
[18:04:05.048]                         envir <- sys.frame(frame)
[18:04:05.048]                       }
[18:04:05.048]                     }
[18:04:05.048]                     sendCondition <<- function(cond) NULL
[18:04:05.048]                   }
[18:04:05.048]                 })
[18:04:05.048]                 withCallingHandlers({
[18:04:05.048]                   {
[18:04:05.048]                     2 * a
[18:04:05.048]                   }
[18:04:05.048]                 }, immediateCondition = function(cond) {
[18:04:05.048]                   sendCondition <- ...future.makeSendCondition()
[18:04:05.048]                   sendCondition(cond)
[18:04:05.048]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.048]                   {
[18:04:05.048]                     inherits <- base::inherits
[18:04:05.048]                     invokeRestart <- base::invokeRestart
[18:04:05.048]                     is.null <- base::is.null
[18:04:05.048]                     muffled <- FALSE
[18:04:05.048]                     if (inherits(cond, "message")) {
[18:04:05.048]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:05.048]                       if (muffled) 
[18:04:05.048]                         invokeRestart("muffleMessage")
[18:04:05.048]                     }
[18:04:05.048]                     else if (inherits(cond, "warning")) {
[18:04:05.048]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:05.048]                       if (muffled) 
[18:04:05.048]                         invokeRestart("muffleWarning")
[18:04:05.048]                     }
[18:04:05.048]                     else if (inherits(cond, "condition")) {
[18:04:05.048]                       if (!is.null(pattern)) {
[18:04:05.048]                         computeRestarts <- base::computeRestarts
[18:04:05.048]                         grepl <- base::grepl
[18:04:05.048]                         restarts <- computeRestarts(cond)
[18:04:05.048]                         for (restart in restarts) {
[18:04:05.048]                           name <- restart$name
[18:04:05.048]                           if (is.null(name)) 
[18:04:05.048]                             next
[18:04:05.048]                           if (!grepl(pattern, name)) 
[18:04:05.048]                             next
[18:04:05.048]                           invokeRestart(restart)
[18:04:05.048]                           muffled <- TRUE
[18:04:05.048]                           break
[18:04:05.048]                         }
[18:04:05.048]                       }
[18:04:05.048]                     }
[18:04:05.048]                     invisible(muffled)
[18:04:05.048]                   }
[18:04:05.048]                   muffleCondition(cond)
[18:04:05.048]                 })
[18:04:05.048]             }))
[18:04:05.048]             future::FutureResult(value = ...future.value$value, 
[18:04:05.048]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.048]                   ...future.rng), globalenv = if (FALSE) 
[18:04:05.048]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:05.048]                     ...future.globalenv.names))
[18:04:05.048]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:05.048]         }, condition = base::local({
[18:04:05.048]             c <- base::c
[18:04:05.048]             inherits <- base::inherits
[18:04:05.048]             invokeRestart <- base::invokeRestart
[18:04:05.048]             length <- base::length
[18:04:05.048]             list <- base::list
[18:04:05.048]             seq.int <- base::seq.int
[18:04:05.048]             signalCondition <- base::signalCondition
[18:04:05.048]             sys.calls <- base::sys.calls
[18:04:05.048]             `[[` <- base::`[[`
[18:04:05.048]             `+` <- base::`+`
[18:04:05.048]             `<<-` <- base::`<<-`
[18:04:05.048]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:05.048]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:05.048]                   3L)]
[18:04:05.048]             }
[18:04:05.048]             function(cond) {
[18:04:05.048]                 is_error <- inherits(cond, "error")
[18:04:05.048]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:05.048]                   NULL)
[18:04:05.048]                 if (is_error) {
[18:04:05.048]                   sessionInformation <- function() {
[18:04:05.048]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:05.048]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:05.048]                       search = base::search(), system = base::Sys.info())
[18:04:05.048]                   }
[18:04:05.048]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.048]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:05.048]                     cond$call), session = sessionInformation(), 
[18:04:05.048]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:05.048]                   signalCondition(cond)
[18:04:05.048]                 }
[18:04:05.048]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:05.048]                 "immediateCondition"))) {
[18:04:05.048]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:05.048]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.048]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:05.048]                   if (TRUE && !signal) {
[18:04:05.048]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.048]                     {
[18:04:05.048]                       inherits <- base::inherits
[18:04:05.048]                       invokeRestart <- base::invokeRestart
[18:04:05.048]                       is.null <- base::is.null
[18:04:05.048]                       muffled <- FALSE
[18:04:05.048]                       if (inherits(cond, "message")) {
[18:04:05.048]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.048]                         if (muffled) 
[18:04:05.048]                           invokeRestart("muffleMessage")
[18:04:05.048]                       }
[18:04:05.048]                       else if (inherits(cond, "warning")) {
[18:04:05.048]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.048]                         if (muffled) 
[18:04:05.048]                           invokeRestart("muffleWarning")
[18:04:05.048]                       }
[18:04:05.048]                       else if (inherits(cond, "condition")) {
[18:04:05.048]                         if (!is.null(pattern)) {
[18:04:05.048]                           computeRestarts <- base::computeRestarts
[18:04:05.048]                           grepl <- base::grepl
[18:04:05.048]                           restarts <- computeRestarts(cond)
[18:04:05.048]                           for (restart in restarts) {
[18:04:05.048]                             name <- restart$name
[18:04:05.048]                             if (is.null(name)) 
[18:04:05.048]                               next
[18:04:05.048]                             if (!grepl(pattern, name)) 
[18:04:05.048]                               next
[18:04:05.048]                             invokeRestart(restart)
[18:04:05.048]                             muffled <- TRUE
[18:04:05.048]                             break
[18:04:05.048]                           }
[18:04:05.048]                         }
[18:04:05.048]                       }
[18:04:05.048]                       invisible(muffled)
[18:04:05.048]                     }
[18:04:05.048]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.048]                   }
[18:04:05.048]                 }
[18:04:05.048]                 else {
[18:04:05.048]                   if (TRUE) {
[18:04:05.048]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.048]                     {
[18:04:05.048]                       inherits <- base::inherits
[18:04:05.048]                       invokeRestart <- base::invokeRestart
[18:04:05.048]                       is.null <- base::is.null
[18:04:05.048]                       muffled <- FALSE
[18:04:05.048]                       if (inherits(cond, "message")) {
[18:04:05.048]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.048]                         if (muffled) 
[18:04:05.048]                           invokeRestart("muffleMessage")
[18:04:05.048]                       }
[18:04:05.048]                       else if (inherits(cond, "warning")) {
[18:04:05.048]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.048]                         if (muffled) 
[18:04:05.048]                           invokeRestart("muffleWarning")
[18:04:05.048]                       }
[18:04:05.048]                       else if (inherits(cond, "condition")) {
[18:04:05.048]                         if (!is.null(pattern)) {
[18:04:05.048]                           computeRestarts <- base::computeRestarts
[18:04:05.048]                           grepl <- base::grepl
[18:04:05.048]                           restarts <- computeRestarts(cond)
[18:04:05.048]                           for (restart in restarts) {
[18:04:05.048]                             name <- restart$name
[18:04:05.048]                             if (is.null(name)) 
[18:04:05.048]                               next
[18:04:05.048]                             if (!grepl(pattern, name)) 
[18:04:05.048]                               next
[18:04:05.048]                             invokeRestart(restart)
[18:04:05.048]                             muffled <- TRUE
[18:04:05.048]                             break
[18:04:05.048]                           }
[18:04:05.048]                         }
[18:04:05.048]                       }
[18:04:05.048]                       invisible(muffled)
[18:04:05.048]                     }
[18:04:05.048]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.048]                   }
[18:04:05.048]                 }
[18:04:05.048]             }
[18:04:05.048]         }))
[18:04:05.048]     }, error = function(ex) {
[18:04:05.048]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:05.048]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.048]                 ...future.rng), started = ...future.startTime, 
[18:04:05.048]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:05.048]             version = "1.8"), class = "FutureResult")
[18:04:05.048]     }, finally = {
[18:04:05.048]         if (!identical(...future.workdir, getwd())) 
[18:04:05.048]             setwd(...future.workdir)
[18:04:05.048]         {
[18:04:05.048]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:05.048]                 ...future.oldOptions$nwarnings <- NULL
[18:04:05.048]             }
[18:04:05.048]             base::options(...future.oldOptions)
[18:04:05.048]             if (.Platform$OS.type == "windows") {
[18:04:05.048]                 old_names <- names(...future.oldEnvVars)
[18:04:05.048]                 envs <- base::Sys.getenv()
[18:04:05.048]                 names <- names(envs)
[18:04:05.048]                 common <- intersect(names, old_names)
[18:04:05.048]                 added <- setdiff(names, old_names)
[18:04:05.048]                 removed <- setdiff(old_names, names)
[18:04:05.048]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:05.048]                   envs[common]]
[18:04:05.048]                 NAMES <- toupper(changed)
[18:04:05.048]                 args <- list()
[18:04:05.048]                 for (kk in seq_along(NAMES)) {
[18:04:05.048]                   name <- changed[[kk]]
[18:04:05.048]                   NAME <- NAMES[[kk]]
[18:04:05.048]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.048]                     next
[18:04:05.048]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.048]                 }
[18:04:05.048]                 NAMES <- toupper(added)
[18:04:05.048]                 for (kk in seq_along(NAMES)) {
[18:04:05.048]                   name <- added[[kk]]
[18:04:05.048]                   NAME <- NAMES[[kk]]
[18:04:05.048]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.048]                     next
[18:04:05.048]                   args[[name]] <- ""
[18:04:05.048]                 }
[18:04:05.048]                 NAMES <- toupper(removed)
[18:04:05.048]                 for (kk in seq_along(NAMES)) {
[18:04:05.048]                   name <- removed[[kk]]
[18:04:05.048]                   NAME <- NAMES[[kk]]
[18:04:05.048]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.048]                     next
[18:04:05.048]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.048]                 }
[18:04:05.048]                 if (length(args) > 0) 
[18:04:05.048]                   base::do.call(base::Sys.setenv, args = args)
[18:04:05.048]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:05.048]             }
[18:04:05.048]             else {
[18:04:05.048]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:05.048]             }
[18:04:05.048]             {
[18:04:05.048]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:05.048]                   0L) {
[18:04:05.048]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:05.048]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:05.048]                   base::options(opts)
[18:04:05.048]                 }
[18:04:05.048]                 {
[18:04:05.048]                   {
[18:04:05.048]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:05.048]                     NULL
[18:04:05.048]                   }
[18:04:05.048]                   options(future.plan = NULL)
[18:04:05.048]                   if (is.na(NA_character_)) 
[18:04:05.048]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.048]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:05.048]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:05.048]                     .init = FALSE)
[18:04:05.048]                 }
[18:04:05.048]             }
[18:04:05.048]         }
[18:04:05.048]     })
[18:04:05.048]     if (TRUE) {
[18:04:05.048]         base::sink(type = "output", split = FALSE)
[18:04:05.048]         if (TRUE) {
[18:04:05.048]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:05.048]         }
[18:04:05.048]         else {
[18:04:05.048]             ...future.result["stdout"] <- base::list(NULL)
[18:04:05.048]         }
[18:04:05.048]         base::close(...future.stdout)
[18:04:05.048]         ...future.stdout <- NULL
[18:04:05.048]     }
[18:04:05.048]     ...future.result$conditions <- ...future.conditions
[18:04:05.048]     ...future.result$finished <- base::Sys.time()
[18:04:05.048]     ...future.result
[18:04:05.048] }
[18:04:05.054] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[18:04:05.055] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[18:04:05.056] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[18:04:05.056] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[18:04:05.057] MultisessionFuture started
[18:04:05.058] - Launch lazy future ... done
[18:04:05.058] run() for ‘MultisessionFuture’ ... done
[18:04:05.058] result() for ClusterFuture ...
[18:04:05.059] receiveMessageFromWorker() for ClusterFuture ...
[18:04:05.059] - Validating connection of MultisessionFuture
[18:04:05.108] - received message: FutureResult
[18:04:05.108] - Received FutureResult
[18:04:05.108] - Erased future from FutureRegistry
[18:04:05.109] result() for ClusterFuture ...
[18:04:05.109] - result already collected: FutureResult
[18:04:05.109] result() for ClusterFuture ... done
[18:04:05.109] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:05.110] result() for ClusterFuture ... done
[18:04:05.110] result() for ClusterFuture ...
[18:04:05.110] - result already collected: FutureResult
[18:04:05.111] result() for ClusterFuture ... done
[18:04:05.111] getGlobalsAndPackages() ...
[18:04:05.111] Searching for globals...
[18:04:05.113] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:05.114] Searching for globals ... DONE
[18:04:05.114] Resolving globals: FALSE
[18:04:05.115] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:05.116] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:05.116] - globals: [1] ‘a’
[18:04:05.117] 
[18:04:05.117] getGlobalsAndPackages() ... DONE
[18:04:05.117] run() for ‘Future’ ...
[18:04:05.118] - state: ‘created’
[18:04:05.118] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:05.145] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:05.145] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:05.145]   - Field: ‘node’
[18:04:05.145]   - Field: ‘label’
[18:04:05.146]   - Field: ‘local’
[18:04:05.146]   - Field: ‘owner’
[18:04:05.146]   - Field: ‘envir’
[18:04:05.146]   - Field: ‘workers’
[18:04:05.146]   - Field: ‘packages’
[18:04:05.147]   - Field: ‘gc’
[18:04:05.147]   - Field: ‘conditions’
[18:04:05.147]   - Field: ‘persistent’
[18:04:05.147]   - Field: ‘expr’
[18:04:05.147]   - Field: ‘uuid’
[18:04:05.148]   - Field: ‘seed’
[18:04:05.148]   - Field: ‘version’
[18:04:05.148]   - Field: ‘result’
[18:04:05.148]   - Field: ‘asynchronous’
[18:04:05.148]   - Field: ‘calls’
[18:04:05.149]   - Field: ‘globals’
[18:04:05.149]   - Field: ‘stdout’
[18:04:05.149]   - Field: ‘earlySignal’
[18:04:05.149]   - Field: ‘lazy’
[18:04:05.149]   - Field: ‘state’
[18:04:05.149] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:05.150] - Launch lazy future ...
[18:04:05.150] Packages needed by the future expression (n = 0): <none>
[18:04:05.150] Packages needed by future strategies (n = 0): <none>
[18:04:05.151] {
[18:04:05.151]     {
[18:04:05.151]         {
[18:04:05.151]             ...future.startTime <- base::Sys.time()
[18:04:05.151]             {
[18:04:05.151]                 {
[18:04:05.151]                   {
[18:04:05.151]                     {
[18:04:05.151]                       base::local({
[18:04:05.151]                         has_future <- base::requireNamespace("future", 
[18:04:05.151]                           quietly = TRUE)
[18:04:05.151]                         if (has_future) {
[18:04:05.151]                           ns <- base::getNamespace("future")
[18:04:05.151]                           version <- ns[[".package"]][["version"]]
[18:04:05.151]                           if (is.null(version)) 
[18:04:05.151]                             version <- utils::packageVersion("future")
[18:04:05.151]                         }
[18:04:05.151]                         else {
[18:04:05.151]                           version <- NULL
[18:04:05.151]                         }
[18:04:05.151]                         if (!has_future || version < "1.8.0") {
[18:04:05.151]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:05.151]                             "", base::R.version$version.string), 
[18:04:05.151]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:05.151]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:05.151]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:05.151]                               "release", "version")], collapse = " "), 
[18:04:05.151]                             hostname = base::Sys.info()[["nodename"]])
[18:04:05.151]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:05.151]                             info)
[18:04:05.151]                           info <- base::paste(info, collapse = "; ")
[18:04:05.151]                           if (!has_future) {
[18:04:05.151]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:05.151]                               info)
[18:04:05.151]                           }
[18:04:05.151]                           else {
[18:04:05.151]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:05.151]                               info, version)
[18:04:05.151]                           }
[18:04:05.151]                           base::stop(msg)
[18:04:05.151]                         }
[18:04:05.151]                       })
[18:04:05.151]                     }
[18:04:05.151]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:05.151]                     base::options(mc.cores = 1L)
[18:04:05.151]                   }
[18:04:05.151]                   ...future.strategy.old <- future::plan("list")
[18:04:05.151]                   options(future.plan = NULL)
[18:04:05.151]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.151]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:05.151]                 }
[18:04:05.151]                 ...future.workdir <- getwd()
[18:04:05.151]             }
[18:04:05.151]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:05.151]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:05.151]         }
[18:04:05.151]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:05.151]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:05.151]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:05.151]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:05.151]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:05.151]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:05.151]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:05.151]             base::names(...future.oldOptions))
[18:04:05.151]     }
[18:04:05.151]     if (FALSE) {
[18:04:05.151]     }
[18:04:05.151]     else {
[18:04:05.151]         if (TRUE) {
[18:04:05.151]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:05.151]                 open = "w")
[18:04:05.151]         }
[18:04:05.151]         else {
[18:04:05.151]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:05.151]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:05.151]         }
[18:04:05.151]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:05.151]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:05.151]             base::sink(type = "output", split = FALSE)
[18:04:05.151]             base::close(...future.stdout)
[18:04:05.151]         }, add = TRUE)
[18:04:05.151]     }
[18:04:05.151]     ...future.frame <- base::sys.nframe()
[18:04:05.151]     ...future.conditions <- base::list()
[18:04:05.151]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:05.151]     if (FALSE) {
[18:04:05.151]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:05.151]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:05.151]     }
[18:04:05.151]     ...future.result <- base::tryCatch({
[18:04:05.151]         base::withCallingHandlers({
[18:04:05.151]             ...future.value <- base::withVisible(base::local({
[18:04:05.151]                 ...future.makeSendCondition <- base::local({
[18:04:05.151]                   sendCondition <- NULL
[18:04:05.151]                   function(frame = 1L) {
[18:04:05.151]                     if (is.function(sendCondition)) 
[18:04:05.151]                       return(sendCondition)
[18:04:05.151]                     ns <- getNamespace("parallel")
[18:04:05.151]                     if (exists("sendData", mode = "function", 
[18:04:05.151]                       envir = ns)) {
[18:04:05.151]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:05.151]                         envir = ns)
[18:04:05.151]                       envir <- sys.frame(frame)
[18:04:05.151]                       master <- NULL
[18:04:05.151]                       while (!identical(envir, .GlobalEnv) && 
[18:04:05.151]                         !identical(envir, emptyenv())) {
[18:04:05.151]                         if (exists("master", mode = "list", envir = envir, 
[18:04:05.151]                           inherits = FALSE)) {
[18:04:05.151]                           master <- get("master", mode = "list", 
[18:04:05.151]                             envir = envir, inherits = FALSE)
[18:04:05.151]                           if (inherits(master, c("SOCKnode", 
[18:04:05.151]                             "SOCK0node"))) {
[18:04:05.151]                             sendCondition <<- function(cond) {
[18:04:05.151]                               data <- list(type = "VALUE", value = cond, 
[18:04:05.151]                                 success = TRUE)
[18:04:05.151]                               parallel_sendData(master, data)
[18:04:05.151]                             }
[18:04:05.151]                             return(sendCondition)
[18:04:05.151]                           }
[18:04:05.151]                         }
[18:04:05.151]                         frame <- frame + 1L
[18:04:05.151]                         envir <- sys.frame(frame)
[18:04:05.151]                       }
[18:04:05.151]                     }
[18:04:05.151]                     sendCondition <<- function(cond) NULL
[18:04:05.151]                   }
[18:04:05.151]                 })
[18:04:05.151]                 withCallingHandlers({
[18:04:05.151]                   {
[18:04:05.151]                     2 * a
[18:04:05.151]                   }
[18:04:05.151]                 }, immediateCondition = function(cond) {
[18:04:05.151]                   sendCondition <- ...future.makeSendCondition()
[18:04:05.151]                   sendCondition(cond)
[18:04:05.151]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.151]                   {
[18:04:05.151]                     inherits <- base::inherits
[18:04:05.151]                     invokeRestart <- base::invokeRestart
[18:04:05.151]                     is.null <- base::is.null
[18:04:05.151]                     muffled <- FALSE
[18:04:05.151]                     if (inherits(cond, "message")) {
[18:04:05.151]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:05.151]                       if (muffled) 
[18:04:05.151]                         invokeRestart("muffleMessage")
[18:04:05.151]                     }
[18:04:05.151]                     else if (inherits(cond, "warning")) {
[18:04:05.151]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:05.151]                       if (muffled) 
[18:04:05.151]                         invokeRestart("muffleWarning")
[18:04:05.151]                     }
[18:04:05.151]                     else if (inherits(cond, "condition")) {
[18:04:05.151]                       if (!is.null(pattern)) {
[18:04:05.151]                         computeRestarts <- base::computeRestarts
[18:04:05.151]                         grepl <- base::grepl
[18:04:05.151]                         restarts <- computeRestarts(cond)
[18:04:05.151]                         for (restart in restarts) {
[18:04:05.151]                           name <- restart$name
[18:04:05.151]                           if (is.null(name)) 
[18:04:05.151]                             next
[18:04:05.151]                           if (!grepl(pattern, name)) 
[18:04:05.151]                             next
[18:04:05.151]                           invokeRestart(restart)
[18:04:05.151]                           muffled <- TRUE
[18:04:05.151]                           break
[18:04:05.151]                         }
[18:04:05.151]                       }
[18:04:05.151]                     }
[18:04:05.151]                     invisible(muffled)
[18:04:05.151]                   }
[18:04:05.151]                   muffleCondition(cond)
[18:04:05.151]                 })
[18:04:05.151]             }))
[18:04:05.151]             future::FutureResult(value = ...future.value$value, 
[18:04:05.151]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.151]                   ...future.rng), globalenv = if (FALSE) 
[18:04:05.151]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:05.151]                     ...future.globalenv.names))
[18:04:05.151]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:05.151]         }, condition = base::local({
[18:04:05.151]             c <- base::c
[18:04:05.151]             inherits <- base::inherits
[18:04:05.151]             invokeRestart <- base::invokeRestart
[18:04:05.151]             length <- base::length
[18:04:05.151]             list <- base::list
[18:04:05.151]             seq.int <- base::seq.int
[18:04:05.151]             signalCondition <- base::signalCondition
[18:04:05.151]             sys.calls <- base::sys.calls
[18:04:05.151]             `[[` <- base::`[[`
[18:04:05.151]             `+` <- base::`+`
[18:04:05.151]             `<<-` <- base::`<<-`
[18:04:05.151]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:05.151]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:05.151]                   3L)]
[18:04:05.151]             }
[18:04:05.151]             function(cond) {
[18:04:05.151]                 is_error <- inherits(cond, "error")
[18:04:05.151]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:05.151]                   NULL)
[18:04:05.151]                 if (is_error) {
[18:04:05.151]                   sessionInformation <- function() {
[18:04:05.151]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:05.151]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:05.151]                       search = base::search(), system = base::Sys.info())
[18:04:05.151]                   }
[18:04:05.151]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.151]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:05.151]                     cond$call), session = sessionInformation(), 
[18:04:05.151]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:05.151]                   signalCondition(cond)
[18:04:05.151]                 }
[18:04:05.151]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:05.151]                 "immediateCondition"))) {
[18:04:05.151]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:05.151]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.151]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:05.151]                   if (TRUE && !signal) {
[18:04:05.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.151]                     {
[18:04:05.151]                       inherits <- base::inherits
[18:04:05.151]                       invokeRestart <- base::invokeRestart
[18:04:05.151]                       is.null <- base::is.null
[18:04:05.151]                       muffled <- FALSE
[18:04:05.151]                       if (inherits(cond, "message")) {
[18:04:05.151]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.151]                         if (muffled) 
[18:04:05.151]                           invokeRestart("muffleMessage")
[18:04:05.151]                       }
[18:04:05.151]                       else if (inherits(cond, "warning")) {
[18:04:05.151]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.151]                         if (muffled) 
[18:04:05.151]                           invokeRestart("muffleWarning")
[18:04:05.151]                       }
[18:04:05.151]                       else if (inherits(cond, "condition")) {
[18:04:05.151]                         if (!is.null(pattern)) {
[18:04:05.151]                           computeRestarts <- base::computeRestarts
[18:04:05.151]                           grepl <- base::grepl
[18:04:05.151]                           restarts <- computeRestarts(cond)
[18:04:05.151]                           for (restart in restarts) {
[18:04:05.151]                             name <- restart$name
[18:04:05.151]                             if (is.null(name)) 
[18:04:05.151]                               next
[18:04:05.151]                             if (!grepl(pattern, name)) 
[18:04:05.151]                               next
[18:04:05.151]                             invokeRestart(restart)
[18:04:05.151]                             muffled <- TRUE
[18:04:05.151]                             break
[18:04:05.151]                           }
[18:04:05.151]                         }
[18:04:05.151]                       }
[18:04:05.151]                       invisible(muffled)
[18:04:05.151]                     }
[18:04:05.151]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.151]                   }
[18:04:05.151]                 }
[18:04:05.151]                 else {
[18:04:05.151]                   if (TRUE) {
[18:04:05.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.151]                     {
[18:04:05.151]                       inherits <- base::inherits
[18:04:05.151]                       invokeRestart <- base::invokeRestart
[18:04:05.151]                       is.null <- base::is.null
[18:04:05.151]                       muffled <- FALSE
[18:04:05.151]                       if (inherits(cond, "message")) {
[18:04:05.151]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.151]                         if (muffled) 
[18:04:05.151]                           invokeRestart("muffleMessage")
[18:04:05.151]                       }
[18:04:05.151]                       else if (inherits(cond, "warning")) {
[18:04:05.151]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.151]                         if (muffled) 
[18:04:05.151]                           invokeRestart("muffleWarning")
[18:04:05.151]                       }
[18:04:05.151]                       else if (inherits(cond, "condition")) {
[18:04:05.151]                         if (!is.null(pattern)) {
[18:04:05.151]                           computeRestarts <- base::computeRestarts
[18:04:05.151]                           grepl <- base::grepl
[18:04:05.151]                           restarts <- computeRestarts(cond)
[18:04:05.151]                           for (restart in restarts) {
[18:04:05.151]                             name <- restart$name
[18:04:05.151]                             if (is.null(name)) 
[18:04:05.151]                               next
[18:04:05.151]                             if (!grepl(pattern, name)) 
[18:04:05.151]                               next
[18:04:05.151]                             invokeRestart(restart)
[18:04:05.151]                             muffled <- TRUE
[18:04:05.151]                             break
[18:04:05.151]                           }
[18:04:05.151]                         }
[18:04:05.151]                       }
[18:04:05.151]                       invisible(muffled)
[18:04:05.151]                     }
[18:04:05.151]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.151]                   }
[18:04:05.151]                 }
[18:04:05.151]             }
[18:04:05.151]         }))
[18:04:05.151]     }, error = function(ex) {
[18:04:05.151]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:05.151]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.151]                 ...future.rng), started = ...future.startTime, 
[18:04:05.151]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:05.151]             version = "1.8"), class = "FutureResult")
[18:04:05.151]     }, finally = {
[18:04:05.151]         if (!identical(...future.workdir, getwd())) 
[18:04:05.151]             setwd(...future.workdir)
[18:04:05.151]         {
[18:04:05.151]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:05.151]                 ...future.oldOptions$nwarnings <- NULL
[18:04:05.151]             }
[18:04:05.151]             base::options(...future.oldOptions)
[18:04:05.151]             if (.Platform$OS.type == "windows") {
[18:04:05.151]                 old_names <- names(...future.oldEnvVars)
[18:04:05.151]                 envs <- base::Sys.getenv()
[18:04:05.151]                 names <- names(envs)
[18:04:05.151]                 common <- intersect(names, old_names)
[18:04:05.151]                 added <- setdiff(names, old_names)
[18:04:05.151]                 removed <- setdiff(old_names, names)
[18:04:05.151]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:05.151]                   envs[common]]
[18:04:05.151]                 NAMES <- toupper(changed)
[18:04:05.151]                 args <- list()
[18:04:05.151]                 for (kk in seq_along(NAMES)) {
[18:04:05.151]                   name <- changed[[kk]]
[18:04:05.151]                   NAME <- NAMES[[kk]]
[18:04:05.151]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.151]                     next
[18:04:05.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.151]                 }
[18:04:05.151]                 NAMES <- toupper(added)
[18:04:05.151]                 for (kk in seq_along(NAMES)) {
[18:04:05.151]                   name <- added[[kk]]
[18:04:05.151]                   NAME <- NAMES[[kk]]
[18:04:05.151]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.151]                     next
[18:04:05.151]                   args[[name]] <- ""
[18:04:05.151]                 }
[18:04:05.151]                 NAMES <- toupper(removed)
[18:04:05.151]                 for (kk in seq_along(NAMES)) {
[18:04:05.151]                   name <- removed[[kk]]
[18:04:05.151]                   NAME <- NAMES[[kk]]
[18:04:05.151]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.151]                     next
[18:04:05.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.151]                 }
[18:04:05.151]                 if (length(args) > 0) 
[18:04:05.151]                   base::do.call(base::Sys.setenv, args = args)
[18:04:05.151]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:05.151]             }
[18:04:05.151]             else {
[18:04:05.151]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:05.151]             }
[18:04:05.151]             {
[18:04:05.151]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:05.151]                   0L) {
[18:04:05.151]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:05.151]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:05.151]                   base::options(opts)
[18:04:05.151]                 }
[18:04:05.151]                 {
[18:04:05.151]                   {
[18:04:05.151]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:05.151]                     NULL
[18:04:05.151]                   }
[18:04:05.151]                   options(future.plan = NULL)
[18:04:05.151]                   if (is.na(NA_character_)) 
[18:04:05.151]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.151]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:05.151]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:05.151]                     .init = FALSE)
[18:04:05.151]                 }
[18:04:05.151]             }
[18:04:05.151]         }
[18:04:05.151]     })
[18:04:05.151]     if (TRUE) {
[18:04:05.151]         base::sink(type = "output", split = FALSE)
[18:04:05.151]         if (TRUE) {
[18:04:05.151]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:05.151]         }
[18:04:05.151]         else {
[18:04:05.151]             ...future.result["stdout"] <- base::list(NULL)
[18:04:05.151]         }
[18:04:05.151]         base::close(...future.stdout)
[18:04:05.151]         ...future.stdout <- NULL
[18:04:05.151]     }
[18:04:05.151]     ...future.result$conditions <- ...future.conditions
[18:04:05.151]     ...future.result$finished <- base::Sys.time()
[18:04:05.151]     ...future.result
[18:04:05.151] }
[18:04:05.156] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[18:04:05.157] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[18:04:05.158] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[18:04:05.158] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[18:04:05.159] MultisessionFuture started
[18:04:05.159] - Launch lazy future ... done
[18:04:05.159] run() for ‘MultisessionFuture’ ... done
[18:04:05.160] result() for ClusterFuture ...
[18:04:05.160] receiveMessageFromWorker() for ClusterFuture ...
[18:04:05.160] - Validating connection of MultisessionFuture
[18:04:05.202] - received message: FutureResult
[18:04:05.202] - Received FutureResult
[18:04:05.203] - Erased future from FutureRegistry
[18:04:05.203] result() for ClusterFuture ...
[18:04:05.203] - result already collected: FutureResult
[18:04:05.203] result() for ClusterFuture ... done
[18:04:05.204] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:05.204] result() for ClusterFuture ... done
[18:04:05.204] result() for ClusterFuture ...
[18:04:05.204] - result already collected: FutureResult
[18:04:05.204] result() for ClusterFuture ... done
[18:04:05.205] getGlobalsAndPackages() ...
[18:04:05.205] Searching for globals...
[18:04:05.207] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:05.208] Searching for globals ... DONE
[18:04:05.208] Resolving globals: FALSE
[18:04:05.208] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:05.209] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:05.209] - globals: [1] ‘a’
[18:04:05.210] 
[18:04:05.210] getGlobalsAndPackages() ... DONE
[18:04:05.211] run() for ‘Future’ ...
[18:04:05.211] - state: ‘created’
[18:04:05.211] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:05.233] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:05.234] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:05.234]   - Field: ‘node’
[18:04:05.234]   - Field: ‘label’
[18:04:05.234]   - Field: ‘local’
[18:04:05.235]   - Field: ‘owner’
[18:04:05.235]   - Field: ‘envir’
[18:04:05.235]   - Field: ‘workers’
[18:04:05.235]   - Field: ‘packages’
[18:04:05.235]   - Field: ‘gc’
[18:04:05.236]   - Field: ‘conditions’
[18:04:05.236]   - Field: ‘persistent’
[18:04:05.236]   - Field: ‘expr’
[18:04:05.236]   - Field: ‘uuid’
[18:04:05.236]   - Field: ‘seed’
[18:04:05.237]   - Field: ‘version’
[18:04:05.237]   - Field: ‘result’
[18:04:05.237]   - Field: ‘asynchronous’
[18:04:05.237]   - Field: ‘calls’
[18:04:05.237]   - Field: ‘globals’
[18:04:05.237]   - Field: ‘stdout’
[18:04:05.238]   - Field: ‘earlySignal’
[18:04:05.238]   - Field: ‘lazy’
[18:04:05.238]   - Field: ‘state’
[18:04:05.238] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:05.238] - Launch lazy future ...
[18:04:05.239] Packages needed by the future expression (n = 0): <none>
[18:04:05.239] Packages needed by future strategies (n = 0): <none>
[18:04:05.240] {
[18:04:05.240]     {
[18:04:05.240]         {
[18:04:05.240]             ...future.startTime <- base::Sys.time()
[18:04:05.240]             {
[18:04:05.240]                 {
[18:04:05.240]                   {
[18:04:05.240]                     {
[18:04:05.240]                       base::local({
[18:04:05.240]                         has_future <- base::requireNamespace("future", 
[18:04:05.240]                           quietly = TRUE)
[18:04:05.240]                         if (has_future) {
[18:04:05.240]                           ns <- base::getNamespace("future")
[18:04:05.240]                           version <- ns[[".package"]][["version"]]
[18:04:05.240]                           if (is.null(version)) 
[18:04:05.240]                             version <- utils::packageVersion("future")
[18:04:05.240]                         }
[18:04:05.240]                         else {
[18:04:05.240]                           version <- NULL
[18:04:05.240]                         }
[18:04:05.240]                         if (!has_future || version < "1.8.0") {
[18:04:05.240]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:05.240]                             "", base::R.version$version.string), 
[18:04:05.240]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:05.240]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:05.240]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:05.240]                               "release", "version")], collapse = " "), 
[18:04:05.240]                             hostname = base::Sys.info()[["nodename"]])
[18:04:05.240]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:05.240]                             info)
[18:04:05.240]                           info <- base::paste(info, collapse = "; ")
[18:04:05.240]                           if (!has_future) {
[18:04:05.240]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:05.240]                               info)
[18:04:05.240]                           }
[18:04:05.240]                           else {
[18:04:05.240]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:05.240]                               info, version)
[18:04:05.240]                           }
[18:04:05.240]                           base::stop(msg)
[18:04:05.240]                         }
[18:04:05.240]                       })
[18:04:05.240]                     }
[18:04:05.240]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:05.240]                     base::options(mc.cores = 1L)
[18:04:05.240]                   }
[18:04:05.240]                   ...future.strategy.old <- future::plan("list")
[18:04:05.240]                   options(future.plan = NULL)
[18:04:05.240]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.240]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:05.240]                 }
[18:04:05.240]                 ...future.workdir <- getwd()
[18:04:05.240]             }
[18:04:05.240]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:05.240]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:05.240]         }
[18:04:05.240]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:05.240]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:05.240]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:05.240]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:05.240]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:05.240]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:05.240]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:05.240]             base::names(...future.oldOptions))
[18:04:05.240]     }
[18:04:05.240]     if (FALSE) {
[18:04:05.240]     }
[18:04:05.240]     else {
[18:04:05.240]         if (TRUE) {
[18:04:05.240]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:05.240]                 open = "w")
[18:04:05.240]         }
[18:04:05.240]         else {
[18:04:05.240]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:05.240]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:05.240]         }
[18:04:05.240]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:05.240]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:05.240]             base::sink(type = "output", split = FALSE)
[18:04:05.240]             base::close(...future.stdout)
[18:04:05.240]         }, add = TRUE)
[18:04:05.240]     }
[18:04:05.240]     ...future.frame <- base::sys.nframe()
[18:04:05.240]     ...future.conditions <- base::list()
[18:04:05.240]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:05.240]     if (FALSE) {
[18:04:05.240]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:05.240]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:05.240]     }
[18:04:05.240]     ...future.result <- base::tryCatch({
[18:04:05.240]         base::withCallingHandlers({
[18:04:05.240]             ...future.value <- base::withVisible(base::local({
[18:04:05.240]                 ...future.makeSendCondition <- base::local({
[18:04:05.240]                   sendCondition <- NULL
[18:04:05.240]                   function(frame = 1L) {
[18:04:05.240]                     if (is.function(sendCondition)) 
[18:04:05.240]                       return(sendCondition)
[18:04:05.240]                     ns <- getNamespace("parallel")
[18:04:05.240]                     if (exists("sendData", mode = "function", 
[18:04:05.240]                       envir = ns)) {
[18:04:05.240]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:05.240]                         envir = ns)
[18:04:05.240]                       envir <- sys.frame(frame)
[18:04:05.240]                       master <- NULL
[18:04:05.240]                       while (!identical(envir, .GlobalEnv) && 
[18:04:05.240]                         !identical(envir, emptyenv())) {
[18:04:05.240]                         if (exists("master", mode = "list", envir = envir, 
[18:04:05.240]                           inherits = FALSE)) {
[18:04:05.240]                           master <- get("master", mode = "list", 
[18:04:05.240]                             envir = envir, inherits = FALSE)
[18:04:05.240]                           if (inherits(master, c("SOCKnode", 
[18:04:05.240]                             "SOCK0node"))) {
[18:04:05.240]                             sendCondition <<- function(cond) {
[18:04:05.240]                               data <- list(type = "VALUE", value = cond, 
[18:04:05.240]                                 success = TRUE)
[18:04:05.240]                               parallel_sendData(master, data)
[18:04:05.240]                             }
[18:04:05.240]                             return(sendCondition)
[18:04:05.240]                           }
[18:04:05.240]                         }
[18:04:05.240]                         frame <- frame + 1L
[18:04:05.240]                         envir <- sys.frame(frame)
[18:04:05.240]                       }
[18:04:05.240]                     }
[18:04:05.240]                     sendCondition <<- function(cond) NULL
[18:04:05.240]                   }
[18:04:05.240]                 })
[18:04:05.240]                 withCallingHandlers({
[18:04:05.240]                   {
[18:04:05.240]                     2 * a
[18:04:05.240]                   }
[18:04:05.240]                 }, immediateCondition = function(cond) {
[18:04:05.240]                   sendCondition <- ...future.makeSendCondition()
[18:04:05.240]                   sendCondition(cond)
[18:04:05.240]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.240]                   {
[18:04:05.240]                     inherits <- base::inherits
[18:04:05.240]                     invokeRestart <- base::invokeRestart
[18:04:05.240]                     is.null <- base::is.null
[18:04:05.240]                     muffled <- FALSE
[18:04:05.240]                     if (inherits(cond, "message")) {
[18:04:05.240]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:05.240]                       if (muffled) 
[18:04:05.240]                         invokeRestart("muffleMessage")
[18:04:05.240]                     }
[18:04:05.240]                     else if (inherits(cond, "warning")) {
[18:04:05.240]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:05.240]                       if (muffled) 
[18:04:05.240]                         invokeRestart("muffleWarning")
[18:04:05.240]                     }
[18:04:05.240]                     else if (inherits(cond, "condition")) {
[18:04:05.240]                       if (!is.null(pattern)) {
[18:04:05.240]                         computeRestarts <- base::computeRestarts
[18:04:05.240]                         grepl <- base::grepl
[18:04:05.240]                         restarts <- computeRestarts(cond)
[18:04:05.240]                         for (restart in restarts) {
[18:04:05.240]                           name <- restart$name
[18:04:05.240]                           if (is.null(name)) 
[18:04:05.240]                             next
[18:04:05.240]                           if (!grepl(pattern, name)) 
[18:04:05.240]                             next
[18:04:05.240]                           invokeRestart(restart)
[18:04:05.240]                           muffled <- TRUE
[18:04:05.240]                           break
[18:04:05.240]                         }
[18:04:05.240]                       }
[18:04:05.240]                     }
[18:04:05.240]                     invisible(muffled)
[18:04:05.240]                   }
[18:04:05.240]                   muffleCondition(cond)
[18:04:05.240]                 })
[18:04:05.240]             }))
[18:04:05.240]             future::FutureResult(value = ...future.value$value, 
[18:04:05.240]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.240]                   ...future.rng), globalenv = if (FALSE) 
[18:04:05.240]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:05.240]                     ...future.globalenv.names))
[18:04:05.240]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:05.240]         }, condition = base::local({
[18:04:05.240]             c <- base::c
[18:04:05.240]             inherits <- base::inherits
[18:04:05.240]             invokeRestart <- base::invokeRestart
[18:04:05.240]             length <- base::length
[18:04:05.240]             list <- base::list
[18:04:05.240]             seq.int <- base::seq.int
[18:04:05.240]             signalCondition <- base::signalCondition
[18:04:05.240]             sys.calls <- base::sys.calls
[18:04:05.240]             `[[` <- base::`[[`
[18:04:05.240]             `+` <- base::`+`
[18:04:05.240]             `<<-` <- base::`<<-`
[18:04:05.240]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:05.240]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:05.240]                   3L)]
[18:04:05.240]             }
[18:04:05.240]             function(cond) {
[18:04:05.240]                 is_error <- inherits(cond, "error")
[18:04:05.240]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:05.240]                   NULL)
[18:04:05.240]                 if (is_error) {
[18:04:05.240]                   sessionInformation <- function() {
[18:04:05.240]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:05.240]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:05.240]                       search = base::search(), system = base::Sys.info())
[18:04:05.240]                   }
[18:04:05.240]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.240]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:05.240]                     cond$call), session = sessionInformation(), 
[18:04:05.240]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:05.240]                   signalCondition(cond)
[18:04:05.240]                 }
[18:04:05.240]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:05.240]                 "immediateCondition"))) {
[18:04:05.240]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:05.240]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.240]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:05.240]                   if (TRUE && !signal) {
[18:04:05.240]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.240]                     {
[18:04:05.240]                       inherits <- base::inherits
[18:04:05.240]                       invokeRestart <- base::invokeRestart
[18:04:05.240]                       is.null <- base::is.null
[18:04:05.240]                       muffled <- FALSE
[18:04:05.240]                       if (inherits(cond, "message")) {
[18:04:05.240]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.240]                         if (muffled) 
[18:04:05.240]                           invokeRestart("muffleMessage")
[18:04:05.240]                       }
[18:04:05.240]                       else if (inherits(cond, "warning")) {
[18:04:05.240]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.240]                         if (muffled) 
[18:04:05.240]                           invokeRestart("muffleWarning")
[18:04:05.240]                       }
[18:04:05.240]                       else if (inherits(cond, "condition")) {
[18:04:05.240]                         if (!is.null(pattern)) {
[18:04:05.240]                           computeRestarts <- base::computeRestarts
[18:04:05.240]                           grepl <- base::grepl
[18:04:05.240]                           restarts <- computeRestarts(cond)
[18:04:05.240]                           for (restart in restarts) {
[18:04:05.240]                             name <- restart$name
[18:04:05.240]                             if (is.null(name)) 
[18:04:05.240]                               next
[18:04:05.240]                             if (!grepl(pattern, name)) 
[18:04:05.240]                               next
[18:04:05.240]                             invokeRestart(restart)
[18:04:05.240]                             muffled <- TRUE
[18:04:05.240]                             break
[18:04:05.240]                           }
[18:04:05.240]                         }
[18:04:05.240]                       }
[18:04:05.240]                       invisible(muffled)
[18:04:05.240]                     }
[18:04:05.240]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.240]                   }
[18:04:05.240]                 }
[18:04:05.240]                 else {
[18:04:05.240]                   if (TRUE) {
[18:04:05.240]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.240]                     {
[18:04:05.240]                       inherits <- base::inherits
[18:04:05.240]                       invokeRestart <- base::invokeRestart
[18:04:05.240]                       is.null <- base::is.null
[18:04:05.240]                       muffled <- FALSE
[18:04:05.240]                       if (inherits(cond, "message")) {
[18:04:05.240]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.240]                         if (muffled) 
[18:04:05.240]                           invokeRestart("muffleMessage")
[18:04:05.240]                       }
[18:04:05.240]                       else if (inherits(cond, "warning")) {
[18:04:05.240]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.240]                         if (muffled) 
[18:04:05.240]                           invokeRestart("muffleWarning")
[18:04:05.240]                       }
[18:04:05.240]                       else if (inherits(cond, "condition")) {
[18:04:05.240]                         if (!is.null(pattern)) {
[18:04:05.240]                           computeRestarts <- base::computeRestarts
[18:04:05.240]                           grepl <- base::grepl
[18:04:05.240]                           restarts <- computeRestarts(cond)
[18:04:05.240]                           for (restart in restarts) {
[18:04:05.240]                             name <- restart$name
[18:04:05.240]                             if (is.null(name)) 
[18:04:05.240]                               next
[18:04:05.240]                             if (!grepl(pattern, name)) 
[18:04:05.240]                               next
[18:04:05.240]                             invokeRestart(restart)
[18:04:05.240]                             muffled <- TRUE
[18:04:05.240]                             break
[18:04:05.240]                           }
[18:04:05.240]                         }
[18:04:05.240]                       }
[18:04:05.240]                       invisible(muffled)
[18:04:05.240]                     }
[18:04:05.240]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.240]                   }
[18:04:05.240]                 }
[18:04:05.240]             }
[18:04:05.240]         }))
[18:04:05.240]     }, error = function(ex) {
[18:04:05.240]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:05.240]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.240]                 ...future.rng), started = ...future.startTime, 
[18:04:05.240]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:05.240]             version = "1.8"), class = "FutureResult")
[18:04:05.240]     }, finally = {
[18:04:05.240]         if (!identical(...future.workdir, getwd())) 
[18:04:05.240]             setwd(...future.workdir)
[18:04:05.240]         {
[18:04:05.240]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:05.240]                 ...future.oldOptions$nwarnings <- NULL
[18:04:05.240]             }
[18:04:05.240]             base::options(...future.oldOptions)
[18:04:05.240]             if (.Platform$OS.type == "windows") {
[18:04:05.240]                 old_names <- names(...future.oldEnvVars)
[18:04:05.240]                 envs <- base::Sys.getenv()
[18:04:05.240]                 names <- names(envs)
[18:04:05.240]                 common <- intersect(names, old_names)
[18:04:05.240]                 added <- setdiff(names, old_names)
[18:04:05.240]                 removed <- setdiff(old_names, names)
[18:04:05.240]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:05.240]                   envs[common]]
[18:04:05.240]                 NAMES <- toupper(changed)
[18:04:05.240]                 args <- list()
[18:04:05.240]                 for (kk in seq_along(NAMES)) {
[18:04:05.240]                   name <- changed[[kk]]
[18:04:05.240]                   NAME <- NAMES[[kk]]
[18:04:05.240]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.240]                     next
[18:04:05.240]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.240]                 }
[18:04:05.240]                 NAMES <- toupper(added)
[18:04:05.240]                 for (kk in seq_along(NAMES)) {
[18:04:05.240]                   name <- added[[kk]]
[18:04:05.240]                   NAME <- NAMES[[kk]]
[18:04:05.240]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.240]                     next
[18:04:05.240]                   args[[name]] <- ""
[18:04:05.240]                 }
[18:04:05.240]                 NAMES <- toupper(removed)
[18:04:05.240]                 for (kk in seq_along(NAMES)) {
[18:04:05.240]                   name <- removed[[kk]]
[18:04:05.240]                   NAME <- NAMES[[kk]]
[18:04:05.240]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.240]                     next
[18:04:05.240]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.240]                 }
[18:04:05.240]                 if (length(args) > 0) 
[18:04:05.240]                   base::do.call(base::Sys.setenv, args = args)
[18:04:05.240]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:05.240]             }
[18:04:05.240]             else {
[18:04:05.240]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:05.240]             }
[18:04:05.240]             {
[18:04:05.240]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:05.240]                   0L) {
[18:04:05.240]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:05.240]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:05.240]                   base::options(opts)
[18:04:05.240]                 }
[18:04:05.240]                 {
[18:04:05.240]                   {
[18:04:05.240]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:05.240]                     NULL
[18:04:05.240]                   }
[18:04:05.240]                   options(future.plan = NULL)
[18:04:05.240]                   if (is.na(NA_character_)) 
[18:04:05.240]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.240]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:05.240]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:05.240]                     .init = FALSE)
[18:04:05.240]                 }
[18:04:05.240]             }
[18:04:05.240]         }
[18:04:05.240]     })
[18:04:05.240]     if (TRUE) {
[18:04:05.240]         base::sink(type = "output", split = FALSE)
[18:04:05.240]         if (TRUE) {
[18:04:05.240]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:05.240]         }
[18:04:05.240]         else {
[18:04:05.240]             ...future.result["stdout"] <- base::list(NULL)
[18:04:05.240]         }
[18:04:05.240]         base::close(...future.stdout)
[18:04:05.240]         ...future.stdout <- NULL
[18:04:05.240]     }
[18:04:05.240]     ...future.result$conditions <- ...future.conditions
[18:04:05.240]     ...future.result$finished <- base::Sys.time()
[18:04:05.240]     ...future.result
[18:04:05.240] }
[18:04:05.245] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[18:04:05.245] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[18:04:05.246] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[18:04:05.246] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[18:04:05.247] MultisessionFuture started
[18:04:05.248] - Launch lazy future ... done
[18:04:05.248] run() for ‘MultisessionFuture’ ... done
[18:04:05.248] result() for ClusterFuture ...
[18:04:05.248] receiveMessageFromWorker() for ClusterFuture ...
[18:04:05.249] - Validating connection of MultisessionFuture
[18:04:05.291] - received message: FutureResult
[18:04:05.292] - Received FutureResult
[18:04:05.292] - Erased future from FutureRegistry
[18:04:05.292] result() for ClusterFuture ...
[18:04:05.293] - result already collected: FutureResult
[18:04:05.293] result() for ClusterFuture ... done
[18:04:05.293] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:05.293] result() for ClusterFuture ... done
[18:04:05.294] result() for ClusterFuture ...
[18:04:05.294] - result already collected: FutureResult
[18:04:05.294] result() for ClusterFuture ... done
[18:04:05.294] getGlobalsAndPackages() ...
[18:04:05.295] Searching for globals...
[18:04:05.296] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:05.297] Searching for globals ... DONE
[18:04:05.297] Resolving globals: FALSE
[18:04:05.298] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:05.299] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:05.299] - globals: [1] ‘a’
[18:04:05.299] 
[18:04:05.299] getGlobalsAndPackages() ... DONE
[18:04:05.300] run() for ‘Future’ ...
[18:04:05.300] - state: ‘created’
[18:04:05.301] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:05.327] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:05.327] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:05.328]   - Field: ‘node’
[18:04:05.328]   - Field: ‘label’
[18:04:05.328]   - Field: ‘local’
[18:04:05.328]   - Field: ‘owner’
[18:04:05.329]   - Field: ‘envir’
[18:04:05.329]   - Field: ‘workers’
[18:04:05.329]   - Field: ‘packages’
[18:04:05.329]   - Field: ‘gc’
[18:04:05.330]   - Field: ‘conditions’
[18:04:05.330]   - Field: ‘persistent’
[18:04:05.330]   - Field: ‘expr’
[18:04:05.330]   - Field: ‘uuid’
[18:04:05.330]   - Field: ‘seed’
[18:04:05.331]   - Field: ‘version’
[18:04:05.331]   - Field: ‘result’
[18:04:05.331]   - Field: ‘asynchronous’
[18:04:05.331]   - Field: ‘calls’
[18:04:05.332]   - Field: ‘globals’
[18:04:05.332]   - Field: ‘stdout’
[18:04:05.332]   - Field: ‘earlySignal’
[18:04:05.332]   - Field: ‘lazy’
[18:04:05.333]   - Field: ‘state’
[18:04:05.333] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:05.333] - Launch lazy future ...
[18:04:05.334] Packages needed by the future expression (n = 0): <none>
[18:04:05.334] Packages needed by future strategies (n = 0): <none>
[18:04:05.335] {
[18:04:05.335]     {
[18:04:05.335]         {
[18:04:05.335]             ...future.startTime <- base::Sys.time()
[18:04:05.335]             {
[18:04:05.335]                 {
[18:04:05.335]                   {
[18:04:05.335]                     {
[18:04:05.335]                       base::local({
[18:04:05.335]                         has_future <- base::requireNamespace("future", 
[18:04:05.335]                           quietly = TRUE)
[18:04:05.335]                         if (has_future) {
[18:04:05.335]                           ns <- base::getNamespace("future")
[18:04:05.335]                           version <- ns[[".package"]][["version"]]
[18:04:05.335]                           if (is.null(version)) 
[18:04:05.335]                             version <- utils::packageVersion("future")
[18:04:05.335]                         }
[18:04:05.335]                         else {
[18:04:05.335]                           version <- NULL
[18:04:05.335]                         }
[18:04:05.335]                         if (!has_future || version < "1.8.0") {
[18:04:05.335]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:05.335]                             "", base::R.version$version.string), 
[18:04:05.335]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:05.335]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:05.335]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:05.335]                               "release", "version")], collapse = " "), 
[18:04:05.335]                             hostname = base::Sys.info()[["nodename"]])
[18:04:05.335]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:05.335]                             info)
[18:04:05.335]                           info <- base::paste(info, collapse = "; ")
[18:04:05.335]                           if (!has_future) {
[18:04:05.335]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:05.335]                               info)
[18:04:05.335]                           }
[18:04:05.335]                           else {
[18:04:05.335]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:05.335]                               info, version)
[18:04:05.335]                           }
[18:04:05.335]                           base::stop(msg)
[18:04:05.335]                         }
[18:04:05.335]                       })
[18:04:05.335]                     }
[18:04:05.335]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:05.335]                     base::options(mc.cores = 1L)
[18:04:05.335]                   }
[18:04:05.335]                   ...future.strategy.old <- future::plan("list")
[18:04:05.335]                   options(future.plan = NULL)
[18:04:05.335]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.335]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:05.335]                 }
[18:04:05.335]                 ...future.workdir <- getwd()
[18:04:05.335]             }
[18:04:05.335]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:05.335]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:05.335]         }
[18:04:05.335]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:05.335]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:05.335]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:05.335]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:05.335]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:05.335]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:05.335]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:05.335]             base::names(...future.oldOptions))
[18:04:05.335]     }
[18:04:05.335]     if (FALSE) {
[18:04:05.335]     }
[18:04:05.335]     else {
[18:04:05.335]         if (TRUE) {
[18:04:05.335]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:05.335]                 open = "w")
[18:04:05.335]         }
[18:04:05.335]         else {
[18:04:05.335]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:05.335]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:05.335]         }
[18:04:05.335]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:05.335]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:05.335]             base::sink(type = "output", split = FALSE)
[18:04:05.335]             base::close(...future.stdout)
[18:04:05.335]         }, add = TRUE)
[18:04:05.335]     }
[18:04:05.335]     ...future.frame <- base::sys.nframe()
[18:04:05.335]     ...future.conditions <- base::list()
[18:04:05.335]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:05.335]     if (FALSE) {
[18:04:05.335]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:05.335]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:05.335]     }
[18:04:05.335]     ...future.result <- base::tryCatch({
[18:04:05.335]         base::withCallingHandlers({
[18:04:05.335]             ...future.value <- base::withVisible(base::local({
[18:04:05.335]                 ...future.makeSendCondition <- base::local({
[18:04:05.335]                   sendCondition <- NULL
[18:04:05.335]                   function(frame = 1L) {
[18:04:05.335]                     if (is.function(sendCondition)) 
[18:04:05.335]                       return(sendCondition)
[18:04:05.335]                     ns <- getNamespace("parallel")
[18:04:05.335]                     if (exists("sendData", mode = "function", 
[18:04:05.335]                       envir = ns)) {
[18:04:05.335]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:05.335]                         envir = ns)
[18:04:05.335]                       envir <- sys.frame(frame)
[18:04:05.335]                       master <- NULL
[18:04:05.335]                       while (!identical(envir, .GlobalEnv) && 
[18:04:05.335]                         !identical(envir, emptyenv())) {
[18:04:05.335]                         if (exists("master", mode = "list", envir = envir, 
[18:04:05.335]                           inherits = FALSE)) {
[18:04:05.335]                           master <- get("master", mode = "list", 
[18:04:05.335]                             envir = envir, inherits = FALSE)
[18:04:05.335]                           if (inherits(master, c("SOCKnode", 
[18:04:05.335]                             "SOCK0node"))) {
[18:04:05.335]                             sendCondition <<- function(cond) {
[18:04:05.335]                               data <- list(type = "VALUE", value = cond, 
[18:04:05.335]                                 success = TRUE)
[18:04:05.335]                               parallel_sendData(master, data)
[18:04:05.335]                             }
[18:04:05.335]                             return(sendCondition)
[18:04:05.335]                           }
[18:04:05.335]                         }
[18:04:05.335]                         frame <- frame + 1L
[18:04:05.335]                         envir <- sys.frame(frame)
[18:04:05.335]                       }
[18:04:05.335]                     }
[18:04:05.335]                     sendCondition <<- function(cond) NULL
[18:04:05.335]                   }
[18:04:05.335]                 })
[18:04:05.335]                 withCallingHandlers({
[18:04:05.335]                   {
[18:04:05.335]                     2 * a
[18:04:05.335]                   }
[18:04:05.335]                 }, immediateCondition = function(cond) {
[18:04:05.335]                   sendCondition <- ...future.makeSendCondition()
[18:04:05.335]                   sendCondition(cond)
[18:04:05.335]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.335]                   {
[18:04:05.335]                     inherits <- base::inherits
[18:04:05.335]                     invokeRestart <- base::invokeRestart
[18:04:05.335]                     is.null <- base::is.null
[18:04:05.335]                     muffled <- FALSE
[18:04:05.335]                     if (inherits(cond, "message")) {
[18:04:05.335]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:05.335]                       if (muffled) 
[18:04:05.335]                         invokeRestart("muffleMessage")
[18:04:05.335]                     }
[18:04:05.335]                     else if (inherits(cond, "warning")) {
[18:04:05.335]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:05.335]                       if (muffled) 
[18:04:05.335]                         invokeRestart("muffleWarning")
[18:04:05.335]                     }
[18:04:05.335]                     else if (inherits(cond, "condition")) {
[18:04:05.335]                       if (!is.null(pattern)) {
[18:04:05.335]                         computeRestarts <- base::computeRestarts
[18:04:05.335]                         grepl <- base::grepl
[18:04:05.335]                         restarts <- computeRestarts(cond)
[18:04:05.335]                         for (restart in restarts) {
[18:04:05.335]                           name <- restart$name
[18:04:05.335]                           if (is.null(name)) 
[18:04:05.335]                             next
[18:04:05.335]                           if (!grepl(pattern, name)) 
[18:04:05.335]                             next
[18:04:05.335]                           invokeRestart(restart)
[18:04:05.335]                           muffled <- TRUE
[18:04:05.335]                           break
[18:04:05.335]                         }
[18:04:05.335]                       }
[18:04:05.335]                     }
[18:04:05.335]                     invisible(muffled)
[18:04:05.335]                   }
[18:04:05.335]                   muffleCondition(cond)
[18:04:05.335]                 })
[18:04:05.335]             }))
[18:04:05.335]             future::FutureResult(value = ...future.value$value, 
[18:04:05.335]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.335]                   ...future.rng), globalenv = if (FALSE) 
[18:04:05.335]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:05.335]                     ...future.globalenv.names))
[18:04:05.335]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:05.335]         }, condition = base::local({
[18:04:05.335]             c <- base::c
[18:04:05.335]             inherits <- base::inherits
[18:04:05.335]             invokeRestart <- base::invokeRestart
[18:04:05.335]             length <- base::length
[18:04:05.335]             list <- base::list
[18:04:05.335]             seq.int <- base::seq.int
[18:04:05.335]             signalCondition <- base::signalCondition
[18:04:05.335]             sys.calls <- base::sys.calls
[18:04:05.335]             `[[` <- base::`[[`
[18:04:05.335]             `+` <- base::`+`
[18:04:05.335]             `<<-` <- base::`<<-`
[18:04:05.335]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:05.335]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:05.335]                   3L)]
[18:04:05.335]             }
[18:04:05.335]             function(cond) {
[18:04:05.335]                 is_error <- inherits(cond, "error")
[18:04:05.335]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:05.335]                   NULL)
[18:04:05.335]                 if (is_error) {
[18:04:05.335]                   sessionInformation <- function() {
[18:04:05.335]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:05.335]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:05.335]                       search = base::search(), system = base::Sys.info())
[18:04:05.335]                   }
[18:04:05.335]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.335]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:05.335]                     cond$call), session = sessionInformation(), 
[18:04:05.335]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:05.335]                   signalCondition(cond)
[18:04:05.335]                 }
[18:04:05.335]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:05.335]                 "immediateCondition"))) {
[18:04:05.335]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:05.335]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.335]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:05.335]                   if (TRUE && !signal) {
[18:04:05.335]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.335]                     {
[18:04:05.335]                       inherits <- base::inherits
[18:04:05.335]                       invokeRestart <- base::invokeRestart
[18:04:05.335]                       is.null <- base::is.null
[18:04:05.335]                       muffled <- FALSE
[18:04:05.335]                       if (inherits(cond, "message")) {
[18:04:05.335]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.335]                         if (muffled) 
[18:04:05.335]                           invokeRestart("muffleMessage")
[18:04:05.335]                       }
[18:04:05.335]                       else if (inherits(cond, "warning")) {
[18:04:05.335]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.335]                         if (muffled) 
[18:04:05.335]                           invokeRestart("muffleWarning")
[18:04:05.335]                       }
[18:04:05.335]                       else if (inherits(cond, "condition")) {
[18:04:05.335]                         if (!is.null(pattern)) {
[18:04:05.335]                           computeRestarts <- base::computeRestarts
[18:04:05.335]                           grepl <- base::grepl
[18:04:05.335]                           restarts <- computeRestarts(cond)
[18:04:05.335]                           for (restart in restarts) {
[18:04:05.335]                             name <- restart$name
[18:04:05.335]                             if (is.null(name)) 
[18:04:05.335]                               next
[18:04:05.335]                             if (!grepl(pattern, name)) 
[18:04:05.335]                               next
[18:04:05.335]                             invokeRestart(restart)
[18:04:05.335]                             muffled <- TRUE
[18:04:05.335]                             break
[18:04:05.335]                           }
[18:04:05.335]                         }
[18:04:05.335]                       }
[18:04:05.335]                       invisible(muffled)
[18:04:05.335]                     }
[18:04:05.335]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.335]                   }
[18:04:05.335]                 }
[18:04:05.335]                 else {
[18:04:05.335]                   if (TRUE) {
[18:04:05.335]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.335]                     {
[18:04:05.335]                       inherits <- base::inherits
[18:04:05.335]                       invokeRestart <- base::invokeRestart
[18:04:05.335]                       is.null <- base::is.null
[18:04:05.335]                       muffled <- FALSE
[18:04:05.335]                       if (inherits(cond, "message")) {
[18:04:05.335]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.335]                         if (muffled) 
[18:04:05.335]                           invokeRestart("muffleMessage")
[18:04:05.335]                       }
[18:04:05.335]                       else if (inherits(cond, "warning")) {
[18:04:05.335]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.335]                         if (muffled) 
[18:04:05.335]                           invokeRestart("muffleWarning")
[18:04:05.335]                       }
[18:04:05.335]                       else if (inherits(cond, "condition")) {
[18:04:05.335]                         if (!is.null(pattern)) {
[18:04:05.335]                           computeRestarts <- base::computeRestarts
[18:04:05.335]                           grepl <- base::grepl
[18:04:05.335]                           restarts <- computeRestarts(cond)
[18:04:05.335]                           for (restart in restarts) {
[18:04:05.335]                             name <- restart$name
[18:04:05.335]                             if (is.null(name)) 
[18:04:05.335]                               next
[18:04:05.335]                             if (!grepl(pattern, name)) 
[18:04:05.335]                               next
[18:04:05.335]                             invokeRestart(restart)
[18:04:05.335]                             muffled <- TRUE
[18:04:05.335]                             break
[18:04:05.335]                           }
[18:04:05.335]                         }
[18:04:05.335]                       }
[18:04:05.335]                       invisible(muffled)
[18:04:05.335]                     }
[18:04:05.335]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.335]                   }
[18:04:05.335]                 }
[18:04:05.335]             }
[18:04:05.335]         }))
[18:04:05.335]     }, error = function(ex) {
[18:04:05.335]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:05.335]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.335]                 ...future.rng), started = ...future.startTime, 
[18:04:05.335]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:05.335]             version = "1.8"), class = "FutureResult")
[18:04:05.335]     }, finally = {
[18:04:05.335]         if (!identical(...future.workdir, getwd())) 
[18:04:05.335]             setwd(...future.workdir)
[18:04:05.335]         {
[18:04:05.335]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:05.335]                 ...future.oldOptions$nwarnings <- NULL
[18:04:05.335]             }
[18:04:05.335]             base::options(...future.oldOptions)
[18:04:05.335]             if (.Platform$OS.type == "windows") {
[18:04:05.335]                 old_names <- names(...future.oldEnvVars)
[18:04:05.335]                 envs <- base::Sys.getenv()
[18:04:05.335]                 names <- names(envs)
[18:04:05.335]                 common <- intersect(names, old_names)
[18:04:05.335]                 added <- setdiff(names, old_names)
[18:04:05.335]                 removed <- setdiff(old_names, names)
[18:04:05.335]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:05.335]                   envs[common]]
[18:04:05.335]                 NAMES <- toupper(changed)
[18:04:05.335]                 args <- list()
[18:04:05.335]                 for (kk in seq_along(NAMES)) {
[18:04:05.335]                   name <- changed[[kk]]
[18:04:05.335]                   NAME <- NAMES[[kk]]
[18:04:05.335]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.335]                     next
[18:04:05.335]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.335]                 }
[18:04:05.335]                 NAMES <- toupper(added)
[18:04:05.335]                 for (kk in seq_along(NAMES)) {
[18:04:05.335]                   name <- added[[kk]]
[18:04:05.335]                   NAME <- NAMES[[kk]]
[18:04:05.335]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.335]                     next
[18:04:05.335]                   args[[name]] <- ""
[18:04:05.335]                 }
[18:04:05.335]                 NAMES <- toupper(removed)
[18:04:05.335]                 for (kk in seq_along(NAMES)) {
[18:04:05.335]                   name <- removed[[kk]]
[18:04:05.335]                   NAME <- NAMES[[kk]]
[18:04:05.335]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.335]                     next
[18:04:05.335]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.335]                 }
[18:04:05.335]                 if (length(args) > 0) 
[18:04:05.335]                   base::do.call(base::Sys.setenv, args = args)
[18:04:05.335]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:05.335]             }
[18:04:05.335]             else {
[18:04:05.335]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:05.335]             }
[18:04:05.335]             {
[18:04:05.335]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:05.335]                   0L) {
[18:04:05.335]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:05.335]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:05.335]                   base::options(opts)
[18:04:05.335]                 }
[18:04:05.335]                 {
[18:04:05.335]                   {
[18:04:05.335]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:05.335]                     NULL
[18:04:05.335]                   }
[18:04:05.335]                   options(future.plan = NULL)
[18:04:05.335]                   if (is.na(NA_character_)) 
[18:04:05.335]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.335]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:05.335]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:05.335]                     .init = FALSE)
[18:04:05.335]                 }
[18:04:05.335]             }
[18:04:05.335]         }
[18:04:05.335]     })
[18:04:05.335]     if (TRUE) {
[18:04:05.335]         base::sink(type = "output", split = FALSE)
[18:04:05.335]         if (TRUE) {
[18:04:05.335]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:05.335]         }
[18:04:05.335]         else {
[18:04:05.335]             ...future.result["stdout"] <- base::list(NULL)
[18:04:05.335]         }
[18:04:05.335]         base::close(...future.stdout)
[18:04:05.335]         ...future.stdout <- NULL
[18:04:05.335]     }
[18:04:05.335]     ...future.result$conditions <- ...future.conditions
[18:04:05.335]     ...future.result$finished <- base::Sys.time()
[18:04:05.335]     ...future.result
[18:04:05.335] }
[18:04:05.340] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[18:04:05.341] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[18:04:05.342] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[18:04:05.342] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[18:04:05.343] MultisessionFuture started
[18:04:05.344] - Launch lazy future ... done
[18:04:05.344] run() for ‘MultisessionFuture’ ... done
[18:04:05.345] result() for ClusterFuture ...
[18:04:05.345] receiveMessageFromWorker() for ClusterFuture ...
[18:04:05.345] - Validating connection of MultisessionFuture
[18:04:05.390] - received message: FutureResult
[18:04:05.391] - Received FutureResult
[18:04:05.391] - Erased future from FutureRegistry
[18:04:05.391] result() for ClusterFuture ...
[18:04:05.392] - result already collected: FutureResult
[18:04:05.392] result() for ClusterFuture ... done
[18:04:05.392] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:05.392] result() for ClusterFuture ... done
[18:04:05.392] result() for ClusterFuture ...
[18:04:05.393] - result already collected: FutureResult
[18:04:05.393] result() for ClusterFuture ... done
[18:04:05.393] getGlobalsAndPackages() ...
[18:04:05.394] Searching for globals...
[18:04:05.396] - globals found: [3] ‘{’, ‘*’, ‘a’
[18:04:05.396] Searching for globals ... DONE
[18:04:05.396] Resolving globals: FALSE
[18:04:05.397] The total size of the 1 globals is 56 bytes (56 bytes)
[18:04:05.398] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[18:04:05.398] - globals: [1] ‘a’
[18:04:05.398] 
[18:04:05.399] getGlobalsAndPackages() ... DONE
[18:04:05.399] run() for ‘Future’ ...
[18:04:05.399] - state: ‘created’
[18:04:05.400] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:04:05.425] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:04:05.425] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:04:05.425]   - Field: ‘node’
[18:04:05.426]   - Field: ‘label’
[18:04:05.426]   - Field: ‘local’
[18:04:05.426]   - Field: ‘owner’
[18:04:05.426]   - Field: ‘envir’
[18:04:05.426]   - Field: ‘workers’
[18:04:05.427]   - Field: ‘packages’
[18:04:05.427]   - Field: ‘gc’
[18:04:05.427]   - Field: ‘conditions’
[18:04:05.427]   - Field: ‘persistent’
[18:04:05.427]   - Field: ‘expr’
[18:04:05.428]   - Field: ‘uuid’
[18:04:05.428]   - Field: ‘seed’
[18:04:05.428]   - Field: ‘version’
[18:04:05.428]   - Field: ‘result’
[18:04:05.428]   - Field: ‘asynchronous’
[18:04:05.429]   - Field: ‘calls’
[18:04:05.429]   - Field: ‘globals’
[18:04:05.429]   - Field: ‘stdout’
[18:04:05.429]   - Field: ‘earlySignal’
[18:04:05.429]   - Field: ‘lazy’
[18:04:05.430]   - Field: ‘state’
[18:04:05.430] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:04:05.430] - Launch lazy future ...
[18:04:05.431] Packages needed by the future expression (n = 0): <none>
[18:04:05.431] Packages needed by future strategies (n = 0): <none>
[18:04:05.432] {
[18:04:05.432]     {
[18:04:05.432]         {
[18:04:05.432]             ...future.startTime <- base::Sys.time()
[18:04:05.432]             {
[18:04:05.432]                 {
[18:04:05.432]                   {
[18:04:05.432]                     {
[18:04:05.432]                       base::local({
[18:04:05.432]                         has_future <- base::requireNamespace("future", 
[18:04:05.432]                           quietly = TRUE)
[18:04:05.432]                         if (has_future) {
[18:04:05.432]                           ns <- base::getNamespace("future")
[18:04:05.432]                           version <- ns[[".package"]][["version"]]
[18:04:05.432]                           if (is.null(version)) 
[18:04:05.432]                             version <- utils::packageVersion("future")
[18:04:05.432]                         }
[18:04:05.432]                         else {
[18:04:05.432]                           version <- NULL
[18:04:05.432]                         }
[18:04:05.432]                         if (!has_future || version < "1.8.0") {
[18:04:05.432]                           info <- base::c(r_version = base::gsub("R version ", 
[18:04:05.432]                             "", base::R.version$version.string), 
[18:04:05.432]                             platform = base::sprintf("%s (%s-bit)", 
[18:04:05.432]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:04:05.432]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:04:05.432]                               "release", "version")], collapse = " "), 
[18:04:05.432]                             hostname = base::Sys.info()[["nodename"]])
[18:04:05.432]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:04:05.432]                             info)
[18:04:05.432]                           info <- base::paste(info, collapse = "; ")
[18:04:05.432]                           if (!has_future) {
[18:04:05.432]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:04:05.432]                               info)
[18:04:05.432]                           }
[18:04:05.432]                           else {
[18:04:05.432]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:04:05.432]                               info, version)
[18:04:05.432]                           }
[18:04:05.432]                           base::stop(msg)
[18:04:05.432]                         }
[18:04:05.432]                       })
[18:04:05.432]                     }
[18:04:05.432]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:04:05.432]                     base::options(mc.cores = 1L)
[18:04:05.432]                   }
[18:04:05.432]                   ...future.strategy.old <- future::plan("list")
[18:04:05.432]                   options(future.plan = NULL)
[18:04:05.432]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.432]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:04:05.432]                 }
[18:04:05.432]                 ...future.workdir <- getwd()
[18:04:05.432]             }
[18:04:05.432]             ...future.oldOptions <- base::as.list(base::.Options)
[18:04:05.432]             ...future.oldEnvVars <- base::Sys.getenv()
[18:04:05.432]         }
[18:04:05.432]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:04:05.432]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:04:05.432]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:04:05.432]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:04:05.432]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:04:05.432]             future.stdout.windows.reencode = NULL, width = 80L)
[18:04:05.432]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:04:05.432]             base::names(...future.oldOptions))
[18:04:05.432]     }
[18:04:05.432]     if (FALSE) {
[18:04:05.432]     }
[18:04:05.432]     else {
[18:04:05.432]         if (TRUE) {
[18:04:05.432]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:04:05.432]                 open = "w")
[18:04:05.432]         }
[18:04:05.432]         else {
[18:04:05.432]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:04:05.432]                 windows = "NUL", "/dev/null"), open = "w")
[18:04:05.432]         }
[18:04:05.432]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:04:05.432]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:04:05.432]             base::sink(type = "output", split = FALSE)
[18:04:05.432]             base::close(...future.stdout)
[18:04:05.432]         }, add = TRUE)
[18:04:05.432]     }
[18:04:05.432]     ...future.frame <- base::sys.nframe()
[18:04:05.432]     ...future.conditions <- base::list()
[18:04:05.432]     ...future.rng <- base::globalenv()$.Random.seed
[18:04:05.432]     if (FALSE) {
[18:04:05.432]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:04:05.432]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:04:05.432]     }
[18:04:05.432]     ...future.result <- base::tryCatch({
[18:04:05.432]         base::withCallingHandlers({
[18:04:05.432]             ...future.value <- base::withVisible(base::local({
[18:04:05.432]                 ...future.makeSendCondition <- base::local({
[18:04:05.432]                   sendCondition <- NULL
[18:04:05.432]                   function(frame = 1L) {
[18:04:05.432]                     if (is.function(sendCondition)) 
[18:04:05.432]                       return(sendCondition)
[18:04:05.432]                     ns <- getNamespace("parallel")
[18:04:05.432]                     if (exists("sendData", mode = "function", 
[18:04:05.432]                       envir = ns)) {
[18:04:05.432]                       parallel_sendData <- get("sendData", mode = "function", 
[18:04:05.432]                         envir = ns)
[18:04:05.432]                       envir <- sys.frame(frame)
[18:04:05.432]                       master <- NULL
[18:04:05.432]                       while (!identical(envir, .GlobalEnv) && 
[18:04:05.432]                         !identical(envir, emptyenv())) {
[18:04:05.432]                         if (exists("master", mode = "list", envir = envir, 
[18:04:05.432]                           inherits = FALSE)) {
[18:04:05.432]                           master <- get("master", mode = "list", 
[18:04:05.432]                             envir = envir, inherits = FALSE)
[18:04:05.432]                           if (inherits(master, c("SOCKnode", 
[18:04:05.432]                             "SOCK0node"))) {
[18:04:05.432]                             sendCondition <<- function(cond) {
[18:04:05.432]                               data <- list(type = "VALUE", value = cond, 
[18:04:05.432]                                 success = TRUE)
[18:04:05.432]                               parallel_sendData(master, data)
[18:04:05.432]                             }
[18:04:05.432]                             return(sendCondition)
[18:04:05.432]                           }
[18:04:05.432]                         }
[18:04:05.432]                         frame <- frame + 1L
[18:04:05.432]                         envir <- sys.frame(frame)
[18:04:05.432]                       }
[18:04:05.432]                     }
[18:04:05.432]                     sendCondition <<- function(cond) NULL
[18:04:05.432]                   }
[18:04:05.432]                 })
[18:04:05.432]                 withCallingHandlers({
[18:04:05.432]                   {
[18:04:05.432]                     2 * a
[18:04:05.432]                   }
[18:04:05.432]                 }, immediateCondition = function(cond) {
[18:04:05.432]                   sendCondition <- ...future.makeSendCondition()
[18:04:05.432]                   sendCondition(cond)
[18:04:05.432]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.432]                   {
[18:04:05.432]                     inherits <- base::inherits
[18:04:05.432]                     invokeRestart <- base::invokeRestart
[18:04:05.432]                     is.null <- base::is.null
[18:04:05.432]                     muffled <- FALSE
[18:04:05.432]                     if (inherits(cond, "message")) {
[18:04:05.432]                       muffled <- grepl(pattern, "muffleMessage")
[18:04:05.432]                       if (muffled) 
[18:04:05.432]                         invokeRestart("muffleMessage")
[18:04:05.432]                     }
[18:04:05.432]                     else if (inherits(cond, "warning")) {
[18:04:05.432]                       muffled <- grepl(pattern, "muffleWarning")
[18:04:05.432]                       if (muffled) 
[18:04:05.432]                         invokeRestart("muffleWarning")
[18:04:05.432]                     }
[18:04:05.432]                     else if (inherits(cond, "condition")) {
[18:04:05.432]                       if (!is.null(pattern)) {
[18:04:05.432]                         computeRestarts <- base::computeRestarts
[18:04:05.432]                         grepl <- base::grepl
[18:04:05.432]                         restarts <- computeRestarts(cond)
[18:04:05.432]                         for (restart in restarts) {
[18:04:05.432]                           name <- restart$name
[18:04:05.432]                           if (is.null(name)) 
[18:04:05.432]                             next
[18:04:05.432]                           if (!grepl(pattern, name)) 
[18:04:05.432]                             next
[18:04:05.432]                           invokeRestart(restart)
[18:04:05.432]                           muffled <- TRUE
[18:04:05.432]                           break
[18:04:05.432]                         }
[18:04:05.432]                       }
[18:04:05.432]                     }
[18:04:05.432]                     invisible(muffled)
[18:04:05.432]                   }
[18:04:05.432]                   muffleCondition(cond)
[18:04:05.432]                 })
[18:04:05.432]             }))
[18:04:05.432]             future::FutureResult(value = ...future.value$value, 
[18:04:05.432]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.432]                   ...future.rng), globalenv = if (FALSE) 
[18:04:05.432]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:04:05.432]                     ...future.globalenv.names))
[18:04:05.432]                 else NULL, started = ...future.startTime, version = "1.8")
[18:04:05.432]         }, condition = base::local({
[18:04:05.432]             c <- base::c
[18:04:05.432]             inherits <- base::inherits
[18:04:05.432]             invokeRestart <- base::invokeRestart
[18:04:05.432]             length <- base::length
[18:04:05.432]             list <- base::list
[18:04:05.432]             seq.int <- base::seq.int
[18:04:05.432]             signalCondition <- base::signalCondition
[18:04:05.432]             sys.calls <- base::sys.calls
[18:04:05.432]             `[[` <- base::`[[`
[18:04:05.432]             `+` <- base::`+`
[18:04:05.432]             `<<-` <- base::`<<-`
[18:04:05.432]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:04:05.432]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:04:05.432]                   3L)]
[18:04:05.432]             }
[18:04:05.432]             function(cond) {
[18:04:05.432]                 is_error <- inherits(cond, "error")
[18:04:05.432]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:04:05.432]                   NULL)
[18:04:05.432]                 if (is_error) {
[18:04:05.432]                   sessionInformation <- function() {
[18:04:05.432]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:04:05.432]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:04:05.432]                       search = base::search(), system = base::Sys.info())
[18:04:05.432]                   }
[18:04:05.432]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.432]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:04:05.432]                     cond$call), session = sessionInformation(), 
[18:04:05.432]                     timestamp = base::Sys.time(), signaled = 0L)
[18:04:05.432]                   signalCondition(cond)
[18:04:05.432]                 }
[18:04:05.432]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:04:05.432]                 "immediateCondition"))) {
[18:04:05.432]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:04:05.432]                   ...future.conditions[[length(...future.conditions) + 
[18:04:05.432]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:04:05.432]                   if (TRUE && !signal) {
[18:04:05.432]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.432]                     {
[18:04:05.432]                       inherits <- base::inherits
[18:04:05.432]                       invokeRestart <- base::invokeRestart
[18:04:05.432]                       is.null <- base::is.null
[18:04:05.432]                       muffled <- FALSE
[18:04:05.432]                       if (inherits(cond, "message")) {
[18:04:05.432]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.432]                         if (muffled) 
[18:04:05.432]                           invokeRestart("muffleMessage")
[18:04:05.432]                       }
[18:04:05.432]                       else if (inherits(cond, "warning")) {
[18:04:05.432]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.432]                         if (muffled) 
[18:04:05.432]                           invokeRestart("muffleWarning")
[18:04:05.432]                       }
[18:04:05.432]                       else if (inherits(cond, "condition")) {
[18:04:05.432]                         if (!is.null(pattern)) {
[18:04:05.432]                           computeRestarts <- base::computeRestarts
[18:04:05.432]                           grepl <- base::grepl
[18:04:05.432]                           restarts <- computeRestarts(cond)
[18:04:05.432]                           for (restart in restarts) {
[18:04:05.432]                             name <- restart$name
[18:04:05.432]                             if (is.null(name)) 
[18:04:05.432]                               next
[18:04:05.432]                             if (!grepl(pattern, name)) 
[18:04:05.432]                               next
[18:04:05.432]                             invokeRestart(restart)
[18:04:05.432]                             muffled <- TRUE
[18:04:05.432]                             break
[18:04:05.432]                           }
[18:04:05.432]                         }
[18:04:05.432]                       }
[18:04:05.432]                       invisible(muffled)
[18:04:05.432]                     }
[18:04:05.432]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.432]                   }
[18:04:05.432]                 }
[18:04:05.432]                 else {
[18:04:05.432]                   if (TRUE) {
[18:04:05.432]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:04:05.432]                     {
[18:04:05.432]                       inherits <- base::inherits
[18:04:05.432]                       invokeRestart <- base::invokeRestart
[18:04:05.432]                       is.null <- base::is.null
[18:04:05.432]                       muffled <- FALSE
[18:04:05.432]                       if (inherits(cond, "message")) {
[18:04:05.432]                         muffled <- grepl(pattern, "muffleMessage")
[18:04:05.432]                         if (muffled) 
[18:04:05.432]                           invokeRestart("muffleMessage")
[18:04:05.432]                       }
[18:04:05.432]                       else if (inherits(cond, "warning")) {
[18:04:05.432]                         muffled <- grepl(pattern, "muffleWarning")
[18:04:05.432]                         if (muffled) 
[18:04:05.432]                           invokeRestart("muffleWarning")
[18:04:05.432]                       }
[18:04:05.432]                       else if (inherits(cond, "condition")) {
[18:04:05.432]                         if (!is.null(pattern)) {
[18:04:05.432]                           computeRestarts <- base::computeRestarts
[18:04:05.432]                           grepl <- base::grepl
[18:04:05.432]                           restarts <- computeRestarts(cond)
[18:04:05.432]                           for (restart in restarts) {
[18:04:05.432]                             name <- restart$name
[18:04:05.432]                             if (is.null(name)) 
[18:04:05.432]                               next
[18:04:05.432]                             if (!grepl(pattern, name)) 
[18:04:05.432]                               next
[18:04:05.432]                             invokeRestart(restart)
[18:04:05.432]                             muffled <- TRUE
[18:04:05.432]                             break
[18:04:05.432]                           }
[18:04:05.432]                         }
[18:04:05.432]                       }
[18:04:05.432]                       invisible(muffled)
[18:04:05.432]                     }
[18:04:05.432]                     muffleCondition(cond, pattern = "^muffle")
[18:04:05.432]                   }
[18:04:05.432]                 }
[18:04:05.432]             }
[18:04:05.432]         }))
[18:04:05.432]     }, error = function(ex) {
[18:04:05.432]         base::structure(base::list(value = NULL, visible = NULL, 
[18:04:05.432]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:04:05.432]                 ...future.rng), started = ...future.startTime, 
[18:04:05.432]             finished = Sys.time(), session_uuid = NA_character_, 
[18:04:05.432]             version = "1.8"), class = "FutureResult")
[18:04:05.432]     }, finally = {
[18:04:05.432]         if (!identical(...future.workdir, getwd())) 
[18:04:05.432]             setwd(...future.workdir)
[18:04:05.432]         {
[18:04:05.432]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:04:05.432]                 ...future.oldOptions$nwarnings <- NULL
[18:04:05.432]             }
[18:04:05.432]             base::options(...future.oldOptions)
[18:04:05.432]             if (.Platform$OS.type == "windows") {
[18:04:05.432]                 old_names <- names(...future.oldEnvVars)
[18:04:05.432]                 envs <- base::Sys.getenv()
[18:04:05.432]                 names <- names(envs)
[18:04:05.432]                 common <- intersect(names, old_names)
[18:04:05.432]                 added <- setdiff(names, old_names)
[18:04:05.432]                 removed <- setdiff(old_names, names)
[18:04:05.432]                 changed <- common[...future.oldEnvVars[common] != 
[18:04:05.432]                   envs[common]]
[18:04:05.432]                 NAMES <- toupper(changed)
[18:04:05.432]                 args <- list()
[18:04:05.432]                 for (kk in seq_along(NAMES)) {
[18:04:05.432]                   name <- changed[[kk]]
[18:04:05.432]                   NAME <- NAMES[[kk]]
[18:04:05.432]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.432]                     next
[18:04:05.432]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.432]                 }
[18:04:05.432]                 NAMES <- toupper(added)
[18:04:05.432]                 for (kk in seq_along(NAMES)) {
[18:04:05.432]                   name <- added[[kk]]
[18:04:05.432]                   NAME <- NAMES[[kk]]
[18:04:05.432]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.432]                     next
[18:04:05.432]                   args[[name]] <- ""
[18:04:05.432]                 }
[18:04:05.432]                 NAMES <- toupper(removed)
[18:04:05.432]                 for (kk in seq_along(NAMES)) {
[18:04:05.432]                   name <- removed[[kk]]
[18:04:05.432]                   NAME <- NAMES[[kk]]
[18:04:05.432]                   if (name != NAME && is.element(NAME, old_names)) 
[18:04:05.432]                     next
[18:04:05.432]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:04:05.432]                 }
[18:04:05.432]                 if (length(args) > 0) 
[18:04:05.432]                   base::do.call(base::Sys.setenv, args = args)
[18:04:05.432]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:04:05.432]             }
[18:04:05.432]             else {
[18:04:05.432]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:04:05.432]             }
[18:04:05.432]             {
[18:04:05.432]                 if (base::length(...future.futureOptionsAdded) > 
[18:04:05.432]                   0L) {
[18:04:05.432]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:04:05.432]                   base::names(opts) <- ...future.futureOptionsAdded
[18:04:05.432]                   base::options(opts)
[18:04:05.432]                 }
[18:04:05.432]                 {
[18:04:05.432]                   {
[18:04:05.432]                     base::options(mc.cores = ...future.mc.cores.old)
[18:04:05.432]                     NULL
[18:04:05.432]                   }
[18:04:05.432]                   options(future.plan = NULL)
[18:04:05.432]                   if (is.na(NA_character_)) 
[18:04:05.432]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:04:05.432]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:04:05.432]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:04:05.432]                     .init = FALSE)
[18:04:05.432]                 }
[18:04:05.432]             }
[18:04:05.432]         }
[18:04:05.432]     })
[18:04:05.432]     if (TRUE) {
[18:04:05.432]         base::sink(type = "output", split = FALSE)
[18:04:05.432]         if (TRUE) {
[18:04:05.432]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:04:05.432]         }
[18:04:05.432]         else {
[18:04:05.432]             ...future.result["stdout"] <- base::list(NULL)
[18:04:05.432]         }
[18:04:05.432]         base::close(...future.stdout)
[18:04:05.432]         ...future.stdout <- NULL
[18:04:05.432]     }
[18:04:05.432]     ...future.result$conditions <- ...future.conditions
[18:04:05.432]     ...future.result$finished <- base::Sys.time()
[18:04:05.432]     ...future.result
[18:04:05.432] }
[18:04:05.437] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[18:04:05.437] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[18:04:05.438] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[18:04:05.439] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[18:04:05.440] MultisessionFuture started
[18:04:05.441] - Launch lazy future ... done
[18:04:05.441] run() for ‘MultisessionFuture’ ... done
[18:04:05.441] result() for ClusterFuture ...
[18:04:05.441] receiveMessageFromWorker() for ClusterFuture ...
[18:04:05.442] - Validating connection of MultisessionFuture
[18:04:05.485] - received message: FutureResult
[18:04:05.485] - Received FutureResult
[18:04:05.485] - Erased future from FutureRegistry
[18:04:05.486] result() for ClusterFuture ...
[18:04:05.486] - result already collected: FutureResult
[18:04:05.486] result() for ClusterFuture ... done
[18:04:05.486] receiveMessageFromWorker() for ClusterFuture ... done
[18:04:05.487] result() for ClusterFuture ... done
[18:04:05.487] result() for ClusterFuture ...
[18:04:05.487] - result already collected: FutureResult
[18:04:05.487] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[18:04:05.489] plan(): Setting new future strategy stack:
[18:04:05.490] List of future strategies:
[18:04:05.490] 1. FutureStrategy:
[18:04:05.490]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:04:05.490]    - tweaked: FALSE
[18:04:05.490]    - call: future::plan(oplan)
[18:04:05.491] plan(): nbrOfWorkers() = 1
> 
