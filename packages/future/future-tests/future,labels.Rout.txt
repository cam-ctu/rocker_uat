
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[17:02:16.518] plan(): Setting new future strategy stack:
[17:02:16.519] List of future strategies:
[17:02:16.519] 1. sequential:
[17:02:16.519]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.519]    - tweaked: FALSE
[17:02:16.519]    - call: future::plan("sequential")
[17:02:16.530] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[17:02:16.557] plan(): Setting new future strategy stack:
[17:02:16.557] List of future strategies:
[17:02:16.557] 1. sequential:
[17:02:16.557]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.557]    - tweaked: FALSE
[17:02:16.557]    - call: plan(strategy)
[17:02:16.570] plan(): nbrOfWorkers() = 1
[17:02:16.571] getGlobalsAndPackages() ...
[17:02:16.571] Searching for globals...
[17:02:16.573] 
[17:02:16.573] Searching for globals ... DONE
[17:02:16.574] - globals: [0] <none>
[17:02:16.574] getGlobalsAndPackages() ... DONE
[17:02:16.575] Packages needed by the future expression (n = 0): <none>
[17:02:16.575] Packages needed by future strategies (n = 0): <none>
[17:02:16.576] {
[17:02:16.576]     {
[17:02:16.576]         {
[17:02:16.576]             ...future.startTime <- base::Sys.time()
[17:02:16.576]             {
[17:02:16.576]                 {
[17:02:16.576]                   {
[17:02:16.576]                     base::local({
[17:02:16.576]                       has_future <- base::requireNamespace("future", 
[17:02:16.576]                         quietly = TRUE)
[17:02:16.576]                       if (has_future) {
[17:02:16.576]                         ns <- base::getNamespace("future")
[17:02:16.576]                         version <- ns[[".package"]][["version"]]
[17:02:16.576]                         if (is.null(version)) 
[17:02:16.576]                           version <- utils::packageVersion("future")
[17:02:16.576]                       }
[17:02:16.576]                       else {
[17:02:16.576]                         version <- NULL
[17:02:16.576]                       }
[17:02:16.576]                       if (!has_future || version < "1.8.0") {
[17:02:16.576]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.576]                           "", base::R.version$version.string), 
[17:02:16.576]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:16.576]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.576]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.576]                             "release", "version")], collapse = " "), 
[17:02:16.576]                           hostname = base::Sys.info()[["nodename"]])
[17:02:16.576]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.576]                           info)
[17:02:16.576]                         info <- base::paste(info, collapse = "; ")
[17:02:16.576]                         if (!has_future) {
[17:02:16.576]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.576]                             info)
[17:02:16.576]                         }
[17:02:16.576]                         else {
[17:02:16.576]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.576]                             info, version)
[17:02:16.576]                         }
[17:02:16.576]                         base::stop(msg)
[17:02:16.576]                       }
[17:02:16.576]                     })
[17:02:16.576]                   }
[17:02:16.576]                   ...future.strategy.old <- future::plan("list")
[17:02:16.576]                   options(future.plan = NULL)
[17:02:16.576]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.576]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.576]                 }
[17:02:16.576]                 ...future.workdir <- getwd()
[17:02:16.576]             }
[17:02:16.576]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.576]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.576]         }
[17:02:16.576]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.576]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.576]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.576]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.576]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.576]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.576]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.576]             base::names(...future.oldOptions))
[17:02:16.576]     }
[17:02:16.576]     if (FALSE) {
[17:02:16.576]     }
[17:02:16.576]     else {
[17:02:16.576]         if (TRUE) {
[17:02:16.576]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.576]                 open = "w")
[17:02:16.576]         }
[17:02:16.576]         else {
[17:02:16.576]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.576]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.576]         }
[17:02:16.576]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.576]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.576]             base::sink(type = "output", split = FALSE)
[17:02:16.576]             base::close(...future.stdout)
[17:02:16.576]         }, add = TRUE)
[17:02:16.576]     }
[17:02:16.576]     ...future.frame <- base::sys.nframe()
[17:02:16.576]     ...future.conditions <- base::list()
[17:02:16.576]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.576]     if (FALSE) {
[17:02:16.576]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.576]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.576]     }
[17:02:16.576]     ...future.result <- base::tryCatch({
[17:02:16.576]         base::withCallingHandlers({
[17:02:16.576]             ...future.value <- base::withVisible(base::local(42))
[17:02:16.576]             future::FutureResult(value = ...future.value$value, 
[17:02:16.576]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.576]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.576]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.576]                     ...future.globalenv.names))
[17:02:16.576]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.576]         }, condition = base::local({
[17:02:16.576]             c <- base::c
[17:02:16.576]             inherits <- base::inherits
[17:02:16.576]             invokeRestart <- base::invokeRestart
[17:02:16.576]             length <- base::length
[17:02:16.576]             list <- base::list
[17:02:16.576]             seq.int <- base::seq.int
[17:02:16.576]             signalCondition <- base::signalCondition
[17:02:16.576]             sys.calls <- base::sys.calls
[17:02:16.576]             `[[` <- base::`[[`
[17:02:16.576]             `+` <- base::`+`
[17:02:16.576]             `<<-` <- base::`<<-`
[17:02:16.576]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.576]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.576]                   3L)]
[17:02:16.576]             }
[17:02:16.576]             function(cond) {
[17:02:16.576]                 is_error <- inherits(cond, "error")
[17:02:16.576]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.576]                   NULL)
[17:02:16.576]                 if (is_error) {
[17:02:16.576]                   sessionInformation <- function() {
[17:02:16.576]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.576]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.576]                       search = base::search(), system = base::Sys.info())
[17:02:16.576]                   }
[17:02:16.576]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.576]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.576]                     cond$call), session = sessionInformation(), 
[17:02:16.576]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.576]                   signalCondition(cond)
[17:02:16.576]                 }
[17:02:16.576]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.576]                 "immediateCondition"))) {
[17:02:16.576]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.576]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.576]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.576]                   if (TRUE && !signal) {
[17:02:16.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.576]                     {
[17:02:16.576]                       inherits <- base::inherits
[17:02:16.576]                       invokeRestart <- base::invokeRestart
[17:02:16.576]                       is.null <- base::is.null
[17:02:16.576]                       muffled <- FALSE
[17:02:16.576]                       if (inherits(cond, "message")) {
[17:02:16.576]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.576]                         if (muffled) 
[17:02:16.576]                           invokeRestart("muffleMessage")
[17:02:16.576]                       }
[17:02:16.576]                       else if (inherits(cond, "warning")) {
[17:02:16.576]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.576]                         if (muffled) 
[17:02:16.576]                           invokeRestart("muffleWarning")
[17:02:16.576]                       }
[17:02:16.576]                       else if (inherits(cond, "condition")) {
[17:02:16.576]                         if (!is.null(pattern)) {
[17:02:16.576]                           computeRestarts <- base::computeRestarts
[17:02:16.576]                           grepl <- base::grepl
[17:02:16.576]                           restarts <- computeRestarts(cond)
[17:02:16.576]                           for (restart in restarts) {
[17:02:16.576]                             name <- restart$name
[17:02:16.576]                             if (is.null(name)) 
[17:02:16.576]                               next
[17:02:16.576]                             if (!grepl(pattern, name)) 
[17:02:16.576]                               next
[17:02:16.576]                             invokeRestart(restart)
[17:02:16.576]                             muffled <- TRUE
[17:02:16.576]                             break
[17:02:16.576]                           }
[17:02:16.576]                         }
[17:02:16.576]                       }
[17:02:16.576]                       invisible(muffled)
[17:02:16.576]                     }
[17:02:16.576]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.576]                   }
[17:02:16.576]                 }
[17:02:16.576]                 else {
[17:02:16.576]                   if (TRUE) {
[17:02:16.576]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.576]                     {
[17:02:16.576]                       inherits <- base::inherits
[17:02:16.576]                       invokeRestart <- base::invokeRestart
[17:02:16.576]                       is.null <- base::is.null
[17:02:16.576]                       muffled <- FALSE
[17:02:16.576]                       if (inherits(cond, "message")) {
[17:02:16.576]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.576]                         if (muffled) 
[17:02:16.576]                           invokeRestart("muffleMessage")
[17:02:16.576]                       }
[17:02:16.576]                       else if (inherits(cond, "warning")) {
[17:02:16.576]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.576]                         if (muffled) 
[17:02:16.576]                           invokeRestart("muffleWarning")
[17:02:16.576]                       }
[17:02:16.576]                       else if (inherits(cond, "condition")) {
[17:02:16.576]                         if (!is.null(pattern)) {
[17:02:16.576]                           computeRestarts <- base::computeRestarts
[17:02:16.576]                           grepl <- base::grepl
[17:02:16.576]                           restarts <- computeRestarts(cond)
[17:02:16.576]                           for (restart in restarts) {
[17:02:16.576]                             name <- restart$name
[17:02:16.576]                             if (is.null(name)) 
[17:02:16.576]                               next
[17:02:16.576]                             if (!grepl(pattern, name)) 
[17:02:16.576]                               next
[17:02:16.576]                             invokeRestart(restart)
[17:02:16.576]                             muffled <- TRUE
[17:02:16.576]                             break
[17:02:16.576]                           }
[17:02:16.576]                         }
[17:02:16.576]                       }
[17:02:16.576]                       invisible(muffled)
[17:02:16.576]                     }
[17:02:16.576]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.576]                   }
[17:02:16.576]                 }
[17:02:16.576]             }
[17:02:16.576]         }))
[17:02:16.576]     }, error = function(ex) {
[17:02:16.576]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.576]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.576]                 ...future.rng), started = ...future.startTime, 
[17:02:16.576]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.576]             version = "1.8"), class = "FutureResult")
[17:02:16.576]     }, finally = {
[17:02:16.576]         if (!identical(...future.workdir, getwd())) 
[17:02:16.576]             setwd(...future.workdir)
[17:02:16.576]         {
[17:02:16.576]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.576]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.576]             }
[17:02:16.576]             base::options(...future.oldOptions)
[17:02:16.576]             if (.Platform$OS.type == "windows") {
[17:02:16.576]                 old_names <- names(...future.oldEnvVars)
[17:02:16.576]                 envs <- base::Sys.getenv()
[17:02:16.576]                 names <- names(envs)
[17:02:16.576]                 common <- intersect(names, old_names)
[17:02:16.576]                 added <- setdiff(names, old_names)
[17:02:16.576]                 removed <- setdiff(old_names, names)
[17:02:16.576]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.576]                   envs[common]]
[17:02:16.576]                 NAMES <- toupper(changed)
[17:02:16.576]                 args <- list()
[17:02:16.576]                 for (kk in seq_along(NAMES)) {
[17:02:16.576]                   name <- changed[[kk]]
[17:02:16.576]                   NAME <- NAMES[[kk]]
[17:02:16.576]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.576]                     next
[17:02:16.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.576]                 }
[17:02:16.576]                 NAMES <- toupper(added)
[17:02:16.576]                 for (kk in seq_along(NAMES)) {
[17:02:16.576]                   name <- added[[kk]]
[17:02:16.576]                   NAME <- NAMES[[kk]]
[17:02:16.576]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.576]                     next
[17:02:16.576]                   args[[name]] <- ""
[17:02:16.576]                 }
[17:02:16.576]                 NAMES <- toupper(removed)
[17:02:16.576]                 for (kk in seq_along(NAMES)) {
[17:02:16.576]                   name <- removed[[kk]]
[17:02:16.576]                   NAME <- NAMES[[kk]]
[17:02:16.576]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.576]                     next
[17:02:16.576]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.576]                 }
[17:02:16.576]                 if (length(args) > 0) 
[17:02:16.576]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.576]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.576]             }
[17:02:16.576]             else {
[17:02:16.576]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.576]             }
[17:02:16.576]             {
[17:02:16.576]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.576]                   0L) {
[17:02:16.576]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.576]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.576]                   base::options(opts)
[17:02:16.576]                 }
[17:02:16.576]                 {
[17:02:16.576]                   {
[17:02:16.576]                     NULL
[17:02:16.576]                     RNGkind("Mersenne-Twister")
[17:02:16.576]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:16.576]                       inherits = FALSE)
[17:02:16.576]                   }
[17:02:16.576]                   options(future.plan = NULL)
[17:02:16.576]                   if (is.na(NA_character_)) 
[17:02:16.576]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.576]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.576]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.576]                     .init = FALSE)
[17:02:16.576]                 }
[17:02:16.576]             }
[17:02:16.576]         }
[17:02:16.576]     })
[17:02:16.576]     if (TRUE) {
[17:02:16.576]         base::sink(type = "output", split = FALSE)
[17:02:16.576]         if (TRUE) {
[17:02:16.576]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.576]         }
[17:02:16.576]         else {
[17:02:16.576]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.576]         }
[17:02:16.576]         base::close(...future.stdout)
[17:02:16.576]         ...future.stdout <- NULL
[17:02:16.576]     }
[17:02:16.576]     ...future.result$conditions <- ...future.conditions
[17:02:16.576]     ...future.result$finished <- base::Sys.time()
[17:02:16.576]     ...future.result
[17:02:16.576] }
[17:02:16.577] plan(): Setting new future strategy stack:
[17:02:16.578] List of future strategies:
[17:02:16.578] 1. sequential:
[17:02:16.578]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.578]    - tweaked: FALSE
[17:02:16.578]    - call: NULL
[17:02:16.578] plan(): nbrOfWorkers() = 1
[17:02:16.579] plan(): Setting new future strategy stack:
[17:02:16.579] List of future strategies:
[17:02:16.579] 1. sequential:
[17:02:16.579]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.579]    - tweaked: FALSE
[17:02:16.579]    - call: plan(strategy)
[17:02:16.580] plan(): nbrOfWorkers() = 1
[17:02:16.580] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.582] getGlobalsAndPackages() ...
[17:02:16.582] Searching for globals...
[17:02:16.582] 
[17:02:16.583] Searching for globals ... DONE
[17:02:16.583] - globals: [0] <none>
[17:02:16.583] getGlobalsAndPackages() ... DONE
[17:02:16.583] run() for ‘Future’ ...
[17:02:16.583] - state: ‘created’
[17:02:16.584] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:16.584] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.584] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:16.584]   - Field: ‘label’
[17:02:16.584]   - Field: ‘local’
[17:02:16.584]   - Field: ‘owner’
[17:02:16.584]   - Field: ‘envir’
[17:02:16.585]   - Field: ‘packages’
[17:02:16.585]   - Field: ‘gc’
[17:02:16.585]   - Field: ‘conditions’
[17:02:16.585]   - Field: ‘expr’
[17:02:16.585]   - Field: ‘uuid’
[17:02:16.585]   - Field: ‘seed’
[17:02:16.585]   - Field: ‘version’
[17:02:16.585]   - Field: ‘result’
[17:02:16.585]   - Field: ‘asynchronous’
[17:02:16.585]   - Field: ‘calls’
[17:02:16.585]   - Field: ‘globals’
[17:02:16.586]   - Field: ‘stdout’
[17:02:16.586]   - Field: ‘earlySignal’
[17:02:16.586]   - Field: ‘lazy’
[17:02:16.586]   - Field: ‘state’
[17:02:16.586] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:16.586] - Launch lazy future ...
[17:02:16.586] Packages needed by the future expression (n = 0): <none>
[17:02:16.586] Packages needed by future strategies (n = 0): <none>
[17:02:16.587] {
[17:02:16.587]     {
[17:02:16.587]         {
[17:02:16.587]             ...future.startTime <- base::Sys.time()
[17:02:16.587]             {
[17:02:16.587]                 {
[17:02:16.587]                   {
[17:02:16.587]                     base::local({
[17:02:16.587]                       has_future <- base::requireNamespace("future", 
[17:02:16.587]                         quietly = TRUE)
[17:02:16.587]                       if (has_future) {
[17:02:16.587]                         ns <- base::getNamespace("future")
[17:02:16.587]                         version <- ns[[".package"]][["version"]]
[17:02:16.587]                         if (is.null(version)) 
[17:02:16.587]                           version <- utils::packageVersion("future")
[17:02:16.587]                       }
[17:02:16.587]                       else {
[17:02:16.587]                         version <- NULL
[17:02:16.587]                       }
[17:02:16.587]                       if (!has_future || version < "1.8.0") {
[17:02:16.587]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.587]                           "", base::R.version$version.string), 
[17:02:16.587]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:16.587]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.587]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.587]                             "release", "version")], collapse = " "), 
[17:02:16.587]                           hostname = base::Sys.info()[["nodename"]])
[17:02:16.587]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.587]                           info)
[17:02:16.587]                         info <- base::paste(info, collapse = "; ")
[17:02:16.587]                         if (!has_future) {
[17:02:16.587]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.587]                             info)
[17:02:16.587]                         }
[17:02:16.587]                         else {
[17:02:16.587]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.587]                             info, version)
[17:02:16.587]                         }
[17:02:16.587]                         base::stop(msg)
[17:02:16.587]                       }
[17:02:16.587]                     })
[17:02:16.587]                   }
[17:02:16.587]                   ...future.strategy.old <- future::plan("list")
[17:02:16.587]                   options(future.plan = NULL)
[17:02:16.587]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.587]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.587]                 }
[17:02:16.587]                 ...future.workdir <- getwd()
[17:02:16.587]             }
[17:02:16.587]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.587]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.587]         }
[17:02:16.587]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.587]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.587]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.587]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.587]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.587]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.587]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.587]             base::names(...future.oldOptions))
[17:02:16.587]     }
[17:02:16.587]     if (FALSE) {
[17:02:16.587]     }
[17:02:16.587]     else {
[17:02:16.587]         if (TRUE) {
[17:02:16.587]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.587]                 open = "w")
[17:02:16.587]         }
[17:02:16.587]         else {
[17:02:16.587]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.587]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.587]         }
[17:02:16.587]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.587]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.587]             base::sink(type = "output", split = FALSE)
[17:02:16.587]             base::close(...future.stdout)
[17:02:16.587]         }, add = TRUE)
[17:02:16.587]     }
[17:02:16.587]     ...future.frame <- base::sys.nframe()
[17:02:16.587]     ...future.conditions <- base::list()
[17:02:16.587]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.587]     if (FALSE) {
[17:02:16.587]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.587]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.587]     }
[17:02:16.587]     ...future.result <- base::tryCatch({
[17:02:16.587]         base::withCallingHandlers({
[17:02:16.587]             ...future.value <- base::withVisible(base::local(42))
[17:02:16.587]             future::FutureResult(value = ...future.value$value, 
[17:02:16.587]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.587]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.587]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.587]                     ...future.globalenv.names))
[17:02:16.587]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.587]         }, condition = base::local({
[17:02:16.587]             c <- base::c
[17:02:16.587]             inherits <- base::inherits
[17:02:16.587]             invokeRestart <- base::invokeRestart
[17:02:16.587]             length <- base::length
[17:02:16.587]             list <- base::list
[17:02:16.587]             seq.int <- base::seq.int
[17:02:16.587]             signalCondition <- base::signalCondition
[17:02:16.587]             sys.calls <- base::sys.calls
[17:02:16.587]             `[[` <- base::`[[`
[17:02:16.587]             `+` <- base::`+`
[17:02:16.587]             `<<-` <- base::`<<-`
[17:02:16.587]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.587]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.587]                   3L)]
[17:02:16.587]             }
[17:02:16.587]             function(cond) {
[17:02:16.587]                 is_error <- inherits(cond, "error")
[17:02:16.587]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.587]                   NULL)
[17:02:16.587]                 if (is_error) {
[17:02:16.587]                   sessionInformation <- function() {
[17:02:16.587]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.587]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.587]                       search = base::search(), system = base::Sys.info())
[17:02:16.587]                   }
[17:02:16.587]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.587]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.587]                     cond$call), session = sessionInformation(), 
[17:02:16.587]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.587]                   signalCondition(cond)
[17:02:16.587]                 }
[17:02:16.587]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.587]                 "immediateCondition"))) {
[17:02:16.587]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.587]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.587]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.587]                   if (TRUE && !signal) {
[17:02:16.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.587]                     {
[17:02:16.587]                       inherits <- base::inherits
[17:02:16.587]                       invokeRestart <- base::invokeRestart
[17:02:16.587]                       is.null <- base::is.null
[17:02:16.587]                       muffled <- FALSE
[17:02:16.587]                       if (inherits(cond, "message")) {
[17:02:16.587]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.587]                         if (muffled) 
[17:02:16.587]                           invokeRestart("muffleMessage")
[17:02:16.587]                       }
[17:02:16.587]                       else if (inherits(cond, "warning")) {
[17:02:16.587]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.587]                         if (muffled) 
[17:02:16.587]                           invokeRestart("muffleWarning")
[17:02:16.587]                       }
[17:02:16.587]                       else if (inherits(cond, "condition")) {
[17:02:16.587]                         if (!is.null(pattern)) {
[17:02:16.587]                           computeRestarts <- base::computeRestarts
[17:02:16.587]                           grepl <- base::grepl
[17:02:16.587]                           restarts <- computeRestarts(cond)
[17:02:16.587]                           for (restart in restarts) {
[17:02:16.587]                             name <- restart$name
[17:02:16.587]                             if (is.null(name)) 
[17:02:16.587]                               next
[17:02:16.587]                             if (!grepl(pattern, name)) 
[17:02:16.587]                               next
[17:02:16.587]                             invokeRestart(restart)
[17:02:16.587]                             muffled <- TRUE
[17:02:16.587]                             break
[17:02:16.587]                           }
[17:02:16.587]                         }
[17:02:16.587]                       }
[17:02:16.587]                       invisible(muffled)
[17:02:16.587]                     }
[17:02:16.587]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.587]                   }
[17:02:16.587]                 }
[17:02:16.587]                 else {
[17:02:16.587]                   if (TRUE) {
[17:02:16.587]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.587]                     {
[17:02:16.587]                       inherits <- base::inherits
[17:02:16.587]                       invokeRestart <- base::invokeRestart
[17:02:16.587]                       is.null <- base::is.null
[17:02:16.587]                       muffled <- FALSE
[17:02:16.587]                       if (inherits(cond, "message")) {
[17:02:16.587]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.587]                         if (muffled) 
[17:02:16.587]                           invokeRestart("muffleMessage")
[17:02:16.587]                       }
[17:02:16.587]                       else if (inherits(cond, "warning")) {
[17:02:16.587]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.587]                         if (muffled) 
[17:02:16.587]                           invokeRestart("muffleWarning")
[17:02:16.587]                       }
[17:02:16.587]                       else if (inherits(cond, "condition")) {
[17:02:16.587]                         if (!is.null(pattern)) {
[17:02:16.587]                           computeRestarts <- base::computeRestarts
[17:02:16.587]                           grepl <- base::grepl
[17:02:16.587]                           restarts <- computeRestarts(cond)
[17:02:16.587]                           for (restart in restarts) {
[17:02:16.587]                             name <- restart$name
[17:02:16.587]                             if (is.null(name)) 
[17:02:16.587]                               next
[17:02:16.587]                             if (!grepl(pattern, name)) 
[17:02:16.587]                               next
[17:02:16.587]                             invokeRestart(restart)
[17:02:16.587]                             muffled <- TRUE
[17:02:16.587]                             break
[17:02:16.587]                           }
[17:02:16.587]                         }
[17:02:16.587]                       }
[17:02:16.587]                       invisible(muffled)
[17:02:16.587]                     }
[17:02:16.587]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.587]                   }
[17:02:16.587]                 }
[17:02:16.587]             }
[17:02:16.587]         }))
[17:02:16.587]     }, error = function(ex) {
[17:02:16.587]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.587]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.587]                 ...future.rng), started = ...future.startTime, 
[17:02:16.587]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.587]             version = "1.8"), class = "FutureResult")
[17:02:16.587]     }, finally = {
[17:02:16.587]         if (!identical(...future.workdir, getwd())) 
[17:02:16.587]             setwd(...future.workdir)
[17:02:16.587]         {
[17:02:16.587]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.587]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.587]             }
[17:02:16.587]             base::options(...future.oldOptions)
[17:02:16.587]             if (.Platform$OS.type == "windows") {
[17:02:16.587]                 old_names <- names(...future.oldEnvVars)
[17:02:16.587]                 envs <- base::Sys.getenv()
[17:02:16.587]                 names <- names(envs)
[17:02:16.587]                 common <- intersect(names, old_names)
[17:02:16.587]                 added <- setdiff(names, old_names)
[17:02:16.587]                 removed <- setdiff(old_names, names)
[17:02:16.587]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.587]                   envs[common]]
[17:02:16.587]                 NAMES <- toupper(changed)
[17:02:16.587]                 args <- list()
[17:02:16.587]                 for (kk in seq_along(NAMES)) {
[17:02:16.587]                   name <- changed[[kk]]
[17:02:16.587]                   NAME <- NAMES[[kk]]
[17:02:16.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.587]                     next
[17:02:16.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.587]                 }
[17:02:16.587]                 NAMES <- toupper(added)
[17:02:16.587]                 for (kk in seq_along(NAMES)) {
[17:02:16.587]                   name <- added[[kk]]
[17:02:16.587]                   NAME <- NAMES[[kk]]
[17:02:16.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.587]                     next
[17:02:16.587]                   args[[name]] <- ""
[17:02:16.587]                 }
[17:02:16.587]                 NAMES <- toupper(removed)
[17:02:16.587]                 for (kk in seq_along(NAMES)) {
[17:02:16.587]                   name <- removed[[kk]]
[17:02:16.587]                   NAME <- NAMES[[kk]]
[17:02:16.587]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.587]                     next
[17:02:16.587]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.587]                 }
[17:02:16.587]                 if (length(args) > 0) 
[17:02:16.587]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.587]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.587]             }
[17:02:16.587]             else {
[17:02:16.587]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.587]             }
[17:02:16.587]             {
[17:02:16.587]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.587]                   0L) {
[17:02:16.587]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.587]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.587]                   base::options(opts)
[17:02:16.587]                 }
[17:02:16.587]                 {
[17:02:16.587]                   {
[17:02:16.587]                     NULL
[17:02:16.587]                     RNGkind("Mersenne-Twister")
[17:02:16.587]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:16.587]                       inherits = FALSE)
[17:02:16.587]                   }
[17:02:16.587]                   options(future.plan = NULL)
[17:02:16.587]                   if (is.na(NA_character_)) 
[17:02:16.587]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.587]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.587]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.587]                     .init = FALSE)
[17:02:16.587]                 }
[17:02:16.587]             }
[17:02:16.587]         }
[17:02:16.587]     })
[17:02:16.587]     if (TRUE) {
[17:02:16.587]         base::sink(type = "output", split = FALSE)
[17:02:16.587]         if (TRUE) {
[17:02:16.587]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.587]         }
[17:02:16.587]         else {
[17:02:16.587]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.587]         }
[17:02:16.587]         base::close(...future.stdout)
[17:02:16.587]         ...future.stdout <- NULL
[17:02:16.587]     }
[17:02:16.587]     ...future.result$conditions <- ...future.conditions
[17:02:16.587]     ...future.result$finished <- base::Sys.time()
[17:02:16.587]     ...future.result
[17:02:16.587] }
[17:02:16.588] plan(): Setting new future strategy stack:
[17:02:16.589] List of future strategies:
[17:02:16.589] 1. sequential:
[17:02:16.589]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.589]    - tweaked: FALSE
[17:02:16.589]    - call: NULL
[17:02:16.589] plan(): nbrOfWorkers() = 1
[17:02:16.590] plan(): Setting new future strategy stack:
[17:02:16.590] List of future strategies:
[17:02:16.590] 1. sequential:
[17:02:16.590]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.590]    - tweaked: FALSE
[17:02:16.590]    - call: plan(strategy)
[17:02:16.590] plan(): nbrOfWorkers() = 1
[17:02:16.590] SequentialFuture started (and completed)
[17:02:16.591] - Launch lazy future ... done
[17:02:16.591] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.592] getGlobalsAndPackages() ...
[17:02:16.592] Searching for globals...
[17:02:16.593] - globals found: [1] ‘{’
[17:02:16.594] Searching for globals ... DONE
[17:02:16.594] Resolving globals: FALSE
[17:02:16.594] 
[17:02:16.594] 
[17:02:16.594] getGlobalsAndPackages() ... DONE
[17:02:16.595] run() for ‘Future’ ...
[17:02:16.595] - state: ‘created’
[17:02:16.595] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:16.595] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.595] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:16.595]   - Field: ‘label’
[17:02:16.595]   - Field: ‘local’
[17:02:16.596]   - Field: ‘owner’
[17:02:16.596]   - Field: ‘envir’
[17:02:16.596]   - Field: ‘packages’
[17:02:16.596]   - Field: ‘gc’
[17:02:16.596]   - Field: ‘conditions’
[17:02:16.596]   - Field: ‘expr’
[17:02:16.596]   - Field: ‘uuid’
[17:02:16.596]   - Field: ‘seed’
[17:02:16.596]   - Field: ‘version’
[17:02:16.596]   - Field: ‘result’
[17:02:16.596]   - Field: ‘asynchronous’
[17:02:16.597]   - Field: ‘calls’
[17:02:16.597]   - Field: ‘globals’
[17:02:16.597]   - Field: ‘stdout’
[17:02:16.597]   - Field: ‘earlySignal’
[17:02:16.597]   - Field: ‘lazy’
[17:02:16.597]   - Field: ‘state’
[17:02:16.597] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:16.597] - Launch lazy future ...
[17:02:16.597] Packages needed by the future expression (n = 0): <none>
[17:02:16.597] Packages needed by future strategies (n = 0): <none>
[17:02:16.598] {
[17:02:16.598]     {
[17:02:16.598]         {
[17:02:16.598]             ...future.startTime <- base::Sys.time()
[17:02:16.598]             {
[17:02:16.598]                 {
[17:02:16.598]                   {
[17:02:16.598]                     base::local({
[17:02:16.598]                       has_future <- base::requireNamespace("future", 
[17:02:16.598]                         quietly = TRUE)
[17:02:16.598]                       if (has_future) {
[17:02:16.598]                         ns <- base::getNamespace("future")
[17:02:16.598]                         version <- ns[[".package"]][["version"]]
[17:02:16.598]                         if (is.null(version)) 
[17:02:16.598]                           version <- utils::packageVersion("future")
[17:02:16.598]                       }
[17:02:16.598]                       else {
[17:02:16.598]                         version <- NULL
[17:02:16.598]                       }
[17:02:16.598]                       if (!has_future || version < "1.8.0") {
[17:02:16.598]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.598]                           "", base::R.version$version.string), 
[17:02:16.598]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:16.598]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.598]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.598]                             "release", "version")], collapse = " "), 
[17:02:16.598]                           hostname = base::Sys.info()[["nodename"]])
[17:02:16.598]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.598]                           info)
[17:02:16.598]                         info <- base::paste(info, collapse = "; ")
[17:02:16.598]                         if (!has_future) {
[17:02:16.598]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.598]                             info)
[17:02:16.598]                         }
[17:02:16.598]                         else {
[17:02:16.598]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.598]                             info, version)
[17:02:16.598]                         }
[17:02:16.598]                         base::stop(msg)
[17:02:16.598]                       }
[17:02:16.598]                     })
[17:02:16.598]                   }
[17:02:16.598]                   ...future.strategy.old <- future::plan("list")
[17:02:16.598]                   options(future.plan = NULL)
[17:02:16.598]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.598]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.598]                 }
[17:02:16.598]                 ...future.workdir <- getwd()
[17:02:16.598]             }
[17:02:16.598]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.598]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.598]         }
[17:02:16.598]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.598]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.598]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.598]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.598]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.598]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.598]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.598]             base::names(...future.oldOptions))
[17:02:16.598]     }
[17:02:16.598]     if (FALSE) {
[17:02:16.598]     }
[17:02:16.598]     else {
[17:02:16.598]         if (TRUE) {
[17:02:16.598]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.598]                 open = "w")
[17:02:16.598]         }
[17:02:16.598]         else {
[17:02:16.598]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.598]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.598]         }
[17:02:16.598]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.598]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.598]             base::sink(type = "output", split = FALSE)
[17:02:16.598]             base::close(...future.stdout)
[17:02:16.598]         }, add = TRUE)
[17:02:16.598]     }
[17:02:16.598]     ...future.frame <- base::sys.nframe()
[17:02:16.598]     ...future.conditions <- base::list()
[17:02:16.598]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.598]     if (FALSE) {
[17:02:16.598]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.598]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.598]     }
[17:02:16.598]     ...future.result <- base::tryCatch({
[17:02:16.598]         base::withCallingHandlers({
[17:02:16.598]             ...future.value <- base::withVisible(base::local({
[17:02:16.598]                 42
[17:02:16.598]             }))
[17:02:16.598]             future::FutureResult(value = ...future.value$value, 
[17:02:16.598]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.598]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.598]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.598]                     ...future.globalenv.names))
[17:02:16.598]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.598]         }, condition = base::local({
[17:02:16.598]             c <- base::c
[17:02:16.598]             inherits <- base::inherits
[17:02:16.598]             invokeRestart <- base::invokeRestart
[17:02:16.598]             length <- base::length
[17:02:16.598]             list <- base::list
[17:02:16.598]             seq.int <- base::seq.int
[17:02:16.598]             signalCondition <- base::signalCondition
[17:02:16.598]             sys.calls <- base::sys.calls
[17:02:16.598]             `[[` <- base::`[[`
[17:02:16.598]             `+` <- base::`+`
[17:02:16.598]             `<<-` <- base::`<<-`
[17:02:16.598]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.598]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.598]                   3L)]
[17:02:16.598]             }
[17:02:16.598]             function(cond) {
[17:02:16.598]                 is_error <- inherits(cond, "error")
[17:02:16.598]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.598]                   NULL)
[17:02:16.598]                 if (is_error) {
[17:02:16.598]                   sessionInformation <- function() {
[17:02:16.598]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.598]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.598]                       search = base::search(), system = base::Sys.info())
[17:02:16.598]                   }
[17:02:16.598]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.598]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.598]                     cond$call), session = sessionInformation(), 
[17:02:16.598]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.598]                   signalCondition(cond)
[17:02:16.598]                 }
[17:02:16.598]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.598]                 "immediateCondition"))) {
[17:02:16.598]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.598]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.598]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.598]                   if (TRUE && !signal) {
[17:02:16.598]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.598]                     {
[17:02:16.598]                       inherits <- base::inherits
[17:02:16.598]                       invokeRestart <- base::invokeRestart
[17:02:16.598]                       is.null <- base::is.null
[17:02:16.598]                       muffled <- FALSE
[17:02:16.598]                       if (inherits(cond, "message")) {
[17:02:16.598]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.598]                         if (muffled) 
[17:02:16.598]                           invokeRestart("muffleMessage")
[17:02:16.598]                       }
[17:02:16.598]                       else if (inherits(cond, "warning")) {
[17:02:16.598]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.598]                         if (muffled) 
[17:02:16.598]                           invokeRestart("muffleWarning")
[17:02:16.598]                       }
[17:02:16.598]                       else if (inherits(cond, "condition")) {
[17:02:16.598]                         if (!is.null(pattern)) {
[17:02:16.598]                           computeRestarts <- base::computeRestarts
[17:02:16.598]                           grepl <- base::grepl
[17:02:16.598]                           restarts <- computeRestarts(cond)
[17:02:16.598]                           for (restart in restarts) {
[17:02:16.598]                             name <- restart$name
[17:02:16.598]                             if (is.null(name)) 
[17:02:16.598]                               next
[17:02:16.598]                             if (!grepl(pattern, name)) 
[17:02:16.598]                               next
[17:02:16.598]                             invokeRestart(restart)
[17:02:16.598]                             muffled <- TRUE
[17:02:16.598]                             break
[17:02:16.598]                           }
[17:02:16.598]                         }
[17:02:16.598]                       }
[17:02:16.598]                       invisible(muffled)
[17:02:16.598]                     }
[17:02:16.598]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.598]                   }
[17:02:16.598]                 }
[17:02:16.598]                 else {
[17:02:16.598]                   if (TRUE) {
[17:02:16.598]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.598]                     {
[17:02:16.598]                       inherits <- base::inherits
[17:02:16.598]                       invokeRestart <- base::invokeRestart
[17:02:16.598]                       is.null <- base::is.null
[17:02:16.598]                       muffled <- FALSE
[17:02:16.598]                       if (inherits(cond, "message")) {
[17:02:16.598]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.598]                         if (muffled) 
[17:02:16.598]                           invokeRestart("muffleMessage")
[17:02:16.598]                       }
[17:02:16.598]                       else if (inherits(cond, "warning")) {
[17:02:16.598]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.598]                         if (muffled) 
[17:02:16.598]                           invokeRestart("muffleWarning")
[17:02:16.598]                       }
[17:02:16.598]                       else if (inherits(cond, "condition")) {
[17:02:16.598]                         if (!is.null(pattern)) {
[17:02:16.598]                           computeRestarts <- base::computeRestarts
[17:02:16.598]                           grepl <- base::grepl
[17:02:16.598]                           restarts <- computeRestarts(cond)
[17:02:16.598]                           for (restart in restarts) {
[17:02:16.598]                             name <- restart$name
[17:02:16.598]                             if (is.null(name)) 
[17:02:16.598]                               next
[17:02:16.598]                             if (!grepl(pattern, name)) 
[17:02:16.598]                               next
[17:02:16.598]                             invokeRestart(restart)
[17:02:16.598]                             muffled <- TRUE
[17:02:16.598]                             break
[17:02:16.598]                           }
[17:02:16.598]                         }
[17:02:16.598]                       }
[17:02:16.598]                       invisible(muffled)
[17:02:16.598]                     }
[17:02:16.598]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.598]                   }
[17:02:16.598]                 }
[17:02:16.598]             }
[17:02:16.598]         }))
[17:02:16.598]     }, error = function(ex) {
[17:02:16.598]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.598]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.598]                 ...future.rng), started = ...future.startTime, 
[17:02:16.598]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.598]             version = "1.8"), class = "FutureResult")
[17:02:16.598]     }, finally = {
[17:02:16.598]         if (!identical(...future.workdir, getwd())) 
[17:02:16.598]             setwd(...future.workdir)
[17:02:16.598]         {
[17:02:16.598]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.598]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.598]             }
[17:02:16.598]             base::options(...future.oldOptions)
[17:02:16.598]             if (.Platform$OS.type == "windows") {
[17:02:16.598]                 old_names <- names(...future.oldEnvVars)
[17:02:16.598]                 envs <- base::Sys.getenv()
[17:02:16.598]                 names <- names(envs)
[17:02:16.598]                 common <- intersect(names, old_names)
[17:02:16.598]                 added <- setdiff(names, old_names)
[17:02:16.598]                 removed <- setdiff(old_names, names)
[17:02:16.598]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.598]                   envs[common]]
[17:02:16.598]                 NAMES <- toupper(changed)
[17:02:16.598]                 args <- list()
[17:02:16.598]                 for (kk in seq_along(NAMES)) {
[17:02:16.598]                   name <- changed[[kk]]
[17:02:16.598]                   NAME <- NAMES[[kk]]
[17:02:16.598]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.598]                     next
[17:02:16.598]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.598]                 }
[17:02:16.598]                 NAMES <- toupper(added)
[17:02:16.598]                 for (kk in seq_along(NAMES)) {
[17:02:16.598]                   name <- added[[kk]]
[17:02:16.598]                   NAME <- NAMES[[kk]]
[17:02:16.598]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.598]                     next
[17:02:16.598]                   args[[name]] <- ""
[17:02:16.598]                 }
[17:02:16.598]                 NAMES <- toupper(removed)
[17:02:16.598]                 for (kk in seq_along(NAMES)) {
[17:02:16.598]                   name <- removed[[kk]]
[17:02:16.598]                   NAME <- NAMES[[kk]]
[17:02:16.598]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.598]                     next
[17:02:16.598]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.598]                 }
[17:02:16.598]                 if (length(args) > 0) 
[17:02:16.598]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.598]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.598]             }
[17:02:16.598]             else {
[17:02:16.598]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.598]             }
[17:02:16.598]             {
[17:02:16.598]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.598]                   0L) {
[17:02:16.598]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.598]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.598]                   base::options(opts)
[17:02:16.598]                 }
[17:02:16.598]                 {
[17:02:16.598]                   {
[17:02:16.598]                     NULL
[17:02:16.598]                     RNGkind("Mersenne-Twister")
[17:02:16.598]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:16.598]                       inherits = FALSE)
[17:02:16.598]                   }
[17:02:16.598]                   options(future.plan = NULL)
[17:02:16.598]                   if (is.na(NA_character_)) 
[17:02:16.598]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.598]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.598]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.598]                     .init = FALSE)
[17:02:16.598]                 }
[17:02:16.598]             }
[17:02:16.598]         }
[17:02:16.598]     })
[17:02:16.598]     if (TRUE) {
[17:02:16.598]         base::sink(type = "output", split = FALSE)
[17:02:16.598]         if (TRUE) {
[17:02:16.598]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.598]         }
[17:02:16.598]         else {
[17:02:16.598]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.598]         }
[17:02:16.598]         base::close(...future.stdout)
[17:02:16.598]         ...future.stdout <- NULL
[17:02:16.598]     }
[17:02:16.598]     ...future.result$conditions <- ...future.conditions
[17:02:16.598]     ...future.result$finished <- base::Sys.time()
[17:02:16.598]     ...future.result
[17:02:16.598] }
[17:02:16.600] plan(): Setting new future strategy stack:
[17:02:16.600] List of future strategies:
[17:02:16.600] 1. sequential:
[17:02:16.600]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.600]    - tweaked: FALSE
[17:02:16.600]    - call: NULL
[17:02:16.600] plan(): nbrOfWorkers() = 1
[17:02:16.601] plan(): Setting new future strategy stack:
[17:02:16.601] List of future strategies:
[17:02:16.601] 1. sequential:
[17:02:16.601]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.601]    - tweaked: FALSE
[17:02:16.601]    - call: plan(strategy)
[17:02:16.601] plan(): nbrOfWorkers() = 1
[17:02:16.602] SequentialFuture started (and completed)
[17:02:16.602] - Launch lazy future ... done
[17:02:16.602] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.602] getGlobalsAndPackages() ...
[17:02:16.603] Searching for globals...
[17:02:16.603] 
[17:02:16.603] Searching for globals ... DONE
[17:02:16.603] - globals: [0] <none>
[17:02:16.603] getGlobalsAndPackages() ... DONE
[17:02:16.603] Packages needed by the future expression (n = 0): <none>
[17:02:16.604] Packages needed by future strategies (n = 0): <none>
[17:02:16.604] {
[17:02:16.604]     {
[17:02:16.604]         {
[17:02:16.604]             ...future.startTime <- base::Sys.time()
[17:02:16.604]             {
[17:02:16.604]                 {
[17:02:16.604]                   {
[17:02:16.604]                     base::local({
[17:02:16.604]                       has_future <- base::requireNamespace("future", 
[17:02:16.604]                         quietly = TRUE)
[17:02:16.604]                       if (has_future) {
[17:02:16.604]                         ns <- base::getNamespace("future")
[17:02:16.604]                         version <- ns[[".package"]][["version"]]
[17:02:16.604]                         if (is.null(version)) 
[17:02:16.604]                           version <- utils::packageVersion("future")
[17:02:16.604]                       }
[17:02:16.604]                       else {
[17:02:16.604]                         version <- NULL
[17:02:16.604]                       }
[17:02:16.604]                       if (!has_future || version < "1.8.0") {
[17:02:16.604]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.604]                           "", base::R.version$version.string), 
[17:02:16.604]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:16.604]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.604]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.604]                             "release", "version")], collapse = " "), 
[17:02:16.604]                           hostname = base::Sys.info()[["nodename"]])
[17:02:16.604]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.604]                           info)
[17:02:16.604]                         info <- base::paste(info, collapse = "; ")
[17:02:16.604]                         if (!has_future) {
[17:02:16.604]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.604]                             info)
[17:02:16.604]                         }
[17:02:16.604]                         else {
[17:02:16.604]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.604]                             info, version)
[17:02:16.604]                         }
[17:02:16.604]                         base::stop(msg)
[17:02:16.604]                       }
[17:02:16.604]                     })
[17:02:16.604]                   }
[17:02:16.604]                   ...future.strategy.old <- future::plan("list")
[17:02:16.604]                   options(future.plan = NULL)
[17:02:16.604]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.604]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.604]                 }
[17:02:16.604]                 ...future.workdir <- getwd()
[17:02:16.604]             }
[17:02:16.604]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.604]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.604]         }
[17:02:16.604]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.604]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.604]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.604]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.604]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.604]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.604]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.604]             base::names(...future.oldOptions))
[17:02:16.604]     }
[17:02:16.604]     if (FALSE) {
[17:02:16.604]     }
[17:02:16.604]     else {
[17:02:16.604]         if (TRUE) {
[17:02:16.604]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.604]                 open = "w")
[17:02:16.604]         }
[17:02:16.604]         else {
[17:02:16.604]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.604]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.604]         }
[17:02:16.604]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.604]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.604]             base::sink(type = "output", split = FALSE)
[17:02:16.604]             base::close(...future.stdout)
[17:02:16.604]         }, add = TRUE)
[17:02:16.604]     }
[17:02:16.604]     ...future.frame <- base::sys.nframe()
[17:02:16.604]     ...future.conditions <- base::list()
[17:02:16.604]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.604]     if (FALSE) {
[17:02:16.604]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.604]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.604]     }
[17:02:16.604]     ...future.result <- base::tryCatch({
[17:02:16.604]         base::withCallingHandlers({
[17:02:16.604]             ...future.value <- base::withVisible(base::local(42))
[17:02:16.604]             future::FutureResult(value = ...future.value$value, 
[17:02:16.604]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.604]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.604]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.604]                     ...future.globalenv.names))
[17:02:16.604]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.604]         }, condition = base::local({
[17:02:16.604]             c <- base::c
[17:02:16.604]             inherits <- base::inherits
[17:02:16.604]             invokeRestart <- base::invokeRestart
[17:02:16.604]             length <- base::length
[17:02:16.604]             list <- base::list
[17:02:16.604]             seq.int <- base::seq.int
[17:02:16.604]             signalCondition <- base::signalCondition
[17:02:16.604]             sys.calls <- base::sys.calls
[17:02:16.604]             `[[` <- base::`[[`
[17:02:16.604]             `+` <- base::`+`
[17:02:16.604]             `<<-` <- base::`<<-`
[17:02:16.604]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.604]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.604]                   3L)]
[17:02:16.604]             }
[17:02:16.604]             function(cond) {
[17:02:16.604]                 is_error <- inherits(cond, "error")
[17:02:16.604]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.604]                   NULL)
[17:02:16.604]                 if (is_error) {
[17:02:16.604]                   sessionInformation <- function() {
[17:02:16.604]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.604]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.604]                       search = base::search(), system = base::Sys.info())
[17:02:16.604]                   }
[17:02:16.604]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.604]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.604]                     cond$call), session = sessionInformation(), 
[17:02:16.604]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.604]                   signalCondition(cond)
[17:02:16.604]                 }
[17:02:16.604]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.604]                 "immediateCondition"))) {
[17:02:16.604]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.604]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.604]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.604]                   if (TRUE && !signal) {
[17:02:16.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.604]                     {
[17:02:16.604]                       inherits <- base::inherits
[17:02:16.604]                       invokeRestart <- base::invokeRestart
[17:02:16.604]                       is.null <- base::is.null
[17:02:16.604]                       muffled <- FALSE
[17:02:16.604]                       if (inherits(cond, "message")) {
[17:02:16.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.604]                         if (muffled) 
[17:02:16.604]                           invokeRestart("muffleMessage")
[17:02:16.604]                       }
[17:02:16.604]                       else if (inherits(cond, "warning")) {
[17:02:16.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.604]                         if (muffled) 
[17:02:16.604]                           invokeRestart("muffleWarning")
[17:02:16.604]                       }
[17:02:16.604]                       else if (inherits(cond, "condition")) {
[17:02:16.604]                         if (!is.null(pattern)) {
[17:02:16.604]                           computeRestarts <- base::computeRestarts
[17:02:16.604]                           grepl <- base::grepl
[17:02:16.604]                           restarts <- computeRestarts(cond)
[17:02:16.604]                           for (restart in restarts) {
[17:02:16.604]                             name <- restart$name
[17:02:16.604]                             if (is.null(name)) 
[17:02:16.604]                               next
[17:02:16.604]                             if (!grepl(pattern, name)) 
[17:02:16.604]                               next
[17:02:16.604]                             invokeRestart(restart)
[17:02:16.604]                             muffled <- TRUE
[17:02:16.604]                             break
[17:02:16.604]                           }
[17:02:16.604]                         }
[17:02:16.604]                       }
[17:02:16.604]                       invisible(muffled)
[17:02:16.604]                     }
[17:02:16.604]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.604]                   }
[17:02:16.604]                 }
[17:02:16.604]                 else {
[17:02:16.604]                   if (TRUE) {
[17:02:16.604]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.604]                     {
[17:02:16.604]                       inherits <- base::inherits
[17:02:16.604]                       invokeRestart <- base::invokeRestart
[17:02:16.604]                       is.null <- base::is.null
[17:02:16.604]                       muffled <- FALSE
[17:02:16.604]                       if (inherits(cond, "message")) {
[17:02:16.604]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.604]                         if (muffled) 
[17:02:16.604]                           invokeRestart("muffleMessage")
[17:02:16.604]                       }
[17:02:16.604]                       else if (inherits(cond, "warning")) {
[17:02:16.604]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.604]                         if (muffled) 
[17:02:16.604]                           invokeRestart("muffleWarning")
[17:02:16.604]                       }
[17:02:16.604]                       else if (inherits(cond, "condition")) {
[17:02:16.604]                         if (!is.null(pattern)) {
[17:02:16.604]                           computeRestarts <- base::computeRestarts
[17:02:16.604]                           grepl <- base::grepl
[17:02:16.604]                           restarts <- computeRestarts(cond)
[17:02:16.604]                           for (restart in restarts) {
[17:02:16.604]                             name <- restart$name
[17:02:16.604]                             if (is.null(name)) 
[17:02:16.604]                               next
[17:02:16.604]                             if (!grepl(pattern, name)) 
[17:02:16.604]                               next
[17:02:16.604]                             invokeRestart(restart)
[17:02:16.604]                             muffled <- TRUE
[17:02:16.604]                             break
[17:02:16.604]                           }
[17:02:16.604]                         }
[17:02:16.604]                       }
[17:02:16.604]                       invisible(muffled)
[17:02:16.604]                     }
[17:02:16.604]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.604]                   }
[17:02:16.604]                 }
[17:02:16.604]             }
[17:02:16.604]         }))
[17:02:16.604]     }, error = function(ex) {
[17:02:16.604]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.604]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.604]                 ...future.rng), started = ...future.startTime, 
[17:02:16.604]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.604]             version = "1.8"), class = "FutureResult")
[17:02:16.604]     }, finally = {
[17:02:16.604]         if (!identical(...future.workdir, getwd())) 
[17:02:16.604]             setwd(...future.workdir)
[17:02:16.604]         {
[17:02:16.604]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.604]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.604]             }
[17:02:16.604]             base::options(...future.oldOptions)
[17:02:16.604]             if (.Platform$OS.type == "windows") {
[17:02:16.604]                 old_names <- names(...future.oldEnvVars)
[17:02:16.604]                 envs <- base::Sys.getenv()
[17:02:16.604]                 names <- names(envs)
[17:02:16.604]                 common <- intersect(names, old_names)
[17:02:16.604]                 added <- setdiff(names, old_names)
[17:02:16.604]                 removed <- setdiff(old_names, names)
[17:02:16.604]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.604]                   envs[common]]
[17:02:16.604]                 NAMES <- toupper(changed)
[17:02:16.604]                 args <- list()
[17:02:16.604]                 for (kk in seq_along(NAMES)) {
[17:02:16.604]                   name <- changed[[kk]]
[17:02:16.604]                   NAME <- NAMES[[kk]]
[17:02:16.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.604]                     next
[17:02:16.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.604]                 }
[17:02:16.604]                 NAMES <- toupper(added)
[17:02:16.604]                 for (kk in seq_along(NAMES)) {
[17:02:16.604]                   name <- added[[kk]]
[17:02:16.604]                   NAME <- NAMES[[kk]]
[17:02:16.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.604]                     next
[17:02:16.604]                   args[[name]] <- ""
[17:02:16.604]                 }
[17:02:16.604]                 NAMES <- toupper(removed)
[17:02:16.604]                 for (kk in seq_along(NAMES)) {
[17:02:16.604]                   name <- removed[[kk]]
[17:02:16.604]                   NAME <- NAMES[[kk]]
[17:02:16.604]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.604]                     next
[17:02:16.604]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.604]                 }
[17:02:16.604]                 if (length(args) > 0) 
[17:02:16.604]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.604]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.604]             }
[17:02:16.604]             else {
[17:02:16.604]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.604]             }
[17:02:16.604]             {
[17:02:16.604]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.604]                   0L) {
[17:02:16.604]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.604]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.604]                   base::options(opts)
[17:02:16.604]                 }
[17:02:16.604]                 {
[17:02:16.604]                   {
[17:02:16.604]                     NULL
[17:02:16.604]                     RNGkind("Mersenne-Twister")
[17:02:16.604]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:16.604]                       inherits = FALSE)
[17:02:16.604]                   }
[17:02:16.604]                   options(future.plan = NULL)
[17:02:16.604]                   if (is.na(NA_character_)) 
[17:02:16.604]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.604]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.604]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.604]                     .init = FALSE)
[17:02:16.604]                 }
[17:02:16.604]             }
[17:02:16.604]         }
[17:02:16.604]     })
[17:02:16.604]     if (TRUE) {
[17:02:16.604]         base::sink(type = "output", split = FALSE)
[17:02:16.604]         if (TRUE) {
[17:02:16.604]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.604]         }
[17:02:16.604]         else {
[17:02:16.604]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.604]         }
[17:02:16.604]         base::close(...future.stdout)
[17:02:16.604]         ...future.stdout <- NULL
[17:02:16.604]     }
[17:02:16.604]     ...future.result$conditions <- ...future.conditions
[17:02:16.604]     ...future.result$finished <- base::Sys.time()
[17:02:16.604]     ...future.result
[17:02:16.604] }
[17:02:16.606] plan(): Setting new future strategy stack:
[17:02:16.606] List of future strategies:
[17:02:16.606] 1. sequential:
[17:02:16.606]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.606]    - tweaked: FALSE
[17:02:16.606]    - call: NULL
[17:02:16.606] plan(): nbrOfWorkers() = 1
[17:02:16.607] plan(): Setting new future strategy stack:
[17:02:16.607] List of future strategies:
[17:02:16.607] 1. sequential:
[17:02:16.607]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.607]    - tweaked: FALSE
[17:02:16.607]    - call: plan(strategy)
[17:02:16.607] plan(): nbrOfWorkers() = 1
[17:02:16.608] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.608] getGlobalsAndPackages() ...
[17:02:16.608] Searching for globals...
[17:02:16.609] 
[17:02:16.609] Searching for globals ... DONE
[17:02:16.609] - globals: [0] <none>
[17:02:16.609] getGlobalsAndPackages() ... DONE
[17:02:16.609] run() for ‘Future’ ...
[17:02:16.609] - state: ‘created’
[17:02:16.609] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:16.609] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.610] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:16.610]   - Field: ‘label’
[17:02:16.610]   - Field: ‘local’
[17:02:16.610]   - Field: ‘owner’
[17:02:16.610]   - Field: ‘envir’
[17:02:16.610]   - Field: ‘packages’
[17:02:16.610]   - Field: ‘gc’
[17:02:16.610]   - Field: ‘conditions’
[17:02:16.610]   - Field: ‘expr’
[17:02:16.610]   - Field: ‘uuid’
[17:02:16.611]   - Field: ‘seed’
[17:02:16.611]   - Field: ‘version’
[17:02:16.611]   - Field: ‘result’
[17:02:16.611]   - Field: ‘asynchronous’
[17:02:16.611]   - Field: ‘calls’
[17:02:16.611]   - Field: ‘globals’
[17:02:16.611]   - Field: ‘stdout’
[17:02:16.611]   - Field: ‘earlySignal’
[17:02:16.611]   - Field: ‘lazy’
[17:02:16.611]   - Field: ‘state’
[17:02:16.611] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:16.612] - Launch lazy future ...
[17:02:16.612] Packages needed by the future expression (n = 0): <none>
[17:02:16.612] Packages needed by future strategies (n = 0): <none>
[17:02:16.612] {
[17:02:16.612]     {
[17:02:16.612]         {
[17:02:16.612]             ...future.startTime <- base::Sys.time()
[17:02:16.612]             {
[17:02:16.612]                 {
[17:02:16.612]                   {
[17:02:16.612]                     base::local({
[17:02:16.612]                       has_future <- base::requireNamespace("future", 
[17:02:16.612]                         quietly = TRUE)
[17:02:16.612]                       if (has_future) {
[17:02:16.612]                         ns <- base::getNamespace("future")
[17:02:16.612]                         version <- ns[[".package"]][["version"]]
[17:02:16.612]                         if (is.null(version)) 
[17:02:16.612]                           version <- utils::packageVersion("future")
[17:02:16.612]                       }
[17:02:16.612]                       else {
[17:02:16.612]                         version <- NULL
[17:02:16.612]                       }
[17:02:16.612]                       if (!has_future || version < "1.8.0") {
[17:02:16.612]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.612]                           "", base::R.version$version.string), 
[17:02:16.612]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:16.612]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.612]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.612]                             "release", "version")], collapse = " "), 
[17:02:16.612]                           hostname = base::Sys.info()[["nodename"]])
[17:02:16.612]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.612]                           info)
[17:02:16.612]                         info <- base::paste(info, collapse = "; ")
[17:02:16.612]                         if (!has_future) {
[17:02:16.612]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.612]                             info)
[17:02:16.612]                         }
[17:02:16.612]                         else {
[17:02:16.612]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.612]                             info, version)
[17:02:16.612]                         }
[17:02:16.612]                         base::stop(msg)
[17:02:16.612]                       }
[17:02:16.612]                     })
[17:02:16.612]                   }
[17:02:16.612]                   ...future.strategy.old <- future::plan("list")
[17:02:16.612]                   options(future.plan = NULL)
[17:02:16.612]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.612]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.612]                 }
[17:02:16.612]                 ...future.workdir <- getwd()
[17:02:16.612]             }
[17:02:16.612]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.612]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.612]         }
[17:02:16.612]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.612]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.612]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.612]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.612]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.612]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.612]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.612]             base::names(...future.oldOptions))
[17:02:16.612]     }
[17:02:16.612]     if (FALSE) {
[17:02:16.612]     }
[17:02:16.612]     else {
[17:02:16.612]         if (TRUE) {
[17:02:16.612]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.612]                 open = "w")
[17:02:16.612]         }
[17:02:16.612]         else {
[17:02:16.612]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.612]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.612]         }
[17:02:16.612]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.612]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.612]             base::sink(type = "output", split = FALSE)
[17:02:16.612]             base::close(...future.stdout)
[17:02:16.612]         }, add = TRUE)
[17:02:16.612]     }
[17:02:16.612]     ...future.frame <- base::sys.nframe()
[17:02:16.612]     ...future.conditions <- base::list()
[17:02:16.612]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.612]     if (FALSE) {
[17:02:16.612]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.612]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.612]     }
[17:02:16.612]     ...future.result <- base::tryCatch({
[17:02:16.612]         base::withCallingHandlers({
[17:02:16.612]             ...future.value <- base::withVisible(base::local(42))
[17:02:16.612]             future::FutureResult(value = ...future.value$value, 
[17:02:16.612]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.612]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.612]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.612]                     ...future.globalenv.names))
[17:02:16.612]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.612]         }, condition = base::local({
[17:02:16.612]             c <- base::c
[17:02:16.612]             inherits <- base::inherits
[17:02:16.612]             invokeRestart <- base::invokeRestart
[17:02:16.612]             length <- base::length
[17:02:16.612]             list <- base::list
[17:02:16.612]             seq.int <- base::seq.int
[17:02:16.612]             signalCondition <- base::signalCondition
[17:02:16.612]             sys.calls <- base::sys.calls
[17:02:16.612]             `[[` <- base::`[[`
[17:02:16.612]             `+` <- base::`+`
[17:02:16.612]             `<<-` <- base::`<<-`
[17:02:16.612]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.612]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.612]                   3L)]
[17:02:16.612]             }
[17:02:16.612]             function(cond) {
[17:02:16.612]                 is_error <- inherits(cond, "error")
[17:02:16.612]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.612]                   NULL)
[17:02:16.612]                 if (is_error) {
[17:02:16.612]                   sessionInformation <- function() {
[17:02:16.612]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.612]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.612]                       search = base::search(), system = base::Sys.info())
[17:02:16.612]                   }
[17:02:16.612]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.612]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.612]                     cond$call), session = sessionInformation(), 
[17:02:16.612]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.612]                   signalCondition(cond)
[17:02:16.612]                 }
[17:02:16.612]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.612]                 "immediateCondition"))) {
[17:02:16.612]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.612]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.612]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.612]                   if (TRUE && !signal) {
[17:02:16.612]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.612]                     {
[17:02:16.612]                       inherits <- base::inherits
[17:02:16.612]                       invokeRestart <- base::invokeRestart
[17:02:16.612]                       is.null <- base::is.null
[17:02:16.612]                       muffled <- FALSE
[17:02:16.612]                       if (inherits(cond, "message")) {
[17:02:16.612]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.612]                         if (muffled) 
[17:02:16.612]                           invokeRestart("muffleMessage")
[17:02:16.612]                       }
[17:02:16.612]                       else if (inherits(cond, "warning")) {
[17:02:16.612]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.612]                         if (muffled) 
[17:02:16.612]                           invokeRestart("muffleWarning")
[17:02:16.612]                       }
[17:02:16.612]                       else if (inherits(cond, "condition")) {
[17:02:16.612]                         if (!is.null(pattern)) {
[17:02:16.612]                           computeRestarts <- base::computeRestarts
[17:02:16.612]                           grepl <- base::grepl
[17:02:16.612]                           restarts <- computeRestarts(cond)
[17:02:16.612]                           for (restart in restarts) {
[17:02:16.612]                             name <- restart$name
[17:02:16.612]                             if (is.null(name)) 
[17:02:16.612]                               next
[17:02:16.612]                             if (!grepl(pattern, name)) 
[17:02:16.612]                               next
[17:02:16.612]                             invokeRestart(restart)
[17:02:16.612]                             muffled <- TRUE
[17:02:16.612]                             break
[17:02:16.612]                           }
[17:02:16.612]                         }
[17:02:16.612]                       }
[17:02:16.612]                       invisible(muffled)
[17:02:16.612]                     }
[17:02:16.612]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.612]                   }
[17:02:16.612]                 }
[17:02:16.612]                 else {
[17:02:16.612]                   if (TRUE) {
[17:02:16.612]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.612]                     {
[17:02:16.612]                       inherits <- base::inherits
[17:02:16.612]                       invokeRestart <- base::invokeRestart
[17:02:16.612]                       is.null <- base::is.null
[17:02:16.612]                       muffled <- FALSE
[17:02:16.612]                       if (inherits(cond, "message")) {
[17:02:16.612]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.612]                         if (muffled) 
[17:02:16.612]                           invokeRestart("muffleMessage")
[17:02:16.612]                       }
[17:02:16.612]                       else if (inherits(cond, "warning")) {
[17:02:16.612]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.612]                         if (muffled) 
[17:02:16.612]                           invokeRestart("muffleWarning")
[17:02:16.612]                       }
[17:02:16.612]                       else if (inherits(cond, "condition")) {
[17:02:16.612]                         if (!is.null(pattern)) {
[17:02:16.612]                           computeRestarts <- base::computeRestarts
[17:02:16.612]                           grepl <- base::grepl
[17:02:16.612]                           restarts <- computeRestarts(cond)
[17:02:16.612]                           for (restart in restarts) {
[17:02:16.612]                             name <- restart$name
[17:02:16.612]                             if (is.null(name)) 
[17:02:16.612]                               next
[17:02:16.612]                             if (!grepl(pattern, name)) 
[17:02:16.612]                               next
[17:02:16.612]                             invokeRestart(restart)
[17:02:16.612]                             muffled <- TRUE
[17:02:16.612]                             break
[17:02:16.612]                           }
[17:02:16.612]                         }
[17:02:16.612]                       }
[17:02:16.612]                       invisible(muffled)
[17:02:16.612]                     }
[17:02:16.612]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.612]                   }
[17:02:16.612]                 }
[17:02:16.612]             }
[17:02:16.612]         }))
[17:02:16.612]     }, error = function(ex) {
[17:02:16.612]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.612]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.612]                 ...future.rng), started = ...future.startTime, 
[17:02:16.612]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.612]             version = "1.8"), class = "FutureResult")
[17:02:16.612]     }, finally = {
[17:02:16.612]         if (!identical(...future.workdir, getwd())) 
[17:02:16.612]             setwd(...future.workdir)
[17:02:16.612]         {
[17:02:16.612]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.612]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.612]             }
[17:02:16.612]             base::options(...future.oldOptions)
[17:02:16.612]             if (.Platform$OS.type == "windows") {
[17:02:16.612]                 old_names <- names(...future.oldEnvVars)
[17:02:16.612]                 envs <- base::Sys.getenv()
[17:02:16.612]                 names <- names(envs)
[17:02:16.612]                 common <- intersect(names, old_names)
[17:02:16.612]                 added <- setdiff(names, old_names)
[17:02:16.612]                 removed <- setdiff(old_names, names)
[17:02:16.612]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.612]                   envs[common]]
[17:02:16.612]                 NAMES <- toupper(changed)
[17:02:16.612]                 args <- list()
[17:02:16.612]                 for (kk in seq_along(NAMES)) {
[17:02:16.612]                   name <- changed[[kk]]
[17:02:16.612]                   NAME <- NAMES[[kk]]
[17:02:16.612]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.612]                     next
[17:02:16.612]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.612]                 }
[17:02:16.612]                 NAMES <- toupper(added)
[17:02:16.612]                 for (kk in seq_along(NAMES)) {
[17:02:16.612]                   name <- added[[kk]]
[17:02:16.612]                   NAME <- NAMES[[kk]]
[17:02:16.612]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.612]                     next
[17:02:16.612]                   args[[name]] <- ""
[17:02:16.612]                 }
[17:02:16.612]                 NAMES <- toupper(removed)
[17:02:16.612]                 for (kk in seq_along(NAMES)) {
[17:02:16.612]                   name <- removed[[kk]]
[17:02:16.612]                   NAME <- NAMES[[kk]]
[17:02:16.612]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.612]                     next
[17:02:16.612]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.612]                 }
[17:02:16.612]                 if (length(args) > 0) 
[17:02:16.612]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.612]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.612]             }
[17:02:16.612]             else {
[17:02:16.612]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.612]             }
[17:02:16.612]             {
[17:02:16.612]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.612]                   0L) {
[17:02:16.612]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.612]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.612]                   base::options(opts)
[17:02:16.612]                 }
[17:02:16.612]                 {
[17:02:16.612]                   {
[17:02:16.612]                     NULL
[17:02:16.612]                     RNGkind("Mersenne-Twister")
[17:02:16.612]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:16.612]                       inherits = FALSE)
[17:02:16.612]                   }
[17:02:16.612]                   options(future.plan = NULL)
[17:02:16.612]                   if (is.na(NA_character_)) 
[17:02:16.612]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.612]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.612]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.612]                     .init = FALSE)
[17:02:16.612]                 }
[17:02:16.612]             }
[17:02:16.612]         }
[17:02:16.612]     })
[17:02:16.612]     if (TRUE) {
[17:02:16.612]         base::sink(type = "output", split = FALSE)
[17:02:16.612]         if (TRUE) {
[17:02:16.612]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.612]         }
[17:02:16.612]         else {
[17:02:16.612]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.612]         }
[17:02:16.612]         base::close(...future.stdout)
[17:02:16.612]         ...future.stdout <- NULL
[17:02:16.612]     }
[17:02:16.612]     ...future.result$conditions <- ...future.conditions
[17:02:16.612]     ...future.result$finished <- base::Sys.time()
[17:02:16.612]     ...future.result
[17:02:16.612] }
[17:02:16.614] plan(): Setting new future strategy stack:
[17:02:16.617] List of future strategies:
[17:02:16.617] 1. sequential:
[17:02:16.617]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.617]    - tweaked: FALSE
[17:02:16.617]    - call: NULL
[17:02:16.617] plan(): nbrOfWorkers() = 1
[17:02:16.618] plan(): Setting new future strategy stack:
[17:02:16.618] List of future strategies:
[17:02:16.618] 1. sequential:
[17:02:16.618]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.618]    - tweaked: FALSE
[17:02:16.618]    - call: plan(strategy)
[17:02:16.618] plan(): nbrOfWorkers() = 1
[17:02:16.618] SequentialFuture started (and completed)
[17:02:16.619] - Launch lazy future ... done
[17:02:16.619] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.619] getGlobalsAndPackages() ...
[17:02:16.619] Searching for globals...
[17:02:16.620] - globals found: [1] ‘{’
[17:02:16.620] Searching for globals ... DONE
[17:02:16.620] Resolving globals: FALSE
[17:02:16.620] 
[17:02:16.621] 
[17:02:16.621] getGlobalsAndPackages() ... DONE
[17:02:16.621] run() for ‘Future’ ...
[17:02:16.621] - state: ‘created’
[17:02:16.621] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[17:02:16.621] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[17:02:16.621] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[17:02:16.622]   - Field: ‘label’
[17:02:16.622]   - Field: ‘local’
[17:02:16.622]   - Field: ‘owner’
[17:02:16.622]   - Field: ‘envir’
[17:02:16.622]   - Field: ‘packages’
[17:02:16.622]   - Field: ‘gc’
[17:02:16.622]   - Field: ‘conditions’
[17:02:16.622]   - Field: ‘expr’
[17:02:16.622]   - Field: ‘uuid’
[17:02:16.622]   - Field: ‘seed’
[17:02:16.622]   - Field: ‘version’
[17:02:16.623]   - Field: ‘result’
[17:02:16.623]   - Field: ‘asynchronous’
[17:02:16.623]   - Field: ‘calls’
[17:02:16.623]   - Field: ‘globals’
[17:02:16.623]   - Field: ‘stdout’
[17:02:16.623]   - Field: ‘earlySignal’
[17:02:16.623]   - Field: ‘lazy’
[17:02:16.623]   - Field: ‘state’
[17:02:16.623] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[17:02:16.623] - Launch lazy future ...
[17:02:16.624] Packages needed by the future expression (n = 0): <none>
[17:02:16.624] Packages needed by future strategies (n = 0): <none>
[17:02:16.624] {
[17:02:16.624]     {
[17:02:16.624]         {
[17:02:16.624]             ...future.startTime <- base::Sys.time()
[17:02:16.624]             {
[17:02:16.624]                 {
[17:02:16.624]                   {
[17:02:16.624]                     base::local({
[17:02:16.624]                       has_future <- base::requireNamespace("future", 
[17:02:16.624]                         quietly = TRUE)
[17:02:16.624]                       if (has_future) {
[17:02:16.624]                         ns <- base::getNamespace("future")
[17:02:16.624]                         version <- ns[[".package"]][["version"]]
[17:02:16.624]                         if (is.null(version)) 
[17:02:16.624]                           version <- utils::packageVersion("future")
[17:02:16.624]                       }
[17:02:16.624]                       else {
[17:02:16.624]                         version <- NULL
[17:02:16.624]                       }
[17:02:16.624]                       if (!has_future || version < "1.8.0") {
[17:02:16.624]                         info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.624]                           "", base::R.version$version.string), 
[17:02:16.624]                           platform = base::sprintf("%s (%s-bit)", 
[17:02:16.624]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.624]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.624]                             "release", "version")], collapse = " "), 
[17:02:16.624]                           hostname = base::Sys.info()[["nodename"]])
[17:02:16.624]                         info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.624]                           info)
[17:02:16.624]                         info <- base::paste(info, collapse = "; ")
[17:02:16.624]                         if (!has_future) {
[17:02:16.624]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.624]                             info)
[17:02:16.624]                         }
[17:02:16.624]                         else {
[17:02:16.624]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.624]                             info, version)
[17:02:16.624]                         }
[17:02:16.624]                         base::stop(msg)
[17:02:16.624]                       }
[17:02:16.624]                     })
[17:02:16.624]                   }
[17:02:16.624]                   ...future.strategy.old <- future::plan("list")
[17:02:16.624]                   options(future.plan = NULL)
[17:02:16.624]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.624]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.624]                 }
[17:02:16.624]                 ...future.workdir <- getwd()
[17:02:16.624]             }
[17:02:16.624]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.624]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.624]         }
[17:02:16.624]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.624]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.624]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.624]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.624]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.624]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.624]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.624]             base::names(...future.oldOptions))
[17:02:16.624]     }
[17:02:16.624]     if (FALSE) {
[17:02:16.624]     }
[17:02:16.624]     else {
[17:02:16.624]         if (TRUE) {
[17:02:16.624]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.624]                 open = "w")
[17:02:16.624]         }
[17:02:16.624]         else {
[17:02:16.624]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.624]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.624]         }
[17:02:16.624]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.624]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.624]             base::sink(type = "output", split = FALSE)
[17:02:16.624]             base::close(...future.stdout)
[17:02:16.624]         }, add = TRUE)
[17:02:16.624]     }
[17:02:16.624]     ...future.frame <- base::sys.nframe()
[17:02:16.624]     ...future.conditions <- base::list()
[17:02:16.624]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.624]     if (FALSE) {
[17:02:16.624]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.624]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.624]     }
[17:02:16.624]     ...future.result <- base::tryCatch({
[17:02:16.624]         base::withCallingHandlers({
[17:02:16.624]             ...future.value <- base::withVisible(base::local({
[17:02:16.624]                 42
[17:02:16.624]             }))
[17:02:16.624]             future::FutureResult(value = ...future.value$value, 
[17:02:16.624]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.624]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.624]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.624]                     ...future.globalenv.names))
[17:02:16.624]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.624]         }, condition = base::local({
[17:02:16.624]             c <- base::c
[17:02:16.624]             inherits <- base::inherits
[17:02:16.624]             invokeRestart <- base::invokeRestart
[17:02:16.624]             length <- base::length
[17:02:16.624]             list <- base::list
[17:02:16.624]             seq.int <- base::seq.int
[17:02:16.624]             signalCondition <- base::signalCondition
[17:02:16.624]             sys.calls <- base::sys.calls
[17:02:16.624]             `[[` <- base::`[[`
[17:02:16.624]             `+` <- base::`+`
[17:02:16.624]             `<<-` <- base::`<<-`
[17:02:16.624]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.624]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.624]                   3L)]
[17:02:16.624]             }
[17:02:16.624]             function(cond) {
[17:02:16.624]                 is_error <- inherits(cond, "error")
[17:02:16.624]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.624]                   NULL)
[17:02:16.624]                 if (is_error) {
[17:02:16.624]                   sessionInformation <- function() {
[17:02:16.624]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.624]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.624]                       search = base::search(), system = base::Sys.info())
[17:02:16.624]                   }
[17:02:16.624]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.624]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.624]                     cond$call), session = sessionInformation(), 
[17:02:16.624]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.624]                   signalCondition(cond)
[17:02:16.624]                 }
[17:02:16.624]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.624]                 "immediateCondition"))) {
[17:02:16.624]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.624]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.624]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.624]                   if (TRUE && !signal) {
[17:02:16.624]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.624]                     {
[17:02:16.624]                       inherits <- base::inherits
[17:02:16.624]                       invokeRestart <- base::invokeRestart
[17:02:16.624]                       is.null <- base::is.null
[17:02:16.624]                       muffled <- FALSE
[17:02:16.624]                       if (inherits(cond, "message")) {
[17:02:16.624]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.624]                         if (muffled) 
[17:02:16.624]                           invokeRestart("muffleMessage")
[17:02:16.624]                       }
[17:02:16.624]                       else if (inherits(cond, "warning")) {
[17:02:16.624]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.624]                         if (muffled) 
[17:02:16.624]                           invokeRestart("muffleWarning")
[17:02:16.624]                       }
[17:02:16.624]                       else if (inherits(cond, "condition")) {
[17:02:16.624]                         if (!is.null(pattern)) {
[17:02:16.624]                           computeRestarts <- base::computeRestarts
[17:02:16.624]                           grepl <- base::grepl
[17:02:16.624]                           restarts <- computeRestarts(cond)
[17:02:16.624]                           for (restart in restarts) {
[17:02:16.624]                             name <- restart$name
[17:02:16.624]                             if (is.null(name)) 
[17:02:16.624]                               next
[17:02:16.624]                             if (!grepl(pattern, name)) 
[17:02:16.624]                               next
[17:02:16.624]                             invokeRestart(restart)
[17:02:16.624]                             muffled <- TRUE
[17:02:16.624]                             break
[17:02:16.624]                           }
[17:02:16.624]                         }
[17:02:16.624]                       }
[17:02:16.624]                       invisible(muffled)
[17:02:16.624]                     }
[17:02:16.624]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.624]                   }
[17:02:16.624]                 }
[17:02:16.624]                 else {
[17:02:16.624]                   if (TRUE) {
[17:02:16.624]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.624]                     {
[17:02:16.624]                       inherits <- base::inherits
[17:02:16.624]                       invokeRestart <- base::invokeRestart
[17:02:16.624]                       is.null <- base::is.null
[17:02:16.624]                       muffled <- FALSE
[17:02:16.624]                       if (inherits(cond, "message")) {
[17:02:16.624]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.624]                         if (muffled) 
[17:02:16.624]                           invokeRestart("muffleMessage")
[17:02:16.624]                       }
[17:02:16.624]                       else if (inherits(cond, "warning")) {
[17:02:16.624]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.624]                         if (muffled) 
[17:02:16.624]                           invokeRestart("muffleWarning")
[17:02:16.624]                       }
[17:02:16.624]                       else if (inherits(cond, "condition")) {
[17:02:16.624]                         if (!is.null(pattern)) {
[17:02:16.624]                           computeRestarts <- base::computeRestarts
[17:02:16.624]                           grepl <- base::grepl
[17:02:16.624]                           restarts <- computeRestarts(cond)
[17:02:16.624]                           for (restart in restarts) {
[17:02:16.624]                             name <- restart$name
[17:02:16.624]                             if (is.null(name)) 
[17:02:16.624]                               next
[17:02:16.624]                             if (!grepl(pattern, name)) 
[17:02:16.624]                               next
[17:02:16.624]                             invokeRestart(restart)
[17:02:16.624]                             muffled <- TRUE
[17:02:16.624]                             break
[17:02:16.624]                           }
[17:02:16.624]                         }
[17:02:16.624]                       }
[17:02:16.624]                       invisible(muffled)
[17:02:16.624]                     }
[17:02:16.624]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.624]                   }
[17:02:16.624]                 }
[17:02:16.624]             }
[17:02:16.624]         }))
[17:02:16.624]     }, error = function(ex) {
[17:02:16.624]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.624]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.624]                 ...future.rng), started = ...future.startTime, 
[17:02:16.624]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.624]             version = "1.8"), class = "FutureResult")
[17:02:16.624]     }, finally = {
[17:02:16.624]         if (!identical(...future.workdir, getwd())) 
[17:02:16.624]             setwd(...future.workdir)
[17:02:16.624]         {
[17:02:16.624]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.624]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.624]             }
[17:02:16.624]             base::options(...future.oldOptions)
[17:02:16.624]             if (.Platform$OS.type == "windows") {
[17:02:16.624]                 old_names <- names(...future.oldEnvVars)
[17:02:16.624]                 envs <- base::Sys.getenv()
[17:02:16.624]                 names <- names(envs)
[17:02:16.624]                 common <- intersect(names, old_names)
[17:02:16.624]                 added <- setdiff(names, old_names)
[17:02:16.624]                 removed <- setdiff(old_names, names)
[17:02:16.624]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.624]                   envs[common]]
[17:02:16.624]                 NAMES <- toupper(changed)
[17:02:16.624]                 args <- list()
[17:02:16.624]                 for (kk in seq_along(NAMES)) {
[17:02:16.624]                   name <- changed[[kk]]
[17:02:16.624]                   NAME <- NAMES[[kk]]
[17:02:16.624]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.624]                     next
[17:02:16.624]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.624]                 }
[17:02:16.624]                 NAMES <- toupper(added)
[17:02:16.624]                 for (kk in seq_along(NAMES)) {
[17:02:16.624]                   name <- added[[kk]]
[17:02:16.624]                   NAME <- NAMES[[kk]]
[17:02:16.624]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.624]                     next
[17:02:16.624]                   args[[name]] <- ""
[17:02:16.624]                 }
[17:02:16.624]                 NAMES <- toupper(removed)
[17:02:16.624]                 for (kk in seq_along(NAMES)) {
[17:02:16.624]                   name <- removed[[kk]]
[17:02:16.624]                   NAME <- NAMES[[kk]]
[17:02:16.624]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.624]                     next
[17:02:16.624]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.624]                 }
[17:02:16.624]                 if (length(args) > 0) 
[17:02:16.624]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.624]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.624]             }
[17:02:16.624]             else {
[17:02:16.624]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.624]             }
[17:02:16.624]             {
[17:02:16.624]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.624]                   0L) {
[17:02:16.624]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.624]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.624]                   base::options(opts)
[17:02:16.624]                 }
[17:02:16.624]                 {
[17:02:16.624]                   {
[17:02:16.624]                     NULL
[17:02:16.624]                     RNGkind("Mersenne-Twister")
[17:02:16.624]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[17:02:16.624]                       inherits = FALSE)
[17:02:16.624]                   }
[17:02:16.624]                   options(future.plan = NULL)
[17:02:16.624]                   if (is.na(NA_character_)) 
[17:02:16.624]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.624]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.624]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.624]                     .init = FALSE)
[17:02:16.624]                 }
[17:02:16.624]             }
[17:02:16.624]         }
[17:02:16.624]     })
[17:02:16.624]     if (TRUE) {
[17:02:16.624]         base::sink(type = "output", split = FALSE)
[17:02:16.624]         if (TRUE) {
[17:02:16.624]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.624]         }
[17:02:16.624]         else {
[17:02:16.624]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.624]         }
[17:02:16.624]         base::close(...future.stdout)
[17:02:16.624]         ...future.stdout <- NULL
[17:02:16.624]     }
[17:02:16.624]     ...future.result$conditions <- ...future.conditions
[17:02:16.624]     ...future.result$finished <- base::Sys.time()
[17:02:16.624]     ...future.result
[17:02:16.624] }
[17:02:16.626] plan(): Setting new future strategy stack:
[17:02:16.626] List of future strategies:
[17:02:16.626] 1. sequential:
[17:02:16.626]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.626]    - tweaked: FALSE
[17:02:16.626]    - call: NULL
[17:02:16.626] plan(): nbrOfWorkers() = 1
[17:02:16.627] plan(): Setting new future strategy stack:
[17:02:16.627] List of future strategies:
[17:02:16.627] 1. sequential:
[17:02:16.627]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.627]    - tweaked: FALSE
[17:02:16.627]    - call: plan(strategy)
[17:02:16.628] plan(): nbrOfWorkers() = 1
[17:02:16.628] SequentialFuture started (and completed)
[17:02:16.628] - Launch lazy future ... done
[17:02:16.628] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[17:02:16.629] plan(): Setting new future strategy stack:
[17:02:16.629] List of future strategies:
[17:02:16.629] 1. multicore:
[17:02:16.629]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:16.629]    - tweaked: FALSE
[17:02:16.629]    - call: plan(strategy)
[17:02:16.633] plan(): nbrOfWorkers() = 2
[17:02:16.636] getGlobalsAndPackages() ...
[17:02:16.636] 
[17:02:16.637] - globals: [0] <none>
[17:02:16.637] getGlobalsAndPackages() ... DONE
[17:02:16.638] Packages needed by the future expression (n = 0): <none>
[17:02:16.638] Packages needed by future strategies (n = 0): <none>
[17:02:16.638] {
[17:02:16.638]     {
[17:02:16.638]         {
[17:02:16.638]             ...future.startTime <- base::Sys.time()
[17:02:16.638]             {
[17:02:16.638]                 {
[17:02:16.638]                   {
[17:02:16.638]                     {
[17:02:16.638]                       base::local({
[17:02:16.638]                         has_future <- base::requireNamespace("future", 
[17:02:16.638]                           quietly = TRUE)
[17:02:16.638]                         if (has_future) {
[17:02:16.638]                           ns <- base::getNamespace("future")
[17:02:16.638]                           version <- ns[[".package"]][["version"]]
[17:02:16.638]                           if (is.null(version)) 
[17:02:16.638]                             version <- utils::packageVersion("future")
[17:02:16.638]                         }
[17:02:16.638]                         else {
[17:02:16.638]                           version <- NULL
[17:02:16.638]                         }
[17:02:16.638]                         if (!has_future || version < "1.8.0") {
[17:02:16.638]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.638]                             "", base::R.version$version.string), 
[17:02:16.638]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.638]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.638]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.638]                               "release", "version")], collapse = " "), 
[17:02:16.638]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.638]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.638]                             info)
[17:02:16.638]                           info <- base::paste(info, collapse = "; ")
[17:02:16.638]                           if (!has_future) {
[17:02:16.638]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.638]                               info)
[17:02:16.638]                           }
[17:02:16.638]                           else {
[17:02:16.638]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.638]                               info, version)
[17:02:16.638]                           }
[17:02:16.638]                           base::stop(msg)
[17:02:16.638]                         }
[17:02:16.638]                       })
[17:02:16.638]                     }
[17:02:16.638]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.638]                     base::options(mc.cores = 1L)
[17:02:16.638]                   }
[17:02:16.638]                   ...future.strategy.old <- future::plan("list")
[17:02:16.638]                   options(future.plan = NULL)
[17:02:16.638]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.638]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.638]                 }
[17:02:16.638]                 ...future.workdir <- getwd()
[17:02:16.638]             }
[17:02:16.638]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.638]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.638]         }
[17:02:16.638]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.638]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.638]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.638]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.638]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.638]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.638]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.638]             base::names(...future.oldOptions))
[17:02:16.638]     }
[17:02:16.638]     if (FALSE) {
[17:02:16.638]     }
[17:02:16.638]     else {
[17:02:16.638]         if (TRUE) {
[17:02:16.638]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.638]                 open = "w")
[17:02:16.638]         }
[17:02:16.638]         else {
[17:02:16.638]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.638]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.638]         }
[17:02:16.638]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.638]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.638]             base::sink(type = "output", split = FALSE)
[17:02:16.638]             base::close(...future.stdout)
[17:02:16.638]         }, add = TRUE)
[17:02:16.638]     }
[17:02:16.638]     ...future.frame <- base::sys.nframe()
[17:02:16.638]     ...future.conditions <- base::list()
[17:02:16.638]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.638]     if (FALSE) {
[17:02:16.638]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.638]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.638]     }
[17:02:16.638]     ...future.result <- base::tryCatch({
[17:02:16.638]         base::withCallingHandlers({
[17:02:16.638]             ...future.value <- base::withVisible(base::local({
[17:02:16.638]                 withCallingHandlers({
[17:02:16.638]                   42
[17:02:16.638]                 }, immediateCondition = function(cond) {
[17:02:16.638]                   save_rds <- function (object, pathname, ...) 
[17:02:16.638]                   {
[17:02:16.638]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:16.638]                     if (file_test("-f", pathname_tmp)) {
[17:02:16.638]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.638]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:16.638]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.638]                         fi_tmp[["mtime"]])
[17:02:16.638]                     }
[17:02:16.638]                     tryCatch({
[17:02:16.638]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:16.638]                     }, error = function(ex) {
[17:02:16.638]                       msg <- conditionMessage(ex)
[17:02:16.638]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.638]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:16.638]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.638]                         fi_tmp[["mtime"]], msg)
[17:02:16.638]                       ex$message <- msg
[17:02:16.638]                       stop(ex)
[17:02:16.638]                     })
[17:02:16.638]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:16.638]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:16.638]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:16.638]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.638]                       fi <- file.info(pathname)
[17:02:16.638]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:16.638]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.638]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:16.638]                         fi[["size"]], fi[["mtime"]])
[17:02:16.638]                       stop(msg)
[17:02:16.638]                     }
[17:02:16.638]                     invisible(pathname)
[17:02:16.638]                   }
[17:02:16.638]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:16.638]                     rootPath = tempdir()) 
[17:02:16.638]                   {
[17:02:16.638]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:16.638]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:16.638]                       tmpdir = path, fileext = ".rds")
[17:02:16.638]                     save_rds(obj, file)
[17:02:16.638]                   }
[17:02:16.638]                   saveImmediateCondition(cond, path = "/tmp/RtmpeaVlem/.future/immediateConditions")
[17:02:16.638]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.638]                   {
[17:02:16.638]                     inherits <- base::inherits
[17:02:16.638]                     invokeRestart <- base::invokeRestart
[17:02:16.638]                     is.null <- base::is.null
[17:02:16.638]                     muffled <- FALSE
[17:02:16.638]                     if (inherits(cond, "message")) {
[17:02:16.638]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.638]                       if (muffled) 
[17:02:16.638]                         invokeRestart("muffleMessage")
[17:02:16.638]                     }
[17:02:16.638]                     else if (inherits(cond, "warning")) {
[17:02:16.638]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.638]                       if (muffled) 
[17:02:16.638]                         invokeRestart("muffleWarning")
[17:02:16.638]                     }
[17:02:16.638]                     else if (inherits(cond, "condition")) {
[17:02:16.638]                       if (!is.null(pattern)) {
[17:02:16.638]                         computeRestarts <- base::computeRestarts
[17:02:16.638]                         grepl <- base::grepl
[17:02:16.638]                         restarts <- computeRestarts(cond)
[17:02:16.638]                         for (restart in restarts) {
[17:02:16.638]                           name <- restart$name
[17:02:16.638]                           if (is.null(name)) 
[17:02:16.638]                             next
[17:02:16.638]                           if (!grepl(pattern, name)) 
[17:02:16.638]                             next
[17:02:16.638]                           invokeRestart(restart)
[17:02:16.638]                           muffled <- TRUE
[17:02:16.638]                           break
[17:02:16.638]                         }
[17:02:16.638]                       }
[17:02:16.638]                     }
[17:02:16.638]                     invisible(muffled)
[17:02:16.638]                   }
[17:02:16.638]                   muffleCondition(cond)
[17:02:16.638]                 })
[17:02:16.638]             }))
[17:02:16.638]             future::FutureResult(value = ...future.value$value, 
[17:02:16.638]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.638]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.638]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.638]                     ...future.globalenv.names))
[17:02:16.638]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.638]         }, condition = base::local({
[17:02:16.638]             c <- base::c
[17:02:16.638]             inherits <- base::inherits
[17:02:16.638]             invokeRestart <- base::invokeRestart
[17:02:16.638]             length <- base::length
[17:02:16.638]             list <- base::list
[17:02:16.638]             seq.int <- base::seq.int
[17:02:16.638]             signalCondition <- base::signalCondition
[17:02:16.638]             sys.calls <- base::sys.calls
[17:02:16.638]             `[[` <- base::`[[`
[17:02:16.638]             `+` <- base::`+`
[17:02:16.638]             `<<-` <- base::`<<-`
[17:02:16.638]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.638]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.638]                   3L)]
[17:02:16.638]             }
[17:02:16.638]             function(cond) {
[17:02:16.638]                 is_error <- inherits(cond, "error")
[17:02:16.638]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.638]                   NULL)
[17:02:16.638]                 if (is_error) {
[17:02:16.638]                   sessionInformation <- function() {
[17:02:16.638]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.638]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.638]                       search = base::search(), system = base::Sys.info())
[17:02:16.638]                   }
[17:02:16.638]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.638]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.638]                     cond$call), session = sessionInformation(), 
[17:02:16.638]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.638]                   signalCondition(cond)
[17:02:16.638]                 }
[17:02:16.638]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.638]                 "immediateCondition"))) {
[17:02:16.638]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.638]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.638]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.638]                   if (TRUE && !signal) {
[17:02:16.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.638]                     {
[17:02:16.638]                       inherits <- base::inherits
[17:02:16.638]                       invokeRestart <- base::invokeRestart
[17:02:16.638]                       is.null <- base::is.null
[17:02:16.638]                       muffled <- FALSE
[17:02:16.638]                       if (inherits(cond, "message")) {
[17:02:16.638]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.638]                         if (muffled) 
[17:02:16.638]                           invokeRestart("muffleMessage")
[17:02:16.638]                       }
[17:02:16.638]                       else if (inherits(cond, "warning")) {
[17:02:16.638]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.638]                         if (muffled) 
[17:02:16.638]                           invokeRestart("muffleWarning")
[17:02:16.638]                       }
[17:02:16.638]                       else if (inherits(cond, "condition")) {
[17:02:16.638]                         if (!is.null(pattern)) {
[17:02:16.638]                           computeRestarts <- base::computeRestarts
[17:02:16.638]                           grepl <- base::grepl
[17:02:16.638]                           restarts <- computeRestarts(cond)
[17:02:16.638]                           for (restart in restarts) {
[17:02:16.638]                             name <- restart$name
[17:02:16.638]                             if (is.null(name)) 
[17:02:16.638]                               next
[17:02:16.638]                             if (!grepl(pattern, name)) 
[17:02:16.638]                               next
[17:02:16.638]                             invokeRestart(restart)
[17:02:16.638]                             muffled <- TRUE
[17:02:16.638]                             break
[17:02:16.638]                           }
[17:02:16.638]                         }
[17:02:16.638]                       }
[17:02:16.638]                       invisible(muffled)
[17:02:16.638]                     }
[17:02:16.638]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.638]                   }
[17:02:16.638]                 }
[17:02:16.638]                 else {
[17:02:16.638]                   if (TRUE) {
[17:02:16.638]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.638]                     {
[17:02:16.638]                       inherits <- base::inherits
[17:02:16.638]                       invokeRestart <- base::invokeRestart
[17:02:16.638]                       is.null <- base::is.null
[17:02:16.638]                       muffled <- FALSE
[17:02:16.638]                       if (inherits(cond, "message")) {
[17:02:16.638]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.638]                         if (muffled) 
[17:02:16.638]                           invokeRestart("muffleMessage")
[17:02:16.638]                       }
[17:02:16.638]                       else if (inherits(cond, "warning")) {
[17:02:16.638]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.638]                         if (muffled) 
[17:02:16.638]                           invokeRestart("muffleWarning")
[17:02:16.638]                       }
[17:02:16.638]                       else if (inherits(cond, "condition")) {
[17:02:16.638]                         if (!is.null(pattern)) {
[17:02:16.638]                           computeRestarts <- base::computeRestarts
[17:02:16.638]                           grepl <- base::grepl
[17:02:16.638]                           restarts <- computeRestarts(cond)
[17:02:16.638]                           for (restart in restarts) {
[17:02:16.638]                             name <- restart$name
[17:02:16.638]                             if (is.null(name)) 
[17:02:16.638]                               next
[17:02:16.638]                             if (!grepl(pattern, name)) 
[17:02:16.638]                               next
[17:02:16.638]                             invokeRestart(restart)
[17:02:16.638]                             muffled <- TRUE
[17:02:16.638]                             break
[17:02:16.638]                           }
[17:02:16.638]                         }
[17:02:16.638]                       }
[17:02:16.638]                       invisible(muffled)
[17:02:16.638]                     }
[17:02:16.638]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.638]                   }
[17:02:16.638]                 }
[17:02:16.638]             }
[17:02:16.638]         }))
[17:02:16.638]     }, error = function(ex) {
[17:02:16.638]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.638]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.638]                 ...future.rng), started = ...future.startTime, 
[17:02:16.638]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.638]             version = "1.8"), class = "FutureResult")
[17:02:16.638]     }, finally = {
[17:02:16.638]         if (!identical(...future.workdir, getwd())) 
[17:02:16.638]             setwd(...future.workdir)
[17:02:16.638]         {
[17:02:16.638]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.638]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.638]             }
[17:02:16.638]             base::options(...future.oldOptions)
[17:02:16.638]             if (.Platform$OS.type == "windows") {
[17:02:16.638]                 old_names <- names(...future.oldEnvVars)
[17:02:16.638]                 envs <- base::Sys.getenv()
[17:02:16.638]                 names <- names(envs)
[17:02:16.638]                 common <- intersect(names, old_names)
[17:02:16.638]                 added <- setdiff(names, old_names)
[17:02:16.638]                 removed <- setdiff(old_names, names)
[17:02:16.638]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.638]                   envs[common]]
[17:02:16.638]                 NAMES <- toupper(changed)
[17:02:16.638]                 args <- list()
[17:02:16.638]                 for (kk in seq_along(NAMES)) {
[17:02:16.638]                   name <- changed[[kk]]
[17:02:16.638]                   NAME <- NAMES[[kk]]
[17:02:16.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.638]                     next
[17:02:16.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.638]                 }
[17:02:16.638]                 NAMES <- toupper(added)
[17:02:16.638]                 for (kk in seq_along(NAMES)) {
[17:02:16.638]                   name <- added[[kk]]
[17:02:16.638]                   NAME <- NAMES[[kk]]
[17:02:16.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.638]                     next
[17:02:16.638]                   args[[name]] <- ""
[17:02:16.638]                 }
[17:02:16.638]                 NAMES <- toupper(removed)
[17:02:16.638]                 for (kk in seq_along(NAMES)) {
[17:02:16.638]                   name <- removed[[kk]]
[17:02:16.638]                   NAME <- NAMES[[kk]]
[17:02:16.638]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.638]                     next
[17:02:16.638]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.638]                 }
[17:02:16.638]                 if (length(args) > 0) 
[17:02:16.638]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.638]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.638]             }
[17:02:16.638]             else {
[17:02:16.638]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.638]             }
[17:02:16.638]             {
[17:02:16.638]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.638]                   0L) {
[17:02:16.638]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.638]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.638]                   base::options(opts)
[17:02:16.638]                 }
[17:02:16.638]                 {
[17:02:16.638]                   {
[17:02:16.638]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.638]                     NULL
[17:02:16.638]                   }
[17:02:16.638]                   options(future.plan = NULL)
[17:02:16.638]                   if (is.na(NA_character_)) 
[17:02:16.638]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.638]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.638]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.638]                     .init = FALSE)
[17:02:16.638]                 }
[17:02:16.638]             }
[17:02:16.638]         }
[17:02:16.638]     })
[17:02:16.638]     if (TRUE) {
[17:02:16.638]         base::sink(type = "output", split = FALSE)
[17:02:16.638]         if (TRUE) {
[17:02:16.638]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.638]         }
[17:02:16.638]         else {
[17:02:16.638]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.638]         }
[17:02:16.638]         base::close(...future.stdout)
[17:02:16.638]         ...future.stdout <- NULL
[17:02:16.638]     }
[17:02:16.638]     ...future.result$conditions <- ...future.conditions
[17:02:16.638]     ...future.result$finished <- base::Sys.time()
[17:02:16.638]     ...future.result
[17:02:16.638] }
[17:02:16.641] requestCore(): workers = 2
[17:02:16.643] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
[17:02:16.644] plan(): Setting new future strategy stack:
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:16.644] List of future strategies:
[17:02:16.644] 1. sequential:
[17:02:16.644]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.644]    - tweaked: FALSE
[17:02:16.644]    - call: NULL
[17:02:16.645] plan(): nbrOfWorkers() = 1
[17:02:16.647] plan(): Setting new future strategy stack:
[17:02:16.648] List of future strategies:
[17:02:16.648] 1. multicore:
[17:02:16.648]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:16.648]    - tweaked: FALSE
[17:02:16.648]    - call: plan(strategy)
[17:02:16.653] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.655] result() for MulticoreFuture ...
[17:02:16.659] result() for MulticoreFuture ...
[17:02:16.660] result() for MulticoreFuture ... done
[17:02:16.660] result() for MulticoreFuture ... done
[17:02:16.660] result() for MulticoreFuture ...
[17:02:16.660] result() for MulticoreFuture ... done
[17:02:16.660] getGlobalsAndPackages() ...
[17:02:16.660] Searching for globals...
[17:02:16.661] 
[17:02:16.661] Searching for globals ... DONE
[17:02:16.661] - globals: [0] <none>
[17:02:16.661] getGlobalsAndPackages() ... DONE
[17:02:16.661] run() for ‘Future’ ...
[17:02:16.662] - state: ‘created’
[17:02:16.662] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:16.666] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.666] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:16.666]   - Field: ‘label’
[17:02:16.666]   - Field: ‘local’
[17:02:16.666]   - Field: ‘owner’
[17:02:16.666]   - Field: ‘envir’
[17:02:16.667]   - Field: ‘workers’
[17:02:16.667]   - Field: ‘packages’
[17:02:16.667]   - Field: ‘gc’
[17:02:16.667]   - Field: ‘job’
[17:02:16.667]   - Field: ‘conditions’
[17:02:16.667]   - Field: ‘expr’
[17:02:16.667]   - Field: ‘uuid’
[17:02:16.667]   - Field: ‘seed’
[17:02:16.667]   - Field: ‘version’
[17:02:16.668]   - Field: ‘result’
[17:02:16.668]   - Field: ‘asynchronous’
[17:02:16.668]   - Field: ‘calls’
[17:02:16.668]   - Field: ‘globals’
[17:02:16.668]   - Field: ‘stdout’
[17:02:16.668]   - Field: ‘earlySignal’
[17:02:16.668]   - Field: ‘lazy’
[17:02:16.668]   - Field: ‘state’
[17:02:16.668] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:16.669] - Launch lazy future ...
[17:02:16.669] Packages needed by the future expression (n = 0): <none>
[17:02:16.669] Packages needed by future strategies (n = 0): <none>
[17:02:16.670] {
[17:02:16.670]     {
[17:02:16.670]         {
[17:02:16.670]             ...future.startTime <- base::Sys.time()
[17:02:16.670]             {
[17:02:16.670]                 {
[17:02:16.670]                   {
[17:02:16.670]                     {
[17:02:16.670]                       base::local({
[17:02:16.670]                         has_future <- base::requireNamespace("future", 
[17:02:16.670]                           quietly = TRUE)
[17:02:16.670]                         if (has_future) {
[17:02:16.670]                           ns <- base::getNamespace("future")
[17:02:16.670]                           version <- ns[[".package"]][["version"]]
[17:02:16.670]                           if (is.null(version)) 
[17:02:16.670]                             version <- utils::packageVersion("future")
[17:02:16.670]                         }
[17:02:16.670]                         else {
[17:02:16.670]                           version <- NULL
[17:02:16.670]                         }
[17:02:16.670]                         if (!has_future || version < "1.8.0") {
[17:02:16.670]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.670]                             "", base::R.version$version.string), 
[17:02:16.670]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.670]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.670]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.670]                               "release", "version")], collapse = " "), 
[17:02:16.670]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.670]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.670]                             info)
[17:02:16.670]                           info <- base::paste(info, collapse = "; ")
[17:02:16.670]                           if (!has_future) {
[17:02:16.670]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.670]                               info)
[17:02:16.670]                           }
[17:02:16.670]                           else {
[17:02:16.670]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.670]                               info, version)
[17:02:16.670]                           }
[17:02:16.670]                           base::stop(msg)
[17:02:16.670]                         }
[17:02:16.670]                       })
[17:02:16.670]                     }
[17:02:16.670]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.670]                     base::options(mc.cores = 1L)
[17:02:16.670]                   }
[17:02:16.670]                   ...future.strategy.old <- future::plan("list")
[17:02:16.670]                   options(future.plan = NULL)
[17:02:16.670]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.670]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.670]                 }
[17:02:16.670]                 ...future.workdir <- getwd()
[17:02:16.670]             }
[17:02:16.670]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.670]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.670]         }
[17:02:16.670]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.670]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.670]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.670]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.670]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.670]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.670]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.670]             base::names(...future.oldOptions))
[17:02:16.670]     }
[17:02:16.670]     if (FALSE) {
[17:02:16.670]     }
[17:02:16.670]     else {
[17:02:16.670]         if (TRUE) {
[17:02:16.670]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.670]                 open = "w")
[17:02:16.670]         }
[17:02:16.670]         else {
[17:02:16.670]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.670]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.670]         }
[17:02:16.670]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.670]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.670]             base::sink(type = "output", split = FALSE)
[17:02:16.670]             base::close(...future.stdout)
[17:02:16.670]         }, add = TRUE)
[17:02:16.670]     }
[17:02:16.670]     ...future.frame <- base::sys.nframe()
[17:02:16.670]     ...future.conditions <- base::list()
[17:02:16.670]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.670]     if (FALSE) {
[17:02:16.670]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.670]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.670]     }
[17:02:16.670]     ...future.result <- base::tryCatch({
[17:02:16.670]         base::withCallingHandlers({
[17:02:16.670]             ...future.value <- base::withVisible(base::local({
[17:02:16.670]                 withCallingHandlers({
[17:02:16.670]                   42
[17:02:16.670]                 }, immediateCondition = function(cond) {
[17:02:16.670]                   save_rds <- function (object, pathname, ...) 
[17:02:16.670]                   {
[17:02:16.670]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:16.670]                     if (file_test("-f", pathname_tmp)) {
[17:02:16.670]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.670]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:16.670]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.670]                         fi_tmp[["mtime"]])
[17:02:16.670]                     }
[17:02:16.670]                     tryCatch({
[17:02:16.670]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:16.670]                     }, error = function(ex) {
[17:02:16.670]                       msg <- conditionMessage(ex)
[17:02:16.670]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.670]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:16.670]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.670]                         fi_tmp[["mtime"]], msg)
[17:02:16.670]                       ex$message <- msg
[17:02:16.670]                       stop(ex)
[17:02:16.670]                     })
[17:02:16.670]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:16.670]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:16.670]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:16.670]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.670]                       fi <- file.info(pathname)
[17:02:16.670]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:16.670]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.670]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:16.670]                         fi[["size"]], fi[["mtime"]])
[17:02:16.670]                       stop(msg)
[17:02:16.670]                     }
[17:02:16.670]                     invisible(pathname)
[17:02:16.670]                   }
[17:02:16.670]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:16.670]                     rootPath = tempdir()) 
[17:02:16.670]                   {
[17:02:16.670]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:16.670]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:16.670]                       tmpdir = path, fileext = ".rds")
[17:02:16.670]                     save_rds(obj, file)
[17:02:16.670]                   }
[17:02:16.670]                   saveImmediateCondition(cond, path = "/tmp/RtmpeaVlem/.future/immediateConditions")
[17:02:16.670]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.670]                   {
[17:02:16.670]                     inherits <- base::inherits
[17:02:16.670]                     invokeRestart <- base::invokeRestart
[17:02:16.670]                     is.null <- base::is.null
[17:02:16.670]                     muffled <- FALSE
[17:02:16.670]                     if (inherits(cond, "message")) {
[17:02:16.670]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.670]                       if (muffled) 
[17:02:16.670]                         invokeRestart("muffleMessage")
[17:02:16.670]                     }
[17:02:16.670]                     else if (inherits(cond, "warning")) {
[17:02:16.670]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.670]                       if (muffled) 
[17:02:16.670]                         invokeRestart("muffleWarning")
[17:02:16.670]                     }
[17:02:16.670]                     else if (inherits(cond, "condition")) {
[17:02:16.670]                       if (!is.null(pattern)) {
[17:02:16.670]                         computeRestarts <- base::computeRestarts
[17:02:16.670]                         grepl <- base::grepl
[17:02:16.670]                         restarts <- computeRestarts(cond)
[17:02:16.670]                         for (restart in restarts) {
[17:02:16.670]                           name <- restart$name
[17:02:16.670]                           if (is.null(name)) 
[17:02:16.670]                             next
[17:02:16.670]                           if (!grepl(pattern, name)) 
[17:02:16.670]                             next
[17:02:16.670]                           invokeRestart(restart)
[17:02:16.670]                           muffled <- TRUE
[17:02:16.670]                           break
[17:02:16.670]                         }
[17:02:16.670]                       }
[17:02:16.670]                     }
[17:02:16.670]                     invisible(muffled)
[17:02:16.670]                   }
[17:02:16.670]                   muffleCondition(cond)
[17:02:16.670]                 })
[17:02:16.670]             }))
[17:02:16.670]             future::FutureResult(value = ...future.value$value, 
[17:02:16.670]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.670]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.670]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.670]                     ...future.globalenv.names))
[17:02:16.670]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.670]         }, condition = base::local({
[17:02:16.670]             c <- base::c
[17:02:16.670]             inherits <- base::inherits
[17:02:16.670]             invokeRestart <- base::invokeRestart
[17:02:16.670]             length <- base::length
[17:02:16.670]             list <- base::list
[17:02:16.670]             seq.int <- base::seq.int
[17:02:16.670]             signalCondition <- base::signalCondition
[17:02:16.670]             sys.calls <- base::sys.calls
[17:02:16.670]             `[[` <- base::`[[`
[17:02:16.670]             `+` <- base::`+`
[17:02:16.670]             `<<-` <- base::`<<-`
[17:02:16.670]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.670]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.670]                   3L)]
[17:02:16.670]             }
[17:02:16.670]             function(cond) {
[17:02:16.670]                 is_error <- inherits(cond, "error")
[17:02:16.670]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.670]                   NULL)
[17:02:16.670]                 if (is_error) {
[17:02:16.670]                   sessionInformation <- function() {
[17:02:16.670]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.670]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.670]                       search = base::search(), system = base::Sys.info())
[17:02:16.670]                   }
[17:02:16.670]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.670]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.670]                     cond$call), session = sessionInformation(), 
[17:02:16.670]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.670]                   signalCondition(cond)
[17:02:16.670]                 }
[17:02:16.670]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.670]                 "immediateCondition"))) {
[17:02:16.670]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.670]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.670]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.670]                   if (TRUE && !signal) {
[17:02:16.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.670]                     {
[17:02:16.670]                       inherits <- base::inherits
[17:02:16.670]                       invokeRestart <- base::invokeRestart
[17:02:16.670]                       is.null <- base::is.null
[17:02:16.670]                       muffled <- FALSE
[17:02:16.670]                       if (inherits(cond, "message")) {
[17:02:16.670]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.670]                         if (muffled) 
[17:02:16.670]                           invokeRestart("muffleMessage")
[17:02:16.670]                       }
[17:02:16.670]                       else if (inherits(cond, "warning")) {
[17:02:16.670]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.670]                         if (muffled) 
[17:02:16.670]                           invokeRestart("muffleWarning")
[17:02:16.670]                       }
[17:02:16.670]                       else if (inherits(cond, "condition")) {
[17:02:16.670]                         if (!is.null(pattern)) {
[17:02:16.670]                           computeRestarts <- base::computeRestarts
[17:02:16.670]                           grepl <- base::grepl
[17:02:16.670]                           restarts <- computeRestarts(cond)
[17:02:16.670]                           for (restart in restarts) {
[17:02:16.670]                             name <- restart$name
[17:02:16.670]                             if (is.null(name)) 
[17:02:16.670]                               next
[17:02:16.670]                             if (!grepl(pattern, name)) 
[17:02:16.670]                               next
[17:02:16.670]                             invokeRestart(restart)
[17:02:16.670]                             muffled <- TRUE
[17:02:16.670]                             break
[17:02:16.670]                           }
[17:02:16.670]                         }
[17:02:16.670]                       }
[17:02:16.670]                       invisible(muffled)
[17:02:16.670]                     }
[17:02:16.670]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.670]                   }
[17:02:16.670]                 }
[17:02:16.670]                 else {
[17:02:16.670]                   if (TRUE) {
[17:02:16.670]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.670]                     {
[17:02:16.670]                       inherits <- base::inherits
[17:02:16.670]                       invokeRestart <- base::invokeRestart
[17:02:16.670]                       is.null <- base::is.null
[17:02:16.670]                       muffled <- FALSE
[17:02:16.670]                       if (inherits(cond, "message")) {
[17:02:16.670]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.670]                         if (muffled) 
[17:02:16.670]                           invokeRestart("muffleMessage")
[17:02:16.670]                       }
[17:02:16.670]                       else if (inherits(cond, "warning")) {
[17:02:16.670]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.670]                         if (muffled) 
[17:02:16.670]                           invokeRestart("muffleWarning")
[17:02:16.670]                       }
[17:02:16.670]                       else if (inherits(cond, "condition")) {
[17:02:16.670]                         if (!is.null(pattern)) {
[17:02:16.670]                           computeRestarts <- base::computeRestarts
[17:02:16.670]                           grepl <- base::grepl
[17:02:16.670]                           restarts <- computeRestarts(cond)
[17:02:16.670]                           for (restart in restarts) {
[17:02:16.670]                             name <- restart$name
[17:02:16.670]                             if (is.null(name)) 
[17:02:16.670]                               next
[17:02:16.670]                             if (!grepl(pattern, name)) 
[17:02:16.670]                               next
[17:02:16.670]                             invokeRestart(restart)
[17:02:16.670]                             muffled <- TRUE
[17:02:16.670]                             break
[17:02:16.670]                           }
[17:02:16.670]                         }
[17:02:16.670]                       }
[17:02:16.670]                       invisible(muffled)
[17:02:16.670]                     }
[17:02:16.670]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.670]                   }
[17:02:16.670]                 }
[17:02:16.670]             }
[17:02:16.670]         }))
[17:02:16.670]     }, error = function(ex) {
[17:02:16.670]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.670]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.670]                 ...future.rng), started = ...future.startTime, 
[17:02:16.670]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.670]             version = "1.8"), class = "FutureResult")
[17:02:16.670]     }, finally = {
[17:02:16.670]         if (!identical(...future.workdir, getwd())) 
[17:02:16.670]             setwd(...future.workdir)
[17:02:16.670]         {
[17:02:16.670]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.670]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.670]             }
[17:02:16.670]             base::options(...future.oldOptions)
[17:02:16.670]             if (.Platform$OS.type == "windows") {
[17:02:16.670]                 old_names <- names(...future.oldEnvVars)
[17:02:16.670]                 envs <- base::Sys.getenv()
[17:02:16.670]                 names <- names(envs)
[17:02:16.670]                 common <- intersect(names, old_names)
[17:02:16.670]                 added <- setdiff(names, old_names)
[17:02:16.670]                 removed <- setdiff(old_names, names)
[17:02:16.670]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.670]                   envs[common]]
[17:02:16.670]                 NAMES <- toupper(changed)
[17:02:16.670]                 args <- list()
[17:02:16.670]                 for (kk in seq_along(NAMES)) {
[17:02:16.670]                   name <- changed[[kk]]
[17:02:16.670]                   NAME <- NAMES[[kk]]
[17:02:16.670]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.670]                     next
[17:02:16.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.670]                 }
[17:02:16.670]                 NAMES <- toupper(added)
[17:02:16.670]                 for (kk in seq_along(NAMES)) {
[17:02:16.670]                   name <- added[[kk]]
[17:02:16.670]                   NAME <- NAMES[[kk]]
[17:02:16.670]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.670]                     next
[17:02:16.670]                   args[[name]] <- ""
[17:02:16.670]                 }
[17:02:16.670]                 NAMES <- toupper(removed)
[17:02:16.670]                 for (kk in seq_along(NAMES)) {
[17:02:16.670]                   name <- removed[[kk]]
[17:02:16.670]                   NAME <- NAMES[[kk]]
[17:02:16.670]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.670]                     next
[17:02:16.670]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.670]                 }
[17:02:16.670]                 if (length(args) > 0) 
[17:02:16.670]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.670]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.670]             }
[17:02:16.670]             else {
[17:02:16.670]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.670]             }
[17:02:16.670]             {
[17:02:16.670]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.670]                   0L) {
[17:02:16.670]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.670]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.670]                   base::options(opts)
[17:02:16.670]                 }
[17:02:16.670]                 {
[17:02:16.670]                   {
[17:02:16.670]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.670]                     NULL
[17:02:16.670]                   }
[17:02:16.670]                   options(future.plan = NULL)
[17:02:16.670]                   if (is.na(NA_character_)) 
[17:02:16.670]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.670]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.670]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.670]                     .init = FALSE)
[17:02:16.670]                 }
[17:02:16.670]             }
[17:02:16.670]         }
[17:02:16.670]     })
[17:02:16.670]     if (TRUE) {
[17:02:16.670]         base::sink(type = "output", split = FALSE)
[17:02:16.670]         if (TRUE) {
[17:02:16.670]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.670]         }
[17:02:16.670]         else {
[17:02:16.670]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.670]         }
[17:02:16.670]         base::close(...future.stdout)
[17:02:16.670]         ...future.stdout <- NULL
[17:02:16.670]     }
[17:02:16.670]     ...future.result$conditions <- ...future.conditions
[17:02:16.670]     ...future.result$finished <- base::Sys.time()
[17:02:16.670]     ...future.result
[17:02:16.670] }
[17:02:16.672] requestCore(): workers = 2
[17:02:16.674] MulticoreFuture started
[17:02:16.674] - Launch lazy future ... done
[17:02:16.674] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
[17:02:16.675] plan(): Setting new future strategy stack:
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:16.675] List of future strategies:
[17:02:16.675] 1. sequential:
[17:02:16.675]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.675]    - tweaked: FALSE
[17:02:16.675]    - call: NULL
[17:02:16.676] plan(): nbrOfWorkers() = 1
[17:02:16.678] plan(): Setting new future strategy stack:
[17:02:16.678] List of future strategies:
[17:02:16.678] 1. multicore:
[17:02:16.678]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:16.678]    - tweaked: FALSE
[17:02:16.678]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.686] result() for MulticoreFuture ...
[17:02:16.689] plan(): nbrOfWorkers() = 2
[17:02:16.690] result() for MulticoreFuture ...
[17:02:16.690] result() for MulticoreFuture ... done
[17:02:16.690] result() for MulticoreFuture ... done
[17:02:16.690] result() for MulticoreFuture ...
[17:02:16.690] result() for MulticoreFuture ... done
[17:02:16.691] getGlobalsAndPackages() ...
[17:02:16.691] Searching for globals...
[17:02:16.692] - globals found: [1] ‘{’
[17:02:16.695] Searching for globals ... DONE
[17:02:16.695] Resolving globals: FALSE
[17:02:16.696] 
[17:02:16.696] 
[17:02:16.696] getGlobalsAndPackages() ... DONE
[17:02:16.696] run() for ‘Future’ ...
[17:02:16.697] - state: ‘created’
[17:02:16.697] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:16.701] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.701] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:16.701]   - Field: ‘label’
[17:02:16.701]   - Field: ‘local’
[17:02:16.701]   - Field: ‘owner’
[17:02:16.702]   - Field: ‘envir’
[17:02:16.702]   - Field: ‘workers’
[17:02:16.702]   - Field: ‘packages’
[17:02:16.702]   - Field: ‘gc’
[17:02:16.702]   - Field: ‘job’
[17:02:16.702]   - Field: ‘conditions’
[17:02:16.702]   - Field: ‘expr’
[17:02:16.702]   - Field: ‘uuid’
[17:02:16.702]   - Field: ‘seed’
[17:02:16.703]   - Field: ‘version’
[17:02:16.703]   - Field: ‘result’
[17:02:16.703]   - Field: ‘asynchronous’
[17:02:16.703]   - Field: ‘calls’
[17:02:16.703]   - Field: ‘globals’
[17:02:16.703]   - Field: ‘stdout’
[17:02:16.703]   - Field: ‘earlySignal’
[17:02:16.703]   - Field: ‘lazy’
[17:02:16.703]   - Field: ‘state’
[17:02:16.704] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:16.704] - Launch lazy future ...
[17:02:16.704] Packages needed by the future expression (n = 0): <none>
[17:02:16.704] Packages needed by future strategies (n = 0): <none>
[17:02:16.705] {
[17:02:16.705]     {
[17:02:16.705]         {
[17:02:16.705]             ...future.startTime <- base::Sys.time()
[17:02:16.705]             {
[17:02:16.705]                 {
[17:02:16.705]                   {
[17:02:16.705]                     {
[17:02:16.705]                       base::local({
[17:02:16.705]                         has_future <- base::requireNamespace("future", 
[17:02:16.705]                           quietly = TRUE)
[17:02:16.705]                         if (has_future) {
[17:02:16.705]                           ns <- base::getNamespace("future")
[17:02:16.705]                           version <- ns[[".package"]][["version"]]
[17:02:16.705]                           if (is.null(version)) 
[17:02:16.705]                             version <- utils::packageVersion("future")
[17:02:16.705]                         }
[17:02:16.705]                         else {
[17:02:16.705]                           version <- NULL
[17:02:16.705]                         }
[17:02:16.705]                         if (!has_future || version < "1.8.0") {
[17:02:16.705]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.705]                             "", base::R.version$version.string), 
[17:02:16.705]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.705]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.705]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.705]                               "release", "version")], collapse = " "), 
[17:02:16.705]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.705]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.705]                             info)
[17:02:16.705]                           info <- base::paste(info, collapse = "; ")
[17:02:16.705]                           if (!has_future) {
[17:02:16.705]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.705]                               info)
[17:02:16.705]                           }
[17:02:16.705]                           else {
[17:02:16.705]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.705]                               info, version)
[17:02:16.705]                           }
[17:02:16.705]                           base::stop(msg)
[17:02:16.705]                         }
[17:02:16.705]                       })
[17:02:16.705]                     }
[17:02:16.705]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.705]                     base::options(mc.cores = 1L)
[17:02:16.705]                   }
[17:02:16.705]                   ...future.strategy.old <- future::plan("list")
[17:02:16.705]                   options(future.plan = NULL)
[17:02:16.705]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.705]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.705]                 }
[17:02:16.705]                 ...future.workdir <- getwd()
[17:02:16.705]             }
[17:02:16.705]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.705]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.705]         }
[17:02:16.705]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.705]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.705]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.705]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.705]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.705]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.705]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.705]             base::names(...future.oldOptions))
[17:02:16.705]     }
[17:02:16.705]     if (FALSE) {
[17:02:16.705]     }
[17:02:16.705]     else {
[17:02:16.705]         if (TRUE) {
[17:02:16.705]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.705]                 open = "w")
[17:02:16.705]         }
[17:02:16.705]         else {
[17:02:16.705]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.705]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.705]         }
[17:02:16.705]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.705]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.705]             base::sink(type = "output", split = FALSE)
[17:02:16.705]             base::close(...future.stdout)
[17:02:16.705]         }, add = TRUE)
[17:02:16.705]     }
[17:02:16.705]     ...future.frame <- base::sys.nframe()
[17:02:16.705]     ...future.conditions <- base::list()
[17:02:16.705]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.705]     if (FALSE) {
[17:02:16.705]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.705]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.705]     }
[17:02:16.705]     ...future.result <- base::tryCatch({
[17:02:16.705]         base::withCallingHandlers({
[17:02:16.705]             ...future.value <- base::withVisible(base::local({
[17:02:16.705]                 withCallingHandlers({
[17:02:16.705]                   {
[17:02:16.705]                     42
[17:02:16.705]                   }
[17:02:16.705]                 }, immediateCondition = function(cond) {
[17:02:16.705]                   save_rds <- function (object, pathname, ...) 
[17:02:16.705]                   {
[17:02:16.705]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:16.705]                     if (file_test("-f", pathname_tmp)) {
[17:02:16.705]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.705]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:16.705]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.705]                         fi_tmp[["mtime"]])
[17:02:16.705]                     }
[17:02:16.705]                     tryCatch({
[17:02:16.705]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:16.705]                     }, error = function(ex) {
[17:02:16.705]                       msg <- conditionMessage(ex)
[17:02:16.705]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.705]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:16.705]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.705]                         fi_tmp[["mtime"]], msg)
[17:02:16.705]                       ex$message <- msg
[17:02:16.705]                       stop(ex)
[17:02:16.705]                     })
[17:02:16.705]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:16.705]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:16.705]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:16.705]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.705]                       fi <- file.info(pathname)
[17:02:16.705]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:16.705]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.705]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:16.705]                         fi[["size"]], fi[["mtime"]])
[17:02:16.705]                       stop(msg)
[17:02:16.705]                     }
[17:02:16.705]                     invisible(pathname)
[17:02:16.705]                   }
[17:02:16.705]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:16.705]                     rootPath = tempdir()) 
[17:02:16.705]                   {
[17:02:16.705]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:16.705]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:16.705]                       tmpdir = path, fileext = ".rds")
[17:02:16.705]                     save_rds(obj, file)
[17:02:16.705]                   }
[17:02:16.705]                   saveImmediateCondition(cond, path = "/tmp/RtmpeaVlem/.future/immediateConditions")
[17:02:16.705]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.705]                   {
[17:02:16.705]                     inherits <- base::inherits
[17:02:16.705]                     invokeRestart <- base::invokeRestart
[17:02:16.705]                     is.null <- base::is.null
[17:02:16.705]                     muffled <- FALSE
[17:02:16.705]                     if (inherits(cond, "message")) {
[17:02:16.705]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.705]                       if (muffled) 
[17:02:16.705]                         invokeRestart("muffleMessage")
[17:02:16.705]                     }
[17:02:16.705]                     else if (inherits(cond, "warning")) {
[17:02:16.705]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.705]                       if (muffled) 
[17:02:16.705]                         invokeRestart("muffleWarning")
[17:02:16.705]                     }
[17:02:16.705]                     else if (inherits(cond, "condition")) {
[17:02:16.705]                       if (!is.null(pattern)) {
[17:02:16.705]                         computeRestarts <- base::computeRestarts
[17:02:16.705]                         grepl <- base::grepl
[17:02:16.705]                         restarts <- computeRestarts(cond)
[17:02:16.705]                         for (restart in restarts) {
[17:02:16.705]                           name <- restart$name
[17:02:16.705]                           if (is.null(name)) 
[17:02:16.705]                             next
[17:02:16.705]                           if (!grepl(pattern, name)) 
[17:02:16.705]                             next
[17:02:16.705]                           invokeRestart(restart)
[17:02:16.705]                           muffled <- TRUE
[17:02:16.705]                           break
[17:02:16.705]                         }
[17:02:16.705]                       }
[17:02:16.705]                     }
[17:02:16.705]                     invisible(muffled)
[17:02:16.705]                   }
[17:02:16.705]                   muffleCondition(cond)
[17:02:16.705]                 })
[17:02:16.705]             }))
[17:02:16.705]             future::FutureResult(value = ...future.value$value, 
[17:02:16.705]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.705]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.705]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.705]                     ...future.globalenv.names))
[17:02:16.705]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.705]         }, condition = base::local({
[17:02:16.705]             c <- base::c
[17:02:16.705]             inherits <- base::inherits
[17:02:16.705]             invokeRestart <- base::invokeRestart
[17:02:16.705]             length <- base::length
[17:02:16.705]             list <- base::list
[17:02:16.705]             seq.int <- base::seq.int
[17:02:16.705]             signalCondition <- base::signalCondition
[17:02:16.705]             sys.calls <- base::sys.calls
[17:02:16.705]             `[[` <- base::`[[`
[17:02:16.705]             `+` <- base::`+`
[17:02:16.705]             `<<-` <- base::`<<-`
[17:02:16.705]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.705]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.705]                   3L)]
[17:02:16.705]             }
[17:02:16.705]             function(cond) {
[17:02:16.705]                 is_error <- inherits(cond, "error")
[17:02:16.705]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.705]                   NULL)
[17:02:16.705]                 if (is_error) {
[17:02:16.705]                   sessionInformation <- function() {
[17:02:16.705]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.705]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.705]                       search = base::search(), system = base::Sys.info())
[17:02:16.705]                   }
[17:02:16.705]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.705]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.705]                     cond$call), session = sessionInformation(), 
[17:02:16.705]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.705]                   signalCondition(cond)
[17:02:16.705]                 }
[17:02:16.705]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.705]                 "immediateCondition"))) {
[17:02:16.705]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.705]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.705]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.705]                   if (TRUE && !signal) {
[17:02:16.705]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.705]                     {
[17:02:16.705]                       inherits <- base::inherits
[17:02:16.705]                       invokeRestart <- base::invokeRestart
[17:02:16.705]                       is.null <- base::is.null
[17:02:16.705]                       muffled <- FALSE
[17:02:16.705]                       if (inherits(cond, "message")) {
[17:02:16.705]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.705]                         if (muffled) 
[17:02:16.705]                           invokeRestart("muffleMessage")
[17:02:16.705]                       }
[17:02:16.705]                       else if (inherits(cond, "warning")) {
[17:02:16.705]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.705]                         if (muffled) 
[17:02:16.705]                           invokeRestart("muffleWarning")
[17:02:16.705]                       }
[17:02:16.705]                       else if (inherits(cond, "condition")) {
[17:02:16.705]                         if (!is.null(pattern)) {
[17:02:16.705]                           computeRestarts <- base::computeRestarts
[17:02:16.705]                           grepl <- base::grepl
[17:02:16.705]                           restarts <- computeRestarts(cond)
[17:02:16.705]                           for (restart in restarts) {
[17:02:16.705]                             name <- restart$name
[17:02:16.705]                             if (is.null(name)) 
[17:02:16.705]                               next
[17:02:16.705]                             if (!grepl(pattern, name)) 
[17:02:16.705]                               next
[17:02:16.705]                             invokeRestart(restart)
[17:02:16.705]                             muffled <- TRUE
[17:02:16.705]                             break
[17:02:16.705]                           }
[17:02:16.705]                         }
[17:02:16.705]                       }
[17:02:16.705]                       invisible(muffled)
[17:02:16.705]                     }
[17:02:16.705]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.705]                   }
[17:02:16.705]                 }
[17:02:16.705]                 else {
[17:02:16.705]                   if (TRUE) {
[17:02:16.705]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.705]                     {
[17:02:16.705]                       inherits <- base::inherits
[17:02:16.705]                       invokeRestart <- base::invokeRestart
[17:02:16.705]                       is.null <- base::is.null
[17:02:16.705]                       muffled <- FALSE
[17:02:16.705]                       if (inherits(cond, "message")) {
[17:02:16.705]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.705]                         if (muffled) 
[17:02:16.705]                           invokeRestart("muffleMessage")
[17:02:16.705]                       }
[17:02:16.705]                       else if (inherits(cond, "warning")) {
[17:02:16.705]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.705]                         if (muffled) 
[17:02:16.705]                           invokeRestart("muffleWarning")
[17:02:16.705]                       }
[17:02:16.705]                       else if (inherits(cond, "condition")) {
[17:02:16.705]                         if (!is.null(pattern)) {
[17:02:16.705]                           computeRestarts <- base::computeRestarts
[17:02:16.705]                           grepl <- base::grepl
[17:02:16.705]                           restarts <- computeRestarts(cond)
[17:02:16.705]                           for (restart in restarts) {
[17:02:16.705]                             name <- restart$name
[17:02:16.705]                             if (is.null(name)) 
[17:02:16.705]                               next
[17:02:16.705]                             if (!grepl(pattern, name)) 
[17:02:16.705]                               next
[17:02:16.705]                             invokeRestart(restart)
[17:02:16.705]                             muffled <- TRUE
[17:02:16.705]                             break
[17:02:16.705]                           }
[17:02:16.705]                         }
[17:02:16.705]                       }
[17:02:16.705]                       invisible(muffled)
[17:02:16.705]                     }
[17:02:16.705]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.705]                   }
[17:02:16.705]                 }
[17:02:16.705]             }
[17:02:16.705]         }))
[17:02:16.705]     }, error = function(ex) {
[17:02:16.705]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.705]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.705]                 ...future.rng), started = ...future.startTime, 
[17:02:16.705]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.705]             version = "1.8"), class = "FutureResult")
[17:02:16.705]     }, finally = {
[17:02:16.705]         if (!identical(...future.workdir, getwd())) 
[17:02:16.705]             setwd(...future.workdir)
[17:02:16.705]         {
[17:02:16.705]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.705]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.705]             }
[17:02:16.705]             base::options(...future.oldOptions)
[17:02:16.705]             if (.Platform$OS.type == "windows") {
[17:02:16.705]                 old_names <- names(...future.oldEnvVars)
[17:02:16.705]                 envs <- base::Sys.getenv()
[17:02:16.705]                 names <- names(envs)
[17:02:16.705]                 common <- intersect(names, old_names)
[17:02:16.705]                 added <- setdiff(names, old_names)
[17:02:16.705]                 removed <- setdiff(old_names, names)
[17:02:16.705]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.705]                   envs[common]]
[17:02:16.705]                 NAMES <- toupper(changed)
[17:02:16.705]                 args <- list()
[17:02:16.705]                 for (kk in seq_along(NAMES)) {
[17:02:16.705]                   name <- changed[[kk]]
[17:02:16.705]                   NAME <- NAMES[[kk]]
[17:02:16.705]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.705]                     next
[17:02:16.705]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.705]                 }
[17:02:16.705]                 NAMES <- toupper(added)
[17:02:16.705]                 for (kk in seq_along(NAMES)) {
[17:02:16.705]                   name <- added[[kk]]
[17:02:16.705]                   NAME <- NAMES[[kk]]
[17:02:16.705]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.705]                     next
[17:02:16.705]                   args[[name]] <- ""
[17:02:16.705]                 }
[17:02:16.705]                 NAMES <- toupper(removed)
[17:02:16.705]                 for (kk in seq_along(NAMES)) {
[17:02:16.705]                   name <- removed[[kk]]
[17:02:16.705]                   NAME <- NAMES[[kk]]
[17:02:16.705]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.705]                     next
[17:02:16.705]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.705]                 }
[17:02:16.705]                 if (length(args) > 0) 
[17:02:16.705]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.705]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.705]             }
[17:02:16.705]             else {
[17:02:16.705]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.705]             }
[17:02:16.705]             {
[17:02:16.705]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.705]                   0L) {
[17:02:16.705]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.705]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.705]                   base::options(opts)
[17:02:16.705]                 }
[17:02:16.705]                 {
[17:02:16.705]                   {
[17:02:16.705]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.705]                     NULL
[17:02:16.705]                   }
[17:02:16.705]                   options(future.plan = NULL)
[17:02:16.705]                   if (is.na(NA_character_)) 
[17:02:16.705]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.705]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.705]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.705]                     .init = FALSE)
[17:02:16.705]                 }
[17:02:16.705]             }
[17:02:16.705]         }
[17:02:16.705]     })
[17:02:16.705]     if (TRUE) {
[17:02:16.705]         base::sink(type = "output", split = FALSE)
[17:02:16.705]         if (TRUE) {
[17:02:16.705]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.705]         }
[17:02:16.705]         else {
[17:02:16.705]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.705]         }
[17:02:16.705]         base::close(...future.stdout)
[17:02:16.705]         ...future.stdout <- NULL
[17:02:16.705]     }
[17:02:16.705]     ...future.result$conditions <- ...future.conditions
[17:02:16.705]     ...future.result$finished <- base::Sys.time()
[17:02:16.705]     ...future.result
[17:02:16.705] }
[17:02:16.707] requestCore(): workers = 2
[17:02:16.709] MulticoreFuture started
[17:02:16.709] - Launch lazy future ... done
[17:02:16.709] run() for ‘MulticoreFuture’ ... done
[17:02:16.710] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:16.710] List of future strategies:
[17:02:16.710] 1. sequential:
[17:02:16.710]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.710]    - tweaked: FALSE
[17:02:16.710]    - call: NULL
[17:02:16.711] plan(): nbrOfWorkers() = 1
[17:02:16.713] plan(): Setting new future strategy stack:
[17:02:16.713] List of future strategies:
[17:02:16.713] 1. multicore:
[17:02:16.713]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:16.713]    - tweaked: FALSE
[17:02:16.713]    - call: plan(strategy)
[17:02:16.718] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.719] result() for MulticoreFuture ...
[17:02:16.720] result() for MulticoreFuture ...
[17:02:16.720] result() for MulticoreFuture ... done
[17:02:16.720] result() for MulticoreFuture ... done
[17:02:16.720] result() for MulticoreFuture ...
[17:02:16.721] result() for MulticoreFuture ... done
[17:02:16.724] getGlobalsAndPackages() ...
[17:02:16.724] 
[17:02:16.725] - globals: [0] <none>
[17:02:16.725] getGlobalsAndPackages() ... DONE
[17:02:16.725] Packages needed by the future expression (n = 0): <none>
[17:02:16.726] Packages needed by future strategies (n = 0): <none>
[17:02:16.726] {
[17:02:16.726]     {
[17:02:16.726]         {
[17:02:16.726]             ...future.startTime <- base::Sys.time()
[17:02:16.726]             {
[17:02:16.726]                 {
[17:02:16.726]                   {
[17:02:16.726]                     {
[17:02:16.726]                       base::local({
[17:02:16.726]                         has_future <- base::requireNamespace("future", 
[17:02:16.726]                           quietly = TRUE)
[17:02:16.726]                         if (has_future) {
[17:02:16.726]                           ns <- base::getNamespace("future")
[17:02:16.726]                           version <- ns[[".package"]][["version"]]
[17:02:16.726]                           if (is.null(version)) 
[17:02:16.726]                             version <- utils::packageVersion("future")
[17:02:16.726]                         }
[17:02:16.726]                         else {
[17:02:16.726]                           version <- NULL
[17:02:16.726]                         }
[17:02:16.726]                         if (!has_future || version < "1.8.0") {
[17:02:16.726]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.726]                             "", base::R.version$version.string), 
[17:02:16.726]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.726]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.726]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.726]                               "release", "version")], collapse = " "), 
[17:02:16.726]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.726]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.726]                             info)
[17:02:16.726]                           info <- base::paste(info, collapse = "; ")
[17:02:16.726]                           if (!has_future) {
[17:02:16.726]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.726]                               info)
[17:02:16.726]                           }
[17:02:16.726]                           else {
[17:02:16.726]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.726]                               info, version)
[17:02:16.726]                           }
[17:02:16.726]                           base::stop(msg)
[17:02:16.726]                         }
[17:02:16.726]                       })
[17:02:16.726]                     }
[17:02:16.726]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.726]                     base::options(mc.cores = 1L)
[17:02:16.726]                   }
[17:02:16.726]                   ...future.strategy.old <- future::plan("list")
[17:02:16.726]                   options(future.plan = NULL)
[17:02:16.726]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.726]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.726]                 }
[17:02:16.726]                 ...future.workdir <- getwd()
[17:02:16.726]             }
[17:02:16.726]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.726]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.726]         }
[17:02:16.726]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.726]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.726]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.726]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.726]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.726]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.726]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.726]             base::names(...future.oldOptions))
[17:02:16.726]     }
[17:02:16.726]     if (FALSE) {
[17:02:16.726]     }
[17:02:16.726]     else {
[17:02:16.726]         if (TRUE) {
[17:02:16.726]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.726]                 open = "w")
[17:02:16.726]         }
[17:02:16.726]         else {
[17:02:16.726]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.726]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.726]         }
[17:02:16.726]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.726]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.726]             base::sink(type = "output", split = FALSE)
[17:02:16.726]             base::close(...future.stdout)
[17:02:16.726]         }, add = TRUE)
[17:02:16.726]     }
[17:02:16.726]     ...future.frame <- base::sys.nframe()
[17:02:16.726]     ...future.conditions <- base::list()
[17:02:16.726]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.726]     if (FALSE) {
[17:02:16.726]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.726]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.726]     }
[17:02:16.726]     ...future.result <- base::tryCatch({
[17:02:16.726]         base::withCallingHandlers({
[17:02:16.726]             ...future.value <- base::withVisible(base::local({
[17:02:16.726]                 withCallingHandlers({
[17:02:16.726]                   42
[17:02:16.726]                 }, immediateCondition = function(cond) {
[17:02:16.726]                   save_rds <- function (object, pathname, ...) 
[17:02:16.726]                   {
[17:02:16.726]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:16.726]                     if (file_test("-f", pathname_tmp)) {
[17:02:16.726]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.726]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:16.726]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.726]                         fi_tmp[["mtime"]])
[17:02:16.726]                     }
[17:02:16.726]                     tryCatch({
[17:02:16.726]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:16.726]                     }, error = function(ex) {
[17:02:16.726]                       msg <- conditionMessage(ex)
[17:02:16.726]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.726]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:16.726]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.726]                         fi_tmp[["mtime"]], msg)
[17:02:16.726]                       ex$message <- msg
[17:02:16.726]                       stop(ex)
[17:02:16.726]                     })
[17:02:16.726]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:16.726]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:16.726]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:16.726]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.726]                       fi <- file.info(pathname)
[17:02:16.726]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:16.726]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.726]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:16.726]                         fi[["size"]], fi[["mtime"]])
[17:02:16.726]                       stop(msg)
[17:02:16.726]                     }
[17:02:16.726]                     invisible(pathname)
[17:02:16.726]                   }
[17:02:16.726]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:16.726]                     rootPath = tempdir()) 
[17:02:16.726]                   {
[17:02:16.726]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:16.726]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:16.726]                       tmpdir = path, fileext = ".rds")
[17:02:16.726]                     save_rds(obj, file)
[17:02:16.726]                   }
[17:02:16.726]                   saveImmediateCondition(cond, path = "/tmp/RtmpeaVlem/.future/immediateConditions")
[17:02:16.726]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.726]                   {
[17:02:16.726]                     inherits <- base::inherits
[17:02:16.726]                     invokeRestart <- base::invokeRestart
[17:02:16.726]                     is.null <- base::is.null
[17:02:16.726]                     muffled <- FALSE
[17:02:16.726]                     if (inherits(cond, "message")) {
[17:02:16.726]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.726]                       if (muffled) 
[17:02:16.726]                         invokeRestart("muffleMessage")
[17:02:16.726]                     }
[17:02:16.726]                     else if (inherits(cond, "warning")) {
[17:02:16.726]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.726]                       if (muffled) 
[17:02:16.726]                         invokeRestart("muffleWarning")
[17:02:16.726]                     }
[17:02:16.726]                     else if (inherits(cond, "condition")) {
[17:02:16.726]                       if (!is.null(pattern)) {
[17:02:16.726]                         computeRestarts <- base::computeRestarts
[17:02:16.726]                         grepl <- base::grepl
[17:02:16.726]                         restarts <- computeRestarts(cond)
[17:02:16.726]                         for (restart in restarts) {
[17:02:16.726]                           name <- restart$name
[17:02:16.726]                           if (is.null(name)) 
[17:02:16.726]                             next
[17:02:16.726]                           if (!grepl(pattern, name)) 
[17:02:16.726]                             next
[17:02:16.726]                           invokeRestart(restart)
[17:02:16.726]                           muffled <- TRUE
[17:02:16.726]                           break
[17:02:16.726]                         }
[17:02:16.726]                       }
[17:02:16.726]                     }
[17:02:16.726]                     invisible(muffled)
[17:02:16.726]                   }
[17:02:16.726]                   muffleCondition(cond)
[17:02:16.726]                 })
[17:02:16.726]             }))
[17:02:16.726]             future::FutureResult(value = ...future.value$value, 
[17:02:16.726]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.726]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.726]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.726]                     ...future.globalenv.names))
[17:02:16.726]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.726]         }, condition = base::local({
[17:02:16.726]             c <- base::c
[17:02:16.726]             inherits <- base::inherits
[17:02:16.726]             invokeRestart <- base::invokeRestart
[17:02:16.726]             length <- base::length
[17:02:16.726]             list <- base::list
[17:02:16.726]             seq.int <- base::seq.int
[17:02:16.726]             signalCondition <- base::signalCondition
[17:02:16.726]             sys.calls <- base::sys.calls
[17:02:16.726]             `[[` <- base::`[[`
[17:02:16.726]             `+` <- base::`+`
[17:02:16.726]             `<<-` <- base::`<<-`
[17:02:16.726]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.726]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.726]                   3L)]
[17:02:16.726]             }
[17:02:16.726]             function(cond) {
[17:02:16.726]                 is_error <- inherits(cond, "error")
[17:02:16.726]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.726]                   NULL)
[17:02:16.726]                 if (is_error) {
[17:02:16.726]                   sessionInformation <- function() {
[17:02:16.726]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.726]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.726]                       search = base::search(), system = base::Sys.info())
[17:02:16.726]                   }
[17:02:16.726]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.726]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.726]                     cond$call), session = sessionInformation(), 
[17:02:16.726]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.726]                   signalCondition(cond)
[17:02:16.726]                 }
[17:02:16.726]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.726]                 "immediateCondition"))) {
[17:02:16.726]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.726]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.726]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.726]                   if (TRUE && !signal) {
[17:02:16.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.726]                     {
[17:02:16.726]                       inherits <- base::inherits
[17:02:16.726]                       invokeRestart <- base::invokeRestart
[17:02:16.726]                       is.null <- base::is.null
[17:02:16.726]                       muffled <- FALSE
[17:02:16.726]                       if (inherits(cond, "message")) {
[17:02:16.726]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.726]                         if (muffled) 
[17:02:16.726]                           invokeRestart("muffleMessage")
[17:02:16.726]                       }
[17:02:16.726]                       else if (inherits(cond, "warning")) {
[17:02:16.726]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.726]                         if (muffled) 
[17:02:16.726]                           invokeRestart("muffleWarning")
[17:02:16.726]                       }
[17:02:16.726]                       else if (inherits(cond, "condition")) {
[17:02:16.726]                         if (!is.null(pattern)) {
[17:02:16.726]                           computeRestarts <- base::computeRestarts
[17:02:16.726]                           grepl <- base::grepl
[17:02:16.726]                           restarts <- computeRestarts(cond)
[17:02:16.726]                           for (restart in restarts) {
[17:02:16.726]                             name <- restart$name
[17:02:16.726]                             if (is.null(name)) 
[17:02:16.726]                               next
[17:02:16.726]                             if (!grepl(pattern, name)) 
[17:02:16.726]                               next
[17:02:16.726]                             invokeRestart(restart)
[17:02:16.726]                             muffled <- TRUE
[17:02:16.726]                             break
[17:02:16.726]                           }
[17:02:16.726]                         }
[17:02:16.726]                       }
[17:02:16.726]                       invisible(muffled)
[17:02:16.726]                     }
[17:02:16.726]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.726]                   }
[17:02:16.726]                 }
[17:02:16.726]                 else {
[17:02:16.726]                   if (TRUE) {
[17:02:16.726]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.726]                     {
[17:02:16.726]                       inherits <- base::inherits
[17:02:16.726]                       invokeRestart <- base::invokeRestart
[17:02:16.726]                       is.null <- base::is.null
[17:02:16.726]                       muffled <- FALSE
[17:02:16.726]                       if (inherits(cond, "message")) {
[17:02:16.726]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.726]                         if (muffled) 
[17:02:16.726]                           invokeRestart("muffleMessage")
[17:02:16.726]                       }
[17:02:16.726]                       else if (inherits(cond, "warning")) {
[17:02:16.726]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.726]                         if (muffled) 
[17:02:16.726]                           invokeRestart("muffleWarning")
[17:02:16.726]                       }
[17:02:16.726]                       else if (inherits(cond, "condition")) {
[17:02:16.726]                         if (!is.null(pattern)) {
[17:02:16.726]                           computeRestarts <- base::computeRestarts
[17:02:16.726]                           grepl <- base::grepl
[17:02:16.726]                           restarts <- computeRestarts(cond)
[17:02:16.726]                           for (restart in restarts) {
[17:02:16.726]                             name <- restart$name
[17:02:16.726]                             if (is.null(name)) 
[17:02:16.726]                               next
[17:02:16.726]                             if (!grepl(pattern, name)) 
[17:02:16.726]                               next
[17:02:16.726]                             invokeRestart(restart)
[17:02:16.726]                             muffled <- TRUE
[17:02:16.726]                             break
[17:02:16.726]                           }
[17:02:16.726]                         }
[17:02:16.726]                       }
[17:02:16.726]                       invisible(muffled)
[17:02:16.726]                     }
[17:02:16.726]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.726]                   }
[17:02:16.726]                 }
[17:02:16.726]             }
[17:02:16.726]         }))
[17:02:16.726]     }, error = function(ex) {
[17:02:16.726]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.726]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.726]                 ...future.rng), started = ...future.startTime, 
[17:02:16.726]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.726]             version = "1.8"), class = "FutureResult")
[17:02:16.726]     }, finally = {
[17:02:16.726]         if (!identical(...future.workdir, getwd())) 
[17:02:16.726]             setwd(...future.workdir)
[17:02:16.726]         {
[17:02:16.726]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.726]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.726]             }
[17:02:16.726]             base::options(...future.oldOptions)
[17:02:16.726]             if (.Platform$OS.type == "windows") {
[17:02:16.726]                 old_names <- names(...future.oldEnvVars)
[17:02:16.726]                 envs <- base::Sys.getenv()
[17:02:16.726]                 names <- names(envs)
[17:02:16.726]                 common <- intersect(names, old_names)
[17:02:16.726]                 added <- setdiff(names, old_names)
[17:02:16.726]                 removed <- setdiff(old_names, names)
[17:02:16.726]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.726]                   envs[common]]
[17:02:16.726]                 NAMES <- toupper(changed)
[17:02:16.726]                 args <- list()
[17:02:16.726]                 for (kk in seq_along(NAMES)) {
[17:02:16.726]                   name <- changed[[kk]]
[17:02:16.726]                   NAME <- NAMES[[kk]]
[17:02:16.726]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.726]                     next
[17:02:16.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.726]                 }
[17:02:16.726]                 NAMES <- toupper(added)
[17:02:16.726]                 for (kk in seq_along(NAMES)) {
[17:02:16.726]                   name <- added[[kk]]
[17:02:16.726]                   NAME <- NAMES[[kk]]
[17:02:16.726]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.726]                     next
[17:02:16.726]                   args[[name]] <- ""
[17:02:16.726]                 }
[17:02:16.726]                 NAMES <- toupper(removed)
[17:02:16.726]                 for (kk in seq_along(NAMES)) {
[17:02:16.726]                   name <- removed[[kk]]
[17:02:16.726]                   NAME <- NAMES[[kk]]
[17:02:16.726]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.726]                     next
[17:02:16.726]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.726]                 }
[17:02:16.726]                 if (length(args) > 0) 
[17:02:16.726]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.726]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.726]             }
[17:02:16.726]             else {
[17:02:16.726]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.726]             }
[17:02:16.726]             {
[17:02:16.726]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.726]                   0L) {
[17:02:16.726]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.726]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.726]                   base::options(opts)
[17:02:16.726]                 }
[17:02:16.726]                 {
[17:02:16.726]                   {
[17:02:16.726]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.726]                     NULL
[17:02:16.726]                   }
[17:02:16.726]                   options(future.plan = NULL)
[17:02:16.726]                   if (is.na(NA_character_)) 
[17:02:16.726]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.726]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.726]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.726]                     .init = FALSE)
[17:02:16.726]                 }
[17:02:16.726]             }
[17:02:16.726]         }
[17:02:16.726]     })
[17:02:16.726]     if (TRUE) {
[17:02:16.726]         base::sink(type = "output", split = FALSE)
[17:02:16.726]         if (TRUE) {
[17:02:16.726]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.726]         }
[17:02:16.726]         else {
[17:02:16.726]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.726]         }
[17:02:16.726]         base::close(...future.stdout)
[17:02:16.726]         ...future.stdout <- NULL
[17:02:16.726]     }
[17:02:16.726]     ...future.result$conditions <- ...future.conditions
[17:02:16.726]     ...future.result$finished <- base::Sys.time()
[17:02:16.726]     ...future.result
[17:02:16.726] }
[17:02:16.729] requestCore(): workers = 2
[17:02:16.730] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:16.731] plan(): Setting new future strategy stack:
[17:02:16.732] List of future strategies:
[17:02:16.732] 1. sequential:
[17:02:16.732]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.732]    - tweaked: FALSE
[17:02:16.732]    - call: NULL
[17:02:16.733] plan(): nbrOfWorkers() = 1
[17:02:16.735] plan(): Setting new future strategy stack:
[17:02:16.735] List of future strategies:
[17:02:16.735] 1. multicore:
[17:02:16.735]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:16.735]    - tweaked: FALSE
[17:02:16.735]    - call: plan(strategy)
[17:02:16.740] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.741] result() for MulticoreFuture ...
[17:02:16.741] result() for MulticoreFuture ...
[17:02:16.742] result() for MulticoreFuture ... done
[17:02:16.742] result() for MulticoreFuture ... done
[17:02:16.742] result() for MulticoreFuture ...
[17:02:16.742] result() for MulticoreFuture ... done
[17:02:16.742] getGlobalsAndPackages() ...
[17:02:16.742] Searching for globals...
[17:02:16.743] 
[17:02:16.743] Searching for globals ... DONE
[17:02:16.743] - globals: [0] <none>
[17:02:16.743] getGlobalsAndPackages() ... DONE
[17:02:16.744] run() for ‘Future’ ...
[17:02:16.744] - state: ‘created’
[17:02:16.744] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:16.748] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.748] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:16.748]   - Field: ‘label’
[17:02:16.748]   - Field: ‘local’
[17:02:16.748]   - Field: ‘owner’
[17:02:16.749]   - Field: ‘envir’
[17:02:16.749]   - Field: ‘workers’
[17:02:16.749]   - Field: ‘packages’
[17:02:16.749]   - Field: ‘gc’
[17:02:16.749]   - Field: ‘job’
[17:02:16.749]   - Field: ‘conditions’
[17:02:16.749]   - Field: ‘expr’
[17:02:16.749]   - Field: ‘uuid’
[17:02:16.749]   - Field: ‘seed’
[17:02:16.750]   - Field: ‘version’
[17:02:16.750]   - Field: ‘result’
[17:02:16.750]   - Field: ‘asynchronous’
[17:02:16.750]   - Field: ‘calls’
[17:02:16.750]   - Field: ‘globals’
[17:02:16.750]   - Field: ‘stdout’
[17:02:16.750]   - Field: ‘earlySignal’
[17:02:16.750]   - Field: ‘lazy’
[17:02:16.750]   - Field: ‘state’
[17:02:16.751] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:16.751] - Launch lazy future ...
[17:02:16.751] Packages needed by the future expression (n = 0): <none>
[17:02:16.751] Packages needed by future strategies (n = 0): <none>
[17:02:16.752] {
[17:02:16.752]     {
[17:02:16.752]         {
[17:02:16.752]             ...future.startTime <- base::Sys.time()
[17:02:16.752]             {
[17:02:16.752]                 {
[17:02:16.752]                   {
[17:02:16.752]                     {
[17:02:16.752]                       base::local({
[17:02:16.752]                         has_future <- base::requireNamespace("future", 
[17:02:16.752]                           quietly = TRUE)
[17:02:16.752]                         if (has_future) {
[17:02:16.752]                           ns <- base::getNamespace("future")
[17:02:16.752]                           version <- ns[[".package"]][["version"]]
[17:02:16.752]                           if (is.null(version)) 
[17:02:16.752]                             version <- utils::packageVersion("future")
[17:02:16.752]                         }
[17:02:16.752]                         else {
[17:02:16.752]                           version <- NULL
[17:02:16.752]                         }
[17:02:16.752]                         if (!has_future || version < "1.8.0") {
[17:02:16.752]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.752]                             "", base::R.version$version.string), 
[17:02:16.752]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.752]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.752]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.752]                               "release", "version")], collapse = " "), 
[17:02:16.752]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.752]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.752]                             info)
[17:02:16.752]                           info <- base::paste(info, collapse = "; ")
[17:02:16.752]                           if (!has_future) {
[17:02:16.752]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.752]                               info)
[17:02:16.752]                           }
[17:02:16.752]                           else {
[17:02:16.752]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.752]                               info, version)
[17:02:16.752]                           }
[17:02:16.752]                           base::stop(msg)
[17:02:16.752]                         }
[17:02:16.752]                       })
[17:02:16.752]                     }
[17:02:16.752]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.752]                     base::options(mc.cores = 1L)
[17:02:16.752]                   }
[17:02:16.752]                   ...future.strategy.old <- future::plan("list")
[17:02:16.752]                   options(future.plan = NULL)
[17:02:16.752]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.752]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.752]                 }
[17:02:16.752]                 ...future.workdir <- getwd()
[17:02:16.752]             }
[17:02:16.752]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.752]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.752]         }
[17:02:16.752]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.752]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.752]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.752]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.752]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.752]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.752]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.752]             base::names(...future.oldOptions))
[17:02:16.752]     }
[17:02:16.752]     if (FALSE) {
[17:02:16.752]     }
[17:02:16.752]     else {
[17:02:16.752]         if (TRUE) {
[17:02:16.752]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.752]                 open = "w")
[17:02:16.752]         }
[17:02:16.752]         else {
[17:02:16.752]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.752]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.752]         }
[17:02:16.752]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.752]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.752]             base::sink(type = "output", split = FALSE)
[17:02:16.752]             base::close(...future.stdout)
[17:02:16.752]         }, add = TRUE)
[17:02:16.752]     }
[17:02:16.752]     ...future.frame <- base::sys.nframe()
[17:02:16.752]     ...future.conditions <- base::list()
[17:02:16.752]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.752]     if (FALSE) {
[17:02:16.752]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.752]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.752]     }
[17:02:16.752]     ...future.result <- base::tryCatch({
[17:02:16.752]         base::withCallingHandlers({
[17:02:16.752]             ...future.value <- base::withVisible(base::local({
[17:02:16.752]                 withCallingHandlers({
[17:02:16.752]                   42
[17:02:16.752]                 }, immediateCondition = function(cond) {
[17:02:16.752]                   save_rds <- function (object, pathname, ...) 
[17:02:16.752]                   {
[17:02:16.752]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:16.752]                     if (file_test("-f", pathname_tmp)) {
[17:02:16.752]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.752]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:16.752]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.752]                         fi_tmp[["mtime"]])
[17:02:16.752]                     }
[17:02:16.752]                     tryCatch({
[17:02:16.752]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:16.752]                     }, error = function(ex) {
[17:02:16.752]                       msg <- conditionMessage(ex)
[17:02:16.752]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.752]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:16.752]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.752]                         fi_tmp[["mtime"]], msg)
[17:02:16.752]                       ex$message <- msg
[17:02:16.752]                       stop(ex)
[17:02:16.752]                     })
[17:02:16.752]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:16.752]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:16.752]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:16.752]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.752]                       fi <- file.info(pathname)
[17:02:16.752]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:16.752]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.752]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:16.752]                         fi[["size"]], fi[["mtime"]])
[17:02:16.752]                       stop(msg)
[17:02:16.752]                     }
[17:02:16.752]                     invisible(pathname)
[17:02:16.752]                   }
[17:02:16.752]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:16.752]                     rootPath = tempdir()) 
[17:02:16.752]                   {
[17:02:16.752]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:16.752]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:16.752]                       tmpdir = path, fileext = ".rds")
[17:02:16.752]                     save_rds(obj, file)
[17:02:16.752]                   }
[17:02:16.752]                   saveImmediateCondition(cond, path = "/tmp/RtmpeaVlem/.future/immediateConditions")
[17:02:16.752]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.752]                   {
[17:02:16.752]                     inherits <- base::inherits
[17:02:16.752]                     invokeRestart <- base::invokeRestart
[17:02:16.752]                     is.null <- base::is.null
[17:02:16.752]                     muffled <- FALSE
[17:02:16.752]                     if (inherits(cond, "message")) {
[17:02:16.752]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.752]                       if (muffled) 
[17:02:16.752]                         invokeRestart("muffleMessage")
[17:02:16.752]                     }
[17:02:16.752]                     else if (inherits(cond, "warning")) {
[17:02:16.752]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.752]                       if (muffled) 
[17:02:16.752]                         invokeRestart("muffleWarning")
[17:02:16.752]                     }
[17:02:16.752]                     else if (inherits(cond, "condition")) {
[17:02:16.752]                       if (!is.null(pattern)) {
[17:02:16.752]                         computeRestarts <- base::computeRestarts
[17:02:16.752]                         grepl <- base::grepl
[17:02:16.752]                         restarts <- computeRestarts(cond)
[17:02:16.752]                         for (restart in restarts) {
[17:02:16.752]                           name <- restart$name
[17:02:16.752]                           if (is.null(name)) 
[17:02:16.752]                             next
[17:02:16.752]                           if (!grepl(pattern, name)) 
[17:02:16.752]                             next
[17:02:16.752]                           invokeRestart(restart)
[17:02:16.752]                           muffled <- TRUE
[17:02:16.752]                           break
[17:02:16.752]                         }
[17:02:16.752]                       }
[17:02:16.752]                     }
[17:02:16.752]                     invisible(muffled)
[17:02:16.752]                   }
[17:02:16.752]                   muffleCondition(cond)
[17:02:16.752]                 })
[17:02:16.752]             }))
[17:02:16.752]             future::FutureResult(value = ...future.value$value, 
[17:02:16.752]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.752]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.752]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.752]                     ...future.globalenv.names))
[17:02:16.752]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.752]         }, condition = base::local({
[17:02:16.752]             c <- base::c
[17:02:16.752]             inherits <- base::inherits
[17:02:16.752]             invokeRestart <- base::invokeRestart
[17:02:16.752]             length <- base::length
[17:02:16.752]             list <- base::list
[17:02:16.752]             seq.int <- base::seq.int
[17:02:16.752]             signalCondition <- base::signalCondition
[17:02:16.752]             sys.calls <- base::sys.calls
[17:02:16.752]             `[[` <- base::`[[`
[17:02:16.752]             `+` <- base::`+`
[17:02:16.752]             `<<-` <- base::`<<-`
[17:02:16.752]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.752]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.752]                   3L)]
[17:02:16.752]             }
[17:02:16.752]             function(cond) {
[17:02:16.752]                 is_error <- inherits(cond, "error")
[17:02:16.752]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.752]                   NULL)
[17:02:16.752]                 if (is_error) {
[17:02:16.752]                   sessionInformation <- function() {
[17:02:16.752]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.752]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.752]                       search = base::search(), system = base::Sys.info())
[17:02:16.752]                   }
[17:02:16.752]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.752]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.752]                     cond$call), session = sessionInformation(), 
[17:02:16.752]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.752]                   signalCondition(cond)
[17:02:16.752]                 }
[17:02:16.752]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.752]                 "immediateCondition"))) {
[17:02:16.752]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.752]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.752]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.752]                   if (TRUE && !signal) {
[17:02:16.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.752]                     {
[17:02:16.752]                       inherits <- base::inherits
[17:02:16.752]                       invokeRestart <- base::invokeRestart
[17:02:16.752]                       is.null <- base::is.null
[17:02:16.752]                       muffled <- FALSE
[17:02:16.752]                       if (inherits(cond, "message")) {
[17:02:16.752]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.752]                         if (muffled) 
[17:02:16.752]                           invokeRestart("muffleMessage")
[17:02:16.752]                       }
[17:02:16.752]                       else if (inherits(cond, "warning")) {
[17:02:16.752]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.752]                         if (muffled) 
[17:02:16.752]                           invokeRestart("muffleWarning")
[17:02:16.752]                       }
[17:02:16.752]                       else if (inherits(cond, "condition")) {
[17:02:16.752]                         if (!is.null(pattern)) {
[17:02:16.752]                           computeRestarts <- base::computeRestarts
[17:02:16.752]                           grepl <- base::grepl
[17:02:16.752]                           restarts <- computeRestarts(cond)
[17:02:16.752]                           for (restart in restarts) {
[17:02:16.752]                             name <- restart$name
[17:02:16.752]                             if (is.null(name)) 
[17:02:16.752]                               next
[17:02:16.752]                             if (!grepl(pattern, name)) 
[17:02:16.752]                               next
[17:02:16.752]                             invokeRestart(restart)
[17:02:16.752]                             muffled <- TRUE
[17:02:16.752]                             break
[17:02:16.752]                           }
[17:02:16.752]                         }
[17:02:16.752]                       }
[17:02:16.752]                       invisible(muffled)
[17:02:16.752]                     }
[17:02:16.752]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.752]                   }
[17:02:16.752]                 }
[17:02:16.752]                 else {
[17:02:16.752]                   if (TRUE) {
[17:02:16.752]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.752]                     {
[17:02:16.752]                       inherits <- base::inherits
[17:02:16.752]                       invokeRestart <- base::invokeRestart
[17:02:16.752]                       is.null <- base::is.null
[17:02:16.752]                       muffled <- FALSE
[17:02:16.752]                       if (inherits(cond, "message")) {
[17:02:16.752]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.752]                         if (muffled) 
[17:02:16.752]                           invokeRestart("muffleMessage")
[17:02:16.752]                       }
[17:02:16.752]                       else if (inherits(cond, "warning")) {
[17:02:16.752]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.752]                         if (muffled) 
[17:02:16.752]                           invokeRestart("muffleWarning")
[17:02:16.752]                       }
[17:02:16.752]                       else if (inherits(cond, "condition")) {
[17:02:16.752]                         if (!is.null(pattern)) {
[17:02:16.752]                           computeRestarts <- base::computeRestarts
[17:02:16.752]                           grepl <- base::grepl
[17:02:16.752]                           restarts <- computeRestarts(cond)
[17:02:16.752]                           for (restart in restarts) {
[17:02:16.752]                             name <- restart$name
[17:02:16.752]                             if (is.null(name)) 
[17:02:16.752]                               next
[17:02:16.752]                             if (!grepl(pattern, name)) 
[17:02:16.752]                               next
[17:02:16.752]                             invokeRestart(restart)
[17:02:16.752]                             muffled <- TRUE
[17:02:16.752]                             break
[17:02:16.752]                           }
[17:02:16.752]                         }
[17:02:16.752]                       }
[17:02:16.752]                       invisible(muffled)
[17:02:16.752]                     }
[17:02:16.752]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.752]                   }
[17:02:16.752]                 }
[17:02:16.752]             }
[17:02:16.752]         }))
[17:02:16.752]     }, error = function(ex) {
[17:02:16.752]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.752]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.752]                 ...future.rng), started = ...future.startTime, 
[17:02:16.752]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.752]             version = "1.8"), class = "FutureResult")
[17:02:16.752]     }, finally = {
[17:02:16.752]         if (!identical(...future.workdir, getwd())) 
[17:02:16.752]             setwd(...future.workdir)
[17:02:16.752]         {
[17:02:16.752]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.752]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.752]             }
[17:02:16.752]             base::options(...future.oldOptions)
[17:02:16.752]             if (.Platform$OS.type == "windows") {
[17:02:16.752]                 old_names <- names(...future.oldEnvVars)
[17:02:16.752]                 envs <- base::Sys.getenv()
[17:02:16.752]                 names <- names(envs)
[17:02:16.752]                 common <- intersect(names, old_names)
[17:02:16.752]                 added <- setdiff(names, old_names)
[17:02:16.752]                 removed <- setdiff(old_names, names)
[17:02:16.752]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.752]                   envs[common]]
[17:02:16.752]                 NAMES <- toupper(changed)
[17:02:16.752]                 args <- list()
[17:02:16.752]                 for (kk in seq_along(NAMES)) {
[17:02:16.752]                   name <- changed[[kk]]
[17:02:16.752]                   NAME <- NAMES[[kk]]
[17:02:16.752]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.752]                     next
[17:02:16.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.752]                 }
[17:02:16.752]                 NAMES <- toupper(added)
[17:02:16.752]                 for (kk in seq_along(NAMES)) {
[17:02:16.752]                   name <- added[[kk]]
[17:02:16.752]                   NAME <- NAMES[[kk]]
[17:02:16.752]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.752]                     next
[17:02:16.752]                   args[[name]] <- ""
[17:02:16.752]                 }
[17:02:16.752]                 NAMES <- toupper(removed)
[17:02:16.752]                 for (kk in seq_along(NAMES)) {
[17:02:16.752]                   name <- removed[[kk]]
[17:02:16.752]                   NAME <- NAMES[[kk]]
[17:02:16.752]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.752]                     next
[17:02:16.752]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.752]                 }
[17:02:16.752]                 if (length(args) > 0) 
[17:02:16.752]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.752]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.752]             }
[17:02:16.752]             else {
[17:02:16.752]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.752]             }
[17:02:16.752]             {
[17:02:16.752]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.752]                   0L) {
[17:02:16.752]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.752]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.752]                   base::options(opts)
[17:02:16.752]                 }
[17:02:16.752]                 {
[17:02:16.752]                   {
[17:02:16.752]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.752]                     NULL
[17:02:16.752]                   }
[17:02:16.752]                   options(future.plan = NULL)
[17:02:16.752]                   if (is.na(NA_character_)) 
[17:02:16.752]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.752]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.752]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.752]                     .init = FALSE)
[17:02:16.752]                 }
[17:02:16.752]             }
[17:02:16.752]         }
[17:02:16.752]     })
[17:02:16.752]     if (TRUE) {
[17:02:16.752]         base::sink(type = "output", split = FALSE)
[17:02:16.752]         if (TRUE) {
[17:02:16.752]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.752]         }
[17:02:16.752]         else {
[17:02:16.752]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.752]         }
[17:02:16.752]         base::close(...future.stdout)
[17:02:16.752]         ...future.stdout <- NULL
[17:02:16.752]     }
[17:02:16.752]     ...future.result$conditions <- ...future.conditions
[17:02:16.752]     ...future.result$finished <- base::Sys.time()
[17:02:16.752]     ...future.result
[17:02:16.752] }
[17:02:16.754] requestCore(): workers = 2
[17:02:16.756] MulticoreFuture started
[17:02:16.756] - Launch lazy future ... done
[17:02:16.757] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
[17:02:16.757] plan(): Setting new future strategy stack:
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:16.757] List of future strategies:
[17:02:16.757] 1. sequential:
[17:02:16.757]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.757]    - tweaked: FALSE
[17:02:16.757]    - call: NULL
[17:02:16.758] plan(): nbrOfWorkers() = 1
[17:02:16.760] plan(): Setting new future strategy stack:
[17:02:16.760] List of future strategies:
[17:02:16.760] 1. multicore:
[17:02:16.760]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:16.760]    - tweaked: FALSE
[17:02:16.760]    - call: plan(strategy)
[17:02:16.766] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.766] result() for MulticoreFuture ...
[17:02:16.768] result() for MulticoreFuture ...
[17:02:16.768] result() for MulticoreFuture ... done
[17:02:16.768] result() for MulticoreFuture ... done
[17:02:16.768] result() for MulticoreFuture ...
[17:02:16.768] result() for MulticoreFuture ... done
[17:02:16.769] getGlobalsAndPackages() ...
[17:02:16.769] Searching for globals...
[17:02:16.770] - globals found: [1] ‘{’
[17:02:16.770] Searching for globals ... DONE
[17:02:16.770] Resolving globals: FALSE
[17:02:16.770] 
[17:02:16.770] 
[17:02:16.771] getGlobalsAndPackages() ... DONE
[17:02:16.771] run() for ‘Future’ ...
[17:02:16.771] - state: ‘created’
[17:02:16.771] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[17:02:16.775] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.776] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[17:02:16.776]   - Field: ‘label’
[17:02:16.776]   - Field: ‘local’
[17:02:16.776]   - Field: ‘owner’
[17:02:16.776]   - Field: ‘envir’
[17:02:16.776]   - Field: ‘workers’
[17:02:16.776]   - Field: ‘packages’
[17:02:16.776]   - Field: ‘gc’
[17:02:16.776]   - Field: ‘job’
[17:02:16.777]   - Field: ‘conditions’
[17:02:16.777]   - Field: ‘expr’
[17:02:16.777]   - Field: ‘uuid’
[17:02:16.777]   - Field: ‘seed’
[17:02:16.777]   - Field: ‘version’
[17:02:16.777]   - Field: ‘result’
[17:02:16.777]   - Field: ‘asynchronous’
[17:02:16.777]   - Field: ‘calls’
[17:02:16.777]   - Field: ‘globals’
[17:02:16.778]   - Field: ‘stdout’
[17:02:16.778]   - Field: ‘earlySignal’
[17:02:16.778]   - Field: ‘lazy’
[17:02:16.778]   - Field: ‘state’
[17:02:16.778] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[17:02:16.778] - Launch lazy future ...
[17:02:16.778] Packages needed by the future expression (n = 0): <none>
[17:02:16.779] Packages needed by future strategies (n = 0): <none>
[17:02:16.779] {
[17:02:16.779]     {
[17:02:16.779]         {
[17:02:16.779]             ...future.startTime <- base::Sys.time()
[17:02:16.779]             {
[17:02:16.779]                 {
[17:02:16.779]                   {
[17:02:16.779]                     {
[17:02:16.779]                       base::local({
[17:02:16.779]                         has_future <- base::requireNamespace("future", 
[17:02:16.779]                           quietly = TRUE)
[17:02:16.779]                         if (has_future) {
[17:02:16.779]                           ns <- base::getNamespace("future")
[17:02:16.779]                           version <- ns[[".package"]][["version"]]
[17:02:16.779]                           if (is.null(version)) 
[17:02:16.779]                             version <- utils::packageVersion("future")
[17:02:16.779]                         }
[17:02:16.779]                         else {
[17:02:16.779]                           version <- NULL
[17:02:16.779]                         }
[17:02:16.779]                         if (!has_future || version < "1.8.0") {
[17:02:16.779]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:16.779]                             "", base::R.version$version.string), 
[17:02:16.779]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:16.779]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:16.779]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:16.779]                               "release", "version")], collapse = " "), 
[17:02:16.779]                             hostname = base::Sys.info()[["nodename"]])
[17:02:16.779]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:16.779]                             info)
[17:02:16.779]                           info <- base::paste(info, collapse = "; ")
[17:02:16.779]                           if (!has_future) {
[17:02:16.779]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:16.779]                               info)
[17:02:16.779]                           }
[17:02:16.779]                           else {
[17:02:16.779]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:16.779]                               info, version)
[17:02:16.779]                           }
[17:02:16.779]                           base::stop(msg)
[17:02:16.779]                         }
[17:02:16.779]                       })
[17:02:16.779]                     }
[17:02:16.779]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:16.779]                     base::options(mc.cores = 1L)
[17:02:16.779]                   }
[17:02:16.779]                   ...future.strategy.old <- future::plan("list")
[17:02:16.779]                   options(future.plan = NULL)
[17:02:16.779]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.779]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:16.779]                 }
[17:02:16.779]                 ...future.workdir <- getwd()
[17:02:16.779]             }
[17:02:16.779]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:16.779]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:16.779]         }
[17:02:16.779]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:16.779]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:16.779]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:16.779]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:16.779]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:16.779]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:16.779]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:16.779]             base::names(...future.oldOptions))
[17:02:16.779]     }
[17:02:16.779]     if (FALSE) {
[17:02:16.779]     }
[17:02:16.779]     else {
[17:02:16.779]         if (TRUE) {
[17:02:16.779]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:16.779]                 open = "w")
[17:02:16.779]         }
[17:02:16.779]         else {
[17:02:16.779]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:16.779]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:16.779]         }
[17:02:16.779]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:16.779]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:16.779]             base::sink(type = "output", split = FALSE)
[17:02:16.779]             base::close(...future.stdout)
[17:02:16.779]         }, add = TRUE)
[17:02:16.779]     }
[17:02:16.779]     ...future.frame <- base::sys.nframe()
[17:02:16.779]     ...future.conditions <- base::list()
[17:02:16.779]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:16.779]     if (FALSE) {
[17:02:16.779]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:16.779]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:16.779]     }
[17:02:16.779]     ...future.result <- base::tryCatch({
[17:02:16.779]         base::withCallingHandlers({
[17:02:16.779]             ...future.value <- base::withVisible(base::local({
[17:02:16.779]                 withCallingHandlers({
[17:02:16.779]                   {
[17:02:16.779]                     42
[17:02:16.779]                   }
[17:02:16.779]                 }, immediateCondition = function(cond) {
[17:02:16.779]                   save_rds <- function (object, pathname, ...) 
[17:02:16.779]                   {
[17:02:16.779]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[17:02:16.779]                     if (file_test("-f", pathname_tmp)) {
[17:02:16.779]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.779]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[17:02:16.779]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.779]                         fi_tmp[["mtime"]])
[17:02:16.779]                     }
[17:02:16.779]                     tryCatch({
[17:02:16.779]                       saveRDS(object, file = pathname_tmp, ...)
[17:02:16.779]                     }, error = function(ex) {
[17:02:16.779]                       msg <- conditionMessage(ex)
[17:02:16.779]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.779]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[17:02:16.779]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.779]                         fi_tmp[["mtime"]], msg)
[17:02:16.779]                       ex$message <- msg
[17:02:16.779]                       stop(ex)
[17:02:16.779]                     })
[17:02:16.779]                     stopifnot(file_test("-f", pathname_tmp))
[17:02:16.779]                     res <- file.rename(from = pathname_tmp, to = pathname)
[17:02:16.779]                     if (!res || file_test("-f", pathname_tmp)) {
[17:02:16.779]                       fi_tmp <- file.info(pathname_tmp)
[17:02:16.779]                       fi <- file.info(pathname)
[17:02:16.779]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[17:02:16.779]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[17:02:16.779]                         fi_tmp[["mtime"]], sQuote(pathname), 
[17:02:16.779]                         fi[["size"]], fi[["mtime"]])
[17:02:16.779]                       stop(msg)
[17:02:16.779]                     }
[17:02:16.779]                     invisible(pathname)
[17:02:16.779]                   }
[17:02:16.779]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[17:02:16.779]                     rootPath = tempdir()) 
[17:02:16.779]                   {
[17:02:16.779]                     obj <- list(time = Sys.time(), condition = cond)
[17:02:16.779]                     file <- tempfile(pattern = class(cond)[1], 
[17:02:16.779]                       tmpdir = path, fileext = ".rds")
[17:02:16.779]                     save_rds(obj, file)
[17:02:16.779]                   }
[17:02:16.779]                   saveImmediateCondition(cond, path = "/tmp/RtmpeaVlem/.future/immediateConditions")
[17:02:16.779]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.779]                   {
[17:02:16.779]                     inherits <- base::inherits
[17:02:16.779]                     invokeRestart <- base::invokeRestart
[17:02:16.779]                     is.null <- base::is.null
[17:02:16.779]                     muffled <- FALSE
[17:02:16.779]                     if (inherits(cond, "message")) {
[17:02:16.779]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:16.779]                       if (muffled) 
[17:02:16.779]                         invokeRestart("muffleMessage")
[17:02:16.779]                     }
[17:02:16.779]                     else if (inherits(cond, "warning")) {
[17:02:16.779]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:16.779]                       if (muffled) 
[17:02:16.779]                         invokeRestart("muffleWarning")
[17:02:16.779]                     }
[17:02:16.779]                     else if (inherits(cond, "condition")) {
[17:02:16.779]                       if (!is.null(pattern)) {
[17:02:16.779]                         computeRestarts <- base::computeRestarts
[17:02:16.779]                         grepl <- base::grepl
[17:02:16.779]                         restarts <- computeRestarts(cond)
[17:02:16.779]                         for (restart in restarts) {
[17:02:16.779]                           name <- restart$name
[17:02:16.779]                           if (is.null(name)) 
[17:02:16.779]                             next
[17:02:16.779]                           if (!grepl(pattern, name)) 
[17:02:16.779]                             next
[17:02:16.779]                           invokeRestart(restart)
[17:02:16.779]                           muffled <- TRUE
[17:02:16.779]                           break
[17:02:16.779]                         }
[17:02:16.779]                       }
[17:02:16.779]                     }
[17:02:16.779]                     invisible(muffled)
[17:02:16.779]                   }
[17:02:16.779]                   muffleCondition(cond)
[17:02:16.779]                 })
[17:02:16.779]             }))
[17:02:16.779]             future::FutureResult(value = ...future.value$value, 
[17:02:16.779]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.779]                   ...future.rng), globalenv = if (FALSE) 
[17:02:16.779]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:16.779]                     ...future.globalenv.names))
[17:02:16.779]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:16.779]         }, condition = base::local({
[17:02:16.779]             c <- base::c
[17:02:16.779]             inherits <- base::inherits
[17:02:16.779]             invokeRestart <- base::invokeRestart
[17:02:16.779]             length <- base::length
[17:02:16.779]             list <- base::list
[17:02:16.779]             seq.int <- base::seq.int
[17:02:16.779]             signalCondition <- base::signalCondition
[17:02:16.779]             sys.calls <- base::sys.calls
[17:02:16.779]             `[[` <- base::`[[`
[17:02:16.779]             `+` <- base::`+`
[17:02:16.779]             `<<-` <- base::`<<-`
[17:02:16.779]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:16.779]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:16.779]                   3L)]
[17:02:16.779]             }
[17:02:16.779]             function(cond) {
[17:02:16.779]                 is_error <- inherits(cond, "error")
[17:02:16.779]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:16.779]                   NULL)
[17:02:16.779]                 if (is_error) {
[17:02:16.779]                   sessionInformation <- function() {
[17:02:16.779]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:16.779]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:16.779]                       search = base::search(), system = base::Sys.info())
[17:02:16.779]                   }
[17:02:16.779]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.779]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:16.779]                     cond$call), session = sessionInformation(), 
[17:02:16.779]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:16.779]                   signalCondition(cond)
[17:02:16.779]                 }
[17:02:16.779]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:16.779]                 "immediateCondition"))) {
[17:02:16.779]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:16.779]                   ...future.conditions[[length(...future.conditions) + 
[17:02:16.779]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:16.779]                   if (TRUE && !signal) {
[17:02:16.779]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.779]                     {
[17:02:16.779]                       inherits <- base::inherits
[17:02:16.779]                       invokeRestart <- base::invokeRestart
[17:02:16.779]                       is.null <- base::is.null
[17:02:16.779]                       muffled <- FALSE
[17:02:16.779]                       if (inherits(cond, "message")) {
[17:02:16.779]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.779]                         if (muffled) 
[17:02:16.779]                           invokeRestart("muffleMessage")
[17:02:16.779]                       }
[17:02:16.779]                       else if (inherits(cond, "warning")) {
[17:02:16.779]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.779]                         if (muffled) 
[17:02:16.779]                           invokeRestart("muffleWarning")
[17:02:16.779]                       }
[17:02:16.779]                       else if (inherits(cond, "condition")) {
[17:02:16.779]                         if (!is.null(pattern)) {
[17:02:16.779]                           computeRestarts <- base::computeRestarts
[17:02:16.779]                           grepl <- base::grepl
[17:02:16.779]                           restarts <- computeRestarts(cond)
[17:02:16.779]                           for (restart in restarts) {
[17:02:16.779]                             name <- restart$name
[17:02:16.779]                             if (is.null(name)) 
[17:02:16.779]                               next
[17:02:16.779]                             if (!grepl(pattern, name)) 
[17:02:16.779]                               next
[17:02:16.779]                             invokeRestart(restart)
[17:02:16.779]                             muffled <- TRUE
[17:02:16.779]                             break
[17:02:16.779]                           }
[17:02:16.779]                         }
[17:02:16.779]                       }
[17:02:16.779]                       invisible(muffled)
[17:02:16.779]                     }
[17:02:16.779]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.779]                   }
[17:02:16.779]                 }
[17:02:16.779]                 else {
[17:02:16.779]                   if (TRUE) {
[17:02:16.779]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:16.779]                     {
[17:02:16.779]                       inherits <- base::inherits
[17:02:16.779]                       invokeRestart <- base::invokeRestart
[17:02:16.779]                       is.null <- base::is.null
[17:02:16.779]                       muffled <- FALSE
[17:02:16.779]                       if (inherits(cond, "message")) {
[17:02:16.779]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:16.779]                         if (muffled) 
[17:02:16.779]                           invokeRestart("muffleMessage")
[17:02:16.779]                       }
[17:02:16.779]                       else if (inherits(cond, "warning")) {
[17:02:16.779]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:16.779]                         if (muffled) 
[17:02:16.779]                           invokeRestart("muffleWarning")
[17:02:16.779]                       }
[17:02:16.779]                       else if (inherits(cond, "condition")) {
[17:02:16.779]                         if (!is.null(pattern)) {
[17:02:16.779]                           computeRestarts <- base::computeRestarts
[17:02:16.779]                           grepl <- base::grepl
[17:02:16.779]                           restarts <- computeRestarts(cond)
[17:02:16.779]                           for (restart in restarts) {
[17:02:16.779]                             name <- restart$name
[17:02:16.779]                             if (is.null(name)) 
[17:02:16.779]                               next
[17:02:16.779]                             if (!grepl(pattern, name)) 
[17:02:16.779]                               next
[17:02:16.779]                             invokeRestart(restart)
[17:02:16.779]                             muffled <- TRUE
[17:02:16.779]                             break
[17:02:16.779]                           }
[17:02:16.779]                         }
[17:02:16.779]                       }
[17:02:16.779]                       invisible(muffled)
[17:02:16.779]                     }
[17:02:16.779]                     muffleCondition(cond, pattern = "^muffle")
[17:02:16.779]                   }
[17:02:16.779]                 }
[17:02:16.779]             }
[17:02:16.779]         }))
[17:02:16.779]     }, error = function(ex) {
[17:02:16.779]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:16.779]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:16.779]                 ...future.rng), started = ...future.startTime, 
[17:02:16.779]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:16.779]             version = "1.8"), class = "FutureResult")
[17:02:16.779]     }, finally = {
[17:02:16.779]         if (!identical(...future.workdir, getwd())) 
[17:02:16.779]             setwd(...future.workdir)
[17:02:16.779]         {
[17:02:16.779]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:16.779]                 ...future.oldOptions$nwarnings <- NULL
[17:02:16.779]             }
[17:02:16.779]             base::options(...future.oldOptions)
[17:02:16.779]             if (.Platform$OS.type == "windows") {
[17:02:16.779]                 old_names <- names(...future.oldEnvVars)
[17:02:16.779]                 envs <- base::Sys.getenv()
[17:02:16.779]                 names <- names(envs)
[17:02:16.779]                 common <- intersect(names, old_names)
[17:02:16.779]                 added <- setdiff(names, old_names)
[17:02:16.779]                 removed <- setdiff(old_names, names)
[17:02:16.779]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:16.779]                   envs[common]]
[17:02:16.779]                 NAMES <- toupper(changed)
[17:02:16.779]                 args <- list()
[17:02:16.779]                 for (kk in seq_along(NAMES)) {
[17:02:16.779]                   name <- changed[[kk]]
[17:02:16.779]                   NAME <- NAMES[[kk]]
[17:02:16.779]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.779]                     next
[17:02:16.779]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.779]                 }
[17:02:16.779]                 NAMES <- toupper(added)
[17:02:16.779]                 for (kk in seq_along(NAMES)) {
[17:02:16.779]                   name <- added[[kk]]
[17:02:16.779]                   NAME <- NAMES[[kk]]
[17:02:16.779]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.779]                     next
[17:02:16.779]                   args[[name]] <- ""
[17:02:16.779]                 }
[17:02:16.779]                 NAMES <- toupper(removed)
[17:02:16.779]                 for (kk in seq_along(NAMES)) {
[17:02:16.779]                   name <- removed[[kk]]
[17:02:16.779]                   NAME <- NAMES[[kk]]
[17:02:16.779]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:16.779]                     next
[17:02:16.779]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:16.779]                 }
[17:02:16.779]                 if (length(args) > 0) 
[17:02:16.779]                   base::do.call(base::Sys.setenv, args = args)
[17:02:16.779]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:16.779]             }
[17:02:16.779]             else {
[17:02:16.779]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:16.779]             }
[17:02:16.779]             {
[17:02:16.779]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:16.779]                   0L) {
[17:02:16.779]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:16.779]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:16.779]                   base::options(opts)
[17:02:16.779]                 }
[17:02:16.779]                 {
[17:02:16.779]                   {
[17:02:16.779]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:16.779]                     NULL
[17:02:16.779]                   }
[17:02:16.779]                   options(future.plan = NULL)
[17:02:16.779]                   if (is.na(NA_character_)) 
[17:02:16.779]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:16.779]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:16.779]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:16.779]                     .init = FALSE)
[17:02:16.779]                 }
[17:02:16.779]             }
[17:02:16.779]         }
[17:02:16.779]     })
[17:02:16.779]     if (TRUE) {
[17:02:16.779]         base::sink(type = "output", split = FALSE)
[17:02:16.779]         if (TRUE) {
[17:02:16.779]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:16.779]         }
[17:02:16.779]         else {
[17:02:16.779]             ...future.result["stdout"] <- base::list(NULL)
[17:02:16.779]         }
[17:02:16.779]         base::close(...future.stdout)
[17:02:16.779]         ...future.stdout <- NULL
[17:02:16.779]     }
[17:02:16.779]     ...future.result$conditions <- ...future.conditions
[17:02:16.779]     ...future.result$finished <- base::Sys.time()
[17:02:16.779]     ...future.result
[17:02:16.779] }
[17:02:16.782] requestCore(): workers = 2
[17:02:16.784] MulticoreFuture started
[17:02:16.784] - Launch lazy future ... done
[17:02:16.784] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
[17:02:16.785] plan(): Setting new future strategy stack:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:16.785] List of future strategies:
[17:02:16.785] 1. sequential:
[17:02:16.785]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:16.785]    - tweaked: FALSE
[17:02:16.785]    - call: NULL
[17:02:16.786] plan(): nbrOfWorkers() = 1
[17:02:16.788] plan(): Setting new future strategy stack:
[17:02:16.788] List of future strategies:
[17:02:16.788] 1. multicore:
[17:02:16.788]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[17:02:16.788]    - tweaked: FALSE
[17:02:16.788]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:16.796] result() for MulticoreFuture ...
[17:02:16.799] plan(): nbrOfWorkers() = 2
[17:02:16.800] result() for MulticoreFuture ...
[17:02:16.800] result() for MulticoreFuture ... done
[17:02:16.801] result() for MulticoreFuture ... done
[17:02:16.801] result() for MulticoreFuture ...
[17:02:16.804] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[17:02:16.804] plan(): Setting new future strategy stack:
[17:02:16.805] List of future strategies:
[17:02:16.805] 1. multisession:
[17:02:16.805]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:16.805]    - tweaked: FALSE
[17:02:16.805]    - call: plan(strategy)
[17:02:16.805] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[17:02:16.805] multisession:
[17:02:16.805] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[17:02:16.805] - tweaked: FALSE
[17:02:16.805] - call: plan(strategy)
[17:02:16.811] getGlobalsAndPackages() ...
[17:02:16.812] Not searching for globals
[17:02:16.812] - globals: [0] <none>
[17:02:16.812] getGlobalsAndPackages() ... DONE
[17:02:16.812] [local output] makeClusterPSOCK() ...
[17:02:16.856] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[17:02:16.857] [local output] Base port: 11276
[17:02:16.857] [local output] Getting setup options for 2 cluster nodes ...
[17:02:16.857] [local output]  - Node 1 of 2 ...
[17:02:16.858] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:16.858] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpeaVlem/worker.rank=1.parallelly.parent=40769.9f4174d1dbdf.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpeaVlem/worker.rank=1.parallelly.parent=40769.9f4174d1dbdf.pid")'’
[17:02:17.049] - Possible to infer worker's PID: TRUE
[17:02:17.050] [local output] Rscript port: 11276

[17:02:17.050] [local output]  - Node 2 of 2 ...
[17:02:17.050] [local output] localMachine=TRUE => revtunnel=FALSE

[17:02:17.051] [local output] Rscript port: 11276

[17:02:17.051] [local output] Getting setup options for 2 cluster nodes ... done
[17:02:17.051] [local output]  - Parallel setup requested for some PSOCK nodes
[17:02:17.052] [local output] Setting up PSOCK nodes in parallel
[17:02:17.052] List of 36
[17:02:17.052]  $ worker          : chr "localhost"
[17:02:17.052]   ..- attr(*, "localhost")= logi TRUE
[17:02:17.052]  $ master          : chr "localhost"
[17:02:17.052]  $ port            : int 11276
[17:02:17.052]  $ connectTimeout  : num 120
[17:02:17.052]  $ timeout         : num 2592000
[17:02:17.052]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[17:02:17.052]  $ homogeneous     : logi TRUE
[17:02:17.052]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[17:02:17.052]  $ rscript_envs    : NULL
[17:02:17.052]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:17.052]  $ rscript_startup : NULL
[17:02:17.052]  $ rscript_sh      : chr "sh"
[17:02:17.052]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:17.052]  $ methods         : logi TRUE
[17:02:17.052]  $ socketOptions   : chr "no-delay"
[17:02:17.052]  $ useXDR          : logi FALSE
[17:02:17.052]  $ outfile         : chr "/dev/null"
[17:02:17.052]  $ renice          : int NA
[17:02:17.052]  $ rshcmd          : NULL
[17:02:17.052]  $ user            : chr(0) 
[17:02:17.052]  $ revtunnel       : logi FALSE
[17:02:17.052]  $ rshlogfile      : NULL
[17:02:17.052]  $ rshopts         : chr(0) 
[17:02:17.052]  $ rank            : int 1
[17:02:17.052]  $ manual          : logi FALSE
[17:02:17.052]  $ dryrun          : logi FALSE
[17:02:17.052]  $ quiet           : logi FALSE
[17:02:17.052]  $ setup_strategy  : chr "parallel"
[17:02:17.052]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:17.052]  $ pidfile         : chr "/tmp/RtmpeaVlem/worker.rank=1.parallelly.parent=40769.9f4174d1dbdf.pid"
[17:02:17.052]  $ rshcmd_label    : NULL
[17:02:17.052]  $ rsh_call        : NULL
[17:02:17.052]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[17:02:17.052]  $ localMachine    : logi TRUE
[17:02:17.052]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[17:02:17.052]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[17:02:17.052]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[17:02:17.052]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[17:02:17.052]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[17:02:17.052]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[17:02:17.052]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[17:02:17.052]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[17:02:17.052]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[17:02:17.052]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[17:02:17.052]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[17:02:17.052]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[17:02:17.052]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[17:02:17.052]  $ arguments       :List of 28
[17:02:17.052]   ..$ worker          : chr "localhost"
[17:02:17.052]   ..$ master          : NULL
[17:02:17.052]   ..$ port            : int 11276
[17:02:17.052]   ..$ connectTimeout  : num 120
[17:02:17.052]   ..$ timeout         : num 2592000
[17:02:17.052]   ..$ rscript         : NULL
[17:02:17.052]   ..$ homogeneous     : NULL
[17:02:17.052]   ..$ rscript_args    : NULL
[17:02:17.052]   ..$ rscript_envs    : NULL
[17:02:17.052]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[17:02:17.052]   ..$ rscript_startup : NULL
[17:02:17.052]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[17:02:17.052]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[17:02:17.052]   ..$ methods         : logi TRUE
[17:02:17.052]   ..$ socketOptions   : chr "no-delay"
[17:02:17.052]   ..$ useXDR          : logi FALSE
[17:02:17.052]   ..$ outfile         : chr "/dev/null"
[17:02:17.052]   ..$ renice          : int NA
[17:02:17.052]   ..$ rshcmd          : NULL
[17:02:17.052]   ..$ user            : NULL
[17:02:17.052]   ..$ revtunnel       : logi NA
[17:02:17.052]   ..$ rshlogfile      : NULL
[17:02:17.052]   ..$ rshopts         : NULL
[17:02:17.052]   ..$ rank            : int 1
[17:02:17.052]   ..$ manual          : logi FALSE
[17:02:17.052]   ..$ dryrun          : logi FALSE
[17:02:17.052]   ..$ quiet           : logi FALSE
[17:02:17.052]   ..$ setup_strategy  : chr "parallel"
[17:02:17.052]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[17:02:17.070] [local output] System call to launch all workers:
[17:02:17.070] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpeaVlem/worker.rank=1.parallelly.parent=40769.9f4174d1dbdf.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11276 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[17:02:17.071] [local output] Starting PSOCK main server
[17:02:17.076] [local output] Workers launched
[17:02:17.076] [local output] Waiting for workers to connect back
[17:02:17.077]  - [local output] 0 workers out of 2 ready
[17:02:17.328]  - [local output] 0 workers out of 2 ready
[17:02:17.329]  - [local output] 1 workers out of 2 ready
[17:02:17.331]  - [local output] 1 workers out of 2 ready
[17:02:17.331]  - [local output] 2 workers out of 2 ready
[17:02:17.331] [local output] Launching of workers completed
[17:02:17.332] [local output] Collecting session information from workers
[17:02:17.333] [local output]  - Worker #1 of 2
[17:02:17.333] [local output]  - Worker #2 of 2
[17:02:17.334] [local output] makeClusterPSOCK() ... done
[17:02:17.349] Packages needed by the future expression (n = 0): <none>
[17:02:17.349] Packages needed by future strategies (n = 0): <none>
[17:02:17.350] {
[17:02:17.350]     {
[17:02:17.350]         {
[17:02:17.350]             ...future.startTime <- base::Sys.time()
[17:02:17.350]             {
[17:02:17.350]                 {
[17:02:17.350]                   {
[17:02:17.350]                     {
[17:02:17.350]                       base::local({
[17:02:17.350]                         has_future <- base::requireNamespace("future", 
[17:02:17.350]                           quietly = TRUE)
[17:02:17.350]                         if (has_future) {
[17:02:17.350]                           ns <- base::getNamespace("future")
[17:02:17.350]                           version <- ns[[".package"]][["version"]]
[17:02:17.350]                           if (is.null(version)) 
[17:02:17.350]                             version <- utils::packageVersion("future")
[17:02:17.350]                         }
[17:02:17.350]                         else {
[17:02:17.350]                           version <- NULL
[17:02:17.350]                         }
[17:02:17.350]                         if (!has_future || version < "1.8.0") {
[17:02:17.350]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:17.350]                             "", base::R.version$version.string), 
[17:02:17.350]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:17.350]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:17.350]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:17.350]                               "release", "version")], collapse = " "), 
[17:02:17.350]                             hostname = base::Sys.info()[["nodename"]])
[17:02:17.350]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:17.350]                             info)
[17:02:17.350]                           info <- base::paste(info, collapse = "; ")
[17:02:17.350]                           if (!has_future) {
[17:02:17.350]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:17.350]                               info)
[17:02:17.350]                           }
[17:02:17.350]                           else {
[17:02:17.350]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:17.350]                               info, version)
[17:02:17.350]                           }
[17:02:17.350]                           base::stop(msg)
[17:02:17.350]                         }
[17:02:17.350]                       })
[17:02:17.350]                     }
[17:02:17.350]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:17.350]                     base::options(mc.cores = 1L)
[17:02:17.350]                   }
[17:02:17.350]                   ...future.strategy.old <- future::plan("list")
[17:02:17.350]                   options(future.plan = NULL)
[17:02:17.350]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.350]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:17.350]                 }
[17:02:17.350]                 ...future.workdir <- getwd()
[17:02:17.350]             }
[17:02:17.350]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:17.350]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:17.350]         }
[17:02:17.350]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:17.350]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:17.350]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:17.350]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:17.350]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:17.350]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:17.350]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:17.350]             base::names(...future.oldOptions))
[17:02:17.350]     }
[17:02:17.350]     if (FALSE) {
[17:02:17.350]     }
[17:02:17.350]     else {
[17:02:17.350]         if (TRUE) {
[17:02:17.350]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:17.350]                 open = "w")
[17:02:17.350]         }
[17:02:17.350]         else {
[17:02:17.350]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:17.350]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:17.350]         }
[17:02:17.350]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:17.350]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:17.350]             base::sink(type = "output", split = FALSE)
[17:02:17.350]             base::close(...future.stdout)
[17:02:17.350]         }, add = TRUE)
[17:02:17.350]     }
[17:02:17.350]     ...future.frame <- base::sys.nframe()
[17:02:17.350]     ...future.conditions <- base::list()
[17:02:17.350]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:17.350]     if (FALSE) {
[17:02:17.350]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:17.350]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:17.350]     }
[17:02:17.350]     ...future.result <- base::tryCatch({
[17:02:17.350]         base::withCallingHandlers({
[17:02:17.350]             ...future.value <- base::withVisible(base::local({
[17:02:17.350]                 ...future.makeSendCondition <- base::local({
[17:02:17.350]                   sendCondition <- NULL
[17:02:17.350]                   function(frame = 1L) {
[17:02:17.350]                     if (is.function(sendCondition)) 
[17:02:17.350]                       return(sendCondition)
[17:02:17.350]                     ns <- getNamespace("parallel")
[17:02:17.350]                     if (exists("sendData", mode = "function", 
[17:02:17.350]                       envir = ns)) {
[17:02:17.350]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:17.350]                         envir = ns)
[17:02:17.350]                       envir <- sys.frame(frame)
[17:02:17.350]                       master <- NULL
[17:02:17.350]                       while (!identical(envir, .GlobalEnv) && 
[17:02:17.350]                         !identical(envir, emptyenv())) {
[17:02:17.350]                         if (exists("master", mode = "list", envir = envir, 
[17:02:17.350]                           inherits = FALSE)) {
[17:02:17.350]                           master <- get("master", mode = "list", 
[17:02:17.350]                             envir = envir, inherits = FALSE)
[17:02:17.350]                           if (inherits(master, c("SOCKnode", 
[17:02:17.350]                             "SOCK0node"))) {
[17:02:17.350]                             sendCondition <<- function(cond) {
[17:02:17.350]                               data <- list(type = "VALUE", value = cond, 
[17:02:17.350]                                 success = TRUE)
[17:02:17.350]                               parallel_sendData(master, data)
[17:02:17.350]                             }
[17:02:17.350]                             return(sendCondition)
[17:02:17.350]                           }
[17:02:17.350]                         }
[17:02:17.350]                         frame <- frame + 1L
[17:02:17.350]                         envir <- sys.frame(frame)
[17:02:17.350]                       }
[17:02:17.350]                     }
[17:02:17.350]                     sendCondition <<- function(cond) NULL
[17:02:17.350]                   }
[17:02:17.350]                 })
[17:02:17.350]                 withCallingHandlers({
[17:02:17.350]                   NA
[17:02:17.350]                 }, immediateCondition = function(cond) {
[17:02:17.350]                   sendCondition <- ...future.makeSendCondition()
[17:02:17.350]                   sendCondition(cond)
[17:02:17.350]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.350]                   {
[17:02:17.350]                     inherits <- base::inherits
[17:02:17.350]                     invokeRestart <- base::invokeRestart
[17:02:17.350]                     is.null <- base::is.null
[17:02:17.350]                     muffled <- FALSE
[17:02:17.350]                     if (inherits(cond, "message")) {
[17:02:17.350]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:17.350]                       if (muffled) 
[17:02:17.350]                         invokeRestart("muffleMessage")
[17:02:17.350]                     }
[17:02:17.350]                     else if (inherits(cond, "warning")) {
[17:02:17.350]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:17.350]                       if (muffled) 
[17:02:17.350]                         invokeRestart("muffleWarning")
[17:02:17.350]                     }
[17:02:17.350]                     else if (inherits(cond, "condition")) {
[17:02:17.350]                       if (!is.null(pattern)) {
[17:02:17.350]                         computeRestarts <- base::computeRestarts
[17:02:17.350]                         grepl <- base::grepl
[17:02:17.350]                         restarts <- computeRestarts(cond)
[17:02:17.350]                         for (restart in restarts) {
[17:02:17.350]                           name <- restart$name
[17:02:17.350]                           if (is.null(name)) 
[17:02:17.350]                             next
[17:02:17.350]                           if (!grepl(pattern, name)) 
[17:02:17.350]                             next
[17:02:17.350]                           invokeRestart(restart)
[17:02:17.350]                           muffled <- TRUE
[17:02:17.350]                           break
[17:02:17.350]                         }
[17:02:17.350]                       }
[17:02:17.350]                     }
[17:02:17.350]                     invisible(muffled)
[17:02:17.350]                   }
[17:02:17.350]                   muffleCondition(cond)
[17:02:17.350]                 })
[17:02:17.350]             }))
[17:02:17.350]             future::FutureResult(value = ...future.value$value, 
[17:02:17.350]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.350]                   ...future.rng), globalenv = if (FALSE) 
[17:02:17.350]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:17.350]                     ...future.globalenv.names))
[17:02:17.350]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:17.350]         }, condition = base::local({
[17:02:17.350]             c <- base::c
[17:02:17.350]             inherits <- base::inherits
[17:02:17.350]             invokeRestart <- base::invokeRestart
[17:02:17.350]             length <- base::length
[17:02:17.350]             list <- base::list
[17:02:17.350]             seq.int <- base::seq.int
[17:02:17.350]             signalCondition <- base::signalCondition
[17:02:17.350]             sys.calls <- base::sys.calls
[17:02:17.350]             `[[` <- base::`[[`
[17:02:17.350]             `+` <- base::`+`
[17:02:17.350]             `<<-` <- base::`<<-`
[17:02:17.350]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:17.350]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:17.350]                   3L)]
[17:02:17.350]             }
[17:02:17.350]             function(cond) {
[17:02:17.350]                 is_error <- inherits(cond, "error")
[17:02:17.350]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:17.350]                   NULL)
[17:02:17.350]                 if (is_error) {
[17:02:17.350]                   sessionInformation <- function() {
[17:02:17.350]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:17.350]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:17.350]                       search = base::search(), system = base::Sys.info())
[17:02:17.350]                   }
[17:02:17.350]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.350]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:17.350]                     cond$call), session = sessionInformation(), 
[17:02:17.350]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:17.350]                   signalCondition(cond)
[17:02:17.350]                 }
[17:02:17.350]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:17.350]                 "immediateCondition"))) {
[17:02:17.350]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:17.350]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.350]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:17.350]                   if (TRUE && !signal) {
[17:02:17.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.350]                     {
[17:02:17.350]                       inherits <- base::inherits
[17:02:17.350]                       invokeRestart <- base::invokeRestart
[17:02:17.350]                       is.null <- base::is.null
[17:02:17.350]                       muffled <- FALSE
[17:02:17.350]                       if (inherits(cond, "message")) {
[17:02:17.350]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.350]                         if (muffled) 
[17:02:17.350]                           invokeRestart("muffleMessage")
[17:02:17.350]                       }
[17:02:17.350]                       else if (inherits(cond, "warning")) {
[17:02:17.350]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.350]                         if (muffled) 
[17:02:17.350]                           invokeRestart("muffleWarning")
[17:02:17.350]                       }
[17:02:17.350]                       else if (inherits(cond, "condition")) {
[17:02:17.350]                         if (!is.null(pattern)) {
[17:02:17.350]                           computeRestarts <- base::computeRestarts
[17:02:17.350]                           grepl <- base::grepl
[17:02:17.350]                           restarts <- computeRestarts(cond)
[17:02:17.350]                           for (restart in restarts) {
[17:02:17.350]                             name <- restart$name
[17:02:17.350]                             if (is.null(name)) 
[17:02:17.350]                               next
[17:02:17.350]                             if (!grepl(pattern, name)) 
[17:02:17.350]                               next
[17:02:17.350]                             invokeRestart(restart)
[17:02:17.350]                             muffled <- TRUE
[17:02:17.350]                             break
[17:02:17.350]                           }
[17:02:17.350]                         }
[17:02:17.350]                       }
[17:02:17.350]                       invisible(muffled)
[17:02:17.350]                     }
[17:02:17.350]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.350]                   }
[17:02:17.350]                 }
[17:02:17.350]                 else {
[17:02:17.350]                   if (TRUE) {
[17:02:17.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.350]                     {
[17:02:17.350]                       inherits <- base::inherits
[17:02:17.350]                       invokeRestart <- base::invokeRestart
[17:02:17.350]                       is.null <- base::is.null
[17:02:17.350]                       muffled <- FALSE
[17:02:17.350]                       if (inherits(cond, "message")) {
[17:02:17.350]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.350]                         if (muffled) 
[17:02:17.350]                           invokeRestart("muffleMessage")
[17:02:17.350]                       }
[17:02:17.350]                       else if (inherits(cond, "warning")) {
[17:02:17.350]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.350]                         if (muffled) 
[17:02:17.350]                           invokeRestart("muffleWarning")
[17:02:17.350]                       }
[17:02:17.350]                       else if (inherits(cond, "condition")) {
[17:02:17.350]                         if (!is.null(pattern)) {
[17:02:17.350]                           computeRestarts <- base::computeRestarts
[17:02:17.350]                           grepl <- base::grepl
[17:02:17.350]                           restarts <- computeRestarts(cond)
[17:02:17.350]                           for (restart in restarts) {
[17:02:17.350]                             name <- restart$name
[17:02:17.350]                             if (is.null(name)) 
[17:02:17.350]                               next
[17:02:17.350]                             if (!grepl(pattern, name)) 
[17:02:17.350]                               next
[17:02:17.350]                             invokeRestart(restart)
[17:02:17.350]                             muffled <- TRUE
[17:02:17.350]                             break
[17:02:17.350]                           }
[17:02:17.350]                         }
[17:02:17.350]                       }
[17:02:17.350]                       invisible(muffled)
[17:02:17.350]                     }
[17:02:17.350]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.350]                   }
[17:02:17.350]                 }
[17:02:17.350]             }
[17:02:17.350]         }))
[17:02:17.350]     }, error = function(ex) {
[17:02:17.350]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:17.350]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.350]                 ...future.rng), started = ...future.startTime, 
[17:02:17.350]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:17.350]             version = "1.8"), class = "FutureResult")
[17:02:17.350]     }, finally = {
[17:02:17.350]         if (!identical(...future.workdir, getwd())) 
[17:02:17.350]             setwd(...future.workdir)
[17:02:17.350]         {
[17:02:17.350]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:17.350]                 ...future.oldOptions$nwarnings <- NULL
[17:02:17.350]             }
[17:02:17.350]             base::options(...future.oldOptions)
[17:02:17.350]             if (.Platform$OS.type == "windows") {
[17:02:17.350]                 old_names <- names(...future.oldEnvVars)
[17:02:17.350]                 envs <- base::Sys.getenv()
[17:02:17.350]                 names <- names(envs)
[17:02:17.350]                 common <- intersect(names, old_names)
[17:02:17.350]                 added <- setdiff(names, old_names)
[17:02:17.350]                 removed <- setdiff(old_names, names)
[17:02:17.350]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:17.350]                   envs[common]]
[17:02:17.350]                 NAMES <- toupper(changed)
[17:02:17.350]                 args <- list()
[17:02:17.350]                 for (kk in seq_along(NAMES)) {
[17:02:17.350]                   name <- changed[[kk]]
[17:02:17.350]                   NAME <- NAMES[[kk]]
[17:02:17.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.350]                     next
[17:02:17.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.350]                 }
[17:02:17.350]                 NAMES <- toupper(added)
[17:02:17.350]                 for (kk in seq_along(NAMES)) {
[17:02:17.350]                   name <- added[[kk]]
[17:02:17.350]                   NAME <- NAMES[[kk]]
[17:02:17.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.350]                     next
[17:02:17.350]                   args[[name]] <- ""
[17:02:17.350]                 }
[17:02:17.350]                 NAMES <- toupper(removed)
[17:02:17.350]                 for (kk in seq_along(NAMES)) {
[17:02:17.350]                   name <- removed[[kk]]
[17:02:17.350]                   NAME <- NAMES[[kk]]
[17:02:17.350]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.350]                     next
[17:02:17.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.350]                 }
[17:02:17.350]                 if (length(args) > 0) 
[17:02:17.350]                   base::do.call(base::Sys.setenv, args = args)
[17:02:17.350]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:17.350]             }
[17:02:17.350]             else {
[17:02:17.350]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:17.350]             }
[17:02:17.350]             {
[17:02:17.350]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:17.350]                   0L) {
[17:02:17.350]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:17.350]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:17.350]                   base::options(opts)
[17:02:17.350]                 }
[17:02:17.350]                 {
[17:02:17.350]                   {
[17:02:17.350]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:17.350]                     NULL
[17:02:17.350]                   }
[17:02:17.350]                   options(future.plan = NULL)
[17:02:17.350]                   if (is.na(NA_character_)) 
[17:02:17.350]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.350]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:17.350]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:17.350]                     .init = FALSE)
[17:02:17.350]                 }
[17:02:17.350]             }
[17:02:17.350]         }
[17:02:17.350]     })
[17:02:17.350]     if (TRUE) {
[17:02:17.350]         base::sink(type = "output", split = FALSE)
[17:02:17.350]         if (TRUE) {
[17:02:17.350]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:17.350]         }
[17:02:17.350]         else {
[17:02:17.350]             ...future.result["stdout"] <- base::list(NULL)
[17:02:17.350]         }
[17:02:17.350]         base::close(...future.stdout)
[17:02:17.350]         ...future.stdout <- NULL
[17:02:17.350]     }
[17:02:17.350]     ...future.result$conditions <- ...future.conditions
[17:02:17.350]     ...future.result$finished <- base::Sys.time()
[17:02:17.350]     ...future.result
[17:02:17.350] }
[17:02:17.412] MultisessionFuture started
[17:02:17.412] result() for ClusterFuture ...
[17:02:17.413] receiveMessageFromWorker() for ClusterFuture ...
[17:02:17.413] - Validating connection of MultisessionFuture
[17:02:17.445] - received message: FutureResult
[17:02:17.445] - Received FutureResult
[17:02:17.446] - Erased future from FutureRegistry
[17:02:17.446] result() for ClusterFuture ...
[17:02:17.446] - result already collected: FutureResult
[17:02:17.446] result() for ClusterFuture ... done
[17:02:17.446] receiveMessageFromWorker() for ClusterFuture ... done
[17:02:17.446] result() for ClusterFuture ... done
[17:02:17.446] result() for ClusterFuture ...
[17:02:17.446] - result already collected: FutureResult
[17:02:17.446] result() for ClusterFuture ... done
[17:02:17.447] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[17:02:17.451] plan(): nbrOfWorkers() = 2
[17:02:17.454] getGlobalsAndPackages() ...
[17:02:17.455] 
[17:02:17.455] - globals: [0] <none>
[17:02:17.455] getGlobalsAndPackages() ... DONE
[17:02:17.466] Packages needed by the future expression (n = 0): <none>
[17:02:17.467] Packages needed by future strategies (n = 0): <none>
[17:02:17.467] {
[17:02:17.467]     {
[17:02:17.467]         {
[17:02:17.467]             ...future.startTime <- base::Sys.time()
[17:02:17.467]             {
[17:02:17.467]                 {
[17:02:17.467]                   {
[17:02:17.467]                     {
[17:02:17.467]                       base::local({
[17:02:17.467]                         has_future <- base::requireNamespace("future", 
[17:02:17.467]                           quietly = TRUE)
[17:02:17.467]                         if (has_future) {
[17:02:17.467]                           ns <- base::getNamespace("future")
[17:02:17.467]                           version <- ns[[".package"]][["version"]]
[17:02:17.467]                           if (is.null(version)) 
[17:02:17.467]                             version <- utils::packageVersion("future")
[17:02:17.467]                         }
[17:02:17.467]                         else {
[17:02:17.467]                           version <- NULL
[17:02:17.467]                         }
[17:02:17.467]                         if (!has_future || version < "1.8.0") {
[17:02:17.467]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:17.467]                             "", base::R.version$version.string), 
[17:02:17.467]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:17.467]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:17.467]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:17.467]                               "release", "version")], collapse = " "), 
[17:02:17.467]                             hostname = base::Sys.info()[["nodename"]])
[17:02:17.467]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:17.467]                             info)
[17:02:17.467]                           info <- base::paste(info, collapse = "; ")
[17:02:17.467]                           if (!has_future) {
[17:02:17.467]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:17.467]                               info)
[17:02:17.467]                           }
[17:02:17.467]                           else {
[17:02:17.467]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:17.467]                               info, version)
[17:02:17.467]                           }
[17:02:17.467]                           base::stop(msg)
[17:02:17.467]                         }
[17:02:17.467]                       })
[17:02:17.467]                     }
[17:02:17.467]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:17.467]                     base::options(mc.cores = 1L)
[17:02:17.467]                   }
[17:02:17.467]                   ...future.strategy.old <- future::plan("list")
[17:02:17.467]                   options(future.plan = NULL)
[17:02:17.467]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.467]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:17.467]                 }
[17:02:17.467]                 ...future.workdir <- getwd()
[17:02:17.467]             }
[17:02:17.467]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:17.467]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:17.467]         }
[17:02:17.467]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:17.467]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:17.467]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:17.467]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:17.467]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:17.467]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:17.467]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:17.467]             base::names(...future.oldOptions))
[17:02:17.467]     }
[17:02:17.467]     if (FALSE) {
[17:02:17.467]     }
[17:02:17.467]     else {
[17:02:17.467]         if (TRUE) {
[17:02:17.467]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:17.467]                 open = "w")
[17:02:17.467]         }
[17:02:17.467]         else {
[17:02:17.467]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:17.467]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:17.467]         }
[17:02:17.467]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:17.467]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:17.467]             base::sink(type = "output", split = FALSE)
[17:02:17.467]             base::close(...future.stdout)
[17:02:17.467]         }, add = TRUE)
[17:02:17.467]     }
[17:02:17.467]     ...future.frame <- base::sys.nframe()
[17:02:17.467]     ...future.conditions <- base::list()
[17:02:17.467]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:17.467]     if (FALSE) {
[17:02:17.467]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:17.467]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:17.467]     }
[17:02:17.467]     ...future.result <- base::tryCatch({
[17:02:17.467]         base::withCallingHandlers({
[17:02:17.467]             ...future.value <- base::withVisible(base::local({
[17:02:17.467]                 ...future.makeSendCondition <- base::local({
[17:02:17.467]                   sendCondition <- NULL
[17:02:17.467]                   function(frame = 1L) {
[17:02:17.467]                     if (is.function(sendCondition)) 
[17:02:17.467]                       return(sendCondition)
[17:02:17.467]                     ns <- getNamespace("parallel")
[17:02:17.467]                     if (exists("sendData", mode = "function", 
[17:02:17.467]                       envir = ns)) {
[17:02:17.467]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:17.467]                         envir = ns)
[17:02:17.467]                       envir <- sys.frame(frame)
[17:02:17.467]                       master <- NULL
[17:02:17.467]                       while (!identical(envir, .GlobalEnv) && 
[17:02:17.467]                         !identical(envir, emptyenv())) {
[17:02:17.467]                         if (exists("master", mode = "list", envir = envir, 
[17:02:17.467]                           inherits = FALSE)) {
[17:02:17.467]                           master <- get("master", mode = "list", 
[17:02:17.467]                             envir = envir, inherits = FALSE)
[17:02:17.467]                           if (inherits(master, c("SOCKnode", 
[17:02:17.467]                             "SOCK0node"))) {
[17:02:17.467]                             sendCondition <<- function(cond) {
[17:02:17.467]                               data <- list(type = "VALUE", value = cond, 
[17:02:17.467]                                 success = TRUE)
[17:02:17.467]                               parallel_sendData(master, data)
[17:02:17.467]                             }
[17:02:17.467]                             return(sendCondition)
[17:02:17.467]                           }
[17:02:17.467]                         }
[17:02:17.467]                         frame <- frame + 1L
[17:02:17.467]                         envir <- sys.frame(frame)
[17:02:17.467]                       }
[17:02:17.467]                     }
[17:02:17.467]                     sendCondition <<- function(cond) NULL
[17:02:17.467]                   }
[17:02:17.467]                 })
[17:02:17.467]                 withCallingHandlers({
[17:02:17.467]                   42
[17:02:17.467]                 }, immediateCondition = function(cond) {
[17:02:17.467]                   sendCondition <- ...future.makeSendCondition()
[17:02:17.467]                   sendCondition(cond)
[17:02:17.467]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.467]                   {
[17:02:17.467]                     inherits <- base::inherits
[17:02:17.467]                     invokeRestart <- base::invokeRestart
[17:02:17.467]                     is.null <- base::is.null
[17:02:17.467]                     muffled <- FALSE
[17:02:17.467]                     if (inherits(cond, "message")) {
[17:02:17.467]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:17.467]                       if (muffled) 
[17:02:17.467]                         invokeRestart("muffleMessage")
[17:02:17.467]                     }
[17:02:17.467]                     else if (inherits(cond, "warning")) {
[17:02:17.467]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:17.467]                       if (muffled) 
[17:02:17.467]                         invokeRestart("muffleWarning")
[17:02:17.467]                     }
[17:02:17.467]                     else if (inherits(cond, "condition")) {
[17:02:17.467]                       if (!is.null(pattern)) {
[17:02:17.467]                         computeRestarts <- base::computeRestarts
[17:02:17.467]                         grepl <- base::grepl
[17:02:17.467]                         restarts <- computeRestarts(cond)
[17:02:17.467]                         for (restart in restarts) {
[17:02:17.467]                           name <- restart$name
[17:02:17.467]                           if (is.null(name)) 
[17:02:17.467]                             next
[17:02:17.467]                           if (!grepl(pattern, name)) 
[17:02:17.467]                             next
[17:02:17.467]                           invokeRestart(restart)
[17:02:17.467]                           muffled <- TRUE
[17:02:17.467]                           break
[17:02:17.467]                         }
[17:02:17.467]                       }
[17:02:17.467]                     }
[17:02:17.467]                     invisible(muffled)
[17:02:17.467]                   }
[17:02:17.467]                   muffleCondition(cond)
[17:02:17.467]                 })
[17:02:17.467]             }))
[17:02:17.467]             future::FutureResult(value = ...future.value$value, 
[17:02:17.467]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.467]                   ...future.rng), globalenv = if (FALSE) 
[17:02:17.467]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:17.467]                     ...future.globalenv.names))
[17:02:17.467]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:17.467]         }, condition = base::local({
[17:02:17.467]             c <- base::c
[17:02:17.467]             inherits <- base::inherits
[17:02:17.467]             invokeRestart <- base::invokeRestart
[17:02:17.467]             length <- base::length
[17:02:17.467]             list <- base::list
[17:02:17.467]             seq.int <- base::seq.int
[17:02:17.467]             signalCondition <- base::signalCondition
[17:02:17.467]             sys.calls <- base::sys.calls
[17:02:17.467]             `[[` <- base::`[[`
[17:02:17.467]             `+` <- base::`+`
[17:02:17.467]             `<<-` <- base::`<<-`
[17:02:17.467]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:17.467]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:17.467]                   3L)]
[17:02:17.467]             }
[17:02:17.467]             function(cond) {
[17:02:17.467]                 is_error <- inherits(cond, "error")
[17:02:17.467]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:17.467]                   NULL)
[17:02:17.467]                 if (is_error) {
[17:02:17.467]                   sessionInformation <- function() {
[17:02:17.467]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:17.467]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:17.467]                       search = base::search(), system = base::Sys.info())
[17:02:17.467]                   }
[17:02:17.467]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.467]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:17.467]                     cond$call), session = sessionInformation(), 
[17:02:17.467]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:17.467]                   signalCondition(cond)
[17:02:17.467]                 }
[17:02:17.467]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:17.467]                 "immediateCondition"))) {
[17:02:17.467]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:17.467]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.467]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:17.467]                   if (TRUE && !signal) {
[17:02:17.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.467]                     {
[17:02:17.467]                       inherits <- base::inherits
[17:02:17.467]                       invokeRestart <- base::invokeRestart
[17:02:17.467]                       is.null <- base::is.null
[17:02:17.467]                       muffled <- FALSE
[17:02:17.467]                       if (inherits(cond, "message")) {
[17:02:17.467]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.467]                         if (muffled) 
[17:02:17.467]                           invokeRestart("muffleMessage")
[17:02:17.467]                       }
[17:02:17.467]                       else if (inherits(cond, "warning")) {
[17:02:17.467]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.467]                         if (muffled) 
[17:02:17.467]                           invokeRestart("muffleWarning")
[17:02:17.467]                       }
[17:02:17.467]                       else if (inherits(cond, "condition")) {
[17:02:17.467]                         if (!is.null(pattern)) {
[17:02:17.467]                           computeRestarts <- base::computeRestarts
[17:02:17.467]                           grepl <- base::grepl
[17:02:17.467]                           restarts <- computeRestarts(cond)
[17:02:17.467]                           for (restart in restarts) {
[17:02:17.467]                             name <- restart$name
[17:02:17.467]                             if (is.null(name)) 
[17:02:17.467]                               next
[17:02:17.467]                             if (!grepl(pattern, name)) 
[17:02:17.467]                               next
[17:02:17.467]                             invokeRestart(restart)
[17:02:17.467]                             muffled <- TRUE
[17:02:17.467]                             break
[17:02:17.467]                           }
[17:02:17.467]                         }
[17:02:17.467]                       }
[17:02:17.467]                       invisible(muffled)
[17:02:17.467]                     }
[17:02:17.467]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.467]                   }
[17:02:17.467]                 }
[17:02:17.467]                 else {
[17:02:17.467]                   if (TRUE) {
[17:02:17.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.467]                     {
[17:02:17.467]                       inherits <- base::inherits
[17:02:17.467]                       invokeRestart <- base::invokeRestart
[17:02:17.467]                       is.null <- base::is.null
[17:02:17.467]                       muffled <- FALSE
[17:02:17.467]                       if (inherits(cond, "message")) {
[17:02:17.467]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.467]                         if (muffled) 
[17:02:17.467]                           invokeRestart("muffleMessage")
[17:02:17.467]                       }
[17:02:17.467]                       else if (inherits(cond, "warning")) {
[17:02:17.467]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.467]                         if (muffled) 
[17:02:17.467]                           invokeRestart("muffleWarning")
[17:02:17.467]                       }
[17:02:17.467]                       else if (inherits(cond, "condition")) {
[17:02:17.467]                         if (!is.null(pattern)) {
[17:02:17.467]                           computeRestarts <- base::computeRestarts
[17:02:17.467]                           grepl <- base::grepl
[17:02:17.467]                           restarts <- computeRestarts(cond)
[17:02:17.467]                           for (restart in restarts) {
[17:02:17.467]                             name <- restart$name
[17:02:17.467]                             if (is.null(name)) 
[17:02:17.467]                               next
[17:02:17.467]                             if (!grepl(pattern, name)) 
[17:02:17.467]                               next
[17:02:17.467]                             invokeRestart(restart)
[17:02:17.467]                             muffled <- TRUE
[17:02:17.467]                             break
[17:02:17.467]                           }
[17:02:17.467]                         }
[17:02:17.467]                       }
[17:02:17.467]                       invisible(muffled)
[17:02:17.467]                     }
[17:02:17.467]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.467]                   }
[17:02:17.467]                 }
[17:02:17.467]             }
[17:02:17.467]         }))
[17:02:17.467]     }, error = function(ex) {
[17:02:17.467]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:17.467]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.467]                 ...future.rng), started = ...future.startTime, 
[17:02:17.467]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:17.467]             version = "1.8"), class = "FutureResult")
[17:02:17.467]     }, finally = {
[17:02:17.467]         if (!identical(...future.workdir, getwd())) 
[17:02:17.467]             setwd(...future.workdir)
[17:02:17.467]         {
[17:02:17.467]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:17.467]                 ...future.oldOptions$nwarnings <- NULL
[17:02:17.467]             }
[17:02:17.467]             base::options(...future.oldOptions)
[17:02:17.467]             if (.Platform$OS.type == "windows") {
[17:02:17.467]                 old_names <- names(...future.oldEnvVars)
[17:02:17.467]                 envs <- base::Sys.getenv()
[17:02:17.467]                 names <- names(envs)
[17:02:17.467]                 common <- intersect(names, old_names)
[17:02:17.467]                 added <- setdiff(names, old_names)
[17:02:17.467]                 removed <- setdiff(old_names, names)
[17:02:17.467]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:17.467]                   envs[common]]
[17:02:17.467]                 NAMES <- toupper(changed)
[17:02:17.467]                 args <- list()
[17:02:17.467]                 for (kk in seq_along(NAMES)) {
[17:02:17.467]                   name <- changed[[kk]]
[17:02:17.467]                   NAME <- NAMES[[kk]]
[17:02:17.467]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.467]                     next
[17:02:17.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.467]                 }
[17:02:17.467]                 NAMES <- toupper(added)
[17:02:17.467]                 for (kk in seq_along(NAMES)) {
[17:02:17.467]                   name <- added[[kk]]
[17:02:17.467]                   NAME <- NAMES[[kk]]
[17:02:17.467]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.467]                     next
[17:02:17.467]                   args[[name]] <- ""
[17:02:17.467]                 }
[17:02:17.467]                 NAMES <- toupper(removed)
[17:02:17.467]                 for (kk in seq_along(NAMES)) {
[17:02:17.467]                   name <- removed[[kk]]
[17:02:17.467]                   NAME <- NAMES[[kk]]
[17:02:17.467]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.467]                     next
[17:02:17.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.467]                 }
[17:02:17.467]                 if (length(args) > 0) 
[17:02:17.467]                   base::do.call(base::Sys.setenv, args = args)
[17:02:17.467]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:17.467]             }
[17:02:17.467]             else {
[17:02:17.467]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:17.467]             }
[17:02:17.467]             {
[17:02:17.467]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:17.467]                   0L) {
[17:02:17.467]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:17.467]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:17.467]                   base::options(opts)
[17:02:17.467]                 }
[17:02:17.467]                 {
[17:02:17.467]                   {
[17:02:17.467]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:17.467]                     NULL
[17:02:17.467]                   }
[17:02:17.467]                   options(future.plan = NULL)
[17:02:17.467]                   if (is.na(NA_character_)) 
[17:02:17.467]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.467]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:17.467]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:17.467]                     .init = FALSE)
[17:02:17.467]                 }
[17:02:17.467]             }
[17:02:17.467]         }
[17:02:17.467]     })
[17:02:17.467]     if (TRUE) {
[17:02:17.467]         base::sink(type = "output", split = FALSE)
[17:02:17.467]         if (TRUE) {
[17:02:17.467]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:17.467]         }
[17:02:17.467]         else {
[17:02:17.467]             ...future.result["stdout"] <- base::list(NULL)
[17:02:17.467]         }
[17:02:17.467]         base::close(...future.stdout)
[17:02:17.467]         ...future.stdout <- NULL
[17:02:17.467]     }
[17:02:17.467]     ...future.result$conditions <- ...future.conditions
[17:02:17.467]     ...future.result$finished <- base::Sys.time()
[17:02:17.467]     ...future.result
[17:02:17.467] }
[17:02:17.470] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:17.472] receiveMessageFromWorker() for ClusterFuture ...
[17:02:17.472] - Validating connection of MultisessionFuture
[17:02:17.473] - received message: FutureResult
[17:02:17.473] - Received FutureResult
[17:02:17.473] - Erased future from FutureRegistry
[17:02:17.473] result() for ClusterFuture ...
[17:02:17.473] - result already collected: FutureResult
[17:02:17.473] result() for ClusterFuture ... done
[17:02:17.473] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.474] result() for ClusterFuture ...
[17:02:17.474] - result already collected: FutureResult
[17:02:17.474] result() for ClusterFuture ... done
[17:02:17.474] result() for ClusterFuture ...
[17:02:17.474] - result already collected: FutureResult
[17:02:17.474] result() for ClusterFuture ... done
[17:02:17.474] getGlobalsAndPackages() ...
[17:02:17.474] Searching for globals...
[17:02:17.475] 
[17:02:17.475] Searching for globals ... DONE
[17:02:17.475] - globals: [0] <none>
[17:02:17.475] getGlobalsAndPackages() ... DONE
[17:02:17.475] run() for ‘Future’ ...
[17:02:17.476] - state: ‘created’
[17:02:17.476] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:17.491] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.491] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:17.491]   - Field: ‘node’
[17:02:17.491]   - Field: ‘label’
[17:02:17.491]   - Field: ‘local’
[17:02:17.491]   - Field: ‘owner’
[17:02:17.492]   - Field: ‘envir’
[17:02:17.492]   - Field: ‘workers’
[17:02:17.492]   - Field: ‘packages’
[17:02:17.492]   - Field: ‘gc’
[17:02:17.492]   - Field: ‘conditions’
[17:02:17.492]   - Field: ‘persistent’
[17:02:17.492]   - Field: ‘expr’
[17:02:17.492]   - Field: ‘uuid’
[17:02:17.492]   - Field: ‘seed’
[17:02:17.493]   - Field: ‘version’
[17:02:17.493]   - Field: ‘result’
[17:02:17.493]   - Field: ‘asynchronous’
[17:02:17.493]   - Field: ‘calls’
[17:02:17.493]   - Field: ‘globals’
[17:02:17.493]   - Field: ‘stdout’
[17:02:17.493]   - Field: ‘earlySignal’
[17:02:17.493]   - Field: ‘lazy’
[17:02:17.493]   - Field: ‘state’
[17:02:17.494] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:17.494] - Launch lazy future ...
[17:02:17.494] Packages needed by the future expression (n = 0): <none>
[17:02:17.494] Packages needed by future strategies (n = 0): <none>
[17:02:17.495] {
[17:02:17.495]     {
[17:02:17.495]         {
[17:02:17.495]             ...future.startTime <- base::Sys.time()
[17:02:17.495]             {
[17:02:17.495]                 {
[17:02:17.495]                   {
[17:02:17.495]                     {
[17:02:17.495]                       base::local({
[17:02:17.495]                         has_future <- base::requireNamespace("future", 
[17:02:17.495]                           quietly = TRUE)
[17:02:17.495]                         if (has_future) {
[17:02:17.495]                           ns <- base::getNamespace("future")
[17:02:17.495]                           version <- ns[[".package"]][["version"]]
[17:02:17.495]                           if (is.null(version)) 
[17:02:17.495]                             version <- utils::packageVersion("future")
[17:02:17.495]                         }
[17:02:17.495]                         else {
[17:02:17.495]                           version <- NULL
[17:02:17.495]                         }
[17:02:17.495]                         if (!has_future || version < "1.8.0") {
[17:02:17.495]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:17.495]                             "", base::R.version$version.string), 
[17:02:17.495]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:17.495]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:17.495]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:17.495]                               "release", "version")], collapse = " "), 
[17:02:17.495]                             hostname = base::Sys.info()[["nodename"]])
[17:02:17.495]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:17.495]                             info)
[17:02:17.495]                           info <- base::paste(info, collapse = "; ")
[17:02:17.495]                           if (!has_future) {
[17:02:17.495]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:17.495]                               info)
[17:02:17.495]                           }
[17:02:17.495]                           else {
[17:02:17.495]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:17.495]                               info, version)
[17:02:17.495]                           }
[17:02:17.495]                           base::stop(msg)
[17:02:17.495]                         }
[17:02:17.495]                       })
[17:02:17.495]                     }
[17:02:17.495]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:17.495]                     base::options(mc.cores = 1L)
[17:02:17.495]                   }
[17:02:17.495]                   ...future.strategy.old <- future::plan("list")
[17:02:17.495]                   options(future.plan = NULL)
[17:02:17.495]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.495]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:17.495]                 }
[17:02:17.495]                 ...future.workdir <- getwd()
[17:02:17.495]             }
[17:02:17.495]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:17.495]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:17.495]         }
[17:02:17.495]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:17.495]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:17.495]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:17.495]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:17.495]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:17.495]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:17.495]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:17.495]             base::names(...future.oldOptions))
[17:02:17.495]     }
[17:02:17.495]     if (FALSE) {
[17:02:17.495]     }
[17:02:17.495]     else {
[17:02:17.495]         if (TRUE) {
[17:02:17.495]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:17.495]                 open = "w")
[17:02:17.495]         }
[17:02:17.495]         else {
[17:02:17.495]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:17.495]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:17.495]         }
[17:02:17.495]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:17.495]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:17.495]             base::sink(type = "output", split = FALSE)
[17:02:17.495]             base::close(...future.stdout)
[17:02:17.495]         }, add = TRUE)
[17:02:17.495]     }
[17:02:17.495]     ...future.frame <- base::sys.nframe()
[17:02:17.495]     ...future.conditions <- base::list()
[17:02:17.495]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:17.495]     if (FALSE) {
[17:02:17.495]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:17.495]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:17.495]     }
[17:02:17.495]     ...future.result <- base::tryCatch({
[17:02:17.495]         base::withCallingHandlers({
[17:02:17.495]             ...future.value <- base::withVisible(base::local({
[17:02:17.495]                 ...future.makeSendCondition <- base::local({
[17:02:17.495]                   sendCondition <- NULL
[17:02:17.495]                   function(frame = 1L) {
[17:02:17.495]                     if (is.function(sendCondition)) 
[17:02:17.495]                       return(sendCondition)
[17:02:17.495]                     ns <- getNamespace("parallel")
[17:02:17.495]                     if (exists("sendData", mode = "function", 
[17:02:17.495]                       envir = ns)) {
[17:02:17.495]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:17.495]                         envir = ns)
[17:02:17.495]                       envir <- sys.frame(frame)
[17:02:17.495]                       master <- NULL
[17:02:17.495]                       while (!identical(envir, .GlobalEnv) && 
[17:02:17.495]                         !identical(envir, emptyenv())) {
[17:02:17.495]                         if (exists("master", mode = "list", envir = envir, 
[17:02:17.495]                           inherits = FALSE)) {
[17:02:17.495]                           master <- get("master", mode = "list", 
[17:02:17.495]                             envir = envir, inherits = FALSE)
[17:02:17.495]                           if (inherits(master, c("SOCKnode", 
[17:02:17.495]                             "SOCK0node"))) {
[17:02:17.495]                             sendCondition <<- function(cond) {
[17:02:17.495]                               data <- list(type = "VALUE", value = cond, 
[17:02:17.495]                                 success = TRUE)
[17:02:17.495]                               parallel_sendData(master, data)
[17:02:17.495]                             }
[17:02:17.495]                             return(sendCondition)
[17:02:17.495]                           }
[17:02:17.495]                         }
[17:02:17.495]                         frame <- frame + 1L
[17:02:17.495]                         envir <- sys.frame(frame)
[17:02:17.495]                       }
[17:02:17.495]                     }
[17:02:17.495]                     sendCondition <<- function(cond) NULL
[17:02:17.495]                   }
[17:02:17.495]                 })
[17:02:17.495]                 withCallingHandlers({
[17:02:17.495]                   42
[17:02:17.495]                 }, immediateCondition = function(cond) {
[17:02:17.495]                   sendCondition <- ...future.makeSendCondition()
[17:02:17.495]                   sendCondition(cond)
[17:02:17.495]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.495]                   {
[17:02:17.495]                     inherits <- base::inherits
[17:02:17.495]                     invokeRestart <- base::invokeRestart
[17:02:17.495]                     is.null <- base::is.null
[17:02:17.495]                     muffled <- FALSE
[17:02:17.495]                     if (inherits(cond, "message")) {
[17:02:17.495]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:17.495]                       if (muffled) 
[17:02:17.495]                         invokeRestart("muffleMessage")
[17:02:17.495]                     }
[17:02:17.495]                     else if (inherits(cond, "warning")) {
[17:02:17.495]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:17.495]                       if (muffled) 
[17:02:17.495]                         invokeRestart("muffleWarning")
[17:02:17.495]                     }
[17:02:17.495]                     else if (inherits(cond, "condition")) {
[17:02:17.495]                       if (!is.null(pattern)) {
[17:02:17.495]                         computeRestarts <- base::computeRestarts
[17:02:17.495]                         grepl <- base::grepl
[17:02:17.495]                         restarts <- computeRestarts(cond)
[17:02:17.495]                         for (restart in restarts) {
[17:02:17.495]                           name <- restart$name
[17:02:17.495]                           if (is.null(name)) 
[17:02:17.495]                             next
[17:02:17.495]                           if (!grepl(pattern, name)) 
[17:02:17.495]                             next
[17:02:17.495]                           invokeRestart(restart)
[17:02:17.495]                           muffled <- TRUE
[17:02:17.495]                           break
[17:02:17.495]                         }
[17:02:17.495]                       }
[17:02:17.495]                     }
[17:02:17.495]                     invisible(muffled)
[17:02:17.495]                   }
[17:02:17.495]                   muffleCondition(cond)
[17:02:17.495]                 })
[17:02:17.495]             }))
[17:02:17.495]             future::FutureResult(value = ...future.value$value, 
[17:02:17.495]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.495]                   ...future.rng), globalenv = if (FALSE) 
[17:02:17.495]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:17.495]                     ...future.globalenv.names))
[17:02:17.495]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:17.495]         }, condition = base::local({
[17:02:17.495]             c <- base::c
[17:02:17.495]             inherits <- base::inherits
[17:02:17.495]             invokeRestart <- base::invokeRestart
[17:02:17.495]             length <- base::length
[17:02:17.495]             list <- base::list
[17:02:17.495]             seq.int <- base::seq.int
[17:02:17.495]             signalCondition <- base::signalCondition
[17:02:17.495]             sys.calls <- base::sys.calls
[17:02:17.495]             `[[` <- base::`[[`
[17:02:17.495]             `+` <- base::`+`
[17:02:17.495]             `<<-` <- base::`<<-`
[17:02:17.495]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:17.495]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:17.495]                   3L)]
[17:02:17.495]             }
[17:02:17.495]             function(cond) {
[17:02:17.495]                 is_error <- inherits(cond, "error")
[17:02:17.495]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:17.495]                   NULL)
[17:02:17.495]                 if (is_error) {
[17:02:17.495]                   sessionInformation <- function() {
[17:02:17.495]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:17.495]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:17.495]                       search = base::search(), system = base::Sys.info())
[17:02:17.495]                   }
[17:02:17.495]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.495]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:17.495]                     cond$call), session = sessionInformation(), 
[17:02:17.495]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:17.495]                   signalCondition(cond)
[17:02:17.495]                 }
[17:02:17.495]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:17.495]                 "immediateCondition"))) {
[17:02:17.495]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:17.495]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.495]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:17.495]                   if (TRUE && !signal) {
[17:02:17.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.495]                     {
[17:02:17.495]                       inherits <- base::inherits
[17:02:17.495]                       invokeRestart <- base::invokeRestart
[17:02:17.495]                       is.null <- base::is.null
[17:02:17.495]                       muffled <- FALSE
[17:02:17.495]                       if (inherits(cond, "message")) {
[17:02:17.495]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.495]                         if (muffled) 
[17:02:17.495]                           invokeRestart("muffleMessage")
[17:02:17.495]                       }
[17:02:17.495]                       else if (inherits(cond, "warning")) {
[17:02:17.495]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.495]                         if (muffled) 
[17:02:17.495]                           invokeRestart("muffleWarning")
[17:02:17.495]                       }
[17:02:17.495]                       else if (inherits(cond, "condition")) {
[17:02:17.495]                         if (!is.null(pattern)) {
[17:02:17.495]                           computeRestarts <- base::computeRestarts
[17:02:17.495]                           grepl <- base::grepl
[17:02:17.495]                           restarts <- computeRestarts(cond)
[17:02:17.495]                           for (restart in restarts) {
[17:02:17.495]                             name <- restart$name
[17:02:17.495]                             if (is.null(name)) 
[17:02:17.495]                               next
[17:02:17.495]                             if (!grepl(pattern, name)) 
[17:02:17.495]                               next
[17:02:17.495]                             invokeRestart(restart)
[17:02:17.495]                             muffled <- TRUE
[17:02:17.495]                             break
[17:02:17.495]                           }
[17:02:17.495]                         }
[17:02:17.495]                       }
[17:02:17.495]                       invisible(muffled)
[17:02:17.495]                     }
[17:02:17.495]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.495]                   }
[17:02:17.495]                 }
[17:02:17.495]                 else {
[17:02:17.495]                   if (TRUE) {
[17:02:17.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.495]                     {
[17:02:17.495]                       inherits <- base::inherits
[17:02:17.495]                       invokeRestart <- base::invokeRestart
[17:02:17.495]                       is.null <- base::is.null
[17:02:17.495]                       muffled <- FALSE
[17:02:17.495]                       if (inherits(cond, "message")) {
[17:02:17.495]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.495]                         if (muffled) 
[17:02:17.495]                           invokeRestart("muffleMessage")
[17:02:17.495]                       }
[17:02:17.495]                       else if (inherits(cond, "warning")) {
[17:02:17.495]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.495]                         if (muffled) 
[17:02:17.495]                           invokeRestart("muffleWarning")
[17:02:17.495]                       }
[17:02:17.495]                       else if (inherits(cond, "condition")) {
[17:02:17.495]                         if (!is.null(pattern)) {
[17:02:17.495]                           computeRestarts <- base::computeRestarts
[17:02:17.495]                           grepl <- base::grepl
[17:02:17.495]                           restarts <- computeRestarts(cond)
[17:02:17.495]                           for (restart in restarts) {
[17:02:17.495]                             name <- restart$name
[17:02:17.495]                             if (is.null(name)) 
[17:02:17.495]                               next
[17:02:17.495]                             if (!grepl(pattern, name)) 
[17:02:17.495]                               next
[17:02:17.495]                             invokeRestart(restart)
[17:02:17.495]                             muffled <- TRUE
[17:02:17.495]                             break
[17:02:17.495]                           }
[17:02:17.495]                         }
[17:02:17.495]                       }
[17:02:17.495]                       invisible(muffled)
[17:02:17.495]                     }
[17:02:17.495]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.495]                   }
[17:02:17.495]                 }
[17:02:17.495]             }
[17:02:17.495]         }))
[17:02:17.495]     }, error = function(ex) {
[17:02:17.495]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:17.495]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.495]                 ...future.rng), started = ...future.startTime, 
[17:02:17.495]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:17.495]             version = "1.8"), class = "FutureResult")
[17:02:17.495]     }, finally = {
[17:02:17.495]         if (!identical(...future.workdir, getwd())) 
[17:02:17.495]             setwd(...future.workdir)
[17:02:17.495]         {
[17:02:17.495]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:17.495]                 ...future.oldOptions$nwarnings <- NULL
[17:02:17.495]             }
[17:02:17.495]             base::options(...future.oldOptions)
[17:02:17.495]             if (.Platform$OS.type == "windows") {
[17:02:17.495]                 old_names <- names(...future.oldEnvVars)
[17:02:17.495]                 envs <- base::Sys.getenv()
[17:02:17.495]                 names <- names(envs)
[17:02:17.495]                 common <- intersect(names, old_names)
[17:02:17.495]                 added <- setdiff(names, old_names)
[17:02:17.495]                 removed <- setdiff(old_names, names)
[17:02:17.495]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:17.495]                   envs[common]]
[17:02:17.495]                 NAMES <- toupper(changed)
[17:02:17.495]                 args <- list()
[17:02:17.495]                 for (kk in seq_along(NAMES)) {
[17:02:17.495]                   name <- changed[[kk]]
[17:02:17.495]                   NAME <- NAMES[[kk]]
[17:02:17.495]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.495]                     next
[17:02:17.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.495]                 }
[17:02:17.495]                 NAMES <- toupper(added)
[17:02:17.495]                 for (kk in seq_along(NAMES)) {
[17:02:17.495]                   name <- added[[kk]]
[17:02:17.495]                   NAME <- NAMES[[kk]]
[17:02:17.495]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.495]                     next
[17:02:17.495]                   args[[name]] <- ""
[17:02:17.495]                 }
[17:02:17.495]                 NAMES <- toupper(removed)
[17:02:17.495]                 for (kk in seq_along(NAMES)) {
[17:02:17.495]                   name <- removed[[kk]]
[17:02:17.495]                   NAME <- NAMES[[kk]]
[17:02:17.495]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.495]                     next
[17:02:17.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.495]                 }
[17:02:17.495]                 if (length(args) > 0) 
[17:02:17.495]                   base::do.call(base::Sys.setenv, args = args)
[17:02:17.495]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:17.495]             }
[17:02:17.495]             else {
[17:02:17.495]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:17.495]             }
[17:02:17.495]             {
[17:02:17.495]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:17.495]                   0L) {
[17:02:17.495]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:17.495]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:17.495]                   base::options(opts)
[17:02:17.495]                 }
[17:02:17.495]                 {
[17:02:17.495]                   {
[17:02:17.495]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:17.495]                     NULL
[17:02:17.495]                   }
[17:02:17.495]                   options(future.plan = NULL)
[17:02:17.495]                   if (is.na(NA_character_)) 
[17:02:17.495]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.495]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:17.495]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:17.495]                     .init = FALSE)
[17:02:17.495]                 }
[17:02:17.495]             }
[17:02:17.495]         }
[17:02:17.495]     })
[17:02:17.495]     if (TRUE) {
[17:02:17.495]         base::sink(type = "output", split = FALSE)
[17:02:17.495]         if (TRUE) {
[17:02:17.495]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:17.495]         }
[17:02:17.495]         else {
[17:02:17.495]             ...future.result["stdout"] <- base::list(NULL)
[17:02:17.495]         }
[17:02:17.495]         base::close(...future.stdout)
[17:02:17.495]         ...future.stdout <- NULL
[17:02:17.495]     }
[17:02:17.495]     ...future.result$conditions <- ...future.conditions
[17:02:17.495]     ...future.result$finished <- base::Sys.time()
[17:02:17.495]     ...future.result
[17:02:17.495] }
[17:02:17.498] MultisessionFuture started
[17:02:17.498] - Launch lazy future ... done
[17:02:17.499] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:17.504] receiveMessageFromWorker() for ClusterFuture ...
[17:02:17.504] - Validating connection of MultisessionFuture
[17:02:17.504] - received message: FutureResult
[17:02:17.504] - Received FutureResult
[17:02:17.505] - Erased future from FutureRegistry
[17:02:17.505] result() for ClusterFuture ...
[17:02:17.505] - result already collected: FutureResult
[17:02:17.505] result() for ClusterFuture ... done
[17:02:17.505] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.505] result() for ClusterFuture ...
[17:02:17.505] - result already collected: FutureResult
[17:02:17.505] result() for ClusterFuture ... done
[17:02:17.506] result() for ClusterFuture ...
[17:02:17.506] - result already collected: FutureResult
[17:02:17.506] result() for ClusterFuture ... done
[17:02:17.506] getGlobalsAndPackages() ...
[17:02:17.506] Searching for globals...
[17:02:17.507] - globals found: [1] ‘{’
[17:02:17.507] Searching for globals ... DONE
[17:02:17.507] Resolving globals: FALSE
[17:02:17.508] 
[17:02:17.508] 
[17:02:17.508] getGlobalsAndPackages() ... DONE
[17:02:17.508] run() for ‘Future’ ...
[17:02:17.508] - state: ‘created’
[17:02:17.509] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:17.524] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.524] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:17.524]   - Field: ‘node’
[17:02:17.524]   - Field: ‘label’
[17:02:17.524]   - Field: ‘local’
[17:02:17.525]   - Field: ‘owner’
[17:02:17.525]   - Field: ‘envir’
[17:02:17.525]   - Field: ‘workers’
[17:02:17.525]   - Field: ‘packages’
[17:02:17.525]   - Field: ‘gc’
[17:02:17.525]   - Field: ‘conditions’
[17:02:17.525]   - Field: ‘persistent’
[17:02:17.525]   - Field: ‘expr’
[17:02:17.525]   - Field: ‘uuid’
[17:02:17.526]   - Field: ‘seed’
[17:02:17.526]   - Field: ‘version’
[17:02:17.526]   - Field: ‘result’
[17:02:17.526]   - Field: ‘asynchronous’
[17:02:17.526]   - Field: ‘calls’
[17:02:17.526]   - Field: ‘globals’
[17:02:17.526]   - Field: ‘stdout’
[17:02:17.526]   - Field: ‘earlySignal’
[17:02:17.526]   - Field: ‘lazy’
[17:02:17.527]   - Field: ‘state’
[17:02:17.527] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:17.527] - Launch lazy future ...
[17:02:17.527] Packages needed by the future expression (n = 0): <none>
[17:02:17.527] Packages needed by future strategies (n = 0): <none>
[17:02:17.528] {
[17:02:17.528]     {
[17:02:17.528]         {
[17:02:17.528]             ...future.startTime <- base::Sys.time()
[17:02:17.528]             {
[17:02:17.528]                 {
[17:02:17.528]                   {
[17:02:17.528]                     {
[17:02:17.528]                       base::local({
[17:02:17.528]                         has_future <- base::requireNamespace("future", 
[17:02:17.528]                           quietly = TRUE)
[17:02:17.528]                         if (has_future) {
[17:02:17.528]                           ns <- base::getNamespace("future")
[17:02:17.528]                           version <- ns[[".package"]][["version"]]
[17:02:17.528]                           if (is.null(version)) 
[17:02:17.528]                             version <- utils::packageVersion("future")
[17:02:17.528]                         }
[17:02:17.528]                         else {
[17:02:17.528]                           version <- NULL
[17:02:17.528]                         }
[17:02:17.528]                         if (!has_future || version < "1.8.0") {
[17:02:17.528]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:17.528]                             "", base::R.version$version.string), 
[17:02:17.528]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:17.528]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:17.528]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:17.528]                               "release", "version")], collapse = " "), 
[17:02:17.528]                             hostname = base::Sys.info()[["nodename"]])
[17:02:17.528]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:17.528]                             info)
[17:02:17.528]                           info <- base::paste(info, collapse = "; ")
[17:02:17.528]                           if (!has_future) {
[17:02:17.528]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:17.528]                               info)
[17:02:17.528]                           }
[17:02:17.528]                           else {
[17:02:17.528]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:17.528]                               info, version)
[17:02:17.528]                           }
[17:02:17.528]                           base::stop(msg)
[17:02:17.528]                         }
[17:02:17.528]                       })
[17:02:17.528]                     }
[17:02:17.528]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:17.528]                     base::options(mc.cores = 1L)
[17:02:17.528]                   }
[17:02:17.528]                   ...future.strategy.old <- future::plan("list")
[17:02:17.528]                   options(future.plan = NULL)
[17:02:17.528]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.528]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:17.528]                 }
[17:02:17.528]                 ...future.workdir <- getwd()
[17:02:17.528]             }
[17:02:17.528]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:17.528]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:17.528]         }
[17:02:17.528]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:17.528]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:17.528]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:17.528]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:17.528]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:17.528]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:17.528]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:17.528]             base::names(...future.oldOptions))
[17:02:17.528]     }
[17:02:17.528]     if (FALSE) {
[17:02:17.528]     }
[17:02:17.528]     else {
[17:02:17.528]         if (TRUE) {
[17:02:17.528]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:17.528]                 open = "w")
[17:02:17.528]         }
[17:02:17.528]         else {
[17:02:17.528]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:17.528]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:17.528]         }
[17:02:17.528]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:17.528]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:17.528]             base::sink(type = "output", split = FALSE)
[17:02:17.528]             base::close(...future.stdout)
[17:02:17.528]         }, add = TRUE)
[17:02:17.528]     }
[17:02:17.528]     ...future.frame <- base::sys.nframe()
[17:02:17.528]     ...future.conditions <- base::list()
[17:02:17.528]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:17.528]     if (FALSE) {
[17:02:17.528]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:17.528]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:17.528]     }
[17:02:17.528]     ...future.result <- base::tryCatch({
[17:02:17.528]         base::withCallingHandlers({
[17:02:17.528]             ...future.value <- base::withVisible(base::local({
[17:02:17.528]                 ...future.makeSendCondition <- base::local({
[17:02:17.528]                   sendCondition <- NULL
[17:02:17.528]                   function(frame = 1L) {
[17:02:17.528]                     if (is.function(sendCondition)) 
[17:02:17.528]                       return(sendCondition)
[17:02:17.528]                     ns <- getNamespace("parallel")
[17:02:17.528]                     if (exists("sendData", mode = "function", 
[17:02:17.528]                       envir = ns)) {
[17:02:17.528]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:17.528]                         envir = ns)
[17:02:17.528]                       envir <- sys.frame(frame)
[17:02:17.528]                       master <- NULL
[17:02:17.528]                       while (!identical(envir, .GlobalEnv) && 
[17:02:17.528]                         !identical(envir, emptyenv())) {
[17:02:17.528]                         if (exists("master", mode = "list", envir = envir, 
[17:02:17.528]                           inherits = FALSE)) {
[17:02:17.528]                           master <- get("master", mode = "list", 
[17:02:17.528]                             envir = envir, inherits = FALSE)
[17:02:17.528]                           if (inherits(master, c("SOCKnode", 
[17:02:17.528]                             "SOCK0node"))) {
[17:02:17.528]                             sendCondition <<- function(cond) {
[17:02:17.528]                               data <- list(type = "VALUE", value = cond, 
[17:02:17.528]                                 success = TRUE)
[17:02:17.528]                               parallel_sendData(master, data)
[17:02:17.528]                             }
[17:02:17.528]                             return(sendCondition)
[17:02:17.528]                           }
[17:02:17.528]                         }
[17:02:17.528]                         frame <- frame + 1L
[17:02:17.528]                         envir <- sys.frame(frame)
[17:02:17.528]                       }
[17:02:17.528]                     }
[17:02:17.528]                     sendCondition <<- function(cond) NULL
[17:02:17.528]                   }
[17:02:17.528]                 })
[17:02:17.528]                 withCallingHandlers({
[17:02:17.528]                   {
[17:02:17.528]                     42
[17:02:17.528]                   }
[17:02:17.528]                 }, immediateCondition = function(cond) {
[17:02:17.528]                   sendCondition <- ...future.makeSendCondition()
[17:02:17.528]                   sendCondition(cond)
[17:02:17.528]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.528]                   {
[17:02:17.528]                     inherits <- base::inherits
[17:02:17.528]                     invokeRestart <- base::invokeRestart
[17:02:17.528]                     is.null <- base::is.null
[17:02:17.528]                     muffled <- FALSE
[17:02:17.528]                     if (inherits(cond, "message")) {
[17:02:17.528]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:17.528]                       if (muffled) 
[17:02:17.528]                         invokeRestart("muffleMessage")
[17:02:17.528]                     }
[17:02:17.528]                     else if (inherits(cond, "warning")) {
[17:02:17.528]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:17.528]                       if (muffled) 
[17:02:17.528]                         invokeRestart("muffleWarning")
[17:02:17.528]                     }
[17:02:17.528]                     else if (inherits(cond, "condition")) {
[17:02:17.528]                       if (!is.null(pattern)) {
[17:02:17.528]                         computeRestarts <- base::computeRestarts
[17:02:17.528]                         grepl <- base::grepl
[17:02:17.528]                         restarts <- computeRestarts(cond)
[17:02:17.528]                         for (restart in restarts) {
[17:02:17.528]                           name <- restart$name
[17:02:17.528]                           if (is.null(name)) 
[17:02:17.528]                             next
[17:02:17.528]                           if (!grepl(pattern, name)) 
[17:02:17.528]                             next
[17:02:17.528]                           invokeRestart(restart)
[17:02:17.528]                           muffled <- TRUE
[17:02:17.528]                           break
[17:02:17.528]                         }
[17:02:17.528]                       }
[17:02:17.528]                     }
[17:02:17.528]                     invisible(muffled)
[17:02:17.528]                   }
[17:02:17.528]                   muffleCondition(cond)
[17:02:17.528]                 })
[17:02:17.528]             }))
[17:02:17.528]             future::FutureResult(value = ...future.value$value, 
[17:02:17.528]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.528]                   ...future.rng), globalenv = if (FALSE) 
[17:02:17.528]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:17.528]                     ...future.globalenv.names))
[17:02:17.528]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:17.528]         }, condition = base::local({
[17:02:17.528]             c <- base::c
[17:02:17.528]             inherits <- base::inherits
[17:02:17.528]             invokeRestart <- base::invokeRestart
[17:02:17.528]             length <- base::length
[17:02:17.528]             list <- base::list
[17:02:17.528]             seq.int <- base::seq.int
[17:02:17.528]             signalCondition <- base::signalCondition
[17:02:17.528]             sys.calls <- base::sys.calls
[17:02:17.528]             `[[` <- base::`[[`
[17:02:17.528]             `+` <- base::`+`
[17:02:17.528]             `<<-` <- base::`<<-`
[17:02:17.528]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:17.528]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:17.528]                   3L)]
[17:02:17.528]             }
[17:02:17.528]             function(cond) {
[17:02:17.528]                 is_error <- inherits(cond, "error")
[17:02:17.528]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:17.528]                   NULL)
[17:02:17.528]                 if (is_error) {
[17:02:17.528]                   sessionInformation <- function() {
[17:02:17.528]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:17.528]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:17.528]                       search = base::search(), system = base::Sys.info())
[17:02:17.528]                   }
[17:02:17.528]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.528]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:17.528]                     cond$call), session = sessionInformation(), 
[17:02:17.528]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:17.528]                   signalCondition(cond)
[17:02:17.528]                 }
[17:02:17.528]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:17.528]                 "immediateCondition"))) {
[17:02:17.528]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:17.528]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.528]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:17.528]                   if (TRUE && !signal) {
[17:02:17.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.528]                     {
[17:02:17.528]                       inherits <- base::inherits
[17:02:17.528]                       invokeRestart <- base::invokeRestart
[17:02:17.528]                       is.null <- base::is.null
[17:02:17.528]                       muffled <- FALSE
[17:02:17.528]                       if (inherits(cond, "message")) {
[17:02:17.528]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.528]                         if (muffled) 
[17:02:17.528]                           invokeRestart("muffleMessage")
[17:02:17.528]                       }
[17:02:17.528]                       else if (inherits(cond, "warning")) {
[17:02:17.528]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.528]                         if (muffled) 
[17:02:17.528]                           invokeRestart("muffleWarning")
[17:02:17.528]                       }
[17:02:17.528]                       else if (inherits(cond, "condition")) {
[17:02:17.528]                         if (!is.null(pattern)) {
[17:02:17.528]                           computeRestarts <- base::computeRestarts
[17:02:17.528]                           grepl <- base::grepl
[17:02:17.528]                           restarts <- computeRestarts(cond)
[17:02:17.528]                           for (restart in restarts) {
[17:02:17.528]                             name <- restart$name
[17:02:17.528]                             if (is.null(name)) 
[17:02:17.528]                               next
[17:02:17.528]                             if (!grepl(pattern, name)) 
[17:02:17.528]                               next
[17:02:17.528]                             invokeRestart(restart)
[17:02:17.528]                             muffled <- TRUE
[17:02:17.528]                             break
[17:02:17.528]                           }
[17:02:17.528]                         }
[17:02:17.528]                       }
[17:02:17.528]                       invisible(muffled)
[17:02:17.528]                     }
[17:02:17.528]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.528]                   }
[17:02:17.528]                 }
[17:02:17.528]                 else {
[17:02:17.528]                   if (TRUE) {
[17:02:17.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.528]                     {
[17:02:17.528]                       inherits <- base::inherits
[17:02:17.528]                       invokeRestart <- base::invokeRestart
[17:02:17.528]                       is.null <- base::is.null
[17:02:17.528]                       muffled <- FALSE
[17:02:17.528]                       if (inherits(cond, "message")) {
[17:02:17.528]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.528]                         if (muffled) 
[17:02:17.528]                           invokeRestart("muffleMessage")
[17:02:17.528]                       }
[17:02:17.528]                       else if (inherits(cond, "warning")) {
[17:02:17.528]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.528]                         if (muffled) 
[17:02:17.528]                           invokeRestart("muffleWarning")
[17:02:17.528]                       }
[17:02:17.528]                       else if (inherits(cond, "condition")) {
[17:02:17.528]                         if (!is.null(pattern)) {
[17:02:17.528]                           computeRestarts <- base::computeRestarts
[17:02:17.528]                           grepl <- base::grepl
[17:02:17.528]                           restarts <- computeRestarts(cond)
[17:02:17.528]                           for (restart in restarts) {
[17:02:17.528]                             name <- restart$name
[17:02:17.528]                             if (is.null(name)) 
[17:02:17.528]                               next
[17:02:17.528]                             if (!grepl(pattern, name)) 
[17:02:17.528]                               next
[17:02:17.528]                             invokeRestart(restart)
[17:02:17.528]                             muffled <- TRUE
[17:02:17.528]                             break
[17:02:17.528]                           }
[17:02:17.528]                         }
[17:02:17.528]                       }
[17:02:17.528]                       invisible(muffled)
[17:02:17.528]                     }
[17:02:17.528]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.528]                   }
[17:02:17.528]                 }
[17:02:17.528]             }
[17:02:17.528]         }))
[17:02:17.528]     }, error = function(ex) {
[17:02:17.528]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:17.528]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.528]                 ...future.rng), started = ...future.startTime, 
[17:02:17.528]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:17.528]             version = "1.8"), class = "FutureResult")
[17:02:17.528]     }, finally = {
[17:02:17.528]         if (!identical(...future.workdir, getwd())) 
[17:02:17.528]             setwd(...future.workdir)
[17:02:17.528]         {
[17:02:17.528]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:17.528]                 ...future.oldOptions$nwarnings <- NULL
[17:02:17.528]             }
[17:02:17.528]             base::options(...future.oldOptions)
[17:02:17.528]             if (.Platform$OS.type == "windows") {
[17:02:17.528]                 old_names <- names(...future.oldEnvVars)
[17:02:17.528]                 envs <- base::Sys.getenv()
[17:02:17.528]                 names <- names(envs)
[17:02:17.528]                 common <- intersect(names, old_names)
[17:02:17.528]                 added <- setdiff(names, old_names)
[17:02:17.528]                 removed <- setdiff(old_names, names)
[17:02:17.528]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:17.528]                   envs[common]]
[17:02:17.528]                 NAMES <- toupper(changed)
[17:02:17.528]                 args <- list()
[17:02:17.528]                 for (kk in seq_along(NAMES)) {
[17:02:17.528]                   name <- changed[[kk]]
[17:02:17.528]                   NAME <- NAMES[[kk]]
[17:02:17.528]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.528]                     next
[17:02:17.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.528]                 }
[17:02:17.528]                 NAMES <- toupper(added)
[17:02:17.528]                 for (kk in seq_along(NAMES)) {
[17:02:17.528]                   name <- added[[kk]]
[17:02:17.528]                   NAME <- NAMES[[kk]]
[17:02:17.528]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.528]                     next
[17:02:17.528]                   args[[name]] <- ""
[17:02:17.528]                 }
[17:02:17.528]                 NAMES <- toupper(removed)
[17:02:17.528]                 for (kk in seq_along(NAMES)) {
[17:02:17.528]                   name <- removed[[kk]]
[17:02:17.528]                   NAME <- NAMES[[kk]]
[17:02:17.528]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.528]                     next
[17:02:17.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.528]                 }
[17:02:17.528]                 if (length(args) > 0) 
[17:02:17.528]                   base::do.call(base::Sys.setenv, args = args)
[17:02:17.528]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:17.528]             }
[17:02:17.528]             else {
[17:02:17.528]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:17.528]             }
[17:02:17.528]             {
[17:02:17.528]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:17.528]                   0L) {
[17:02:17.528]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:17.528]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:17.528]                   base::options(opts)
[17:02:17.528]                 }
[17:02:17.528]                 {
[17:02:17.528]                   {
[17:02:17.528]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:17.528]                     NULL
[17:02:17.528]                   }
[17:02:17.528]                   options(future.plan = NULL)
[17:02:17.528]                   if (is.na(NA_character_)) 
[17:02:17.528]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.528]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:17.528]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:17.528]                     .init = FALSE)
[17:02:17.528]                 }
[17:02:17.528]             }
[17:02:17.528]         }
[17:02:17.528]     })
[17:02:17.528]     if (TRUE) {
[17:02:17.528]         base::sink(type = "output", split = FALSE)
[17:02:17.528]         if (TRUE) {
[17:02:17.528]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:17.528]         }
[17:02:17.528]         else {
[17:02:17.528]             ...future.result["stdout"] <- base::list(NULL)
[17:02:17.528]         }
[17:02:17.528]         base::close(...future.stdout)
[17:02:17.528]         ...future.stdout <- NULL
[17:02:17.528]     }
[17:02:17.528]     ...future.result$conditions <- ...future.conditions
[17:02:17.528]     ...future.result$finished <- base::Sys.time()
[17:02:17.528]     ...future.result
[17:02:17.528] }
[17:02:17.531] MultisessionFuture started
[17:02:17.532] - Launch lazy future ... done
[17:02:17.532] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:17.533] receiveMessageFromWorker() for ClusterFuture ...
[17:02:17.533] - Validating connection of MultisessionFuture
[17:02:17.533] - received message: FutureResult
[17:02:17.534] - Received FutureResult
[17:02:17.534] - Erased future from FutureRegistry
[17:02:17.534] result() for ClusterFuture ...
[17:02:17.534] - result already collected: FutureResult
[17:02:17.534] result() for ClusterFuture ... done
[17:02:17.534] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.534] result() for ClusterFuture ...
[17:02:17.535] - result already collected: FutureResult
[17:02:17.535] result() for ClusterFuture ... done
[17:02:17.535] result() for ClusterFuture ...
[17:02:17.535] - result already collected: FutureResult
[17:02:17.535] result() for ClusterFuture ... done
[17:02:17.539] getGlobalsAndPackages() ...
[17:02:17.539] 
[17:02:17.539] - globals: [0] <none>
[17:02:17.539] getGlobalsAndPackages() ... DONE
[17:02:17.550] Packages needed by the future expression (n = 0): <none>
[17:02:17.551] Packages needed by future strategies (n = 0): <none>
[17:02:17.551] {
[17:02:17.551]     {
[17:02:17.551]         {
[17:02:17.551]             ...future.startTime <- base::Sys.time()
[17:02:17.551]             {
[17:02:17.551]                 {
[17:02:17.551]                   {
[17:02:17.551]                     {
[17:02:17.551]                       base::local({
[17:02:17.551]                         has_future <- base::requireNamespace("future", 
[17:02:17.551]                           quietly = TRUE)
[17:02:17.551]                         if (has_future) {
[17:02:17.551]                           ns <- base::getNamespace("future")
[17:02:17.551]                           version <- ns[[".package"]][["version"]]
[17:02:17.551]                           if (is.null(version)) 
[17:02:17.551]                             version <- utils::packageVersion("future")
[17:02:17.551]                         }
[17:02:17.551]                         else {
[17:02:17.551]                           version <- NULL
[17:02:17.551]                         }
[17:02:17.551]                         if (!has_future || version < "1.8.0") {
[17:02:17.551]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:17.551]                             "", base::R.version$version.string), 
[17:02:17.551]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:17.551]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:17.551]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:17.551]                               "release", "version")], collapse = " "), 
[17:02:17.551]                             hostname = base::Sys.info()[["nodename"]])
[17:02:17.551]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:17.551]                             info)
[17:02:17.551]                           info <- base::paste(info, collapse = "; ")
[17:02:17.551]                           if (!has_future) {
[17:02:17.551]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:17.551]                               info)
[17:02:17.551]                           }
[17:02:17.551]                           else {
[17:02:17.551]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:17.551]                               info, version)
[17:02:17.551]                           }
[17:02:17.551]                           base::stop(msg)
[17:02:17.551]                         }
[17:02:17.551]                       })
[17:02:17.551]                     }
[17:02:17.551]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:17.551]                     base::options(mc.cores = 1L)
[17:02:17.551]                   }
[17:02:17.551]                   ...future.strategy.old <- future::plan("list")
[17:02:17.551]                   options(future.plan = NULL)
[17:02:17.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:17.551]                 }
[17:02:17.551]                 ...future.workdir <- getwd()
[17:02:17.551]             }
[17:02:17.551]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:17.551]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:17.551]         }
[17:02:17.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:17.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:17.551]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:17.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:17.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:17.551]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:17.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:17.551]             base::names(...future.oldOptions))
[17:02:17.551]     }
[17:02:17.551]     if (FALSE) {
[17:02:17.551]     }
[17:02:17.551]     else {
[17:02:17.551]         if (TRUE) {
[17:02:17.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:17.551]                 open = "w")
[17:02:17.551]         }
[17:02:17.551]         else {
[17:02:17.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:17.551]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:17.551]         }
[17:02:17.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:17.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:17.551]             base::sink(type = "output", split = FALSE)
[17:02:17.551]             base::close(...future.stdout)
[17:02:17.551]         }, add = TRUE)
[17:02:17.551]     }
[17:02:17.551]     ...future.frame <- base::sys.nframe()
[17:02:17.551]     ...future.conditions <- base::list()
[17:02:17.551]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:17.551]     if (FALSE) {
[17:02:17.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:17.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:17.551]     }
[17:02:17.551]     ...future.result <- base::tryCatch({
[17:02:17.551]         base::withCallingHandlers({
[17:02:17.551]             ...future.value <- base::withVisible(base::local({
[17:02:17.551]                 ...future.makeSendCondition <- base::local({
[17:02:17.551]                   sendCondition <- NULL
[17:02:17.551]                   function(frame = 1L) {
[17:02:17.551]                     if (is.function(sendCondition)) 
[17:02:17.551]                       return(sendCondition)
[17:02:17.551]                     ns <- getNamespace("parallel")
[17:02:17.551]                     if (exists("sendData", mode = "function", 
[17:02:17.551]                       envir = ns)) {
[17:02:17.551]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:17.551]                         envir = ns)
[17:02:17.551]                       envir <- sys.frame(frame)
[17:02:17.551]                       master <- NULL
[17:02:17.551]                       while (!identical(envir, .GlobalEnv) && 
[17:02:17.551]                         !identical(envir, emptyenv())) {
[17:02:17.551]                         if (exists("master", mode = "list", envir = envir, 
[17:02:17.551]                           inherits = FALSE)) {
[17:02:17.551]                           master <- get("master", mode = "list", 
[17:02:17.551]                             envir = envir, inherits = FALSE)
[17:02:17.551]                           if (inherits(master, c("SOCKnode", 
[17:02:17.551]                             "SOCK0node"))) {
[17:02:17.551]                             sendCondition <<- function(cond) {
[17:02:17.551]                               data <- list(type = "VALUE", value = cond, 
[17:02:17.551]                                 success = TRUE)
[17:02:17.551]                               parallel_sendData(master, data)
[17:02:17.551]                             }
[17:02:17.551]                             return(sendCondition)
[17:02:17.551]                           }
[17:02:17.551]                         }
[17:02:17.551]                         frame <- frame + 1L
[17:02:17.551]                         envir <- sys.frame(frame)
[17:02:17.551]                       }
[17:02:17.551]                     }
[17:02:17.551]                     sendCondition <<- function(cond) NULL
[17:02:17.551]                   }
[17:02:17.551]                 })
[17:02:17.551]                 withCallingHandlers({
[17:02:17.551]                   42
[17:02:17.551]                 }, immediateCondition = function(cond) {
[17:02:17.551]                   sendCondition <- ...future.makeSendCondition()
[17:02:17.551]                   sendCondition(cond)
[17:02:17.551]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.551]                   {
[17:02:17.551]                     inherits <- base::inherits
[17:02:17.551]                     invokeRestart <- base::invokeRestart
[17:02:17.551]                     is.null <- base::is.null
[17:02:17.551]                     muffled <- FALSE
[17:02:17.551]                     if (inherits(cond, "message")) {
[17:02:17.551]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:17.551]                       if (muffled) 
[17:02:17.551]                         invokeRestart("muffleMessage")
[17:02:17.551]                     }
[17:02:17.551]                     else if (inherits(cond, "warning")) {
[17:02:17.551]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:17.551]                       if (muffled) 
[17:02:17.551]                         invokeRestart("muffleWarning")
[17:02:17.551]                     }
[17:02:17.551]                     else if (inherits(cond, "condition")) {
[17:02:17.551]                       if (!is.null(pattern)) {
[17:02:17.551]                         computeRestarts <- base::computeRestarts
[17:02:17.551]                         grepl <- base::grepl
[17:02:17.551]                         restarts <- computeRestarts(cond)
[17:02:17.551]                         for (restart in restarts) {
[17:02:17.551]                           name <- restart$name
[17:02:17.551]                           if (is.null(name)) 
[17:02:17.551]                             next
[17:02:17.551]                           if (!grepl(pattern, name)) 
[17:02:17.551]                             next
[17:02:17.551]                           invokeRestart(restart)
[17:02:17.551]                           muffled <- TRUE
[17:02:17.551]                           break
[17:02:17.551]                         }
[17:02:17.551]                       }
[17:02:17.551]                     }
[17:02:17.551]                     invisible(muffled)
[17:02:17.551]                   }
[17:02:17.551]                   muffleCondition(cond)
[17:02:17.551]                 })
[17:02:17.551]             }))
[17:02:17.551]             future::FutureResult(value = ...future.value$value, 
[17:02:17.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.551]                   ...future.rng), globalenv = if (FALSE) 
[17:02:17.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:17.551]                     ...future.globalenv.names))
[17:02:17.551]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:17.551]         }, condition = base::local({
[17:02:17.551]             c <- base::c
[17:02:17.551]             inherits <- base::inherits
[17:02:17.551]             invokeRestart <- base::invokeRestart
[17:02:17.551]             length <- base::length
[17:02:17.551]             list <- base::list
[17:02:17.551]             seq.int <- base::seq.int
[17:02:17.551]             signalCondition <- base::signalCondition
[17:02:17.551]             sys.calls <- base::sys.calls
[17:02:17.551]             `[[` <- base::`[[`
[17:02:17.551]             `+` <- base::`+`
[17:02:17.551]             `<<-` <- base::`<<-`
[17:02:17.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:17.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:17.551]                   3L)]
[17:02:17.551]             }
[17:02:17.551]             function(cond) {
[17:02:17.551]                 is_error <- inherits(cond, "error")
[17:02:17.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:17.551]                   NULL)
[17:02:17.551]                 if (is_error) {
[17:02:17.551]                   sessionInformation <- function() {
[17:02:17.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:17.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:17.551]                       search = base::search(), system = base::Sys.info())
[17:02:17.551]                   }
[17:02:17.551]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:17.551]                     cond$call), session = sessionInformation(), 
[17:02:17.551]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:17.551]                   signalCondition(cond)
[17:02:17.551]                 }
[17:02:17.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:17.551]                 "immediateCondition"))) {
[17:02:17.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:17.551]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:17.551]                   if (TRUE && !signal) {
[17:02:17.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.551]                     {
[17:02:17.551]                       inherits <- base::inherits
[17:02:17.551]                       invokeRestart <- base::invokeRestart
[17:02:17.551]                       is.null <- base::is.null
[17:02:17.551]                       muffled <- FALSE
[17:02:17.551]                       if (inherits(cond, "message")) {
[17:02:17.551]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.551]                         if (muffled) 
[17:02:17.551]                           invokeRestart("muffleMessage")
[17:02:17.551]                       }
[17:02:17.551]                       else if (inherits(cond, "warning")) {
[17:02:17.551]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.551]                         if (muffled) 
[17:02:17.551]                           invokeRestart("muffleWarning")
[17:02:17.551]                       }
[17:02:17.551]                       else if (inherits(cond, "condition")) {
[17:02:17.551]                         if (!is.null(pattern)) {
[17:02:17.551]                           computeRestarts <- base::computeRestarts
[17:02:17.551]                           grepl <- base::grepl
[17:02:17.551]                           restarts <- computeRestarts(cond)
[17:02:17.551]                           for (restart in restarts) {
[17:02:17.551]                             name <- restart$name
[17:02:17.551]                             if (is.null(name)) 
[17:02:17.551]                               next
[17:02:17.551]                             if (!grepl(pattern, name)) 
[17:02:17.551]                               next
[17:02:17.551]                             invokeRestart(restart)
[17:02:17.551]                             muffled <- TRUE
[17:02:17.551]                             break
[17:02:17.551]                           }
[17:02:17.551]                         }
[17:02:17.551]                       }
[17:02:17.551]                       invisible(muffled)
[17:02:17.551]                     }
[17:02:17.551]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.551]                   }
[17:02:17.551]                 }
[17:02:17.551]                 else {
[17:02:17.551]                   if (TRUE) {
[17:02:17.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.551]                     {
[17:02:17.551]                       inherits <- base::inherits
[17:02:17.551]                       invokeRestart <- base::invokeRestart
[17:02:17.551]                       is.null <- base::is.null
[17:02:17.551]                       muffled <- FALSE
[17:02:17.551]                       if (inherits(cond, "message")) {
[17:02:17.551]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.551]                         if (muffled) 
[17:02:17.551]                           invokeRestart("muffleMessage")
[17:02:17.551]                       }
[17:02:17.551]                       else if (inherits(cond, "warning")) {
[17:02:17.551]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.551]                         if (muffled) 
[17:02:17.551]                           invokeRestart("muffleWarning")
[17:02:17.551]                       }
[17:02:17.551]                       else if (inherits(cond, "condition")) {
[17:02:17.551]                         if (!is.null(pattern)) {
[17:02:17.551]                           computeRestarts <- base::computeRestarts
[17:02:17.551]                           grepl <- base::grepl
[17:02:17.551]                           restarts <- computeRestarts(cond)
[17:02:17.551]                           for (restart in restarts) {
[17:02:17.551]                             name <- restart$name
[17:02:17.551]                             if (is.null(name)) 
[17:02:17.551]                               next
[17:02:17.551]                             if (!grepl(pattern, name)) 
[17:02:17.551]                               next
[17:02:17.551]                             invokeRestart(restart)
[17:02:17.551]                             muffled <- TRUE
[17:02:17.551]                             break
[17:02:17.551]                           }
[17:02:17.551]                         }
[17:02:17.551]                       }
[17:02:17.551]                       invisible(muffled)
[17:02:17.551]                     }
[17:02:17.551]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.551]                   }
[17:02:17.551]                 }
[17:02:17.551]             }
[17:02:17.551]         }))
[17:02:17.551]     }, error = function(ex) {
[17:02:17.551]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:17.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.551]                 ...future.rng), started = ...future.startTime, 
[17:02:17.551]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:17.551]             version = "1.8"), class = "FutureResult")
[17:02:17.551]     }, finally = {
[17:02:17.551]         if (!identical(...future.workdir, getwd())) 
[17:02:17.551]             setwd(...future.workdir)
[17:02:17.551]         {
[17:02:17.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:17.551]                 ...future.oldOptions$nwarnings <- NULL
[17:02:17.551]             }
[17:02:17.551]             base::options(...future.oldOptions)
[17:02:17.551]             if (.Platform$OS.type == "windows") {
[17:02:17.551]                 old_names <- names(...future.oldEnvVars)
[17:02:17.551]                 envs <- base::Sys.getenv()
[17:02:17.551]                 names <- names(envs)
[17:02:17.551]                 common <- intersect(names, old_names)
[17:02:17.551]                 added <- setdiff(names, old_names)
[17:02:17.551]                 removed <- setdiff(old_names, names)
[17:02:17.551]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:17.551]                   envs[common]]
[17:02:17.551]                 NAMES <- toupper(changed)
[17:02:17.551]                 args <- list()
[17:02:17.551]                 for (kk in seq_along(NAMES)) {
[17:02:17.551]                   name <- changed[[kk]]
[17:02:17.551]                   NAME <- NAMES[[kk]]
[17:02:17.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.551]                     next
[17:02:17.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.551]                 }
[17:02:17.551]                 NAMES <- toupper(added)
[17:02:17.551]                 for (kk in seq_along(NAMES)) {
[17:02:17.551]                   name <- added[[kk]]
[17:02:17.551]                   NAME <- NAMES[[kk]]
[17:02:17.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.551]                     next
[17:02:17.551]                   args[[name]] <- ""
[17:02:17.551]                 }
[17:02:17.551]                 NAMES <- toupper(removed)
[17:02:17.551]                 for (kk in seq_along(NAMES)) {
[17:02:17.551]                   name <- removed[[kk]]
[17:02:17.551]                   NAME <- NAMES[[kk]]
[17:02:17.551]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.551]                     next
[17:02:17.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.551]                 }
[17:02:17.551]                 if (length(args) > 0) 
[17:02:17.551]                   base::do.call(base::Sys.setenv, args = args)
[17:02:17.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:17.551]             }
[17:02:17.551]             else {
[17:02:17.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:17.551]             }
[17:02:17.551]             {
[17:02:17.551]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:17.551]                   0L) {
[17:02:17.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:17.551]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:17.551]                   base::options(opts)
[17:02:17.551]                 }
[17:02:17.551]                 {
[17:02:17.551]                   {
[17:02:17.551]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:17.551]                     NULL
[17:02:17.551]                   }
[17:02:17.551]                   options(future.plan = NULL)
[17:02:17.551]                   if (is.na(NA_character_)) 
[17:02:17.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.551]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:17.551]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:17.551]                     .init = FALSE)
[17:02:17.551]                 }
[17:02:17.551]             }
[17:02:17.551]         }
[17:02:17.551]     })
[17:02:17.551]     if (TRUE) {
[17:02:17.551]         base::sink(type = "output", split = FALSE)
[17:02:17.551]         if (TRUE) {
[17:02:17.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:17.551]         }
[17:02:17.551]         else {
[17:02:17.551]             ...future.result["stdout"] <- base::list(NULL)
[17:02:17.551]         }
[17:02:17.551]         base::close(...future.stdout)
[17:02:17.551]         ...future.stdout <- NULL
[17:02:17.551]     }
[17:02:17.551]     ...future.result$conditions <- ...future.conditions
[17:02:17.551]     ...future.result$finished <- base::Sys.time()
[17:02:17.551]     ...future.result
[17:02:17.551] }
[17:02:17.557] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:17.558] receiveMessageFromWorker() for ClusterFuture ...
[17:02:17.558] - Validating connection of MultisessionFuture
[17:02:17.559] - received message: FutureResult
[17:02:17.559] - Received FutureResult
[17:02:17.559] - Erased future from FutureRegistry
[17:02:17.559] result() for ClusterFuture ...
[17:02:17.559] - result already collected: FutureResult
[17:02:17.559] result() for ClusterFuture ... done
[17:02:17.559] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.559] result() for ClusterFuture ...
[17:02:17.559] - result already collected: FutureResult
[17:02:17.560] result() for ClusterFuture ... done
[17:02:17.560] result() for ClusterFuture ...
[17:02:17.560] - result already collected: FutureResult
[17:02:17.560] result() for ClusterFuture ... done
[17:02:17.560] getGlobalsAndPackages() ...
[17:02:17.560] Searching for globals...
[17:02:17.560] 
[17:02:17.560] Searching for globals ... DONE
[17:02:17.561] - globals: [0] <none>
[17:02:17.561] getGlobalsAndPackages() ... DONE
[17:02:17.561] run() for ‘Future’ ...
[17:02:17.561] - state: ‘created’
[17:02:17.561] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:17.575] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.575] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:17.575]   - Field: ‘node’
[17:02:17.575]   - Field: ‘label’
[17:02:17.576]   - Field: ‘local’
[17:02:17.576]   - Field: ‘owner’
[17:02:17.576]   - Field: ‘envir’
[17:02:17.576]   - Field: ‘workers’
[17:02:17.576]   - Field: ‘packages’
[17:02:17.576]   - Field: ‘gc’
[17:02:17.576]   - Field: ‘conditions’
[17:02:17.576]   - Field: ‘persistent’
[17:02:17.576]   - Field: ‘expr’
[17:02:17.576]   - Field: ‘uuid’
[17:02:17.576]   - Field: ‘seed’
[17:02:17.577]   - Field: ‘version’
[17:02:17.577]   - Field: ‘result’
[17:02:17.577]   - Field: ‘asynchronous’
[17:02:17.577]   - Field: ‘calls’
[17:02:17.577]   - Field: ‘globals’
[17:02:17.577]   - Field: ‘stdout’
[17:02:17.577]   - Field: ‘earlySignal’
[17:02:17.577]   - Field: ‘lazy’
[17:02:17.577]   - Field: ‘state’
[17:02:17.577] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:17.577] - Launch lazy future ...
[17:02:17.578] Packages needed by the future expression (n = 0): <none>
[17:02:17.578] Packages needed by future strategies (n = 0): <none>
[17:02:17.578] {
[17:02:17.578]     {
[17:02:17.578]         {
[17:02:17.578]             ...future.startTime <- base::Sys.time()
[17:02:17.578]             {
[17:02:17.578]                 {
[17:02:17.578]                   {
[17:02:17.578]                     {
[17:02:17.578]                       base::local({
[17:02:17.578]                         has_future <- base::requireNamespace("future", 
[17:02:17.578]                           quietly = TRUE)
[17:02:17.578]                         if (has_future) {
[17:02:17.578]                           ns <- base::getNamespace("future")
[17:02:17.578]                           version <- ns[[".package"]][["version"]]
[17:02:17.578]                           if (is.null(version)) 
[17:02:17.578]                             version <- utils::packageVersion("future")
[17:02:17.578]                         }
[17:02:17.578]                         else {
[17:02:17.578]                           version <- NULL
[17:02:17.578]                         }
[17:02:17.578]                         if (!has_future || version < "1.8.0") {
[17:02:17.578]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:17.578]                             "", base::R.version$version.string), 
[17:02:17.578]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:17.578]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:17.578]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:17.578]                               "release", "version")], collapse = " "), 
[17:02:17.578]                             hostname = base::Sys.info()[["nodename"]])
[17:02:17.578]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:17.578]                             info)
[17:02:17.578]                           info <- base::paste(info, collapse = "; ")
[17:02:17.578]                           if (!has_future) {
[17:02:17.578]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:17.578]                               info)
[17:02:17.578]                           }
[17:02:17.578]                           else {
[17:02:17.578]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:17.578]                               info, version)
[17:02:17.578]                           }
[17:02:17.578]                           base::stop(msg)
[17:02:17.578]                         }
[17:02:17.578]                       })
[17:02:17.578]                     }
[17:02:17.578]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:17.578]                     base::options(mc.cores = 1L)
[17:02:17.578]                   }
[17:02:17.578]                   ...future.strategy.old <- future::plan("list")
[17:02:17.578]                   options(future.plan = NULL)
[17:02:17.578]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.578]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:17.578]                 }
[17:02:17.578]                 ...future.workdir <- getwd()
[17:02:17.578]             }
[17:02:17.578]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:17.578]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:17.578]         }
[17:02:17.578]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:17.578]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:17.578]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:17.578]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:17.578]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:17.578]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:17.578]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:17.578]             base::names(...future.oldOptions))
[17:02:17.578]     }
[17:02:17.578]     if (FALSE) {
[17:02:17.578]     }
[17:02:17.578]     else {
[17:02:17.578]         if (TRUE) {
[17:02:17.578]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:17.578]                 open = "w")
[17:02:17.578]         }
[17:02:17.578]         else {
[17:02:17.578]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:17.578]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:17.578]         }
[17:02:17.578]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:17.578]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:17.578]             base::sink(type = "output", split = FALSE)
[17:02:17.578]             base::close(...future.stdout)
[17:02:17.578]         }, add = TRUE)
[17:02:17.578]     }
[17:02:17.578]     ...future.frame <- base::sys.nframe()
[17:02:17.578]     ...future.conditions <- base::list()
[17:02:17.578]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:17.578]     if (FALSE) {
[17:02:17.578]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:17.578]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:17.578]     }
[17:02:17.578]     ...future.result <- base::tryCatch({
[17:02:17.578]         base::withCallingHandlers({
[17:02:17.578]             ...future.value <- base::withVisible(base::local({
[17:02:17.578]                 ...future.makeSendCondition <- base::local({
[17:02:17.578]                   sendCondition <- NULL
[17:02:17.578]                   function(frame = 1L) {
[17:02:17.578]                     if (is.function(sendCondition)) 
[17:02:17.578]                       return(sendCondition)
[17:02:17.578]                     ns <- getNamespace("parallel")
[17:02:17.578]                     if (exists("sendData", mode = "function", 
[17:02:17.578]                       envir = ns)) {
[17:02:17.578]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:17.578]                         envir = ns)
[17:02:17.578]                       envir <- sys.frame(frame)
[17:02:17.578]                       master <- NULL
[17:02:17.578]                       while (!identical(envir, .GlobalEnv) && 
[17:02:17.578]                         !identical(envir, emptyenv())) {
[17:02:17.578]                         if (exists("master", mode = "list", envir = envir, 
[17:02:17.578]                           inherits = FALSE)) {
[17:02:17.578]                           master <- get("master", mode = "list", 
[17:02:17.578]                             envir = envir, inherits = FALSE)
[17:02:17.578]                           if (inherits(master, c("SOCKnode", 
[17:02:17.578]                             "SOCK0node"))) {
[17:02:17.578]                             sendCondition <<- function(cond) {
[17:02:17.578]                               data <- list(type = "VALUE", value = cond, 
[17:02:17.578]                                 success = TRUE)
[17:02:17.578]                               parallel_sendData(master, data)
[17:02:17.578]                             }
[17:02:17.578]                             return(sendCondition)
[17:02:17.578]                           }
[17:02:17.578]                         }
[17:02:17.578]                         frame <- frame + 1L
[17:02:17.578]                         envir <- sys.frame(frame)
[17:02:17.578]                       }
[17:02:17.578]                     }
[17:02:17.578]                     sendCondition <<- function(cond) NULL
[17:02:17.578]                   }
[17:02:17.578]                 })
[17:02:17.578]                 withCallingHandlers({
[17:02:17.578]                   42
[17:02:17.578]                 }, immediateCondition = function(cond) {
[17:02:17.578]                   sendCondition <- ...future.makeSendCondition()
[17:02:17.578]                   sendCondition(cond)
[17:02:17.578]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.578]                   {
[17:02:17.578]                     inherits <- base::inherits
[17:02:17.578]                     invokeRestart <- base::invokeRestart
[17:02:17.578]                     is.null <- base::is.null
[17:02:17.578]                     muffled <- FALSE
[17:02:17.578]                     if (inherits(cond, "message")) {
[17:02:17.578]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:17.578]                       if (muffled) 
[17:02:17.578]                         invokeRestart("muffleMessage")
[17:02:17.578]                     }
[17:02:17.578]                     else if (inherits(cond, "warning")) {
[17:02:17.578]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:17.578]                       if (muffled) 
[17:02:17.578]                         invokeRestart("muffleWarning")
[17:02:17.578]                     }
[17:02:17.578]                     else if (inherits(cond, "condition")) {
[17:02:17.578]                       if (!is.null(pattern)) {
[17:02:17.578]                         computeRestarts <- base::computeRestarts
[17:02:17.578]                         grepl <- base::grepl
[17:02:17.578]                         restarts <- computeRestarts(cond)
[17:02:17.578]                         for (restart in restarts) {
[17:02:17.578]                           name <- restart$name
[17:02:17.578]                           if (is.null(name)) 
[17:02:17.578]                             next
[17:02:17.578]                           if (!grepl(pattern, name)) 
[17:02:17.578]                             next
[17:02:17.578]                           invokeRestart(restart)
[17:02:17.578]                           muffled <- TRUE
[17:02:17.578]                           break
[17:02:17.578]                         }
[17:02:17.578]                       }
[17:02:17.578]                     }
[17:02:17.578]                     invisible(muffled)
[17:02:17.578]                   }
[17:02:17.578]                   muffleCondition(cond)
[17:02:17.578]                 })
[17:02:17.578]             }))
[17:02:17.578]             future::FutureResult(value = ...future.value$value, 
[17:02:17.578]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.578]                   ...future.rng), globalenv = if (FALSE) 
[17:02:17.578]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:17.578]                     ...future.globalenv.names))
[17:02:17.578]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:17.578]         }, condition = base::local({
[17:02:17.578]             c <- base::c
[17:02:17.578]             inherits <- base::inherits
[17:02:17.578]             invokeRestart <- base::invokeRestart
[17:02:17.578]             length <- base::length
[17:02:17.578]             list <- base::list
[17:02:17.578]             seq.int <- base::seq.int
[17:02:17.578]             signalCondition <- base::signalCondition
[17:02:17.578]             sys.calls <- base::sys.calls
[17:02:17.578]             `[[` <- base::`[[`
[17:02:17.578]             `+` <- base::`+`
[17:02:17.578]             `<<-` <- base::`<<-`
[17:02:17.578]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:17.578]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:17.578]                   3L)]
[17:02:17.578]             }
[17:02:17.578]             function(cond) {
[17:02:17.578]                 is_error <- inherits(cond, "error")
[17:02:17.578]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:17.578]                   NULL)
[17:02:17.578]                 if (is_error) {
[17:02:17.578]                   sessionInformation <- function() {
[17:02:17.578]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:17.578]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:17.578]                       search = base::search(), system = base::Sys.info())
[17:02:17.578]                   }
[17:02:17.578]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.578]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:17.578]                     cond$call), session = sessionInformation(), 
[17:02:17.578]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:17.578]                   signalCondition(cond)
[17:02:17.578]                 }
[17:02:17.578]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:17.578]                 "immediateCondition"))) {
[17:02:17.578]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:17.578]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.578]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:17.578]                   if (TRUE && !signal) {
[17:02:17.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.578]                     {
[17:02:17.578]                       inherits <- base::inherits
[17:02:17.578]                       invokeRestart <- base::invokeRestart
[17:02:17.578]                       is.null <- base::is.null
[17:02:17.578]                       muffled <- FALSE
[17:02:17.578]                       if (inherits(cond, "message")) {
[17:02:17.578]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.578]                         if (muffled) 
[17:02:17.578]                           invokeRestart("muffleMessage")
[17:02:17.578]                       }
[17:02:17.578]                       else if (inherits(cond, "warning")) {
[17:02:17.578]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.578]                         if (muffled) 
[17:02:17.578]                           invokeRestart("muffleWarning")
[17:02:17.578]                       }
[17:02:17.578]                       else if (inherits(cond, "condition")) {
[17:02:17.578]                         if (!is.null(pattern)) {
[17:02:17.578]                           computeRestarts <- base::computeRestarts
[17:02:17.578]                           grepl <- base::grepl
[17:02:17.578]                           restarts <- computeRestarts(cond)
[17:02:17.578]                           for (restart in restarts) {
[17:02:17.578]                             name <- restart$name
[17:02:17.578]                             if (is.null(name)) 
[17:02:17.578]                               next
[17:02:17.578]                             if (!grepl(pattern, name)) 
[17:02:17.578]                               next
[17:02:17.578]                             invokeRestart(restart)
[17:02:17.578]                             muffled <- TRUE
[17:02:17.578]                             break
[17:02:17.578]                           }
[17:02:17.578]                         }
[17:02:17.578]                       }
[17:02:17.578]                       invisible(muffled)
[17:02:17.578]                     }
[17:02:17.578]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.578]                   }
[17:02:17.578]                 }
[17:02:17.578]                 else {
[17:02:17.578]                   if (TRUE) {
[17:02:17.578]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.578]                     {
[17:02:17.578]                       inherits <- base::inherits
[17:02:17.578]                       invokeRestart <- base::invokeRestart
[17:02:17.578]                       is.null <- base::is.null
[17:02:17.578]                       muffled <- FALSE
[17:02:17.578]                       if (inherits(cond, "message")) {
[17:02:17.578]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.578]                         if (muffled) 
[17:02:17.578]                           invokeRestart("muffleMessage")
[17:02:17.578]                       }
[17:02:17.578]                       else if (inherits(cond, "warning")) {
[17:02:17.578]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.578]                         if (muffled) 
[17:02:17.578]                           invokeRestart("muffleWarning")
[17:02:17.578]                       }
[17:02:17.578]                       else if (inherits(cond, "condition")) {
[17:02:17.578]                         if (!is.null(pattern)) {
[17:02:17.578]                           computeRestarts <- base::computeRestarts
[17:02:17.578]                           grepl <- base::grepl
[17:02:17.578]                           restarts <- computeRestarts(cond)
[17:02:17.578]                           for (restart in restarts) {
[17:02:17.578]                             name <- restart$name
[17:02:17.578]                             if (is.null(name)) 
[17:02:17.578]                               next
[17:02:17.578]                             if (!grepl(pattern, name)) 
[17:02:17.578]                               next
[17:02:17.578]                             invokeRestart(restart)
[17:02:17.578]                             muffled <- TRUE
[17:02:17.578]                             break
[17:02:17.578]                           }
[17:02:17.578]                         }
[17:02:17.578]                       }
[17:02:17.578]                       invisible(muffled)
[17:02:17.578]                     }
[17:02:17.578]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.578]                   }
[17:02:17.578]                 }
[17:02:17.578]             }
[17:02:17.578]         }))
[17:02:17.578]     }, error = function(ex) {
[17:02:17.578]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:17.578]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.578]                 ...future.rng), started = ...future.startTime, 
[17:02:17.578]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:17.578]             version = "1.8"), class = "FutureResult")
[17:02:17.578]     }, finally = {
[17:02:17.578]         if (!identical(...future.workdir, getwd())) 
[17:02:17.578]             setwd(...future.workdir)
[17:02:17.578]         {
[17:02:17.578]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:17.578]                 ...future.oldOptions$nwarnings <- NULL
[17:02:17.578]             }
[17:02:17.578]             base::options(...future.oldOptions)
[17:02:17.578]             if (.Platform$OS.type == "windows") {
[17:02:17.578]                 old_names <- names(...future.oldEnvVars)
[17:02:17.578]                 envs <- base::Sys.getenv()
[17:02:17.578]                 names <- names(envs)
[17:02:17.578]                 common <- intersect(names, old_names)
[17:02:17.578]                 added <- setdiff(names, old_names)
[17:02:17.578]                 removed <- setdiff(old_names, names)
[17:02:17.578]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:17.578]                   envs[common]]
[17:02:17.578]                 NAMES <- toupper(changed)
[17:02:17.578]                 args <- list()
[17:02:17.578]                 for (kk in seq_along(NAMES)) {
[17:02:17.578]                   name <- changed[[kk]]
[17:02:17.578]                   NAME <- NAMES[[kk]]
[17:02:17.578]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.578]                     next
[17:02:17.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.578]                 }
[17:02:17.578]                 NAMES <- toupper(added)
[17:02:17.578]                 for (kk in seq_along(NAMES)) {
[17:02:17.578]                   name <- added[[kk]]
[17:02:17.578]                   NAME <- NAMES[[kk]]
[17:02:17.578]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.578]                     next
[17:02:17.578]                   args[[name]] <- ""
[17:02:17.578]                 }
[17:02:17.578]                 NAMES <- toupper(removed)
[17:02:17.578]                 for (kk in seq_along(NAMES)) {
[17:02:17.578]                   name <- removed[[kk]]
[17:02:17.578]                   NAME <- NAMES[[kk]]
[17:02:17.578]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.578]                     next
[17:02:17.578]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.578]                 }
[17:02:17.578]                 if (length(args) > 0) 
[17:02:17.578]                   base::do.call(base::Sys.setenv, args = args)
[17:02:17.578]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:17.578]             }
[17:02:17.578]             else {
[17:02:17.578]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:17.578]             }
[17:02:17.578]             {
[17:02:17.578]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:17.578]                   0L) {
[17:02:17.578]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:17.578]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:17.578]                   base::options(opts)
[17:02:17.578]                 }
[17:02:17.578]                 {
[17:02:17.578]                   {
[17:02:17.578]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:17.578]                     NULL
[17:02:17.578]                   }
[17:02:17.578]                   options(future.plan = NULL)
[17:02:17.578]                   if (is.na(NA_character_)) 
[17:02:17.578]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.578]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:17.578]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:17.578]                     .init = FALSE)
[17:02:17.578]                 }
[17:02:17.578]             }
[17:02:17.578]         }
[17:02:17.578]     })
[17:02:17.578]     if (TRUE) {
[17:02:17.578]         base::sink(type = "output", split = FALSE)
[17:02:17.578]         if (TRUE) {
[17:02:17.578]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:17.578]         }
[17:02:17.578]         else {
[17:02:17.578]             ...future.result["stdout"] <- base::list(NULL)
[17:02:17.578]         }
[17:02:17.578]         base::close(...future.stdout)
[17:02:17.578]         ...future.stdout <- NULL
[17:02:17.578]     }
[17:02:17.578]     ...future.result$conditions <- ...future.conditions
[17:02:17.578]     ...future.result$finished <- base::Sys.time()
[17:02:17.578]     ...future.result
[17:02:17.578] }
[17:02:17.581] MultisessionFuture started
[17:02:17.581] - Launch lazy future ... done
[17:02:17.581] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:17.583] receiveMessageFromWorker() for ClusterFuture ...
[17:02:17.583] - Validating connection of MultisessionFuture
[17:02:17.583] - received message: FutureResult
[17:02:17.583] - Received FutureResult
[17:02:17.583] - Erased future from FutureRegistry
[17:02:17.583] result() for ClusterFuture ...
[17:02:17.584] - result already collected: FutureResult
[17:02:17.584] result() for ClusterFuture ... done
[17:02:17.584] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.584] result() for ClusterFuture ...
[17:02:17.584] - result already collected: FutureResult
[17:02:17.584] result() for ClusterFuture ... done
[17:02:17.584] result() for ClusterFuture ...
[17:02:17.584] - result already collected: FutureResult
[17:02:17.584] result() for ClusterFuture ... done
[17:02:17.585] getGlobalsAndPackages() ...
[17:02:17.585] Searching for globals...
[17:02:17.585] - globals found: [1] ‘{’
[17:02:17.585] Searching for globals ... DONE
[17:02:17.585] Resolving globals: FALSE
[17:02:17.586] 
[17:02:17.586] 
[17:02:17.586] getGlobalsAndPackages() ... DONE
[17:02:17.586] run() for ‘Future’ ...
[17:02:17.586] - state: ‘created’
[17:02:17.586] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[17:02:17.602] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.603] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[17:02:17.603]   - Field: ‘node’
[17:02:17.603]   - Field: ‘label’
[17:02:17.603]   - Field: ‘local’
[17:02:17.603]   - Field: ‘owner’
[17:02:17.603]   - Field: ‘envir’
[17:02:17.603]   - Field: ‘workers’
[17:02:17.603]   - Field: ‘packages’
[17:02:17.603]   - Field: ‘gc’
[17:02:17.604]   - Field: ‘conditions’
[17:02:17.604]   - Field: ‘persistent’
[17:02:17.604]   - Field: ‘expr’
[17:02:17.604]   - Field: ‘uuid’
[17:02:17.604]   - Field: ‘seed’
[17:02:17.604]   - Field: ‘version’
[17:02:17.604]   - Field: ‘result’
[17:02:17.604]   - Field: ‘asynchronous’
[17:02:17.604]   - Field: ‘calls’
[17:02:17.604]   - Field: ‘globals’
[17:02:17.604]   - Field: ‘stdout’
[17:02:17.605]   - Field: ‘earlySignal’
[17:02:17.605]   - Field: ‘lazy’
[17:02:17.605]   - Field: ‘state’
[17:02:17.605] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[17:02:17.605] - Launch lazy future ...
[17:02:17.605] Packages needed by the future expression (n = 0): <none>
[17:02:17.605] Packages needed by future strategies (n = 0): <none>
[17:02:17.606] {
[17:02:17.606]     {
[17:02:17.606]         {
[17:02:17.606]             ...future.startTime <- base::Sys.time()
[17:02:17.606]             {
[17:02:17.606]                 {
[17:02:17.606]                   {
[17:02:17.606]                     {
[17:02:17.606]                       base::local({
[17:02:17.606]                         has_future <- base::requireNamespace("future", 
[17:02:17.606]                           quietly = TRUE)
[17:02:17.606]                         if (has_future) {
[17:02:17.606]                           ns <- base::getNamespace("future")
[17:02:17.606]                           version <- ns[[".package"]][["version"]]
[17:02:17.606]                           if (is.null(version)) 
[17:02:17.606]                             version <- utils::packageVersion("future")
[17:02:17.606]                         }
[17:02:17.606]                         else {
[17:02:17.606]                           version <- NULL
[17:02:17.606]                         }
[17:02:17.606]                         if (!has_future || version < "1.8.0") {
[17:02:17.606]                           info <- base::c(r_version = base::gsub("R version ", 
[17:02:17.606]                             "", base::R.version$version.string), 
[17:02:17.606]                             platform = base::sprintf("%s (%s-bit)", 
[17:02:17.606]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[17:02:17.606]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[17:02:17.606]                               "release", "version")], collapse = " "), 
[17:02:17.606]                             hostname = base::Sys.info()[["nodename"]])
[17:02:17.606]                           info <- base::sprintf("%s: %s", base::names(info), 
[17:02:17.606]                             info)
[17:02:17.606]                           info <- base::paste(info, collapse = "; ")
[17:02:17.606]                           if (!has_future) {
[17:02:17.606]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[17:02:17.606]                               info)
[17:02:17.606]                           }
[17:02:17.606]                           else {
[17:02:17.606]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[17:02:17.606]                               info, version)
[17:02:17.606]                           }
[17:02:17.606]                           base::stop(msg)
[17:02:17.606]                         }
[17:02:17.606]                       })
[17:02:17.606]                     }
[17:02:17.606]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[17:02:17.606]                     base::options(mc.cores = 1L)
[17:02:17.606]                   }
[17:02:17.606]                   ...future.strategy.old <- future::plan("list")
[17:02:17.606]                   options(future.plan = NULL)
[17:02:17.606]                   Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.606]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[17:02:17.606]                 }
[17:02:17.606]                 ...future.workdir <- getwd()
[17:02:17.606]             }
[17:02:17.606]             ...future.oldOptions <- base::as.list(base::.Options)
[17:02:17.606]             ...future.oldEnvVars <- base::Sys.getenv()
[17:02:17.606]         }
[17:02:17.606]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[17:02:17.606]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[17:02:17.606]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[17:02:17.606]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[17:02:17.606]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[17:02:17.606]             future.stdout.windows.reencode = NULL, width = 80L)
[17:02:17.606]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[17:02:17.606]             base::names(...future.oldOptions))
[17:02:17.606]     }
[17:02:17.606]     if (FALSE) {
[17:02:17.606]     }
[17:02:17.606]     else {
[17:02:17.606]         if (TRUE) {
[17:02:17.606]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[17:02:17.606]                 open = "w")
[17:02:17.606]         }
[17:02:17.606]         else {
[17:02:17.606]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[17:02:17.606]                 windows = "NUL", "/dev/null"), open = "w")
[17:02:17.606]         }
[17:02:17.606]         base::sink(...future.stdout, type = "output", split = FALSE)
[17:02:17.606]         base::on.exit(if (!base::is.null(...future.stdout)) {
[17:02:17.606]             base::sink(type = "output", split = FALSE)
[17:02:17.606]             base::close(...future.stdout)
[17:02:17.606]         }, add = TRUE)
[17:02:17.606]     }
[17:02:17.606]     ...future.frame <- base::sys.nframe()
[17:02:17.606]     ...future.conditions <- base::list()
[17:02:17.606]     ...future.rng <- base::globalenv()$.Random.seed
[17:02:17.606]     if (FALSE) {
[17:02:17.606]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[17:02:17.606]             "...future.value", "...future.globalenv.names", ".Random.seed")
[17:02:17.606]     }
[17:02:17.606]     ...future.result <- base::tryCatch({
[17:02:17.606]         base::withCallingHandlers({
[17:02:17.606]             ...future.value <- base::withVisible(base::local({
[17:02:17.606]                 ...future.makeSendCondition <- base::local({
[17:02:17.606]                   sendCondition <- NULL
[17:02:17.606]                   function(frame = 1L) {
[17:02:17.606]                     if (is.function(sendCondition)) 
[17:02:17.606]                       return(sendCondition)
[17:02:17.606]                     ns <- getNamespace("parallel")
[17:02:17.606]                     if (exists("sendData", mode = "function", 
[17:02:17.606]                       envir = ns)) {
[17:02:17.606]                       parallel_sendData <- get("sendData", mode = "function", 
[17:02:17.606]                         envir = ns)
[17:02:17.606]                       envir <- sys.frame(frame)
[17:02:17.606]                       master <- NULL
[17:02:17.606]                       while (!identical(envir, .GlobalEnv) && 
[17:02:17.606]                         !identical(envir, emptyenv())) {
[17:02:17.606]                         if (exists("master", mode = "list", envir = envir, 
[17:02:17.606]                           inherits = FALSE)) {
[17:02:17.606]                           master <- get("master", mode = "list", 
[17:02:17.606]                             envir = envir, inherits = FALSE)
[17:02:17.606]                           if (inherits(master, c("SOCKnode", 
[17:02:17.606]                             "SOCK0node"))) {
[17:02:17.606]                             sendCondition <<- function(cond) {
[17:02:17.606]                               data <- list(type = "VALUE", value = cond, 
[17:02:17.606]                                 success = TRUE)
[17:02:17.606]                               parallel_sendData(master, data)
[17:02:17.606]                             }
[17:02:17.606]                             return(sendCondition)
[17:02:17.606]                           }
[17:02:17.606]                         }
[17:02:17.606]                         frame <- frame + 1L
[17:02:17.606]                         envir <- sys.frame(frame)
[17:02:17.606]                       }
[17:02:17.606]                     }
[17:02:17.606]                     sendCondition <<- function(cond) NULL
[17:02:17.606]                   }
[17:02:17.606]                 })
[17:02:17.606]                 withCallingHandlers({
[17:02:17.606]                   {
[17:02:17.606]                     42
[17:02:17.606]                   }
[17:02:17.606]                 }, immediateCondition = function(cond) {
[17:02:17.606]                   sendCondition <- ...future.makeSendCondition()
[17:02:17.606]                   sendCondition(cond)
[17:02:17.606]                   muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.606]                   {
[17:02:17.606]                     inherits <- base::inherits
[17:02:17.606]                     invokeRestart <- base::invokeRestart
[17:02:17.606]                     is.null <- base::is.null
[17:02:17.606]                     muffled <- FALSE
[17:02:17.606]                     if (inherits(cond, "message")) {
[17:02:17.606]                       muffled <- grepl(pattern, "muffleMessage")
[17:02:17.606]                       if (muffled) 
[17:02:17.606]                         invokeRestart("muffleMessage")
[17:02:17.606]                     }
[17:02:17.606]                     else if (inherits(cond, "warning")) {
[17:02:17.606]                       muffled <- grepl(pattern, "muffleWarning")
[17:02:17.606]                       if (muffled) 
[17:02:17.606]                         invokeRestart("muffleWarning")
[17:02:17.606]                     }
[17:02:17.606]                     else if (inherits(cond, "condition")) {
[17:02:17.606]                       if (!is.null(pattern)) {
[17:02:17.606]                         computeRestarts <- base::computeRestarts
[17:02:17.606]                         grepl <- base::grepl
[17:02:17.606]                         restarts <- computeRestarts(cond)
[17:02:17.606]                         for (restart in restarts) {
[17:02:17.606]                           name <- restart$name
[17:02:17.606]                           if (is.null(name)) 
[17:02:17.606]                             next
[17:02:17.606]                           if (!grepl(pattern, name)) 
[17:02:17.606]                             next
[17:02:17.606]                           invokeRestart(restart)
[17:02:17.606]                           muffled <- TRUE
[17:02:17.606]                           break
[17:02:17.606]                         }
[17:02:17.606]                       }
[17:02:17.606]                     }
[17:02:17.606]                     invisible(muffled)
[17:02:17.606]                   }
[17:02:17.606]                   muffleCondition(cond)
[17:02:17.606]                 })
[17:02:17.606]             }))
[17:02:17.606]             future::FutureResult(value = ...future.value$value, 
[17:02:17.606]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.606]                   ...future.rng), globalenv = if (FALSE) 
[17:02:17.606]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[17:02:17.606]                     ...future.globalenv.names))
[17:02:17.606]                 else NULL, started = ...future.startTime, version = "1.8")
[17:02:17.606]         }, condition = base::local({
[17:02:17.606]             c <- base::c
[17:02:17.606]             inherits <- base::inherits
[17:02:17.606]             invokeRestart <- base::invokeRestart
[17:02:17.606]             length <- base::length
[17:02:17.606]             list <- base::list
[17:02:17.606]             seq.int <- base::seq.int
[17:02:17.606]             signalCondition <- base::signalCondition
[17:02:17.606]             sys.calls <- base::sys.calls
[17:02:17.606]             `[[` <- base::`[[`
[17:02:17.606]             `+` <- base::`+`
[17:02:17.606]             `<<-` <- base::`<<-`
[17:02:17.606]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[17:02:17.606]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[17:02:17.606]                   3L)]
[17:02:17.606]             }
[17:02:17.606]             function(cond) {
[17:02:17.606]                 is_error <- inherits(cond, "error")
[17:02:17.606]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[17:02:17.606]                   NULL)
[17:02:17.606]                 if (is_error) {
[17:02:17.606]                   sessionInformation <- function() {
[17:02:17.606]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[17:02:17.606]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[17:02:17.606]                       search = base::search(), system = base::Sys.info())
[17:02:17.606]                   }
[17:02:17.606]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.606]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[17:02:17.606]                     cond$call), session = sessionInformation(), 
[17:02:17.606]                     timestamp = base::Sys.time(), signaled = 0L)
[17:02:17.606]                   signalCondition(cond)
[17:02:17.606]                 }
[17:02:17.606]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[17:02:17.606]                 "immediateCondition"))) {
[17:02:17.606]                   signal <- TRUE && inherits(cond, "immediateCondition")
[17:02:17.606]                   ...future.conditions[[length(...future.conditions) + 
[17:02:17.606]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[17:02:17.606]                   if (TRUE && !signal) {
[17:02:17.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.606]                     {
[17:02:17.606]                       inherits <- base::inherits
[17:02:17.606]                       invokeRestart <- base::invokeRestart
[17:02:17.606]                       is.null <- base::is.null
[17:02:17.606]                       muffled <- FALSE
[17:02:17.606]                       if (inherits(cond, "message")) {
[17:02:17.606]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.606]                         if (muffled) 
[17:02:17.606]                           invokeRestart("muffleMessage")
[17:02:17.606]                       }
[17:02:17.606]                       else if (inherits(cond, "warning")) {
[17:02:17.606]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.606]                         if (muffled) 
[17:02:17.606]                           invokeRestart("muffleWarning")
[17:02:17.606]                       }
[17:02:17.606]                       else if (inherits(cond, "condition")) {
[17:02:17.606]                         if (!is.null(pattern)) {
[17:02:17.606]                           computeRestarts <- base::computeRestarts
[17:02:17.606]                           grepl <- base::grepl
[17:02:17.606]                           restarts <- computeRestarts(cond)
[17:02:17.606]                           for (restart in restarts) {
[17:02:17.606]                             name <- restart$name
[17:02:17.606]                             if (is.null(name)) 
[17:02:17.606]                               next
[17:02:17.606]                             if (!grepl(pattern, name)) 
[17:02:17.606]                               next
[17:02:17.606]                             invokeRestart(restart)
[17:02:17.606]                             muffled <- TRUE
[17:02:17.606]                             break
[17:02:17.606]                           }
[17:02:17.606]                         }
[17:02:17.606]                       }
[17:02:17.606]                       invisible(muffled)
[17:02:17.606]                     }
[17:02:17.606]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.606]                   }
[17:02:17.606]                 }
[17:02:17.606]                 else {
[17:02:17.606]                   if (TRUE) {
[17:02:17.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[17:02:17.606]                     {
[17:02:17.606]                       inherits <- base::inherits
[17:02:17.606]                       invokeRestart <- base::invokeRestart
[17:02:17.606]                       is.null <- base::is.null
[17:02:17.606]                       muffled <- FALSE
[17:02:17.606]                       if (inherits(cond, "message")) {
[17:02:17.606]                         muffled <- grepl(pattern, "muffleMessage")
[17:02:17.606]                         if (muffled) 
[17:02:17.606]                           invokeRestart("muffleMessage")
[17:02:17.606]                       }
[17:02:17.606]                       else if (inherits(cond, "warning")) {
[17:02:17.606]                         muffled <- grepl(pattern, "muffleWarning")
[17:02:17.606]                         if (muffled) 
[17:02:17.606]                           invokeRestart("muffleWarning")
[17:02:17.606]                       }
[17:02:17.606]                       else if (inherits(cond, "condition")) {
[17:02:17.606]                         if (!is.null(pattern)) {
[17:02:17.606]                           computeRestarts <- base::computeRestarts
[17:02:17.606]                           grepl <- base::grepl
[17:02:17.606]                           restarts <- computeRestarts(cond)
[17:02:17.606]                           for (restart in restarts) {
[17:02:17.606]                             name <- restart$name
[17:02:17.606]                             if (is.null(name)) 
[17:02:17.606]                               next
[17:02:17.606]                             if (!grepl(pattern, name)) 
[17:02:17.606]                               next
[17:02:17.606]                             invokeRestart(restart)
[17:02:17.606]                             muffled <- TRUE
[17:02:17.606]                             break
[17:02:17.606]                           }
[17:02:17.606]                         }
[17:02:17.606]                       }
[17:02:17.606]                       invisible(muffled)
[17:02:17.606]                     }
[17:02:17.606]                     muffleCondition(cond, pattern = "^muffle")
[17:02:17.606]                   }
[17:02:17.606]                 }
[17:02:17.606]             }
[17:02:17.606]         }))
[17:02:17.606]     }, error = function(ex) {
[17:02:17.606]         base::structure(base::list(value = NULL, visible = NULL, 
[17:02:17.606]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[17:02:17.606]                 ...future.rng), started = ...future.startTime, 
[17:02:17.606]             finished = Sys.time(), session_uuid = NA_character_, 
[17:02:17.606]             version = "1.8"), class = "FutureResult")
[17:02:17.606]     }, finally = {
[17:02:17.606]         if (!identical(...future.workdir, getwd())) 
[17:02:17.606]             setwd(...future.workdir)
[17:02:17.606]         {
[17:02:17.606]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[17:02:17.606]                 ...future.oldOptions$nwarnings <- NULL
[17:02:17.606]             }
[17:02:17.606]             base::options(...future.oldOptions)
[17:02:17.606]             if (.Platform$OS.type == "windows") {
[17:02:17.606]                 old_names <- names(...future.oldEnvVars)
[17:02:17.606]                 envs <- base::Sys.getenv()
[17:02:17.606]                 names <- names(envs)
[17:02:17.606]                 common <- intersect(names, old_names)
[17:02:17.606]                 added <- setdiff(names, old_names)
[17:02:17.606]                 removed <- setdiff(old_names, names)
[17:02:17.606]                 changed <- common[...future.oldEnvVars[common] != 
[17:02:17.606]                   envs[common]]
[17:02:17.606]                 NAMES <- toupper(changed)
[17:02:17.606]                 args <- list()
[17:02:17.606]                 for (kk in seq_along(NAMES)) {
[17:02:17.606]                   name <- changed[[kk]]
[17:02:17.606]                   NAME <- NAMES[[kk]]
[17:02:17.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.606]                     next
[17:02:17.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.606]                 }
[17:02:17.606]                 NAMES <- toupper(added)
[17:02:17.606]                 for (kk in seq_along(NAMES)) {
[17:02:17.606]                   name <- added[[kk]]
[17:02:17.606]                   NAME <- NAMES[[kk]]
[17:02:17.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.606]                     next
[17:02:17.606]                   args[[name]] <- ""
[17:02:17.606]                 }
[17:02:17.606]                 NAMES <- toupper(removed)
[17:02:17.606]                 for (kk in seq_along(NAMES)) {
[17:02:17.606]                   name <- removed[[kk]]
[17:02:17.606]                   NAME <- NAMES[[kk]]
[17:02:17.606]                   if (name != NAME && is.element(NAME, old_names)) 
[17:02:17.606]                     next
[17:02:17.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[17:02:17.606]                 }
[17:02:17.606]                 if (length(args) > 0) 
[17:02:17.606]                   base::do.call(base::Sys.setenv, args = args)
[17:02:17.606]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[17:02:17.606]             }
[17:02:17.606]             else {
[17:02:17.606]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[17:02:17.606]             }
[17:02:17.606]             {
[17:02:17.606]                 if (base::length(...future.futureOptionsAdded) > 
[17:02:17.606]                   0L) {
[17:02:17.606]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[17:02:17.606]                   base::names(opts) <- ...future.futureOptionsAdded
[17:02:17.606]                   base::options(opts)
[17:02:17.606]                 }
[17:02:17.606]                 {
[17:02:17.606]                   {
[17:02:17.606]                     base::options(mc.cores = ...future.mc.cores.old)
[17:02:17.606]                     NULL
[17:02:17.606]                   }
[17:02:17.606]                   options(future.plan = NULL)
[17:02:17.606]                   if (is.na(NA_character_)) 
[17:02:17.606]                     Sys.unsetenv("R_FUTURE_PLAN")
[17:02:17.606]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[17:02:17.606]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[17:02:17.606]                     .init = FALSE)
[17:02:17.606]                 }
[17:02:17.606]             }
[17:02:17.606]         }
[17:02:17.606]     })
[17:02:17.606]     if (TRUE) {
[17:02:17.606]         base::sink(type = "output", split = FALSE)
[17:02:17.606]         if (TRUE) {
[17:02:17.606]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[17:02:17.606]         }
[17:02:17.606]         else {
[17:02:17.606]             ...future.result["stdout"] <- base::list(NULL)
[17:02:17.606]         }
[17:02:17.606]         base::close(...future.stdout)
[17:02:17.606]         ...future.stdout <- NULL
[17:02:17.606]     }
[17:02:17.606]     ...future.result$conditions <- ...future.conditions
[17:02:17.606]     ...future.result$finished <- base::Sys.time()
[17:02:17.606]     ...future.result
[17:02:17.606] }
[17:02:17.609] MultisessionFuture started
[17:02:17.609] - Launch lazy future ... done
[17:02:17.609] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[17:02:17.610] receiveMessageFromWorker() for ClusterFuture ...
[17:02:17.610] - Validating connection of MultisessionFuture
[17:02:17.611] - received message: FutureResult
[17:02:17.611] - Received FutureResult
[17:02:17.611] - Erased future from FutureRegistry
[17:02:17.611] result() for ClusterFuture ...
[17:02:17.611] - result already collected: FutureResult
[17:02:17.611] result() for ClusterFuture ... done
[17:02:17.611] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 11e25055-1950-f121-c47f-a9d4d891d4d9
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[17:02:17.611] result() for ClusterFuture ...
[17:02:17.611] - result already collected: FutureResult
[17:02:17.612] result() for ClusterFuture ... done
[17:02:17.612] result() for ClusterFuture ...
[17:02:17.612] - result already collected: FutureResult
[17:02:17.612] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[17:02:17.613] plan(): Setting new future strategy stack:
[17:02:17.613] List of future strategies:
[17:02:17.613] 1. FutureStrategy:
[17:02:17.613]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[17:02:17.613]    - tweaked: FALSE
[17:02:17.613]    - call: future::plan(oplan)
[17:02:17.613] plan(): nbrOfWorkers() = 1
> 
