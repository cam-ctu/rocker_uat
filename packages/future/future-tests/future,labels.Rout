
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[18:03:52.720] plan(): Setting new future strategy stack:
[18:03:52.721] List of future strategies:
[18:03:52.721] 1. sequential:
[18:03:52.721]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.721]    - tweaked: FALSE
[18:03:52.721]    - call: future::plan("sequential")
[18:03:52.744] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[18:03:52.793] plan(): Setting new future strategy stack:
[18:03:52.794] List of future strategies:
[18:03:52.794] 1. sequential:
[18:03:52.794]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.794]    - tweaked: FALSE
[18:03:52.794]    - call: plan(strategy)
[18:03:52.820] plan(): nbrOfWorkers() = 1
[18:03:52.821] getGlobalsAndPackages() ...
[18:03:52.822] Searching for globals...
[18:03:52.825] 
[18:03:52.825] Searching for globals ... DONE
[18:03:52.826] - globals: [0] <none>
[18:03:52.826] getGlobalsAndPackages() ... DONE
[18:03:52.828] Packages needed by the future expression (n = 0): <none>
[18:03:52.828] Packages needed by future strategies (n = 0): <none>
[18:03:52.829] {
[18:03:52.829]     {
[18:03:52.829]         {
[18:03:52.829]             ...future.startTime <- base::Sys.time()
[18:03:52.829]             {
[18:03:52.829]                 {
[18:03:52.829]                   {
[18:03:52.829]                     base::local({
[18:03:52.829]                       has_future <- base::requireNamespace("future", 
[18:03:52.829]                         quietly = TRUE)
[18:03:52.829]                       if (has_future) {
[18:03:52.829]                         ns <- base::getNamespace("future")
[18:03:52.829]                         version <- ns[[".package"]][["version"]]
[18:03:52.829]                         if (is.null(version)) 
[18:03:52.829]                           version <- utils::packageVersion("future")
[18:03:52.829]                       }
[18:03:52.829]                       else {
[18:03:52.829]                         version <- NULL
[18:03:52.829]                       }
[18:03:52.829]                       if (!has_future || version < "1.8.0") {
[18:03:52.829]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.829]                           "", base::R.version$version.string), 
[18:03:52.829]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:52.829]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.829]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.829]                             "release", "version")], collapse = " "), 
[18:03:52.829]                           hostname = base::Sys.info()[["nodename"]])
[18:03:52.829]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.829]                           info)
[18:03:52.829]                         info <- base::paste(info, collapse = "; ")
[18:03:52.829]                         if (!has_future) {
[18:03:52.829]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.829]                             info)
[18:03:52.829]                         }
[18:03:52.829]                         else {
[18:03:52.829]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.829]                             info, version)
[18:03:52.829]                         }
[18:03:52.829]                         base::stop(msg)
[18:03:52.829]                       }
[18:03:52.829]                     })
[18:03:52.829]                   }
[18:03:52.829]                   ...future.strategy.old <- future::plan("list")
[18:03:52.829]                   options(future.plan = NULL)
[18:03:52.829]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.829]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.829]                 }
[18:03:52.829]                 ...future.workdir <- getwd()
[18:03:52.829]             }
[18:03:52.829]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.829]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.829]         }
[18:03:52.829]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.829]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.829]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.829]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.829]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.829]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.829]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.829]             base::names(...future.oldOptions))
[18:03:52.829]     }
[18:03:52.829]     if (FALSE) {
[18:03:52.829]     }
[18:03:52.829]     else {
[18:03:52.829]         if (TRUE) {
[18:03:52.829]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.829]                 open = "w")
[18:03:52.829]         }
[18:03:52.829]         else {
[18:03:52.829]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.829]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.829]         }
[18:03:52.829]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.829]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.829]             base::sink(type = "output", split = FALSE)
[18:03:52.829]             base::close(...future.stdout)
[18:03:52.829]         }, add = TRUE)
[18:03:52.829]     }
[18:03:52.829]     ...future.frame <- base::sys.nframe()
[18:03:52.829]     ...future.conditions <- base::list()
[18:03:52.829]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.829]     if (FALSE) {
[18:03:52.829]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.829]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.829]     }
[18:03:52.829]     ...future.result <- base::tryCatch({
[18:03:52.829]         base::withCallingHandlers({
[18:03:52.829]             ...future.value <- base::withVisible(base::local(42))
[18:03:52.829]             future::FutureResult(value = ...future.value$value, 
[18:03:52.829]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.829]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.829]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.829]                     ...future.globalenv.names))
[18:03:52.829]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.829]         }, condition = base::local({
[18:03:52.829]             c <- base::c
[18:03:52.829]             inherits <- base::inherits
[18:03:52.829]             invokeRestart <- base::invokeRestart
[18:03:52.829]             length <- base::length
[18:03:52.829]             list <- base::list
[18:03:52.829]             seq.int <- base::seq.int
[18:03:52.829]             signalCondition <- base::signalCondition
[18:03:52.829]             sys.calls <- base::sys.calls
[18:03:52.829]             `[[` <- base::`[[`
[18:03:52.829]             `+` <- base::`+`
[18:03:52.829]             `<<-` <- base::`<<-`
[18:03:52.829]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.829]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.829]                   3L)]
[18:03:52.829]             }
[18:03:52.829]             function(cond) {
[18:03:52.829]                 is_error <- inherits(cond, "error")
[18:03:52.829]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.829]                   NULL)
[18:03:52.829]                 if (is_error) {
[18:03:52.829]                   sessionInformation <- function() {
[18:03:52.829]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.829]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.829]                       search = base::search(), system = base::Sys.info())
[18:03:52.829]                   }
[18:03:52.829]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.829]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.829]                     cond$call), session = sessionInformation(), 
[18:03:52.829]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.829]                   signalCondition(cond)
[18:03:52.829]                 }
[18:03:52.829]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.829]                 "immediateCondition"))) {
[18:03:52.829]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.829]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.829]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.829]                   if (TRUE && !signal) {
[18:03:52.829]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.829]                     {
[18:03:52.829]                       inherits <- base::inherits
[18:03:52.829]                       invokeRestart <- base::invokeRestart
[18:03:52.829]                       is.null <- base::is.null
[18:03:52.829]                       muffled <- FALSE
[18:03:52.829]                       if (inherits(cond, "message")) {
[18:03:52.829]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.829]                         if (muffled) 
[18:03:52.829]                           invokeRestart("muffleMessage")
[18:03:52.829]                       }
[18:03:52.829]                       else if (inherits(cond, "warning")) {
[18:03:52.829]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.829]                         if (muffled) 
[18:03:52.829]                           invokeRestart("muffleWarning")
[18:03:52.829]                       }
[18:03:52.829]                       else if (inherits(cond, "condition")) {
[18:03:52.829]                         if (!is.null(pattern)) {
[18:03:52.829]                           computeRestarts <- base::computeRestarts
[18:03:52.829]                           grepl <- base::grepl
[18:03:52.829]                           restarts <- computeRestarts(cond)
[18:03:52.829]                           for (restart in restarts) {
[18:03:52.829]                             name <- restart$name
[18:03:52.829]                             if (is.null(name)) 
[18:03:52.829]                               next
[18:03:52.829]                             if (!grepl(pattern, name)) 
[18:03:52.829]                               next
[18:03:52.829]                             invokeRestart(restart)
[18:03:52.829]                             muffled <- TRUE
[18:03:52.829]                             break
[18:03:52.829]                           }
[18:03:52.829]                         }
[18:03:52.829]                       }
[18:03:52.829]                       invisible(muffled)
[18:03:52.829]                     }
[18:03:52.829]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.829]                   }
[18:03:52.829]                 }
[18:03:52.829]                 else {
[18:03:52.829]                   if (TRUE) {
[18:03:52.829]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.829]                     {
[18:03:52.829]                       inherits <- base::inherits
[18:03:52.829]                       invokeRestart <- base::invokeRestart
[18:03:52.829]                       is.null <- base::is.null
[18:03:52.829]                       muffled <- FALSE
[18:03:52.829]                       if (inherits(cond, "message")) {
[18:03:52.829]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.829]                         if (muffled) 
[18:03:52.829]                           invokeRestart("muffleMessage")
[18:03:52.829]                       }
[18:03:52.829]                       else if (inherits(cond, "warning")) {
[18:03:52.829]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.829]                         if (muffled) 
[18:03:52.829]                           invokeRestart("muffleWarning")
[18:03:52.829]                       }
[18:03:52.829]                       else if (inherits(cond, "condition")) {
[18:03:52.829]                         if (!is.null(pattern)) {
[18:03:52.829]                           computeRestarts <- base::computeRestarts
[18:03:52.829]                           grepl <- base::grepl
[18:03:52.829]                           restarts <- computeRestarts(cond)
[18:03:52.829]                           for (restart in restarts) {
[18:03:52.829]                             name <- restart$name
[18:03:52.829]                             if (is.null(name)) 
[18:03:52.829]                               next
[18:03:52.829]                             if (!grepl(pattern, name)) 
[18:03:52.829]                               next
[18:03:52.829]                             invokeRestart(restart)
[18:03:52.829]                             muffled <- TRUE
[18:03:52.829]                             break
[18:03:52.829]                           }
[18:03:52.829]                         }
[18:03:52.829]                       }
[18:03:52.829]                       invisible(muffled)
[18:03:52.829]                     }
[18:03:52.829]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.829]                   }
[18:03:52.829]                 }
[18:03:52.829]             }
[18:03:52.829]         }))
[18:03:52.829]     }, error = function(ex) {
[18:03:52.829]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.829]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.829]                 ...future.rng), started = ...future.startTime, 
[18:03:52.829]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.829]             version = "1.8"), class = "FutureResult")
[18:03:52.829]     }, finally = {
[18:03:52.829]         if (!identical(...future.workdir, getwd())) 
[18:03:52.829]             setwd(...future.workdir)
[18:03:52.829]         {
[18:03:52.829]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.829]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.829]             }
[18:03:52.829]             base::options(...future.oldOptions)
[18:03:52.829]             if (.Platform$OS.type == "windows") {
[18:03:52.829]                 old_names <- names(...future.oldEnvVars)
[18:03:52.829]                 envs <- base::Sys.getenv()
[18:03:52.829]                 names <- names(envs)
[18:03:52.829]                 common <- intersect(names, old_names)
[18:03:52.829]                 added <- setdiff(names, old_names)
[18:03:52.829]                 removed <- setdiff(old_names, names)
[18:03:52.829]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.829]                   envs[common]]
[18:03:52.829]                 NAMES <- toupper(changed)
[18:03:52.829]                 args <- list()
[18:03:52.829]                 for (kk in seq_along(NAMES)) {
[18:03:52.829]                   name <- changed[[kk]]
[18:03:52.829]                   NAME <- NAMES[[kk]]
[18:03:52.829]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.829]                     next
[18:03:52.829]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.829]                 }
[18:03:52.829]                 NAMES <- toupper(added)
[18:03:52.829]                 for (kk in seq_along(NAMES)) {
[18:03:52.829]                   name <- added[[kk]]
[18:03:52.829]                   NAME <- NAMES[[kk]]
[18:03:52.829]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.829]                     next
[18:03:52.829]                   args[[name]] <- ""
[18:03:52.829]                 }
[18:03:52.829]                 NAMES <- toupper(removed)
[18:03:52.829]                 for (kk in seq_along(NAMES)) {
[18:03:52.829]                   name <- removed[[kk]]
[18:03:52.829]                   NAME <- NAMES[[kk]]
[18:03:52.829]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.829]                     next
[18:03:52.829]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.829]                 }
[18:03:52.829]                 if (length(args) > 0) 
[18:03:52.829]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.829]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.829]             }
[18:03:52.829]             else {
[18:03:52.829]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.829]             }
[18:03:52.829]             {
[18:03:52.829]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.829]                   0L) {
[18:03:52.829]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.829]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.829]                   base::options(opts)
[18:03:52.829]                 }
[18:03:52.829]                 {
[18:03:52.829]                   {
[18:03:52.829]                     NULL
[18:03:52.829]                     RNGkind("Mersenne-Twister")
[18:03:52.829]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:52.829]                       inherits = FALSE)
[18:03:52.829]                   }
[18:03:52.829]                   options(future.plan = NULL)
[18:03:52.829]                   if (is.na(NA_character_)) 
[18:03:52.829]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.829]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.829]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.829]                     .init = FALSE)
[18:03:52.829]                 }
[18:03:52.829]             }
[18:03:52.829]         }
[18:03:52.829]     })
[18:03:52.829]     if (TRUE) {
[18:03:52.829]         base::sink(type = "output", split = FALSE)
[18:03:52.829]         if (TRUE) {
[18:03:52.829]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.829]         }
[18:03:52.829]         else {
[18:03:52.829]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.829]         }
[18:03:52.829]         base::close(...future.stdout)
[18:03:52.829]         ...future.stdout <- NULL
[18:03:52.829]     }
[18:03:52.829]     ...future.result$conditions <- ...future.conditions
[18:03:52.829]     ...future.result$finished <- base::Sys.time()
[18:03:52.829]     ...future.result
[18:03:52.829] }
[18:03:52.833] plan(): Setting new future strategy stack:
[18:03:52.833] List of future strategies:
[18:03:52.833] 1. sequential:
[18:03:52.833]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.833]    - tweaked: FALSE
[18:03:52.833]    - call: NULL
[18:03:52.834] plan(): nbrOfWorkers() = 1
[18:03:52.836] plan(): Setting new future strategy stack:
[18:03:52.836] List of future strategies:
[18:03:52.836] 1. sequential:
[18:03:52.836]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.836]    - tweaked: FALSE
[18:03:52.836]    - call: plan(strategy)
[18:03:52.837] plan(): nbrOfWorkers() = 1
[18:03:52.838] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.841] getGlobalsAndPackages() ...
[18:03:52.841] Searching for globals...
[18:03:52.842] 
[18:03:52.842] Searching for globals ... DONE
[18:03:52.843] - globals: [0] <none>
[18:03:52.843] getGlobalsAndPackages() ... DONE
[18:03:52.844] run() for ‘Future’ ...
[18:03:52.844] - state: ‘created’
[18:03:52.844] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:52.845] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.845] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:52.845]   - Field: ‘label’
[18:03:52.845]   - Field: ‘local’
[18:03:52.846]   - Field: ‘owner’
[18:03:52.846]   - Field: ‘envir’
[18:03:52.846]   - Field: ‘packages’
[18:03:52.846]   - Field: ‘gc’
[18:03:52.846]   - Field: ‘conditions’
[18:03:52.847]   - Field: ‘expr’
[18:03:52.847]   - Field: ‘uuid’
[18:03:52.847]   - Field: ‘seed’
[18:03:52.847]   - Field: ‘version’
[18:03:52.847]   - Field: ‘result’
[18:03:52.848]   - Field: ‘asynchronous’
[18:03:52.848]   - Field: ‘calls’
[18:03:52.848]   - Field: ‘globals’
[18:03:52.848]   - Field: ‘stdout’
[18:03:52.848]   - Field: ‘earlySignal’
[18:03:52.849]   - Field: ‘lazy’
[18:03:52.849]   - Field: ‘state’
[18:03:52.849] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:52.849] - Launch lazy future ...
[18:03:52.850] Packages needed by the future expression (n = 0): <none>
[18:03:52.850] Packages needed by future strategies (n = 0): <none>
[18:03:52.851] {
[18:03:52.851]     {
[18:03:52.851]         {
[18:03:52.851]             ...future.startTime <- base::Sys.time()
[18:03:52.851]             {
[18:03:52.851]                 {
[18:03:52.851]                   {
[18:03:52.851]                     base::local({
[18:03:52.851]                       has_future <- base::requireNamespace("future", 
[18:03:52.851]                         quietly = TRUE)
[18:03:52.851]                       if (has_future) {
[18:03:52.851]                         ns <- base::getNamespace("future")
[18:03:52.851]                         version <- ns[[".package"]][["version"]]
[18:03:52.851]                         if (is.null(version)) 
[18:03:52.851]                           version <- utils::packageVersion("future")
[18:03:52.851]                       }
[18:03:52.851]                       else {
[18:03:52.851]                         version <- NULL
[18:03:52.851]                       }
[18:03:52.851]                       if (!has_future || version < "1.8.0") {
[18:03:52.851]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.851]                           "", base::R.version$version.string), 
[18:03:52.851]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:52.851]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.851]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.851]                             "release", "version")], collapse = " "), 
[18:03:52.851]                           hostname = base::Sys.info()[["nodename"]])
[18:03:52.851]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.851]                           info)
[18:03:52.851]                         info <- base::paste(info, collapse = "; ")
[18:03:52.851]                         if (!has_future) {
[18:03:52.851]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.851]                             info)
[18:03:52.851]                         }
[18:03:52.851]                         else {
[18:03:52.851]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.851]                             info, version)
[18:03:52.851]                         }
[18:03:52.851]                         base::stop(msg)
[18:03:52.851]                       }
[18:03:52.851]                     })
[18:03:52.851]                   }
[18:03:52.851]                   ...future.strategy.old <- future::plan("list")
[18:03:52.851]                   options(future.plan = NULL)
[18:03:52.851]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.851]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.851]                 }
[18:03:52.851]                 ...future.workdir <- getwd()
[18:03:52.851]             }
[18:03:52.851]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.851]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.851]         }
[18:03:52.851]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.851]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.851]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.851]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.851]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.851]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.851]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.851]             base::names(...future.oldOptions))
[18:03:52.851]     }
[18:03:52.851]     if (FALSE) {
[18:03:52.851]     }
[18:03:52.851]     else {
[18:03:52.851]         if (TRUE) {
[18:03:52.851]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.851]                 open = "w")
[18:03:52.851]         }
[18:03:52.851]         else {
[18:03:52.851]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.851]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.851]         }
[18:03:52.851]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.851]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.851]             base::sink(type = "output", split = FALSE)
[18:03:52.851]             base::close(...future.stdout)
[18:03:52.851]         }, add = TRUE)
[18:03:52.851]     }
[18:03:52.851]     ...future.frame <- base::sys.nframe()
[18:03:52.851]     ...future.conditions <- base::list()
[18:03:52.851]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.851]     if (FALSE) {
[18:03:52.851]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.851]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.851]     }
[18:03:52.851]     ...future.result <- base::tryCatch({
[18:03:52.851]         base::withCallingHandlers({
[18:03:52.851]             ...future.value <- base::withVisible(base::local(42))
[18:03:52.851]             future::FutureResult(value = ...future.value$value, 
[18:03:52.851]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.851]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.851]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.851]                     ...future.globalenv.names))
[18:03:52.851]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.851]         }, condition = base::local({
[18:03:52.851]             c <- base::c
[18:03:52.851]             inherits <- base::inherits
[18:03:52.851]             invokeRestart <- base::invokeRestart
[18:03:52.851]             length <- base::length
[18:03:52.851]             list <- base::list
[18:03:52.851]             seq.int <- base::seq.int
[18:03:52.851]             signalCondition <- base::signalCondition
[18:03:52.851]             sys.calls <- base::sys.calls
[18:03:52.851]             `[[` <- base::`[[`
[18:03:52.851]             `+` <- base::`+`
[18:03:52.851]             `<<-` <- base::`<<-`
[18:03:52.851]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.851]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.851]                   3L)]
[18:03:52.851]             }
[18:03:52.851]             function(cond) {
[18:03:52.851]                 is_error <- inherits(cond, "error")
[18:03:52.851]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.851]                   NULL)
[18:03:52.851]                 if (is_error) {
[18:03:52.851]                   sessionInformation <- function() {
[18:03:52.851]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.851]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.851]                       search = base::search(), system = base::Sys.info())
[18:03:52.851]                   }
[18:03:52.851]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.851]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.851]                     cond$call), session = sessionInformation(), 
[18:03:52.851]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.851]                   signalCondition(cond)
[18:03:52.851]                 }
[18:03:52.851]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.851]                 "immediateCondition"))) {
[18:03:52.851]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.851]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.851]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.851]                   if (TRUE && !signal) {
[18:03:52.851]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.851]                     {
[18:03:52.851]                       inherits <- base::inherits
[18:03:52.851]                       invokeRestart <- base::invokeRestart
[18:03:52.851]                       is.null <- base::is.null
[18:03:52.851]                       muffled <- FALSE
[18:03:52.851]                       if (inherits(cond, "message")) {
[18:03:52.851]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.851]                         if (muffled) 
[18:03:52.851]                           invokeRestart("muffleMessage")
[18:03:52.851]                       }
[18:03:52.851]                       else if (inherits(cond, "warning")) {
[18:03:52.851]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.851]                         if (muffled) 
[18:03:52.851]                           invokeRestart("muffleWarning")
[18:03:52.851]                       }
[18:03:52.851]                       else if (inherits(cond, "condition")) {
[18:03:52.851]                         if (!is.null(pattern)) {
[18:03:52.851]                           computeRestarts <- base::computeRestarts
[18:03:52.851]                           grepl <- base::grepl
[18:03:52.851]                           restarts <- computeRestarts(cond)
[18:03:52.851]                           for (restart in restarts) {
[18:03:52.851]                             name <- restart$name
[18:03:52.851]                             if (is.null(name)) 
[18:03:52.851]                               next
[18:03:52.851]                             if (!grepl(pattern, name)) 
[18:03:52.851]                               next
[18:03:52.851]                             invokeRestart(restart)
[18:03:52.851]                             muffled <- TRUE
[18:03:52.851]                             break
[18:03:52.851]                           }
[18:03:52.851]                         }
[18:03:52.851]                       }
[18:03:52.851]                       invisible(muffled)
[18:03:52.851]                     }
[18:03:52.851]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.851]                   }
[18:03:52.851]                 }
[18:03:52.851]                 else {
[18:03:52.851]                   if (TRUE) {
[18:03:52.851]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.851]                     {
[18:03:52.851]                       inherits <- base::inherits
[18:03:52.851]                       invokeRestart <- base::invokeRestart
[18:03:52.851]                       is.null <- base::is.null
[18:03:52.851]                       muffled <- FALSE
[18:03:52.851]                       if (inherits(cond, "message")) {
[18:03:52.851]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.851]                         if (muffled) 
[18:03:52.851]                           invokeRestart("muffleMessage")
[18:03:52.851]                       }
[18:03:52.851]                       else if (inherits(cond, "warning")) {
[18:03:52.851]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.851]                         if (muffled) 
[18:03:52.851]                           invokeRestart("muffleWarning")
[18:03:52.851]                       }
[18:03:52.851]                       else if (inherits(cond, "condition")) {
[18:03:52.851]                         if (!is.null(pattern)) {
[18:03:52.851]                           computeRestarts <- base::computeRestarts
[18:03:52.851]                           grepl <- base::grepl
[18:03:52.851]                           restarts <- computeRestarts(cond)
[18:03:52.851]                           for (restart in restarts) {
[18:03:52.851]                             name <- restart$name
[18:03:52.851]                             if (is.null(name)) 
[18:03:52.851]                               next
[18:03:52.851]                             if (!grepl(pattern, name)) 
[18:03:52.851]                               next
[18:03:52.851]                             invokeRestart(restart)
[18:03:52.851]                             muffled <- TRUE
[18:03:52.851]                             break
[18:03:52.851]                           }
[18:03:52.851]                         }
[18:03:52.851]                       }
[18:03:52.851]                       invisible(muffled)
[18:03:52.851]                     }
[18:03:52.851]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.851]                   }
[18:03:52.851]                 }
[18:03:52.851]             }
[18:03:52.851]         }))
[18:03:52.851]     }, error = function(ex) {
[18:03:52.851]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.851]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.851]                 ...future.rng), started = ...future.startTime, 
[18:03:52.851]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.851]             version = "1.8"), class = "FutureResult")
[18:03:52.851]     }, finally = {
[18:03:52.851]         if (!identical(...future.workdir, getwd())) 
[18:03:52.851]             setwd(...future.workdir)
[18:03:52.851]         {
[18:03:52.851]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.851]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.851]             }
[18:03:52.851]             base::options(...future.oldOptions)
[18:03:52.851]             if (.Platform$OS.type == "windows") {
[18:03:52.851]                 old_names <- names(...future.oldEnvVars)
[18:03:52.851]                 envs <- base::Sys.getenv()
[18:03:52.851]                 names <- names(envs)
[18:03:52.851]                 common <- intersect(names, old_names)
[18:03:52.851]                 added <- setdiff(names, old_names)
[18:03:52.851]                 removed <- setdiff(old_names, names)
[18:03:52.851]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.851]                   envs[common]]
[18:03:52.851]                 NAMES <- toupper(changed)
[18:03:52.851]                 args <- list()
[18:03:52.851]                 for (kk in seq_along(NAMES)) {
[18:03:52.851]                   name <- changed[[kk]]
[18:03:52.851]                   NAME <- NAMES[[kk]]
[18:03:52.851]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.851]                     next
[18:03:52.851]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.851]                 }
[18:03:52.851]                 NAMES <- toupper(added)
[18:03:52.851]                 for (kk in seq_along(NAMES)) {
[18:03:52.851]                   name <- added[[kk]]
[18:03:52.851]                   NAME <- NAMES[[kk]]
[18:03:52.851]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.851]                     next
[18:03:52.851]                   args[[name]] <- ""
[18:03:52.851]                 }
[18:03:52.851]                 NAMES <- toupper(removed)
[18:03:52.851]                 for (kk in seq_along(NAMES)) {
[18:03:52.851]                   name <- removed[[kk]]
[18:03:52.851]                   NAME <- NAMES[[kk]]
[18:03:52.851]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.851]                     next
[18:03:52.851]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.851]                 }
[18:03:52.851]                 if (length(args) > 0) 
[18:03:52.851]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.851]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.851]             }
[18:03:52.851]             else {
[18:03:52.851]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.851]             }
[18:03:52.851]             {
[18:03:52.851]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.851]                   0L) {
[18:03:52.851]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.851]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.851]                   base::options(opts)
[18:03:52.851]                 }
[18:03:52.851]                 {
[18:03:52.851]                   {
[18:03:52.851]                     NULL
[18:03:52.851]                     RNGkind("Mersenne-Twister")
[18:03:52.851]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:52.851]                       inherits = FALSE)
[18:03:52.851]                   }
[18:03:52.851]                   options(future.plan = NULL)
[18:03:52.851]                   if (is.na(NA_character_)) 
[18:03:52.851]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.851]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.851]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.851]                     .init = FALSE)
[18:03:52.851]                 }
[18:03:52.851]             }
[18:03:52.851]         }
[18:03:52.851]     })
[18:03:52.851]     if (TRUE) {
[18:03:52.851]         base::sink(type = "output", split = FALSE)
[18:03:52.851]         if (TRUE) {
[18:03:52.851]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.851]         }
[18:03:52.851]         else {
[18:03:52.851]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.851]         }
[18:03:52.851]         base::close(...future.stdout)
[18:03:52.851]         ...future.stdout <- NULL
[18:03:52.851]     }
[18:03:52.851]     ...future.result$conditions <- ...future.conditions
[18:03:52.851]     ...future.result$finished <- base::Sys.time()
[18:03:52.851]     ...future.result
[18:03:52.851] }
[18:03:52.854] plan(): Setting new future strategy stack:
[18:03:52.855] List of future strategies:
[18:03:52.855] 1. sequential:
[18:03:52.855]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.855]    - tweaked: FALSE
[18:03:52.855]    - call: NULL
[18:03:52.856] plan(): nbrOfWorkers() = 1
[18:03:52.857] plan(): Setting new future strategy stack:
[18:03:52.858] List of future strategies:
[18:03:52.858] 1. sequential:
[18:03:52.858]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.858]    - tweaked: FALSE
[18:03:52.858]    - call: plan(strategy)
[18:03:52.859] plan(): nbrOfWorkers() = 1
[18:03:52.859] SequentialFuture started (and completed)
[18:03:52.859] - Launch lazy future ... done
[18:03:52.859] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.863] getGlobalsAndPackages() ...
[18:03:52.863] Searching for globals...
[18:03:52.865] - globals found: [1] ‘{’
[18:03:52.866] Searching for globals ... DONE
[18:03:52.866] Resolving globals: FALSE
[18:03:52.867] 
[18:03:52.867] 
[18:03:52.867] getGlobalsAndPackages() ... DONE
[18:03:52.868] run() for ‘Future’ ...
[18:03:52.868] - state: ‘created’
[18:03:52.868] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:52.869] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.869] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:52.869]   - Field: ‘label’
[18:03:52.870]   - Field: ‘local’
[18:03:52.870]   - Field: ‘owner’
[18:03:52.870]   - Field: ‘envir’
[18:03:52.870]   - Field: ‘packages’
[18:03:52.870]   - Field: ‘gc’
[18:03:52.871]   - Field: ‘conditions’
[18:03:52.871]   - Field: ‘expr’
[18:03:52.871]   - Field: ‘uuid’
[18:03:52.871]   - Field: ‘seed’
[18:03:52.871]   - Field: ‘version’
[18:03:52.872]   - Field: ‘result’
[18:03:52.872]   - Field: ‘asynchronous’
[18:03:52.872]   - Field: ‘calls’
[18:03:52.872]   - Field: ‘globals’
[18:03:52.872]   - Field: ‘stdout’
[18:03:52.873]   - Field: ‘earlySignal’
[18:03:52.873]   - Field: ‘lazy’
[18:03:52.873]   - Field: ‘state’
[18:03:52.873] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:52.874] - Launch lazy future ...
[18:03:52.874] Packages needed by the future expression (n = 0): <none>
[18:03:52.874] Packages needed by future strategies (n = 0): <none>
[18:03:52.875] {
[18:03:52.875]     {
[18:03:52.875]         {
[18:03:52.875]             ...future.startTime <- base::Sys.time()
[18:03:52.875]             {
[18:03:52.875]                 {
[18:03:52.875]                   {
[18:03:52.875]                     base::local({
[18:03:52.875]                       has_future <- base::requireNamespace("future", 
[18:03:52.875]                         quietly = TRUE)
[18:03:52.875]                       if (has_future) {
[18:03:52.875]                         ns <- base::getNamespace("future")
[18:03:52.875]                         version <- ns[[".package"]][["version"]]
[18:03:52.875]                         if (is.null(version)) 
[18:03:52.875]                           version <- utils::packageVersion("future")
[18:03:52.875]                       }
[18:03:52.875]                       else {
[18:03:52.875]                         version <- NULL
[18:03:52.875]                       }
[18:03:52.875]                       if (!has_future || version < "1.8.0") {
[18:03:52.875]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.875]                           "", base::R.version$version.string), 
[18:03:52.875]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:52.875]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.875]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.875]                             "release", "version")], collapse = " "), 
[18:03:52.875]                           hostname = base::Sys.info()[["nodename"]])
[18:03:52.875]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.875]                           info)
[18:03:52.875]                         info <- base::paste(info, collapse = "; ")
[18:03:52.875]                         if (!has_future) {
[18:03:52.875]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.875]                             info)
[18:03:52.875]                         }
[18:03:52.875]                         else {
[18:03:52.875]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.875]                             info, version)
[18:03:52.875]                         }
[18:03:52.875]                         base::stop(msg)
[18:03:52.875]                       }
[18:03:52.875]                     })
[18:03:52.875]                   }
[18:03:52.875]                   ...future.strategy.old <- future::plan("list")
[18:03:52.875]                   options(future.plan = NULL)
[18:03:52.875]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.875]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.875]                 }
[18:03:52.875]                 ...future.workdir <- getwd()
[18:03:52.875]             }
[18:03:52.875]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.875]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.875]         }
[18:03:52.875]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.875]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.875]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.875]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.875]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.875]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.875]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.875]             base::names(...future.oldOptions))
[18:03:52.875]     }
[18:03:52.875]     if (FALSE) {
[18:03:52.875]     }
[18:03:52.875]     else {
[18:03:52.875]         if (TRUE) {
[18:03:52.875]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.875]                 open = "w")
[18:03:52.875]         }
[18:03:52.875]         else {
[18:03:52.875]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.875]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.875]         }
[18:03:52.875]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.875]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.875]             base::sink(type = "output", split = FALSE)
[18:03:52.875]             base::close(...future.stdout)
[18:03:52.875]         }, add = TRUE)
[18:03:52.875]     }
[18:03:52.875]     ...future.frame <- base::sys.nframe()
[18:03:52.875]     ...future.conditions <- base::list()
[18:03:52.875]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.875]     if (FALSE) {
[18:03:52.875]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.875]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.875]     }
[18:03:52.875]     ...future.result <- base::tryCatch({
[18:03:52.875]         base::withCallingHandlers({
[18:03:52.875]             ...future.value <- base::withVisible(base::local({
[18:03:52.875]                 42
[18:03:52.875]             }))
[18:03:52.875]             future::FutureResult(value = ...future.value$value, 
[18:03:52.875]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.875]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.875]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.875]                     ...future.globalenv.names))
[18:03:52.875]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.875]         }, condition = base::local({
[18:03:52.875]             c <- base::c
[18:03:52.875]             inherits <- base::inherits
[18:03:52.875]             invokeRestart <- base::invokeRestart
[18:03:52.875]             length <- base::length
[18:03:52.875]             list <- base::list
[18:03:52.875]             seq.int <- base::seq.int
[18:03:52.875]             signalCondition <- base::signalCondition
[18:03:52.875]             sys.calls <- base::sys.calls
[18:03:52.875]             `[[` <- base::`[[`
[18:03:52.875]             `+` <- base::`+`
[18:03:52.875]             `<<-` <- base::`<<-`
[18:03:52.875]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.875]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.875]                   3L)]
[18:03:52.875]             }
[18:03:52.875]             function(cond) {
[18:03:52.875]                 is_error <- inherits(cond, "error")
[18:03:52.875]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.875]                   NULL)
[18:03:52.875]                 if (is_error) {
[18:03:52.875]                   sessionInformation <- function() {
[18:03:52.875]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.875]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.875]                       search = base::search(), system = base::Sys.info())
[18:03:52.875]                   }
[18:03:52.875]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.875]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.875]                     cond$call), session = sessionInformation(), 
[18:03:52.875]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.875]                   signalCondition(cond)
[18:03:52.875]                 }
[18:03:52.875]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.875]                 "immediateCondition"))) {
[18:03:52.875]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.875]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.875]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.875]                   if (TRUE && !signal) {
[18:03:52.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.875]                     {
[18:03:52.875]                       inherits <- base::inherits
[18:03:52.875]                       invokeRestart <- base::invokeRestart
[18:03:52.875]                       is.null <- base::is.null
[18:03:52.875]                       muffled <- FALSE
[18:03:52.875]                       if (inherits(cond, "message")) {
[18:03:52.875]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.875]                         if (muffled) 
[18:03:52.875]                           invokeRestart("muffleMessage")
[18:03:52.875]                       }
[18:03:52.875]                       else if (inherits(cond, "warning")) {
[18:03:52.875]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.875]                         if (muffled) 
[18:03:52.875]                           invokeRestart("muffleWarning")
[18:03:52.875]                       }
[18:03:52.875]                       else if (inherits(cond, "condition")) {
[18:03:52.875]                         if (!is.null(pattern)) {
[18:03:52.875]                           computeRestarts <- base::computeRestarts
[18:03:52.875]                           grepl <- base::grepl
[18:03:52.875]                           restarts <- computeRestarts(cond)
[18:03:52.875]                           for (restart in restarts) {
[18:03:52.875]                             name <- restart$name
[18:03:52.875]                             if (is.null(name)) 
[18:03:52.875]                               next
[18:03:52.875]                             if (!grepl(pattern, name)) 
[18:03:52.875]                               next
[18:03:52.875]                             invokeRestart(restart)
[18:03:52.875]                             muffled <- TRUE
[18:03:52.875]                             break
[18:03:52.875]                           }
[18:03:52.875]                         }
[18:03:52.875]                       }
[18:03:52.875]                       invisible(muffled)
[18:03:52.875]                     }
[18:03:52.875]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.875]                   }
[18:03:52.875]                 }
[18:03:52.875]                 else {
[18:03:52.875]                   if (TRUE) {
[18:03:52.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.875]                     {
[18:03:52.875]                       inherits <- base::inherits
[18:03:52.875]                       invokeRestart <- base::invokeRestart
[18:03:52.875]                       is.null <- base::is.null
[18:03:52.875]                       muffled <- FALSE
[18:03:52.875]                       if (inherits(cond, "message")) {
[18:03:52.875]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.875]                         if (muffled) 
[18:03:52.875]                           invokeRestart("muffleMessage")
[18:03:52.875]                       }
[18:03:52.875]                       else if (inherits(cond, "warning")) {
[18:03:52.875]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.875]                         if (muffled) 
[18:03:52.875]                           invokeRestart("muffleWarning")
[18:03:52.875]                       }
[18:03:52.875]                       else if (inherits(cond, "condition")) {
[18:03:52.875]                         if (!is.null(pattern)) {
[18:03:52.875]                           computeRestarts <- base::computeRestarts
[18:03:52.875]                           grepl <- base::grepl
[18:03:52.875]                           restarts <- computeRestarts(cond)
[18:03:52.875]                           for (restart in restarts) {
[18:03:52.875]                             name <- restart$name
[18:03:52.875]                             if (is.null(name)) 
[18:03:52.875]                               next
[18:03:52.875]                             if (!grepl(pattern, name)) 
[18:03:52.875]                               next
[18:03:52.875]                             invokeRestart(restart)
[18:03:52.875]                             muffled <- TRUE
[18:03:52.875]                             break
[18:03:52.875]                           }
[18:03:52.875]                         }
[18:03:52.875]                       }
[18:03:52.875]                       invisible(muffled)
[18:03:52.875]                     }
[18:03:52.875]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.875]                   }
[18:03:52.875]                 }
[18:03:52.875]             }
[18:03:52.875]         }))
[18:03:52.875]     }, error = function(ex) {
[18:03:52.875]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.875]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.875]                 ...future.rng), started = ...future.startTime, 
[18:03:52.875]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.875]             version = "1.8"), class = "FutureResult")
[18:03:52.875]     }, finally = {
[18:03:52.875]         if (!identical(...future.workdir, getwd())) 
[18:03:52.875]             setwd(...future.workdir)
[18:03:52.875]         {
[18:03:52.875]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.875]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.875]             }
[18:03:52.875]             base::options(...future.oldOptions)
[18:03:52.875]             if (.Platform$OS.type == "windows") {
[18:03:52.875]                 old_names <- names(...future.oldEnvVars)
[18:03:52.875]                 envs <- base::Sys.getenv()
[18:03:52.875]                 names <- names(envs)
[18:03:52.875]                 common <- intersect(names, old_names)
[18:03:52.875]                 added <- setdiff(names, old_names)
[18:03:52.875]                 removed <- setdiff(old_names, names)
[18:03:52.875]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.875]                   envs[common]]
[18:03:52.875]                 NAMES <- toupper(changed)
[18:03:52.875]                 args <- list()
[18:03:52.875]                 for (kk in seq_along(NAMES)) {
[18:03:52.875]                   name <- changed[[kk]]
[18:03:52.875]                   NAME <- NAMES[[kk]]
[18:03:52.875]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.875]                     next
[18:03:52.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.875]                 }
[18:03:52.875]                 NAMES <- toupper(added)
[18:03:52.875]                 for (kk in seq_along(NAMES)) {
[18:03:52.875]                   name <- added[[kk]]
[18:03:52.875]                   NAME <- NAMES[[kk]]
[18:03:52.875]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.875]                     next
[18:03:52.875]                   args[[name]] <- ""
[18:03:52.875]                 }
[18:03:52.875]                 NAMES <- toupper(removed)
[18:03:52.875]                 for (kk in seq_along(NAMES)) {
[18:03:52.875]                   name <- removed[[kk]]
[18:03:52.875]                   NAME <- NAMES[[kk]]
[18:03:52.875]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.875]                     next
[18:03:52.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.875]                 }
[18:03:52.875]                 if (length(args) > 0) 
[18:03:52.875]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.875]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.875]             }
[18:03:52.875]             else {
[18:03:52.875]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.875]             }
[18:03:52.875]             {
[18:03:52.875]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.875]                   0L) {
[18:03:52.875]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.875]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.875]                   base::options(opts)
[18:03:52.875]                 }
[18:03:52.875]                 {
[18:03:52.875]                   {
[18:03:52.875]                     NULL
[18:03:52.875]                     RNGkind("Mersenne-Twister")
[18:03:52.875]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:52.875]                       inherits = FALSE)
[18:03:52.875]                   }
[18:03:52.875]                   options(future.plan = NULL)
[18:03:52.875]                   if (is.na(NA_character_)) 
[18:03:52.875]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.875]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.875]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.875]                     .init = FALSE)
[18:03:52.875]                 }
[18:03:52.875]             }
[18:03:52.875]         }
[18:03:52.875]     })
[18:03:52.875]     if (TRUE) {
[18:03:52.875]         base::sink(type = "output", split = FALSE)
[18:03:52.875]         if (TRUE) {
[18:03:52.875]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.875]         }
[18:03:52.875]         else {
[18:03:52.875]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.875]         }
[18:03:52.875]         base::close(...future.stdout)
[18:03:52.875]         ...future.stdout <- NULL
[18:03:52.875]     }
[18:03:52.875]     ...future.result$conditions <- ...future.conditions
[18:03:52.875]     ...future.result$finished <- base::Sys.time()
[18:03:52.875]     ...future.result
[18:03:52.875] }
[18:03:52.879] plan(): Setting new future strategy stack:
[18:03:52.879] List of future strategies:
[18:03:52.879] 1. sequential:
[18:03:52.879]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.879]    - tweaked: FALSE
[18:03:52.879]    - call: NULL
[18:03:52.880] plan(): nbrOfWorkers() = 1
[18:03:52.882] plan(): Setting new future strategy stack:
[18:03:52.882] List of future strategies:
[18:03:52.882] 1. sequential:
[18:03:52.882]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.882]    - tweaked: FALSE
[18:03:52.882]    - call: plan(strategy)
[18:03:52.883] plan(): nbrOfWorkers() = 1
[18:03:52.883] SequentialFuture started (and completed)
[18:03:52.884] - Launch lazy future ... done
[18:03:52.884] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.885] getGlobalsAndPackages() ...
[18:03:52.886] Searching for globals...
[18:03:52.886] 
[18:03:52.887] Searching for globals ... DONE
[18:03:52.887] - globals: [0] <none>
[18:03:52.887] getGlobalsAndPackages() ... DONE
[18:03:52.888] Packages needed by the future expression (n = 0): <none>
[18:03:52.888] Packages needed by future strategies (n = 0): <none>
[18:03:52.889] {
[18:03:52.889]     {
[18:03:52.889]         {
[18:03:52.889]             ...future.startTime <- base::Sys.time()
[18:03:52.889]             {
[18:03:52.889]                 {
[18:03:52.889]                   {
[18:03:52.889]                     base::local({
[18:03:52.889]                       has_future <- base::requireNamespace("future", 
[18:03:52.889]                         quietly = TRUE)
[18:03:52.889]                       if (has_future) {
[18:03:52.889]                         ns <- base::getNamespace("future")
[18:03:52.889]                         version <- ns[[".package"]][["version"]]
[18:03:52.889]                         if (is.null(version)) 
[18:03:52.889]                           version <- utils::packageVersion("future")
[18:03:52.889]                       }
[18:03:52.889]                       else {
[18:03:52.889]                         version <- NULL
[18:03:52.889]                       }
[18:03:52.889]                       if (!has_future || version < "1.8.0") {
[18:03:52.889]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.889]                           "", base::R.version$version.string), 
[18:03:52.889]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:52.889]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.889]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.889]                             "release", "version")], collapse = " "), 
[18:03:52.889]                           hostname = base::Sys.info()[["nodename"]])
[18:03:52.889]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.889]                           info)
[18:03:52.889]                         info <- base::paste(info, collapse = "; ")
[18:03:52.889]                         if (!has_future) {
[18:03:52.889]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.889]                             info)
[18:03:52.889]                         }
[18:03:52.889]                         else {
[18:03:52.889]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.889]                             info, version)
[18:03:52.889]                         }
[18:03:52.889]                         base::stop(msg)
[18:03:52.889]                       }
[18:03:52.889]                     })
[18:03:52.889]                   }
[18:03:52.889]                   ...future.strategy.old <- future::plan("list")
[18:03:52.889]                   options(future.plan = NULL)
[18:03:52.889]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.889]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.889]                 }
[18:03:52.889]                 ...future.workdir <- getwd()
[18:03:52.889]             }
[18:03:52.889]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.889]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.889]         }
[18:03:52.889]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.889]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.889]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.889]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.889]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.889]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.889]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.889]             base::names(...future.oldOptions))
[18:03:52.889]     }
[18:03:52.889]     if (FALSE) {
[18:03:52.889]     }
[18:03:52.889]     else {
[18:03:52.889]         if (TRUE) {
[18:03:52.889]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.889]                 open = "w")
[18:03:52.889]         }
[18:03:52.889]         else {
[18:03:52.889]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.889]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.889]         }
[18:03:52.889]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.889]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.889]             base::sink(type = "output", split = FALSE)
[18:03:52.889]             base::close(...future.stdout)
[18:03:52.889]         }, add = TRUE)
[18:03:52.889]     }
[18:03:52.889]     ...future.frame <- base::sys.nframe()
[18:03:52.889]     ...future.conditions <- base::list()
[18:03:52.889]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.889]     if (FALSE) {
[18:03:52.889]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.889]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.889]     }
[18:03:52.889]     ...future.result <- base::tryCatch({
[18:03:52.889]         base::withCallingHandlers({
[18:03:52.889]             ...future.value <- base::withVisible(base::local(42))
[18:03:52.889]             future::FutureResult(value = ...future.value$value, 
[18:03:52.889]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.889]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.889]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.889]                     ...future.globalenv.names))
[18:03:52.889]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.889]         }, condition = base::local({
[18:03:52.889]             c <- base::c
[18:03:52.889]             inherits <- base::inherits
[18:03:52.889]             invokeRestart <- base::invokeRestart
[18:03:52.889]             length <- base::length
[18:03:52.889]             list <- base::list
[18:03:52.889]             seq.int <- base::seq.int
[18:03:52.889]             signalCondition <- base::signalCondition
[18:03:52.889]             sys.calls <- base::sys.calls
[18:03:52.889]             `[[` <- base::`[[`
[18:03:52.889]             `+` <- base::`+`
[18:03:52.889]             `<<-` <- base::`<<-`
[18:03:52.889]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.889]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.889]                   3L)]
[18:03:52.889]             }
[18:03:52.889]             function(cond) {
[18:03:52.889]                 is_error <- inherits(cond, "error")
[18:03:52.889]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.889]                   NULL)
[18:03:52.889]                 if (is_error) {
[18:03:52.889]                   sessionInformation <- function() {
[18:03:52.889]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.889]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.889]                       search = base::search(), system = base::Sys.info())
[18:03:52.889]                   }
[18:03:52.889]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.889]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.889]                     cond$call), session = sessionInformation(), 
[18:03:52.889]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.889]                   signalCondition(cond)
[18:03:52.889]                 }
[18:03:52.889]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.889]                 "immediateCondition"))) {
[18:03:52.889]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.889]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.889]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.889]                   if (TRUE && !signal) {
[18:03:52.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.889]                     {
[18:03:52.889]                       inherits <- base::inherits
[18:03:52.889]                       invokeRestart <- base::invokeRestart
[18:03:52.889]                       is.null <- base::is.null
[18:03:52.889]                       muffled <- FALSE
[18:03:52.889]                       if (inherits(cond, "message")) {
[18:03:52.889]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.889]                         if (muffled) 
[18:03:52.889]                           invokeRestart("muffleMessage")
[18:03:52.889]                       }
[18:03:52.889]                       else if (inherits(cond, "warning")) {
[18:03:52.889]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.889]                         if (muffled) 
[18:03:52.889]                           invokeRestart("muffleWarning")
[18:03:52.889]                       }
[18:03:52.889]                       else if (inherits(cond, "condition")) {
[18:03:52.889]                         if (!is.null(pattern)) {
[18:03:52.889]                           computeRestarts <- base::computeRestarts
[18:03:52.889]                           grepl <- base::grepl
[18:03:52.889]                           restarts <- computeRestarts(cond)
[18:03:52.889]                           for (restart in restarts) {
[18:03:52.889]                             name <- restart$name
[18:03:52.889]                             if (is.null(name)) 
[18:03:52.889]                               next
[18:03:52.889]                             if (!grepl(pattern, name)) 
[18:03:52.889]                               next
[18:03:52.889]                             invokeRestart(restart)
[18:03:52.889]                             muffled <- TRUE
[18:03:52.889]                             break
[18:03:52.889]                           }
[18:03:52.889]                         }
[18:03:52.889]                       }
[18:03:52.889]                       invisible(muffled)
[18:03:52.889]                     }
[18:03:52.889]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.889]                   }
[18:03:52.889]                 }
[18:03:52.889]                 else {
[18:03:52.889]                   if (TRUE) {
[18:03:52.889]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.889]                     {
[18:03:52.889]                       inherits <- base::inherits
[18:03:52.889]                       invokeRestart <- base::invokeRestart
[18:03:52.889]                       is.null <- base::is.null
[18:03:52.889]                       muffled <- FALSE
[18:03:52.889]                       if (inherits(cond, "message")) {
[18:03:52.889]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.889]                         if (muffled) 
[18:03:52.889]                           invokeRestart("muffleMessage")
[18:03:52.889]                       }
[18:03:52.889]                       else if (inherits(cond, "warning")) {
[18:03:52.889]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.889]                         if (muffled) 
[18:03:52.889]                           invokeRestart("muffleWarning")
[18:03:52.889]                       }
[18:03:52.889]                       else if (inherits(cond, "condition")) {
[18:03:52.889]                         if (!is.null(pattern)) {
[18:03:52.889]                           computeRestarts <- base::computeRestarts
[18:03:52.889]                           grepl <- base::grepl
[18:03:52.889]                           restarts <- computeRestarts(cond)
[18:03:52.889]                           for (restart in restarts) {
[18:03:52.889]                             name <- restart$name
[18:03:52.889]                             if (is.null(name)) 
[18:03:52.889]                               next
[18:03:52.889]                             if (!grepl(pattern, name)) 
[18:03:52.889]                               next
[18:03:52.889]                             invokeRestart(restart)
[18:03:52.889]                             muffled <- TRUE
[18:03:52.889]                             break
[18:03:52.889]                           }
[18:03:52.889]                         }
[18:03:52.889]                       }
[18:03:52.889]                       invisible(muffled)
[18:03:52.889]                     }
[18:03:52.889]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.889]                   }
[18:03:52.889]                 }
[18:03:52.889]             }
[18:03:52.889]         }))
[18:03:52.889]     }, error = function(ex) {
[18:03:52.889]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.889]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.889]                 ...future.rng), started = ...future.startTime, 
[18:03:52.889]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.889]             version = "1.8"), class = "FutureResult")
[18:03:52.889]     }, finally = {
[18:03:52.889]         if (!identical(...future.workdir, getwd())) 
[18:03:52.889]             setwd(...future.workdir)
[18:03:52.889]         {
[18:03:52.889]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.889]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.889]             }
[18:03:52.889]             base::options(...future.oldOptions)
[18:03:52.889]             if (.Platform$OS.type == "windows") {
[18:03:52.889]                 old_names <- names(...future.oldEnvVars)
[18:03:52.889]                 envs <- base::Sys.getenv()
[18:03:52.889]                 names <- names(envs)
[18:03:52.889]                 common <- intersect(names, old_names)
[18:03:52.889]                 added <- setdiff(names, old_names)
[18:03:52.889]                 removed <- setdiff(old_names, names)
[18:03:52.889]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.889]                   envs[common]]
[18:03:52.889]                 NAMES <- toupper(changed)
[18:03:52.889]                 args <- list()
[18:03:52.889]                 for (kk in seq_along(NAMES)) {
[18:03:52.889]                   name <- changed[[kk]]
[18:03:52.889]                   NAME <- NAMES[[kk]]
[18:03:52.889]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.889]                     next
[18:03:52.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.889]                 }
[18:03:52.889]                 NAMES <- toupper(added)
[18:03:52.889]                 for (kk in seq_along(NAMES)) {
[18:03:52.889]                   name <- added[[kk]]
[18:03:52.889]                   NAME <- NAMES[[kk]]
[18:03:52.889]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.889]                     next
[18:03:52.889]                   args[[name]] <- ""
[18:03:52.889]                 }
[18:03:52.889]                 NAMES <- toupper(removed)
[18:03:52.889]                 for (kk in seq_along(NAMES)) {
[18:03:52.889]                   name <- removed[[kk]]
[18:03:52.889]                   NAME <- NAMES[[kk]]
[18:03:52.889]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.889]                     next
[18:03:52.889]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.889]                 }
[18:03:52.889]                 if (length(args) > 0) 
[18:03:52.889]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.889]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.889]             }
[18:03:52.889]             else {
[18:03:52.889]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.889]             }
[18:03:52.889]             {
[18:03:52.889]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.889]                   0L) {
[18:03:52.889]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.889]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.889]                   base::options(opts)
[18:03:52.889]                 }
[18:03:52.889]                 {
[18:03:52.889]                   {
[18:03:52.889]                     NULL
[18:03:52.889]                     RNGkind("Mersenne-Twister")
[18:03:52.889]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:52.889]                       inherits = FALSE)
[18:03:52.889]                   }
[18:03:52.889]                   options(future.plan = NULL)
[18:03:52.889]                   if (is.na(NA_character_)) 
[18:03:52.889]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.889]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.889]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.889]                     .init = FALSE)
[18:03:52.889]                 }
[18:03:52.889]             }
[18:03:52.889]         }
[18:03:52.889]     })
[18:03:52.889]     if (TRUE) {
[18:03:52.889]         base::sink(type = "output", split = FALSE)
[18:03:52.889]         if (TRUE) {
[18:03:52.889]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.889]         }
[18:03:52.889]         else {
[18:03:52.889]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.889]         }
[18:03:52.889]         base::close(...future.stdout)
[18:03:52.889]         ...future.stdout <- NULL
[18:03:52.889]     }
[18:03:52.889]     ...future.result$conditions <- ...future.conditions
[18:03:52.889]     ...future.result$finished <- base::Sys.time()
[18:03:52.889]     ...future.result
[18:03:52.889] }
[18:03:52.893] plan(): Setting new future strategy stack:
[18:03:52.893] List of future strategies:
[18:03:52.893] 1. sequential:
[18:03:52.893]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.893]    - tweaked: FALSE
[18:03:52.893]    - call: NULL
[18:03:52.894] plan(): nbrOfWorkers() = 1
[18:03:52.896] plan(): Setting new future strategy stack:
[18:03:52.896] List of future strategies:
[18:03:52.896] 1. sequential:
[18:03:52.896]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.896]    - tweaked: FALSE
[18:03:52.896]    - call: plan(strategy)
[18:03:52.897] plan(): nbrOfWorkers() = 1
[18:03:52.898] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.899] getGlobalsAndPackages() ...
[18:03:52.899] Searching for globals...
[18:03:52.900] 
[18:03:52.900] Searching for globals ... DONE
[18:03:52.900] - globals: [0] <none>
[18:03:52.900] getGlobalsAndPackages() ... DONE
[18:03:52.901] run() for ‘Future’ ...
[18:03:52.901] - state: ‘created’
[18:03:52.901] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:52.902] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.902] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:52.902]   - Field: ‘label’
[18:03:52.903]   - Field: ‘local’
[18:03:52.903]   - Field: ‘owner’
[18:03:52.903]   - Field: ‘envir’
[18:03:52.903]   - Field: ‘packages’
[18:03:52.903]   - Field: ‘gc’
[18:03:52.904]   - Field: ‘conditions’
[18:03:52.904]   - Field: ‘expr’
[18:03:52.904]   - Field: ‘uuid’
[18:03:52.904]   - Field: ‘seed’
[18:03:52.904]   - Field: ‘version’
[18:03:52.905]   - Field: ‘result’
[18:03:52.905]   - Field: ‘asynchronous’
[18:03:52.905]   - Field: ‘calls’
[18:03:52.905]   - Field: ‘globals’
[18:03:52.905]   - Field: ‘stdout’
[18:03:52.906]   - Field: ‘earlySignal’
[18:03:52.906]   - Field: ‘lazy’
[18:03:52.906]   - Field: ‘state’
[18:03:52.906] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:52.906] - Launch lazy future ...
[18:03:52.907] Packages needed by the future expression (n = 0): <none>
[18:03:52.907] Packages needed by future strategies (n = 0): <none>
[18:03:52.908] {
[18:03:52.908]     {
[18:03:52.908]         {
[18:03:52.908]             ...future.startTime <- base::Sys.time()
[18:03:52.908]             {
[18:03:52.908]                 {
[18:03:52.908]                   {
[18:03:52.908]                     base::local({
[18:03:52.908]                       has_future <- base::requireNamespace("future", 
[18:03:52.908]                         quietly = TRUE)
[18:03:52.908]                       if (has_future) {
[18:03:52.908]                         ns <- base::getNamespace("future")
[18:03:52.908]                         version <- ns[[".package"]][["version"]]
[18:03:52.908]                         if (is.null(version)) 
[18:03:52.908]                           version <- utils::packageVersion("future")
[18:03:52.908]                       }
[18:03:52.908]                       else {
[18:03:52.908]                         version <- NULL
[18:03:52.908]                       }
[18:03:52.908]                       if (!has_future || version < "1.8.0") {
[18:03:52.908]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.908]                           "", base::R.version$version.string), 
[18:03:52.908]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:52.908]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.908]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.908]                             "release", "version")], collapse = " "), 
[18:03:52.908]                           hostname = base::Sys.info()[["nodename"]])
[18:03:52.908]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.908]                           info)
[18:03:52.908]                         info <- base::paste(info, collapse = "; ")
[18:03:52.908]                         if (!has_future) {
[18:03:52.908]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.908]                             info)
[18:03:52.908]                         }
[18:03:52.908]                         else {
[18:03:52.908]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.908]                             info, version)
[18:03:52.908]                         }
[18:03:52.908]                         base::stop(msg)
[18:03:52.908]                       }
[18:03:52.908]                     })
[18:03:52.908]                   }
[18:03:52.908]                   ...future.strategy.old <- future::plan("list")
[18:03:52.908]                   options(future.plan = NULL)
[18:03:52.908]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.908]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.908]                 }
[18:03:52.908]                 ...future.workdir <- getwd()
[18:03:52.908]             }
[18:03:52.908]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.908]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.908]         }
[18:03:52.908]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.908]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.908]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.908]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.908]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.908]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.908]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.908]             base::names(...future.oldOptions))
[18:03:52.908]     }
[18:03:52.908]     if (FALSE) {
[18:03:52.908]     }
[18:03:52.908]     else {
[18:03:52.908]         if (TRUE) {
[18:03:52.908]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.908]                 open = "w")
[18:03:52.908]         }
[18:03:52.908]         else {
[18:03:52.908]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.908]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.908]         }
[18:03:52.908]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.908]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.908]             base::sink(type = "output", split = FALSE)
[18:03:52.908]             base::close(...future.stdout)
[18:03:52.908]         }, add = TRUE)
[18:03:52.908]     }
[18:03:52.908]     ...future.frame <- base::sys.nframe()
[18:03:52.908]     ...future.conditions <- base::list()
[18:03:52.908]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.908]     if (FALSE) {
[18:03:52.908]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.908]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.908]     }
[18:03:52.908]     ...future.result <- base::tryCatch({
[18:03:52.908]         base::withCallingHandlers({
[18:03:52.908]             ...future.value <- base::withVisible(base::local(42))
[18:03:52.908]             future::FutureResult(value = ...future.value$value, 
[18:03:52.908]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.908]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.908]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.908]                     ...future.globalenv.names))
[18:03:52.908]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.908]         }, condition = base::local({
[18:03:52.908]             c <- base::c
[18:03:52.908]             inherits <- base::inherits
[18:03:52.908]             invokeRestart <- base::invokeRestart
[18:03:52.908]             length <- base::length
[18:03:52.908]             list <- base::list
[18:03:52.908]             seq.int <- base::seq.int
[18:03:52.908]             signalCondition <- base::signalCondition
[18:03:52.908]             sys.calls <- base::sys.calls
[18:03:52.908]             `[[` <- base::`[[`
[18:03:52.908]             `+` <- base::`+`
[18:03:52.908]             `<<-` <- base::`<<-`
[18:03:52.908]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.908]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.908]                   3L)]
[18:03:52.908]             }
[18:03:52.908]             function(cond) {
[18:03:52.908]                 is_error <- inherits(cond, "error")
[18:03:52.908]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.908]                   NULL)
[18:03:52.908]                 if (is_error) {
[18:03:52.908]                   sessionInformation <- function() {
[18:03:52.908]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.908]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.908]                       search = base::search(), system = base::Sys.info())
[18:03:52.908]                   }
[18:03:52.908]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.908]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.908]                     cond$call), session = sessionInformation(), 
[18:03:52.908]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.908]                   signalCondition(cond)
[18:03:52.908]                 }
[18:03:52.908]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.908]                 "immediateCondition"))) {
[18:03:52.908]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.908]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.908]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.908]                   if (TRUE && !signal) {
[18:03:52.908]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.908]                     {
[18:03:52.908]                       inherits <- base::inherits
[18:03:52.908]                       invokeRestart <- base::invokeRestart
[18:03:52.908]                       is.null <- base::is.null
[18:03:52.908]                       muffled <- FALSE
[18:03:52.908]                       if (inherits(cond, "message")) {
[18:03:52.908]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.908]                         if (muffled) 
[18:03:52.908]                           invokeRestart("muffleMessage")
[18:03:52.908]                       }
[18:03:52.908]                       else if (inherits(cond, "warning")) {
[18:03:52.908]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.908]                         if (muffled) 
[18:03:52.908]                           invokeRestart("muffleWarning")
[18:03:52.908]                       }
[18:03:52.908]                       else if (inherits(cond, "condition")) {
[18:03:52.908]                         if (!is.null(pattern)) {
[18:03:52.908]                           computeRestarts <- base::computeRestarts
[18:03:52.908]                           grepl <- base::grepl
[18:03:52.908]                           restarts <- computeRestarts(cond)
[18:03:52.908]                           for (restart in restarts) {
[18:03:52.908]                             name <- restart$name
[18:03:52.908]                             if (is.null(name)) 
[18:03:52.908]                               next
[18:03:52.908]                             if (!grepl(pattern, name)) 
[18:03:52.908]                               next
[18:03:52.908]                             invokeRestart(restart)
[18:03:52.908]                             muffled <- TRUE
[18:03:52.908]                             break
[18:03:52.908]                           }
[18:03:52.908]                         }
[18:03:52.908]                       }
[18:03:52.908]                       invisible(muffled)
[18:03:52.908]                     }
[18:03:52.908]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.908]                   }
[18:03:52.908]                 }
[18:03:52.908]                 else {
[18:03:52.908]                   if (TRUE) {
[18:03:52.908]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.908]                     {
[18:03:52.908]                       inherits <- base::inherits
[18:03:52.908]                       invokeRestart <- base::invokeRestart
[18:03:52.908]                       is.null <- base::is.null
[18:03:52.908]                       muffled <- FALSE
[18:03:52.908]                       if (inherits(cond, "message")) {
[18:03:52.908]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.908]                         if (muffled) 
[18:03:52.908]                           invokeRestart("muffleMessage")
[18:03:52.908]                       }
[18:03:52.908]                       else if (inherits(cond, "warning")) {
[18:03:52.908]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.908]                         if (muffled) 
[18:03:52.908]                           invokeRestart("muffleWarning")
[18:03:52.908]                       }
[18:03:52.908]                       else if (inherits(cond, "condition")) {
[18:03:52.908]                         if (!is.null(pattern)) {
[18:03:52.908]                           computeRestarts <- base::computeRestarts
[18:03:52.908]                           grepl <- base::grepl
[18:03:52.908]                           restarts <- computeRestarts(cond)
[18:03:52.908]                           for (restart in restarts) {
[18:03:52.908]                             name <- restart$name
[18:03:52.908]                             if (is.null(name)) 
[18:03:52.908]                               next
[18:03:52.908]                             if (!grepl(pattern, name)) 
[18:03:52.908]                               next
[18:03:52.908]                             invokeRestart(restart)
[18:03:52.908]                             muffled <- TRUE
[18:03:52.908]                             break
[18:03:52.908]                           }
[18:03:52.908]                         }
[18:03:52.908]                       }
[18:03:52.908]                       invisible(muffled)
[18:03:52.908]                     }
[18:03:52.908]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.908]                   }
[18:03:52.908]                 }
[18:03:52.908]             }
[18:03:52.908]         }))
[18:03:52.908]     }, error = function(ex) {
[18:03:52.908]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.908]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.908]                 ...future.rng), started = ...future.startTime, 
[18:03:52.908]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.908]             version = "1.8"), class = "FutureResult")
[18:03:52.908]     }, finally = {
[18:03:52.908]         if (!identical(...future.workdir, getwd())) 
[18:03:52.908]             setwd(...future.workdir)
[18:03:52.908]         {
[18:03:52.908]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.908]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.908]             }
[18:03:52.908]             base::options(...future.oldOptions)
[18:03:52.908]             if (.Platform$OS.type == "windows") {
[18:03:52.908]                 old_names <- names(...future.oldEnvVars)
[18:03:52.908]                 envs <- base::Sys.getenv()
[18:03:52.908]                 names <- names(envs)
[18:03:52.908]                 common <- intersect(names, old_names)
[18:03:52.908]                 added <- setdiff(names, old_names)
[18:03:52.908]                 removed <- setdiff(old_names, names)
[18:03:52.908]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.908]                   envs[common]]
[18:03:52.908]                 NAMES <- toupper(changed)
[18:03:52.908]                 args <- list()
[18:03:52.908]                 for (kk in seq_along(NAMES)) {
[18:03:52.908]                   name <- changed[[kk]]
[18:03:52.908]                   NAME <- NAMES[[kk]]
[18:03:52.908]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.908]                     next
[18:03:52.908]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.908]                 }
[18:03:52.908]                 NAMES <- toupper(added)
[18:03:52.908]                 for (kk in seq_along(NAMES)) {
[18:03:52.908]                   name <- added[[kk]]
[18:03:52.908]                   NAME <- NAMES[[kk]]
[18:03:52.908]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.908]                     next
[18:03:52.908]                   args[[name]] <- ""
[18:03:52.908]                 }
[18:03:52.908]                 NAMES <- toupper(removed)
[18:03:52.908]                 for (kk in seq_along(NAMES)) {
[18:03:52.908]                   name <- removed[[kk]]
[18:03:52.908]                   NAME <- NAMES[[kk]]
[18:03:52.908]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.908]                     next
[18:03:52.908]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.908]                 }
[18:03:52.908]                 if (length(args) > 0) 
[18:03:52.908]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.908]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.908]             }
[18:03:52.908]             else {
[18:03:52.908]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.908]             }
[18:03:52.908]             {
[18:03:52.908]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.908]                   0L) {
[18:03:52.908]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.908]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.908]                   base::options(opts)
[18:03:52.908]                 }
[18:03:52.908]                 {
[18:03:52.908]                   {
[18:03:52.908]                     NULL
[18:03:52.908]                     RNGkind("Mersenne-Twister")
[18:03:52.908]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:52.908]                       inherits = FALSE)
[18:03:52.908]                   }
[18:03:52.908]                   options(future.plan = NULL)
[18:03:52.908]                   if (is.na(NA_character_)) 
[18:03:52.908]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.908]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.908]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.908]                     .init = FALSE)
[18:03:52.908]                 }
[18:03:52.908]             }
[18:03:52.908]         }
[18:03:52.908]     })
[18:03:52.908]     if (TRUE) {
[18:03:52.908]         base::sink(type = "output", split = FALSE)
[18:03:52.908]         if (TRUE) {
[18:03:52.908]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.908]         }
[18:03:52.908]         else {
[18:03:52.908]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.908]         }
[18:03:52.908]         base::close(...future.stdout)
[18:03:52.908]         ...future.stdout <- NULL
[18:03:52.908]     }
[18:03:52.908]     ...future.result$conditions <- ...future.conditions
[18:03:52.908]     ...future.result$finished <- base::Sys.time()
[18:03:52.908]     ...future.result
[18:03:52.908] }
[18:03:52.912] plan(): Setting new future strategy stack:
[18:03:52.916] List of future strategies:
[18:03:52.916] 1. sequential:
[18:03:52.916]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.916]    - tweaked: FALSE
[18:03:52.916]    - call: NULL
[18:03:52.917] plan(): nbrOfWorkers() = 1
[18:03:52.919] plan(): Setting new future strategy stack:
[18:03:52.919] List of future strategies:
[18:03:52.919] 1. sequential:
[18:03:52.919]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.919]    - tweaked: FALSE
[18:03:52.919]    - call: plan(strategy)
[18:03:52.920] plan(): nbrOfWorkers() = 1
[18:03:52.921] SequentialFuture started (and completed)
[18:03:52.921] - Launch lazy future ... done
[18:03:52.921] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.923] getGlobalsAndPackages() ...
[18:03:52.923] Searching for globals...
[18:03:52.924] - globals found: [1] ‘{’
[18:03:52.925] Searching for globals ... DONE
[18:03:52.925] Resolving globals: FALSE
[18:03:52.925] 
[18:03:52.926] 
[18:03:52.926] getGlobalsAndPackages() ... DONE
[18:03:52.926] run() for ‘Future’ ...
[18:03:52.926] - state: ‘created’
[18:03:52.927] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[18:03:52.927] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[18:03:52.928] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[18:03:52.928]   - Field: ‘label’
[18:03:52.928]   - Field: ‘local’
[18:03:52.928]   - Field: ‘owner’
[18:03:52.928]   - Field: ‘envir’
[18:03:52.929]   - Field: ‘packages’
[18:03:52.929]   - Field: ‘gc’
[18:03:52.929]   - Field: ‘conditions’
[18:03:52.929]   - Field: ‘expr’
[18:03:52.929]   - Field: ‘uuid’
[18:03:52.930]   - Field: ‘seed’
[18:03:52.930]   - Field: ‘version’
[18:03:52.930]   - Field: ‘result’
[18:03:52.930]   - Field: ‘asynchronous’
[18:03:52.930]   - Field: ‘calls’
[18:03:52.931]   - Field: ‘globals’
[18:03:52.931]   - Field: ‘stdout’
[18:03:52.931]   - Field: ‘earlySignal’
[18:03:52.931]   - Field: ‘lazy’
[18:03:52.931]   - Field: ‘state’
[18:03:52.932] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[18:03:52.932] - Launch lazy future ...
[18:03:52.932] Packages needed by the future expression (n = 0): <none>
[18:03:52.932] Packages needed by future strategies (n = 0): <none>
[18:03:52.933] {
[18:03:52.933]     {
[18:03:52.933]         {
[18:03:52.933]             ...future.startTime <- base::Sys.time()
[18:03:52.933]             {
[18:03:52.933]                 {
[18:03:52.933]                   {
[18:03:52.933]                     base::local({
[18:03:52.933]                       has_future <- base::requireNamespace("future", 
[18:03:52.933]                         quietly = TRUE)
[18:03:52.933]                       if (has_future) {
[18:03:52.933]                         ns <- base::getNamespace("future")
[18:03:52.933]                         version <- ns[[".package"]][["version"]]
[18:03:52.933]                         if (is.null(version)) 
[18:03:52.933]                           version <- utils::packageVersion("future")
[18:03:52.933]                       }
[18:03:52.933]                       else {
[18:03:52.933]                         version <- NULL
[18:03:52.933]                       }
[18:03:52.933]                       if (!has_future || version < "1.8.0") {
[18:03:52.933]                         info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.933]                           "", base::R.version$version.string), 
[18:03:52.933]                           platform = base::sprintf("%s (%s-bit)", 
[18:03:52.933]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.933]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.933]                             "release", "version")], collapse = " "), 
[18:03:52.933]                           hostname = base::Sys.info()[["nodename"]])
[18:03:52.933]                         info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.933]                           info)
[18:03:52.933]                         info <- base::paste(info, collapse = "; ")
[18:03:52.933]                         if (!has_future) {
[18:03:52.933]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.933]                             info)
[18:03:52.933]                         }
[18:03:52.933]                         else {
[18:03:52.933]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.933]                             info, version)
[18:03:52.933]                         }
[18:03:52.933]                         base::stop(msg)
[18:03:52.933]                       }
[18:03:52.933]                     })
[18:03:52.933]                   }
[18:03:52.933]                   ...future.strategy.old <- future::plan("list")
[18:03:52.933]                   options(future.plan = NULL)
[18:03:52.933]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.933]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.933]                 }
[18:03:52.933]                 ...future.workdir <- getwd()
[18:03:52.933]             }
[18:03:52.933]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.933]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.933]         }
[18:03:52.933]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.933]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.933]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.933]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.933]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.933]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.933]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.933]             base::names(...future.oldOptions))
[18:03:52.933]     }
[18:03:52.933]     if (FALSE) {
[18:03:52.933]     }
[18:03:52.933]     else {
[18:03:52.933]         if (TRUE) {
[18:03:52.933]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.933]                 open = "w")
[18:03:52.933]         }
[18:03:52.933]         else {
[18:03:52.933]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.933]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.933]         }
[18:03:52.933]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.933]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.933]             base::sink(type = "output", split = FALSE)
[18:03:52.933]             base::close(...future.stdout)
[18:03:52.933]         }, add = TRUE)
[18:03:52.933]     }
[18:03:52.933]     ...future.frame <- base::sys.nframe()
[18:03:52.933]     ...future.conditions <- base::list()
[18:03:52.933]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.933]     if (FALSE) {
[18:03:52.933]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.933]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.933]     }
[18:03:52.933]     ...future.result <- base::tryCatch({
[18:03:52.933]         base::withCallingHandlers({
[18:03:52.933]             ...future.value <- base::withVisible(base::local({
[18:03:52.933]                 42
[18:03:52.933]             }))
[18:03:52.933]             future::FutureResult(value = ...future.value$value, 
[18:03:52.933]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.933]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.933]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.933]                     ...future.globalenv.names))
[18:03:52.933]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.933]         }, condition = base::local({
[18:03:52.933]             c <- base::c
[18:03:52.933]             inherits <- base::inherits
[18:03:52.933]             invokeRestart <- base::invokeRestart
[18:03:52.933]             length <- base::length
[18:03:52.933]             list <- base::list
[18:03:52.933]             seq.int <- base::seq.int
[18:03:52.933]             signalCondition <- base::signalCondition
[18:03:52.933]             sys.calls <- base::sys.calls
[18:03:52.933]             `[[` <- base::`[[`
[18:03:52.933]             `+` <- base::`+`
[18:03:52.933]             `<<-` <- base::`<<-`
[18:03:52.933]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.933]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.933]                   3L)]
[18:03:52.933]             }
[18:03:52.933]             function(cond) {
[18:03:52.933]                 is_error <- inherits(cond, "error")
[18:03:52.933]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.933]                   NULL)
[18:03:52.933]                 if (is_error) {
[18:03:52.933]                   sessionInformation <- function() {
[18:03:52.933]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.933]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.933]                       search = base::search(), system = base::Sys.info())
[18:03:52.933]                   }
[18:03:52.933]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.933]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.933]                     cond$call), session = sessionInformation(), 
[18:03:52.933]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.933]                   signalCondition(cond)
[18:03:52.933]                 }
[18:03:52.933]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.933]                 "immediateCondition"))) {
[18:03:52.933]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.933]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.933]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.933]                   if (TRUE && !signal) {
[18:03:52.933]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.933]                     {
[18:03:52.933]                       inherits <- base::inherits
[18:03:52.933]                       invokeRestart <- base::invokeRestart
[18:03:52.933]                       is.null <- base::is.null
[18:03:52.933]                       muffled <- FALSE
[18:03:52.933]                       if (inherits(cond, "message")) {
[18:03:52.933]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.933]                         if (muffled) 
[18:03:52.933]                           invokeRestart("muffleMessage")
[18:03:52.933]                       }
[18:03:52.933]                       else if (inherits(cond, "warning")) {
[18:03:52.933]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.933]                         if (muffled) 
[18:03:52.933]                           invokeRestart("muffleWarning")
[18:03:52.933]                       }
[18:03:52.933]                       else if (inherits(cond, "condition")) {
[18:03:52.933]                         if (!is.null(pattern)) {
[18:03:52.933]                           computeRestarts <- base::computeRestarts
[18:03:52.933]                           grepl <- base::grepl
[18:03:52.933]                           restarts <- computeRestarts(cond)
[18:03:52.933]                           for (restart in restarts) {
[18:03:52.933]                             name <- restart$name
[18:03:52.933]                             if (is.null(name)) 
[18:03:52.933]                               next
[18:03:52.933]                             if (!grepl(pattern, name)) 
[18:03:52.933]                               next
[18:03:52.933]                             invokeRestart(restart)
[18:03:52.933]                             muffled <- TRUE
[18:03:52.933]                             break
[18:03:52.933]                           }
[18:03:52.933]                         }
[18:03:52.933]                       }
[18:03:52.933]                       invisible(muffled)
[18:03:52.933]                     }
[18:03:52.933]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.933]                   }
[18:03:52.933]                 }
[18:03:52.933]                 else {
[18:03:52.933]                   if (TRUE) {
[18:03:52.933]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.933]                     {
[18:03:52.933]                       inherits <- base::inherits
[18:03:52.933]                       invokeRestart <- base::invokeRestart
[18:03:52.933]                       is.null <- base::is.null
[18:03:52.933]                       muffled <- FALSE
[18:03:52.933]                       if (inherits(cond, "message")) {
[18:03:52.933]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.933]                         if (muffled) 
[18:03:52.933]                           invokeRestart("muffleMessage")
[18:03:52.933]                       }
[18:03:52.933]                       else if (inherits(cond, "warning")) {
[18:03:52.933]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.933]                         if (muffled) 
[18:03:52.933]                           invokeRestart("muffleWarning")
[18:03:52.933]                       }
[18:03:52.933]                       else if (inherits(cond, "condition")) {
[18:03:52.933]                         if (!is.null(pattern)) {
[18:03:52.933]                           computeRestarts <- base::computeRestarts
[18:03:52.933]                           grepl <- base::grepl
[18:03:52.933]                           restarts <- computeRestarts(cond)
[18:03:52.933]                           for (restart in restarts) {
[18:03:52.933]                             name <- restart$name
[18:03:52.933]                             if (is.null(name)) 
[18:03:52.933]                               next
[18:03:52.933]                             if (!grepl(pattern, name)) 
[18:03:52.933]                               next
[18:03:52.933]                             invokeRestart(restart)
[18:03:52.933]                             muffled <- TRUE
[18:03:52.933]                             break
[18:03:52.933]                           }
[18:03:52.933]                         }
[18:03:52.933]                       }
[18:03:52.933]                       invisible(muffled)
[18:03:52.933]                     }
[18:03:52.933]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.933]                   }
[18:03:52.933]                 }
[18:03:52.933]             }
[18:03:52.933]         }))
[18:03:52.933]     }, error = function(ex) {
[18:03:52.933]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.933]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.933]                 ...future.rng), started = ...future.startTime, 
[18:03:52.933]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.933]             version = "1.8"), class = "FutureResult")
[18:03:52.933]     }, finally = {
[18:03:52.933]         if (!identical(...future.workdir, getwd())) 
[18:03:52.933]             setwd(...future.workdir)
[18:03:52.933]         {
[18:03:52.933]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.933]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.933]             }
[18:03:52.933]             base::options(...future.oldOptions)
[18:03:52.933]             if (.Platform$OS.type == "windows") {
[18:03:52.933]                 old_names <- names(...future.oldEnvVars)
[18:03:52.933]                 envs <- base::Sys.getenv()
[18:03:52.933]                 names <- names(envs)
[18:03:52.933]                 common <- intersect(names, old_names)
[18:03:52.933]                 added <- setdiff(names, old_names)
[18:03:52.933]                 removed <- setdiff(old_names, names)
[18:03:52.933]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.933]                   envs[common]]
[18:03:52.933]                 NAMES <- toupper(changed)
[18:03:52.933]                 args <- list()
[18:03:52.933]                 for (kk in seq_along(NAMES)) {
[18:03:52.933]                   name <- changed[[kk]]
[18:03:52.933]                   NAME <- NAMES[[kk]]
[18:03:52.933]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.933]                     next
[18:03:52.933]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.933]                 }
[18:03:52.933]                 NAMES <- toupper(added)
[18:03:52.933]                 for (kk in seq_along(NAMES)) {
[18:03:52.933]                   name <- added[[kk]]
[18:03:52.933]                   NAME <- NAMES[[kk]]
[18:03:52.933]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.933]                     next
[18:03:52.933]                   args[[name]] <- ""
[18:03:52.933]                 }
[18:03:52.933]                 NAMES <- toupper(removed)
[18:03:52.933]                 for (kk in seq_along(NAMES)) {
[18:03:52.933]                   name <- removed[[kk]]
[18:03:52.933]                   NAME <- NAMES[[kk]]
[18:03:52.933]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.933]                     next
[18:03:52.933]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.933]                 }
[18:03:52.933]                 if (length(args) > 0) 
[18:03:52.933]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.933]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.933]             }
[18:03:52.933]             else {
[18:03:52.933]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.933]             }
[18:03:52.933]             {
[18:03:52.933]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.933]                   0L) {
[18:03:52.933]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.933]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.933]                   base::options(opts)
[18:03:52.933]                 }
[18:03:52.933]                 {
[18:03:52.933]                   {
[18:03:52.933]                     NULL
[18:03:52.933]                     RNGkind("Mersenne-Twister")
[18:03:52.933]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[18:03:52.933]                       inherits = FALSE)
[18:03:52.933]                   }
[18:03:52.933]                   options(future.plan = NULL)
[18:03:52.933]                   if (is.na(NA_character_)) 
[18:03:52.933]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.933]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.933]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.933]                     .init = FALSE)
[18:03:52.933]                 }
[18:03:52.933]             }
[18:03:52.933]         }
[18:03:52.933]     })
[18:03:52.933]     if (TRUE) {
[18:03:52.933]         base::sink(type = "output", split = FALSE)
[18:03:52.933]         if (TRUE) {
[18:03:52.933]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.933]         }
[18:03:52.933]         else {
[18:03:52.933]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.933]         }
[18:03:52.933]         base::close(...future.stdout)
[18:03:52.933]         ...future.stdout <- NULL
[18:03:52.933]     }
[18:03:52.933]     ...future.result$conditions <- ...future.conditions
[18:03:52.933]     ...future.result$finished <- base::Sys.time()
[18:03:52.933]     ...future.result
[18:03:52.933] }
[18:03:52.937] plan(): Setting new future strategy stack:
[18:03:52.937] List of future strategies:
[18:03:52.937] 1. sequential:
[18:03:52.937]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.937]    - tweaked: FALSE
[18:03:52.937]    - call: NULL
[18:03:52.939] plan(): nbrOfWorkers() = 1
[18:03:52.940] plan(): Setting new future strategy stack:
[18:03:52.940] List of future strategies:
[18:03:52.940] 1. sequential:
[18:03:52.940]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.940]    - tweaked: FALSE
[18:03:52.940]    - call: plan(strategy)
[18:03:52.941] plan(): nbrOfWorkers() = 1
[18:03:52.942] SequentialFuture started (and completed)
[18:03:52.942] - Launch lazy future ... done
[18:03:52.942] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[18:03:52.944] plan(): Setting new future strategy stack:
[18:03:52.945] List of future strategies:
[18:03:52.945] 1. multicore:
[18:03:52.945]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:52.945]    - tweaked: FALSE
[18:03:52.945]    - call: plan(strategy)
[18:03:52.951] plan(): nbrOfWorkers() = 2
[18:03:52.958] getGlobalsAndPackages() ...
[18:03:52.958] 
[18:03:52.958] - globals: [0] <none>
[18:03:52.959] getGlobalsAndPackages() ... DONE
[18:03:52.961] Packages needed by the future expression (n = 0): <none>
[18:03:52.961] Packages needed by future strategies (n = 0): <none>
[18:03:52.962] {
[18:03:52.962]     {
[18:03:52.962]         {
[18:03:52.962]             ...future.startTime <- base::Sys.time()
[18:03:52.962]             {
[18:03:52.962]                 {
[18:03:52.962]                   {
[18:03:52.962]                     {
[18:03:52.962]                       base::local({
[18:03:52.962]                         has_future <- base::requireNamespace("future", 
[18:03:52.962]                           quietly = TRUE)
[18:03:52.962]                         if (has_future) {
[18:03:52.962]                           ns <- base::getNamespace("future")
[18:03:52.962]                           version <- ns[[".package"]][["version"]]
[18:03:52.962]                           if (is.null(version)) 
[18:03:52.962]                             version <- utils::packageVersion("future")
[18:03:52.962]                         }
[18:03:52.962]                         else {
[18:03:52.962]                           version <- NULL
[18:03:52.962]                         }
[18:03:52.962]                         if (!has_future || version < "1.8.0") {
[18:03:52.962]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:52.962]                             "", base::R.version$version.string), 
[18:03:52.962]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:52.962]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:52.962]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:52.962]                               "release", "version")], collapse = " "), 
[18:03:52.962]                             hostname = base::Sys.info()[["nodename"]])
[18:03:52.962]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:52.962]                             info)
[18:03:52.962]                           info <- base::paste(info, collapse = "; ")
[18:03:52.962]                           if (!has_future) {
[18:03:52.962]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:52.962]                               info)
[18:03:52.962]                           }
[18:03:52.962]                           else {
[18:03:52.962]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:52.962]                               info, version)
[18:03:52.962]                           }
[18:03:52.962]                           base::stop(msg)
[18:03:52.962]                         }
[18:03:52.962]                       })
[18:03:52.962]                     }
[18:03:52.962]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:52.962]                     base::options(mc.cores = 1L)
[18:03:52.962]                   }
[18:03:52.962]                   ...future.strategy.old <- future::plan("list")
[18:03:52.962]                   options(future.plan = NULL)
[18:03:52.962]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.962]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:52.962]                 }
[18:03:52.962]                 ...future.workdir <- getwd()
[18:03:52.962]             }
[18:03:52.962]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:52.962]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:52.962]         }
[18:03:52.962]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:52.962]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:52.962]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:52.962]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:52.962]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:52.962]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:52.962]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:52.962]             base::names(...future.oldOptions))
[18:03:52.962]     }
[18:03:52.962]     if (FALSE) {
[18:03:52.962]     }
[18:03:52.962]     else {
[18:03:52.962]         if (TRUE) {
[18:03:52.962]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:52.962]                 open = "w")
[18:03:52.962]         }
[18:03:52.962]         else {
[18:03:52.962]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:52.962]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:52.962]         }
[18:03:52.962]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:52.962]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:52.962]             base::sink(type = "output", split = FALSE)
[18:03:52.962]             base::close(...future.stdout)
[18:03:52.962]         }, add = TRUE)
[18:03:52.962]     }
[18:03:52.962]     ...future.frame <- base::sys.nframe()
[18:03:52.962]     ...future.conditions <- base::list()
[18:03:52.962]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:52.962]     if (FALSE) {
[18:03:52.962]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:52.962]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:52.962]     }
[18:03:52.962]     ...future.result <- base::tryCatch({
[18:03:52.962]         base::withCallingHandlers({
[18:03:52.962]             ...future.value <- base::withVisible(base::local({
[18:03:52.962]                 withCallingHandlers({
[18:03:52.962]                   42
[18:03:52.962]                 }, immediateCondition = function(cond) {
[18:03:52.962]                   save_rds <- function (object, pathname, ...) 
[18:03:52.962]                   {
[18:03:52.962]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:52.962]                     if (file_test("-f", pathname_tmp)) {
[18:03:52.962]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.962]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:52.962]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.962]                         fi_tmp[["mtime"]])
[18:03:52.962]                     }
[18:03:52.962]                     tryCatch({
[18:03:52.962]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:52.962]                     }, error = function(ex) {
[18:03:52.962]                       msg <- conditionMessage(ex)
[18:03:52.962]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.962]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:52.962]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.962]                         fi_tmp[["mtime"]], msg)
[18:03:52.962]                       ex$message <- msg
[18:03:52.962]                       stop(ex)
[18:03:52.962]                     })
[18:03:52.962]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:52.962]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:52.962]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:52.962]                       fi_tmp <- file.info(pathname_tmp)
[18:03:52.962]                       fi <- file.info(pathname)
[18:03:52.962]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:52.962]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:52.962]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:52.962]                         fi[["size"]], fi[["mtime"]])
[18:03:52.962]                       stop(msg)
[18:03:52.962]                     }
[18:03:52.962]                     invisible(pathname)
[18:03:52.962]                   }
[18:03:52.962]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:52.962]                     rootPath = tempdir()) 
[18:03:52.962]                   {
[18:03:52.962]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:52.962]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:52.962]                       tmpdir = path, fileext = ".rds")
[18:03:52.962]                     save_rds(obj, file)
[18:03:52.962]                   }
[18:03:52.962]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3RkdJZ/.future/immediateConditions")
[18:03:52.962]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.962]                   {
[18:03:52.962]                     inherits <- base::inherits
[18:03:52.962]                     invokeRestart <- base::invokeRestart
[18:03:52.962]                     is.null <- base::is.null
[18:03:52.962]                     muffled <- FALSE
[18:03:52.962]                     if (inherits(cond, "message")) {
[18:03:52.962]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:52.962]                       if (muffled) 
[18:03:52.962]                         invokeRestart("muffleMessage")
[18:03:52.962]                     }
[18:03:52.962]                     else if (inherits(cond, "warning")) {
[18:03:52.962]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:52.962]                       if (muffled) 
[18:03:52.962]                         invokeRestart("muffleWarning")
[18:03:52.962]                     }
[18:03:52.962]                     else if (inherits(cond, "condition")) {
[18:03:52.962]                       if (!is.null(pattern)) {
[18:03:52.962]                         computeRestarts <- base::computeRestarts
[18:03:52.962]                         grepl <- base::grepl
[18:03:52.962]                         restarts <- computeRestarts(cond)
[18:03:52.962]                         for (restart in restarts) {
[18:03:52.962]                           name <- restart$name
[18:03:52.962]                           if (is.null(name)) 
[18:03:52.962]                             next
[18:03:52.962]                           if (!grepl(pattern, name)) 
[18:03:52.962]                             next
[18:03:52.962]                           invokeRestart(restart)
[18:03:52.962]                           muffled <- TRUE
[18:03:52.962]                           break
[18:03:52.962]                         }
[18:03:52.962]                       }
[18:03:52.962]                     }
[18:03:52.962]                     invisible(muffled)
[18:03:52.962]                   }
[18:03:52.962]                   muffleCondition(cond)
[18:03:52.962]                 })
[18:03:52.962]             }))
[18:03:52.962]             future::FutureResult(value = ...future.value$value, 
[18:03:52.962]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.962]                   ...future.rng), globalenv = if (FALSE) 
[18:03:52.962]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:52.962]                     ...future.globalenv.names))
[18:03:52.962]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:52.962]         }, condition = base::local({
[18:03:52.962]             c <- base::c
[18:03:52.962]             inherits <- base::inherits
[18:03:52.962]             invokeRestart <- base::invokeRestart
[18:03:52.962]             length <- base::length
[18:03:52.962]             list <- base::list
[18:03:52.962]             seq.int <- base::seq.int
[18:03:52.962]             signalCondition <- base::signalCondition
[18:03:52.962]             sys.calls <- base::sys.calls
[18:03:52.962]             `[[` <- base::`[[`
[18:03:52.962]             `+` <- base::`+`
[18:03:52.962]             `<<-` <- base::`<<-`
[18:03:52.962]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:52.962]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:52.962]                   3L)]
[18:03:52.962]             }
[18:03:52.962]             function(cond) {
[18:03:52.962]                 is_error <- inherits(cond, "error")
[18:03:52.962]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:52.962]                   NULL)
[18:03:52.962]                 if (is_error) {
[18:03:52.962]                   sessionInformation <- function() {
[18:03:52.962]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:52.962]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:52.962]                       search = base::search(), system = base::Sys.info())
[18:03:52.962]                   }
[18:03:52.962]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.962]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:52.962]                     cond$call), session = sessionInformation(), 
[18:03:52.962]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:52.962]                   signalCondition(cond)
[18:03:52.962]                 }
[18:03:52.962]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:52.962]                 "immediateCondition"))) {
[18:03:52.962]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:52.962]                   ...future.conditions[[length(...future.conditions) + 
[18:03:52.962]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:52.962]                   if (TRUE && !signal) {
[18:03:52.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.962]                     {
[18:03:52.962]                       inherits <- base::inherits
[18:03:52.962]                       invokeRestart <- base::invokeRestart
[18:03:52.962]                       is.null <- base::is.null
[18:03:52.962]                       muffled <- FALSE
[18:03:52.962]                       if (inherits(cond, "message")) {
[18:03:52.962]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.962]                         if (muffled) 
[18:03:52.962]                           invokeRestart("muffleMessage")
[18:03:52.962]                       }
[18:03:52.962]                       else if (inherits(cond, "warning")) {
[18:03:52.962]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.962]                         if (muffled) 
[18:03:52.962]                           invokeRestart("muffleWarning")
[18:03:52.962]                       }
[18:03:52.962]                       else if (inherits(cond, "condition")) {
[18:03:52.962]                         if (!is.null(pattern)) {
[18:03:52.962]                           computeRestarts <- base::computeRestarts
[18:03:52.962]                           grepl <- base::grepl
[18:03:52.962]                           restarts <- computeRestarts(cond)
[18:03:52.962]                           for (restart in restarts) {
[18:03:52.962]                             name <- restart$name
[18:03:52.962]                             if (is.null(name)) 
[18:03:52.962]                               next
[18:03:52.962]                             if (!grepl(pattern, name)) 
[18:03:52.962]                               next
[18:03:52.962]                             invokeRestart(restart)
[18:03:52.962]                             muffled <- TRUE
[18:03:52.962]                             break
[18:03:52.962]                           }
[18:03:52.962]                         }
[18:03:52.962]                       }
[18:03:52.962]                       invisible(muffled)
[18:03:52.962]                     }
[18:03:52.962]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.962]                   }
[18:03:52.962]                 }
[18:03:52.962]                 else {
[18:03:52.962]                   if (TRUE) {
[18:03:52.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:52.962]                     {
[18:03:52.962]                       inherits <- base::inherits
[18:03:52.962]                       invokeRestart <- base::invokeRestart
[18:03:52.962]                       is.null <- base::is.null
[18:03:52.962]                       muffled <- FALSE
[18:03:52.962]                       if (inherits(cond, "message")) {
[18:03:52.962]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:52.962]                         if (muffled) 
[18:03:52.962]                           invokeRestart("muffleMessage")
[18:03:52.962]                       }
[18:03:52.962]                       else if (inherits(cond, "warning")) {
[18:03:52.962]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:52.962]                         if (muffled) 
[18:03:52.962]                           invokeRestart("muffleWarning")
[18:03:52.962]                       }
[18:03:52.962]                       else if (inherits(cond, "condition")) {
[18:03:52.962]                         if (!is.null(pattern)) {
[18:03:52.962]                           computeRestarts <- base::computeRestarts
[18:03:52.962]                           grepl <- base::grepl
[18:03:52.962]                           restarts <- computeRestarts(cond)
[18:03:52.962]                           for (restart in restarts) {
[18:03:52.962]                             name <- restart$name
[18:03:52.962]                             if (is.null(name)) 
[18:03:52.962]                               next
[18:03:52.962]                             if (!grepl(pattern, name)) 
[18:03:52.962]                               next
[18:03:52.962]                             invokeRestart(restart)
[18:03:52.962]                             muffled <- TRUE
[18:03:52.962]                             break
[18:03:52.962]                           }
[18:03:52.962]                         }
[18:03:52.962]                       }
[18:03:52.962]                       invisible(muffled)
[18:03:52.962]                     }
[18:03:52.962]                     muffleCondition(cond, pattern = "^muffle")
[18:03:52.962]                   }
[18:03:52.962]                 }
[18:03:52.962]             }
[18:03:52.962]         }))
[18:03:52.962]     }, error = function(ex) {
[18:03:52.962]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:52.962]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:52.962]                 ...future.rng), started = ...future.startTime, 
[18:03:52.962]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:52.962]             version = "1.8"), class = "FutureResult")
[18:03:52.962]     }, finally = {
[18:03:52.962]         if (!identical(...future.workdir, getwd())) 
[18:03:52.962]             setwd(...future.workdir)
[18:03:52.962]         {
[18:03:52.962]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:52.962]                 ...future.oldOptions$nwarnings <- NULL
[18:03:52.962]             }
[18:03:52.962]             base::options(...future.oldOptions)
[18:03:52.962]             if (.Platform$OS.type == "windows") {
[18:03:52.962]                 old_names <- names(...future.oldEnvVars)
[18:03:52.962]                 envs <- base::Sys.getenv()
[18:03:52.962]                 names <- names(envs)
[18:03:52.962]                 common <- intersect(names, old_names)
[18:03:52.962]                 added <- setdiff(names, old_names)
[18:03:52.962]                 removed <- setdiff(old_names, names)
[18:03:52.962]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:52.962]                   envs[common]]
[18:03:52.962]                 NAMES <- toupper(changed)
[18:03:52.962]                 args <- list()
[18:03:52.962]                 for (kk in seq_along(NAMES)) {
[18:03:52.962]                   name <- changed[[kk]]
[18:03:52.962]                   NAME <- NAMES[[kk]]
[18:03:52.962]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.962]                     next
[18:03:52.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.962]                 }
[18:03:52.962]                 NAMES <- toupper(added)
[18:03:52.962]                 for (kk in seq_along(NAMES)) {
[18:03:52.962]                   name <- added[[kk]]
[18:03:52.962]                   NAME <- NAMES[[kk]]
[18:03:52.962]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.962]                     next
[18:03:52.962]                   args[[name]] <- ""
[18:03:52.962]                 }
[18:03:52.962]                 NAMES <- toupper(removed)
[18:03:52.962]                 for (kk in seq_along(NAMES)) {
[18:03:52.962]                   name <- removed[[kk]]
[18:03:52.962]                   NAME <- NAMES[[kk]]
[18:03:52.962]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:52.962]                     next
[18:03:52.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:52.962]                 }
[18:03:52.962]                 if (length(args) > 0) 
[18:03:52.962]                   base::do.call(base::Sys.setenv, args = args)
[18:03:52.962]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:52.962]             }
[18:03:52.962]             else {
[18:03:52.962]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:52.962]             }
[18:03:52.962]             {
[18:03:52.962]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:52.962]                   0L) {
[18:03:52.962]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:52.962]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:52.962]                   base::options(opts)
[18:03:52.962]                 }
[18:03:52.962]                 {
[18:03:52.962]                   {
[18:03:52.962]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:52.962]                     NULL
[18:03:52.962]                   }
[18:03:52.962]                   options(future.plan = NULL)
[18:03:52.962]                   if (is.na(NA_character_)) 
[18:03:52.962]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:52.962]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:52.962]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:52.962]                     .init = FALSE)
[18:03:52.962]                 }
[18:03:52.962]             }
[18:03:52.962]         }
[18:03:52.962]     })
[18:03:52.962]     if (TRUE) {
[18:03:52.962]         base::sink(type = "output", split = FALSE)
[18:03:52.962]         if (TRUE) {
[18:03:52.962]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:52.962]         }
[18:03:52.962]         else {
[18:03:52.962]             ...future.result["stdout"] <- base::list(NULL)
[18:03:52.962]         }
[18:03:52.962]         base::close(...future.stdout)
[18:03:52.962]         ...future.stdout <- NULL
[18:03:52.962]     }
[18:03:52.962]     ...future.result$conditions <- ...future.conditions
[18:03:52.962]     ...future.result$finished <- base::Sys.time()
[18:03:52.962]     ...future.result
[18:03:52.962] }
[18:03:52.967] requestCore(): workers = 2
[18:03:52.971] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:03:52.977] plan(): Setting new future strategy stack:
[18:03:52.977] List of future strategies:
[18:03:52.977] 1. sequential:
[18:03:52.977]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:52.977]    - tweaked: FALSE
[18:03:52.977]    - call: NULL
[18:03:52.981] plan(): nbrOfWorkers() = 1
[18:03:52.985] plan(): Setting new future strategy stack:
[18:03:52.986] List of future strategies:
[18:03:52.986] 1. multicore:
[18:03:52.986]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:52.986]    - tweaked: FALSE
[18:03:52.986]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:52.996] result() for MulticoreFuture ...
[18:03:52.999] plan(): nbrOfWorkers() = 2
[18:03:53.011] result() for MulticoreFuture ...
[18:03:53.012] result() for MulticoreFuture ... done
[18:03:53.012] result() for MulticoreFuture ... done
[18:03:53.012] result() for MulticoreFuture ...
[18:03:53.012] result() for MulticoreFuture ... done
[18:03:53.013] getGlobalsAndPackages() ...
[18:03:53.013] Searching for globals...
[18:03:53.014] 
[18:03:53.014] Searching for globals ... DONE
[18:03:53.014] - globals: [0] <none>
[18:03:53.015] getGlobalsAndPackages() ... DONE
[18:03:53.015] run() for ‘Future’ ...
[18:03:53.015] - state: ‘created’
[18:03:53.016] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:53.022] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.023] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:53.023]   - Field: ‘label’
[18:03:53.023]   - Field: ‘local’
[18:03:53.024]   - Field: ‘owner’
[18:03:53.024]   - Field: ‘envir’
[18:03:53.024]   - Field: ‘workers’
[18:03:53.024]   - Field: ‘packages’
[18:03:53.024]   - Field: ‘gc’
[18:03:53.025]   - Field: ‘job’
[18:03:53.025]   - Field: ‘conditions’
[18:03:53.025]   - Field: ‘expr’
[18:03:53.025]   - Field: ‘uuid’
[18:03:53.026]   - Field: ‘seed’
[18:03:53.026]   - Field: ‘version’
[18:03:53.026]   - Field: ‘result’
[18:03:53.026]   - Field: ‘asynchronous’
[18:03:53.027]   - Field: ‘calls’
[18:03:53.027]   - Field: ‘globals’
[18:03:53.027]   - Field: ‘stdout’
[18:03:53.027]   - Field: ‘earlySignal’
[18:03:53.027]   - Field: ‘lazy’
[18:03:53.028]   - Field: ‘state’
[18:03:53.028] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:53.028] - Launch lazy future ...
[18:03:53.029] Packages needed by the future expression (n = 0): <none>
[18:03:53.029] Packages needed by future strategies (n = 0): <none>
[18:03:53.030] {
[18:03:53.030]     {
[18:03:53.030]         {
[18:03:53.030]             ...future.startTime <- base::Sys.time()
[18:03:53.030]             {
[18:03:53.030]                 {
[18:03:53.030]                   {
[18:03:53.030]                     {
[18:03:53.030]                       base::local({
[18:03:53.030]                         has_future <- base::requireNamespace("future", 
[18:03:53.030]                           quietly = TRUE)
[18:03:53.030]                         if (has_future) {
[18:03:53.030]                           ns <- base::getNamespace("future")
[18:03:53.030]                           version <- ns[[".package"]][["version"]]
[18:03:53.030]                           if (is.null(version)) 
[18:03:53.030]                             version <- utils::packageVersion("future")
[18:03:53.030]                         }
[18:03:53.030]                         else {
[18:03:53.030]                           version <- NULL
[18:03:53.030]                         }
[18:03:53.030]                         if (!has_future || version < "1.8.0") {
[18:03:53.030]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:53.030]                             "", base::R.version$version.string), 
[18:03:53.030]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:53.030]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:53.030]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:53.030]                               "release", "version")], collapse = " "), 
[18:03:53.030]                             hostname = base::Sys.info()[["nodename"]])
[18:03:53.030]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:53.030]                             info)
[18:03:53.030]                           info <- base::paste(info, collapse = "; ")
[18:03:53.030]                           if (!has_future) {
[18:03:53.030]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:53.030]                               info)
[18:03:53.030]                           }
[18:03:53.030]                           else {
[18:03:53.030]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:53.030]                               info, version)
[18:03:53.030]                           }
[18:03:53.030]                           base::stop(msg)
[18:03:53.030]                         }
[18:03:53.030]                       })
[18:03:53.030]                     }
[18:03:53.030]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:53.030]                     base::options(mc.cores = 1L)
[18:03:53.030]                   }
[18:03:53.030]                   ...future.strategy.old <- future::plan("list")
[18:03:53.030]                   options(future.plan = NULL)
[18:03:53.030]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.030]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:53.030]                 }
[18:03:53.030]                 ...future.workdir <- getwd()
[18:03:53.030]             }
[18:03:53.030]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:53.030]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:53.030]         }
[18:03:53.030]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:53.030]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:53.030]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:53.030]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:53.030]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:53.030]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:53.030]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:53.030]             base::names(...future.oldOptions))
[18:03:53.030]     }
[18:03:53.030]     if (FALSE) {
[18:03:53.030]     }
[18:03:53.030]     else {
[18:03:53.030]         if (TRUE) {
[18:03:53.030]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:53.030]                 open = "w")
[18:03:53.030]         }
[18:03:53.030]         else {
[18:03:53.030]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:53.030]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:53.030]         }
[18:03:53.030]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:53.030]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:53.030]             base::sink(type = "output", split = FALSE)
[18:03:53.030]             base::close(...future.stdout)
[18:03:53.030]         }, add = TRUE)
[18:03:53.030]     }
[18:03:53.030]     ...future.frame <- base::sys.nframe()
[18:03:53.030]     ...future.conditions <- base::list()
[18:03:53.030]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:53.030]     if (FALSE) {
[18:03:53.030]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:53.030]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:53.030]     }
[18:03:53.030]     ...future.result <- base::tryCatch({
[18:03:53.030]         base::withCallingHandlers({
[18:03:53.030]             ...future.value <- base::withVisible(base::local({
[18:03:53.030]                 withCallingHandlers({
[18:03:53.030]                   42
[18:03:53.030]                 }, immediateCondition = function(cond) {
[18:03:53.030]                   save_rds <- function (object, pathname, ...) 
[18:03:53.030]                   {
[18:03:53.030]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:53.030]                     if (file_test("-f", pathname_tmp)) {
[18:03:53.030]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.030]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:53.030]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.030]                         fi_tmp[["mtime"]])
[18:03:53.030]                     }
[18:03:53.030]                     tryCatch({
[18:03:53.030]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:53.030]                     }, error = function(ex) {
[18:03:53.030]                       msg <- conditionMessage(ex)
[18:03:53.030]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.030]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:53.030]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.030]                         fi_tmp[["mtime"]], msg)
[18:03:53.030]                       ex$message <- msg
[18:03:53.030]                       stop(ex)
[18:03:53.030]                     })
[18:03:53.030]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:53.030]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:53.030]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:53.030]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.030]                       fi <- file.info(pathname)
[18:03:53.030]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:53.030]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.030]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:53.030]                         fi[["size"]], fi[["mtime"]])
[18:03:53.030]                       stop(msg)
[18:03:53.030]                     }
[18:03:53.030]                     invisible(pathname)
[18:03:53.030]                   }
[18:03:53.030]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:53.030]                     rootPath = tempdir()) 
[18:03:53.030]                   {
[18:03:53.030]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:53.030]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:53.030]                       tmpdir = path, fileext = ".rds")
[18:03:53.030]                     save_rds(obj, file)
[18:03:53.030]                   }
[18:03:53.030]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3RkdJZ/.future/immediateConditions")
[18:03:53.030]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.030]                   {
[18:03:53.030]                     inherits <- base::inherits
[18:03:53.030]                     invokeRestart <- base::invokeRestart
[18:03:53.030]                     is.null <- base::is.null
[18:03:53.030]                     muffled <- FALSE
[18:03:53.030]                     if (inherits(cond, "message")) {
[18:03:53.030]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:53.030]                       if (muffled) 
[18:03:53.030]                         invokeRestart("muffleMessage")
[18:03:53.030]                     }
[18:03:53.030]                     else if (inherits(cond, "warning")) {
[18:03:53.030]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:53.030]                       if (muffled) 
[18:03:53.030]                         invokeRestart("muffleWarning")
[18:03:53.030]                     }
[18:03:53.030]                     else if (inherits(cond, "condition")) {
[18:03:53.030]                       if (!is.null(pattern)) {
[18:03:53.030]                         computeRestarts <- base::computeRestarts
[18:03:53.030]                         grepl <- base::grepl
[18:03:53.030]                         restarts <- computeRestarts(cond)
[18:03:53.030]                         for (restart in restarts) {
[18:03:53.030]                           name <- restart$name
[18:03:53.030]                           if (is.null(name)) 
[18:03:53.030]                             next
[18:03:53.030]                           if (!grepl(pattern, name)) 
[18:03:53.030]                             next
[18:03:53.030]                           invokeRestart(restart)
[18:03:53.030]                           muffled <- TRUE
[18:03:53.030]                           break
[18:03:53.030]                         }
[18:03:53.030]                       }
[18:03:53.030]                     }
[18:03:53.030]                     invisible(muffled)
[18:03:53.030]                   }
[18:03:53.030]                   muffleCondition(cond)
[18:03:53.030]                 })
[18:03:53.030]             }))
[18:03:53.030]             future::FutureResult(value = ...future.value$value, 
[18:03:53.030]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.030]                   ...future.rng), globalenv = if (FALSE) 
[18:03:53.030]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:53.030]                     ...future.globalenv.names))
[18:03:53.030]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:53.030]         }, condition = base::local({
[18:03:53.030]             c <- base::c
[18:03:53.030]             inherits <- base::inherits
[18:03:53.030]             invokeRestart <- base::invokeRestart
[18:03:53.030]             length <- base::length
[18:03:53.030]             list <- base::list
[18:03:53.030]             seq.int <- base::seq.int
[18:03:53.030]             signalCondition <- base::signalCondition
[18:03:53.030]             sys.calls <- base::sys.calls
[18:03:53.030]             `[[` <- base::`[[`
[18:03:53.030]             `+` <- base::`+`
[18:03:53.030]             `<<-` <- base::`<<-`
[18:03:53.030]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:53.030]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:53.030]                   3L)]
[18:03:53.030]             }
[18:03:53.030]             function(cond) {
[18:03:53.030]                 is_error <- inherits(cond, "error")
[18:03:53.030]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:53.030]                   NULL)
[18:03:53.030]                 if (is_error) {
[18:03:53.030]                   sessionInformation <- function() {
[18:03:53.030]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:53.030]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:53.030]                       search = base::search(), system = base::Sys.info())
[18:03:53.030]                   }
[18:03:53.030]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.030]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:53.030]                     cond$call), session = sessionInformation(), 
[18:03:53.030]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:53.030]                   signalCondition(cond)
[18:03:53.030]                 }
[18:03:53.030]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:53.030]                 "immediateCondition"))) {
[18:03:53.030]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:53.030]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.030]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:53.030]                   if (TRUE && !signal) {
[18:03:53.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.030]                     {
[18:03:53.030]                       inherits <- base::inherits
[18:03:53.030]                       invokeRestart <- base::invokeRestart
[18:03:53.030]                       is.null <- base::is.null
[18:03:53.030]                       muffled <- FALSE
[18:03:53.030]                       if (inherits(cond, "message")) {
[18:03:53.030]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.030]                         if (muffled) 
[18:03:53.030]                           invokeRestart("muffleMessage")
[18:03:53.030]                       }
[18:03:53.030]                       else if (inherits(cond, "warning")) {
[18:03:53.030]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.030]                         if (muffled) 
[18:03:53.030]                           invokeRestart("muffleWarning")
[18:03:53.030]                       }
[18:03:53.030]                       else if (inherits(cond, "condition")) {
[18:03:53.030]                         if (!is.null(pattern)) {
[18:03:53.030]                           computeRestarts <- base::computeRestarts
[18:03:53.030]                           grepl <- base::grepl
[18:03:53.030]                           restarts <- computeRestarts(cond)
[18:03:53.030]                           for (restart in restarts) {
[18:03:53.030]                             name <- restart$name
[18:03:53.030]                             if (is.null(name)) 
[18:03:53.030]                               next
[18:03:53.030]                             if (!grepl(pattern, name)) 
[18:03:53.030]                               next
[18:03:53.030]                             invokeRestart(restart)
[18:03:53.030]                             muffled <- TRUE
[18:03:53.030]                             break
[18:03:53.030]                           }
[18:03:53.030]                         }
[18:03:53.030]                       }
[18:03:53.030]                       invisible(muffled)
[18:03:53.030]                     }
[18:03:53.030]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.030]                   }
[18:03:53.030]                 }
[18:03:53.030]                 else {
[18:03:53.030]                   if (TRUE) {
[18:03:53.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.030]                     {
[18:03:53.030]                       inherits <- base::inherits
[18:03:53.030]                       invokeRestart <- base::invokeRestart
[18:03:53.030]                       is.null <- base::is.null
[18:03:53.030]                       muffled <- FALSE
[18:03:53.030]                       if (inherits(cond, "message")) {
[18:03:53.030]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.030]                         if (muffled) 
[18:03:53.030]                           invokeRestart("muffleMessage")
[18:03:53.030]                       }
[18:03:53.030]                       else if (inherits(cond, "warning")) {
[18:03:53.030]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.030]                         if (muffled) 
[18:03:53.030]                           invokeRestart("muffleWarning")
[18:03:53.030]                       }
[18:03:53.030]                       else if (inherits(cond, "condition")) {
[18:03:53.030]                         if (!is.null(pattern)) {
[18:03:53.030]                           computeRestarts <- base::computeRestarts
[18:03:53.030]                           grepl <- base::grepl
[18:03:53.030]                           restarts <- computeRestarts(cond)
[18:03:53.030]                           for (restart in restarts) {
[18:03:53.030]                             name <- restart$name
[18:03:53.030]                             if (is.null(name)) 
[18:03:53.030]                               next
[18:03:53.030]                             if (!grepl(pattern, name)) 
[18:03:53.030]                               next
[18:03:53.030]                             invokeRestart(restart)
[18:03:53.030]                             muffled <- TRUE
[18:03:53.030]                             break
[18:03:53.030]                           }
[18:03:53.030]                         }
[18:03:53.030]                       }
[18:03:53.030]                       invisible(muffled)
[18:03:53.030]                     }
[18:03:53.030]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.030]                   }
[18:03:53.030]                 }
[18:03:53.030]             }
[18:03:53.030]         }))
[18:03:53.030]     }, error = function(ex) {
[18:03:53.030]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:53.030]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.030]                 ...future.rng), started = ...future.startTime, 
[18:03:53.030]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:53.030]             version = "1.8"), class = "FutureResult")
[18:03:53.030]     }, finally = {
[18:03:53.030]         if (!identical(...future.workdir, getwd())) 
[18:03:53.030]             setwd(...future.workdir)
[18:03:53.030]         {
[18:03:53.030]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:53.030]                 ...future.oldOptions$nwarnings <- NULL
[18:03:53.030]             }
[18:03:53.030]             base::options(...future.oldOptions)
[18:03:53.030]             if (.Platform$OS.type == "windows") {
[18:03:53.030]                 old_names <- names(...future.oldEnvVars)
[18:03:53.030]                 envs <- base::Sys.getenv()
[18:03:53.030]                 names <- names(envs)
[18:03:53.030]                 common <- intersect(names, old_names)
[18:03:53.030]                 added <- setdiff(names, old_names)
[18:03:53.030]                 removed <- setdiff(old_names, names)
[18:03:53.030]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:53.030]                   envs[common]]
[18:03:53.030]                 NAMES <- toupper(changed)
[18:03:53.030]                 args <- list()
[18:03:53.030]                 for (kk in seq_along(NAMES)) {
[18:03:53.030]                   name <- changed[[kk]]
[18:03:53.030]                   NAME <- NAMES[[kk]]
[18:03:53.030]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.030]                     next
[18:03:53.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.030]                 }
[18:03:53.030]                 NAMES <- toupper(added)
[18:03:53.030]                 for (kk in seq_along(NAMES)) {
[18:03:53.030]                   name <- added[[kk]]
[18:03:53.030]                   NAME <- NAMES[[kk]]
[18:03:53.030]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.030]                     next
[18:03:53.030]                   args[[name]] <- ""
[18:03:53.030]                 }
[18:03:53.030]                 NAMES <- toupper(removed)
[18:03:53.030]                 for (kk in seq_along(NAMES)) {
[18:03:53.030]                   name <- removed[[kk]]
[18:03:53.030]                   NAME <- NAMES[[kk]]
[18:03:53.030]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.030]                     next
[18:03:53.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.030]                 }
[18:03:53.030]                 if (length(args) > 0) 
[18:03:53.030]                   base::do.call(base::Sys.setenv, args = args)
[18:03:53.030]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:53.030]             }
[18:03:53.030]             else {
[18:03:53.030]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:53.030]             }
[18:03:53.030]             {
[18:03:53.030]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:53.030]                   0L) {
[18:03:53.030]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:53.030]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:53.030]                   base::options(opts)
[18:03:53.030]                 }
[18:03:53.030]                 {
[18:03:53.030]                   {
[18:03:53.030]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:53.030]                     NULL
[18:03:53.030]                   }
[18:03:53.030]                   options(future.plan = NULL)
[18:03:53.030]                   if (is.na(NA_character_)) 
[18:03:53.030]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.030]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:53.030]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:53.030]                     .init = FALSE)
[18:03:53.030]                 }
[18:03:53.030]             }
[18:03:53.030]         }
[18:03:53.030]     })
[18:03:53.030]     if (TRUE) {
[18:03:53.030]         base::sink(type = "output", split = FALSE)
[18:03:53.030]         if (TRUE) {
[18:03:53.030]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:53.030]         }
[18:03:53.030]         else {
[18:03:53.030]             ...future.result["stdout"] <- base::list(NULL)
[18:03:53.030]         }
[18:03:53.030]         base::close(...future.stdout)
[18:03:53.030]         ...future.stdout <- NULL
[18:03:53.030]     }
[18:03:53.030]     ...future.result$conditions <- ...future.conditions
[18:03:53.030]     ...future.result$finished <- base::Sys.time()
[18:03:53.030]     ...future.result
[18:03:53.030] }
[18:03:53.035] requestCore(): workers = 2
[18:03:53.038] MulticoreFuture started
[18:03:53.039] - Launch lazy future ... done
[18:03:53.039] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:03:53.040] plan(): Setting new future strategy stack:
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:03:53.041] List of future strategies:
[18:03:53.041] 1. sequential:
[18:03:53.041]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:53.041]    - tweaked: FALSE
[18:03:53.041]    - call: NULL
[18:03:53.043] plan(): nbrOfWorkers() = 1
[18:03:53.047] plan(): Setting new future strategy stack:
[18:03:53.047] List of future strategies:
[18:03:53.047] 1. multicore:
[18:03:53.047]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:53.047]    - tweaked: FALSE
[18:03:53.047]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.053] result() for MulticoreFuture ...
[18:03:53.069] plan(): nbrOfWorkers() = 2
[18:03:53.071] result() for MulticoreFuture ...
[18:03:53.071] result() for MulticoreFuture ... done
[18:03:53.071] result() for MulticoreFuture ... done
[18:03:53.072] result() for MulticoreFuture ...
[18:03:53.073] result() for MulticoreFuture ... done
[18:03:53.074] getGlobalsAndPackages() ...
[18:03:53.074] Searching for globals...
[18:03:53.083] - globals found: [1] ‘{’
[18:03:53.083] Searching for globals ... DONE
[18:03:53.083] Resolving globals: FALSE
[18:03:53.084] 
[18:03:53.084] 
[18:03:53.085] getGlobalsAndPackages() ... DONE
[18:03:53.085] run() for ‘Future’ ...
[18:03:53.086] - state: ‘created’
[18:03:53.086] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:53.093] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.093] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:53.094]   - Field: ‘label’
[18:03:53.094]   - Field: ‘local’
[18:03:53.094]   - Field: ‘owner’
[18:03:53.094]   - Field: ‘envir’
[18:03:53.094]   - Field: ‘workers’
[18:03:53.095]   - Field: ‘packages’
[18:03:53.095]   - Field: ‘gc’
[18:03:53.095]   - Field: ‘job’
[18:03:53.095]   - Field: ‘conditions’
[18:03:53.096]   - Field: ‘expr’
[18:03:53.096]   - Field: ‘uuid’
[18:03:53.096]   - Field: ‘seed’
[18:03:53.096]   - Field: ‘version’
[18:03:53.097]   - Field: ‘result’
[18:03:53.097]   - Field: ‘asynchronous’
[18:03:53.097]   - Field: ‘calls’
[18:03:53.097]   - Field: ‘globals’
[18:03:53.098]   - Field: ‘stdout’
[18:03:53.098]   - Field: ‘earlySignal’
[18:03:53.098]   - Field: ‘lazy’
[18:03:53.098]   - Field: ‘state’
[18:03:53.098] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:53.099] - Launch lazy future ...
[18:03:53.099] Packages needed by the future expression (n = 0): <none>
[18:03:53.100] Packages needed by future strategies (n = 0): <none>
[18:03:53.101] {
[18:03:53.101]     {
[18:03:53.101]         {
[18:03:53.101]             ...future.startTime <- base::Sys.time()
[18:03:53.101]             {
[18:03:53.101]                 {
[18:03:53.101]                   {
[18:03:53.101]                     {
[18:03:53.101]                       base::local({
[18:03:53.101]                         has_future <- base::requireNamespace("future", 
[18:03:53.101]                           quietly = TRUE)
[18:03:53.101]                         if (has_future) {
[18:03:53.101]                           ns <- base::getNamespace("future")
[18:03:53.101]                           version <- ns[[".package"]][["version"]]
[18:03:53.101]                           if (is.null(version)) 
[18:03:53.101]                             version <- utils::packageVersion("future")
[18:03:53.101]                         }
[18:03:53.101]                         else {
[18:03:53.101]                           version <- NULL
[18:03:53.101]                         }
[18:03:53.101]                         if (!has_future || version < "1.8.0") {
[18:03:53.101]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:53.101]                             "", base::R.version$version.string), 
[18:03:53.101]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:53.101]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:53.101]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:53.101]                               "release", "version")], collapse = " "), 
[18:03:53.101]                             hostname = base::Sys.info()[["nodename"]])
[18:03:53.101]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:53.101]                             info)
[18:03:53.101]                           info <- base::paste(info, collapse = "; ")
[18:03:53.101]                           if (!has_future) {
[18:03:53.101]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:53.101]                               info)
[18:03:53.101]                           }
[18:03:53.101]                           else {
[18:03:53.101]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:53.101]                               info, version)
[18:03:53.101]                           }
[18:03:53.101]                           base::stop(msg)
[18:03:53.101]                         }
[18:03:53.101]                       })
[18:03:53.101]                     }
[18:03:53.101]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:53.101]                     base::options(mc.cores = 1L)
[18:03:53.101]                   }
[18:03:53.101]                   ...future.strategy.old <- future::plan("list")
[18:03:53.101]                   options(future.plan = NULL)
[18:03:53.101]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.101]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:53.101]                 }
[18:03:53.101]                 ...future.workdir <- getwd()
[18:03:53.101]             }
[18:03:53.101]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:53.101]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:53.101]         }
[18:03:53.101]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:53.101]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:53.101]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:53.101]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:53.101]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:53.101]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:53.101]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:53.101]             base::names(...future.oldOptions))
[18:03:53.101]     }
[18:03:53.101]     if (FALSE) {
[18:03:53.101]     }
[18:03:53.101]     else {
[18:03:53.101]         if (TRUE) {
[18:03:53.101]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:53.101]                 open = "w")
[18:03:53.101]         }
[18:03:53.101]         else {
[18:03:53.101]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:53.101]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:53.101]         }
[18:03:53.101]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:53.101]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:53.101]             base::sink(type = "output", split = FALSE)
[18:03:53.101]             base::close(...future.stdout)
[18:03:53.101]         }, add = TRUE)
[18:03:53.101]     }
[18:03:53.101]     ...future.frame <- base::sys.nframe()
[18:03:53.101]     ...future.conditions <- base::list()
[18:03:53.101]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:53.101]     if (FALSE) {
[18:03:53.101]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:53.101]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:53.101]     }
[18:03:53.101]     ...future.result <- base::tryCatch({
[18:03:53.101]         base::withCallingHandlers({
[18:03:53.101]             ...future.value <- base::withVisible(base::local({
[18:03:53.101]                 withCallingHandlers({
[18:03:53.101]                   {
[18:03:53.101]                     42
[18:03:53.101]                   }
[18:03:53.101]                 }, immediateCondition = function(cond) {
[18:03:53.101]                   save_rds <- function (object, pathname, ...) 
[18:03:53.101]                   {
[18:03:53.101]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:53.101]                     if (file_test("-f", pathname_tmp)) {
[18:03:53.101]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.101]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:53.101]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.101]                         fi_tmp[["mtime"]])
[18:03:53.101]                     }
[18:03:53.101]                     tryCatch({
[18:03:53.101]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:53.101]                     }, error = function(ex) {
[18:03:53.101]                       msg <- conditionMessage(ex)
[18:03:53.101]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.101]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:53.101]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.101]                         fi_tmp[["mtime"]], msg)
[18:03:53.101]                       ex$message <- msg
[18:03:53.101]                       stop(ex)
[18:03:53.101]                     })
[18:03:53.101]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:53.101]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:53.101]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:53.101]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.101]                       fi <- file.info(pathname)
[18:03:53.101]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:53.101]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.101]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:53.101]                         fi[["size"]], fi[["mtime"]])
[18:03:53.101]                       stop(msg)
[18:03:53.101]                     }
[18:03:53.101]                     invisible(pathname)
[18:03:53.101]                   }
[18:03:53.101]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:53.101]                     rootPath = tempdir()) 
[18:03:53.101]                   {
[18:03:53.101]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:53.101]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:53.101]                       tmpdir = path, fileext = ".rds")
[18:03:53.101]                     save_rds(obj, file)
[18:03:53.101]                   }
[18:03:53.101]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3RkdJZ/.future/immediateConditions")
[18:03:53.101]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.101]                   {
[18:03:53.101]                     inherits <- base::inherits
[18:03:53.101]                     invokeRestart <- base::invokeRestart
[18:03:53.101]                     is.null <- base::is.null
[18:03:53.101]                     muffled <- FALSE
[18:03:53.101]                     if (inherits(cond, "message")) {
[18:03:53.101]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:53.101]                       if (muffled) 
[18:03:53.101]                         invokeRestart("muffleMessage")
[18:03:53.101]                     }
[18:03:53.101]                     else if (inherits(cond, "warning")) {
[18:03:53.101]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:53.101]                       if (muffled) 
[18:03:53.101]                         invokeRestart("muffleWarning")
[18:03:53.101]                     }
[18:03:53.101]                     else if (inherits(cond, "condition")) {
[18:03:53.101]                       if (!is.null(pattern)) {
[18:03:53.101]                         computeRestarts <- base::computeRestarts
[18:03:53.101]                         grepl <- base::grepl
[18:03:53.101]                         restarts <- computeRestarts(cond)
[18:03:53.101]                         for (restart in restarts) {
[18:03:53.101]                           name <- restart$name
[18:03:53.101]                           if (is.null(name)) 
[18:03:53.101]                             next
[18:03:53.101]                           if (!grepl(pattern, name)) 
[18:03:53.101]                             next
[18:03:53.101]                           invokeRestart(restart)
[18:03:53.101]                           muffled <- TRUE
[18:03:53.101]                           break
[18:03:53.101]                         }
[18:03:53.101]                       }
[18:03:53.101]                     }
[18:03:53.101]                     invisible(muffled)
[18:03:53.101]                   }
[18:03:53.101]                   muffleCondition(cond)
[18:03:53.101]                 })
[18:03:53.101]             }))
[18:03:53.101]             future::FutureResult(value = ...future.value$value, 
[18:03:53.101]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.101]                   ...future.rng), globalenv = if (FALSE) 
[18:03:53.101]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:53.101]                     ...future.globalenv.names))
[18:03:53.101]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:53.101]         }, condition = base::local({
[18:03:53.101]             c <- base::c
[18:03:53.101]             inherits <- base::inherits
[18:03:53.101]             invokeRestart <- base::invokeRestart
[18:03:53.101]             length <- base::length
[18:03:53.101]             list <- base::list
[18:03:53.101]             seq.int <- base::seq.int
[18:03:53.101]             signalCondition <- base::signalCondition
[18:03:53.101]             sys.calls <- base::sys.calls
[18:03:53.101]             `[[` <- base::`[[`
[18:03:53.101]             `+` <- base::`+`
[18:03:53.101]             `<<-` <- base::`<<-`
[18:03:53.101]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:53.101]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:53.101]                   3L)]
[18:03:53.101]             }
[18:03:53.101]             function(cond) {
[18:03:53.101]                 is_error <- inherits(cond, "error")
[18:03:53.101]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:53.101]                   NULL)
[18:03:53.101]                 if (is_error) {
[18:03:53.101]                   sessionInformation <- function() {
[18:03:53.101]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:53.101]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:53.101]                       search = base::search(), system = base::Sys.info())
[18:03:53.101]                   }
[18:03:53.101]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.101]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:53.101]                     cond$call), session = sessionInformation(), 
[18:03:53.101]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:53.101]                   signalCondition(cond)
[18:03:53.101]                 }
[18:03:53.101]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:53.101]                 "immediateCondition"))) {
[18:03:53.101]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:53.101]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.101]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:53.101]                   if (TRUE && !signal) {
[18:03:53.101]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.101]                     {
[18:03:53.101]                       inherits <- base::inherits
[18:03:53.101]                       invokeRestart <- base::invokeRestart
[18:03:53.101]                       is.null <- base::is.null
[18:03:53.101]                       muffled <- FALSE
[18:03:53.101]                       if (inherits(cond, "message")) {
[18:03:53.101]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.101]                         if (muffled) 
[18:03:53.101]                           invokeRestart("muffleMessage")
[18:03:53.101]                       }
[18:03:53.101]                       else if (inherits(cond, "warning")) {
[18:03:53.101]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.101]                         if (muffled) 
[18:03:53.101]                           invokeRestart("muffleWarning")
[18:03:53.101]                       }
[18:03:53.101]                       else if (inherits(cond, "condition")) {
[18:03:53.101]                         if (!is.null(pattern)) {
[18:03:53.101]                           computeRestarts <- base::computeRestarts
[18:03:53.101]                           grepl <- base::grepl
[18:03:53.101]                           restarts <- computeRestarts(cond)
[18:03:53.101]                           for (restart in restarts) {
[18:03:53.101]                             name <- restart$name
[18:03:53.101]                             if (is.null(name)) 
[18:03:53.101]                               next
[18:03:53.101]                             if (!grepl(pattern, name)) 
[18:03:53.101]                               next
[18:03:53.101]                             invokeRestart(restart)
[18:03:53.101]                             muffled <- TRUE
[18:03:53.101]                             break
[18:03:53.101]                           }
[18:03:53.101]                         }
[18:03:53.101]                       }
[18:03:53.101]                       invisible(muffled)
[18:03:53.101]                     }
[18:03:53.101]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.101]                   }
[18:03:53.101]                 }
[18:03:53.101]                 else {
[18:03:53.101]                   if (TRUE) {
[18:03:53.101]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.101]                     {
[18:03:53.101]                       inherits <- base::inherits
[18:03:53.101]                       invokeRestart <- base::invokeRestart
[18:03:53.101]                       is.null <- base::is.null
[18:03:53.101]                       muffled <- FALSE
[18:03:53.101]                       if (inherits(cond, "message")) {
[18:03:53.101]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.101]                         if (muffled) 
[18:03:53.101]                           invokeRestart("muffleMessage")
[18:03:53.101]                       }
[18:03:53.101]                       else if (inherits(cond, "warning")) {
[18:03:53.101]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.101]                         if (muffled) 
[18:03:53.101]                           invokeRestart("muffleWarning")
[18:03:53.101]                       }
[18:03:53.101]                       else if (inherits(cond, "condition")) {
[18:03:53.101]                         if (!is.null(pattern)) {
[18:03:53.101]                           computeRestarts <- base::computeRestarts
[18:03:53.101]                           grepl <- base::grepl
[18:03:53.101]                           restarts <- computeRestarts(cond)
[18:03:53.101]                           for (restart in restarts) {
[18:03:53.101]                             name <- restart$name
[18:03:53.101]                             if (is.null(name)) 
[18:03:53.101]                               next
[18:03:53.101]                             if (!grepl(pattern, name)) 
[18:03:53.101]                               next
[18:03:53.101]                             invokeRestart(restart)
[18:03:53.101]                             muffled <- TRUE
[18:03:53.101]                             break
[18:03:53.101]                           }
[18:03:53.101]                         }
[18:03:53.101]                       }
[18:03:53.101]                       invisible(muffled)
[18:03:53.101]                     }
[18:03:53.101]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.101]                   }
[18:03:53.101]                 }
[18:03:53.101]             }
[18:03:53.101]         }))
[18:03:53.101]     }, error = function(ex) {
[18:03:53.101]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:53.101]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.101]                 ...future.rng), started = ...future.startTime, 
[18:03:53.101]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:53.101]             version = "1.8"), class = "FutureResult")
[18:03:53.101]     }, finally = {
[18:03:53.101]         if (!identical(...future.workdir, getwd())) 
[18:03:53.101]             setwd(...future.workdir)
[18:03:53.101]         {
[18:03:53.101]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:53.101]                 ...future.oldOptions$nwarnings <- NULL
[18:03:53.101]             }
[18:03:53.101]             base::options(...future.oldOptions)
[18:03:53.101]             if (.Platform$OS.type == "windows") {
[18:03:53.101]                 old_names <- names(...future.oldEnvVars)
[18:03:53.101]                 envs <- base::Sys.getenv()
[18:03:53.101]                 names <- names(envs)
[18:03:53.101]                 common <- intersect(names, old_names)
[18:03:53.101]                 added <- setdiff(names, old_names)
[18:03:53.101]                 removed <- setdiff(old_names, names)
[18:03:53.101]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:53.101]                   envs[common]]
[18:03:53.101]                 NAMES <- toupper(changed)
[18:03:53.101]                 args <- list()
[18:03:53.101]                 for (kk in seq_along(NAMES)) {
[18:03:53.101]                   name <- changed[[kk]]
[18:03:53.101]                   NAME <- NAMES[[kk]]
[18:03:53.101]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.101]                     next
[18:03:53.101]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.101]                 }
[18:03:53.101]                 NAMES <- toupper(added)
[18:03:53.101]                 for (kk in seq_along(NAMES)) {
[18:03:53.101]                   name <- added[[kk]]
[18:03:53.101]                   NAME <- NAMES[[kk]]
[18:03:53.101]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.101]                     next
[18:03:53.101]                   args[[name]] <- ""
[18:03:53.101]                 }
[18:03:53.101]                 NAMES <- toupper(removed)
[18:03:53.101]                 for (kk in seq_along(NAMES)) {
[18:03:53.101]                   name <- removed[[kk]]
[18:03:53.101]                   NAME <- NAMES[[kk]]
[18:03:53.101]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.101]                     next
[18:03:53.101]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.101]                 }
[18:03:53.101]                 if (length(args) > 0) 
[18:03:53.101]                   base::do.call(base::Sys.setenv, args = args)
[18:03:53.101]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:53.101]             }
[18:03:53.101]             else {
[18:03:53.101]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:53.101]             }
[18:03:53.101]             {
[18:03:53.101]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:53.101]                   0L) {
[18:03:53.101]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:53.101]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:53.101]                   base::options(opts)
[18:03:53.101]                 }
[18:03:53.101]                 {
[18:03:53.101]                   {
[18:03:53.101]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:53.101]                     NULL
[18:03:53.101]                   }
[18:03:53.101]                   options(future.plan = NULL)
[18:03:53.101]                   if (is.na(NA_character_)) 
[18:03:53.101]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.101]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:53.101]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:53.101]                     .init = FALSE)
[18:03:53.101]                 }
[18:03:53.101]             }
[18:03:53.101]         }
[18:03:53.101]     })
[18:03:53.101]     if (TRUE) {
[18:03:53.101]         base::sink(type = "output", split = FALSE)
[18:03:53.101]         if (TRUE) {
[18:03:53.101]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:53.101]         }
[18:03:53.101]         else {
[18:03:53.101]             ...future.result["stdout"] <- base::list(NULL)
[18:03:53.101]         }
[18:03:53.101]         base::close(...future.stdout)
[18:03:53.101]         ...future.stdout <- NULL
[18:03:53.101]     }
[18:03:53.101]     ...future.result$conditions <- ...future.conditions
[18:03:53.101]     ...future.result$finished <- base::Sys.time()
[18:03:53.101]     ...future.result
[18:03:53.101] }
[18:03:53.105] requestCore(): workers = 2
[18:03:53.108] MulticoreFuture started
[18:03:53.109] - Launch lazy future ... done
[18:03:53.110] run() for ‘MulticoreFuture’ ... done
[18:03:53.110] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:03:53.111] List of future strategies:
[18:03:53.111] 1. sequential:
[18:03:53.111]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:53.111]    - tweaked: FALSE
[18:03:53.111]    - call: NULL
[18:03:53.113] plan(): nbrOfWorkers() = 1
[18:03:53.117] plan(): Setting new future strategy stack:
[18:03:53.117] List of future strategies:
[18:03:53.117] 1. multicore:
[18:03:53.117]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:53.117]    - tweaked: FALSE
[18:03:53.117]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.124] result() for MulticoreFuture ...
[18:03:53.127] plan(): nbrOfWorkers() = 2
[18:03:53.129] result() for MulticoreFuture ...
[18:03:53.129] result() for MulticoreFuture ... done
[18:03:53.130] result() for MulticoreFuture ... done
[18:03:53.130] result() for MulticoreFuture ...
[18:03:53.130] result() for MulticoreFuture ... done
[18:03:53.137] getGlobalsAndPackages() ...
[18:03:53.137] 
[18:03:53.138] - globals: [0] <none>
[18:03:53.138] getGlobalsAndPackages() ... DONE
[18:03:53.139] Packages needed by the future expression (n = 0): <none>
[18:03:53.139] Packages needed by future strategies (n = 0): <none>
[18:03:53.140] {
[18:03:53.140]     {
[18:03:53.140]         {
[18:03:53.140]             ...future.startTime <- base::Sys.time()
[18:03:53.140]             {
[18:03:53.140]                 {
[18:03:53.140]                   {
[18:03:53.140]                     {
[18:03:53.140]                       base::local({
[18:03:53.140]                         has_future <- base::requireNamespace("future", 
[18:03:53.140]                           quietly = TRUE)
[18:03:53.140]                         if (has_future) {
[18:03:53.140]                           ns <- base::getNamespace("future")
[18:03:53.140]                           version <- ns[[".package"]][["version"]]
[18:03:53.140]                           if (is.null(version)) 
[18:03:53.140]                             version <- utils::packageVersion("future")
[18:03:53.140]                         }
[18:03:53.140]                         else {
[18:03:53.140]                           version <- NULL
[18:03:53.140]                         }
[18:03:53.140]                         if (!has_future || version < "1.8.0") {
[18:03:53.140]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:53.140]                             "", base::R.version$version.string), 
[18:03:53.140]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:53.140]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:53.140]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:53.140]                               "release", "version")], collapse = " "), 
[18:03:53.140]                             hostname = base::Sys.info()[["nodename"]])
[18:03:53.140]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:53.140]                             info)
[18:03:53.140]                           info <- base::paste(info, collapse = "; ")
[18:03:53.140]                           if (!has_future) {
[18:03:53.140]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:53.140]                               info)
[18:03:53.140]                           }
[18:03:53.140]                           else {
[18:03:53.140]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:53.140]                               info, version)
[18:03:53.140]                           }
[18:03:53.140]                           base::stop(msg)
[18:03:53.140]                         }
[18:03:53.140]                       })
[18:03:53.140]                     }
[18:03:53.140]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:53.140]                     base::options(mc.cores = 1L)
[18:03:53.140]                   }
[18:03:53.140]                   ...future.strategy.old <- future::plan("list")
[18:03:53.140]                   options(future.plan = NULL)
[18:03:53.140]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.140]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:53.140]                 }
[18:03:53.140]                 ...future.workdir <- getwd()
[18:03:53.140]             }
[18:03:53.140]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:53.140]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:53.140]         }
[18:03:53.140]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:53.140]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:53.140]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:53.140]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:53.140]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:53.140]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:53.140]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:53.140]             base::names(...future.oldOptions))
[18:03:53.140]     }
[18:03:53.140]     if (FALSE) {
[18:03:53.140]     }
[18:03:53.140]     else {
[18:03:53.140]         if (TRUE) {
[18:03:53.140]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:53.140]                 open = "w")
[18:03:53.140]         }
[18:03:53.140]         else {
[18:03:53.140]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:53.140]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:53.140]         }
[18:03:53.140]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:53.140]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:53.140]             base::sink(type = "output", split = FALSE)
[18:03:53.140]             base::close(...future.stdout)
[18:03:53.140]         }, add = TRUE)
[18:03:53.140]     }
[18:03:53.140]     ...future.frame <- base::sys.nframe()
[18:03:53.140]     ...future.conditions <- base::list()
[18:03:53.140]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:53.140]     if (FALSE) {
[18:03:53.140]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:53.140]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:53.140]     }
[18:03:53.140]     ...future.result <- base::tryCatch({
[18:03:53.140]         base::withCallingHandlers({
[18:03:53.140]             ...future.value <- base::withVisible(base::local({
[18:03:53.140]                 withCallingHandlers({
[18:03:53.140]                   42
[18:03:53.140]                 }, immediateCondition = function(cond) {
[18:03:53.140]                   save_rds <- function (object, pathname, ...) 
[18:03:53.140]                   {
[18:03:53.140]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:53.140]                     if (file_test("-f", pathname_tmp)) {
[18:03:53.140]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.140]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:53.140]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.140]                         fi_tmp[["mtime"]])
[18:03:53.140]                     }
[18:03:53.140]                     tryCatch({
[18:03:53.140]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:53.140]                     }, error = function(ex) {
[18:03:53.140]                       msg <- conditionMessage(ex)
[18:03:53.140]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.140]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:53.140]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.140]                         fi_tmp[["mtime"]], msg)
[18:03:53.140]                       ex$message <- msg
[18:03:53.140]                       stop(ex)
[18:03:53.140]                     })
[18:03:53.140]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:53.140]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:53.140]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:53.140]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.140]                       fi <- file.info(pathname)
[18:03:53.140]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:53.140]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.140]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:53.140]                         fi[["size"]], fi[["mtime"]])
[18:03:53.140]                       stop(msg)
[18:03:53.140]                     }
[18:03:53.140]                     invisible(pathname)
[18:03:53.140]                   }
[18:03:53.140]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:53.140]                     rootPath = tempdir()) 
[18:03:53.140]                   {
[18:03:53.140]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:53.140]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:53.140]                       tmpdir = path, fileext = ".rds")
[18:03:53.140]                     save_rds(obj, file)
[18:03:53.140]                   }
[18:03:53.140]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3RkdJZ/.future/immediateConditions")
[18:03:53.140]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.140]                   {
[18:03:53.140]                     inherits <- base::inherits
[18:03:53.140]                     invokeRestart <- base::invokeRestart
[18:03:53.140]                     is.null <- base::is.null
[18:03:53.140]                     muffled <- FALSE
[18:03:53.140]                     if (inherits(cond, "message")) {
[18:03:53.140]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:53.140]                       if (muffled) 
[18:03:53.140]                         invokeRestart("muffleMessage")
[18:03:53.140]                     }
[18:03:53.140]                     else if (inherits(cond, "warning")) {
[18:03:53.140]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:53.140]                       if (muffled) 
[18:03:53.140]                         invokeRestart("muffleWarning")
[18:03:53.140]                     }
[18:03:53.140]                     else if (inherits(cond, "condition")) {
[18:03:53.140]                       if (!is.null(pattern)) {
[18:03:53.140]                         computeRestarts <- base::computeRestarts
[18:03:53.140]                         grepl <- base::grepl
[18:03:53.140]                         restarts <- computeRestarts(cond)
[18:03:53.140]                         for (restart in restarts) {
[18:03:53.140]                           name <- restart$name
[18:03:53.140]                           if (is.null(name)) 
[18:03:53.140]                             next
[18:03:53.140]                           if (!grepl(pattern, name)) 
[18:03:53.140]                             next
[18:03:53.140]                           invokeRestart(restart)
[18:03:53.140]                           muffled <- TRUE
[18:03:53.140]                           break
[18:03:53.140]                         }
[18:03:53.140]                       }
[18:03:53.140]                     }
[18:03:53.140]                     invisible(muffled)
[18:03:53.140]                   }
[18:03:53.140]                   muffleCondition(cond)
[18:03:53.140]                 })
[18:03:53.140]             }))
[18:03:53.140]             future::FutureResult(value = ...future.value$value, 
[18:03:53.140]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.140]                   ...future.rng), globalenv = if (FALSE) 
[18:03:53.140]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:53.140]                     ...future.globalenv.names))
[18:03:53.140]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:53.140]         }, condition = base::local({
[18:03:53.140]             c <- base::c
[18:03:53.140]             inherits <- base::inherits
[18:03:53.140]             invokeRestart <- base::invokeRestart
[18:03:53.140]             length <- base::length
[18:03:53.140]             list <- base::list
[18:03:53.140]             seq.int <- base::seq.int
[18:03:53.140]             signalCondition <- base::signalCondition
[18:03:53.140]             sys.calls <- base::sys.calls
[18:03:53.140]             `[[` <- base::`[[`
[18:03:53.140]             `+` <- base::`+`
[18:03:53.140]             `<<-` <- base::`<<-`
[18:03:53.140]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:53.140]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:53.140]                   3L)]
[18:03:53.140]             }
[18:03:53.140]             function(cond) {
[18:03:53.140]                 is_error <- inherits(cond, "error")
[18:03:53.140]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:53.140]                   NULL)
[18:03:53.140]                 if (is_error) {
[18:03:53.140]                   sessionInformation <- function() {
[18:03:53.140]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:53.140]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:53.140]                       search = base::search(), system = base::Sys.info())
[18:03:53.140]                   }
[18:03:53.140]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.140]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:53.140]                     cond$call), session = sessionInformation(), 
[18:03:53.140]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:53.140]                   signalCondition(cond)
[18:03:53.140]                 }
[18:03:53.140]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:53.140]                 "immediateCondition"))) {
[18:03:53.140]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:53.140]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.140]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:53.140]                   if (TRUE && !signal) {
[18:03:53.140]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.140]                     {
[18:03:53.140]                       inherits <- base::inherits
[18:03:53.140]                       invokeRestart <- base::invokeRestart
[18:03:53.140]                       is.null <- base::is.null
[18:03:53.140]                       muffled <- FALSE
[18:03:53.140]                       if (inherits(cond, "message")) {
[18:03:53.140]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.140]                         if (muffled) 
[18:03:53.140]                           invokeRestart("muffleMessage")
[18:03:53.140]                       }
[18:03:53.140]                       else if (inherits(cond, "warning")) {
[18:03:53.140]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.140]                         if (muffled) 
[18:03:53.140]                           invokeRestart("muffleWarning")
[18:03:53.140]                       }
[18:03:53.140]                       else if (inherits(cond, "condition")) {
[18:03:53.140]                         if (!is.null(pattern)) {
[18:03:53.140]                           computeRestarts <- base::computeRestarts
[18:03:53.140]                           grepl <- base::grepl
[18:03:53.140]                           restarts <- computeRestarts(cond)
[18:03:53.140]                           for (restart in restarts) {
[18:03:53.140]                             name <- restart$name
[18:03:53.140]                             if (is.null(name)) 
[18:03:53.140]                               next
[18:03:53.140]                             if (!grepl(pattern, name)) 
[18:03:53.140]                               next
[18:03:53.140]                             invokeRestart(restart)
[18:03:53.140]                             muffled <- TRUE
[18:03:53.140]                             break
[18:03:53.140]                           }
[18:03:53.140]                         }
[18:03:53.140]                       }
[18:03:53.140]                       invisible(muffled)
[18:03:53.140]                     }
[18:03:53.140]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.140]                   }
[18:03:53.140]                 }
[18:03:53.140]                 else {
[18:03:53.140]                   if (TRUE) {
[18:03:53.140]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.140]                     {
[18:03:53.140]                       inherits <- base::inherits
[18:03:53.140]                       invokeRestart <- base::invokeRestart
[18:03:53.140]                       is.null <- base::is.null
[18:03:53.140]                       muffled <- FALSE
[18:03:53.140]                       if (inherits(cond, "message")) {
[18:03:53.140]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.140]                         if (muffled) 
[18:03:53.140]                           invokeRestart("muffleMessage")
[18:03:53.140]                       }
[18:03:53.140]                       else if (inherits(cond, "warning")) {
[18:03:53.140]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.140]                         if (muffled) 
[18:03:53.140]                           invokeRestart("muffleWarning")
[18:03:53.140]                       }
[18:03:53.140]                       else if (inherits(cond, "condition")) {
[18:03:53.140]                         if (!is.null(pattern)) {
[18:03:53.140]                           computeRestarts <- base::computeRestarts
[18:03:53.140]                           grepl <- base::grepl
[18:03:53.140]                           restarts <- computeRestarts(cond)
[18:03:53.140]                           for (restart in restarts) {
[18:03:53.140]                             name <- restart$name
[18:03:53.140]                             if (is.null(name)) 
[18:03:53.140]                               next
[18:03:53.140]                             if (!grepl(pattern, name)) 
[18:03:53.140]                               next
[18:03:53.140]                             invokeRestart(restart)
[18:03:53.140]                             muffled <- TRUE
[18:03:53.140]                             break
[18:03:53.140]                           }
[18:03:53.140]                         }
[18:03:53.140]                       }
[18:03:53.140]                       invisible(muffled)
[18:03:53.140]                     }
[18:03:53.140]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.140]                   }
[18:03:53.140]                 }
[18:03:53.140]             }
[18:03:53.140]         }))
[18:03:53.140]     }, error = function(ex) {
[18:03:53.140]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:53.140]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.140]                 ...future.rng), started = ...future.startTime, 
[18:03:53.140]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:53.140]             version = "1.8"), class = "FutureResult")
[18:03:53.140]     }, finally = {
[18:03:53.140]         if (!identical(...future.workdir, getwd())) 
[18:03:53.140]             setwd(...future.workdir)
[18:03:53.140]         {
[18:03:53.140]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:53.140]                 ...future.oldOptions$nwarnings <- NULL
[18:03:53.140]             }
[18:03:53.140]             base::options(...future.oldOptions)
[18:03:53.140]             if (.Platform$OS.type == "windows") {
[18:03:53.140]                 old_names <- names(...future.oldEnvVars)
[18:03:53.140]                 envs <- base::Sys.getenv()
[18:03:53.140]                 names <- names(envs)
[18:03:53.140]                 common <- intersect(names, old_names)
[18:03:53.140]                 added <- setdiff(names, old_names)
[18:03:53.140]                 removed <- setdiff(old_names, names)
[18:03:53.140]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:53.140]                   envs[common]]
[18:03:53.140]                 NAMES <- toupper(changed)
[18:03:53.140]                 args <- list()
[18:03:53.140]                 for (kk in seq_along(NAMES)) {
[18:03:53.140]                   name <- changed[[kk]]
[18:03:53.140]                   NAME <- NAMES[[kk]]
[18:03:53.140]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.140]                     next
[18:03:53.140]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.140]                 }
[18:03:53.140]                 NAMES <- toupper(added)
[18:03:53.140]                 for (kk in seq_along(NAMES)) {
[18:03:53.140]                   name <- added[[kk]]
[18:03:53.140]                   NAME <- NAMES[[kk]]
[18:03:53.140]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.140]                     next
[18:03:53.140]                   args[[name]] <- ""
[18:03:53.140]                 }
[18:03:53.140]                 NAMES <- toupper(removed)
[18:03:53.140]                 for (kk in seq_along(NAMES)) {
[18:03:53.140]                   name <- removed[[kk]]
[18:03:53.140]                   NAME <- NAMES[[kk]]
[18:03:53.140]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.140]                     next
[18:03:53.140]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.140]                 }
[18:03:53.140]                 if (length(args) > 0) 
[18:03:53.140]                   base::do.call(base::Sys.setenv, args = args)
[18:03:53.140]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:53.140]             }
[18:03:53.140]             else {
[18:03:53.140]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:53.140]             }
[18:03:53.140]             {
[18:03:53.140]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:53.140]                   0L) {
[18:03:53.140]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:53.140]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:53.140]                   base::options(opts)
[18:03:53.140]                 }
[18:03:53.140]                 {
[18:03:53.140]                   {
[18:03:53.140]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:53.140]                     NULL
[18:03:53.140]                   }
[18:03:53.140]                   options(future.plan = NULL)
[18:03:53.140]                   if (is.na(NA_character_)) 
[18:03:53.140]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.140]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:53.140]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:53.140]                     .init = FALSE)
[18:03:53.140]                 }
[18:03:53.140]             }
[18:03:53.140]         }
[18:03:53.140]     })
[18:03:53.140]     if (TRUE) {
[18:03:53.140]         base::sink(type = "output", split = FALSE)
[18:03:53.140]         if (TRUE) {
[18:03:53.140]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:53.140]         }
[18:03:53.140]         else {
[18:03:53.140]             ...future.result["stdout"] <- base::list(NULL)
[18:03:53.140]         }
[18:03:53.140]         base::close(...future.stdout)
[18:03:53.140]         ...future.stdout <- NULL
[18:03:53.140]     }
[18:03:53.140]     ...future.result$conditions <- ...future.conditions
[18:03:53.140]     ...future.result$finished <- base::Sys.time()
[18:03:53.140]     ...future.result
[18:03:53.140] }
[18:03:53.145] requestCore(): workers = 2
[18:03:53.149] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:03:53.151] plan(): Setting new future strategy stack:
[18:03:53.151] List of future strategies:
[18:03:53.151] 1. sequential:
[18:03:53.151]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:53.151]    - tweaked: FALSE
[18:03:53.151]    - call: NULL
[18:03:53.154] plan(): nbrOfWorkers() = 1
[18:03:53.158] plan(): Setting new future strategy stack:
[18:03:53.159] List of future strategies:
[18:03:53.159] 1. multicore:
[18:03:53.159]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:53.159]    - tweaked: FALSE
[18:03:53.159]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.162] result() for MulticoreFuture ...
[18:03:53.168] plan(): nbrOfWorkers() = 2
[18:03:53.170] result() for MulticoreFuture ...
[18:03:53.170] result() for MulticoreFuture ... done
[18:03:53.170] result() for MulticoreFuture ... done
[18:03:53.171] result() for MulticoreFuture ...
[18:03:53.171] result() for MulticoreFuture ... done
[18:03:53.171] getGlobalsAndPackages() ...
[18:03:53.172] Searching for globals...
[18:03:53.173] 
[18:03:53.173] Searching for globals ... DONE
[18:03:53.173] - globals: [0] <none>
[18:03:53.173] getGlobalsAndPackages() ... DONE
[18:03:53.174] run() for ‘Future’ ...
[18:03:53.174] - state: ‘created’
[18:03:53.175] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:53.182] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.182] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:53.182]   - Field: ‘label’
[18:03:53.183]   - Field: ‘local’
[18:03:53.183]   - Field: ‘owner’
[18:03:53.183]   - Field: ‘envir’
[18:03:53.183]   - Field: ‘workers’
[18:03:53.184]   - Field: ‘packages’
[18:03:53.184]   - Field: ‘gc’
[18:03:53.184]   - Field: ‘job’
[18:03:53.184]   - Field: ‘conditions’
[18:03:53.184]   - Field: ‘expr’
[18:03:53.185]   - Field: ‘uuid’
[18:03:53.185]   - Field: ‘seed’
[18:03:53.185]   - Field: ‘version’
[18:03:53.185]   - Field: ‘result’
[18:03:53.186]   - Field: ‘asynchronous’
[18:03:53.186]   - Field: ‘calls’
[18:03:53.186]   - Field: ‘globals’
[18:03:53.186]   - Field: ‘stdout’
[18:03:53.187]   - Field: ‘earlySignal’
[18:03:53.187]   - Field: ‘lazy’
[18:03:53.187]   - Field: ‘state’
[18:03:53.187] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:53.188] - Launch lazy future ...
[18:03:53.188] Packages needed by the future expression (n = 0): <none>
[18:03:53.189] Packages needed by future strategies (n = 0): <none>
[18:03:53.190] {
[18:03:53.190]     {
[18:03:53.190]         {
[18:03:53.190]             ...future.startTime <- base::Sys.time()
[18:03:53.190]             {
[18:03:53.190]                 {
[18:03:53.190]                   {
[18:03:53.190]                     {
[18:03:53.190]                       base::local({
[18:03:53.190]                         has_future <- base::requireNamespace("future", 
[18:03:53.190]                           quietly = TRUE)
[18:03:53.190]                         if (has_future) {
[18:03:53.190]                           ns <- base::getNamespace("future")
[18:03:53.190]                           version <- ns[[".package"]][["version"]]
[18:03:53.190]                           if (is.null(version)) 
[18:03:53.190]                             version <- utils::packageVersion("future")
[18:03:53.190]                         }
[18:03:53.190]                         else {
[18:03:53.190]                           version <- NULL
[18:03:53.190]                         }
[18:03:53.190]                         if (!has_future || version < "1.8.0") {
[18:03:53.190]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:53.190]                             "", base::R.version$version.string), 
[18:03:53.190]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:53.190]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:53.190]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:53.190]                               "release", "version")], collapse = " "), 
[18:03:53.190]                             hostname = base::Sys.info()[["nodename"]])
[18:03:53.190]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:53.190]                             info)
[18:03:53.190]                           info <- base::paste(info, collapse = "; ")
[18:03:53.190]                           if (!has_future) {
[18:03:53.190]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:53.190]                               info)
[18:03:53.190]                           }
[18:03:53.190]                           else {
[18:03:53.190]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:53.190]                               info, version)
[18:03:53.190]                           }
[18:03:53.190]                           base::stop(msg)
[18:03:53.190]                         }
[18:03:53.190]                       })
[18:03:53.190]                     }
[18:03:53.190]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:53.190]                     base::options(mc.cores = 1L)
[18:03:53.190]                   }
[18:03:53.190]                   ...future.strategy.old <- future::plan("list")
[18:03:53.190]                   options(future.plan = NULL)
[18:03:53.190]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.190]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:53.190]                 }
[18:03:53.190]                 ...future.workdir <- getwd()
[18:03:53.190]             }
[18:03:53.190]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:53.190]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:53.190]         }
[18:03:53.190]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:53.190]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:53.190]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:53.190]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:53.190]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:53.190]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:53.190]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:53.190]             base::names(...future.oldOptions))
[18:03:53.190]     }
[18:03:53.190]     if (FALSE) {
[18:03:53.190]     }
[18:03:53.190]     else {
[18:03:53.190]         if (TRUE) {
[18:03:53.190]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:53.190]                 open = "w")
[18:03:53.190]         }
[18:03:53.190]         else {
[18:03:53.190]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:53.190]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:53.190]         }
[18:03:53.190]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:53.190]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:53.190]             base::sink(type = "output", split = FALSE)
[18:03:53.190]             base::close(...future.stdout)
[18:03:53.190]         }, add = TRUE)
[18:03:53.190]     }
[18:03:53.190]     ...future.frame <- base::sys.nframe()
[18:03:53.190]     ...future.conditions <- base::list()
[18:03:53.190]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:53.190]     if (FALSE) {
[18:03:53.190]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:53.190]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:53.190]     }
[18:03:53.190]     ...future.result <- base::tryCatch({
[18:03:53.190]         base::withCallingHandlers({
[18:03:53.190]             ...future.value <- base::withVisible(base::local({
[18:03:53.190]                 withCallingHandlers({
[18:03:53.190]                   42
[18:03:53.190]                 }, immediateCondition = function(cond) {
[18:03:53.190]                   save_rds <- function (object, pathname, ...) 
[18:03:53.190]                   {
[18:03:53.190]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:53.190]                     if (file_test("-f", pathname_tmp)) {
[18:03:53.190]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.190]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:53.190]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.190]                         fi_tmp[["mtime"]])
[18:03:53.190]                     }
[18:03:53.190]                     tryCatch({
[18:03:53.190]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:53.190]                     }, error = function(ex) {
[18:03:53.190]                       msg <- conditionMessage(ex)
[18:03:53.190]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.190]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:53.190]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.190]                         fi_tmp[["mtime"]], msg)
[18:03:53.190]                       ex$message <- msg
[18:03:53.190]                       stop(ex)
[18:03:53.190]                     })
[18:03:53.190]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:53.190]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:53.190]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:53.190]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.190]                       fi <- file.info(pathname)
[18:03:53.190]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:53.190]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.190]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:53.190]                         fi[["size"]], fi[["mtime"]])
[18:03:53.190]                       stop(msg)
[18:03:53.190]                     }
[18:03:53.190]                     invisible(pathname)
[18:03:53.190]                   }
[18:03:53.190]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:53.190]                     rootPath = tempdir()) 
[18:03:53.190]                   {
[18:03:53.190]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:53.190]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:53.190]                       tmpdir = path, fileext = ".rds")
[18:03:53.190]                     save_rds(obj, file)
[18:03:53.190]                   }
[18:03:53.190]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3RkdJZ/.future/immediateConditions")
[18:03:53.190]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.190]                   {
[18:03:53.190]                     inherits <- base::inherits
[18:03:53.190]                     invokeRestart <- base::invokeRestart
[18:03:53.190]                     is.null <- base::is.null
[18:03:53.190]                     muffled <- FALSE
[18:03:53.190]                     if (inherits(cond, "message")) {
[18:03:53.190]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:53.190]                       if (muffled) 
[18:03:53.190]                         invokeRestart("muffleMessage")
[18:03:53.190]                     }
[18:03:53.190]                     else if (inherits(cond, "warning")) {
[18:03:53.190]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:53.190]                       if (muffled) 
[18:03:53.190]                         invokeRestart("muffleWarning")
[18:03:53.190]                     }
[18:03:53.190]                     else if (inherits(cond, "condition")) {
[18:03:53.190]                       if (!is.null(pattern)) {
[18:03:53.190]                         computeRestarts <- base::computeRestarts
[18:03:53.190]                         grepl <- base::grepl
[18:03:53.190]                         restarts <- computeRestarts(cond)
[18:03:53.190]                         for (restart in restarts) {
[18:03:53.190]                           name <- restart$name
[18:03:53.190]                           if (is.null(name)) 
[18:03:53.190]                             next
[18:03:53.190]                           if (!grepl(pattern, name)) 
[18:03:53.190]                             next
[18:03:53.190]                           invokeRestart(restart)
[18:03:53.190]                           muffled <- TRUE
[18:03:53.190]                           break
[18:03:53.190]                         }
[18:03:53.190]                       }
[18:03:53.190]                     }
[18:03:53.190]                     invisible(muffled)
[18:03:53.190]                   }
[18:03:53.190]                   muffleCondition(cond)
[18:03:53.190]                 })
[18:03:53.190]             }))
[18:03:53.190]             future::FutureResult(value = ...future.value$value, 
[18:03:53.190]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.190]                   ...future.rng), globalenv = if (FALSE) 
[18:03:53.190]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:53.190]                     ...future.globalenv.names))
[18:03:53.190]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:53.190]         }, condition = base::local({
[18:03:53.190]             c <- base::c
[18:03:53.190]             inherits <- base::inherits
[18:03:53.190]             invokeRestart <- base::invokeRestart
[18:03:53.190]             length <- base::length
[18:03:53.190]             list <- base::list
[18:03:53.190]             seq.int <- base::seq.int
[18:03:53.190]             signalCondition <- base::signalCondition
[18:03:53.190]             sys.calls <- base::sys.calls
[18:03:53.190]             `[[` <- base::`[[`
[18:03:53.190]             `+` <- base::`+`
[18:03:53.190]             `<<-` <- base::`<<-`
[18:03:53.190]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:53.190]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:53.190]                   3L)]
[18:03:53.190]             }
[18:03:53.190]             function(cond) {
[18:03:53.190]                 is_error <- inherits(cond, "error")
[18:03:53.190]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:53.190]                   NULL)
[18:03:53.190]                 if (is_error) {
[18:03:53.190]                   sessionInformation <- function() {
[18:03:53.190]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:53.190]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:53.190]                       search = base::search(), system = base::Sys.info())
[18:03:53.190]                   }
[18:03:53.190]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.190]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:53.190]                     cond$call), session = sessionInformation(), 
[18:03:53.190]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:53.190]                   signalCondition(cond)
[18:03:53.190]                 }
[18:03:53.190]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:53.190]                 "immediateCondition"))) {
[18:03:53.190]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:53.190]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.190]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:53.190]                   if (TRUE && !signal) {
[18:03:53.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.190]                     {
[18:03:53.190]                       inherits <- base::inherits
[18:03:53.190]                       invokeRestart <- base::invokeRestart
[18:03:53.190]                       is.null <- base::is.null
[18:03:53.190]                       muffled <- FALSE
[18:03:53.190]                       if (inherits(cond, "message")) {
[18:03:53.190]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.190]                         if (muffled) 
[18:03:53.190]                           invokeRestart("muffleMessage")
[18:03:53.190]                       }
[18:03:53.190]                       else if (inherits(cond, "warning")) {
[18:03:53.190]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.190]                         if (muffled) 
[18:03:53.190]                           invokeRestart("muffleWarning")
[18:03:53.190]                       }
[18:03:53.190]                       else if (inherits(cond, "condition")) {
[18:03:53.190]                         if (!is.null(pattern)) {
[18:03:53.190]                           computeRestarts <- base::computeRestarts
[18:03:53.190]                           grepl <- base::grepl
[18:03:53.190]                           restarts <- computeRestarts(cond)
[18:03:53.190]                           for (restart in restarts) {
[18:03:53.190]                             name <- restart$name
[18:03:53.190]                             if (is.null(name)) 
[18:03:53.190]                               next
[18:03:53.190]                             if (!grepl(pattern, name)) 
[18:03:53.190]                               next
[18:03:53.190]                             invokeRestart(restart)
[18:03:53.190]                             muffled <- TRUE
[18:03:53.190]                             break
[18:03:53.190]                           }
[18:03:53.190]                         }
[18:03:53.190]                       }
[18:03:53.190]                       invisible(muffled)
[18:03:53.190]                     }
[18:03:53.190]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.190]                   }
[18:03:53.190]                 }
[18:03:53.190]                 else {
[18:03:53.190]                   if (TRUE) {
[18:03:53.190]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.190]                     {
[18:03:53.190]                       inherits <- base::inherits
[18:03:53.190]                       invokeRestart <- base::invokeRestart
[18:03:53.190]                       is.null <- base::is.null
[18:03:53.190]                       muffled <- FALSE
[18:03:53.190]                       if (inherits(cond, "message")) {
[18:03:53.190]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.190]                         if (muffled) 
[18:03:53.190]                           invokeRestart("muffleMessage")
[18:03:53.190]                       }
[18:03:53.190]                       else if (inherits(cond, "warning")) {
[18:03:53.190]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.190]                         if (muffled) 
[18:03:53.190]                           invokeRestart("muffleWarning")
[18:03:53.190]                       }
[18:03:53.190]                       else if (inherits(cond, "condition")) {
[18:03:53.190]                         if (!is.null(pattern)) {
[18:03:53.190]                           computeRestarts <- base::computeRestarts
[18:03:53.190]                           grepl <- base::grepl
[18:03:53.190]                           restarts <- computeRestarts(cond)
[18:03:53.190]                           for (restart in restarts) {
[18:03:53.190]                             name <- restart$name
[18:03:53.190]                             if (is.null(name)) 
[18:03:53.190]                               next
[18:03:53.190]                             if (!grepl(pattern, name)) 
[18:03:53.190]                               next
[18:03:53.190]                             invokeRestart(restart)
[18:03:53.190]                             muffled <- TRUE
[18:03:53.190]                             break
[18:03:53.190]                           }
[18:03:53.190]                         }
[18:03:53.190]                       }
[18:03:53.190]                       invisible(muffled)
[18:03:53.190]                     }
[18:03:53.190]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.190]                   }
[18:03:53.190]                 }
[18:03:53.190]             }
[18:03:53.190]         }))
[18:03:53.190]     }, error = function(ex) {
[18:03:53.190]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:53.190]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.190]                 ...future.rng), started = ...future.startTime, 
[18:03:53.190]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:53.190]             version = "1.8"), class = "FutureResult")
[18:03:53.190]     }, finally = {
[18:03:53.190]         if (!identical(...future.workdir, getwd())) 
[18:03:53.190]             setwd(...future.workdir)
[18:03:53.190]         {
[18:03:53.190]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:53.190]                 ...future.oldOptions$nwarnings <- NULL
[18:03:53.190]             }
[18:03:53.190]             base::options(...future.oldOptions)
[18:03:53.190]             if (.Platform$OS.type == "windows") {
[18:03:53.190]                 old_names <- names(...future.oldEnvVars)
[18:03:53.190]                 envs <- base::Sys.getenv()
[18:03:53.190]                 names <- names(envs)
[18:03:53.190]                 common <- intersect(names, old_names)
[18:03:53.190]                 added <- setdiff(names, old_names)
[18:03:53.190]                 removed <- setdiff(old_names, names)
[18:03:53.190]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:53.190]                   envs[common]]
[18:03:53.190]                 NAMES <- toupper(changed)
[18:03:53.190]                 args <- list()
[18:03:53.190]                 for (kk in seq_along(NAMES)) {
[18:03:53.190]                   name <- changed[[kk]]
[18:03:53.190]                   NAME <- NAMES[[kk]]
[18:03:53.190]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.190]                     next
[18:03:53.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.190]                 }
[18:03:53.190]                 NAMES <- toupper(added)
[18:03:53.190]                 for (kk in seq_along(NAMES)) {
[18:03:53.190]                   name <- added[[kk]]
[18:03:53.190]                   NAME <- NAMES[[kk]]
[18:03:53.190]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.190]                     next
[18:03:53.190]                   args[[name]] <- ""
[18:03:53.190]                 }
[18:03:53.190]                 NAMES <- toupper(removed)
[18:03:53.190]                 for (kk in seq_along(NAMES)) {
[18:03:53.190]                   name <- removed[[kk]]
[18:03:53.190]                   NAME <- NAMES[[kk]]
[18:03:53.190]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.190]                     next
[18:03:53.190]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.190]                 }
[18:03:53.190]                 if (length(args) > 0) 
[18:03:53.190]                   base::do.call(base::Sys.setenv, args = args)
[18:03:53.190]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:53.190]             }
[18:03:53.190]             else {
[18:03:53.190]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:53.190]             }
[18:03:53.190]             {
[18:03:53.190]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:53.190]                   0L) {
[18:03:53.190]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:53.190]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:53.190]                   base::options(opts)
[18:03:53.190]                 }
[18:03:53.190]                 {
[18:03:53.190]                   {
[18:03:53.190]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:53.190]                     NULL
[18:03:53.190]                   }
[18:03:53.190]                   options(future.plan = NULL)
[18:03:53.190]                   if (is.na(NA_character_)) 
[18:03:53.190]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.190]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:53.190]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:53.190]                     .init = FALSE)
[18:03:53.190]                 }
[18:03:53.190]             }
[18:03:53.190]         }
[18:03:53.190]     })
[18:03:53.190]     if (TRUE) {
[18:03:53.190]         base::sink(type = "output", split = FALSE)
[18:03:53.190]         if (TRUE) {
[18:03:53.190]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:53.190]         }
[18:03:53.190]         else {
[18:03:53.190]             ...future.result["stdout"] <- base::list(NULL)
[18:03:53.190]         }
[18:03:53.190]         base::close(...future.stdout)
[18:03:53.190]         ...future.stdout <- NULL
[18:03:53.190]     }
[18:03:53.190]     ...future.result$conditions <- ...future.conditions
[18:03:53.190]     ...future.result$finished <- base::Sys.time()
[18:03:53.190]     ...future.result
[18:03:53.190] }
[18:03:53.194] requestCore(): workers = 2
[18:03:53.198] MulticoreFuture started
[18:03:53.198] - Launch lazy future ... done
[18:03:53.199] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[18:03:53.200] plan(): Setting new future strategy stack:
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:03:53.200] List of future strategies:
[18:03:53.200] 1. sequential:
[18:03:53.200]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:53.200]    - tweaked: FALSE
[18:03:53.200]    - call: NULL
[18:03:53.203] plan(): nbrOfWorkers() = 1
[18:03:53.207] plan(): Setting new future strategy stack:
[18:03:53.207] List of future strategies:
[18:03:53.207] 1. multicore:
[18:03:53.207]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:53.207]    - tweaked: FALSE
[18:03:53.207]    - call: plan(strategy)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.212] result() for MulticoreFuture ...
[18:03:53.217] plan(): nbrOfWorkers() = 2
[18:03:53.218] result() for MulticoreFuture ...
[18:03:53.219] result() for MulticoreFuture ... done
[18:03:53.219] result() for MulticoreFuture ... done
[18:03:53.219] result() for MulticoreFuture ...
[18:03:53.220] result() for MulticoreFuture ... done
[18:03:53.221] getGlobalsAndPackages() ...
[18:03:53.221] Searching for globals...
[18:03:53.222] - globals found: [1] ‘{’
[18:03:53.223] Searching for globals ... DONE
[18:03:53.223] Resolving globals: FALSE
[18:03:53.224] 
[18:03:53.224] 
[18:03:53.224] getGlobalsAndPackages() ... DONE
[18:03:53.225] run() for ‘Future’ ...
[18:03:53.225] - state: ‘created’
[18:03:53.225] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[18:03:53.233] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.233] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[18:03:53.233]   - Field: ‘label’
[18:03:53.234]   - Field: ‘local’
[18:03:53.234]   - Field: ‘owner’
[18:03:53.234]   - Field: ‘envir’
[18:03:53.234]   - Field: ‘workers’
[18:03:53.235]   - Field: ‘packages’
[18:03:53.235]   - Field: ‘gc’
[18:03:53.235]   - Field: ‘job’
[18:03:53.235]   - Field: ‘conditions’
[18:03:53.236]   - Field: ‘expr’
[18:03:53.236]   - Field: ‘uuid’
[18:03:53.236]   - Field: ‘seed’
[18:03:53.236]   - Field: ‘version’
[18:03:53.237]   - Field: ‘result’
[18:03:53.237]   - Field: ‘asynchronous’
[18:03:53.237]   - Field: ‘calls’
[18:03:53.237]   - Field: ‘globals’
[18:03:53.237]   - Field: ‘stdout’
[18:03:53.238]   - Field: ‘earlySignal’
[18:03:53.238]   - Field: ‘lazy’
[18:03:53.238]   - Field: ‘state’
[18:03:53.238] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[18:03:53.239] - Launch lazy future ...
[18:03:53.239] Packages needed by the future expression (n = 0): <none>
[18:03:53.240] Packages needed by future strategies (n = 0): <none>
[18:03:53.241] {
[18:03:53.241]     {
[18:03:53.241]         {
[18:03:53.241]             ...future.startTime <- base::Sys.time()
[18:03:53.241]             {
[18:03:53.241]                 {
[18:03:53.241]                   {
[18:03:53.241]                     {
[18:03:53.241]                       base::local({
[18:03:53.241]                         has_future <- base::requireNamespace("future", 
[18:03:53.241]                           quietly = TRUE)
[18:03:53.241]                         if (has_future) {
[18:03:53.241]                           ns <- base::getNamespace("future")
[18:03:53.241]                           version <- ns[[".package"]][["version"]]
[18:03:53.241]                           if (is.null(version)) 
[18:03:53.241]                             version <- utils::packageVersion("future")
[18:03:53.241]                         }
[18:03:53.241]                         else {
[18:03:53.241]                           version <- NULL
[18:03:53.241]                         }
[18:03:53.241]                         if (!has_future || version < "1.8.0") {
[18:03:53.241]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:53.241]                             "", base::R.version$version.string), 
[18:03:53.241]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:53.241]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:53.241]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:53.241]                               "release", "version")], collapse = " "), 
[18:03:53.241]                             hostname = base::Sys.info()[["nodename"]])
[18:03:53.241]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:53.241]                             info)
[18:03:53.241]                           info <- base::paste(info, collapse = "; ")
[18:03:53.241]                           if (!has_future) {
[18:03:53.241]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:53.241]                               info)
[18:03:53.241]                           }
[18:03:53.241]                           else {
[18:03:53.241]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:53.241]                               info, version)
[18:03:53.241]                           }
[18:03:53.241]                           base::stop(msg)
[18:03:53.241]                         }
[18:03:53.241]                       })
[18:03:53.241]                     }
[18:03:53.241]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:53.241]                     base::options(mc.cores = 1L)
[18:03:53.241]                   }
[18:03:53.241]                   ...future.strategy.old <- future::plan("list")
[18:03:53.241]                   options(future.plan = NULL)
[18:03:53.241]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.241]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:53.241]                 }
[18:03:53.241]                 ...future.workdir <- getwd()
[18:03:53.241]             }
[18:03:53.241]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:53.241]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:53.241]         }
[18:03:53.241]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:53.241]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:53.241]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:53.241]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:53.241]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:53.241]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:53.241]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:53.241]             base::names(...future.oldOptions))
[18:03:53.241]     }
[18:03:53.241]     if (FALSE) {
[18:03:53.241]     }
[18:03:53.241]     else {
[18:03:53.241]         if (TRUE) {
[18:03:53.241]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:53.241]                 open = "w")
[18:03:53.241]         }
[18:03:53.241]         else {
[18:03:53.241]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:53.241]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:53.241]         }
[18:03:53.241]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:53.241]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:53.241]             base::sink(type = "output", split = FALSE)
[18:03:53.241]             base::close(...future.stdout)
[18:03:53.241]         }, add = TRUE)
[18:03:53.241]     }
[18:03:53.241]     ...future.frame <- base::sys.nframe()
[18:03:53.241]     ...future.conditions <- base::list()
[18:03:53.241]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:53.241]     if (FALSE) {
[18:03:53.241]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:53.241]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:53.241]     }
[18:03:53.241]     ...future.result <- base::tryCatch({
[18:03:53.241]         base::withCallingHandlers({
[18:03:53.241]             ...future.value <- base::withVisible(base::local({
[18:03:53.241]                 withCallingHandlers({
[18:03:53.241]                   {
[18:03:53.241]                     42
[18:03:53.241]                   }
[18:03:53.241]                 }, immediateCondition = function(cond) {
[18:03:53.241]                   save_rds <- function (object, pathname, ...) 
[18:03:53.241]                   {
[18:03:53.241]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[18:03:53.241]                     if (file_test("-f", pathname_tmp)) {
[18:03:53.241]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.241]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[18:03:53.241]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.241]                         fi_tmp[["mtime"]])
[18:03:53.241]                     }
[18:03:53.241]                     tryCatch({
[18:03:53.241]                       saveRDS(object, file = pathname_tmp, ...)
[18:03:53.241]                     }, error = function(ex) {
[18:03:53.241]                       msg <- conditionMessage(ex)
[18:03:53.241]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.241]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[18:03:53.241]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.241]                         fi_tmp[["mtime"]], msg)
[18:03:53.241]                       ex$message <- msg
[18:03:53.241]                       stop(ex)
[18:03:53.241]                     })
[18:03:53.241]                     stopifnot(file_test("-f", pathname_tmp))
[18:03:53.241]                     res <- file.rename(from = pathname_tmp, to = pathname)
[18:03:53.241]                     if (!res || file_test("-f", pathname_tmp)) {
[18:03:53.241]                       fi_tmp <- file.info(pathname_tmp)
[18:03:53.241]                       fi <- file.info(pathname)
[18:03:53.241]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[18:03:53.241]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[18:03:53.241]                         fi_tmp[["mtime"]], sQuote(pathname), 
[18:03:53.241]                         fi[["size"]], fi[["mtime"]])
[18:03:53.241]                       stop(msg)
[18:03:53.241]                     }
[18:03:53.241]                     invisible(pathname)
[18:03:53.241]                   }
[18:03:53.241]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[18:03:53.241]                     rootPath = tempdir()) 
[18:03:53.241]                   {
[18:03:53.241]                     obj <- list(time = Sys.time(), condition = cond)
[18:03:53.241]                     file <- tempfile(pattern = class(cond)[1], 
[18:03:53.241]                       tmpdir = path, fileext = ".rds")
[18:03:53.241]                     save_rds(obj, file)
[18:03:53.241]                   }
[18:03:53.241]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3RkdJZ/.future/immediateConditions")
[18:03:53.241]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.241]                   {
[18:03:53.241]                     inherits <- base::inherits
[18:03:53.241]                     invokeRestart <- base::invokeRestart
[18:03:53.241]                     is.null <- base::is.null
[18:03:53.241]                     muffled <- FALSE
[18:03:53.241]                     if (inherits(cond, "message")) {
[18:03:53.241]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:53.241]                       if (muffled) 
[18:03:53.241]                         invokeRestart("muffleMessage")
[18:03:53.241]                     }
[18:03:53.241]                     else if (inherits(cond, "warning")) {
[18:03:53.241]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:53.241]                       if (muffled) 
[18:03:53.241]                         invokeRestart("muffleWarning")
[18:03:53.241]                     }
[18:03:53.241]                     else if (inherits(cond, "condition")) {
[18:03:53.241]                       if (!is.null(pattern)) {
[18:03:53.241]                         computeRestarts <- base::computeRestarts
[18:03:53.241]                         grepl <- base::grepl
[18:03:53.241]                         restarts <- computeRestarts(cond)
[18:03:53.241]                         for (restart in restarts) {
[18:03:53.241]                           name <- restart$name
[18:03:53.241]                           if (is.null(name)) 
[18:03:53.241]                             next
[18:03:53.241]                           if (!grepl(pattern, name)) 
[18:03:53.241]                             next
[18:03:53.241]                           invokeRestart(restart)
[18:03:53.241]                           muffled <- TRUE
[18:03:53.241]                           break
[18:03:53.241]                         }
[18:03:53.241]                       }
[18:03:53.241]                     }
[18:03:53.241]                     invisible(muffled)
[18:03:53.241]                   }
[18:03:53.241]                   muffleCondition(cond)
[18:03:53.241]                 })
[18:03:53.241]             }))
[18:03:53.241]             future::FutureResult(value = ...future.value$value, 
[18:03:53.241]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.241]                   ...future.rng), globalenv = if (FALSE) 
[18:03:53.241]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:53.241]                     ...future.globalenv.names))
[18:03:53.241]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:53.241]         }, condition = base::local({
[18:03:53.241]             c <- base::c
[18:03:53.241]             inherits <- base::inherits
[18:03:53.241]             invokeRestart <- base::invokeRestart
[18:03:53.241]             length <- base::length
[18:03:53.241]             list <- base::list
[18:03:53.241]             seq.int <- base::seq.int
[18:03:53.241]             signalCondition <- base::signalCondition
[18:03:53.241]             sys.calls <- base::sys.calls
[18:03:53.241]             `[[` <- base::`[[`
[18:03:53.241]             `+` <- base::`+`
[18:03:53.241]             `<<-` <- base::`<<-`
[18:03:53.241]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:53.241]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:53.241]                   3L)]
[18:03:53.241]             }
[18:03:53.241]             function(cond) {
[18:03:53.241]                 is_error <- inherits(cond, "error")
[18:03:53.241]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:53.241]                   NULL)
[18:03:53.241]                 if (is_error) {
[18:03:53.241]                   sessionInformation <- function() {
[18:03:53.241]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:53.241]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:53.241]                       search = base::search(), system = base::Sys.info())
[18:03:53.241]                   }
[18:03:53.241]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.241]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:53.241]                     cond$call), session = sessionInformation(), 
[18:03:53.241]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:53.241]                   signalCondition(cond)
[18:03:53.241]                 }
[18:03:53.241]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:53.241]                 "immediateCondition"))) {
[18:03:53.241]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:53.241]                   ...future.conditions[[length(...future.conditions) + 
[18:03:53.241]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:53.241]                   if (TRUE && !signal) {
[18:03:53.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.241]                     {
[18:03:53.241]                       inherits <- base::inherits
[18:03:53.241]                       invokeRestart <- base::invokeRestart
[18:03:53.241]                       is.null <- base::is.null
[18:03:53.241]                       muffled <- FALSE
[18:03:53.241]                       if (inherits(cond, "message")) {
[18:03:53.241]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.241]                         if (muffled) 
[18:03:53.241]                           invokeRestart("muffleMessage")
[18:03:53.241]                       }
[18:03:53.241]                       else if (inherits(cond, "warning")) {
[18:03:53.241]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.241]                         if (muffled) 
[18:03:53.241]                           invokeRestart("muffleWarning")
[18:03:53.241]                       }
[18:03:53.241]                       else if (inherits(cond, "condition")) {
[18:03:53.241]                         if (!is.null(pattern)) {
[18:03:53.241]                           computeRestarts <- base::computeRestarts
[18:03:53.241]                           grepl <- base::grepl
[18:03:53.241]                           restarts <- computeRestarts(cond)
[18:03:53.241]                           for (restart in restarts) {
[18:03:53.241]                             name <- restart$name
[18:03:53.241]                             if (is.null(name)) 
[18:03:53.241]                               next
[18:03:53.241]                             if (!grepl(pattern, name)) 
[18:03:53.241]                               next
[18:03:53.241]                             invokeRestart(restart)
[18:03:53.241]                             muffled <- TRUE
[18:03:53.241]                             break
[18:03:53.241]                           }
[18:03:53.241]                         }
[18:03:53.241]                       }
[18:03:53.241]                       invisible(muffled)
[18:03:53.241]                     }
[18:03:53.241]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.241]                   }
[18:03:53.241]                 }
[18:03:53.241]                 else {
[18:03:53.241]                   if (TRUE) {
[18:03:53.241]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:53.241]                     {
[18:03:53.241]                       inherits <- base::inherits
[18:03:53.241]                       invokeRestart <- base::invokeRestart
[18:03:53.241]                       is.null <- base::is.null
[18:03:53.241]                       muffled <- FALSE
[18:03:53.241]                       if (inherits(cond, "message")) {
[18:03:53.241]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:53.241]                         if (muffled) 
[18:03:53.241]                           invokeRestart("muffleMessage")
[18:03:53.241]                       }
[18:03:53.241]                       else if (inherits(cond, "warning")) {
[18:03:53.241]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:53.241]                         if (muffled) 
[18:03:53.241]                           invokeRestart("muffleWarning")
[18:03:53.241]                       }
[18:03:53.241]                       else if (inherits(cond, "condition")) {
[18:03:53.241]                         if (!is.null(pattern)) {
[18:03:53.241]                           computeRestarts <- base::computeRestarts
[18:03:53.241]                           grepl <- base::grepl
[18:03:53.241]                           restarts <- computeRestarts(cond)
[18:03:53.241]                           for (restart in restarts) {
[18:03:53.241]                             name <- restart$name
[18:03:53.241]                             if (is.null(name)) 
[18:03:53.241]                               next
[18:03:53.241]                             if (!grepl(pattern, name)) 
[18:03:53.241]                               next
[18:03:53.241]                             invokeRestart(restart)
[18:03:53.241]                             muffled <- TRUE
[18:03:53.241]                             break
[18:03:53.241]                           }
[18:03:53.241]                         }
[18:03:53.241]                       }
[18:03:53.241]                       invisible(muffled)
[18:03:53.241]                     }
[18:03:53.241]                     muffleCondition(cond, pattern = "^muffle")
[18:03:53.241]                   }
[18:03:53.241]                 }
[18:03:53.241]             }
[18:03:53.241]         }))
[18:03:53.241]     }, error = function(ex) {
[18:03:53.241]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:53.241]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:53.241]                 ...future.rng), started = ...future.startTime, 
[18:03:53.241]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:53.241]             version = "1.8"), class = "FutureResult")
[18:03:53.241]     }, finally = {
[18:03:53.241]         if (!identical(...future.workdir, getwd())) 
[18:03:53.241]             setwd(...future.workdir)
[18:03:53.241]         {
[18:03:53.241]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:53.241]                 ...future.oldOptions$nwarnings <- NULL
[18:03:53.241]             }
[18:03:53.241]             base::options(...future.oldOptions)
[18:03:53.241]             if (.Platform$OS.type == "windows") {
[18:03:53.241]                 old_names <- names(...future.oldEnvVars)
[18:03:53.241]                 envs <- base::Sys.getenv()
[18:03:53.241]                 names <- names(envs)
[18:03:53.241]                 common <- intersect(names, old_names)
[18:03:53.241]                 added <- setdiff(names, old_names)
[18:03:53.241]                 removed <- setdiff(old_names, names)
[18:03:53.241]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:53.241]                   envs[common]]
[18:03:53.241]                 NAMES <- toupper(changed)
[18:03:53.241]                 args <- list()
[18:03:53.241]                 for (kk in seq_along(NAMES)) {
[18:03:53.241]                   name <- changed[[kk]]
[18:03:53.241]                   NAME <- NAMES[[kk]]
[18:03:53.241]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.241]                     next
[18:03:53.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.241]                 }
[18:03:53.241]                 NAMES <- toupper(added)
[18:03:53.241]                 for (kk in seq_along(NAMES)) {
[18:03:53.241]                   name <- added[[kk]]
[18:03:53.241]                   NAME <- NAMES[[kk]]
[18:03:53.241]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.241]                     next
[18:03:53.241]                   args[[name]] <- ""
[18:03:53.241]                 }
[18:03:53.241]                 NAMES <- toupper(removed)
[18:03:53.241]                 for (kk in seq_along(NAMES)) {
[18:03:53.241]                   name <- removed[[kk]]
[18:03:53.241]                   NAME <- NAMES[[kk]]
[18:03:53.241]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:53.241]                     next
[18:03:53.241]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:53.241]                 }
[18:03:53.241]                 if (length(args) > 0) 
[18:03:53.241]                   base::do.call(base::Sys.setenv, args = args)
[18:03:53.241]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:53.241]             }
[18:03:53.241]             else {
[18:03:53.241]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:53.241]             }
[18:03:53.241]             {
[18:03:53.241]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:53.241]                   0L) {
[18:03:53.241]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:53.241]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:53.241]                   base::options(opts)
[18:03:53.241]                 }
[18:03:53.241]                 {
[18:03:53.241]                   {
[18:03:53.241]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:53.241]                     NULL
[18:03:53.241]                   }
[18:03:53.241]                   options(future.plan = NULL)
[18:03:53.241]                   if (is.na(NA_character_)) 
[18:03:53.241]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:53.241]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:53.241]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:53.241]                     .init = FALSE)
[18:03:53.241]                 }
[18:03:53.241]             }
[18:03:53.241]         }
[18:03:53.241]     })
[18:03:53.241]     if (TRUE) {
[18:03:53.241]         base::sink(type = "output", split = FALSE)
[18:03:53.241]         if (TRUE) {
[18:03:53.241]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:53.241]         }
[18:03:53.241]         else {
[18:03:53.241]             ...future.result["stdout"] <- base::list(NULL)
[18:03:53.241]         }
[18:03:53.241]         base::close(...future.stdout)
[18:03:53.241]         ...future.stdout <- NULL
[18:03:53.241]     }
[18:03:53.241]     ...future.result$conditions <- ...future.conditions
[18:03:53.241]     ...future.result$finished <- base::Sys.time()
[18:03:53.241]     ...future.result
[18:03:53.241] }
[18:03:53.245] requestCore(): workers = 2
[18:03:53.249] MulticoreFuture started
[18:03:53.250] - Launch lazy future ... done
[18:03:53.250] run() for ‘MulticoreFuture’ ... done
[18:03:53.251] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[18:03:53.251] List of future strategies:
[18:03:53.251] 1. sequential:
[18:03:53.251]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:53.251]    - tweaked: FALSE
[18:03:53.251]    - call: NULL
[18:03:53.253] plan(): nbrOfWorkers() = 1
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:53.264] result() for MulticoreFuture ...
[18:03:53.258] plan(): Setting new future strategy stack:
[18:03:53.268] List of future strategies:
[18:03:53.268] 1. multicore:
[18:03:53.268]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[18:03:53.268]    - tweaked: FALSE
[18:03:53.268]    - call: plan(strategy)
[18:03:53.280] plan(): nbrOfWorkers() = 2
[18:03:53.284] result() for MulticoreFuture ...
[18:03:53.285] result() for MulticoreFuture ... done
[18:03:53.286] result() for MulticoreFuture ... done
[18:03:53.292] result() for MulticoreFuture ...
[18:03:53.292] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[18:03:53.294] plan(): Setting new future strategy stack:
[18:03:53.294] List of future strategies:
[18:03:53.294] 1. multisession:
[18:03:53.294]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:03:53.294]    - tweaked: FALSE
[18:03:53.294]    - call: plan(strategy)
[18:03:53.295] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[18:03:53.296] multisession:
[18:03:53.296] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[18:03:53.296] - tweaked: FALSE
[18:03:53.296] - call: plan(strategy)
[18:03:53.307] getGlobalsAndPackages() ...
[18:03:53.308] Not searching for globals
[18:03:53.308] - globals: [0] <none>
[18:03:53.308] getGlobalsAndPackages() ... DONE
[18:03:53.309] [local output] makeClusterPSOCK() ...
[18:03:53.379] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[18:03:53.381] [local output] Base port: 11432
[18:03:53.382] [local output] Getting setup options for 2 cluster nodes ...
[18:03:53.382] [local output]  - Node 1 of 2 ...
[18:03:53.384] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:53.386] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp3RkdJZ/worker.rank=1.parallelly.parent=320965.4e5c52d4a2dc4.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp3RkdJZ/worker.rank=1.parallelly.parent=320965.4e5c52d4a2dc4.pid")'’
[18:03:53.646] - Possible to infer worker's PID: TRUE
[18:03:53.647] [local output] Rscript port: 11432

[18:03:53.648] [local output]  - Node 2 of 2 ...
[18:03:53.648] [local output] localMachine=TRUE => revtunnel=FALSE

[18:03:53.649] [local output] Rscript port: 11432

[18:03:53.650] [local output] Getting setup options for 2 cluster nodes ... done
[18:03:53.650] [local output]  - Parallel setup requested for some PSOCK nodes
[18:03:53.651] [local output] Setting up PSOCK nodes in parallel
[18:03:53.651] List of 36
[18:03:53.651]  $ worker          : chr "localhost"
[18:03:53.651]   ..- attr(*, "localhost")= logi TRUE
[18:03:53.651]  $ master          : chr "localhost"
[18:03:53.651]  $ port            : int 11432
[18:03:53.651]  $ connectTimeout  : num 120
[18:03:53.651]  $ timeout         : num 2592000
[18:03:53.651]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[18:03:53.651]  $ homogeneous     : logi TRUE
[18:03:53.651]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[18:03:53.651]  $ rscript_envs    : NULL
[18:03:53.651]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:53.651]  $ rscript_startup : NULL
[18:03:53.651]  $ rscript_sh      : chr "sh"
[18:03:53.651]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:53.651]  $ methods         : logi TRUE
[18:03:53.651]  $ socketOptions   : chr "no-delay"
[18:03:53.651]  $ useXDR          : logi FALSE
[18:03:53.651]  $ outfile         : chr "/dev/null"
[18:03:53.651]  $ renice          : int NA
[18:03:53.651]  $ rshcmd          : NULL
[18:03:53.651]  $ user            : chr(0) 
[18:03:53.651]  $ revtunnel       : logi FALSE
[18:03:53.651]  $ rshlogfile      : NULL
[18:03:53.651]  $ rshopts         : chr(0) 
[18:03:53.651]  $ rank            : int 1
[18:03:53.651]  $ manual          : logi FALSE
[18:03:53.651]  $ dryrun          : logi FALSE
[18:03:53.651]  $ quiet           : logi FALSE
[18:03:53.651]  $ setup_strategy  : chr "parallel"
[18:03:53.651]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:53.651]  $ pidfile         : chr "/tmp/Rtmp3RkdJZ/worker.rank=1.parallelly.parent=320965.4e5c52d4a2dc4.pid"
[18:03:53.651]  $ rshcmd_label    : NULL
[18:03:53.651]  $ rsh_call        : NULL
[18:03:53.651]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[18:03:53.651]  $ localMachine    : logi TRUE
[18:03:53.651]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[18:03:53.651]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[18:03:53.651]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[18:03:53.651]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[18:03:53.651]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[18:03:53.651]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[18:03:53.651]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[18:03:53.651]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[18:03:53.651]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[18:03:53.651]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[18:03:53.651]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[18:03:53.651]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[18:03:53.651]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[18:03:53.651]  $ arguments       :List of 28
[18:03:53.651]   ..$ worker          : chr "localhost"
[18:03:53.651]   ..$ master          : NULL
[18:03:53.651]   ..$ port            : int 11432
[18:03:53.651]   ..$ connectTimeout  : num 120
[18:03:53.651]   ..$ timeout         : num 2592000
[18:03:53.651]   ..$ rscript         : NULL
[18:03:53.651]   ..$ homogeneous     : NULL
[18:03:53.651]   ..$ rscript_args    : NULL
[18:03:53.651]   ..$ rscript_envs    : NULL
[18:03:53.651]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[18:03:53.651]   ..$ rscript_startup : NULL
[18:03:53.651]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[18:03:53.651]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[18:03:53.651]   ..$ methods         : logi TRUE
[18:03:53.651]   ..$ socketOptions   : chr "no-delay"
[18:03:53.651]   ..$ useXDR          : logi FALSE
[18:03:53.651]   ..$ outfile         : chr "/dev/null"
[18:03:53.651]   ..$ renice          : int NA
[18:03:53.651]   ..$ rshcmd          : NULL
[18:03:53.651]   ..$ user            : NULL
[18:03:53.651]   ..$ revtunnel       : logi NA
[18:03:53.651]   ..$ rshlogfile      : NULL
[18:03:53.651]   ..$ rshopts         : NULL
[18:03:53.651]   ..$ rank            : int 1
[18:03:53.651]   ..$ manual          : logi FALSE
[18:03:53.651]   ..$ dryrun          : logi FALSE
[18:03:53.651]   ..$ quiet           : logi FALSE
[18:03:53.651]   ..$ setup_strategy  : chr "parallel"
[18:03:53.651]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[18:03:53.688] [local output] System call to launch all workers:
[18:03:53.688] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp3RkdJZ/worker.rank=1.parallelly.parent=320965.4e5c52d4a2dc4.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11432 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[18:03:53.689] [local output] Starting PSOCK main server
[18:03:53.697] [local output] Workers launched
[18:03:53.697] [local output] Waiting for workers to connect back
[18:03:53.697]  - [local output] 0 workers out of 2 ready
[18:03:54.051]  - [local output] 0 workers out of 2 ready
[18:03:54.052]  - [local output] 1 workers out of 2 ready
[18:03:54.060]  - [local output] 1 workers out of 2 ready
[18:03:54.060]  - [local output] 2 workers out of 2 ready
[18:03:54.061] [local output] Launching of workers completed
[18:03:54.061] [local output] Collecting session information from workers
[18:03:54.062] [local output]  - Worker #1 of 2
[18:03:54.064] [local output]  - Worker #2 of 2
[18:03:54.064] [local output] makeClusterPSOCK() ... done
[18:03:54.083] Packages needed by the future expression (n = 0): <none>
[18:03:54.083] Packages needed by future strategies (n = 0): <none>
[18:03:54.084] {
[18:03:54.084]     {
[18:03:54.084]         {
[18:03:54.084]             ...future.startTime <- base::Sys.time()
[18:03:54.084]             {
[18:03:54.084]                 {
[18:03:54.084]                   {
[18:03:54.084]                     {
[18:03:54.084]                       base::local({
[18:03:54.084]                         has_future <- base::requireNamespace("future", 
[18:03:54.084]                           quietly = TRUE)
[18:03:54.084]                         if (has_future) {
[18:03:54.084]                           ns <- base::getNamespace("future")
[18:03:54.084]                           version <- ns[[".package"]][["version"]]
[18:03:54.084]                           if (is.null(version)) 
[18:03:54.084]                             version <- utils::packageVersion("future")
[18:03:54.084]                         }
[18:03:54.084]                         else {
[18:03:54.084]                           version <- NULL
[18:03:54.084]                         }
[18:03:54.084]                         if (!has_future || version < "1.8.0") {
[18:03:54.084]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:54.084]                             "", base::R.version$version.string), 
[18:03:54.084]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:54.084]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:54.084]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:54.084]                               "release", "version")], collapse = " "), 
[18:03:54.084]                             hostname = base::Sys.info()[["nodename"]])
[18:03:54.084]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:54.084]                             info)
[18:03:54.084]                           info <- base::paste(info, collapse = "; ")
[18:03:54.084]                           if (!has_future) {
[18:03:54.084]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:54.084]                               info)
[18:03:54.084]                           }
[18:03:54.084]                           else {
[18:03:54.084]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:54.084]                               info, version)
[18:03:54.084]                           }
[18:03:54.084]                           base::stop(msg)
[18:03:54.084]                         }
[18:03:54.084]                       })
[18:03:54.084]                     }
[18:03:54.084]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:54.084]                     base::options(mc.cores = 1L)
[18:03:54.084]                   }
[18:03:54.084]                   ...future.strategy.old <- future::plan("list")
[18:03:54.084]                   options(future.plan = NULL)
[18:03:54.084]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.084]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:54.084]                 }
[18:03:54.084]                 ...future.workdir <- getwd()
[18:03:54.084]             }
[18:03:54.084]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:54.084]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:54.084]         }
[18:03:54.084]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:54.084]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:54.084]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:54.084]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:54.084]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:54.084]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:54.084]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:54.084]             base::names(...future.oldOptions))
[18:03:54.084]     }
[18:03:54.084]     if (FALSE) {
[18:03:54.084]     }
[18:03:54.084]     else {
[18:03:54.084]         if (TRUE) {
[18:03:54.084]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:54.084]                 open = "w")
[18:03:54.084]         }
[18:03:54.084]         else {
[18:03:54.084]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:54.084]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:54.084]         }
[18:03:54.084]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:54.084]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:54.084]             base::sink(type = "output", split = FALSE)
[18:03:54.084]             base::close(...future.stdout)
[18:03:54.084]         }, add = TRUE)
[18:03:54.084]     }
[18:03:54.084]     ...future.frame <- base::sys.nframe()
[18:03:54.084]     ...future.conditions <- base::list()
[18:03:54.084]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:54.084]     if (FALSE) {
[18:03:54.084]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:54.084]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:54.084]     }
[18:03:54.084]     ...future.result <- base::tryCatch({
[18:03:54.084]         base::withCallingHandlers({
[18:03:54.084]             ...future.value <- base::withVisible(base::local({
[18:03:54.084]                 ...future.makeSendCondition <- base::local({
[18:03:54.084]                   sendCondition <- NULL
[18:03:54.084]                   function(frame = 1L) {
[18:03:54.084]                     if (is.function(sendCondition)) 
[18:03:54.084]                       return(sendCondition)
[18:03:54.084]                     ns <- getNamespace("parallel")
[18:03:54.084]                     if (exists("sendData", mode = "function", 
[18:03:54.084]                       envir = ns)) {
[18:03:54.084]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:54.084]                         envir = ns)
[18:03:54.084]                       envir <- sys.frame(frame)
[18:03:54.084]                       master <- NULL
[18:03:54.084]                       while (!identical(envir, .GlobalEnv) && 
[18:03:54.084]                         !identical(envir, emptyenv())) {
[18:03:54.084]                         if (exists("master", mode = "list", envir = envir, 
[18:03:54.084]                           inherits = FALSE)) {
[18:03:54.084]                           master <- get("master", mode = "list", 
[18:03:54.084]                             envir = envir, inherits = FALSE)
[18:03:54.084]                           if (inherits(master, c("SOCKnode", 
[18:03:54.084]                             "SOCK0node"))) {
[18:03:54.084]                             sendCondition <<- function(cond) {
[18:03:54.084]                               data <- list(type = "VALUE", value = cond, 
[18:03:54.084]                                 success = TRUE)
[18:03:54.084]                               parallel_sendData(master, data)
[18:03:54.084]                             }
[18:03:54.084]                             return(sendCondition)
[18:03:54.084]                           }
[18:03:54.084]                         }
[18:03:54.084]                         frame <- frame + 1L
[18:03:54.084]                         envir <- sys.frame(frame)
[18:03:54.084]                       }
[18:03:54.084]                     }
[18:03:54.084]                     sendCondition <<- function(cond) NULL
[18:03:54.084]                   }
[18:03:54.084]                 })
[18:03:54.084]                 withCallingHandlers({
[18:03:54.084]                   NA
[18:03:54.084]                 }, immediateCondition = function(cond) {
[18:03:54.084]                   sendCondition <- ...future.makeSendCondition()
[18:03:54.084]                   sendCondition(cond)
[18:03:54.084]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.084]                   {
[18:03:54.084]                     inherits <- base::inherits
[18:03:54.084]                     invokeRestart <- base::invokeRestart
[18:03:54.084]                     is.null <- base::is.null
[18:03:54.084]                     muffled <- FALSE
[18:03:54.084]                     if (inherits(cond, "message")) {
[18:03:54.084]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:54.084]                       if (muffled) 
[18:03:54.084]                         invokeRestart("muffleMessage")
[18:03:54.084]                     }
[18:03:54.084]                     else if (inherits(cond, "warning")) {
[18:03:54.084]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:54.084]                       if (muffled) 
[18:03:54.084]                         invokeRestart("muffleWarning")
[18:03:54.084]                     }
[18:03:54.084]                     else if (inherits(cond, "condition")) {
[18:03:54.084]                       if (!is.null(pattern)) {
[18:03:54.084]                         computeRestarts <- base::computeRestarts
[18:03:54.084]                         grepl <- base::grepl
[18:03:54.084]                         restarts <- computeRestarts(cond)
[18:03:54.084]                         for (restart in restarts) {
[18:03:54.084]                           name <- restart$name
[18:03:54.084]                           if (is.null(name)) 
[18:03:54.084]                             next
[18:03:54.084]                           if (!grepl(pattern, name)) 
[18:03:54.084]                             next
[18:03:54.084]                           invokeRestart(restart)
[18:03:54.084]                           muffled <- TRUE
[18:03:54.084]                           break
[18:03:54.084]                         }
[18:03:54.084]                       }
[18:03:54.084]                     }
[18:03:54.084]                     invisible(muffled)
[18:03:54.084]                   }
[18:03:54.084]                   muffleCondition(cond)
[18:03:54.084]                 })
[18:03:54.084]             }))
[18:03:54.084]             future::FutureResult(value = ...future.value$value, 
[18:03:54.084]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.084]                   ...future.rng), globalenv = if (FALSE) 
[18:03:54.084]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:54.084]                     ...future.globalenv.names))
[18:03:54.084]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:54.084]         }, condition = base::local({
[18:03:54.084]             c <- base::c
[18:03:54.084]             inherits <- base::inherits
[18:03:54.084]             invokeRestart <- base::invokeRestart
[18:03:54.084]             length <- base::length
[18:03:54.084]             list <- base::list
[18:03:54.084]             seq.int <- base::seq.int
[18:03:54.084]             signalCondition <- base::signalCondition
[18:03:54.084]             sys.calls <- base::sys.calls
[18:03:54.084]             `[[` <- base::`[[`
[18:03:54.084]             `+` <- base::`+`
[18:03:54.084]             `<<-` <- base::`<<-`
[18:03:54.084]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:54.084]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:54.084]                   3L)]
[18:03:54.084]             }
[18:03:54.084]             function(cond) {
[18:03:54.084]                 is_error <- inherits(cond, "error")
[18:03:54.084]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:54.084]                   NULL)
[18:03:54.084]                 if (is_error) {
[18:03:54.084]                   sessionInformation <- function() {
[18:03:54.084]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:54.084]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:54.084]                       search = base::search(), system = base::Sys.info())
[18:03:54.084]                   }
[18:03:54.084]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.084]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:54.084]                     cond$call), session = sessionInformation(), 
[18:03:54.084]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:54.084]                   signalCondition(cond)
[18:03:54.084]                 }
[18:03:54.084]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:54.084]                 "immediateCondition"))) {
[18:03:54.084]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:54.084]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.084]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:54.084]                   if (TRUE && !signal) {
[18:03:54.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.084]                     {
[18:03:54.084]                       inherits <- base::inherits
[18:03:54.084]                       invokeRestart <- base::invokeRestart
[18:03:54.084]                       is.null <- base::is.null
[18:03:54.084]                       muffled <- FALSE
[18:03:54.084]                       if (inherits(cond, "message")) {
[18:03:54.084]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.084]                         if (muffled) 
[18:03:54.084]                           invokeRestart("muffleMessage")
[18:03:54.084]                       }
[18:03:54.084]                       else if (inherits(cond, "warning")) {
[18:03:54.084]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.084]                         if (muffled) 
[18:03:54.084]                           invokeRestart("muffleWarning")
[18:03:54.084]                       }
[18:03:54.084]                       else if (inherits(cond, "condition")) {
[18:03:54.084]                         if (!is.null(pattern)) {
[18:03:54.084]                           computeRestarts <- base::computeRestarts
[18:03:54.084]                           grepl <- base::grepl
[18:03:54.084]                           restarts <- computeRestarts(cond)
[18:03:54.084]                           for (restart in restarts) {
[18:03:54.084]                             name <- restart$name
[18:03:54.084]                             if (is.null(name)) 
[18:03:54.084]                               next
[18:03:54.084]                             if (!grepl(pattern, name)) 
[18:03:54.084]                               next
[18:03:54.084]                             invokeRestart(restart)
[18:03:54.084]                             muffled <- TRUE
[18:03:54.084]                             break
[18:03:54.084]                           }
[18:03:54.084]                         }
[18:03:54.084]                       }
[18:03:54.084]                       invisible(muffled)
[18:03:54.084]                     }
[18:03:54.084]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.084]                   }
[18:03:54.084]                 }
[18:03:54.084]                 else {
[18:03:54.084]                   if (TRUE) {
[18:03:54.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.084]                     {
[18:03:54.084]                       inherits <- base::inherits
[18:03:54.084]                       invokeRestart <- base::invokeRestart
[18:03:54.084]                       is.null <- base::is.null
[18:03:54.084]                       muffled <- FALSE
[18:03:54.084]                       if (inherits(cond, "message")) {
[18:03:54.084]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.084]                         if (muffled) 
[18:03:54.084]                           invokeRestart("muffleMessage")
[18:03:54.084]                       }
[18:03:54.084]                       else if (inherits(cond, "warning")) {
[18:03:54.084]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.084]                         if (muffled) 
[18:03:54.084]                           invokeRestart("muffleWarning")
[18:03:54.084]                       }
[18:03:54.084]                       else if (inherits(cond, "condition")) {
[18:03:54.084]                         if (!is.null(pattern)) {
[18:03:54.084]                           computeRestarts <- base::computeRestarts
[18:03:54.084]                           grepl <- base::grepl
[18:03:54.084]                           restarts <- computeRestarts(cond)
[18:03:54.084]                           for (restart in restarts) {
[18:03:54.084]                             name <- restart$name
[18:03:54.084]                             if (is.null(name)) 
[18:03:54.084]                               next
[18:03:54.084]                             if (!grepl(pattern, name)) 
[18:03:54.084]                               next
[18:03:54.084]                             invokeRestart(restart)
[18:03:54.084]                             muffled <- TRUE
[18:03:54.084]                             break
[18:03:54.084]                           }
[18:03:54.084]                         }
[18:03:54.084]                       }
[18:03:54.084]                       invisible(muffled)
[18:03:54.084]                     }
[18:03:54.084]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.084]                   }
[18:03:54.084]                 }
[18:03:54.084]             }
[18:03:54.084]         }))
[18:03:54.084]     }, error = function(ex) {
[18:03:54.084]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:54.084]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.084]                 ...future.rng), started = ...future.startTime, 
[18:03:54.084]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:54.084]             version = "1.8"), class = "FutureResult")
[18:03:54.084]     }, finally = {
[18:03:54.084]         if (!identical(...future.workdir, getwd())) 
[18:03:54.084]             setwd(...future.workdir)
[18:03:54.084]         {
[18:03:54.084]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:54.084]                 ...future.oldOptions$nwarnings <- NULL
[18:03:54.084]             }
[18:03:54.084]             base::options(...future.oldOptions)
[18:03:54.084]             if (.Platform$OS.type == "windows") {
[18:03:54.084]                 old_names <- names(...future.oldEnvVars)
[18:03:54.084]                 envs <- base::Sys.getenv()
[18:03:54.084]                 names <- names(envs)
[18:03:54.084]                 common <- intersect(names, old_names)
[18:03:54.084]                 added <- setdiff(names, old_names)
[18:03:54.084]                 removed <- setdiff(old_names, names)
[18:03:54.084]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:54.084]                   envs[common]]
[18:03:54.084]                 NAMES <- toupper(changed)
[18:03:54.084]                 args <- list()
[18:03:54.084]                 for (kk in seq_along(NAMES)) {
[18:03:54.084]                   name <- changed[[kk]]
[18:03:54.084]                   NAME <- NAMES[[kk]]
[18:03:54.084]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.084]                     next
[18:03:54.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.084]                 }
[18:03:54.084]                 NAMES <- toupper(added)
[18:03:54.084]                 for (kk in seq_along(NAMES)) {
[18:03:54.084]                   name <- added[[kk]]
[18:03:54.084]                   NAME <- NAMES[[kk]]
[18:03:54.084]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.084]                     next
[18:03:54.084]                   args[[name]] <- ""
[18:03:54.084]                 }
[18:03:54.084]                 NAMES <- toupper(removed)
[18:03:54.084]                 for (kk in seq_along(NAMES)) {
[18:03:54.084]                   name <- removed[[kk]]
[18:03:54.084]                   NAME <- NAMES[[kk]]
[18:03:54.084]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.084]                     next
[18:03:54.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.084]                 }
[18:03:54.084]                 if (length(args) > 0) 
[18:03:54.084]                   base::do.call(base::Sys.setenv, args = args)
[18:03:54.084]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:54.084]             }
[18:03:54.084]             else {
[18:03:54.084]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:54.084]             }
[18:03:54.084]             {
[18:03:54.084]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:54.084]                   0L) {
[18:03:54.084]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:54.084]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:54.084]                   base::options(opts)
[18:03:54.084]                 }
[18:03:54.084]                 {
[18:03:54.084]                   {
[18:03:54.084]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:54.084]                     NULL
[18:03:54.084]                   }
[18:03:54.084]                   options(future.plan = NULL)
[18:03:54.084]                   if (is.na(NA_character_)) 
[18:03:54.084]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.084]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:54.084]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:54.084]                     .init = FALSE)
[18:03:54.084]                 }
[18:03:54.084]             }
[18:03:54.084]         }
[18:03:54.084]     })
[18:03:54.084]     if (TRUE) {
[18:03:54.084]         base::sink(type = "output", split = FALSE)
[18:03:54.084]         if (TRUE) {
[18:03:54.084]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:54.084]         }
[18:03:54.084]         else {
[18:03:54.084]             ...future.result["stdout"] <- base::list(NULL)
[18:03:54.084]         }
[18:03:54.084]         base::close(...future.stdout)
[18:03:54.084]         ...future.stdout <- NULL
[18:03:54.084]     }
[18:03:54.084]     ...future.result$conditions <- ...future.conditions
[18:03:54.084]     ...future.result$finished <- base::Sys.time()
[18:03:54.084]     ...future.result
[18:03:54.084] }
[18:03:54.187] MultisessionFuture started
[18:03:54.187] result() for ClusterFuture ...
[18:03:54.188] receiveMessageFromWorker() for ClusterFuture ...
[18:03:54.188] - Validating connection of MultisessionFuture
[18:03:54.251] - received message: FutureResult
[18:03:54.251] - Received FutureResult
[18:03:54.252] - Erased future from FutureRegistry
[18:03:54.252] result() for ClusterFuture ...
[18:03:54.252] - result already collected: FutureResult
[18:03:54.253] result() for ClusterFuture ... done
[18:03:54.253] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:54.253] result() for ClusterFuture ... done
[18:03:54.254] result() for ClusterFuture ...
[18:03:54.254] - result already collected: FutureResult
[18:03:54.254] result() for ClusterFuture ... done
[18:03:54.255] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[18:03:54.263] plan(): nbrOfWorkers() = 2
[18:03:54.270] getGlobalsAndPackages() ...
[18:03:54.270] 
[18:03:54.270] - globals: [0] <none>
[18:03:54.271] getGlobalsAndPackages() ... DONE
[18:03:54.295] Packages needed by the future expression (n = 0): <none>
[18:03:54.296] Packages needed by future strategies (n = 0): <none>
[18:03:54.297] {
[18:03:54.297]     {
[18:03:54.297]         {
[18:03:54.297]             ...future.startTime <- base::Sys.time()
[18:03:54.297]             {
[18:03:54.297]                 {
[18:03:54.297]                   {
[18:03:54.297]                     {
[18:03:54.297]                       base::local({
[18:03:54.297]                         has_future <- base::requireNamespace("future", 
[18:03:54.297]                           quietly = TRUE)
[18:03:54.297]                         if (has_future) {
[18:03:54.297]                           ns <- base::getNamespace("future")
[18:03:54.297]                           version <- ns[[".package"]][["version"]]
[18:03:54.297]                           if (is.null(version)) 
[18:03:54.297]                             version <- utils::packageVersion("future")
[18:03:54.297]                         }
[18:03:54.297]                         else {
[18:03:54.297]                           version <- NULL
[18:03:54.297]                         }
[18:03:54.297]                         if (!has_future || version < "1.8.0") {
[18:03:54.297]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:54.297]                             "", base::R.version$version.string), 
[18:03:54.297]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:54.297]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:54.297]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:54.297]                               "release", "version")], collapse = " "), 
[18:03:54.297]                             hostname = base::Sys.info()[["nodename"]])
[18:03:54.297]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:54.297]                             info)
[18:03:54.297]                           info <- base::paste(info, collapse = "; ")
[18:03:54.297]                           if (!has_future) {
[18:03:54.297]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:54.297]                               info)
[18:03:54.297]                           }
[18:03:54.297]                           else {
[18:03:54.297]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:54.297]                               info, version)
[18:03:54.297]                           }
[18:03:54.297]                           base::stop(msg)
[18:03:54.297]                         }
[18:03:54.297]                       })
[18:03:54.297]                     }
[18:03:54.297]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:54.297]                     base::options(mc.cores = 1L)
[18:03:54.297]                   }
[18:03:54.297]                   ...future.strategy.old <- future::plan("list")
[18:03:54.297]                   options(future.plan = NULL)
[18:03:54.297]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.297]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:54.297]                 }
[18:03:54.297]                 ...future.workdir <- getwd()
[18:03:54.297]             }
[18:03:54.297]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:54.297]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:54.297]         }
[18:03:54.297]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:54.297]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:54.297]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:54.297]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:54.297]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:54.297]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:54.297]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:54.297]             base::names(...future.oldOptions))
[18:03:54.297]     }
[18:03:54.297]     if (FALSE) {
[18:03:54.297]     }
[18:03:54.297]     else {
[18:03:54.297]         if (TRUE) {
[18:03:54.297]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:54.297]                 open = "w")
[18:03:54.297]         }
[18:03:54.297]         else {
[18:03:54.297]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:54.297]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:54.297]         }
[18:03:54.297]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:54.297]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:54.297]             base::sink(type = "output", split = FALSE)
[18:03:54.297]             base::close(...future.stdout)
[18:03:54.297]         }, add = TRUE)
[18:03:54.297]     }
[18:03:54.297]     ...future.frame <- base::sys.nframe()
[18:03:54.297]     ...future.conditions <- base::list()
[18:03:54.297]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:54.297]     if (FALSE) {
[18:03:54.297]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:54.297]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:54.297]     }
[18:03:54.297]     ...future.result <- base::tryCatch({
[18:03:54.297]         base::withCallingHandlers({
[18:03:54.297]             ...future.value <- base::withVisible(base::local({
[18:03:54.297]                 ...future.makeSendCondition <- base::local({
[18:03:54.297]                   sendCondition <- NULL
[18:03:54.297]                   function(frame = 1L) {
[18:03:54.297]                     if (is.function(sendCondition)) 
[18:03:54.297]                       return(sendCondition)
[18:03:54.297]                     ns <- getNamespace("parallel")
[18:03:54.297]                     if (exists("sendData", mode = "function", 
[18:03:54.297]                       envir = ns)) {
[18:03:54.297]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:54.297]                         envir = ns)
[18:03:54.297]                       envir <- sys.frame(frame)
[18:03:54.297]                       master <- NULL
[18:03:54.297]                       while (!identical(envir, .GlobalEnv) && 
[18:03:54.297]                         !identical(envir, emptyenv())) {
[18:03:54.297]                         if (exists("master", mode = "list", envir = envir, 
[18:03:54.297]                           inherits = FALSE)) {
[18:03:54.297]                           master <- get("master", mode = "list", 
[18:03:54.297]                             envir = envir, inherits = FALSE)
[18:03:54.297]                           if (inherits(master, c("SOCKnode", 
[18:03:54.297]                             "SOCK0node"))) {
[18:03:54.297]                             sendCondition <<- function(cond) {
[18:03:54.297]                               data <- list(type = "VALUE", value = cond, 
[18:03:54.297]                                 success = TRUE)
[18:03:54.297]                               parallel_sendData(master, data)
[18:03:54.297]                             }
[18:03:54.297]                             return(sendCondition)
[18:03:54.297]                           }
[18:03:54.297]                         }
[18:03:54.297]                         frame <- frame + 1L
[18:03:54.297]                         envir <- sys.frame(frame)
[18:03:54.297]                       }
[18:03:54.297]                     }
[18:03:54.297]                     sendCondition <<- function(cond) NULL
[18:03:54.297]                   }
[18:03:54.297]                 })
[18:03:54.297]                 withCallingHandlers({
[18:03:54.297]                   42
[18:03:54.297]                 }, immediateCondition = function(cond) {
[18:03:54.297]                   sendCondition <- ...future.makeSendCondition()
[18:03:54.297]                   sendCondition(cond)
[18:03:54.297]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.297]                   {
[18:03:54.297]                     inherits <- base::inherits
[18:03:54.297]                     invokeRestart <- base::invokeRestart
[18:03:54.297]                     is.null <- base::is.null
[18:03:54.297]                     muffled <- FALSE
[18:03:54.297]                     if (inherits(cond, "message")) {
[18:03:54.297]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:54.297]                       if (muffled) 
[18:03:54.297]                         invokeRestart("muffleMessage")
[18:03:54.297]                     }
[18:03:54.297]                     else if (inherits(cond, "warning")) {
[18:03:54.297]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:54.297]                       if (muffled) 
[18:03:54.297]                         invokeRestart("muffleWarning")
[18:03:54.297]                     }
[18:03:54.297]                     else if (inherits(cond, "condition")) {
[18:03:54.297]                       if (!is.null(pattern)) {
[18:03:54.297]                         computeRestarts <- base::computeRestarts
[18:03:54.297]                         grepl <- base::grepl
[18:03:54.297]                         restarts <- computeRestarts(cond)
[18:03:54.297]                         for (restart in restarts) {
[18:03:54.297]                           name <- restart$name
[18:03:54.297]                           if (is.null(name)) 
[18:03:54.297]                             next
[18:03:54.297]                           if (!grepl(pattern, name)) 
[18:03:54.297]                             next
[18:03:54.297]                           invokeRestart(restart)
[18:03:54.297]                           muffled <- TRUE
[18:03:54.297]                           break
[18:03:54.297]                         }
[18:03:54.297]                       }
[18:03:54.297]                     }
[18:03:54.297]                     invisible(muffled)
[18:03:54.297]                   }
[18:03:54.297]                   muffleCondition(cond)
[18:03:54.297]                 })
[18:03:54.297]             }))
[18:03:54.297]             future::FutureResult(value = ...future.value$value, 
[18:03:54.297]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.297]                   ...future.rng), globalenv = if (FALSE) 
[18:03:54.297]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:54.297]                     ...future.globalenv.names))
[18:03:54.297]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:54.297]         }, condition = base::local({
[18:03:54.297]             c <- base::c
[18:03:54.297]             inherits <- base::inherits
[18:03:54.297]             invokeRestart <- base::invokeRestart
[18:03:54.297]             length <- base::length
[18:03:54.297]             list <- base::list
[18:03:54.297]             seq.int <- base::seq.int
[18:03:54.297]             signalCondition <- base::signalCondition
[18:03:54.297]             sys.calls <- base::sys.calls
[18:03:54.297]             `[[` <- base::`[[`
[18:03:54.297]             `+` <- base::`+`
[18:03:54.297]             `<<-` <- base::`<<-`
[18:03:54.297]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:54.297]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:54.297]                   3L)]
[18:03:54.297]             }
[18:03:54.297]             function(cond) {
[18:03:54.297]                 is_error <- inherits(cond, "error")
[18:03:54.297]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:54.297]                   NULL)
[18:03:54.297]                 if (is_error) {
[18:03:54.297]                   sessionInformation <- function() {
[18:03:54.297]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:54.297]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:54.297]                       search = base::search(), system = base::Sys.info())
[18:03:54.297]                   }
[18:03:54.297]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.297]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:54.297]                     cond$call), session = sessionInformation(), 
[18:03:54.297]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:54.297]                   signalCondition(cond)
[18:03:54.297]                 }
[18:03:54.297]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:54.297]                 "immediateCondition"))) {
[18:03:54.297]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:54.297]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.297]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:54.297]                   if (TRUE && !signal) {
[18:03:54.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.297]                     {
[18:03:54.297]                       inherits <- base::inherits
[18:03:54.297]                       invokeRestart <- base::invokeRestart
[18:03:54.297]                       is.null <- base::is.null
[18:03:54.297]                       muffled <- FALSE
[18:03:54.297]                       if (inherits(cond, "message")) {
[18:03:54.297]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.297]                         if (muffled) 
[18:03:54.297]                           invokeRestart("muffleMessage")
[18:03:54.297]                       }
[18:03:54.297]                       else if (inherits(cond, "warning")) {
[18:03:54.297]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.297]                         if (muffled) 
[18:03:54.297]                           invokeRestart("muffleWarning")
[18:03:54.297]                       }
[18:03:54.297]                       else if (inherits(cond, "condition")) {
[18:03:54.297]                         if (!is.null(pattern)) {
[18:03:54.297]                           computeRestarts <- base::computeRestarts
[18:03:54.297]                           grepl <- base::grepl
[18:03:54.297]                           restarts <- computeRestarts(cond)
[18:03:54.297]                           for (restart in restarts) {
[18:03:54.297]                             name <- restart$name
[18:03:54.297]                             if (is.null(name)) 
[18:03:54.297]                               next
[18:03:54.297]                             if (!grepl(pattern, name)) 
[18:03:54.297]                               next
[18:03:54.297]                             invokeRestart(restart)
[18:03:54.297]                             muffled <- TRUE
[18:03:54.297]                             break
[18:03:54.297]                           }
[18:03:54.297]                         }
[18:03:54.297]                       }
[18:03:54.297]                       invisible(muffled)
[18:03:54.297]                     }
[18:03:54.297]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.297]                   }
[18:03:54.297]                 }
[18:03:54.297]                 else {
[18:03:54.297]                   if (TRUE) {
[18:03:54.297]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.297]                     {
[18:03:54.297]                       inherits <- base::inherits
[18:03:54.297]                       invokeRestart <- base::invokeRestart
[18:03:54.297]                       is.null <- base::is.null
[18:03:54.297]                       muffled <- FALSE
[18:03:54.297]                       if (inherits(cond, "message")) {
[18:03:54.297]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.297]                         if (muffled) 
[18:03:54.297]                           invokeRestart("muffleMessage")
[18:03:54.297]                       }
[18:03:54.297]                       else if (inherits(cond, "warning")) {
[18:03:54.297]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.297]                         if (muffled) 
[18:03:54.297]                           invokeRestart("muffleWarning")
[18:03:54.297]                       }
[18:03:54.297]                       else if (inherits(cond, "condition")) {
[18:03:54.297]                         if (!is.null(pattern)) {
[18:03:54.297]                           computeRestarts <- base::computeRestarts
[18:03:54.297]                           grepl <- base::grepl
[18:03:54.297]                           restarts <- computeRestarts(cond)
[18:03:54.297]                           for (restart in restarts) {
[18:03:54.297]                             name <- restart$name
[18:03:54.297]                             if (is.null(name)) 
[18:03:54.297]                               next
[18:03:54.297]                             if (!grepl(pattern, name)) 
[18:03:54.297]                               next
[18:03:54.297]                             invokeRestart(restart)
[18:03:54.297]                             muffled <- TRUE
[18:03:54.297]                             break
[18:03:54.297]                           }
[18:03:54.297]                         }
[18:03:54.297]                       }
[18:03:54.297]                       invisible(muffled)
[18:03:54.297]                     }
[18:03:54.297]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.297]                   }
[18:03:54.297]                 }
[18:03:54.297]             }
[18:03:54.297]         }))
[18:03:54.297]     }, error = function(ex) {
[18:03:54.297]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:54.297]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.297]                 ...future.rng), started = ...future.startTime, 
[18:03:54.297]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:54.297]             version = "1.8"), class = "FutureResult")
[18:03:54.297]     }, finally = {
[18:03:54.297]         if (!identical(...future.workdir, getwd())) 
[18:03:54.297]             setwd(...future.workdir)
[18:03:54.297]         {
[18:03:54.297]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:54.297]                 ...future.oldOptions$nwarnings <- NULL
[18:03:54.297]             }
[18:03:54.297]             base::options(...future.oldOptions)
[18:03:54.297]             if (.Platform$OS.type == "windows") {
[18:03:54.297]                 old_names <- names(...future.oldEnvVars)
[18:03:54.297]                 envs <- base::Sys.getenv()
[18:03:54.297]                 names <- names(envs)
[18:03:54.297]                 common <- intersect(names, old_names)
[18:03:54.297]                 added <- setdiff(names, old_names)
[18:03:54.297]                 removed <- setdiff(old_names, names)
[18:03:54.297]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:54.297]                   envs[common]]
[18:03:54.297]                 NAMES <- toupper(changed)
[18:03:54.297]                 args <- list()
[18:03:54.297]                 for (kk in seq_along(NAMES)) {
[18:03:54.297]                   name <- changed[[kk]]
[18:03:54.297]                   NAME <- NAMES[[kk]]
[18:03:54.297]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.297]                     next
[18:03:54.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.297]                 }
[18:03:54.297]                 NAMES <- toupper(added)
[18:03:54.297]                 for (kk in seq_along(NAMES)) {
[18:03:54.297]                   name <- added[[kk]]
[18:03:54.297]                   NAME <- NAMES[[kk]]
[18:03:54.297]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.297]                     next
[18:03:54.297]                   args[[name]] <- ""
[18:03:54.297]                 }
[18:03:54.297]                 NAMES <- toupper(removed)
[18:03:54.297]                 for (kk in seq_along(NAMES)) {
[18:03:54.297]                   name <- removed[[kk]]
[18:03:54.297]                   NAME <- NAMES[[kk]]
[18:03:54.297]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.297]                     next
[18:03:54.297]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.297]                 }
[18:03:54.297]                 if (length(args) > 0) 
[18:03:54.297]                   base::do.call(base::Sys.setenv, args = args)
[18:03:54.297]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:54.297]             }
[18:03:54.297]             else {
[18:03:54.297]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:54.297]             }
[18:03:54.297]             {
[18:03:54.297]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:54.297]                   0L) {
[18:03:54.297]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:54.297]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:54.297]                   base::options(opts)
[18:03:54.297]                 }
[18:03:54.297]                 {
[18:03:54.297]                   {
[18:03:54.297]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:54.297]                     NULL
[18:03:54.297]                   }
[18:03:54.297]                   options(future.plan = NULL)
[18:03:54.297]                   if (is.na(NA_character_)) 
[18:03:54.297]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.297]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:54.297]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:54.297]                     .init = FALSE)
[18:03:54.297]                 }
[18:03:54.297]             }
[18:03:54.297]         }
[18:03:54.297]     })
[18:03:54.297]     if (TRUE) {
[18:03:54.297]         base::sink(type = "output", split = FALSE)
[18:03:54.297]         if (TRUE) {
[18:03:54.297]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:54.297]         }
[18:03:54.297]         else {
[18:03:54.297]             ...future.result["stdout"] <- base::list(NULL)
[18:03:54.297]         }
[18:03:54.297]         base::close(...future.stdout)
[18:03:54.297]         ...future.stdout <- NULL
[18:03:54.297]     }
[18:03:54.297]     ...future.result$conditions <- ...future.conditions
[18:03:54.297]     ...future.result$finished <- base::Sys.time()
[18:03:54.297]     ...future.result
[18:03:54.297] }
[18:03:54.305] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.318] result() for ClusterFuture ...
[18:03:54.319] receiveMessageFromWorker() for ClusterFuture ...
[18:03:54.319] - Validating connection of MultisessionFuture
[18:03:54.349] - received message: FutureResult
[18:03:54.350] - Received FutureResult
[18:03:54.350] - Erased future from FutureRegistry
[18:03:54.351] result() for ClusterFuture ...
[18:03:54.351] - result already collected: FutureResult
[18:03:54.351] result() for ClusterFuture ... done
[18:03:54.352] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:54.352] result() for ClusterFuture ... done
[18:03:54.352] result() for ClusterFuture ...
[18:03:54.353] - result already collected: FutureResult
[18:03:54.353] result() for ClusterFuture ... done
[18:03:54.354] getGlobalsAndPackages() ...
[18:03:54.354] Searching for globals...
[18:03:54.355] 
[18:03:54.356] Searching for globals ... DONE
[18:03:54.356] - globals: [0] <none>
[18:03:54.357] getGlobalsAndPackages() ... DONE
[18:03:54.357] run() for ‘Future’ ...
[18:03:54.358] - state: ‘created’
[18:03:54.358] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:54.387] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.388] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:54.388]   - Field: ‘node’
[18:03:54.388]   - Field: ‘label’
[18:03:54.388]   - Field: ‘local’
[18:03:54.388]   - Field: ‘owner’
[18:03:54.389]   - Field: ‘envir’
[18:03:54.389]   - Field: ‘workers’
[18:03:54.389]   - Field: ‘packages’
[18:03:54.389]   - Field: ‘gc’
[18:03:54.390]   - Field: ‘conditions’
[18:03:54.390]   - Field: ‘persistent’
[18:03:54.390]   - Field: ‘expr’
[18:03:54.390]   - Field: ‘uuid’
[18:03:54.391]   - Field: ‘seed’
[18:03:54.391]   - Field: ‘version’
[18:03:54.391]   - Field: ‘result’
[18:03:54.391]   - Field: ‘asynchronous’
[18:03:54.392]   - Field: ‘calls’
[18:03:54.392]   - Field: ‘globals’
[18:03:54.392]   - Field: ‘stdout’
[18:03:54.392]   - Field: ‘earlySignal’
[18:03:54.393]   - Field: ‘lazy’
[18:03:54.393]   - Field: ‘state’
[18:03:54.393] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:54.393] - Launch lazy future ...
[18:03:54.394] Packages needed by the future expression (n = 0): <none>
[18:03:54.394] Packages needed by future strategies (n = 0): <none>
[18:03:54.396] {
[18:03:54.396]     {
[18:03:54.396]         {
[18:03:54.396]             ...future.startTime <- base::Sys.time()
[18:03:54.396]             {
[18:03:54.396]                 {
[18:03:54.396]                   {
[18:03:54.396]                     {
[18:03:54.396]                       base::local({
[18:03:54.396]                         has_future <- base::requireNamespace("future", 
[18:03:54.396]                           quietly = TRUE)
[18:03:54.396]                         if (has_future) {
[18:03:54.396]                           ns <- base::getNamespace("future")
[18:03:54.396]                           version <- ns[[".package"]][["version"]]
[18:03:54.396]                           if (is.null(version)) 
[18:03:54.396]                             version <- utils::packageVersion("future")
[18:03:54.396]                         }
[18:03:54.396]                         else {
[18:03:54.396]                           version <- NULL
[18:03:54.396]                         }
[18:03:54.396]                         if (!has_future || version < "1.8.0") {
[18:03:54.396]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:54.396]                             "", base::R.version$version.string), 
[18:03:54.396]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:54.396]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:54.396]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:54.396]                               "release", "version")], collapse = " "), 
[18:03:54.396]                             hostname = base::Sys.info()[["nodename"]])
[18:03:54.396]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:54.396]                             info)
[18:03:54.396]                           info <- base::paste(info, collapse = "; ")
[18:03:54.396]                           if (!has_future) {
[18:03:54.396]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:54.396]                               info)
[18:03:54.396]                           }
[18:03:54.396]                           else {
[18:03:54.396]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:54.396]                               info, version)
[18:03:54.396]                           }
[18:03:54.396]                           base::stop(msg)
[18:03:54.396]                         }
[18:03:54.396]                       })
[18:03:54.396]                     }
[18:03:54.396]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:54.396]                     base::options(mc.cores = 1L)
[18:03:54.396]                   }
[18:03:54.396]                   ...future.strategy.old <- future::plan("list")
[18:03:54.396]                   options(future.plan = NULL)
[18:03:54.396]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.396]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:54.396]                 }
[18:03:54.396]                 ...future.workdir <- getwd()
[18:03:54.396]             }
[18:03:54.396]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:54.396]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:54.396]         }
[18:03:54.396]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:54.396]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:54.396]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:54.396]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:54.396]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:54.396]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:54.396]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:54.396]             base::names(...future.oldOptions))
[18:03:54.396]     }
[18:03:54.396]     if (FALSE) {
[18:03:54.396]     }
[18:03:54.396]     else {
[18:03:54.396]         if (TRUE) {
[18:03:54.396]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:54.396]                 open = "w")
[18:03:54.396]         }
[18:03:54.396]         else {
[18:03:54.396]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:54.396]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:54.396]         }
[18:03:54.396]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:54.396]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:54.396]             base::sink(type = "output", split = FALSE)
[18:03:54.396]             base::close(...future.stdout)
[18:03:54.396]         }, add = TRUE)
[18:03:54.396]     }
[18:03:54.396]     ...future.frame <- base::sys.nframe()
[18:03:54.396]     ...future.conditions <- base::list()
[18:03:54.396]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:54.396]     if (FALSE) {
[18:03:54.396]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:54.396]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:54.396]     }
[18:03:54.396]     ...future.result <- base::tryCatch({
[18:03:54.396]         base::withCallingHandlers({
[18:03:54.396]             ...future.value <- base::withVisible(base::local({
[18:03:54.396]                 ...future.makeSendCondition <- base::local({
[18:03:54.396]                   sendCondition <- NULL
[18:03:54.396]                   function(frame = 1L) {
[18:03:54.396]                     if (is.function(sendCondition)) 
[18:03:54.396]                       return(sendCondition)
[18:03:54.396]                     ns <- getNamespace("parallel")
[18:03:54.396]                     if (exists("sendData", mode = "function", 
[18:03:54.396]                       envir = ns)) {
[18:03:54.396]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:54.396]                         envir = ns)
[18:03:54.396]                       envir <- sys.frame(frame)
[18:03:54.396]                       master <- NULL
[18:03:54.396]                       while (!identical(envir, .GlobalEnv) && 
[18:03:54.396]                         !identical(envir, emptyenv())) {
[18:03:54.396]                         if (exists("master", mode = "list", envir = envir, 
[18:03:54.396]                           inherits = FALSE)) {
[18:03:54.396]                           master <- get("master", mode = "list", 
[18:03:54.396]                             envir = envir, inherits = FALSE)
[18:03:54.396]                           if (inherits(master, c("SOCKnode", 
[18:03:54.396]                             "SOCK0node"))) {
[18:03:54.396]                             sendCondition <<- function(cond) {
[18:03:54.396]                               data <- list(type = "VALUE", value = cond, 
[18:03:54.396]                                 success = TRUE)
[18:03:54.396]                               parallel_sendData(master, data)
[18:03:54.396]                             }
[18:03:54.396]                             return(sendCondition)
[18:03:54.396]                           }
[18:03:54.396]                         }
[18:03:54.396]                         frame <- frame + 1L
[18:03:54.396]                         envir <- sys.frame(frame)
[18:03:54.396]                       }
[18:03:54.396]                     }
[18:03:54.396]                     sendCondition <<- function(cond) NULL
[18:03:54.396]                   }
[18:03:54.396]                 })
[18:03:54.396]                 withCallingHandlers({
[18:03:54.396]                   42
[18:03:54.396]                 }, immediateCondition = function(cond) {
[18:03:54.396]                   sendCondition <- ...future.makeSendCondition()
[18:03:54.396]                   sendCondition(cond)
[18:03:54.396]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.396]                   {
[18:03:54.396]                     inherits <- base::inherits
[18:03:54.396]                     invokeRestart <- base::invokeRestart
[18:03:54.396]                     is.null <- base::is.null
[18:03:54.396]                     muffled <- FALSE
[18:03:54.396]                     if (inherits(cond, "message")) {
[18:03:54.396]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:54.396]                       if (muffled) 
[18:03:54.396]                         invokeRestart("muffleMessage")
[18:03:54.396]                     }
[18:03:54.396]                     else if (inherits(cond, "warning")) {
[18:03:54.396]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:54.396]                       if (muffled) 
[18:03:54.396]                         invokeRestart("muffleWarning")
[18:03:54.396]                     }
[18:03:54.396]                     else if (inherits(cond, "condition")) {
[18:03:54.396]                       if (!is.null(pattern)) {
[18:03:54.396]                         computeRestarts <- base::computeRestarts
[18:03:54.396]                         grepl <- base::grepl
[18:03:54.396]                         restarts <- computeRestarts(cond)
[18:03:54.396]                         for (restart in restarts) {
[18:03:54.396]                           name <- restart$name
[18:03:54.396]                           if (is.null(name)) 
[18:03:54.396]                             next
[18:03:54.396]                           if (!grepl(pattern, name)) 
[18:03:54.396]                             next
[18:03:54.396]                           invokeRestart(restart)
[18:03:54.396]                           muffled <- TRUE
[18:03:54.396]                           break
[18:03:54.396]                         }
[18:03:54.396]                       }
[18:03:54.396]                     }
[18:03:54.396]                     invisible(muffled)
[18:03:54.396]                   }
[18:03:54.396]                   muffleCondition(cond)
[18:03:54.396]                 })
[18:03:54.396]             }))
[18:03:54.396]             future::FutureResult(value = ...future.value$value, 
[18:03:54.396]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.396]                   ...future.rng), globalenv = if (FALSE) 
[18:03:54.396]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:54.396]                     ...future.globalenv.names))
[18:03:54.396]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:54.396]         }, condition = base::local({
[18:03:54.396]             c <- base::c
[18:03:54.396]             inherits <- base::inherits
[18:03:54.396]             invokeRestart <- base::invokeRestart
[18:03:54.396]             length <- base::length
[18:03:54.396]             list <- base::list
[18:03:54.396]             seq.int <- base::seq.int
[18:03:54.396]             signalCondition <- base::signalCondition
[18:03:54.396]             sys.calls <- base::sys.calls
[18:03:54.396]             `[[` <- base::`[[`
[18:03:54.396]             `+` <- base::`+`
[18:03:54.396]             `<<-` <- base::`<<-`
[18:03:54.396]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:54.396]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:54.396]                   3L)]
[18:03:54.396]             }
[18:03:54.396]             function(cond) {
[18:03:54.396]                 is_error <- inherits(cond, "error")
[18:03:54.396]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:54.396]                   NULL)
[18:03:54.396]                 if (is_error) {
[18:03:54.396]                   sessionInformation <- function() {
[18:03:54.396]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:54.396]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:54.396]                       search = base::search(), system = base::Sys.info())
[18:03:54.396]                   }
[18:03:54.396]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.396]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:54.396]                     cond$call), session = sessionInformation(), 
[18:03:54.396]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:54.396]                   signalCondition(cond)
[18:03:54.396]                 }
[18:03:54.396]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:54.396]                 "immediateCondition"))) {
[18:03:54.396]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:54.396]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.396]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:54.396]                   if (TRUE && !signal) {
[18:03:54.396]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.396]                     {
[18:03:54.396]                       inherits <- base::inherits
[18:03:54.396]                       invokeRestart <- base::invokeRestart
[18:03:54.396]                       is.null <- base::is.null
[18:03:54.396]                       muffled <- FALSE
[18:03:54.396]                       if (inherits(cond, "message")) {
[18:03:54.396]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.396]                         if (muffled) 
[18:03:54.396]                           invokeRestart("muffleMessage")
[18:03:54.396]                       }
[18:03:54.396]                       else if (inherits(cond, "warning")) {
[18:03:54.396]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.396]                         if (muffled) 
[18:03:54.396]                           invokeRestart("muffleWarning")
[18:03:54.396]                       }
[18:03:54.396]                       else if (inherits(cond, "condition")) {
[18:03:54.396]                         if (!is.null(pattern)) {
[18:03:54.396]                           computeRestarts <- base::computeRestarts
[18:03:54.396]                           grepl <- base::grepl
[18:03:54.396]                           restarts <- computeRestarts(cond)
[18:03:54.396]                           for (restart in restarts) {
[18:03:54.396]                             name <- restart$name
[18:03:54.396]                             if (is.null(name)) 
[18:03:54.396]                               next
[18:03:54.396]                             if (!grepl(pattern, name)) 
[18:03:54.396]                               next
[18:03:54.396]                             invokeRestart(restart)
[18:03:54.396]                             muffled <- TRUE
[18:03:54.396]                             break
[18:03:54.396]                           }
[18:03:54.396]                         }
[18:03:54.396]                       }
[18:03:54.396]                       invisible(muffled)
[18:03:54.396]                     }
[18:03:54.396]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.396]                   }
[18:03:54.396]                 }
[18:03:54.396]                 else {
[18:03:54.396]                   if (TRUE) {
[18:03:54.396]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.396]                     {
[18:03:54.396]                       inherits <- base::inherits
[18:03:54.396]                       invokeRestart <- base::invokeRestart
[18:03:54.396]                       is.null <- base::is.null
[18:03:54.396]                       muffled <- FALSE
[18:03:54.396]                       if (inherits(cond, "message")) {
[18:03:54.396]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.396]                         if (muffled) 
[18:03:54.396]                           invokeRestart("muffleMessage")
[18:03:54.396]                       }
[18:03:54.396]                       else if (inherits(cond, "warning")) {
[18:03:54.396]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.396]                         if (muffled) 
[18:03:54.396]                           invokeRestart("muffleWarning")
[18:03:54.396]                       }
[18:03:54.396]                       else if (inherits(cond, "condition")) {
[18:03:54.396]                         if (!is.null(pattern)) {
[18:03:54.396]                           computeRestarts <- base::computeRestarts
[18:03:54.396]                           grepl <- base::grepl
[18:03:54.396]                           restarts <- computeRestarts(cond)
[18:03:54.396]                           for (restart in restarts) {
[18:03:54.396]                             name <- restart$name
[18:03:54.396]                             if (is.null(name)) 
[18:03:54.396]                               next
[18:03:54.396]                             if (!grepl(pattern, name)) 
[18:03:54.396]                               next
[18:03:54.396]                             invokeRestart(restart)
[18:03:54.396]                             muffled <- TRUE
[18:03:54.396]                             break
[18:03:54.396]                           }
[18:03:54.396]                         }
[18:03:54.396]                       }
[18:03:54.396]                       invisible(muffled)
[18:03:54.396]                     }
[18:03:54.396]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.396]                   }
[18:03:54.396]                 }
[18:03:54.396]             }
[18:03:54.396]         }))
[18:03:54.396]     }, error = function(ex) {
[18:03:54.396]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:54.396]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.396]                 ...future.rng), started = ...future.startTime, 
[18:03:54.396]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:54.396]             version = "1.8"), class = "FutureResult")
[18:03:54.396]     }, finally = {
[18:03:54.396]         if (!identical(...future.workdir, getwd())) 
[18:03:54.396]             setwd(...future.workdir)
[18:03:54.396]         {
[18:03:54.396]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:54.396]                 ...future.oldOptions$nwarnings <- NULL
[18:03:54.396]             }
[18:03:54.396]             base::options(...future.oldOptions)
[18:03:54.396]             if (.Platform$OS.type == "windows") {
[18:03:54.396]                 old_names <- names(...future.oldEnvVars)
[18:03:54.396]                 envs <- base::Sys.getenv()
[18:03:54.396]                 names <- names(envs)
[18:03:54.396]                 common <- intersect(names, old_names)
[18:03:54.396]                 added <- setdiff(names, old_names)
[18:03:54.396]                 removed <- setdiff(old_names, names)
[18:03:54.396]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:54.396]                   envs[common]]
[18:03:54.396]                 NAMES <- toupper(changed)
[18:03:54.396]                 args <- list()
[18:03:54.396]                 for (kk in seq_along(NAMES)) {
[18:03:54.396]                   name <- changed[[kk]]
[18:03:54.396]                   NAME <- NAMES[[kk]]
[18:03:54.396]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.396]                     next
[18:03:54.396]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.396]                 }
[18:03:54.396]                 NAMES <- toupper(added)
[18:03:54.396]                 for (kk in seq_along(NAMES)) {
[18:03:54.396]                   name <- added[[kk]]
[18:03:54.396]                   NAME <- NAMES[[kk]]
[18:03:54.396]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.396]                     next
[18:03:54.396]                   args[[name]] <- ""
[18:03:54.396]                 }
[18:03:54.396]                 NAMES <- toupper(removed)
[18:03:54.396]                 for (kk in seq_along(NAMES)) {
[18:03:54.396]                   name <- removed[[kk]]
[18:03:54.396]                   NAME <- NAMES[[kk]]
[18:03:54.396]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.396]                     next
[18:03:54.396]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.396]                 }
[18:03:54.396]                 if (length(args) > 0) 
[18:03:54.396]                   base::do.call(base::Sys.setenv, args = args)
[18:03:54.396]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:54.396]             }
[18:03:54.396]             else {
[18:03:54.396]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:54.396]             }
[18:03:54.396]             {
[18:03:54.396]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:54.396]                   0L) {
[18:03:54.396]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:54.396]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:54.396]                   base::options(opts)
[18:03:54.396]                 }
[18:03:54.396]                 {
[18:03:54.396]                   {
[18:03:54.396]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:54.396]                     NULL
[18:03:54.396]                   }
[18:03:54.396]                   options(future.plan = NULL)
[18:03:54.396]                   if (is.na(NA_character_)) 
[18:03:54.396]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.396]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:54.396]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:54.396]                     .init = FALSE)
[18:03:54.396]                 }
[18:03:54.396]             }
[18:03:54.396]         }
[18:03:54.396]     })
[18:03:54.396]     if (TRUE) {
[18:03:54.396]         base::sink(type = "output", split = FALSE)
[18:03:54.396]         if (TRUE) {
[18:03:54.396]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:54.396]         }
[18:03:54.396]         else {
[18:03:54.396]             ...future.result["stdout"] <- base::list(NULL)
[18:03:54.396]         }
[18:03:54.396]         base::close(...future.stdout)
[18:03:54.396]         ...future.stdout <- NULL
[18:03:54.396]     }
[18:03:54.396]     ...future.result$conditions <- ...future.conditions
[18:03:54.396]     ...future.result$finished <- base::Sys.time()
[18:03:54.396]     ...future.result
[18:03:54.396] }
[18:03:54.403] MultisessionFuture started
[18:03:54.403] - Launch lazy future ... done
[18:03:54.403] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.416] result() for ClusterFuture ...
[18:03:54.416] receiveMessageFromWorker() for ClusterFuture ...
[18:03:54.417] - Validating connection of MultisessionFuture
[18:03:54.453] - received message: FutureResult
[18:03:54.453] - Received FutureResult
[18:03:54.454] - Erased future from FutureRegistry
[18:03:54.454] result() for ClusterFuture ...
[18:03:54.454] - result already collected: FutureResult
[18:03:54.454] result() for ClusterFuture ... done
[18:03:54.455] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:54.455] result() for ClusterFuture ... done
[18:03:54.455] result() for ClusterFuture ...
[18:03:54.456] - result already collected: FutureResult
[18:03:54.456] result() for ClusterFuture ... done
[18:03:54.457] getGlobalsAndPackages() ...
[18:03:54.457] Searching for globals...
[18:03:54.459] - globals found: [1] ‘{’
[18:03:54.459] Searching for globals ... DONE
[18:03:54.459] Resolving globals: FALSE
[18:03:54.460] 
[18:03:54.460] 
[18:03:54.460] getGlobalsAndPackages() ... DONE
[18:03:54.461] run() for ‘Future’ ...
[18:03:54.461] - state: ‘created’
[18:03:54.462] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:54.487] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.488] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:54.488]   - Field: ‘node’
[18:03:54.488]   - Field: ‘label’
[18:03:54.488]   - Field: ‘local’
[18:03:54.489]   - Field: ‘owner’
[18:03:54.489]   - Field: ‘envir’
[18:03:54.489]   - Field: ‘workers’
[18:03:54.489]   - Field: ‘packages’
[18:03:54.490]   - Field: ‘gc’
[18:03:54.490]   - Field: ‘conditions’
[18:03:54.490]   - Field: ‘persistent’
[18:03:54.490]   - Field: ‘expr’
[18:03:54.490]   - Field: ‘uuid’
[18:03:54.491]   - Field: ‘seed’
[18:03:54.491]   - Field: ‘version’
[18:03:54.491]   - Field: ‘result’
[18:03:54.491]   - Field: ‘asynchronous’
[18:03:54.492]   - Field: ‘calls’
[18:03:54.492]   - Field: ‘globals’
[18:03:54.492]   - Field: ‘stdout’
[18:03:54.492]   - Field: ‘earlySignal’
[18:03:54.493]   - Field: ‘lazy’
[18:03:54.493]   - Field: ‘state’
[18:03:54.493] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:54.493] - Launch lazy future ...
[18:03:54.494] Packages needed by the future expression (n = 0): <none>
[18:03:54.494] Packages needed by future strategies (n = 0): <none>
[18:03:54.495] {
[18:03:54.495]     {
[18:03:54.495]         {
[18:03:54.495]             ...future.startTime <- base::Sys.time()
[18:03:54.495]             {
[18:03:54.495]                 {
[18:03:54.495]                   {
[18:03:54.495]                     {
[18:03:54.495]                       base::local({
[18:03:54.495]                         has_future <- base::requireNamespace("future", 
[18:03:54.495]                           quietly = TRUE)
[18:03:54.495]                         if (has_future) {
[18:03:54.495]                           ns <- base::getNamespace("future")
[18:03:54.495]                           version <- ns[[".package"]][["version"]]
[18:03:54.495]                           if (is.null(version)) 
[18:03:54.495]                             version <- utils::packageVersion("future")
[18:03:54.495]                         }
[18:03:54.495]                         else {
[18:03:54.495]                           version <- NULL
[18:03:54.495]                         }
[18:03:54.495]                         if (!has_future || version < "1.8.0") {
[18:03:54.495]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:54.495]                             "", base::R.version$version.string), 
[18:03:54.495]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:54.495]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:54.495]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:54.495]                               "release", "version")], collapse = " "), 
[18:03:54.495]                             hostname = base::Sys.info()[["nodename"]])
[18:03:54.495]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:54.495]                             info)
[18:03:54.495]                           info <- base::paste(info, collapse = "; ")
[18:03:54.495]                           if (!has_future) {
[18:03:54.495]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:54.495]                               info)
[18:03:54.495]                           }
[18:03:54.495]                           else {
[18:03:54.495]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:54.495]                               info, version)
[18:03:54.495]                           }
[18:03:54.495]                           base::stop(msg)
[18:03:54.495]                         }
[18:03:54.495]                       })
[18:03:54.495]                     }
[18:03:54.495]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:54.495]                     base::options(mc.cores = 1L)
[18:03:54.495]                   }
[18:03:54.495]                   ...future.strategy.old <- future::plan("list")
[18:03:54.495]                   options(future.plan = NULL)
[18:03:54.495]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.495]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:54.495]                 }
[18:03:54.495]                 ...future.workdir <- getwd()
[18:03:54.495]             }
[18:03:54.495]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:54.495]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:54.495]         }
[18:03:54.495]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:54.495]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:54.495]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:54.495]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:54.495]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:54.495]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:54.495]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:54.495]             base::names(...future.oldOptions))
[18:03:54.495]     }
[18:03:54.495]     if (FALSE) {
[18:03:54.495]     }
[18:03:54.495]     else {
[18:03:54.495]         if (TRUE) {
[18:03:54.495]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:54.495]                 open = "w")
[18:03:54.495]         }
[18:03:54.495]         else {
[18:03:54.495]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:54.495]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:54.495]         }
[18:03:54.495]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:54.495]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:54.495]             base::sink(type = "output", split = FALSE)
[18:03:54.495]             base::close(...future.stdout)
[18:03:54.495]         }, add = TRUE)
[18:03:54.495]     }
[18:03:54.495]     ...future.frame <- base::sys.nframe()
[18:03:54.495]     ...future.conditions <- base::list()
[18:03:54.495]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:54.495]     if (FALSE) {
[18:03:54.495]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:54.495]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:54.495]     }
[18:03:54.495]     ...future.result <- base::tryCatch({
[18:03:54.495]         base::withCallingHandlers({
[18:03:54.495]             ...future.value <- base::withVisible(base::local({
[18:03:54.495]                 ...future.makeSendCondition <- base::local({
[18:03:54.495]                   sendCondition <- NULL
[18:03:54.495]                   function(frame = 1L) {
[18:03:54.495]                     if (is.function(sendCondition)) 
[18:03:54.495]                       return(sendCondition)
[18:03:54.495]                     ns <- getNamespace("parallel")
[18:03:54.495]                     if (exists("sendData", mode = "function", 
[18:03:54.495]                       envir = ns)) {
[18:03:54.495]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:54.495]                         envir = ns)
[18:03:54.495]                       envir <- sys.frame(frame)
[18:03:54.495]                       master <- NULL
[18:03:54.495]                       while (!identical(envir, .GlobalEnv) && 
[18:03:54.495]                         !identical(envir, emptyenv())) {
[18:03:54.495]                         if (exists("master", mode = "list", envir = envir, 
[18:03:54.495]                           inherits = FALSE)) {
[18:03:54.495]                           master <- get("master", mode = "list", 
[18:03:54.495]                             envir = envir, inherits = FALSE)
[18:03:54.495]                           if (inherits(master, c("SOCKnode", 
[18:03:54.495]                             "SOCK0node"))) {
[18:03:54.495]                             sendCondition <<- function(cond) {
[18:03:54.495]                               data <- list(type = "VALUE", value = cond, 
[18:03:54.495]                                 success = TRUE)
[18:03:54.495]                               parallel_sendData(master, data)
[18:03:54.495]                             }
[18:03:54.495]                             return(sendCondition)
[18:03:54.495]                           }
[18:03:54.495]                         }
[18:03:54.495]                         frame <- frame + 1L
[18:03:54.495]                         envir <- sys.frame(frame)
[18:03:54.495]                       }
[18:03:54.495]                     }
[18:03:54.495]                     sendCondition <<- function(cond) NULL
[18:03:54.495]                   }
[18:03:54.495]                 })
[18:03:54.495]                 withCallingHandlers({
[18:03:54.495]                   {
[18:03:54.495]                     42
[18:03:54.495]                   }
[18:03:54.495]                 }, immediateCondition = function(cond) {
[18:03:54.495]                   sendCondition <- ...future.makeSendCondition()
[18:03:54.495]                   sendCondition(cond)
[18:03:54.495]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.495]                   {
[18:03:54.495]                     inherits <- base::inherits
[18:03:54.495]                     invokeRestart <- base::invokeRestart
[18:03:54.495]                     is.null <- base::is.null
[18:03:54.495]                     muffled <- FALSE
[18:03:54.495]                     if (inherits(cond, "message")) {
[18:03:54.495]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:54.495]                       if (muffled) 
[18:03:54.495]                         invokeRestart("muffleMessage")
[18:03:54.495]                     }
[18:03:54.495]                     else if (inherits(cond, "warning")) {
[18:03:54.495]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:54.495]                       if (muffled) 
[18:03:54.495]                         invokeRestart("muffleWarning")
[18:03:54.495]                     }
[18:03:54.495]                     else if (inherits(cond, "condition")) {
[18:03:54.495]                       if (!is.null(pattern)) {
[18:03:54.495]                         computeRestarts <- base::computeRestarts
[18:03:54.495]                         grepl <- base::grepl
[18:03:54.495]                         restarts <- computeRestarts(cond)
[18:03:54.495]                         for (restart in restarts) {
[18:03:54.495]                           name <- restart$name
[18:03:54.495]                           if (is.null(name)) 
[18:03:54.495]                             next
[18:03:54.495]                           if (!grepl(pattern, name)) 
[18:03:54.495]                             next
[18:03:54.495]                           invokeRestart(restart)
[18:03:54.495]                           muffled <- TRUE
[18:03:54.495]                           break
[18:03:54.495]                         }
[18:03:54.495]                       }
[18:03:54.495]                     }
[18:03:54.495]                     invisible(muffled)
[18:03:54.495]                   }
[18:03:54.495]                   muffleCondition(cond)
[18:03:54.495]                 })
[18:03:54.495]             }))
[18:03:54.495]             future::FutureResult(value = ...future.value$value, 
[18:03:54.495]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.495]                   ...future.rng), globalenv = if (FALSE) 
[18:03:54.495]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:54.495]                     ...future.globalenv.names))
[18:03:54.495]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:54.495]         }, condition = base::local({
[18:03:54.495]             c <- base::c
[18:03:54.495]             inherits <- base::inherits
[18:03:54.495]             invokeRestart <- base::invokeRestart
[18:03:54.495]             length <- base::length
[18:03:54.495]             list <- base::list
[18:03:54.495]             seq.int <- base::seq.int
[18:03:54.495]             signalCondition <- base::signalCondition
[18:03:54.495]             sys.calls <- base::sys.calls
[18:03:54.495]             `[[` <- base::`[[`
[18:03:54.495]             `+` <- base::`+`
[18:03:54.495]             `<<-` <- base::`<<-`
[18:03:54.495]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:54.495]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:54.495]                   3L)]
[18:03:54.495]             }
[18:03:54.495]             function(cond) {
[18:03:54.495]                 is_error <- inherits(cond, "error")
[18:03:54.495]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:54.495]                   NULL)
[18:03:54.495]                 if (is_error) {
[18:03:54.495]                   sessionInformation <- function() {
[18:03:54.495]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:54.495]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:54.495]                       search = base::search(), system = base::Sys.info())
[18:03:54.495]                   }
[18:03:54.495]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.495]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:54.495]                     cond$call), session = sessionInformation(), 
[18:03:54.495]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:54.495]                   signalCondition(cond)
[18:03:54.495]                 }
[18:03:54.495]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:54.495]                 "immediateCondition"))) {
[18:03:54.495]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:54.495]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.495]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:54.495]                   if (TRUE && !signal) {
[18:03:54.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.495]                     {
[18:03:54.495]                       inherits <- base::inherits
[18:03:54.495]                       invokeRestart <- base::invokeRestart
[18:03:54.495]                       is.null <- base::is.null
[18:03:54.495]                       muffled <- FALSE
[18:03:54.495]                       if (inherits(cond, "message")) {
[18:03:54.495]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.495]                         if (muffled) 
[18:03:54.495]                           invokeRestart("muffleMessage")
[18:03:54.495]                       }
[18:03:54.495]                       else if (inherits(cond, "warning")) {
[18:03:54.495]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.495]                         if (muffled) 
[18:03:54.495]                           invokeRestart("muffleWarning")
[18:03:54.495]                       }
[18:03:54.495]                       else if (inherits(cond, "condition")) {
[18:03:54.495]                         if (!is.null(pattern)) {
[18:03:54.495]                           computeRestarts <- base::computeRestarts
[18:03:54.495]                           grepl <- base::grepl
[18:03:54.495]                           restarts <- computeRestarts(cond)
[18:03:54.495]                           for (restart in restarts) {
[18:03:54.495]                             name <- restart$name
[18:03:54.495]                             if (is.null(name)) 
[18:03:54.495]                               next
[18:03:54.495]                             if (!grepl(pattern, name)) 
[18:03:54.495]                               next
[18:03:54.495]                             invokeRestart(restart)
[18:03:54.495]                             muffled <- TRUE
[18:03:54.495]                             break
[18:03:54.495]                           }
[18:03:54.495]                         }
[18:03:54.495]                       }
[18:03:54.495]                       invisible(muffled)
[18:03:54.495]                     }
[18:03:54.495]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.495]                   }
[18:03:54.495]                 }
[18:03:54.495]                 else {
[18:03:54.495]                   if (TRUE) {
[18:03:54.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.495]                     {
[18:03:54.495]                       inherits <- base::inherits
[18:03:54.495]                       invokeRestart <- base::invokeRestart
[18:03:54.495]                       is.null <- base::is.null
[18:03:54.495]                       muffled <- FALSE
[18:03:54.495]                       if (inherits(cond, "message")) {
[18:03:54.495]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.495]                         if (muffled) 
[18:03:54.495]                           invokeRestart("muffleMessage")
[18:03:54.495]                       }
[18:03:54.495]                       else if (inherits(cond, "warning")) {
[18:03:54.495]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.495]                         if (muffled) 
[18:03:54.495]                           invokeRestart("muffleWarning")
[18:03:54.495]                       }
[18:03:54.495]                       else if (inherits(cond, "condition")) {
[18:03:54.495]                         if (!is.null(pattern)) {
[18:03:54.495]                           computeRestarts <- base::computeRestarts
[18:03:54.495]                           grepl <- base::grepl
[18:03:54.495]                           restarts <- computeRestarts(cond)
[18:03:54.495]                           for (restart in restarts) {
[18:03:54.495]                             name <- restart$name
[18:03:54.495]                             if (is.null(name)) 
[18:03:54.495]                               next
[18:03:54.495]                             if (!grepl(pattern, name)) 
[18:03:54.495]                               next
[18:03:54.495]                             invokeRestart(restart)
[18:03:54.495]                             muffled <- TRUE
[18:03:54.495]                             break
[18:03:54.495]                           }
[18:03:54.495]                         }
[18:03:54.495]                       }
[18:03:54.495]                       invisible(muffled)
[18:03:54.495]                     }
[18:03:54.495]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.495]                   }
[18:03:54.495]                 }
[18:03:54.495]             }
[18:03:54.495]         }))
[18:03:54.495]     }, error = function(ex) {
[18:03:54.495]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:54.495]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.495]                 ...future.rng), started = ...future.startTime, 
[18:03:54.495]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:54.495]             version = "1.8"), class = "FutureResult")
[18:03:54.495]     }, finally = {
[18:03:54.495]         if (!identical(...future.workdir, getwd())) 
[18:03:54.495]             setwd(...future.workdir)
[18:03:54.495]         {
[18:03:54.495]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:54.495]                 ...future.oldOptions$nwarnings <- NULL
[18:03:54.495]             }
[18:03:54.495]             base::options(...future.oldOptions)
[18:03:54.495]             if (.Platform$OS.type == "windows") {
[18:03:54.495]                 old_names <- names(...future.oldEnvVars)
[18:03:54.495]                 envs <- base::Sys.getenv()
[18:03:54.495]                 names <- names(envs)
[18:03:54.495]                 common <- intersect(names, old_names)
[18:03:54.495]                 added <- setdiff(names, old_names)
[18:03:54.495]                 removed <- setdiff(old_names, names)
[18:03:54.495]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:54.495]                   envs[common]]
[18:03:54.495]                 NAMES <- toupper(changed)
[18:03:54.495]                 args <- list()
[18:03:54.495]                 for (kk in seq_along(NAMES)) {
[18:03:54.495]                   name <- changed[[kk]]
[18:03:54.495]                   NAME <- NAMES[[kk]]
[18:03:54.495]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.495]                     next
[18:03:54.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.495]                 }
[18:03:54.495]                 NAMES <- toupper(added)
[18:03:54.495]                 for (kk in seq_along(NAMES)) {
[18:03:54.495]                   name <- added[[kk]]
[18:03:54.495]                   NAME <- NAMES[[kk]]
[18:03:54.495]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.495]                     next
[18:03:54.495]                   args[[name]] <- ""
[18:03:54.495]                 }
[18:03:54.495]                 NAMES <- toupper(removed)
[18:03:54.495]                 for (kk in seq_along(NAMES)) {
[18:03:54.495]                   name <- removed[[kk]]
[18:03:54.495]                   NAME <- NAMES[[kk]]
[18:03:54.495]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.495]                     next
[18:03:54.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.495]                 }
[18:03:54.495]                 if (length(args) > 0) 
[18:03:54.495]                   base::do.call(base::Sys.setenv, args = args)
[18:03:54.495]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:54.495]             }
[18:03:54.495]             else {
[18:03:54.495]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:54.495]             }
[18:03:54.495]             {
[18:03:54.495]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:54.495]                   0L) {
[18:03:54.495]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:54.495]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:54.495]                   base::options(opts)
[18:03:54.495]                 }
[18:03:54.495]                 {
[18:03:54.495]                   {
[18:03:54.495]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:54.495]                     NULL
[18:03:54.495]                   }
[18:03:54.495]                   options(future.plan = NULL)
[18:03:54.495]                   if (is.na(NA_character_)) 
[18:03:54.495]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.495]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:54.495]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:54.495]                     .init = FALSE)
[18:03:54.495]                 }
[18:03:54.495]             }
[18:03:54.495]         }
[18:03:54.495]     })
[18:03:54.495]     if (TRUE) {
[18:03:54.495]         base::sink(type = "output", split = FALSE)
[18:03:54.495]         if (TRUE) {
[18:03:54.495]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:54.495]         }
[18:03:54.495]         else {
[18:03:54.495]             ...future.result["stdout"] <- base::list(NULL)
[18:03:54.495]         }
[18:03:54.495]         base::close(...future.stdout)
[18:03:54.495]         ...future.stdout <- NULL
[18:03:54.495]     }
[18:03:54.495]     ...future.result$conditions <- ...future.conditions
[18:03:54.495]     ...future.result$finished <- base::Sys.time()
[18:03:54.495]     ...future.result
[18:03:54.495] }
[18:03:54.502] MultisessionFuture started
[18:03:54.502] - Launch lazy future ... done
[18:03:54.502] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.515] result() for ClusterFuture ...
[18:03:54.515] receiveMessageFromWorker() for ClusterFuture ...
[18:03:54.516] - Validating connection of MultisessionFuture
[18:03:54.545] - received message: FutureResult
[18:03:54.546] - Received FutureResult
[18:03:54.546] - Erased future from FutureRegistry
[18:03:54.547] result() for ClusterFuture ...
[18:03:54.547] - result already collected: FutureResult
[18:03:54.547] result() for ClusterFuture ... done
[18:03:54.547] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:54.548] result() for ClusterFuture ... done
[18:03:54.548] result() for ClusterFuture ...
[18:03:54.548] - result already collected: FutureResult
[18:03:54.548] result() for ClusterFuture ... done
[18:03:54.556] getGlobalsAndPackages() ...
[18:03:54.556] 
[18:03:54.556] - globals: [0] <none>
[18:03:54.557] getGlobalsAndPackages() ... DONE
[18:03:54.580] Packages needed by the future expression (n = 0): <none>
[18:03:54.580] Packages needed by future strategies (n = 0): <none>
[18:03:54.581] {
[18:03:54.581]     {
[18:03:54.581]         {
[18:03:54.581]             ...future.startTime <- base::Sys.time()
[18:03:54.581]             {
[18:03:54.581]                 {
[18:03:54.581]                   {
[18:03:54.581]                     {
[18:03:54.581]                       base::local({
[18:03:54.581]                         has_future <- base::requireNamespace("future", 
[18:03:54.581]                           quietly = TRUE)
[18:03:54.581]                         if (has_future) {
[18:03:54.581]                           ns <- base::getNamespace("future")
[18:03:54.581]                           version <- ns[[".package"]][["version"]]
[18:03:54.581]                           if (is.null(version)) 
[18:03:54.581]                             version <- utils::packageVersion("future")
[18:03:54.581]                         }
[18:03:54.581]                         else {
[18:03:54.581]                           version <- NULL
[18:03:54.581]                         }
[18:03:54.581]                         if (!has_future || version < "1.8.0") {
[18:03:54.581]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:54.581]                             "", base::R.version$version.string), 
[18:03:54.581]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:54.581]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:54.581]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:54.581]                               "release", "version")], collapse = " "), 
[18:03:54.581]                             hostname = base::Sys.info()[["nodename"]])
[18:03:54.581]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:54.581]                             info)
[18:03:54.581]                           info <- base::paste(info, collapse = "; ")
[18:03:54.581]                           if (!has_future) {
[18:03:54.581]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:54.581]                               info)
[18:03:54.581]                           }
[18:03:54.581]                           else {
[18:03:54.581]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:54.581]                               info, version)
[18:03:54.581]                           }
[18:03:54.581]                           base::stop(msg)
[18:03:54.581]                         }
[18:03:54.581]                       })
[18:03:54.581]                     }
[18:03:54.581]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:54.581]                     base::options(mc.cores = 1L)
[18:03:54.581]                   }
[18:03:54.581]                   ...future.strategy.old <- future::plan("list")
[18:03:54.581]                   options(future.plan = NULL)
[18:03:54.581]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.581]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:54.581]                 }
[18:03:54.581]                 ...future.workdir <- getwd()
[18:03:54.581]             }
[18:03:54.581]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:54.581]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:54.581]         }
[18:03:54.581]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:54.581]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:54.581]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:54.581]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:54.581]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:54.581]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:54.581]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:54.581]             base::names(...future.oldOptions))
[18:03:54.581]     }
[18:03:54.581]     if (FALSE) {
[18:03:54.581]     }
[18:03:54.581]     else {
[18:03:54.581]         if (TRUE) {
[18:03:54.581]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:54.581]                 open = "w")
[18:03:54.581]         }
[18:03:54.581]         else {
[18:03:54.581]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:54.581]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:54.581]         }
[18:03:54.581]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:54.581]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:54.581]             base::sink(type = "output", split = FALSE)
[18:03:54.581]             base::close(...future.stdout)
[18:03:54.581]         }, add = TRUE)
[18:03:54.581]     }
[18:03:54.581]     ...future.frame <- base::sys.nframe()
[18:03:54.581]     ...future.conditions <- base::list()
[18:03:54.581]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:54.581]     if (FALSE) {
[18:03:54.581]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:54.581]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:54.581]     }
[18:03:54.581]     ...future.result <- base::tryCatch({
[18:03:54.581]         base::withCallingHandlers({
[18:03:54.581]             ...future.value <- base::withVisible(base::local({
[18:03:54.581]                 ...future.makeSendCondition <- base::local({
[18:03:54.581]                   sendCondition <- NULL
[18:03:54.581]                   function(frame = 1L) {
[18:03:54.581]                     if (is.function(sendCondition)) 
[18:03:54.581]                       return(sendCondition)
[18:03:54.581]                     ns <- getNamespace("parallel")
[18:03:54.581]                     if (exists("sendData", mode = "function", 
[18:03:54.581]                       envir = ns)) {
[18:03:54.581]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:54.581]                         envir = ns)
[18:03:54.581]                       envir <- sys.frame(frame)
[18:03:54.581]                       master <- NULL
[18:03:54.581]                       while (!identical(envir, .GlobalEnv) && 
[18:03:54.581]                         !identical(envir, emptyenv())) {
[18:03:54.581]                         if (exists("master", mode = "list", envir = envir, 
[18:03:54.581]                           inherits = FALSE)) {
[18:03:54.581]                           master <- get("master", mode = "list", 
[18:03:54.581]                             envir = envir, inherits = FALSE)
[18:03:54.581]                           if (inherits(master, c("SOCKnode", 
[18:03:54.581]                             "SOCK0node"))) {
[18:03:54.581]                             sendCondition <<- function(cond) {
[18:03:54.581]                               data <- list(type = "VALUE", value = cond, 
[18:03:54.581]                                 success = TRUE)
[18:03:54.581]                               parallel_sendData(master, data)
[18:03:54.581]                             }
[18:03:54.581]                             return(sendCondition)
[18:03:54.581]                           }
[18:03:54.581]                         }
[18:03:54.581]                         frame <- frame + 1L
[18:03:54.581]                         envir <- sys.frame(frame)
[18:03:54.581]                       }
[18:03:54.581]                     }
[18:03:54.581]                     sendCondition <<- function(cond) NULL
[18:03:54.581]                   }
[18:03:54.581]                 })
[18:03:54.581]                 withCallingHandlers({
[18:03:54.581]                   42
[18:03:54.581]                 }, immediateCondition = function(cond) {
[18:03:54.581]                   sendCondition <- ...future.makeSendCondition()
[18:03:54.581]                   sendCondition(cond)
[18:03:54.581]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.581]                   {
[18:03:54.581]                     inherits <- base::inherits
[18:03:54.581]                     invokeRestart <- base::invokeRestart
[18:03:54.581]                     is.null <- base::is.null
[18:03:54.581]                     muffled <- FALSE
[18:03:54.581]                     if (inherits(cond, "message")) {
[18:03:54.581]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:54.581]                       if (muffled) 
[18:03:54.581]                         invokeRestart("muffleMessage")
[18:03:54.581]                     }
[18:03:54.581]                     else if (inherits(cond, "warning")) {
[18:03:54.581]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:54.581]                       if (muffled) 
[18:03:54.581]                         invokeRestart("muffleWarning")
[18:03:54.581]                     }
[18:03:54.581]                     else if (inherits(cond, "condition")) {
[18:03:54.581]                       if (!is.null(pattern)) {
[18:03:54.581]                         computeRestarts <- base::computeRestarts
[18:03:54.581]                         grepl <- base::grepl
[18:03:54.581]                         restarts <- computeRestarts(cond)
[18:03:54.581]                         for (restart in restarts) {
[18:03:54.581]                           name <- restart$name
[18:03:54.581]                           if (is.null(name)) 
[18:03:54.581]                             next
[18:03:54.581]                           if (!grepl(pattern, name)) 
[18:03:54.581]                             next
[18:03:54.581]                           invokeRestart(restart)
[18:03:54.581]                           muffled <- TRUE
[18:03:54.581]                           break
[18:03:54.581]                         }
[18:03:54.581]                       }
[18:03:54.581]                     }
[18:03:54.581]                     invisible(muffled)
[18:03:54.581]                   }
[18:03:54.581]                   muffleCondition(cond)
[18:03:54.581]                 })
[18:03:54.581]             }))
[18:03:54.581]             future::FutureResult(value = ...future.value$value, 
[18:03:54.581]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.581]                   ...future.rng), globalenv = if (FALSE) 
[18:03:54.581]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:54.581]                     ...future.globalenv.names))
[18:03:54.581]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:54.581]         }, condition = base::local({
[18:03:54.581]             c <- base::c
[18:03:54.581]             inherits <- base::inherits
[18:03:54.581]             invokeRestart <- base::invokeRestart
[18:03:54.581]             length <- base::length
[18:03:54.581]             list <- base::list
[18:03:54.581]             seq.int <- base::seq.int
[18:03:54.581]             signalCondition <- base::signalCondition
[18:03:54.581]             sys.calls <- base::sys.calls
[18:03:54.581]             `[[` <- base::`[[`
[18:03:54.581]             `+` <- base::`+`
[18:03:54.581]             `<<-` <- base::`<<-`
[18:03:54.581]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:54.581]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:54.581]                   3L)]
[18:03:54.581]             }
[18:03:54.581]             function(cond) {
[18:03:54.581]                 is_error <- inherits(cond, "error")
[18:03:54.581]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:54.581]                   NULL)
[18:03:54.581]                 if (is_error) {
[18:03:54.581]                   sessionInformation <- function() {
[18:03:54.581]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:54.581]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:54.581]                       search = base::search(), system = base::Sys.info())
[18:03:54.581]                   }
[18:03:54.581]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.581]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:54.581]                     cond$call), session = sessionInformation(), 
[18:03:54.581]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:54.581]                   signalCondition(cond)
[18:03:54.581]                 }
[18:03:54.581]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:54.581]                 "immediateCondition"))) {
[18:03:54.581]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:54.581]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.581]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:54.581]                   if (TRUE && !signal) {
[18:03:54.581]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.581]                     {
[18:03:54.581]                       inherits <- base::inherits
[18:03:54.581]                       invokeRestart <- base::invokeRestart
[18:03:54.581]                       is.null <- base::is.null
[18:03:54.581]                       muffled <- FALSE
[18:03:54.581]                       if (inherits(cond, "message")) {
[18:03:54.581]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.581]                         if (muffled) 
[18:03:54.581]                           invokeRestart("muffleMessage")
[18:03:54.581]                       }
[18:03:54.581]                       else if (inherits(cond, "warning")) {
[18:03:54.581]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.581]                         if (muffled) 
[18:03:54.581]                           invokeRestart("muffleWarning")
[18:03:54.581]                       }
[18:03:54.581]                       else if (inherits(cond, "condition")) {
[18:03:54.581]                         if (!is.null(pattern)) {
[18:03:54.581]                           computeRestarts <- base::computeRestarts
[18:03:54.581]                           grepl <- base::grepl
[18:03:54.581]                           restarts <- computeRestarts(cond)
[18:03:54.581]                           for (restart in restarts) {
[18:03:54.581]                             name <- restart$name
[18:03:54.581]                             if (is.null(name)) 
[18:03:54.581]                               next
[18:03:54.581]                             if (!grepl(pattern, name)) 
[18:03:54.581]                               next
[18:03:54.581]                             invokeRestart(restart)
[18:03:54.581]                             muffled <- TRUE
[18:03:54.581]                             break
[18:03:54.581]                           }
[18:03:54.581]                         }
[18:03:54.581]                       }
[18:03:54.581]                       invisible(muffled)
[18:03:54.581]                     }
[18:03:54.581]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.581]                   }
[18:03:54.581]                 }
[18:03:54.581]                 else {
[18:03:54.581]                   if (TRUE) {
[18:03:54.581]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.581]                     {
[18:03:54.581]                       inherits <- base::inherits
[18:03:54.581]                       invokeRestart <- base::invokeRestart
[18:03:54.581]                       is.null <- base::is.null
[18:03:54.581]                       muffled <- FALSE
[18:03:54.581]                       if (inherits(cond, "message")) {
[18:03:54.581]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.581]                         if (muffled) 
[18:03:54.581]                           invokeRestart("muffleMessage")
[18:03:54.581]                       }
[18:03:54.581]                       else if (inherits(cond, "warning")) {
[18:03:54.581]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.581]                         if (muffled) 
[18:03:54.581]                           invokeRestart("muffleWarning")
[18:03:54.581]                       }
[18:03:54.581]                       else if (inherits(cond, "condition")) {
[18:03:54.581]                         if (!is.null(pattern)) {
[18:03:54.581]                           computeRestarts <- base::computeRestarts
[18:03:54.581]                           grepl <- base::grepl
[18:03:54.581]                           restarts <- computeRestarts(cond)
[18:03:54.581]                           for (restart in restarts) {
[18:03:54.581]                             name <- restart$name
[18:03:54.581]                             if (is.null(name)) 
[18:03:54.581]                               next
[18:03:54.581]                             if (!grepl(pattern, name)) 
[18:03:54.581]                               next
[18:03:54.581]                             invokeRestart(restart)
[18:03:54.581]                             muffled <- TRUE
[18:03:54.581]                             break
[18:03:54.581]                           }
[18:03:54.581]                         }
[18:03:54.581]                       }
[18:03:54.581]                       invisible(muffled)
[18:03:54.581]                     }
[18:03:54.581]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.581]                   }
[18:03:54.581]                 }
[18:03:54.581]             }
[18:03:54.581]         }))
[18:03:54.581]     }, error = function(ex) {
[18:03:54.581]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:54.581]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.581]                 ...future.rng), started = ...future.startTime, 
[18:03:54.581]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:54.581]             version = "1.8"), class = "FutureResult")
[18:03:54.581]     }, finally = {
[18:03:54.581]         if (!identical(...future.workdir, getwd())) 
[18:03:54.581]             setwd(...future.workdir)
[18:03:54.581]         {
[18:03:54.581]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:54.581]                 ...future.oldOptions$nwarnings <- NULL
[18:03:54.581]             }
[18:03:54.581]             base::options(...future.oldOptions)
[18:03:54.581]             if (.Platform$OS.type == "windows") {
[18:03:54.581]                 old_names <- names(...future.oldEnvVars)
[18:03:54.581]                 envs <- base::Sys.getenv()
[18:03:54.581]                 names <- names(envs)
[18:03:54.581]                 common <- intersect(names, old_names)
[18:03:54.581]                 added <- setdiff(names, old_names)
[18:03:54.581]                 removed <- setdiff(old_names, names)
[18:03:54.581]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:54.581]                   envs[common]]
[18:03:54.581]                 NAMES <- toupper(changed)
[18:03:54.581]                 args <- list()
[18:03:54.581]                 for (kk in seq_along(NAMES)) {
[18:03:54.581]                   name <- changed[[kk]]
[18:03:54.581]                   NAME <- NAMES[[kk]]
[18:03:54.581]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.581]                     next
[18:03:54.581]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.581]                 }
[18:03:54.581]                 NAMES <- toupper(added)
[18:03:54.581]                 for (kk in seq_along(NAMES)) {
[18:03:54.581]                   name <- added[[kk]]
[18:03:54.581]                   NAME <- NAMES[[kk]]
[18:03:54.581]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.581]                     next
[18:03:54.581]                   args[[name]] <- ""
[18:03:54.581]                 }
[18:03:54.581]                 NAMES <- toupper(removed)
[18:03:54.581]                 for (kk in seq_along(NAMES)) {
[18:03:54.581]                   name <- removed[[kk]]
[18:03:54.581]                   NAME <- NAMES[[kk]]
[18:03:54.581]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.581]                     next
[18:03:54.581]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.581]                 }
[18:03:54.581]                 if (length(args) > 0) 
[18:03:54.581]                   base::do.call(base::Sys.setenv, args = args)
[18:03:54.581]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:54.581]             }
[18:03:54.581]             else {
[18:03:54.581]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:54.581]             }
[18:03:54.581]             {
[18:03:54.581]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:54.581]                   0L) {
[18:03:54.581]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:54.581]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:54.581]                   base::options(opts)
[18:03:54.581]                 }
[18:03:54.581]                 {
[18:03:54.581]                   {
[18:03:54.581]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:54.581]                     NULL
[18:03:54.581]                   }
[18:03:54.581]                   options(future.plan = NULL)
[18:03:54.581]                   if (is.na(NA_character_)) 
[18:03:54.581]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.581]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:54.581]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:54.581]                     .init = FALSE)
[18:03:54.581]                 }
[18:03:54.581]             }
[18:03:54.581]         }
[18:03:54.581]     })
[18:03:54.581]     if (TRUE) {
[18:03:54.581]         base::sink(type = "output", split = FALSE)
[18:03:54.581]         if (TRUE) {
[18:03:54.581]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:54.581]         }
[18:03:54.581]         else {
[18:03:54.581]             ...future.result["stdout"] <- base::list(NULL)
[18:03:54.581]         }
[18:03:54.581]         base::close(...future.stdout)
[18:03:54.581]         ...future.stdout <- NULL
[18:03:54.581]     }
[18:03:54.581]     ...future.result$conditions <- ...future.conditions
[18:03:54.581]     ...future.result$finished <- base::Sys.time()
[18:03:54.581]     ...future.result
[18:03:54.581] }
[18:03:54.592] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.605] result() for ClusterFuture ...
[18:03:54.605] receiveMessageFromWorker() for ClusterFuture ...
[18:03:54.605] - Validating connection of MultisessionFuture
[18:03:54.636] - received message: FutureResult
[18:03:54.637] - Received FutureResult
[18:03:54.637] - Erased future from FutureRegistry
[18:03:54.637] result() for ClusterFuture ...
[18:03:54.638] - result already collected: FutureResult
[18:03:54.638] result() for ClusterFuture ... done
[18:03:54.638] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:54.638] result() for ClusterFuture ... done
[18:03:54.639] result() for ClusterFuture ...
[18:03:54.639] - result already collected: FutureResult
[18:03:54.639] result() for ClusterFuture ... done
[18:03:54.639] getGlobalsAndPackages() ...
[18:03:54.640] Searching for globals...
[18:03:54.640] 
[18:03:54.641] Searching for globals ... DONE
[18:03:54.641] - globals: [0] <none>
[18:03:54.641] getGlobalsAndPackages() ... DONE
[18:03:54.642] run() for ‘Future’ ...
[18:03:54.642] - state: ‘created’
[18:03:54.642] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:54.668] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.669] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:54.669]   - Field: ‘node’
[18:03:54.669]   - Field: ‘label’
[18:03:54.670]   - Field: ‘local’
[18:03:54.670]   - Field: ‘owner’
[18:03:54.670]   - Field: ‘envir’
[18:03:54.670]   - Field: ‘workers’
[18:03:54.670]   - Field: ‘packages’
[18:03:54.671]   - Field: ‘gc’
[18:03:54.671]   - Field: ‘conditions’
[18:03:54.671]   - Field: ‘persistent’
[18:03:54.671]   - Field: ‘expr’
[18:03:54.671]   - Field: ‘uuid’
[18:03:54.672]   - Field: ‘seed’
[18:03:54.672]   - Field: ‘version’
[18:03:54.672]   - Field: ‘result’
[18:03:54.672]   - Field: ‘asynchronous’
[18:03:54.672]   - Field: ‘calls’
[18:03:54.673]   - Field: ‘globals’
[18:03:54.673]   - Field: ‘stdout’
[18:03:54.673]   - Field: ‘earlySignal’
[18:03:54.673]   - Field: ‘lazy’
[18:03:54.673]   - Field: ‘state’
[18:03:54.674] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:54.674] - Launch lazy future ...
[18:03:54.674] Packages needed by the future expression (n = 0): <none>
[18:03:54.675] Packages needed by future strategies (n = 0): <none>
[18:03:54.675] {
[18:03:54.675]     {
[18:03:54.675]         {
[18:03:54.675]             ...future.startTime <- base::Sys.time()
[18:03:54.675]             {
[18:03:54.675]                 {
[18:03:54.675]                   {
[18:03:54.675]                     {
[18:03:54.675]                       base::local({
[18:03:54.675]                         has_future <- base::requireNamespace("future", 
[18:03:54.675]                           quietly = TRUE)
[18:03:54.675]                         if (has_future) {
[18:03:54.675]                           ns <- base::getNamespace("future")
[18:03:54.675]                           version <- ns[[".package"]][["version"]]
[18:03:54.675]                           if (is.null(version)) 
[18:03:54.675]                             version <- utils::packageVersion("future")
[18:03:54.675]                         }
[18:03:54.675]                         else {
[18:03:54.675]                           version <- NULL
[18:03:54.675]                         }
[18:03:54.675]                         if (!has_future || version < "1.8.0") {
[18:03:54.675]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:54.675]                             "", base::R.version$version.string), 
[18:03:54.675]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:54.675]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:54.675]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:54.675]                               "release", "version")], collapse = " "), 
[18:03:54.675]                             hostname = base::Sys.info()[["nodename"]])
[18:03:54.675]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:54.675]                             info)
[18:03:54.675]                           info <- base::paste(info, collapse = "; ")
[18:03:54.675]                           if (!has_future) {
[18:03:54.675]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:54.675]                               info)
[18:03:54.675]                           }
[18:03:54.675]                           else {
[18:03:54.675]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:54.675]                               info, version)
[18:03:54.675]                           }
[18:03:54.675]                           base::stop(msg)
[18:03:54.675]                         }
[18:03:54.675]                       })
[18:03:54.675]                     }
[18:03:54.675]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:54.675]                     base::options(mc.cores = 1L)
[18:03:54.675]                   }
[18:03:54.675]                   ...future.strategy.old <- future::plan("list")
[18:03:54.675]                   options(future.plan = NULL)
[18:03:54.675]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.675]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:54.675]                 }
[18:03:54.675]                 ...future.workdir <- getwd()
[18:03:54.675]             }
[18:03:54.675]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:54.675]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:54.675]         }
[18:03:54.675]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:54.675]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:54.675]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:54.675]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:54.675]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:54.675]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:54.675]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:54.675]             base::names(...future.oldOptions))
[18:03:54.675]     }
[18:03:54.675]     if (FALSE) {
[18:03:54.675]     }
[18:03:54.675]     else {
[18:03:54.675]         if (TRUE) {
[18:03:54.675]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:54.675]                 open = "w")
[18:03:54.675]         }
[18:03:54.675]         else {
[18:03:54.675]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:54.675]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:54.675]         }
[18:03:54.675]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:54.675]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:54.675]             base::sink(type = "output", split = FALSE)
[18:03:54.675]             base::close(...future.stdout)
[18:03:54.675]         }, add = TRUE)
[18:03:54.675]     }
[18:03:54.675]     ...future.frame <- base::sys.nframe()
[18:03:54.675]     ...future.conditions <- base::list()
[18:03:54.675]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:54.675]     if (FALSE) {
[18:03:54.675]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:54.675]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:54.675]     }
[18:03:54.675]     ...future.result <- base::tryCatch({
[18:03:54.675]         base::withCallingHandlers({
[18:03:54.675]             ...future.value <- base::withVisible(base::local({
[18:03:54.675]                 ...future.makeSendCondition <- base::local({
[18:03:54.675]                   sendCondition <- NULL
[18:03:54.675]                   function(frame = 1L) {
[18:03:54.675]                     if (is.function(sendCondition)) 
[18:03:54.675]                       return(sendCondition)
[18:03:54.675]                     ns <- getNamespace("parallel")
[18:03:54.675]                     if (exists("sendData", mode = "function", 
[18:03:54.675]                       envir = ns)) {
[18:03:54.675]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:54.675]                         envir = ns)
[18:03:54.675]                       envir <- sys.frame(frame)
[18:03:54.675]                       master <- NULL
[18:03:54.675]                       while (!identical(envir, .GlobalEnv) && 
[18:03:54.675]                         !identical(envir, emptyenv())) {
[18:03:54.675]                         if (exists("master", mode = "list", envir = envir, 
[18:03:54.675]                           inherits = FALSE)) {
[18:03:54.675]                           master <- get("master", mode = "list", 
[18:03:54.675]                             envir = envir, inherits = FALSE)
[18:03:54.675]                           if (inherits(master, c("SOCKnode", 
[18:03:54.675]                             "SOCK0node"))) {
[18:03:54.675]                             sendCondition <<- function(cond) {
[18:03:54.675]                               data <- list(type = "VALUE", value = cond, 
[18:03:54.675]                                 success = TRUE)
[18:03:54.675]                               parallel_sendData(master, data)
[18:03:54.675]                             }
[18:03:54.675]                             return(sendCondition)
[18:03:54.675]                           }
[18:03:54.675]                         }
[18:03:54.675]                         frame <- frame + 1L
[18:03:54.675]                         envir <- sys.frame(frame)
[18:03:54.675]                       }
[18:03:54.675]                     }
[18:03:54.675]                     sendCondition <<- function(cond) NULL
[18:03:54.675]                   }
[18:03:54.675]                 })
[18:03:54.675]                 withCallingHandlers({
[18:03:54.675]                   42
[18:03:54.675]                 }, immediateCondition = function(cond) {
[18:03:54.675]                   sendCondition <- ...future.makeSendCondition()
[18:03:54.675]                   sendCondition(cond)
[18:03:54.675]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.675]                   {
[18:03:54.675]                     inherits <- base::inherits
[18:03:54.675]                     invokeRestart <- base::invokeRestart
[18:03:54.675]                     is.null <- base::is.null
[18:03:54.675]                     muffled <- FALSE
[18:03:54.675]                     if (inherits(cond, "message")) {
[18:03:54.675]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:54.675]                       if (muffled) 
[18:03:54.675]                         invokeRestart("muffleMessage")
[18:03:54.675]                     }
[18:03:54.675]                     else if (inherits(cond, "warning")) {
[18:03:54.675]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:54.675]                       if (muffled) 
[18:03:54.675]                         invokeRestart("muffleWarning")
[18:03:54.675]                     }
[18:03:54.675]                     else if (inherits(cond, "condition")) {
[18:03:54.675]                       if (!is.null(pattern)) {
[18:03:54.675]                         computeRestarts <- base::computeRestarts
[18:03:54.675]                         grepl <- base::grepl
[18:03:54.675]                         restarts <- computeRestarts(cond)
[18:03:54.675]                         for (restart in restarts) {
[18:03:54.675]                           name <- restart$name
[18:03:54.675]                           if (is.null(name)) 
[18:03:54.675]                             next
[18:03:54.675]                           if (!grepl(pattern, name)) 
[18:03:54.675]                             next
[18:03:54.675]                           invokeRestart(restart)
[18:03:54.675]                           muffled <- TRUE
[18:03:54.675]                           break
[18:03:54.675]                         }
[18:03:54.675]                       }
[18:03:54.675]                     }
[18:03:54.675]                     invisible(muffled)
[18:03:54.675]                   }
[18:03:54.675]                   muffleCondition(cond)
[18:03:54.675]                 })
[18:03:54.675]             }))
[18:03:54.675]             future::FutureResult(value = ...future.value$value, 
[18:03:54.675]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.675]                   ...future.rng), globalenv = if (FALSE) 
[18:03:54.675]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:54.675]                     ...future.globalenv.names))
[18:03:54.675]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:54.675]         }, condition = base::local({
[18:03:54.675]             c <- base::c
[18:03:54.675]             inherits <- base::inherits
[18:03:54.675]             invokeRestart <- base::invokeRestart
[18:03:54.675]             length <- base::length
[18:03:54.675]             list <- base::list
[18:03:54.675]             seq.int <- base::seq.int
[18:03:54.675]             signalCondition <- base::signalCondition
[18:03:54.675]             sys.calls <- base::sys.calls
[18:03:54.675]             `[[` <- base::`[[`
[18:03:54.675]             `+` <- base::`+`
[18:03:54.675]             `<<-` <- base::`<<-`
[18:03:54.675]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:54.675]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:54.675]                   3L)]
[18:03:54.675]             }
[18:03:54.675]             function(cond) {
[18:03:54.675]                 is_error <- inherits(cond, "error")
[18:03:54.675]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:54.675]                   NULL)
[18:03:54.675]                 if (is_error) {
[18:03:54.675]                   sessionInformation <- function() {
[18:03:54.675]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:54.675]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:54.675]                       search = base::search(), system = base::Sys.info())
[18:03:54.675]                   }
[18:03:54.675]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.675]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:54.675]                     cond$call), session = sessionInformation(), 
[18:03:54.675]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:54.675]                   signalCondition(cond)
[18:03:54.675]                 }
[18:03:54.675]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:54.675]                 "immediateCondition"))) {
[18:03:54.675]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:54.675]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.675]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:54.675]                   if (TRUE && !signal) {
[18:03:54.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.675]                     {
[18:03:54.675]                       inherits <- base::inherits
[18:03:54.675]                       invokeRestart <- base::invokeRestart
[18:03:54.675]                       is.null <- base::is.null
[18:03:54.675]                       muffled <- FALSE
[18:03:54.675]                       if (inherits(cond, "message")) {
[18:03:54.675]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.675]                         if (muffled) 
[18:03:54.675]                           invokeRestart("muffleMessage")
[18:03:54.675]                       }
[18:03:54.675]                       else if (inherits(cond, "warning")) {
[18:03:54.675]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.675]                         if (muffled) 
[18:03:54.675]                           invokeRestart("muffleWarning")
[18:03:54.675]                       }
[18:03:54.675]                       else if (inherits(cond, "condition")) {
[18:03:54.675]                         if (!is.null(pattern)) {
[18:03:54.675]                           computeRestarts <- base::computeRestarts
[18:03:54.675]                           grepl <- base::grepl
[18:03:54.675]                           restarts <- computeRestarts(cond)
[18:03:54.675]                           for (restart in restarts) {
[18:03:54.675]                             name <- restart$name
[18:03:54.675]                             if (is.null(name)) 
[18:03:54.675]                               next
[18:03:54.675]                             if (!grepl(pattern, name)) 
[18:03:54.675]                               next
[18:03:54.675]                             invokeRestart(restart)
[18:03:54.675]                             muffled <- TRUE
[18:03:54.675]                             break
[18:03:54.675]                           }
[18:03:54.675]                         }
[18:03:54.675]                       }
[18:03:54.675]                       invisible(muffled)
[18:03:54.675]                     }
[18:03:54.675]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.675]                   }
[18:03:54.675]                 }
[18:03:54.675]                 else {
[18:03:54.675]                   if (TRUE) {
[18:03:54.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.675]                     {
[18:03:54.675]                       inherits <- base::inherits
[18:03:54.675]                       invokeRestart <- base::invokeRestart
[18:03:54.675]                       is.null <- base::is.null
[18:03:54.675]                       muffled <- FALSE
[18:03:54.675]                       if (inherits(cond, "message")) {
[18:03:54.675]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.675]                         if (muffled) 
[18:03:54.675]                           invokeRestart("muffleMessage")
[18:03:54.675]                       }
[18:03:54.675]                       else if (inherits(cond, "warning")) {
[18:03:54.675]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.675]                         if (muffled) 
[18:03:54.675]                           invokeRestart("muffleWarning")
[18:03:54.675]                       }
[18:03:54.675]                       else if (inherits(cond, "condition")) {
[18:03:54.675]                         if (!is.null(pattern)) {
[18:03:54.675]                           computeRestarts <- base::computeRestarts
[18:03:54.675]                           grepl <- base::grepl
[18:03:54.675]                           restarts <- computeRestarts(cond)
[18:03:54.675]                           for (restart in restarts) {
[18:03:54.675]                             name <- restart$name
[18:03:54.675]                             if (is.null(name)) 
[18:03:54.675]                               next
[18:03:54.675]                             if (!grepl(pattern, name)) 
[18:03:54.675]                               next
[18:03:54.675]                             invokeRestart(restart)
[18:03:54.675]                             muffled <- TRUE
[18:03:54.675]                             break
[18:03:54.675]                           }
[18:03:54.675]                         }
[18:03:54.675]                       }
[18:03:54.675]                       invisible(muffled)
[18:03:54.675]                     }
[18:03:54.675]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.675]                   }
[18:03:54.675]                 }
[18:03:54.675]             }
[18:03:54.675]         }))
[18:03:54.675]     }, error = function(ex) {
[18:03:54.675]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:54.675]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.675]                 ...future.rng), started = ...future.startTime, 
[18:03:54.675]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:54.675]             version = "1.8"), class = "FutureResult")
[18:03:54.675]     }, finally = {
[18:03:54.675]         if (!identical(...future.workdir, getwd())) 
[18:03:54.675]             setwd(...future.workdir)
[18:03:54.675]         {
[18:03:54.675]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:54.675]                 ...future.oldOptions$nwarnings <- NULL
[18:03:54.675]             }
[18:03:54.675]             base::options(...future.oldOptions)
[18:03:54.675]             if (.Platform$OS.type == "windows") {
[18:03:54.675]                 old_names <- names(...future.oldEnvVars)
[18:03:54.675]                 envs <- base::Sys.getenv()
[18:03:54.675]                 names <- names(envs)
[18:03:54.675]                 common <- intersect(names, old_names)
[18:03:54.675]                 added <- setdiff(names, old_names)
[18:03:54.675]                 removed <- setdiff(old_names, names)
[18:03:54.675]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:54.675]                   envs[common]]
[18:03:54.675]                 NAMES <- toupper(changed)
[18:03:54.675]                 args <- list()
[18:03:54.675]                 for (kk in seq_along(NAMES)) {
[18:03:54.675]                   name <- changed[[kk]]
[18:03:54.675]                   NAME <- NAMES[[kk]]
[18:03:54.675]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.675]                     next
[18:03:54.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.675]                 }
[18:03:54.675]                 NAMES <- toupper(added)
[18:03:54.675]                 for (kk in seq_along(NAMES)) {
[18:03:54.675]                   name <- added[[kk]]
[18:03:54.675]                   NAME <- NAMES[[kk]]
[18:03:54.675]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.675]                     next
[18:03:54.675]                   args[[name]] <- ""
[18:03:54.675]                 }
[18:03:54.675]                 NAMES <- toupper(removed)
[18:03:54.675]                 for (kk in seq_along(NAMES)) {
[18:03:54.675]                   name <- removed[[kk]]
[18:03:54.675]                   NAME <- NAMES[[kk]]
[18:03:54.675]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.675]                     next
[18:03:54.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.675]                 }
[18:03:54.675]                 if (length(args) > 0) 
[18:03:54.675]                   base::do.call(base::Sys.setenv, args = args)
[18:03:54.675]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:54.675]             }
[18:03:54.675]             else {
[18:03:54.675]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:54.675]             }
[18:03:54.675]             {
[18:03:54.675]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:54.675]                   0L) {
[18:03:54.675]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:54.675]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:54.675]                   base::options(opts)
[18:03:54.675]                 }
[18:03:54.675]                 {
[18:03:54.675]                   {
[18:03:54.675]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:54.675]                     NULL
[18:03:54.675]                   }
[18:03:54.675]                   options(future.plan = NULL)
[18:03:54.675]                   if (is.na(NA_character_)) 
[18:03:54.675]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.675]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:54.675]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:54.675]                     .init = FALSE)
[18:03:54.675]                 }
[18:03:54.675]             }
[18:03:54.675]         }
[18:03:54.675]     })
[18:03:54.675]     if (TRUE) {
[18:03:54.675]         base::sink(type = "output", split = FALSE)
[18:03:54.675]         if (TRUE) {
[18:03:54.675]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:54.675]         }
[18:03:54.675]         else {
[18:03:54.675]             ...future.result["stdout"] <- base::list(NULL)
[18:03:54.675]         }
[18:03:54.675]         base::close(...future.stdout)
[18:03:54.675]         ...future.stdout <- NULL
[18:03:54.675]     }
[18:03:54.675]     ...future.result$conditions <- ...future.conditions
[18:03:54.675]     ...future.result$finished <- base::Sys.time()
[18:03:54.675]     ...future.result
[18:03:54.675] }
[18:03:54.681] MultisessionFuture started
[18:03:54.682] - Launch lazy future ... done
[18:03:54.682] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.695] result() for ClusterFuture ...
[18:03:54.695] receiveMessageFromWorker() for ClusterFuture ...
[18:03:54.695] - Validating connection of MultisessionFuture
[18:03:54.725] - received message: FutureResult
[18:03:54.726] - Received FutureResult
[18:03:54.726] - Erased future from FutureRegistry
[18:03:54.726] result() for ClusterFuture ...
[18:03:54.726] - result already collected: FutureResult
[18:03:54.727] result() for ClusterFuture ... done
[18:03:54.727] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:54.727] result() for ClusterFuture ... done
[18:03:54.727] result() for ClusterFuture ...
[18:03:54.727] - result already collected: FutureResult
[18:03:54.728] result() for ClusterFuture ... done
[18:03:54.728] getGlobalsAndPackages() ...
[18:03:54.729] Searching for globals...
[18:03:54.730] - globals found: [1] ‘{’
[18:03:54.730] Searching for globals ... DONE
[18:03:54.730] Resolving globals: FALSE
[18:03:54.731] 
[18:03:54.731] 
[18:03:54.731] getGlobalsAndPackages() ... DONE
[18:03:54.732] run() for ‘Future’ ...
[18:03:54.732] - state: ‘created’
[18:03:54.733] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[18:03:54.758] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.759] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[18:03:54.759]   - Field: ‘node’
[18:03:54.759]   - Field: ‘label’
[18:03:54.760]   - Field: ‘local’
[18:03:54.760]   - Field: ‘owner’
[18:03:54.760]   - Field: ‘envir’
[18:03:54.760]   - Field: ‘workers’
[18:03:54.761]   - Field: ‘packages’
[18:03:54.761]   - Field: ‘gc’
[18:03:54.761]   - Field: ‘conditions’
[18:03:54.761]   - Field: ‘persistent’
[18:03:54.761]   - Field: ‘expr’
[18:03:54.762]   - Field: ‘uuid’
[18:03:54.762]   - Field: ‘seed’
[18:03:54.762]   - Field: ‘version’
[18:03:54.762]   - Field: ‘result’
[18:03:54.763]   - Field: ‘asynchronous’
[18:03:54.763]   - Field: ‘calls’
[18:03:54.763]   - Field: ‘globals’
[18:03:54.763]   - Field: ‘stdout’
[18:03:54.763]   - Field: ‘earlySignal’
[18:03:54.764]   - Field: ‘lazy’
[18:03:54.764]   - Field: ‘state’
[18:03:54.764] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[18:03:54.764] - Launch lazy future ...
[18:03:54.765] Packages needed by the future expression (n = 0): <none>
[18:03:54.765] Packages needed by future strategies (n = 0): <none>
[18:03:54.766] {
[18:03:54.766]     {
[18:03:54.766]         {
[18:03:54.766]             ...future.startTime <- base::Sys.time()
[18:03:54.766]             {
[18:03:54.766]                 {
[18:03:54.766]                   {
[18:03:54.766]                     {
[18:03:54.766]                       base::local({
[18:03:54.766]                         has_future <- base::requireNamespace("future", 
[18:03:54.766]                           quietly = TRUE)
[18:03:54.766]                         if (has_future) {
[18:03:54.766]                           ns <- base::getNamespace("future")
[18:03:54.766]                           version <- ns[[".package"]][["version"]]
[18:03:54.766]                           if (is.null(version)) 
[18:03:54.766]                             version <- utils::packageVersion("future")
[18:03:54.766]                         }
[18:03:54.766]                         else {
[18:03:54.766]                           version <- NULL
[18:03:54.766]                         }
[18:03:54.766]                         if (!has_future || version < "1.8.0") {
[18:03:54.766]                           info <- base::c(r_version = base::gsub("R version ", 
[18:03:54.766]                             "", base::R.version$version.string), 
[18:03:54.766]                             platform = base::sprintf("%s (%s-bit)", 
[18:03:54.766]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[18:03:54.766]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[18:03:54.766]                               "release", "version")], collapse = " "), 
[18:03:54.766]                             hostname = base::Sys.info()[["nodename"]])
[18:03:54.766]                           info <- base::sprintf("%s: %s", base::names(info), 
[18:03:54.766]                             info)
[18:03:54.766]                           info <- base::paste(info, collapse = "; ")
[18:03:54.766]                           if (!has_future) {
[18:03:54.766]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[18:03:54.766]                               info)
[18:03:54.766]                           }
[18:03:54.766]                           else {
[18:03:54.766]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[18:03:54.766]                               info, version)
[18:03:54.766]                           }
[18:03:54.766]                           base::stop(msg)
[18:03:54.766]                         }
[18:03:54.766]                       })
[18:03:54.766]                     }
[18:03:54.766]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[18:03:54.766]                     base::options(mc.cores = 1L)
[18:03:54.766]                   }
[18:03:54.766]                   ...future.strategy.old <- future::plan("list")
[18:03:54.766]                   options(future.plan = NULL)
[18:03:54.766]                   Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.766]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[18:03:54.766]                 }
[18:03:54.766]                 ...future.workdir <- getwd()
[18:03:54.766]             }
[18:03:54.766]             ...future.oldOptions <- base::as.list(base::.Options)
[18:03:54.766]             ...future.oldEnvVars <- base::Sys.getenv()
[18:03:54.766]         }
[18:03:54.766]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[18:03:54.766]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[18:03:54.766]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[18:03:54.766]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[18:03:54.766]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[18:03:54.766]             future.stdout.windows.reencode = NULL, width = 80L)
[18:03:54.766]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[18:03:54.766]             base::names(...future.oldOptions))
[18:03:54.766]     }
[18:03:54.766]     if (FALSE) {
[18:03:54.766]     }
[18:03:54.766]     else {
[18:03:54.766]         if (TRUE) {
[18:03:54.766]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[18:03:54.766]                 open = "w")
[18:03:54.766]         }
[18:03:54.766]         else {
[18:03:54.766]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[18:03:54.766]                 windows = "NUL", "/dev/null"), open = "w")
[18:03:54.766]         }
[18:03:54.766]         base::sink(...future.stdout, type = "output", split = FALSE)
[18:03:54.766]         base::on.exit(if (!base::is.null(...future.stdout)) {
[18:03:54.766]             base::sink(type = "output", split = FALSE)
[18:03:54.766]             base::close(...future.stdout)
[18:03:54.766]         }, add = TRUE)
[18:03:54.766]     }
[18:03:54.766]     ...future.frame <- base::sys.nframe()
[18:03:54.766]     ...future.conditions <- base::list()
[18:03:54.766]     ...future.rng <- base::globalenv()$.Random.seed
[18:03:54.766]     if (FALSE) {
[18:03:54.766]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[18:03:54.766]             "...future.value", "...future.globalenv.names", ".Random.seed")
[18:03:54.766]     }
[18:03:54.766]     ...future.result <- base::tryCatch({
[18:03:54.766]         base::withCallingHandlers({
[18:03:54.766]             ...future.value <- base::withVisible(base::local({
[18:03:54.766]                 ...future.makeSendCondition <- base::local({
[18:03:54.766]                   sendCondition <- NULL
[18:03:54.766]                   function(frame = 1L) {
[18:03:54.766]                     if (is.function(sendCondition)) 
[18:03:54.766]                       return(sendCondition)
[18:03:54.766]                     ns <- getNamespace("parallel")
[18:03:54.766]                     if (exists("sendData", mode = "function", 
[18:03:54.766]                       envir = ns)) {
[18:03:54.766]                       parallel_sendData <- get("sendData", mode = "function", 
[18:03:54.766]                         envir = ns)
[18:03:54.766]                       envir <- sys.frame(frame)
[18:03:54.766]                       master <- NULL
[18:03:54.766]                       while (!identical(envir, .GlobalEnv) && 
[18:03:54.766]                         !identical(envir, emptyenv())) {
[18:03:54.766]                         if (exists("master", mode = "list", envir = envir, 
[18:03:54.766]                           inherits = FALSE)) {
[18:03:54.766]                           master <- get("master", mode = "list", 
[18:03:54.766]                             envir = envir, inherits = FALSE)
[18:03:54.766]                           if (inherits(master, c("SOCKnode", 
[18:03:54.766]                             "SOCK0node"))) {
[18:03:54.766]                             sendCondition <<- function(cond) {
[18:03:54.766]                               data <- list(type = "VALUE", value = cond, 
[18:03:54.766]                                 success = TRUE)
[18:03:54.766]                               parallel_sendData(master, data)
[18:03:54.766]                             }
[18:03:54.766]                             return(sendCondition)
[18:03:54.766]                           }
[18:03:54.766]                         }
[18:03:54.766]                         frame <- frame + 1L
[18:03:54.766]                         envir <- sys.frame(frame)
[18:03:54.766]                       }
[18:03:54.766]                     }
[18:03:54.766]                     sendCondition <<- function(cond) NULL
[18:03:54.766]                   }
[18:03:54.766]                 })
[18:03:54.766]                 withCallingHandlers({
[18:03:54.766]                   {
[18:03:54.766]                     42
[18:03:54.766]                   }
[18:03:54.766]                 }, immediateCondition = function(cond) {
[18:03:54.766]                   sendCondition <- ...future.makeSendCondition()
[18:03:54.766]                   sendCondition(cond)
[18:03:54.766]                   muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.766]                   {
[18:03:54.766]                     inherits <- base::inherits
[18:03:54.766]                     invokeRestart <- base::invokeRestart
[18:03:54.766]                     is.null <- base::is.null
[18:03:54.766]                     muffled <- FALSE
[18:03:54.766]                     if (inherits(cond, "message")) {
[18:03:54.766]                       muffled <- grepl(pattern, "muffleMessage")
[18:03:54.766]                       if (muffled) 
[18:03:54.766]                         invokeRestart("muffleMessage")
[18:03:54.766]                     }
[18:03:54.766]                     else if (inherits(cond, "warning")) {
[18:03:54.766]                       muffled <- grepl(pattern, "muffleWarning")
[18:03:54.766]                       if (muffled) 
[18:03:54.766]                         invokeRestart("muffleWarning")
[18:03:54.766]                     }
[18:03:54.766]                     else if (inherits(cond, "condition")) {
[18:03:54.766]                       if (!is.null(pattern)) {
[18:03:54.766]                         computeRestarts <- base::computeRestarts
[18:03:54.766]                         grepl <- base::grepl
[18:03:54.766]                         restarts <- computeRestarts(cond)
[18:03:54.766]                         for (restart in restarts) {
[18:03:54.766]                           name <- restart$name
[18:03:54.766]                           if (is.null(name)) 
[18:03:54.766]                             next
[18:03:54.766]                           if (!grepl(pattern, name)) 
[18:03:54.766]                             next
[18:03:54.766]                           invokeRestart(restart)
[18:03:54.766]                           muffled <- TRUE
[18:03:54.766]                           break
[18:03:54.766]                         }
[18:03:54.766]                       }
[18:03:54.766]                     }
[18:03:54.766]                     invisible(muffled)
[18:03:54.766]                   }
[18:03:54.766]                   muffleCondition(cond)
[18:03:54.766]                 })
[18:03:54.766]             }))
[18:03:54.766]             future::FutureResult(value = ...future.value$value, 
[18:03:54.766]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.766]                   ...future.rng), globalenv = if (FALSE) 
[18:03:54.766]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[18:03:54.766]                     ...future.globalenv.names))
[18:03:54.766]                 else NULL, started = ...future.startTime, version = "1.8")
[18:03:54.766]         }, condition = base::local({
[18:03:54.766]             c <- base::c
[18:03:54.766]             inherits <- base::inherits
[18:03:54.766]             invokeRestart <- base::invokeRestart
[18:03:54.766]             length <- base::length
[18:03:54.766]             list <- base::list
[18:03:54.766]             seq.int <- base::seq.int
[18:03:54.766]             signalCondition <- base::signalCondition
[18:03:54.766]             sys.calls <- base::sys.calls
[18:03:54.766]             `[[` <- base::`[[`
[18:03:54.766]             `+` <- base::`+`
[18:03:54.766]             `<<-` <- base::`<<-`
[18:03:54.766]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[18:03:54.766]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[18:03:54.766]                   3L)]
[18:03:54.766]             }
[18:03:54.766]             function(cond) {
[18:03:54.766]                 is_error <- inherits(cond, "error")
[18:03:54.766]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[18:03:54.766]                   NULL)
[18:03:54.766]                 if (is_error) {
[18:03:54.766]                   sessionInformation <- function() {
[18:03:54.766]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[18:03:54.766]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[18:03:54.766]                       search = base::search(), system = base::Sys.info())
[18:03:54.766]                   }
[18:03:54.766]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.766]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[18:03:54.766]                     cond$call), session = sessionInformation(), 
[18:03:54.766]                     timestamp = base::Sys.time(), signaled = 0L)
[18:03:54.766]                   signalCondition(cond)
[18:03:54.766]                 }
[18:03:54.766]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[18:03:54.766]                 "immediateCondition"))) {
[18:03:54.766]                   signal <- TRUE && inherits(cond, "immediateCondition")
[18:03:54.766]                   ...future.conditions[[length(...future.conditions) + 
[18:03:54.766]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[18:03:54.766]                   if (TRUE && !signal) {
[18:03:54.766]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.766]                     {
[18:03:54.766]                       inherits <- base::inherits
[18:03:54.766]                       invokeRestart <- base::invokeRestart
[18:03:54.766]                       is.null <- base::is.null
[18:03:54.766]                       muffled <- FALSE
[18:03:54.766]                       if (inherits(cond, "message")) {
[18:03:54.766]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.766]                         if (muffled) 
[18:03:54.766]                           invokeRestart("muffleMessage")
[18:03:54.766]                       }
[18:03:54.766]                       else if (inherits(cond, "warning")) {
[18:03:54.766]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.766]                         if (muffled) 
[18:03:54.766]                           invokeRestart("muffleWarning")
[18:03:54.766]                       }
[18:03:54.766]                       else if (inherits(cond, "condition")) {
[18:03:54.766]                         if (!is.null(pattern)) {
[18:03:54.766]                           computeRestarts <- base::computeRestarts
[18:03:54.766]                           grepl <- base::grepl
[18:03:54.766]                           restarts <- computeRestarts(cond)
[18:03:54.766]                           for (restart in restarts) {
[18:03:54.766]                             name <- restart$name
[18:03:54.766]                             if (is.null(name)) 
[18:03:54.766]                               next
[18:03:54.766]                             if (!grepl(pattern, name)) 
[18:03:54.766]                               next
[18:03:54.766]                             invokeRestart(restart)
[18:03:54.766]                             muffled <- TRUE
[18:03:54.766]                             break
[18:03:54.766]                           }
[18:03:54.766]                         }
[18:03:54.766]                       }
[18:03:54.766]                       invisible(muffled)
[18:03:54.766]                     }
[18:03:54.766]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.766]                   }
[18:03:54.766]                 }
[18:03:54.766]                 else {
[18:03:54.766]                   if (TRUE) {
[18:03:54.766]                     muffleCondition <- function (cond, pattern = "^muffle") 
[18:03:54.766]                     {
[18:03:54.766]                       inherits <- base::inherits
[18:03:54.766]                       invokeRestart <- base::invokeRestart
[18:03:54.766]                       is.null <- base::is.null
[18:03:54.766]                       muffled <- FALSE
[18:03:54.766]                       if (inherits(cond, "message")) {
[18:03:54.766]                         muffled <- grepl(pattern, "muffleMessage")
[18:03:54.766]                         if (muffled) 
[18:03:54.766]                           invokeRestart("muffleMessage")
[18:03:54.766]                       }
[18:03:54.766]                       else if (inherits(cond, "warning")) {
[18:03:54.766]                         muffled <- grepl(pattern, "muffleWarning")
[18:03:54.766]                         if (muffled) 
[18:03:54.766]                           invokeRestart("muffleWarning")
[18:03:54.766]                       }
[18:03:54.766]                       else if (inherits(cond, "condition")) {
[18:03:54.766]                         if (!is.null(pattern)) {
[18:03:54.766]                           computeRestarts <- base::computeRestarts
[18:03:54.766]                           grepl <- base::grepl
[18:03:54.766]                           restarts <- computeRestarts(cond)
[18:03:54.766]                           for (restart in restarts) {
[18:03:54.766]                             name <- restart$name
[18:03:54.766]                             if (is.null(name)) 
[18:03:54.766]                               next
[18:03:54.766]                             if (!grepl(pattern, name)) 
[18:03:54.766]                               next
[18:03:54.766]                             invokeRestart(restart)
[18:03:54.766]                             muffled <- TRUE
[18:03:54.766]                             break
[18:03:54.766]                           }
[18:03:54.766]                         }
[18:03:54.766]                       }
[18:03:54.766]                       invisible(muffled)
[18:03:54.766]                     }
[18:03:54.766]                     muffleCondition(cond, pattern = "^muffle")
[18:03:54.766]                   }
[18:03:54.766]                 }
[18:03:54.766]             }
[18:03:54.766]         }))
[18:03:54.766]     }, error = function(ex) {
[18:03:54.766]         base::structure(base::list(value = NULL, visible = NULL, 
[18:03:54.766]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[18:03:54.766]                 ...future.rng), started = ...future.startTime, 
[18:03:54.766]             finished = Sys.time(), session_uuid = NA_character_, 
[18:03:54.766]             version = "1.8"), class = "FutureResult")
[18:03:54.766]     }, finally = {
[18:03:54.766]         if (!identical(...future.workdir, getwd())) 
[18:03:54.766]             setwd(...future.workdir)
[18:03:54.766]         {
[18:03:54.766]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[18:03:54.766]                 ...future.oldOptions$nwarnings <- NULL
[18:03:54.766]             }
[18:03:54.766]             base::options(...future.oldOptions)
[18:03:54.766]             if (.Platform$OS.type == "windows") {
[18:03:54.766]                 old_names <- names(...future.oldEnvVars)
[18:03:54.766]                 envs <- base::Sys.getenv()
[18:03:54.766]                 names <- names(envs)
[18:03:54.766]                 common <- intersect(names, old_names)
[18:03:54.766]                 added <- setdiff(names, old_names)
[18:03:54.766]                 removed <- setdiff(old_names, names)
[18:03:54.766]                 changed <- common[...future.oldEnvVars[common] != 
[18:03:54.766]                   envs[common]]
[18:03:54.766]                 NAMES <- toupper(changed)
[18:03:54.766]                 args <- list()
[18:03:54.766]                 for (kk in seq_along(NAMES)) {
[18:03:54.766]                   name <- changed[[kk]]
[18:03:54.766]                   NAME <- NAMES[[kk]]
[18:03:54.766]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.766]                     next
[18:03:54.766]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.766]                 }
[18:03:54.766]                 NAMES <- toupper(added)
[18:03:54.766]                 for (kk in seq_along(NAMES)) {
[18:03:54.766]                   name <- added[[kk]]
[18:03:54.766]                   NAME <- NAMES[[kk]]
[18:03:54.766]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.766]                     next
[18:03:54.766]                   args[[name]] <- ""
[18:03:54.766]                 }
[18:03:54.766]                 NAMES <- toupper(removed)
[18:03:54.766]                 for (kk in seq_along(NAMES)) {
[18:03:54.766]                   name <- removed[[kk]]
[18:03:54.766]                   NAME <- NAMES[[kk]]
[18:03:54.766]                   if (name != NAME && is.element(NAME, old_names)) 
[18:03:54.766]                     next
[18:03:54.766]                   args[[name]] <- ...future.oldEnvVars[[name]]
[18:03:54.766]                 }
[18:03:54.766]                 if (length(args) > 0) 
[18:03:54.766]                   base::do.call(base::Sys.setenv, args = args)
[18:03:54.766]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[18:03:54.766]             }
[18:03:54.766]             else {
[18:03:54.766]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[18:03:54.766]             }
[18:03:54.766]             {
[18:03:54.766]                 if (base::length(...future.futureOptionsAdded) > 
[18:03:54.766]                   0L) {
[18:03:54.766]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[18:03:54.766]                   base::names(opts) <- ...future.futureOptionsAdded
[18:03:54.766]                   base::options(opts)
[18:03:54.766]                 }
[18:03:54.766]                 {
[18:03:54.766]                   {
[18:03:54.766]                     base::options(mc.cores = ...future.mc.cores.old)
[18:03:54.766]                     NULL
[18:03:54.766]                   }
[18:03:54.766]                   options(future.plan = NULL)
[18:03:54.766]                   if (is.na(NA_character_)) 
[18:03:54.766]                     Sys.unsetenv("R_FUTURE_PLAN")
[18:03:54.766]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[18:03:54.766]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[18:03:54.766]                     .init = FALSE)
[18:03:54.766]                 }
[18:03:54.766]             }
[18:03:54.766]         }
[18:03:54.766]     })
[18:03:54.766]     if (TRUE) {
[18:03:54.766]         base::sink(type = "output", split = FALSE)
[18:03:54.766]         if (TRUE) {
[18:03:54.766]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[18:03:54.766]         }
[18:03:54.766]         else {
[18:03:54.766]             ...future.result["stdout"] <- base::list(NULL)
[18:03:54.766]         }
[18:03:54.766]         base::close(...future.stdout)
[18:03:54.766]         ...future.stdout <- NULL
[18:03:54.766]     }
[18:03:54.766]     ...future.result$conditions <- ...future.conditions
[18:03:54.766]     ...future.result$finished <- base::Sys.time()
[18:03:54.766]     ...future.result
[18:03:54.766] }
[18:03:54.773] MultisessionFuture started
[18:03:54.773] - Launch lazy future ... done
[18:03:54.773] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 8fd7fbee-997d-d91f-cd06-9e4bd9e6002a
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[18:03:54.786] result() for ClusterFuture ...
[18:03:54.786] receiveMessageFromWorker() for ClusterFuture ...
[18:03:54.786] - Validating connection of MultisessionFuture
[18:03:54.816] - received message: FutureResult
[18:03:54.817] - Received FutureResult
[18:03:54.817] - Erased future from FutureRegistry
[18:03:54.817] result() for ClusterFuture ...
[18:03:54.818] - result already collected: FutureResult
[18:03:54.818] result() for ClusterFuture ... done
[18:03:54.818] receiveMessageFromWorker() for ClusterFuture ... done
[18:03:54.818] result() for ClusterFuture ... done
[18:03:54.819] result() for ClusterFuture ...
[18:03:54.819] - result already collected: FutureResult
[18:03:54.819] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[18:03:54.821] plan(): Setting new future strategy stack:
[18:03:54.821] List of future strategies:
[18:03:54.821] 1. FutureStrategy:
[18:03:54.821]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[18:03:54.821]    - tweaked: FALSE
[18:03:54.821]    - call: future::plan(oplan)
[18:03:54.823] plan(): nbrOfWorkers() = 1
> 
